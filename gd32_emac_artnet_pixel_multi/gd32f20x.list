
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08007000 <__gVectors>:
 8007000:	20040000 	andcs	r0, r4, r0
 8007004:	0800857d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, sl, pc}
 8007008:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800700c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007010:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007014:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007018:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
	...
 800702c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007030:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007034:	00000000 	andeq	r0, r0, r0
 8007038:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800703c:	08015e59 	stmdaeq	r1, {r0, r3, r4, r6, r9, sl, fp, ip, lr}
 8007040:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007044:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007048:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800704c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007050:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007054:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007058:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800705c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007060:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007064:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007068:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800706c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007070:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007074:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007078:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800707c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007080:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007084:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007088:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800708c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007090:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007094:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007098:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800709c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070a0:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070a4:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070a8:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070ac:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070b0:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070b4:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070b8:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070bc:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070c0:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070c4:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070c8:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070cc:	00000000 	andeq	r0, r0, r0
 80070d0:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070d4:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070d8:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070dc:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070e0:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070e4:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070e8:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070ec:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070f0:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070f4:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070f8:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070fc:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007100:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007104:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007108:	0800f80d 	stmdaeq	r0, {r0, r2, r3, fp, ip, sp, lr, pc}
 800710c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007110:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007114:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007118:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800711c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007120:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007124:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007128:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800712c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007130:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007134:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007138:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800713c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007140:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007144:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007148:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800714c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007150:	00000000 	andeq	r0, r0, r0
 8007154:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007158:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800715c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007160:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007164:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
	...
 8007178:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800717c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007180:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007184:	00000000 	andeq	r0, r0, r0
 8007188:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800718c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
	...
 80071a0:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80071a4:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}

Disassembly of section .text:

080071a8 <net_init>:
 80071a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ac:	460c      	mov	r4, r1
 80071ae:	4616      	mov	r6, r2
 80071b0:	9f06      	ldr	r7, [sp, #24]
 80071b2:	4a22      	ldr	r2, [pc, #136]	; (800723c <net_init+0x94>)
 80071b4:	461d      	mov	r5, r3
 80071b6:	1e43      	subs	r3, r0, #1
 80071b8:	3005      	adds	r0, #5
 80071ba:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80071be:	4283      	cmp	r3, r0
 80071c0:	f802 1b01 	strb.w	r1, [r2], #1
 80071c4:	d1f9      	bne.n	80071ba <net_init+0x12>
 80071c6:	4623      	mov	r3, r4
 80071c8:	4a1d      	ldr	r2, [pc, #116]	; (8007240 <net_init+0x98>)
 80071ca:	f104 010c 	add.w	r1, r4, #12
 80071ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80071d2:	428b      	cmp	r3, r1
 80071d4:	f802 0b01 	strb.w	r0, [r2], #1
 80071d8:	d1f9      	bne.n	80071ce <net_init+0x26>
 80071da:	f04f 0800 	mov.w	r8, #0
 80071de:	4918      	ldr	r1, [pc, #96]	; (8007240 <net_init+0x98>)
 80071e0:	4816      	ldr	r0, [pc, #88]	; (800723c <net_init+0x94>)
 80071e2:	f000 f9a7 	bl	8007534 <ip_init>
 80071e6:	4815      	ldr	r0, [pc, #84]	; (800723c <net_init+0x94>)
 80071e8:	f000 f83c 	bl	8007264 <rfc3927_init>
 80071ec:	f887 8000 	strb.w	r8, [r7]
 80071f0:	782b      	ldrb	r3, [r5, #0]
 80071f2:	b163      	cbz	r3, 800720e <net_init+0x66>
 80071f4:	4632      	mov	r2, r6
 80071f6:	4912      	ldr	r1, [pc, #72]	; (8007240 <net_init+0x98>)
 80071f8:	4810      	ldr	r0, [pc, #64]	; (800723c <net_init+0x94>)
 80071fa:	f00c fda7 	bl	8013d4c <dhcp_client>
 80071fe:	4540      	cmp	r0, r8
 8007200:	da05      	bge.n	800720e <net_init+0x66>
 8007202:	480f      	ldr	r0, [pc, #60]	; (8007240 <net_init+0x98>)
 8007204:	f885 8000 	strb.w	r8, [r5]
 8007208:	f00a ff0c 	bl	8012024 <rfc3927>
 800720c:	7038      	strb	r0, [r7, #0]
 800720e:	490c      	ldr	r1, [pc, #48]	; (8007240 <net_init+0x98>)
 8007210:	480a      	ldr	r0, [pc, #40]	; (800723c <net_init+0x94>)
 8007212:	f000 f883 	bl	800731c <arp_init>
 8007216:	480a      	ldr	r0, [pc, #40]	; (8007240 <net_init+0x98>)
 8007218:	f00c ffb8 	bl	801418c <ip_set_ip>
 800721c:	f000 f82e 	bl	800727c <tcp_init>
 8007220:	4a07      	ldr	r2, [pc, #28]	; (8007240 <net_init+0x98>)
 8007222:	1e63      	subs	r3, r4, #1
 8007224:	340b      	adds	r4, #11
 8007226:	f812 1b01 	ldrb.w	r1, [r2], #1
 800722a:	f803 1f01 	strb.w	r1, [r3, #1]!
 800722e:	429c      	cmp	r4, r3
 8007230:	d1f9      	bne.n	8007226 <net_init+0x7e>
 8007232:	782a      	ldrb	r2, [r5, #0]
 8007234:	4b03      	ldr	r3, [pc, #12]	; (8007244 <net_init+0x9c>)
 8007236:	701a      	strb	r2, [r3, #0]
 8007238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800723c:	20014e64 	andcs	r4, r1, r4, ror #28
 8007240:	20014e58 	andcs	r4, r1, r8, asr lr
 8007244:	20014e6a 	andcs	r4, r1, sl, ror #28

08007248 <net_shutdown>:
 8007248:	b508      	push	{r3, lr}
 800724a:	f000 f97e 	bl	800754a <ip_shutdown>
 800724e:	4b04      	ldr	r3, [pc, #16]	; (8007260 <net_shutdown+0x18>)
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	b11b      	cbz	r3, 800725c <net_shutdown+0x14>
 8007254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007258:	f00c be80 	b.w	8013f5c <dhcp_client_release>
 800725c:	bd08      	pop	{r3, pc}
 800725e:	bf00      	nop
 8007260:	20014e6a 	andcs	r4, r1, sl, ror #28

08007264 <rfc3927_init>:
 8007264:	4b04      	ldr	r3, [pc, #16]	; (8007278 <rfc3927_init+0x14>)
 8007266:	1d82      	adds	r2, r0, #6
 8007268:	4290      	cmp	r0, r2
 800726a:	d100      	bne.n	800726e <rfc3927_init+0xa>
 800726c:	4770      	bx	lr
 800726e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007272:	f803 1b01 	strb.w	r1, [r3], #1
 8007276:	e7f7      	b.n	8007268 <rfc3927_init+0x4>
 8007278:	20014e74 	andcs	r4, r1, r4, ror lr

0800727c <tcp_init>:
 800727c:	2206      	movs	r2, #6
 800727e:	b513      	push	{r0, r1, r4, lr}
 8007280:	4c0b      	ldr	r4, [pc, #44]	; (80072b0 <tcp_init+0x34>)
 8007282:	490c      	ldr	r1, [pc, #48]	; (80072b4 <tcp_init+0x38>)
 8007284:	18a0      	adds	r0, r4, r2
 8007286:	f00a ff27 	bl	80120d8 <memcpy.isra.0>
 800728a:	2308      	movs	r3, #8
 800728c:	2204      	movs	r2, #4
 800728e:	81a3      	strh	r3, [r4, #12]
 8007290:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <tcp_init+0x3c>)
 8007292:	eb0d 0102 	add.w	r1, sp, r2
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f104 001a 	add.w	r0, r4, #26
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	f00a ff1b 	bl	80120d8 <memcpy.isra.0>
 80072a2:	2345      	movs	r3, #69	; 0x45
 80072a4:	81e3      	strh	r3, [r4, #14]
 80072a6:	4b05      	ldr	r3, [pc, #20]	; (80072bc <tcp_init+0x40>)
 80072a8:	6163      	str	r3, [r4, #20]
 80072aa:	b002      	add	sp, #8
 80072ac:	bd10      	pop	{r4, pc}
 80072ae:	bf00      	nop
 80072b0:	20015a3c 	andcs	r5, r1, ip, lsr sl
 80072b4:	20014e64 	andcs	r4, r1, r4, ror #28
 80072b8:	20014e58 	andcs	r4, r1, r8, asr lr
 80072bc:	06400040 	strbeq	r0, [r0], -r0, asr #32

080072c0 <udp_init>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	2200      	movs	r2, #0
 80072c4:	2408      	movs	r4, #8
 80072c6:	460e      	mov	r6, r1
 80072c8:	4b0d      	ldr	r3, [pc, #52]	; (8007300 <udp_init+0x40>)
 80072ca:	490e      	ldr	r1, [pc, #56]	; (8007304 <udp_init+0x44>)
 80072cc:	3c01      	subs	r4, #1
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	805a      	strh	r2, [r3, #2]
 80072d2:	f841 2b04 	str.w	r2, [r1], #4
 80072d6:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 80072da:	d1f7      	bne.n	80072cc <udp_init+0xc>
 80072dc:	2206      	movs	r2, #6
 80072de:	4d0a      	ldr	r5, [pc, #40]	; (8007308 <udp_init+0x48>)
 80072e0:	4b0a      	ldr	r3, [pc, #40]	; (800730c <udp_init+0x4c>)
 80072e2:	4601      	mov	r1, r0
 80072e4:	18a8      	adds	r0, r5, r2
 80072e6:	801c      	strh	r4, [r3, #0]
 80072e8:	f00b f87a 	bl	80123e0 <memcpy.isra.0>
 80072ec:	4b08      	ldr	r3, [pc, #32]	; (8007310 <udp_init+0x50>)
 80072ee:	4630      	mov	r0, r6
 80072f0:	60eb      	str	r3, [r5, #12]
 80072f2:	4b08      	ldr	r3, [pc, #32]	; (8007314 <udp_init+0x54>)
 80072f4:	616b      	str	r3, [r5, #20]
 80072f6:	f00b f89b 	bl	8012430 <udp_set_ip>
 80072fa:	852c      	strh	r4, [r5, #40]	; 0x28
 80072fc:	bd70      	pop	{r4, r5, r6, pc}
 80072fe:	bf00      	nop
 8007300:	20016058 	andcs	r6, r1, r8, asr r0
 8007304:	20016038 	andcs	r6, r1, r8, lsr r0
 8007308:	2001bcf8 	strdcs	fp, [r1], -r8
 800730c:	20016034 	andcs	r6, r1, r4, lsr r0
 8007310:	00450008 	subeq	r0, r5, r8
 8007314:	11400040 	cmpne	r0, r0, asr #32

08007318 <udp_shutdown>:
 8007318:	4770      	bx	lr
	...

0800731c <arp_init>:
 800731c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007320:	4604      	mov	r4, r0
 8007322:	460d      	mov	r5, r1
 8007324:	f000 f876 	bl	8007414 <arp_cache_init>
 8007328:	2206      	movs	r2, #6
 800732a:	4621      	mov	r1, r4
 800732c:	482e      	ldr	r0, [pc, #184]	; (80073e8 <arp_init+0xcc>)
 800732e:	682f      	ldr	r7, [r5, #0]
 8007330:	f00c fb90 	bl	8013a54 <memcpy.isra.0>
 8007334:	4b2d      	ldr	r3, [pc, #180]	; (80073ec <arp_init+0xd0>)
 8007336:	2507      	movs	r5, #7
 8007338:	461e      	mov	r6, r3
 800733a:	22ff      	movs	r2, #255	; 0xff
 800733c:	3d01      	subs	r5, #1
 800733e:	d146      	bne.n	80073ce <arp_init+0xb2>
 8007340:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <arp_init+0xd4>)
 8007342:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80073f4 <arp_init+0xd8>
 8007346:	2206      	movs	r2, #6
 8007348:	e9c6 3803 	strd	r3, r8, [r6, #12]
 800734c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007350:	4621      	mov	r1, r4
 8007352:	4829      	ldr	r0, [pc, #164]	; (80073f8 <arp_init+0xdc>)
 8007354:	82b3      	strh	r3, [r6, #20]
 8007356:	f00c fb7d 	bl	8013a54 <memcpy.isra.0>
 800735a:	2307      	movs	r3, #7
 800735c:	4a27      	ldr	r2, [pc, #156]	; (80073fc <arp_init+0xe0>)
 800735e:	61f7      	str	r7, [r6, #28]
 8007360:	3b01      	subs	r3, #1
 8007362:	d137      	bne.n	80073d4 <arp_init+0xb8>
 8007364:	2206      	movs	r2, #6
 8007366:	4621      	mov	r1, r4
 8007368:	4825      	ldr	r0, [pc, #148]	; (8007400 <arp_init+0xe4>)
 800736a:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 800736e:	f00c fb71 	bl	8013a54 <memcpy.isra.0>
 8007372:	4a24      	ldr	r2, [pc, #144]	; (8007404 <arp_init+0xe8>)
 8007374:	2306      	movs	r3, #6
 8007376:	4615      	mov	r5, r2
 8007378:	21ff      	movs	r1, #255	; 0xff
 800737a:	3b01      	subs	r3, #1
 800737c:	d22d      	bcs.n	80073da <arp_init+0xbe>
 800737e:	4b1c      	ldr	r3, [pc, #112]	; (80073f0 <arp_init+0xd4>)
 8007380:	2206      	movs	r2, #6
 8007382:	e9c5 3803 	strd	r3, r8, [r5, #12]
 8007386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800738a:	4621      	mov	r1, r4
 800738c:	481e      	ldr	r0, [pc, #120]	; (8007408 <arp_init+0xec>)
 800738e:	82ab      	strh	r3, [r5, #20]
 8007390:	f00c fb60 	bl	8013a54 <memcpy.isra.0>
 8007394:	2307      	movs	r3, #7
 8007396:	2100      	movs	r1, #0
 8007398:	4a1c      	ldr	r2, [pc, #112]	; (800740c <arp_init+0xf0>)
 800739a:	61ef      	str	r7, [r5, #28]
 800739c:	3b01      	subs	r3, #1
 800739e:	d11f      	bne.n	80073e0 <arp_init+0xc4>
 80073a0:	2206      	movs	r2, #6
 80073a2:	4d1b      	ldr	r5, [pc, #108]	; (8007410 <arp_init+0xf4>)
 80073a4:	4621      	mov	r1, r4
 80073a6:	18a8      	adds	r0, r5, r2
 80073a8:	f00c fb54 	bl	8013a54 <memcpy.isra.0>
 80073ac:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <arp_init+0xd4>)
 80073ae:	4621      	mov	r1, r4
 80073b0:	e9c5 3803 	strd	r3, r8, [r5, #12]
 80073b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073b8:	f105 0016 	add.w	r0, r5, #22
 80073bc:	2206      	movs	r2, #6
 80073be:	82ab      	strh	r3, [r5, #20]
 80073c0:	f00c fb48 	bl	8013a54 <memcpy.isra.0>
 80073c4:	61ef      	str	r7, [r5, #28]
 80073c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073ca:	f00c bb4d 	b.w	8013a68 <arp_announce>
 80073ce:	f803 2b01 	strb.w	r2, [r3], #1
 80073d2:	e7b3      	b.n	800733c <arp_init+0x20>
 80073d4:	f802 5b01 	strb.w	r5, [r2], #1
 80073d8:	e7c2      	b.n	8007360 <arp_init+0x44>
 80073da:	f802 1b01 	strb.w	r1, [r2], #1
 80073de:	e7cc      	b.n	800737a <arp_init+0x5e>
 80073e0:	f802 1b01 	strb.w	r1, [r2], #1
 80073e4:	e7da      	b.n	800739c <arp_init+0x80>
 80073e6:	bf00      	nop
 80073e8:	2001c78e 	andcs	ip, r1, lr, lsl #15
 80073ec:	2001c788 	andcs	ip, r1, r8, lsl #15
 80073f0:	01000608 	tsteq	r0, r8, lsl #12
 80073f4:	04060008 	streq	r0, [r6], #-8
 80073f8:	2001c79e 	mulcs	r1, lr, r7
 80073fc:	2001c7a8 	andcs	ip, r1, r8, lsr #15
 8007400:	2001c7e6 	andcs	ip, r1, r6, ror #15
 8007404:	2001c7e0 	andcs	ip, r1, r0, ror #15
 8007408:	2001c7f6 	strdcs	ip, [r1], -r6
 800740c:	2001c800 	andcs	ip, r1, r0, lsl #16
 8007410:	2001c7b4 			; <UNDEFINED> instruction: 0x2001c7b4

08007414 <arp_cache_init>:
 8007414:	2300      	movs	r3, #0
 8007416:	4618      	mov	r0, r3
 8007418:	4a09      	ldr	r2, [pc, #36]	; (8007440 <arp_cache_init+0x2c>)
 800741a:	b510      	push	{r4, lr}
 800741c:	8013      	strh	r3, [r2, #0]
 800741e:	4a09      	ldr	r2, [pc, #36]	; (8007444 <arp_cache_init+0x30>)
 8007420:	4611      	mov	r1, r2
 8007422:	f842 0c04 	str.w	r0, [r2, #-4]
 8007426:	1d94      	adds	r4, r2, #6
 8007428:	42a1      	cmp	r1, r4
 800742a:	d105      	bne.n	8007438 <arp_cache_init+0x24>
 800742c:	3303      	adds	r3, #3
 800742e:	2b60      	cmp	r3, #96	; 0x60
 8007430:	f102 020c 	add.w	r2, r2, #12
 8007434:	d1f4      	bne.n	8007420 <arp_cache_init+0xc>
 8007436:	bd10      	pop	{r4, pc}
 8007438:	f801 0b01 	strb.w	r0, [r1], #1
 800743c:	e7f4      	b.n	8007428 <arp_cache_init+0x14>
 800743e:	bf00      	nop
 8007440:	2001c98c 	andcs	ip, r1, ip, lsl #19
 8007444:	2001c810 	andcs	ip, r1, r0, lsl r8

08007448 <igmp_init>:
 8007448:	2200      	movs	r2, #0
 800744a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800744e:	4605      	mov	r5, r0
 8007450:	4608      	mov	r0, r1
 8007452:	4611      	mov	r1, r2
 8007454:	4b23      	ldr	r3, [pc, #140]	; (80074e4 <igmp_init+0x9c>)
 8007456:	f103 0408 	add.w	r4, r3, #8
 800745a:	42a3      	cmp	r3, r4
 800745c:	d13e      	bne.n	80074dc <igmp_init+0x94>
 800745e:	3201      	adds	r2, #1
 8007460:	2a24      	cmp	r2, #36	; 0x24
 8007462:	d1f8      	bne.n	8007456 <igmp_init+0xe>
 8007464:	2600      	movs	r6, #0
 8007466:	4b20      	ldr	r3, [pc, #128]	; (80074e8 <igmp_init+0xa0>)
 8007468:	4c20      	ldr	r4, [pc, #128]	; (80074ec <igmp_init+0xa4>)
 800746a:	601e      	str	r6, [r3, #0]
 800746c:	4b20      	ldr	r3, [pc, #128]	; (80074f0 <igmp_init+0xa8>)
 800746e:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8007472:	801e      	strh	r6, [r3, #0]
 8007474:	f00c fdea 	bl	801404c <igmp_set_ip>
 8007478:	2201      	movs	r2, #1
 800747a:	4b1e      	ldr	r3, [pc, #120]	; (80074f4 <igmp_init+0xac>)
 800747c:	4629      	mov	r1, r5
 800747e:	801a      	strh	r2, [r3, #0]
 8007480:	225e      	movs	r2, #94	; 0x5e
 8007482:	709a      	strb	r2, [r3, #2]
 8007484:	2206      	movs	r2, #6
 8007486:	18a0      	adds	r0, r4, r2
 8007488:	f00c fd96 	bl	8013fb8 <memcpy.isra.0>
 800748c:	f240 4394 	movw	r3, #1172	; 0x494
 8007490:	8463      	strh	r3, [r4, #34]	; 0x22
 8007492:	2316      	movs	r3, #22
 8007494:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80074f8 <igmp_init+0xb0>
 8007498:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80074fc <igmp_init+0xb4>
 800749c:	84e3      	strh	r3, [r4, #38]	; 0x26
 800749e:	f8c4 9014 	str.w	r9, [r4, #20]
 80074a2:	4b17      	ldr	r3, [pc, #92]	; (8007500 <igmp_init+0xb8>)
 80074a4:	f8c4 800c 	str.w	r8, [r4, #12]
 80074a8:	8227      	strh	r7, [r4, #16]
 80074aa:	84a6      	strh	r6, [r4, #36]	; 0x24
 80074ac:	4c15      	ldr	r4, [pc, #84]	; (8007504 <igmp_init+0xbc>)
 80074ae:	2206      	movs	r2, #6
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074b6:	18a0      	adds	r0, r4, r2
 80074b8:	80a3      	strh	r3, [r4, #4]
 80074ba:	4629      	mov	r1, r5
 80074bc:	f00c fd7c 	bl	8013fb8 <memcpy.isra.0>
 80074c0:	23e0      	movs	r3, #224	; 0xe0
 80074c2:	83e3      	strh	r3, [r4, #30]
 80074c4:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 80074c8:	4a0f      	ldr	r2, [pc, #60]	; (8007508 <igmp_init+0xc0>)
 80074ca:	f8c4 9014 	str.w	r9, [r4, #20]
 80074ce:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80074d2:	f8c4 800c 	str.w	r8, [r4, #12]
 80074d6:	8227      	strh	r7, [r4, #16]
 80074d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074dc:	f803 1b01 	strb.w	r1, [r3], #1
 80074e0:	e7bb      	b.n	800745a <igmp_init+0x12>
 80074e2:	bf00      	nop
 80074e4:	2001cbc4 	andcs	ip, r1, r4, asr #23
 80074e8:	2001cce8 	andcs	ip, r1, r8, ror #25
 80074ec:	2001cd24 	andcs	ip, r1, r4, lsr #26
 80074f0:	2001cce4 	andcs	ip, r1, r4, ror #25
 80074f4:	2001cd1c 	andcs	ip, r1, ip, lsl sp
 80074f8:	02010040 	andeq	r0, r1, #64	; 0x40
 80074fc:	00460008 	subeq	r0, r6, r8
 8007500:	005e0001 	subseq	r0, lr, r1
 8007504:	2001ccec 	andcs	ip, r1, ip, ror #25
 8007508:	04940200 	ldreq	r0, [r4], #512	; 0x200

0800750c <igmp_shutdown>:
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	2500      	movs	r5, #0
 8007510:	462e      	mov	r6, r5
 8007512:	4c07      	ldr	r4, [pc, #28]	; (8007530 <igmp_shutdown+0x24>)
 8007514:	6820      	ldr	r0, [r4, #0]
 8007516:	b120      	cbz	r0, 8007522 <igmp_shutdown+0x16>
 8007518:	f00c fdf4 	bl	8014104 <igmp_leave>
 800751c:	6026      	str	r6, [r4, #0]
 800751e:	7166      	strb	r6, [r4, #5]
 8007520:	7126      	strb	r6, [r4, #4]
 8007522:	3501      	adds	r5, #1
 8007524:	2d24      	cmp	r5, #36	; 0x24
 8007526:	f104 0408 	add.w	r4, r4, #8
 800752a:	d1f3      	bne.n	8007514 <igmp_shutdown+0x8>
 800752c:	bd70      	pop	{r4, r5, r6, pc}
 800752e:	bf00      	nop
 8007530:	2001cbc4 	andcs	ip, r1, r4, asr #23

08007534 <ip_init>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4604      	mov	r4, r0
 8007538:	460d      	mov	r5, r1
 800753a:	f7ff fec1 	bl	80072c0 <udp_init>
 800753e:	4629      	mov	r1, r5
 8007540:	4620      	mov	r0, r4
 8007542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007546:	f7ff bf7f 	b.w	8007448 <igmp_init>

0800754a <ip_shutdown>:
 800754a:	b508      	push	{r3, lr}
 800754c:	f7ff ffde 	bl	800750c <igmp_shutdown>
 8007550:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007554:	f7ff bee0 	b.w	8007318 <udp_shutdown>

08007558 <console_init>:
 8007558:	b508      	push	{r3, lr}
 800755a:	f00e fc1f 	bl	8015d9c <uart0_init>
 800755e:	4804      	ldr	r0, [pc, #16]	; (8007570 <console_init+0x18>)
 8007560:	f00e fc4c 	bl	8015dfc <uart0_puts>
 8007564:	4803      	ldr	r0, [pc, #12]	; (8007574 <console_init+0x1c>)
 8007566:	f00e fc49 	bl	8015dfc <uart0_puts>
 800756a:	2000      	movs	r0, #0
 800756c:	bd08      	pop	{r3, pc}
 800756e:	bf00      	nop
 8007570:	08017db4 	stmdaeq	r1, {r2, r4, r5, r7, r8, sl, fp, ip, sp, lr}
 8007574:	0801a658 	stmdaeq	r1, {r3, r4, r6, r9, sl, sp, pc}

08007578 <net_handle>:
 8007578:	b510      	push	{r4, lr}
 800757a:	4c0c      	ldr	r4, [pc, #48]	; (80075ac <net_handle+0x34>)
 800757c:	4620      	mov	r0, r4
 800757e:	f00f fb09 	bl	8016b94 <emac_eth_recv>
 8007582:	2800      	cmp	r0, #0
 8007584:	dd07      	ble.n	8007596 <net_handle+0x1e>
 8007586:	6820      	ldr	r0, [r4, #0]
 8007588:	8983      	ldrh	r3, [r0, #12]
 800758a:	2b08      	cmp	r3, #8
 800758c:	d107      	bne.n	800759e <net_handle+0x26>
 800758e:	f000 fa6f 	bl	8007a70 <ip_handle>
 8007592:	f00f fb13 	bl	8016bbc <emac_free_pkt>
 8007596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800759a:	f00a bd33 	b.w	8012004 <net_timers_run>
 800759e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80075a2:	d1f6      	bne.n	8007592 <net_handle+0x1a>
 80075a4:	f000 fa08 	bl	80079b8 <arp_handle>
 80075a8:	e7f3      	b.n	8007592 <net_handle+0x1a>
 80075aa:	bf00      	nop
 80075ac:	20014e6c 	andcs	r4, r1, ip, ror #28

080075b0 <tcp_handle>:
 80075b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075b4:	4605      	mov	r5, r0
 80075b6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80075b8:	f8b0 8010 	ldrh.w	r8, [r0, #16]
 80075bc:	ba5b      	rev16	r3, r3
 80075be:	8443      	strh	r3, [r0, #34]	; 0x22
 80075c0:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80075c2:	f890 902e 	ldrb.w	r9, [r0, #46]	; 0x2e
 80075c6:	ba5b      	rev16	r3, r3
 80075c8:	8483      	strh	r3, [r0, #36]	; 0x24
 80075ca:	f00a fd8f 	bl	80120ec <_bswap32>
 80075ce:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 80075d0:	4ca5      	ldr	r4, [pc, #660]	; (8007868 <tcp_handle+0x2b8>)
 80075d2:	ba5b      	rev16	r3, r3
 80075d4:	862b      	strh	r3, [r5, #48]	; 0x30
 80075d6:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80075d8:	8822      	ldrh	r2, [r4, #0]
 80075da:	ba5b      	rev16	r3, r3
 80075dc:	86ab      	strh	r3, [r5, #52]	; 0x34
 80075de:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d14d      	bne.n	8007680 <tcp_handle+0xd0>
 80075e4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d00d      	beq.n	8007608 <tcp_handle+0x58>
 80075ec:	2204      	movs	r2, #4
 80075ee:	4668      	mov	r0, sp
 80075f0:	f105 011a 	add.w	r1, r5, #26
 80075f4:	f00a fd70 	bl	80120d8 <memcpy.isra.0>
 80075f8:	8862      	ldrh	r2, [r4, #2]
 80075fa:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d13f      	bne.n	8007680 <tcp_handle+0xd0>
 8007600:	6862      	ldr	r2, [r4, #4]
 8007602:	9b00      	ldr	r3, [sp, #0]
 8007604:	429a      	cmp	r2, r3
 8007606:	d13b      	bne.n	8007680 <tcp_handle+0xd0>
 8007608:	2204      	movs	r2, #4
 800760a:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 800760e:	eb0d 0002 	add.w	r0, sp, r2
 8007612:	f00a fd61 	bl	80120d8 <memcpy.isra.0>
 8007616:	2204      	movs	r2, #4
 8007618:	f105 0126 	add.w	r1, r5, #38	; 0x26
 800761c:	eb0d 0002 	add.w	r0, sp, r2
 8007620:	9e01      	ldr	r6, [sp, #4]
 8007622:	f00a fd59 	bl	80120d8 <memcpy.isra.0>
 8007626:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800762a:	9f01      	ldr	r7, [sp, #4]
 800762c:	2a01      	cmp	r2, #1
 800762e:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 8007632:	d01b      	beq.n	800766c <tcp_handle+0xbc>
 8007634:	1ed3      	subs	r3, r2, #3
 8007636:	2b07      	cmp	r3, #7
 8007638:	d822      	bhi.n	8007680 <tcp_handle+0xd0>
 800763a:	fa98 f198 	rev16.w	r1, r8
 800763e:	f64f 78ec 	movw	r8, #65516	; 0xffec
 8007642:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8007646:	eba8 0883 	sub.w	r8, r8, r3, lsl #2
 800764a:	4488      	add	r8, r1
 800764c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800764e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 8007652:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8007656:	fa1f f888 	uxth.w	r8, r8
 800765a:	2900      	cmp	r1, #0
 800765c:	d142      	bne.n	80076e4 <tcp_handle+0x134>
 800765e:	f1b8 0f00 	cmp.w	r8, #0
 8007662:	d16b      	bne.n	800773c <tcp_handle+0x18c>
 8007664:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007666:	42bb      	cmp	r3, r7
 8007668:	d168      	bne.n	800773c <tcp_handle+0x18c>
 800766a:	e048      	b.n	80076fe <tcp_handle+0x14e>
 800766c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007670:	075a      	lsls	r2, r3, #29
 8007672:	d405      	bmi.n	8007680 <tcp_handle+0xd0>
 8007674:	06d8      	lsls	r0, r3, #27
 8007676:	d506      	bpl.n	8007686 <tcp_handle+0xd6>
 8007678:	4628      	mov	r0, r5
 800767a:	497b      	ldr	r1, [pc, #492]	; (8007868 <tcp_handle+0x2b8>)
 800767c:	f00a fe02 	bl	8012284 <_send_reset>
 8007680:	b004      	add	sp, #16
 8007682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007686:	0799      	lsls	r1, r3, #30
 8007688:	d5fa      	bpl.n	8007680 <tcp_handle+0xd0>
 800768a:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 800768e:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8007692:	4668      	mov	r0, sp
 8007694:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007698:	f105 011a 	add.w	r1, r5, #26
 800769c:	2204      	movs	r2, #4
 800769e:	8063      	strh	r3, [r4, #2]
 80076a0:	f00a fd1a 	bl	80120d8 <memcpy.isra.0>
 80076a4:	2206      	movs	r2, #6
 80076a6:	9b00      	ldr	r3, [sp, #0]
 80076a8:	18a9      	adds	r1, r5, r2
 80076aa:	4870      	ldr	r0, [pc, #448]	; (800786c <tcp_handle+0x2bc>)
 80076ac:	6063      	str	r3, [r4, #4]
 80076ae:	f00a fd13 	bl	80120d8 <memcpy.isra.0>
 80076b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80076b4:	1c7b      	adds	r3, r7, #1
 80076b6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80076ba:	6363      	str	r3, [r4, #52]	; 0x34
 80076bc:	2312      	movs	r3, #18
 80076be:	486a      	ldr	r0, [pc, #424]	; (8007868 <tcp_handle+0x2b8>)
 80076c0:	a901      	add	r1, sp, #4
 80076c2:	f88d 300c 	strb.w	r3, [sp, #12]
 80076c6:	e9c4 7608 	strd	r7, r6, [r4, #32]
 80076ca:	63e7      	str	r7, [r4, #60]	; 0x3c
 80076cc:	f8c4 a018 	str.w	sl, [r4, #24]
 80076d0:	f00a fd32 	bl	8012138 <_tcp_send_package>
 80076d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	e9c4 3204 	strd	r3, r2, [r4, #16]
 80076dc:	2303      	movs	r3, #3
 80076de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80076e2:	e7cd      	b.n	8007680 <tcp_handle+0xd0>
 80076e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076e6:	eba3 0c07 	sub.w	ip, r3, r7
 80076ea:	f1b8 0f00 	cmp.w	r8, #0
 80076ee:	d10d      	bne.n	800770c <tcp_handle+0x15c>
 80076f0:	f1bc 0f00 	cmp.w	ip, #0
 80076f4:	dc22      	bgt.n	800773c <tcp_handle+0x18c>
 80076f6:	1afb      	subs	r3, r7, r3
 80076f8:	1a5b      	subs	r3, r3, r1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	da1e      	bge.n	800773c <tcp_handle+0x18c>
 80076fe:	0743      	lsls	r3, r0, #29
 8007700:	d530      	bpl.n	8007764 <tcp_handle+0x1b4>
 8007702:	8821      	ldrh	r1, [r4, #0]
 8007704:	4858      	ldr	r0, [pc, #352]	; (8007868 <tcp_handle+0x2b8>)
 8007706:	f00a fccd 	bl	80120a4 <_init_tcb>
 800770a:	e7b9      	b.n	8007680 <tcp_handle+0xd0>
 800770c:	f1bc 0f00 	cmp.w	ip, #0
 8007710:	dc06      	bgt.n	8007720 <tcp_handle+0x170>
 8007712:	eba7 0c03 	sub.w	ip, r7, r3
 8007716:	ebac 0c01 	sub.w	ip, ip, r1
 800771a:	f1bc 0f00 	cmp.w	ip, #0
 800771e:	dbee      	blt.n	80076fe <tcp_handle+0x14e>
 8007720:	eb08 0c07 	add.w	ip, r8, r7
 8007724:	f103 0e01 	add.w	lr, r3, #1
 8007728:	ebae 0e0c 	sub.w	lr, lr, ip
 800772c:	f1be 0f00 	cmp.w	lr, #0
 8007730:	dc04      	bgt.n	800773c <tcp_handle+0x18c>
 8007732:	43db      	mvns	r3, r3
 8007734:	1a5b      	subs	r3, r3, r1
 8007736:	eb13 0f0c 	cmn.w	r3, ip
 800773a:	d4e0      	bmi.n	80076fe <tcp_handle+0x14e>
 800773c:	0742      	lsls	r2, r0, #29
 800773e:	d505      	bpl.n	800774c <tcp_handle+0x19c>
 8007740:	8821      	ldrh	r1, [r4, #0]
 8007742:	4849      	ldr	r0, [pc, #292]	; (8007868 <tcp_handle+0x2b8>)
 8007744:	f00a fcae 	bl	80120a4 <_init_tcb>
 8007748:	2301      	movs	r3, #1
 800774a:	e7c8      	b.n	80076de <tcp_handle+0x12e>
 800774c:	6963      	ldr	r3, [r4, #20]
 800774e:	9301      	str	r3, [sp, #4]
 8007750:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007752:	9302      	str	r3, [sp, #8]
 8007754:	2310      	movs	r3, #16
 8007756:	4844      	ldr	r0, [pc, #272]	; (8007868 <tcp_handle+0x2b8>)
 8007758:	a901      	add	r1, sp, #4
 800775a:	f88d 300c 	strb.w	r3, [sp, #12]
 800775e:	f00a fceb 	bl	8012138 <_tcp_send_package>
 8007762:	e78d      	b.n	8007680 <tcp_handle+0xd0>
 8007764:	0781      	lsls	r1, r0, #30
 8007766:	d505      	bpl.n	8007774 <tcp_handle+0x1c4>
 8007768:	2a03      	cmp	r2, #3
 800776a:	d0ed      	beq.n	8007748 <tcp_handle+0x198>
 800776c:	4628      	mov	r0, r5
 800776e:	493e      	ldr	r1, [pc, #248]	; (8007868 <tcp_handle+0x2b8>)
 8007770:	f00a fd88 	bl	8012284 <_send_reset>
 8007774:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007778:	06da      	lsls	r2, r3, #27
 800777a:	d581      	bpl.n	8007680 <tcp_handle+0xd0>
 800777c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007780:	3b03      	subs	r3, #3
 8007782:	2b07      	cmp	r3, #7
 8007784:	d818      	bhi.n	80077b8 <tcp_handle+0x208>
 8007786:	e8df f003 	tbb	[pc, r3]
 800778a:	75757504 	ldrbvc	r7, [r5, #-1284]!	; 0xfffffafc
 800778e:	a59c7575 	ldrge	r7, [ip, #1397]	; 0x575
 8007792:	6923      	ldr	r3, [r4, #16]
 8007794:	1b9b      	subs	r3, r3, r6
 8007796:	2b00      	cmp	r3, #0
 8007798:	dc0a      	bgt.n	80077b0 <tcp_handle+0x200>
 800779a:	6963      	ldr	r3, [r4, #20]
 800779c:	1af3      	subs	r3, r6, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	dc06      	bgt.n	80077b0 <tcp_handle+0x200>
 80077a2:	2304      	movs	r3, #4
 80077a4:	e9c4 7608 	strd	r7, r6, [r4, #32]
 80077a8:	f8c4 a018 	str.w	sl, [r4, #24]
 80077ac:	6126      	str	r6, [r4, #16]
 80077ae:	e796      	b.n	80076de <tcp_handle+0x12e>
 80077b0:	4628      	mov	r0, r5
 80077b2:	492d      	ldr	r1, [pc, #180]	; (8007868 <tcp_handle+0x2b8>)
 80077b4:	f00a fd66 	bl	8012284 <_send_reset>
 80077b8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80077bc:	3b04      	subs	r3, #4
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d830      	bhi.n	8007824 <tcp_handle+0x274>
 80077c2:	f1b8 0f00 	cmp.w	r8, #0
 80077c6:	d02d      	beq.n	8007824 <tcp_handle+0x274>
 80077c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077ca:	42bb      	cmp	r3, r7
 80077cc:	f040 8091 	bne.w	80078f2 <tcp_handle+0x342>
 80077d0:	f240 53b6 	movw	r3, #1462	; 0x5b6
 80077d4:	f8df a098 	ldr.w	sl, [pc, #152]	; 8007870 <tcp_handle+0x2c0>
 80077d8:	f105 0122 	add.w	r1, r5, #34	; 0x22
 80077dc:	f8ba 7000 	ldrh.w	r7, [sl]
 80077e0:	4642      	mov	r2, r8
 80077e2:	435f      	muls	r7, r3
 80077e4:	1d38      	adds	r0, r7, #4
 80077e6:	4449      	add	r1, r9
 80077e8:	4450      	add	r0, sl
 80077ea:	f00a fc75 	bl	80120d8 <memcpy.isra.0>
 80077ee:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80077f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077f2:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 80077f6:	8722      	strh	r2, [r4, #56]	; 0x38
 80077f8:	6962      	ldr	r2, [r4, #20]
 80077fa:	4443      	add	r3, r8
 80077fc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007800:	6363      	str	r3, [r4, #52]	; 0x34
 8007802:	2310      	movs	r3, #16
 8007804:	4457      	add	r7, sl
 8007806:	4818      	ldr	r0, [pc, #96]	; (8007868 <tcp_handle+0x2b8>)
 8007808:	f8a7 85b8 	strh.w	r8, [r7, #1464]	; 0x5b8
 800780c:	a901      	add	r1, sp, #4
 800780e:	f88d 300c 	strb.w	r3, [sp, #12]
 8007812:	f00a fc91 	bl	8012138 <_tcp_send_package>
 8007816:	f8ba 3000 	ldrh.w	r3, [sl]
 800781a:	3301      	adds	r3, #1
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	f8aa 3000 	strh.w	r3, [sl]
 8007824:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007828:	2b02      	cmp	r3, #2
 800782a:	f67f af29 	bls.w	8007680 <tcp_handle+0xd0>
 800782e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007832:	07db      	lsls	r3, r3, #31
 8007834:	f57f af24 	bpl.w	8007680 <tcp_handle+0xd0>
 8007838:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800783a:	6962      	ldr	r2, [r4, #20]
 800783c:	3301      	adds	r3, #1
 800783e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007842:	6363      	str	r3, [r4, #52]	; 0x34
 8007844:	2310      	movs	r3, #16
 8007846:	4808      	ldr	r0, [pc, #32]	; (8007868 <tcp_handle+0x2b8>)
 8007848:	a901      	add	r1, sp, #4
 800784a:	f88d 300c 	strb.w	r3, [sp, #12]
 800784e:	f00a fc73 	bl	8012138 <_tcp_send_package>
 8007852:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007856:	2b05      	cmp	r3, #5
 8007858:	d053      	beq.n	8007902 <tcp_handle+0x352>
 800785a:	d84d      	bhi.n	80078f8 <tcp_handle+0x348>
 800785c:	3b03      	subs	r3, #3
 800785e:	2b01      	cmp	r3, #1
 8007860:	f63f af0e 	bhi.w	8007680 <tcp_handle+0xd0>
 8007864:	2307      	movs	r3, #7
 8007866:	e73a      	b.n	80076de <tcp_handle+0x12e>
 8007868:	200159f8 	strdcs	r5, [r1], -r8
 800786c:	20015a00 	andcs	r5, r1, r0, lsl #20
 8007870:	20014e88 	andcs	r4, r1, r8, lsl #29
 8007874:	6923      	ldr	r3, [r4, #16]
 8007876:	1b99      	subs	r1, r3, r6
 8007878:	d513      	bpl.n	80078a2 <tcp_handle+0x2f2>
 800787a:	6962      	ldr	r2, [r4, #20]
 800787c:	1ab2      	subs	r2, r6, r2
 800787e:	2a00      	cmp	r2, #0
 8007880:	dc0f      	bgt.n	80078a2 <tcp_handle+0x2f2>
 8007882:	6126      	str	r6, [r4, #16]
 8007884:	6a23      	ldr	r3, [r4, #32]
 8007886:	1bda      	subs	r2, r3, r7
 8007888:	2a00      	cmp	r2, #0
 800788a:	db05      	blt.n	8007898 <tcp_handle+0x2e8>
 800788c:	42bb      	cmp	r3, r7
 800788e:	d193      	bne.n	80077b8 <tcp_handle+0x208>
 8007890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007892:	1b9b      	subs	r3, r3, r6
 8007894:	2b00      	cmp	r3, #0
 8007896:	dc8f      	bgt.n	80077b8 <tcp_handle+0x208>
 8007898:	e9c4 7608 	strd	r7, r6, [r4, #32]
 800789c:	f8c4 a018 	str.w	sl, [r4, #24]
 80078a0:	e78a      	b.n	80077b8 <tcp_handle+0x208>
 80078a2:	1af3      	subs	r3, r6, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	dc06      	bgt.n	80078b6 <tcp_handle+0x306>
 80078a8:	2900      	cmp	r1, #0
 80078aa:	dc85      	bgt.n	80077b8 <tcp_handle+0x208>
 80078ac:	6963      	ldr	r3, [r4, #20]
 80078ae:	1af3      	subs	r3, r6, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dc81      	bgt.n	80077b8 <tcp_handle+0x208>
 80078b4:	e7e6      	b.n	8007884 <tcp_handle+0x2d4>
 80078b6:	6963      	ldr	r3, [r4, #20]
 80078b8:	1b9a      	subs	r2, r3, r6
 80078ba:	2a00      	cmp	r2, #0
 80078bc:	f6bf af7c 	bge.w	80077b8 <tcp_handle+0x208>
 80078c0:	e745      	b.n	800774e <tcp_handle+0x19e>
 80078c2:	6963      	ldr	r3, [r4, #20]
 80078c4:	42b3      	cmp	r3, r6
 80078c6:	f47f af77 	bne.w	80077b8 <tcp_handle+0x208>
 80078ca:	8821      	ldrh	r1, [r4, #0]
 80078cc:	480f      	ldr	r0, [pc, #60]	; (800790c <tcp_handle+0x35c>)
 80078ce:	f00a fbe9 	bl	80120a4 <_init_tcb>
 80078d2:	e771      	b.n	80077b8 <tcp_handle+0x208>
 80078d4:	6963      	ldr	r3, [r4, #20]
 80078d6:	42b3      	cmp	r3, r6
 80078d8:	f47f af6e 	bne.w	80077b8 <tcp_handle+0x208>
 80078dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078de:	480b      	ldr	r0, [pc, #44]	; (800790c <tcp_handle+0x35c>)
 80078e0:	9302      	str	r3, [sp, #8]
 80078e2:	2310      	movs	r3, #16
 80078e4:	a901      	add	r1, sp, #4
 80078e6:	9601      	str	r6, [sp, #4]
 80078e8:	f88d 300c 	strb.w	r3, [sp, #12]
 80078ec:	f00a fc24 	bl	8012138 <_tcp_send_package>
 80078f0:	e762      	b.n	80077b8 <tcp_handle+0x208>
 80078f2:	6962      	ldr	r2, [r4, #20]
 80078f4:	9201      	str	r2, [sp, #4]
 80078f6:	e72c      	b.n	8007752 <tcp_handle+0x1a2>
 80078f8:	2b06      	cmp	r3, #6
 80078fa:	f47f aec1 	bne.w	8007680 <tcp_handle+0xd0>
 80078fe:	230a      	movs	r3, #10
 8007900:	e6ed      	b.n	80076de <tcp_handle+0x12e>
 8007902:	6963      	ldr	r3, [r4, #20]
 8007904:	42b3      	cmp	r3, r6
 8007906:	d0fa      	beq.n	80078fe <tcp_handle+0x34e>
 8007908:	2308      	movs	r3, #8
 800790a:	e6e8      	b.n	80076de <tcp_handle+0x12e>
 800790c:	200159f8 	strdcs	r5, [r1], -r8

08007910 <udp_handle>:
 8007910:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007914:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8007916:	4607      	mov	r7, r0
 8007918:	ba5b      	rev16	r3, r3
 800791a:	b29b      	uxth	r3, r3
 800791c:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 8007920:	2a01      	cmp	r2, #1
 8007922:	d904      	bls.n	800792e <udp_handle+0x1e>
 8007924:	2b7b      	cmp	r3, #123	; 0x7b
 8007926:	d002      	beq.n	800792e <udp_handle+0x1e>
 8007928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800792c:	d308      	bcc.n	8007940 <udp_handle+0x30>
 800792e:	2400      	movs	r4, #0
 8007930:	4a1f      	ldr	r2, [pc, #124]	; (80079b0 <udp_handle+0xa0>)
 8007932:	f852 1b04 	ldr.w	r1, [r2], #4
 8007936:	4299      	cmp	r1, r3
 8007938:	d005      	beq.n	8007946 <udp_handle+0x36>
 800793a:	3401      	adds	r4, #1
 800793c:	2c08      	cmp	r4, #8
 800793e:	d1f8      	bne.n	8007932 <udp_handle+0x22>
 8007940:	b002      	add	sp, #8
 8007942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007946:	f640 3394 	movw	r3, #2964	; 0xb94
 800794a:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 800794c:	435c      	muls	r4, r3
 800794e:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 8007952:	ba76      	rev16	r6, r6
 8007954:	3e08      	subs	r6, #8
 8007956:	b2b6      	uxth	r6, r6
 8007958:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 800795c:	bf28      	it	cs
 800795e:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 8007962:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80079b4 <udp_handle+0xa4>
 8007966:	1d20      	adds	r0, r4, #4
 8007968:	f838 5004 	ldrh.w	r5, [r8, r4]
 800796c:	4632      	mov	r2, r6
 800796e:	435d      	muls	r5, r3
 8007970:	4428      	add	r0, r5
 8007972:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8007976:	4440      	add	r0, r8
 8007978:	f00a fd32 	bl	80123e0 <memcpy.isra.0>
 800797c:	2204      	movs	r2, #4
 800797e:	f107 011a 	add.w	r1, r7, #26
 8007982:	eb0d 0002 	add.w	r0, sp, r2
 8007986:	f00a fd2b 	bl	80123e0 <memcpy.isra.0>
 800798a:	9a01      	ldr	r2, [sp, #4]
 800798c:	192b      	adds	r3, r5, r4
 800798e:	4443      	add	r3, r8
 8007990:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 8007994:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007996:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 800799a:	ba52      	rev16	r2, r2
 800799c:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 80079a0:	f838 3004 	ldrh.w	r3, [r8, r4]
 80079a4:	3301      	adds	r3, #1
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	f828 3004 	strh.w	r3, [r8, r4]
 80079ae:	e7c7      	b.n	8007940 <udp_handle+0x30>
 80079b0:	20016038 	andcs	r6, r1, r8, lsr r0
 80079b4:	20016058 	andcs	r6, r1, r8, asr r0

080079b8 <arp_handle>:
 80079b8:	8a83      	ldrh	r3, [r0, #20]
 80079ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079be:	d003      	beq.n	80079c8 <arp_handle+0x10>
 80079c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c4:	d002      	beq.n	80079cc <arp_handle+0x14>
 80079c6:	4770      	bx	lr
 80079c8:	f00c b858 	b.w	8013a7c <arp_handle_request>
 80079cc:	f00c b87e 	b.w	8013acc <arp_handle_reply>

080079d0 <igmp_handle>:
 80079d0:	7b83      	ldrb	r3, [r0, #14]
 80079d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079d6:	2b45      	cmp	r3, #69	; 0x45
 80079d8:	d116      	bne.n	8007a08 <igmp_handle+0x38>
 80079da:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80079de:	2b11      	cmp	r3, #17
 80079e0:	d112      	bne.n	8007a08 <igmp_handle+0x38>
 80079e2:	4b20      	ldr	r3, [pc, #128]	; (8007a64 <igmp_handle+0x94>)
 80079e4:	f100 051e 	add.w	r5, r0, #30
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	466a      	mov	r2, sp
 80079ec:	462b      	mov	r3, r5
 80079ee:	f100 0622 	add.w	r6, r0, #34	; 0x22
 80079f2:	42b3      	cmp	r3, r6
 80079f4:	d10b      	bne.n	8007a0e <igmp_handle+0x3e>
 80079f6:	2401      	movs	r4, #1
 80079f8:	2100      	movs	r1, #0
 80079fa:	f04f 0c01 	mov.w	ip, #1
 80079fe:	4b1a      	ldr	r3, [pc, #104]	; (8007a68 <igmp_handle+0x98>)
 8007a00:	4a1a      	ldr	r2, [pc, #104]	; (8007a6c <igmp_handle+0x9c>)
 8007a02:	681f      	ldr	r7, [r3, #0]
 8007a04:	428f      	cmp	r7, r1
 8007a06:	d10a      	bne.n	8007a1e <igmp_handle+0x4e>
 8007a08:	b003      	add	sp, #12
 8007a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a0e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8007a12:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007a16:	428c      	cmp	r4, r1
 8007a18:	d0eb      	beq.n	80079f2 <igmp_handle+0x22>
 8007a1a:	2400      	movs	r4, #0
 8007a1c:	e7ec      	b.n	80079f8 <igmp_handle+0x28>
 8007a1e:	6813      	ldr	r3, [r2, #0]
 8007a20:	9301      	str	r3, [sp, #4]
 8007a22:	b924      	cbnz	r4, 8007a2e <igmp_handle+0x5e>
 8007a24:	462b      	mov	r3, r5
 8007a26:	f10d 0e04 	add.w	lr, sp, #4
 8007a2a:	42b3      	cmp	r3, r6
 8007a2c:	d10e      	bne.n	8007a4c <igmp_handle+0x7c>
 8007a2e:	f892 e005 	ldrb.w	lr, [r2, #5]
 8007a32:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8007a36:	f1be 0f01 	cmp.w	lr, #1
 8007a3a:	d110      	bne.n	8007a5e <igmp_handle+0x8e>
 8007a3c:	f892 e004 	ldrb.w	lr, [r2, #4]
 8007a40:	459e      	cmp	lr, r3
 8007a42:	d909      	bls.n	8007a58 <igmp_handle+0x88>
 8007a44:	085b      	lsrs	r3, r3, #1
 8007a46:	3301      	adds	r3, #1
 8007a48:	7113      	strb	r3, [r2, #4]
 8007a4a:	e005      	b.n	8007a58 <igmp_handle+0x88>
 8007a4c:	f813 9b01 	ldrb.w	r9, [r3], #1
 8007a50:	f81e 8b01 	ldrb.w	r8, [lr], #1
 8007a54:	45c1      	cmp	r9, r8
 8007a56:	d0e8      	beq.n	8007a2a <igmp_handle+0x5a>
 8007a58:	3101      	adds	r1, #1
 8007a5a:	3208      	adds	r2, #8
 8007a5c:	e7d2      	b.n	8007a04 <igmp_handle+0x34>
 8007a5e:	f882 c005 	strb.w	ip, [r2, #5]
 8007a62:	e7ef      	b.n	8007a44 <igmp_handle+0x74>
 8007a64:	010000e0 	smlatteq	r0, r0, r0, r0
 8007a68:	2001cce8 	andcs	ip, r1, r8, ror #25
 8007a6c:	2001cbc4 	andcs	ip, r1, r4, asr #23

08007a70 <ip_handle>:
 8007a70:	7b82      	ldrb	r2, [r0, #14]
 8007a72:	7dc3      	ldrb	r3, [r0, #23]
 8007a74:	2a45      	cmp	r2, #69	; 0x45
 8007a76:	d003      	beq.n	8007a80 <ip_handle+0x10>
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d111      	bne.n	8007aa0 <ip_handle+0x30>
 8007a7c:	f7ff bfa8 	b.w	80079d0 <igmp_handle>
 8007a80:	2b06      	cmp	r3, #6
 8007a82:	d00b      	beq.n	8007a9c <ip_handle+0x2c>
 8007a84:	d804      	bhi.n	8007a90 <ip_handle+0x20>
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d006      	beq.n	8007a98 <ip_handle+0x28>
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d0f6      	beq.n	8007a7c <ip_handle+0xc>
 8007a8e:	4770      	bx	lr
 8007a90:	2b11      	cmp	r3, #17
 8007a92:	d105      	bne.n	8007aa0 <ip_handle+0x30>
 8007a94:	f7ff bf3c 	b.w	8007910 <udp_handle>
 8007a98:	f000 b804 	b.w	8007aa4 <icmp_handle>
 8007a9c:	f7ff bd88 	b.w	80075b0 <tcp_handle>
 8007aa0:	4770      	bx	lr
	...

08007aa4 <icmp_handle>:
 8007aa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007aa6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007aaa:	4604      	mov	r4, r0
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d13e      	bne.n	8007b2e <icmp_handle+0x8a>
 8007ab0:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8007ab4:	2d00      	cmp	r5, #0
 8007ab6:	d13a      	bne.n	8007b2e <icmp_handle+0x8a>
 8007ab8:	1d86      	adds	r6, r0, #6
 8007aba:	4631      	mov	r1, r6
 8007abc:	2206      	movs	r2, #6
 8007abe:	f00c fb87 	bl	80141d0 <memcpy.isra.0>
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	2206      	movs	r2, #6
 8007ac6:	491b      	ldr	r1, [pc, #108]	; (8007b34 <icmp_handle+0x90>)
 8007ac8:	f00c fb82 	bl	80141d0 <memcpy.isra.0>
 8007acc:	8a63      	ldrh	r3, [r4, #18]
 8007ace:	f104 061a 	add.w	r6, r4, #26
 8007ad2:	43db      	mvns	r3, r3
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	2204      	movs	r2, #4
 8007ad8:	8263      	strh	r3, [r4, #18]
 8007ada:	f104 001e 	add.w	r0, r4, #30
 8007ade:	f00c fb77 	bl	80141d0 <memcpy.isra.0>
 8007ae2:	2204      	movs	r2, #4
 8007ae4:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <icmp_handle+0x94>)
 8007ae6:	eb0d 0102 	add.w	r1, sp, r2
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4630      	mov	r0, r6
 8007aee:	f104 060e 	add.w	r6, r4, #14
 8007af2:	9301      	str	r3, [sp, #4]
 8007af4:	f00c fb6c 	bl	80141d0 <memcpy.isra.0>
 8007af8:	2114      	movs	r1, #20
 8007afa:	4630      	mov	r0, r6
 8007afc:	7625      	strb	r5, [r4, #24]
 8007afe:	7665      	strb	r5, [r4, #25]
 8007b00:	f00c fb4d 	bl	801419e <net_chksum>
 8007b04:	8a21      	ldrh	r1, [r4, #16]
 8007b06:	8320      	strh	r0, [r4, #24]
 8007b08:	ba49      	rev16	r1, r1
 8007b0a:	b289      	uxth	r1, r1
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8007b12:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8007b16:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8007b1a:	f00c fb40 	bl	801419e <net_chksum>
 8007b1e:	8a21      	ldrh	r1, [r4, #16]
 8007b20:	84a0      	strh	r0, [r4, #36]	; 0x24
 8007b22:	ba49      	rev16	r1, r1
 8007b24:	b289      	uxth	r1, r1
 8007b26:	4620      	mov	r0, r4
 8007b28:	310e      	adds	r1, #14
 8007b2a:	f00f f84b 	bl	8016bc4 <emac_eth_send>
 8007b2e:	b002      	add	sp, #8
 8007b30:	bd70      	pop	{r4, r5, r6, pc}
 8007b32:	bf00      	nop
 8007b34:	20014e64 	andcs	r4, r1, r4, ror #28
 8007b38:	20014e58 	andcs	r4, r1, r8, asr lr

08007b3c <__aeabi_d2f>:
 8007b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8007b44:	bf24      	itt	cs
 8007b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8007b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8007b4e:	d90d      	bls.n	8007b6c <__aeabi_d2f+0x30>
 8007b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8007b64:	bf08      	it	eq
 8007b66:	f020 0001 	biceq.w	r0, r0, #1
 8007b6a:	4770      	bx	lr
 8007b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007b70:	d121      	bne.n	8007bb6 <__aeabi_d2f+0x7a>
 8007b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8007b76:	bfbc      	itt	lt
 8007b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8007b7c:	4770      	bxlt	lr
 8007b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8007b86:	f1c2 0218 	rsb	r2, r2, #24
 8007b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8007b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8007b92:	fa20 f002 	lsr.w	r0, r0, r2
 8007b96:	bf18      	it	ne
 8007b98:	f040 0001 	orrne.w	r0, r0, #1
 8007b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8007ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8007ba8:	ea40 000c 	orr.w	r0, r0, ip
 8007bac:	fa23 f302 	lsr.w	r3, r3, r2
 8007bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007bb4:	e7cc      	b.n	8007b50 <__aeabi_d2f+0x14>
 8007bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8007bba:	d107      	bne.n	8007bcc <__aeabi_d2f+0x90>
 8007bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8007bc0:	bf1e      	ittt	ne
 8007bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8007bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8007bca:	4770      	bxne	lr
 8007bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8007bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop

08007bdc <__aeabi_frsub>:
 8007bdc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8007be0:	e002      	b.n	8007be8 <__addsf3>
 8007be2:	bf00      	nop

08007be4 <__aeabi_fsub>:
 8007be4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08007be8 <__addsf3>:
 8007be8:	0042      	lsls	r2, r0, #1
 8007bea:	bf1f      	itttt	ne
 8007bec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8007bf0:	ea92 0f03 	teqne	r2, r3
 8007bf4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8007bf8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007bfc:	d06a      	beq.n	8007cd4 <__addsf3+0xec>
 8007bfe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8007c02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8007c06:	bfc1      	itttt	gt
 8007c08:	18d2      	addgt	r2, r2, r3
 8007c0a:	4041      	eorgt	r1, r0
 8007c0c:	4048      	eorgt	r0, r1
 8007c0e:	4041      	eorgt	r1, r0
 8007c10:	bfb8      	it	lt
 8007c12:	425b      	neglt	r3, r3
 8007c14:	2b19      	cmp	r3, #25
 8007c16:	bf88      	it	hi
 8007c18:	4770      	bxhi	lr
 8007c1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007c22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8007c26:	bf18      	it	ne
 8007c28:	4240      	negne	r0, r0
 8007c2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007c2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007c32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007c36:	bf18      	it	ne
 8007c38:	4249      	negne	r1, r1
 8007c3a:	ea92 0f03 	teq	r2, r3
 8007c3e:	d03f      	beq.n	8007cc0 <__addsf3+0xd8>
 8007c40:	f1a2 0201 	sub.w	r2, r2, #1
 8007c44:	fa41 fc03 	asr.w	ip, r1, r3
 8007c48:	eb10 000c 	adds.w	r0, r0, ip
 8007c4c:	f1c3 0320 	rsb	r3, r3, #32
 8007c50:	fa01 f103 	lsl.w	r1, r1, r3
 8007c54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007c58:	d502      	bpl.n	8007c60 <__addsf3+0x78>
 8007c5a:	4249      	negs	r1, r1
 8007c5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8007c60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007c64:	d313      	bcc.n	8007c8e <__addsf3+0xa6>
 8007c66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007c6a:	d306      	bcc.n	8007c7a <__addsf3+0x92>
 8007c6c:	0840      	lsrs	r0, r0, #1
 8007c6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8007c72:	f102 0201 	add.w	r2, r2, #1
 8007c76:	2afe      	cmp	r2, #254	; 0xfe
 8007c78:	d251      	bcs.n	8007d1e <__addsf3+0x136>
 8007c7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8007c7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007c82:	bf08      	it	eq
 8007c84:	f020 0001 	biceq.w	r0, r0, #1
 8007c88:	ea40 0003 	orr.w	r0, r0, r3
 8007c8c:	4770      	bx	lr
 8007c8e:	0049      	lsls	r1, r1, #1
 8007c90:	eb40 0000 	adc.w	r0, r0, r0
 8007c94:	3a01      	subs	r2, #1
 8007c96:	bf28      	it	cs
 8007c98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8007c9c:	d2ed      	bcs.n	8007c7a <__addsf3+0x92>
 8007c9e:	fab0 fc80 	clz	ip, r0
 8007ca2:	f1ac 0c08 	sub.w	ip, ip, #8
 8007ca6:	ebb2 020c 	subs.w	r2, r2, ip
 8007caa:	fa00 f00c 	lsl.w	r0, r0, ip
 8007cae:	bfaa      	itet	ge
 8007cb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8007cb4:	4252      	neglt	r2, r2
 8007cb6:	4318      	orrge	r0, r3
 8007cb8:	bfbc      	itt	lt
 8007cba:	40d0      	lsrlt	r0, r2
 8007cbc:	4318      	orrlt	r0, r3
 8007cbe:	4770      	bx	lr
 8007cc0:	f092 0f00 	teq	r2, #0
 8007cc4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8007cc8:	bf06      	itte	eq
 8007cca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8007cce:	3201      	addeq	r2, #1
 8007cd0:	3b01      	subne	r3, #1
 8007cd2:	e7b5      	b.n	8007c40 <__addsf3+0x58>
 8007cd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007cd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007cdc:	bf18      	it	ne
 8007cde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007ce2:	d021      	beq.n	8007d28 <__addsf3+0x140>
 8007ce4:	ea92 0f03 	teq	r2, r3
 8007ce8:	d004      	beq.n	8007cf4 <__addsf3+0x10c>
 8007cea:	f092 0f00 	teq	r2, #0
 8007cee:	bf08      	it	eq
 8007cf0:	4608      	moveq	r0, r1
 8007cf2:	4770      	bx	lr
 8007cf4:	ea90 0f01 	teq	r0, r1
 8007cf8:	bf1c      	itt	ne
 8007cfa:	2000      	movne	r0, #0
 8007cfc:	4770      	bxne	lr
 8007cfe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8007d02:	d104      	bne.n	8007d0e <__addsf3+0x126>
 8007d04:	0040      	lsls	r0, r0, #1
 8007d06:	bf28      	it	cs
 8007d08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8007d0c:	4770      	bx	lr
 8007d0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8007d12:	bf3c      	itt	cc
 8007d14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8007d18:	4770      	bxcc	lr
 8007d1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007d1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8007d22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007d26:	4770      	bx	lr
 8007d28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8007d2c:	bf16      	itet	ne
 8007d2e:	4608      	movne	r0, r1
 8007d30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8007d34:	4601      	movne	r1, r0
 8007d36:	0242      	lsls	r2, r0, #9
 8007d38:	bf06      	itte	eq
 8007d3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8007d3e:	ea90 0f01 	teqeq	r0, r1
 8007d42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8007d46:	4770      	bx	lr

08007d48 <__aeabi_ui2f>:
 8007d48:	f04f 0300 	mov.w	r3, #0
 8007d4c:	e004      	b.n	8007d58 <__aeabi_i2f+0x8>
 8007d4e:	bf00      	nop

08007d50 <__aeabi_i2f>:
 8007d50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8007d54:	bf48      	it	mi
 8007d56:	4240      	negmi	r0, r0
 8007d58:	ea5f 0c00 	movs.w	ip, r0
 8007d5c:	bf08      	it	eq
 8007d5e:	4770      	bxeq	lr
 8007d60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8007d64:	4601      	mov	r1, r0
 8007d66:	f04f 0000 	mov.w	r0, #0
 8007d6a:	e01c      	b.n	8007da6 <__aeabi_l2f+0x2a>

08007d6c <__aeabi_ul2f>:
 8007d6c:	ea50 0201 	orrs.w	r2, r0, r1
 8007d70:	bf08      	it	eq
 8007d72:	4770      	bxeq	lr
 8007d74:	f04f 0300 	mov.w	r3, #0
 8007d78:	e00a      	b.n	8007d90 <__aeabi_l2f+0x14>
 8007d7a:	bf00      	nop

08007d7c <__aeabi_l2f>:
 8007d7c:	ea50 0201 	orrs.w	r2, r0, r1
 8007d80:	bf08      	it	eq
 8007d82:	4770      	bxeq	lr
 8007d84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8007d88:	d502      	bpl.n	8007d90 <__aeabi_l2f+0x14>
 8007d8a:	4240      	negs	r0, r0
 8007d8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007d90:	ea5f 0c01 	movs.w	ip, r1
 8007d94:	bf02      	ittt	eq
 8007d96:	4684      	moveq	ip, r0
 8007d98:	4601      	moveq	r1, r0
 8007d9a:	2000      	moveq	r0, #0
 8007d9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8007da0:	bf08      	it	eq
 8007da2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8007da6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8007daa:	fabc f28c 	clz	r2, ip
 8007dae:	3a08      	subs	r2, #8
 8007db0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8007db4:	db10      	blt.n	8007dd8 <__aeabi_l2f+0x5c>
 8007db6:	fa01 fc02 	lsl.w	ip, r1, r2
 8007dba:	4463      	add	r3, ip
 8007dbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8007dc0:	f1c2 0220 	rsb	r2, r2, #32
 8007dc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007dc8:	fa20 f202 	lsr.w	r2, r0, r2
 8007dcc:	eb43 0002 	adc.w	r0, r3, r2
 8007dd0:	bf08      	it	eq
 8007dd2:	f020 0001 	biceq.w	r0, r0, #1
 8007dd6:	4770      	bx	lr
 8007dd8:	f102 0220 	add.w	r2, r2, #32
 8007ddc:	fa01 fc02 	lsl.w	ip, r1, r2
 8007de0:	f1c2 0220 	rsb	r2, r2, #32
 8007de4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8007de8:	fa21 f202 	lsr.w	r2, r1, r2
 8007dec:	eb43 0002 	adc.w	r0, r3, r2
 8007df0:	bf08      	it	eq
 8007df2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8007df6:	4770      	bx	lr

08007df8 <__gesf2>:
 8007df8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007dfc:	e006      	b.n	8007e0c <__cmpsf2+0x4>
 8007dfe:	bf00      	nop

08007e00 <__lesf2>:
 8007e00:	f04f 0c01 	mov.w	ip, #1
 8007e04:	e002      	b.n	8007e0c <__cmpsf2+0x4>
 8007e06:	bf00      	nop

08007e08 <__cmpsf2>:
 8007e08:	f04f 0c01 	mov.w	ip, #1
 8007e0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007e10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007e14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007e1c:	bf18      	it	ne
 8007e1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007e22:	d011      	beq.n	8007e48 <__cmpsf2+0x40>
 8007e24:	b001      	add	sp, #4
 8007e26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8007e2a:	bf18      	it	ne
 8007e2c:	ea90 0f01 	teqne	r0, r1
 8007e30:	bf58      	it	pl
 8007e32:	ebb2 0003 	subspl.w	r0, r2, r3
 8007e36:	bf88      	it	hi
 8007e38:	17c8      	asrhi	r0, r1, #31
 8007e3a:	bf38      	it	cc
 8007e3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8007e40:	bf18      	it	ne
 8007e42:	f040 0001 	orrne.w	r0, r0, #1
 8007e46:	4770      	bx	lr
 8007e48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007e4c:	d102      	bne.n	8007e54 <__cmpsf2+0x4c>
 8007e4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8007e52:	d105      	bne.n	8007e60 <__cmpsf2+0x58>
 8007e54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8007e58:	d1e4      	bne.n	8007e24 <__cmpsf2+0x1c>
 8007e5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8007e5e:	d0e1      	beq.n	8007e24 <__cmpsf2+0x1c>
 8007e60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop

08007e68 <__aeabi_cfrcmple>:
 8007e68:	4684      	mov	ip, r0
 8007e6a:	4608      	mov	r0, r1
 8007e6c:	4661      	mov	r1, ip
 8007e6e:	e7ff      	b.n	8007e70 <__aeabi_cfcmpeq>

08007e70 <__aeabi_cfcmpeq>:
 8007e70:	b50f      	push	{r0, r1, r2, r3, lr}
 8007e72:	f7ff ffc9 	bl	8007e08 <__cmpsf2>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	bf48      	it	mi
 8007e7a:	f110 0f00 	cmnmi.w	r0, #0
 8007e7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08007e80 <__aeabi_fcmpeq>:
 8007e80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e84:	f7ff fff4 	bl	8007e70 <__aeabi_cfcmpeq>
 8007e88:	bf0c      	ite	eq
 8007e8a:	2001      	moveq	r0, #1
 8007e8c:	2000      	movne	r0, #0
 8007e8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e92:	bf00      	nop

08007e94 <__aeabi_fcmplt>:
 8007e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e98:	f7ff ffea 	bl	8007e70 <__aeabi_cfcmpeq>
 8007e9c:	bf34      	ite	cc
 8007e9e:	2001      	movcc	r0, #1
 8007ea0:	2000      	movcs	r0, #0
 8007ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ea6:	bf00      	nop

08007ea8 <__aeabi_fcmple>:
 8007ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007eac:	f7ff ffe0 	bl	8007e70 <__aeabi_cfcmpeq>
 8007eb0:	bf94      	ite	ls
 8007eb2:	2001      	movls	r0, #1
 8007eb4:	2000      	movhi	r0, #0
 8007eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8007eba:	bf00      	nop

08007ebc <__aeabi_fcmpge>:
 8007ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ec0:	f7ff ffd2 	bl	8007e68 <__aeabi_cfrcmple>
 8007ec4:	bf94      	ite	ls
 8007ec6:	2001      	movls	r0, #1
 8007ec8:	2000      	movhi	r0, #0
 8007eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ece:	bf00      	nop

08007ed0 <__aeabi_fcmpgt>:
 8007ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ed4:	f7ff ffc8 	bl	8007e68 <__aeabi_cfrcmple>
 8007ed8:	bf34      	ite	cc
 8007eda:	2001      	movcc	r0, #1
 8007edc:	2000      	movcs	r0, #0
 8007ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ee2:	bf00      	nop

08007ee4 <__aeabi_f2iz>:
 8007ee4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007ee8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8007eec:	d30f      	bcc.n	8007f0e <__aeabi_f2iz+0x2a>
 8007eee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8007ef2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8007ef6:	d90d      	bls.n	8007f14 <__aeabi_f2iz+0x30>
 8007ef8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8007efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f00:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007f04:	fa23 f002 	lsr.w	r0, r3, r2
 8007f08:	bf18      	it	ne
 8007f0a:	4240      	negne	r0, r0
 8007f0c:	4770      	bx	lr
 8007f0e:	f04f 0000 	mov.w	r0, #0
 8007f12:	4770      	bx	lr
 8007f14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8007f18:	d101      	bne.n	8007f1e <__aeabi_f2iz+0x3a>
 8007f1a:	0242      	lsls	r2, r0, #9
 8007f1c:	d105      	bne.n	8007f2a <__aeabi_f2iz+0x46>
 8007f1e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8007f22:	bf08      	it	eq
 8007f24:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007f28:	4770      	bx	lr
 8007f2a:	f04f 0000 	mov.w	r0, #0
 8007f2e:	4770      	bx	lr

08007f30 <__aeabi_uldivmod>:
 8007f30:	b953      	cbnz	r3, 8007f48 <__aeabi_uldivmod+0x18>
 8007f32:	b94a      	cbnz	r2, 8007f48 <__aeabi_uldivmod+0x18>
 8007f34:	2900      	cmp	r1, #0
 8007f36:	bf08      	it	eq
 8007f38:	2800      	cmpeq	r0, #0
 8007f3a:	bf1c      	itt	ne
 8007f3c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007f40:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007f44:	f000 b80c 	b.w	8007f60 <__aeabi_idiv0>
 8007f48:	f1ad 0c08 	sub.w	ip, sp, #8
 8007f4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007f50:	f001 fc54 	bl	80097fc <__udivmoddi4>
 8007f54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007f58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f5c:	b004      	add	sp, #16
 8007f5e:	4770      	bx	lr

08007f60 <__aeabi_idiv0>:
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop

08007f64 <__aeabi_drsub>:
 8007f64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007f68:	e002      	b.n	8007f70 <__adddf3>
 8007f6a:	bf00      	nop

08007f6c <__aeabi_dsub>:
 8007f6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007f70 <__adddf3>:
 8007f70:	b530      	push	{r4, r5, lr}
 8007f72:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007f76:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007f7a:	ea94 0f05 	teq	r4, r5
 8007f7e:	bf08      	it	eq
 8007f80:	ea90 0f02 	teqeq	r0, r2
 8007f84:	bf1f      	itttt	ne
 8007f86:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007f8a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007f8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007f92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007f96:	f000 80e2 	beq.w	800815e <__adddf3+0x1ee>
 8007f9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007f9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007fa2:	bfb8      	it	lt
 8007fa4:	426d      	neglt	r5, r5
 8007fa6:	dd0c      	ble.n	8007fc2 <__adddf3+0x52>
 8007fa8:	442c      	add	r4, r5
 8007faa:	ea80 0202 	eor.w	r2, r0, r2
 8007fae:	ea81 0303 	eor.w	r3, r1, r3
 8007fb2:	ea82 0000 	eor.w	r0, r2, r0
 8007fb6:	ea83 0101 	eor.w	r1, r3, r1
 8007fba:	ea80 0202 	eor.w	r2, r0, r2
 8007fbe:	ea81 0303 	eor.w	r3, r1, r3
 8007fc2:	2d36      	cmp	r5, #54	; 0x36
 8007fc4:	bf88      	it	hi
 8007fc6:	bd30      	pophi	{r4, r5, pc}
 8007fc8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007fcc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007fd0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007fd4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007fd8:	d002      	beq.n	8007fe0 <__adddf3+0x70>
 8007fda:	4240      	negs	r0, r0
 8007fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007fe0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007fe4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007fe8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007fec:	d002      	beq.n	8007ff4 <__adddf3+0x84>
 8007fee:	4252      	negs	r2, r2
 8007ff0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007ff4:	ea94 0f05 	teq	r4, r5
 8007ff8:	f000 80a7 	beq.w	800814a <__adddf3+0x1da>
 8007ffc:	f1a4 0401 	sub.w	r4, r4, #1
 8008000:	f1d5 0e20 	rsbs	lr, r5, #32
 8008004:	db0d      	blt.n	8008022 <__adddf3+0xb2>
 8008006:	fa02 fc0e 	lsl.w	ip, r2, lr
 800800a:	fa22 f205 	lsr.w	r2, r2, r5
 800800e:	1880      	adds	r0, r0, r2
 8008010:	f141 0100 	adc.w	r1, r1, #0
 8008014:	fa03 f20e 	lsl.w	r2, r3, lr
 8008018:	1880      	adds	r0, r0, r2
 800801a:	fa43 f305 	asr.w	r3, r3, r5
 800801e:	4159      	adcs	r1, r3
 8008020:	e00e      	b.n	8008040 <__adddf3+0xd0>
 8008022:	f1a5 0520 	sub.w	r5, r5, #32
 8008026:	f10e 0e20 	add.w	lr, lr, #32
 800802a:	2a01      	cmp	r2, #1
 800802c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008030:	bf28      	it	cs
 8008032:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008036:	fa43 f305 	asr.w	r3, r3, r5
 800803a:	18c0      	adds	r0, r0, r3
 800803c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008040:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008044:	d507      	bpl.n	8008056 <__adddf3+0xe6>
 8008046:	f04f 0e00 	mov.w	lr, #0
 800804a:	f1dc 0c00 	rsbs	ip, ip, #0
 800804e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008052:	eb6e 0101 	sbc.w	r1, lr, r1
 8008056:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800805a:	d31b      	bcc.n	8008094 <__adddf3+0x124>
 800805c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008060:	d30c      	bcc.n	800807c <__adddf3+0x10c>
 8008062:	0849      	lsrs	r1, r1, #1
 8008064:	ea5f 0030 	movs.w	r0, r0, rrx
 8008068:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800806c:	f104 0401 	add.w	r4, r4, #1
 8008070:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008074:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008078:	f080 809a 	bcs.w	80081b0 <__adddf3+0x240>
 800807c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008080:	bf08      	it	eq
 8008082:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008086:	f150 0000 	adcs.w	r0, r0, #0
 800808a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800808e:	ea41 0105 	orr.w	r1, r1, r5
 8008092:	bd30      	pop	{r4, r5, pc}
 8008094:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008098:	4140      	adcs	r0, r0
 800809a:	eb41 0101 	adc.w	r1, r1, r1
 800809e:	3c01      	subs	r4, #1
 80080a0:	bf28      	it	cs
 80080a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80080a6:	d2e9      	bcs.n	800807c <__adddf3+0x10c>
 80080a8:	f091 0f00 	teq	r1, #0
 80080ac:	bf04      	itt	eq
 80080ae:	4601      	moveq	r1, r0
 80080b0:	2000      	moveq	r0, #0
 80080b2:	fab1 f381 	clz	r3, r1
 80080b6:	bf08      	it	eq
 80080b8:	3320      	addeq	r3, #32
 80080ba:	f1a3 030b 	sub.w	r3, r3, #11
 80080be:	f1b3 0220 	subs.w	r2, r3, #32
 80080c2:	da0c      	bge.n	80080de <__adddf3+0x16e>
 80080c4:	320c      	adds	r2, #12
 80080c6:	dd08      	ble.n	80080da <__adddf3+0x16a>
 80080c8:	f102 0c14 	add.w	ip, r2, #20
 80080cc:	f1c2 020c 	rsb	r2, r2, #12
 80080d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80080d4:	fa21 f102 	lsr.w	r1, r1, r2
 80080d8:	e00c      	b.n	80080f4 <__adddf3+0x184>
 80080da:	f102 0214 	add.w	r2, r2, #20
 80080de:	bfd8      	it	le
 80080e0:	f1c2 0c20 	rsble	ip, r2, #32
 80080e4:	fa01 f102 	lsl.w	r1, r1, r2
 80080e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80080ec:	bfdc      	itt	le
 80080ee:	ea41 010c 	orrle.w	r1, r1, ip
 80080f2:	4090      	lslle	r0, r2
 80080f4:	1ae4      	subs	r4, r4, r3
 80080f6:	bfa2      	ittt	ge
 80080f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80080fc:	4329      	orrge	r1, r5
 80080fe:	bd30      	popge	{r4, r5, pc}
 8008100:	ea6f 0404 	mvn.w	r4, r4
 8008104:	3c1f      	subs	r4, #31
 8008106:	da1c      	bge.n	8008142 <__adddf3+0x1d2>
 8008108:	340c      	adds	r4, #12
 800810a:	dc0e      	bgt.n	800812a <__adddf3+0x1ba>
 800810c:	f104 0414 	add.w	r4, r4, #20
 8008110:	f1c4 0220 	rsb	r2, r4, #32
 8008114:	fa20 f004 	lsr.w	r0, r0, r4
 8008118:	fa01 f302 	lsl.w	r3, r1, r2
 800811c:	ea40 0003 	orr.w	r0, r0, r3
 8008120:	fa21 f304 	lsr.w	r3, r1, r4
 8008124:	ea45 0103 	orr.w	r1, r5, r3
 8008128:	bd30      	pop	{r4, r5, pc}
 800812a:	f1c4 040c 	rsb	r4, r4, #12
 800812e:	f1c4 0220 	rsb	r2, r4, #32
 8008132:	fa20 f002 	lsr.w	r0, r0, r2
 8008136:	fa01 f304 	lsl.w	r3, r1, r4
 800813a:	ea40 0003 	orr.w	r0, r0, r3
 800813e:	4629      	mov	r1, r5
 8008140:	bd30      	pop	{r4, r5, pc}
 8008142:	fa21 f004 	lsr.w	r0, r1, r4
 8008146:	4629      	mov	r1, r5
 8008148:	bd30      	pop	{r4, r5, pc}
 800814a:	f094 0f00 	teq	r4, #0
 800814e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008152:	bf06      	itte	eq
 8008154:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008158:	3401      	addeq	r4, #1
 800815a:	3d01      	subne	r5, #1
 800815c:	e74e      	b.n	8007ffc <__adddf3+0x8c>
 800815e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008162:	bf18      	it	ne
 8008164:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008168:	d029      	beq.n	80081be <__adddf3+0x24e>
 800816a:	ea94 0f05 	teq	r4, r5
 800816e:	bf08      	it	eq
 8008170:	ea90 0f02 	teqeq	r0, r2
 8008174:	d005      	beq.n	8008182 <__adddf3+0x212>
 8008176:	ea54 0c00 	orrs.w	ip, r4, r0
 800817a:	bf04      	itt	eq
 800817c:	4619      	moveq	r1, r3
 800817e:	4610      	moveq	r0, r2
 8008180:	bd30      	pop	{r4, r5, pc}
 8008182:	ea91 0f03 	teq	r1, r3
 8008186:	bf1e      	ittt	ne
 8008188:	2100      	movne	r1, #0
 800818a:	2000      	movne	r0, #0
 800818c:	bd30      	popne	{r4, r5, pc}
 800818e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8008192:	d105      	bne.n	80081a0 <__adddf3+0x230>
 8008194:	0040      	lsls	r0, r0, #1
 8008196:	4149      	adcs	r1, r1
 8008198:	bf28      	it	cs
 800819a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800819e:	bd30      	pop	{r4, r5, pc}
 80081a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80081a4:	bf3c      	itt	cc
 80081a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80081aa:	bd30      	popcc	{r4, r5, pc}
 80081ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80081b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081b8:	f04f 0000 	mov.w	r0, #0
 80081bc:	bd30      	pop	{r4, r5, pc}
 80081be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80081c2:	bf1a      	itte	ne
 80081c4:	4619      	movne	r1, r3
 80081c6:	4610      	movne	r0, r2
 80081c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80081cc:	bf1c      	itt	ne
 80081ce:	460b      	movne	r3, r1
 80081d0:	4602      	movne	r2, r0
 80081d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80081d6:	bf06      	itte	eq
 80081d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80081dc:	ea91 0f03 	teqeq	r1, r3
 80081e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80081e4:	bd30      	pop	{r4, r5, pc}
 80081e6:	bf00      	nop

080081e8 <__aeabi_ui2d>:
 80081e8:	f090 0f00 	teq	r0, #0
 80081ec:	bf04      	itt	eq
 80081ee:	2100      	moveq	r1, #0
 80081f0:	4770      	bxeq	lr
 80081f2:	b530      	push	{r4, r5, lr}
 80081f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80081f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80081fc:	f04f 0500 	mov.w	r5, #0
 8008200:	f04f 0100 	mov.w	r1, #0
 8008204:	e750      	b.n	80080a8 <__adddf3+0x138>
 8008206:	bf00      	nop

08008208 <__aeabi_i2d>:
 8008208:	f090 0f00 	teq	r0, #0
 800820c:	bf04      	itt	eq
 800820e:	2100      	moveq	r1, #0
 8008210:	4770      	bxeq	lr
 8008212:	b530      	push	{r4, r5, lr}
 8008214:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008218:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800821c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008220:	bf48      	it	mi
 8008222:	4240      	negmi	r0, r0
 8008224:	f04f 0100 	mov.w	r1, #0
 8008228:	e73e      	b.n	80080a8 <__adddf3+0x138>
 800822a:	bf00      	nop

0800822c <__aeabi_f2d>:
 800822c:	0042      	lsls	r2, r0, #1
 800822e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008232:	ea4f 0131 	mov.w	r1, r1, rrx
 8008236:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800823a:	bf1f      	itttt	ne
 800823c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008240:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008244:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008248:	4770      	bxne	lr
 800824a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800824e:	bf08      	it	eq
 8008250:	4770      	bxeq	lr
 8008252:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8008256:	bf04      	itt	eq
 8008258:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800825c:	4770      	bxeq	lr
 800825e:	b530      	push	{r4, r5, lr}
 8008260:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800826c:	e71c      	b.n	80080a8 <__adddf3+0x138>
 800826e:	bf00      	nop

08008270 <__aeabi_ul2d>:
 8008270:	ea50 0201 	orrs.w	r2, r0, r1
 8008274:	bf08      	it	eq
 8008276:	4770      	bxeq	lr
 8008278:	b530      	push	{r4, r5, lr}
 800827a:	f04f 0500 	mov.w	r5, #0
 800827e:	e00a      	b.n	8008296 <__aeabi_l2d+0x16>

08008280 <__aeabi_l2d>:
 8008280:	ea50 0201 	orrs.w	r2, r0, r1
 8008284:	bf08      	it	eq
 8008286:	4770      	bxeq	lr
 8008288:	b530      	push	{r4, r5, lr}
 800828a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800828e:	d502      	bpl.n	8008296 <__aeabi_l2d+0x16>
 8008290:	4240      	negs	r0, r0
 8008292:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008296:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800829a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800829e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80082a2:	f43f aed8 	beq.w	8008056 <__adddf3+0xe6>
 80082a6:	f04f 0203 	mov.w	r2, #3
 80082aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80082ae:	bf18      	it	ne
 80082b0:	3203      	addne	r2, #3
 80082b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80082b6:	bf18      	it	ne
 80082b8:	3203      	addne	r2, #3
 80082ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80082be:	f1c2 0320 	rsb	r3, r2, #32
 80082c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80082c6:	fa20 f002 	lsr.w	r0, r0, r2
 80082ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80082ce:	ea40 000e 	orr.w	r0, r0, lr
 80082d2:	fa21 f102 	lsr.w	r1, r1, r2
 80082d6:	4414      	add	r4, r2
 80082d8:	e6bd      	b.n	8008056 <__adddf3+0xe6>
 80082da:	bf00      	nop

080082dc <__aeabi_fmul>:
 80082dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80082e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80082e4:	bf1e      	ittt	ne
 80082e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80082ea:	ea92 0f0c 	teqne	r2, ip
 80082ee:	ea93 0f0c 	teqne	r3, ip
 80082f2:	d06f      	beq.n	80083d4 <__aeabi_fmul+0xf8>
 80082f4:	441a      	add	r2, r3
 80082f6:	ea80 0c01 	eor.w	ip, r0, r1
 80082fa:	0240      	lsls	r0, r0, #9
 80082fc:	bf18      	it	ne
 80082fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8008302:	d01e      	beq.n	8008342 <__aeabi_fmul+0x66>
 8008304:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008308:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800830c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8008310:	fba0 3101 	umull	r3, r1, r0, r1
 8008314:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8008318:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800831c:	bf3e      	ittt	cc
 800831e:	0049      	lslcc	r1, r1, #1
 8008320:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8008324:	005b      	lslcc	r3, r3, #1
 8008326:	ea40 0001 	orr.w	r0, r0, r1
 800832a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800832e:	2afd      	cmp	r2, #253	; 0xfd
 8008330:	d81d      	bhi.n	800836e <__aeabi_fmul+0x92>
 8008332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008336:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800833a:	bf08      	it	eq
 800833c:	f020 0001 	biceq.w	r0, r0, #1
 8008340:	4770      	bx	lr
 8008342:	f090 0f00 	teq	r0, #0
 8008346:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800834a:	bf08      	it	eq
 800834c:	0249      	lsleq	r1, r1, #9
 800834e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8008352:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8008356:	3a7f      	subs	r2, #127	; 0x7f
 8008358:	bfc2      	ittt	gt
 800835a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800835e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8008362:	4770      	bxgt	lr
 8008364:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008368:	f04f 0300 	mov.w	r3, #0
 800836c:	3a01      	subs	r2, #1
 800836e:	dc5d      	bgt.n	800842c <__aeabi_fmul+0x150>
 8008370:	f112 0f19 	cmn.w	r2, #25
 8008374:	bfdc      	itt	le
 8008376:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800837a:	4770      	bxle	lr
 800837c:	f1c2 0200 	rsb	r2, r2, #0
 8008380:	0041      	lsls	r1, r0, #1
 8008382:	fa21 f102 	lsr.w	r1, r1, r2
 8008386:	f1c2 0220 	rsb	r2, r2, #32
 800838a:	fa00 fc02 	lsl.w	ip, r0, r2
 800838e:	ea5f 0031 	movs.w	r0, r1, rrx
 8008392:	f140 0000 	adc.w	r0, r0, #0
 8008396:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800839a:	bf08      	it	eq
 800839c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80083a0:	4770      	bx	lr
 80083a2:	f092 0f00 	teq	r2, #0
 80083a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80083aa:	bf02      	ittt	eq
 80083ac:	0040      	lsleq	r0, r0, #1
 80083ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80083b2:	3a01      	subeq	r2, #1
 80083b4:	d0f9      	beq.n	80083aa <__aeabi_fmul+0xce>
 80083b6:	ea40 000c 	orr.w	r0, r0, ip
 80083ba:	f093 0f00 	teq	r3, #0
 80083be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80083c2:	bf02      	ittt	eq
 80083c4:	0049      	lsleq	r1, r1, #1
 80083c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80083ca:	3b01      	subeq	r3, #1
 80083cc:	d0f9      	beq.n	80083c2 <__aeabi_fmul+0xe6>
 80083ce:	ea41 010c 	orr.w	r1, r1, ip
 80083d2:	e78f      	b.n	80082f4 <__aeabi_fmul+0x18>
 80083d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80083d8:	ea92 0f0c 	teq	r2, ip
 80083dc:	bf18      	it	ne
 80083de:	ea93 0f0c 	teqne	r3, ip
 80083e2:	d00a      	beq.n	80083fa <__aeabi_fmul+0x11e>
 80083e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80083e8:	bf18      	it	ne
 80083ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80083ee:	d1d8      	bne.n	80083a2 <__aeabi_fmul+0xc6>
 80083f0:	ea80 0001 	eor.w	r0, r0, r1
 80083f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80083f8:	4770      	bx	lr
 80083fa:	f090 0f00 	teq	r0, #0
 80083fe:	bf17      	itett	ne
 8008400:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8008404:	4608      	moveq	r0, r1
 8008406:	f091 0f00 	teqne	r1, #0
 800840a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800840e:	d014      	beq.n	800843a <__aeabi_fmul+0x15e>
 8008410:	ea92 0f0c 	teq	r2, ip
 8008414:	d101      	bne.n	800841a <__aeabi_fmul+0x13e>
 8008416:	0242      	lsls	r2, r0, #9
 8008418:	d10f      	bne.n	800843a <__aeabi_fmul+0x15e>
 800841a:	ea93 0f0c 	teq	r3, ip
 800841e:	d103      	bne.n	8008428 <__aeabi_fmul+0x14c>
 8008420:	024b      	lsls	r3, r1, #9
 8008422:	bf18      	it	ne
 8008424:	4608      	movne	r0, r1
 8008426:	d108      	bne.n	800843a <__aeabi_fmul+0x15e>
 8008428:	ea80 0001 	eor.w	r0, r0, r1
 800842c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008430:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008434:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008438:	4770      	bx	lr
 800843a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800843e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8008442:	4770      	bx	lr

08008444 <__aeabi_fdiv>:
 8008444:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008448:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800844c:	bf1e      	ittt	ne
 800844e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8008452:	ea92 0f0c 	teqne	r2, ip
 8008456:	ea93 0f0c 	teqne	r3, ip
 800845a:	d069      	beq.n	8008530 <__aeabi_fdiv+0xec>
 800845c:	eba2 0203 	sub.w	r2, r2, r3
 8008460:	ea80 0c01 	eor.w	ip, r0, r1
 8008464:	0249      	lsls	r1, r1, #9
 8008466:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800846a:	d037      	beq.n	80084dc <__aeabi_fdiv+0x98>
 800846c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008470:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8008474:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8008478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800847c:	428b      	cmp	r3, r1
 800847e:	bf38      	it	cc
 8008480:	005b      	lslcc	r3, r3, #1
 8008482:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8008486:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800848a:	428b      	cmp	r3, r1
 800848c:	bf24      	itt	cs
 800848e:	1a5b      	subcs	r3, r3, r1
 8008490:	ea40 000c 	orrcs.w	r0, r0, ip
 8008494:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8008498:	bf24      	itt	cs
 800849a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800849e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80084a2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80084a6:	bf24      	itt	cs
 80084a8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80084ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80084b0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80084b4:	bf24      	itt	cs
 80084b6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80084ba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80084be:	011b      	lsls	r3, r3, #4
 80084c0:	bf18      	it	ne
 80084c2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80084c6:	d1e0      	bne.n	800848a <__aeabi_fdiv+0x46>
 80084c8:	2afd      	cmp	r2, #253	; 0xfd
 80084ca:	f63f af50 	bhi.w	800836e <__aeabi_fmul+0x92>
 80084ce:	428b      	cmp	r3, r1
 80084d0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80084d4:	bf08      	it	eq
 80084d6:	f020 0001 	biceq.w	r0, r0, #1
 80084da:	4770      	bx	lr
 80084dc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80084e0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80084e4:	327f      	adds	r2, #127	; 0x7f
 80084e6:	bfc2      	ittt	gt
 80084e8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80084ec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80084f0:	4770      	bxgt	lr
 80084f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80084f6:	f04f 0300 	mov.w	r3, #0
 80084fa:	3a01      	subs	r2, #1
 80084fc:	e737      	b.n	800836e <__aeabi_fmul+0x92>
 80084fe:	f092 0f00 	teq	r2, #0
 8008502:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8008506:	bf02      	ittt	eq
 8008508:	0040      	lsleq	r0, r0, #1
 800850a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800850e:	3a01      	subeq	r2, #1
 8008510:	d0f9      	beq.n	8008506 <__aeabi_fdiv+0xc2>
 8008512:	ea40 000c 	orr.w	r0, r0, ip
 8008516:	f093 0f00 	teq	r3, #0
 800851a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800851e:	bf02      	ittt	eq
 8008520:	0049      	lsleq	r1, r1, #1
 8008522:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008526:	3b01      	subeq	r3, #1
 8008528:	d0f9      	beq.n	800851e <__aeabi_fdiv+0xda>
 800852a:	ea41 010c 	orr.w	r1, r1, ip
 800852e:	e795      	b.n	800845c <__aeabi_fdiv+0x18>
 8008530:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8008534:	ea92 0f0c 	teq	r2, ip
 8008538:	d108      	bne.n	800854c <__aeabi_fdiv+0x108>
 800853a:	0242      	lsls	r2, r0, #9
 800853c:	f47f af7d 	bne.w	800843a <__aeabi_fmul+0x15e>
 8008540:	ea93 0f0c 	teq	r3, ip
 8008544:	f47f af70 	bne.w	8008428 <__aeabi_fmul+0x14c>
 8008548:	4608      	mov	r0, r1
 800854a:	e776      	b.n	800843a <__aeabi_fmul+0x15e>
 800854c:	ea93 0f0c 	teq	r3, ip
 8008550:	d104      	bne.n	800855c <__aeabi_fdiv+0x118>
 8008552:	024b      	lsls	r3, r1, #9
 8008554:	f43f af4c 	beq.w	80083f0 <__aeabi_fmul+0x114>
 8008558:	4608      	mov	r0, r1
 800855a:	e76e      	b.n	800843a <__aeabi_fmul+0x15e>
 800855c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8008560:	bf18      	it	ne
 8008562:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8008566:	d1ca      	bne.n	80084fe <__aeabi_fdiv+0xba>
 8008568:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800856c:	f47f af5c 	bne.w	8008428 <__aeabi_fmul+0x14c>
 8008570:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8008574:	f47f af3c 	bne.w	80083f0 <__aeabi_fmul+0x114>
 8008578:	e75f      	b.n	800843a <__aeabi_fmul+0x15e>
 800857a:	bf00      	nop

0800857c <Reset_Handler>:
 800857c:	2100      	movs	r1, #0
 800857e:	e003      	b.n	8008588 <DataInit>

08008580 <CopyData>:
 8008580:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <Zerobss+0x10>)
 8008582:	585b      	ldr	r3, [r3, r1]
 8008584:	5043      	str	r3, [r0, r1]
 8008586:	3104      	adds	r1, #4

08008588 <DataInit>:
 8008588:	4809      	ldr	r0, [pc, #36]	; (80085b0 <Zerobss+0x14>)
 800858a:	4b0a      	ldr	r3, [pc, #40]	; (80085b4 <Zerobss+0x18>)
 800858c:	1842      	adds	r2, r0, r1
 800858e:	429a      	cmp	r2, r3
 8008590:	d3f6      	bcc.n	8008580 <CopyData>
 8008592:	4a09      	ldr	r2, [pc, #36]	; (80085b8 <Zerobss+0x1c>)
 8008594:	e002      	b.n	800859c <Zerobss>

08008596 <FillZerobss>:
 8008596:	2300      	movs	r3, #0
 8008598:	f842 3b04 	str.w	r3, [r2], #4

0800859c <Zerobss>:
 800859c:	4b07      	ldr	r3, [pc, #28]	; (80085bc <Zerobss+0x20>)
 800859e:	429a      	cmp	r2, r3
 80085a0:	d3f9      	bcc.n	8008596 <FillZerobss>
 80085a2:	f00d fc61 	bl	8015e68 <SystemInit>
 80085a6:	f000 faa7 	bl	8008af8 <main>
 80085aa:	4770      	bx	lr
 80085ac:	0801a754 	stmdaeq	r1, {r2, r4, r6, r8, r9, sl, sp, pc}
 80085b0:	20000000 	andcs	r0, r0, r0
 80085b4:	200000e8 	andcs	r0, r0, r8, ror #1
 80085b8:	200000e8 	andcs	r0, r0, r8, ror #1
 80085bc:	2002a74c 	andcs	sl, r2, ip, asr #14

080085c0 <ADC0_1_IRQHandler>:
 80085c0:	e7fe      	b.n	80085c0 <ADC0_1_IRQHandler>

080085c2 <memcpy>:
 80085c2:	b510      	push	{r4, lr}
 80085c4:	1e43      	subs	r3, r0, #1
 80085c6:	440a      	add	r2, r1
 80085c8:	4291      	cmp	r1, r2
 80085ca:	d100      	bne.n	80085ce <memcpy+0xc>
 80085cc:	bd10      	pop	{r4, pc}
 80085ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085d6:	e7f7      	b.n	80085c8 <memcpy+0x6>

080085d8 <DisplayHandler::~DisplayHandler()>:
 80085d8:	4770      	bx	lr

080085da <DisplayUdfHandler::~DisplayUdfHandler()>:
 80085da:	4770      	bx	lr

080085dc <DisplayUdfHandler::ShowLongName(char const*)>:
 80085dc:	4770      	bx	lr

080085de <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 80085de:	4770      	bx	lr

080085e0 <PixelDmxStartStop::~PixelDmxStartStop()>:
 80085e0:	4770      	bx	lr
	...

080085e4 <PixelDmxStartStop::Start()>:
 80085e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085e8:	4b01      	ldr	r3, [pc, #4]	; (80085f0 <PixelDmxStartStop::Start()+0xc>)
 80085ea:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 80085ee:	4770      	bx	lr
 80085f0:	40010000 	andmi	r0, r1, r0

080085f4 <PixelDmxStartStop::Stop()>:
 80085f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085f8:	4b01      	ldr	r3, [pc, #4]	; (8008600 <PixelDmxStartStop::Stop()+0xc>)
 80085fa:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 80085fe:	4770      	bx	lr
 8008600:	40010000 	andmi	r0, r1, r0

08008604 <RDMNetDevice::CopyUID(unsigned char*)>:
 8008604:	460b      	mov	r3, r1
 8008606:	2206      	movs	r2, #6
 8008608:	1d01      	adds	r1, r0, #4
 800860a:	4618      	mov	r0, r3
 800860c:	f7ff bfd9 	b.w	80085c2 <memcpy>

08008610 <non-virtual thunk to RDMNetDevice::CopyUID(unsigned char*)>:
 8008610:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 8008614:	e7f6      	b.n	8008604 <RDMNetDevice::CopyUID(unsigned char*)>
	...

08008618 <RDMNetDevice::CopyCID(unsigned char*)>:
 8008618:	4608      	mov	r0, r1
 800861a:	2210      	movs	r2, #16
 800861c:	4901      	ldr	r1, [pc, #4]	; (8008624 <RDMNetDevice::CopyCID(unsigned char*)+0xc>)
 800861e:	f7ff bfd0 	b.w	80085c2 <memcpy>
 8008622:	bf00      	nop
 8008624:	2000c297 	mulcs	r0, r7, r2

08008628 <non-virtual thunk to RDMNetDevice::CopyCID(unsigned char*)>:
 8008628:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 800862c:	e7f4      	b.n	8008618 <RDMNetDevice::CopyCID(unsigned char*)>
 800862e:	bf00      	nop

08008630 <FactoryDefaults::~FactoryDefaults()>:
 8008630:	4770      	bx	lr

08008632 <Reboot::~Reboot()>:
 8008632:	4770      	bx	lr

08008634 <Reboot::Run()>:
 8008634:	b508      	push	{r3, lr}
 8008636:	4b05      	ldr	r3, [pc, #20]	; (800864c <Reboot::Run()+0x18>)
 8008638:	6818      	ldr	r0, [r3, #0]
 800863a:	f001 fbe1 	bl	8009e00 <ArtNetNode::Stop()>
 800863e:	4b04      	ldr	r3, [pc, #16]	; (8008650 <Reboot::Run()+0x1c>)
 8008640:	6818      	ldr	r0, [r3, #0]
 8008642:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008646:	f007 bae5 	b.w	800fc14 <WS28xxMulti::Blackout()>
 800864a:	bf00      	nop
 800864c:	2000c170 	andcs	ip, r0, r0, ror r1
 8008650:	20013dd8 	ldrdcs	r3, [r1], -r8

08008654 <Reboot::~Reboot()>:
 8008654:	b510      	push	{r4, lr}
 8008656:	4604      	mov	r4, r0
 8008658:	f00d f9b2 	bl	80159c0 <operator delete(void*)>
 800865c:	4620      	mov	r0, r4
 800865e:	bd10      	pop	{r4, pc}

08008660 <DisplayHandler::~DisplayHandler()>:
 8008660:	b510      	push	{r4, lr}
 8008662:	4604      	mov	r4, r0
 8008664:	f00d f9ac 	bl	80159c0 <operator delete(void*)>
 8008668:	4620      	mov	r0, r4
 800866a:	bd10      	pop	{r4, pc}

0800866c <DisplayUdfHandler::~DisplayUdfHandler()>:
 800866c:	b510      	push	{r4, lr}
 800866e:	4604      	mov	r4, r0
 8008670:	f00d f9a6 	bl	80159c0 <operator delete(void*)>
 8008674:	4620      	mov	r0, r4
 8008676:	bd10      	pop	{r4, pc}

08008678 <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 8008678:	b510      	push	{r4, lr}
 800867a:	4604      	mov	r4, r0
 800867c:	f00d f9a0 	bl	80159c0 <operator delete(void*)>
 8008680:	4620      	mov	r0, r4
 8008682:	bd10      	pop	{r4, pc}

08008684 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8008684:	b510      	push	{r4, lr}
 8008686:	4604      	mov	r4, r0
 8008688:	f00d f99a 	bl	80159c0 <operator delete(void*)>
 800868c:	4620      	mov	r0, r4
 800868e:	bd10      	pop	{r4, pc}

08008690 <FactoryDefaults::~FactoryDefaults()>:
 8008690:	b510      	push	{r4, lr}
 8008692:	4604      	mov	r4, r0
 8008694:	f00d f994 	bl	80159c0 <operator delete(void*)>
 8008698:	4620      	mov	r0, r4
 800869a:	bd10      	pop	{r4, pc}

0800869c <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)>:
 800869c:	4b02      	ldr	r3, [pc, #8]	; (80086a8 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0xc>)
 800869e:	6819      	ldr	r1, [r3, #0]
 80086a0:	4b02      	ldr	r3, [pc, #8]	; (80086ac <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0x10>)
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	f00c b91a 	b.w	80148dc <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80086a8:	2000c170 	andcs	ip, r0, r0, ror r1
 80086ac:	2001cd54 	andcs	ip, r1, r4, asr sp

080086b0 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)>:
 80086b0:	4b02      	ldr	r3, [pc, #8]	; (80086bc <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0xc>)
 80086b2:	6819      	ldr	r1, [r3, #0]
 80086b4:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0x10>)
 80086b6:	6818      	ldr	r0, [r3, #0]
 80086b8:	f00c b910 	b.w	80148dc <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80086bc:	2000c170 	andcs	ip, r0, r0, ror r1
 80086c0:	2001cd54 	andcs	ip, r1, r4, asr sp

080086c4 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)>:
 80086c4:	4b02      	ldr	r3, [pc, #8]	; (80086d0 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0xc>)
 80086c6:	6819      	ldr	r1, [r3, #0]
 80086c8:	4b02      	ldr	r3, [pc, #8]	; (80086d4 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0x10>)
 80086ca:	6818      	ldr	r0, [r3, #0]
 80086cc:	f00c b906 	b.w	80148dc <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80086d0:	2000c170 	andcs	ip, r0, r0, ror r1
 80086d4:	2001cd54 	andcs	ip, r1, r4, asr sp

080086d8 <DisplayUdfHandler::ShowNetSwitch(unsigned char)>:
 80086d8:	4b02      	ldr	r3, [pc, #8]	; (80086e4 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0xc>)
 80086da:	6819      	ldr	r1, [r3, #0]
 80086dc:	4b02      	ldr	r3, [pc, #8]	; (80086e8 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0x10>)
 80086de:	6818      	ldr	r0, [r3, #0]
 80086e0:	f00c b8fc 	b.w	80148dc <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80086e4:	2000c170 	andcs	ip, r0, r0, ror r1
 80086e8:	2001cd54 	andcs	ip, r1, r4, asr sp

080086ec <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)>:
 80086ec:	4b02      	ldr	r3, [pc, #8]	; (80086f8 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0xc>)
 80086ee:	6819      	ldr	r1, [r3, #0]
 80086f0:	4b02      	ldr	r3, [pc, #8]	; (80086fc <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0x10>)
 80086f2:	6818      	ldr	r0, [r3, #0]
 80086f4:	f00c b8f2 	b.w	80148dc <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80086f8:	2000c170 	andcs	ip, r0, r0, ror r1
 80086fc:	2001cd54 	andcs	ip, r1, r4, asr sp

08008700 <DisplayUdfHandler::ShowShortName(char const*)>:
 8008700:	4b02      	ldr	r3, [pc, #8]	; (800870c <DisplayUdfHandler::ShowShortName(char const*)+0xc>)
 8008702:	6819      	ldr	r1, [r3, #0]
 8008704:	4b02      	ldr	r3, [pc, #8]	; (8008710 <DisplayUdfHandler::ShowShortName(char const*)+0x10>)
 8008706:	6818      	ldr	r0, [r3, #0]
 8008708:	f00c b8c5 	b.w	8014896 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 800870c:	2000c170 	andcs	ip, r0, r0, ror r1
 8008710:	2001cd54 	andcs	ip, r1, r4, asr sp

08008714 <RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)>:
 8008714:	b510      	push	{r4, lr}
 8008716:	4c03      	ldr	r4, [pc, #12]	; (8008724 <RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)+0x10>)
 8008718:	30d0      	adds	r0, #208	; 0xd0
 800871a:	4622      	mov	r2, r4
 800871c:	f005 fbbe 	bl	800de9c <RDMHandler::HandleData(unsigned char const*, unsigned char*)>
 8008720:	4620      	mov	r0, r4
 8008722:	bd10      	pop	{r4, pc}
 8008724:	2000c198 	mulcs	r0, r8, r1

08008728 <non-virtual thunk to RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)>:
 8008728:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 800872c:	e7f2      	b.n	8008714 <RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)>
 800872e:	bf00      	nop

08008730 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 8008730:	b110      	cbz	r0, 8008738 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 8008732:	6803      	ldr	r3, [r0, #0]
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	4718      	bx	r3
 8008738:	4770      	bx	lr

0800873a <Display::PutChar(int) [clone .isra.0]>:
 800873a:	b110      	cbz	r0, 8008742 <Display::PutChar(int) [clone .isra.0]+0x8>
 800873c:	6803      	ldr	r3, [r0, #0]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	4718      	bx	r3
 8008742:	4770      	bx	lr

08008744 <DisplayHandler::Print(unsigned int)>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	7903      	ldrb	r3, [r0, #4]
 8008748:	b1f3      	cbz	r3, 8008788 <DisplayHandler::Print(unsigned int)+0x44>
 800874a:	2904      	cmp	r1, #4
 800874c:	bf98      	it	ls
 800874e:	4b0f      	ldrls	r3, [pc, #60]	; (800878c <DisplayHandler::Print(unsigned int)+0x48>)
 8008750:	4d0f      	ldr	r5, [pc, #60]	; (8008790 <DisplayHandler::Print(unsigned int)+0x4c>)
 8008752:	bf98      	it	ls
 8008754:	5c5c      	ldrbls	r4, [r3, r1]
 8008756:	682b      	ldr	r3, [r5, #0]
 8008758:	bf88      	it	hi
 800875a:	2455      	movhi	r4, #85	; 0x55
 800875c:	6998      	ldr	r0, [r3, #24]
 800875e:	b178      	cbz	r0, 8008780 <DisplayHandler::Print(unsigned int)+0x3c>
 8008760:	7901      	ldrb	r1, [r0, #4]
 8008762:	3901      	subs	r1, #1
 8008764:	b2c9      	uxtb	r1, r1
 8008766:	b168      	cbz	r0, 8008784 <DisplayHandler::Print(unsigned int)+0x40>
 8008768:	7942      	ldrb	r2, [r0, #5]
 800876a:	3a01      	subs	r2, #1
 800876c:	b2d2      	uxtb	r2, r2
 800876e:	f7ff ffdf 	bl	8008730 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8008772:	682b      	ldr	r3, [r5, #0]
 8008774:	4621      	mov	r1, r4
 8008776:	6998      	ldr	r0, [r3, #24]
 8008778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800877c:	f7ff bfdd 	b.w	800873a <Display::PutChar(int) [clone .isra.0]>
 8008780:	4601      	mov	r1, r0
 8008782:	e7ee      	b.n	8008762 <DisplayHandler::Print(unsigned int)+0x1e>
 8008784:	4602      	mov	r2, r0
 8008786:	e7f0      	b.n	800876a <DisplayHandler::Print(unsigned int)+0x26>
 8008788:	bd38      	pop	{r3, r4, r5, pc}
 800878a:	bf00      	nop
 800878c:	08017ef8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 8008790:	2001cd5c 	andcs	ip, r1, ip, asr sp

08008794 <RDMNetDevice::~RDMNetDevice()>:
 8008794:	b510      	push	{r4, lr}
 8008796:	4604      	mov	r4, r0
 8008798:	4b05      	ldr	r3, [pc, #20]	; (80087b0 <RDMNetDevice::~RDMNetDevice()+0x1c>)
 800879a:	f840 3b88 	str.w	r3, [r0], #136
 800879e:	f004 fe1b 	bl	800d3d8 <RDMSubDevices::~RDMSubDevices()>
 80087a2:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80087a6:	f004 fdf7 	bl	800d398 <RDMSensors::~RDMSensors()>
 80087aa:	4620      	mov	r0, r4
 80087ac:	bd10      	pop	{r4, pc}
 80087ae:	bf00      	nop
 80087b0:	08018560 	stmdaeq	r1, {r5, r6, r8, sl, pc}

080087b4 <non-virtual thunk to RDMNetDevice::~RDMNetDevice()>:
 80087b4:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 80087b8:	e7ec      	b.n	8008794 <RDMNetDevice::~RDMNetDevice()>
 80087ba:	bf00      	nop

080087bc <RDMNetDevice::~RDMNetDevice()>:
 80087bc:	b510      	push	{r4, lr}
 80087be:	4604      	mov	r4, r0
 80087c0:	f7ff ffe8 	bl	8008794 <RDMNetDevice::~RDMNetDevice()>
 80087c4:	4620      	mov	r0, r4
 80087c6:	f00d f8fb 	bl	80159c0 <operator delete(void*)>
 80087ca:	4620      	mov	r0, r4
 80087cc:	bd10      	pop	{r4, pc}

080087ce <non-virtual thunk to RDMNetDevice::~RDMNetDevice()>:
 80087ce:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 80087d2:	e7f3      	b.n	80087bc <RDMNetDevice::~RDMNetDevice()>

080087d4 <Display::SetSleep(bool)>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	4604      	mov	r4, r0
 80087d8:	6980      	ldr	r0, [r0, #24]
 80087da:	460d      	mov	r5, r1
 80087dc:	b138      	cbz	r0, 80087ee <Display::SetSleep(bool)+0x1a>
 80087de:	6803      	ldr	r3, [r0, #0]
 80087e0:	7421      	strb	r1, [r4, #16]
 80087e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e4:	4798      	blx	r3
 80087e6:	b915      	cbnz	r5, 80087ee <Display::SetSleep(bool)+0x1a>
 80087e8:	4b01      	ldr	r3, [pc, #4]	; (80087f0 <Display::SetSleep(bool)+0x1c>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6063      	str	r3, [r4, #4]
 80087ee:	bd38      	pop	{r3, r4, r5, pc}
 80087f0:	2001ce64 	andcs	ip, r1, r4, ror #28

080087f4 <Display::ClearLine(unsigned char)>:
 80087f4:	6980      	ldr	r0, [r0, #24]
 80087f6:	b110      	cbz	r0, 80087fe <Display::ClearLine(unsigned char)+0xa>
 80087f8:	6803      	ldr	r3, [r0, #0]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	4718      	bx	r3
 80087fe:	4770      	bx	lr

08008800 <Display::Printf(unsigned char, char const*, ...)>:
 8008800:	b40c      	push	{r2, r3}
 8008802:	b570      	push	{r4, r5, r6, lr}
 8008804:	6984      	ldr	r4, [r0, #24]
 8008806:	4605      	mov	r5, r0
 8008808:	460e      	mov	r6, r1
 800880a:	b08a      	sub	sp, #40	; 0x28
 800880c:	b174      	cbz	r4, 800882c <Display::Printf(unsigned char, char const*, ...)+0x2c>
 800880e:	ab0f      	add	r3, sp, #60	; 0x3c
 8008810:	2120      	movs	r1, #32
 8008812:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008814:	a802      	add	r0, sp, #8
 8008816:	9301      	str	r3, [sp, #4]
 8008818:	f000 ffe0 	bl	80097dc <vsnprintf>
 800881c:	4604      	mov	r4, r0
 800881e:	69a8      	ldr	r0, [r5, #24]
 8008820:	4631      	mov	r1, r6
 8008822:	6803      	ldr	r3, [r0, #0]
 8008824:	aa02      	add	r2, sp, #8
 8008826:	69dd      	ldr	r5, [r3, #28]
 8008828:	b2a3      	uxth	r3, r4
 800882a:	47a8      	blx	r5
 800882c:	4620      	mov	r0, r4
 800882e:	b00a      	add	sp, #40	; 0x28
 8008830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008834:	b002      	add	sp, #8
 8008836:	4770      	bx	lr

08008838 <Display::TextStatus(char const*)>:
 8008838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800883c:	4604      	mov	r4, r0
 800883e:	6980      	ldr	r0, [r0, #24]
 8008840:	460d      	mov	r5, r1
 8008842:	b360      	cbz	r0, 800889e <Display::TextStatus(char const*)+0x66>
 8008844:	7947      	ldrb	r7, [r0, #5]
 8008846:	2100      	movs	r1, #0
 8008848:	1e7e      	subs	r6, r7, #1
 800884a:	b2f6      	uxtb	r6, r6
 800884c:	4632      	mov	r2, r6
 800884e:	f890 9004 	ldrb.w	r9, [r0, #4]
 8008852:	f04f 0800 	mov.w	r8, #0
 8008856:	f7ff ff6b 	bl	8008730 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 800885a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800885e:	45c1      	cmp	r9, r8
 8008860:	69a0      	ldr	r0, [r4, #24]
 8008862:	d816      	bhi.n	8008892 <Display::TextStatus(char const*)+0x5a>
 8008864:	4632      	mov	r2, r6
 8008866:	2100      	movs	r1, #0
 8008868:	f7ff ff62 	bl	8008730 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 800886c:	69a0      	ldr	r0, [r4, #24]
 800886e:	b1b0      	cbz	r0, 800889e <Display::TextStatus(char const*)+0x66>
 8008870:	2300      	movs	r3, #0
 8008872:	7901      	ldrb	r1, [r0, #4]
 8008874:	5cea      	ldrb	r2, [r5, r3]
 8008876:	b11a      	cbz	r2, 8008880 <Display::TextStatus(char const*)+0x48>
 8008878:	1c5a      	adds	r2, r3, #1
 800887a:	4299      	cmp	r1, r3
 800887c:	4613      	mov	r3, r2
 800887e:	dcf9      	bgt.n	8008874 <Display::TextStatus(char const*)+0x3c>
 8008880:	6802      	ldr	r2, [r0, #0]
 8008882:	4639      	mov	r1, r7
 8008884:	69d4      	ldr	r4, [r2, #28]
 8008886:	b2db      	uxtb	r3, r3
 8008888:	462a      	mov	r2, r5
 800888a:	46a4      	mov	ip, r4
 800888c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008890:	4760      	bx	ip
 8008892:	2120      	movs	r1, #32
 8008894:	f7ff ff51 	bl	800873a <Display::PutChar(int) [clone .isra.0]>
 8008898:	f108 0801 	add.w	r8, r8, #1
 800889c:	e7df      	b.n	800885e <Display::TextStatus(char const*)+0x26>
 800889e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080088a2 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 80088a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088a4:	4605      	mov	r5, r0
 80088a6:	461e      	mov	r6, r3
 80088a8:	460f      	mov	r7, r1
 80088aa:	4614      	mov	r4, r2
 80088ac:	f7ff ffc4 	bl	8008838 <Display::TextStatus(char const*)>
 80088b0:	7c6b      	ldrb	r3, [r5, #17]
 80088b2:	b19b      	cbz	r3, 80088dc <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3a>
 80088b4:	43e2      	mvns	r2, r4
 80088b6:	2312      	movs	r3, #18
 80088b8:	7a28      	ldrb	r0, [r5, #8]
 80088ba:	f88d 3004 	strb.w	r3, [sp, #4]
 80088be:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80088c2:	f88d 3005 	strb.w	r3, [sp, #5]
 80088c6:	f88d 2006 	strb.w	r2, [sp, #6]
 80088ca:	f00e fa13 	bl	8016cf4 <gd32_i2c_set_address(unsigned char)>
 80088ce:	68e8      	ldr	r0, [r5, #12]
 80088d0:	f00e fa08 	bl	8016ce4 <gd32_i2c_set_baudrate(unsigned int)>
 80088d4:	2103      	movs	r1, #3
 80088d6:	a801      	add	r0, sp, #4
 80088d8:	f00e fa12 	bl	8016d00 <gd32_i2c_write(char const*, unsigned int)>
 80088dc:	1c73      	adds	r3, r6, #1
 80088de:	d006      	beq.n	80088ee <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4c>
 80088e0:	4639      	mov	r1, r7
 80088e2:	4630      	mov	r0, r6
 80088e4:	b003      	add	sp, #12
 80088e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80088ea:	f00c bf05 	b.w	80156f8 <console_status>
 80088ee:	b003      	add	sp, #12
 80088f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080088f4 <display::timeout::gpio_init()>:
 80088f4:	b510      	push	{r4, lr}
 80088f6:	f240 6003 	movw	r0, #1539	; 0x603
 80088fa:	f00d fcf5 	bl	80162e8 <rcu_periph_clock_enable>
 80088fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008902:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008906:	2203      	movs	r2, #3
 8008908:	2148      	movs	r1, #72	; 0x48
 800890a:	4801      	ldr	r0, [pc, #4]	; (8008910 <display::timeout::gpio_init()+0x1c>)
 800890c:	f00d bc54 	b.w	80161b8 <gpio_init>
 8008910:	40010c00 	andmi	r0, r1, r0, lsl #24

08008914 <display::timeout::gpio_renew()>:
 8008914:	4b03      	ldr	r3, [pc, #12]	; (8008924 <display::timeout::gpio_renew()+0x10>)
 8008916:	f8d3 0c08 	ldr.w	r0, [r3, #3080]	; 0xc08
 800891a:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 800891e:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8008922:	4770      	bx	lr
 8008924:	40010000 	andmi	r0, r1, r0

08008928 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 8008928:	2905      	cmp	r1, #5
 800892a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800892e:	4605      	mov	r5, r0
 8008930:	460f      	mov	r7, r1
 8008932:	dc62      	bgt.n	80089fa <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xd2>
 8008934:	2400      	movs	r4, #0
 8008936:	4b32      	ldr	r3, [pc, #200]	; (8008a00 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xd8>)
 8008938:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8008a04 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xdc>
 800893c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8008a08 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xe0>
 8008940:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a0c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xe4>
 8008944:	6019      	str	r1, [r3, #0]
 8008946:	2f05      	cmp	r7, #5
 8008948:	d80a      	bhi.n	8008960 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 800894a:	e8df f007 	tbb	[pc, r7]
 800894e:	1c120339 	ldcne	3, cr0, [r2], {57}	; 0x39
 8008952:	23002d25 	movwcs	r2, #3365	; 0xd25
 8008956:	2264      	movs	r2, #100	; 0x64
 8008958:	4621      	mov	r1, r4
 800895a:	4628      	mov	r0, r5
 800895c:	f006 fc36 	bl	800f1cc <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8008960:	3401      	adds	r4, #1
 8008962:	2c08      	cmp	r4, #8
 8008964:	f108 0820 	add.w	r8, r8, #32
 8008968:	d1ed      	bne.n	8008946 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x1e>
 800896a:	2001      	movs	r0, #1
 800896c:	b004      	add	sp, #16
 800896e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008972:	2364      	movs	r3, #100	; 0x64
 8008974:	2200      	movs	r2, #0
 8008976:	4621      	mov	r1, r4
 8008978:	e9cd 3200 	strd	r3, r2, [sp]
 800897c:	4628      	mov	r0, r5
 800897e:	4b24      	ldr	r3, [pc, #144]	; (8008a10 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xe8>)
 8008980:	f006 fc3a 	bl	800f1f8 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008984:	e7ec      	b.n	8008960 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 8008986:	2300      	movs	r3, #0
 8008988:	4621      	mov	r1, r4
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	4628      	mov	r0, r5
 800898e:	2364      	movs	r3, #100	; 0x64
 8008990:	4a1f      	ldr	r2, [pc, #124]	; (8008a10 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xe8>)
 8008992:	f006 fc4d 	bl	800f230 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008996:	e7e3      	b.n	8008960 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 8008998:	2364      	movs	r3, #100	; 0x64
 800899a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800899e:	4621      	mov	r1, r4
 80089a0:	4628      	mov	r0, r5
 80089a2:	f006 fc5f 	bl	800f264 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 80089a6:	e7db      	b.n	8008960 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 80089a8:	2364      	movs	r3, #100	; 0x64
 80089aa:	2200      	movs	r2, #0
 80089ac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80089b0:	230a      	movs	r3, #10
 80089b2:	4621      	mov	r1, r4
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	4628      	mov	r0, r5
 80089b8:	4b15      	ldr	r3, [pc, #84]	; (8008a10 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xe8>)
 80089ba:	f006 fc87 	bl	800f2cc <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80089be:	e7cf      	b.n	8008960 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 80089c0:	2600      	movs	r6, #0
 80089c2:	f8c8 601c 	str.w	r6, [r8, #28]
 80089c6:	f8da 3000 	ldr.w	r3, [sl]
 80089ca:	f8d9 0000 	ldr.w	r0, [r9]
 80089ce:	429e      	cmp	r6, r3
 80089d0:	d30a      	bcc.n	80089e8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc0>
 80089d2:	f8d9 0000 	ldr.w	r0, [r9]
 80089d6:	f007 f93b 	bl	800fc50 <WS28xxMulti::IsUpdating()>
 80089da:	2800      	cmp	r0, #0
 80089dc:	d1f9      	bne.n	80089d2 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xaa>
 80089de:	f8d9 0000 	ldr.w	r0, [r9]
 80089e2:	f007 f89f 	bl	800fb24 <WS28xxMulti::Update()>
 80089e6:	e7bb      	b.n	8008960 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 80089e8:	2300      	movs	r3, #0
 80089ea:	4632      	mov	r2, r6
 80089ec:	4621      	mov	r1, r4
 80089ee:	e9cd 3300 	strd	r3, r3, [sp]
 80089f2:	f007 f973 	bl	800fcdc <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 80089f6:	3601      	adds	r6, #1
 80089f8:	e7e5      	b.n	80089c6 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x9e>
 80089fa:	2000      	movs	r0, #0
 80089fc:	e7b6      	b.n	800896c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x44>
 80089fe:	bf00      	nop
 8008a00:	2000c5d0 	ldrdcs	ip, [r0], -r0
 8008a04:	2000c4bc 			; <UNDEFINED> instruction: 0x2000c4bc
 8008a08:	2000c5c8 	andcs	ip, r0, r8, asr #11
 8008a0c:	2000c5c4 	andcs	ip, r0, r4, asr #11
 8008a10:	00646464 	rsbeq	r6, r4, r4, ror #8

08008a14 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)>:
 8008a14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a16:	780b      	ldrb	r3, [r1, #0]
 8008a18:	4605      	mov	r5, r0
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d11f      	bne.n	8008a5e <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 8008a1e:	4b18      	ldr	r3, [pc, #96]	; (8008a80 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x6c>)
 8008a20:	784c      	ldrb	r4, [r1, #1]
 8008a22:	6818      	ldr	r0, [r3, #0]
 8008a24:	4b17      	ldr	r3, [pc, #92]	; (8008a84 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x70>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	429c      	cmp	r4, r3
 8008a2a:	d018      	beq.n	8008a5e <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	f7ff ff7b 	bl	8008928 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8008a32:	b1a0      	cbz	r0, 8008a5e <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 8008a34:	4e14      	ldr	r6, [pc, #80]	; (8008a88 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x74>)
 8008a36:	b1a4      	cbz	r4, 8008a62 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4e>
 8008a38:	2200      	movs	r2, #0
 8008a3a:	6833      	ldr	r3, [r6, #0]
 8008a3c:	4d13      	ldr	r5, [pc, #76]	; (8008a8c <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x78>)
 8008a3e:	609a      	str	r2, [r3, #8]
 8008a40:	2106      	movs	r1, #6
 8008a42:	6828      	ldr	r0, [r5, #0]
 8008a44:	f7ff fed6 	bl	80087f4 <Display::ClearLine(unsigned char)>
 8008a48:	4620      	mov	r0, r4
 8008a4a:	682d      	ldr	r5, [r5, #0]
 8008a4c:	f006 fbb2 	bl	800f1b4 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8008a50:	2106      	movs	r1, #6
 8008a52:	4603      	mov	r3, r0
 8008a54:	4a0e      	ldr	r2, [pc, #56]	; (8008a90 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x7c>)
 8008a56:	4628      	mov	r0, r5
 8008a58:	9400      	str	r4, [sp, #0]
 8008a5a:	f7ff fed1 	bl	8008800 <Display::Printf(unsigned char, char const*, ...)>
 8008a5e:	b002      	add	sp, #8
 8008a60:	bd70      	pop	{r4, r5, r6, pc}
 8008a62:	6868      	ldr	r0, [r5, #4]
 8008a64:	2101      	movs	r1, #1
 8008a66:	6803      	ldr	r3, [r0, #0]
 8008a68:	695b      	ldr	r3, [r3, #20]
 8008a6a:	4798      	blx	r3
 8008a6c:	6833      	ldr	r3, [r6, #0]
 8008a6e:	686a      	ldr	r2, [r5, #4]
 8008a70:	609a      	str	r2, [r3, #8]
 8008a72:	4b08      	ldr	r3, [pc, #32]	; (8008a94 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x80>)
 8008a74:	6818      	ldr	r0, [r3, #0]
 8008a76:	b002      	add	sp, #8
 8008a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a7c:	f00b bca4 	b.w	80143c8 <DisplayUdf::Show()>
 8008a80:	2000c5cc 	andcs	ip, r0, ip, asr #11
 8008a84:	2000c5d0 	ldrdcs	ip, [r0], -r0
 8008a88:	2000c170 	andcs	ip, r0, r0, ror r1
 8008a8c:	2001cd5c 	andcs	ip, r1, ip, asr sp
 8008a90:	08017d69 	stmdaeq	r1, {r0, r3, r5, r6, r8, sl, fp, ip, sp, lr}
 8008a94:	2001cd54 	andcs	ip, r1, r4, asr sp

08008a98 <StoreNetwork::SaveDhcp(bool)>:
 8008a98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	f88d 1017 	strb.w	r1, [sp, #23]
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8008aa6:	4805      	ldr	r0, [pc, #20]	; (8008abc <StoreNetwork::SaveDhcp(bool)+0x24>)
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	2214      	movs	r2, #20
 8008aac:	6800      	ldr	r0, [r0, #0]
 8008aae:	f10d 0317 	add.w	r3, sp, #23
 8008ab2:	f008 fcb5 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8008ab6:	b007      	add	sp, #28
 8008ab8:	f85d fb04 	ldr.w	pc, [sp], #4
 8008abc:	20014e1c 	andcs	r4, r1, ip, lsl lr

08008ac0 <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 8008ac0:	f1a0 0004 	sub.w	r0, r0, #4
 8008ac4:	e7e8      	b.n	8008a98 <StoreNetwork::SaveDhcp(bool)>
 8008ac6:	bf00      	nop

08008ac8 <FactoryDefaults::Set()>:
 8008ac8:	b508      	push	{r3, lr}
 8008aca:	4b08      	ldr	r3, [pc, #32]	; (8008aec <FactoryDefaults::Set()+0x24>)
 8008acc:	2100      	movs	r1, #0
 8008ace:	6818      	ldr	r0, [r3, #0]
 8008ad0:	f007 fb0c 	bl	80100ec <RemoteConfig::SetDisable(bool)>
 8008ad4:	4b06      	ldr	r3, [pc, #24]	; (8008af0 <FactoryDefaults::Set()+0x28>)
 8008ad6:	210b      	movs	r1, #11
 8008ad8:	6818      	ldr	r0, [r3, #0]
 8008ada:	f008 fc8f 	bl	80113fc <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 8008ade:	4b05      	ldr	r3, [pc, #20]	; (8008af4 <FactoryDefaults::Set()+0x2c>)
 8008ae0:	2101      	movs	r1, #1
 8008ae2:	6818      	ldr	r0, [r3, #0]
 8008ae4:	f7ff ffd8 	bl	8008a98 <StoreNetwork::SaveDhcp(bool)>
 8008ae8:	bd08      	pop	{r3, pc}
 8008aea:	bf00      	nop
 8008aec:	20013e04 	andcs	r3, r1, r4, lsl #28
 8008af0:	20014e1c 	andcs	r4, r1, ip, lsl lr
 8008af4:	20014e2c 	andcs	r4, r1, ip, lsr #28

08008af8 <main>:
 8008af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afc:	2501      	movs	r5, #1
 8008afe:	f5ad 5d1b 	sub.w	sp, sp, #9920	; 0x26c0
 8008b02:	b085      	sub	sp, #20
 8008b04:	a810      	add	r0, sp, #64	; 0x40
 8008b06:	f00c feab 	bl	8015860 <Hardware::Hardware()>
 8008b0a:	a8ad      	add	r0, sp, #692	; 0x2b4
 8008b0c:	f00a f9dc 	bl	8012ec8 <Network::Network()>
 8008b10:	a81c      	add	r0, sp, #112	; 0x70
 8008b12:	f00c fe4f 	bl	80157b4 <LedBlink::LedBlink()>
 8008b16:	a874      	add	r0, sp, #464	; 0x1d0
 8008b18:	f00b fb96 	bl	8014248 <DisplayUdf::DisplayUdf()>
 8008b1c:	4ab8      	ldr	r2, [pc, #736]	; (8008e00 <main+0x308>)
 8008b1e:	4bb9      	ldr	r3, [pc, #740]	; (8008e04 <main+0x30c>)
 8008b20:	49b9      	ldr	r1, [pc, #740]	; (8008e08 <main+0x310>)
 8008b22:	a807      	add	r0, sp, #28
 8008b24:	f00c fe00 	bl	8015728 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8008b28:	a808      	add	r0, sp, #32
 8008b2a:	f009 f883 	bl	8011c34 <FlashRom::FlashRom()>
 8008b2e:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8008e0c <main+0x314>
 8008b32:	a809      	add	r0, sp, #36	; 0x24
 8008b34:	f008 fc3c 	bl	80113b0 <SpiFlashStore::SpiFlashStore()>
 8008b38:	49b5      	ldr	r1, [pc, #724]	; (8008e10 <main+0x318>)
 8008b3a:	a807      	add	r0, sp, #28
 8008b3c:	f00c fe2c 	bl	8015798 <FirmwareVersion::Print(char const*)>
 8008b40:	f8c9 5010 	str.w	r5, [r9, #16]
 8008b44:	2004      	movs	r0, #4
 8008b46:	f00c ff3f 	bl	80159c8 <operator new(unsigned int)>
 8008b4a:	4bb2      	ldr	r3, [pc, #712]	; (8008e14 <main+0x31c>)
 8008b4c:	2400      	movs	r4, #0
 8008b4e:	6003      	str	r3, [r0, #0]
 8008b50:	9010      	str	r0, [sp, #64]	; 0x40
 8008b52:	2008      	movs	r0, #8
 8008b54:	ab10      	add	r3, sp, #64	; 0x40
 8008b56:	f00c ff37 	bl	80159c8 <operator new(unsigned int)>
 8008b5a:	4baf      	ldr	r3, [pc, #700]	; (8008e18 <main+0x320>)
 8008b5c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008b60:	6003      	str	r3, [r0, #0]
 8008b62:	4bae      	ldr	r3, [pc, #696]	; (8008e1c <main+0x324>)
 8008b64:	49ae      	ldr	r1, [pc, #696]	; (8008e20 <main+0x328>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	3b00      	subs	r3, #0
 8008b6a:	bf18      	it	ne
 8008b6c:	2301      	movne	r3, #1
 8008b6e:	7103      	strb	r3, [r0, #4]
 8008b70:	901e      	str	r0, [sp, #120]	; 0x78
 8008b72:	ab1c      	add	r3, sp, #112	; 0x70
 8008b74:	a874      	add	r0, sp, #464	; 0x1d0
 8008b76:	2303      	movs	r3, #3
 8008b78:	f7ff fe93 	bl	80088a2 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008b7c:	a812      	add	r0, sp, #72	; 0x48
 8008b7e:	f008 fedd 	bl	801193c <StoreNetwork::StoreNetwork()>
 8008b82:	abad      	add	r3, sp, #692	; 0x2b4
 8008b84:	4618      	mov	r0, r3
 8008b86:	aa13      	add	r2, sp, #76	; 0x4c
 8008b88:	a912      	add	r1, sp, #72	; 0x48
 8008b8a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8008b8e:	f00a f9f3 	bl	8012f78 <Network::Init(NetworkParamsStore*)>
 8008b92:	a8ad      	add	r0, sp, #692	; 0x2b4
 8008b94:	f00a fc58 	bl	8013448 <Network::Print()>
 8008b98:	2303      	movs	r3, #3
 8008b9a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008b9e:	49a1      	ldr	r1, [pc, #644]	; (8008e24 <main+0x32c>)
 8008ba0:	a874      	add	r0, sp, #464	; 0x1d0
 8008ba2:	f7ff fe7e 	bl	80088a2 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008ba6:	a80a      	add	r0, sp, #40	; 0x28
 8008ba8:	f009 fdd0 	bl	801274c <MDNS::MDNS()>
 8008bac:	a80a      	add	r0, sp, #40	; 0x28
 8008bae:	f009 fe8d 	bl	80128cc <MDNS::Start()>
 8008bb2:	4621      	mov	r1, r4
 8008bb4:	2345      	movs	r3, #69	; 0x45
 8008bb6:	e9cd 4400 	strd	r4, r4, [sp]
 8008bba:	4a9b      	ldr	r2, [pc, #620]	; (8008e28 <main+0x330>)
 8008bbc:	a80a      	add	r0, sp, #40	; 0x28
 8008bbe:	f009 ffef 	bl	8012ba0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8008bc2:	4b9a      	ldr	r3, [pc, #616]	; (8008e2c <main+0x334>)
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	e9cd 5300 	strd	r5, r3, [sp]
 8008bca:	4a99      	ldr	r2, [pc, #612]	; (8008e30 <main+0x338>)
 8008bcc:	2350      	movs	r3, #80	; 0x50
 8008bce:	a80a      	add	r0, sp, #40	; 0x28
 8008bd0:	f009 ffe6 	bl	8012ba0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8008bd4:	4d97      	ldr	r5, [pc, #604]	; (8008e34 <main+0x33c>)
 8008bd6:	a80a      	add	r0, sp, #40	; 0x28
 8008bd8:	f00a f928 	bl	8012e2c <MDNS::Print()>
 8008bdc:	ac22      	add	r4, sp, #136	; 0x88
 8008bde:	2303      	movs	r3, #3
 8008be0:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 8008be4:	4994      	ldr	r1, [pc, #592]	; (8008e38 <main+0x340>)
 8008be6:	a874      	add	r0, sp, #464	; 0x1d0
 8008be8:	f7ff fe5b 	bl	80088a2 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bf0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008bf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008bf8:	a814      	add	r0, sp, #80	; 0x50
 8008bfa:	f009 f80f 	bl	8011c1c <StoreWS28xxDmx::StoreWS28xxDmx()>
 8008bfe:	a914      	add	r1, sp, #80	; 0x50
 8008c00:	a84f      	add	r0, sp, #316	; 0x13c
 8008c02:	f005 fea7 	bl	800e954 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 8008c06:	a84f      	add	r0, sp, #316	; 0x13c
 8008c08:	f005 fed8 	bl	800e9bc <WS28xxDmxParams::Load()>
 8008c0c:	b130      	cbz	r0, 8008c1c <main+0x124>
 8008c0e:	a84f      	add	r0, sp, #316	; 0x13c
 8008c10:	a922      	add	r1, sp, #136	; 0x88
 8008c12:	f006 f966 	bl	800eee2 <WS28xxDmxParams::Set(PixelDmxConfiguration*)>
 8008c16:	a84f      	add	r0, sp, #316	; 0x13c
 8008c18:	f006 f9a1 	bl	800ef5e <WS28xxDmxParams::Dump()>
 8008c1c:	af66      	add	r7, sp, #408	; 0x198
 8008c1e:	a922      	add	r1, sp, #136	; 0x88
 8008c20:	4638      	mov	r0, r7
 8008c22:	f005 fdad 	bl	800e780 <WS28xxDmxMulti::WS28xxDmxMulti(PixelDmxConfiguration&)>
 8008c26:	2004      	movs	r0, #4
 8008c28:	f00c fece 	bl	80159c8 <operator new(unsigned int)>
 8008c2c:	4b83      	ldr	r3, [pc, #524]	; (8008e3c <main+0x344>)
 8008c2e:	4604      	mov	r4, r0
 8008c30:	6003      	str	r3, [r0, #0]
 8008c32:	2203      	movs	r2, #3
 8008c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c38:	2110      	movs	r1, #16
 8008c3a:	4881      	ldr	r0, [pc, #516]	; (8008e40 <main+0x348>)
 8008c3c:	f00d fabc 	bl	80161b8 <gpio_init>
 8008c40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008c44:	4b7f      	ldr	r3, [pc, #508]	; (8008e44 <main+0x34c>)
 8008c46:	f60d 2048 	addw	r0, sp, #2632	; 0xa48
 8008c4a:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8008c4e:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8008c50:	62fc      	str	r4, [r7, #44]	; 0x2c
 8008c52:	b2e9      	uxtb	r1, r5
 8008c54:	f001 f806 	bl	8009c64 <ArtNet4Node::ArtNet4Node(unsigned char)>
 8008c58:	a816      	add	r0, sp, #88	; 0x58
 8008c5a:	f008 fda3 	bl	80117a4 <StoreArtNet::StoreArtNet()>
 8008c5e:	a916      	add	r1, sp, #88	; 0x58
 8008c60:	a88a      	add	r0, sp, #552	; 0x228
 8008c62:	f002 fdcd 	bl	800b800 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8008c66:	a88a      	add	r0, sp, #552	; 0x228
 8008c68:	f002 fdee 	bl	800b848 <ArtNetParams::Load()>
 8008c6c:	b138      	cbz	r0, 8008c7e <main+0x186>
 8008c6e:	a88a      	add	r0, sp, #552	; 0x228
 8008c70:	f60d 214c 	addw	r1, sp, #2636	; 0xa4c
 8008c74:	f003 f99b 	bl	800bfae <ArtNetParams::Set(ArtNetNode*)>
 8008c78:	a88a      	add	r0, sp, #552	; 0x228
 8008c7a:	f003 fa28 	bl	800c0ce <ArtNetParams::Dump()>
 8008c7e:	2400      	movs	r4, #0
 8008c80:	46a0      	mov	r8, r4
 8008c82:	ab17      	add	r3, sp, #92	; 0x5c
 8008c84:	4970      	ldr	r1, [pc, #448]	; (8008e48 <main+0x350>)
 8008c86:	f8cd 3a6c 	str.w	r3, [sp, #2668]	; 0xa6c
 8008c8a:	910c      	str	r1, [sp, #48]	; 0x30
 8008c8c:	ab0c      	add	r3, sp, #48	; 0x30
 8008c8e:	ab0c      	add	r3, sp, #48	; 0x30
 8008c90:	f8cd 3a70 	str.w	r3, [sp, #2672]	; 0xa70
 8008c94:	f8dd a1b4 	ldr.w	sl, [sp, #436]	; 0x1b4
 8008c98:	ab66      	add	r3, sp, #408	; 0x198
 8008c9a:	f1ca 0304 	rsb	r3, sl, #4
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	f60d 2248 	addw	r2, sp, #2632	; 0xa48
 8008ca4:	9305      	str	r3, [sp, #20]
 8008ca6:	42ac      	cmp	r4, r5
 8008ca8:	f040 8200 	bne.w	80090ac <main+0x5b4>
 8008cac:	f89d 6166 	ldrb.w	r6, [sp, #358]	; 0x166
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8008e4c <main+0x354>
 8008cb6:	a80b      	add	r0, sp, #44	; 0x2c
 8008cb8:	ab4f      	add	r3, sp, #316	; 0x13c
 8008cba:	f006 fa55 	bl	800f168 <PixelPatterns::PixelPatterns(unsigned int)>
 8008cbe:	4631      	mov	r1, r6
 8008cc0:	a80b      	add	r0, sp, #44	; 0x2c
 8008cc2:	f8c8 6000 	str.w	r6, [r8]
 8008cc6:	f7ff fe2f 	bl	8008928 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8008cca:	f8d8 3000 	ldr.w	r3, [r8]
 8008cce:	f8df a180 	ldr.w	sl, [pc, #384]	; 8008e50 <main+0x358>
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	bf0c      	ite	eq
 8008cd6:	463a      	moveq	r2, r7
 8008cd8:	2200      	movne	r2, #0
 8008cda:	f8cd 2a54 	str.w	r2, [sp, #2644]	; 0xa54
 8008cde:	4a5d      	ldr	r2, [pc, #372]	; (8008e54 <main+0x35c>)
 8008ce0:	f60d 2348 	addw	r3, sp, #2632	; 0xa48
 8008ce4:	ab18      	add	r3, sp, #96	; 0x60
 8008ce6:	e9c3 2700 	strd	r2, r7, [r3]
 8008cea:	4b5b      	ldr	r3, [pc, #364]	; (8008e58 <main+0x360>)
 8008cec:	aa18      	add	r2, sp, #96	; 0x60
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	495a      	ldr	r1, [pc, #360]	; (8008e5c <main+0x364>)
 8008cf2:	619a      	str	r2, [r3, #24]
 8008cf4:	a874      	add	r0, sp, #464	; 0x1d0
 8008cf6:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	f7ff fdd1 	bl	80088a2 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008d00:	f8da 3000 	ldr.w	r3, [sl]
 8008d04:	6818      	ldr	r0, [r3, #0]
 8008d06:	f006 fca3 	bl	800f650 <PixelType::GetType(pixel::Type)>
 8008d0a:	f8da 3000 	ldr.w	r3, [sl]
 8008d0e:	2120      	movs	r1, #32
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	4a53      	ldr	r2, [pc, #332]	; (8008e60 <main+0x368>)
 8008d14:	e9cd 0300 	strd	r0, r3, [sp]
 8008d18:	462b      	mov	r3, r5
 8008d1a:	a82a      	add	r0, sp, #168	; 0xa8
 8008d1c:	f000 fd46 	bl	80097ac <snprintf>
 8008d20:	ab33      	add	r3, sp, #204	; 0xcc
 8008d22:	4618      	mov	r0, r3
 8008d24:	4a4f      	ldr	r2, [pc, #316]	; (8008e64 <main+0x36c>)
 8008d26:	2120      	movs	r1, #32
 8008d28:	9304      	str	r3, [sp, #16]
 8008d2a:	f000 fd3f 	bl	80097ac <snprintf>
 8008d2e:	4604      	mov	r4, r0
 8008d30:	202c      	movs	r0, #44	; 0x2c
 8008d32:	f00c fe49 	bl	80159c8 <operator new(unsigned int)>
 8008d36:	2200      	movs	r2, #0
 8008d38:	4603      	mov	r3, r0
 8008d3a:	6042      	str	r2, [r0, #4]
 8008d3c:	6282      	str	r2, [r0, #40]	; 0x28
 8008d3e:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 8008d42:	f823 2b08 	strh.w	r2, [r3], #8
 8008d46:	aa2a      	add	r2, sp, #168	; 0xa8
 8008d48:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008d4c:	b111      	cbz	r1, 8008d54 <main+0x25c>
 8008d4e:	459c      	cmp	ip, r3
 8008d50:	f040 81d3 	bne.w	80090fa <main+0x602>
 8008d54:	2201      	movs	r2, #1
 8008d56:	900d      	str	r0, [sp, #52]	; 0x34
 8008d58:	a90d      	add	r1, sp, #52	; 0x34
 8008d5a:	a8df      	add	r0, sp, #892	; 0x37c
 8008d5c:	ab0d      	add	r3, sp, #52	; 0x34
 8008d5e:	f004 fc85 	bl	800d66c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>
 8008d62:	f50d 6089 	add.w	r0, sp, #1096	; 0x448
 8008d66:	f004 f9db 	bl	800d120 <LLRPDevice::LLRPDevice()>
 8008d6a:	4b3f      	ldr	r3, [pc, #252]	; (8008e68 <main+0x370>)
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	93df      	str	r3, [sp, #892]	; 0x37c
 8008d70:	3324      	adds	r3, #36	; 0x24
 8008d72:	f8cd 3448 	str.w	r3, [sp, #1096]	; 0x448
 8008d76:	f20d 404c 	addw	r0, sp, #1100	; 0x44c
 8008d7a:	f004 fe4d 	bl	800da18 <RDMHandler::RDMHandler(bool)>
 8008d7e:	4b3b      	ldr	r3, [pc, #236]	; (8008e6c <main+0x374>)
 8008d80:	493b      	ldr	r1, [pc, #236]	; (8008e70 <main+0x378>)
 8008d82:	6818      	ldr	r0, [r3, #0]
 8008d84:	f00c fdc0 	bl	8015908 <Hardware::GetUuid(unsigned char*)>
 8008d88:	b2e4      	uxtb	r4, r4
 8008d8a:	f89d 33d0 	ldrb.w	r3, [sp, #976]	; 0x3d0
 8008d8e:	2c20      	cmp	r4, #32
 8008d90:	f50d 7b5f 	add.w	fp, sp, #892	; 0x37c
 8008d94:	bf28      	it	cs
 8008d96:	2420      	movcs	r4, #32
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 81b4 	beq.w	8009106 <main+0x60e>
 8008d9e:	f20d 338a 	addw	r3, sp, #906	; 0x38a
 8008da2:	9904      	ldr	r1, [sp, #16]
 8008da4:	4622      	mov	r2, r4
 8008da6:	4618      	mov	r0, r3
 8008da8:	9304      	str	r3, [sp, #16]
 8008daa:	f7ff fc0a 	bl	80085c2 <memcpy>
 8008dae:	f8db 0078 	ldr.w	r0, [fp, #120]	; 0x78
 8008db2:	f88b 402e 	strb.w	r4, [fp, #46]	; 0x2e
 8008db6:	b130      	cbz	r0, 8008dc6 <main+0x2ce>
 8008db8:	6802      	ldr	r2, [r0, #0]
 8008dba:	9b04      	ldr	r3, [sp, #16]
 8008dbc:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	4622      	mov	r2, r4
 8008dc4:	47d8      	blx	fp
 8008dc6:	4b2b      	ldr	r3, [pc, #172]	; (8008e74 <main+0x37c>)
 8008dc8:	2004      	movs	r0, #4
 8008dca:	93f3      	str	r3, [sp, #972]	; 0x3cc
 8008dcc:	f00c fdfc 	bl	80159c8 <operator new(unsigned int)>
 8008dd0:	4b29      	ldr	r3, [pc, #164]	; (8008e78 <main+0x380>)
 8008dd2:	acdf      	add	r4, sp, #892	; 0x37c
 8008dd4:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 8008dd8:	ace0      	add	r4, sp, #896	; 0x380
 8008dda:	6003      	str	r3, [r0, #0]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	4621      	mov	r1, r4
 8008de0:	f60d 204c 	addw	r0, sp, #2636	; 0xa4c
 8008de4:	f002 fb32 	bl	800b44c <ArtNetNode::SetRdmUID(unsigned char const*, bool)>
 8008de8:	a8df      	add	r0, sp, #892	; 0x37c
 8008dea:	f004 fc9d 	bl	800d728 <RDMDeviceResponder::Init()>
 8008dee:	a81a      	add	r0, sp, #104	; 0x68
 8008df0:	f008 fe02 	bl	80119f8 <StoreRDMDevice::StoreRDMDevice()>
 8008df4:	a91a      	add	r1, sp, #104	; 0x68
 8008df6:	a85a      	add	r0, sp, #360	; 0x168
 8008df8:	f004 fba0 	bl	800d53c <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 8008dfc:	a85a      	add	r0, sp, #360	; 0x168
 8008dfe:	e03d      	b.n	8008e7c <main+0x384>
 8008e00:	08017d78 	stmdaeq	r1, {r3, r4, r5, r6, r8, sl, fp, ip, sp, lr}
 8008e04:	08017d6f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, sl, fp, ip, sp, lr}
 8008e08:	08017efd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 8008e0c:	40011000 	andmi	r1, r1, r0
 8008e10:	08017d84 	stmdaeq	r1, {r2, r7, r8, sl, fp, ip, sp, lr}
 8008e14:	08017eec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 8008e18:	08017e2c 	stmdaeq	r1, {r2, r3, r5, r9, sl, fp, ip, sp, lr}
 8008e1c:	2001cd5c 	andcs	ip, r1, ip, asr sp
 8008e20:	08019d59 	stmdaeq	r1, {r0, r3, r4, r6, r8, sl, fp, ip, pc}
 8008e24:	08019d48 	stmdaeq	r1, {r3, r6, r8, sl, fp, ip, pc}
 8008e28:	08017dba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, sl, fp, ip, sp, lr}
 8008e2c:	08017dc8 	stmdaeq	r1, {r3, r6, r7, r8, sl, fp, ip, sp, lr}
 8008e30:	08017dc1 	stmdaeq	r1, {r0, r6, r7, r8, sl, fp, ip, sp, lr}
 8008e34:	08017d28 	stmdaeq	r1, {r3, r5, r8, sl, fp, ip, sp, lr}
 8008e38:	08017f55 	stmdaeq	r1, {r0, r2, r4, r6, r8, r9, sl, fp, ip, sp, lr}
 8008e3c:	08017e80 	stmdaeq	r1, {r7, r9, sl, fp, ip, sp, lr}
 8008e40:	40010c00 	andmi	r0, r1, r0, lsl #24
 8008e44:	40010000 	andmi	r0, r1, r0
 8008e48:	08017e40 	stmdaeq	r1, {r6, r9, sl, fp, ip, sp, lr}
 8008e4c:	2000c5d0 	ldrdcs	ip, [r0], -r0
 8008e50:	20013dd8 	ldrdcs	r3, [r1], -r8
 8008e54:	08017e6c 	stmdaeq	r1, {r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8008e58:	2000c170 	andcs	ip, r0, r0, ror r1
 8008e5c:	08018444 	stmdaeq	r1, {r2, r6, sl, pc}
 8008e60:	08017ddb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r8, sl, fp, ip, sp, lr}
 8008e64:	08017df2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r8, sl, fp, ip, sp, lr}
 8008e68:	08017e98 	stmdaeq	r1, {r3, r4, r7, r9, sl, fp, ip, sp, lr}
 8008e6c:	2001ce4c 	andcs	ip, r1, ip, asr #28
 8008e70:	2000c297 	mulcs	r0, r7, r2
 8008e74:	06010100 	streq	r0, [r1], -r0, lsl #2
 8008e78:	08017ed8 	stmdaeq	r1, {r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8008e7c:	f004 fb70 	bl	800d560 <RDMDeviceParams::Load()>
 8008e80:	b130      	cbz	r0, 8008e90 <main+0x398>
 8008e82:	a85a      	add	r0, sp, #360	; 0x168
 8008e84:	4621      	mov	r1, r4
 8008e86:	f004 fb76 	bl	800d576 <RDMDeviceParams::Set(RDMDevice*)>
 8008e8a:	a85a      	add	r0, sp, #360	; 0x168
 8008e8c:	f004 fba8 	bl	800d5e0 <RDMDeviceParams::Dump()>
 8008e90:	aadf      	add	r2, sp, #892	; 0x37c
 8008e92:	ab1b      	add	r3, sp, #108	; 0x6c
 8008e94:	4610      	mov	r0, r2
 8008e96:	6793      	str	r3, [r2, #120]	; 0x78
 8008e98:	f004 fa56 	bl	800d348 <RDMNetDevice::Print()>
 8008e9c:	f60d 2048 	addw	r0, sp, #2632	; 0xa48
 8008ea0:	f000 ff44 	bl	8009d2c <ArtNet4Node::Print()>
 8008ea4:	4638      	mov	r0, r7
 8008ea6:	f005 fc33 	bl	800e710 <WS28xxDmxMulti::Print()>
 8008eaa:	f8da 3000 	ldr.w	r3, [sl]
 8008eae:	462a      	mov	r2, r5
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	499c      	ldr	r1, [pc, #624]	; (8009124 <main+0x62c>)
 8008eb4:	a874      	add	r0, sp, #464	; 0x1d0
 8008eb6:	f00b f9dd 	bl	8014274 <DisplayUdf::SetTitle(char const*, ...)>
 8008eba:	2202      	movs	r2, #2
 8008ebc:	a874      	add	r0, sp, #464	; 0x1d0
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	f00b fb2e 	bl	8014520 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008ec4:	2206      	movs	r2, #6
 8008ec6:	2103      	movs	r1, #3
 8008ec8:	a874      	add	r0, sp, #464	; 0x1d0
 8008eca:	f00b fb29 	bl	8014520 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008ece:	2203      	movs	r2, #3
 8008ed0:	2104      	movs	r1, #4
 8008ed2:	a874      	add	r0, sp, #464	; 0x1d0
 8008ed4:	f00b fb24 	bl	8014520 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008ed8:	2204      	movs	r2, #4
 8008eda:	2105      	movs	r1, #5
 8008edc:	a874      	add	r0, sp, #464	; 0x1d0
 8008ede:	f00b fb1f 	bl	8014520 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008ee2:	ac22      	add	r4, sp, #136	; 0x88
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	2106      	movs	r1, #6
 8008ee8:	a874      	add	r0, sp, #464	; 0x1d0
 8008eea:	f00b fb19 	bl	8014520 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008eee:	6820      	ldr	r0, [r4, #0]
 8008ef0:	f006 fbae 	bl	800f650 <PixelType::GetType(pixel::Type)>
 8008ef4:	4605      	mov	r5, r0
 8008ef6:	68a0      	ldr	r0, [r4, #8]
 8008ef8:	6867      	ldr	r7, [r4, #4]
 8008efa:	f8d4 a018 	ldr.w	sl, [r4, #24]
 8008efe:	f006 fbff 	bl	800f700 <PixelType::GetMap(pixel::Map)>
 8008f02:	462b      	mov	r3, r5
 8008f04:	2107      	movs	r1, #7
 8008f06:	4a88      	ldr	r2, [pc, #544]	; (8009128 <main+0x630>)
 8008f08:	e9cd a001 	strd	sl, r0, [sp, #4]
 8008f0c:	9700      	str	r7, [sp, #0]
 8008f0e:	a874      	add	r0, sp, #464	; 0x1d0
 8008f10:	f7ff fc76 	bl	8008800 <Display::Printf(unsigned char, char const*, ...)>
 8008f14:	a80e      	add	r0, sp, #56	; 0x38
 8008f16:	f008 fc7d 	bl	8011814 <StoreDisplayUdf::StoreDisplayUdf()>
 8008f1a:	ab45      	add	r3, sp, #276	; 0x114
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	a90e      	add	r1, sp, #56	; 0x38
 8008f20:	9304      	str	r3, [sp, #16]
 8008f22:	f00b fb3f 	bl	80145a4 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8008f26:	9804      	ldr	r0, [sp, #16]
 8008f28:	f00b fb49 	bl	80145be <DisplayUdfParams::Load()>
 8008f2c:	b130      	cbz	r0, 8008f3c <main+0x444>
 8008f2e:	9804      	ldr	r0, [sp, #16]
 8008f30:	a974      	add	r1, sp, #464	; 0x1d0
 8008f32:	f00b fc7c 	bl	801482e <DisplayUdfParams::Set(DisplayUdf*)>
 8008f36:	9804      	ldr	r0, [sp, #16]
 8008f38:	f00b fcac 	bl	8014894 <DisplayUdfParams::Dump()>
 8008f3c:	f60d 214c 	addw	r1, sp, #2636	; 0xa4c
 8008f40:	a874      	add	r0, sp, #464	; 0x1d0
 8008f42:	f00b fd77 	bl	8014a34 <DisplayUdf::Show(ArtNetNode*)>
 8008f46:	b16e      	cbz	r6, 8008f64 <main+0x46c>
 8008f48:	2106      	movs	r1, #6
 8008f4a:	a874      	add	r0, sp, #464	; 0x1d0
 8008f4c:	f7ff fc52 	bl	80087f4 <Display::ClearLine(unsigned char)>
 8008f50:	4630      	mov	r0, r6
 8008f52:	f006 f92f 	bl	800f1b4 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8008f56:	2106      	movs	r1, #6
 8008f58:	4603      	mov	r3, r0
 8008f5a:	4a74      	ldr	r2, [pc, #464]	; (800912c <main+0x634>)
 8008f5c:	9600      	str	r6, [sp, #0]
 8008f5e:	a874      	add	r0, sp, #464	; 0x1d0
 8008f60:	f7ff fc4e 	bl	8008800 <Display::Printf(unsigned char, char const*, ...)>
 8008f64:	f60d 2348 	addw	r3, sp, #2632	; 0xa48
 8008f68:	2203      	movs	r2, #3
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	f893 36f2 	ldrb.w	r3, [r3, #1778]	; 0x6f2
 8008f70:	f50d 608b 	add.w	r0, sp, #1112	; 0x458
 8008f74:	f007 f85e 	bl	8010034 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 8008f78:	ab0f      	add	r3, sp, #60	; 0x3c
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	9304      	str	r3, [sp, #16]
 8008f7e:	f008 fd71 	bl	8011a64 <StoreRemoteConfig::StoreRemoteConfig()>
 8008f82:	9904      	ldr	r1, [sp, #16]
 8008f84:	a83c      	add	r0, sp, #240	; 0xf0
 8008f86:	f007 fb55 	bl	8010634 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8008f8a:	a83c      	add	r0, sp, #240	; 0xf0
 8008f8c:	f007 fb5c 	bl	8010648 <RemoteConfigParams::Load()>
 8008f90:	b138      	cbz	r0, 8008fa2 <main+0x4aa>
 8008f92:	a83c      	add	r0, sp, #240	; 0xf0
 8008f94:	f50d 618b 	add.w	r1, sp, #1112	; 0x458
 8008f98:	f007 fc7d 	bl	8010896 <RemoteConfigParams::Set(RemoteConfig*)>
 8008f9c:	a83c      	add	r0, sp, #240	; 0xf0
 8008f9e:	f007 fc9e 	bl	80108de <RemoteConfigParams::Dump()>
 8008fa2:	a809      	add	r0, sp, #36	; 0x24
 8008fa4:	f008 faa6 	bl	80114f4 <SpiFlashStore::Flash()>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d1fa      	bne.n	8008fa2 <main+0x4aa>
 8008fac:	4c60      	ldr	r4, [pc, #384]	; (8009130 <main+0x638>)
 8008fae:	2303      	movs	r3, #3
 8008fb0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8008fb4:	495f      	ldr	r1, [pc, #380]	; (8009134 <main+0x63c>)
 8008fb6:	a874      	add	r0, sp, #464	; 0x1d0
 8008fb8:	f7ff fc73 	bl	80088a2 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008fbc:	f241 51c1 	movw	r1, #5569	; 0x15c1
 8008fc0:	6820      	ldr	r0, [r4, #0]
 8008fc2:	f009 ffb1 	bl	8012f28 <Network::Begin(unsigned short)>
 8008fc6:	4b5c      	ldr	r3, [pc, #368]	; (8009138 <main+0x640>)
 8008fc8:	4601      	mov	r1, r0
 8008fca:	6018      	str	r0, [r3, #0]
 8008fcc:	4b5b      	ldr	r3, [pc, #364]	; (800913c <main+0x644>)
 8008fce:	6820      	ldr	r0, [r4, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	f009 ffba 	bl	8012f4a <Network::JoinGroup(int, unsigned int)>
 8008fd6:	2302      	movs	r3, #2
 8008fd8:	f248 0280 	movw	r2, #32896	; 0x8080
 8008fdc:	4958      	ldr	r1, [pc, #352]	; (8009140 <main+0x648>)
 8008fde:	a874      	add	r0, sp, #464	; 0x1d0
 8008fe0:	f7ff fc5f 	bl	80088a2 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8008fea:	4956      	ldr	r1, [pc, #344]	; (8009144 <main+0x64c>)
 8008fec:	a874      	add	r0, sp, #464	; 0x1d0
 8008fee:	f7ff fc58 	bl	80088a2 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008ff2:	f60d 2048 	addw	r0, sp, #2632	; 0xa48
 8008ff6:	f000 fe49 	bl	8009c8c <ArtNet4Node::Start()>
 8008ffa:	f248 0280 	movw	r2, #32896	; 0x8080
 8008ffe:	2302      	movs	r3, #2
 8009000:	4951      	ldr	r1, [pc, #324]	; (8009148 <main+0x650>)
 8009002:	a874      	add	r0, sp, #464	; 0x1d0
 8009004:	f7ff fc4d 	bl	80088a2 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009008:	2102      	movs	r1, #2
 800900a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800900e:	f00d f8a9 	bl	8016164 <fwdgt_config>
 8009012:	2801      	cmp	r0, #1
 8009014:	bf0c      	ite	eq
 8009016:	2201      	moveq	r2, #1
 8009018:	2200      	movne	r2, #0
 800901a:	ab10      	add	r3, sp, #64	; 0x40
 800901c:	711a      	strb	r2, [r3, #4]
 800901e:	d101      	bne.n	8009024 <main+0x52c>
 8009020:	f00d f890 	bl	8016144 <fwdgt_enable>
 8009024:	4e49      	ldr	r6, [pc, #292]	; (800914c <main+0x654>)
 8009026:	f50d 6589 	add.w	r5, sp, #1096	; 0x448
 800902a:	ac1c      	add	r4, sp, #112	; 0x70
 800902c:	f00d f892 	bl	8016154 <fwdgt_counter_reload>
 8009030:	f7fe faa2 	bl	8007578 <net_handle>
 8009034:	f60d 2048 	addw	r0, sp, #2632	; 0xa48
 8009038:	f000 fe66 	bl	8009d08 <ArtNet4Node::Run()>
 800903c:	f50d 608b 	add.w	r0, sp, #1112	; 0x458
 8009040:	f007 f9a8 	bl	8010394 <RemoteConfig::Run()>
 8009044:	4628      	mov	r0, r5
 8009046:	f004 f929 	bl	800d29c <LLRPDevice::Run()>
 800904a:	a809      	add	r0, sp, #36	; 0x24
 800904c:	f008 fa52 	bl	80114f4 <SpiFlashStore::Flash()>
 8009050:	68e2      	ldr	r2, [r4, #12]
 8009052:	b192      	cbz	r2, 800907a <main+0x582>
 8009054:	6833      	ldr	r3, [r6, #0]
 8009056:	6961      	ldr	r1, [r4, #20]
 8009058:	1a5b      	subs	r3, r3, r1
 800905a:	429a      	cmp	r2, r3
 800905c:	d80d      	bhi.n	800907a <main+0x582>
 800905e:	6833      	ldr	r3, [r6, #0]
 8009060:	6163      	str	r3, [r4, #20]
 8009062:	6923      	ldr	r3, [r4, #16]
 8009064:	2b01      	cmp	r3, #1
 8009066:	f083 0201 	eor.w	r2, r3, #1
 800906a:	bf18      	it	ne
 800906c:	2301      	movne	r3, #1
 800906e:	6122      	str	r2, [r4, #16]
 8009070:	bf14      	ite	ne
 8009072:	f8c9 3010 	strne.w	r3, [r9, #16]
 8009076:	f8c9 3014 	streq.w	r3, [r9, #20]
 800907a:	9a79      	ldr	r2, [sp, #484]	; 0x1e4
 800907c:	b162      	cbz	r2, 8009098 <main+0x5a0>
 800907e:	f89d 31e0 	ldrb.w	r3, [sp, #480]	; 0x1e0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d148      	bne.n	8009118 <main+0x620>
 8009086:	6833      	ldr	r3, [r6, #0]
 8009088:	9975      	ldr	r1, [sp, #468]	; 0x1d4
 800908a:	1a5b      	subs	r3, r3, r1
 800908c:	429a      	cmp	r2, r3
 800908e:	d203      	bcs.n	8009098 <main+0x5a0>
 8009090:	2101      	movs	r1, #1
 8009092:	a874      	add	r0, sp, #464	; 0x1d0
 8009094:	f7ff fb9e 	bl	80087d4 <Display::SetSleep(bool)>
 8009098:	f8d8 3000 	ldr.w	r3, [r8]
 800909c:	b113      	cbz	r3, 80090a4 <main+0x5ac>
 800909e:	a80b      	add	r0, sp, #44	; 0x2c
 80090a0:	f006 faaa 	bl	800f5f8 <PixelPatterns::Run()>
 80090a4:	a80a      	add	r0, sp, #40	; 0x28
 80090a6:	f009 fe9d 	bl	8012de4 <MDNS::Run()>
 80090aa:	e7bf      	b.n	800902c <main+0x534>
 80090ac:	2c07      	cmp	r4, #7
 80090ae:	d821      	bhi.n	80090f4 <main+0x5fc>
 80090b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090b4:	aa4f      	add	r2, sp, #316	; 0x13c
 80090b6:	6852      	ldr	r2, [r2, #4]
 80090b8:	40a3      	lsls	r3, r4
 80090ba:	4393      	bics	r3, r2
 80090bc:	d11a      	bne.n	80090f4 <main+0x5fc>
 80090be:	2600      	movs	r6, #0
 80090c0:	ab4f      	add	r3, sp, #316	; 0x13c
 80090c2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80090c6:	8b5b      	ldrh	r3, [r3, #26]
 80090c8:	f60d 2b4c 	addw	fp, sp, #2636	; 0xa4c
 80090cc:	9304      	str	r3, [sp, #16]
 80090ce:	b2b3      	uxth	r3, r6
 80090d0:	4553      	cmp	r3, sl
 80090d2:	eb08 0106 	add.w	r1, r8, r6
 80090d6:	d304      	bcc.n	80090e2 <main+0x5ea>
 80090d8:	9b05      	ldr	r3, [sp, #20]
 80090da:	eb03 0801 	add.w	r8, r3, r1
 80090de:	3401      	adds	r4, #1
 80090e0:	e5e1      	b.n	8008ca6 <main+0x1ae>
 80090e2:	9a04      	ldr	r2, [sp, #16]
 80090e4:	4658      	mov	r0, fp
 80090e6:	4413      	add	r3, r2
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	2201      	movs	r2, #1
 80090ec:	f001 fa09 	bl	800a502 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 80090f0:	3601      	adds	r6, #1
 80090f2:	e7ec      	b.n	80090ce <main+0x5d6>
 80090f4:	f108 0804 	add.w	r8, r8, #4
 80090f8:	e7f1      	b.n	80090de <main+0x5e6>
 80090fa:	f803 1b01 	strb.w	r1, [r3], #1
 80090fe:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009100:	3101      	adds	r1, #1
 8009102:	6281      	str	r1, [r0, #40]	; 0x28
 8009104:	e620      	b.n	8008d48 <main+0x250>
 8009106:	4622      	mov	r2, r4
 8009108:	9904      	ldr	r1, [sp, #16]
 800910a:	f20d 30d1 	addw	r0, sp, #977	; 0x3d1
 800910e:	f7ff fa58 	bl	80085c2 <memcpy>
 8009112:	f88b 4075 	strb.w	r4, [fp, #117]	; 0x75
 8009116:	e656      	b.n	8008dc6 <main+0x2ce>
 8009118:	f7ff fbfc 	bl	8008914 <display::timeout::gpio_renew()>
 800911c:	2800      	cmp	r0, #0
 800911e:	d0bb      	beq.n	8009098 <main+0x5a0>
 8009120:	2100      	movs	r1, #0
 8009122:	e7b6      	b.n	8009092 <main+0x59a>
 8009124:	08017e02 	stmdaeq	r1, {r1, r9, sl, fp, ip, sp, lr}
 8009128:	08017e17 	stmdaeq	r1, {r0, r1, r2, r4, r9, sl, fp, ip, sp, lr}
 800912c:	08017d69 	stmdaeq	r1, {r0, r3, r5, r6, r8, sl, fp, ip, sp, lr}
 8009130:	2001c724 	andcs	ip, r1, r4, lsr #14
 8009134:	08018466 	stmdaeq	r1, {r1, r2, r5, r6, sl, pc}
 8009138:	20000000 	andcs	r0, r0, r0
 800913c:	2000c18c 	andcs	ip, r0, ip, lsl #3
 8009140:	08018457 	stmdaeq	r1, {r0, r1, r2, r4, r6, sl, pc}
 8009144:	08017f44 	stmdaeq	r1, {r2, r6, r8, r9, sl, fp, ip, sp, lr}
 8009148:	08017f69 	stmdaeq	r1, {r0, r3, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 800914c:	2001ce64 	andcs	ip, r1, r4, ror #28

08009150 <RDMSoftwareVersion::GetVersion()>:
 8009150:	4800      	ldr	r0, [pc, #0]	; (8009154 <RDMSoftwareVersion::GetVersion()+0x4>)
 8009152:	4770      	bx	lr
 8009154:	08017f01 	stmdaeq	r1, {r0, r8, r9, sl, fp, ip, sp, lr}

08009158 <RDMSoftwareVersion::GetVersionLength()>:
 8009158:	2003      	movs	r0, #3
 800915a:	4770      	bx	lr

0800915c <RDMSoftwareVersion::GetVersionId()>:
 800915c:	4800      	ldr	r0, [pc, #0]	; (8009160 <RDMSoftwareVersion::GetVersionId()+0x4>)
 800915e:	4770      	bx	lr
 8009160:	62360b57 	eorsvs	r0, r6, #89088	; 0x15c00

08009164 <_itostr>:
 8009164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009166:	0fc7      	lsrs	r7, r0, #31
 8009168:	b091      	sub	sp, #68	; 0x44
 800916a:	bf18      	it	ne
 800916c:	4240      	negne	r0, r0
 800916e:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8009172:	b9c8      	cbnz	r0, 80091a8 <_itostr+0x44>
 8009174:	2330      	movs	r3, #48	; 0x30
 8009176:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 800917a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800917e:	b132      	cbz	r2, 800918e <_itostr+0x2a>
 8009180:	4668      	mov	r0, sp
 8009182:	2530      	movs	r5, #48	; 0x30
 8009184:	1ae6      	subs	r6, r4, r3
 8009186:	4296      	cmp	r6, r2
 8009188:	da01      	bge.n	800918e <_itostr+0x2a>
 800918a:	4283      	cmp	r3, r0
 800918c:	d81c      	bhi.n	80091c8 <_itostr+0x64>
 800918e:	b117      	cbz	r7, 8009196 <_itostr+0x32>
 8009190:	222d      	movs	r2, #45	; 0x2d
 8009192:	f803 2901 	strb.w	r2, [r3], #-1
 8009196:	3301      	adds	r3, #1
 8009198:	1ae0      	subs	r0, r4, r3
 800919a:	3901      	subs	r1, #1
 800919c:	aa10      	add	r2, sp, #64	; 0x40
 800919e:	4293      	cmp	r3, r2
 80091a0:	d315      	bcc.n	80091ce <_itostr+0x6a>
 80091a2:	3001      	adds	r0, #1
 80091a4:	b011      	add	sp, #68	; 0x44
 80091a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091a8:	4623      	mov	r3, r4
 80091aa:	250a      	movs	r5, #10
 80091ac:	46ec      	mov	ip, sp
 80091ae:	fb90 f6f5 	sdiv	r6, r0, r5
 80091b2:	fb05 0016 	mls	r0, r5, r6, r0
 80091b6:	3030      	adds	r0, #48	; 0x30
 80091b8:	f803 0901 	strb.w	r0, [r3], #-1
 80091bc:	4630      	mov	r0, r6
 80091be:	2e00      	cmp	r6, #0
 80091c0:	d0dd      	beq.n	800917e <_itostr+0x1a>
 80091c2:	4563      	cmp	r3, ip
 80091c4:	d1f3      	bne.n	80091ae <_itostr+0x4a>
 80091c6:	e7da      	b.n	800917e <_itostr+0x1a>
 80091c8:	f803 5901 	strb.w	r5, [r3], #-1
 80091cc:	e7da      	b.n	8009184 <_itostr+0x20>
 80091ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091d2:	f801 2f01 	strb.w	r2, [r1, #1]!
 80091d6:	e7e1      	b.n	800919c <_itostr+0x38>

080091d8 <_xputch>:
 80091d8:	4603      	mov	r3, r0
 80091da:	b410      	push	{r4}
 80091dc:	4c08      	ldr	r4, [pc, #32]	; (8009200 <_xputch+0x28>)
 80091de:	68da      	ldr	r2, [r3, #12]
 80091e0:	4608      	mov	r0, r1
 80091e2:	6821      	ldr	r1, [r4, #0]
 80091e4:	3201      	adds	r2, #1
 80091e6:	60da      	str	r2, [r3, #12]
 80091e8:	b139      	cbz	r1, 80091fa <_xputch+0x22>
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	da02      	bge.n	80091f6 <_xputch+0x1e>
 80091f0:	1c4b      	adds	r3, r1, #1
 80091f2:	6023      	str	r3, [r4, #0]
 80091f4:	7008      	strb	r0, [r1, #0]
 80091f6:	bc10      	pop	{r4}
 80091f8:	4770      	bx	lr
 80091fa:	bc10      	pop	{r4}
 80091fc:	f00c ba44 	b.w	8015688 <console_putc>
 8009200:	200000e8 	andcs	r0, r0, r8, ror #1

08009204 <_format_int>:
 8009204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009208:	4698      	mov	r8, r3
 800920a:	b091      	sub	sp, #68	; 0x44
 800920c:	ea52 0308 	orrs.w	r3, r2, r8
 8009210:	4606      	mov	r6, r0
 8009212:	4617      	mov	r7, r2
 8009214:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8009218:	d133      	bne.n	8009282 <_format_int+0x7e>
 800921a:	2330      	movs	r3, #48	; 0x30
 800921c:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8009220:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8009224:	6833      	ldr	r3, [r6, #0]
 8009226:	07d8      	lsls	r0, r3, #31
 8009228:	d507      	bpl.n	800923a <_format_int+0x36>
 800922a:	466a      	mov	r2, sp
 800922c:	2030      	movs	r0, #48	; 0x30
 800922e:	6871      	ldr	r1, [r6, #4]
 8009230:	1b2f      	subs	r7, r5, r4
 8009232:	428f      	cmp	r7, r1
 8009234:	da01      	bge.n	800923a <_format_int+0x36>
 8009236:	4294      	cmp	r4, r2
 8009238:	d839      	bhi.n	80092ae <_format_int+0xaa>
 800923a:	0699      	lsls	r1, r3, #26
 800923c:	d507      	bpl.n	800924e <_format_int+0x4a>
 800923e:	466a      	mov	r2, sp
 8009240:	2030      	movs	r0, #48	; 0x30
 8009242:	68b1      	ldr	r1, [r6, #8]
 8009244:	1b2f      	subs	r7, r5, r4
 8009246:	428f      	cmp	r7, r1
 8009248:	da01      	bge.n	800924e <_format_int+0x4a>
 800924a:	4294      	cmp	r4, r2
 800924c:	d832      	bhi.n	80092b4 <_format_int+0xb0>
 800924e:	071a      	lsls	r2, r3, #28
 8009250:	bf44      	itt	mi
 8009252:	222d      	movmi	r2, #45	; 0x2d
 8009254:	f804 2901 	strbmi.w	r2, [r4], #-1
 8009258:	065b      	lsls	r3, r3, #25
 800925a:	d407      	bmi.n	800926c <_format_int+0x68>
 800925c:	466b      	mov	r3, sp
 800925e:	2120      	movs	r1, #32
 8009260:	68b2      	ldr	r2, [r6, #8]
 8009262:	1b28      	subs	r0, r5, r4
 8009264:	4290      	cmp	r0, r2
 8009266:	da01      	bge.n	800926c <_format_int+0x68>
 8009268:	429c      	cmp	r4, r3
 800926a:	d826      	bhi.n	80092ba <_format_int+0xb6>
 800926c:	1b2d      	subs	r5, r5, r4
 800926e:	3401      	adds	r4, #1
 8009270:	ab10      	add	r3, sp, #64	; 0x40
 8009272:	429c      	cmp	r4, r3
 8009274:	d324      	bcc.n	80092c0 <_format_int+0xbc>
 8009276:	68b3      	ldr	r3, [r6, #8]
 8009278:	42ab      	cmp	r3, r5
 800927a:	dc27      	bgt.n	80092cc <_format_int+0xc8>
 800927c:	b011      	add	sp, #68	; 0x44
 800927e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009282:	462c      	mov	r4, r5
 8009284:	46e9      	mov	r9, sp
 8009286:	4638      	mov	r0, r7
 8009288:	4641      	mov	r1, r8
 800928a:	220a      	movs	r2, #10
 800928c:	2300      	movs	r3, #0
 800928e:	f7fe fe4f 	bl	8007f30 <__aeabi_uldivmod>
 8009292:	3230      	adds	r2, #48	; 0x30
 8009294:	f804 2901 	strb.w	r2, [r4], #-1
 8009298:	463a      	mov	r2, r7
 800929a:	4643      	mov	r3, r8
 800929c:	2a0a      	cmp	r2, #10
 800929e:	f173 0300 	sbcs.w	r3, r3, #0
 80092a2:	4607      	mov	r7, r0
 80092a4:	4688      	mov	r8, r1
 80092a6:	d3bd      	bcc.n	8009224 <_format_int+0x20>
 80092a8:	454c      	cmp	r4, r9
 80092aa:	d1ec      	bne.n	8009286 <_format_int+0x82>
 80092ac:	e7ba      	b.n	8009224 <_format_int+0x20>
 80092ae:	f804 0901 	strb.w	r0, [r4], #-1
 80092b2:	e7bd      	b.n	8009230 <_format_int+0x2c>
 80092b4:	f804 0901 	strb.w	r0, [r4], #-1
 80092b8:	e7c4      	b.n	8009244 <_format_int+0x40>
 80092ba:	f804 1901 	strb.w	r1, [r4], #-1
 80092be:	e7d0      	b.n	8009262 <_format_int+0x5e>
 80092c0:	4630      	mov	r0, r6
 80092c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092c6:	f7ff ff87 	bl	80091d8 <_xputch>
 80092ca:	e7d1      	b.n	8009270 <_format_int+0x6c>
 80092cc:	2120      	movs	r1, #32
 80092ce:	4630      	mov	r0, r6
 80092d0:	f7ff ff82 	bl	80091d8 <_xputch>
 80092d4:	3501      	adds	r5, #1
 80092d6:	e7ce      	b.n	8009276 <_format_int+0x72>

080092d8 <_format_hex>:
 80092d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092da:	b091      	sub	sp, #68	; 0x44
 80092dc:	4606      	mov	r6, r0
 80092de:	6804      	ldr	r4, [r0, #0]
 80092e0:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 80092e4:	bb61      	cbnz	r1, 8009340 <_format_hex+0x68>
 80092e6:	2330      	movs	r3, #48	; 0x30
 80092e8:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80092ec:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80092f0:	07e5      	lsls	r5, r4, #31
 80092f2:	d507      	bpl.n	8009304 <_format_hex+0x2c>
 80092f4:	4669      	mov	r1, sp
 80092f6:	2530      	movs	r5, #48	; 0x30
 80092f8:	6870      	ldr	r0, [r6, #4]
 80092fa:	1ad7      	subs	r7, r2, r3
 80092fc:	4287      	cmp	r7, r0
 80092fe:	da01      	bge.n	8009304 <_format_hex+0x2c>
 8009300:	428b      	cmp	r3, r1
 8009302:	d831      	bhi.n	8009368 <_format_hex+0x90>
 8009304:	06a0      	lsls	r0, r4, #26
 8009306:	d507      	bpl.n	8009318 <_format_hex+0x40>
 8009308:	4669      	mov	r1, sp
 800930a:	2530      	movs	r5, #48	; 0x30
 800930c:	68b0      	ldr	r0, [r6, #8]
 800930e:	1ad7      	subs	r7, r2, r3
 8009310:	4287      	cmp	r7, r0
 8009312:	da01      	bge.n	8009318 <_format_hex+0x40>
 8009314:	428b      	cmp	r3, r1
 8009316:	d82a      	bhi.n	800936e <_format_hex+0x96>
 8009318:	0661      	lsls	r1, r4, #25
 800931a:	d407      	bmi.n	800932c <_format_hex+0x54>
 800931c:	4669      	mov	r1, sp
 800931e:	2420      	movs	r4, #32
 8009320:	68b0      	ldr	r0, [r6, #8]
 8009322:	1ad5      	subs	r5, r2, r3
 8009324:	4285      	cmp	r5, r0
 8009326:	da01      	bge.n	800932c <_format_hex+0x54>
 8009328:	428b      	cmp	r3, r1
 800932a:	d823      	bhi.n	8009374 <_format_hex+0x9c>
 800932c:	1ad5      	subs	r5, r2, r3
 800932e:	1c5c      	adds	r4, r3, #1
 8009330:	ab10      	add	r3, sp, #64	; 0x40
 8009332:	429c      	cmp	r4, r3
 8009334:	d321      	bcc.n	800937a <_format_hex+0xa2>
 8009336:	68b3      	ldr	r3, [r6, #8]
 8009338:	429d      	cmp	r5, r3
 800933a:	db24      	blt.n	8009386 <_format_hex+0xae>
 800933c:	b011      	add	sp, #68	; 0x44
 800933e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009340:	f014 0f02 	tst.w	r4, #2
 8009344:	bf0c      	ite	eq
 8009346:	2757      	moveq	r7, #87	; 0x57
 8009348:	2737      	movne	r7, #55	; 0x37
 800934a:	4613      	mov	r3, r2
 800934c:	466d      	mov	r5, sp
 800934e:	f001 000f 	and.w	r0, r1, #15
 8009352:	2809      	cmp	r0, #9
 8009354:	bf94      	ite	ls
 8009356:	3030      	addls	r0, #48	; 0x30
 8009358:	19c0      	addhi	r0, r0, r7
 800935a:	0909      	lsrs	r1, r1, #4
 800935c:	f803 0901 	strb.w	r0, [r3], #-1
 8009360:	d0c6      	beq.n	80092f0 <_format_hex+0x18>
 8009362:	42ab      	cmp	r3, r5
 8009364:	d1f3      	bne.n	800934e <_format_hex+0x76>
 8009366:	e7c3      	b.n	80092f0 <_format_hex+0x18>
 8009368:	f803 5901 	strb.w	r5, [r3], #-1
 800936c:	e7c5      	b.n	80092fa <_format_hex+0x22>
 800936e:	f803 5901 	strb.w	r5, [r3], #-1
 8009372:	e7cc      	b.n	800930e <_format_hex+0x36>
 8009374:	f803 4901 	strb.w	r4, [r3], #-1
 8009378:	e7d3      	b.n	8009322 <_format_hex+0x4a>
 800937a:	4630      	mov	r0, r6
 800937c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009380:	f7ff ff2a 	bl	80091d8 <_xputch>
 8009384:	e7d4      	b.n	8009330 <_format_hex+0x58>
 8009386:	2120      	movs	r1, #32
 8009388:	4630      	mov	r0, r6
 800938a:	f7ff ff25 	bl	80091d8 <_xputch>
 800938e:	3501      	adds	r5, #1
 8009390:	e7d1      	b.n	8009336 <_format_hex+0x5e>
	...

08009394 <_vprintf>:
 8009394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009398:	4614      	mov	r4, r2
 800939a:	2200      	movs	r2, #0
 800939c:	460b      	mov	r3, r1
 800939e:	f04f 0800 	mov.w	r8, #0
 80093a2:	b099      	sub	sp, #100	; 0x64
 80093a4:	e9cd 2006 	strd	r2, r0, [sp, #24]
 80093a8:	af08      	add	r7, sp, #32
 80093aa:	7819      	ldrb	r1, [r3, #0]
 80093ac:	b919      	cbnz	r1, 80093b6 <_vprintf+0x22>
 80093ae:	9806      	ldr	r0, [sp, #24]
 80093b0:	b019      	add	sp, #100	; 0x64
 80093b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b6:	2925      	cmp	r1, #37	; 0x25
 80093b8:	f103 0601 	add.w	r6, r3, #1
 80093bc:	d004      	beq.n	80093c8 <_vprintf+0x34>
 80093be:	a803      	add	r0, sp, #12
 80093c0:	f7ff ff0a 	bl	80091d8 <_xputch>
 80093c4:	4633      	mov	r3, r6
 80093c6:	e7f0      	b.n	80093aa <_vprintf+0x16>
 80093c8:	2200      	movs	r2, #0
 80093ca:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80093ce:	9205      	str	r2, [sp, #20]
 80093d0:	785a      	ldrb	r2, [r3, #1]
 80093d2:	2a30      	cmp	r2, #48	; 0x30
 80093d4:	d129      	bne.n	800942a <_vprintf+0x96>
 80093d6:	2220      	movs	r2, #32
 80093d8:	9203      	str	r2, [sp, #12]
 80093da:	1c9e      	adds	r6, r3, #2
 80093dc:	2200      	movs	r2, #0
 80093de:	4635      	mov	r5, r6
 80093e0:	4613      	mov	r3, r2
 80093e2:	f04f 0c0a 	mov.w	ip, #10
 80093e6:	7829      	ldrb	r1, [r5, #0]
 80093e8:	462e      	mov	r6, r5
 80093ea:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 80093ee:	2809      	cmp	r0, #9
 80093f0:	f105 0501 	add.w	r5, r5, #1
 80093f4:	d91d      	bls.n	8009432 <_vprintf+0x9e>
 80093f6:	b12a      	cbz	r2, 8009404 <_vprintf+0x70>
 80093f8:	9305      	str	r3, [sp, #20]
 80093fa:	b11b      	cbz	r3, 8009404 <_vprintf+0x70>
 80093fc:	9b03      	ldr	r3, [sp, #12]
 80093fe:	f043 0310 	orr.w	r3, r3, #16
 8009402:	9303      	str	r3, [sp, #12]
 8009404:	292e      	cmp	r1, #46	; 0x2e
 8009406:	d123      	bne.n	8009450 <_vprintf+0xbc>
 8009408:	7873      	ldrb	r3, [r6, #1]
 800940a:	2b2a      	cmp	r3, #42	; 0x2a
 800940c:	d015      	beq.n	800943a <_vprintf+0xa6>
 800940e:	2100      	movs	r1, #0
 8009410:	250a      	movs	r5, #10
 8009412:	460a      	mov	r2, r1
 8009414:	1c70      	adds	r0, r6, #1
 8009416:	7803      	ldrb	r3, [r0, #0]
 8009418:	4606      	mov	r6, r0
 800941a:	3b30      	subs	r3, #48	; 0x30
 800941c:	2b09      	cmp	r3, #9
 800941e:	f100 0001 	add.w	r0, r0, #1
 8009422:	d959      	bls.n	80094d8 <_vprintf+0x144>
 8009424:	b181      	cbz	r1, 8009448 <_vprintf+0xb4>
 8009426:	9204      	str	r2, [sp, #16]
 8009428:	e00e      	b.n	8009448 <_vprintf+0xb4>
 800942a:	2a2d      	cmp	r2, #45	; 0x2d
 800942c:	d1d6      	bne.n	80093dc <_vprintf+0x48>
 800942e:	2240      	movs	r2, #64	; 0x40
 8009430:	e7d2      	b.n	80093d8 <_vprintf+0x44>
 8009432:	2201      	movs	r2, #1
 8009434:	fb0c 0303 	mla	r3, ip, r3, r0
 8009438:	e7d5      	b.n	80093e6 <_vprintf+0x52>
 800943a:	f854 3b04 	ldr.w	r3, [r4], #4
 800943e:	3602      	adds	r6, #2
 8009440:	2b00      	cmp	r3, #0
 8009442:	bfb8      	it	lt
 8009444:	425b      	neglt	r3, r3
 8009446:	9304      	str	r3, [sp, #16]
 8009448:	9b03      	ldr	r3, [sp, #12]
 800944a:	f043 0301 	orr.w	r3, r3, #1
 800944e:	9303      	str	r3, [sp, #12]
 8009450:	7833      	ldrb	r3, [r6, #0]
 8009452:	2b6c      	cmp	r3, #108	; 0x6c
 8009454:	bf04      	itt	eq
 8009456:	9b03      	ldreq	r3, [sp, #12]
 8009458:	3601      	addeq	r6, #1
 800945a:	7831      	ldrb	r1, [r6, #0]
 800945c:	bf04      	itt	eq
 800945e:	f043 0304 	orreq.w	r3, r3, #4
 8009462:	9303      	streq	r3, [sp, #12]
 8009464:	2958      	cmp	r1, #88	; 0x58
 8009466:	f000 8171 	beq.w	800974c <_vprintf+0x3b8>
 800946a:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 800946e:	b2da      	uxtb	r2, r3
 8009470:	2a15      	cmp	r2, #21
 8009472:	d8a4      	bhi.n	80093be <_vprintf+0x2a>
 8009474:	2b15      	cmp	r3, #21
 8009476:	d8a2      	bhi.n	80093be <_vprintf+0x2a>
 8009478:	a201      	add	r2, pc, #4	; (adr r2, 8009480 <_vprintf+0xec>)
 800947a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947e:	bf00      	nop
 8009480:	080094e1 	stmdaeq	r0, {r0, r5, r6, r7, sl, ip, pc}
 8009484:	080094f3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, sl, ip, pc}
 8009488:	080093bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, r9, ip, pc}
 800948c:	08009529 	stmdaeq	r0, {r0, r3, r5, r8, sl, ip, pc}
 8009490:	080093bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, r9, ip, pc}
 8009494:	080093bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, r9, ip, pc}
 8009498:	080094f3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, sl, ip, pc}
 800949c:	080093bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, r9, ip, pc}
 80094a0:	080093bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, r9, ip, pc}
 80094a4:	080093bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, r9, ip, pc}
 80094a8:	080093bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, r9, ip, pc}
 80094ac:	080093bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, r9, ip, pc}
 80094b0:	080093bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, r9, ip, pc}
 80094b4:	0800968f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, sl, ip, pc}
 80094b8:	080093bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, r9, ip, pc}
 80094bc:	080093bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, r9, ip, pc}
 80094c0:	080096b7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, r9, sl, ip, pc}
 80094c4:	080093bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, r9, ip, pc}
 80094c8:	0800972d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9, sl, ip, pc}
 80094cc:	080093bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, r9, ip, pc}
 80094d0:	080093bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, r9, ip, pc}
 80094d4:	08009755 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, sl, ip, pc}
 80094d8:	2101      	movs	r1, #1
 80094da:	fb05 3202 	mla	r2, r5, r2, r3
 80094de:	e79a      	b.n	8009416 <_vprintf+0x82>
 80094e0:	4625      	mov	r5, r4
 80094e2:	a803      	add	r0, sp, #12
 80094e4:	f855 1b04 	ldr.w	r1, [r5], #4
 80094e8:	f7ff fe76 	bl	80091d8 <_xputch>
 80094ec:	462c      	mov	r4, r5
 80094ee:	3601      	adds	r6, #1
 80094f0:	e768      	b.n	80093c4 <_vprintf+0x30>
 80094f2:	9903      	ldr	r1, [sp, #12]
 80094f4:	074d      	lsls	r5, r1, #29
 80094f6:	bf51      	iteee	pl
 80094f8:	4625      	movpl	r5, r4
 80094fa:	3407      	addmi	r4, #7
 80094fc:	f024 0407 	bicmi.w	r4, r4, #7
 8009500:	4625      	movmi	r5, r4
 8009502:	bf55      	itete	pl
 8009504:	f855 2b04 	ldrpl.w	r2, [r5], #4
 8009508:	6863      	ldrmi	r3, [r4, #4]
 800950a:	17d3      	asrpl	r3, r2, #31
 800950c:	f855 2b08 	ldrmi.w	r2, [r5], #8
 8009510:	2b00      	cmp	r3, #0
 8009512:	da05      	bge.n	8009520 <_vprintf+0x18c>
 8009514:	f041 0108 	orr.w	r1, r1, #8
 8009518:	4252      	negs	r2, r2
 800951a:	9103      	str	r1, [sp, #12]
 800951c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8009520:	a803      	add	r0, sp, #12
 8009522:	f7ff fe6f 	bl	8009204 <_format_int>
 8009526:	e7e1      	b.n	80094ec <_vprintf+0x158>
 8009528:	3407      	adds	r4, #7
 800952a:	f024 0507 	bic.w	r5, r4, #7
 800952e:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8009532:	f7fe fb03 	bl	8007b3c <__aeabi_d2f>
 8009536:	9b03      	ldr	r3, [sp, #12]
 8009538:	4641      	mov	r1, r8
 800953a:	07dc      	lsls	r4, r3, #31
 800953c:	bf54      	ite	pl
 800953e:	f04f 0a06 	movpl.w	sl, #6
 8009542:	f8dd a010 	ldrmi.w	sl, [sp, #16]
 8009546:	4681      	mov	r9, r0
 8009548:	f7fe fca4 	bl	8007e94 <__aeabi_fcmplt>
 800954c:	2800      	cmp	r0, #0
 800954e:	d063      	beq.n	8009618 <_vprintf+0x284>
 8009550:	232d      	movs	r3, #45	; 0x2d
 8009552:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 8009556:	f88d 3020 	strb.w	r3, [sp, #32]
 800955a:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
 800955e:	4648      	mov	r0, r9
 8009560:	f7fe fcc0 	bl	8007ee4 <__aeabi_f2iz>
 8009564:	4659      	mov	r1, fp
 8009566:	2200      	movs	r2, #0
 8009568:	4604      	mov	r4, r0
 800956a:	f7ff fdfb 	bl	8009164 <_itostr>
 800956e:	eb0b 0200 	add.w	r2, fp, r0
 8009572:	e9cd 2000 	strd	r2, r0, [sp]
 8009576:	4620      	mov	r0, r4
 8009578:	f7fe fbea 	bl	8007d50 <__aeabi_i2f>
 800957c:	4601      	mov	r1, r0
 800957e:	4648      	mov	r0, r9
 8009580:	f7fe fb30 	bl	8007be4 <__aeabi_fsub>
 8009584:	222e      	movs	r2, #46	; 0x2e
 8009586:	4601      	mov	r1, r0
 8009588:	200a      	movs	r0, #10
 800958a:	9b00      	ldr	r3, [sp, #0]
 800958c:	f10a 0901 	add.w	r9, sl, #1
 8009590:	1c5c      	adds	r4, r3, #1
 8009592:	9b01      	ldr	r3, [sp, #4]
 8009594:	f80b 2003 	strb.w	r2, [fp, r3]
 8009598:	4603      	mov	r3, r0
 800959a:	f1ba 0f00 	cmp.w	sl, #0
 800959e:	dc3d      	bgt.n	800961c <_vprintf+0x288>
 80095a0:	9100      	str	r1, [sp, #0]
 80095a2:	f7fe fbd5 	bl	8007d50 <__aeabi_i2f>
 80095a6:	9900      	ldr	r1, [sp, #0]
 80095a8:	f7fe fe98 	bl	80082dc <__aeabi_fmul>
 80095ac:	f7fe fc9a 	bl	8007ee4 <__aeabi_f2iz>
 80095b0:	464a      	mov	r2, r9
 80095b2:	4621      	mov	r1, r4
 80095b4:	f7ff fdd6 	bl	8009164 <_itostr>
 80095b8:	4404      	add	r4, r0
 80095ba:	1be0      	subs	r0, r4, r7
 80095bc:	1e44      	subs	r4, r0, #1
 80095be:	5d3b      	ldrb	r3, [r7, r4]
 80095c0:	193a      	adds	r2, r7, r4
 80095c2:	2b34      	cmp	r3, #52	; 0x34
 80095c4:	d910      	bls.n	80095e8 <_vprintf+0x254>
 80095c6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80095ca:	1e53      	subs	r3, r2, #1
 80095cc:	292e      	cmp	r1, #46	; 0x2e
 80095ce:	d02c      	beq.n	800962a <_vprintf+0x296>
 80095d0:	469c      	mov	ip, r3
 80095d2:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80095d6:	4663      	mov	r3, ip
 80095d8:	f81c 1901 	ldrb.w	r1, [ip], #-1
 80095dc:	2939      	cmp	r1, #57	; 0x39
 80095de:	d021      	beq.n	8009624 <_vprintf+0x290>
 80095e0:	292e      	cmp	r1, #46	; 0x2e
 80095e2:	d022      	beq.n	800962a <_vprintf+0x296>
 80095e4:	3101      	adds	r1, #1
 80095e6:	7019      	strb	r1, [r3, #0]
 80095e8:	f104 0360 	add.w	r3, r4, #96	; 0x60
 80095ec:	446b      	add	r3, sp
 80095ee:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 80095f2:	2b2e      	cmp	r3, #46	; 0x2e
 80095f4:	bf08      	it	eq
 80095f6:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 80095fa:	46a1      	mov	r9, r4
 80095fc:	9b05      	ldr	r3, [sp, #20]
 80095fe:	4599      	cmp	r9, r3
 8009600:	db3e      	blt.n	8009680 <_vprintf+0x2ec>
 8009602:	46b9      	mov	r9, r7
 8009604:	2c00      	cmp	r4, #0
 8009606:	f77f af71 	ble.w	80094ec <_vprintf+0x158>
 800960a:	f819 1b01 	ldrb.w	r1, [r9], #1
 800960e:	a803      	add	r0, sp, #12
 8009610:	f7ff fde2 	bl	80091d8 <_xputch>
 8009614:	3c01      	subs	r4, #1
 8009616:	e7f5      	b.n	8009604 <_vprintf+0x270>
 8009618:	46bb      	mov	fp, r7
 800961a:	e7a0      	b.n	800955e <_vprintf+0x1ca>
 800961c:	4358      	muls	r0, r3
 800961e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009622:	e7ba      	b.n	800959a <_vprintf+0x206>
 8009624:	f88c e001 	strb.w	lr, [ip, #1]
 8009628:	e7d5      	b.n	80095d6 <_vprintf+0x242>
 800962a:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800962e:	3b01      	subs	r3, #1
 8009630:	7819      	ldrb	r1, [r3, #0]
 8009632:	2939      	cmp	r1, #57	; 0x39
 8009634:	d112      	bne.n	800965c <_vprintf+0x2c8>
 8009636:	42bb      	cmp	r3, r7
 8009638:	d20d      	bcs.n	8009656 <_vprintf+0x2c2>
 800963a:	1c5c      	adds	r4, r3, #1
 800963c:	1c99      	adds	r1, r3, #2
 800963e:	428c      	cmp	r4, r1
 8009640:	eba2 0203 	sub.w	r2, r2, r3
 8009644:	d913      	bls.n	800966e <_vprintf+0x2da>
 8009646:	3201      	adds	r2, #1
 8009648:	441a      	add	r2, r3
 800964a:	42a2      	cmp	r2, r4
 800964c:	d10b      	bne.n	8009666 <_vprintf+0x2d2>
 800964e:	2231      	movs	r2, #49	; 0x31
 8009650:	4604      	mov	r4, r0
 8009652:	705a      	strb	r2, [r3, #1]
 8009654:	e7c8      	b.n	80095e8 <_vprintf+0x254>
 8009656:	f803 c901 	strb.w	ip, [r3], #-1
 800965a:	e7e9      	b.n	8009630 <_vprintf+0x29c>
 800965c:	42bb      	cmp	r3, r7
 800965e:	d3ec      	bcc.n	800963a <_vprintf+0x2a6>
 8009660:	292d      	cmp	r1, #45	; 0x2d
 8009662:	d0ea      	beq.n	800963a <_vprintf+0x2a6>
 8009664:	e7be      	b.n	80095e4 <_vprintf+0x250>
 8009666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800966a:	7021      	strb	r1, [r4, #0]
 800966c:	e7ed      	b.n	800964a <_vprintf+0x2b6>
 800966e:	4414      	add	r4, r2
 8009670:	440a      	add	r2, r1
 8009672:	428a      	cmp	r2, r1
 8009674:	d0eb      	beq.n	800964e <_vprintf+0x2ba>
 8009676:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
 800967a:	f802 cd01 	strb.w	ip, [r2, #-1]!
 800967e:	e7f8      	b.n	8009672 <_vprintf+0x2de>
 8009680:	2120      	movs	r1, #32
 8009682:	a803      	add	r0, sp, #12
 8009684:	f7ff fda8 	bl	80091d8 <_xputch>
 8009688:	f109 0901 	add.w	r9, r9, #1
 800968c:	e7b6      	b.n	80095fc <_vprintf+0x268>
 800968e:	2308      	movs	r3, #8
 8009690:	4625      	mov	r5, r4
 8009692:	9305      	str	r3, [sp, #20]
 8009694:	2320      	movs	r3, #32
 8009696:	2130      	movs	r1, #48	; 0x30
 8009698:	f855 4b04 	ldr.w	r4, [r5], #4
 800969c:	a803      	add	r0, sp, #12
 800969e:	9303      	str	r3, [sp, #12]
 80096a0:	f7ff fd9a 	bl	80091d8 <_xputch>
 80096a4:	2178      	movs	r1, #120	; 0x78
 80096a6:	a803      	add	r0, sp, #12
 80096a8:	f7ff fd96 	bl	80091d8 <_xputch>
 80096ac:	4621      	mov	r1, r4
 80096ae:	a803      	add	r0, sp, #12
 80096b0:	f7ff fe12 	bl	80092d8 <_format_hex>
 80096b4:	e71a      	b.n	80094ec <_vprintf+0x158>
 80096b6:	4625      	mov	r5, r4
 80096b8:	2400      	movs	r4, #0
 80096ba:	f855 9b04 	ldr.w	r9, [r5], #4
 80096be:	f819 3004 	ldrb.w	r3, [r9, r4]
 80096c2:	b993      	cbnz	r3, 80096ea <_vprintf+0x356>
 80096c4:	9b03      	ldr	r3, [sp, #12]
 80096c6:	07d9      	lsls	r1, r3, #31
 80096c8:	d503      	bpl.n	80096d2 <_vprintf+0x33e>
 80096ca:	9b04      	ldr	r3, [sp, #16]
 80096cc:	429c      	cmp	r4, r3
 80096ce:	bfa8      	it	ge
 80096d0:	461c      	movge	r4, r3
 80096d2:	9b03      	ldr	r3, [sp, #12]
 80096d4:	f104 0a01 	add.w	sl, r4, #1
 80096d8:	065a      	lsls	r2, r3, #25
 80096da:	d403      	bmi.n	80096e4 <_vprintf+0x350>
 80096dc:	9b05      	ldr	r3, [sp, #20]
 80096de:	429c      	cmp	r4, r3
 80096e0:	db05      	blt.n	80096ee <_vprintf+0x35a>
 80096e2:	4654      	mov	r4, sl
 80096e4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80096e8:	e00d      	b.n	8009706 <_vprintf+0x372>
 80096ea:	3401      	adds	r4, #1
 80096ec:	e7e7      	b.n	80096be <_vprintf+0x32a>
 80096ee:	2120      	movs	r1, #32
 80096f0:	a803      	add	r0, sp, #12
 80096f2:	f7ff fd71 	bl	80091d8 <_xputch>
 80096f6:	4654      	mov	r4, sl
 80096f8:	e7eb      	b.n	80096d2 <_vprintf+0x33e>
 80096fa:	a803      	add	r0, sp, #12
 80096fc:	f7ff fd6c 	bl	80091d8 <_xputch>
 8009700:	9b04      	ldr	r3, [sp, #16]
 8009702:	3b01      	subs	r3, #1
 8009704:	9304      	str	r3, [sp, #16]
 8009706:	9b03      	ldr	r3, [sp, #12]
 8009708:	07db      	lsls	r3, r3, #31
 800970a:	d501      	bpl.n	8009710 <_vprintf+0x37c>
 800970c:	9b04      	ldr	r3, [sp, #16]
 800970e:	b11b      	cbz	r3, 8009718 <_vprintf+0x384>
 8009710:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8009714:	2900      	cmp	r1, #0
 8009716:	d1f0      	bne.n	80096fa <_vprintf+0x366>
 8009718:	9b05      	ldr	r3, [sp, #20]
 800971a:	429c      	cmp	r4, r3
 800971c:	f6bf aee6 	bge.w	80094ec <_vprintf+0x158>
 8009720:	2120      	movs	r1, #32
 8009722:	a803      	add	r0, sp, #12
 8009724:	f7ff fd58 	bl	80091d8 <_xputch>
 8009728:	3401      	adds	r4, #1
 800972a:	e7f5      	b.n	8009718 <_vprintf+0x384>
 800972c:	9b03      	ldr	r3, [sp, #12]
 800972e:	f013 0304 	ands.w	r3, r3, #4
 8009732:	bf1d      	ittte	ne
 8009734:	3407      	addne	r4, #7
 8009736:	f024 0407 	bicne.w	r4, r4, #7
 800973a:	4625      	movne	r5, r4
 800973c:	4625      	moveq	r5, r4
 800973e:	bf1a      	itte	ne
 8009740:	f855 2b08 	ldrne.w	r2, [r5], #8
 8009744:	6863      	ldrne	r3, [r4, #4]
 8009746:	f855 2b04 	ldreq.w	r2, [r5], #4
 800974a:	e6e9      	b.n	8009520 <_vprintf+0x18c>
 800974c:	9b03      	ldr	r3, [sp, #12]
 800974e:	f043 0302 	orr.w	r3, r3, #2
 8009752:	9303      	str	r3, [sp, #12]
 8009754:	4625      	mov	r5, r4
 8009756:	f855 1b04 	ldr.w	r1, [r5], #4
 800975a:	e7a8      	b.n	80096ae <_vprintf+0x31a>

0800975c <printf>:
 800975c:	b40f      	push	{r0, r1, r2, r3}
 800975e:	b507      	push	{r0, r1, r2, lr}
 8009760:	aa04      	add	r2, sp, #16
 8009762:	f852 1b04 	ldr.w	r1, [r2], #4
 8009766:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800976a:	9201      	str	r2, [sp, #4]
 800976c:	f7ff fe12 	bl	8009394 <_vprintf>
 8009770:	b003      	add	sp, #12
 8009772:	f85d eb04 	ldr.w	lr, [sp], #4
 8009776:	b004      	add	sp, #16
 8009778:	4770      	bx	lr
	...

0800977c <sprintf>:
 800977c:	b40e      	push	{r1, r2, r3}
 800977e:	b517      	push	{r0, r1, r2, r4, lr}
 8009780:	4c09      	ldr	r4, [pc, #36]	; (80097a8 <sprintf+0x2c>)
 8009782:	aa05      	add	r2, sp, #20
 8009784:	f852 1b04 	ldr.w	r1, [r2], #4
 8009788:	6020      	str	r0, [r4, #0]
 800978a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800978e:	9201      	str	r2, [sp, #4]
 8009790:	f7ff fe00 	bl	8009394 <_vprintf>
 8009794:	2300      	movs	r3, #0
 8009796:	6822      	ldr	r2, [r4, #0]
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	7013      	strb	r3, [r2, #0]
 800979c:	b003      	add	sp, #12
 800979e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097a2:	b003      	add	sp, #12
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	200000e8 	andcs	r0, r0, r8, ror #1

080097ac <snprintf>:
 80097ac:	b40c      	push	{r2, r3}
 80097ae:	460b      	mov	r3, r1
 80097b0:	b513      	push	{r0, r1, r4, lr}
 80097b2:	4c09      	ldr	r4, [pc, #36]	; (80097d8 <snprintf+0x2c>)
 80097b4:	aa04      	add	r2, sp, #16
 80097b6:	f852 1b04 	ldr.w	r1, [r2], #4
 80097ba:	6020      	str	r0, [r4, #0]
 80097bc:	4618      	mov	r0, r3
 80097be:	9201      	str	r2, [sp, #4]
 80097c0:	f7ff fde8 	bl	8009394 <_vprintf>
 80097c4:	2300      	movs	r3, #0
 80097c6:	6822      	ldr	r2, [r4, #0]
 80097c8:	6023      	str	r3, [r4, #0]
 80097ca:	7013      	strb	r3, [r2, #0]
 80097cc:	b002      	add	sp, #8
 80097ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097d2:	b002      	add	sp, #8
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	200000e8 	andcs	r0, r0, r8, ror #1

080097dc <vsnprintf>:
 80097dc:	b538      	push	{r3, r4, r5, lr}
 80097de:	4605      	mov	r5, r0
 80097e0:	4c05      	ldr	r4, [pc, #20]	; (80097f8 <vsnprintf+0x1c>)
 80097e2:	4608      	mov	r0, r1
 80097e4:	4611      	mov	r1, r2
 80097e6:	461a      	mov	r2, r3
 80097e8:	6025      	str	r5, [r4, #0]
 80097ea:	f7ff fdd3 	bl	8009394 <_vprintf>
 80097ee:	2300      	movs	r3, #0
 80097f0:	6822      	ldr	r2, [r4, #0]
 80097f2:	6023      	str	r3, [r4, #0]
 80097f4:	7013      	strb	r3, [r2, #0]
 80097f6:	bd38      	pop	{r3, r4, r5, pc}
 80097f8:	200000e8 	andcs	r0, r0, r8, ror #1

080097fc <__udivmoddi4>:
 80097fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009800:	9e08      	ldr	r6, [sp, #32]
 8009802:	460d      	mov	r5, r1
 8009804:	4604      	mov	r4, r0
 8009806:	468e      	mov	lr, r1
 8009808:	2b00      	cmp	r3, #0
 800980a:	d14c      	bne.n	80098a6 <__udivmoddi4+0xaa>
 800980c:	428a      	cmp	r2, r1
 800980e:	4694      	mov	ip, r2
 8009810:	d967      	bls.n	80098e2 <__udivmoddi4+0xe6>
 8009812:	fab2 f382 	clz	r3, r2
 8009816:	b153      	cbz	r3, 800982e <__udivmoddi4+0x32>
 8009818:	fa02 fc03 	lsl.w	ip, r2, r3
 800981c:	f1c3 0220 	rsb	r2, r3, #32
 8009820:	fa01 fe03 	lsl.w	lr, r1, r3
 8009824:	fa20 f202 	lsr.w	r2, r0, r2
 8009828:	ea42 0e0e 	orr.w	lr, r2, lr
 800982c:	409c      	lsls	r4, r3
 800982e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009832:	fbbe f1f7 	udiv	r1, lr, r7
 8009836:	fa1f f58c 	uxth.w	r5, ip
 800983a:	fb07 ee11 	mls	lr, r7, r1, lr
 800983e:	fb01 f005 	mul.w	r0, r1, r5
 8009842:	0c22      	lsrs	r2, r4, #16
 8009844:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8009848:	4290      	cmp	r0, r2
 800984a:	d90a      	bls.n	8009862 <__udivmoddi4+0x66>
 800984c:	eb1c 0202 	adds.w	r2, ip, r2
 8009850:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8009854:	f080 8119 	bcs.w	8009a8a <__udivmoddi4+0x28e>
 8009858:	4290      	cmp	r0, r2
 800985a:	f240 8116 	bls.w	8009a8a <__udivmoddi4+0x28e>
 800985e:	3902      	subs	r1, #2
 8009860:	4462      	add	r2, ip
 8009862:	1a12      	subs	r2, r2, r0
 8009864:	fbb2 f0f7 	udiv	r0, r2, r7
 8009868:	fb07 2210 	mls	r2, r7, r0, r2
 800986c:	fb00 f505 	mul.w	r5, r0, r5
 8009870:	b2a4      	uxth	r4, r4
 8009872:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009876:	42a5      	cmp	r5, r4
 8009878:	d90a      	bls.n	8009890 <__udivmoddi4+0x94>
 800987a:	eb1c 0404 	adds.w	r4, ip, r4
 800987e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8009882:	f080 8104 	bcs.w	8009a8e <__udivmoddi4+0x292>
 8009886:	42a5      	cmp	r5, r4
 8009888:	f240 8101 	bls.w	8009a8e <__udivmoddi4+0x292>
 800988c:	4464      	add	r4, ip
 800988e:	3802      	subs	r0, #2
 8009890:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8009894:	2100      	movs	r1, #0
 8009896:	1b64      	subs	r4, r4, r5
 8009898:	b11e      	cbz	r6, 80098a2 <__udivmoddi4+0xa6>
 800989a:	40dc      	lsrs	r4, r3
 800989c:	2300      	movs	r3, #0
 800989e:	e9c6 4300 	strd	r4, r3, [r6]
 80098a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098a6:	428b      	cmp	r3, r1
 80098a8:	d908      	bls.n	80098bc <__udivmoddi4+0xc0>
 80098aa:	2e00      	cmp	r6, #0
 80098ac:	f000 80ea 	beq.w	8009a84 <__udivmoddi4+0x288>
 80098b0:	2100      	movs	r1, #0
 80098b2:	e9c6 0500 	strd	r0, r5, [r6]
 80098b6:	4608      	mov	r0, r1
 80098b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098bc:	fab3 f183 	clz	r1, r3
 80098c0:	2900      	cmp	r1, #0
 80098c2:	d148      	bne.n	8009956 <__udivmoddi4+0x15a>
 80098c4:	42ab      	cmp	r3, r5
 80098c6:	d302      	bcc.n	80098ce <__udivmoddi4+0xd2>
 80098c8:	4282      	cmp	r2, r0
 80098ca:	f200 80f8 	bhi.w	8009abe <__udivmoddi4+0x2c2>
 80098ce:	1a84      	subs	r4, r0, r2
 80098d0:	eb65 0203 	sbc.w	r2, r5, r3
 80098d4:	2001      	movs	r0, #1
 80098d6:	4696      	mov	lr, r2
 80098d8:	2e00      	cmp	r6, #0
 80098da:	d0e2      	beq.n	80098a2 <__udivmoddi4+0xa6>
 80098dc:	e9c6 4e00 	strd	r4, lr, [r6]
 80098e0:	e7df      	b.n	80098a2 <__udivmoddi4+0xa6>
 80098e2:	b902      	cbnz	r2, 80098e6 <__udivmoddi4+0xea>
 80098e4:	deff      	udf	#255	; 0xff
 80098e6:	fab2 f382 	clz	r3, r2
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f040 808e 	bne.w	8009a0c <__udivmoddi4+0x210>
 80098f0:	1a88      	subs	r0, r1, r2
 80098f2:	2101      	movs	r1, #1
 80098f4:	0c17      	lsrs	r7, r2, #16
 80098f6:	fa1f fe82 	uxth.w	lr, r2
 80098fa:	fbb0 f5f7 	udiv	r5, r0, r7
 80098fe:	fb07 0015 	mls	r0, r7, r5, r0
 8009902:	0c22      	lsrs	r2, r4, #16
 8009904:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8009908:	fb0e f005 	mul.w	r0, lr, r5
 800990c:	4290      	cmp	r0, r2
 800990e:	d908      	bls.n	8009922 <__udivmoddi4+0x126>
 8009910:	eb1c 0202 	adds.w	r2, ip, r2
 8009914:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8009918:	d202      	bcs.n	8009920 <__udivmoddi4+0x124>
 800991a:	4290      	cmp	r0, r2
 800991c:	f200 80cc 	bhi.w	8009ab8 <__udivmoddi4+0x2bc>
 8009920:	4645      	mov	r5, r8
 8009922:	1a12      	subs	r2, r2, r0
 8009924:	fbb2 f0f7 	udiv	r0, r2, r7
 8009928:	fb07 2210 	mls	r2, r7, r0, r2
 800992c:	fb0e fe00 	mul.w	lr, lr, r0
 8009930:	b2a4      	uxth	r4, r4
 8009932:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009936:	45a6      	cmp	lr, r4
 8009938:	d908      	bls.n	800994c <__udivmoddi4+0x150>
 800993a:	eb1c 0404 	adds.w	r4, ip, r4
 800993e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8009942:	d202      	bcs.n	800994a <__udivmoddi4+0x14e>
 8009944:	45a6      	cmp	lr, r4
 8009946:	f200 80b4 	bhi.w	8009ab2 <__udivmoddi4+0x2b6>
 800994a:	4610      	mov	r0, r2
 800994c:	eba4 040e 	sub.w	r4, r4, lr
 8009950:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8009954:	e7a0      	b.n	8009898 <__udivmoddi4+0x9c>
 8009956:	f1c1 0720 	rsb	r7, r1, #32
 800995a:	408b      	lsls	r3, r1
 800995c:	fa22 fc07 	lsr.w	ip, r2, r7
 8009960:	ea4c 0c03 	orr.w	ip, ip, r3
 8009964:	fa25 fa07 	lsr.w	sl, r5, r7
 8009968:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800996c:	fbba f8f9 	udiv	r8, sl, r9
 8009970:	408d      	lsls	r5, r1
 8009972:	fa20 f307 	lsr.w	r3, r0, r7
 8009976:	fb09 aa18 	mls	sl, r9, r8, sl
 800997a:	fa1f fe8c 	uxth.w	lr, ip
 800997e:	432b      	orrs	r3, r5
 8009980:	fa00 f501 	lsl.w	r5, r0, r1
 8009984:	fb08 f00e 	mul.w	r0, r8, lr
 8009988:	0c1c      	lsrs	r4, r3, #16
 800998a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800998e:	42a0      	cmp	r0, r4
 8009990:	fa02 f201 	lsl.w	r2, r2, r1
 8009994:	d90b      	bls.n	80099ae <__udivmoddi4+0x1b2>
 8009996:	eb1c 0404 	adds.w	r4, ip, r4
 800999a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800999e:	f080 8086 	bcs.w	8009aae <__udivmoddi4+0x2b2>
 80099a2:	42a0      	cmp	r0, r4
 80099a4:	f240 8083 	bls.w	8009aae <__udivmoddi4+0x2b2>
 80099a8:	f1a8 0802 	sub.w	r8, r8, #2
 80099ac:	4464      	add	r4, ip
 80099ae:	1a24      	subs	r4, r4, r0
 80099b0:	b298      	uxth	r0, r3
 80099b2:	fbb4 f3f9 	udiv	r3, r4, r9
 80099b6:	fb09 4413 	mls	r4, r9, r3, r4
 80099ba:	fb03 fe0e 	mul.w	lr, r3, lr
 80099be:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80099c2:	45a6      	cmp	lr, r4
 80099c4:	d908      	bls.n	80099d8 <__udivmoddi4+0x1dc>
 80099c6:	eb1c 0404 	adds.w	r4, ip, r4
 80099ca:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80099ce:	d26a      	bcs.n	8009aa6 <__udivmoddi4+0x2aa>
 80099d0:	45a6      	cmp	lr, r4
 80099d2:	d968      	bls.n	8009aa6 <__udivmoddi4+0x2aa>
 80099d4:	3b02      	subs	r3, #2
 80099d6:	4464      	add	r4, ip
 80099d8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80099dc:	fba0 9302 	umull	r9, r3, r0, r2
 80099e0:	eba4 040e 	sub.w	r4, r4, lr
 80099e4:	429c      	cmp	r4, r3
 80099e6:	46c8      	mov	r8, r9
 80099e8:	469e      	mov	lr, r3
 80099ea:	d354      	bcc.n	8009a96 <__udivmoddi4+0x29a>
 80099ec:	d051      	beq.n	8009a92 <__udivmoddi4+0x296>
 80099ee:	2e00      	cmp	r6, #0
 80099f0:	d067      	beq.n	8009ac2 <__udivmoddi4+0x2c6>
 80099f2:	ebb5 0308 	subs.w	r3, r5, r8
 80099f6:	eb64 040e 	sbc.w	r4, r4, lr
 80099fa:	40cb      	lsrs	r3, r1
 80099fc:	fa04 f707 	lsl.w	r7, r4, r7
 8009a00:	431f      	orrs	r7, r3
 8009a02:	40cc      	lsrs	r4, r1
 8009a04:	e9c6 7400 	strd	r7, r4, [r6]
 8009a08:	2100      	movs	r1, #0
 8009a0a:	e74a      	b.n	80098a2 <__udivmoddi4+0xa6>
 8009a0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8009a10:	f1c3 0020 	rsb	r0, r3, #32
 8009a14:	40c1      	lsrs	r1, r0
 8009a16:	409d      	lsls	r5, r3
 8009a18:	fa24 f000 	lsr.w	r0, r4, r0
 8009a1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009a20:	4328      	orrs	r0, r5
 8009a22:	fbb1 f5f7 	udiv	r5, r1, r7
 8009a26:	fb07 1115 	mls	r1, r7, r5, r1
 8009a2a:	fa1f fe8c 	uxth.w	lr, ip
 8009a2e:	0c02      	lsrs	r2, r0, #16
 8009a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009a34:	fb05 f10e 	mul.w	r1, r5, lr
 8009a38:	4291      	cmp	r1, r2
 8009a3a:	fa04 f403 	lsl.w	r4, r4, r3
 8009a3e:	d908      	bls.n	8009a52 <__udivmoddi4+0x256>
 8009a40:	eb1c 0202 	adds.w	r2, ip, r2
 8009a44:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8009a48:	d22f      	bcs.n	8009aaa <__udivmoddi4+0x2ae>
 8009a4a:	4291      	cmp	r1, r2
 8009a4c:	d92d      	bls.n	8009aaa <__udivmoddi4+0x2ae>
 8009a4e:	3d02      	subs	r5, #2
 8009a50:	4462      	add	r2, ip
 8009a52:	1a52      	subs	r2, r2, r1
 8009a54:	fbb2 f1f7 	udiv	r1, r2, r7
 8009a58:	fb07 2211 	mls	r2, r7, r1, r2
 8009a5c:	b280      	uxth	r0, r0
 8009a5e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8009a62:	fb01 f20e 	mul.w	r2, r1, lr
 8009a66:	4282      	cmp	r2, r0
 8009a68:	d908      	bls.n	8009a7c <__udivmoddi4+0x280>
 8009a6a:	eb1c 0000 	adds.w	r0, ip, r0
 8009a6e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8009a72:	d216      	bcs.n	8009aa2 <__udivmoddi4+0x2a6>
 8009a74:	4282      	cmp	r2, r0
 8009a76:	d914      	bls.n	8009aa2 <__udivmoddi4+0x2a6>
 8009a78:	3902      	subs	r1, #2
 8009a7a:	4460      	add	r0, ip
 8009a7c:	1a80      	subs	r0, r0, r2
 8009a7e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8009a82:	e73a      	b.n	80098fa <__udivmoddi4+0xfe>
 8009a84:	4631      	mov	r1, r6
 8009a86:	4630      	mov	r0, r6
 8009a88:	e70b      	b.n	80098a2 <__udivmoddi4+0xa6>
 8009a8a:	4671      	mov	r1, lr
 8009a8c:	e6e9      	b.n	8009862 <__udivmoddi4+0x66>
 8009a8e:	4610      	mov	r0, r2
 8009a90:	e6fe      	b.n	8009890 <__udivmoddi4+0x94>
 8009a92:	454d      	cmp	r5, r9
 8009a94:	d2ab      	bcs.n	80099ee <__udivmoddi4+0x1f2>
 8009a96:	ebb9 0802 	subs.w	r8, r9, r2
 8009a9a:	eb63 0e0c 	sbc.w	lr, r3, ip
 8009a9e:	3801      	subs	r0, #1
 8009aa0:	e7a5      	b.n	80099ee <__udivmoddi4+0x1f2>
 8009aa2:	4641      	mov	r1, r8
 8009aa4:	e7ea      	b.n	8009a7c <__udivmoddi4+0x280>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	e796      	b.n	80099d8 <__udivmoddi4+0x1dc>
 8009aaa:	4645      	mov	r5, r8
 8009aac:	e7d1      	b.n	8009a52 <__udivmoddi4+0x256>
 8009aae:	46d0      	mov	r8, sl
 8009ab0:	e77d      	b.n	80099ae <__udivmoddi4+0x1b2>
 8009ab2:	4464      	add	r4, ip
 8009ab4:	3802      	subs	r0, #2
 8009ab6:	e749      	b.n	800994c <__udivmoddi4+0x150>
 8009ab8:	3d02      	subs	r5, #2
 8009aba:	4462      	add	r2, ip
 8009abc:	e731      	b.n	8009922 <__udivmoddi4+0x126>
 8009abe:	4608      	mov	r0, r1
 8009ac0:	e70a      	b.n	80098d8 <__udivmoddi4+0xdc>
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	e6ed      	b.n	80098a2 <__udivmoddi4+0xa6>
 8009ac6:	bf00      	nop

08009ac8 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
 8009ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aca:	4616      	mov	r6, r2
 8009acc:	1d07      	adds	r7, r0, #4
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	4638      	mov	r0, r7
 8009ad4:	f10d 0206 	add.w	r2, sp, #6
 8009ad8:	460d      	mov	r5, r1
 8009ada:	f000 fc1d 	bl	800a318 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8009ade:	b1b6      	cbz	r6, 8009b0e <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8009ae0:	b1a8      	cbz	r0, 8009b0e <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8009ae2:	4629      	mov	r1, r5
 8009ae4:	4638      	mov	r0, r7
 8009ae6:	f000 fda3 	bl	800a630 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8009aea:	2801      	cmp	r0, #1
 8009aec:	d10f      	bne.n	8009b0e <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8009aee:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8009af2:	b123      	cbz	r3, 8009afe <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x36>
 8009af4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009af8:	3301      	adds	r3, #1
 8009afa:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009afe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009b02:	b933      	cbnz	r3, 8009b12 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x4a>
 8009b04:	2202      	movs	r2, #2
 8009b06:	4629      	mov	r1, r5
 8009b08:	4638      	mov	r0, r7
 8009b0a:	f000 fc49 	bl	800a3a0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8009b0e:	b003      	add	sp, #12
 8009b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b12:	1e71      	subs	r1, r6, #1
 8009b14:	424a      	negs	r2, r1
 8009b16:	414a      	adcs	r2, r1
 8009b18:	f604 5078 	addw	r0, r4, #3448	; 0xd78
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	f002 fc51 	bl	800c3c4 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8009b22:	e7f4      	b.n	8009b0e <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>

08009b24 <ArtNet4Node::~ArtNet4Node()>:
 8009b24:	b510      	push	{r4, lr}
 8009b26:	4604      	mov	r4, r0
 8009b28:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <ArtNet4Node::~ArtNet4Node()+0x1c>)
 8009b2a:	6003      	str	r3, [r0, #0]
 8009b2c:	f600 5078 	addw	r0, r0, #3448	; 0xd78
 8009b30:	f002 fb5a 	bl	800c1e8 <E131Bridge::Stop()>
 8009b34:	1d20      	adds	r0, r4, #4
 8009b36:	f000 f963 	bl	8009e00 <ArtNetNode::Stop()>
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	bd10      	pop	{r4, pc}
 8009b3e:	bf00      	nop
 8009b40:	08017f2c 	stmdaeq	r1, {r2, r3, r5, r8, r9, sl, fp, ip, sp, lr}

08009b44 <ArtNet4Node::HandleAddress(unsigned char)>:
 8009b44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b46:	4605      	mov	r5, r0
 8009b48:	460c      	mov	r4, r1
 8009b4a:	2600      	movs	r6, #0
 8009b4c:	1d07      	adds	r7, r0, #4
 8009b4e:	792b      	ldrb	r3, [r5, #4]
 8009b50:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 8009b54:	d30e      	bcc.n	8009b74 <ArtNet4Node::HandleAddress(unsigned char)+0x30>
 8009b56:	2c13      	cmp	r4, #19
 8009b58:	f004 0603 	and.w	r6, r4, #3
 8009b5c:	d82f      	bhi.n	8009bbe <ArtNet4Node::HandleAddress(unsigned char)+0x7a>
 8009b5e:	2c0f      	cmp	r4, #15
 8009b60:	d840      	bhi.n	8009be4 <ArtNet4Node::HandleAddress(unsigned char)+0xa0>
 8009b62:	2c02      	cmp	r4, #2
 8009b64:	d03c      	beq.n	8009be0 <ArtNet4Node::HandleAddress(unsigned char)+0x9c>
 8009b66:	3c03      	subs	r4, #3
 8009b68:	2c01      	cmp	r4, #1
 8009b6a:	d837      	bhi.n	8009bdc <ArtNet4Node::HandleAddress(unsigned char)+0x98>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f885 3d80 	strb.w	r3, [r5, #3456]	; 0xd80
 8009b72:	e033      	b.n	8009bdc <ArtNet4Node::HandleAddress(unsigned char)+0x98>
 8009b74:	2301      	movs	r3, #1
 8009b76:	4631      	mov	r1, r6
 8009b78:	4638      	mov	r0, r7
 8009b7a:	f10d 0206 	add.w	r2, sp, #6
 8009b7e:	f000 fbcb 	bl	800a318 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8009b82:	b150      	cbz	r0, 8009b9a <ArtNet4Node::HandleAddress(unsigned char)+0x56>
 8009b84:	f895 30b0 	ldrb.w	r3, [r5, #176]	; 0xb0
 8009b88:	b123      	cbz	r3, 8009b94 <ArtNet4Node::HandleAddress(unsigned char)+0x50>
 8009b8a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009b94:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009b98:	b90b      	cbnz	r3, 8009b9e <ArtNet4Node::HandleAddress(unsigned char)+0x5a>
 8009b9a:	3601      	adds	r6, #1
 8009b9c:	e7d7      	b.n	8009b4e <ArtNet4Node::HandleAddress(unsigned char)+0xa>
 8009b9e:	4631      	mov	r1, r6
 8009ba0:	4638      	mov	r0, r7
 8009ba2:	f000 fd45 	bl	800a630 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	2a01      	cmp	r2, #1
 8009baa:	bf18      	it	ne
 8009bac:	2202      	movne	r2, #2
 8009bae:	4631      	mov	r1, r6
 8009bb0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009bb4:	f605 5078 	addw	r0, r5, #3448	; 0xd78
 8009bb8:	f002 fc04 	bl	800c3c4 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8009bbc:	e7ed      	b.n	8009b9a <ArtNet4Node::HandleAddress(unsigned char)+0x56>
 8009bbe:	2c53      	cmp	r4, #83	; 0x53
 8009bc0:	d808      	bhi.n	8009bd4 <ArtNet4Node::HandleAddress(unsigned char)+0x90>
 8009bc2:	2c4f      	cmp	r4, #79	; 0x4f
 8009bc4:	d90a      	bls.n	8009bdc <ArtNet4Node::HandleAddress(unsigned char)+0x98>
 8009bc6:	2344      	movs	r3, #68	; 0x44
 8009bc8:	2200      	movs	r2, #0
 8009bca:	fb03 5606 	mla	r6, r3, r6, r5
 8009bce:	f241 23c4 	movw	r3, #4804	; 0x12c4
 8009bd2:	e00d      	b.n	8009bf0 <ArtNet4Node::HandleAddress(unsigned char)+0xac>
 8009bd4:	3470      	adds	r4, #112	; 0x70
 8009bd6:	b2e4      	uxtb	r4, r4
 8009bd8:	2c03      	cmp	r4, #3
 8009bda:	d90b      	bls.n	8009bf4 <ArtNet4Node::HandleAddress(unsigned char)+0xb0>
 8009bdc:	b003      	add	sp, #12
 8009bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009be0:	2301      	movs	r3, #1
 8009be2:	e7c4      	b.n	8009b6e <ArtNet4Node::HandleAddress(unsigned char)+0x2a>
 8009be4:	2344      	movs	r3, #68	; 0x44
 8009be6:	2201      	movs	r2, #1
 8009be8:	fb03 5606 	mla	r6, r3, r6, r5
 8009bec:	f241 23c4 	movw	r3, #4804	; 0x12c4
 8009bf0:	50f2      	str	r2, [r6, r3]
 8009bf2:	e7f3      	b.n	8009bdc <ArtNet4Node::HandleAddress(unsigned char)+0x98>
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	1d28      	adds	r0, r5, #4
 8009bf8:	f000 fd1a 	bl	800a630 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8009bfc:	2801      	cmp	r0, #1
 8009bfe:	d1ed      	bne.n	8009bdc <ArtNet4Node::HandleAddress(unsigned char)+0x98>
 8009c00:	4631      	mov	r1, r6
 8009c02:	f605 5078 	addw	r0, r5, #3448	; 0xd78
 8009c06:	b003      	add	sp, #12
 8009c08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009c0c:	f002 bef4 	b.w	800c9f8 <E131Bridge::Clear(unsigned int)>

08009c10 <ArtNet4Node::IsStatusChanged()>:
 8009c10:	f600 5078 	addw	r0, r0, #3448	; 0xd78
 8009c14:	f002 bee8 	b.w	800c9e8 <E131Bridge::IsStatusChanged()>

08009c18 <ArtNet4Node::~ArtNet4Node()>:
 8009c18:	b510      	push	{r4, lr}
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	f7ff ff82 	bl	8009b24 <ArtNet4Node::~ArtNet4Node()>
 8009c20:	4620      	mov	r0, r4
 8009c22:	f00b fecd 	bl	80159c0 <operator delete(void*)>
 8009c26:	4620      	mov	r0, r4
 8009c28:	bd10      	pop	{r4, pc}

08009c2a <ArtNet4Node::GetStatus(unsigned int)>:
 8009c2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	4604      	mov	r4, r0
 8009c30:	f10d 0206 	add.w	r2, sp, #6
 8009c34:	f600 5078 	addw	r0, r0, #3448	; 0xd78
 8009c38:	460d      	mov	r5, r1
 8009c3a:	f002 fc3b 	bl	800c4b4 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 8009c3e:	b170      	cbz	r0, 8009c5e <ArtNet4Node::GetStatus(unsigned int)+0x34>
 8009c40:	2344      	movs	r3, #68	; 0x44
 8009c42:	f241 22ca 	movw	r2, #4810	; 0x12ca
 8009c46:	fb03 4405 	mla	r4, r3, r5, r4
 8009c4a:	f241 23c9 	movw	r3, #4809	; 0x12c9
 8009c4e:	5ca0      	ldrb	r0, [r4, r2]
 8009c50:	5ce3      	ldrb	r3, [r4, r3]
 8009c52:	01c0      	lsls	r0, r0, #7
 8009c54:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8009c58:	f040 0001 	orr.w	r0, r0, #1
 8009c5c:	b2c0      	uxtb	r0, r0
 8009c5e:	b003      	add	sp, #12
 8009c60:	bd30      	pop	{r4, r5, pc}
	...

08009c64 <ArtNet4Node::ArtNet4Node(unsigned char)>:
 8009c64:	b538      	push	{r3, r4, r5, lr}
 8009c66:	4604      	mov	r4, r0
 8009c68:	1d05      	adds	r5, r0, #4
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	f000 f966 	bl	8009f3c <ArtNetNode::ArtNetNode(unsigned char)>
 8009c70:	4b05      	ldr	r3, [pc, #20]	; (8009c88 <ArtNet4Node::ArtNet4Node(unsigned char)+0x24>)
 8009c72:	f604 5078 	addw	r0, r4, #3448	; 0xd78
 8009c76:	6023      	str	r3, [r4, #0]
 8009c78:	f002 fb06 	bl	800c288 <E131Bridge::E131Bridge()>
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	4621      	mov	r1, r4
 8009c80:	f000 f86c 	bl	8009d5c <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>
 8009c84:	4620      	mov	r0, r4
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	08017f2c 	stmdaeq	r1, {r2, r3, r5, r8, r9, sl, fp, ip, sp, lr}

08009c8c <ArtNet4Node::Start()>:
 8009c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c8e:	4604      	mov	r4, r0
 8009c90:	2500      	movs	r5, #0
 8009c92:	f500 5796 	add.w	r7, r0, #4800	; 0x12c0
 8009c96:	1d06      	adds	r6, r0, #4
 8009c98:	3704      	adds	r7, #4
 8009c9a:	7923      	ldrb	r3, [r4, #4]
 8009c9c:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 8009ca0:	d31b      	bcc.n	8009cda <ArtNet4Node::Start()+0x4e>
 8009ca2:	f8d4 36e0 	ldr.w	r3, [r4, #1760]	; 0x6e0
 8009ca6:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8009caa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cae:	bf2c      	ite	cs
 8009cb0:	2300      	movcs	r3, #0
 8009cb2:	2301      	movcc	r3, #1
 8009cb4:	f882 3271 	strb.w	r3, [r2, #625]	; 0x271
 8009cb8:	f894 36f0 	ldrb.w	r3, [r4, #1776]	; 0x6f0
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	f882 3272 	strb.w	r3, [r2, #626]	; 0x272
 8009cc2:	68e3      	ldr	r3, [r4, #12]
 8009cc4:	f8c4 3d7c 	str.w	r3, [r4, #3452]	; 0xd7c
 8009cc8:	f000 f85a 	bl	8009d80 <ArtNetNode::Start()>
 8009ccc:	f604 5078 	addw	r0, r4, #3448	; 0xd78
 8009cd0:	b003      	add	sp, #12
 8009cd2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009cd6:	f002 ba4b 	b.w	800c170 <E131Bridge::Start()>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	4629      	mov	r1, r5
 8009cde:	4630      	mov	r0, r6
 8009ce0:	f10d 0206 	add.w	r2, sp, #6
 8009ce4:	f000 fb18 	bl	800a318 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8009ce8:	b160      	cbz	r0, 8009d04 <ArtNet4Node::Start()+0x78>
 8009cea:	4629      	mov	r1, r5
 8009cec:	4630      	mov	r0, r6
 8009cee:	f000 fc9f 	bl	800a630 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8009cf2:	2801      	cmp	r0, #1
 8009cf4:	d106      	bne.n	8009d04 <ArtNet4Node::Start()+0x78>
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	f000 fcca 	bl	800a692 <ArtNetNode::GetMergeMode(unsigned int) const>
 8009cfe:	2344      	movs	r3, #68	; 0x44
 8009d00:	436b      	muls	r3, r5
 8009d02:	50f8      	str	r0, [r7, r3]
 8009d04:	3501      	adds	r5, #1
 8009d06:	e7c8      	b.n	8009c9a <ArtNet4Node::Start()+0xe>

08009d08 <ArtNet4Node::Run()>:
 8009d08:	b510      	push	{r4, lr}
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	3004      	adds	r0, #4
 8009d0e:	f000 fa27 	bl	800a160 <ArtNetNode::Run()>
 8009d12:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8009d16:	f893 3283 	ldrb.w	r3, [r3, #643]	; 0x283
 8009d1a:	b12b      	cbz	r3, 8009d28 <ArtNet4Node::Run()+0x20>
 8009d1c:	f604 5078 	addw	r0, r4, #3448	; 0xd78
 8009d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d24:	f002 beca 	b.w	800cabc <E131Bridge::Run()>
 8009d28:	bd10      	pop	{r4, pc}
	...

08009d2c <ArtNet4Node::Print()>:
 8009d2c:	b510      	push	{r4, lr}
 8009d2e:	4604      	mov	r4, r0
 8009d30:	3004      	adds	r0, #4
 8009d32:	f001 fc15 	bl	800b560 <ArtNetNode::Print()>
 8009d36:	f894 36f2 	ldrb.w	r3, [r4, #1778]	; 0x6f2
 8009d3a:	b15b      	cbz	r3, 8009d54 <ArtNet4Node::Print()+0x28>
 8009d3c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8009d40:	b113      	cbz	r3, 8009d48 <ArtNet4Node::Print()+0x1c>
 8009d42:	4805      	ldr	r0, [pc, #20]	; (8009d58 <ArtNet4Node::Print()+0x2c>)
 8009d44:	f7ff fd0a 	bl	800975c <printf>
 8009d48:	f604 5078 	addw	r0, r4, #3448	; 0xd78
 8009d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d50:	f003 b90c 	b.w	800cf6c <E131Bridge::Print()>
 8009d54:	bd10      	pop	{r4, pc}
 8009d56:	bf00      	nop
 8009d58:	08017f05 	stmdaeq	r1, {r0, r2, r8, r9, sl, fp, ip, sp, lr}

08009d5c <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>:
 8009d5c:	61c1      	str	r1, [r0, #28]
 8009d5e:	4770      	bx	lr

08009d60 <strncpy.isra.0>:
 8009d60:	3901      	subs	r1, #1
 8009d62:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009d66:	b92b      	cbnz	r3, 8009d74 <strncpy.isra.0+0x14>
 8009d68:	4402      	add	r2, r0
 8009d6a:	4290      	cmp	r0, r2
 8009d6c:	d006      	beq.n	8009d7c <strncpy.isra.0+0x1c>
 8009d6e:	f800 3b01 	strb.w	r3, [r0], #1
 8009d72:	e7fa      	b.n	8009d6a <strncpy.isra.0+0xa>
 8009d74:	3a01      	subs	r2, #1
 8009d76:	f800 3b01 	strb.w	r3, [r0], #1
 8009d7a:	d1f2      	bne.n	8009d62 <strncpy.isra.0+0x2>
 8009d7c:	4770      	bx	lr
	...

08009d80 <ArtNetNode::Start()>:
 8009d80:	b570      	push	{r4, r5, r6, lr}
 8009d82:	4d1d      	ldr	r5, [pc, #116]	; (8009df8 <ArtNetNode::Start()+0x78>)
 8009d84:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8009d88:	682a      	ldr	r2, [r5, #0]
 8009d8a:	f023 0302 	bic.w	r3, r3, #2
 8009d8e:	7851      	ldrb	r1, [r2, #1]
 8009d90:	4604      	mov	r4, r0
 8009d92:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8009d96:	b25b      	sxtb	r3, r3
 8009d98:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
 8009d9c:	7812      	ldrb	r2, [r2, #0]
 8009d9e:	f023 0304 	bic.w	r3, r3, #4
 8009da2:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8009da6:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
 8009daa:	f001 f8e7 	bl	800af7c <ArtNetNode::FillPollReply()>
 8009dae:	f641 1136 	movw	r1, #6454	; 0x1936
 8009db2:	6828      	ldr	r0, [r5, #0]
 8009db4:	f009 f8b8 	bl	8012f28 <Network::Begin(unsigned short)>
 8009db8:	2302      	movs	r3, #2
 8009dba:	f884 36e5 	strb.w	r3, [r4, #1765]	; 0x6e5
 8009dbe:	6963      	ldr	r3, [r4, #20]
 8009dc0:	6060      	str	r0, [r4, #4]
 8009dc2:	b16b      	cbz	r3, 8009de0 <ArtNetNode::Start()+0x60>
 8009dc4:	2500      	movs	r5, #0
 8009dc6:	f604 3678 	addw	r6, r4, #2936	; 0xb78
 8009dca:	012b      	lsls	r3, r5, #4
 8009dcc:	5cf3      	ldrb	r3, [r6, r3]
 8009dce:	b123      	cbz	r3, 8009dda <ArtNetNode::Start()+0x5a>
 8009dd0:	6960      	ldr	r0, [r4, #20]
 8009dd2:	4629      	mov	r1, r5
 8009dd4:	6803      	ldr	r3, [r0, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	4798      	blx	r3
 8009dda:	3501      	adds	r5, #1
 8009ddc:	2d04      	cmp	r5, #4
 8009dde:	d1f4      	bne.n	8009dca <ArtNetNode::Start()+0x4a>
 8009de0:	4b06      	ldr	r3, [pc, #24]	; (8009dfc <ArtNetNode::Start()+0x7c>)
 8009de2:	2102      	movs	r1, #2
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	f00b fd07 	bl	80157f8 <LedBlink::SetMode(ledblink::Mode)>
 8009dea:	4620      	mov	r0, r4
 8009dec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009df0:	2100      	movs	r1, #0
 8009df2:	f001 b935 	b.w	800b060 <ArtNetNode::SendPollRelply(bool)>
 8009df6:	bf00      	nop
 8009df8:	2001c724 	andcs	ip, r1, r4, lsr #14
 8009dfc:	2001ce48 	andcs	ip, r1, r8, asr #28

08009e00 <ArtNetNode::Stop()>:
 8009e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e04:	2500      	movs	r5, #0
 8009e06:	4604      	mov	r4, r0
 8009e08:	4606      	mov	r6, r0
 8009e0a:	46a9      	mov	r9, r5
 8009e0c:	f04f 0a01 	mov.w	sl, #1
 8009e10:	4f1f      	ldr	r7, [pc, #124]	; (8009e90 <ArtNetNode::Stop()+0x90>)
 8009e12:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8009e94 <ArtNetNode::Stop()+0x94>
 8009e16:	f8d6 3710 	ldr.w	r3, [r6, #1808]	; 0x710
 8009e1a:	b97b      	cbnz	r3, 8009e3c <ArtNetNode::Stop()+0x3c>
 8009e1c:	68a0      	ldr	r0, [r4, #8]
 8009e1e:	b118      	cbz	r0, 8009e28 <ArtNetNode::Stop()+0x28>
 8009e20:	6803      	ldr	r3, [r0, #0]
 8009e22:	4629      	mov	r1, r5
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	4798      	blx	r3
 8009e28:	f8d8 3000 	ldr.w	r3, [r8]
 8009e2c:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 8009e30:	07db      	lsls	r3, r3, #31
 8009e32:	bf58      	it	pl
 8009e34:	f8c8 a000 	strpl.w	sl, [r8]
 8009e38:	f886 9715 	strb.w	r9, [r6, #1813]	; 0x715
 8009e3c:	3501      	adds	r5, #1
 8009e3e:	2d20      	cmp	r5, #32
 8009e40:	f106 0624 	add.w	r6, r6, #36	; 0x24
 8009e44:	f207 6704 	addw	r7, r7, #1540	; 0x604
 8009e48:	d1e5      	bne.n	8009e16 <ArtNetNode::Stop()+0x16>
 8009e4a:	6963      	ldr	r3, [r4, #20]
 8009e4c:	b16b      	cbz	r3, 8009e6a <ArtNetNode::Stop()+0x6a>
 8009e4e:	2500      	movs	r5, #0
 8009e50:	f604 3678 	addw	r6, r4, #2936	; 0xb78
 8009e54:	012b      	lsls	r3, r5, #4
 8009e56:	5cf3      	ldrb	r3, [r6, r3]
 8009e58:	b123      	cbz	r3, 8009e64 <ArtNetNode::Stop()+0x64>
 8009e5a:	6960      	ldr	r0, [r4, #20]
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	6803      	ldr	r3, [r0, #0]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	4798      	blx	r3
 8009e64:	3501      	adds	r5, #1
 8009e66:	2d04      	cmp	r5, #4
 8009e68:	d1f4      	bne.n	8009e54 <ArtNetNode::Stop()+0x54>
 8009e6a:	4b0b      	ldr	r3, [pc, #44]	; (8009e98 <ArtNetNode::Stop()+0x98>)
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	6818      	ldr	r0, [r3, #0]
 8009e70:	f00b fcc2 	bl	80157f8 <LedBlink::SetMode(ledblink::Mode)>
 8009e74:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 8009e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e80:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8009e84:	2300      	movs	r3, #0
 8009e86:	f884 36e5 	strb.w	r3, [r4, #1765]	; 0x6e5
 8009e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e8e:	bf00      	nop
 8009e90:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009e94:	200000ec 	andcs	r0, r0, ip, ror #1
 8009e98:	2001ce48 	andcs	ip, r1, r8, asr #28

08009e9c <ArtNetNode::SetShortName(char const*)>:
 8009e9c:	b570      	push	{r4, r5, r6, lr}
 8009e9e:	f100 0550 	add.w	r5, r0, #80	; 0x50
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	2211      	movs	r2, #17
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	f7ff ff5a 	bl	8009d60 <strncpy.isra.0>
 8009eac:	2300      	movs	r3, #0
 8009eae:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8009eb2:	462b      	mov	r3, r5
 8009eb4:	f104 0262 	add.w	r2, r4, #98	; 0x62
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d111      	bne.n	8009ee0 <ArtNetNode::SetShortName(char const*)+0x44>
 8009ebc:	f894 36e5 	ldrb.w	r3, [r4, #1765]	; 0x6e5
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d112      	bne.n	8009eea <ArtNetNode::SetShortName(char const*)+0x4e>
 8009ec4:	6a20      	ldr	r0, [r4, #32]
 8009ec6:	b118      	cbz	r0, 8009ed0 <ArtNetNode::SetShortName(char const*)+0x34>
 8009ec8:	6803      	ldr	r3, [r0, #0]
 8009eca:	4629      	mov	r1, r5
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	4798      	blx	r3
 8009ed0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ed2:	b150      	cbz	r0, 8009eea <ArtNetNode::SetShortName(char const*)+0x4e>
 8009ed4:	6803      	ldr	r3, [r0, #0]
 8009ed6:	4629      	mov	r1, r5
 8009ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	4718      	bx	r3
 8009ee0:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009ee4:	f883 154d 	strb.w	r1, [r3, #1357]	; 0x54d
 8009ee8:	e7e6      	b.n	8009eb8 <ArtNetNode::SetShortName(char const*)+0x1c>
 8009eea:	bd70      	pop	{r4, r5, r6, pc}

08009eec <ArtNetNode::SetLongName(char const*)>:
 8009eec:	b570      	push	{r4, r5, r6, lr}
 8009eee:	f100 0562 	add.w	r5, r0, #98	; 0x62
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	223f      	movs	r2, #63	; 0x3f
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	f7ff ff32 	bl	8009d60 <strncpy.isra.0>
 8009efc:	2300      	movs	r3, #0
 8009efe:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8009f02:	462b      	mov	r3, r5
 8009f04:	f104 02a2 	add.w	r2, r4, #162	; 0xa2
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d111      	bne.n	8009f30 <ArtNetNode::SetLongName(char const*)+0x44>
 8009f0c:	f894 36e5 	ldrb.w	r3, [r4, #1765]	; 0x6e5
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d112      	bne.n	8009f3a <ArtNetNode::SetLongName(char const*)+0x4e>
 8009f14:	6a20      	ldr	r0, [r4, #32]
 8009f16:	b118      	cbz	r0, 8009f20 <ArtNetNode::SetLongName(char const*)+0x34>
 8009f18:	6803      	ldr	r3, [r0, #0]
 8009f1a:	4629      	mov	r1, r5
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	4798      	blx	r3
 8009f20:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009f22:	b150      	cbz	r0, 8009f3a <ArtNetNode::SetLongName(char const*)+0x4e>
 8009f24:	6803      	ldr	r3, [r0, #0]
 8009f26:	4629      	mov	r1, r5
 8009f28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	4718      	bx	r3
 8009f30:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009f34:	f883 154d 	strb.w	r1, [r3, #1357]	; 0x54d
 8009f38:	e7e6      	b.n	8009f08 <ArtNetNode::SetLongName(char const*)+0x1c>
 8009f3a:	bd70      	pop	{r4, r5, r6, pc}

08009f3c <ArtNetNode::ArtNetNode(unsigned char)>:
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f42:	2908      	cmp	r1, #8
 8009f44:	bf28      	it	cs
 8009f46:	2108      	movcs	r1, #8
 8009f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	e9c0 2301 	strd	r2, r3, [r0, #4]
 8009f50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f54:	4a41      	ldr	r2, [pc, #260]	; (800a05c <ArtNetNode::ArtNetNode(unsigned char)+0x120>)
 8009f56:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8009f5a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8009f5e:	7001      	strb	r1, [r0, #0]
 8009f60:	6010      	str	r0, [r2, #0]
 8009f62:	b085      	sub	sp, #20
 8009f64:	6243      	str	r3, [r0, #36]	; 0x24
 8009f66:	f8c0 3674 	str.w	r3, [r0, #1652]	; 0x674
 8009f6a:	f8c0 3678 	str.w	r3, [r0, #1656]	; 0x678
 8009f6e:	f880 367e 	strb.w	r3, [r0, #1662]	; 0x67e
 8009f72:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8009f76:	f100 01b0 	add.w	r1, r0, #176	; 0xb0
 8009f7a:	428a      	cmp	r2, r1
 8009f7c:	d15f      	bne.n	800a03e <ArtNetNode::ArtNetNode(unsigned char)+0x102>
 8009f7e:	4b38      	ldr	r3, [pc, #224]	; (800a060 <ArtNetNode::ArtNetNode(unsigned char)+0x124>)
 8009f80:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8009f84:	6818      	ldr	r0, [r3, #0]
 8009f86:	6903      	ldr	r3, [r0, #16]
 8009f88:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f8a:	6982      	ldr	r2, [r0, #24]
 8009f8c:	ea63 0302 	orn	r3, r3, r2
 8009f90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f92:	6363      	str	r3, [r4, #52]	; 0x34
 8009f94:	f008 ffce 	bl	8012f34 <Network::MacAddressCopyTo(unsigned char*)>
 8009f98:	23d0      	movs	r3, #208	; 0xd0
 8009f9a:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8009f9e:	f244 0318 	movw	r3, #16408	; 0x4018
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8009fa8:	f204 62f4 	addw	r2, r4, #1780	; 0x6f4
 8009fac:	f504 63da 	add.w	r3, r4, #1744	; 0x6d0
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d147      	bne.n	800a044 <ArtNetNode::ArtNetNode(unsigned char)+0x108>
 8009fb4:	f240 1201 	movw	r2, #257	; 0x101
 8009fb8:	f8a4 26e4 	strh.w	r2, [r4, #1764]	; 0x6e4
 8009fbc:	f242 7210 	movw	r2, #10000	; 0x2710
 8009fc0:	2500      	movs	r5, #0
 8009fc2:	2708      	movs	r7, #8
 8009fc4:	f8c4 26dc 	str.w	r2, [r4, #1756]	; 0x6dc
 8009fc8:	f604 3174 	addw	r1, r4, #2932	; 0xb74
 8009fcc:	f604 5674 	addw	r6, r4, #3444	; 0xd74
 8009fd0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009fd4:	4283      	cmp	r3, r0
 8009fd6:	d13b      	bne.n	800a050 <ArtNetNode::ArtNetNode(unsigned char)+0x114>
 8009fd8:	460a      	mov	r2, r1
 8009fda:	f101 0310 	add.w	r3, r1, #16
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d139      	bne.n	800a056 <ArtNetNode::ArtNetNode(unsigned char)+0x11a>
 8009fe2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009fe4:	4296      	cmp	r6, r2
 8009fe6:	608b      	str	r3, [r1, #8]
 8009fe8:	70cf      	strb	r7, [r1, #3]
 8009fea:	d12e      	bne.n	800a04a <ArtNetNode::ArtNetNode(unsigned char)+0x10e>
 8009fec:	4620      	mov	r0, r4
 8009fee:	491d      	ldr	r1, [pc, #116]	; (800a064 <ArtNetNode::ArtNetNode(unsigned char)+0x128>)
 8009ff0:	f7ff ff54 	bl	8009e9c <ArtNetNode::SetShortName(char const*)>
 8009ff4:	4b1c      	ldr	r3, [pc, #112]	; (800a068 <ArtNetNode::ArtNetNode(unsigned char)+0x12c>)
 8009ff6:	f204 658f 	addw	r5, r4, #1679	; 0x68f
 8009ffa:	9302      	str	r3, [sp, #8]
 8009ffc:	2304      	movs	r3, #4
 8009ffe:	9301      	str	r3, [sp, #4]
 800a000:	4b1a      	ldr	r3, [pc, #104]	; (800a06c <ArtNetNode::ArtNetNode(unsigned char)+0x130>)
 800a002:	4a1b      	ldr	r2, [pc, #108]	; (800a070 <ArtNetNode::ArtNetNode(unsigned char)+0x134>)
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	2140      	movs	r1, #64	; 0x40
 800a008:	4b1a      	ldr	r3, [pc, #104]	; (800a074 <ArtNetNode::ArtNetNode(unsigned char)+0x138>)
 800a00a:	4628      	mov	r0, r5
 800a00c:	f7ff fbce 	bl	80097ac <snprintf>
 800a010:	4629      	mov	r1, r5
 800a012:	4620      	mov	r0, r4
 800a014:	f7ff ff6a 	bl	8009eec <ArtNetNode::SetLongName(char const*)>
 800a018:	4b17      	ldr	r3, [pc, #92]	; (800a078 <ArtNetNode::ArtNetNode(unsigned char)+0x13c>)
 800a01a:	f204 607f 	addw	r0, r4, #1663	; 0x67f
 800a01e:	781a      	ldrb	r2, [r3, #0]
 800a020:	4916      	ldr	r1, [pc, #88]	; (800a07c <ArtNetNode::ArtNetNode(unsigned char)+0x140>)
 800a022:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
 800a026:	785b      	ldrb	r3, [r3, #1]
 800a028:	220f      	movs	r2, #15
 800a02a:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
 800a02e:	f7ff fe97 	bl	8009d60 <strncpy.isra.0>
 800a032:	2300      	movs	r3, #0
 800a034:	4620      	mov	r0, r4
 800a036:	f884 368e 	strb.w	r3, [r4, #1678]	; 0x68e
 800a03a:	b005      	add	sp, #20
 800a03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a03e:	f802 3b01 	strb.w	r3, [r2], #1
 800a042:	e79a      	b.n	8009f7a <ArtNetNode::ArtNetNode(unsigned char)+0x3e>
 800a044:	f803 1b01 	strb.w	r1, [r3], #1
 800a048:	e7b2      	b.n	8009fb0 <ArtNetNode::ArtNetNode(unsigned char)+0x74>
 800a04a:	4603      	mov	r3, r0
 800a04c:	4611      	mov	r1, r2
 800a04e:	e7bf      	b.n	8009fd0 <ArtNetNode::ArtNetNode(unsigned char)+0x94>
 800a050:	f803 5b01 	strb.w	r5, [r3], #1
 800a054:	e7be      	b.n	8009fd4 <ArtNetNode::ArtNetNode(unsigned char)+0x98>
 800a056:	f802 5b01 	strb.w	r5, [r2], #1
 800a05a:	e7c0      	b.n	8009fde <ArtNetNode::ArtNetNode(unsigned char)+0xa2>
 800a05c:	2000c170 	andcs	ip, r0, r0, ror r1
 800a060:	2001c724 	andcs	ip, r1, r4, lsr #14
 800a064:	08017fb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
 800a068:	08017f8f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, r9, sl, fp, ip, sp, lr}
 800a06c:	08017fac 	stmdaeq	r1, {r2, r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}
 800a070:	08017f83 	stmdaeq	r1, {r0, r1, r7, r8, r9, sl, fp, ip, sp, lr}
 800a074:	08017f79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 800a078:	08018275 	stmdaeq	r1, {r0, r2, r4, r5, r6, r9, pc}
 800a07c:	08017fa3 	stmdaeq	r1, {r0, r1, r5, r7, r8, r9, sl, fp, ip, sp, lr}

0800a080 <ArtNetNode::SetOemValue(unsigned char const*)>:
 800a080:	780b      	ldrb	r3, [r1, #0]
 800a082:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
 800a086:	784b      	ldrb	r3, [r1, #1]
 800a088:	f880 304f 	strb.w	r3, [r0, #79]	; 0x4f
 800a08c:	4770      	bx	lr
	...

0800a090 <ArtNetNode::SetNetworkDataLossCondition()>:
 800a090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a094:	2400      	movs	r4, #0
 800a096:	4606      	mov	r6, r0
 800a098:	4605      	mov	r5, r0
 800a09a:	46a0      	mov	r8, r4
 800a09c:	46a2      	mov	sl, r4
 800a09e:	4f1a      	ldr	r7, [pc, #104]	; (800a108 <ArtNetNode::SetNetworkDataLossCondition()+0x78>)
 800a0a0:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800a10c <ArtNetNode::SetNetworkDataLossCondition()+0x7c>
 800a0a4:	f880 46ea 	strb.w	r4, [r0, #1770]	; 0x6ea
 800a0a8:	f880 46e9 	strb.w	r4, [r0, #1769]	; 0x6e9
 800a0ac:	7833      	ldrb	r3, [r6, #0]
 800a0ae:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 800a0b2:	d301      	bcc.n	800a0b8 <ArtNetNode::SetNetworkDataLossCondition()+0x28>
 800a0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b8:	f8d5 3710 	ldr.w	r3, [r5, #1808]	; 0x710
 800a0bc:	b953      	cbnz	r3, 800a0d4 <ArtNetNode::SetNetworkDataLossCondition()+0x44>
 800a0be:	f895 3715 	ldrb.w	r3, [r5, #1813]	; 0x715
 800a0c2:	b13b      	cbz	r3, 800a0d4 <ArtNetNode::SetNetworkDataLossCondition()+0x44>
 800a0c4:	68b0      	ldr	r0, [r6, #8]
 800a0c6:	b118      	cbz	r0, 800a0d0 <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 800a0c8:	6803      	ldr	r3, [r0, #0]
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	4798      	blx	r3
 800a0d0:	f885 8715 	strb.w	r8, [r5, #1813]	; 0x715
 800a0d4:	f895 36f7 	ldrb.w	r3, [r5, #1783]	; 0x6f7
 800a0d8:	f8c5 8700 	str.w	r8, [r5, #1792]	; 0x700
 800a0dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0e0:	f885 36f7 	strb.w	r3, [r5, #1783]	; 0x6f7
 800a0e4:	f8c5 8708 	str.w	r8, [r5, #1800]	; 0x708
 800a0e8:	f8d9 3000 	ldr.w	r3, [r9]
 800a0ec:	f8c7 a600 	str.w	sl, [r7, #1536]	; 0x600
 800a0f0:	07db      	lsls	r3, r3, #31
 800a0f2:	bf58      	it	pl
 800a0f4:	2301      	movpl	r3, #1
 800a0f6:	f104 0401 	add.w	r4, r4, #1
 800a0fa:	bf58      	it	pl
 800a0fc:	f8c9 3000 	strpl.w	r3, [r9]
 800a100:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800a104:	3524      	adds	r5, #36	; 0x24
 800a106:	e7d1      	b.n	800a0ac <ArtNetNode::SetNetworkDataLossCondition()+0x1c>
 800a108:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800a10c:	200000ec 	andcs	r0, r0, ip, ror #1

0800a110 <ArtNetNode::GetType()>:
 800a110:	f8b0 3580 	ldrh.w	r3, [r0, #1408]	; 0x580
 800a114:	b530      	push	{r4, r5, lr}
 800a116:	2b0b      	cmp	r3, #11
 800a118:	d91d      	bls.n	800a156 <ArtNetNode::GetType()+0x46>
 800a11a:	f890 30ba 	ldrb.w	r3, [r0, #186]	; 0xba
 800a11e:	b9d3      	cbnz	r3, 800a156 <ArtNetNode::GetType()+0x46>
 800a120:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
 800a124:	2a0e      	cmp	r2, #14
 800a126:	d10d      	bne.n	800a144 <ArtNetNode::GetType()+0x34>
 800a128:	4a0c      	ldr	r2, [pc, #48]	; (800a15c <ArtNetNode::GetType()+0x4c>)
 800a12a:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
 800a12e:	f100 01b8 	add.w	r1, r0, #184	; 0xb8
 800a132:	428b      	cmp	r3, r1
 800a134:	d109      	bne.n	800a14a <ArtNetNode::GetType()+0x3a>
 800a136:	f890 20b9 	ldrb.w	r2, [r0, #185]	; 0xb9
 800a13a:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 800a13e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a142:	b29b      	uxth	r3, r3
 800a144:	f8a0 3582 	strh.w	r3, [r0, #1410]	; 0x582
 800a148:	bd30      	pop	{r4, r5, pc}
 800a14a:	f813 5b01 	ldrb.w	r5, [r3], #1
 800a14e:	f812 4b01 	ldrb.w	r4, [r2], #1
 800a152:	42a5      	cmp	r5, r4
 800a154:	d0ed      	beq.n	800a132 <ArtNetNode::GetType()+0x22>
 800a156:	2300      	movs	r3, #0
 800a158:	e7f4      	b.n	800a144 <ArtNetNode::GetType()+0x34>
 800a15a:	bf00      	nop
 800a15c:	08017d48 	stmdaeq	r1, {r3, r6, r8, sl, fp, ip, sp, lr}

0800a160 <ArtNetNode::Run()>:
 800a160:	b530      	push	{r4, r5, lr}
 800a162:	b085      	sub	sp, #20
 800a164:	f10d 030e 	add.w	r3, sp, #14
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	4604      	mov	r4, r0
 800a16c:	f200 537c 	addw	r3, r0, #1404	; 0x57c
 800a170:	f100 01b0 	add.w	r1, r0, #176	; 0xb0
 800a174:	f240 42cc 	movw	r2, #1228	; 0x4cc
 800a178:	7900      	ldrb	r0, [r0, #4]
 800a17a:	f008 f9b3 	bl	80124e4 <udp_recv>
 800a17e:	4b64      	ldr	r3, [pc, #400]	; (800a310 <ArtNetNode::Run()+0x1b0>)
 800a180:	681d      	ldr	r5, [r3, #0]
 800a182:	f8c4 5674 	str.w	r5, [r4, #1652]	; 0x674
 800a186:	2800      	cmp	r0, #0
 800a188:	d143      	bne.n	800a212 <ArtNetNode::Run()+0xb2>
 800a18a:	f8d4 36dc 	ldr.w	r3, [r4, #1756]	; 0x6dc
 800a18e:	b13b      	cbz	r3, 800a1a0 <ArtNetNode::Run()+0x40>
 800a190:	f8d4 2678 	ldr.w	r2, [r4, #1656]	; 0x678
 800a194:	1aad      	subs	r5, r5, r2
 800a196:	42ab      	cmp	r3, r5
 800a198:	d802      	bhi.n	800a1a0 <ArtNetNode::Run()+0x40>
 800a19a:	4620      	mov	r0, r4
 800a19c:	f7ff ff78 	bl	800a090 <ArtNetNode::SetNetworkDataLossCondition()>
 800a1a0:	f894 36e6 	ldrb.w	r3, [r4, #1766]	; 0x6e6
 800a1a4:	b16b      	cbz	r3, 800a1c2 <ArtNetNode::Run()+0x62>
 800a1a6:	69e0      	ldr	r0, [r4, #28]
 800a1a8:	f894 56eb 	ldrb.w	r5, [r4, #1771]	; 0x6eb
 800a1ac:	b120      	cbz	r0, 800a1b8 <ArtNetNode::Run()+0x58>
 800a1ae:	6803      	ldr	r3, [r0, #0]
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	4798      	blx	r3
 800a1b4:	4305      	orrs	r5, r0
 800a1b6:	b2ed      	uxtb	r5, r5
 800a1b8:	b11d      	cbz	r5, 800a1c2 <ArtNetNode::Run()+0x62>
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f000 ff4f 	bl	800b060 <ArtNetNode::SendPollRelply(bool)>
 800a1c2:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
 800a1c6:	f8d4 2678 	ldr.w	r2, [r4, #1656]	; 0x678
 800a1ca:	1a9b      	subs	r3, r3, r2
 800a1cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1d0:	d305      	bcc.n	800a1de <ArtNetNode::Run()+0x7e>
 800a1d2:	f894 36ed 	ldrb.w	r3, [r4, #1773]	; 0x6ed
 800a1d6:	f023 0302 	bic.w	r3, r3, #2
 800a1da:	f884 36ed 	strb.w	r3, [r4, #1773]	; 0x6ed
 800a1de:	6963      	ldr	r3, [r4, #20]
 800a1e0:	b113      	cbz	r3, 800a1e8 <ArtNetNode::Run()+0x88>
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f000 fd5a 	bl	800ac9c <ArtNetNode::HandleDmxIn()>
 800a1e8:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 800a1ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a1f0:	2bc0      	cmp	r3, #192	; 0xc0
 800a1f2:	d10c      	bne.n	800a20e <ArtNetNode::Run()+0xae>
 800a1f4:	4b47      	ldr	r3, [pc, #284]	; (800a314 <ArtNetNode::Run()+0x1b4>)
 800a1f6:	6818      	ldr	r0, [r3, #0]
 800a1f8:	6843      	ldr	r3, [r0, #4]
 800a1fa:	2b04      	cmp	r3, #4
 800a1fc:	d007      	beq.n	800a20e <ArtNetNode::Run()+0xae>
 800a1fe:	f894 36ed 	ldrb.w	r3, [r4, #1773]	; 0x6ed
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 8082 	beq.w	800a30c <ArtNetNode::Run()+0x1ac>
 800a208:	2103      	movs	r1, #3
 800a20a:	f00b faf5 	bl	80157f8 <LedBlink::SetMode(ledblink::Mode)>
 800a20e:	b005      	add	sp, #20
 800a210:	bd30      	pop	{r4, r5, pc}
 800a212:	f8a4 0580 	strh.w	r0, [r4, #1408]	; 0x580
 800a216:	f8c4 5678 	str.w	r5, [r4, #1656]	; 0x678
 800a21a:	4620      	mov	r0, r4
 800a21c:	f7ff ff78 	bl	800a110 <ArtNetNode::GetType()>
 800a220:	f894 36e9 	ldrb.w	r3, [r4, #1769]	; 0x6e9
 800a224:	b143      	cbz	r3, 800a238 <ArtNetNode::Run()+0xd8>
 800a226:	f8d4 36e0 	ldr.w	r3, [r4, #1760]	; 0x6e0
 800a22a:	1aed      	subs	r5, r5, r3
 800a22c:	f5b5 6f7a 	cmp.w	r5, #4000	; 0xfa0
 800a230:	bf24      	itt	cs
 800a232:	2300      	movcs	r3, #0
 800a234:	f884 36e9 	strbcs.w	r3, [r4, #1769]	; 0x6e9
 800a238:	f8b4 3582 	ldrh.w	r3, [r4, #1410]	; 0x582
 800a23c:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 800a240:	d04c      	beq.n	800a2dc <ArtNetNode::Run()+0x17c>
 800a242:	d81d      	bhi.n	800a280 <ArtNetNode::Run()+0x120>
 800a244:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 800a248:	d039      	beq.n	800a2be <ArtNetNode::Run()+0x15e>
 800a24a:	d80c      	bhi.n	800a266 <ArtNetNode::Run()+0x106>
 800a24c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a250:	d031      	beq.n	800a2b6 <ArtNetNode::Run()+0x156>
 800a252:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a256:	d1c2      	bne.n	800a1de <ArtNetNode::Run()+0x7e>
 800a258:	68a3      	ldr	r3, [r4, #8]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d0bf      	beq.n	800a1de <ArtNetNode::Run()+0x7e>
 800a25e:	4620      	mov	r0, r4
 800a260:	f000 fc32 	bl	800aac8 <ArtNetNode::HandleDmx()>
 800a264:	e7bb      	b.n	800a1de <ArtNetNode::Run()+0x7e>
 800a266:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a26a:	d02f      	beq.n	800a2cc <ArtNetNode::Run()+0x16c>
 800a26c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a270:	d1b5      	bne.n	800a1de <ArtNetNode::Run()+0x7e>
 800a272:	6923      	ldr	r3, [r4, #16]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d0b2      	beq.n	800a1de <ArtNetNode::Run()+0x7e>
 800a278:	4620      	mov	r0, r4
 800a27a:	f001 f85c 	bl	800b336 <ArtNetNode::HandleTodRequest()>
 800a27e:	e7ae      	b.n	800a1de <ArtNetNode::Run()+0x7e>
 800a280:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 800a284:	d026      	beq.n	800a2d4 <ArtNetNode::Run()+0x174>
 800a286:	d80c      	bhi.n	800a2a2 <ArtNetNode::Run()+0x142>
 800a288:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 800a28c:	d02e      	beq.n	800a2ec <ArtNetNode::Run()+0x18c>
 800a28e:	f5b3 4f17 	cmp.w	r3, #38656	; 0x9700
 800a292:	d1a4      	bne.n	800a1de <ArtNetNode::Run()+0x7e>
 800a294:	68e3      	ldr	r3, [r4, #12]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d0a1      	beq.n	800a1de <ArtNetNode::Run()+0x7e>
 800a29a:	4620      	mov	r0, r4
 800a29c:	f001 f938 	bl	800b510 <ArtNetNode::HandleTimeCode()>
 800a2a0:	e79d      	b.n	800a1de <ArtNetNode::Run()+0x7e>
 800a2a2:	f5b3 4f19 	cmp.w	r3, #39168	; 0x9900
 800a2a6:	d029      	beq.n	800a2fc <ArtNetNode::Run()+0x19c>
 800a2a8:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 800a2ac:	d197      	bne.n	800a1de <ArtNetNode::Run()+0x7e>
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f000 fd9e 	bl	800adf0 <ArtNetNode::HandleIpProg()>
 800a2b4:	e793      	b.n	800a1de <ArtNetNode::Run()+0x7e>
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f000 ff70 	bl	800b19c <ArtNetNode::HandlePoll()>
 800a2bc:	e78f      	b.n	800a1de <ArtNetNode::Run()+0x7e>
 800a2be:	68a3      	ldr	r3, [r4, #8]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d08c      	beq.n	800a1de <ArtNetNode::Run()+0x7e>
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f001 f8d7 	bl	800b478 <ArtNetNode::HandleSync()>
 800a2ca:	e788      	b.n	800a1de <ArtNetNode::Run()+0x7e>
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f000 f9e7 	bl	800a6a0 <ArtNetNode::HandleAddress()>
 800a2d2:	e784      	b.n	800a1de <ArtNetNode::Run()+0x7e>
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f001 f921 	bl	800b51c <ArtNetNode::HandleTimeSync()>
 800a2da:	e780      	b.n	800a1de <ArtNetNode::Run()+0x7e>
 800a2dc:	6923      	ldr	r3, [r4, #16]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	f43f af7d 	beq.w	800a1de <ArtNetNode::Run()+0x7e>
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f000 ffec 	bl	800b2c2 <ArtNetNode::HandleTodControl()>
 800a2ea:	e778      	b.n	800a1de <ArtNetNode::Run()+0x7e>
 800a2ec:	6923      	ldr	r3, [r4, #16]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	f43f af75 	beq.w	800a1de <ArtNetNode::Run()+0x7e>
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f001 f839 	bl	800b36c <ArtNetNode::HandleRdm()>
 800a2fa:	e770      	b.n	800a1de <ArtNetNode::Run()+0x7e>
 800a2fc:	69a3      	ldr	r3, [r4, #24]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f43f af6d 	beq.w	800a1de <ArtNetNode::Run()+0x7e>
 800a304:	4620      	mov	r0, r4
 800a306:	f001 fee3 	bl	800c0d0 <ArtNetNode::HandleTrigger()>
 800a30a:	e768      	b.n	800a1de <ArtNetNode::Run()+0x7e>
 800a30c:	2102      	movs	r1, #2
 800a30e:	e77c      	b.n	800a20a <ArtNetNode::Run()+0xaa>
 800a310:	2001ce64 	andcs	ip, r1, r4, ror #28
 800a314:	2001ce48 	andcs	ip, r1, r8, asr #28

0800a318 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
 800a318:	b93b      	cbnz	r3, 800a32a <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x12>
 800a31a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a31e:	f8b0 3b74 	ldrh.w	r3, [r0, #2932]	; 0xb74
 800a322:	8013      	strh	r3, [r2, #0]
 800a324:	f890 0b78 	ldrb.w	r0, [r0, #2936]	; 0xb78
 800a328:	4770      	bx	lr
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	bf01      	itttt	eq
 800a32e:	2324      	moveq	r3, #36	; 0x24
 800a330:	fb03 0001 	mlaeq	r0, r3, r1, r0
 800a334:	f8b0 36f4 	ldrheq.w	r3, [r0, #1780]	; 0x6f4
 800a338:	f890 06f8 	ldrbeq.w	r0, [r0, #1784]	; 0x6f8
 800a33c:	bf0c      	ite	eq
 800a33e:	8013      	strheq	r3, [r2, #0]
 800a340:	2000      	movne	r0, #0
 800a342:	4770      	bx	lr

0800a344 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
 800a344:	b94b      	cbnz	r3, 800a35a <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x16>
 800a346:	291f      	cmp	r1, #31
 800a348:	d810      	bhi.n	800a36c <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x28>
 800a34a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a34e:	f890 3b76 	ldrb.w	r3, [r0, #2934]	; 0xb76
 800a352:	7013      	strb	r3, [r2, #0]
 800a354:	f890 0b78 	ldrb.w	r0, [r0, #2936]	; 0xb78
 800a358:	4770      	bx	lr
 800a35a:	2324      	movs	r3, #36	; 0x24
 800a35c:	fb03 0001 	mla	r0, r3, r1, r0
 800a360:	f890 36f6 	ldrb.w	r3, [r0, #1782]	; 0x6f6
 800a364:	7013      	strb	r3, [r2, #0]
 800a366:	f890 06f8 	ldrb.w	r0, [r0, #1784]	; 0x6f8
 800a36a:	4770      	bx	lr
 800a36c:	4618      	mov	r0, r3
 800a36e:	4770      	bx	lr

0800a370 <ArtNetNode::GetSubnetSwitch(unsigned int) const>:
 800a370:	4408      	add	r0, r1
 800a372:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
 800a376:	4770      	bx	lr

0800a378 <ArtNetNode::GetNetSwitch(unsigned int) const>:
 800a378:	4408      	add	r0, r1
 800a37a:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 800a37e:	4770      	bx	lr

0800a380 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
 800a380:	4402      	add	r2, r0
 800a382:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 800a386:	f892 2046 	ldrb.w	r2, [r2, #70]	; 0x46
 800a38a:	021b      	lsls	r3, r3, #8
 800a38c:	0112      	lsls	r2, r2, #4
 800a38e:	b2d2      	uxtb	r2, r2
 800a390:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800a394:	4313      	orrs	r3, r2
 800a396:	f001 010f 	and.w	r1, r1, #15
 800a39a:	ea43 0001 	orr.w	r0, r3, r1
 800a39e:	4770      	bx	lr

0800a3a0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
 800a3a0:	291f      	cmp	r1, #31
 800a3a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	460d      	mov	r5, r1
 800a3aa:	4617      	mov	r7, r2
 800a3ac:	461e      	mov	r6, r3
 800a3ae:	f200 80a5 	bhi.w	800a4fc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x15c>
 800a3b2:	2a02      	cmp	r2, #2
 800a3b4:	d121      	bne.n	800a3fa <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x5a>
 800a3b6:	2324      	movs	r3, #36	; 0x24
 800a3b8:	fb03 0301 	mla	r3, r3, r1, r0
 800a3bc:	f893 26f8 	ldrb.w	r2, [r3, #1784]	; 0x6f8
 800a3c0:	b13a      	cbz	r2, 800a3d2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x32>
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
 800a3c8:	f890 36ee 	ldrb.w	r3, [r0, #1774]	; 0x6ee
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	f880 36ee 	strb.w	r3, [r0, #1774]	; 0x6ee
 800a3d2:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800a3d6:	f895 3b78 	ldrb.w	r3, [r5, #2936]	; 0xb78
 800a3da:	b90b      	cbnz	r3, 800a3e0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x40>
 800a3dc:	2000      	movs	r0, #0
 800a3de:	e00a      	b.n	800a3f6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>
 800a3e0:	2308      	movs	r3, #8
 800a3e2:	2000      	movs	r0, #0
 800a3e4:	f885 3b77 	strb.w	r3, [r5, #2935]	; 0xb77
 800a3e8:	f885 0b78 	strb.w	r0, [r5, #2936]	; 0xb78
 800a3ec:	f894 36ef 	ldrb.w	r3, [r4, #1775]	; 0x6ef
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	f884 36ef 	strb.w	r3, [r4, #1775]	; 0x6ef
 800a3f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3fa:	2a00      	cmp	r2, #0
 800a3fc:	d13b      	bne.n	800a476 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xd6>
 800a3fe:	eb00 1801 	add.w	r8, r0, r1, lsl #4
 800a402:	f898 3b78 	ldrb.w	r3, [r8, #2936]	; 0xb78
 800a406:	b923      	cbnz	r3, 800a412 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x72>
 800a408:	f890 36ef 	ldrb.w	r3, [r0, #1775]	; 0x6ef
 800a40c:	3301      	adds	r3, #1
 800a40e:	f880 36ef 	strb.w	r3, [r0, #1775]	; 0x6ef
 800a412:	2301      	movs	r3, #1
 800a414:	f04f 0900 	mov.w	r9, #0
 800a418:	f888 3b78 	strb.w	r3, [r8, #2936]	; 0xb78
 800a41c:	f006 030f 	and.w	r3, r6, #15
 800a420:	f888 3b76 	strb.w	r3, [r8, #2934]	; 0xb76
 800a424:	08aa      	lsrs	r2, r5, #2
 800a426:	4631      	mov	r1, r6
 800a428:	4620      	mov	r0, r4
 800a42a:	f888 9b77 	strb.w	r9, [r8, #2935]	; 0xb77
 800a42e:	f7ff ffa7 	bl	800a380 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a432:	2324      	movs	r3, #36	; 0x24
 800a434:	fb03 4305 	mla	r3, r3, r5, r4
 800a438:	f8a8 0b74 	strh.w	r0, [r8, #2932]	; 0xb74
 800a43c:	f893 26f8 	ldrb.w	r2, [r3, #1784]	; 0x6f8
 800a440:	b132      	cbz	r2, 800a450 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a442:	f883 96f8 	strb.w	r9, [r3, #1784]	; 0x6f8
 800a446:	f894 36ee 	ldrb.w	r3, [r4, #1774]	; 0x6ee
 800a44a:	3b01      	subs	r3, #1
 800a44c:	f884 36ee 	strb.w	r3, [r4, #1774]	; 0x6ee
 800a450:	69e0      	ldr	r0, [r4, #28]
 800a452:	f894 36e5 	ldrb.w	r3, [r4, #1765]	; 0x6e5
 800a456:	2800      	cmp	r0, #0
 800a458:	d042      	beq.n	800a4e0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x140>
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d13b      	bne.n	800a4d6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x136>
 800a45e:	6a20      	ldr	r0, [r4, #32]
 800a460:	2800      	cmp	r0, #0
 800a462:	d143      	bne.n	800a4ec <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x14c>
 800a464:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a466:	2800      	cmp	r0, #0
 800a468:	d0b8      	beq.n	800a3dc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800a46a:	6803      	ldr	r3, [r0, #0]
 800a46c:	4632      	mov	r2, r6
 800a46e:	4629      	mov	r1, r5
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	4798      	blx	r3
 800a474:	e7b2      	b.n	800a3dc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800a476:	2a01      	cmp	r2, #1
 800a478:	d1ea      	bne.n	800a450 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a47a:	f04f 0824 	mov.w	r8, #36	; 0x24
 800a47e:	fb08 0301 	mla	r3, r8, r1, r0
 800a482:	f893 36f8 	ldrb.w	r3, [r3, #1784]	; 0x6f8
 800a486:	b923      	cbnz	r3, 800a492 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xf2>
 800a488:	f890 36ee 	ldrb.w	r3, [r0, #1774]	; 0x6ee
 800a48c:	3301      	adds	r3, #1
 800a48e:	f880 36ee 	strb.w	r3, [r0, #1774]	; 0x6ee
 800a492:	2301      	movs	r3, #1
 800a494:	fb08 4805 	mla	r8, r8, r5, r4
 800a498:	f888 36f8 	strb.w	r3, [r8, #1784]	; 0x6f8
 800a49c:	f006 030f 	and.w	r3, r6, #15
 800a4a0:	f888 36f6 	strb.w	r3, [r8, #1782]	; 0x6f6
 800a4a4:	08aa      	lsrs	r2, r5, #2
 800a4a6:	4631      	mov	r1, r6
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f7ff ff69 	bl	800a380 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a4ae:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 800a4b2:	f8a8 06f4 	strh.w	r0, [r8, #1780]	; 0x6f4
 800a4b6:	f893 2b78 	ldrb.w	r2, [r3, #2936]	; 0xb78
 800a4ba:	2a00      	cmp	r2, #0
 800a4bc:	d0c8      	beq.n	800a450 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f883 2b78 	strb.w	r2, [r3, #2936]	; 0xb78
 800a4c4:	2208      	movs	r2, #8
 800a4c6:	f883 2b77 	strb.w	r2, [r3, #2935]	; 0xb77
 800a4ca:	f894 36ef 	ldrb.w	r3, [r4, #1775]	; 0x6ef
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	f884 36ef 	strb.w	r3, [r4, #1775]	; 0x6ef
 800a4d4:	e7bc      	b.n	800a450 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a4d6:	6803      	ldr	r3, [r0, #0]
 800a4d8:	463a      	mov	r2, r7
 800a4da:	4629      	mov	r1, r5
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	4798      	blx	r3
 800a4e0:	f894 36e5 	ldrb.w	r3, [r4, #1765]	; 0x6e5
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	f47f af79 	bne.w	800a3dc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800a4ea:	e7b8      	b.n	800a45e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800a4ec:	2d03      	cmp	r5, #3
 800a4ee:	d8b9      	bhi.n	800a464 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xc4>
 800a4f0:	6803      	ldr	r3, [r0, #0]
 800a4f2:	4632      	mov	r2, r6
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	4798      	blx	r3
 800a4fa:	e7b3      	b.n	800a464 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xc4>
 800a4fc:	f06f 0004 	mvn.w	r0, #4
 800a500:	e779      	b.n	800a3f6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>

0800a502 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800a502:	b430      	push	{r4, r5}
 800a504:	eb00 0491 	add.w	r4, r0, r1, lsr #2
 800a508:	f3c3 2506 	ubfx	r5, r3, #8, #7
 800a50c:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
 800a510:	f3c3 1503 	ubfx	r5, r3, #4, #4
 800a514:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
 800a518:	f003 030f 	and.w	r3, r3, #15
 800a51c:	bc30      	pop	{r4, r5}
 800a51e:	f7ff bf3f 	b.w	800a3a0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>

0800a522 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
 800a522:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a526:	2524      	movs	r5, #36	; 0x24
 800a528:	4604      	mov	r4, r0
 800a52a:	460f      	mov	r7, r1
 800a52c:	4616      	mov	r6, r2
 800a52e:	1883      	adds	r3, r0, r2
 800a530:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 800a534:	0093      	lsls	r3, r2, #2
 800a536:	b2db      	uxtb	r3, r3
 800a538:	fb05 0503 	mla	r5, r5, r3, r0
 800a53c:	f103 0905 	add.w	r9, r3, #5
 800a540:	f103 0801 	add.w	r8, r3, #1
 800a544:	45c8      	cmp	r8, r9
 800a546:	f105 0524 	add.w	r5, r5, #36	; 0x24
 800a54a:	d10c      	bne.n	800a566 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x44>
 800a54c:	6a20      	ldr	r0, [r4, #32]
 800a54e:	b1a0      	cbz	r0, 800a57a <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 800a550:	f894 36e5 	ldrb.w	r3, [r4, #1765]	; 0x6e5
 800a554:	2b02      	cmp	r3, #2
 800a556:	d110      	bne.n	800a57a <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 800a558:	b97e      	cbnz	r6, 800a57a <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 800a55a:	6803      	ldr	r3, [r0, #0]
 800a55c:	4639      	mov	r1, r7
 800a55e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a562:	699b      	ldr	r3, [r3, #24]
 800a564:	4718      	bx	r3
 800a566:	f8b5 16d0 	ldrh.w	r1, [r5, #1744]	; 0x6d0
 800a56a:	089a      	lsrs	r2, r3, #2
 800a56c:	4620      	mov	r0, r4
 800a56e:	f7ff ff07 	bl	800a380 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a572:	4643      	mov	r3, r8
 800a574:	f8a5 06d0 	strh.w	r0, [r5, #1744]	; 0x6d0
 800a578:	e7e2      	b.n	800a540 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x1e>
 800a57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a57e <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
 800a57e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a582:	2524      	movs	r5, #36	; 0x24
 800a584:	4604      	mov	r4, r0
 800a586:	460f      	mov	r7, r1
 800a588:	4616      	mov	r6, r2
 800a58a:	1883      	adds	r3, r0, r2
 800a58c:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
 800a590:	0093      	lsls	r3, r2, #2
 800a592:	b2db      	uxtb	r3, r3
 800a594:	fb05 0503 	mla	r5, r5, r3, r0
 800a598:	f103 0905 	add.w	r9, r3, #5
 800a59c:	f103 0801 	add.w	r8, r3, #1
 800a5a0:	45c8      	cmp	r8, r9
 800a5a2:	f105 0524 	add.w	r5, r5, #36	; 0x24
 800a5a6:	d10c      	bne.n	800a5c2 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x44>
 800a5a8:	6a20      	ldr	r0, [r4, #32]
 800a5aa:	b1a0      	cbz	r0, 800a5d6 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 800a5ac:	f894 36e5 	ldrb.w	r3, [r4, #1765]	; 0x6e5
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d110      	bne.n	800a5d6 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 800a5b4:	b97e      	cbnz	r6, 800a5d6 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 800a5b6:	6803      	ldr	r3, [r0, #0]
 800a5b8:	4639      	mov	r1, r7
 800a5ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5be:	695b      	ldr	r3, [r3, #20]
 800a5c0:	4718      	bx	r3
 800a5c2:	f8b5 16d0 	ldrh.w	r1, [r5, #1744]	; 0x6d0
 800a5c6:	089a      	lsrs	r2, r3, #2
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	f7ff fed9 	bl	800a380 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a5ce:	4643      	mov	r3, r8
 800a5d0:	f8a5 06d0 	strh.w	r0, [r5, #1744]	; 0x6d0
 800a5d4:	e7e2      	b.n	800a59c <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x1e>
 800a5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a5da <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
 800a5da:	b570      	push	{r4, r5, r6, lr}
 800a5dc:	4616      	mov	r6, r2
 800a5de:	2224      	movs	r2, #36	; 0x24
 800a5e0:	fb02 0301 	mla	r3, r2, r1, r0
 800a5e4:	fb02 0201 	mla	r2, r2, r1, r0
 800a5e8:	f8c3 6710 	str.w	r6, [r3, #1808]	; 0x710
 800a5ec:	f893 36f7 	ldrb.w	r3, [r3, #1783]	; 0x6f7
 800a5f0:	2e01      	cmp	r6, #1
 800a5f2:	bf0c      	ite	eq
 800a5f4:	f043 0301 	orreq.w	r3, r3, #1
 800a5f8:	f003 03fe 	andne.w	r3, r3, #254	; 0xfe
 800a5fc:	f882 36f7 	strb.w	r3, [r2, #1783]	; 0x6f7
 800a600:	f890 36e5 	ldrb.w	r3, [r0, #1765]	; 0x6e5
 800a604:	4605      	mov	r5, r0
 800a606:	2b02      	cmp	r3, #2
 800a608:	460c      	mov	r4, r1
 800a60a:	d110      	bne.n	800a62e <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800a60c:	2903      	cmp	r1, #3
 800a60e:	d80e      	bhi.n	800a62e <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800a610:	6a00      	ldr	r0, [r0, #32]
 800a612:	b118      	cbz	r0, 800a61c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x42>
 800a614:	6803      	ldr	r3, [r0, #0]
 800a616:	4632      	mov	r2, r6
 800a618:	6a1b      	ldr	r3, [r3, #32]
 800a61a:	4798      	blx	r3
 800a61c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a61e:	b130      	cbz	r0, 800a62e <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800a620:	6803      	ldr	r3, [r0, #0]
 800a622:	4632      	mov	r2, r6
 800a624:	4621      	mov	r1, r4
 800a626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a62a:	6a1b      	ldr	r3, [r3, #32]
 800a62c:	4718      	bx	r3
 800a62e:	bd70      	pop	{r4, r5, r6, pc}

0800a630 <ArtNetNode::GetPortProtocol(unsigned int) const>:
 800a630:	2324      	movs	r3, #36	; 0x24
 800a632:	fb03 0001 	mla	r0, r3, r1, r0
 800a636:	f8d0 0710 	ldr.w	r0, [r0, #1808]	; 0x710
 800a63a:	4770      	bx	lr

0800a63c <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
 800a63c:	b570      	push	{r4, r5, r6, lr}
 800a63e:	4616      	mov	r6, r2
 800a640:	2224      	movs	r2, #36	; 0x24
 800a642:	fb02 0301 	mla	r3, r2, r1, r0
 800a646:	fb02 0201 	mla	r2, r2, r1, r0
 800a64a:	f8c3 670c 	str.w	r6, [r3, #1804]	; 0x70c
 800a64e:	f893 36f7 	ldrb.w	r3, [r3, #1783]	; 0x6f7
 800a652:	2e01      	cmp	r6, #1
 800a654:	bf0c      	ite	eq
 800a656:	f043 0302 	orreq.w	r3, r3, #2
 800a65a:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 800a65e:	f882 36f7 	strb.w	r3, [r2, #1783]	; 0x6f7
 800a662:	f890 36e5 	ldrb.w	r3, [r0, #1765]	; 0x6e5
 800a666:	4605      	mov	r5, r0
 800a668:	2b02      	cmp	r3, #2
 800a66a:	460c      	mov	r4, r1
 800a66c:	d110      	bne.n	800a690 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800a66e:	2903      	cmp	r1, #3
 800a670:	d80e      	bhi.n	800a690 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800a672:	6a00      	ldr	r0, [r0, #32]
 800a674:	b118      	cbz	r0, 800a67e <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x42>
 800a676:	6803      	ldr	r3, [r0, #0]
 800a678:	4632      	mov	r2, r6
 800a67a:	69db      	ldr	r3, [r3, #28]
 800a67c:	4798      	blx	r3
 800a67e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a680:	b130      	cbz	r0, 800a690 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800a682:	6803      	ldr	r3, [r0, #0]
 800a684:	4632      	mov	r2, r6
 800a686:	4621      	mov	r1, r4
 800a688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a68c:	69db      	ldr	r3, [r3, #28]
 800a68e:	4718      	bx	r3
 800a690:	bd70      	pop	{r4, r5, r6, pc}

0800a692 <ArtNetNode::GetMergeMode(unsigned int) const>:
 800a692:	2324      	movs	r3, #36	; 0x24
 800a694:	fb03 0001 	mla	r0, r3, r1, r0
 800a698:	f8d0 070c 	ldr.w	r0, [r0, #1804]	; 0x70c
 800a69c:	4770      	bx	lr
	...

0800a6a0 <ArtNetNode::HandleAddress()>:
 800a6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	f880 36e4 	strb.w	r3, [r0, #1764]	; 0x6e4
 800a6aa:	f890 30be 	ldrb.w	r3, [r0, #190]	; 0xbe
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	b133      	cbz	r3, 800a6c0 <ArtNetNode::HandleAddress()+0x20>
 800a6b2:	f100 01be 	add.w	r1, r0, #190	; 0xbe
 800a6b6:	f7ff fbf1 	bl	8009e9c <ArtNetNode::SetShortName(char const*)>
 800a6ba:	2306      	movs	r3, #6
 800a6bc:	f884 36e4 	strb.w	r3, [r4, #1764]	; 0x6e4
 800a6c0:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
 800a6c4:	b13b      	cbz	r3, 800a6d6 <ArtNetNode::HandleAddress()+0x36>
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f104 01d0 	add.w	r1, r4, #208	; 0xd0
 800a6cc:	f7ff fc0e 	bl	8009eec <ArtNetNode::SetLongName(char const*)>
 800a6d0:	2307      	movs	r3, #7
 800a6d2:	f884 36e4 	strb.w	r3, [r4, #1764]	; 0x6e4
 800a6d6:	f894 50bd 	ldrb.w	r5, [r4, #189]	; 0xbd
 800a6da:	b105      	cbz	r5, 800a6de <ArtNetNode::HandleAddress()+0x3e>
 800a6dc:	3d01      	subs	r5, #1
 800a6de:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
 800a6e2:	2900      	cmp	r1, #0
 800a6e4:	d13d      	bne.n	800a762 <ArtNetNode::HandleAddress()+0xc2>
 800a6e6:	462a      	mov	r2, r5
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f7ff ff1a 	bl	800a522 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800a6ee:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
 800a6f2:	2900      	cmp	r1, #0
 800a6f4:	d13b      	bne.n	800a76e <ArtNetNode::HandleAddress()+0xce>
 800a6f6:	462a      	mov	r2, r5
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f7ff ff40 	bl	800a57e <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800a6fe:	00ad      	lsls	r5, r5, #2
 800a700:	b2ed      	uxtb	r5, r5
 800a702:	4627      	mov	r7, r4
 800a704:	462e      	mov	r6, r5
 800a706:	f504 788a 	add.w	r8, r4, #276	; 0x114
 800a70a:	f504 798c 	add.w	r9, r4, #280	; 0x118
 800a70e:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a712:	2b7f      	cmp	r3, #127	; 0x7f
 800a714:	d006      	beq.n	800a724 <ArtNetNode::HandleAddress()+0x84>
 800a716:	bb83      	cbnz	r3, 800a77a <ArtNetNode::HandleAddress()+0xda>
 800a718:	2301      	movs	r3, #1
 800a71a:	2201      	movs	r2, #1
 800a71c:	4631      	mov	r1, r6
 800a71e:	4620      	mov	r0, r4
 800a720:	f7ff fe3e 	bl	800a3a0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800a724:	f818 2c05 	ldrb.w	r2, [r8, #-5]
 800a728:	2a7f      	cmp	r2, #127	; 0x7f
 800a72a:	d005      	beq.n	800a738 <ArtNetNode::HandleAddress()+0x98>
 800a72c:	bb52      	cbnz	r2, 800a784 <ArtNetNode::HandleAddress()+0xe4>
 800a72e:	2301      	movs	r3, #1
 800a730:	4631      	mov	r1, r6
 800a732:	4620      	mov	r0, r4
 800a734:	f7ff fe34 	bl	800a3a0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800a738:	3601      	adds	r6, #1
 800a73a:	45c1      	cmp	r9, r8
 800a73c:	b2f6      	uxtb	r6, r6
 800a73e:	d1e6      	bne.n	800a70e <ArtNetNode::HandleAddress()+0x6e>
 800a740:	f894 111a 	ldrb.w	r1, [r4, #282]	; 0x11a
 800a744:	2913      	cmp	r1, #19
 800a746:	d823      	bhi.n	800a790 <ArtNetNode::HandleAddress()+0xf0>
 800a748:	290f      	cmp	r1, #15
 800a74a:	f200 80b9 	bhi.w	800a8c0 <ArtNetNode::HandleAddress()+0x220>
 800a74e:	1e4b      	subs	r3, r1, #1
 800a750:	2b03      	cmp	r3, #3
 800a752:	d82d      	bhi.n	800a7b0 <ArtNetNode::HandleAddress()+0x110>
 800a754:	3902      	subs	r1, #2
 800a756:	2902      	cmp	r1, #2
 800a758:	d87c      	bhi.n	800a854 <ArtNetNode::HandleAddress()+0x1b4>
 800a75a:	e8df f001 	tbb	[pc, r1]
 800a75e:	00a5998d 	adceq	r9, r5, sp, lsl #19
 800a762:	060f      	lsls	r7, r1, #24
 800a764:	d5c3      	bpl.n	800a6ee <ArtNetNode::HandleAddress()+0x4e>
 800a766:	462a      	mov	r2, r5
 800a768:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a76c:	e7bc      	b.n	800a6e8 <ArtNetNode::HandleAddress()+0x48>
 800a76e:	060e      	lsls	r6, r1, #24
 800a770:	d5c5      	bpl.n	800a6fe <ArtNetNode::HandleAddress()+0x5e>
 800a772:	462a      	mov	r2, r5
 800a774:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a778:	e7be      	b.n	800a6f8 <ArtNetNode::HandleAddress()+0x58>
 800a77a:	0618      	lsls	r0, r3, #24
 800a77c:	d5d2      	bpl.n	800a724 <ArtNetNode::HandleAddress()+0x84>
 800a77e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a782:	e7ca      	b.n	800a71a <ArtNetNode::HandleAddress()+0x7a>
 800a784:	0611      	lsls	r1, r2, #24
 800a786:	d5d7      	bpl.n	800a738 <ArtNetNode::HandleAddress()+0x98>
 800a788:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800a78c:	2200      	movs	r2, #0
 800a78e:	e7cf      	b.n	800a730 <ArtNetNode::HandleAddress()+0x90>
 800a790:	2973      	cmp	r1, #115	; 0x73
 800a792:	d81a      	bhi.n	800a7ca <ArtNetNode::HandleAddress()+0x12a>
 800a794:	296f      	cmp	r1, #111	; 0x6f
 800a796:	f200 80a1 	bhi.w	800a8dc <ArtNetNode::HandleAddress()+0x23c>
 800a79a:	2953      	cmp	r1, #83	; 0x53
 800a79c:	d803      	bhi.n	800a7a6 <ArtNetNode::HandleAddress()+0x106>
 800a79e:	294f      	cmp	r1, #79	; 0x4f
 800a7a0:	d906      	bls.n	800a7b0 <ArtNetNode::HandleAddress()+0x110>
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	e08d      	b.n	800a8c2 <ArtNetNode::HandleAddress()+0x222>
 800a7a6:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	f240 808f 	bls.w	800a8ce <ArtNetNode::HandleAddress()+0x22e>
 800a7b0:	69e0      	ldr	r0, [r4, #28]
 800a7b2:	b120      	cbz	r0, 800a7be <ArtNetNode::HandleAddress()+0x11e>
 800a7b4:	6803      	ldr	r3, [r0, #0]
 800a7b6:	f894 111a 	ldrb.w	r1, [r4, #282]	; 0x11a
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	4798      	blx	r3
 800a7be:	4620      	mov	r0, r4
 800a7c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7c4:	2101      	movs	r1, #1
 800a7c6:	f000 bc4b 	b.w	800b060 <ArtNetNode::SendPollRelply(bool)>
 800a7ca:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	2b03      	cmp	r3, #3
 800a7d2:	d8ed      	bhi.n	800a7b0 <ArtNetNode::HandleAddress()+0x110>
 800a7d4:	4b44      	ldr	r3, [pc, #272]	; (800a8e8 <ArtNetNode::HandleAddress()+0x248>)
 800a7d6:	f001 0103 	and.w	r1, r1, #3
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	440d      	add	r5, r1
 800a7de:	07d2      	lsls	r2, r2, #31
 800a7e0:	bf5c      	itt	pl
 800a7e2:	2201      	movpl	r2, #1
 800a7e4:	601a      	strpl	r2, [r3, #0]
 800a7e6:	f240 6204 	movw	r2, #1540	; 0x604
 800a7ea:	b2ed      	uxtb	r5, r5
 800a7ec:	436a      	muls	r2, r5
 800a7ee:	4b3f      	ldr	r3, [pc, #252]	; (800a8ec <ArtNetNode::HandleAddress()+0x24c>)
 800a7f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a7f4:	441a      	add	r2, r3
 800a7f6:	4611      	mov	r1, r2
 800a7f8:	2700      	movs	r7, #0
 800a7fa:	68a0      	ldr	r0, [r4, #8]
 800a7fc:	f502 7600 	add.w	r6, r2, #512	; 0x200
 800a800:	42b1      	cmp	r1, r6
 800a802:	d16d      	bne.n	800a8e0 <ArtNetNode::HandleAddress()+0x240>
 800a804:	f240 6104 	movw	r1, #1540	; 0x604
 800a808:	fb01 3105 	mla	r1, r1, r5, r3
 800a80c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a810:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800a814:	6801      	ldr	r1, [r0, #0]
 800a816:	690e      	ldr	r6, [r1, #16]
 800a818:	4629      	mov	r1, r5
 800a81a:	47b0      	blx	r6
 800a81c:	2d1f      	cmp	r5, #31
 800a81e:	d8c7      	bhi.n	800a7b0 <ArtNetNode::HandleAddress()+0x110>
 800a820:	2624      	movs	r6, #36	; 0x24
 800a822:	fb06 4605 	mla	r6, r6, r5, r4
 800a826:	f8d6 3710 	ldr.w	r3, [r6, #1808]	; 0x710
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1c0      	bne.n	800a7b0 <ArtNetNode::HandleAddress()+0x110>
 800a82e:	f896 3715 	ldrb.w	r3, [r6, #1813]	; 0x715
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1bc      	bne.n	800a7b0 <ArtNetNode::HandleAddress()+0x110>
 800a836:	68a0      	ldr	r0, [r4, #8]
 800a838:	4629      	mov	r1, r5
 800a83a:	6803      	ldr	r3, [r0, #0]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	4798      	blx	r3
 800a840:	2301      	movs	r3, #1
 800a842:	f886 3715 	strb.w	r3, [r6, #1813]	; 0x715
 800a846:	f896 36f7 	ldrb.w	r3, [r6, #1783]	; 0x6f7
 800a84a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a84e:	f886 36f7 	strb.w	r3, [r6, #1783]	; 0x6f7
 800a852:	e7ad      	b.n	800a7b0 <ArtNetNode::HandleAddress()+0x110>
 800a854:	2300      	movs	r3, #0
 800a856:	2224      	movs	r2, #36	; 0x24
 800a858:	f884 36ea 	strb.w	r3, [r4, #1770]	; 0x6ea
 800a85c:	7823      	ldrb	r3, [r4, #0]
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	fb02 4303 	mla	r3, r2, r3, r4
 800a864:	429f      	cmp	r7, r3
 800a866:	d0a3      	beq.n	800a7b0 <ArtNetNode::HandleAddress()+0x110>
 800a868:	f897 26f7 	ldrb.w	r2, [r7, #1783]	; 0x6f7
 800a86c:	3724      	adds	r7, #36	; 0x24
 800a86e:	f022 0208 	bic.w	r2, r2, #8
 800a872:	f887 26d3 	strb.w	r2, [r7, #1747]	; 0x6d3
 800a876:	e7f5      	b.n	800a864 <ArtNetNode::HandleAddress()+0x1c4>
 800a878:	4b1d      	ldr	r3, [pc, #116]	; (800a8f0 <ArtNetNode::HandleAddress()+0x250>)
 800a87a:	2102      	movs	r1, #2
 800a87c:	6818      	ldr	r0, [r3, #0]
 800a87e:	f00a ffbb 	bl	80157f8 <LedBlink::SetMode(ledblink::Mode)>
 800a882:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 800a886:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800a88a:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 800a88e:	e78f      	b.n	800a7b0 <ArtNetNode::HandleAddress()+0x110>
 800a890:	4b17      	ldr	r3, [pc, #92]	; (800a8f0 <ArtNetNode::HandleAddress()+0x250>)
 800a892:	2100      	movs	r1, #0
 800a894:	6818      	ldr	r0, [r3, #0]
 800a896:	f00a ffaf 	bl	80157f8 <LedBlink::SetMode(ledblink::Mode)>
 800a89a:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 800a89e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8a6:	e7f0      	b.n	800a88a <ArtNetNode::HandleAddress()+0x1ea>
 800a8a8:	4b11      	ldr	r3, [pc, #68]	; (800a8f0 <ArtNetNode::HandleAddress()+0x250>)
 800a8aa:	2104      	movs	r1, #4
 800a8ac:	6818      	ldr	r0, [r3, #0]
 800a8ae:	f00a ffa3 	bl	80157f8 <LedBlink::SetMode(ledblink::Mode)>
 800a8b2:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 800a8b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8be:	e7e4      	b.n	800a88a <ArtNetNode::HandleAddress()+0x1ea>
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f001 0103 	and.w	r1, r1, #3
 800a8c8:	f7ff feb8 	bl	800a63c <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800a8cc:	e770      	b.n	800a7b0 <ArtNetNode::HandleAddress()+0x110>
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f001 0103 	and.w	r1, r1, #3
 800a8d6:	f7ff fe80 	bl	800a5da <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800a8da:	e769      	b.n	800a7b0 <ArtNetNode::HandleAddress()+0x110>
 800a8dc:	2201      	movs	r2, #1
 800a8de:	e7f7      	b.n	800a8d0 <ArtNetNode::HandleAddress()+0x230>
 800a8e0:	f801 7b01 	strb.w	r7, [r1], #1
 800a8e4:	e78c      	b.n	800a800 <ArtNetNode::HandleAddress()+0x160>
 800a8e6:	bf00      	nop
 800a8e8:	200000ec 	andcs	r0, r0, ip, ror #1
 800a8ec:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800a8f0:	2001ce48 	andcs	ip, r1, r8, asr #28

0800a8f4 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 800a8f4:	f240 6304 	movw	r3, #1540	; 0x604
 800a8f8:	fb03 0001 	mla	r0, r3, r1, r0
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	b510      	push	{r4, lr}
 800a900:	4293      	cmp	r3, r2
 800a902:	d100      	bne.n	800a906 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x12>
 800a904:	bd10      	pop	{r4, pc}
 800a906:	f810 4b01 	ldrb.w	r4, [r0], #1
 800a90a:	3301      	adds	r3, #1
 800a90c:	f890 11ff 	ldrb.w	r1, [r0, #511]	; 0x1ff
 800a910:	42a1      	cmp	r1, r4
 800a912:	bf38      	it	cc
 800a914:	4621      	movcc	r1, r4
 800a916:	f880 13ff 	strb.w	r1, [r0, #1023]	; 0x3ff
 800a91a:	e7f1      	b.n	800a900 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>

0800a91c <memcpy.isra.0>:
 800a91c:	3801      	subs	r0, #1
 800a91e:	440a      	add	r2, r1
 800a920:	4291      	cmp	r1, r2
 800a922:	d100      	bne.n	800a926 <memcpy.isra.0+0xa>
 800a924:	4770      	bx	lr
 800a926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a92a:	f800 3f01 	strb.w	r3, [r0, #1]!
 800a92e:	e7f7      	b.n	800a920 <memcpy.isra.0+0x4>

0800a930 <lightset::Data::Get()>:
 800a930:	4b03      	ldr	r3, [pc, #12]	; (800a940 <lightset::Data::Get()+0x10>)
 800a932:	4804      	ldr	r0, [pc, #16]	; (800a944 <lightset::Data::Get()+0x14>)
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	07d2      	lsls	r2, r2, #31
 800a938:	bf5c      	itt	pl
 800a93a:	2201      	movpl	r2, #1
 800a93c:	601a      	strpl	r2, [r3, #0]
 800a93e:	4770      	bx	lr
 800a940:	200000ec 	andcs	r0, r0, ip, ror #1
 800a944:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

0800a948 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 800a948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a94c:	4615      	mov	r5, r2
 800a94e:	460f      	mov	r7, r1
 800a950:	4604      	mov	r4, r0
 800a952:	f7ff ffed 	bl	800a930 <lightset::Data::Get()>
 800a956:	f240 6304 	movw	r3, #1540	; 0x604
 800a95a:	4606      	mov	r6, r0
 800a95c:	435c      	muls	r4, r3
 800a95e:	eb00 0804 	add.w	r8, r0, r4
 800a962:	462a      	mov	r2, r5
 800a964:	4639      	mov	r1, r7
 800a966:	4640      	mov	r0, r8
 800a968:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a96c:	f7ff ffd6 	bl	800a91c <memcpy.isra.0>
 800a970:	462a      	mov	r2, r5
 800a972:	4639      	mov	r1, r7
 800a974:	f8c8 5600 	str.w	r5, [r8, #1536]	; 0x600
 800a978:	1930      	adds	r0, r6, r4
 800a97a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a97e:	f7ff bfcd 	b.w	800a91c <memcpy.isra.0>

0800a982 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800a982:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a986:	4680      	mov	r8, r0
 800a988:	f240 6404 	movw	r4, #1540	; 0x604
 800a98c:	4615      	mov	r5, r2
 800a98e:	460f      	mov	r7, r1
 800a990:	4699      	mov	r9, r3
 800a992:	f7ff ffcd 	bl	800a930 <lightset::Data::Get()>
 800a996:	fb04 f408 	mul.w	r4, r4, r8
 800a99a:	eb00 0a04 	add.w	sl, r0, r4
 800a99e:	4606      	mov	r6, r0
 800a9a0:	462a      	mov	r2, r5
 800a9a2:	4639      	mov	r1, r7
 800a9a4:	4650      	mov	r0, sl
 800a9a6:	f7ff ffb9 	bl	800a91c <memcpy.isra.0>
 800a9aa:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
 800a9ae:	f1b9 0f00 	cmp.w	r9, #0
 800a9b2:	d106      	bne.n	800a9c2 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x40>
 800a9b4:	462a      	mov	r2, r5
 800a9b6:	4641      	mov	r1, r8
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9be:	f7ff bf99 	b.w	800a8f4 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800a9c2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a9c6:	462a      	mov	r2, r5
 800a9c8:	4639      	mov	r1, r7
 800a9ca:	1930      	adds	r0, r6, r4
 800a9cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d0:	f7ff bfa4 	b.w	800a91c <memcpy.isra.0>

0800a9d4 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800a9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9d8:	4616      	mov	r6, r2
 800a9da:	4699      	mov	r9, r3
 800a9dc:	4680      	mov	r8, r0
 800a9de:	460f      	mov	r7, r1
 800a9e0:	f7ff ffa6 	bl	800a930 <lightset::Data::Get()>
 800a9e4:	f240 6404 	movw	r4, #1540	; 0x604
 800a9e8:	4605      	mov	r5, r0
 800a9ea:	fb04 f408 	mul.w	r4, r4, r8
 800a9ee:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800a9f2:	4632      	mov	r2, r6
 800a9f4:	4639      	mov	r1, r7
 800a9f6:	4428      	add	r0, r5
 800a9f8:	f7ff ff90 	bl	800a91c <memcpy.isra.0>
 800a9fc:	192b      	adds	r3, r5, r4
 800a9fe:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
 800aa02:	f1b9 0f00 	cmp.w	r9, #0
 800aa06:	d106      	bne.n	800aa16 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 800aa08:	4632      	mov	r2, r6
 800aa0a:	4641      	mov	r1, r8
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa12:	f7ff bf6f 	b.w	800a8f4 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800aa16:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800aa1a:	4632      	mov	r2, r6
 800aa1c:	4639      	mov	r1, r7
 800aa1e:	1928      	adds	r0, r5, r4
 800aa20:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa24:	f7ff bf7a 	b.w	800a91c <memcpy.isra.0>

0800aa28 <ArtNetNode::UpdateMergeStatus(unsigned int)>:
 800aa28:	f890 36ea 	ldrb.w	r3, [r0, #1770]	; 0x6ea
 800aa2c:	b91b      	cbnz	r3, 800aa36 <ArtNetNode::UpdateMergeStatus(unsigned int)+0xe>
 800aa2e:	f240 1301 	movw	r3, #257	; 0x101
 800aa32:	f8a0 36ea 	strh.w	r3, [r0, #1770]	; 0x6ea
 800aa36:	2324      	movs	r3, #36	; 0x24
 800aa38:	fb03 0001 	mla	r0, r3, r1, r0
 800aa3c:	f890 36f7 	ldrb.w	r3, [r0, #1783]	; 0x6f7
 800aa40:	f043 0308 	orr.w	r3, r3, #8
 800aa44:	f880 36f7 	strb.w	r3, [r0, #1783]	; 0x6f7
 800aa48:	4770      	bx	lr

0800aa4a <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
 800aa4a:	2324      	movs	r3, #36	; 0x24
 800aa4c:	b530      	push	{r4, r5, lr}
 800aa4e:	f242 7510 	movw	r5, #10000	; 0x2710
 800aa52:	fb03 0301 	mla	r3, r3, r1, r0
 800aa56:	f8d0 2674 	ldr.w	r2, [r0, #1652]	; 0x674
 800aa5a:	f8d3 46fc 	ldr.w	r4, [r3, #1788]	; 0x6fc
 800aa5e:	1b14      	subs	r4, r2, r4
 800aa60:	42ac      	cmp	r4, r5
 800aa62:	d908      	bls.n	800aa76 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x2c>
 800aa64:	2400      	movs	r4, #0
 800aa66:	f8c3 4700 	str.w	r4, [r3, #1792]	; 0x700
 800aa6a:	f893 46f7 	ldrb.w	r4, [r3, #1783]	; 0x6f7
 800aa6e:	f024 0408 	bic.w	r4, r4, #8
 800aa72:	f883 46f7 	strb.w	r4, [r3, #1783]	; 0x6f7
 800aa76:	2324      	movs	r3, #36	; 0x24
 800aa78:	fb03 0101 	mla	r1, r3, r1, r0
 800aa7c:	f8d1 3704 	ldr.w	r3, [r1, #1796]	; 0x704
 800aa80:	1ad2      	subs	r2, r2, r3
 800aa82:	f242 7310 	movw	r3, #10000	; 0x2710
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d908      	bls.n	800aa9c <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x52>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
 800aa90:	f891 36f7 	ldrb.w	r3, [r1, #1783]	; 0x6f7
 800aa94:	f023 0308 	bic.w	r3, r3, #8
 800aa98:	f881 36f7 	strb.w	r3, [r1, #1783]	; 0x6f7
 800aa9c:	2124      	movs	r1, #36	; 0x24
 800aa9e:	7803      	ldrb	r3, [r0, #0]
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	fb01 0303 	mla	r3, r1, r3, r0
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d105      	bne.n	800aaba <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x70>
 800aaae:	b919      	cbnz	r1, 800aab8 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x6e>
 800aab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aab4:	f8a0 36ea 	strh.w	r3, [r0, #1770]	; 0x6ea
 800aab8:	bd30      	pop	{r4, r5, pc}
 800aaba:	f892 46f7 	ldrb.w	r4, [r2, #1783]	; 0x6f7
 800aabe:	3224      	adds	r2, #36	; 0x24
 800aac0:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 800aac4:	4321      	orrs	r1, r4
 800aac6:	e7f0      	b.n	800aaaa <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x60>

0800aac8 <ArtNetNode::HandleDmx()>:
 800aac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aacc:	f8b0 70c0 	ldrh.w	r7, [r0, #192]	; 0xc0
 800aad0:	4604      	mov	r4, r0
 800aad2:	ba7f      	rev16	r7, r7
 800aad4:	b2bf      	uxth	r7, r7
 800aad6:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800aada:	bf28      	it	cs
 800aadc:	f44f 7700 	movcs.w	r7, #512	; 0x200
 800aae0:	4605      	mov	r5, r0
 800aae2:	2600      	movs	r6, #0
 800aae4:	f04f 0901 	mov.w	r9, #1
 800aae8:	f100 08c2 	add.w	r8, r0, #194	; 0xc2
 800aaec:	7823      	ldrb	r3, [r4, #0]
 800aaee:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 800aaf2:	f080 809f 	bcs.w	800ac34 <ArtNetNode::HandleDmx()+0x16c>
 800aaf6:	f895 36f8 	ldrb.w	r3, [r5, #1784]	; 0x6f8
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d056      	beq.n	800abac <ArtNetNode::HandleDmx()+0xe4>
 800aafe:	f8d5 3710 	ldr.w	r3, [r5, #1808]	; 0x710
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d152      	bne.n	800abac <ArtNetNode::HandleDmx()+0xe4>
 800ab06:	f8b4 20be 	ldrh.w	r2, [r4, #190]	; 0xbe
 800ab0a:	f8b5 36f4 	ldrh.w	r3, [r5, #1780]	; 0x6f4
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d14c      	bne.n	800abac <ArtNetNode::HandleDmx()+0xe4>
 800ab12:	f895 36f7 	ldrb.w	r3, [r5, #1783]	; 0x6f7
 800ab16:	f8d5 b700 	ldr.w	fp, [r5, #1792]	; 0x700
 800ab1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab1e:	f885 36f7 	strb.w	r3, [r5, #1783]	; 0x6f7
 800ab22:	f894 36ea 	ldrb.w	r3, [r4, #1770]	; 0x6ea
 800ab26:	f8d5 a708 	ldr.w	sl, [r5, #1800]	; 0x708
 800ab2a:	b133      	cbz	r3, 800ab3a <ArtNetNode::HandleDmx()+0x72>
 800ab2c:	f894 36ec 	ldrb.w	r3, [r4, #1772]	; 0x6ec
 800ab30:	b91b      	cbnz	r3, 800ab3a <ArtNetNode::HandleDmx()+0x72>
 800ab32:	4631      	mov	r1, r6
 800ab34:	4620      	mov	r0, r4
 800ab36:	f7ff ff88 	bl	800aa4a <ArtNetNode::CheckMergeTimeouts(unsigned int)>
 800ab3a:	ea5b 020a 	orrs.w	r2, fp, sl
 800ab3e:	f8d4 357c 	ldr.w	r3, [r4, #1404]	; 0x57c
 800ab42:	d136      	bne.n	800abb2 <ArtNetNode::HandleDmx()+0xea>
 800ab44:	f8c5 3700 	str.w	r3, [r5, #1792]	; 0x700
 800ab48:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
 800ab4c:	463a      	mov	r2, r7
 800ab4e:	4641      	mov	r1, r8
 800ab50:	4630      	mov	r0, r6
 800ab52:	f8c5 36fc 	str.w	r3, [r5, #1788]	; 0x6fc
 800ab56:	f7ff fef7 	bl	800a948 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800ab5a:	f894 36e9 	ldrb.w	r3, [r4, #1769]	; 0x6e9
 800ab5e:	b9fb      	cbnz	r3, 800aba0 <ArtNetNode::HandleDmx()+0xd8>
 800ab60:	f8d4 a008 	ldr.w	sl, [r4, #8]
 800ab64:	f7ff fee4 	bl	800a930 <lightset::Data::Get()>
 800ab68:	f240 6304 	movw	r3, #1540	; 0x604
 800ab6c:	4373      	muls	r3, r6
 800ab6e:	18c2      	adds	r2, r0, r3
 800ab70:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 800ab74:	f8da 3000 	ldr.w	r3, [sl]
 800ab78:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800ab7c:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800ab80:	1842      	adds	r2, r0, r1
 800ab82:	4631      	mov	r1, r6
 800ab84:	4650      	mov	r0, sl
 800ab86:	47d8      	blx	fp
 800ab88:	f895 3715 	ldrb.w	r3, [r5, #1813]	; 0x715
 800ab8c:	b943      	cbnz	r3, 800aba0 <ArtNetNode::HandleDmx()+0xd8>
 800ab8e:	68a0      	ldr	r0, [r4, #8]
 800ab90:	4631      	mov	r1, r6
 800ab92:	6803      	ldr	r3, [r0, #0]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	4798      	blx	r3
 800ab98:	f884 96eb 	strb.w	r9, [r4, #1771]	; 0x6eb
 800ab9c:	f885 9715 	strb.w	r9, [r5, #1813]	; 0x715
 800aba0:	f894 36ed 	ldrb.w	r3, [r4, #1773]	; 0x6ed
 800aba4:	f043 0302 	orr.w	r3, r3, #2
 800aba8:	f884 36ed 	strb.w	r3, [r4, #1773]	; 0x6ed
 800abac:	3601      	adds	r6, #1
 800abae:	3524      	adds	r5, #36	; 0x24
 800abb0:	e79c      	b.n	800aaec <ArtNetNode::HandleDmx()+0x24>
 800abb2:	459b      	cmp	fp, r3
 800abb4:	d104      	bne.n	800abc0 <ArtNetNode::HandleDmx()+0xf8>
 800abb6:	f1ba 0f00 	cmp.w	sl, #0
 800abba:	d0c5      	beq.n	800ab48 <ArtNetNode::HandleDmx()+0x80>
 800abbc:	b11b      	cbz	r3, 800abc6 <ArtNetNode::HandleDmx()+0xfe>
 800abbe:	e037      	b.n	800ac30 <ArtNetNode::HandleDmx()+0x168>
 800abc0:	f1bb 0f00 	cmp.w	fp, #0
 800abc4:	d132      	bne.n	800ac2c <ArtNetNode::HandleDmx()+0x164>
 800abc6:	459a      	cmp	sl, r3
 800abc8:	d11d      	bne.n	800ac06 <ArtNetNode::HandleDmx()+0x13e>
 800abca:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
 800abce:	f8c5 3704 	str.w	r3, [r5, #1796]	; 0x704
 800abd2:	f7ff fead 	bl	800a930 <lightset::Data::Get()>
 800abd6:	f240 6304 	movw	r3, #1540	; 0x604
 800abda:	4683      	mov	fp, r0
 800abdc:	fb03 fa06 	mul.w	sl, r3, r6
 800abe0:	f50a 7000 	add.w	r0, sl, #512	; 0x200
 800abe4:	463a      	mov	r2, r7
 800abe6:	4641      	mov	r1, r8
 800abe8:	4458      	add	r0, fp
 800abea:	f7ff fe97 	bl	800a91c <memcpy.isra.0>
 800abee:	eb0b 030a 	add.w	r3, fp, sl
 800abf2:	f50a 6080 	add.w	r0, sl, #1024	; 0x400
 800abf6:	463a      	mov	r2, r7
 800abf8:	4641      	mov	r1, r8
 800abfa:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800abfe:	4458      	add	r0, fp
 800ac00:	f7ff fe8c 	bl	800a91c <memcpy.isra.0>
 800ac04:	e7a9      	b.n	800ab5a <ArtNetNode::HandleDmx()+0x92>
 800ac06:	b9bb      	cbnz	r3, 800ac38 <ArtNetNode::HandleDmx()+0x170>
 800ac08:	f8c5 3700 	str.w	r3, [r5, #1792]	; 0x700
 800ac0c:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
 800ac10:	4631      	mov	r1, r6
 800ac12:	4620      	mov	r0, r4
 800ac14:	f8c5 36fc 	str.w	r3, [r5, #1788]	; 0x6fc
 800ac18:	f7ff ff06 	bl	800aa28 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800ac1c:	463a      	mov	r2, r7
 800ac1e:	4641      	mov	r1, r8
 800ac20:	4630      	mov	r0, r6
 800ac22:	f8d5 370c 	ldr.w	r3, [r5, #1804]	; 0x70c
 800ac26:	f7ff feac 	bl	800a982 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800ac2a:	e796      	b.n	800ab5a <ArtNetNode::HandleDmx()+0x92>
 800ac2c:	459b      	cmp	fp, r3
 800ac2e:	d118      	bne.n	800ac62 <ArtNetNode::HandleDmx()+0x19a>
 800ac30:	459a      	cmp	sl, r3
 800ac32:	d1eb      	bne.n	800ac0c <ArtNetNode::HandleDmx()+0x144>
 800ac34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac38:	f1ba 0f00 	cmp.w	sl, #0
 800ac3c:	d1e4      	bne.n	800ac08 <ArtNetNode::HandleDmx()+0x140>
 800ac3e:	f8c5 3708 	str.w	r3, [r5, #1800]	; 0x708
 800ac42:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
 800ac46:	4631      	mov	r1, r6
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f8c5 3704 	str.w	r3, [r5, #1796]	; 0x704
 800ac4e:	f7ff feeb 	bl	800aa28 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800ac52:	463a      	mov	r2, r7
 800ac54:	4641      	mov	r1, r8
 800ac56:	4630      	mov	r0, r6
 800ac58:	f8d5 370c 	ldr.w	r3, [r5, #1804]	; 0x70c
 800ac5c:	f7ff feba 	bl	800a9d4 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800ac60:	e77b      	b.n	800ab5a <ArtNetNode::HandleDmx()+0x92>
 800ac62:	f1ba 0f00 	cmp.w	sl, #0
 800ac66:	d0ea      	beq.n	800ac3e <ArtNetNode::HandleDmx()+0x176>
 800ac68:	459a      	cmp	sl, r3
 800ac6a:	d0ea      	beq.n	800ac42 <ArtNetNode::HandleDmx()+0x17a>
 800ac6c:	e7e2      	b.n	800ac34 <ArtNetNode::HandleDmx()+0x16c>
	...

0800ac70 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>:
 800ac70:	291f      	cmp	r1, #31
 800ac72:	b510      	push	{r4, lr}
 800ac74:	d80f      	bhi.n	800ac96 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x26>
 800ac76:	4b08      	ldr	r3, [pc, #32]	; (800ac98 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x28>)
 800ac78:	0109      	lsls	r1, r1, #4
 800ac7a:	681c      	ldr	r4, [r3, #0]
 800ac7c:	6923      	ldr	r3, [r4, #16]
 800ac7e:	69a4      	ldr	r4, [r4, #24]
 800ac80:	4053      	eors	r3, r2
 800ac82:	4223      	tst	r3, r4
 800ac84:	bf15      	itete	ne
 800ac86:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
 800ac88:	1840      	addeq	r0, r0, r1
 800ac8a:	1809      	addne	r1, r1, r0
 800ac8c:	f8c0 2b7c 	streq.w	r2, [r0, #2940]	; 0xb7c
 800ac90:	bf18      	it	ne
 800ac92:	f8c1 3b7c 	strne.w	r3, [r1, #2940]	; 0xb7c
 800ac96:	bd10      	pop	{r4, pc}
 800ac98:	2001c724 	andcs	ip, r1, r4, lsr #14

0800ac9c <ArtNetNode::HandleDmxIn()>:
 800ac9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aca0:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800aca4:	aa05      	add	r2, sp, #20
 800aca6:	4605      	mov	r5, r0
 800aca8:	2308      	movs	r3, #8
 800acaa:	4617      	mov	r7, r2
 800acac:	493f      	ldr	r1, [pc, #252]	; (800adac <ArtNetNode::HandleDmxIn()+0x110>)
 800acae:	3b01      	subs	r3, #1
 800acb0:	d256      	bcs.n	800ad60 <ArtNetNode::HandleDmxIn()+0xc4>
 800acb2:	462c      	mov	r4, r5
 800acb4:	2600      	movs	r6, #0
 800acb6:	4b3e      	ldr	r3, [pc, #248]	; (800adb0 <ArtNetNode::HandleDmxIn()+0x114>)
 800acb8:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800adb4 <ArtNetNode::HandleDmxIn()+0x118>
 800acbc:	60bb      	str	r3, [r7, #8]
 800acbe:	f894 3b78 	ldrb.w	r3, [r4, #2936]	; 0xb78
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d043      	beq.n	800ad4e <ArtNetNode::HandleDmxIn()+0xb2>
 800acc6:	6968      	ldr	r0, [r5, #20]
 800acc8:	4631      	mov	r1, r6
 800acca:	6803      	ldr	r3, [r0, #0]
 800accc:	aa03      	add	r2, sp, #12
 800acce:	f8d3 9010 	ldr.w	r9, [r3, #16]
 800acd2:	ab04      	add	r3, sp, #16
 800acd4:	47c8      	blx	r9
 800acd6:	2800      	cmp	r0, #0
 800acd8:	d04c      	beq.n	800ad74 <ArtNetNode::HandleDmxIn()+0xd8>
 800acda:	f894 3b80 	ldrb.w	r3, [r4, #2944]	; 0xb80
 800acde:	737e      	strb	r6, [r7, #13]
 800ace0:	3301      	adds	r3, #1
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	f884 3b80 	strb.w	r3, [r4, #2944]	; 0xb80
 800ace8:	733b      	strb	r3, [r7, #12]
 800acea:	f8b4 3b74 	ldrh.w	r3, [r4, #2932]	; 0xb74
 800acee:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800acf2:	81fb      	strh	r3, [r7, #14]
 800acf4:	9b03      	ldr	r3, [sp, #12]
 800acf6:	18c1      	adds	r1, r0, r3
 800acf8:	4288      	cmp	r0, r1
 800acfa:	d136      	bne.n	800ad6a <ArtNetNode::HandleDmxIn()+0xce>
 800acfc:	07da      	lsls	r2, r3, #31
 800acfe:	d504      	bpl.n	800ad0a <ArtNetNode::HandleDmxIn()+0x6e>
 800ad00:	2100      	movs	r1, #0
 800ad02:	18fa      	adds	r2, r7, r3
 800ad04:	3301      	adds	r3, #1
 800ad06:	7491      	strb	r1, [r2, #18]
 800ad08:	9303      	str	r3, [sp, #12]
 800ad0a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ad0e:	f240 2212 	movw	r2, #530	; 0x212
 800ad12:	ba5b      	rev16	r3, r3
 800ad14:	823b      	strh	r3, [r7, #16]
 800ad16:	2380      	movs	r3, #128	; 0x80
 800ad18:	f884 3b77 	strb.w	r3, [r4, #2935]	; 0xb77
 800ad1c:	f641 1336 	movw	r3, #6454	; 0x1936
 800ad20:	9300      	str	r3, [sp, #0]
 800ad22:	4639      	mov	r1, r7
 800ad24:	f8d4 3b7c 	ldr.w	r3, [r4, #2940]	; 0xb7c
 800ad28:	7928      	ldrb	r0, [r5, #4]
 800ad2a:	f007 fc37 	bl	801259c <udp_send>
 800ad2e:	2301      	movs	r3, #1
 800ad30:	f8d8 2000 	ldr.w	r2, [r8]
 800ad34:	40b3      	lsls	r3, r6
 800ad36:	ea33 0102 	bics.w	r1, r3, r2
 800ad3a:	d008      	beq.n	800ad4e <ArtNetNode::HandleDmxIn()+0xb2>
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	f8c8 3000 	str.w	r3, [r8]
 800ad42:	f895 36ed 	ldrb.w	r3, [r5, #1773]	; 0x6ed
 800ad46:	f043 0301 	orr.w	r3, r3, #1
 800ad4a:	f885 36ed 	strb.w	r3, [r5, #1773]	; 0x6ed
 800ad4e:	3601      	adds	r6, #1
 800ad50:	2e04      	cmp	r6, #4
 800ad52:	f104 0410 	add.w	r4, r4, #16
 800ad56:	d1b2      	bne.n	800acbe <ArtNetNode::HandleDmxIn()+0x22>
 800ad58:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
 800ad5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad60:	f811 0b01 	ldrb.w	r0, [r1], #1
 800ad64:	f802 0b01 	strb.w	r0, [r2], #1
 800ad68:	e7a1      	b.n	800acae <ArtNetNode::HandleDmxIn()+0x12>
 800ad6a:	f810 cb01 	ldrb.w	ip, [r0], #1
 800ad6e:	f802 cb01 	strb.w	ip, [r2], #1
 800ad72:	e7c1      	b.n	800acf8 <ArtNetNode::HandleDmxIn()+0x5c>
 800ad74:	f994 2b77 	ldrsb.w	r2, [r4, #2935]	; 0xb77
 800ad78:	f894 3b77 	ldrb.w	r3, [r4, #2935]	; 0xb77
 800ad7c:	2a00      	cmp	r2, #0
 800ad7e:	dae6      	bge.n	800ad4e <ArtNetNode::HandleDmxIn()+0xb2>
 800ad80:	9a04      	ldr	r2, [sp, #16]
 800ad82:	2a00      	cmp	r2, #0
 800ad84:	d1e3      	bne.n	800ad4e <ArtNetNode::HandleDmxIn()+0xb2>
 800ad86:	2201      	movs	r2, #1
 800ad88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad8c:	f884 3b77 	strb.w	r3, [r4, #2935]	; 0xb77
 800ad90:	f8d8 3000 	ldr.w	r3, [r8]
 800ad94:	40b2      	lsls	r2, r6
 800ad96:	ea23 0302 	bic.w	r3, r3, r2
 800ad9a:	f8c8 3000 	str.w	r3, [r8]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1d5      	bne.n	800ad4e <ArtNetNode::HandleDmxIn()+0xb2>
 800ada2:	f895 36ed 	ldrb.w	r3, [r5, #1773]	; 0x6ed
 800ada6:	f023 0301 	bic.w	r3, r3, #1
 800adaa:	e7ce      	b.n	800ad4a <ArtNetNode::HandleDmxIn()+0xae>
 800adac:	08017fc5 	stmdaeq	r1, {r0, r2, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 800adb0:	0e005000 	cdpeq	0, 0, cr5, cr0, cr0, {0}
 800adb4:	2000c174 	andcs	ip, r0, r4, ror r1

0800adb8 <memcmp.constprop.0>:
 800adb8:	b510      	push	{r4, lr}
 800adba:	4907      	ldr	r1, [pc, #28]	; (800add8 <memcmp.constprop.0+0x20>)
 800adbc:	1e42      	subs	r2, r0, #1
 800adbe:	3003      	adds	r0, #3
 800adc0:	4282      	cmp	r2, r0
 800adc2:	d101      	bne.n	800adc8 <memcmp.constprop.0+0x10>
 800adc4:	2000      	movs	r0, #0
 800adc6:	e006      	b.n	800add6 <memcmp.constprop.0+0x1e>
 800adc8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800adcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800add0:	42a3      	cmp	r3, r4
 800add2:	d0f5      	beq.n	800adc0 <memcmp.constprop.0+0x8>
 800add4:	1b18      	subs	r0, r3, r4
 800add6:	bd10      	pop	{r4, pc}
 800add8:	2000c178 	andcs	ip, r0, r8, ror r1

0800addc <memcpy.constprop.0.isra.0>:
 800addc:	3801      	subs	r0, #1
 800adde:	1d0b      	adds	r3, r1, #4
 800ade0:	4299      	cmp	r1, r3
 800ade2:	d100      	bne.n	800ade6 <memcpy.constprop.0.isra.0+0xa>
 800ade4:	4770      	bx	lr
 800ade6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adea:	f800 2f01 	strb.w	r2, [r0, #1]!
 800adee:	e7f7      	b.n	800ade0 <memcpy.constprop.0.isra.0+0x4>

0800adf0 <ArtNetNode::HandleIpProg()>:
 800adf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf4:	f100 03b0 	add.w	r3, r0, #176	; 0xb0
 800adf8:	b085      	sub	sp, #20
 800adfa:	4604      	mov	r4, r0
 800adfc:	9303      	str	r3, [sp, #12]
 800adfe:	2300      	movs	r3, #0
 800ae00:	4d57      	ldr	r5, [pc, #348]	; (800af60 <ArtNetNode::HandleIpProg()+0x170>)
 800ae02:	f890 70be 	ldrb.w	r7, [r0, #190]	; 0xbe
 800ae06:	6828      	ldr	r0, [r5, #0]
 800ae08:	f890 b001 	ldrb.w	fp, [r0, #1]
 800ae0c:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
 800ae10:	f06f 0306 	mvn.w	r3, #6
 800ae14:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
 800ae18:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
 800ae1c:	2bc0      	cmp	r3, #192	; 0xc0
 800ae1e:	d101      	bne.n	800ae24 <ArtNetNode::HandleIpProg()+0x34>
 800ae20:	f008 fa7a 	bl	8013318 <Network::EnableDhcp()>
 800ae24:	f007 0388 	and.w	r3, r7, #136	; 0x88
 800ae28:	2b88      	cmp	r3, #136	; 0x88
 800ae2a:	d103      	bne.n	800ae34 <ArtNetNode::HandleIpProg()+0x44>
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	6828      	ldr	r0, [r5, #0]
 800ae30:	f008 f9d6 	bl	80131e0 <Network::SetIp(unsigned int)>
 800ae34:	f007 0384 	and.w	r3, r7, #132	; 0x84
 800ae38:	2b84      	cmp	r3, #132	; 0x84
 800ae3a:	4e4a      	ldr	r6, [pc, #296]	; (800af64 <ArtNetNode::HandleIpProg()+0x174>)
 800ae3c:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
 800ae40:	d107      	bne.n	800ae52 <ArtNetNode::HandleIpProg()+0x62>
 800ae42:	4641      	mov	r1, r8
 800ae44:	4630      	mov	r0, r6
 800ae46:	f7ff ffc9 	bl	800addc <memcpy.constprop.0.isra.0>
 800ae4a:	6831      	ldr	r1, [r6, #0]
 800ae4c:	6828      	ldr	r0, [r5, #0]
 800ae4e:	f008 f9c7 	bl	80131e0 <Network::SetIp(unsigned int)>
 800ae52:	f007 0382 	and.w	r3, r7, #130	; 0x82
 800ae56:	2b82      	cmp	r3, #130	; 0x82
 800ae58:	f104 09c4 	add.w	r9, r4, #196	; 0xc4
 800ae5c:	d107      	bne.n	800ae6e <ArtNetNode::HandleIpProg()+0x7e>
 800ae5e:	4649      	mov	r1, r9
 800ae60:	4840      	ldr	r0, [pc, #256]	; (800af64 <ArtNetNode::HandleIpProg()+0x174>)
 800ae62:	f7ff ffbb 	bl	800addc <memcpy.constprop.0.isra.0>
 800ae66:	6831      	ldr	r1, [r6, #0]
 800ae68:	6828      	ldr	r0, [r5, #0]
 800ae6a:	f008 f9e7 	bl	801323c <Network::SetNetmask(unsigned int)>
 800ae6e:	f007 0790 	and.w	r7, r7, #144	; 0x90
 800ae72:	2f90      	cmp	r7, #144	; 0x90
 800ae74:	f104 0aca 	add.w	sl, r4, #202	; 0xca
 800ae78:	d107      	bne.n	800ae8a <ArtNetNode::HandleIpProg()+0x9a>
 800ae7a:	4651      	mov	r1, sl
 800ae7c:	4839      	ldr	r0, [pc, #228]	; (800af64 <ArtNetNode::HandleIpProg()+0x174>)
 800ae7e:	f7ff ffad 	bl	800addc <memcpy.constprop.0.isra.0>
 800ae82:	6831      	ldr	r1, [r6, #0]
 800ae84:	6828      	ldr	r0, [r5, #0]
 800ae86:	f008 f9ef 	bl	8013268 <Network::SetGatewayIp(unsigned int)>
 800ae8a:	6829      	ldr	r1, [r5, #0]
 800ae8c:	784a      	ldrb	r2, [r1, #1]
 800ae8e:	0192      	lsls	r2, r2, #6
 800ae90:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
 800ae94:	2200      	movs	r2, #0
 800ae96:	f884 20cb 	strb.w	r2, [r4, #203]	; 0xcb
 800ae9a:	7848      	ldrb	r0, [r1, #1]
 800ae9c:	6909      	ldr	r1, [r1, #16]
 800ae9e:	ea8b 0b00 	eor.w	fp, fp, r0
 800aea2:	4640      	mov	r0, r8
 800aea4:	6031      	str	r1, [r6, #0]
 800aea6:	f7ff ff87 	bl	800adb8 <memcmp.constprop.0>
 800aeaa:	492e      	ldr	r1, [pc, #184]	; (800af64 <ArtNetNode::HandleIpProg()+0x174>)
 800aeac:	4607      	mov	r7, r0
 800aeae:	4640      	mov	r0, r8
 800aeb0:	f7ff ff94 	bl	800addc <memcpy.constprop.0.isra.0>
 800aeb4:	6829      	ldr	r1, [r5, #0]
 800aeb6:	4648      	mov	r0, r9
 800aeb8:	6989      	ldr	r1, [r1, #24]
 800aeba:	6031      	str	r1, [r6, #0]
 800aebc:	f7ff ff7c 	bl	800adb8 <memcmp.constprop.0>
 800aec0:	4928      	ldr	r1, [pc, #160]	; (800af64 <ArtNetNode::HandleIpProg()+0x174>)
 800aec2:	9003      	str	r0, [sp, #12]
 800aec4:	4648      	mov	r0, r9
 800aec6:	f7ff ff89 	bl	800addc <memcpy.constprop.0.isra.0>
 800aeca:	6829      	ldr	r1, [r5, #0]
 800aecc:	4650      	mov	r0, sl
 800aece:	6949      	ldr	r1, [r1, #20]
 800aed0:	6031      	str	r1, [r6, #0]
 800aed2:	f7ff ff71 	bl	800adb8 <memcmp.constprop.0>
 800aed6:	9b03      	ldr	r3, [sp, #12]
 800aed8:	4922      	ldr	r1, [pc, #136]	; (800af64 <ArtNetNode::HandleIpProg()+0x174>)
 800aeda:	431f      	orrs	r7, r3
 800aedc:	4307      	orrs	r7, r0
 800aede:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 800aee2:	bf0c      	ite	eq
 800aee4:	465e      	moveq	r6, fp
 800aee6:	f04b 0601 	orrne.w	r6, fp, #1
 800aeea:	f7ff ff77 	bl	800addc <memcpy.constprop.0.isra.0>
 800aeee:	2200      	movs	r2, #0
 800aef0:	f641 1336 	movw	r3, #6454	; 0x1936
 800aef4:	f884 20d0 	strb.w	r2, [r4, #208]	; 0xd0
 800aef8:	f884 20d1 	strb.w	r2, [r4, #209]	; 0xd1
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	2222      	movs	r2, #34	; 0x22
 800af00:	f8d4 357c 	ldr.w	r3, [r4, #1404]	; 0x57c
 800af04:	7920      	ldrb	r0, [r4, #4]
 800af06:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 800af0a:	f007 fb47 	bl	801259c <udp_send>
 800af0e:	b31e      	cbz	r6, 800af58 <ArtNetNode::HandleIpProg()+0x168>
 800af10:	682a      	ldr	r2, [r5, #0]
 800af12:	f204 508e 	addw	r0, r4, #1422	; 0x58e
 800af16:	6913      	ldr	r3, [r2, #16]
 800af18:	62a3      	str	r3, [r4, #40]	; 0x28
 800af1a:	6991      	ldr	r1, [r2, #24]
 800af1c:	7852      	ldrb	r2, [r2, #1]
 800af1e:	ea63 0301 	orn	r3, r3, r1
 800af22:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af24:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 800af28:	4641      	mov	r1, r8
 800af2a:	f023 0302 	bic.w	r3, r3, #2
 800af2e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800af32:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 800af36:	f7ff ff51 	bl	800addc <memcpy.constprop.0.isra.0>
 800af3a:	4641      	mov	r1, r8
 800af3c:	f204 6053 	addw	r0, r4, #1619	; 0x653
 800af40:	f7ff ff4c 	bl	800addc <memcpy.constprop.0.isra.0>
 800af44:	f894 36e6 	ldrb.w	r3, [r4, #1766]	; 0x6e6
 800af48:	b133      	cbz	r3, 800af58 <ArtNetNode::HandleIpProg()+0x168>
 800af4a:	2101      	movs	r1, #1
 800af4c:	4620      	mov	r0, r4
 800af4e:	b005      	add	sp, #20
 800af50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af54:	f000 b884 	b.w	800b060 <ArtNetNode::SendPollRelply(bool)>
 800af58:	b005      	add	sp, #20
 800af5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af5e:	bf00      	nop
 800af60:	2001c724 	andcs	ip, r1, r4, lsr #14
 800af64:	2000c178 	andcs	ip, r0, r8, ror r1

0800af68 <memcpy.isra.0>:
 800af68:	3801      	subs	r0, #1
 800af6a:	440a      	add	r2, r1
 800af6c:	4291      	cmp	r1, r2
 800af6e:	d100      	bne.n	800af72 <memcpy.isra.0+0xa>
 800af70:	4770      	bx	lr
 800af72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af76:	f800 3f01 	strb.w	r3, [r0, #1]!
 800af7a:	e7f7      	b.n	800af6c <memcpy.isra.0+0x4>

0800af7c <ArtNetNode::FillPollReply()>:
 800af7c:	b538      	push	{r3, r4, r5, lr}
 800af7e:	4604      	mov	r4, r0
 800af80:	f200 5084 	addw	r0, r0, #1412	; 0x584
 800af84:	4603      	mov	r3, r0
 800af86:	2100      	movs	r1, #0
 800af88:	f204 6273 	addw	r2, r4, #1651	; 0x673
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d15c      	bne.n	800b04a <ArtNetNode::FillPollReply()+0xce>
 800af90:	2208      	movs	r2, #8
 800af92:	492f      	ldr	r1, [pc, #188]	; (800b050 <ArtNetNode::FillPollReply()+0xd4>)
 800af94:	f7ff ffe8 	bl	800af68 <memcpy.isra.0>
 800af98:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800af9c:	4d2d      	ldr	r5, [pc, #180]	; (800b054 <ArtNetNode::FillPollReply()+0xd8>)
 800af9e:	f8a4 358c 	strh.w	r3, [r4, #1420]	; 0x58c
 800afa2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800afa4:	4629      	mov	r1, r5
 800afa6:	f204 508e 	addw	r0, r4, #1422	; 0x58e
 800afaa:	2204      	movs	r2, #4
 800afac:	602b      	str	r3, [r5, #0]
 800afae:	f7ff ffdb 	bl	800af68 <memcpy.isra.0>
 800afb2:	f641 1336 	movw	r3, #6454	; 0x1936
 800afb6:	f8a4 3592 	strh.w	r3, [r4, #1426]	; 0x592
 800afba:	4b27      	ldr	r3, [pc, #156]	; (800b058 <ArtNetNode::FillPollReply()+0xdc>)
 800afbc:	f104 0150 	add.w	r1, r4, #80	; 0x50
 800afc0:	781a      	ldrb	r2, [r3, #0]
 800afc2:	f204 509e 	addw	r0, r4, #1438	; 0x59e
 800afc6:	f884 2594 	strb.w	r2, [r4, #1428]	; 0x594
 800afca:	785b      	ldrb	r3, [r3, #1]
 800afcc:	f884 3595 	strb.w	r3, [r4, #1429]	; 0x595
 800afd0:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 800afd4:	f8a4 3598 	strh.w	r3, [r4, #1432]	; 0x598
 800afd8:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 800afdc:	f884 359b 	strb.w	r3, [r4, #1435]	; 0x59b
 800afe0:	4b1e      	ldr	r3, [pc, #120]	; (800b05c <ArtNetNode::FillPollReply()+0xe0>)
 800afe2:	785a      	ldrb	r2, [r3, #1]
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	f884 259c 	strb.w	r2, [r4, #1436]	; 0x59c
 800afea:	f884 359d 	strb.w	r3, [r4, #1437]	; 0x59d
 800afee:	2212      	movs	r2, #18
 800aff0:	f7ff ffba 	bl	800af68 <memcpy.isra.0>
 800aff4:	f104 0162 	add.w	r1, r4, #98	; 0x62
 800aff8:	f504 60b6 	add.w	r0, r4, #1456	; 0x5b0
 800affc:	2240      	movs	r2, #64	; 0x40
 800affe:	f7ff ffb3 	bl	800af68 <memcpy.isra.0>
 800b002:	2300      	movs	r3, #0
 800b004:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800b008:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
 800b00c:	f204 604d 	addw	r0, r4, #1613	; 0x64d
 800b010:	2206      	movs	r2, #6
 800b012:	f7ff ffa9 	bl	800af68 <memcpy.isra.0>
 800b016:	4629      	mov	r1, r5
 800b018:	f204 6053 	addw	r0, r4, #1619	; 0x653
 800b01c:	2204      	movs	r2, #4
 800b01e:	f7ff ffa3 	bl	800af68 <memcpy.isra.0>
 800b022:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 800b026:	f104 01a6 	add.w	r1, r4, #166	; 0xa6
 800b02a:	f884 3658 	strb.w	r3, [r4, #1624]	; 0x658
 800b02e:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800b032:	f204 605e 	addw	r0, r4, #1630	; 0x65e
 800b036:	f884 365d 	strb.w	r3, [r4, #1629]	; 0x65d
 800b03a:	2304      	movs	r3, #4
 800b03c:	2206      	movs	r2, #6
 800b03e:	f884 3631 	strb.w	r3, [r4, #1585]	; 0x631
 800b042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b046:	f7ff bf8f 	b.w	800af68 <memcpy.isra.0>
 800b04a:	f803 1b01 	strb.w	r1, [r3], #1
 800b04e:	e79d      	b.n	800af8c <ArtNetNode::FillPollReply()+0x10>
 800b050:	08017fe0 	stmdaeq	r1, {r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 800b054:	2000c17c 	andcs	ip, r0, ip, ror r1
 800b058:	08018279 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, pc}
 800b05c:	08018277 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r9, pc}

0800b060 <ArtNetNode::SendPollRelply(bool)>:
 800b060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b064:	4604      	mov	r4, r0
 800b066:	b087      	sub	sp, #28
 800b068:	b941      	cbnz	r1, 800b07c <ArtNetNode::SendPollRelply(bool)+0x1c>
 800b06a:	f890 36e5 	ldrb.w	r3, [r0, #1765]	; 0x6e5
 800b06e:	2b02      	cmp	r3, #2
 800b070:	bf02      	ittt	eq
 800b072:	f8d0 36d0 	ldreq.w	r3, [r0, #1744]	; 0x6d0
 800b076:	3301      	addeq	r3, #1
 800b078:	f8c0 36d0 	streq.w	r3, [r0, #1744]	; 0x6d0
 800b07c:	2600      	movs	r6, #0
 800b07e:	f04f 0a24 	mov.w	sl, #36	; 0x24
 800b082:	4635      	mov	r5, r6
 800b084:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 800b088:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800b198 <ArtNetNode::SendPollRelply(bool)+0x138>
 800b08c:	f884 359b 	strb.w	r3, [r4, #1435]	; 0x59b
 800b090:	f104 093e 	add.w	r9, r4, #62	; 0x3e
 800b094:	7823      	ldrb	r3, [r4, #0]
 800b096:	42ab      	cmp	r3, r5
 800b098:	dc05      	bgt.n	800b0a6 <ArtNetNode::SendPollRelply(bool)+0x46>
 800b09a:	2300      	movs	r3, #0
 800b09c:	f884 36eb 	strb.w	r3, [r4, #1771]	; 0x6eb
 800b0a0:	b007      	add	sp, #28
 800b0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a6:	f04f 0800 	mov.w	r8, #0
 800b0aa:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b0ae:	3501      	adds	r5, #1
 800b0b0:	f884 3596 	strb.w	r3, [r4, #1430]	; 0x596
 800b0b4:	f899 3007 	ldrb.w	r3, [r9, #7]
 800b0b8:	b2f1      	uxtb	r1, r6
 800b0ba:	f884 3597 	strb.w	r3, [r4, #1431]	; 0x597
 800b0be:	1cf3      	adds	r3, r6, #3
 800b0c0:	f884 5657 	strb.w	r5, [r4, #1623]	; 0x657
 800b0c4:	9303      	str	r3, [sp, #12]
 800b0c6:	9b03      	ldr	r3, [sp, #12]
 800b0c8:	428b      	cmp	r3, r1
 800b0ca:	da1b      	bge.n	800b104 <ArtNetNode::SendPollRelply(bool)+0xa4>
 800b0cc:	f204 637f 	addw	r3, r4, #1663	; 0x67f
 800b0d0:	9301      	str	r3, [sp, #4]
 800b0d2:	f8d4 36d0 	ldr.w	r3, [r4, #1744]	; 0x6d0
 800b0d6:	465a      	mov	r2, fp
 800b0d8:	2140      	movs	r1, #64	; 0x40
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	f884 8631 	strb.w	r8, [r4, #1585]	; 0x631
 800b0e0:	f894 36e4 	ldrb.w	r3, [r4, #1764]	; 0x6e4
 800b0e4:	f504 60be 	add.w	r0, r4, #1520	; 0x5f0
 800b0e8:	f7fe fb60 	bl	80097ac <snprintf>
 800b0ec:	f641 1336 	movw	r3, #6454	; 0x1936
 800b0f0:	22ef      	movs	r2, #239	; 0xef
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	7920      	ldrb	r0, [r4, #4]
 800b0f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b0f8:	f204 5184 	addw	r1, r4, #1412	; 0x584
 800b0fc:	f007 fa4e 	bl	801259c <udp_send>
 800b100:	3604      	adds	r6, #4
 800b102:	e7c7      	b.n	800b094 <ArtNetNode::SendPollRelply(bool)+0x34>
 800b104:	fb0a 4301 	mla	r3, sl, r1, r4
 800b108:	69e0      	ldr	r0, [r4, #28]
 800b10a:	f893 76f7 	ldrb.w	r7, [r3, #1783]	; 0x6f7
 800b10e:	b1a8      	cbz	r0, 800b13c <ArtNetNode::SendPollRelply(bool)+0xdc>
 800b110:	f8d3 2710 	ldr.w	r2, [r3, #1808]	; 0x710
 800b114:	2a01      	cmp	r2, #1
 800b116:	d111      	bne.n	800b13c <ArtNetNode::SendPollRelply(bool)+0xdc>
 800b118:	6802      	ldr	r2, [r0, #0]
 800b11a:	9305      	str	r3, [sp, #20]
 800b11c:	9104      	str	r1, [sp, #16]
 800b11e:	6912      	ldr	r2, [r2, #16]
 800b120:	4790      	blx	r2
 800b122:	f007 0776 	and.w	r7, r7, #118	; 0x76
 800b126:	f000 0089 	and.w	r0, r0, #137	; 0x89
 800b12a:	4307      	orrs	r7, r0
 800b12c:	f010 0001 	ands.w	r0, r0, #1
 800b130:	bf08      	it	eq
 800b132:	9b05      	ldreq	r3, [sp, #20]
 800b134:	9904      	ldr	r1, [sp, #16]
 800b136:	bf08      	it	eq
 800b138:	f8c3 0710 	streq.w	r0, [r3, #1808]	; 0x710
 800b13c:	fb0a 4201 	mla	r2, sl, r1, r4
 800b140:	f882 76f7 	strb.w	r7, [r2, #1783]	; 0x6f7
 800b144:	f892 26f8 	ldrb.w	r2, [r2, #1784]	; 0x6f8
 800b148:	1b8b      	subs	r3, r1, r6
 800b14a:	b112      	cbz	r2, 800b152 <ArtNetNode::SendPollRelply(bool)+0xf2>
 800b14c:	2280      	movs	r2, #128	; 0x80
 800b14e:	f108 0801 	add.w	r8, r8, #1
 800b152:	fb0a 4001 	mla	r0, sl, r1, r4
 800b156:	4423      	add	r3, r4
 800b158:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632
 800b15c:	f883 763a 	strb.w	r7, [r3, #1594]	; 0x63a
 800b160:	f890 06f6 	ldrb.w	r0, [r0, #1782]	; 0x6f6
 800b164:	2903      	cmp	r1, #3
 800b166:	f883 0642 	strb.w	r0, [r3, #1602]	; 0x642
 800b16a:	d812      	bhi.n	800b192 <ArtNetNode::SendPollRelply(bool)+0x132>
 800b16c:	eb04 1001 	add.w	r0, r4, r1, lsl #4
 800b170:	f890 7b78 	ldrb.w	r7, [r0, #2936]	; 0xb78
 800b174:	b12f      	cbz	r7, 800b182 <ArtNetNode::SendPollRelply(bool)+0x122>
 800b176:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b17a:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632
 800b17e:	f108 0801 	add.w	r8, r8, #1
 800b182:	f890 2b77 	ldrb.w	r2, [r0, #2935]	; 0xb77
 800b186:	f883 2636 	strb.w	r2, [r3, #1590]	; 0x636
 800b18a:	f890 2b76 	ldrb.w	r2, [r0, #2934]	; 0xb76
 800b18e:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e
 800b192:	3101      	adds	r1, #1
 800b194:	b2c9      	uxtb	r1, r1
 800b196:	e796      	b.n	800b0c6 <ArtNetNode::SendPollRelply(bool)+0x66>
 800b198:	08017fcd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, sl, fp, ip, sp, lr}

0800b19c <ArtNetNode::HandlePoll()>:
 800b19c:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
 800b1a0:	b410      	push	{r4}
 800b1a2:	f3c2 0340 	ubfx	r3, r2, #1, #1
 800b1a6:	f880 36e6 	strb.w	r3, [r0, #1766]	; 0x6e6
 800b1aa:	f012 0304 	ands.w	r3, r2, #4
 800b1ae:	d02e      	beq.n	800b20e <ArtNetNode::HandlePoll()+0x72>
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	f8d0 16d8 	ldr.w	r1, [r0, #1752]	; 0x6d8
 800b1b6:	f890 46e8 	ldrb.w	r4, [r0, #1768]	; 0x6e8
 800b1ba:	f880 36e7 	strb.w	r3, [r0, #1767]	; 0x6e7
 800b1be:	b979      	cbnz	r1, 800b1e0 <ArtNetNode::HandlePoll()+0x44>
 800b1c0:	f8d0 357c 	ldr.w	r3, [r0, #1404]	; 0x57c
 800b1c4:	f8c0 36d8 	str.w	r3, [r0, #1752]	; 0x6d8
 800b1c8:	b19c      	cbz	r4, 800b1f2 <ArtNetNode::HandlePoll()+0x56>
 800b1ca:	f890 36f0 	ldrb.w	r3, [r0, #1776]	; 0x6f0
 800b1ce:	f890 20bd 	ldrb.w	r2, [r0, #189]	; 0xbd
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	bf28      	it	cs
 800b1d6:	4613      	movcs	r3, r2
 800b1d8:	f880 36f0 	strb.w	r3, [r0, #1776]	; 0x6f0
 800b1dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b1de:	e010      	b.n	800b202 <ArtNetNode::HandlePoll()+0x66>
 800b1e0:	2c00      	cmp	r4, #0
 800b1e2:	d1f2      	bne.n	800b1ca <ArtNetNode::HandlePoll()+0x2e>
 800b1e4:	f8d0 457c 	ldr.w	r4, [r0, #1404]	; 0x57c
 800b1e8:	42a1      	cmp	r1, r4
 800b1ea:	d002      	beq.n	800b1f2 <ArtNetNode::HandlePoll()+0x56>
 800b1ec:	f880 36e8 	strb.w	r3, [r0, #1768]	; 0x6e8
 800b1f0:	e7eb      	b.n	800b1ca <ArtNetNode::HandlePoll()+0x2e>
 800b1f2:	f890 30bd 	ldrb.w	r3, [r0, #189]	; 0xbd
 800b1f6:	f880 36f0 	strb.w	r3, [r0, #1776]	; 0x6f0
 800b1fa:	0713      	lsls	r3, r2, #28
 800b1fc:	d5ee      	bpl.n	800b1dc <ArtNetNode::HandlePoll()+0x40>
 800b1fe:	f8d0 357c 	ldr.w	r3, [r0, #1404]	; 0x57c
 800b202:	2101      	movs	r1, #1
 800b204:	bc10      	pop	{r4}
 800b206:	f8c0 36d4 	str.w	r3, [r0, #1748]	; 0x6d4
 800b20a:	f7ff bf29 	b.w	800b060 <ArtNetNode::SendPollRelply(bool)>
 800b20e:	f880 36e7 	strb.w	r3, [r0, #1767]	; 0x6e7
 800b212:	e7f6      	b.n	800b202 <ArtNetNode::HandlePoll()+0x66>

0800b214 <ArtNetNode::SendTod(unsigned int)>:
 800b214:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800b218:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b21c:	2500      	movs	r5, #0
 800b21e:	f880 30b9 	strb.w	r3, [r0, #185]	; 0xb9
 800b222:	2301      	movs	r3, #1
 800b224:	4688      	mov	r8, r1
 800b226:	4604      	mov	r4, r0
 800b228:	f880 30bc 	strb.w	r3, [r0, #188]	; 0xbc
 800b22c:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
 800b230:	6900      	ldr	r0, [r0, #16]
 800b232:	088f      	lsrs	r7, r1, #2
 800b234:	6803      	ldr	r3, [r0, #0]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	4798      	blx	r3
 800b23a:	f008 0303 	and.w	r3, r8, #3
 800b23e:	3301      	adds	r3, #1
 800b240:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
 800b244:	1c7b      	adds	r3, r7, #1
 800b246:	b2ff      	uxtb	r7, r7
 800b248:	f884 50be 	strb.w	r5, [r4, #190]	; 0xbe
 800b24c:	f884 50bf 	strb.w	r5, [r4, #191]	; 0xbf
 800b250:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
 800b254:	f884 50c1 	strb.w	r5, [r4, #193]	; 0xc1
 800b258:	f884 50c2 	strb.w	r5, [r4, #194]	; 0xc2
 800b25c:	f884 50c3 	strb.w	r5, [r4, #195]	; 0xc3
 800b260:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
 800b264:	4427      	add	r7, r4
 800b266:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b26a:	f884 50c6 	strb.w	r5, [r4, #198]	; 0xc6
 800b26e:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 800b272:	2324      	movs	r3, #36	; 0x24
 800b274:	fb03 4308 	mla	r3, r3, r8, r4
 800b278:	f893 36f6 	ldrb.w	r3, [r3, #1782]	; 0x6f6
 800b27c:	b2c6      	uxtb	r6, r0
 800b27e:	6920      	ldr	r0, [r4, #16]
 800b280:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
 800b284:	f884 50ca 	strb.w	r5, [r4, #202]	; 0xca
 800b288:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
 800b28c:	f884 60c9 	strb.w	r6, [r4, #201]	; 0xc9
 800b290:	f884 60cb 	strb.w	r6, [r4, #203]	; 0xcb
 800b294:	6803      	ldr	r3, [r0, #0]
 800b296:	4641      	mov	r1, r8
 800b298:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	4798      	blx	r3
 800b2a0:	2306      	movs	r3, #6
 800b2a2:	fb03 f206 	mul.w	r2, r3, r6
 800b2a6:	f641 1336 	movw	r3, #6454	; 0x1936
 800b2aa:	f104 05b0 	add.w	r5, r4, #176	; 0xb0
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b2b4:	7920      	ldrb	r0, [r4, #4]
 800b2b6:	321c      	adds	r2, #28
 800b2b8:	f007 f970 	bl	801259c <udp_send>
 800b2bc:	b002      	add	sp, #8
 800b2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b2c2 <ArtNetNode::HandleTodControl()>:
 800b2c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	4606      	mov	r6, r0
 800b2c8:	2500      	movs	r5, #0
 800b2ca:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
 800b2ce:	f890 70c7 	ldrb.w	r7, [r0, #199]	; 0xc7
 800b2d2:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800b2d6:	f8b6 36f4 	ldrh.w	r3, [r6, #1780]	; 0x6f4
 800b2da:	42bb      	cmp	r3, r7
 800b2dc:	d125      	bne.n	800b32a <ArtNetNode::HandleTodControl()+0x68>
 800b2de:	f896 36f8 	ldrb.w	r3, [r6, #1784]	; 0x6f8
 800b2e2:	b313      	cbz	r3, 800b32a <ArtNetNode::HandleTodControl()+0x68>
 800b2e4:	f896 3715 	ldrb.w	r3, [r6, #1813]	; 0x715
 800b2e8:	b13b      	cbz	r3, 800b2fa <ArtNetNode::HandleTodControl()+0x38>
 800b2ea:	f894 367e 	ldrb.w	r3, [r4, #1662]	; 0x67e
 800b2ee:	b923      	cbnz	r3, 800b2fa <ArtNetNode::HandleTodControl()+0x38>
 800b2f0:	68a0      	ldr	r0, [r4, #8]
 800b2f2:	4629      	mov	r1, r5
 800b2f4:	6803      	ldr	r3, [r0, #0]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	4798      	blx	r3
 800b2fa:	f894 30c6 	ldrb.w	r3, [r4, #198]	; 0xc6
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d104      	bne.n	800b30c <ArtNetNode::HandleTodControl()+0x4a>
 800b302:	6920      	ldr	r0, [r4, #16]
 800b304:	4629      	mov	r1, r5
 800b306:	6803      	ldr	r3, [r0, #0]
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	4798      	blx	r3
 800b30c:	4629      	mov	r1, r5
 800b30e:	4620      	mov	r0, r4
 800b310:	f7ff ff80 	bl	800b214 <ArtNetNode::SendTod(unsigned int)>
 800b314:	f896 3715 	ldrb.w	r3, [r6, #1813]	; 0x715
 800b318:	b13b      	cbz	r3, 800b32a <ArtNetNode::HandleTodControl()+0x68>
 800b31a:	f894 367e 	ldrb.w	r3, [r4, #1662]	; 0x67e
 800b31e:	b923      	cbnz	r3, 800b32a <ArtNetNode::HandleTodControl()+0x68>
 800b320:	68a0      	ldr	r0, [r4, #8]
 800b322:	4629      	mov	r1, r5
 800b324:	6803      	ldr	r3, [r0, #0]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	4798      	blx	r3
 800b32a:	3501      	adds	r5, #1
 800b32c:	2d04      	cmp	r5, #4
 800b32e:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800b332:	d1d0      	bne.n	800b2d6 <ArtNetNode::HandleTodControl()+0x14>
 800b334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b336 <ArtNetNode::HandleTodRequest()>:
 800b336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b338:	4604      	mov	r4, r0
 800b33a:	4606      	mov	r6, r0
 800b33c:	2500      	movs	r5, #0
 800b33e:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
 800b342:	f890 70c8 	ldrb.w	r7, [r0, #200]	; 0xc8
 800b346:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800b34a:	f8b6 36f4 	ldrh.w	r3, [r6, #1780]	; 0x6f4
 800b34e:	42bb      	cmp	r3, r7
 800b350:	d106      	bne.n	800b360 <ArtNetNode::HandleTodRequest()+0x2a>
 800b352:	f896 36f8 	ldrb.w	r3, [r6, #1784]	; 0x6f8
 800b356:	b11b      	cbz	r3, 800b360 <ArtNetNode::HandleTodRequest()+0x2a>
 800b358:	4629      	mov	r1, r5
 800b35a:	4620      	mov	r0, r4
 800b35c:	f7ff ff5a 	bl	800b214 <ArtNetNode::SendTod(unsigned int)>
 800b360:	3501      	adds	r5, #1
 800b362:	2d04      	cmp	r5, #4
 800b364:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800b368:	d1ef      	bne.n	800b34a <ArtNetNode::HandleTodRequest()+0x14>
 800b36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b36c <ArtNetNode::HandleRdm()>:
 800b36c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b370:	4604      	mov	r4, r0
 800b372:	4605      	mov	r5, r0
 800b374:	2600      	movs	r6, #0
 800b376:	f04f 0b01 	mov.w	fp, #1
 800b37a:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
 800b37e:	f890 70c7 	ldrb.w	r7, [r0, #199]	; 0xc7
 800b382:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b448 <ArtNetNode::HandleRdm()+0xdc>
 800b386:	f100 09b0 	add.w	r9, r0, #176	; 0xb0
 800b38a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800b38e:	f100 08c8 	add.w	r8, r0, #200	; 0xc8
 800b392:	f8b5 36f4 	ldrh.w	r3, [r5, #1780]	; 0x6f4
 800b396:	42bb      	cmp	r3, r7
 800b398:	d145      	bne.n	800b426 <ArtNetNode::HandleRdm()+0xba>
 800b39a:	f895 36f8 	ldrb.w	r3, [r5, #1784]	; 0x6f8
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d041      	beq.n	800b426 <ArtNetNode::HandleRdm()+0xba>
 800b3a2:	f894 367e 	ldrb.w	r3, [r4, #1662]	; 0x67e
 800b3a6:	b9c3      	cbnz	r3, 800b3da <ArtNetNode::HandleRdm()+0x6e>
 800b3a8:	f8d5 3710 	ldr.w	r3, [r5, #1808]	; 0x710
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d10c      	bne.n	800b3ca <ArtNetNode::HandleRdm()+0x5e>
 800b3b0:	69e0      	ldr	r0, [r4, #28]
 800b3b2:	b150      	cbz	r0, 800b3ca <ArtNetNode::HandleRdm()+0x5e>
 800b3b4:	6803      	ldr	r3, [r0, #0]
 800b3b6:	4631      	mov	r1, r6
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	4798      	blx	r3
 800b3bc:	f010 0f89 	tst.w	r0, #137	; 0x89
 800b3c0:	bf14      	ite	ne
 800b3c2:	2301      	movne	r3, #1
 800b3c4:	2300      	moveq	r3, #0
 800b3c6:	f885 3715 	strb.w	r3, [r5, #1813]	; 0x715
 800b3ca:	f895 3715 	ldrb.w	r3, [r5, #1813]	; 0x715
 800b3ce:	b123      	cbz	r3, 800b3da <ArtNetNode::HandleRdm()+0x6e>
 800b3d0:	68a0      	ldr	r0, [r4, #8]
 800b3d2:	4631      	mov	r1, r6
 800b3d4:	6803      	ldr	r3, [r0, #0]
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	4798      	blx	r3
 800b3da:	6920      	ldr	r0, [r4, #16]
 800b3dc:	4642      	mov	r2, r8
 800b3de:	6803      	ldr	r3, [r0, #0]
 800b3e0:	4631      	mov	r1, r6
 800b3e2:	695b      	ldr	r3, [r3, #20]
 800b3e4:	4798      	blx	r3
 800b3e6:	b358      	cbz	r0, 800b440 <ArtNetNode::HandleRdm()+0xd4>
 800b3e8:	46c4      	mov	ip, r8
 800b3ea:	f884 b0bc 	strb.w	fp, [r4, #188]	; 0xbc
 800b3ee:	7881      	ldrb	r1, [r0, #2]
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	460a      	mov	r2, r1
 800b3f4:	3102      	adds	r1, #2
 800b3f6:	4408      	add	r0, r1
 800b3f8:	4298      	cmp	r0, r3
 800b3fa:	d11c      	bne.n	800b436 <ArtNetNode::HandleRdm()+0xca>
 800b3fc:	f641 1336 	movw	r3, #6454	; 0x1936
 800b400:	4649      	mov	r1, r9
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	7920      	ldrb	r0, [r4, #4]
 800b406:	f8d4 357c 	ldr.w	r3, [r4, #1404]	; 0x57c
 800b40a:	3219      	adds	r2, #25
 800b40c:	f007 f8c6 	bl	801259c <udp_send>
 800b410:	f895 3715 	ldrb.w	r3, [r5, #1813]	; 0x715
 800b414:	b13b      	cbz	r3, 800b426 <ArtNetNode::HandleRdm()+0xba>
 800b416:	f894 367e 	ldrb.w	r3, [r4, #1662]	; 0x67e
 800b41a:	b923      	cbnz	r3, 800b426 <ArtNetNode::HandleRdm()+0xba>
 800b41c:	68a0      	ldr	r0, [r4, #8]
 800b41e:	4631      	mov	r1, r6
 800b420:	6803      	ldr	r3, [r0, #0]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	4798      	blx	r3
 800b426:	3601      	adds	r6, #1
 800b428:	2e04      	cmp	r6, #4
 800b42a:	f105 0524 	add.w	r5, r5, #36	; 0x24
 800b42e:	d1b0      	bne.n	800b392 <ArtNetNode::HandleRdm()+0x26>
 800b430:	b003      	add	sp, #12
 800b432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b436:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b43a:	f80c 1b01 	strb.w	r1, [ip], #1
 800b43e:	e7db      	b.n	800b3f8 <ArtNetNode::HandleRdm()+0x8c>
 800b440:	4650      	mov	r0, sl
 800b442:	f7fe f98b 	bl	800975c <printf>
 800b446:	e7e3      	b.n	800b410 <ArtNetNode::HandleRdm()+0xa4>
 800b448:	08017fe8 	stmdaeq	r1, {r3, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}

0800b44c <ArtNetNode::SetRdmUID(unsigned char const*, bool)>:
 800b44c:	b530      	push	{r4, r5, lr}
 800b44e:	f100 03a6 	add.w	r3, r0, #166	; 0xa6
 800b452:	1d8c      	adds	r4, r1, #6
 800b454:	42a1      	cmp	r1, r4
 800b456:	d107      	bne.n	800b468 <ArtNetNode::SetRdmUID(unsigned char const*, bool)+0x1c>
 800b458:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 800b45c:	b14a      	cbz	r2, 800b472 <ArtNetNode::SetRdmUID(unsigned char const*, bool)+0x26>
 800b45e:	f043 0310 	orr.w	r3, r3, #16
 800b462:	f880 30a5 	strb.w	r3, [r0, #165]	; 0xa5
 800b466:	bd30      	pop	{r4, r5, pc}
 800b468:	f811 5b01 	ldrb.w	r5, [r1], #1
 800b46c:	f803 5b01 	strb.w	r5, [r3], #1
 800b470:	e7f0      	b.n	800b454 <ArtNetNode::SetRdmUID(unsigned char const*, bool)+0x8>
 800b472:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800b476:	e7f4      	b.n	800b462 <ArtNetNode::SetRdmUID(unsigned char const*, bool)+0x16>

0800b478 <ArtNetNode::HandleSync()>:
 800b478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b47c:	2500      	movs	r5, #0
 800b47e:	2301      	movs	r3, #1
 800b480:	4604      	mov	r4, r0
 800b482:	4606      	mov	r6, r0
 800b484:	46a9      	mov	r9, r5
 800b486:	f880 36e9 	strb.w	r3, [r0, #1769]	; 0x6e9
 800b48a:	4b1e      	ldr	r3, [pc, #120]	; (800b504 <ArtNetNode::HandleSync()+0x8c>)
 800b48c:	4f1e      	ldr	r7, [pc, #120]	; (800b508 <ArtNetNode::HandleSync()+0x90>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800b50c <ArtNetNode::HandleSync()+0x94>
 800b494:	f8c0 36e0 	str.w	r3, [r0, #1760]	; 0x6e0
 800b498:	7823      	ldrb	r3, [r4, #0]
 800b49a:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 800b49e:	d301      	bcc.n	800b4a4 <ArtNetNode::HandleSync()+0x2c>
 800b4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a4:	f8d6 3710 	ldr.w	r3, [r6, #1808]	; 0x710
 800b4a8:	bb3b      	cbnz	r3, 800b4fa <ArtNetNode::HandleSync()+0x82>
 800b4aa:	f896 36f8 	ldrb.w	r3, [r6, #1784]	; 0x6f8
 800b4ae:	b323      	cbz	r3, 800b4fa <ArtNetNode::HandleSync()+0x82>
 800b4b0:	f8d8 3000 	ldr.w	r3, [r8]
 800b4b4:	68a0      	ldr	r0, [r4, #8]
 800b4b6:	07da      	lsls	r2, r3, #31
 800b4b8:	bf5c      	itt	pl
 800b4ba:	2301      	movpl	r3, #1
 800b4bc:	f8c8 3000 	strpl.w	r3, [r8]
 800b4c0:	6803      	ldr	r3, [r0, #0]
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800b4c8:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800b4cc:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800b4d0:	47d0      	blx	sl
 800b4d2:	f896 3715 	ldrb.w	r3, [r6, #1813]	; 0x715
 800b4d6:	b93b      	cbnz	r3, 800b4e8 <ArtNetNode::HandleSync()+0x70>
 800b4d8:	68a0      	ldr	r0, [r4, #8]
 800b4da:	4629      	mov	r1, r5
 800b4dc:	6803      	ldr	r3, [r0, #0]
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	4798      	blx	r3
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	f886 3715 	strb.w	r3, [r6, #1813]	; 0x715
 800b4e8:	f8d8 3000 	ldr.w	r3, [r8]
 800b4ec:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800b4f0:	07db      	lsls	r3, r3, #31
 800b4f2:	bf5c      	itt	pl
 800b4f4:	2301      	movpl	r3, #1
 800b4f6:	f8c8 3000 	strpl.w	r3, [r8]
 800b4fa:	3501      	adds	r5, #1
 800b4fc:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800b500:	3624      	adds	r6, #36	; 0x24
 800b502:	e7c9      	b.n	800b498 <ArtNetNode::HandleSync()+0x20>
 800b504:	2001ce64 	andcs	ip, r1, r4, ror #28
 800b508:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800b50c:	200000ec 	andcs	r0, r0, ip, ror #1

0800b510 <ArtNetNode::HandleTimeCode()>:
 800b510:	4601      	mov	r1, r0
 800b512:	68c0      	ldr	r0, [r0, #12]
 800b514:	31be      	adds	r1, #190	; 0xbe
 800b516:	6803      	ldr	r3, [r0, #0]
 800b518:	691b      	ldr	r3, [r3, #16]
 800b51a:	4718      	bx	r3

0800b51c <ArtNetNode::HandleTimeSync()>:
 800b51c:	b500      	push	{lr}
 800b51e:	f890 30bf 	ldrb.w	r3, [r0, #191]	; 0xbf
 800b522:	b08b      	sub	sp, #44	; 0x2c
 800b524:	9301      	str	r3, [sp, #4]
 800b526:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
 800b52a:	f890 20c4 	ldrb.w	r2, [r0, #196]	; 0xc4
 800b52e:	9302      	str	r3, [sp, #8]
 800b530:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
 800b534:	a901      	add	r1, sp, #4
 800b536:	9303      	str	r3, [sp, #12]
 800b538:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
 800b53c:	9304      	str	r3, [sp, #16]
 800b53e:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
 800b542:	9305      	str	r3, [sp, #20]
 800b544:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
 800b548:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b54c:	9306      	str	r3, [sp, #24]
 800b54e:	4b03      	ldr	r3, [pc, #12]	; (800b55c <ArtNetNode::HandleTimeSync()+0x40>)
 800b550:	6818      	ldr	r0, [r3, #0]
 800b552:	f00a f9f5 	bl	8015940 <Hardware::SetTime(tm const*)>
 800b556:	b00b      	add	sp, #44	; 0x2c
 800b558:	f85d fb04 	ldr.w	pc, [sp], #4
 800b55c:	2001ce4c 	andcs	ip, r1, ip, asr #28

0800b560 <ArtNetNode::Print()>:
 800b560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b564:	4605      	mov	r5, r0
 800b566:	4604      	mov	r4, r0
 800b568:	b08b      	sub	sp, #44	; 0x2c
 800b56a:	f815 2b50 	ldrb.w	r2, [r5], #80
 800b56e:	2104      	movs	r1, #4
 800b570:	4852      	ldr	r0, [pc, #328]	; (800b6bc <ArtNetNode::Print()+0x15c>)
 800b572:	f7fe f8f3 	bl	800975c <printf>
 800b576:	4b52      	ldr	r3, [pc, #328]	; (800b6c0 <ArtNetNode::Print()+0x160>)
 800b578:	4852      	ldr	r0, [pc, #328]	; (800b6c4 <ArtNetNode::Print()+0x164>)
 800b57a:	7819      	ldrb	r1, [r3, #0]
 800b57c:	785a      	ldrb	r2, [r3, #1]
 800b57e:	f7fe f8ed 	bl	800975c <printf>
 800b582:	4629      	mov	r1, r5
 800b584:	4850      	ldr	r0, [pc, #320]	; (800b6c8 <ArtNetNode::Print()+0x168>)
 800b586:	f7fe f8e9 	bl	800975c <printf>
 800b58a:	4850      	ldr	r0, [pc, #320]	; (800b6cc <ArtNetNode::Print()+0x16c>)
 800b58c:	f104 0162 	add.w	r1, r4, #98	; 0x62
 800b590:	f7fe f8e4 	bl	800975c <printf>
 800b594:	f894 36ee 	ldrb.w	r3, [r4, #1774]	; 0x6ee
 800b598:	b983      	cbnz	r3, 800b5bc <ArtNetNode::Print()+0x5c>
 800b59a:	f894 36ef 	ldrb.w	r3, [r4, #1775]	; 0x6ef
 800b59e:	b153      	cbz	r3, 800b5b6 <ArtNetNode::Print()+0x56>
 800b5a0:	484b      	ldr	r0, [pc, #300]	; (800b6d0 <ArtNetNode::Print()+0x170>)
 800b5a2:	f7fe f8db 	bl	800975c <printf>
 800b5a6:	f04f 0b00 	mov.w	fp, #0
 800b5aa:	4e4a      	ldr	r6, [pc, #296]	; (800b6d4 <ArtNetNode::Print()+0x174>)
 800b5ac:	4f4a      	ldr	r7, [pc, #296]	; (800b6d8 <ArtNetNode::Print()+0x178>)
 800b5ae:	7823      	ldrb	r3, [r4, #0]
 800b5b0:	ebbb 0f83 	cmp.w	fp, r3, lsl #2
 800b5b4:	d347      	bcc.n	800b646 <ArtNetNode::Print()+0xe6>
 800b5b6:	b00b      	add	sp, #44	; 0x2c
 800b5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5bc:	4847      	ldr	r0, [pc, #284]	; (800b6dc <ArtNetNode::Print()+0x17c>)
 800b5be:	f7fe f8cd 	bl	800975c <printf>
 800b5c2:	4626      	mov	r6, r4
 800b5c4:	2500      	movs	r5, #0
 800b5c6:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800b6e0 <ArtNetNode::Print()+0x180>
 800b5ca:	f8df 9118 	ldr.w	r9, [pc, #280]	; 800b6e4 <ArtNetNode::Print()+0x184>
 800b5ce:	7823      	ldrb	r3, [r4, #0]
 800b5d0:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 800b5d4:	d2e1      	bcs.n	800b59a <ArtNetNode::Print()+0x3a>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	4629      	mov	r1, r5
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 800b5e0:	f7fe feb0 	bl	800a344 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 800b5e4:	b360      	cbz	r0, 800b640 <ArtNetNode::Print()+0xe0>
 800b5e6:	eb04 0395 	add.w	r3, r4, r5, lsr #2
 800b5ea:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
 800b5ee:	f893 b046 	ldrb.w	fp, [r3, #70]	; 0x46
 800b5f2:	4629      	mov	r1, r5
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f7fe fe8c 	bl	800a318 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800b600:	f8d6 070c 	ldr.w	r0, [r6, #1804]	; 0x70c
 800b604:	4938      	ldr	r1, [pc, #224]	; (800b6e8 <ArtNetNode::Print()+0x188>)
 800b606:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800b60a:	2800      	cmp	r0, #0
 800b60c:	bf18      	it	ne
 800b60e:	4641      	movne	r1, r8
 800b610:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800b614:	08af      	lsrs	r7, r5, #2
 800b616:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b61a:	e9cd b300 	strd	fp, r3, [sp]
 800b61e:	463a      	mov	r2, r7
 800b620:	4653      	mov	r3, sl
 800b622:	4629      	mov	r1, r5
 800b624:	4648      	mov	r0, r9
 800b626:	f7fe f899 	bl	800975c <printf>
 800b62a:	f8d6 1710 	ldr.w	r1, [r6, #1808]	; 0x710
 800b62e:	4a2f      	ldr	r2, [pc, #188]	; (800b6ec <ArtNetNode::Print()+0x18c>)
 800b630:	4b2f      	ldr	r3, [pc, #188]	; (800b6f0 <ArtNetNode::Print()+0x190>)
 800b632:	4830      	ldr	r0, [pc, #192]	; (800b6f4 <ArtNetNode::Print()+0x194>)
 800b634:	2900      	cmp	r1, #0
 800b636:	bf0c      	ite	eq
 800b638:	4611      	moveq	r1, r2
 800b63a:	4619      	movne	r1, r3
 800b63c:	f7fe f88e 	bl	800975c <printf>
 800b640:	3501      	adds	r5, #1
 800b642:	3624      	adds	r6, #36	; 0x24
 800b644:	e7c3      	b.n	800b5ce <ArtNetNode::Print()+0x6e>
 800b646:	2300      	movs	r3, #0
 800b648:	4659      	mov	r1, fp
 800b64a:	4620      	mov	r0, r4
 800b64c:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 800b650:	f7fe fe78 	bl	800a344 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 800b654:	b378      	cbz	r0, 800b6b6 <ArtNetNode::Print()+0x156>
 800b656:	eb04 039b 	add.w	r3, r4, fp, lsr #2
 800b65a:	f893 903e 	ldrb.w	r9, [r3, #62]	; 0x3e
 800b65e:	f893 a046 	ldrb.w	sl, [r3, #70]	; 0x46
 800b662:	eb04 130b 	add.w	r3, r4, fp, lsl #4
 800b666:	f8d3 5b7c 	ldr.w	r5, [r3, #2940]	; 0xb7c
 800b66a:	ea4f 089b 	mov.w	r8, fp, lsr #2
 800b66e:	b925      	cbnz	r5, 800b67a <ArtNetNode::Print()+0x11a>
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	699a      	ldr	r2, [r3, #24]
 800b674:	691d      	ldr	r5, [r3, #16]
 800b676:	ea65 0502 	orn	r5, r5, r2
 800b67a:	2300      	movs	r3, #0
 800b67c:	4659      	mov	r1, fp
 800b67e:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800b682:	4620      	mov	r0, r4
 800b684:	f7fe fe48 	bl	800a318 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800b688:	0e2b      	lsrs	r3, r5, #24
 800b68a:	9306      	str	r3, [sp, #24]
 800b68c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800b690:	9305      	str	r3, [sp, #20]
 800b692:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800b696:	9304      	str	r3, [sp, #16]
 800b698:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800b69c:	b2ed      	uxtb	r5, r5
 800b69e:	9302      	str	r3, [sp, #8]
 800b6a0:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800b6a4:	4642      	mov	r2, r8
 800b6a6:	e9cd a300 	strd	sl, r3, [sp]
 800b6aa:	4659      	mov	r1, fp
 800b6ac:	464b      	mov	r3, r9
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	9503      	str	r5, [sp, #12]
 800b6b2:	f7fe f853 	bl	800975c <printf>
 800b6b6:	f10b 0b01 	add.w	fp, fp, #1
 800b6ba:	e778      	b.n	800b5ae <ArtNetNode::Print()+0x4e>
 800b6bc:	0801800e 	stmdaeq	r1, {r1, r2, r3, pc}
 800b6c0:	08018279 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, pc}
 800b6c4:	0801801c 	stmdaeq	r1, {r2, r3, r4, pc}
 800b6c8:	08018031 	stmdaeq	r1, {r0, r4, r5, pc}
 800b6cc:	08018043 	stmdaeq	r1, {r0, r1, r6, pc}
 800b6d0:	0801808d 	stmdaeq	r1, {r0, r2, r3, r7, pc}
 800b6d4:	08018095 	stmdaeq	r1, {r0, r2, r4, r7, pc}
 800b6d8:	2001c724 	andcs	ip, r1, r4, lsr #14
 800b6dc:	08018055 	stmdaeq	r1, {r0, r2, r4, r6, pc}
 800b6e0:	08017ffd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 800b6e4:	0801805e 	stmdaeq	r1, {r1, r2, r3, r4, r6, pc}
 800b6e8:	08017ff9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 800b6ec:	08018001 	stmdaeq	r1, {r0, pc}
 800b6f0:	08018009 	stmdaeq	r1, {r0, r3, pc}
 800b6f4:	08018086 	stmdaeq	r1, {r1, r2, r7, pc}

0800b6f8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800b6f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6fa:	88c6      	ldrh	r6, [r0, #6]
 800b6fc:	8885      	ldrh	r5, [r0, #4]
 800b6fe:	42ae      	cmp	r6, r5
 800b700:	d216      	bcs.n	800b730 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800b702:	4604      	mov	r4, r0
 800b704:	6800      	ldr	r0, [r0, #0]
 800b706:	1bad      	subs	r5, r5, r6
 800b708:	4430      	add	r0, r6
 800b70a:	7a26      	ldrb	r6, [r4, #8]
 800b70c:	b923      	cbnz	r3, 800b718 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800b70e:	b926      	cbnz	r6, 800b71a <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800b710:	9200      	str	r2, [sp, #0]
 800b712:	460b      	mov	r3, r1
 800b714:	4a09      	ldr	r2, [pc, #36]	; (800b73c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800b716:	e003      	b.n	800b720 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800b718:	b166      	cbz	r6, 800b734 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800b71a:	460b      	mov	r3, r1
 800b71c:	9200      	str	r2, [sp, #0]
 800b71e:	4a08      	ldr	r2, [pc, #32]	; (800b740 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800b720:	4629      	mov	r1, r5
 800b722:	f7fe f843 	bl	80097ac <snprintf>
 800b726:	4285      	cmp	r5, r0
 800b728:	bfa2      	ittt	ge
 800b72a:	88e3      	ldrhge	r3, [r4, #6]
 800b72c:	181b      	addge	r3, r3, r0
 800b72e:	80e3      	strhge	r3, [r4, #6]
 800b730:	b002      	add	sp, #8
 800b732:	bd70      	pop	{r4, r5, r6, pc}
 800b734:	9200      	str	r2, [sp, #0]
 800b736:	460b      	mov	r3, r1
 800b738:	4a02      	ldr	r2, [pc, #8]	; (800b744 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800b73a:	e7f1      	b.n	800b720 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800b73c:	080180d1 	stmdaeq	r1, {r0, r4, r6, r7, pc}
 800b740:	080180c8 	stmdaeq	r1, {r3, r6, r7, pc}
 800b744:	080180d2 	stmdaeq	r1, {r1, r4, r6, r7, pc}

0800b748 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800b748:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b74a:	88c6      	ldrh	r6, [r0, #6]
 800b74c:	8885      	ldrh	r5, [r0, #4]
 800b74e:	42ae      	cmp	r6, r5
 800b750:	d216      	bcs.n	800b780 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800b752:	4604      	mov	r4, r0
 800b754:	6800      	ldr	r0, [r0, #0]
 800b756:	1bad      	subs	r5, r5, r6
 800b758:	4430      	add	r0, r6
 800b75a:	7a26      	ldrb	r6, [r4, #8]
 800b75c:	b923      	cbnz	r3, 800b768 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800b75e:	b926      	cbnz	r6, 800b76a <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800b760:	9200      	str	r2, [sp, #0]
 800b762:	460b      	mov	r3, r1
 800b764:	4a09      	ldr	r2, [pc, #36]	; (800b78c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800b766:	e003      	b.n	800b770 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800b768:	b166      	cbz	r6, 800b784 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800b76a:	460b      	mov	r3, r1
 800b76c:	9200      	str	r2, [sp, #0]
 800b76e:	4a08      	ldr	r2, [pc, #32]	; (800b790 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800b770:	4629      	mov	r1, r5
 800b772:	f7fe f81b 	bl	80097ac <snprintf>
 800b776:	4285      	cmp	r5, r0
 800b778:	bfa2      	ittt	ge
 800b77a:	88e3      	ldrhge	r3, [r4, #6]
 800b77c:	181b      	addge	r3, r3, r0
 800b77e:	80e3      	strhge	r3, [r4, #6]
 800b780:	b002      	add	sp, #8
 800b782:	bd70      	pop	{r4, r5, r6, pc}
 800b784:	9200      	str	r2, [sp, #0]
 800b786:	460b      	mov	r3, r1
 800b788:	4a02      	ldr	r2, [pc, #8]	; (800b794 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800b78a:	e7f1      	b.n	800b770 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800b78c:	080180e4 	stmdaeq	r1, {r2, r5, r6, r7, pc}
 800b790:	080180d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, pc}
 800b794:	080180e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, pc}

0800b798 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800b798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b79a:	460b      	mov	r3, r1
 800b79c:	8885      	ldrh	r5, [r0, #4]
 800b79e:	88c1      	ldrh	r1, [r0, #6]
 800b7a0:	42a9      	cmp	r1, r5
 800b7a2:	d214      	bcs.n	800b7ce <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	6800      	ldr	r0, [r0, #0]
 800b7a8:	1a6d      	subs	r5, r5, r1
 800b7aa:	4408      	add	r0, r1
 800b7ac:	7a21      	ldrb	r1, [r4, #8]
 800b7ae:	b91a      	cbnz	r2, 800b7b8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800b7b0:	b919      	cbnz	r1, 800b7ba <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800b7b2:	4a0a      	ldr	r2, [pc, #40]	; (800b7dc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800b7b4:	9100      	str	r1, [sp, #0]
 800b7b6:	e002      	b.n	800b7be <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800b7b8:	b159      	cbz	r1, 800b7d2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800b7ba:	9200      	str	r2, [sp, #0]
 800b7bc:	4a08      	ldr	r2, [pc, #32]	; (800b7e0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800b7be:	4629      	mov	r1, r5
 800b7c0:	f7fd fff4 	bl	80097ac <snprintf>
 800b7c4:	4285      	cmp	r5, r0
 800b7c6:	bfa2      	ittt	ge
 800b7c8:	88e3      	ldrhge	r3, [r4, #6]
 800b7ca:	181b      	addge	r3, r3, r0
 800b7cc:	80e3      	strhge	r3, [r4, #6]
 800b7ce:	b003      	add	sp, #12
 800b7d0:	bd30      	pop	{r4, r5, pc}
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	9200      	str	r2, [sp, #0]
 800b7d6:	4a03      	ldr	r2, [pc, #12]	; (800b7e4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800b7d8:	e7f1      	b.n	800b7be <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800b7da:	bf00      	nop
 800b7dc:	080180d1 	stmdaeq	r1, {r0, r4, r6, r7, pc}
 800b7e0:	080180c8 	stmdaeq	r1, {r3, r6, r7, pc}
 800b7e4:	080180d2 	stmdaeq	r1, {r1, r4, r6, r7, pc}

0800b7e8 <strncpy.isra.0>:
 800b7e8:	1e4b      	subs	r3, r1, #1
 800b7ea:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b7ee:	b909      	cbnz	r1, 800b7f4 <strncpy.isra.0+0xc>
 800b7f0:	f00a b9c0 	b.w	8015b74 <memset>
 800b7f4:	3a01      	subs	r2, #1
 800b7f6:	f800 1b01 	strb.w	r1, [r0], #1
 800b7fa:	d1f6      	bne.n	800b7ea <strncpy.isra.0+0x2>
 800b7fc:	4770      	bx	lr
	...

0800b800 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
 800b800:	b510      	push	{r4, lr}
 800b802:	2287      	movs	r2, #135	; 0x87
 800b804:	4604      	mov	r4, r0
 800b806:	f840 1b04 	str.w	r1, [r0], #4
 800b80a:	2100      	movs	r1, #0
 800b80c:	f00a f9b2 	bl	8015b74 <memset>
 800b810:	2301      	movs	r3, #1
 800b812:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800b816:	f240 3302 	movw	r3, #770	; 0x302
 800b81a:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800b81e:	2304      	movs	r3, #4
 800b820:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 800b824:	4b07      	ldr	r3, [pc, #28]	; (800b844 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x44>)
 800b826:	4620      	mov	r0, r4
 800b828:	785a      	ldrb	r2, [r3, #1]
 800b82a:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
 800b834:	230a      	movs	r3, #10
 800b836:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 800b83a:	23ff      	movs	r3, #255	; 0xff
 800b83c:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800b840:	bd10      	pop	{r4, pc}
 800b842:	bf00      	nop
 800b844:	08018275 	stmdaeq	r1, {r0, r2, r4, r5, r6, r9, pc}

0800b848 <ArtNetParams::Load()>:
 800b848:	b508      	push	{r3, lr}
 800b84a:	2300      	movs	r3, #0
 800b84c:	4601      	mov	r1, r0
 800b84e:	6043      	str	r3, [r0, #4]
 800b850:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800b854:	6800      	ldr	r0, [r0, #0]
 800b856:	b120      	cbz	r0, 800b862 <ArtNetParams::Load()+0x1a>
 800b858:	6803      	ldr	r3, [r0, #0]
 800b85a:	3104      	adds	r1, #4
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	4798      	blx	r3
 800b860:	2001      	movs	r0, #1
 800b862:	bd08      	pop	{r3, pc}

0800b864 <ArtNetParams::Load(char const*, unsigned int)>:
 800b864:	6803      	ldr	r3, [r0, #0]
 800b866:	b1e3      	cbz	r3, 800b8a2 <ArtNetParams::Load(char const*, unsigned int)+0x3e>
 800b868:	2300      	movs	r3, #0
 800b86a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b86c:	460d      	mov	r5, r1
 800b86e:	4616      	mov	r6, r2
 800b870:	4604      	mov	r4, r0
 800b872:	6043      	str	r3, [r0, #4]
 800b874:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800b878:	4602      	mov	r2, r0
 800b87a:	490a      	ldr	r1, [pc, #40]	; (800b8a4 <ArtNetParams::Load(char const*, unsigned int)+0x40>)
 800b87c:	4668      	mov	r0, sp
 800b87e:	f009 fac3 	bl	8014e08 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800b882:	4632      	mov	r2, r6
 800b884:	4629      	mov	r1, r5
 800b886:	4668      	mov	r0, sp
 800b888:	f009 fac2 	bl	8014e10 <ReadConfigFile::Read(char const*, unsigned int)>
 800b88c:	4621      	mov	r1, r4
 800b88e:	f851 0b04 	ldr.w	r0, [r1], #4
 800b892:	6803      	ldr	r3, [r0, #0]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	4798      	blx	r3
 800b898:	4668      	mov	r0, sp
 800b89a:	f009 fab8 	bl	8014e0e <ReadConfigFile::~ReadConfigFile()>
 800b89e:	b002      	add	sp, #8
 800b8a0:	bd70      	pop	{r4, r5, r6, pc}
 800b8a2:	4770      	bx	lr
 800b8a4:	0800bc65 	stmdaeq	r0, {r0, r2, r5, r6, sl, fp, ip, sp, pc}

0800b8a8 <ArtNetParams::SetBool(unsigned char, unsigned int)>:
 800b8a8:	6843      	ldr	r3, [r0, #4]
 800b8aa:	b111      	cbz	r1, 800b8b2 <ArtNetParams::SetBool(unsigned char, unsigned int)+0xa>
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	6043      	str	r3, [r0, #4]
 800b8b0:	4770      	bx	lr
 800b8b2:	ea23 0302 	bic.w	r3, r3, r2
 800b8b6:	e7fa      	b.n	800b8ae <ArtNetParams::SetBool(unsigned char, unsigned int)+0x6>

0800b8b8 <ArtNetParams::callbackFunction(char const*)>:
 800b8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8bc:	460e      	mov	r6, r1
 800b8be:	b0a5      	sub	sp, #148	; 0x94
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	49a6      	ldr	r1, [pc, #664]	; (800bb5c <ArtNetParams::callbackFunction(char const*)+0x2a4>)
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	f10d 0205 	add.w	r2, sp, #5
 800b8ca:	f009 fc03 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b8ce:	b940      	cbnz	r0, 800b8e2 <ArtNetParams::callbackFunction(char const*)+0x2a>
 800b8d0:	2220      	movs	r2, #32
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800b8d8:	b025      	add	sp, #148	; 0x94
 800b8da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8de:	f7ff bfe3 	b.w	800b8a8 <ArtNetParams::SetBool(unsigned char, unsigned int)>
 800b8e2:	2311      	movs	r3, #17
 800b8e4:	4630      	mov	r0, r6
 800b8e6:	9303      	str	r3, [sp, #12]
 800b8e8:	499d      	ldr	r1, [pc, #628]	; (800bb60 <ArtNetParams::callbackFunction(char const*)+0x2a8>)
 800b8ea:	ab03      	add	r3, sp, #12
 800b8ec:	f104 0210 	add.w	r2, r4, #16
 800b8f0:	f009 fac2 	bl	8014e78 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b8f4:	b938      	cbnz	r0, 800b906 <ArtNetParams::callbackFunction(char const*)+0x4e>
 800b8f6:	9b03      	ldr	r3, [sp, #12]
 800b8f8:	4423      	add	r3, r4
 800b8fa:	7418      	strb	r0, [r3, #16]
 800b8fc:	6863      	ldr	r3, [r4, #4]
 800b8fe:	f043 0302 	orr.w	r3, r3, #2
 800b902:	6063      	str	r3, [r4, #4]
 800b904:	e0d0      	b.n	800baa8 <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800b906:	233f      	movs	r3, #63	; 0x3f
 800b908:	4630      	mov	r0, r6
 800b90a:	9303      	str	r3, [sp, #12]
 800b90c:	4995      	ldr	r1, [pc, #596]	; (800bb64 <ArtNetParams::callbackFunction(char const*)+0x2ac>)
 800b90e:	ab03      	add	r3, sp, #12
 800b910:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800b914:	f009 fab0 	bl	8014e78 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b918:	b938      	cbnz	r0, 800b92a <ArtNetParams::callbackFunction(char const*)+0x72>
 800b91a:	9b03      	ldr	r3, [sp, #12]
 800b91c:	4423      	add	r3, r4
 800b91e:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800b922:	6863      	ldr	r3, [r4, #4]
 800b924:	f043 0301 	orr.w	r3, r3, #1
 800b928:	e7eb      	b.n	800b902 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b92a:	4630      	mov	r0, r6
 800b92c:	498e      	ldr	r1, [pc, #568]	; (800bb68 <ArtNetParams::callbackFunction(char const*)+0x2b0>)
 800b92e:	f10d 0206 	add.w	r2, sp, #6
 800b932:	f009 fb1d 	bl	8014f70 <Sscan::HexUint16(char const*, char const*, unsigned short&)>
 800b936:	b940      	cbnz	r0, 800b94a <ArtNetParams::callbackFunction(char const*)+0x92>
 800b938:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b93c:	ba5b      	rev16	r3, r3
 800b93e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 800b942:	6863      	ldr	r3, [r4, #4]
 800b944:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b948:	e7db      	b.n	800b902 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b94a:	4630      	mov	r0, r6
 800b94c:	4987      	ldr	r1, [pc, #540]	; (800bb6c <ArtNetParams::callbackFunction(char const*)+0x2b4>)
 800b94e:	f10d 0205 	add.w	r2, sp, #5
 800b952:	f009 fbbf 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b956:	b958      	cbnz	r0, 800b970 <ArtNetParams::callbackFunction(char const*)+0xb8>
 800b958:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b95c:	6863      	ldr	r3, [r4, #4]
 800b95e:	2a0a      	cmp	r2, #10
 800b960:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 800b964:	bf14      	ite	ne
 800b966:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 800b96a:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 800b96e:	e7c8      	b.n	800b902 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b970:	4630      	mov	r0, r6
 800b972:	497f      	ldr	r1, [pc, #508]	; (800bb70 <ArtNetParams::callbackFunction(char const*)+0x2b8>)
 800b974:	f10d 0205 	add.w	r2, sp, #5
 800b978:	f009 fbac 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b97c:	b910      	cbnz	r0, 800b984 <ArtNetParams::callbackFunction(char const*)+0xcc>
 800b97e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b982:	e7a6      	b.n	800b8d2 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800b984:	4630      	mov	r0, r6
 800b986:	497b      	ldr	r1, [pc, #492]	; (800bb74 <ArtNetParams::callbackFunction(char const*)+0x2bc>)
 800b988:	f10d 0205 	add.w	r2, sp, #5
 800b98c:	f009 fba2 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b990:	b950      	cbnz	r0, 800b9a8 <ArtNetParams::callbackFunction(char const*)+0xf0>
 800b992:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b996:	6863      	ldr	r3, [r4, #4]
 800b998:	7222      	strb	r2, [r4, #8]
 800b99a:	b112      	cbz	r2, 800b9a2 <ArtNetParams::callbackFunction(char const*)+0xea>
 800b99c:	f043 0304 	orr.w	r3, r3, #4
 800b9a0:	e7af      	b.n	800b902 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b9a2:	f023 0304 	bic.w	r3, r3, #4
 800b9a6:	e7ac      	b.n	800b902 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	4973      	ldr	r1, [pc, #460]	; (800bb78 <ArtNetParams::callbackFunction(char const*)+0x2c0>)
 800b9ac:	f10d 0205 	add.w	r2, sp, #5
 800b9b0:	f009 fb90 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b9b4:	b950      	cbnz	r0, 800b9cc <ArtNetParams::callbackFunction(char const*)+0x114>
 800b9b6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b9ba:	6863      	ldr	r3, [r4, #4]
 800b9bc:	7262      	strb	r2, [r4, #9]
 800b9be:	b112      	cbz	r2, 800b9c6 <ArtNetParams::callbackFunction(char const*)+0x10e>
 800b9c0:	f043 0308 	orr.w	r3, r3, #8
 800b9c4:	e79d      	b.n	800b902 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b9c6:	f023 0308 	bic.w	r3, r3, #8
 800b9ca:	e79a      	b.n	800b902 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800b9cc:	2303      	movs	r3, #3
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	9303      	str	r3, [sp, #12]
 800b9d2:	496a      	ldr	r1, [pc, #424]	; (800bb7c <ArtNetParams::callbackFunction(char const*)+0x2c4>)
 800b9d4:	ab03      	add	r3, sp, #12
 800b9d6:	aa04      	add	r2, sp, #16
 800b9d8:	f009 fa4e 	bl	8014e78 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b9dc:	b9f0      	cbnz	r0, 800ba1c <ArtNetParams::callbackFunction(char const*)+0x164>
 800b9de:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800b9e2:	6863      	ldr	r3, [r4, #4]
 800b9e4:	f042 0220 	orr.w	r2, r2, #32
 800b9e8:	2a6c      	cmp	r2, #108	; 0x6c
 800b9ea:	d111      	bne.n	800ba10 <ArtNetParams::callbackFunction(char const*)+0x158>
 800b9ec:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800b9f0:	f042 0220 	orr.w	r2, r2, #32
 800b9f4:	2a74      	cmp	r2, #116	; 0x74
 800b9f6:	d10b      	bne.n	800ba10 <ArtNetParams::callbackFunction(char const*)+0x158>
 800b9f8:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800b9fc:	f042 0220 	orr.w	r2, r2, #32
 800ba00:	2a70      	cmp	r2, #112	; 0x70
 800ba02:	d105      	bne.n	800ba10 <ArtNetParams::callbackFunction(char const*)+0x158>
 800ba04:	2201      	movs	r2, #1
 800ba06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba0a:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
 800ba0e:	e778      	b.n	800b902 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800ba10:	2200      	movs	r2, #0
 800ba12:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ba16:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
 800ba1a:	e772      	b.n	800b902 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800ba1c:	2304      	movs	r3, #4
 800ba1e:	4630      	mov	r0, r6
 800ba20:	9303      	str	r3, [sp, #12]
 800ba22:	4957      	ldr	r1, [pc, #348]	; (800bb80 <ArtNetParams::callbackFunction(char const*)+0x2c8>)
 800ba24:	ab03      	add	r3, sp, #12
 800ba26:	aa04      	add	r2, sp, #16
 800ba28:	f009 fa26 	bl	8014e78 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800ba2c:	b9c0      	cbnz	r0, 800ba60 <ArtNetParams::callbackFunction(char const*)+0x1a8>
 800ba2e:	2304      	movs	r3, #4
 800ba30:	4954      	ldr	r1, [pc, #336]	; (800bb84 <ArtNetParams::callbackFunction(char const*)+0x2cc>)
 800ba32:	aa04      	add	r2, sp, #16
 800ba34:	3b01      	subs	r3, #1
 800ba36:	d206      	bcs.n	800ba46 <ArtNetParams::callbackFunction(char const*)+0x18e>
 800ba38:	2301      	movs	r3, #1
 800ba3a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 800ba3e:	6863      	ldr	r3, [r4, #4]
 800ba40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ba44:	e75d      	b.n	800b902 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800ba46:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ba4a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800ba4e:	4285      	cmp	r5, r0
 800ba50:	d0f0      	beq.n	800ba34 <ArtNetParams::callbackFunction(char const*)+0x17c>
 800ba52:	2200      	movs	r2, #0
 800ba54:	6863      	ldr	r3, [r4, #4]
 800ba56:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
 800ba5a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800ba5e:	e750      	b.n	800b902 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800ba60:	2500      	movs	r5, #0
 800ba62:	4f49      	ldr	r7, [pc, #292]	; (800bb88 <ArtNetParams::callbackFunction(char const*)+0x2d0>)
 800ba64:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800bb8c <ArtNetParams::callbackFunction(char const*)+0x2d4>
 800ba68:	f8df 9124 	ldr.w	r9, [pc, #292]	; 800bb90 <ArtNetParams::callbackFunction(char const*)+0x2d8>
 800ba6c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800bb94 <ArtNetParams::callbackFunction(char const*)+0x2dc>
 800ba70:	4639      	mov	r1, r7
 800ba72:	4630      	mov	r0, r6
 800ba74:	f10d 0205 	add.w	r2, sp, #5
 800ba78:	f009 fb2c 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ba7c:	b9b8      	cbnz	r0, 800baae <ArtNetParams::callbackFunction(char const*)+0x1f6>
 800ba7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba82:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800ba86:	6862      	ldr	r2, [r4, #4]
 800ba88:	280f      	cmp	r0, #15
 800ba8a:	fa03 f305 	lsl.w	r3, r3, r5
 800ba8e:	eb04 0105 	add.w	r1, r4, r5
 800ba92:	d803      	bhi.n	800ba9c <ArtNetParams::callbackFunction(char const*)+0x1e4>
 800ba94:	f881 006b 	strb.w	r0, [r1, #107]	; 0x6b
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	e732      	b.n	800b902 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800ba9c:	3501      	adds	r5, #1
 800ba9e:	f881 506b 	strb.w	r5, [r1, #107]	; 0x6b
 800baa2:	ea22 0203 	bic.w	r2, r2, r3
 800baa6:	6062      	str	r2, [r4, #4]
 800baa8:	b025      	add	sp, #148	; 0x94
 800baaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baae:	f04f 0b12 	mov.w	fp, #18
 800bab2:	2303      	movs	r3, #3
 800bab4:	fb0b fb05 	mul.w	fp, fp, r5
 800bab8:	9303      	str	r3, [sp, #12]
 800baba:	4630      	mov	r0, r6
 800babc:	ab03      	add	r3, sp, #12
 800babe:	aa04      	add	r2, sp, #16
 800bac0:	eb08 010b 	add.w	r1, r8, fp
 800bac4:	f009 f9d8 	bl	8014e78 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800bac8:	b9f0      	cbnz	r0, 800bb08 <ArtNetParams::callbackFunction(char const*)+0x250>
 800baca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bace:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800bad2:	40ab      	lsls	r3, r5
 800bad4:	f041 0120 	orr.w	r1, r1, #32
 800bad8:	296c      	cmp	r1, #108	; 0x6c
 800bada:	6862      	ldr	r2, [r4, #4]
 800badc:	4425      	add	r5, r4
 800bade:	d10f      	bne.n	800bb00 <ArtNetParams::callbackFunction(char const*)+0x248>
 800bae0:	f89d 1011 	ldrb.w	r1, [sp, #17]
 800bae4:	f041 0120 	orr.w	r1, r1, #32
 800bae8:	2974      	cmp	r1, #116	; 0x74
 800baea:	d109      	bne.n	800bb00 <ArtNetParams::callbackFunction(char const*)+0x248>
 800baec:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800baf0:	f041 0120 	orr.w	r1, r1, #32
 800baf4:	2970      	cmp	r1, #112	; 0x70
 800baf6:	d103      	bne.n	800bb00 <ArtNetParams::callbackFunction(char const*)+0x248>
 800baf8:	2101      	movs	r1, #1
 800bafa:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800bafe:	e7cb      	b.n	800ba98 <ArtNetParams::callbackFunction(char const*)+0x1e0>
 800bb00:	2100      	movs	r1, #0
 800bb02:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800bb06:	e7cc      	b.n	800baa2 <ArtNetParams::callbackFunction(char const*)+0x1ea>
 800bb08:	2304      	movs	r3, #4
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	9303      	str	r3, [sp, #12]
 800bb0e:	aa04      	add	r2, sp, #16
 800bb10:	ab03      	add	r3, sp, #12
 800bb12:	eb09 1105 	add.w	r1, r9, r5, lsl #4
 800bb16:	f009 f9af 	bl	8014e78 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800bb1a:	2305      	movs	r3, #5
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d13b      	bne.n	800bb98 <ArtNetParams::callbackFunction(char const*)+0x2e0>
 800bb20:	4a18      	ldr	r2, [pc, #96]	; (800bb84 <ArtNetParams::callbackFunction(char const*)+0x2cc>)
 800bb22:	a904      	add	r1, sp, #16
 800bb24:	3b01      	subs	r3, #1
 800bb26:	d108      	bne.n	800bb3a <ArtNetParams::callbackFunction(char const*)+0x282>
 800bb28:	2201      	movs	r2, #1
 800bb2a:	1963      	adds	r3, r4, r5
 800bb2c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800bb30:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800bb34:	6863      	ldr	r3, [r4, #4]
 800bb36:	40aa      	lsls	r2, r5
 800bb38:	e7ae      	b.n	800ba98 <ArtNetParams::callbackFunction(char const*)+0x1e0>
 800bb3a:	f811 6b01 	ldrb.w	r6, [r1], #1
 800bb3e:	f812 0b01 	ldrb.w	r0, [r2], #1
 800bb42:	4286      	cmp	r6, r0
 800bb44:	d0ee      	beq.n	800bb24 <ArtNetParams::callbackFunction(char const*)+0x26c>
 800bb46:	2100      	movs	r1, #0
 800bb48:	1962      	adds	r2, r4, r5
 800bb4a:	6863      	ldr	r3, [r4, #4]
 800bb4c:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
 800bb50:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800bb54:	40aa      	lsls	r2, r5
 800bb56:	ea23 0302 	bic.w	r3, r3, r2
 800bb5a:	e6d2      	b.n	800b902 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800bb5c:	0801814e 	stmdaeq	r1, {r1, r2, r3, r6, r8, pc}
 800bb60:	080181bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r8, pc}
 800bb64:	080181a7 	stmdaeq	r1, {r0, r1, r2, r5, r7, r8, pc}
 800bb68:	080181b1 	stmdaeq	r1, {r0, r4, r5, r7, r8, pc}
 800bb6c:	0801823c 	stmdaeq	r1, {r2, r3, r4, r5, r9, pc}
 800bb70:	08018226 	stmdaeq	r1, {r1, r2, r5, r9, pc}
 800bb74:	08018256 	stmdaeq	r1, {r1, r2, r4, r6, r9, pc}
 800bb78:	0801825a 	stmdaeq	r1, {r1, r3, r4, r6, r9, pc}
 800bb7c:	0801a182 	stmdaeq	r1, {r1, r7, r8, sp, pc}
 800bb80:	08018261 	stmdaeq	r1, {r0, r5, r6, r9, pc}
 800bb84:	080180ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, pc}
 800bb88:	0801a19a 	stmdaeq	r1, {r1, r3, r4, r7, r8, sp, pc}
 800bb8c:	0801a26a 	stmdaeq	r1, {r1, r3, r5, r6, r9, sp, pc}
 800bb90:	08018167 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, pc}
 800bb94:	0801a2cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r9, sp, pc}
 800bb98:	9303      	str	r3, [sp, #12]
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	ab03      	add	r3, sp, #12
 800bb9e:	aa04      	add	r2, sp, #16
 800bba0:	eb0a 010b 	add.w	r1, sl, fp
 800bba4:	f009 f968 	bl	8014e78 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800bba8:	bb60      	cbnz	r0, 800bc04 <ArtNetParams::callbackFunction(char const*)+0x34c>
 800bbaa:	2201      	movs	r2, #1
 800bbac:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 800bbb0:	40aa      	lsls	r2, r5
 800bbb2:	ea23 0302 	bic.w	r3, r3, r2
 800bbb6:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800bbba:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800bbbe:	f042 0220 	orr.w	r2, r2, #32
 800bbc2:	2a69      	cmp	r2, #105	; 0x69
 800bbc4:	d118      	bne.n	800bbf8 <ArtNetParams::callbackFunction(char const*)+0x340>
 800bbc6:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800bbca:	f042 0220 	orr.w	r2, r2, #32
 800bbce:	2a6e      	cmp	r2, #110	; 0x6e
 800bbd0:	d112      	bne.n	800bbf8 <ArtNetParams::callbackFunction(char const*)+0x340>
 800bbd2:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800bbd6:	f042 0220 	orr.w	r2, r2, #32
 800bbda:	2a70      	cmp	r2, #112	; 0x70
 800bbdc:	d10c      	bne.n	800bbf8 <ArtNetParams::callbackFunction(char const*)+0x340>
 800bbde:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800bbe2:	f042 0220 	orr.w	r2, r2, #32
 800bbe6:	2a75      	cmp	r2, #117	; 0x75
 800bbe8:	d106      	bne.n	800bbf8 <ArtNetParams::callbackFunction(char const*)+0x340>
 800bbea:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800bbee:	f042 0220 	orr.w	r2, r2, #32
 800bbf2:	2a74      	cmp	r2, #116	; 0x74
 800bbf4:	f43f af58 	beq.w	800baa8 <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	40aa      	lsls	r2, r5
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800bc02:	e751      	b.n	800baa8 <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800bc04:	2118      	movs	r1, #24
 800bc06:	4b15      	ldr	r3, [pc, #84]	; (800bc5c <ArtNetParams::callbackFunction(char const*)+0x3a4>)
 800bc08:	4630      	mov	r0, r6
 800bc0a:	fb01 3105 	mla	r1, r1, r5, r3
 800bc0e:	aa02      	add	r2, sp, #8
 800bc10:	f009 f9d8 	bl	8014fc4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800bc14:	b968      	cbnz	r0, 800bc32 <ArtNetParams::callbackFunction(char const*)+0x37a>
 800bc16:	2201      	movs	r2, #1
 800bc18:	9902      	ldr	r1, [sp, #8]
 800bc1a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc1e:	40aa      	lsls	r2, r5
 800bc20:	f8c3 107b 	str.w	r1, [r3, #123]	; 0x7b
 800bc24:	b292      	uxth	r2, r2
 800bc26:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800bc2a:	b1a1      	cbz	r1, 800bc56 <ArtNetParams::callbackFunction(char const*)+0x39e>
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800bc32:	3501      	adds	r5, #1
 800bc34:	2d04      	cmp	r5, #4
 800bc36:	f107 0710 	add.w	r7, r7, #16
 800bc3a:	f47f af19 	bne.w	800ba70 <ArtNetParams::callbackFunction(char const*)+0x1b8>
 800bc3e:	4630      	mov	r0, r6
 800bc40:	4907      	ldr	r1, [pc, #28]	; (800bc60 <ArtNetParams::callbackFunction(char const*)+0x3a8>)
 800bc42:	f10d 0205 	add.w	r2, sp, #5
 800bc46:	f009 fa45 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	f47f af2c 	bne.w	800baa8 <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800bc50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bc54:	e63d      	b.n	800b8d2 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800bc56:	ea23 0302 	bic.w	r3, r3, r2
 800bc5a:	e7e8      	b.n	800bc2e <ArtNetParams::callbackFunction(char const*)+0x376>
 800bc5c:	080181c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, pc}
 800bc60:	08018159 	stmdaeq	r1, {r0, r3, r4, r6, r8, pc}

0800bc64 <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800bc64:	f7ff be28 	b.w	800b8b8 <ArtNetParams::callbackFunction(char const*)>

0800bc68 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
 800bc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc6c:	4604      	mov	r4, r0
 800bc6e:	4615      	mov	r5, r2
 800bc70:	461e      	mov	r6, r3
 800bc72:	b086      	sub	sp, #24
 800bc74:	3004      	adds	r0, #4
 800bc76:	2900      	cmp	r1, #0
 800bc78:	f000 814b 	beq.w	800bf12 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2aa>
 800bc7c:	2287      	movs	r2, #135	; 0x87
 800bc7e:	f009 ff62 	bl	8015b46 <memmove>
 800bc82:	4633      	mov	r3, r6
 800bc84:	462a      	mov	r2, r5
 800bc86:	49a6      	ldr	r1, [pc, #664]	; (800bf20 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800bc88:	a803      	add	r0, sp, #12
 800bc8a:	f008 ffed 	bl	8014c68 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800bc8e:	2500      	movs	r5, #0
 800bc90:	4ea4      	ldr	r6, [pc, #656]	; (800bf24 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800bc92:	f8df 8294 	ldr.w	r8, [pc, #660]	; 800bf28 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>
 800bc96:	4fa5      	ldr	r7, [pc, #660]	; (800bf2c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800bc98:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 800bc9c:	4631      	mov	r1, r6
 800bc9e:	412b      	asrs	r3, r5
 800bca0:	f013 0f01 	tst.w	r3, #1
 800bca4:	ea6f 0303 	mvn.w	r3, r3
 800bca8:	bf0c      	ite	eq
 800bcaa:	4642      	moveq	r2, r8
 800bcac:	463a      	movne	r2, r7
 800bcae:	f003 0301 	and.w	r3, r3, #1
 800bcb2:	a803      	add	r0, sp, #12
 800bcb4:	3501      	adds	r5, #1
 800bcb6:	f7ff fd47 	bl	800b748 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800bcba:	2d04      	cmp	r5, #4
 800bcbc:	f106 0612 	add.w	r6, r6, #18
 800bcc0:	d1ea      	bne.n	800bc98 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30>
 800bcc2:	6863      	ldr	r3, [r4, #4]
 800bcc4:	7a22      	ldrb	r2, [r4, #8]
 800bcc6:	499a      	ldr	r1, [pc, #616]	; (800bf30 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800bcc8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bccc:	a803      	add	r0, sp, #12
 800bcce:	f7ff fd13 	bl	800b6f8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800bcd2:	6863      	ldr	r3, [r4, #4]
 800bcd4:	7a62      	ldrb	r2, [r4, #9]
 800bcd6:	4997      	ldr	r1, [pc, #604]	; (800bf34 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800bcd8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bcdc:	a803      	add	r0, sp, #12
 800bcde:	f7ff fd0b 	bl	800b6f8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800bce2:	4995      	ldr	r1, [pc, #596]	; (800bf38 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 800bce4:	a803      	add	r0, sp, #12
 800bce6:	f009 f845 	bl	8014d74 <PropertiesBuilder::AddComment(char const*)>
 800bcea:	2500      	movs	r5, #0
 800bcec:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 800bcf0:	4e92      	ldr	r6, [pc, #584]	; (800bf3c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 800bcf2:	f104 076b 	add.w	r7, r4, #107	; 0x6b
 800bcf6:	6862      	ldr	r2, [r4, #4]
 800bcf8:	fa08 f305 	lsl.w	r3, r8, r5
 800bcfc:	4393      	bics	r3, r2
 800bcfe:	bf0c      	ite	eq
 800bd00:	2301      	moveq	r3, #1
 800bd02:	2300      	movne	r3, #0
 800bd04:	4631      	mov	r1, r6
 800bd06:	f817 2b01 	ldrb.w	r2, [r7], #1
 800bd0a:	a803      	add	r0, sp, #12
 800bd0c:	3501      	adds	r5, #1
 800bd0e:	f7ff fcf3 	bl	800b6f8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800bd12:	2d04      	cmp	r5, #4
 800bd14:	f106 0610 	add.w	r6, r6, #16
 800bd18:	d1ed      	bne.n	800bcf6 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 800bd1a:	4989      	ldr	r1, [pc, #548]	; (800bf40 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>)
 800bd1c:	a803      	add	r0, sp, #12
 800bd1e:	f009 f829 	bl	8014d74 <PropertiesBuilder::AddComment(char const*)>
 800bd22:	6863      	ldr	r3, [r4, #4]
 800bd24:	f104 0622 	add.w	r6, r4, #34	; 0x22
 800bd28:	f013 0501 	ands.w	r5, r3, #1
 800bd2c:	d108      	bne.n	800bd40 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xd8>
 800bd2e:	4b85      	ldr	r3, [pc, #532]	; (800bf44 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800bd30:	223f      	movs	r2, #63	; 0x3f
 800bd32:	6819      	ldr	r1, [r3, #0]
 800bd34:	4630      	mov	r0, r6
 800bd36:	3162      	adds	r1, #98	; 0x62
 800bd38:	f7ff fd56 	bl	800b7e8 <strncpy.isra.0>
 800bd3c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800bd40:	6863      	ldr	r3, [r4, #4]
 800bd42:	4632      	mov	r2, r6
 800bd44:	f003 0301 	and.w	r3, r3, #1
 800bd48:	497f      	ldr	r1, [pc, #508]	; (800bf48 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e0>)
 800bd4a:	a803      	add	r0, sp, #12
 800bd4c:	f7ff fcfc 	bl	800b748 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800bd50:	6863      	ldr	r3, [r4, #4]
 800bd52:	f104 0610 	add.w	r6, r4, #16
 800bd56:	f013 0502 	ands.w	r5, r3, #2
 800bd5a:	d108      	bne.n	800bd6e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 800bd5c:	4b79      	ldr	r3, [pc, #484]	; (800bf44 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800bd5e:	2211      	movs	r2, #17
 800bd60:	6819      	ldr	r1, [r3, #0]
 800bd62:	4630      	mov	r0, r6
 800bd64:	3150      	adds	r1, #80	; 0x50
 800bd66:	f7ff fd3f 	bl	800b7e8 <strncpy.isra.0>
 800bd6a:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800bd6e:	6863      	ldr	r3, [r4, #4]
 800bd70:	4632      	mov	r2, r6
 800bd72:	4976      	ldr	r1, [pc, #472]	; (800bf4c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e4>)
 800bd74:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bd78:	a803      	add	r0, sp, #12
 800bd7a:	f7ff fce5 	bl	800b748 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800bd7e:	2104      	movs	r1, #4
 800bd80:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800bd84:	6863      	ldr	r3, [r4, #4]
 800bd86:	ba52      	rev16	r2, r2
 800bd88:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800bd8c:	b292      	uxth	r2, r2
 800bd8e:	9100      	str	r1, [sp, #0]
 800bd90:	a803      	add	r0, sp, #12
 800bd92:	496f      	ldr	r1, [pc, #444]	; (800bf50 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e8>)
 800bd94:	f009 f808 	bl	8014da8 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>
 800bd98:	496e      	ldr	r1, [pc, #440]	; (800bf54 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ec>)
 800bd9a:	a803      	add	r0, sp, #12
 800bd9c:	f008 ffea 	bl	8014d74 <PropertiesBuilder::AddComment(char const*)>
 800bda0:	6862      	ldr	r2, [r4, #4]
 800bda2:	496d      	ldr	r1, [pc, #436]	; (800bf58 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f0>)
 800bda4:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800bda8:	a803      	add	r0, sp, #12
 800bdaa:	f7ff fcf5 	bl	800b798 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800bdae:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800bf5c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f4>
 800bdb2:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 800bdb6:	6863      	ldr	r3, [r4, #4]
 800bdb8:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bf60 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f8>
 800bdbc:	4969      	ldr	r1, [pc, #420]	; (800bf64 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2fc>)
 800bdbe:	2a00      	cmp	r2, #0
 800bdc0:	bf0c      	ite	eq
 800bdc2:	464a      	moveq	r2, r9
 800bdc4:	4642      	movne	r2, r8
 800bdc6:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800bdca:	a803      	add	r0, sp, #12
 800bdcc:	f7ff fcbc 	bl	800b748 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800bdd0:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
 800bdd4:	6863      	ldr	r3, [r4, #4]
 800bdd6:	4964      	ldr	r1, [pc, #400]	; (800bf68 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>)
 800bdd8:	4a64      	ldr	r2, [pc, #400]	; (800bf6c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>)
 800bdda:	f3c3 5380 	ubfx	r3, r3, #22, #1
 800bdde:	2800      	cmp	r0, #0
 800bde0:	bf18      	it	ne
 800bde2:	460a      	movne	r2, r1
 800bde4:	4962      	ldr	r1, [pc, #392]	; (800bf70 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x308>)
 800bde6:	a803      	add	r0, sp, #12
 800bde8:	f7ff fcae 	bl	800b748 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800bdec:	2500      	movs	r5, #0
 800bdee:	4e61      	ldr	r6, [pc, #388]	; (800bf74 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30c>)
 800bdf0:	f8df a184 	ldr.w	sl, [pc, #388]	; 800bf78 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x310>
 800bdf4:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800bdf8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bdfc:	6861      	ldr	r1, [r4, #4]
 800bdfe:	40ab      	lsls	r3, r5
 800be00:	438b      	bics	r3, r1
 800be02:	f04f 0112 	mov.w	r1, #18
 800be06:	f817 2b01 	ldrb.w	r2, [r7], #1
 800be0a:	bf0c      	ite	eq
 800be0c:	2301      	moveq	r3, #1
 800be0e:	2300      	movne	r3, #0
 800be10:	fb01 a105 	mla	r1, r1, r5, sl
 800be14:	2a00      	cmp	r2, #0
 800be16:	bf0c      	ite	eq
 800be18:	464a      	moveq	r2, r9
 800be1a:	4642      	movne	r2, r8
 800be1c:	a803      	add	r0, sp, #12
 800be1e:	f7ff fc93 	bl	800b748 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800be22:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800be26:	6862      	ldr	r2, [r4, #4]
 800be28:	40ab      	lsls	r3, r5
 800be2a:	4393      	bics	r3, r2
 800be2c:	7938      	ldrb	r0, [r7, #4]
 800be2e:	494e      	ldr	r1, [pc, #312]	; (800bf68 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>)
 800be30:	4a4e      	ldr	r2, [pc, #312]	; (800bf6c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>)
 800be32:	bf0c      	ite	eq
 800be34:	2301      	moveq	r3, #1
 800be36:	2300      	movne	r3, #0
 800be38:	3501      	adds	r5, #1
 800be3a:	2800      	cmp	r0, #0
 800be3c:	bf18      	it	ne
 800be3e:	460a      	movne	r2, r1
 800be40:	4631      	mov	r1, r6
 800be42:	a803      	add	r0, sp, #12
 800be44:	f7ff fc80 	bl	800b748 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800be48:	2d04      	cmp	r5, #4
 800be4a:	f106 0610 	add.w	r6, r6, #16
 800be4e:	d1d3      	bne.n	800bdf8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x190>
 800be50:	6863      	ldr	r3, [r4, #4]
 800be52:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 800be56:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800be5a:	4948      	ldr	r1, [pc, #288]	; (800bf7c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x314>)
 800be5c:	a803      	add	r0, sp, #12
 800be5e:	f7ff fc4b 	bl	800b6f8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800be62:	6862      	ldr	r2, [r4, #4]
 800be64:	4946      	ldr	r1, [pc, #280]	; (800bf80 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x318>)
 800be66:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800be6a:	a803      	add	r0, sp, #12
 800be6c:	f7ff fc94 	bl	800b798 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800be70:	4944      	ldr	r1, [pc, #272]	; (800bf84 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x31c>)
 800be72:	a803      	add	r0, sp, #12
 800be74:	f008 ff7e 	bl	8014d74 <PropertiesBuilder::AddComment(char const*)>
 800be78:	2500      	movs	r5, #0
 800be7a:	2601      	movs	r6, #1
 800be7c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800bf88 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x320>
 800be80:	4f30      	ldr	r7, [pc, #192]	; (800bf44 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800be82:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800be86:	fa06 f305 	lsl.w	r3, r6, r5
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	401a      	ands	r2, r3
 800be8e:	4293      	cmp	r3, r2
 800be90:	bf0c      	ite	eq
 800be92:	2301      	moveq	r3, #1
 800be94:	2300      	movne	r3, #0
 800be96:	f105 021c 	add.w	r2, r5, #28
 800be9a:	d008      	beq.n	800beae <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x246>
 800be9c:	6839      	ldr	r1, [r7, #0]
 800be9e:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800bea2:	f8d1 0b7c 	ldr.w	r0, [r1, #2940]	; 0xb7c
 800bea6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800beaa:	f8c1 000b 	str.w	r0, [r1, #11]
 800beae:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800beb2:	4641      	mov	r1, r8
 800beb4:	f8d2 200b 	ldr.w	r2, [r2, #11]
 800beb8:	a803      	add	r0, sp, #12
 800beba:	3501      	adds	r5, #1
 800bebc:	f008 ff16 	bl	8014cec <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800bec0:	2d04      	cmp	r5, #4
 800bec2:	f108 0818 	add.w	r8, r8, #24
 800bec6:	d1dc      	bne.n	800be82 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x21a>
 800bec8:	4930      	ldr	r1, [pc, #192]	; (800bf8c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x324>)
 800beca:	a803      	add	r0, sp, #12
 800becc:	f008 ff52 	bl	8014d74 <PropertiesBuilder::AddComment(char const*)>
 800bed0:	6862      	ldr	r2, [r4, #4]
 800bed2:	492f      	ldr	r1, [pc, #188]	; (800bf90 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x328>)
 800bed4:	f3c2 62c0 	ubfx	r2, r2, #27, #1
 800bed8:	a803      	add	r0, sp, #12
 800beda:	f7ff fc5d 	bl	800b798 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800bede:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800bee2:	b17b      	cbz	r3, 800bf04 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>
 800bee4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800bee8:	9b03      	ldr	r3, [sp, #12]
 800beea:	4413      	add	r3, r2
 800beec:	227d      	movs	r2, #125	; 0x7d
 800beee:	f803 2c01 	strb.w	r2, [r3, #-1]
 800bef2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800bef6:	9903      	ldr	r1, [sp, #12]
 800bef8:	54ca      	strb	r2, [r1, r3]
 800befa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800befe:	3301      	adds	r3, #1
 800bf00:	f8ad 3012 	strh.w	r3, [sp, #18]
 800bf04:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800bf08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf0a:	601a      	str	r2, [r3, #0]
 800bf0c:	b006      	add	sp, #24
 800bf0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf12:	6823      	ldr	r3, [r4, #0]
 800bf14:	4601      	mov	r1, r0
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	4618      	mov	r0, r3
 800bf1a:	68d2      	ldr	r2, [r2, #12]
 800bf1c:	4790      	blx	r2
 800bf1e:	e6b0      	b.n	800bc82 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a>
 800bf20:	0801826a 	stmdaeq	r1, {r1, r3, r5, r6, r9, pc}
 800bf24:	0801a2cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r9, sp, pc}
 800bf28:	080180f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, pc}
 800bf2c:	080180f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, pc}
 800bf30:	08018256 	stmdaeq	r1, {r1, r2, r4, r6, r9, pc}
 800bf34:	0801825a 	stmdaeq	r1, {r1, r3, r4, r6, r9, pc}
 800bf38:	0801810d 	stmdaeq	r1, {r0, r2, r3, r8, pc}
 800bf3c:	0801a19a 	stmdaeq	r1, {r1, r3, r4, r7, r8, sp, pc}
 800bf40:	08018126 	stmdaeq	r1, {r1, r2, r5, r8, pc}
 800bf44:	2000c170 	andcs	ip, r0, r0, ror r1
 800bf48:	080181a7 	stmdaeq	r1, {r0, r1, r2, r5, r7, r8, pc}
 800bf4c:	080181bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r8, pc}
 800bf50:	080181b1 	stmdaeq	r1, {r0, r4, r5, r7, r8, pc}
 800bf54:	0801812b 	stmdaeq	r1, {r0, r1, r3, r5, r8, pc}
 800bf58:	0801814e 	stmdaeq	r1, {r1, r2, r3, r6, r8, pc}
 800bf5c:	08018102 	stmdaeq	r1, {r1, r8, pc}
 800bf60:	080180fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, pc}
 800bf64:	0801a182 	stmdaeq	r1, {r1, r7, r8, sp, pc}
 800bf68:	080180ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, pc}
 800bf6c:	08018106 	stmdaeq	r1, {r1, r2, r8, pc}
 800bf70:	08018261 	stmdaeq	r1, {r0, r5, r6, r9, pc}
 800bf74:	08018167 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, pc}
 800bf78:	0801a26a 	stmdaeq	r1, {r1, r3, r5, r6, r9, sp, pc}
 800bf7c:	0801823c 	stmdaeq	r1, {r2, r3, r4, r5, r9, pc}
 800bf80:	08018226 	stmdaeq	r1, {r1, r2, r5, r9, pc}
 800bf84:	0801813a 	stmdaeq	r1, {r1, r3, r4, r5, r8, pc}
 800bf88:	080181c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, pc}
 800bf8c:	08018144 	stmdaeq	r1, {r2, r6, r8, pc}
 800bf90:	08018159 	stmdaeq	r1, {r0, r3, r4, r6, r8, pc}

0800bf94 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
 800bf94:	b513      	push	{r0, r1, r4, lr}
 800bf96:	6804      	ldr	r4, [r0, #0]
 800bf98:	b914      	cbnz	r4, 800bfa0 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800bf9a:	601c      	str	r4, [r3, #0]
 800bf9c:	b002      	add	sp, #8
 800bf9e:	bd10      	pop	{r4, pc}
 800bfa0:	9300      	str	r3, [sp, #0]
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	460a      	mov	r2, r1
 800bfa6:	2100      	movs	r1, #0
 800bfa8:	f7ff fe5e 	bl	800bc68 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
 800bfac:	e7f6      	b.n	800bf9c <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800bfae <ArtNetParams::Set(ArtNetNode*)>:
 800bfae:	6843      	ldr	r3, [r0, #4]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f000 808b 	beq.w	800c0cc <ArtNetParams::Set(ArtNetNode*)+0x11e>
 800bfb6:	079a      	lsls	r2, r3, #30
 800bfb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfbc:	4604      	mov	r4, r0
 800bfbe:	460d      	mov	r5, r1
 800bfc0:	d504      	bpl.n	800bfcc <ArtNetParams::Set(ArtNetNode*)+0x1e>
 800bfc2:	f100 0110 	add.w	r1, r0, #16
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	f7fd ff68 	bl	8009e9c <ArtNetNode::SetShortName(char const*)>
 800bfcc:	6863      	ldr	r3, [r4, #4]
 800bfce:	07db      	lsls	r3, r3, #31
 800bfd0:	d504      	bpl.n	800bfdc <ArtNetParams::Set(ArtNetNode*)+0x2e>
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800bfd8:	f7fd ff88 	bl	8009eec <ArtNetNode::SetLongName(char const*)>
 800bfdc:	6863      	ldr	r3, [r4, #4]
 800bfde:	075f      	lsls	r7, r3, #29
 800bfe0:	d504      	bpl.n	800bfec <ArtNetParams::Set(ArtNetNode*)+0x3e>
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	7a21      	ldrb	r1, [r4, #8]
 800bfe8:	f7fe fac9 	bl	800a57e <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800bfec:	6863      	ldr	r3, [r4, #4]
 800bfee:	071e      	lsls	r6, r3, #28
 800bff0:	d504      	bpl.n	800bffc <ArtNetParams::Set(ArtNetNode*)+0x4e>
 800bff2:	2200      	movs	r2, #0
 800bff4:	4628      	mov	r0, r5
 800bff6:	7a61      	ldrb	r1, [r4, #9]
 800bff8:	f7fe fa93 	bl	800a522 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800bffc:	6863      	ldr	r3, [r4, #4]
 800bffe:	0558      	lsls	r0, r3, #21
 800c000:	d504      	bpl.n	800c00c <ArtNetParams::Set(ArtNetNode*)+0x5e>
 800c002:	4628      	mov	r0, r5
 800c004:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800c008:	f7fe f83a 	bl	800a080 <ArtNetNode::SetOemValue(unsigned char const*)>
 800c00c:	6863      	ldr	r3, [r4, #4]
 800c00e:	2600      	movs	r6, #0
 800c010:	0519      	lsls	r1, r3, #20
 800c012:	bf44      	itt	mi
 800c014:	f44f 727a 	movmi.w	r2, #1000	; 0x3e8
 800c018:	f894 3066 	ldrbmi.w	r3, [r4, #102]	; 0x66
 800c01c:	f44f 2880 	mov.w	r8, #262144	; 0x40000
 800c020:	bf44      	itt	mi
 800c022:	4353      	mulmi	r3, r2
 800c024:	f8c5 36dc 	strmi.w	r3, [r5, #1756]	; 0x6dc
 800c028:	6863      	ldr	r3, [r4, #4]
 800c02a:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 800c02e:	04da      	lsls	r2, r3, #19
 800c030:	bf48      	it	mi
 800c032:	2301      	movmi	r3, #1
 800c034:	f04f 0a01 	mov.w	sl, #1
 800c038:	bf48      	it	mi
 800c03a:	f885 36ec 	strbmi.w	r3, [r5, #1772]	; 0x6ec
 800c03e:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800c042:	6863      	ldr	r3, [r4, #4]
 800c044:	fa08 f206 	lsl.w	r2, r8, r6
 800c048:	439a      	bics	r2, r3
 800c04a:	bf0c      	ite	eq
 800c04c:	783a      	ldrbeq	r2, [r7, #0]
 800c04e:	f894 206f 	ldrbne.w	r2, [r4, #111]	; 0x6f
 800c052:	4631      	mov	r1, r6
 800c054:	4628      	mov	r0, r5
 800c056:	f7fe faf1 	bl	800a63c <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800c05a:	6863      	ldr	r3, [r4, #4]
 800c05c:	fa09 f206 	lsl.w	r2, r9, r6
 800c060:	439a      	bics	r2, r3
 800c062:	bf0c      	ite	eq
 800c064:	797a      	ldrbeq	r2, [r7, #5]
 800c066:	f894 2074 	ldrbne.w	r2, [r4, #116]	; 0x74
 800c06a:	4631      	mov	r1, r6
 800c06c:	4628      	mov	r0, r5
 800c06e:	f7fe fab4 	bl	800a5da <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800c072:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800c076:	fa0a f306 	lsl.w	r3, sl, r6
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	4393      	bics	r3, r2
 800c07e:	d109      	bne.n	800c094 <ArtNetParams::Set(ArtNetNode*)+0xe6>
 800c080:	f106 031c 	add.w	r3, r6, #28
 800c084:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c088:	4631      	mov	r1, r6
 800c08a:	4628      	mov	r0, r5
 800c08c:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800c090:	f7fe fdee 	bl	800ac70 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>
 800c094:	3601      	adds	r6, #1
 800c096:	2e04      	cmp	r6, #4
 800c098:	f107 0701 	add.w	r7, r7, #1
 800c09c:	d1d1      	bne.n	800c042 <ArtNetParams::Set(ArtNetNode*)+0x94>
 800c09e:	4631      	mov	r1, r6
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 800c0a6:	f7fe fac9 	bl	800a63c <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800c0aa:	4631      	mov	r1, r6
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
 800c0b2:	3601      	adds	r6, #1
 800c0b4:	f7fe fa91 	bl	800a5da <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800c0b8:	2e20      	cmp	r6, #32
 800c0ba:	d1f0      	bne.n	800c09e <ArtNetParams::Set(ArtNetNode*)+0xf0>
 800c0bc:	6863      	ldr	r3, [r4, #4]
 800c0be:	011b      	lsls	r3, r3, #4
 800c0c0:	bf44      	itt	mi
 800c0c2:	2301      	movmi	r3, #1
 800c0c4:	f885 30ac 	strbmi.w	r3, [r5, #172]	; 0xac
 800c0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0cc:	4770      	bx	lr

0800c0ce <ArtNetParams::Dump()>:
 800c0ce:	4770      	bx	lr

0800c0d0 <ArtNetNode::HandleTrigger()>:
 800c0d0:	f890 30be 	ldrb.w	r3, [r0, #190]	; 0xbe
 800c0d4:	4601      	mov	r1, r0
 800c0d6:	2bff      	cmp	r3, #255	; 0xff
 800c0d8:	d103      	bne.n	800c0e2 <ArtNetNode::HandleTrigger()+0x12>
 800c0da:	f890 20bf 	ldrb.w	r2, [r0, #191]	; 0xbf
 800c0de:	2aff      	cmp	r2, #255	; 0xff
 800c0e0:	d009      	beq.n	800c0f6 <ArtNetNode::HandleTrigger()+0x26>
 800c0e2:	f891 204e 	ldrb.w	r2, [r1, #78]	; 0x4e
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d10a      	bne.n	800c100 <ArtNetNode::HandleTrigger()+0x30>
 800c0ea:	f891 20bf 	ldrb.w	r2, [r1, #191]	; 0xbf
 800c0ee:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d104      	bne.n	800c100 <ArtNetNode::HandleTrigger()+0x30>
 800c0f6:	6988      	ldr	r0, [r1, #24]
 800c0f8:	31c0      	adds	r1, #192	; 0xc0
 800c0fa:	6803      	ldr	r3, [r0, #0]
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	4718      	bx	r3
 800c100:	4770      	bx	lr
	...

0800c104 <e131::universe_to_multicast_ip(unsigned short)>:
 800c104:	b513      	push	{r0, r1, r4, lr}
 800c106:	4604      	mov	r4, r0
 800c108:	a901      	add	r1, sp, #4
 800c10a:	4806      	ldr	r0, [pc, #24]	; (800c124 <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 800c10c:	f009 fc60 	bl	80159d0 <inet_aton>
 800c110:	9801      	ldr	r0, [sp, #4]
 800c112:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800c116:	0224      	lsls	r4, r4, #8
 800c118:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800c11c:	4320      	orrs	r0, r4
 800c11e:	b002      	add	sp, #8
 800c120:	bd10      	pop	{r4, pc}
 800c122:	bf00      	nop
 800c124:	0801827b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r9, pc}

0800c128 <memset.constprop.0.isra.0>:
 800c128:	2300      	movs	r3, #0
 800c12a:	4401      	add	r1, r0
 800c12c:	4288      	cmp	r0, r1
 800c12e:	d100      	bne.n	800c132 <memset.constprop.0.isra.0+0xa>
 800c130:	4770      	bx	lr
 800c132:	f800 3b01 	strb.w	r3, [r0], #1
 800c136:	e7f9      	b.n	800c12c <memset.constprop.0.isra.0+0x4>

0800c138 <memcpy.isra.0>:
 800c138:	3801      	subs	r0, #1
 800c13a:	440a      	add	r2, r1
 800c13c:	4291      	cmp	r1, r2
 800c13e:	d100      	bne.n	800c142 <memcpy.isra.0+0xa>
 800c140:	4770      	bx	lr
 800c142:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c146:	f800 3f01 	strb.w	r3, [r0, #1]!
 800c14a:	e7f7      	b.n	800c13c <memcpy.isra.0+0x4>

0800c14c <lightset::Data::IOutput(LightSet*, unsigned int) const>:
 800c14c:	f240 6304 	movw	r3, #1540	; 0x604
 800c150:	b470      	push	{r4, r5, r6}
 800c152:	4605      	mov	r5, r0
 800c154:	4608      	mov	r0, r1
 800c156:	4353      	muls	r3, r2
 800c158:	4611      	mov	r1, r2
 800c15a:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800c15e:	18ea      	adds	r2, r5, r3
 800c160:	6803      	ldr	r3, [r0, #0]
 800c162:	691e      	ldr	r6, [r3, #16]
 800c164:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800c168:	46b4      	mov	ip, r6
 800c16a:	192a      	adds	r2, r5, r4
 800c16c:	bc70      	pop	{r4, r5, r6}
 800c16e:	4760      	bx	ip

0800c170 <E131Bridge::Start()>:
 800c170:	6943      	ldr	r3, [r0, #20]
 800c172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c174:	4604      	mov	r4, r0
 800c176:	b35b      	cbz	r3, 800c1d0 <E131Bridge::Start()+0x60>
 800c178:	6983      	ldr	r3, [r0, #24]
 800c17a:	b9cb      	cbnz	r3, 800c1b0 <E131Bridge::Start()+0x40>
 800c17c:	a901      	add	r1, sp, #4
 800c17e:	4818      	ldr	r0, [pc, #96]	; (800c1e0 <E131Bridge::Start()+0x70>)
 800c180:	f009 fc26 	bl	80159d0 <inet_aton>
 800c184:	9b01      	ldr	r3, [sp, #4]
 800c186:	f240 207e 	movw	r0, #638	; 0x27e
 800c18a:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 800c18e:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 800c192:	6223      	str	r3, [r4, #32]
 800c194:	f009 fc18 	bl	80159c8 <operator new(unsigned int)>
 800c198:	61a0      	str	r0, [r4, #24]
 800c19a:	4620      	mov	r0, r4
 800c19c:	f000 fdc4 	bl	800cd28 <E131Bridge::FillDataPacket()>
 800c1a0:	f44f 608f 	mov.w	r0, #1144	; 0x478
 800c1a4:	f009 fc10 	bl	80159c8 <operator new(unsigned int)>
 800c1a8:	61e0      	str	r0, [r4, #28]
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	f000 fd12 	bl	800cbd4 <E131Bridge::FillDiscoveryPacket()>
 800c1b0:	2500      	movs	r5, #0
 800c1b2:	270c      	movs	r7, #12
 800c1b4:	f604 5692 	addw	r6, r4, #3474	; 0xd92
 800c1b8:	fb07 f305 	mul.w	r3, r7, r5
 800c1bc:	5cf3      	ldrb	r3, [r6, r3]
 800c1be:	b123      	cbz	r3, 800c1ca <E131Bridge::Start()+0x5a>
 800c1c0:	6960      	ldr	r0, [r4, #20]
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	6803      	ldr	r3, [r0, #0]
 800c1c6:	689b      	ldr	r3, [r3, #8]
 800c1c8:	4798      	blx	r3
 800c1ca:	3501      	adds	r5, #1
 800c1cc:	2d20      	cmp	r5, #32
 800c1ce:	d1f3      	bne.n	800c1b8 <E131Bridge::Start()+0x48>
 800c1d0:	2102      	movs	r1, #2
 800c1d2:	4b04      	ldr	r3, [pc, #16]	; (800c1e4 <E131Bridge::Start()+0x74>)
 800c1d4:	6818      	ldr	r0, [r3, #0]
 800c1d6:	b003      	add	sp, #12
 800c1d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c1dc:	f009 bb0c 	b.w	80157f8 <LedBlink::SetMode(ledblink::Mode)>
 800c1e0:	0801827b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r9, pc}
 800c1e4:	2001ce48 	andcs	ip, r1, r8, asr #28

0800c1e8 <E131Bridge::Stop()>:
 800c1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ec:	2500      	movs	r5, #0
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	f240 6804 	movw	r8, #1540	; 0x604
 800c1f6:	462e      	mov	r6, r5
 800c1f8:	f880 34f4 	strb.w	r3, [r0, #1268]	; 0x4f4
 800c1fc:	f500 67aa 	add.w	r7, r0, #1360	; 0x550
 800c200:	6860      	ldr	r0, [r4, #4]
 800c202:	b118      	cbz	r0, 800c20c <E131Bridge::Stop()+0x24>
 800c204:	6803      	ldr	r3, [r0, #0]
 800c206:	4629      	mov	r1, r5
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	4798      	blx	r3
 800c20c:	f7fe fb90 	bl	800a930 <lightset::Data::Get()>
 800c210:	2344      	movs	r3, #68	; 0x44
 800c212:	fb08 0005 	mla	r0, r8, r5, r0
 800c216:	436b      	muls	r3, r5
 800c218:	3501      	adds	r5, #1
 800c21a:	2d20      	cmp	r5, #32
 800c21c:	f8c0 6600 	str.w	r6, [r0, #1536]	; 0x600
 800c220:	54fe      	strb	r6, [r7, r3]
 800c222:	d1ed      	bne.n	800c200 <E131Bridge::Stop()+0x18>
 800c224:	6963      	ldr	r3, [r4, #20]
 800c226:	b17b      	cbz	r3, 800c248 <E131Bridge::Stop()+0x60>
 800c228:	2500      	movs	r5, #0
 800c22a:	270c      	movs	r7, #12
 800c22c:	f604 5692 	addw	r6, r4, #3474	; 0xd92
 800c230:	fb07 f305 	mul.w	r3, r7, r5
 800c234:	5cf3      	ldrb	r3, [r6, r3]
 800c236:	b123      	cbz	r3, 800c242 <E131Bridge::Stop()+0x5a>
 800c238:	6960      	ldr	r0, [r4, #20]
 800c23a:	4629      	mov	r1, r5
 800c23c:	6803      	ldr	r3, [r0, #0]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	4798      	blx	r3
 800c242:	3501      	adds	r5, #1
 800c244:	2d20      	cmp	r5, #32
 800c246:	d1f3      	bne.n	800c230 <E131Bridge::Stop()+0x48>
 800c248:	4b03      	ldr	r3, [pc, #12]	; (800c258 <E131Bridge::Stop()+0x70>)
 800c24a:	2100      	movs	r1, #0
 800c24c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c250:	6818      	ldr	r0, [r3, #0]
 800c252:	f009 bad1 	b.w	80157f8 <LedBlink::SetMode(ledblink::Mode)>
 800c256:	bf00      	nop
 800c258:	2001ce48 	andcs	ip, r1, r8, asr #28

0800c25c <E131Bridge::SetSourceName(char const*)>:
 800c25c:	233f      	movs	r3, #63	; 0x3f
 800c25e:	b510      	push	{r4, lr}
 800c260:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800c264:	3901      	subs	r1, #1
 800c266:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c26a:	b92c      	cbnz	r4, 800c278 <E131Bridge::SetSourceName(char const*)+0x1c>
 800c26c:	4413      	add	r3, r2
 800c26e:	429a      	cmp	r2, r3
 800c270:	d006      	beq.n	800c280 <E131Bridge::SetSourceName(char const*)+0x24>
 800c272:	f802 4b01 	strb.w	r4, [r2], #1
 800c276:	e7fa      	b.n	800c26e <E131Bridge::SetSourceName(char const*)+0x12>
 800c278:	3b01      	subs	r3, #1
 800c27a:	f802 4b01 	strb.w	r4, [r2], #1
 800c27e:	d1f2      	bne.n	800c266 <E131Bridge::SetSourceName(char const*)+0xa>
 800c280:	2300      	movs	r3, #0
 800c282:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
 800c286:	bd10      	pop	{r4, pc}

0800c288 <E131Bridge::E131Bridge()>:
 800c288:	2300      	movs	r3, #0
 800c28a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c28e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c290:	e9c0 2300 	strd	r2, r3, [r0]
 800c294:	2201      	movs	r2, #1
 800c296:	4604      	mov	r4, r0
 800c298:	2764      	movs	r7, #100	; 0x64
 800c29a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c29e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800c2a2:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800c2a6:	6743      	str	r3, [r0, #116]	; 0x74
 800c2a8:	4b1e      	ldr	r3, [pc, #120]	; (800c324 <E131Bridge::E131Bridge()+0x9c>)
 800c2aa:	7202      	strb	r2, [r0, #8]
 800c2ac:	b093      	sub	sp, #76	; 0x4c
 800c2ae:	6018      	str	r0, [r3, #0]
 800c2b0:	f500 65a2 	add.w	r5, r0, #1296	; 0x510
 800c2b4:	f500 6259 	add.w	r2, r0, #3472	; 0xd90
 800c2b8:	f500 6671 	add.w	r6, r0, #3856	; 0xf10
 800c2bc:	4628      	mov	r0, r5
 800c2be:	2144      	movs	r1, #68	; 0x44
 800c2c0:	f7ff ff32 	bl	800c128 <memset.constprop.0.isra.0>
 800c2c4:	4610      	mov	r0, r2
 800c2c6:	210c      	movs	r1, #12
 800c2c8:	f7ff ff2e 	bl	800c128 <memset.constprop.0.isra.0>
 800c2cc:	320c      	adds	r2, #12
 800c2ce:	f802 7c03 	strb.w	r7, [r2, #-3]
 800c2d2:	42b2      	cmp	r2, r6
 800c2d4:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800c2d8:	d1f0      	bne.n	800c2bc <E131Bridge::E131Bridge()+0x34>
 800c2da:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800c2de:	211c      	movs	r1, #28
 800c2e0:	f7ff ff22 	bl	800c128 <memset.constprop.0.isra.0>
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	4d10      	ldr	r5, [pc, #64]	; (800c328 <E131Bridge::E131Bridge()+0xa0>)
 800c2e8:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800c2ec:	4a0f      	ldr	r2, [pc, #60]	; (800c32c <E131Bridge::E131Bridge()+0xa4>)
 800c2ee:	682b      	ldr	r3, [r5, #0]
 800c2f0:	2140      	movs	r1, #64	; 0x40
 800c2f2:	331c      	adds	r3, #28
 800c2f4:	9200      	str	r2, [sp, #0]
 800c2f6:	a802      	add	r0, sp, #8
 800c2f8:	4a0d      	ldr	r2, [pc, #52]	; (800c330 <E131Bridge::E131Bridge()+0xa8>)
 800c2fa:	f7fd fa57 	bl	80097ac <snprintf>
 800c2fe:	4620      	mov	r0, r4
 800c300:	a902      	add	r1, sp, #8
 800c302:	f7ff ffab 	bl	800c25c <E131Bridge::SetSourceName(char const*)>
 800c306:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 800c30a:	6828      	ldr	r0, [r5, #0]
 800c30c:	f006 fe0c 	bl	8012f28 <Network::Begin(unsigned short)>
 800c310:	4621      	mov	r1, r4
 800c312:	4b08      	ldr	r3, [pc, #32]	; (800c334 <E131Bridge::E131Bridge()+0xac>)
 800c314:	f841 0b24 	str.w	r0, [r1], #36
 800c318:	6818      	ldr	r0, [r3, #0]
 800c31a:	f009 faf5 	bl	8015908 <Hardware::GetUuid(unsigned char*)>
 800c31e:	4620      	mov	r0, r4
 800c320:	b013      	add	sp, #76	; 0x4c
 800c322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c324:	2000c180 	andcs	ip, r0, r0, lsl #3
 800c328:	2001c724 	andcs	ip, r1, r4, lsr #14
 800c32c:	08017f79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 800c330:	08018287 	stmdaeq	r1, {r0, r1, r2, r7, r9, pc}
 800c334:	2001ce4c 	andcs	ip, r1, ip, asr #28

0800c338 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 800c338:	b570      	push	{r4, r5, r6, lr}
 800c33a:	4604      	mov	r4, r0
 800c33c:	2300      	movs	r3, #0
 800c33e:	2544      	movs	r5, #68	; 0x44
 800c340:	4610      	mov	r0, r2
 800c342:	f504 62a2 	add.w	r2, r4, #1296	; 0x510
 800c346:	4299      	cmp	r1, r3
 800c348:	d004      	beq.n	800c354 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x1c>
 800c34a:	fb05 f603 	mul.w	r6, r5, r3
 800c34e:	5b96      	ldrh	r6, [r2, r6]
 800c350:	4286      	cmp	r6, r0
 800c352:	d00e      	beq.n	800c372 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3a>
 800c354:	3301      	adds	r3, #1
 800c356:	2b20      	cmp	r3, #32
 800c358:	d1f5      	bne.n	800c346 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xe>
 800c35a:	4b06      	ldr	r3, [pc, #24]	; (800c374 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3c>)
 800c35c:	6825      	ldr	r5, [r4, #0]
 800c35e:	681c      	ldr	r4, [r3, #0]
 800c360:	f7ff fed0 	bl	800c104 <e131::universe_to_multicast_ip(unsigned short)>
 800c364:	4629      	mov	r1, r5
 800c366:	4602      	mov	r2, r0
 800c368:	4620      	mov	r0, r4
 800c36a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c36e:	f006 bdef 	b.w	8012f50 <Network::LeaveGroup(int, unsigned int)>
 800c372:	bd70      	pop	{r4, r5, r6, pc}
 800c374:	2001c724 	andcs	ip, r1, r4, lsr #14

0800c378 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800c378:	b570      	push	{r4, r5, r6, lr}
 800c37a:	4604      	mov	r4, r0
 800c37c:	461d      	mov	r5, r3
 800c37e:	b1c1      	cbz	r1, 800c3b2 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 800c380:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800c384:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800c388:	b12a      	cbz	r2, 800c396 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x1e>
 800c38a:	42aa      	cmp	r2, r5
 800c38c:	d017      	beq.n	800c3be <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800c38e:	2120      	movs	r1, #32
 800c390:	4620      	mov	r0, r4
 800c392:	f7ff ffd1 	bl	800c338 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800c396:	4b0a      	ldr	r3, [pc, #40]	; (800c3c0 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>)
 800c398:	8035      	strh	r5, [r6, #0]
 800c39a:	4628      	mov	r0, r5
 800c39c:	6826      	ldr	r6, [r4, #0]
 800c39e:	681c      	ldr	r4, [r3, #0]
 800c3a0:	f7ff feb0 	bl	800c104 <e131::universe_to_multicast_ip(unsigned short)>
 800c3a4:	4631      	mov	r1, r6
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c3ae:	f006 bdcc 	b.w	8012f4a <Network::JoinGroup(int, unsigned int)>
 800c3b2:	b122      	cbz	r2, 800c3be <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800c3b4:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800c3b8:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 800c3bc:	e7e4      	b.n	800c388 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 800c3be:	bd70      	pop	{r4, r5, r6, pc}
 800c3c0:	2001c724 	andcs	ip, r1, r4, lsr #14

0800c3c4 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800c3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c8:	4604      	mov	r4, r0
 800c3ca:	460d      	mov	r5, r1
 800c3cc:	461e      	mov	r6, r3
 800c3ce:	bb02      	cbnz	r2, 800c412 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x4e>
 800c3d0:	291f      	cmp	r1, #31
 800c3d2:	d843      	bhi.n	800c45c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800c3d4:	230c      	movs	r3, #12
 800c3d6:	fb03 0301 	mla	r3, r3, r1, r0
 800c3da:	f893 2d92 	ldrb.w	r2, [r3, #3474]	; 0xd92
 800c3de:	b12a      	cbz	r2, 800c3ec <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x28>
 800c3e0:	f8b3 3d90 	ldrh.w	r3, [r3, #3472]	; 0xd90
 800c3e4:	42b3      	cmp	r3, r6
 800c3e6:	d109      	bne.n	800c3fc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x38>
 800c3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3ec:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800c3f0:	3201      	adds	r2, #1
 800c3f2:	f880 250a 	strb.w	r2, [r0, #1290]	; 0x50a
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	f883 2d92 	strb.w	r2, [r3, #3474]	; 0xd92
 800c3fc:	230c      	movs	r3, #12
 800c3fe:	fb03 4405 	mla	r4, r3, r5, r4
 800c402:	4630      	mov	r0, r6
 800c404:	f8a4 6d90 	strh.w	r6, [r4, #3472]	; 0xd90
 800c408:	f7ff fe7c 	bl	800c104 <e131::universe_to_multicast_ip(unsigned short)>
 800c40c:	f8c4 0d94 	str.w	r0, [r4, #3476]	; 0xd94
 800c410:	e7ea      	b.n	800c3e8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c412:	2a02      	cmp	r2, #2
 800c414:	d122      	bne.n	800c45c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800c416:	291f      	cmp	r1, #31
 800c418:	d8e6      	bhi.n	800c3e8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c41a:	2344      	movs	r3, #68	; 0x44
 800c41c:	fb03 0301 	mla	r3, r3, r1, r0
 800c420:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800c424:	b152      	cbz	r2, 800c43c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x78>
 800c426:	2200      	movs	r2, #0
 800c428:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800c42c:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800c430:	4632      	mov	r2, r6
 800c432:	3b01      	subs	r3, #1
 800c434:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800c438:	f7ff ff7e 	bl	800c338 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800c43c:	230c      	movs	r3, #12
 800c43e:	fb03 4505 	mla	r5, r3, r5, r4
 800c442:	f895 3d92 	ldrb.w	r3, [r5, #3474]	; 0xd92
 800c446:	2b00      	cmp	r3, #0
 800c448:	d0ce      	beq.n	800c3e8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c44a:	2300      	movs	r3, #0
 800c44c:	f885 3d92 	strb.w	r3, [r5, #3474]	; 0xd92
 800c450:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800c454:	3b01      	subs	r3, #1
 800c456:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800c45a:	e7c5      	b.n	800c3e8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c45c:	2344      	movs	r3, #68	; 0x44
 800c45e:	fb03 4305 	mla	r3, r3, r5, r4
 800c462:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800c466:	b1d2      	cbz	r2, 800c49e <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xda>
 800c468:	f8b3 3510 	ldrh.w	r3, [r3, #1296]	; 0x510
 800c46c:	42b3      	cmp	r3, r6
 800c46e:	d0bb      	beq.n	800c3e8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c470:	4632      	mov	r2, r6
 800c472:	4629      	mov	r1, r5
 800c474:	4620      	mov	r0, r4
 800c476:	f7ff ff5f 	bl	800c338 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800c47a:	4b0d      	ldr	r3, [pc, #52]	; (800c4b0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xec>)
 800c47c:	4630      	mov	r0, r6
 800c47e:	681f      	ldr	r7, [r3, #0]
 800c480:	f8d4 8000 	ldr.w	r8, [r4]
 800c484:	f7ff fe3e 	bl	800c104 <e131::universe_to_multicast_ip(unsigned short)>
 800c488:	4641      	mov	r1, r8
 800c48a:	4602      	mov	r2, r0
 800c48c:	4638      	mov	r0, r7
 800c48e:	f006 fd5c 	bl	8012f4a <Network::JoinGroup(int, unsigned int)>
 800c492:	2344      	movs	r3, #68	; 0x44
 800c494:	fb03 4305 	mla	r3, r3, r5, r4
 800c498:	f8a3 6510 	strh.w	r6, [r3, #1296]	; 0x510
 800c49c:	e7a4      	b.n	800c3e8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c49e:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 800c4a2:	3201      	adds	r2, #1
 800c4a4:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800c4ae:	e7e4      	b.n	800c47a <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xb6>
 800c4b0:	2001c724 	andcs	ip, r1, r4, lsr #14

0800c4b4 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 800c4b4:	b953      	cbnz	r3, 800c4cc <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x18>
 800c4b6:	291f      	cmp	r1, #31
 800c4b8:	d811      	bhi.n	800c4de <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x2a>
 800c4ba:	230c      	movs	r3, #12
 800c4bc:	fb03 0001 	mla	r0, r3, r1, r0
 800c4c0:	f8b0 3d90 	ldrh.w	r3, [r0, #3472]	; 0xd90
 800c4c4:	f890 0d92 	ldrb.w	r0, [r0, #3474]	; 0xd92
 800c4c8:	8013      	strh	r3, [r2, #0]
 800c4ca:	4770      	bx	lr
 800c4cc:	2344      	movs	r3, #68	; 0x44
 800c4ce:	fb03 0001 	mla	r0, r3, r1, r0
 800c4d2:	f8b0 3510 	ldrh.w	r3, [r0, #1296]	; 0x510
 800c4d6:	f890 0512 	ldrb.w	r0, [r0, #1298]	; 0x512
 800c4da:	8013      	strh	r3, [r2, #0]
 800c4dc:	4770      	bx	lr
 800c4de:	4618      	mov	r0, r3
 800c4e0:	4770      	bx	lr

0800c4e2 <E131Bridge::UpdateMergeStatus(unsigned int)>:
 800c4e2:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 800c4e6:	b923      	cbnz	r3, 800c4f2 <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 800c4ee:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800c4f2:	2344      	movs	r3, #68	; 0x44
 800c4f4:	fb03 0001 	mla	r0, r3, r1, r0
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	f880 3551 	strb.w	r3, [r0, #1361]	; 0x551
 800c4fe:	4770      	bx	lr

0800c500 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 800c500:	4602      	mov	r2, r0
 800c502:	2044      	movs	r0, #68	; 0x44
 800c504:	4348      	muls	r0, r1
 800c506:	b570      	push	{r4, r5, r6, lr}
 800c508:	1815      	adds	r5, r2, r0
 800c50a:	460c      	mov	r4, r1
 800c50c:	68d3      	ldr	r3, [r2, #12]
 800c50e:	f8d5 1514 	ldr.w	r1, [r5, #1300]	; 0x514
 800c512:	1a5b      	subs	r3, r3, r1
 800c514:	f242 7110 	movw	r1, #10000	; 0x2710
 800c518:	428b      	cmp	r3, r1
 800c51a:	d90a      	bls.n	800c532 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 800c51c:	2600      	movs	r6, #0
 800c51e:	f200 501c 	addw	r0, r0, #1308	; 0x51c
 800c522:	2110      	movs	r1, #16
 800c524:	f8c5 6518 	str.w	r6, [r5, #1304]	; 0x518
 800c528:	4410      	add	r0, r2
 800c52a:	f7ff fdfd 	bl	800c128 <memset.constprop.0.isra.0>
 800c52e:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 800c532:	2344      	movs	r3, #68	; 0x44
 800c534:	435c      	muls	r4, r3
 800c536:	1915      	adds	r5, r2, r4
 800c538:	f8d5 1530 	ldr.w	r1, [r5, #1328]	; 0x530
 800c53c:	68d3      	ldr	r3, [r2, #12]
 800c53e:	1a5b      	subs	r3, r3, r1
 800c540:	f242 7110 	movw	r1, #10000	; 0x2710
 800c544:	428b      	cmp	r3, r1
 800c546:	d90a      	bls.n	800c55e <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800c548:	2600      	movs	r6, #0
 800c54a:	f504 64a7 	add.w	r4, r4, #1336	; 0x538
 800c54e:	2110      	movs	r1, #16
 800c550:	f8c5 6534 	str.w	r6, [r5, #1332]	; 0x534
 800c554:	1910      	adds	r0, r2, r4
 800c556:	f7ff fde7 	bl	800c128 <memset.constprop.0.isra.0>
 800c55a:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 800c55e:	4611      	mov	r1, r2
 800c560:	2300      	movs	r3, #0
 800c562:	f502 6008 	add.w	r0, r2, #2176	; 0x880
 800c566:	f891 4551 	ldrb.w	r4, [r1, #1361]	; 0x551
 800c56a:	3144      	adds	r1, #68	; 0x44
 800c56c:	4281      	cmp	r1, r0
 800c56e:	ea43 0304 	orr.w	r3, r3, r4
 800c572:	d1f8      	bne.n	800c566 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x66>
 800c574:	b923      	cbnz	r3, 800c580 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800c576:	2101      	movs	r1, #1
 800c578:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 800c57c:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 800c580:	bd70      	pop	{r4, r5, r6, pc}

0800c582 <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 800c582:	2244      	movs	r2, #68	; 0x44
 800c584:	fb02 0101 	mla	r1, r2, r1, r0
 800c588:	68c3      	ldr	r3, [r0, #12]
 800c58a:	b510      	push	{r4, lr}
 800c58c:	f8d1 2530 	ldr.w	r2, [r1, #1328]	; 0x530
 800c590:	f8d1 4518 	ldr.w	r4, [r1, #1304]	; 0x518
 800c594:	f8d1 0534 	ldr.w	r0, [r1, #1332]	; 0x534
 800c598:	1a9a      	subs	r2, r3, r2
 800c59a:	b184      	cbz	r4, 800c5be <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 800c59c:	f8d1 1514 	ldr.w	r1, [r1, #1300]	; 0x514
 800c5a0:	1a5b      	subs	r3, r3, r1
 800c5a2:	b128      	cbz	r0, 800c5b0 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 800c5a4:	f242 700f 	movw	r0, #9999	; 0x270f
 800c5a8:	4283      	cmp	r3, r0
 800c5aa:	d90d      	bls.n	800c5c8 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 800c5ac:	4282      	cmp	r2, r0
 800c5ae:	e002      	b.n	800c5b6 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 800c5b0:	f242 7010 	movw	r0, #10000	; 0x2710
 800c5b4:	4283      	cmp	r3, r0
 800c5b6:	bf94      	ite	ls
 800c5b8:	2000      	movls	r0, #0
 800c5ba:	2001      	movhi	r0, #1
 800c5bc:	bd10      	pop	{r4, pc}
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d0fc      	beq.n	800c5bc <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 800c5c2:	f242 7010 	movw	r0, #10000	; 0x2710
 800c5c6:	e7f1      	b.n	800c5ac <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 800c5c8:	2000      	movs	r0, #0
 800c5ca:	e7f7      	b.n	800c5bc <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

0800c5cc <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 800c5cc:	684a      	ldr	r2, [r1, #4]
 800c5ce:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800c5d0:	b510      	push	{r4, lr}
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d10d      	bne.n	800c5f2 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 800c5d6:	f100 0392 	add.w	r3, r0, #146	; 0x92
 800c5da:	3108      	adds	r1, #8
 800c5dc:	30a2      	adds	r0, #162	; 0xa2
 800c5de:	4283      	cmp	r3, r0
 800c5e0:	d101      	bne.n	800c5e6 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x1a>
 800c5e2:	2001      	movs	r0, #1
 800c5e4:	bd10      	pop	{r4, pc}
 800c5e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5ee:	4294      	cmp	r4, r2
 800c5f0:	d0f5      	beq.n	800c5de <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 800c5f2:	2000      	movs	r0, #0
 800c5f4:	e7f6      	b.n	800c5e4 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x18>
	...

0800c5f8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800c5f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	4605      	mov	r5, r0
 800c600:	4690      	mov	r8, r2
 800c602:	460f      	mov	r7, r1
 800c604:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800c608:	2900      	cmp	r1, #0
 800c60a:	d03d      	beq.n	800c688 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
 800c60c:	2a00      	cmp	r2, #0
 800c60e:	d03b      	beq.n	800c688 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
 800c610:	2600      	movs	r6, #0
 800c612:	f240 6804 	movw	r8, #1540	; 0x604
 800c616:	4637      	mov	r7, r6
 800c618:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
 800c61c:	f880 350c 	strb.w	r3, [r0, #1292]	; 0x50c
 800c620:	f200 541c 	addw	r4, r0, #1308	; 0x51c
 800c624:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800c628:	b1e3      	cbz	r3, 800c664 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6c>
 800c62a:	6868      	ldr	r0, [r5, #4]
 800c62c:	4631      	mov	r1, r6
 800c62e:	6803      	ldr	r3, [r0, #0]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	4798      	blx	r3
 800c634:	2110      	movs	r1, #16
 800c636:	4620      	mov	r0, r4
 800c638:	f844 7c04 	str.w	r7, [r4, #-4]
 800c63c:	f7ff fd74 	bl	800c128 <memset.constprop.0.isra.0>
 800c640:	2110      	movs	r1, #16
 800c642:	f104 001c 	add.w	r0, r4, #28
 800c646:	61a7      	str	r7, [r4, #24]
 800c648:	f7ff fd6e 	bl	800c128 <memset.constprop.0.isra.0>
 800c64c:	f7fe f970 	bl	800a930 <lightset::Data::Get()>
 800c650:	fb08 0006 	mla	r0, r8, r6, r0
 800c654:	f8c0 7600 	str.w	r7, [r0, #1536]	; 0x600
 800c658:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 800c65c:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
 800c660:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
 800c664:	3601      	adds	r6, #1
 800c666:	2e20      	cmp	r6, #32
 800c668:	f104 0444 	add.w	r4, r4, #68	; 0x44
 800c66c:	d1da      	bne.n	800c624 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2c>
 800c66e:	4b25      	ldr	r3, [pc, #148]	; (800c704 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x10c>)
 800c670:	2102      	movs	r1, #2
 800c672:	6818      	ldr	r0, [r3, #0]
 800c674:	f009 f8c0 	bl	80157f8 <LedBlink::SetMode(ledblink::Mode)>
 800c678:	f895 350d 	ldrb.w	r3, [r5, #1293]	; 0x50d
 800c67c:	f023 0302 	bic.w	r3, r3, #2
 800c680:	f885 350d 	strb.w	r3, [r5, #1293]	; 0x50d
 800c684:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c688:	2600      	movs	r6, #0
 800c68a:	f240 6b04 	movw	fp, #1540	; 0x604
 800c68e:	46b1      	mov	r9, r6
 800c690:	f505 64a7 	add.w	r4, r5, #1336	; 0x538
 800c694:	7ea3      	ldrb	r3, [r4, #26]
 800c696:	b373      	cbz	r3, 800c6f6 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfe>
 800c698:	b15f      	cbz	r7, 800c6b2 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 800c69a:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800c69e:	b143      	cbz	r3, 800c6b2 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 800c6a0:	2110      	movs	r1, #16
 800c6a2:	f844 9c20 	str.w	r9, [r4, #-32]
 800c6a6:	f1a4 001c 	sub.w	r0, r4, #28
 800c6aa:	f7ff fd3d 	bl	800c128 <memset.constprop.0.isra.0>
 800c6ae:	f884 9019 	strb.w	r9, [r4, #25]
 800c6b2:	f1b8 0f00 	cmp.w	r8, #0
 800c6b6:	d00a      	beq.n	800c6ce <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd6>
 800c6b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c6bc:	b13b      	cbz	r3, 800c6ce <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd6>
 800c6be:	2110      	movs	r1, #16
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	f844 9c04 	str.w	r9, [r4, #-4]
 800c6c6:	f7ff fd2f 	bl	800c128 <memset.constprop.0.isra.0>
 800c6ca:	f884 9019 	strb.w	r9, [r4, #25]
 800c6ce:	f895 a4f5 	ldrb.w	sl, [r5, #1269]	; 0x4f5
 800c6d2:	f1ba 0f00 	cmp.w	sl, #0
 800c6d6:	d10e      	bne.n	800c6f6 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfe>
 800c6d8:	6868      	ldr	r0, [r5, #4]
 800c6da:	4631      	mov	r1, r6
 800c6dc:	6803      	ldr	r3, [r0, #0]
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	4798      	blx	r3
 800c6e2:	f7fe f925 	bl	800a930 <lightset::Data::Get()>
 800c6e6:	fb0b 0006 	mla	r0, fp, r6, r0
 800c6ea:	f8c0 a600 	str.w	sl, [r0, #1536]	; 0x600
 800c6ee:	f884 a018 	strb.w	sl, [r4, #24]
 800c6f2:	f884 a01a 	strb.w	sl, [r4, #26]
 800c6f6:	3601      	adds	r6, #1
 800c6f8:	2e20      	cmp	r6, #32
 800c6fa:	f104 0444 	add.w	r4, r4, #68	; 0x44
 800c6fe:	d1c9      	bne.n	800c694 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9c>
 800c700:	e7b5      	b.n	800c66e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x76>
 800c702:	bf00      	nop
 800c704:	2001ce48 	andcs	ip, r1, r8, asr #28

0800c708 <E131Bridge::HandleDmx()>:
 800c708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c70c:	4604      	mov	r4, r0
 800c70e:	2600      	movs	r6, #0
 800c710:	f8b0 70f7 	ldrh.w	r7, [r0, #247]	; 0xf7
 800c714:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 800c718:	ba7f      	rev16	r7, r7
 800c71a:	b2bf      	uxth	r7, r7
 800c71c:	3f01      	subs	r7, #1
 800c71e:	f200 551c 	addw	r5, r0, #1308	; 0x51c
 800c722:	f815 3c0a 	ldrb.w	r3, [r5, #-10]
 800c726:	b353      	cbz	r3, 800c77e <E131Bridge::HandleDmx()+0x76>
 800c728:	f835 3c0c 	ldrh.w	r3, [r5, #-12]
 800c72c:	f8b4 20ed 	ldrh.w	r2, [r4, #237]	; 0xed
 800c730:	ba5b      	rev16	r3, r3
 800c732:	b29b      	uxth	r3, r3
 800c734:	429a      	cmp	r2, r3
 800c736:	d122      	bne.n	800c77e <E131Bridge::HandleDmx()+0x76>
 800c738:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800c73c:	f1a5 0108 	sub.w	r1, r5, #8
 800c740:	4620      	mov	r0, r4
 800c742:	9300      	str	r3, [sp, #0]
 800c744:	f7ff ff42 	bl	800c5cc <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800c748:	f105 0114 	add.w	r1, r5, #20
 800c74c:	4682      	mov	sl, r0
 800c74e:	4620      	mov	r0, r4
 800c750:	f7ff ff3c 	bl	800c5cc <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800c754:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800c758:	4680      	mov	r8, r0
 800c75a:	f1ba 0f00 	cmp.w	sl, #0
 800c75e:	d016      	beq.n	800c78e <E131Bridge::HandleDmx()+0x86>
 800c760:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c764:	7c2a      	ldrb	r2, [r5, #16]
 800c766:	742b      	strb	r3, [r5, #16]
 800c768:	3313      	adds	r3, #19
 800c76a:	1a9b      	subs	r3, r3, r2
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	2b13      	cmp	r3, #19
 800c770:	d905      	bls.n	800c77e <E131Bridge::HandleDmx()+0x76>
 800c772:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800c776:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800c77a:	2a00      	cmp	r2, #0
 800c77c:	da10      	bge.n	800c7a0 <E131Bridge::HandleDmx()+0x98>
 800c77e:	3601      	adds	r6, #1
 800c780:	2e20      	cmp	r6, #32
 800c782:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800c786:	d1cc      	bne.n	800c722 <E131Bridge::HandleDmx()+0x1a>
 800c788:	b003      	add	sp, #12
 800c78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c78e:	2800      	cmp	r0, #0
 800c790:	d0ef      	beq.n	800c772 <E131Bridge::HandleDmx()+0x6a>
 800c792:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c796:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800c79a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800c79e:	e7e3      	b.n	800c768 <E131Bridge::HandleDmx()+0x60>
 800c7a0:	065a      	lsls	r2, r3, #25
 800c7a2:	d50b      	bpl.n	800c7bc <E131Bridge::HandleDmx()+0xb4>
 800c7a4:	f1ba 0f00 	cmp.w	sl, #0
 800c7a8:	d102      	bne.n	800c7b0 <E131Bridge::HandleDmx()+0xa8>
 800c7aa:	f1b8 0f00 	cmp.w	r8, #0
 800c7ae:	d0e6      	beq.n	800c77e <E131Bridge::HandleDmx()+0x76>
 800c7b0:	4642      	mov	r2, r8
 800c7b2:	4651      	mov	r1, sl
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	f7ff ff1f 	bl	800c5f8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800c7ba:	e7e0      	b.n	800c77e <E131Bridge::HandleDmx()+0x76>
 800c7bc:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800c7c0:	b133      	cbz	r3, 800c7d0 <E131Bridge::HandleDmx()+0xc8>
 800c7c2:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800c7c6:	b91b      	cbnz	r3, 800c7d0 <E131Bridge::HandleDmx()+0xc8>
 800c7c8:	4631      	mov	r1, r6
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f7ff fe98 	bl	800c500 <E131Bridge::CheckMergeTimeouts(unsigned int)>
 800c7d0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 800c7d4:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d259      	bcs.n	800c890 <E131Bridge::HandleDmx()+0x188>
 800c7dc:	4631      	mov	r1, r6
 800c7de:	4620      	mov	r0, r4
 800c7e0:	9301      	str	r3, [sp, #4]
 800c7e2:	f7ff fece 	bl	800c582 <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	d0c9      	beq.n	800c77e <E131Bridge::HandleDmx()+0x76>
 800c7ea:	9b01      	ldr	r3, [sp, #4]
 800c7ec:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800c7f0:	9b00      	ldr	r3, [sp, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d154      	bne.n	800c8a0 <E131Bridge::HandleDmx()+0x198>
 800c7f6:	f1bb 0f00 	cmp.w	fp, #0
 800c7fa:	d15c      	bne.n	800c8b6 <E131Bridge::HandleDmx()+0x1ae>
 800c7fc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c7fe:	2210      	movs	r2, #16
 800c800:	f845 3c04 	str.w	r3, [r5, #-4]
 800c804:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c808:	4628      	mov	r0, r5
 800c80a:	742b      	strb	r3, [r5, #16]
 800c80c:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800c810:	f7ff fc92 	bl	800c138 <memcpy.isra.0>
 800c814:	68e3      	ldr	r3, [r4, #12]
 800c816:	463a      	mov	r2, r7
 800c818:	4649      	mov	r1, r9
 800c81a:	4630      	mov	r0, r6
 800c81c:	f845 3c08 	str.w	r3, [r5, #-8]
 800c820:	f7fe f892 	bl	800a948 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800c824:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800c828:	069b      	lsls	r3, r3, #26
 800c82a:	f100 80ad 	bmi.w	800c988 <E131Bridge::HandleDmx()+0x280>
 800c82e:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 800c832:	b29a      	uxth	r2, r3
 800c834:	2a00      	cmp	r2, #0
 800c836:	f000 80ab 	beq.w	800c990 <E131Bridge::HandleDmx()+0x288>
 800c83a:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 800c83e:	2a00      	cmp	r2, #0
 800c840:	f040 80a6 	bne.w	800c990 <E131Bridge::HandleDmx()+0x288>
 800c844:	ba5b      	rev16	r3, r3
 800c846:	b29b      	uxth	r3, r3
 800c848:	f1ba 0f00 	cmp.w	sl, #0
 800c84c:	f040 8099 	bne.w	800c982 <E131Bridge::HandleDmx()+0x27a>
 800c850:	f1b8 0f00 	cmp.w	r8, #0
 800c854:	f040 8095 	bne.w	800c982 <E131Bridge::HandleDmx()+0x27a>
 800c858:	69aa      	ldr	r2, [r5, #24]
 800c85a:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800c85e:	3a00      	subs	r2, #0
 800c860:	bf18      	it	ne
 800c862:	2201      	movne	r2, #1
 800c864:	3900      	subs	r1, #0
 800c866:	bf18      	it	ne
 800c868:	2101      	movne	r1, #1
 800c86a:	4620      	mov	r0, r4
 800c86c:	f7ff fd84 	bl	800c378 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800c870:	f240 1301 	movw	r3, #257	; 0x101
 800c874:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800c878:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f040 808c 	bne.w	800c99a <E131Bridge::HandleDmx()+0x292>
 800c882:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c886:	f043 0302 	orr.w	r3, r3, #2
 800c88a:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800c88e:	e776      	b.n	800c77e <E131Bridge::HandleDmx()+0x76>
 800c890:	d9ae      	bls.n	800c7f0 <E131Bridge::HandleDmx()+0xe8>
 800c892:	2200      	movs	r2, #0
 800c894:	f845 2c04 	str.w	r2, [r5, #-4]
 800c898:	61aa      	str	r2, [r5, #24]
 800c89a:	f884 24f5 	strb.w	r2, [r4, #1269]	; 0x4f5
 800c89e:	e7a5      	b.n	800c7ec <E131Bridge::HandleDmx()+0xe4>
 800c8a0:	f1ba 0f00 	cmp.w	sl, #0
 800c8a4:	f000 8092 	beq.w	800c9cc <E131Bridge::HandleDmx()+0x2c4>
 800c8a8:	f1bb 0f00 	cmp.w	fp, #0
 800c8ac:	d15c      	bne.n	800c968 <E131Bridge::HandleDmx()+0x260>
 800c8ae:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c8b2:	742b      	strb	r3, [r5, #16]
 800c8b4:	e7ae      	b.n	800c814 <E131Bridge::HandleDmx()+0x10c>
 800c8b6:	f1b8 0f00 	cmp.w	r8, #0
 800c8ba:	d03b      	beq.n	800c934 <E131Bridge::HandleDmx()+0x22c>
 800c8bc:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c8c0:	f240 6b04 	movw	fp, #1540	; 0x604
 800c8c4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800c8c8:	68e3      	ldr	r3, [r4, #12]
 800c8ca:	fb0b fb06 	mul.w	fp, fp, r6
 800c8ce:	616b      	str	r3, [r5, #20]
 800c8d0:	f7fe f82e 	bl	800a930 <lightset::Data::Get()>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	f50b 7000 	add.w	r0, fp, #512	; 0x200
 800c8da:	463a      	mov	r2, r7
 800c8dc:	4649      	mov	r1, r9
 800c8de:	4418      	add	r0, r3
 800c8e0:	9300      	str	r3, [sp, #0]
 800c8e2:	f7ff fc29 	bl	800c138 <memcpy.isra.0>
 800c8e6:	9b00      	ldr	r3, [sp, #0]
 800c8e8:	f50b 6080 	add.w	r0, fp, #1024	; 0x400
 800c8ec:	eb03 020b 	add.w	r2, r3, fp
 800c8f0:	f8c2 7600 	str.w	r7, [r2, #1536]	; 0x600
 800c8f4:	4649      	mov	r1, r9
 800c8f6:	463a      	mov	r2, r7
 800c8f8:	4418      	add	r0, r3
 800c8fa:	f7ff fc1d 	bl	800c138 <memcpy.isra.0>
 800c8fe:	e791      	b.n	800c824 <E131Bridge::HandleDmx()+0x11c>
 800c900:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c902:	2210      	movs	r2, #16
 800c904:	61ab      	str	r3, [r5, #24]
 800c906:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c90a:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800c90e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800c912:	f105 001c 	add.w	r0, r5, #28
 800c916:	f7ff fc0f 	bl	800c138 <memcpy.isra.0>
 800c91a:	68e3      	ldr	r3, [r4, #12]
 800c91c:	4631      	mov	r1, r6
 800c91e:	4620      	mov	r0, r4
 800c920:	616b      	str	r3, [r5, #20]
 800c922:	f7ff fdde 	bl	800c4e2 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800c926:	463a      	mov	r2, r7
 800c928:	4649      	mov	r1, r9
 800c92a:	4630      	mov	r0, r6
 800c92c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c92e:	f7fe f851 	bl	800a9d4 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800c932:	e777      	b.n	800c824 <E131Bridge::HandleDmx()+0x11c>
 800c934:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c936:	2210      	movs	r2, #16
 800c938:	f845 3c04 	str.w	r3, [r5, #-4]
 800c93c:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c940:	4628      	mov	r0, r5
 800c942:	742b      	strb	r3, [r5, #16]
 800c944:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800c948:	f7ff fbf6 	bl	800c138 <memcpy.isra.0>
 800c94c:	68e3      	ldr	r3, [r4, #12]
 800c94e:	4631      	mov	r1, r6
 800c950:	4620      	mov	r0, r4
 800c952:	f845 3c08 	str.w	r3, [r5, #-8]
 800c956:	f7ff fdc4 	bl	800c4e2 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800c95a:	463a      	mov	r2, r7
 800c95c:	4649      	mov	r1, r9
 800c95e:	4630      	mov	r0, r6
 800c960:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c962:	f7fe f80e 	bl	800a982 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800c966:	e75d      	b.n	800c824 <E131Bridge::HandleDmx()+0x11c>
 800c968:	f1b8 0f00 	cmp.w	r8, #0
 800c96c:	d103      	bne.n	800c976 <E131Bridge::HandleDmx()+0x26e>
 800c96e:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c972:	742b      	strb	r3, [r5, #16]
 800c974:	e7ea      	b.n	800c94c <E131Bridge::HandleDmx()+0x244>
 800c976:	481b      	ldr	r0, [pc, #108]	; (800c9e4 <E131Bridge::HandleDmx()+0x2dc>)
 800c978:	b003      	add	sp, #12
 800c97a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97e:	f7fc beed 	b.w	800975c <printf>
 800c982:	4642      	mov	r2, r8
 800c984:	4651      	mov	r1, sl
 800c986:	e770      	b.n	800c86a <E131Bridge::HandleDmx()+0x162>
 800c988:	f04f 0300 	mov.w	r3, #0
 800c98c:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 800c990:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800c994:	2b00      	cmp	r3, #0
 800c996:	f47f af6f 	bne.w	800c878 <E131Bridge::HandleDmx()+0x170>
 800c99a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c99e:	f7fd ffc7 	bl	800a930 <lightset::Data::Get()>
 800c9a2:	4632      	mov	r2, r6
 800c9a4:	4641      	mov	r1, r8
 800c9a6:	f7ff fbd1 	bl	800c14c <lightset::Data::IOutput(LightSet*, unsigned int) const>
 800c9aa:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f47f af67 	bne.w	800c882 <E131Bridge::HandleDmx()+0x17a>
 800c9b4:	6860      	ldr	r0, [r4, #4]
 800c9b6:	4631      	mov	r1, r6
 800c9b8:	6803      	ldr	r3, [r0, #0]
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	4798      	blx	r3
 800c9be:	f04f 0301 	mov.w	r3, #1
 800c9c2:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 800c9c6:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 800c9ca:	e75a      	b.n	800c882 <E131Bridge::HandleDmx()+0x17a>
 800c9cc:	f1bb 0f00 	cmp.w	fp, #0
 800c9d0:	d096      	beq.n	800c900 <E131Bridge::HandleDmx()+0x1f8>
 800c9d2:	f1b8 0f00 	cmp.w	r8, #0
 800c9d6:	d0ce      	beq.n	800c976 <E131Bridge::HandleDmx()+0x26e>
 800c9d8:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c9dc:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800c9e0:	e79b      	b.n	800c91a <E131Bridge::HandleDmx()+0x212>
 800c9e2:	bf00      	nop
 800c9e4:	08018290 	stmdaeq	r1, {r4, r7, r9, pc}

0800c9e8 <E131Bridge::IsStatusChanged()>:
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	f890 04f8 	ldrb.w	r0, [r0, #1272]	; 0x4f8
 800c9ee:	b110      	cbz	r0, 800c9f6 <E131Bridge::IsStatusChanged()+0xe>
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 800c9f6:	4770      	bx	lr

0800c9f8 <E131Bridge::Clear(unsigned int)>:
 800c9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9fa:	460d      	mov	r5, r1
 800c9fc:	4604      	mov	r4, r0
 800c9fe:	6847      	ldr	r7, [r0, #4]
 800ca00:	f7fd ff96 	bl	800a930 <lightset::Data::Get()>
 800ca04:	f240 6204 	movw	r2, #1540	; 0x604
 800ca08:	4606      	mov	r6, r0
 800ca0a:	436a      	muls	r2, r5
 800ca0c:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800ca10:	4430      	add	r0, r6
 800ca12:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ca16:	f7ff fb87 	bl	800c128 <memset.constprop.0.isra.0>
 800ca1a:	4432      	add	r2, r6
 800ca1c:	4630      	mov	r0, r6
 800ca1e:	2644      	movs	r6, #68	; 0x44
 800ca20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca24:	fb06 4605 	mla	r6, r6, r5, r4
 800ca28:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
 800ca2c:	4639      	mov	r1, r7
 800ca2e:	462a      	mov	r2, r5
 800ca30:	f7ff fb8c 	bl	800c14c <lightset::Data::IOutput(LightSet*, unsigned int) const>
 800ca34:	f896 3512 	ldrb.w	r3, [r6, #1298]	; 0x512
 800ca38:	b153      	cbz	r3, 800ca50 <E131Bridge::Clear(unsigned int)+0x58>
 800ca3a:	f896 3552 	ldrb.w	r3, [r6, #1362]	; 0x552
 800ca3e:	b93b      	cbnz	r3, 800ca50 <E131Bridge::Clear(unsigned int)+0x58>
 800ca40:	6860      	ldr	r0, [r4, #4]
 800ca42:	4629      	mov	r1, r5
 800ca44:	6803      	ldr	r3, [r0, #0]
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	4798      	blx	r3
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	f886 3552 	strb.w	r3, [r6, #1362]	; 0x552
 800ca50:	2300      	movs	r3, #0
 800ca52:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800ca56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca58 <E131Bridge::IsValidRoot()>:
 800ca58:	b530      	push	{r4, r5, lr}
 800ca5a:	4a0d      	ldr	r2, [pc, #52]	; (800ca90 <E131Bridge::IsValidRoot()+0x38>)
 800ca5c:	f100 0380 	add.w	r3, r0, #128	; 0x80
 800ca60:	f100 018c 	add.w	r1, r0, #140	; 0x8c
 800ca64:	4299      	cmp	r1, r3
 800ca66:	d109      	bne.n	800ca7c <E131Bridge::IsValidRoot()+0x24>
 800ca68:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 800ca6c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800ca70:	d00c      	beq.n	800ca8c <E131Bridge::IsValidRoot()+0x34>
 800ca72:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800ca76:	4258      	negs	r0, r3
 800ca78:	4158      	adcs	r0, r3
 800ca7a:	bd30      	pop	{r4, r5, pc}
 800ca7c:	f813 5b01 	ldrb.w	r5, [r3], #1
 800ca80:	f812 4b01 	ldrb.w	r4, [r2], #1
 800ca84:	42a5      	cmp	r5, r4
 800ca86:	d0ed      	beq.n	800ca64 <E131Bridge::IsValidRoot()+0xc>
 800ca88:	2000      	movs	r0, #0
 800ca8a:	e7f6      	b.n	800ca7a <E131Bridge::IsValidRoot()+0x22>
 800ca8c:	2001      	movs	r0, #1
 800ca8e:	e7f4      	b.n	800ca7a <E131Bridge::IsValidRoot()+0x22>
 800ca90:	08018340 	stmdaeq	r1, {r6, r8, r9, pc}

0800ca94 <E131Bridge::IsValidDataPacket()>:
 800ca94:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800ca98:	2b02      	cmp	r3, #2
 800ca9a:	d10d      	bne.n	800cab8 <E131Bridge::IsValidDataPacket()+0x24>
 800ca9c:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 800caa0:	2ba1      	cmp	r3, #161	; 0xa1
 800caa2:	d109      	bne.n	800cab8 <E131Bridge::IsValidDataPacket()+0x24>
 800caa4:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800caa8:	b933      	cbnz	r3, 800cab8 <E131Bridge::IsValidDataPacket()+0x24>
 800caaa:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 800caae:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800cab2:	4258      	negs	r0, r3
 800cab4:	4158      	adcs	r0, r3
 800cab6:	4770      	bx	lr
 800cab8:	2000      	movs	r0, #0
 800caba:	4770      	bx	lr

0800cabc <E131Bridge::Run()>:
 800cabc:	b530      	push	{r4, r5, lr}
 800cabe:	4601      	mov	r1, r0
 800cac0:	4604      	mov	r4, r0
 800cac2:	b085      	sub	sp, #20
 800cac4:	f10d 030e 	add.w	r3, sp, #14
 800cac8:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800cacc:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800cad0:	9300      	str	r3, [sp, #0]
 800cad2:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800cad6:	f005 fd05 	bl	80124e4 <udp_recv>
 800cada:	4b3c      	ldr	r3, [pc, #240]	; (800cbcc <E131Bridge::Run()+0x110>)
 800cadc:	681d      	ldr	r5, [r3, #0]
 800cade:	60e5      	str	r5, [r4, #12]
 800cae0:	2800      	cmp	r0, #0
 800cae2:	d13b      	bne.n	800cb5c <E131Bridge::Run()+0xa0>
 800cae4:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800cae8:	b183      	cbz	r3, 800cb0c <E131Bridge::Run()+0x50>
 800caea:	f894 24f9 	ldrb.w	r2, [r4, #1273]	; 0x4f9
 800caee:	6923      	ldr	r3, [r4, #16]
 800caf0:	bb6a      	cbnz	r2, 800cb4e <E131Bridge::Run()+0x92>
 800caf2:	1aed      	subs	r5, r5, r3
 800caf4:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800caf8:	429d      	cmp	r5, r3
 800cafa:	d928      	bls.n	800cb4e <E131Bridge::Run()+0x92>
 800cafc:	6863      	ldr	r3, [r4, #4]
 800cafe:	b9eb      	cbnz	r3, 800cb3c <E131Bridge::Run()+0x80>
 800cb00:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800cb04:	f023 0302 	bic.w	r3, r3, #2
 800cb08:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800cb0c:	6963      	ldr	r3, [r4, #20]
 800cb0e:	b12b      	cbz	r3, 800cb1c <E131Bridge::Run()+0x60>
 800cb10:	4620      	mov	r0, r4
 800cb12:	f000 f94f 	bl	800cdb4 <E131Bridge::HandleDmxIn()>
 800cb16:	4620      	mov	r0, r4
 800cb18:	f000 f8ca 	bl	800ccb0 <E131Bridge::SendDiscoveryPacket()>
 800cb1c:	7a23      	ldrb	r3, [r4, #8]
 800cb1e:	b15b      	cbz	r3, 800cb38 <E131Bridge::Run()+0x7c>
 800cb20:	4b2b      	ldr	r3, [pc, #172]	; (800cbd0 <E131Bridge::Run()+0x114>)
 800cb22:	6818      	ldr	r0, [r3, #0]
 800cb24:	6843      	ldr	r3, [r0, #4]
 800cb26:	2b04      	cmp	r3, #4
 800cb28:	d006      	beq.n	800cb38 <E131Bridge::Run()+0x7c>
 800cb2a:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d049      	beq.n	800cbc6 <E131Bridge::Run()+0x10a>
 800cb32:	2103      	movs	r1, #3
 800cb34:	f008 fe60 	bl	80157f8 <LedBlink::SetMode(ledblink::Mode)>
 800cb38:	b005      	add	sp, #20
 800cb3a:	bd30      	pop	{r4, r5, pc}
 800cb3c:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d1dd      	bne.n	800cb00 <E131Bridge::Run()+0x44>
 800cb44:	2201      	movs	r2, #1
 800cb46:	4620      	mov	r0, r4
 800cb48:	4611      	mov	r1, r2
 800cb4a:	f7ff fd55 	bl	800c5f8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800cb4e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800cb52:	1a9b      	subs	r3, r3, r2
 800cb54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb58:	d3d8      	bcc.n	800cb0c <E131Bridge::Run()+0x50>
 800cb5a:	e7d1      	b.n	800cb00 <E131Bridge::Run()+0x44>
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f7ff ff7b 	bl	800ca58 <E131Bridge::IsValidRoot()>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	d0e8      	beq.n	800cb38 <E131Bridge::Run()+0x7c>
 800cb66:	2300      	movs	r3, #0
 800cb68:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800cb6c:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800cb70:	6125      	str	r5, [r4, #16]
 800cb72:	b15b      	cbz	r3, 800cb8c <E131Bridge::Run()+0xd0>
 800cb74:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800cb78:	b943      	cbnz	r3, 800cb8c <E131Bridge::Run()+0xd0>
 800cb7a:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800cb7e:	1aad      	subs	r5, r5, r2
 800cb80:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800cb84:	4295      	cmp	r5, r2
 800cb86:	bf88      	it	hi
 800cb88:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800cb8c:	6863      	ldr	r3, [r4, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d0bc      	beq.n	800cb0c <E131Bridge::Run()+0x50>
 800cb92:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800cb96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cb9a:	ba1a      	rev	r2, r3
 800cb9c:	d108      	bne.n	800cbb0 <E131Bridge::Run()+0xf4>
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f7ff ff78 	bl	800ca94 <E131Bridge::IsValidDataPacket()>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	d0b1      	beq.n	800cb0c <E131Bridge::Run()+0x50>
 800cba8:	4620      	mov	r0, r4
 800cbaa:	f7ff fdad 	bl	800c708 <E131Bridge::HandleDmx()>
 800cbae:	e7ad      	b.n	800cb0c <E131Bridge::Run()+0x50>
 800cbb0:	2a08      	cmp	r2, #8
 800cbb2:	d1ab      	bne.n	800cb0c <E131Bridge::Run()+0x50>
 800cbb4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800cbb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cbbc:	d1a6      	bne.n	800cb0c <E131Bridge::Run()+0x50>
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f000 f976 	bl	800ceb0 <E131Bridge::HandleSynchronization()>
 800cbc4:	e7a2      	b.n	800cb0c <E131Bridge::Run()+0x50>
 800cbc6:	2102      	movs	r1, #2
 800cbc8:	e7b4      	b.n	800cb34 <E131Bridge::Run()+0x78>
 800cbca:	bf00      	nop
 800cbcc:	2001ce64 	andcs	ip, r1, r4, ror #28
 800cbd0:	2001ce48 	andcs	ip, r1, r8, asr #28

0800cbd4 <E131Bridge::FillDiscoveryPacket()>:
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800cbda:	b510      	push	{r4, lr}
 800cbdc:	333c      	adds	r3, #60	; 0x3c
 800cbde:	005b      	lsls	r3, r3, #1
 800cbe0:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800cbe4:	69c3      	ldr	r3, [r0, #28]
 800cbe6:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800cbea:	428b      	cmp	r3, r1
 800cbec:	d14b      	bne.n	800cc86 <E131Bridge::FillDiscoveryPacket()+0xb2>
 800cbee:	69c3      	ldr	r3, [r0, #28]
 800cbf0:	492e      	ldr	r1, [pc, #184]	; (800ccac <E131Bridge::FillDiscoveryPacket()+0xd8>)
 800cbf2:	701a      	strb	r2, [r3, #0]
 800cbf4:	2210      	movs	r2, #16
 800cbf6:	705a      	strb	r2, [r3, #1]
 800cbf8:	1d1a      	adds	r2, r3, #4
 800cbfa:	3310      	adds	r3, #16
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d145      	bne.n	800cc8c <E131Bridge::FillDiscoveryPacket()+0xb8>
 800cc00:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800cc04:	69c3      	ldr	r3, [r0, #28]
 800cc06:	3234      	adds	r2, #52	; 0x34
 800cc08:	0052      	lsls	r2, r2, #1
 800cc0a:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800cc0e:	ba52      	rev16	r2, r2
 800cc10:	821a      	strh	r2, [r3, #16]
 800cc12:	2200      	movs	r2, #0
 800cc14:	749a      	strb	r2, [r3, #18]
 800cc16:	74da      	strb	r2, [r3, #19]
 800cc18:	751a      	strb	r2, [r3, #20]
 800cc1a:	2208      	movs	r2, #8
 800cc1c:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800cc20:	755a      	strb	r2, [r3, #21]
 800cc22:	3316      	adds	r3, #22
 800cc24:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800cc28:	4291      	cmp	r1, r2
 800cc2a:	d134      	bne.n	800cc96 <E131Bridge::FillDiscoveryPacket()+0xc2>
 800cc2c:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800cc30:	69c3      	ldr	r3, [r0, #28]
 800cc32:	3229      	adds	r2, #41	; 0x29
 800cc34:	0052      	lsls	r2, r2, #1
 800cc36:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800cc3a:	ba52      	rev16	r2, r2
 800cc3c:	84da      	strh	r2, [r3, #38]	; 0x26
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800cc44:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800cc48:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800cc4c:	2202      	movs	r2, #2
 800cc4e:	332c      	adds	r3, #44	; 0x2c
 800cc50:	f803 2c01 	strb.w	r2, [r3, #-1]
 800cc54:	f100 0274 	add.w	r2, r0, #116	; 0x74
 800cc58:	4291      	cmp	r1, r2
 800cc5a:	d121      	bne.n	800cca0 <E131Bridge::FillDiscoveryPacket()+0xcc>
 800cc5c:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800cc60:	69c2      	ldr	r2, [r0, #28]
 800cc62:	3304      	adds	r3, #4
 800cc64:	005b      	lsls	r3, r3, #1
 800cc66:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800cc6a:	ba5b      	rev16	r3, r3
 800cc6c:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800cc70:	2300      	movs	r3, #0
 800cc72:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800cc76:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800cc7a:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800cc7e:	2301      	movs	r3, #1
 800cc80:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800cc84:	bd10      	pop	{r4, pc}
 800cc86:	f803 2b01 	strb.w	r2, [r3], #1
 800cc8a:	e7ae      	b.n	800cbea <E131Bridge::FillDiscoveryPacket()+0x16>
 800cc8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc90:	f802 4b01 	strb.w	r4, [r2], #1
 800cc94:	e7b2      	b.n	800cbfc <E131Bridge::FillDiscoveryPacket()+0x28>
 800cc96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc9a:	f803 4b01 	strb.w	r4, [r3], #1
 800cc9e:	e7c3      	b.n	800cc28 <E131Bridge::FillDiscoveryPacket()+0x54>
 800cca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cca4:	f803 4b01 	strb.w	r4, [r3], #1
 800cca8:	e7d6      	b.n	800cc58 <E131Bridge::FillDiscoveryPacket()+0x84>
 800ccaa:	bf00      	nop
 800ccac:	08018340 	stmdaeq	r1, {r6, r8, r9, pc}

0800ccb0 <E131Bridge::SendDiscoveryPacket()>:
 800ccb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ccb2:	f242 710f 	movw	r1, #9999	; 0x270f
 800ccb6:	68c2      	ldr	r2, [r0, #12]
 800ccb8:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	428b      	cmp	r3, r1
 800ccc2:	d924      	bls.n	800cd0e <E131Bridge::SendDiscoveryPacket()+0x5e>
 800ccc4:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800ccc8:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800cccc:	b1ab      	cbz	r3, 800ccfa <E131Bridge::SendDiscoveryPacket()+0x4a>
 800ccce:	2500      	movs	r5, #0
 800ccd0:	462e      	mov	r6, r5
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f10d 020e 	add.w	r2, sp, #14
 800ccdc:	f7ff fbea 	bl	800c4b4 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800cce0:	b140      	cbz	r0, 800ccf4 <E131Bridge::SendDiscoveryPacket()+0x44>
 800cce2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800cce6:	69e2      	ldr	r2, [r4, #28]
 800cce8:	f106 013c 	add.w	r1, r6, #60	; 0x3c
 800ccec:	ba5b      	rev16	r3, r3
 800ccee:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800ccf2:	3601      	adds	r6, #1
 800ccf4:	3501      	adds	r5, #1
 800ccf6:	2d20      	cmp	r5, #32
 800ccf8:	d1eb      	bne.n	800ccd2 <E131Bridge::SendDiscoveryPacket()+0x22>
 800ccfa:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800ccfe:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	69e1      	ldr	r1, [r4, #28]
 800cd06:	6a23      	ldr	r3, [r4, #32]
 800cd08:	7820      	ldrb	r0, [r4, #0]
 800cd0a:	f005 fc47 	bl	801259c <udp_send>
 800cd0e:	b004      	add	sp, #16
 800cd10:	bd70      	pop	{r4, r5, r6, pc}

0800cd12 <memcpy.isra.0>:
 800cd12:	3801      	subs	r0, #1
 800cd14:	440a      	add	r2, r1
 800cd16:	4291      	cmp	r1, r2
 800cd18:	d100      	bne.n	800cd1c <memcpy.isra.0+0xa>
 800cd1a:	4770      	bx	lr
 800cd1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd20:	f800 3f01 	strb.w	r3, [r0, #1]!
 800cd24:	e7f7      	b.n	800cd16 <memcpy.isra.0+0x4>
	...

0800cd28 <E131Bridge::FillDataPacket()>:
 800cd28:	b570      	push	{r4, r5, r6, lr}
 800cd2a:	2400      	movs	r4, #0
 800cd2c:	2610      	movs	r6, #16
 800cd2e:	4605      	mov	r5, r0
 800cd30:	6980      	ldr	r0, [r0, #24]
 800cd32:	220c      	movs	r2, #12
 800cd34:	7046      	strb	r6, [r0, #1]
 800cd36:	7004      	strb	r4, [r0, #0]
 800cd38:	7084      	strb	r4, [r0, #2]
 800cd3a:	70c4      	strb	r4, [r0, #3]
 800cd3c:	491c      	ldr	r1, [pc, #112]	; (800cdb0 <E131Bridge::FillDataPacket()+0x88>)
 800cd3e:	3004      	adds	r0, #4
 800cd40:	f7ff ffe7 	bl	800cd12 <memcpy.isra.0>
 800cd44:	2304      	movs	r3, #4
 800cd46:	4632      	mov	r2, r6
 800cd48:	2602      	movs	r6, #2
 800cd4a:	69a8      	ldr	r0, [r5, #24]
 800cd4c:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800cd50:	7543      	strb	r3, [r0, #21]
 800cd52:	7484      	strb	r4, [r0, #18]
 800cd54:	74c4      	strb	r4, [r0, #19]
 800cd56:	7504      	strb	r4, [r0, #20]
 800cd58:	3016      	adds	r0, #22
 800cd5a:	f7ff ffda 	bl	800cd12 <memcpy.isra.0>
 800cd5e:	69a8      	ldr	r0, [r5, #24]
 800cd60:	2240      	movs	r2, #64	; 0x40
 800cd62:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800cd66:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800cd6a:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800cd6e:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800cd72:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800cd76:	302c      	adds	r0, #44	; 0x2c
 800cd78:	f7ff ffcb 	bl	800cd12 <memcpy.isra.0>
 800cd7c:	22a1      	movs	r2, #161	; 0xa1
 800cd7e:	69ab      	ldr	r3, [r5, #24]
 800cd80:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800cd84:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800cd88:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800cd8c:	69ab      	ldr	r3, [r5, #24]
 800cd8e:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800cd92:	69ab      	ldr	r3, [r5, #24]
 800cd94:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800cd98:	2201      	movs	r2, #1
 800cd9a:	69ab      	ldr	r3, [r5, #24]
 800cd9c:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800cda0:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800cda4:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800cda8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800cdac:	bd70      	pop	{r4, r5, r6, pc}
 800cdae:	bf00      	nop
 800cdb0:	08018340 	stmdaeq	r1, {r6, r8, r9, pc}

0800cdb4 <E131Bridge::HandleDmxIn()>:
 800cdb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800cdb8:	4604      	mov	r4, r0
 800cdba:	4605      	mov	r5, r0
 800cdbc:	2600      	movs	r6, #0
 800cdbe:	4f3b      	ldr	r7, [pc, #236]	; (800ceac <E131Bridge::HandleDmxIn()+0xf8>)
 800cdc0:	f895 3d92 	ldrb.w	r3, [r5, #3474]	; 0xd92
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d058      	beq.n	800ce7a <E131Bridge::HandleDmxIn()+0xc6>
 800cdc8:	6960      	ldr	r0, [r4, #20]
 800cdca:	4631      	mov	r1, r6
 800cdcc:	6803      	ldr	r3, [r0, #0]
 800cdce:	aa02      	add	r2, sp, #8
 800cdd0:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800cdd4:	ab03      	add	r3, sp, #12
 800cdd6:	47c0      	blx	r8
 800cdd8:	4601      	mov	r1, r0
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d055      	beq.n	800ce8a <E131Bridge::HandleDmxIn()+0xd6>
 800cdde:	9a02      	ldr	r2, [sp, #8]
 800cde0:	69a0      	ldr	r0, [r4, #24]
 800cde2:	b293      	uxth	r3, r2
 800cde4:	f103 0c6d 	add.w	ip, r3, #109	; 0x6d
 800cde8:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800cdec:	fa9c fc9c 	rev16.w	ip, ip
 800cdf0:	f8a0 c010 	strh.w	ip, [r0, #16]
 800cdf4:	f103 0c57 	add.w	ip, r3, #87	; 0x57
 800cdf8:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800cdfc:	fa9c fc9c 	rev16.w	ip, ip
 800ce00:	f8a0 c026 	strh.w	ip, [r0, #38]	; 0x26
 800ce04:	f895 cd99 	ldrb.w	ip, [r5, #3481]	; 0xd99
 800ce08:	330a      	adds	r3, #10
 800ce0a:	f880 c06c 	strb.w	ip, [r0, #108]	; 0x6c
 800ce0e:	f895 cd98 	ldrb.w	ip, [r5, #3480]	; 0xd98
 800ce12:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800ce16:	f10c 0001 	add.w	r0, ip, #1
 800ce1a:	f885 0d98 	strb.w	r0, [r5, #3480]	; 0xd98
 800ce1e:	69a0      	ldr	r0, [r4, #24]
 800ce20:	ba5b      	rev16	r3, r3
 800ce22:	f880 c06f 	strb.w	ip, [r0, #111]	; 0x6f
 800ce26:	f8b5 cd90 	ldrh.w	ip, [r5, #3472]	; 0xd90
 800ce2a:	69a0      	ldr	r0, [r4, #24]
 800ce2c:	fa9c fc9c 	rev16.w	ip, ip
 800ce30:	f8a0 c071 	strh.w	ip, [r0, #113]	; 0x71
 800ce34:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800ce38:	307d      	adds	r0, #125	; 0x7d
 800ce3a:	f7ff ff6a 	bl	800cd12 <memcpy.isra.0>
 800ce3e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800ce42:	69a1      	ldr	r1, [r4, #24]
 800ce44:	ba53      	rev16	r3, r2
 800ce46:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800ce4a:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800ce4e:	327d      	adds	r2, #125	; 0x7d
 800ce50:	9300      	str	r3, [sp, #0]
 800ce52:	f8d5 3d94 	ldr.w	r3, [r5, #3476]	; 0xd94
 800ce56:	b292      	uxth	r2, r2
 800ce58:	7820      	ldrb	r0, [r4, #0]
 800ce5a:	f005 fb9f 	bl	801259c <udp_send>
 800ce5e:	2301      	movs	r3, #1
 800ce60:	683a      	ldr	r2, [r7, #0]
 800ce62:	40b3      	lsls	r3, r6
 800ce64:	ea33 0102 	bics.w	r1, r3, r2
 800ce68:	d007      	beq.n	800ce7a <E131Bridge::HandleDmxIn()+0xc6>
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	603b      	str	r3, [r7, #0]
 800ce6e:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800ce72:	f043 0301 	orr.w	r3, r3, #1
 800ce76:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800ce7a:	3601      	adds	r6, #1
 800ce7c:	2e20      	cmp	r6, #32
 800ce7e:	f105 050c 	add.w	r5, r5, #12
 800ce82:	d19d      	bne.n	800cdc0 <E131Bridge::HandleDmxIn()+0xc>
 800ce84:	b004      	add	sp, #16
 800ce86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce8a:	9b03      	ldr	r3, [sp, #12]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d1f4      	bne.n	800ce7a <E131Bridge::HandleDmxIn()+0xc6>
 800ce90:	2201      	movs	r2, #1
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	40b2      	lsls	r2, r6
 800ce96:	ea23 0302 	bic.w	r3, r3, r2
 800ce9a:	603b      	str	r3, [r7, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1ec      	bne.n	800ce7a <E131Bridge::HandleDmxIn()+0xc6>
 800cea0:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800cea4:	f023 0301 	bic.w	r3, r3, #1
 800cea8:	e7e5      	b.n	800ce76 <E131Bridge::HandleDmxIn()+0xc2>
 800ceaa:	bf00      	nop
 800ceac:	2000c184 	andcs	ip, r0, r4, lsl #3

0800ceb0 <E131Bridge::HandleSynchronization()>:
 800ceb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceb4:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800ceb8:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800cebc:	ba5b      	rev16	r3, r3
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	429a      	cmp	r2, r3
 800cec2:	4604      	mov	r4, r0
 800cec4:	d00a      	beq.n	800cedc <E131Bridge::HandleSynchronization()+0x2c>
 800cec6:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d006      	beq.n	800cedc <E131Bridge::HandleSynchronization()+0x2c>
 800cece:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ced2:	4b23      	ldr	r3, [pc, #140]	; (800cf60 <E131Bridge::HandleSynchronization()+0xb0>)
 800ced4:	2102      	movs	r1, #2
 800ced6:	6818      	ldr	r0, [r3, #0]
 800ced8:	f008 bc8e 	b.w	80157f8 <LedBlink::SetMode(ledblink::Mode)>
 800cedc:	2500      	movs	r5, #0
 800cede:	4627      	mov	r7, r4
 800cee0:	46a9      	mov	r9, r5
 800cee2:	68e3      	ldr	r3, [r4, #12]
 800cee4:	4e1f      	ldr	r6, [pc, #124]	; (800cf64 <E131Bridge::HandleSynchronization()+0xb4>)
 800cee6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800cf68 <E131Bridge::HandleSynchronization()+0xb8>
 800ceea:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800ceee:	f897 3512 	ldrb.w	r3, [r7, #1298]	; 0x512
 800cef2:	b323      	cbz	r3, 800cf3e <E131Bridge::HandleSynchronization()+0x8e>
 800cef4:	f8d8 3000 	ldr.w	r3, [r8]
 800cef8:	6860      	ldr	r0, [r4, #4]
 800cefa:	07da      	lsls	r2, r3, #31
 800cefc:	bf5c      	itt	pl
 800cefe:	2301      	movpl	r3, #1
 800cf00:	f8c8 3000 	strpl.w	r3, [r8]
 800cf04:	6803      	ldr	r3, [r0, #0]
 800cf06:	4629      	mov	r1, r5
 800cf08:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800cf0c:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800cf10:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800cf14:	47d0      	blx	sl
 800cf16:	f897 3552 	ldrb.w	r3, [r7, #1362]	; 0x552
 800cf1a:	b93b      	cbnz	r3, 800cf2c <E131Bridge::HandleSynchronization()+0x7c>
 800cf1c:	6860      	ldr	r0, [r4, #4]
 800cf1e:	4629      	mov	r1, r5
 800cf20:	6803      	ldr	r3, [r0, #0]
 800cf22:	689b      	ldr	r3, [r3, #8]
 800cf24:	4798      	blx	r3
 800cf26:	2301      	movs	r3, #1
 800cf28:	f887 3552 	strb.w	r3, [r7, #1362]	; 0x552
 800cf2c:	f8d8 3000 	ldr.w	r3, [r8]
 800cf30:	f8c6 9600 	str.w	r9, [r6, #1536]	; 0x600
 800cf34:	07db      	lsls	r3, r3, #31
 800cf36:	bf5c      	itt	pl
 800cf38:	2301      	movpl	r3, #1
 800cf3a:	f8c8 3000 	strpl.w	r3, [r8]
 800cf3e:	3501      	adds	r5, #1
 800cf40:	2d20      	cmp	r5, #32
 800cf42:	f107 0744 	add.w	r7, r7, #68	; 0x44
 800cf46:	f206 6604 	addw	r6, r6, #1540	; 0x604
 800cf4a:	d1d0      	bne.n	800ceee <E131Bridge::HandleSynchronization()+0x3e>
 800cf4c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800cf4e:	b120      	cbz	r0, 800cf5a <E131Bridge::HandleSynchronization()+0xaa>
 800cf50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf54:	6803      	ldr	r3, [r0, #0]
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	4718      	bx	r3
 800cf5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf5e:	bf00      	nop
 800cf60:	2001ce48 	andcs	ip, r1, r8, asr #28
 800cf64:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800cf68:	200000ec 	andcs	r0, r0, ip, ror #1

0800cf6c <E131Bridge::Print()>:
 800cf6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf70:	2500      	movs	r5, #0
 800cf72:	4604      	mov	r4, r0
 800cf74:	b08c      	sub	sp, #48	; 0x30
 800cf76:	a902      	add	r1, sp, #8
 800cf78:	3024      	adds	r0, #36	; 0x24
 800cf7a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800cf7e:	f000 f8b3 	bl	800d0e8 <uuid_unparse>
 800cf82:	482c      	ldr	r0, [pc, #176]	; (800d034 <E131Bridge::Print()+0xc8>)
 800cf84:	f7fc fbea 	bl	800975c <printf>
 800cf88:	4b2b      	ldr	r3, [pc, #172]	; (800d038 <E131Bridge::Print()+0xcc>)
 800cf8a:	482c      	ldr	r0, [pc, #176]	; (800d03c <E131Bridge::Print()+0xd0>)
 800cf8c:	7819      	ldrb	r1, [r3, #0]
 800cf8e:	785a      	ldrb	r2, [r3, #1]
 800cf90:	f7fc fbe4 	bl	800975c <printf>
 800cf94:	482a      	ldr	r0, [pc, #168]	; (800d040 <E131Bridge::Print()+0xd4>)
 800cf96:	a902      	add	r1, sp, #8
 800cf98:	f7fc fbe0 	bl	800975c <printf>
 800cf9c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800cfa0:	b303      	cbz	r3, 800cfe4 <E131Bridge::Print()+0x78>
 800cfa2:	4828      	ldr	r0, [pc, #160]	; (800d044 <E131Bridge::Print()+0xd8>)
 800cfa4:	f7fc fbda 	bl	800975c <printf>
 800cfa8:	4e27      	ldr	r6, [pc, #156]	; (800d048 <E131Bridge::Print()+0xdc>)
 800cfaa:	4f28      	ldr	r7, [pc, #160]	; (800d04c <E131Bridge::Print()+0xe0>)
 800cfac:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800d050 <E131Bridge::Print()+0xe4>
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	4629      	mov	r1, r5
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	f10d 0206 	add.w	r2, sp, #6
 800cfba:	f7ff fa7b 	bl	800c4b4 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800cfbe:	b170      	cbz	r0, 800cfde <E131Bridge::Print()+0x72>
 800cfc0:	2344      	movs	r3, #68	; 0x44
 800cfc2:	436b      	muls	r3, r5
 800cfc4:	f204 524c 	addw	r2, r4, #1356	; 0x54c
 800cfc8:	58d3      	ldr	r3, [r2, r3]
 800cfca:	4629      	mov	r1, r5
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	bf0c      	ite	eq
 800cfd0:	4633      	moveq	r3, r6
 800cfd2:	463b      	movne	r3, r7
 800cfd4:	4640      	mov	r0, r8
 800cfd6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cfda:	f7fc fbbf 	bl	800975c <printf>
 800cfde:	3501      	adds	r5, #1
 800cfe0:	2d20      	cmp	r5, #32
 800cfe2:	d1e5      	bne.n	800cfb0 <E131Bridge::Print()+0x44>
 800cfe4:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800cfe8:	b1d3      	cbz	r3, 800d020 <E131Bridge::Print()+0xb4>
 800cfea:	481a      	ldr	r0, [pc, #104]	; (800d054 <E131Bridge::Print()+0xe8>)
 800cfec:	f7fc fbb6 	bl	800975c <printf>
 800cff0:	2500      	movs	r5, #0
 800cff2:	4e19      	ldr	r6, [pc, #100]	; (800d058 <E131Bridge::Print()+0xec>)
 800cff4:	2300      	movs	r3, #0
 800cff6:	4629      	mov	r1, r5
 800cff8:	4620      	mov	r0, r4
 800cffa:	f10d 0206 	add.w	r2, sp, #6
 800cffe:	f7ff fa59 	bl	800c4b4 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800d002:	b150      	cbz	r0, 800d01a <E131Bridge::Print()+0xae>
 800d004:	230c      	movs	r3, #12
 800d006:	436b      	muls	r3, r5
 800d008:	f604 5299 	addw	r2, r4, #3481	; 0xd99
 800d00c:	5cd3      	ldrb	r3, [r2, r3]
 800d00e:	4629      	mov	r1, r5
 800d010:	4630      	mov	r0, r6
 800d012:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d016:	f7fc fba1 	bl	800975c <printf>
 800d01a:	3501      	adds	r5, #1
 800d01c:	2d20      	cmp	r5, #32
 800d01e:	d1e9      	bne.n	800cff4 <E131Bridge::Print()+0x88>
 800d020:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800d024:	b113      	cbz	r3, 800d02c <E131Bridge::Print()+0xc0>
 800d026:	480d      	ldr	r0, [pc, #52]	; (800d05c <E131Bridge::Print()+0xf0>)
 800d028:	f7fc fb98 	bl	800975c <printf>
 800d02c:	b00c      	add	sp, #48	; 0x30
 800d02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d032:	bf00      	nop
 800d034:	080182bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r9, pc}
 800d038:	0801834c 	stmdaeq	r1, {r2, r3, r6, r8, r9, pc}
 800d03c:	080182c5 	stmdaeq	r1, {r0, r2, r6, r7, r9, pc}
 800d040:	080182d8 	stmdaeq	r1, {r3, r4, r6, r7, r9, pc}
 800d044:	08018055 	stmdaeq	r1, {r0, r2, r4, r6, pc}
 800d048:	08017ff9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 800d04c:	08017ffd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 800d050:	080182e8 	stmdaeq	r1, {r3, r5, r6, r7, r9, pc}
 800d054:	0801808d 	stmdaeq	r1, {r0, r2, r3, r7, pc}
 800d058:	08018307 	stmdaeq	r1, {r0, r1, r2, r8, r9, pc}
 800d05c:	08018326 	stmdaeq	r1, {r1, r2, r5, r8, r9, pc}

0800d060 <uuid_unparse_x>:
 800d060:	4603      	mov	r3, r0
 800d062:	b530      	push	{r4, r5, lr}
 800d064:	4608      	mov	r0, r1
 800d066:	4611      	mov	r1, r2
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	b08f      	sub	sp, #60	; 0x3c
 800d06c:	ba12      	rev	r2, r2
 800d06e:	920a      	str	r2, [sp, #40]	; 0x28
 800d070:	889a      	ldrh	r2, [r3, #4]
 800d072:	891c      	ldrh	r4, [r3, #8]
 800d074:	ba52      	rev16	r2, r2
 800d076:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800d07a:	88da      	ldrh	r2, [r3, #6]
 800d07c:	ba64      	rev16	r4, r4
 800d07e:	ba52      	rev16	r2, r2
 800d080:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800d084:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 800d088:	f103 020a 	add.w	r2, r3, #10
 800d08c:	f10d 0432 	add.w	r4, sp, #50	; 0x32
 800d090:	3310      	adds	r3, #16
 800d092:	4293      	cmp	r3, r2
 800d094:	d122      	bne.n	800d0dc <uuid_unparse_x+0x7c>
 800d096:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800d09a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800d09e:	9208      	str	r2, [sp, #32]
 800d0a0:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800d0a4:	0a1b      	lsrs	r3, r3, #8
 800d0a6:	9207      	str	r2, [sp, #28]
 800d0a8:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800d0ac:	9301      	str	r3, [sp, #4]
 800d0ae:	9206      	str	r2, [sp, #24]
 800d0b0:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800d0b4:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800d0b8:	9205      	str	r2, [sp, #20]
 800d0ba:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	9204      	str	r2, [sp, #16]
 800d0c2:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800d0c6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800d0ca:	9203      	str	r2, [sp, #12]
 800d0cc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800d0d0:	9202      	str	r2, [sp, #8]
 800d0d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0d4:	f7fc fb52 	bl	800977c <sprintf>
 800d0d8:	b00f      	add	sp, #60	; 0x3c
 800d0da:	bd30      	pop	{r4, r5, pc}
 800d0dc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d0e0:	f804 5b01 	strb.w	r5, [r4], #1
 800d0e4:	e7d5      	b.n	800d092 <uuid_unparse_x+0x32>
	...

0800d0e8 <uuid_unparse>:
 800d0e8:	4a01      	ldr	r2, [pc, #4]	; (800d0f0 <uuid_unparse+0x8>)
 800d0ea:	f7ff bfb9 	b.w	800d060 <uuid_unparse_x>
 800d0ee:	bf00      	nop
 800d0f0:	0801834e 	stmdaeq	r1, {r1, r2, r3, r6, r8, r9, pc}

0800d0f4 <LLRPDevice::~LLRPDevice()>:
 800d0f4:	4770      	bx	lr

0800d0f6 <LLRPDevice::CopyUID(unsigned char*)>:
 800d0f6:	4770      	bx	lr

0800d0f8 <LLRPDevice::CopyCID(unsigned char*)>:
 800d0f8:	4770      	bx	lr

0800d0fa <LLRPDevice::LLRPHandleRdmCommand(unsigned char const*)>:
 800d0fa:	2000      	movs	r0, #0
 800d0fc:	4770      	bx	lr

0800d0fe <LLRPDevice::~LLRPDevice()>:
 800d0fe:	b510      	push	{r4, lr}
 800d100:	4604      	mov	r4, r0
 800d102:	f008 fc5d 	bl	80159c0 <operator delete(void*)>
 800d106:	4620      	mov	r0, r4
 800d108:	bd10      	pop	{r4, pc}

0800d10a <memcpy.isra.0>:
 800d10a:	3801      	subs	r0, #1
 800d10c:	440a      	add	r2, r1
 800d10e:	4291      	cmp	r1, r2
 800d110:	d100      	bne.n	800d114 <memcpy.isra.0+0xa>
 800d112:	4770      	bx	lr
 800d114:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d118:	f800 3f01 	strb.w	r3, [r0, #1]!
 800d11c:	e7f7      	b.n	800d10e <memcpy.isra.0+0x4>
	...

0800d120 <LLRPDevice::LLRPDevice()>:
 800d120:	b513      	push	{r0, r1, r4, lr}
 800d122:	4604      	mov	r4, r0
 800d124:	4b09      	ldr	r3, [pc, #36]	; (800d14c <LLRPDevice::LLRPDevice()+0x2c>)
 800d126:	a901      	add	r1, sp, #4
 800d128:	6003      	str	r3, [r0, #0]
 800d12a:	4809      	ldr	r0, [pc, #36]	; (800d150 <LLRPDevice::LLRPDevice()+0x30>)
 800d12c:	f008 fc50 	bl	80159d0 <inet_aton>
 800d130:	9a01      	ldr	r2, [sp, #4]
 800d132:	4b08      	ldr	r3, [pc, #32]	; (800d154 <LLRPDevice::LLRPDevice()+0x34>)
 800d134:	a901      	add	r1, sp, #4
 800d136:	4808      	ldr	r0, [pc, #32]	; (800d158 <LLRPDevice::LLRPDevice()+0x38>)
 800d138:	601a      	str	r2, [r3, #0]
 800d13a:	f008 fc49 	bl	80159d0 <inet_aton>
 800d13e:	4620      	mov	r0, r4
 800d140:	4b06      	ldr	r3, [pc, #24]	; (800d15c <LLRPDevice::LLRPDevice()+0x3c>)
 800d142:	9a01      	ldr	r2, [sp, #4]
 800d144:	601a      	str	r2, [r3, #0]
 800d146:	b002      	add	sp, #8
 800d148:	bd10      	pop	{r4, pc}
 800d14a:	bf00      	nop
 800d14c:	08018430 	stmdaeq	r1, {r4, r5, sl, pc}
 800d150:	0801837f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r8, r9, pc}
 800d154:	2000c18c 	andcs	ip, r0, ip, lsl #3
 800d158:	0801838f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, r9, pc}
 800d15c:	2000c190 	mulcs	r0, r0, r1

0800d160 <LLRPDevice::HandleRequestMessage()>:
 800d160:	b570      	push	{r4, r5, r6, lr}
 800d162:	4b23      	ldr	r3, [pc, #140]	; (800d1f0 <LLRPDevice::HandleRequestMessage()+0x90>)
 800d164:	b086      	sub	sp, #24
 800d166:	681c      	ldr	r4, [r3, #0]
 800d168:	4605      	mov	r5, r0
 800d16a:	f104 0617 	add.w	r6, r4, #23
 800d16e:	2210      	movs	r2, #16
 800d170:	4631      	mov	r1, r6
 800d172:	a802      	add	r0, sp, #8
 800d174:	f7ff ffc9 	bl	800d10a <memcpy.isra.0>
 800d178:	2343      	movs	r3, #67	; 0x43
 800d17a:	74a3      	strb	r3, [r4, #18]
 800d17c:	682b      	ldr	r3, [r5, #0]
 800d17e:	4631      	mov	r1, r6
 800d180:	4628      	mov	r0, r5
 800d182:	68db      	ldr	r3, [r3, #12]
 800d184:	4798      	blx	r3
 800d186:	232c      	movs	r3, #44	; 0x2c
 800d188:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 800d18c:	2300      	movs	r3, #0
 800d18e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 800d192:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
 800d196:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800d19a:	2302      	movs	r3, #2
 800d19c:	2210      	movs	r2, #16
 800d19e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800d1a2:	a902      	add	r1, sp, #8
 800d1a4:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 800d1a8:	f7ff ffaf 	bl	800d10a <memcpy.isra.0>
 800d1ac:	2311      	movs	r3, #17
 800d1ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d1b8:	682b      	ldr	r3, [r5, #0]
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	f104 0146 	add.w	r1, r4, #70	; 0x46
 800d1c0:	689b      	ldr	r3, [r3, #8]
 800d1c2:	4798      	blx	r3
 800d1c4:	4b0b      	ldr	r3, [pc, #44]	; (800d1f4 <LLRPDevice::HandleRequestMessage()+0x94>)
 800d1c6:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800d1ca:	6818      	ldr	r0, [r3, #0]
 800d1cc:	f005 feb2 	bl	8012f34 <Network::MacAddressCopyTo(unsigned char*)>
 800d1d0:	23ff      	movs	r3, #255	; 0xff
 800d1d2:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 800d1d6:	f241 53c1 	movw	r3, #5569	; 0x15c1
 800d1da:	4807      	ldr	r0, [pc, #28]	; (800d1f8 <LLRPDevice::HandleRequestMessage()+0x98>)
 800d1dc:	9300      	str	r3, [sp, #0]
 800d1de:	4b07      	ldr	r3, [pc, #28]	; (800d1fc <LLRPDevice::HandleRequestMessage()+0x9c>)
 800d1e0:	2253      	movs	r2, #83	; 0x53
 800d1e2:	4621      	mov	r1, r4
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	7800      	ldrb	r0, [r0, #0]
 800d1e8:	f005 f9d8 	bl	801259c <udp_send>
 800d1ec:	b006      	add	sp, #24
 800d1ee:	bd70      	pop	{r4, r5, r6, pc}
 800d1f0:	2000c194 	mulcs	r0, r4, r1
 800d1f4:	2001c724 	andcs	ip, r1, r4, lsr #14
 800d1f8:	20000000 	andcs	r0, r0, r0
 800d1fc:	2000c190 	mulcs	r0, r0, r1

0800d200 <LLRPDevice::HandleRdmCommand()>:
 800d200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d204:	4b22      	ldr	r3, [pc, #136]	; (800d290 <LLRPDevice::HandleRdmCommand()+0x90>)
 800d206:	b086      	sub	sp, #24
 800d208:	681c      	ldr	r4, [r3, #0]
 800d20a:	6803      	ldr	r3, [r0, #0]
 800d20c:	f104 0946 	add.w	r9, r4, #70	; 0x46
 800d210:	4649      	mov	r1, r9
 800d212:	691b      	ldr	r3, [r3, #16]
 800d214:	4607      	mov	r7, r0
 800d216:	4798      	blx	r3
 800d218:	4605      	mov	r5, r0
 800d21a:	2800      	cmp	r0, #0
 800d21c:	d034      	beq.n	800d288 <LLRPDevice::HandleRdmCommand()+0x88>
 800d21e:	7803      	ldrb	r3, [r0, #0]
 800d220:	2bcc      	cmp	r3, #204	; 0xcc
 800d222:	d131      	bne.n	800d288 <LLRPDevice::HandleRdmCommand()+0x88>
 800d224:	f104 0a17 	add.w	sl, r4, #23
 800d228:	2210      	movs	r2, #16
 800d22a:	4651      	mov	r1, sl
 800d22c:	a802      	add	r0, sp, #8
 800d22e:	f7ff ff6c 	bl	800d10a <memcpy.isra.0>
 800d232:	78ae      	ldrb	r6, [r5, #2]
 800d234:	4651      	mov	r1, sl
 800d236:	f106 0837 	add.w	r8, r6, #55	; 0x37
 800d23a:	fa5f f888 	uxtb.w	r8, r8
 800d23e:	f884 8012 	strb.w	r8, [r4, #18]
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	4638      	mov	r0, r7
 800d246:	68db      	ldr	r3, [r3, #12]
 800d248:	4798      	blx	r3
 800d24a:	f106 0320 	add.w	r3, r6, #32
 800d24e:	2210      	movs	r2, #16
 800d250:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 800d254:	a902      	add	r1, sp, #8
 800d256:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 800d25a:	f7ff ff56 	bl	800d10a <memcpy.isra.0>
 800d25e:	1d73      	adds	r3, r6, #5
 800d260:	1c72      	adds	r2, r6, #1
 800d262:	4648      	mov	r0, r9
 800d264:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800d268:	b2d2      	uxtb	r2, r2
 800d26a:	1c69      	adds	r1, r5, #1
 800d26c:	f7ff ff4d 	bl	800d10a <memcpy.isra.0>
 800d270:	f241 53c1 	movw	r3, #5569	; 0x15c1
 800d274:	4807      	ldr	r0, [pc, #28]	; (800d294 <LLRPDevice::HandleRdmCommand()+0x94>)
 800d276:	9300      	str	r3, [sp, #0]
 800d278:	4b07      	ldr	r3, [pc, #28]	; (800d298 <LLRPDevice::HandleRdmCommand()+0x98>)
 800d27a:	4621      	mov	r1, r4
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	7800      	ldrb	r0, [r0, #0]
 800d280:	f108 0210 	add.w	r2, r8, #16
 800d284:	f005 f98a 	bl	801259c <udp_send>
 800d288:	b006      	add	sp, #24
 800d28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d28e:	bf00      	nop
 800d290:	2000c194 	mulcs	r0, r4, r1
 800d294:	20000000 	andcs	r0, r0, r0
 800d298:	2000c190 	mulcs	r0, r0, r1

0800d29c <LLRPDevice::Run()>:
 800d29c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d29e:	4604      	mov	r4, r0
 800d2a0:	4d0e      	ldr	r5, [pc, #56]	; (800d2dc <LLRPDevice::Run()+0x40>)
 800d2a2:	480f      	ldr	r0, [pc, #60]	; (800d2e0 <LLRPDevice::Run()+0x44>)
 800d2a4:	4629      	mov	r1, r5
 800d2a6:	4a0f      	ldr	r2, [pc, #60]	; (800d2e4 <LLRPDevice::Run()+0x48>)
 800d2a8:	7800      	ldrb	r0, [r0, #0]
 800d2aa:	f10d 0306 	add.w	r3, sp, #6
 800d2ae:	f005 f94f 	bl	8012550 <udp_recv2>
 800d2b2:	2841      	cmp	r0, #65	; 0x41
 800d2b4:	d908      	bls.n	800d2c8 <LLRPDevice::Run()+0x2c>
 800d2b6:	682b      	ldr	r3, [r5, #0]
 800d2b8:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800d2bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d2c0:	ba1a      	rev	r2, r3
 800d2c2:	d003      	beq.n	800d2cc <LLRPDevice::Run()+0x30>
 800d2c4:	2a03      	cmp	r2, #3
 800d2c6:	d005      	beq.n	800d2d4 <LLRPDevice::Run()+0x38>
 800d2c8:	b003      	add	sp, #12
 800d2ca:	bd30      	pop	{r4, r5, pc}
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	f7ff ff47 	bl	800d160 <LLRPDevice::HandleRequestMessage()>
 800d2d2:	e7f9      	b.n	800d2c8 <LLRPDevice::Run()+0x2c>
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f7ff ff93 	bl	800d200 <LLRPDevice::HandleRdmCommand()>
 800d2da:	e7f5      	b.n	800d2c8 <LLRPDevice::Run()+0x2c>
 800d2dc:	2000c194 	mulcs	r0, r4, r1
 800d2e0:	20000000 	andcs	r0, r0, r0
 800d2e4:	2000c188 	andcs	ip, r0, r8, lsl #3

0800d2e8 <LLRPDevice::Print()>:
 800d2e8:	b507      	push	{r0, r1, r2, lr}
 800d2ea:	4811      	ldr	r0, [pc, #68]	; (800d330 <LLRPDevice::Print()+0x48>)
 800d2ec:	f7fc fa36 	bl	800975c <printf>
 800d2f0:	f241 51c1 	movw	r1, #5569	; 0x15c1
 800d2f4:	480f      	ldr	r0, [pc, #60]	; (800d334 <LLRPDevice::Print()+0x4c>)
 800d2f6:	f7fc fa31 	bl	800975c <printf>
 800d2fa:	4b0f      	ldr	r3, [pc, #60]	; (800d338 <LLRPDevice::Print()+0x50>)
 800d2fc:	480f      	ldr	r0, [pc, #60]	; (800d33c <LLRPDevice::Print()+0x54>)
 800d2fe:	6819      	ldr	r1, [r3, #0]
 800d300:	0e0b      	lsrs	r3, r1, #24
 800d302:	9300      	str	r3, [sp, #0]
 800d304:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800d308:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800d30c:	b2c9      	uxtb	r1, r1
 800d30e:	f7fc fa25 	bl	800975c <printf>
 800d312:	4b0b      	ldr	r3, [pc, #44]	; (800d340 <LLRPDevice::Print()+0x58>)
 800d314:	480b      	ldr	r0, [pc, #44]	; (800d344 <LLRPDevice::Print()+0x5c>)
 800d316:	6819      	ldr	r1, [r3, #0]
 800d318:	0e0b      	lsrs	r3, r1, #24
 800d31a:	9300      	str	r3, [sp, #0]
 800d31c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800d320:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800d324:	b2c9      	uxtb	r1, r1
 800d326:	f7fc fa19 	bl	800975c <printf>
 800d32a:	b003      	add	sp, #12
 800d32c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d330:	0801839f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, r9, pc}
 800d334:	080183ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, r9, pc}
 800d338:	2000c18c 	andcs	ip, r0, ip, lsl #3
 800d33c:	080183d8 	stmdaeq	r1, {r3, r4, r6, r7, r8, r9, pc}
 800d340:	2000c190 	mulcs	r0, r0, r1
 800d344:	080183ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

0800d348 <RDMNetDevice::Print()>:
 800d348:	2300      	movs	r3, #0
 800d34a:	b510      	push	{r4, lr}
 800d34c:	4604      	mov	r4, r0
 800d34e:	b08a      	sub	sp, #40	; 0x28
 800d350:	4669      	mov	r1, sp
 800d352:	480a      	ldr	r0, [pc, #40]	; (800d37c <RDMNetDevice::Print()+0x34>)
 800d354:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d358:	f7ff fec6 	bl	800d0e8 <uuid_unparse>
 800d35c:	4808      	ldr	r0, [pc, #32]	; (800d380 <RDMNetDevice::Print()+0x38>)
 800d35e:	f7fc f9fd 	bl	800975c <printf>
 800d362:	4669      	mov	r1, sp
 800d364:	4807      	ldr	r0, [pc, #28]	; (800d384 <RDMNetDevice::Print()+0x3c>)
 800d366:	f7fc f9f9 	bl	800975c <printf>
 800d36a:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 800d36e:	f7ff ffbb 	bl	800d2e8 <LLRPDevice::Print()>
 800d372:	4620      	mov	r0, r4
 800d374:	f000 fa62 	bl	800d83c <RDMDeviceResponder::Print()>
 800d378:	b00a      	add	sp, #40	; 0x28
 800d37a:	bd10      	pop	{r4, pc}
 800d37c:	2000c297 	mulcs	r0, r7, r2
 800d380:	08018476 	stmdaeq	r1, {r1, r2, r4, r5, r6, sl, pc}
 800d384:	0801847e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, pc}

0800d388 <RDMSensors::RDMSensors()>:
 800d388:	2200      	movs	r2, #0
 800d38a:	6002      	str	r2, [r0, #0]
 800d38c:	7102      	strb	r2, [r0, #4]
 800d38e:	4a01      	ldr	r2, [pc, #4]	; (800d394 <RDMSensors::RDMSensors()+0xc>)
 800d390:	6010      	str	r0, [r2, #0]
 800d392:	4770      	bx	lr
 800d394:	2000c2a8 	andcs	ip, r0, r8, lsr #5

0800d398 <RDMSensors::~RDMSensors()>:
 800d398:	b570      	push	{r4, r5, r6, lr}
 800d39a:	2500      	movs	r5, #0
 800d39c:	4604      	mov	r4, r0
 800d39e:	462e      	mov	r6, r5
 800d3a0:	7923      	ldrb	r3, [r4, #4]
 800d3a2:	6820      	ldr	r0, [r4, #0]
 800d3a4:	42ab      	cmp	r3, r5
 800d3a6:	d804      	bhi.n	800d3b2 <RDMSensors::~RDMSensors()+0x1a>
 800d3a8:	b108      	cbz	r0, 800d3ae <RDMSensors::~RDMSensors()+0x16>
 800d3aa:	f008 fb0b 	bl	80159c4 <operator delete[](void*)>
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	bd70      	pop	{r4, r5, r6, pc}
 800d3b2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 800d3b6:	b128      	cbz	r0, 800d3c4 <RDMSensors::~RDMSensors()+0x2c>
 800d3b8:	6803      	ldr	r3, [r0, #0]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	4798      	blx	r3
 800d3be:	6823      	ldr	r3, [r4, #0]
 800d3c0:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 800d3c4:	3501      	adds	r5, #1
 800d3c6:	e7eb      	b.n	800d3a0 <RDMSensors::~RDMSensors()+0x8>

0800d3c8 <RDMSubDevices::RDMSubDevices()>:
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	6002      	str	r2, [r0, #0]
 800d3cc:	8082      	strh	r2, [r0, #4]
 800d3ce:	4a01      	ldr	r2, [pc, #4]	; (800d3d4 <RDMSubDevices::RDMSubDevices()+0xc>)
 800d3d0:	6010      	str	r0, [r2, #0]
 800d3d2:	4770      	bx	lr
 800d3d4:	2000c2ac 	andcs	ip, r0, ip, lsr #5

0800d3d8 <RDMSubDevices::~RDMSubDevices()>:
 800d3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3da:	2500      	movs	r5, #0
 800d3dc:	4604      	mov	r4, r0
 800d3de:	462e      	mov	r6, r5
 800d3e0:	88a3      	ldrh	r3, [r4, #4]
 800d3e2:	6820      	ldr	r0, [r4, #0]
 800d3e4:	42ab      	cmp	r3, r5
 800d3e6:	d804      	bhi.n	800d3f2 <RDMSubDevices::~RDMSubDevices()+0x1a>
 800d3e8:	b108      	cbz	r0, 800d3ee <RDMSubDevices::~RDMSubDevices()+0x16>
 800d3ea:	f008 faeb 	bl	80159c4 <operator delete[](void*)>
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3f2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 800d3f6:	00af      	lsls	r7, r5, #2
 800d3f8:	b110      	cbz	r0, 800d400 <RDMSubDevices::~RDMSubDevices()+0x28>
 800d3fa:	6803      	ldr	r3, [r0, #0]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	4798      	blx	r3
 800d400:	6823      	ldr	r3, [r4, #0]
 800d402:	3501      	adds	r5, #1
 800d404:	51de      	str	r6, [r3, r7]
 800d406:	e7eb      	b.n	800d3e0 <RDMSubDevices::~RDMSubDevices()+0x8>

0800d408 <RDMSubDevices::GetInfo(unsigned short)>:
 800d408:	6803      	ldr	r3, [r0, #0]
 800d40a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800d40e:	3901      	subs	r1, #1
 800d410:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800d414:	3010      	adds	r0, #16
 800d416:	4770      	bx	lr

0800d418 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>:
 800d418:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 800d41c:	6800      	ldr	r0, [r0, #0]
 800d41e:	3b01      	subs	r3, #1
 800d420:	4611      	mov	r1, r2
 800d422:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d426:	f000 b82f 	b.w	800d488 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>

0800d42a <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>:
 800d42a:	b410      	push	{r4}
 800d42c:	460c      	mov	r4, r1
 800d42e:	6800      	ldr	r0, [r0, #0]
 800d430:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800d434:	3c01      	subs	r4, #1
 800d436:	4611      	mov	r1, r2
 800d438:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800d43c:	461a      	mov	r2, r3
 800d43e:	bc10      	pop	{r4}
 800d440:	f000 b837 	b.w	800d4b2 <RDMSubDevice::SetLabel(char const*, unsigned char)>

0800d444 <RDMSubDevices::GetFactoryDefaults()>:
 800d444:	b538      	push	{r3, r4, r5, lr}
 800d446:	4605      	mov	r5, r0
 800d448:	2400      	movs	r4, #0
 800d44a:	88ab      	ldrh	r3, [r5, #4]
 800d44c:	42a3      	cmp	r3, r4
 800d44e:	d801      	bhi.n	800d454 <RDMSubDevices::GetFactoryDefaults()+0x10>
 800d450:	2001      	movs	r0, #1
 800d452:	e009      	b.n	800d468 <RDMSubDevices::GetFactoryDefaults()+0x24>
 800d454:	682b      	ldr	r3, [r5, #0]
 800d456:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d45a:	b908      	cbnz	r0, 800d460 <RDMSubDevices::GetFactoryDefaults()+0x1c>
 800d45c:	3401      	adds	r4, #1
 800d45e:	e7f4      	b.n	800d44a <RDMSubDevices::GetFactoryDefaults()+0x6>
 800d460:	f000 f85c 	bl	800d51c <RDMSubDevice::GetFactoryDefaults()>
 800d464:	2800      	cmp	r0, #0
 800d466:	d1f9      	bne.n	800d45c <RDMSubDevices::GetFactoryDefaults()+0x18>
 800d468:	bd38      	pop	{r3, r4, r5, pc}

0800d46a <RDMSubDevices::SetFactoryDefaults()>:
 800d46a:	b538      	push	{r3, r4, r5, lr}
 800d46c:	4605      	mov	r5, r0
 800d46e:	2400      	movs	r4, #0
 800d470:	88ab      	ldrh	r3, [r5, #4]
 800d472:	42a3      	cmp	r3, r4
 800d474:	d800      	bhi.n	800d478 <RDMSubDevices::SetFactoryDefaults()+0xe>
 800d476:	bd38      	pop	{r3, r4, r5, pc}
 800d478:	682b      	ldr	r3, [r5, #0]
 800d47a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d47e:	b108      	cbz	r0, 800d484 <RDMSubDevices::SetFactoryDefaults()+0x1a>
 800d480:	f000 f826 	bl	800d4d0 <RDMSubDevice::SetFactoryDefaults()>
 800d484:	3401      	adds	r4, #1
 800d486:	e7f3      	b.n	800d470 <RDMSubDevices::SetFactoryDefaults()+0x6>

0800d488 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>:
 800d488:	f100 0316 	add.w	r3, r0, #22
 800d48c:	600b      	str	r3, [r1, #0]
 800d48e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800d492:	710b      	strb	r3, [r1, #4]
 800d494:	4770      	bx	lr

0800d496 <RDMSubDevice::SetLabel(char const*)>:
 800d496:	2300      	movs	r3, #0
 800d498:	b510      	push	{r4, lr}
 800d49a:	f100 0416 	add.w	r4, r0, #22
 800d49e:	5cca      	ldrb	r2, [r1, r3]
 800d4a0:	b122      	cbz	r2, 800d4ac <RDMSubDevice::SetLabel(char const*)+0x16>
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	2b20      	cmp	r3, #32
 800d4a6:	f804 2b01 	strb.w	r2, [r4], #1
 800d4aa:	d1f8      	bne.n	800d49e <RDMSubDevice::SetLabel(char const*)+0x8>
 800d4ac:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 800d4b0:	bd10      	pop	{r4, pc}

0800d4b2 <RDMSubDevice::SetLabel(char const*, unsigned char)>:
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	b530      	push	{r4, r5, lr}
 800d4b6:	f100 0416 	add.w	r4, r0, #22
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d905      	bls.n	800d4ca <RDMSubDevice::SetLabel(char const*, unsigned char)+0x18>
 800d4be:	5ccd      	ldrb	r5, [r1, r3]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	2b20      	cmp	r3, #32
 800d4c4:	f804 5b01 	strb.w	r5, [r4], #1
 800d4c8:	d1f7      	bne.n	800d4ba <RDMSubDevice::SetLabel(char const*, unsigned char)+0x8>
 800d4ca:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 800d4ce:	bd30      	pop	{r4, r5, pc}

0800d4d0 <RDMSubDevice::SetFactoryDefaults()>:
 800d4d0:	7a03      	ldrb	r3, [r0, #8]
 800d4d2:	b510      	push	{r4, lr}
 800d4d4:	b94b      	cbnz	r3, 800d4ea <RDMSubDevice::SetFactoryDefaults()+0x1a>
 800d4d6:	f100 0138 	add.w	r1, r0, #56	; 0x38
 800d4da:	f7ff ffdc 	bl	800d496 <RDMSubDevice::SetLabel(char const*)>
 800d4de:	8983      	ldrh	r3, [r0, #12]
 800d4e0:	8243      	strh	r3, [r0, #18]
 800d4e2:	7b83      	ldrb	r3, [r0, #14]
 800d4e4:	7503      	strb	r3, [r0, #20]
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	7203      	strb	r3, [r0, #8]
 800d4ea:	bd10      	pop	{r4, pc}

0800d4ec <RDMSubDevice::CalculateChecksum()>:
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	b510      	push	{r4, lr}
 800d4f0:	8a43      	ldrh	r3, [r0, #18]
 800d4f2:	7d01      	ldrb	r1, [r0, #20]
 800d4f4:	f892 4036 	ldrb.w	r4, [r2, #54]	; 0x36
 800d4f8:	440b      	add	r3, r1
 800d4fa:	b298      	uxth	r0, r3
 800d4fc:	f102 0316 	add.w	r3, r2, #22
 800d500:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d504:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d508:	32ea      	adds	r2, #234	; 0xea
 800d50a:	18d1      	adds	r1, r2, r3
 800d50c:	428c      	cmp	r4, r1
 800d50e:	d800      	bhi.n	800d512 <RDMSubDevice::CalculateChecksum()+0x26>
 800d510:	bd10      	pop	{r4, pc}
 800d512:	f813 1b01 	ldrb.w	r1, [r3], #1
 800d516:	4408      	add	r0, r1
 800d518:	b280      	uxth	r0, r0
 800d51a:	e7f6      	b.n	800d50a <RDMSubDevice::CalculateChecksum()+0x1e>

0800d51c <RDMSubDevice::GetFactoryDefaults()>:
 800d51c:	7a03      	ldrb	r3, [r0, #8]
 800d51e:	b510      	push	{r4, lr}
 800d520:	4604      	mov	r4, r0
 800d522:	b133      	cbz	r3, 800d532 <RDMSubDevice::GetFactoryDefaults()+0x16>
 800d524:	f7ff ffe2 	bl	800d4ec <RDMSubDevice::CalculateChecksum()>
 800d528:	8963      	ldrh	r3, [r4, #10]
 800d52a:	4283      	cmp	r3, r0
 800d52c:	bf1c      	itt	ne
 800d52e:	2300      	movne	r3, #0
 800d530:	7223      	strbne	r3, [r4, #8]
 800d532:	7a20      	ldrb	r0, [r4, #8]
 800d534:	bd10      	pop	{r4, pc}

0800d536 <memcpy.isra.0>:
 800d536:	f008 bafb 	b.w	8015b30 <memcpy>
	...

0800d53c <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 800d53c:	b510      	push	{r4, lr}
 800d53e:	6001      	str	r1, [r0, #0]
 800d540:	2100      	movs	r1, #0
 800d542:	4604      	mov	r4, r0
 800d544:	6041      	str	r1, [r0, #4]
 800d546:	2220      	movs	r2, #32
 800d548:	3008      	adds	r0, #8
 800d54a:	f008 fb13 	bl	8015b74 <memset>
 800d54e:	4b03      	ldr	r3, [pc, #12]	; (800d55c <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x20>)
 800d550:	4620      	mov	r0, r4
 800d552:	62a3      	str	r3, [r4, #40]	; 0x28
 800d554:	237f      	movs	r3, #127	; 0x7f
 800d556:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800d55a:	bd10      	pop	{r4, pc}
 800d55c:	ff7fff00 			; <UNDEFINED> instruction: 0xff7fff00

0800d560 <RDMDeviceParams::Load()>:
 800d560:	4601      	mov	r1, r0
 800d562:	6800      	ldr	r0, [r0, #0]
 800d564:	b130      	cbz	r0, 800d574 <RDMDeviceParams::Load()+0x14>
 800d566:	b508      	push	{r3, lr}
 800d568:	6803      	ldr	r3, [r0, #0]
 800d56a:	3104      	adds	r1, #4
 800d56c:	68db      	ldr	r3, [r3, #12]
 800d56e:	4798      	blx	r3
 800d570:	2001      	movs	r0, #1
 800d572:	bd08      	pop	{r3, pc}
 800d574:	4770      	bx	lr

0800d576 <RDMDeviceParams::Set(RDMDevice*)>:
 800d576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d578:	6843      	ldr	r3, [r0, #4]
 800d57a:	460c      	mov	r4, r1
 800d57c:	07d9      	lsls	r1, r3, #31
 800d57e:	4605      	mov	r5, r0
 800d580:	d518      	bpl.n	800d5b4 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 800d582:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 800d586:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800d58a:	2e20      	cmp	r6, #32
 800d58c:	bf28      	it	cs
 800d58e:	2620      	movcs	r6, #32
 800d590:	f100 0108 	add.w	r1, r0, #8
 800d594:	b1e3      	cbz	r3, 800d5d0 <RDMDeviceParams::Set(RDMDevice*)+0x5a>
 800d596:	f104 070a 	add.w	r7, r4, #10
 800d59a:	4638      	mov	r0, r7
 800d59c:	4632      	mov	r2, r6
 800d59e:	f7ff ffca 	bl	800d536 <memcpy.isra.0>
 800d5a2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d5a4:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
 800d5a8:	b120      	cbz	r0, 800d5b4 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 800d5aa:	6803      	ldr	r3, [r0, #0]
 800d5ac:	4632      	mov	r2, r6
 800d5ae:	4639      	mov	r1, r7
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	4798      	blx	r3
 800d5b4:	686b      	ldr	r3, [r5, #4]
 800d5b6:	079a      	lsls	r2, r3, #30
 800d5b8:	bf44      	itt	mi
 800d5ba:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 800d5be:	f8a4 204c 	strhmi.w	r2, [r4, #76]	; 0x4c
 800d5c2:	075b      	lsls	r3, r3, #29
 800d5c4:	bf44      	itt	mi
 800d5c6:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 800d5ca:	f8a4 304e 	strhmi.w	r3, [r4, #78]	; 0x4e
 800d5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5d0:	4632      	mov	r2, r6
 800d5d2:	f104 0051 	add.w	r0, r4, #81	; 0x51
 800d5d6:	f7ff ffae 	bl	800d536 <memcpy.isra.0>
 800d5da:	f884 6071 	strb.w	r6, [r4, #113]	; 0x71
 800d5de:	e7e9      	b.n	800d5b4 <RDMDeviceParams::Set(RDMDevice*)+0x3e>

0800d5e0 <RDMDeviceParams::Dump()>:
 800d5e0:	4770      	bx	lr

0800d5e2 <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
 800d5e2:	4770      	bx	lr

0800d5e4 <RDMDeviceResponder::DmxStartAddressUpdate()>:
 800d5e4:	4770      	bx	lr
	...

0800d5e8 <RDMDeviceResponder::~RDMDeviceResponder()>:
 800d5e8:	b510      	push	{r4, lr}
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	4b05      	ldr	r3, [pc, #20]	; (800d604 <RDMDeviceResponder::~RDMDeviceResponder()+0x1c>)
 800d5ee:	f840 3b88 	str.w	r3, [r0], #136
 800d5f2:	f7ff fef1 	bl	800d3d8 <RDMSubDevices::~RDMSubDevices()>
 800d5f6:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800d5fa:	f7ff fecd 	bl	800d398 <RDMSensors::~RDMSensors()>
 800d5fe:	4620      	mov	r0, r4
 800d600:	bd10      	pop	{r4, pc}
 800d602:	bf00      	nop
 800d604:	08018560 	stmdaeq	r1, {r5, r6, r8, sl, pc}

0800d608 <RDMDeviceResponder::~RDMDeviceResponder()>:
 800d608:	b510      	push	{r4, lr}
 800d60a:	4604      	mov	r4, r0
 800d60c:	f7ff ffec 	bl	800d5e8 <RDMDeviceResponder::~RDMDeviceResponder()>
 800d610:	4620      	mov	r0, r4
 800d612:	f008 f9d5 	bl	80159c0 <operator delete(void*)>
 800d616:	4620      	mov	r0, r4
 800d618:	bd10      	pop	{r4, pc}

0800d61a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
 800d61a:	b470      	push	{r4, r5, r6}
 800d61c:	790a      	ldrb	r2, [r1, #4]
 800d61e:	680b      	ldr	r3, [r1, #0]
 800d620:	2a20      	cmp	r2, #32
 800d622:	bf28      	it	cs
 800d624:	2220      	movcs	r2, #32
 800d626:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
 800d62a:	189c      	adds	r4, r3, r2
 800d62c:	b189      	cbz	r1, 800d652 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x38>
 800d62e:	f100 010a 	add.w	r1, r0, #10
 800d632:	460d      	mov	r5, r1
 800d634:	42a3      	cmp	r3, r4
 800d636:	d107      	bne.n	800d648 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x2e>
 800d638:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
 800d63c:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800d63e:	b170      	cbz	r0, 800d65e <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x44>
 800d640:	bc70      	pop	{r4, r5, r6}
 800d642:	6803      	ldr	r3, [r0, #0]
 800d644:	689b      	ldr	r3, [r3, #8]
 800d646:	4718      	bx	r3
 800d648:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d64c:	f805 6b01 	strb.w	r6, [r5], #1
 800d650:	e7f0      	b.n	800d634 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x1a>
 800d652:	f100 0151 	add.w	r1, r0, #81	; 0x51
 800d656:	42a3      	cmp	r3, r4
 800d658:	d103      	bne.n	800d662 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x48>
 800d65a:	f880 2071 	strb.w	r2, [r0, #113]	; 0x71
 800d65e:	bc70      	pop	{r4, r5, r6}
 800d660:	4770      	bx	lr
 800d662:	f813 5b01 	ldrb.w	r5, [r3], #1
 800d666:	f801 5b01 	strb.w	r5, [r1], #1
 800d66a:	e7f4      	b.n	800d656 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x3c>

0800d66c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>:
 800d66c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d66e:	4604      	mov	r4, r0
 800d670:	1d07      	adds	r7, r0, #4
 800d672:	4638      	mov	r0, r7
 800d674:	460e      	mov	r6, r1
 800d676:	4615      	mov	r5, r2
 800d678:	f000 fed0 	bl	800e41c <RDMDevice::RDMDevice()>
 800d67c:	4620      	mov	r0, r4
 800d67e:	4b27      	ldr	r3, [pc, #156]	; (800d71c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xb0>)
 800d680:	f840 3b7c 	str.w	r3, [r0], #124
 800d684:	f000 fcda 	bl	800e03c <RDMIdentify::RDMIdentify()>
 800d688:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800d68c:	f7ff fe7c 	bl	800d388 <RDMSensors::RDMSensors()>
 800d690:	f104 0088 	add.w	r0, r4, #136	; 0x88
 800d694:	f7ff fe98 	bl	800d3c8 <RDMSubDevices::RDMSubDevices()>
 800d698:	4b21      	ldr	r3, [pc, #132]	; (800d720 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xb4>)
 800d69a:	2200      	movs	r2, #0
 800d69c:	601c      	str	r4, [r3, #0]
 800d69e:	2365      	movs	r3, #101	; 0x65
 800d6a0:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
 800d6a4:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800d6a8:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
 800d6b2:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 800d6b6:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8
 800d6ba:	f104 0399 	add.w	r3, r4, #153	; 0x99
 800d6be:	f104 01ac 	add.w	r1, r4, #172	; 0xac
 800d6c2:	428b      	cmp	r3, r1
 800d6c4:	d123      	bne.n	800d70e <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xa2>
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d121      	bne.n	800d714 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xa8>
 800d6d0:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 800d6d4:	f7fb fd3c 	bl	8009150 <RDMSoftwareVersion::GetVersion()>
 800d6d8:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
 800d6dc:	f7fb fd3c 	bl	8009158 <RDMSoftwareVersion::GetVersionLength()>
 800d6e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d6e4:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	b91b      	cbnz	r3, 800d6f6 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x8a>
 800d6ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d6f2:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 800d6f6:	4b0b      	ldr	r3, [pc, #44]	; (800d724 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0xb8>)
 800d6f8:	4638      	mov	r0, r7
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	2317      	movs	r3, #23
 800d6fe:	4669      	mov	r1, sp
 800d700:	f88d 3004 	strb.w	r3, [sp, #4]
 800d704:	f7ff ff89 	bl	800d61a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 800d708:	4620      	mov	r0, r4
 800d70a:	b003      	add	sp, #12
 800d70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d70e:	f803 2b01 	strb.w	r2, [r3], #1
 800d712:	e7d6      	b.n	800d6c2 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x56>
 800d714:	f803 1b01 	strb.w	r1, [r3], #1
 800d718:	e7d8      	b.n	800d6cc <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x60>
 800d71a:	bf00      	nop
 800d71c:	08018560 	stmdaeq	r1, {r5, r6, r8, sl, pc}
 800d720:	2000c2b0 			; <UNDEFINED> instruction: 0x2000c2b0
 800d724:	0801853d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r8, sl, pc}

0800d728 <RDMDeviceResponder::Init()>:
 800d728:	2301      	movs	r3, #1
 800d72a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d72c:	4604      	mov	r4, r0
 800d72e:	f06f 050d 	mvn.w	r5, #13
 800d732:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
 800d736:	f100 0355 	add.w	r3, r0, #85	; 0x55
 800d73a:	9300      	str	r3, [sp, #0]
 800d73c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
 800d740:	4669      	mov	r1, sp
 800d742:	3004      	adds	r0, #4
 800d744:	f88d 3004 	strb.w	r3, [sp, #4]
 800d748:	f7ff ff67 	bl	800d61a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 800d74c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800d750:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 800d754:	f104 020e 	add.w	r2, r4, #14
 800d758:	1b2d      	subs	r5, r5, r4
 800d75a:	18a9      	adds	r1, r5, r2
 800d75c:	4288      	cmp	r0, r1
 800d75e:	d84b      	bhi.n	800d7f8 <RDMDeviceResponder::Init()+0xd0>
 800d760:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
 800d764:	f7fb fcfa 	bl	800915c <RDMSoftwareVersion::GetVersionId()>
 800d768:	2201      	movs	r2, #1
 800d76a:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
 800d76e:	2200      	movs	r2, #0
 800d770:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800d774:	f8a4 209a 	strh.w	r2, [r4, #154]	; 0x9a
 800d778:	f884 209c 	strb.w	r2, [r4, #156]	; 0x9c
 800d77c:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
 800d780:	0a1a      	lsrs	r2, r3, #8
 800d782:	0e03      	lsrs	r3, r0, #24
 800d784:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
 800d788:	0c03      	lsrs	r3, r0, #16
 800d78a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800d78e:	0a03      	lsrs	r3, r0, #8
 800d790:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 800d794:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d798:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
 800d79c:	f884 00a2 	strb.w	r0, [r4, #162]	; 0xa2
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 800d7a6:	685d      	ldr	r5, [r3, #4]
 800d7a8:	bb5d      	cbnz	r5, 800d802 <RDMDeviceResponder::Init()+0xda>
 800d7aa:	f8b4 00c4 	ldrh.w	r0, [r4, #196]	; 0xc4
 800d7ae:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
 800d7b2:	0a03      	lsrs	r3, r0, #8
 800d7b4:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 800d7b8:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
 800d7bc:	2301      	movs	r3, #1
 800d7be:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 800d7c2:	0a33      	lsrs	r3, r6, #8
 800d7c4:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 800d7c8:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 800d7cc:	b2c0      	uxtb	r0, r0
 800d7ce:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 800d7d2:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 800d7d6:	f884 60aa 	strb.w	r6, [r4, #170]	; 0xaa
 800d7da:	f104 0399 	add.w	r3, r4, #153	; 0x99
 800d7de:	f104 02ac 	add.w	r2, r4, #172	; 0xac
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d126      	bne.n	800d834 <RDMDeviceResponder::Init()+0x10c>
 800d7e6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800d7ea:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 800d7ee:	4413      	add	r3, r2
 800d7f0:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 800d7f4:	b002      	add	sp, #8
 800d7f6:	bd70      	pop	{r4, r5, r6, pc}
 800d7f8:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d7fc:	440b      	add	r3, r1
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	e7ab      	b.n	800d75a <RDMDeviceResponder::Init()+0x32>
 800d802:	682b      	ldr	r3, [r5, #0]
 800d804:	4628      	mov	r0, r5
 800d806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d808:	4798      	blx	r3
 800d80a:	0a00      	lsrs	r0, r0, #8
 800d80c:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
 800d810:	682b      	ldr	r3, [r5, #0]
 800d812:	4628      	mov	r0, r5
 800d814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d816:	4798      	blx	r3
 800d818:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 800d81c:	682b      	ldr	r3, [r5, #0]
 800d81e:	4628      	mov	r0, r5
 800d820:	6a1b      	ldr	r3, [r3, #32]
 800d822:	4798      	blx	r3
 800d824:	0a00      	lsrs	r0, r0, #8
 800d826:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 800d82a:	682b      	ldr	r3, [r5, #0]
 800d82c:	4628      	mov	r0, r5
 800d82e:	6a1b      	ldr	r3, [r3, #32]
 800d830:	4798      	blx	r3
 800d832:	e7c3      	b.n	800d7bc <RDMDeviceResponder::Init()+0x94>
 800d834:	f813 1b01 	ldrb.w	r1, [r3], #1
 800d838:	7499      	strb	r1, [r3, #18]
 800d83a:	e7d2      	b.n	800d7e2 <RDMDeviceResponder::Init()+0xba>

0800d83c <RDMDeviceResponder::Print()>:
 800d83c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d83e:	4604      	mov	r4, r0
 800d840:	3004      	adds	r0, #4
 800d842:	f000 fe5d 	bl	800e500 <RDMDevice::Print()>
 800d846:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d84a:	481c      	ldr	r0, [pc, #112]	; (800d8bc <RDMDeviceResponder::Print()+0x80>)
 800d84c:	681d      	ldr	r5, [r3, #0]
 800d84e:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800d850:	f7fb ff84 	bl	800975c <printf>
 800d854:	f894 209a 	ldrb.w	r2, [r4, #154]	; 0x9a
 800d858:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 800d85c:	4818      	ldr	r0, [pc, #96]	; (800d8c0 <RDMDeviceResponder::Print()+0x84>)
 800d85e:	f7fb ff7d 	bl	800975c <printf>
 800d862:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800d866:	f894 10a7 	ldrb.w	r1, [r4, #167]	; 0xa7
 800d86a:	4816      	ldr	r0, [pc, #88]	; (800d8c4 <RDMDeviceResponder::Print()+0x88>)
 800d86c:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 800d870:	f7fb ff74 	bl	800975c <printf>
 800d874:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 800d878:	f894 10a3 	ldrb.w	r1, [r4, #163]	; 0xa3
 800d87c:	3508      	adds	r5, #8
 800d87e:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 800d882:	4811      	ldr	r0, [pc, #68]	; (800d8c8 <RDMDeviceResponder::Print()+0x8c>)
 800d884:	f7fb ff6a 	bl	800975c <printf>
 800d888:	f894 20a6 	ldrb.w	r2, [r4, #166]	; 0xa6
 800d88c:	f894 10a5 	ldrb.w	r1, [r4, #165]	; 0xa5
 800d890:	b2f3      	uxtb	r3, r6
 800d892:	9500      	str	r5, [sp, #0]
 800d894:	480d      	ldr	r0, [pc, #52]	; (800d8cc <RDMDeviceResponder::Print()+0x90>)
 800d896:	f7fb ff61 	bl	800975c <printf>
 800d89a:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 800d89e:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
 800d8a2:	480b      	ldr	r0, [pc, #44]	; (800d8d0 <RDMDeviceResponder::Print()+0x94>)
 800d8a4:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 800d8a8:	f7fb ff58 	bl	800975c <printf>
 800d8ac:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
 800d8b0:	4808      	ldr	r0, [pc, #32]	; (800d8d4 <RDMDeviceResponder::Print()+0x98>)
 800d8b2:	b002      	add	sp, #8
 800d8b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d8b8:	f7fb bf50 	b.w	800975c <printf>
 800d8bc:	08018489 	stmdaeq	r1, {r0, r3, r7, sl, pc}
 800d8c0:	080184a6 	stmdaeq	r1, {r1, r2, r5, r7, sl, pc}
 800d8c4:	080184bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, sl, pc}
 800d8c8:	080184d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, sl, pc}
 800d8cc:	080184ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, sl, pc}
 800d8d0:	0801850d 	stmdaeq	r1, {r0, r2, r3, r8, sl, pc}
 800d8d4:	08018525 	stmdaeq	r1, {r0, r2, r5, r8, sl, pc}

0800d8d8 <memcmp>:
 800d8d8:	b510      	push	{r4, lr}
 800d8da:	3901      	subs	r1, #1
 800d8dc:	4402      	add	r2, r0
 800d8de:	4290      	cmp	r0, r2
 800d8e0:	d101      	bne.n	800d8e6 <memcmp+0xe>
 800d8e2:	2000      	movs	r0, #0
 800d8e4:	e005      	b.n	800d8f2 <memcmp+0x1a>
 800d8e6:	7803      	ldrb	r3, [r0, #0]
 800d8e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d8ec:	42a3      	cmp	r3, r4
 800d8ee:	d001      	beq.n	800d8f4 <memcmp+0x1c>
 800d8f0:	1b18      	subs	r0, r3, r4
 800d8f2:	bd10      	pop	{r4, pc}
 800d8f4:	3001      	adds	r0, #1
 800d8f6:	e7f2      	b.n	800d8de <memcmp+0x6>

0800d8f8 <memcpy.isra.0>:
 800d8f8:	3801      	subs	r0, #1
 800d8fa:	440a      	add	r2, r1
 800d8fc:	4291      	cmp	r1, r2
 800d8fe:	d100      	bne.n	800d902 <memcpy.isra.0+0xa>
 800d900:	4770      	bx	lr
 800d902:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d906:	f800 3f01 	strb.w	r3, [r0, #1]!
 800d90a:	e7f7      	b.n	800d8fc <memcpy.isra.0+0x4>

0800d90c <RDMDeviceResponder::SetFactoryDefaults()>:
 800d90c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d90e:	4604      	mov	r4, r0
 800d910:	f06f 050d 	mvn.w	r5, #13
 800d914:	f100 0355 	add.w	r3, r0, #85	; 0x55
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
 800d91e:	4669      	mov	r1, sp
 800d920:	3004      	adds	r0, #4
 800d922:	f88d 3004 	strb.w	r3, [sp, #4]
 800d926:	f7ff fe78 	bl	800d61a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 800d92a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800d92e:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 800d932:	f104 020e 	add.w	r2, r4, #14
 800d936:	1b2d      	subs	r5, r5, r4
 800d938:	18a9      	adds	r1, r5, r2
 800d93a:	4288      	cmp	r0, r1
 800d93c:	d865      	bhi.n	800da0a <RDMDeviceResponder::SetFactoryDefaults()+0xfe>
 800d93e:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
 800d942:	2301      	movs	r3, #1
 800d944:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 800d948:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	685d      	ldr	r5, [r3, #4]
 800d950:	b1f5      	cbz	r5, 800d990 <RDMDeviceResponder::SetFactoryDefaults()+0x84>
 800d952:	682b      	ldr	r3, [r5, #0]
 800d954:	4628      	mov	r0, r5
 800d956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d958:	4798      	blx	r3
 800d95a:	0a00      	lsrs	r0, r0, #8
 800d95c:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
 800d960:	682b      	ldr	r3, [r5, #0]
 800d962:	4628      	mov	r0, r5
 800d964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d966:	4798      	blx	r3
 800d968:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 800d96c:	682b      	ldr	r3, [r5, #0]
 800d96e:	4628      	mov	r0, r5
 800d970:	6a1b      	ldr	r3, [r3, #32]
 800d972:	4798      	blx	r3
 800d974:	0a00      	lsrs	r0, r0, #8
 800d976:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 800d97a:	682b      	ldr	r3, [r5, #0]
 800d97c:	4628      	mov	r0, r5
 800d97e:	6a1b      	ldr	r3, [r3, #32]
 800d980:	4798      	blx	r3
 800d982:	6823      	ldr	r3, [r4, #0]
 800d984:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 800d988:	4629      	mov	r1, r5
 800d98a:	4620      	mov	r0, r4
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	4798      	blx	r3
 800d990:	f8b4 50c4 	ldrh.w	r5, [r4, #196]	; 0xc4
 800d994:	1e6b      	subs	r3, r5, #1
 800d996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d99a:	d218      	bcs.n	800d9ce <RDMDeviceResponder::SetFactoryDefaults()+0xc2>
 800d99c:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800d9a0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800d9a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d9a8:	3b01      	subs	r3, #1
 800d9aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9ae:	6858      	ldr	r0, [r3, #4]
 800d9b0:	b168      	cbz	r0, 800d9ce <RDMDeviceResponder::SetFactoryDefaults()+0xc2>
 800d9b2:	6803      	ldr	r3, [r0, #0]
 800d9b4:	4629      	mov	r1, r5
 800d9b6:	69db      	ldr	r3, [r3, #28]
 800d9b8:	4798      	blx	r3
 800d9ba:	b120      	cbz	r0, 800d9c6 <RDMDeviceResponder::SetFactoryDefaults()+0xba>
 800d9bc:	0a2b      	lsrs	r3, r5, #8
 800d9be:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
 800d9c2:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
 800d9c6:	6823      	ldr	r3, [r4, #0]
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	4798      	blx	r3
 800d9ce:	2213      	movs	r2, #19
 800d9d0:	f104 0199 	add.w	r1, r4, #153	; 0x99
 800d9d4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 800d9d8:	f7ff ff8e 	bl	800d8f8 <memcpy.isra.0>
 800d9dc:	f104 0088 	add.w	r0, r4, #136	; 0x88
 800d9e0:	f7ff fd43 	bl	800d46a <RDMSubDevices::SetFactoryDefaults()>
 800d9e4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800d9e8:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 800d9ec:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 800d9f0:	4413      	add	r3, r2
 800d9f2:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
 800d9fc:	b150      	cbz	r0, 800da14 <RDMDeviceResponder::SetFactoryDefaults()+0x108>
 800d9fe:	6803      	ldr	r3, [r0, #0]
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	b003      	add	sp, #12
 800da04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da08:	4718      	bx	r3
 800da0a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800da0e:	440b      	add	r3, r1
 800da10:	b29b      	uxth	r3, r3
 800da12:	e791      	b.n	800d938 <RDMDeviceResponder::SetFactoryDefaults()+0x2c>
 800da14:	b003      	add	sp, #12
 800da16:	bd30      	pop	{r4, r5, pc}

0800da18 <RDMHandler::RDMHandler(bool)>:
 800da18:	2200      	movs	r2, #0
 800da1a:	7001      	strb	r1, [r0, #0]
 800da1c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800da20:	7042      	strb	r2, [r0, #1]
 800da22:	4770      	bx	lr

0800da24 <RDMHandler::HandleString(char const*, unsigned int)>:
 800da24:	6883      	ldr	r3, [r0, #8]
 800da26:	75da      	strb	r2, [r3, #23]
 800da28:	3318      	adds	r3, #24
 800da2a:	440a      	add	r2, r1
 800da2c:	4291      	cmp	r1, r2
 800da2e:	d100      	bne.n	800da32 <RDMHandler::HandleString(char const*, unsigned int)+0xe>
 800da30:	4770      	bx	lr
 800da32:	f811 0b01 	ldrb.w	r0, [r1], #1
 800da36:	f803 0b01 	strb.w	r0, [r3], #1
 800da3a:	e7f7      	b.n	800da2c <RDMHandler::HandleString(char const*, unsigned int)+0x8>

0800da3c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
 800da3c:	b570      	push	{r4, r5, r6, lr}
 800da3e:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 800da42:	25cc      	movs	r5, #204	; 0xcc
 800da44:	701d      	strb	r5, [r3, #0]
 800da46:	7825      	ldrb	r5, [r4, #0]
 800da48:	705d      	strb	r5, [r3, #1]
 800da4a:	7ba5      	ldrb	r5, [r4, #14]
 800da4c:	73dd      	strb	r5, [r3, #15]
 800da4e:	2500      	movs	r5, #0
 800da50:	745d      	strb	r5, [r3, #17]
 800da52:	7c65      	ldrb	r5, [r4, #17]
 800da54:	749d      	strb	r5, [r3, #18]
 800da56:	7ca5      	ldrb	r5, [r4, #18]
 800da58:	74dd      	strb	r5, [r3, #19]
 800da5a:	7ce5      	ldrb	r5, [r4, #19]
 800da5c:	3501      	adds	r5, #1
 800da5e:	751d      	strb	r5, [r3, #20]
 800da60:	7d25      	ldrb	r5, [r4, #20]
 800da62:	755d      	strb	r5, [r3, #21]
 800da64:	7d65      	ldrb	r5, [r4, #21]
 800da66:	759d      	strb	r5, [r3, #22]
 800da68:	b119      	cbz	r1, 800da72 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x36>
 800da6a:	1e4d      	subs	r5, r1, #1
 800da6c:	2d01      	cmp	r5, #1
 800da6e:	d922      	bls.n	800dab6 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x7a>
 800da70:	bd70      	pop	{r4, r5, r6, pc}
 800da72:	7dda      	ldrb	r2, [r3, #23]
 800da74:	7419      	strb	r1, [r3, #16]
 800da76:	3218      	adds	r2, #24
 800da78:	709a      	strb	r2, [r3, #2]
 800da7a:	4a16      	ldr	r2, [pc, #88]	; (800dad4 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x98>)
 800da7c:	f104 0108 	add.w	r1, r4, #8
 800da80:	6812      	ldr	r2, [r2, #0]
 800da82:	1cdd      	adds	r5, r3, #3
 800da84:	3204      	adds	r2, #4
 800da86:	340e      	adds	r4, #14
 800da88:	f811 6b01 	ldrb.w	r6, [r1], #1
 800da8c:	f805 6b01 	strb.w	r6, [r5], #1
 800da90:	f812 6b01 	ldrb.w	r6, [r2], #1
 800da94:	42a1      	cmp	r1, r4
 800da96:	716e      	strb	r6, [r5, #5]
 800da98:	d1f6      	bne.n	800da88 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x4c>
 800da9a:	2200      	movs	r2, #0
 800da9c:	7899      	ldrb	r1, [r3, #2]
 800da9e:	4613      	mov	r3, r2
 800daa0:	6884      	ldr	r4, [r0, #8]
 800daa2:	428a      	cmp	r2, r1
 800daa4:	eb04 0502 	add.w	r5, r4, r2
 800daa8:	d30e      	bcc.n	800dac8 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x8c>
 800daaa:	0a1a      	lsrs	r2, r3, #8
 800daac:	702a      	strb	r2, [r5, #0]
 800daae:	6882      	ldr	r2, [r0, #8]
 800dab0:	440a      	add	r2, r1
 800dab2:	7053      	strb	r3, [r2, #1]
 800dab4:	e7dc      	b.n	800da70 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x34>
 800dab6:	7419      	strb	r1, [r3, #16]
 800dab8:	2102      	movs	r1, #2
 800daba:	251a      	movs	r5, #26
 800dabc:	75d9      	strb	r1, [r3, #23]
 800dabe:	0a11      	lsrs	r1, r2, #8
 800dac0:	709d      	strb	r5, [r3, #2]
 800dac2:	7619      	strb	r1, [r3, #24]
 800dac4:	765a      	strb	r2, [r3, #25]
 800dac6:	e7d8      	b.n	800da7a <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x3e>
 800dac8:	5ca5      	ldrb	r5, [r4, r2]
 800daca:	3201      	adds	r2, #1
 800dacc:	442b      	add	r3, r5
 800dace:	b29b      	uxth	r3, r3
 800dad0:	e7e7      	b.n	800daa2 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x66>
 800dad2:	bf00      	nop
 800dad4:	2000c2b0 			; <UNDEFINED> instruction: 0x2000c2b0

0800dad8 <RDMHandler::RespondMessageAck()>:
 800dad8:	6843      	ldr	r3, [r0, #4]
 800dada:	7d9a      	ldrb	r2, [r3, #22]
 800dadc:	b90a      	cbnz	r2, 800dae2 <RDMHandler::RespondMessageAck()+0xa>
 800dade:	2218      	movs	r2, #24
 800dae0:	705a      	strb	r2, [r3, #1]
 800dae2:	2200      	movs	r2, #0
 800dae4:	4611      	mov	r1, r2
 800dae6:	f7ff bfa9 	b.w	800da3c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>
	...

0800daec <RDMHandler::GetDeviceInfo(unsigned short)>:
 800daec:	b538      	push	{r3, r4, r5, lr}
 800daee:	4b18      	ldr	r3, [pc, #96]	; (800db50 <RDMHandler::GetDeviceInfo(unsigned short)+0x64>)
 800daf0:	4605      	mov	r5, r0
 800daf2:	681c      	ldr	r4, [r3, #0]
 800daf4:	b349      	cbz	r1, 800db4a <RDMHandler::GetDeviceInfo(unsigned short)+0x5e>
 800daf6:	f104 0088 	add.w	r0, r4, #136	; 0x88
 800dafa:	f7ff fc85 	bl	800d408 <RDMSubDevices::GetInfo(unsigned short)>
 800dafe:	b1b8      	cbz	r0, 800db30 <RDMHandler::GetDeviceInfo(unsigned short)+0x44>
 800db00:	8803      	ldrh	r3, [r0, #0]
 800db02:	0a1b      	lsrs	r3, r3, #8
 800db04:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 800db08:	8803      	ldrh	r3, [r0, #0]
 800db0a:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
 800db0e:	7903      	ldrb	r3, [r0, #4]
 800db10:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
 800db14:	7943      	ldrb	r3, [r0, #5]
 800db16:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
 800db1a:	8843      	ldrh	r3, [r0, #2]
 800db1c:	0a1b      	lsrs	r3, r3, #8
 800db1e:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
 800db22:	8843      	ldrh	r3, [r0, #2]
 800db24:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
 800db28:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800db2c:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 800db30:	f104 01ac 	add.w	r1, r4, #172	; 0xac
 800db34:	2213      	movs	r2, #19
 800db36:	68a8      	ldr	r0, [r5, #8]
 800db38:	75c2      	strb	r2, [r0, #23]
 800db3a:	3018      	adds	r0, #24
 800db3c:	f7ff fedc 	bl	800d8f8 <memcpy.isra.0>
 800db40:	4628      	mov	r0, r5
 800db42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db46:	f7ff bfc7 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800db4a:	f104 0199 	add.w	r1, r4, #153	; 0x99
 800db4e:	e7f1      	b.n	800db34 <RDMHandler::GetDeviceInfo(unsigned short)+0x48>
 800db50:	2000c2b0 			; <UNDEFINED> instruction: 0x2000c2b0

0800db54 <RDMHandler::GetFactoryDefaults(unsigned short)>:
 800db54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db56:	2301      	movs	r3, #1
 800db58:	6886      	ldr	r6, [r0, #8]
 800db5a:	4605      	mov	r5, r0
 800db5c:	75f3      	strb	r3, [r6, #23]
 800db5e:	4b1c      	ldr	r3, [pc, #112]	; (800dbd0 <RDMHandler::GetFactoryDefaults(unsigned short)+0x7c>)
 800db60:	681c      	ldr	r4, [r3, #0]
 800db62:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 800db66:	b37b      	cbz	r3, 800dbc8 <RDMHandler::GetFactoryDefaults(unsigned short)+0x74>
 800db68:	f06f 0c0d 	mvn.w	ip, #13
 800db6c:	f8b4 1076 	ldrh.w	r1, [r4, #118]	; 0x76
 800db70:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800db74:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 800db78:	f104 020e 	add.w	r2, r4, #14
 800db7c:	ebac 0c04 	sub.w	ip, ip, r4
 800db80:	eb0c 0702 	add.w	r7, ip, r2
 800db84:	4287      	cmp	r7, r0
 800db86:	d30a      	bcc.n	800db9e <RDMHandler::GetFactoryDefaults(unsigned short)+0x4a>
 800db88:	4299      	cmp	r1, r3
 800db8a:	d00d      	beq.n	800dba8 <RDMHandler::GetFactoryDefaults(unsigned short)+0x54>
 800db8c:	2300      	movs	r3, #0
 800db8e:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
 800db92:	7633      	strb	r3, [r6, #24]
 800db94:	4628      	mov	r0, r5
 800db96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800db9a:	f7ff bf9d 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800db9e:	f812 7b01 	ldrb.w	r7, [r2], #1
 800dba2:	443b      	add	r3, r7
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	e7eb      	b.n	800db80 <RDMHandler::GetFactoryDefaults(unsigned short)+0x2c>
 800dba8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800dbac:	f894 10a5 	ldrb.w	r1, [r4, #165]	; 0xa5
 800dbb0:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
 800dbb4:	440b      	add	r3, r1
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d1e8      	bne.n	800db8c <RDMHandler::GetFactoryDefaults(unsigned short)+0x38>
 800dbba:	f104 0088 	add.w	r0, r4, #136	; 0x88
 800dbbe:	f7ff fc41 	bl	800d444 <RDMSubDevices::GetFactoryDefaults()>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	d0e2      	beq.n	800db8e <RDMHandler::GetFactoryDefaults(unsigned short)+0x3a>
 800dbc8:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 800dbcc:	e7e1      	b.n	800db92 <RDMHandler::GetFactoryDefaults(unsigned short)+0x3e>
 800dbce:	bf00      	nop
 800dbd0:	2000c2b0 			; <UNDEFINED> instruction: 0x2000c2b0

0800dbd4 <RDMHandler::GetDeviceModelDescription(unsigned short)>:
 800dbd4:	b510      	push	{r4, lr}
 800dbd6:	4604      	mov	r4, r0
 800dbd8:	2209      	movs	r2, #9
 800dbda:	4904      	ldr	r1, [pc, #16]	; (800dbec <RDMHandler::GetDeviceModelDescription(unsigned short)+0x18>)
 800dbdc:	f7ff ff22 	bl	800da24 <RDMHandler::HandleString(char const*, unsigned int)>
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbe6:	f7ff bf77 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800dbea:	bf00      	nop
 800dbec:	08017f79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}

0800dbf0 <RDMHandler::GetManufacturerLabel(unsigned short)>:
 800dbf0:	b510      	push	{r4, lr}
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	4b05      	ldr	r3, [pc, #20]	; (800dc0c <RDMHandler::GetManufacturerLabel(unsigned short)+0x1c>)
 800dbf6:	6819      	ldr	r1, [r3, #0]
 800dbf8:	f891 204f 	ldrb.w	r2, [r1, #79]	; 0x4f
 800dbfc:	312f      	adds	r1, #47	; 0x2f
 800dbfe:	f7ff ff11 	bl	800da24 <RDMHandler::HandleString(char const*, unsigned int)>
 800dc02:	4620      	mov	r0, r4
 800dc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc08:	f7ff bf66 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800dc0c:	2000c2b0 			; <UNDEFINED> instruction: 0x2000c2b0

0800dc10 <RDMHandler::GetDeviceLabel(unsigned short)>:
 800dc10:	4b0d      	ldr	r3, [pc, #52]	; (800dc48 <RDMHandler::GetDeviceLabel(unsigned short)+0x38>)
 800dc12:	b513      	push	{r0, r1, r4, lr}
 800dc14:	4604      	mov	r4, r0
 800dc16:	6818      	ldr	r0, [r3, #0]
 800dc18:	b171      	cbz	r1, 800dc38 <RDMHandler::GetDeviceLabel(unsigned short)+0x28>
 800dc1a:	466a      	mov	r2, sp
 800dc1c:	3088      	adds	r0, #136	; 0x88
 800dc1e:	f7ff fbfb 	bl	800d418 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>
 800dc22:	4620      	mov	r0, r4
 800dc24:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dc28:	9900      	ldr	r1, [sp, #0]
 800dc2a:	f7ff fefb 	bl	800da24 <RDMHandler::HandleString(char const*, unsigned int)>
 800dc2e:	4620      	mov	r0, r4
 800dc30:	f7ff ff52 	bl	800dad8 <RDMHandler::RespondMessageAck()>
 800dc34:	b002      	add	sp, #8
 800dc36:	bd10      	pop	{r4, pc}
 800dc38:	f100 030e 	add.w	r3, r0, #14
 800dc3c:	9300      	str	r3, [sp, #0]
 800dc3e:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 800dc42:	f88d 3004 	strb.w	r3, [sp, #4]
 800dc46:	e7ec      	b.n	800dc22 <RDMHandler::GetDeviceLabel(unsigned short)+0x12>
 800dc48:	2000c2b0 			; <UNDEFINED> instruction: 0x2000c2b0

0800dc4c <RDMHandler::GetIdentifyDevice(unsigned short)>:
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	6883      	ldr	r3, [r0, #8]
 800dc50:	75da      	strb	r2, [r3, #23]
 800dc52:	4a02      	ldr	r2, [pc, #8]	; (800dc5c <RDMHandler::GetIdentifyDevice(unsigned short)+0x10>)
 800dc54:	7812      	ldrb	r2, [r2, #0]
 800dc56:	761a      	strb	r2, [r3, #24]
 800dc58:	f7ff bf3e 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800dc5c:	2000c2b4 			; <UNDEFINED> instruction: 0x2000c2b4

0800dc60 <RDMHandler::RespondMessageNack(unsigned short)>:
 800dc60:	460a      	mov	r2, r1
 800dc62:	2102      	movs	r1, #2
 800dc64:	f7ff beea 	b.w	800da3c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

0800dc68 <RDMHandler::SetResetDevice(bool, unsigned short)>:
 800dc68:	b510      	push	{r4, lr}
 800dc6a:	6843      	ldr	r3, [r0, #4]
 800dc6c:	4604      	mov	r4, r0
 800dc6e:	7d9a      	ldrb	r2, [r3, #22]
 800dc70:	2a01      	cmp	r2, #1
 800dc72:	d004      	beq.n	800dc7e <RDMHandler::SetResetDevice(bool, unsigned short)+0x16>
 800dc74:	2101      	movs	r1, #1
 800dc76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc7a:	f7ff bff1 	b.w	800dc60 <RDMHandler::RespondMessageNack(unsigned short)>
 800dc7e:	7ddb      	ldrb	r3, [r3, #23]
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d003      	beq.n	800dc8c <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 800dc84:	2bff      	cmp	r3, #255	; 0xff
 800dc86:	d001      	beq.n	800dc8c <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 800dc88:	2106      	movs	r1, #6
 800dc8a:	e7f4      	b.n	800dc76 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 800dc8c:	2100      	movs	r1, #0
 800dc8e:	68a2      	ldr	r2, [r4, #8]
 800dc90:	2bff      	cmp	r3, #255	; 0xff
 800dc92:	75d1      	strb	r1, [r2, #23]
 800dc94:	d102      	bne.n	800dc9c <RDMHandler::SetResetDevice(bool, unsigned short)+0x34>
 800dc96:	2104      	movs	r1, #4
 800dc98:	4620      	mov	r0, r4
 800dc9a:	e7ec      	b.n	800dc76 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 800dc9c:	4b03      	ldr	r3, [pc, #12]	; (800dcac <RDMHandler::SetResetDevice(bool, unsigned short)+0x44>)
 800dc9e:	6818      	ldr	r0, [r3, #0]
 800dca0:	f007 fe50 	bl	8015944 <Hardware::Reboot()>
 800dca4:	2800      	cmp	r0, #0
 800dca6:	d0f6      	beq.n	800dc96 <RDMHandler::SetResetDevice(bool, unsigned short)+0x2e>
 800dca8:	bd10      	pop	{r4, pc}
 800dcaa:	bf00      	nop
 800dcac:	2001ce4c 	andcs	ip, r1, ip, asr #28

0800dcb0 <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
 800dcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcb2:	6843      	ldr	r3, [r0, #4]
 800dcb4:	460d      	mov	r5, r1
 800dcb6:	7d99      	ldrb	r1, [r3, #22]
 800dcb8:	4604      	mov	r4, r0
 800dcba:	2901      	cmp	r1, #1
 800dcbc:	d004      	beq.n	800dcc8 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x18>
 800dcbe:	2101      	movs	r1, #1
 800dcc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dcc4:	f7ff bfcc 	b.w	800dc60 <RDMHandler::RespondMessageNack(unsigned short)>
 800dcc8:	7ddb      	ldrb	r3, [r3, #23]
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d901      	bls.n	800dcd2 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x22>
 800dcce:	2106      	movs	r1, #6
 800dcd0:	e7f6      	b.n	800dcc0 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x10>
 800dcd2:	4a12      	ldr	r2, [pc, #72]	; (800dd1c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6c>)
 800dcd4:	4f12      	ldr	r7, [pc, #72]	; (800dd20 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x70>)
 800dcd6:	6816      	ldr	r6, [r2, #0]
 800dcd8:	4a12      	ldr	r2, [pc, #72]	; (800dd24 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x74>)
 800dcda:	6810      	ldr	r0, [r2, #0]
 800dcdc:	4a12      	ldr	r2, [pc, #72]	; (800dd28 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x78>)
 800dcde:	b983      	cbnz	r3, 800dd02 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x52>
 800dce0:	2102      	movs	r1, #2
 800dce2:	7013      	strb	r3, [r2, #0]
 800dce4:	f007 fd88 	bl	80157f8 <LedBlink::SetMode(ledblink::Mode)>
 800dce8:	7839      	ldrb	r1, [r7, #0]
 800dcea:	b111      	cbz	r1, 800dcf2 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 800dcec:	4630      	mov	r0, r6
 800dcee:	f000 f9ac 	bl	800e04a <RDMIdentify::Off(rdm::identify::Mode)>
 800dcf2:	b98d      	cbnz	r5, 800dd18 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x68>
 800dcf4:	68a3      	ldr	r3, [r4, #8]
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	75dd      	strb	r5, [r3, #23]
 800dcfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dcfe:	f7ff beeb 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800dd02:	7011      	strb	r1, [r2, #0]
 800dd04:	2104      	movs	r1, #4
 800dd06:	f007 fd77 	bl	80157f8 <LedBlink::SetMode(ledblink::Mode)>
 800dd0a:	7839      	ldrb	r1, [r7, #0]
 800dd0c:	2900      	cmp	r1, #0
 800dd0e:	d0f0      	beq.n	800dcf2 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 800dd10:	4630      	mov	r0, r6
 800dd12:	f000 f999 	bl	800e048 <RDMIdentify::On(rdm::identify::Mode)>
 800dd16:	e7ec      	b.n	800dcf2 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 800dd18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	2000c2b8 			; <UNDEFINED> instruction: 0x2000c2b8
 800dd20:	2000c2b5 			; <UNDEFINED> instruction: 0x2000c2b5
 800dd24:	2001ce48 	andcs	ip, r1, r8, asr #28
 800dd28:	2000c2b4 			; <UNDEFINED> instruction: 0x2000c2b4

0800dd2c <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
 800dd2c:	b538      	push	{r3, r4, r5, lr}
 800dd2e:	6843      	ldr	r3, [r0, #4]
 800dd30:	4604      	mov	r4, r0
 800dd32:	7d9b      	ldrb	r3, [r3, #22]
 800dd34:	460d      	mov	r5, r1
 800dd36:	b123      	cbz	r3, 800dd42 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x16>
 800dd38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd3c:	2101      	movs	r1, #1
 800dd3e:	f7ff bf8f 	b.w	800dc60 <RDMHandler::RespondMessageNack(unsigned short)>
 800dd42:	4b06      	ldr	r3, [pc, #24]	; (800dd5c <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x30>)
 800dd44:	6818      	ldr	r0, [r3, #0]
 800dd46:	f7ff fde1 	bl	800d90c <RDMDeviceResponder::SetFactoryDefaults()>
 800dd4a:	b935      	cbnz	r5, 800dd5a <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x2e>
 800dd4c:	68a3      	ldr	r3, [r4, #8]
 800dd4e:	4620      	mov	r0, r4
 800dd50:	75dd      	strb	r5, [r3, #23]
 800dd52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd56:	f7ff bebf 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800dd5a:	bd38      	pop	{r3, r4, r5, pc}
 800dd5c:	2000c2b0 			; <UNDEFINED> instruction: 0x2000c2b0

0800dd60 <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
 800dd60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd62:	6845      	ldr	r5, [r0, #4]
 800dd64:	460e      	mov	r6, r1
 800dd66:	7dab      	ldrb	r3, [r5, #22]
 800dd68:	4604      	mov	r4, r0
 800dd6a:	2b20      	cmp	r3, #32
 800dd6c:	4611      	mov	r1, r2
 800dd6e:	d905      	bls.n	800dd7c <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x1c>
 800dd70:	2101      	movs	r1, #1
 800dd72:	b002      	add	sp, #8
 800dd74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd78:	f7ff bf72 	b.w	800dc60 <RDMHandler::RespondMessageNack(unsigned short)>
 800dd7c:	4a0d      	ldr	r2, [pc, #52]	; (800ddb4 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x54>)
 800dd7e:	6810      	ldr	r0, [r2, #0]
 800dd80:	f105 0217 	add.w	r2, r5, #23
 800dd84:	b159      	cbz	r1, 800dd9e <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x3e>
 800dd86:	3088      	adds	r0, #136	; 0x88
 800dd88:	f7ff fb4f 	bl	800d42a <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>
 800dd8c:	b97e      	cbnz	r6, 800ddae <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x4e>
 800dd8e:	4620      	mov	r0, r4
 800dd90:	68a3      	ldr	r3, [r4, #8]
 800dd92:	75de      	strb	r6, [r3, #23]
 800dd94:	b002      	add	sp, #8
 800dd96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd9a:	f7ff be9d 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800dd9e:	4669      	mov	r1, sp
 800dda0:	3004      	adds	r0, #4
 800dda2:	9200      	str	r2, [sp, #0]
 800dda4:	f88d 3004 	strb.w	r3, [sp, #4]
 800dda8:	f7ff fc37 	bl	800d61a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 800ddac:	e7ee      	b.n	800dd8c <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x2c>
 800ddae:	b002      	add	sp, #8
 800ddb0:	bd70      	pop	{r4, r5, r6, pc}
 800ddb2:	bf00      	nop
 800ddb4:	2000c2b0 			; <UNDEFINED> instruction: 0x2000c2b0

0800ddb8 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
 800ddb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddbc:	4616      	mov	r6, r2
 800ddbe:	2700      	movs	r7, #0
 800ddc0:	f006 04ef 	and.w	r4, r6, #239	; 0xef
 800ddc4:	2c20      	cmp	r4, #32
 800ddc6:	46be      	mov	lr, r7
 800ddc8:	f89d 801c 	ldrb.w	r8, [sp, #28]
 800ddcc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800ddd0:	d004      	beq.n	800dddc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x24>
 800ddd2:	2105      	movs	r1, #5
 800ddd4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddd8:	f7ff bf42 	b.w	800dc60 <RDMHandler::RespondMessageNack(unsigned short)>
 800dddc:	4c2d      	ldr	r4, [pc, #180]	; (800de94 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xdc>)
 800ddde:	6824      	ldr	r4, [r4, #0]
 800dde0:	88a4      	ldrh	r4, [r4, #4]
 800dde2:	4294      	cmp	r4, r2
 800dde4:	d205      	bcs.n	800ddf2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 800dde6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800ddea:	42a2      	cmp	r2, r4
 800ddec:	d001      	beq.n	800ddf2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 800ddee:	2109      	movs	r1, #9
 800ddf0:	e7f0      	b.n	800ddd4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 800ddf2:	f04f 0c14 	mov.w	ip, #20
 800ddf6:	2400      	movs	r4, #0
 800ddf8:	4d27      	ldr	r5, [pc, #156]	; (800de98 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xe0>)
 800ddfa:	f8b5 9000 	ldrh.w	r9, [r5]
 800ddfe:	4599      	cmp	r9, r3
 800de00:	bf02      	ittt	eq
 800de02:	462c      	moveq	r4, r5
 800de04:	7daf      	ldrbeq	r7, [r5, #22]
 800de06:	f895 e017 	ldrbeq.w	lr, [r5, #23]
 800de0a:	f1bc 0c01 	subs.w	ip, ip, #1
 800de0e:	f105 0518 	add.w	r5, r5, #24
 800de12:	d1f2      	bne.n	800ddfa <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x42>
 800de14:	b90c      	cbnz	r4, 800de1a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 800de16:	2100      	movs	r1, #0
 800de18:	e7dc      	b.n	800ddd4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 800de1a:	7803      	ldrb	r3, [r0, #0]
 800de1c:	b19b      	cbz	r3, 800de46 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x8e>
 800de1e:	2f00      	cmp	r7, #0
 800de20:	d0f9      	beq.n	800de16 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5e>
 800de22:	2e20      	cmp	r6, #32
 800de24:	d121      	bne.n	800de6a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb2>
 800de26:	2900      	cmp	r1, #0
 800de28:	d131      	bne.n	800de8e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd6>
 800de2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de2e:	429a      	cmp	r2, r3
 800de30:	d0dd      	beq.n	800ddee <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x36>
 800de32:	6863      	ldr	r3, [r4, #4]
 800de34:	b913      	cbnz	r3, 800de3c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x84>
 800de36:	68a1      	ldr	r1, [r4, #8]
 800de38:	07cd      	lsls	r5, r1, #31
 800de3a:	d5ca      	bpl.n	800ddd2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1a>
 800de3c:	7d21      	ldrb	r1, [r4, #20]
 800de3e:	4541      	cmp	r1, r8
 800de40:	d005      	beq.n	800de4e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x96>
 800de42:	2101      	movs	r1, #1
 800de44:	e7c6      	b.n	800ddd4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 800de46:	f1be 0f00 	cmp.w	lr, #0
 800de4a:	d1ea      	bne.n	800de22 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x6a>
 800de4c:	e7e3      	b.n	800de16 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5e>
 800de4e:	68a1      	ldr	r1, [r4, #8]
 800de50:	eb00 0461 	add.w	r4, r0, r1, asr #1
 800de54:	104d      	asrs	r5, r1, #1
 800de56:	07c9      	lsls	r1, r1, #31
 800de58:	bf48      	it	mi
 800de5a:	5941      	ldrmi	r1, [r0, r5]
 800de5c:	4620      	mov	r0, r4
 800de5e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de62:	bf48      	it	mi
 800de64:	58cb      	ldrmi	r3, [r1, r3]
 800de66:	4611      	mov	r1, r2
 800de68:	4718      	bx	r3
 800de6a:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 800de6e:	f003 0401 	and.w	r4, r3, #1
 800de72:	b90d      	cbnz	r5, 800de78 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc0>
 800de74:	2c00      	cmp	r4, #0
 800de76:	d0ac      	beq.n	800ddd2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1a>
 800de78:	105e      	asrs	r6, r3, #1
 800de7a:	eb00 0363 	add.w	r3, r0, r3, asr #1
 800de7e:	b10c      	cbz	r4, 800de84 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xcc>
 800de80:	5980      	ldr	r0, [r0, r6]
 800de82:	5945      	ldr	r5, [r0, r5]
 800de84:	4618      	mov	r0, r3
 800de86:	462b      	mov	r3, r5
 800de88:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de8c:	4718      	bx	r3
 800de8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de92:	bf00      	nop
 800de94:	2000c2ac 	andcs	ip, r0, ip, lsr #5
 800de98:	08018578 	stmdaeq	r1, {r3, r4, r5, r6, r8, sl, pc}

0800de9c <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
 800de9c:	23ff      	movs	r3, #255	; 0xff
 800de9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea2:	7013      	strb	r3, [r2, #0]
 800dea4:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800dea8:	7d0b      	ldrb	r3, [r1, #20]
 800deaa:	f891 8015 	ldrb.w	r8, [r1, #21]
 800deae:	f101 0902 	add.w	r9, r1, #2
 800deb2:	eb08 2803 	add.w	r8, r8, r3, lsl #8
 800deb6:	4b5e      	ldr	r3, [pc, #376]	; (800e030 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>)
 800deb8:	b085      	sub	sp, #20
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	4607      	mov	r7, r0
 800debe:	460d      	mov	r5, r1
 800dec0:	4614      	mov	r4, r2
 800dec2:	4648      	mov	r0, r9
 800dec4:	2206      	movs	r2, #6
 800dec6:	f891 a013 	ldrb.w	sl, [r1, #19]
 800deca:	495a      	ldr	r1, [pc, #360]	; (800e034 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x198>)
 800decc:	1d1e      	adds	r6, r3, #4
 800dece:	9303      	str	r3, [sp, #12]
 800ded0:	f7ff fd02 	bl	800d8d8 <memcmp>
 800ded4:	2202      	movs	r2, #2
 800ded6:	4683      	mov	fp, r0
 800ded8:	4631      	mov	r1, r6
 800deda:	4648      	mov	r0, r9
 800dedc:	fa1f f888 	uxth.w	r8, r8
 800dee0:	f7ff fcfa 	bl	800d8d8 <memcmp>
 800dee4:	b928      	cbnz	r0, 800def2 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x56>
 800dee6:	2204      	movs	r2, #4
 800dee8:	4952      	ldr	r1, [pc, #328]	; (800e034 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x198>)
 800deea:	18a8      	adds	r0, r5, r2
 800deec:	f7ff fcf4 	bl	800d8d8 <memcmp>
 800def0:	b160      	cbz	r0, 800df0c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x70>
 800def2:	4631      	mov	r1, r6
 800def4:	2206      	movs	r2, #6
 800def6:	4648      	mov	r0, r9
 800def8:	f7ff fcee 	bl	800d8d8 <memcmp>
 800defc:	4601      	mov	r1, r0
 800defe:	b130      	cbz	r0, 800df0e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x72>
 800df00:	f1bb 0f00 	cmp.w	fp, #0
 800df04:	d04b      	beq.n	800df9e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x102>
 800df06:	b005      	add	sp, #20
 800df08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df0c:	2101      	movs	r1, #1
 800df0e:	2301      	movs	r3, #1
 800df10:	f1ba 0f10 	cmp.w	sl, #16
 800df14:	d17a      	bne.n	800e00c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x170>
 800df16:	f1b8 0f01 	cmp.w	r8, #1
 800df1a:	d143      	bne.n	800dfa4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x108>
 800df1c:	787b      	ldrb	r3, [r7, #1]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d1f1      	bne.n	800df06 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 800df22:	2206      	movs	r2, #6
 800df24:	4631      	mov	r1, r6
 800df26:	f105 0017 	add.w	r0, r5, #23
 800df2a:	f7ff fcd5 	bl	800d8d8 <memcmp>
 800df2e:	2800      	cmp	r0, #0
 800df30:	dce9      	bgt.n	800df06 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 800df32:	2206      	movs	r2, #6
 800df34:	4630      	mov	r0, r6
 800df36:	f105 011d 	add.w	r1, r5, #29
 800df3a:	f7ff fccd 	bl	800d8d8 <memcmp>
 800df3e:	2800      	cmp	r0, #0
 800df40:	dce1      	bgt.n	800df06 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 800df42:	23fe      	movs	r3, #254	; 0xfe
 800df44:	7023      	strb	r3, [r4, #0]
 800df46:	7063      	strb	r3, [r4, #1]
 800df48:	70a3      	strb	r3, [r4, #2]
 800df4a:	70e3      	strb	r3, [r4, #3]
 800df4c:	7123      	strb	r3, [r4, #4]
 800df4e:	7163      	strb	r3, [r4, #5]
 800df50:	71a3      	strb	r3, [r4, #6]
 800df52:	23aa      	movs	r3, #170	; 0xaa
 800df54:	71e3      	strb	r3, [r4, #7]
 800df56:	9b03      	ldr	r3, [sp, #12]
 800df58:	4622      	mov	r2, r4
 800df5a:	f103 090a 	add.w	r9, r3, #10
 800df5e:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800df62:	7831      	ldrb	r1, [r6, #0]
 800df64:	3202      	adds	r2, #2
 800df66:	f061 0155 	orn	r1, r1, #85	; 0x55
 800df6a:	7191      	strb	r1, [r2, #6]
 800df6c:	f816 1b01 	ldrb.w	r1, [r6], #1
 800df70:	f041 0155 	orr.w	r1, r1, #85	; 0x55
 800df74:	71d1      	strb	r1, [r2, #7]
 800df76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800df7a:	454e      	cmp	r6, r9
 800df7c:	440b      	add	r3, r1
 800df7e:	b29b      	uxth	r3, r3
 800df80:	d1ef      	bne.n	800df62 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xc6>
 800df82:	0a1a      	lsrs	r2, r3, #8
 800df84:	f062 0155 	orn	r1, r2, #85	; 0x55
 800df88:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 800df8c:	7562      	strb	r2, [r4, #21]
 800df8e:	f063 0255 	orn	r2, r3, #85	; 0x55
 800df92:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 800df96:	7521      	strb	r1, [r4, #20]
 800df98:	75a2      	strb	r2, [r4, #22]
 800df9a:	75e3      	strb	r3, [r4, #23]
 800df9c:	e7b3      	b.n	800df06 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 800df9e:	4659      	mov	r1, fp
 800dfa0:	465b      	mov	r3, fp
 800dfa2:	e7b5      	b.n	800df10 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x74>
 800dfa4:	f1b8 0f03 	cmp.w	r8, #3
 800dfa8:	d11a      	bne.n	800dfe0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x144>
 800dfaa:	7daa      	ldrb	r2, [r5, #22]
 800dfac:	2a00      	cmp	r2, #0
 800dfae:	d1aa      	bne.n	800df06 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 800dfb0:	707a      	strb	r2, [r7, #1]
 800dfb2:	f1bb 0f00 	cmp.w	fp, #0
 800dfb6:	d0a6      	beq.n	800df06 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d0a4      	beq.n	800df06 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 800dfbc:	2302      	movs	r3, #2
 800dfbe:	75e3      	strb	r3, [r4, #23]
 800dfc0:	4b1d      	ldr	r3, [pc, #116]	; (800e038 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x19c>)
 800dfc2:	7622      	strb	r2, [r4, #24]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	7662      	strb	r2, [r4, #25]
 800dfc8:	889b      	ldrh	r3, [r3, #4]
 800dfca:	3b00      	subs	r3, #0
 800dfcc:	bf18      	it	ne
 800dfce:	2301      	movne	r3, #1
 800dfd0:	005b      	lsls	r3, r3, #1
 800dfd2:	4638      	mov	r0, r7
 800dfd4:	7663      	strb	r3, [r4, #25]
 800dfd6:	b005      	add	sp, #20
 800dfd8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfdc:	f7ff bd7c 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800dfe0:	f1b8 0f02 	cmp.w	r8, #2
 800dfe4:	d18f      	bne.n	800df06 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 800dfe6:	7daa      	ldrb	r2, [r5, #22]
 800dfe8:	2a00      	cmp	r2, #0
 800dfea:	d18c      	bne.n	800df06 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 800dfec:	2101      	movs	r1, #1
 800dfee:	7079      	strb	r1, [r7, #1]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d088      	beq.n	800df06 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 800dff4:	4b10      	ldr	r3, [pc, #64]	; (800e038 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x19c>)
 800dff6:	f884 8017 	strb.w	r8, [r4, #23]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	7622      	strb	r2, [r4, #24]
 800dffe:	7662      	strb	r2, [r4, #25]
 800e000:	889b      	ldrh	r3, [r3, #4]
 800e002:	3b00      	subs	r3, #0
 800e004:	bf18      	it	ne
 800e006:	2301      	movne	r3, #1
 800e008:	408b      	lsls	r3, r1
 800e00a:	e7e2      	b.n	800dfd2 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x136>
 800e00c:	7c6a      	ldrb	r2, [r5, #17]
 800e00e:	7cab      	ldrb	r3, [r5, #18]
 800e010:	f1bb 0f00 	cmp.w	fp, #0
 800e014:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e018:	b29b      	uxth	r3, r3
 800e01a:	9301      	str	r3, [sp, #4]
 800e01c:	7dab      	ldrb	r3, [r5, #22]
 800e01e:	4652      	mov	r2, sl
 800e020:	9300      	str	r3, [sp, #0]
 800e022:	bf08      	it	eq
 800e024:	2101      	moveq	r1, #1
 800e026:	4643      	mov	r3, r8
 800e028:	4638      	mov	r0, r7
 800e02a:	f7ff fec5 	bl	800ddb8 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>
 800e02e:	e76a      	b.n	800df06 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6a>
 800e030:	2000c2b0 			; <UNDEFINED> instruction: 0x2000c2b0
 800e034:	08018570 	stmdaeq	r1, {r4, r5, r6, r8, sl, pc}
 800e038:	2000c2ac 	andcs	ip, r0, ip, lsr #5

0800e03c <RDMIdentify::RDMIdentify()>:
 800e03c:	4b01      	ldr	r3, [pc, #4]	; (800e044 <RDMIdentify::RDMIdentify()+0x8>)
 800e03e:	6018      	str	r0, [r3, #0]
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop
 800e044:	2000c2b8 			; <UNDEFINED> instruction: 0x2000c2b8

0800e048 <RDMIdentify::On(rdm::identify::Mode)>:
 800e048:	4770      	bx	lr

0800e04a <RDMIdentify::Off(rdm::identify::Mode)>:
 800e04a:	4770      	bx	lr

0800e04c <memcpy.constprop.0.isra.0>:
 800e04c:	3801      	subs	r0, #1
 800e04e:	1d0b      	adds	r3, r1, #4
 800e050:	4299      	cmp	r1, r3
 800e052:	d100      	bne.n	800e056 <memcpy.constprop.0.isra.0+0xa>
 800e054:	4770      	bx	lr
 800e056:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e05a:	f800 2f01 	strb.w	r2, [r0, #1]!
 800e05e:	e7f7      	b.n	800e050 <memcpy.constprop.0.isra.0+0x4>

0800e060 <RDMHandler::GetInterfaceList(unsigned short)>:
 800e060:	4a08      	ldr	r2, [pc, #32]	; (800e084 <RDMHandler::GetInterfaceList(unsigned short)+0x24>)
 800e062:	6883      	ldr	r3, [r0, #8]
 800e064:	6812      	ldr	r2, [r2, #0]
 800e066:	6852      	ldr	r2, [r2, #4]
 800e068:	0e11      	lsrs	r1, r2, #24
 800e06a:	7619      	strb	r1, [r3, #24]
 800e06c:	0c11      	lsrs	r1, r2, #16
 800e06e:	7659      	strb	r1, [r3, #25]
 800e070:	76da      	strb	r2, [r3, #27]
 800e072:	0a11      	lsrs	r1, r2, #8
 800e074:	2200      	movs	r2, #0
 800e076:	771a      	strb	r2, [r3, #28]
 800e078:	2206      	movs	r2, #6
 800e07a:	7699      	strb	r1, [r3, #26]
 800e07c:	775a      	strb	r2, [r3, #29]
 800e07e:	75da      	strb	r2, [r3, #23]
 800e080:	f7ff bd2a 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800e084:	2001c724 	andcs	ip, r1, r4, lsr #14

0800e088 <RDMHandler::GetInterfaceName(unsigned short)>:
 800e088:	b538      	push	{r3, r4, r5, lr}
 800e08a:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800e08e:	4604      	mov	r4, r0
 800e090:	3117      	adds	r1, #23
 800e092:	f105 0018 	add.w	r0, r5, #24
 800e096:	f7ff ffd9 	bl	800e04c <memcpy.constprop.0.isra.0>
 800e09a:	4a0d      	ldr	r2, [pc, #52]	; (800e0d0 <RDMHandler::GetInterfaceName(unsigned short)+0x48>)
 800e09c:	f105 001c 	add.w	r0, r5, #28
 800e0a0:	6813      	ldr	r3, [r2, #0]
 800e0a2:	33a2      	adds	r3, #162	; 0xa2
 800e0a4:	f813 1b01 	ldrb.w	r1, [r3], #1
 800e0a8:	f800 1b01 	strb.w	r1, [r0], #1
 800e0ac:	2900      	cmp	r1, #0
 800e0ae:	d1f9      	bne.n	800e0a4 <RDMHandler::GetInterfaceName(unsigned short)+0x1c>
 800e0b0:	6812      	ldr	r2, [r2, #0]
 800e0b2:	32a2      	adds	r2, #162	; 0xa2
 800e0b4:	4611      	mov	r1, r2
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	7818      	ldrb	r0, [r3, #0]
 800e0ba:	3101      	adds	r1, #1
 800e0bc:	2800      	cmp	r0, #0
 800e0be:	d1fa      	bne.n	800e0b6 <RDMHandler::GetInterfaceName(unsigned short)+0x2e>
 800e0c0:	1a9b      	subs	r3, r3, r2
 800e0c2:	3304      	adds	r3, #4
 800e0c4:	75eb      	strb	r3, [r5, #23]
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0cc:	f7ff bd04 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800e0d0:	2001c724 	andcs	ip, r1, r4, lsr #14

0800e0d4 <RDMHandler::GetHardwareAddress(unsigned short)>:
 800e0d4:	b538      	push	{r3, r4, r5, lr}
 800e0d6:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800e0da:	4604      	mov	r4, r0
 800e0dc:	3117      	adds	r1, #23
 800e0de:	f105 0018 	add.w	r0, r5, #24
 800e0e2:	f7ff ffb3 	bl	800e04c <memcpy.constprop.0.isra.0>
 800e0e6:	4b06      	ldr	r3, [pc, #24]	; (800e100 <RDMHandler::GetHardwareAddress(unsigned short)+0x2c>)
 800e0e8:	f105 011c 	add.w	r1, r5, #28
 800e0ec:	6818      	ldr	r0, [r3, #0]
 800e0ee:	f004 ff21 	bl	8012f34 <Network::MacAddressCopyTo(unsigned char*)>
 800e0f2:	230a      	movs	r3, #10
 800e0f4:	75eb      	strb	r3, [r5, #23]
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0fc:	f7ff bcec 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800e100:	2001c724 	andcs	ip, r1, r4, lsr #14

0800e104 <RDMHandler::GetDHCPMode(unsigned short)>:
 800e104:	b538      	push	{r3, r4, r5, lr}
 800e106:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800e10a:	4604      	mov	r4, r0
 800e10c:	3117      	adds	r1, #23
 800e10e:	f105 0018 	add.w	r0, r5, #24
 800e112:	f7ff ff9b 	bl	800e04c <memcpy.constprop.0.isra.0>
 800e116:	4b05      	ldr	r3, [pc, #20]	; (800e12c <RDMHandler::GetDHCPMode(unsigned short)+0x28>)
 800e118:	4620      	mov	r0, r4
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	785b      	ldrb	r3, [r3, #1]
 800e11e:	772b      	strb	r3, [r5, #28]
 800e120:	2305      	movs	r3, #5
 800e122:	75eb      	strb	r3, [r5, #23]
 800e124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e128:	f7ff bcd6 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800e12c:	2001c724 	andcs	ip, r1, r4, lsr #14

0800e130 <RDMHandler::SetDHCPMode(bool, unsigned short)>:
 800e130:	4b10      	ldr	r3, [pc, #64]	; (800e174 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x44>)
 800e132:	b510      	push	{r4, lr}
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	4604      	mov	r4, r0
 800e138:	7819      	ldrb	r1, [r3, #0]
 800e13a:	6842      	ldr	r2, [r0, #4]
 800e13c:	b921      	cbnz	r1, 800e148 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x18>
 800e13e:	210b      	movs	r1, #11
 800e140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e144:	f7ff bd8c 	b.w	800dc60 <RDMHandler::RespondMessageNack(unsigned short)>
 800e148:	7ed2      	ldrb	r2, [r2, #27]
 800e14a:	2a01      	cmp	r2, #1
 800e14c:	d109      	bne.n	800e162 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x32>
 800e14e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800e152:	f042 0204 	orr.w	r2, r2, #4
 800e156:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800e15a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e15e:	f7ff bcbb 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800e162:	b92a      	cbnz	r2, 800e170 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x40>
 800e164:	4618      	mov	r0, r3
 800e166:	4611      	mov	r1, r2
 800e168:	f005 f920 	bl	80133ac <Network::SetQueuedStaticIp(unsigned int, unsigned int)>
 800e16c:	4620      	mov	r0, r4
 800e16e:	e7f4      	b.n	800e15a <RDMHandler::SetDHCPMode(bool, unsigned short)+0x2a>
 800e170:	2106      	movs	r1, #6
 800e172:	e7e5      	b.n	800e140 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x10>
 800e174:	2001c724 	andcs	ip, r1, r4, lsr #14

0800e178 <RDMHandler::GetNameServers(unsigned short)>:
 800e178:	6842      	ldr	r2, [r0, #4]
 800e17a:	7dd2      	ldrb	r2, [r2, #23]
 800e17c:	2a02      	cmp	r2, #2
 800e17e:	d902      	bls.n	800e186 <RDMHandler::GetNameServers(unsigned short)+0xe>
 800e180:	2106      	movs	r1, #6
 800e182:	f7ff bd6d 	b.w	800dc60 <RDMHandler::RespondMessageNack(unsigned short)>
 800e186:	2200      	movs	r2, #0
 800e188:	6883      	ldr	r3, [r0, #8]
 800e18a:	765a      	strb	r2, [r3, #25]
 800e18c:	769a      	strb	r2, [r3, #26]
 800e18e:	76da      	strb	r2, [r3, #27]
 800e190:	771a      	strb	r2, [r3, #28]
 800e192:	2205      	movs	r2, #5
 800e194:	75da      	strb	r2, [r3, #23]
 800e196:	f7ff bc9f 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
	...

0800e19c <RDMHandler::GetZeroconf(unsigned short)>:
 800e19c:	b538      	push	{r3, r4, r5, lr}
 800e19e:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	3117      	adds	r1, #23
 800e1a6:	f105 0018 	add.w	r0, r5, #24
 800e1aa:	f7ff ff4f 	bl	800e04c <memcpy.constprop.0.isra.0>
 800e1ae:	4b06      	ldr	r3, [pc, #24]	; (800e1c8 <RDMHandler::GetZeroconf(unsigned short)+0x2c>)
 800e1b0:	681a      	ldr	r2, [r3, #0]
 800e1b2:	7893      	ldrb	r3, [r2, #2]
 800e1b4:	b103      	cbz	r3, 800e1b8 <RDMHandler::GetZeroconf(unsigned short)+0x1c>
 800e1b6:	78d3      	ldrb	r3, [r2, #3]
 800e1b8:	772b      	strb	r3, [r5, #28]
 800e1ba:	2305      	movs	r3, #5
 800e1bc:	75eb      	strb	r3, [r5, #23]
 800e1be:	4620      	mov	r0, r4
 800e1c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1c4:	f7ff bc88 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800e1c8:	2001c724 	andcs	ip, r1, r4, lsr #14

0800e1cc <RDMHandler::SetZeroconf(bool, unsigned short)>:
 800e1cc:	4b10      	ldr	r3, [pc, #64]	; (800e210 <RDMHandler::SetZeroconf(bool, unsigned short)+0x44>)
 800e1ce:	b510      	push	{r4, lr}
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	4604      	mov	r4, r0
 800e1d4:	7899      	ldrb	r1, [r3, #2]
 800e1d6:	6842      	ldr	r2, [r0, #4]
 800e1d8:	b921      	cbnz	r1, 800e1e4 <RDMHandler::SetZeroconf(bool, unsigned short)+0x18>
 800e1da:	210b      	movs	r1, #11
 800e1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1e0:	f7ff bd3e 	b.w	800dc60 <RDMHandler::RespondMessageNack(unsigned short)>
 800e1e4:	7ed2      	ldrb	r2, [r2, #27]
 800e1e6:	2a01      	cmp	r2, #1
 800e1e8:	d109      	bne.n	800e1fe <RDMHandler::SetZeroconf(bool, unsigned short)+0x32>
 800e1ea:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800e1ee:	f042 0208 	orr.w	r2, r2, #8
 800e1f2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800e1f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1fa:	f7ff bc6d 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800e1fe:	b92a      	cbnz	r2, 800e20c <RDMHandler::SetZeroconf(bool, unsigned short)+0x40>
 800e200:	4618      	mov	r0, r3
 800e202:	4611      	mov	r1, r2
 800e204:	f005 f8d2 	bl	80133ac <Network::SetQueuedStaticIp(unsigned int, unsigned int)>
 800e208:	4620      	mov	r0, r4
 800e20a:	e7f4      	b.n	800e1f6 <RDMHandler::SetZeroconf(bool, unsigned short)+0x2a>
 800e20c:	2106      	movs	r1, #6
 800e20e:	e7e5      	b.n	800e1dc <RDMHandler::SetZeroconf(bool, unsigned short)+0x10>
 800e210:	2001c724 	andcs	ip, r1, r4, lsr #14

0800e214 <RDMHandler::RenewDhcp(bool, unsigned short)>:
 800e214:	4b09      	ldr	r3, [pc, #36]	; (800e23c <RDMHandler::RenewDhcp(bool, unsigned short)+0x28>)
 800e216:	b510      	push	{r4, lr}
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4604      	mov	r4, r0
 800e21c:	785a      	ldrb	r2, [r3, #1]
 800e21e:	b922      	cbnz	r2, 800e22a <RDMHandler::RenewDhcp(bool, unsigned short)+0x16>
 800e220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e224:	210b      	movs	r1, #11
 800e226:	f7ff bd1b 	b.w	800dc60 <RDMHandler::RespondMessageNack(unsigned short)>
 800e22a:	4618      	mov	r0, r3
 800e22c:	f005 f874 	bl	8013318 <Network::EnableDhcp()>
 800e230:	4620      	mov	r0, r4
 800e232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e236:	f7ff bc4f 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800e23a:	bf00      	nop
 800e23c:	2001c724 	andcs	ip, r1, r4, lsr #14

0800e240 <RDMHandler::GetAddressNetmask(unsigned short)>:
 800e240:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e242:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800e246:	4e0f      	ldr	r6, [pc, #60]	; (800e284 <RDMHandler::GetAddressNetmask(unsigned short)+0x44>)
 800e248:	4604      	mov	r4, r0
 800e24a:	6833      	ldr	r3, [r6, #0]
 800e24c:	f105 0018 	add.w	r0, r5, #24
 800e250:	691b      	ldr	r3, [r3, #16]
 800e252:	3117      	adds	r1, #23
 800e254:	9301      	str	r3, [sp, #4]
 800e256:	f7ff fef9 	bl	800e04c <memcpy.constprop.0.isra.0>
 800e25a:	a901      	add	r1, sp, #4
 800e25c:	f105 001c 	add.w	r0, r5, #28
 800e260:	f7ff fef4 	bl	800e04c <memcpy.constprop.0.isra.0>
 800e264:	6836      	ldr	r6, [r6, #0]
 800e266:	69b0      	ldr	r0, [r6, #24]
 800e268:	f009 fd4a 	bl	8017d00 <__popcountsi2>
 800e26c:	f885 0020 	strb.w	r0, [r5, #32]
 800e270:	7873      	ldrb	r3, [r6, #1]
 800e272:	4620      	mov	r0, r4
 800e274:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 800e278:	230a      	movs	r3, #10
 800e27a:	75eb      	strb	r3, [r5, #23]
 800e27c:	f7ff fc2c 	bl	800dad8 <RDMHandler::RespondMessageAck()>
 800e280:	b002      	add	sp, #8
 800e282:	bd70      	pop	{r4, r5, r6, pc}
 800e284:	2001c724 	andcs	ip, r1, r4, lsr #14

0800e288 <RDMHandler::GetStaticAddress(unsigned short)>:
 800e288:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e28a:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800e28e:	4e0e      	ldr	r6, [pc, #56]	; (800e2c8 <RDMHandler::GetStaticAddress(unsigned short)+0x40>)
 800e290:	4604      	mov	r4, r0
 800e292:	6833      	ldr	r3, [r6, #0]
 800e294:	f105 0018 	add.w	r0, r5, #24
 800e298:	691b      	ldr	r3, [r3, #16]
 800e29a:	3117      	adds	r1, #23
 800e29c:	9301      	str	r3, [sp, #4]
 800e29e:	f7ff fed5 	bl	800e04c <memcpy.constprop.0.isra.0>
 800e2a2:	a901      	add	r1, sp, #4
 800e2a4:	f105 001c 	add.w	r0, r5, #28
 800e2a8:	f7ff fed0 	bl	800e04c <memcpy.constprop.0.isra.0>
 800e2ac:	6833      	ldr	r3, [r6, #0]
 800e2ae:	6998      	ldr	r0, [r3, #24]
 800e2b0:	f009 fd26 	bl	8017d00 <__popcountsi2>
 800e2b4:	2309      	movs	r3, #9
 800e2b6:	f885 0020 	strb.w	r0, [r5, #32]
 800e2ba:	75eb      	strb	r3, [r5, #23]
 800e2bc:	4620      	mov	r0, r4
 800e2be:	f7ff fc0b 	bl	800dad8 <RDMHandler::RespondMessageAck()>
 800e2c2:	b002      	add	sp, #8
 800e2c4:	bd70      	pop	{r4, r5, r6, pc}
 800e2c6:	bf00      	nop
 800e2c8:	2001c724 	andcs	ip, r1, r4, lsr #14

0800e2cc <RDMHandler::SetStaticAddress(bool, unsigned short)>:
 800e2cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2ce:	6845      	ldr	r5, [r0, #4]
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	7dab      	ldrb	r3, [r5, #22]
 800e2d4:	2b09      	cmp	r3, #9
 800e2d6:	d005      	beq.n	800e2e4 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x18>
 800e2d8:	2101      	movs	r1, #1
 800e2da:	b003      	add	sp, #12
 800e2dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e2e0:	f7ff bcbe 	b.w	800dc60 <RDMHandler::RespondMessageNack(unsigned short)>
 800e2e4:	f105 011b 	add.w	r1, r5, #27
 800e2e8:	a801      	add	r0, sp, #4
 800e2ea:	f7ff feaf 	bl	800e04c <memcpy.constprop.0.isra.0>
 800e2ee:	4b09      	ldr	r3, [pc, #36]	; (800e314 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x48>)
 800e2f0:	7fea      	ldrb	r2, [r5, #31]
 800e2f2:	6818      	ldr	r0, [r3, #0]
 800e2f4:	9901      	ldr	r1, [sp, #4]
 800e2f6:	b12a      	cbz	r2, 800e304 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x38>
 800e2f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2fc:	f1c2 0220 	rsb	r2, r2, #32
 800e300:	4093      	lsls	r3, r2
 800e302:	ba1a      	rev	r2, r3
 800e304:	f005 f852 	bl	80133ac <Network::SetQueuedStaticIp(unsigned int, unsigned int)>
 800e308:	4620      	mov	r0, r4
 800e30a:	f7ff fbe5 	bl	800dad8 <RDMHandler::RespondMessageAck()>
 800e30e:	b003      	add	sp, #12
 800e310:	bd30      	pop	{r4, r5, pc}
 800e312:	bf00      	nop
 800e314:	2001c724 	andcs	ip, r1, r4, lsr #14

0800e318 <RDMHandler::ApplyConfiguration(bool, unsigned short)>:
 800e318:	4b08      	ldr	r3, [pc, #32]	; (800e33c <RDMHandler::ApplyConfiguration(bool, unsigned short)+0x24>)
 800e31a:	b510      	push	{r4, lr}
 800e31c:	4604      	mov	r4, r0
 800e31e:	6818      	ldr	r0, [r3, #0]
 800e320:	f005 f851 	bl	80133c6 <Network::ApplyQueuedConfig()>
 800e324:	b120      	cbz	r0, 800e330 <RDMHandler::ApplyConfiguration(bool, unsigned short)+0x18>
 800e326:	4620      	mov	r0, r4
 800e328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e32c:	f7ff bbd4 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800e330:	4620      	mov	r0, r4
 800e332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e336:	2101      	movs	r1, #1
 800e338:	f7ff bc92 	b.w	800dc60 <RDMHandler::RespondMessageNack(unsigned short)>
 800e33c:	2001c724 	andcs	ip, r1, r4, lsr #14

0800e340 <RDMHandler::GetDefaultRoute(unsigned short)>:
 800e340:	4b0c      	ldr	r3, [pc, #48]	; (800e374 <RDMHandler::GetDefaultRoute(unsigned short)+0x34>)
 800e342:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e344:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4604      	mov	r4, r0
 800e34c:	695b      	ldr	r3, [r3, #20]
 800e34e:	f105 0018 	add.w	r0, r5, #24
 800e352:	3117      	adds	r1, #23
 800e354:	9301      	str	r3, [sp, #4]
 800e356:	f7ff fe79 	bl	800e04c <memcpy.constprop.0.isra.0>
 800e35a:	a901      	add	r1, sp, #4
 800e35c:	f105 001c 	add.w	r0, r5, #28
 800e360:	f7ff fe74 	bl	800e04c <memcpy.constprop.0.isra.0>
 800e364:	2308      	movs	r3, #8
 800e366:	4620      	mov	r0, r4
 800e368:	75eb      	strb	r3, [r5, #23]
 800e36a:	f7ff fbb5 	bl	800dad8 <RDMHandler::RespondMessageAck()>
 800e36e:	b003      	add	sp, #12
 800e370:	bd30      	pop	{r4, r5, pc}
 800e372:	bf00      	nop
 800e374:	2001c724 	andcs	ip, r1, r4, lsr #14

0800e378 <RDMHandler::SetDefaultRoute(bool, unsigned short)>:
 800e378:	210b      	movs	r1, #11
 800e37a:	f7ff bc71 	b.w	800dc60 <RDMHandler::RespondMessageNack(unsigned short)>
	...

0800e380 <RDMHandler::GetHostName(unsigned short)>:
 800e380:	4b0a      	ldr	r3, [pc, #40]	; (800e3ac <RDMHandler::GetHostName(unsigned short)+0x2c>)
 800e382:	b510      	push	{r4, lr}
 800e384:	6819      	ldr	r1, [r3, #0]
 800e386:	4604      	mov	r4, r0
 800e388:	311c      	adds	r1, #28
 800e38a:	460b      	mov	r3, r1
 800e38c:	461a      	mov	r2, r3
 800e38e:	7810      	ldrb	r0, [r2, #0]
 800e390:	3301      	adds	r3, #1
 800e392:	2800      	cmp	r0, #0
 800e394:	d1fa      	bne.n	800e38c <RDMHandler::GetHostName(unsigned short)+0xc>
 800e396:	1a52      	subs	r2, r2, r1
 800e398:	4620      	mov	r0, r4
 800e39a:	b292      	uxth	r2, r2
 800e39c:	f7ff fb42 	bl	800da24 <RDMHandler::HandleString(char const*, unsigned int)>
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3a6:	f7ff bb97 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800e3aa:	bf00      	nop
 800e3ac:	2001c724 	andcs	ip, r1, r4, lsr #14

0800e3b0 <RDMHandler::SetHostName(bool, unsigned short)>:
 800e3b0:	b510      	push	{r4, lr}
 800e3b2:	6841      	ldr	r1, [r0, #4]
 800e3b4:	4604      	mov	r4, r0
 800e3b6:	7d8b      	ldrb	r3, [r1, #22]
 800e3b8:	2b3f      	cmp	r3, #63	; 0x3f
 800e3ba:	d904      	bls.n	800e3c6 <RDMHandler::SetHostName(bool, unsigned short)+0x16>
 800e3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3c0:	2102      	movs	r1, #2
 800e3c2:	f7ff bc4d 	b.w	800dc60 <RDMHandler::RespondMessageNack(unsigned short)>
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	440b      	add	r3, r1
 800e3ca:	75da      	strb	r2, [r3, #23]
 800e3cc:	4b04      	ldr	r3, [pc, #16]	; (800e3e0 <RDMHandler::SetHostName(bool, unsigned short)+0x30>)
 800e3ce:	3117      	adds	r1, #23
 800e3d0:	6818      	ldr	r0, [r3, #0]
 800e3d2:	f004 ff60 	bl	8013296 <Network::SetHostName(char const*)>
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3dc:	f7ff bb7c 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800e3e0:	2001c724 	andcs	ip, r1, r4, lsr #14

0800e3e4 <RDMHandler::GetDomainName(unsigned short)>:
 800e3e4:	4b0a      	ldr	r3, [pc, #40]	; (800e410 <RDMHandler::GetDomainName(unsigned short)+0x2c>)
 800e3e6:	b510      	push	{r4, lr}
 800e3e8:	6819      	ldr	r1, [r3, #0]
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	315c      	adds	r1, #92	; 0x5c
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	461a      	mov	r2, r3
 800e3f2:	7810      	ldrb	r0, [r2, #0]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	2800      	cmp	r0, #0
 800e3f8:	d1fa      	bne.n	800e3f0 <RDMHandler::GetDomainName(unsigned short)+0xc>
 800e3fa:	1a52      	subs	r2, r2, r1
 800e3fc:	4620      	mov	r0, r4
 800e3fe:	b292      	uxth	r2, r2
 800e400:	f7ff fb10 	bl	800da24 <RDMHandler::HandleString(char const*, unsigned int)>
 800e404:	4620      	mov	r0, r4
 800e406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e40a:	f7ff bb65 	b.w	800dad8 <RDMHandler::RespondMessageAck()>
 800e40e:	bf00      	nop
 800e410:	2001c724 	andcs	ip, r1, r4, lsr #14

0800e414 <RDMHandler::SetDomainName(bool, unsigned short)>:
 800e414:	210b      	movs	r1, #11
 800e416:	f7ff bc23 	b.w	800dc60 <RDMHandler::RespondMessageNack(unsigned short)>
	...

0800e41c <RDMDevice::RDMDevice()>:
 800e41c:	4a33      	ldr	r2, [pc, #204]	; (800e4ec <RDMDevice::RDMDevice()+0xd0>)
 800e41e:	2300      	movs	r3, #0
 800e420:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e422:	4604      	mov	r4, r0
 800e424:	4611      	mov	r1, r2
 800e426:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800e42a:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 800e42e:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
 800e432:	6743      	str	r3, [r0, #116]	; 0x74
 800e434:	4613      	mov	r3, r2
 800e436:	7818      	ldrb	r0, [r3, #0]
 800e438:	3201      	adds	r2, #1
 800e43a:	2800      	cmp	r0, #0
 800e43c:	d1fa      	bne.n	800e434 <RDMDevice::RDMDevice()+0x18>
 800e43e:	1a5b      	subs	r3, r3, r1
 800e440:	2b20      	cmp	r3, #32
 800e442:	bf28      	it	cs
 800e444:	2320      	movcs	r3, #32
 800e446:	f104 052b 	add.w	r5, r4, #43	; 0x2b
 800e44a:	4629      	mov	r1, r5
 800e44c:	461a      	mov	r2, r3
 800e44e:	4827      	ldr	r0, [pc, #156]	; (800e4ec <RDMDevice::RDMDevice()+0xd0>)
 800e450:	3a01      	subs	r2, #1
 800e452:	d23b      	bcs.n	800e4cc <RDMDevice::RDMDevice()+0xb0>
 800e454:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800e458:	4b25      	ldr	r3, [pc, #148]	; (800e4f0 <RDMDevice::RDMDevice()+0xd4>)
 800e45a:	4669      	mov	r1, sp
 800e45c:	781a      	ldrb	r2, [r3, #0]
 800e45e:	7022      	strb	r2, [r4, #0]
 800e460:	785b      	ldrb	r3, [r3, #1]
 800e462:	7063      	strb	r3, [r4, #1]
 800e464:	4b23      	ldr	r3, [pc, #140]	; (800e4f4 <RDMDevice::RDMDevice()+0xd8>)
 800e466:	6818      	ldr	r0, [r3, #0]
 800e468:	f004 fd64 	bl	8012f34 <Network::MacAddressCopyTo(unsigned char*)>
 800e46c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e470:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e474:	70a3      	strb	r3, [r4, #2]
 800e476:	7263      	strb	r3, [r4, #9]
 800e478:	4b1f      	ldr	r3, [pc, #124]	; (800e4f8 <RDMDevice::RDMDevice()+0xdc>)
 800e47a:	70e2      	strb	r2, [r4, #3]
 800e47c:	7222      	strb	r2, [r4, #8]
 800e47e:	461a      	mov	r2, r3
 800e480:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e484:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800e488:	7121      	strb	r1, [r4, #4]
 800e48a:	7160      	strb	r0, [r4, #5]
 800e48c:	71a0      	strb	r0, [r4, #6]
 800e48e:	71e1      	strb	r1, [r4, #7]
 800e490:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e494:	2900      	cmp	r1, #0
 800e496:	d1fb      	bne.n	800e490 <RDMDevice::RDMDevice()+0x74>
 800e498:	1a9b      	subs	r3, r3, r2
 800e49a:	2b20      	cmp	r3, #32
 800e49c:	bf28      	it	cs
 800e49e:	2320      	movcs	r3, #32
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	4915      	ldr	r1, [pc, #84]	; (800e4f8 <RDMDevice::RDMDevice()+0xdc>)
 800e4a4:	3a01      	subs	r2, #1
 800e4a6:	d216      	bcs.n	800e4d6 <RDMDevice::RDMDevice()+0xba>
 800e4a8:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800e4ac:	f06f 2380 	mvn.w	r3, #2147516416	; 0x80008000
 800e4b0:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e4b2:	2314      	movs	r3, #20
 800e4b4:	4a11      	ldr	r2, [pc, #68]	; (800e4fc <RDMDevice::RDMDevice()+0xe0>)
 800e4b6:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 800e4ba:	f104 0165 	add.w	r1, r4, #101	; 0x65
 800e4be:	f104 0351 	add.w	r3, r4, #81	; 0x51
 800e4c2:	4299      	cmp	r1, r3
 800e4c4:	d10c      	bne.n	800e4e0 <RDMDevice::RDMDevice()+0xc4>
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	b002      	add	sp, #8
 800e4ca:	bd70      	pop	{r4, r5, r6, pc}
 800e4cc:	f810 6b01 	ldrb.w	r6, [r0], #1
 800e4d0:	f801 6b01 	strb.w	r6, [r1], #1
 800e4d4:	e7bc      	b.n	800e450 <RDMDevice::RDMDevice()+0x34>
 800e4d6:	f811 0b01 	ldrb.w	r0, [r1], #1
 800e4da:	f805 0b01 	strb.w	r0, [r5], #1
 800e4de:	e7e1      	b.n	800e4a4 <RDMDevice::RDMDevice()+0x88>
 800e4e0:	f812 0b01 	ldrb.w	r0, [r2], #1
 800e4e4:	f803 0b01 	strb.w	r0, [r3], #1
 800e4e8:	e7eb      	b.n	800e4c2 <RDMDevice::RDMDevice()+0xa6>
 800e4ea:	bf00      	nop
 800e4ec:	08018843 	stmdaeq	r1, {r0, r1, r6, fp, pc}
 800e4f0:	08018841 	stmdaeq	r1, {r0, r6, fp, pc}
 800e4f4:	2001c724 	andcs	ip, r1, r4, lsr #14
 800e4f8:	08017f8f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, r9, sl, fp, ip, sp, lr}
 800e4fc:	0801882c 	stmdaeq	r1, {r2, r3, r5, fp, pc}

0800e500 <RDMDevice::Print()>:
 800e500:	b513      	push	{r0, r1, r4, lr}
 800e502:	4604      	mov	r4, r0
 800e504:	4818      	ldr	r0, [pc, #96]	; (800e568 <RDMDevice::Print()+0x68>)
 800e506:	f7fb f929 	bl	800975c <printf>
 800e50a:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800e50e:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 800e512:	4816      	ldr	r0, [pc, #88]	; (800e56c <RDMDevice::Print()+0x6c>)
 800e514:	f7fb f922 	bl	800975c <printf>
 800e518:	7862      	ldrb	r2, [r4, #1]
 800e51a:	7821      	ldrb	r1, [r4, #0]
 800e51c:	4814      	ldr	r0, [pc, #80]	; (800e570 <RDMDevice::Print()+0x70>)
 800e51e:	f7fb f91d 	bl	800975c <printf>
 800e522:	79a3      	ldrb	r3, [r4, #6]
 800e524:	7a22      	ldrb	r2, [r4, #8]
 800e526:	7a61      	ldrb	r1, [r4, #9]
 800e528:	9300      	str	r3, [sp, #0]
 800e52a:	4812      	ldr	r0, [pc, #72]	; (800e574 <RDMDevice::Print()+0x74>)
 800e52c:	79e3      	ldrb	r3, [r4, #7]
 800e52e:	f7fb f915 	bl	800975c <printf>
 800e532:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 800e536:	f104 020a 	add.w	r2, r4, #10
 800e53a:	480f      	ldr	r0, [pc, #60]	; (800e578 <RDMDevice::Print()+0x78>)
 800e53c:	f7fb f90e 	bl	800975c <printf>
 800e540:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 800e544:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 800e548:	0a09      	lsrs	r1, r1, #8
 800e54a:	480c      	ldr	r0, [pc, #48]	; (800e57c <RDMDevice::Print()+0x7c>)
 800e54c:	f7fb f906 	bl	800975c <printf>
 800e550:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 800e554:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 800e558:	4809      	ldr	r0, [pc, #36]	; (800e580 <RDMDevice::Print()+0x80>)
 800e55a:	0a09      	lsrs	r1, r1, #8
 800e55c:	b002      	add	sp, #8
 800e55e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e562:	f7fb b8fb 	b.w	800975c <printf>
 800e566:	bf00      	nop
 800e568:	08018758 	stmdaeq	r1, {r3, r4, r6, r8, r9, sl, pc}
 800e56c:	08018772 	stmdaeq	r1, {r1, r4, r5, r6, r8, r9, sl, pc}
 800e570:	0801878d 	stmdaeq	r1, {r0, r2, r3, r7, r8, r9, sl, pc}
 800e574:	080187ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, r9, sl, pc}
 800e578:	080187d3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r8, r9, sl, pc}
 800e57c:	080187ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, r9, sl, pc}
 800e580:	0801880d 	stmdaeq	r1, {r0, r2, r3, fp, pc}

0800e584 <WS28xxDmxMulti::SetDmxStartAddress(unsigned short)>:
 800e584:	2000      	movs	r0, #0
 800e586:	4770      	bx	lr

0800e588 <WS28xxDmxMulti::GetDmxStartAddress()>:
 800e588:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e58c:	4770      	bx	lr

0800e58e <WS28xxDmxMulti::GetDmxFootprint()>:
 800e58e:	2000      	movs	r0, #0
 800e590:	4770      	bx	lr

0800e592 <WS28xxDmxMulti::Start(unsigned int)>:
 800e592:	b538      	push	{r3, r4, r5, lr}
 800e594:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e596:	4604      	mov	r4, r0
 800e598:	460d      	mov	r5, r1
 800e59a:	b923      	cbnz	r3, 800e5a6 <WS28xxDmxMulti::Start(unsigned int)+0x14>
 800e59c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e59e:	b110      	cbz	r0, 800e5a6 <WS28xxDmxMulti::Start(unsigned int)+0x14>
 800e5a0:	6803      	ldr	r3, [r0, #0]
 800e5a2:	689b      	ldr	r3, [r3, #8]
 800e5a4:	4798      	blx	r3
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	fa03 f105 	lsl.w	r1, r3, r5
 800e5ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e5ae:	430b      	orrs	r3, r1
 800e5b0:	6323      	str	r3, [r4, #48]	; 0x30
 800e5b2:	bd38      	pop	{r3, r4, r5, pc}

0800e5b4 <WS28xxDmxMulti::~WS28xxDmxMulti()>:
 800e5b4:	b538      	push	{r3, r4, r5, lr}
 800e5b6:	4b06      	ldr	r3, [pc, #24]	; (800e5d0 <WS28xxDmxMulti::~WS28xxDmxMulti()+0x1c>)
 800e5b8:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800e5ba:	4604      	mov	r4, r0
 800e5bc:	6003      	str	r3, [r0, #0]
 800e5be:	b12d      	cbz	r5, 800e5cc <WS28xxDmxMulti::~WS28xxDmxMulti()+0x18>
 800e5c0:	4628      	mov	r0, r5
 800e5c2:	f001 fa87 	bl	800fad4 <WS28xxMulti::~WS28xxMulti()>
 800e5c6:	4628      	mov	r0, r5
 800e5c8:	f007 f9fa 	bl	80159c0 <operator delete(void*)>
 800e5cc:	4620      	mov	r0, r4
 800e5ce:	bd38      	pop	{r3, r4, r5, pc}
 800e5d0:	080188b0 	stmdaeq	r1, {r4, r5, r7, fp, pc}

0800e5d4 <WS28xxDmxMulti::~WS28xxDmxMulti()>:
 800e5d4:	b510      	push	{r4, lr}
 800e5d6:	4604      	mov	r4, r0
 800e5d8:	f7ff ffec 	bl	800e5b4 <WS28xxDmxMulti::~WS28xxDmxMulti()>
 800e5dc:	4620      	mov	r0, r4
 800e5de:	f007 f9ef 	bl	80159c0 <operator delete(void*)>
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	bd10      	pop	{r4, pc}

0800e5e6 <WS28xxDmxMulti::Blackout(bool)>:
 800e5e6:	b538      	push	{r3, r4, r5, lr}
 800e5e8:	4604      	mov	r4, r0
 800e5ea:	460d      	mov	r5, r1
 800e5ec:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
 800e5f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e5f2:	f001 fb2d 	bl	800fc50 <WS28xxMulti::IsUpdating()>
 800e5f6:	2800      	cmp	r0, #0
 800e5f8:	d1fa      	bne.n	800e5f0 <WS28xxDmxMulti::Blackout(bool)+0xa>
 800e5fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e5fc:	b11d      	cbz	r5, 800e606 <WS28xxDmxMulti::Blackout(bool)+0x20>
 800e5fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e602:	f001 bb07 	b.w	800fc14 <WS28xxMulti::Blackout()>
 800e606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e60a:	f001 ba8b 	b.w	800fb24 <WS28xxMulti::Update()>

0800e60e <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800e60e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e612:	4699      	mov	r9, r3
 800e614:	4690      	mov	r8, r2
 800e616:	6a03      	ldr	r3, [r0, #32]
 800e618:	f001 0203 	and.w	r2, r1, #3
 800e61c:	b087      	sub	sp, #28
 800e61e:	2a02      	cmp	r2, #2
 800e620:	4604      	mov	r4, r0
 800e622:	fbb9 f3f3 	udiv	r3, r9, r3
 800e626:	6946      	ldr	r6, [r0, #20]
 800e628:	9104      	str	r1, [sp, #16]
 800e62a:	ea4f 0a91 	mov.w	sl, r1, lsr #2
 800e62e:	d02d      	beq.n	800e68c <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x7e>
 800e630:	2a03      	cmp	r2, #3
 800e632:	d02d      	beq.n	800e690 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x82>
 800e634:	2a01      	cmp	r2, #1
 800e636:	d023      	beq.n	800e680 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x72>
 800e638:	429e      	cmp	r6, r3
 800e63a:	bf28      	it	cs
 800e63c:	461e      	movcs	r6, r3
 800e63e:	2500      	movs	r5, #0
 800e640:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e642:	f001 fb05 	bl	800fc50 <WS28xxMulti::IsUpdating()>
 800e646:	2800      	cmp	r0, #0
 800e648:	d1fa      	bne.n	800e640 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x32>
 800e64a:	6a23      	ldr	r3, [r4, #32]
 800e64c:	4647      	mov	r7, r8
 800e64e:	2b03      	cmp	r3, #3
 800e650:	d040      	beq.n	800e6d4 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xc6>
 800e652:	42b5      	cmp	r5, r6
 800e654:	d240      	bcs.n	800e6d8 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xca>
 800e656:	eba7 0308 	sub.w	r3, r7, r8
 800e65a:	4599      	cmp	r9, r3
 800e65c:	d93c      	bls.n	800e6d8 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xca>
 800e65e:	f04f 0b00 	mov.w	fp, #0
 800e662:	69a3      	ldr	r3, [r4, #24]
 800e664:	f897 f000 	pld	[r7]
 800e668:	436b      	muls	r3, r5
 800e66a:	9305      	str	r3, [sp, #20]
 800e66c:	69a3      	ldr	r3, [r4, #24]
 800e66e:	fa1f f28b 	uxth.w	r2, fp
 800e672:	429a      	cmp	r2, r3
 800e674:	f10b 0b01 	add.w	fp, fp, #1
 800e678:	d338      	bcc.n	800e6ec <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xde>
 800e67a:	3501      	adds	r5, #1
 800e67c:	3704      	adds	r7, #4
 800e67e:	e7e8      	b.n	800e652 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x44>
 800e680:	6845      	ldr	r5, [r0, #4]
 800e682:	442b      	add	r3, r5
 800e684:	429e      	cmp	r6, r3
 800e686:	bf28      	it	cs
 800e688:	461e      	movcs	r6, r3
 800e68a:	e7d9      	b.n	800e640 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x32>
 800e68c:	6885      	ldr	r5, [r0, #8]
 800e68e:	e7f8      	b.n	800e682 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 800e690:	68c5      	ldr	r5, [r0, #12]
 800e692:	e7f6      	b.n	800e682 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 800e694:	78bb      	ldrb	r3, [r7, #2]
 800e696:	9905      	ldr	r1, [sp, #20]
 800e698:	9301      	str	r3, [sp, #4]
 800e69a:	787b      	ldrb	r3, [r7, #1]
 800e69c:	440a      	add	r2, r1
 800e69e:	9300      	str	r3, [sp, #0]
 800e6a0:	4651      	mov	r1, sl
 800e6a2:	783b      	ldrb	r3, [r7, #0]
 800e6a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e6a6:	f001 fb19 	bl	800fcdc <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 800e6aa:	e00a      	b.n	800e6c2 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xb4>
 800e6ac:	eba7 0308 	sub.w	r3, r7, r8
 800e6b0:	4599      	cmp	r9, r3
 800e6b2:	d911      	bls.n	800e6d8 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xca>
 800e6b4:	f04f 0b00 	mov.w	fp, #0
 800e6b8:	69a3      	ldr	r3, [r4, #24]
 800e6ba:	f897 f000 	pld	[r7]
 800e6be:	436b      	muls	r3, r5
 800e6c0:	9305      	str	r3, [sp, #20]
 800e6c2:	69a3      	ldr	r3, [r4, #24]
 800e6c4:	fa1f f28b 	uxth.w	r2, fp
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	f10b 0b01 	add.w	fp, fp, #1
 800e6ce:	d8e1      	bhi.n	800e694 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x86>
 800e6d0:	3501      	adds	r5, #1
 800e6d2:	3703      	adds	r7, #3
 800e6d4:	42b5      	cmp	r5, r6
 800e6d6:	d3e9      	bcc.n	800e6ac <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x9e>
 800e6d8:	6923      	ldr	r3, [r4, #16]
 800e6da:	9a04      	ldr	r2, [sp, #16]
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d113      	bne.n	800e708 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xfa>
 800e6e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e6e2:	b007      	add	sp, #28
 800e6e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e8:	f001 ba1c 	b.w	800fb24 <WS28xxMulti::Update()>
 800e6ec:	78fb      	ldrb	r3, [r7, #3]
 800e6ee:	9905      	ldr	r1, [sp, #20]
 800e6f0:	9302      	str	r3, [sp, #8]
 800e6f2:	78bb      	ldrb	r3, [r7, #2]
 800e6f4:	440a      	add	r2, r1
 800e6f6:	9301      	str	r3, [sp, #4]
 800e6f8:	787b      	ldrb	r3, [r7, #1]
 800e6fa:	4651      	mov	r1, sl
 800e6fc:	9300      	str	r3, [sp, #0]
 800e6fe:	783b      	ldrb	r3, [r7, #0]
 800e700:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e702:	f001 fb15 	bl	800fd30 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 800e706:	e7b1      	b.n	800e66c <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x5e>
 800e708:	b007      	add	sp, #28
 800e70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800e710 <WS28xxDmxMulti::Print()>:
 800e710:	b510      	push	{r4, lr}
 800e712:	4604      	mov	r4, r0
 800e714:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e716:	f001 f9e3 	bl	800fae0 <WS28xxMulti::Print()>
 800e71a:	4807      	ldr	r0, [pc, #28]	; (800e738 <WS28xxDmxMulti::Print()+0x28>)
 800e71c:	f7fb f81e 	bl	800975c <printf>
 800e720:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e722:	4806      	ldr	r0, [pc, #24]	; (800e73c <WS28xxDmxMulti::Print()+0x2c>)
 800e724:	f7fb f81a 	bl	800975c <printf>
 800e728:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800e72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e730:	4803      	ldr	r0, [pc, #12]	; (800e740 <WS28xxDmxMulti::Print()+0x30>)
 800e732:	f7fb b813 	b.w	800975c <printf>
 800e736:	bf00      	nop
 800e738:	0801885f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, fp, pc}
 800e73c:	08018875 	stmdaeq	r1, {r0, r2, r4, r5, r6, fp, pc}
 800e740:	08018884 	stmdaeq	r1, {r2, r7, fp, pc}

0800e744 <WS28xxDmxMulti::Stop(unsigned int)>:
 800e744:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e746:	b570      	push	{r4, r5, r6, lr}
 800e748:	40cb      	lsrs	r3, r1
 800e74a:	07db      	lsls	r3, r3, #31
 800e74c:	4604      	mov	r4, r0
 800e74e:	460d      	mov	r5, r1
 800e750:	d50a      	bpl.n	800e768 <WS28xxDmxMulti::Stop(unsigned int)+0x24>
 800e752:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e756:	4a09      	ldr	r2, [pc, #36]	; (800e77c <WS28xxDmxMulti::Stop(unsigned int)+0x38>)
 800e758:	f7ff ff59 	bl	800e60e <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)>
 800e75c:	2201      	movs	r2, #1
 800e75e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e760:	40aa      	lsls	r2, r5
 800e762:	ea23 0302 	bic.w	r3, r3, r2
 800e766:	6323      	str	r3, [r4, #48]	; 0x30
 800e768:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e76a:	b933      	cbnz	r3, 800e77a <WS28xxDmxMulti::Stop(unsigned int)+0x36>
 800e76c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e76e:	b120      	cbz	r0, 800e77a <WS28xxDmxMulti::Stop(unsigned int)+0x36>
 800e770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e774:	6803      	ldr	r3, [r0, #0]
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	4718      	bx	r3
 800e77a:	bd70      	pop	{r4, r5, r6, pc}
 800e77c:	2000c2bc 			; <UNDEFINED> instruction: 0x2000c2bc

0800e780 <WS28xxDmxMulti::WS28xxDmxMulti(PixelDmxConfiguration&)>:
 800e780:	4b16      	ldr	r3, [pc, #88]	; (800e7dc <WS28xxDmxMulti::WS28xxDmxMulti(PixelDmxConfiguration&)+0x5c>)
 800e782:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e784:	6003      	str	r3, [r0, #0]
 800e786:	2300      	movs	r3, #0
 800e788:	460d      	mov	r5, r1
 800e78a:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 800e78e:	6303      	str	r3, [r0, #48]	; 0x30
 800e790:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 800e794:	f100 031c 	add.w	r3, r0, #28
 800e798:	9301      	str	r3, [sp, #4]
 800e79a:	f100 0314 	add.w	r3, r0, #20
 800e79e:	f100 0220 	add.w	r2, r0, #32
 800e7a2:	4604      	mov	r4, r0
 800e7a4:	2108      	movs	r1, #8
 800e7a6:	9300      	str	r3, [sp, #0]
 800e7a8:	1d03      	adds	r3, r0, #4
 800e7aa:	4628      	mov	r0, r5
 800e7ac:	f000 fbd8 	bl	800ef60 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>
 800e7b0:	2010      	movs	r0, #16
 800e7b2:	f007 f909 	bl	80159c8 <operator new(unsigned int)>
 800e7b6:	4606      	mov	r6, r0
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	f001 f857 	bl	800f86c <WS28xxMulti::WS28xxMulti(PixelConfiguration&)>
 800e7be:	4630      	mov	r0, r6
 800e7c0:	62a6      	str	r6, [r4, #40]	; 0x28
 800e7c2:	f001 fa27 	bl	800fc14 <WS28xxMulti::Blackout()>
 800e7c6:	69ab      	ldr	r3, [r5, #24]
 800e7c8:	4628      	mov	r0, r5
 800e7ca:	61a3      	str	r3, [r4, #24]
 800e7cc:	696b      	ldr	r3, [r5, #20]
 800e7ce:	6263      	str	r3, [r4, #36]	; 0x24
 800e7d0:	f000 fc1c 	bl	800f00c <PixelDmxConfiguration::Dump()>
 800e7d4:	4620      	mov	r0, r4
 800e7d6:	b002      	add	sp, #8
 800e7d8:	bd70      	pop	{r4, r5, r6, pc}
 800e7da:	bf00      	nop
 800e7dc:	080188b0 	stmdaeq	r1, {r4, r5, r7, fp, pc}

0800e7e0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800e7e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e7e2:	88c6      	ldrh	r6, [r0, #6]
 800e7e4:	8885      	ldrh	r5, [r0, #4]
 800e7e6:	42ae      	cmp	r6, r5
 800e7e8:	d216      	bcs.n	800e818 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800e7ea:	4604      	mov	r4, r0
 800e7ec:	6800      	ldr	r0, [r0, #0]
 800e7ee:	1bad      	subs	r5, r5, r6
 800e7f0:	4430      	add	r0, r6
 800e7f2:	7a26      	ldrb	r6, [r4, #8]
 800e7f4:	b923      	cbnz	r3, 800e800 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800e7f6:	b926      	cbnz	r6, 800e802 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800e7f8:	9200      	str	r2, [sp, #0]
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	4a09      	ldr	r2, [pc, #36]	; (800e824 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800e7fe:	e003      	b.n	800e808 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800e800:	b166      	cbz	r6, 800e81c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800e802:	460b      	mov	r3, r1
 800e804:	9200      	str	r2, [sp, #0]
 800e806:	4a08      	ldr	r2, [pc, #32]	; (800e828 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800e808:	4629      	mov	r1, r5
 800e80a:	f7fa ffcf 	bl	80097ac <snprintf>
 800e80e:	4285      	cmp	r5, r0
 800e810:	bfa2      	ittt	ge
 800e812:	88e3      	ldrhge	r3, [r4, #6]
 800e814:	181b      	addge	r3, r3, r0
 800e816:	80e3      	strhge	r3, [r4, #6]
 800e818:	b002      	add	sp, #8
 800e81a:	bd70      	pop	{r4, r5, r6, pc}
 800e81c:	9200      	str	r2, [sp, #0]
 800e81e:	460b      	mov	r3, r1
 800e820:	4a02      	ldr	r2, [pc, #8]	; (800e82c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800e822:	e7f1      	b.n	800e808 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800e824:	080180d1 	stmdaeq	r1, {r0, r4, r6, r7, pc}
 800e828:	080180c8 	stmdaeq	r1, {r3, r6, r7, pc}
 800e82c:	080180d2 	stmdaeq	r1, {r1, r4, r6, r7, pc}

0800e830 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 800e830:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e832:	88c6      	ldrh	r6, [r0, #6]
 800e834:	8885      	ldrh	r5, [r0, #4]
 800e836:	42ae      	cmp	r6, r5
 800e838:	d216      	bcs.n	800e868 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 800e83a:	4604      	mov	r4, r0
 800e83c:	6800      	ldr	r0, [r0, #0]
 800e83e:	1bad      	subs	r5, r5, r6
 800e840:	4430      	add	r0, r6
 800e842:	7a26      	ldrb	r6, [r4, #8]
 800e844:	b923      	cbnz	r3, 800e850 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 800e846:	b926      	cbnz	r6, 800e852 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 800e848:	9200      	str	r2, [sp, #0]
 800e84a:	460b      	mov	r3, r1
 800e84c:	4a09      	ldr	r2, [pc, #36]	; (800e874 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 800e84e:	e003      	b.n	800e858 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800e850:	b166      	cbz	r6, 800e86c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 800e852:	460b      	mov	r3, r1
 800e854:	9200      	str	r2, [sp, #0]
 800e856:	4a08      	ldr	r2, [pc, #32]	; (800e878 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 800e858:	4629      	mov	r1, r5
 800e85a:	f7fa ffa7 	bl	80097ac <snprintf>
 800e85e:	4285      	cmp	r5, r0
 800e860:	bfa2      	ittt	ge
 800e862:	88e3      	ldrhge	r3, [r4, #6]
 800e864:	181b      	addge	r3, r3, r0
 800e866:	80e3      	strhge	r3, [r4, #6]
 800e868:	b002      	add	sp, #8
 800e86a:	bd70      	pop	{r4, r5, r6, pc}
 800e86c:	9200      	str	r2, [sp, #0]
 800e86e:	460b      	mov	r3, r1
 800e870:	4a02      	ldr	r2, [pc, #8]	; (800e87c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 800e872:	e7f1      	b.n	800e858 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800e874:	080180d1 	stmdaeq	r1, {r0, r4, r6, r7, pc}
 800e878:	080180c8 	stmdaeq	r1, {r3, r6, r7, pc}
 800e87c:	080180d2 	stmdaeq	r1, {r1, r4, r6, r7, pc}

0800e880 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800e880:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e882:	88c6      	ldrh	r6, [r0, #6]
 800e884:	8885      	ldrh	r5, [r0, #4]
 800e886:	42ae      	cmp	r6, r5
 800e888:	d216      	bcs.n	800e8b8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800e88a:	4604      	mov	r4, r0
 800e88c:	6800      	ldr	r0, [r0, #0]
 800e88e:	1bad      	subs	r5, r5, r6
 800e890:	4430      	add	r0, r6
 800e892:	7a26      	ldrb	r6, [r4, #8]
 800e894:	b923      	cbnz	r3, 800e8a0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800e896:	b926      	cbnz	r6, 800e8a2 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800e898:	9200      	str	r2, [sp, #0]
 800e89a:	460b      	mov	r3, r1
 800e89c:	4a09      	ldr	r2, [pc, #36]	; (800e8c4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800e89e:	e003      	b.n	800e8a8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800e8a0:	b166      	cbz	r6, 800e8bc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800e8a2:	460b      	mov	r3, r1
 800e8a4:	9200      	str	r2, [sp, #0]
 800e8a6:	4a08      	ldr	r2, [pc, #32]	; (800e8c8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800e8a8:	4629      	mov	r1, r5
 800e8aa:	f7fa ff7f 	bl	80097ac <snprintf>
 800e8ae:	4285      	cmp	r5, r0
 800e8b0:	bfa2      	ittt	ge
 800e8b2:	88e3      	ldrhge	r3, [r4, #6]
 800e8b4:	181b      	addge	r3, r3, r0
 800e8b6:	80e3      	strhge	r3, [r4, #6]
 800e8b8:	b002      	add	sp, #8
 800e8ba:	bd70      	pop	{r4, r5, r6, pc}
 800e8bc:	9200      	str	r2, [sp, #0]
 800e8be:	460b      	mov	r3, r1
 800e8c0:	4a02      	ldr	r2, [pc, #8]	; (800e8cc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800e8c2:	e7f1      	b.n	800e8a8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800e8c4:	080180e4 	stmdaeq	r1, {r2, r5, r6, r7, pc}
 800e8c8:	080180d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, pc}
 800e8cc:	080180e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, pc}

0800e8d0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>:
 800e8d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8d4:	4699      	mov	r9, r3
 800e8d6:	8885      	ldrh	r5, [r0, #4]
 800e8d8:	88c3      	ldrh	r3, [r0, #6]
 800e8da:	4604      	mov	r4, r0
 800e8dc:	42ab      	cmp	r3, r5
 800e8de:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800e8e2:	d227      	bcs.n	800e934 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x64>
 800e8e4:	6826      	ldr	r6, [r4, #0]
 800e8e6:	4610      	mov	r0, r2
 800e8e8:	460f      	mov	r7, r1
 800e8ea:	f894 a008 	ldrb.w	sl, [r4, #8]
 800e8ee:	441e      	add	r6, r3
 800e8f0:	1aed      	subs	r5, r5, r3
 800e8f2:	f7f9 fc9b 	bl	800822c <__aeabi_f2d>
 800e8f6:	f1b9 0f00 	cmp.w	r9, #0
 800e8fa:	d109      	bne.n	800e910 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x40>
 800e8fc:	f1ba 0f00 	cmp.w	sl, #0
 800e900:	d109      	bne.n	800e916 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x46>
 800e902:	463b      	mov	r3, r7
 800e904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e908:	4a0f      	ldr	r2, [pc, #60]	; (800e948 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x78>)
 800e90a:	f8cd 8000 	str.w	r8, [sp]
 800e90e:	e008      	b.n	800e922 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800e910:	f1ba 0f00 	cmp.w	sl, #0
 800e914:	d011      	beq.n	800e93a <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x6a>
 800e916:	463b      	mov	r3, r7
 800e918:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e91c:	4a0b      	ldr	r2, [pc, #44]	; (800e94c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x7c>)
 800e91e:	f8cd 8000 	str.w	r8, [sp]
 800e922:	4629      	mov	r1, r5
 800e924:	4630      	mov	r0, r6
 800e926:	f7fa ff41 	bl	80097ac <snprintf>
 800e92a:	4285      	cmp	r5, r0
 800e92c:	bfa2      	ittt	ge
 800e92e:	88e3      	ldrhge	r3, [r4, #6]
 800e930:	181b      	addge	r3, r3, r0
 800e932:	80e3      	strhge	r3, [r4, #6]
 800e934:	b004      	add	sp, #16
 800e936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e93a:	463b      	mov	r3, r7
 800e93c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e940:	4a03      	ldr	r2, [pc, #12]	; (800e950 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x80>)
 800e942:	f8cd 8000 	str.w	r8, [sp]
 800e946:	e7ec      	b.n	800e922 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800e948:	080188e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, fp, pc}
 800e94c:	080188dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, fp, pc}
 800e950:	080188e8 	stmdaeq	r1, {r3, r5, r6, r7, fp, pc}

0800e954 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>:
 800e954:	2300      	movs	r3, #0
 800e956:	4a18      	ldr	r2, [pc, #96]	; (800e9b8 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x64>)
 800e958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e95a:	e9c0 3201 	strd	r3, r2, [r0, #4]
 800e95e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e962:	81c2      	strh	r2, [r0, #14]
 800e964:	223d      	movs	r2, #61	; 0x3d
 800e966:	8202      	strh	r2, [r0, #16]
 800e968:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e96c:	2501      	movs	r5, #1
 800e96e:	8242      	strh	r2, [r0, #18]
 800e970:	2206      	movs	r2, #6
 800e972:	f647 76f0 	movw	r6, #32752	; 0x7ff0
 800e976:	6001      	str	r1, [r0, #0]
 800e978:	7303      	strb	r3, [r0, #12]
 800e97a:	7545      	strb	r5, [r0, #21]
 800e97c:	7583      	strb	r3, [r0, #22]
 800e97e:	75c2      	strb	r2, [r0, #23]
 800e980:	8303      	strh	r3, [r0, #24]
 800e982:	f100 041a 	add.w	r4, r0, #26
 800e986:	f824 5b02 	strh.w	r5, [r4], #2
 800e98a:	b16b      	cbz	r3, 800e9a8 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x54>
 800e98c:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 800e990:	1d11      	adds	r1, r2, #4
 800e992:	3207      	adds	r2, #7
 800e994:	b289      	uxth	r1, r1
 800e996:	b292      	uxth	r2, r2
 800e998:	ea81 0702 	eor.w	r7, r1, r2
 800e99c:	423e      	tst	r6, r7
 800e99e:	bf18      	it	ne
 800e9a0:	ea02 0106 	andne.w	r1, r2, r6
 800e9a4:	f824 1c02 	strh.w	r1, [r4, #-2]
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	2b08      	cmp	r3, #8
 800e9ac:	d1eb      	bne.n	800e986 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x32>
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 800e9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9b6:	bf00      	nop
 800e9b8:	0100aa03 	tsteq	r0, r3, lsl #20

0800e9bc <WS28xxDmxParams::Load()>:
 800e9bc:	b508      	push	{r3, lr}
 800e9be:	2300      	movs	r3, #0
 800e9c0:	4601      	mov	r1, r0
 800e9c2:	6043      	str	r3, [r0, #4]
 800e9c4:	6800      	ldr	r0, [r0, #0]
 800e9c6:	b120      	cbz	r0, 800e9d2 <WS28xxDmxParams::Load()+0x16>
 800e9c8:	6803      	ldr	r3, [r0, #0]
 800e9ca:	3104      	adds	r1, #4
 800e9cc:	68db      	ldr	r3, [r3, #12]
 800e9ce:	4798      	blx	r3
 800e9d0:	2001      	movs	r0, #1
 800e9d2:	bd08      	pop	{r3, pc}

0800e9d4 <WS28xxDmxParams::Load(char const*, unsigned int)>:
 800e9d4:	6803      	ldr	r3, [r0, #0]
 800e9d6:	b1d3      	cbz	r3, 800ea0e <WS28xxDmxParams::Load(char const*, unsigned int)+0x3a>
 800e9d8:	2300      	movs	r3, #0
 800e9da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e9dc:	460d      	mov	r5, r1
 800e9de:	4616      	mov	r6, r2
 800e9e0:	4604      	mov	r4, r0
 800e9e2:	6043      	str	r3, [r0, #4]
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	490a      	ldr	r1, [pc, #40]	; (800ea10 <WS28xxDmxParams::Load(char const*, unsigned int)+0x3c>)
 800e9e8:	4668      	mov	r0, sp
 800e9ea:	f006 fa0d 	bl	8014e08 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800e9ee:	4632      	mov	r2, r6
 800e9f0:	4629      	mov	r1, r5
 800e9f2:	4668      	mov	r0, sp
 800e9f4:	f006 fa0c 	bl	8014e10 <ReadConfigFile::Read(char const*, unsigned int)>
 800e9f8:	4621      	mov	r1, r4
 800e9fa:	f851 0b04 	ldr.w	r0, [r1], #4
 800e9fe:	6803      	ldr	r3, [r0, #0]
 800ea00:	689b      	ldr	r3, [r3, #8]
 800ea02:	4798      	blx	r3
 800ea04:	4668      	mov	r0, sp
 800ea06:	f006 fa02 	bl	8014e0e <ReadConfigFile::~ReadConfigFile()>
 800ea0a:	b002      	add	sp, #8
 800ea0c:	bd70      	pop	{r4, r5, r6, pc}
 800ea0e:	4770      	bx	lr
 800ea10:	0800ec65 	stmdaeq	r0, {r0, r2, r5, r6, sl, fp, sp, lr, pc}

0800ea14 <WS28xxDmxParams::callbackFunction(char const*)>:
 800ea14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea18:	2308      	movs	r3, #8
 800ea1a:	460d      	mov	r5, r1
 800ea1c:	b089      	sub	sp, #36	; 0x24
 800ea1e:	4604      	mov	r4, r0
 800ea20:	9302      	str	r3, [sp, #8]
 800ea22:	4628      	mov	r0, r5
 800ea24:	4983      	ldr	r1, [pc, #524]	; (800ec34 <WS28xxDmxParams::callbackFunction(char const*)+0x220>)
 800ea26:	446b      	add	r3, sp
 800ea28:	aa04      	add	r2, sp, #16
 800ea2a:	f006 fa25 	bl	8014e78 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800ea2e:	b9a0      	cbnz	r0, 800ea5a <WS28xxDmxParams::callbackFunction(char const*)+0x46>
 800ea30:	9b02      	ldr	r3, [sp, #8]
 800ea32:	3320      	adds	r3, #32
 800ea34:	446b      	add	r3, sp
 800ea36:	f803 0c10 	strb.w	r0, [r3, #-16]
 800ea3a:	a804      	add	r0, sp, #16
 800ea3c:	f000 fe14 	bl	800f668 <PixelType::GetType(char const*)>
 800ea40:	280e      	cmp	r0, #14
 800ea42:	bf08      	it	eq
 800ea44:	2203      	moveq	r2, #3
 800ea46:	6863      	ldr	r3, [r4, #4]
 800ea48:	bf19      	ittee	ne
 800ea4a:	7220      	strbne	r0, [r4, #8]
 800ea4c:	f043 0301 	orrne.w	r3, r3, #1
 800ea50:	7222      	strbeq	r2, [r4, #8]
 800ea52:	f023 0301 	biceq.w	r3, r3, #1
 800ea56:	6063      	str	r3, [r4, #4]
 800ea58:	e033      	b.n	800eac2 <WS28xxDmxParams::callbackFunction(char const*)+0xae>
 800ea5a:	4628      	mov	r0, r5
 800ea5c:	4976      	ldr	r1, [pc, #472]	; (800ec38 <WS28xxDmxParams::callbackFunction(char const*)+0x224>)
 800ea5e:	f10d 0202 	add.w	r2, sp, #2
 800ea62:	f006 faf0 	bl	8015046 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800ea66:	b990      	cbnz	r0, 800ea8e <WS28xxDmxParams::callbackFunction(char const*)+0x7a>
 800ea68:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ea6c:	6863      	ldr	r3, [r4, #4]
 800ea6e:	1e51      	subs	r1, r2, #1
 800ea70:	f5b1 7f2a 	cmp.w	r1, #680	; 0x2a8
 800ea74:	bf2d      	iteet	cs
 800ea76:	f06f 0255 	mvncs.w	r2, #85	; 0x55
 800ea7a:	f8a4 2009 	strhcc.w	r2, [r4, #9]
 800ea7e:	f043 0302 	orrcc.w	r3, r3, #2
 800ea82:	7262      	strbcs	r2, [r4, #9]
 800ea84:	bf24      	itt	cs
 800ea86:	72a0      	strbcs	r0, [r4, #10]
 800ea88:	f023 0302 	biccs.w	r3, r3, #2
 800ea8c:	e7e3      	b.n	800ea56 <WS28xxDmxParams::callbackFunction(char const*)+0x42>
 800ea8e:	2303      	movs	r3, #3
 800ea90:	4628      	mov	r0, r5
 800ea92:	9302      	str	r3, [sp, #8]
 800ea94:	4969      	ldr	r1, [pc, #420]	; (800ec3c <WS28xxDmxParams::callbackFunction(char const*)+0x228>)
 800ea96:	ab02      	add	r3, sp, #8
 800ea98:	aa04      	add	r2, sp, #16
 800ea9a:	f006 f9ed 	bl	8014e78 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800ea9e:	b998      	cbnz	r0, 800eac8 <WS28xxDmxParams::callbackFunction(char const*)+0xb4>
 800eaa0:	9b02      	ldr	r3, [sp, #8]
 800eaa2:	3320      	adds	r3, #32
 800eaa4:	446b      	add	r3, sp
 800eaa6:	f803 0c10 	strb.w	r0, [r3, #-16]
 800eaaa:	a804      	add	r0, sp, #16
 800eaac:	f000 fe00 	bl	800f6b0 <PixelType::GetMap(char const*)>
 800eab0:	6863      	ldr	r3, [r4, #4]
 800eab2:	2806      	cmp	r0, #6
 800eab4:	bf14      	ite	ne
 800eab6:	f443 7300 	orrne.w	r3, r3, #512	; 0x200
 800eaba:	f423 7300 	biceq.w	r3, r3, #512	; 0x200
 800eabe:	6063      	str	r3, [r4, #4]
 800eac0:	75e0      	strb	r0, [r4, #23]
 800eac2:	b009      	add	sp, #36	; 0x24
 800eac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eac8:	4628      	mov	r0, r5
 800eaca:	495d      	ldr	r1, [pc, #372]	; (800ec40 <WS28xxDmxParams::callbackFunction(char const*)+0x22c>)
 800eacc:	aa01      	add	r2, sp, #4
 800eace:	f006 f9ec 	bl	8014eaa <Sscan::Float(char const*, char const*, float&)>
 800ead2:	b960      	cbnz	r0, 800eaee <WS28xxDmxParams::callbackFunction(char const*)+0xda>
 800ead4:	9801      	ldr	r0, [sp, #4]
 800ead6:	f000 fe4d 	bl	800f774 <PixelType::ConvertTxH(float)>
 800eada:	6863      	ldr	r3, [r4, #4]
 800eadc:	b120      	cbz	r0, 800eae8 <WS28xxDmxParams::callbackFunction(char const*)+0xd4>
 800eade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800eae2:	6063      	str	r3, [r4, #4]
 800eae4:	7620      	strb	r0, [r4, #24]
 800eae6:	e7ec      	b.n	800eac2 <WS28xxDmxParams::callbackFunction(char const*)+0xae>
 800eae8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eaec:	e7f9      	b.n	800eae2 <WS28xxDmxParams::callbackFunction(char const*)+0xce>
 800eaee:	4628      	mov	r0, r5
 800eaf0:	4954      	ldr	r1, [pc, #336]	; (800ec44 <WS28xxDmxParams::callbackFunction(char const*)+0x230>)
 800eaf2:	aa01      	add	r2, sp, #4
 800eaf4:	f006 f9d9 	bl	8014eaa <Sscan::Float(char const*, char const*, float&)>
 800eaf8:	b960      	cbnz	r0, 800eb14 <WS28xxDmxParams::callbackFunction(char const*)+0x100>
 800eafa:	9801      	ldr	r0, [sp, #4]
 800eafc:	f000 fe3a 	bl	800f774 <PixelType::ConvertTxH(float)>
 800eb00:	6863      	ldr	r3, [r4, #4]
 800eb02:	b120      	cbz	r0, 800eb0e <WS28xxDmxParams::callbackFunction(char const*)+0xfa>
 800eb04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800eb08:	6063      	str	r3, [r4, #4]
 800eb0a:	7660      	strb	r0, [r4, #25]
 800eb0c:	e7d9      	b.n	800eac2 <WS28xxDmxParams::callbackFunction(char const*)+0xae>
 800eb0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eb12:	e7f9      	b.n	800eb08 <WS28xxDmxParams::callbackFunction(char const*)+0xf4>
 800eb14:	4628      	mov	r0, r5
 800eb16:	494c      	ldr	r1, [pc, #304]	; (800ec48 <WS28xxDmxParams::callbackFunction(char const*)+0x234>)
 800eb18:	f10d 0202 	add.w	r2, sp, #2
 800eb1c:	f006 fa93 	bl	8015046 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800eb20:	b998      	cbnz	r0, 800eb4a <WS28xxDmxParams::callbackFunction(char const*)+0x136>
 800eb22:	f240 25a6 	movw	r5, #678	; 0x2a6
 800eb26:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800eb2a:	6863      	ldr	r3, [r4, #4]
 800eb2c:	1e8a      	subs	r2, r1, #2
 800eb2e:	b292      	uxth	r2, r2
 800eb30:	42aa      	cmp	r2, r5
 800eb32:	bf81      	itttt	hi
 800eb34:	2201      	movhi	r2, #1
 800eb36:	75a0      	strbhi	r0, [r4, #22]
 800eb38:	7562      	strbhi	r2, [r4, #21]
 800eb3a:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 800eb3e:	bf9c      	itt	ls
 800eb40:	f8a4 1015 	strhls.w	r1, [r4, #21]
 800eb44:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 800eb48:	e785      	b.n	800ea56 <WS28xxDmxParams::callbackFunction(char const*)+0x42>
 800eb4a:	4628      	mov	r0, r5
 800eb4c:	493f      	ldr	r1, [pc, #252]	; (800ec4c <WS28xxDmxParams::callbackFunction(char const*)+0x238>)
 800eb4e:	aa03      	add	r2, sp, #12
 800eb50:	f006 fa97 	bl	8015082 <Sscan::Uint32(char const*, char const*, unsigned int&)>
 800eb54:	b960      	cbnz	r0, 800eb70 <WS28xxDmxParams::callbackFunction(char const*)+0x15c>
 800eb56:	9a03      	ldr	r2, [sp, #12]
 800eb58:	493d      	ldr	r1, [pc, #244]	; (800ec50 <WS28xxDmxParams::callbackFunction(char const*)+0x23c>)
 800eb5a:	6863      	ldr	r3, [r4, #4]
 800eb5c:	428a      	cmp	r2, r1
 800eb5e:	bf14      	ite	ne
 800eb60:	f043 0310 	orrne.w	r3, r3, #16
 800eb64:	f023 0310 	biceq.w	r3, r3, #16
 800eb68:	6063      	str	r3, [r4, #4]
 800eb6a:	f8c4 200e 	str.w	r2, [r4, #14]
 800eb6e:	e7a8      	b.n	800eac2 <WS28xxDmxParams::callbackFunction(char const*)+0xae>
 800eb70:	4628      	mov	r0, r5
 800eb72:	4938      	ldr	r1, [pc, #224]	; (800ec54 <WS28xxDmxParams::callbackFunction(char const*)+0x240>)
 800eb74:	f10d 0201 	add.w	r2, sp, #1
 800eb78:	f006 faac 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800eb7c:	b988      	cbnz	r0, 800eba2 <WS28xxDmxParams::callbackFunction(char const*)+0x18e>
 800eb7e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800eb82:	6863      	ldr	r3, [r4, #4]
 800eb84:	1e4a      	subs	r2, r1, #1
 800eb86:	b2d2      	uxtb	r2, r2
 800eb88:	2afd      	cmp	r2, #253	; 0xfd
 800eb8a:	bf83      	ittte	hi
 800eb8c:	f023 0320 	bichi.w	r3, r3, #32
 800eb90:	6063      	strhi	r3, [r4, #4]
 800eb92:	23ff      	movhi	r3, #255	; 0xff
 800eb94:	f043 0320 	orrls.w	r3, r3, #32
 800eb98:	bf9a      	itte	ls
 800eb9a:	6063      	strls	r3, [r4, #4]
 800eb9c:	74a1      	strbls	r1, [r4, #18]
 800eb9e:	74a3      	strbhi	r3, [r4, #18]
 800eba0:	e78f      	b.n	800eac2 <WS28xxDmxParams::callbackFunction(char const*)+0xae>
 800eba2:	2600      	movs	r6, #0
 800eba4:	2712      	movs	r7, #18
 800eba6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800ec58 <WS28xxDmxParams::callbackFunction(char const*)+0x244>
 800ebaa:	f104 091a 	add.w	r9, r4, #26
 800ebae:	4628      	mov	r0, r5
 800ebb0:	fb07 8106 	mla	r1, r7, r6, r8
 800ebb4:	f10d 0202 	add.w	r2, sp, #2
 800ebb8:	f006 fa45 	bl	8015046 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800ebbc:	b948      	cbnz	r0, 800ebd2 <WS28xxDmxParams::callbackFunction(char const*)+0x1be>
 800ebbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ebc2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ebc6:	40b2      	lsls	r2, r6
 800ebc8:	f829 3016 	strh.w	r3, [r9, r6, lsl #1]
 800ebcc:	6863      	ldr	r3, [r4, #4]
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	6063      	str	r3, [r4, #4]
 800ebd2:	3601      	adds	r6, #1
 800ebd4:	2e08      	cmp	r6, #8
 800ebd6:	d1ea      	bne.n	800ebae <WS28xxDmxParams::callbackFunction(char const*)+0x19a>
 800ebd8:	4628      	mov	r0, r5
 800ebda:	4920      	ldr	r1, [pc, #128]	; (800ec5c <WS28xxDmxParams::callbackFunction(char const*)+0x248>)
 800ebdc:	f10d 0201 	add.w	r2, sp, #1
 800ebe0:	f006 fa78 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ebe4:	b970      	cbnz	r0, 800ec04 <WS28xxDmxParams::callbackFunction(char const*)+0x1f0>
 800ebe6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ebea:	6863      	ldr	r3, [r4, #4]
 800ebec:	1e91      	subs	r1, r2, #2
 800ebee:	2906      	cmp	r1, #6
 800ebf0:	bf8d      	iteet	hi
 800ebf2:	2201      	movhi	r2, #1
 800ebf4:	74e2      	strbls	r2, [r4, #19]
 800ebf6:	f043 0340 	orrls.w	r3, r3, #64	; 0x40
 800ebfa:	74e2      	strbhi	r2, [r4, #19]
 800ebfc:	bf88      	it	hi
 800ebfe:	f023 0340 	bichi.w	r3, r3, #64	; 0x40
 800ec02:	e728      	b.n	800ea56 <WS28xxDmxParams::callbackFunction(char const*)+0x42>
 800ec04:	4628      	mov	r0, r5
 800ec06:	4916      	ldr	r1, [pc, #88]	; (800ec60 <WS28xxDmxParams::callbackFunction(char const*)+0x24c>)
 800ec08:	f10d 0201 	add.w	r2, sp, #1
 800ec0c:	f006 fa62 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ec10:	2800      	cmp	r0, #0
 800ec12:	f47f af56 	bne.w	800eac2 <WS28xxDmxParams::callbackFunction(char const*)+0xae>
 800ec16:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ec1a:	6863      	ldr	r3, [r4, #4]
 800ec1c:	1e51      	subs	r1, r2, #1
 800ec1e:	2904      	cmp	r1, #4
 800ec20:	bf99      	ittee	ls
 800ec22:	f884 202a 	strbls.w	r2, [r4, #42]	; 0x2a
 800ec26:	f443 1380 	orrls.w	r3, r3, #1048576	; 0x100000
 800ec2a:	f884 002a 	strbhi.w	r0, [r4, #42]	; 0x2a
 800ec2e:	f423 1380 	bichi.w	r3, r3, #1048576	; 0x100000
 800ec32:	e710      	b.n	800ea56 <WS28xxDmxParams::callbackFunction(char const*)+0x42>
 800ec34:	0801a10f 	stmdaeq	r1, {r0, r1, r2, r3, r8, sp, pc}
 800ec38:	0801a118 	stmdaeq	r1, {r3, r4, r8, sp, pc}
 800ec3c:	0801a0ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, sp, pc}
 800ec40:	0801a122 	stmdaeq	r1, {r1, r5, r8, sp, pc}
 800ec44:	0801a12a 	stmdaeq	r1, {r1, r3, r5, r8, sp, pc}
 800ec48:	0801a0dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, sp, pc}
 800ec4c:	0801a0ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, sp, pc}
 800ec50:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800ec54:	0801a0ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, sp, pc}
 800ec58:	0801a1da 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, sp, pc}
 800ec5c:	0801a0c3 	stmdaeq	r1, {r0, r1, r6, r7, sp, pc}
 800ec60:	0801a18d 	stmdaeq	r1, {r0, r2, r3, r7, r8, sp, pc}

0800ec64 <WS28xxDmxParams::staticCallbackFunction(void*, char const*)>:
 800ec64:	f7ff bed6 	b.w	800ea14 <WS28xxDmxParams::callbackFunction(char const*)>

0800ec68 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)>:
 800ec68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec6c:	4604      	mov	r4, r0
 800ec6e:	4615      	mov	r5, r2
 800ec70:	461e      	mov	r6, r3
 800ec72:	b086      	sub	sp, #24
 800ec74:	3004      	adds	r0, #4
 800ec76:	2900      	cmp	r1, #0
 800ec78:	f000 808f 	beq.w	800ed9a <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x132>
 800ec7c:	2227      	movs	r2, #39	; 0x27
 800ec7e:	f006 ff62 	bl	8015b46 <memmove>
 800ec82:	4633      	mov	r3, r6
 800ec84:	462a      	mov	r2, r5
 800ec86:	497b      	ldr	r1, [pc, #492]	; (800ee74 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 800ec88:	a803      	add	r0, sp, #12
 800ec8a:	f005 ffed 	bl	8014c68 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800ec8e:	7a20      	ldrb	r0, [r4, #8]
 800ec90:	f000 fcde 	bl	800f650 <PixelType::GetType(pixel::Type)>
 800ec94:	6863      	ldr	r3, [r4, #4]
 800ec96:	4602      	mov	r2, r0
 800ec98:	4977      	ldr	r1, [pc, #476]	; (800ee78 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x210>)
 800ec9a:	f003 0301 	and.w	r3, r3, #1
 800ec9e:	a803      	add	r0, sp, #12
 800eca0:	f7ff fdee 	bl	800e880 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800eca4:	6863      	ldr	r3, [r4, #4]
 800eca6:	f8b4 2009 	ldrh.w	r2, [r4, #9]
 800ecaa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ecae:	4973      	ldr	r1, [pc, #460]	; (800ee7c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x214>)
 800ecb0:	a803      	add	r0, sp, #12
 800ecb2:	f7ff fdbd 	bl	800e830 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800ecb6:	4972      	ldr	r1, [pc, #456]	; (800ee80 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x218>)
 800ecb8:	a803      	add	r0, sp, #12
 800ecba:	f006 f85b 	bl	8014d74 <PropertiesBuilder::AddComment(char const*)>
 800ecbe:	6863      	ldr	r3, [r4, #4]
 800ecc0:	059e      	lsls	r6, r3, #22
 800ecc2:	d403      	bmi.n	800eccc <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x64>
 800ecc4:	7a20      	ldrb	r0, [r4, #8]
 800ecc6:	f000 f9a3 	bl	800f010 <PixelConfiguration::GetRgbMapping(pixel::Type)>
 800ecca:	75e0      	strb	r0, [r4, #23]
 800eccc:	7de0      	ldrb	r0, [r4, #23]
 800ecce:	f000 fd17 	bl	800f700 <PixelType::GetMap(pixel::Map)>
 800ecd2:	6863      	ldr	r3, [r4, #4]
 800ecd4:	4602      	mov	r2, r0
 800ecd6:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800ecda:	496a      	ldr	r1, [pc, #424]	; (800ee84 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x21c>)
 800ecdc:	a803      	add	r0, sp, #12
 800ecde:	f7ff fdcf 	bl	800e880 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800ece2:	6863      	ldr	r3, [r4, #4]
 800ece4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ece8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ecec:	d011      	beq.n	800ed12 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800ecee:	f10d 020b 	add.w	r2, sp, #11
 800ecf2:	7a20      	ldrb	r0, [r4, #8]
 800ecf4:	f10d 010a 	add.w	r1, sp, #10
 800ecf8:	f000 f994 	bl	800f024 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800ecfc:	6863      	ldr	r3, [r4, #4]
 800ecfe:	055d      	lsls	r5, r3, #21
 800ed00:	bf5c      	itt	pl
 800ed02:	f89d 200a 	ldrbpl.w	r2, [sp, #10]
 800ed06:	7622      	strbpl	r2, [r4, #24]
 800ed08:	0518      	lsls	r0, r3, #20
 800ed0a:	bf5c      	itt	pl
 800ed0c:	f89d 300b 	ldrbpl.w	r3, [sp, #11]
 800ed10:	7663      	strbpl	r3, [r4, #25]
 800ed12:	495d      	ldr	r1, [pc, #372]	; (800ee88 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x220>)
 800ed14:	a803      	add	r0, sp, #12
 800ed16:	f006 f82d 	bl	8014d74 <PropertiesBuilder::AddComment(char const*)>
 800ed1a:	7e20      	ldrb	r0, [r4, #24]
 800ed1c:	f000 fcfc 	bl	800f718 <PixelType::ConvertTxH(unsigned char)>
 800ed20:	2502      	movs	r5, #2
 800ed22:	6863      	ldr	r3, [r4, #4]
 800ed24:	4602      	mov	r2, r0
 800ed26:	4959      	ldr	r1, [pc, #356]	; (800ee8c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x224>)
 800ed28:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800ed2c:	9500      	str	r5, [sp, #0]
 800ed2e:	a803      	add	r0, sp, #12
 800ed30:	f7ff fdce 	bl	800e8d0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800ed34:	7e60      	ldrb	r0, [r4, #25]
 800ed36:	f000 fcef 	bl	800f718 <PixelType::ConvertTxH(unsigned char)>
 800ed3a:	6863      	ldr	r3, [r4, #4]
 800ed3c:	4602      	mov	r2, r0
 800ed3e:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800ed42:	4953      	ldr	r1, [pc, #332]	; (800ee90 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x228>)
 800ed44:	9500      	str	r5, [sp, #0]
 800ed46:	a803      	add	r0, sp, #12
 800ed48:	f7ff fdc2 	bl	800e8d0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800ed4c:	4951      	ldr	r1, [pc, #324]	; (800ee94 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x22c>)
 800ed4e:	a803      	add	r0, sp, #12
 800ed50:	f006 f810 	bl	8014d74 <PropertiesBuilder::AddComment(char const*)>
 800ed54:	6863      	ldr	r3, [r4, #4]
 800ed56:	f8b4 2015 	ldrh.w	r2, [r4, #21]
 800ed5a:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800ed5e:	494e      	ldr	r1, [pc, #312]	; (800ee98 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x230>)
 800ed60:	a803      	add	r0, sp, #12
 800ed62:	f7ff fd65 	bl	800e830 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800ed66:	494d      	ldr	r1, [pc, #308]	; (800ee9c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x234>)
 800ed68:	a803      	add	r0, sp, #12
 800ed6a:	f006 f803 	bl	8014d74 <PropertiesBuilder::AddComment(char const*)>
 800ed6e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800ed72:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800ed76:	f8d4 300e 	ldr.w	r3, [r4, #14]
 800ed7a:	42aa      	cmp	r2, r5
 800ed7c:	6861      	ldr	r1, [r4, #4]
 800ed7e:	d222      	bcs.n	800edc6 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x15e>
 800ed80:	9803      	ldr	r0, [sp, #12]
 800ed82:	06c9      	lsls	r1, r1, #27
 800ed84:	4410      	add	r0, r2
 800ed86:	eba5 0502 	sub.w	r5, r5, r2
 800ed8a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800ed8e:	d40b      	bmi.n	800eda8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x140>
 800ed90:	b962      	cbnz	r2, 800edac <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x144>
 800ed92:	9300      	str	r3, [sp, #0]
 800ed94:	4a42      	ldr	r2, [pc, #264]	; (800eea0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x238>)
 800ed96:	4b43      	ldr	r3, [pc, #268]	; (800eea4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x23c>)
 800ed98:	e00b      	b.n	800edb2 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x14a>
 800ed9a:	6823      	ldr	r3, [r4, #0]
 800ed9c:	4601      	mov	r1, r0
 800ed9e:	681a      	ldr	r2, [r3, #0]
 800eda0:	4618      	mov	r0, r3
 800eda2:	68d2      	ldr	r2, [r2, #12]
 800eda4:	4790      	blx	r2
 800eda6:	e76c      	b.n	800ec82 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1a>
 800eda8:	2a00      	cmp	r2, #0
 800edaa:	d05f      	beq.n	800ee6c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x204>
 800edac:	9300      	str	r3, [sp, #0]
 800edae:	4a3e      	ldr	r2, [pc, #248]	; (800eea8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x240>)
 800edb0:	4b3c      	ldr	r3, [pc, #240]	; (800eea4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x23c>)
 800edb2:	4629      	mov	r1, r5
 800edb4:	f7fa fcfa 	bl	80097ac <snprintf>
 800edb8:	4285      	cmp	r5, r0
 800edba:	bfa2      	ittt	ge
 800edbc:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800edc0:	18c0      	addge	r0, r0, r3
 800edc2:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800edc6:	4939      	ldr	r1, [pc, #228]	; (800eeac <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x244>)
 800edc8:	a803      	add	r0, sp, #12
 800edca:	f005 ffd3 	bl	8014d74 <PropertiesBuilder::AddComment(char const*)>
 800edce:	6863      	ldr	r3, [r4, #4]
 800edd0:	7ca2      	ldrb	r2, [r4, #18]
 800edd2:	4937      	ldr	r1, [pc, #220]	; (800eeb0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x248>)
 800edd4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800edd8:	a803      	add	r0, sp, #12
 800edda:	f7ff fd01 	bl	800e7e0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800edde:	2500      	movs	r5, #0
 800ede0:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 800ede4:	4e33      	ldr	r6, [pc, #204]	; (800eeb4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x24c>)
 800ede6:	f104 071a 	add.w	r7, r4, #26
 800edea:	6862      	ldr	r2, [r4, #4]
 800edec:	fa08 f305 	lsl.w	r3, r8, r5
 800edf0:	4393      	bics	r3, r2
 800edf2:	bf0c      	ite	eq
 800edf4:	2301      	moveq	r3, #1
 800edf6:	2300      	movne	r3, #0
 800edf8:	4631      	mov	r1, r6
 800edfa:	f837 2b02 	ldrh.w	r2, [r7], #2
 800edfe:	a803      	add	r0, sp, #12
 800ee00:	3501      	adds	r5, #1
 800ee02:	f7ff fd15 	bl	800e830 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800ee06:	2d08      	cmp	r5, #8
 800ee08:	f106 0612 	add.w	r6, r6, #18
 800ee0c:	d1ed      	bne.n	800edea <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x182>
 800ee0e:	6863      	ldr	r3, [r4, #4]
 800ee10:	7ce2      	ldrb	r2, [r4, #19]
 800ee12:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ee16:	4928      	ldr	r1, [pc, #160]	; (800eeb8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x250>)
 800ee18:	a803      	add	r0, sp, #12
 800ee1a:	f7ff fce1 	bl	800e7e0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800ee1e:	4927      	ldr	r1, [pc, #156]	; (800eebc <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x254>)
 800ee20:	a803      	add	r0, sp, #12
 800ee22:	f005 ffa7 	bl	8014d74 <PropertiesBuilder::AddComment(char const*)>
 800ee26:	6863      	ldr	r3, [r4, #4]
 800ee28:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800ee2c:	f3c3 5300 	ubfx	r3, r3, #20, #1
 800ee30:	4923      	ldr	r1, [pc, #140]	; (800eec0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x258>)
 800ee32:	a803      	add	r0, sp, #12
 800ee34:	f7ff fcd4 	bl	800e7e0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800ee38:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800ee3c:	b17b      	cbz	r3, 800ee5e <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f6>
 800ee3e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800ee42:	9b03      	ldr	r3, [sp, #12]
 800ee44:	4413      	add	r3, r2
 800ee46:	227d      	movs	r2, #125	; 0x7d
 800ee48:	f803 2c01 	strb.w	r2, [r3, #-1]
 800ee4c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800ee50:	9903      	ldr	r1, [sp, #12]
 800ee52:	54ca      	strb	r2, [r1, r3]
 800ee54:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800ee58:	3301      	adds	r3, #1
 800ee5a:	f8ad 3012 	strh.w	r3, [sp, #18]
 800ee5e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800ee62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee64:	601a      	str	r2, [r3, #0]
 800ee66:	b006      	add	sp, #24
 800ee68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee6c:	9300      	str	r3, [sp, #0]
 800ee6e:	4a15      	ldr	r2, [pc, #84]	; (800eec4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x25c>)
 800ee70:	4b0c      	ldr	r3, [pc, #48]	; (800eea4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x23c>)
 800ee72:	e79e      	b.n	800edb2 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x14a>
 800ee74:	0801a132 	stmdaeq	r1, {r1, r4, r5, r8, sp, pc}
 800ee78:	0801a10f 	stmdaeq	r1, {r0, r1, r2, r3, r8, sp, pc}
 800ee7c:	0801a118 	stmdaeq	r1, {r3, r4, r8, sp, pc}
 800ee80:	080188f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, fp, pc}
 800ee84:	0801a0ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, sp, pc}
 800ee88:	08018905 	stmdaeq	r1, {r0, r2, r8, fp, pc}
 800ee8c:	0801a122 	stmdaeq	r1, {r1, r5, r8, sp, pc}
 800ee90:	0801a12a 	stmdaeq	r1, {r1, r3, r5, r8, sp, pc}
 800ee94:	0801891b 	stmdaeq	r1, {r0, r1, r3, r4, r8, fp, pc}
 800ee98:	0801a0dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, sp, pc}
 800ee9c:	08018924 	stmdaeq	r1, {r2, r5, r8, fp, pc}
 800eea0:	080180d1 	stmdaeq	r1, {r0, r4, r6, r7, pc}
 800eea4:	0801a0ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, sp, pc}
 800eea8:	080180c8 	stmdaeq	r1, {r3, r6, r7, pc}
 800eeac:	08018936 	stmdaeq	r1, {r1, r2, r4, r5, r8, fp, pc}
 800eeb0:	0801a0ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, sp, pc}
 800eeb4:	0801a1da 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, sp, pc}
 800eeb8:	0801a0c3 	stmdaeq	r1, {r0, r1, r6, r7, sp, pc}
 800eebc:	08018944 	stmdaeq	r1, {r2, r6, r8, fp, pc}
 800eec0:	0801a18d 	stmdaeq	r1, {r0, r2, r3, r7, r8, sp, pc}
 800eec4:	080180d2 	stmdaeq	r1, {r1, r4, r6, r7, pc}

0800eec8 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)>:
 800eec8:	b513      	push	{r0, r1, r4, lr}
 800eeca:	6804      	ldr	r4, [r0, #0]
 800eecc:	b914      	cbnz	r4, 800eed4 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800eece:	601c      	str	r4, [r3, #0]
 800eed0:	b002      	add	sp, #8
 800eed2:	bd10      	pop	{r4, pc}
 800eed4:	9300      	str	r3, [sp, #0]
 800eed6:	4613      	mov	r3, r2
 800eed8:	460a      	mov	r2, r1
 800eeda:	2100      	movs	r1, #0
 800eedc:	f7ff fec4 	bl	800ec68 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)>
 800eee0:	e7f6      	b.n	800eed0 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800eee2 <WS28xxDmxParams::Set(PixelDmxConfiguration*)>:
 800eee2:	6843      	ldr	r3, [r0, #4]
 800eee4:	07da      	lsls	r2, r3, #31
 800eee6:	bf44      	itt	mi
 800eee8:	7a02      	ldrbmi	r2, [r0, #8]
 800eeea:	600a      	strmi	r2, [r1, #0]
 800eeec:	079a      	lsls	r2, r3, #30
 800eeee:	d505      	bpl.n	800eefc <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 800eef0:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 800eef4:	2a00      	cmp	r2, #0
 800eef6:	bf08      	it	eq
 800eef8:	22aa      	moveq	r2, #170	; 0xaa
 800eefa:	604a      	str	r2, [r1, #4]
 800eefc:	059a      	lsls	r2, r3, #22
 800eefe:	bf44      	itt	mi
 800ef00:	7dc2      	ldrbmi	r2, [r0, #23]
 800ef02:	608a      	strmi	r2, [r1, #8]
 800ef04:	055a      	lsls	r2, r3, #21
 800ef06:	bf44      	itt	mi
 800ef08:	7e02      	ldrbmi	r2, [r0, #24]
 800ef0a:	740a      	strbmi	r2, [r1, #16]
 800ef0c:	051a      	lsls	r2, r3, #20
 800ef0e:	bf44      	itt	mi
 800ef10:	7e42      	ldrbmi	r2, [r0, #25]
 800ef12:	744a      	strbmi	r2, [r1, #17]
 800ef14:	06da      	lsls	r2, r3, #27
 800ef16:	bf44      	itt	mi
 800ef18:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 800ef1c:	60ca      	strmi	r2, [r1, #12]
 800ef1e:	069a      	lsls	r2, r3, #26
 800ef20:	bf44      	itt	mi
 800ef22:	7c82      	ldrbmi	r2, [r0, #18]
 800ef24:	748a      	strbmi	r2, [r1, #18]
 800ef26:	075a      	lsls	r2, r3, #29
 800ef28:	d50f      	bpl.n	800ef4a <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x68>
 800ef2a:	7ac2      	ldrb	r2, [r0, #11]
 800ef2c:	b510      	push	{r4, lr}
 800ef2e:	7b04      	ldrb	r4, [r0, #12]
 800ef30:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800ef34:	838a      	strh	r2, [r1, #28]
 800ef36:	05da      	lsls	r2, r3, #23
 800ef38:	bf44      	itt	mi
 800ef3a:	f8b0 2015 	ldrhmi.w	r2, [r0, #21]
 800ef3e:	618a      	strmi	r2, [r1, #24]
 800ef40:	065c      	lsls	r4, r3, #25
 800ef42:	bf44      	itt	mi
 800ef44:	7cc3      	ldrbmi	r3, [r0, #19]
 800ef46:	614b      	strmi	r3, [r1, #20]
 800ef48:	bd10      	pop	{r4, pc}
 800ef4a:	05da      	lsls	r2, r3, #23
 800ef4c:	bf44      	itt	mi
 800ef4e:	f8b0 2015 	ldrhmi.w	r2, [r0, #21]
 800ef52:	618a      	strmi	r2, [r1, #24]
 800ef54:	065b      	lsls	r3, r3, #25
 800ef56:	bf44      	itt	mi
 800ef58:	7cc3      	ldrbmi	r3, [r0, #19]
 800ef5a:	614b      	strmi	r3, [r1, #20]
 800ef5c:	4770      	bx	lr

0800ef5e <WS28xxDmxParams::Dump()>:
 800ef5e:	4770      	bx	lr

0800ef60 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>:
 800ef60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef64:	460e      	mov	r6, r1
 800ef66:	4611      	mov	r1, r2
 800ef68:	4604      	mov	r4, r0
 800ef6a:	4690      	mov	r8, r2
 800ef6c:	461d      	mov	r5, r3
 800ef6e:	9f06      	ldr	r7, [sp, #24]
 800ef70:	f000 f866 	bl	800f040 <PixelConfiguration::Validate(unsigned int&)>
 800ef74:	2e01      	cmp	r6, #1
 800ef76:	d009      	beq.n	800ef8c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 800ef78:	7ce2      	ldrb	r2, [r4, #19]
 800ef7a:	b93a      	cbnz	r2, 800ef8c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 800ef7c:	2e04      	cmp	r6, #4
 800ef7e:	d13d      	bne.n	800effc <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x9c>
 800ef80:	2303      	movs	r3, #3
 800ef82:	6023      	str	r3, [r4, #0]
 800ef84:	4641      	mov	r1, r8
 800ef86:	4620      	mov	r0, r4
 800ef88:	f000 f85a 	bl	800f040 <PixelConfiguration::Validate(unsigned int&)>
 800ef8c:	6823      	ldr	r3, [r4, #0]
 800ef8e:	2b07      	cmp	r3, #7
 800ef90:	bf15      	itete	ne
 800ef92:	f44f 72aa 	movne.w	r2, #340	; 0x154
 800ef96:	f44f 7280 	moveq.w	r2, #256	; 0x100
 800ef9a:	21aa      	movne	r1, #170	; 0xaa
 800ef9c:	2180      	moveq	r1, #128	; 0x80
 800ef9e:	bf14      	ite	ne
 800efa0:	f44f 73ff 	movne.w	r3, #510	; 0x1fe
 800efa4:	f44f 73c0 	moveq.w	r3, #384	; 0x180
 800efa8:	e9c5 1200 	strd	r1, r2, [r5]
 800efac:	69a2      	ldr	r2, [r4, #24]
 800efae:	60ab      	str	r3, [r5, #8]
 800efb0:	6863      	ldr	r3, [r4, #4]
 800efb2:	b10a      	cbz	r2, 800efb8 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x58>
 800efb4:	4293      	cmp	r3, r2
 800efb6:	d200      	bcs.n	800efba <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x5a>
 800efb8:	61a3      	str	r3, [r4, #24]
 800efba:	69a2      	ldr	r2, [r4, #24]
 800efbc:	fbb3 f3f2 	udiv	r3, r3, r2
 800efc0:	603b      	str	r3, [r7, #0]
 800efc2:	6963      	ldr	r3, [r4, #20]
 800efc4:	42b3      	cmp	r3, r6
 800efc6:	bf94      	ite	ls
 800efc8:	6163      	strls	r3, [r4, #20]
 800efca:	6166      	strhi	r6, [r4, #20]
 800efcc:	682b      	ldr	r3, [r5, #0]
 800efce:	683a      	ldr	r2, [r7, #0]
 800efd0:	3301      	adds	r3, #1
 800efd2:	fbb2 f2f3 	udiv	r2, r2, r3
 800efd6:	9b07      	ldr	r3, [sp, #28]
 800efd8:	1c51      	adds	r1, r2, #1
 800efda:	2e01      	cmp	r6, #1
 800efdc:	6019      	str	r1, [r3, #0]
 800efde:	bf01      	itttt	eq
 800efe0:	682b      	ldreq	r3, [r5, #0]
 800efe2:	683a      	ldreq	r2, [r7, #0]
 800efe4:	3301      	addeq	r3, #1
 800efe6:	fbb2 f2f3 	udiveq	r2, r2, r3
 800efea:	bf1e      	ittt	ne
 800efec:	6963      	ldrne	r3, [r4, #20]
 800efee:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 800eff2:	eb02 0283 	addne.w	r2, r2, r3, lsl #2
 800eff6:	60ea      	str	r2, [r5, #12]
 800eff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800effc:	6823      	ldr	r3, [r4, #0]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d0c0      	beq.n	800ef84 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>
 800f002:	3b0b      	subs	r3, #11
 800f004:	2b01      	cmp	r3, #1
 800f006:	bf88      	it	hi
 800f008:	6022      	strhi	r2, [r4, #0]
 800f00a:	e7bb      	b.n	800ef84 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>

0800f00c <PixelDmxConfiguration::Dump()>:
 800f00c:	4770      	bx	lr
	...

0800f010 <PixelConfiguration::GetRgbMapping(pixel::Type)>:
 800f010:	3801      	subs	r0, #1
 800f012:	2809      	cmp	r0, #9
 800f014:	bf9a      	itte	ls
 800f016:	4b02      	ldrls	r3, [pc, #8]	; (800f020 <PixelConfiguration::GetRgbMapping(pixel::Type)+0x10>)
 800f018:	5618      	ldrsbls	r0, [r3, r0]
 800f01a:	2002      	movhi	r0, #2
 800f01c:	4770      	bx	lr
 800f01e:	bf00      	nop
 800f020:	08018951 	stmdaeq	r1, {r0, r4, r6, r8, fp, pc}

0800f024 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 800f024:	23c0      	movs	r3, #192	; 0xc0
 800f026:	2803      	cmp	r0, #3
 800f028:	700b      	strb	r3, [r1, #0]
 800f02a:	d006      	beq.n	800f03a <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 800f02c:	3808      	subs	r0, #8
 800f02e:	2803      	cmp	r0, #3
 800f030:	bf34      	ite	cc
 800f032:	23fc      	movcc	r3, #252	; 0xfc
 800f034:	23f0      	movcs	r3, #240	; 0xf0
 800f036:	7013      	strb	r3, [r2, #0]
 800f038:	4770      	bx	lr
 800f03a:	23f8      	movs	r3, #248	; 0xf8
 800f03c:	e7fb      	b.n	800f036 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>
	...

0800f040 <PixelConfiguration::Validate(unsigned int&)>:
 800f040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f042:	e9d0 5300 	ldrd	r5, r3, [r0]
 800f046:	2d07      	cmp	r5, #7
 800f048:	4604      	mov	r4, r0
 800f04a:	6882      	ldr	r2, [r0, #8]
 800f04c:	d129      	bne.n	800f0a2 <PixelConfiguration::Validate(unsigned int&)+0x62>
 800f04e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f052:	bf28      	it	cs
 800f054:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800f058:	6043      	str	r3, [r0, #4]
 800f05a:	2304      	movs	r3, #4
 800f05c:	600b      	str	r3, [r1, #0]
 800f05e:	2301      	movs	r3, #1
 800f060:	2a06      	cmp	r2, #6
 800f062:	74e3      	strb	r3, [r4, #19]
 800f064:	d103      	bne.n	800f06e <PixelConfiguration::Validate(unsigned int&)+0x2e>
 800f066:	4628      	mov	r0, r5
 800f068:	f7ff ffd2 	bl	800f010 <PixelConfiguration::GetRgbMapping(pixel::Type)>
 800f06c:	60a0      	str	r0, [r4, #8]
 800f06e:	7c63      	ldrb	r3, [r4, #17]
 800f070:	7c22      	ldrb	r2, [r4, #16]
 800f072:	4628      	mov	r0, r5
 800f074:	429a      	cmp	r2, r3
 800f076:	bf28      	it	cs
 800f078:	2300      	movcs	r3, #0
 800f07a:	f10d 0207 	add.w	r2, sp, #7
 800f07e:	bf28      	it	cs
 800f080:	8223      	strhcs	r3, [r4, #16]
 800f082:	f10d 0106 	add.w	r1, sp, #6
 800f086:	f7ff ffcd 	bl	800f024 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800f08a:	7c23      	ldrb	r3, [r4, #16]
 800f08c:	b913      	cbnz	r3, 800f094 <PixelConfiguration::Validate(unsigned int&)+0x54>
 800f08e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f092:	7423      	strb	r3, [r4, #16]
 800f094:	7c63      	ldrb	r3, [r4, #17]
 800f096:	b913      	cbnz	r3, 800f09e <PixelConfiguration::Validate(unsigned int&)+0x5e>
 800f098:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f09c:	7463      	strb	r3, [r4, #17]
 800f09e:	4b1a      	ldr	r3, [pc, #104]	; (800f108 <PixelConfiguration::Validate(unsigned int&)+0xc8>)
 800f0a0:	e020      	b.n	800f0e4 <PixelConfiguration::Validate(unsigned int&)+0xa4>
 800f0a2:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800f0a6:	bf28      	it	cs
 800f0a8:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 800f0ac:	6043      	str	r3, [r0, #4]
 800f0ae:	2303      	movs	r3, #3
 800f0b0:	600b      	str	r3, [r1, #0]
 800f0b2:	f1a5 030b 	sub.w	r3, r5, #11
 800f0b6:	2b01      	cmp	r3, #1
 800f0b8:	d806      	bhi.n	800f0c8 <PixelConfiguration::Validate(unsigned int&)+0x88>
 800f0ba:	7c83      	ldrb	r3, [r0, #18]
 800f0bc:	2b1f      	cmp	r3, #31
 800f0be:	d81d      	bhi.n	800f0fc <PixelConfiguration::Validate(unsigned int&)+0xbc>
 800f0c0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800f0c4:	74a3      	strb	r3, [r4, #18]
 800f0c6:	e000      	b.n	800f0ca <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800f0c8:	b9d5      	cbnz	r5, 800f100 <PixelConfiguration::Validate(unsigned int&)+0xc0>
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800f0d0:	2a06      	cmp	r2, #6
 800f0d2:	bf08      	it	eq
 800f0d4:	60a3      	streq	r3, [r4, #8]
 800f0d6:	2d0d      	cmp	r5, #13
 800f0d8:	74e3      	strb	r3, [r4, #19]
 800f0da:	8221      	strh	r1, [r4, #16]
 800f0dc:	68e3      	ldr	r3, [r4, #12]
 800f0de:	d109      	bne.n	800f0f4 <PixelConfiguration::Validate(unsigned int&)+0xb4>
 800f0e0:	b913      	cbnz	r3, 800f0e8 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 800f0e2:	4b0a      	ldr	r3, [pc, #40]	; (800f10c <PixelConfiguration::Validate(unsigned int&)+0xcc>)
 800f0e4:	60e3      	str	r3, [r4, #12]
 800f0e6:	e003      	b.n	800f0f0 <PixelConfiguration::Validate(unsigned int&)+0xb0>
 800f0e8:	4a09      	ldr	r2, [pc, #36]	; (800f110 <PixelConfiguration::Validate(unsigned int&)+0xd0>)
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	d900      	bls.n	800f0f0 <PixelConfiguration::Validate(unsigned int&)+0xb0>
 800f0ee:	60e2      	str	r2, [r4, #12]
 800f0f0:	b003      	add	sp, #12
 800f0f2:	bd30      	pop	{r4, r5, pc}
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d0f4      	beq.n	800f0e2 <PixelConfiguration::Validate(unsigned int&)+0xa2>
 800f0f8:	4a06      	ldr	r2, [pc, #24]	; (800f114 <PixelConfiguration::Validate(unsigned int&)+0xd4>)
 800f0fa:	e7f6      	b.n	800f0ea <PixelConfiguration::Validate(unsigned int&)+0xaa>
 800f0fc:	23ff      	movs	r3, #255	; 0xff
 800f0fe:	e7e1      	b.n	800f0c4 <PixelConfiguration::Validate(unsigned int&)+0x84>
 800f100:	2d0d      	cmp	r5, #13
 800f102:	d1ac      	bne.n	800f05e <PixelConfiguration::Validate(unsigned int&)+0x1e>
 800f104:	e7e1      	b.n	800f0ca <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800f106:	bf00      	nop
 800f108:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 800f10c:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800f110:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 800f114:	017d7840 	cmneq	sp, r0, asr #16

0800f118 <PixelConfiguration::Dump()>:
 800f118:	4770      	bx	lr
	...

0800f11c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>:
 800f11c:	b507      	push	{r0, r1, r2, lr}
 800f11e:	b2d3      	uxtb	r3, r2
 800f120:	9301      	str	r3, [sp, #4]
 800f122:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800f126:	9300      	str	r3, [sp, #0]
 800f128:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800f12c:	460a      	mov	r2, r1
 800f12e:	4601      	mov	r1, r0
 800f130:	4803      	ldr	r0, [pc, #12]	; (800f140 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x24>)
 800f132:	6800      	ldr	r0, [r0, #0]
 800f134:	f000 fdd2 	bl	800fcdc <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 800f138:	b003      	add	sp, #12
 800f13a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f13e:	bf00      	nop
 800f140:	2000c5c8 	andcs	ip, r0, r8, asr #11

0800f144 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 800f144:	b570      	push	{r4, r5, r6, lr}
 800f146:	4605      	mov	r5, r0
 800f148:	2400      	movs	r4, #0
 800f14a:	4e06      	ldr	r6, [pc, #24]	; (800f164 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x20>)
 800f14c:	6833      	ldr	r3, [r6, #0]
 800f14e:	429c      	cmp	r4, r3
 800f150:	d300      	bcc.n	800f154 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x10>
 800f152:	bd70      	pop	{r4, r5, r6, pc}
 800f154:	4621      	mov	r1, r4
 800f156:	2200      	movs	r2, #0
 800f158:	4628      	mov	r0, r5
 800f15a:	f7ff ffdf 	bl	800f11c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800f15e:	3401      	adds	r4, #1
 800f160:	e7f4      	b.n	800f14c <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x8>
 800f162:	bf00      	nop
 800f164:	2000c5c4 	andcs	ip, r0, r4, asr #11

0800f168 <PixelPatterns::PixelPatterns(unsigned int)>:
 800f168:	2908      	cmp	r1, #8
 800f16a:	bf28      	it	cs
 800f16c:	2108      	movcs	r1, #8
 800f16e:	4b0b      	ldr	r3, [pc, #44]	; (800f19c <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 800f170:	4a0b      	ldr	r2, [pc, #44]	; (800f1a0 <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	b510      	push	{r4, lr}
 800f176:	6013      	str	r3, [r2, #0]
 800f178:	4a0a      	ldr	r2, [pc, #40]	; (800f1a4 <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 800f17a:	6011      	str	r1, [r2, #0]
 800f17c:	685a      	ldr	r2, [r3, #4]
 800f17e:	4b0a      	ldr	r3, [pc, #40]	; (800f1a8 <PixelPatterns::PixelPatterns(unsigned int)+0x40>)
 800f180:	2100      	movs	r1, #0
 800f182:	601a      	str	r2, [r3, #0]
 800f184:	2208      	movs	r2, #8
 800f186:	4b09      	ldr	r3, [pc, #36]	; (800f1ac <PixelPatterns::PixelPatterns(unsigned int)+0x44>)
 800f188:	681c      	ldr	r4, [r3, #0]
 800f18a:	4b09      	ldr	r3, [pc, #36]	; (800f1b0 <PixelPatterns::PixelPatterns(unsigned int)+0x48>)
 800f18c:	3a01      	subs	r2, #1
 800f18e:	61d9      	str	r1, [r3, #28]
 800f190:	601c      	str	r4, [r3, #0]
 800f192:	6199      	str	r1, [r3, #24]
 800f194:	f103 0320 	add.w	r3, r3, #32
 800f198:	d1f8      	bne.n	800f18c <PixelPatterns::PixelPatterns(unsigned int)+0x24>
 800f19a:	bd10      	pop	{r4, pc}
 800f19c:	20013dd8 	ldrdcs	r3, [r1], -r8
 800f1a0:	2000c5c8 	andcs	ip, r0, r8, asr #11
 800f1a4:	2000c5bc 			; <UNDEFINED> instruction: 0x2000c5bc
 800f1a8:	2000c5c4 	andcs	ip, r0, r4, asr #11
 800f1ac:	2001ce64 	andcs	ip, r1, r4, ror #28
 800f1b0:	2000c4bc 			; <UNDEFINED> instruction: 0x2000c4bc

0800f1b4 <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 800f1b4:	2805      	cmp	r0, #5
 800f1b6:	bfdd      	ittte	le
 800f1b8:	220e      	movle	r2, #14
 800f1ba:	4b02      	ldrle	r3, [pc, #8]	; (800f1c4 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 800f1bc:	fb02 3000 	mlale	r0, r2, r0, r3
 800f1c0:	4801      	ldrgt	r0, [pc, #4]	; (800f1c8 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 800f1c2:	4770      	bx	lr
 800f1c4:	08018963 	stmdaeq	r1, {r0, r1, r5, r6, r8, fp, pc}
 800f1c8:	0801895b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, fp, pc}

0800f1cc <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 800f1cc:	b5e0      	push	{r5, r6, r7, lr}
 800f1ce:	4608      	mov	r0, r1
 800f1d0:	460d      	mov	r5, r1
 800f1d2:	4617      	mov	r7, r2
 800f1d4:	461e      	mov	r6, r3
 800f1d6:	f7ff ffb5 	bl	800f144 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800f1da:	2301      	movs	r3, #1
 800f1dc:	4905      	ldr	r1, [pc, #20]	; (800f1f4 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x28>)
 800f1de:	22ff      	movs	r2, #255	; 0xff
 800f1e0:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800f1e4:	61cb      	str	r3, [r1, #28]
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	604f      	str	r7, [r1, #4]
 800f1ea:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800f1ee:	618e      	str	r6, [r1, #24]
 800f1f0:	bde0      	pop	{r5, r6, r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	2000c4bc 			; <UNDEFINED> instruction: 0x2000c4bc

0800f1f8 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800f1f8:	b5e0      	push	{r5, r6, r7, lr}
 800f1fa:	4608      	mov	r0, r1
 800f1fc:	460d      	mov	r5, r1
 800f1fe:	461e      	mov	r6, r3
 800f200:	4617      	mov	r7, r2
 800f202:	f7ff ff9f 	bl	800f144 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800f206:	2302      	movs	r3, #2
 800f208:	4907      	ldr	r1, [pc, #28]	; (800f228 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800f20a:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800f20e:	61cb      	str	r3, [r1, #28]
 800f210:	9b04      	ldr	r3, [sp, #16]
 800f212:	e9c1 7602 	strd	r7, r6, [r1, #8]
 800f216:	604b      	str	r3, [r1, #4]
 800f218:	4b04      	ldr	r3, [pc, #16]	; (800f22c <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	610b      	str	r3, [r1, #16]
 800f21e:	2300      	movs	r3, #0
 800f220:	614b      	str	r3, [r1, #20]
 800f222:	9b05      	ldr	r3, [sp, #20]
 800f224:	618b      	str	r3, [r1, #24]
 800f226:	bde0      	pop	{r5, r6, r7, pc}
 800f228:	2000c4bc 			; <UNDEFINED> instruction: 0x2000c4bc
 800f22c:	2000c5c4 	andcs	ip, r0, r4, asr #11

0800f230 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800f230:	b5e0      	push	{r5, r6, r7, lr}
 800f232:	4608      	mov	r0, r1
 800f234:	460d      	mov	r5, r1
 800f236:	461f      	mov	r7, r3
 800f238:	4616      	mov	r6, r2
 800f23a:	f7ff ff83 	bl	800f144 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800f23e:	2303      	movs	r3, #3
 800f240:	4906      	ldr	r1, [pc, #24]	; (800f25c <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800f242:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800f246:	61cb      	str	r3, [r1, #28]
 800f248:	4b05      	ldr	r3, [pc, #20]	; (800f260 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800f24a:	604f      	str	r7, [r1, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	608e      	str	r6, [r1, #8]
 800f250:	610b      	str	r3, [r1, #16]
 800f252:	2300      	movs	r3, #0
 800f254:	614b      	str	r3, [r1, #20]
 800f256:	9b04      	ldr	r3, [sp, #16]
 800f258:	618b      	str	r3, [r1, #24]
 800f25a:	bde0      	pop	{r5, r6, r7, pc}
 800f25c:	2000c4bc 			; <UNDEFINED> instruction: 0x2000c4bc
 800f260:	2000c5c4 	andcs	ip, r0, r4, asr #11

0800f264 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 800f264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f266:	4608      	mov	r0, r1
 800f268:	460d      	mov	r5, r1
 800f26a:	461f      	mov	r7, r3
 800f26c:	4616      	mov	r6, r2
 800f26e:	f7ff ff69 	bl	800f144 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800f272:	2304      	movs	r3, #4
 800f274:	4c12      	ldr	r4, [pc, #72]	; (800f2c0 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 800f276:	4913      	ldr	r1, [pc, #76]	; (800f2c4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 800f278:	6820      	ldr	r0, [r4, #0]
 800f27a:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800f27e:	61cb      	str	r3, [r1, #28]
 800f280:	1e43      	subs	r3, r0, #1
 800f282:	005b      	lsls	r3, r3, #1
 800f284:	b29b      	uxth	r3, r3
 800f286:	610b      	str	r3, [r1, #16]
 800f288:	2300      	movs	r3, #0
 800f28a:	4d0f      	ldr	r5, [pc, #60]	; (800f2c8 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x64>)
 800f28c:	614b      	str	r3, [r1, #20]
 800f28e:	682b      	ldr	r3, [r5, #0]
 800f290:	604f      	str	r7, [r1, #4]
 800f292:	608e      	str	r6, [r1, #8]
 800f294:	b97b      	cbnz	r3, 800f2b6 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x52>
 800f296:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f29a:	4298      	cmp	r0, r3
 800f29c:	bf2c      	ite	cs
 800f29e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 800f2a2:	0080      	lslcc	r0, r0, #2
 800f2a4:	f006 fb92 	bl	80159cc <operator new[](unsigned int)>
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	6823      	ldr	r3, [r4, #0]
 800f2ac:	6028      	str	r0, [r5, #0]
 800f2ae:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f2b2:	4298      	cmp	r0, r3
 800f2b4:	d100      	bne.n	800f2b8 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x54>
 800f2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2b8:	f840 2b04 	str.w	r2, [r0], #4
 800f2bc:	e7f9      	b.n	800f2b2 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4e>
 800f2be:	bf00      	nop
 800f2c0:	2000c5c4 	andcs	ip, r0, r4, asr #11
 800f2c4:	2000c4bc 			; <UNDEFINED> instruction: 0x2000c4bc
 800f2c8:	2000c5c0 	andcs	ip, r0, r0, asr #11

0800f2cc <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800f2cc:	b5e0      	push	{r5, r6, r7, lr}
 800f2ce:	4608      	mov	r0, r1
 800f2d0:	460d      	mov	r5, r1
 800f2d2:	461e      	mov	r6, r3
 800f2d4:	4617      	mov	r7, r2
 800f2d6:	f7ff ff35 	bl	800f144 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800f2da:	2305      	movs	r3, #5
 800f2dc:	4907      	ldr	r1, [pc, #28]	; (800f2fc <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800f2de:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 800f2e2:	61cb      	str	r3, [r1, #28]
 800f2e4:	9b05      	ldr	r3, [sp, #20]
 800f2e6:	e9c1 7602 	strd	r7, r6, [r1, #8]
 800f2ea:	604b      	str	r3, [r1, #4]
 800f2ec:	9b04      	ldr	r3, [sp, #16]
 800f2ee:	610b      	str	r3, [r1, #16]
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	614b      	str	r3, [r1, #20]
 800f2f4:	9b06      	ldr	r3, [sp, #24]
 800f2f6:	618b      	str	r3, [r1, #24]
 800f2f8:	bde0      	pop	{r5, r6, r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	2000c4bc 			; <UNDEFINED> instruction: 0x2000c4bc

0800f300 <PixelPatterns::Wheel(unsigned char)>:
 800f300:	43cb      	mvns	r3, r1
 800f302:	b2db      	uxtb	r3, r3
 800f304:	2b54      	cmp	r3, #84	; 0x54
 800f306:	d809      	bhi.n	800f31c <PixelPatterns::Wheel(unsigned char)+0x1c>
 800f308:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	1e5a      	subs	r2, r3, #1
 800f310:	4258      	negs	r0, r3
 800f312:	b2d2      	uxtb	r2, r2
 800f314:	b2c0      	uxtb	r0, r0
 800f316:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800f31a:	4770      	bx	lr
 800f31c:	2ba9      	cmp	r3, #169	; 0xa9
 800f31e:	d809      	bhi.n	800f334 <PixelPatterns::Wheel(unsigned char)+0x34>
 800f320:	f1c1 01aa 	rsb	r1, r1, #170	; 0xaa
 800f324:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f328:	b2c9      	uxtb	r1, r1
 800f32a:	43c8      	mvns	r0, r1
 800f32c:	b2c0      	uxtb	r0, r0
 800f32e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800f332:	4770      	bx	lr
 800f334:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
 800f338:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f33c:	b2c9      	uxtb	r1, r1
 800f33e:	0208      	lsls	r0, r1, #8
 800f340:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 800f344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800f348:	4770      	bx	lr
	...

0800f34c <PixelPatterns::Increment(unsigned int)>:
 800f34c:	4a0d      	ldr	r2, [pc, #52]	; (800f384 <PixelPatterns::Increment(unsigned int)+0x38>)
 800f34e:	b510      	push	{r4, lr}
 800f350:	014c      	lsls	r4, r1, #5
 800f352:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 800f356:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 800f35a:	b930      	cbnz	r0, 800f36a <PixelPatterns::Increment(unsigned int)+0x1e>
 800f35c:	690a      	ldr	r2, [r1, #16]
 800f35e:	3301      	adds	r3, #1
 800f360:	4293      	cmp	r3, r2
 800f362:	bf18      	it	ne
 800f364:	4618      	movne	r0, r3
 800f366:	6148      	str	r0, [r1, #20]
 800f368:	bd10      	pop	{r4, pc}
 800f36a:	b92b      	cbnz	r3, 800f378 <PixelPatterns::Increment(unsigned int)+0x2c>
 800f36c:	4422      	add	r2, r4
 800f36e:	6913      	ldr	r3, [r2, #16]
 800f370:	3b01      	subs	r3, #1
 800f372:	b29b      	uxth	r3, r3
 800f374:	6153      	str	r3, [r2, #20]
 800f376:	e7f7      	b.n	800f368 <PixelPatterns::Increment(unsigned int)+0x1c>
 800f378:	3b01      	subs	r3, #1
 800f37a:	614b      	str	r3, [r1, #20]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d1f3      	bne.n	800f368 <PixelPatterns::Increment(unsigned int)+0x1c>
 800f380:	e7f4      	b.n	800f36c <PixelPatterns::Increment(unsigned int)+0x20>
 800f382:	bf00      	nop
 800f384:	2000c4bc 			; <UNDEFINED> instruction: 0x2000c4bc

0800f388 <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 800f388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f38c:	4605      	mov	r5, r0
 800f38e:	460c      	mov	r4, r1
 800f390:	2700      	movs	r7, #0
 800f392:	4b11      	ldr	r3, [pc, #68]	; (800f3d8 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>)
 800f394:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800f3dc <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x54>
 800f398:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f39c:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800f3a0:	f8d8 3000 	ldr.w	r3, [r8]
 800f3a4:	b2be      	uxth	r6, r7
 800f3a6:	42b3      	cmp	r3, r6
 800f3a8:	f107 0701 	add.w	r7, r7, #1
 800f3ac:	d805      	bhi.n	800f3ba <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x32>
 800f3ae:	4621      	mov	r1, r4
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3b6:	f7ff bfc9 	b.w	800f34c <PixelPatterns::Increment(unsigned int)>
 800f3ba:	0231      	lsls	r1, r6, #8
 800f3bc:	fbb1 f1f3 	udiv	r1, r1, r3
 800f3c0:	4449      	add	r1, r9
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	b2c9      	uxtb	r1, r1
 800f3c6:	f7ff ff9b 	bl	800f300 <PixelPatterns::Wheel(unsigned char)>
 800f3ca:	4631      	mov	r1, r6
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	f7ff fea4 	bl	800f11c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800f3d4:	e7e4      	b.n	800f3a0 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x18>
 800f3d6:	bf00      	nop
 800f3d8:	2000c4bc 			; <UNDEFINED> instruction: 0x2000c4bc
 800f3dc:	2000c5c4 	andcs	ip, r0, r4, asr #11

0800f3e0 <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 800f3e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3e4:	4605      	mov	r5, r0
 800f3e6:	460c      	mov	r4, r1
 800f3e8:	f04f 0b00 	mov.w	fp, #0
 800f3ec:	4b11      	ldr	r3, [pc, #68]	; (800f434 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x54>)
 800f3ee:	4e12      	ldr	r6, [pc, #72]	; (800f438 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 800f3f0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f3f4:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800f3f8:	f8df a040 	ldr.w	sl, [pc, #64]	; 800f43c <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 800f3fc:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 800f400:	6833      	ldr	r3, [r6, #0]
 800f402:	fa1f f18b 	uxth.w	r1, fp
 800f406:	428b      	cmp	r3, r1
 800f408:	d805      	bhi.n	800f416 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x36>
 800f40a:	4621      	mov	r1, r4
 800f40c:	4628      	mov	r0, r5
 800f40e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f412:	f7ff bf9b 	b.w	800f34c <PixelPatterns::Increment(unsigned int)>
 800f416:	eb09 0301 	add.w	r3, r9, r1
 800f41a:	fb0a f303 	mul.w	r3, sl, r3
 800f41e:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 800f422:	bf94      	ite	ls
 800f424:	463a      	movls	r2, r7
 800f426:	4642      	movhi	r2, r8
 800f428:	4620      	mov	r0, r4
 800f42a:	f7ff fe77 	bl	800f11c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800f42e:	f10b 0b01 	add.w	fp, fp, #1
 800f432:	e7e5      	b.n	800f400 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x20>
 800f434:	2000c4bc 			; <UNDEFINED> instruction: 0x2000c4bc
 800f438:	2000c5c4 	andcs	ip, r0, r4, asr #11
 800f43c:	aaaaaaab 	bge	6ab9ef0 <__stack_size+0x6ab76f0>

0800f440 <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 800f440:	b538      	push	{r3, r4, r5, lr}
 800f442:	460c      	mov	r4, r1
 800f444:	4605      	mov	r5, r0
 800f446:	4b07      	ldr	r3, [pc, #28]	; (800f464 <PixelPatterns::ColourWipeUpdate(unsigned int)+0x24>)
 800f448:	4620      	mov	r0, r4
 800f44a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f44e:	6959      	ldr	r1, [r3, #20]
 800f450:	689a      	ldr	r2, [r3, #8]
 800f452:	f7ff fe63 	bl	800f11c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800f456:	4621      	mov	r1, r4
 800f458:	4628      	mov	r0, r5
 800f45a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f45e:	f7ff bf75 	b.w	800f34c <PixelPatterns::Increment(unsigned int)>
 800f462:	bf00      	nop
 800f464:	2000c4bc 			; <UNDEFINED> instruction: 0x2000c4bc

0800f468 <PixelPatterns::ScannerUpdate(unsigned int)>:
 800f468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f46c:	468b      	mov	fp, r1
 800f46e:	f04f 0900 	mov.w	r9, #0
 800f472:	4b27      	ldr	r3, [pc, #156]	; (800f510 <PixelPatterns::ScannerUpdate(unsigned int)+0xa8>)
 800f474:	b085      	sub	sp, #20
 800f476:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f47a:	e9d3 7604 	ldrd	r7, r6, [r3, #16]
 800f47e:	689d      	ldr	r5, [r3, #8]
 800f480:	f8df a090 	ldr.w	sl, [pc, #144]	; 800f514 <PixelPatterns::ScannerUpdate(unsigned int)+0xac>
 800f484:	00b3      	lsls	r3, r6, #2
 800f486:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800f518 <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 800f48a:	9002      	str	r0, [sp, #8]
 800f48c:	9301      	str	r3, [sp, #4]
 800f48e:	1bbf      	subs	r7, r7, r6
 800f490:	f8da 2000 	ldr.w	r2, [sl]
 800f494:	fa1f f489 	uxth.w	r4, r9
 800f498:	42a2      	cmp	r2, r4
 800f49a:	d806      	bhi.n	800f4aa <PixelPatterns::ScannerUpdate(unsigned int)+0x42>
 800f49c:	4659      	mov	r1, fp
 800f49e:	9802      	ldr	r0, [sp, #8]
 800f4a0:	b005      	add	sp, #20
 800f4a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4a6:	f7ff bf51 	b.w	800f34c <PixelPatterns::Increment(unsigned int)>
 800f4aa:	42a6      	cmp	r6, r4
 800f4ac:	d10b      	bne.n	800f4c6 <PixelPatterns::ScannerUpdate(unsigned int)+0x5e>
 800f4ae:	462a      	mov	r2, r5
 800f4b0:	4631      	mov	r1, r6
 800f4b2:	4658      	mov	r0, fp
 800f4b4:	f7ff fe32 	bl	800f11c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800f4b8:	f8d8 2000 	ldr.w	r2, [r8]
 800f4bc:	9b01      	ldr	r3, [sp, #4]
 800f4be:	50d5      	str	r5, [r2, r3]
 800f4c0:	f109 0901 	add.w	r9, r9, #1
 800f4c4:	e7e4      	b.n	800f490 <PixelPatterns::ScannerUpdate(unsigned int)+0x28>
 800f4c6:	42a7      	cmp	r7, r4
 800f4c8:	d109      	bne.n	800f4de <PixelPatterns::ScannerUpdate(unsigned int)+0x76>
 800f4ca:	462a      	mov	r2, r5
 800f4cc:	4639      	mov	r1, r7
 800f4ce:	4658      	mov	r0, fp
 800f4d0:	f7ff fe24 	bl	800f11c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800f4d4:	f8d8 2000 	ldr.w	r2, [r8]
 800f4d8:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 800f4dc:	e7f0      	b.n	800f4c0 <PixelPatterns::ScannerUpdate(unsigned int)+0x58>
 800f4de:	f8d8 2000 	ldr.w	r2, [r8]
 800f4e2:	4658      	mov	r0, fp
 800f4e4:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 800f4e8:	f3c1 2246 	ubfx	r2, r1, #9, #7
 800f4ec:	f3c1 4c46 	ubfx	ip, r1, #17, #7
 800f4f0:	0212      	lsls	r2, r2, #8
 800f4f2:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800f4f6:	f3c1 0146 	ubfx	r1, r1, #1, #7
 800f4fa:	430a      	orrs	r2, r1
 800f4fc:	4621      	mov	r1, r4
 800f4fe:	9203      	str	r2, [sp, #12]
 800f500:	f7ff fe0c 	bl	800f11c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800f504:	f8d8 1000 	ldr.w	r1, [r8]
 800f508:	9a03      	ldr	r2, [sp, #12]
 800f50a:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 800f50e:	e7d7      	b.n	800f4c0 <PixelPatterns::ScannerUpdate(unsigned int)+0x58>
 800f510:	2000c4bc 			; <UNDEFINED> instruction: 0x2000c4bc
 800f514:	2000c5c4 	andcs	ip, r0, r4, asr #11
 800f518:	2000c5c0 	andcs	ip, r0, r0, asr #11

0800f51c <PixelPatterns::FadeUpdate(unsigned int)>:
 800f51c:	4a20      	ldr	r2, [pc, #128]	; (800f5a0 <PixelPatterns::FadeUpdate(unsigned int)+0x84>)
 800f51e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f522:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800f526:	e9d2 c302 	ldrd	ip, r3, [r2, #8]
 800f52a:	460e      	mov	r6, r1
 800f52c:	e9d2 1704 	ldrd	r1, r7, [r2, #16]
 800f530:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f534:	437a      	muls	r2, r7
 800f536:	f3cc 2407 	ubfx	r4, ip, #8, #8
 800f53a:	4605      	mov	r5, r0
 800f53c:	1bc8      	subs	r0, r1, r7
 800f53e:	fb00 2204 	mla	r2, r0, r4, r2
 800f542:	f3c3 4407 	ubfx	r4, r3, #16, #8
 800f546:	437c      	muls	r4, r7
 800f548:	b2db      	uxtb	r3, r3
 800f54a:	437b      	muls	r3, r7
 800f54c:	f3cc 4e07 	ubfx	lr, ip, #16, #8
 800f550:	fb00 440e 	mla	r4, r0, lr, r4
 800f554:	fa5f fc8c 	uxtb.w	ip, ip
 800f558:	fb00 330c 	mla	r3, r0, ip, r3
 800f55c:	fbb2 f2f1 	udiv	r2, r2, r1
 800f560:	fbb4 f4f1 	udiv	r4, r4, r1
 800f564:	fbb3 f3f1 	udiv	r3, r3, r1
 800f568:	2700      	movs	r7, #0
 800f56a:	0212      	lsls	r2, r2, #8
 800f56c:	0424      	lsls	r4, r4, #16
 800f56e:	b292      	uxth	r2, r2
 800f570:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800f574:	4314      	orrs	r4, r2
 800f576:	b2db      	uxtb	r3, r3
 800f578:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800f5a4 <PixelPatterns::FadeUpdate(unsigned int)+0x88>
 800f57c:	431c      	orrs	r4, r3
 800f57e:	f8d8 3000 	ldr.w	r3, [r8]
 800f582:	429f      	cmp	r7, r3
 800f584:	d305      	bcc.n	800f592 <PixelPatterns::FadeUpdate(unsigned int)+0x76>
 800f586:	4631      	mov	r1, r6
 800f588:	4628      	mov	r0, r5
 800f58a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f58e:	f7ff bedd 	b.w	800f34c <PixelPatterns::Increment(unsigned int)>
 800f592:	4639      	mov	r1, r7
 800f594:	4622      	mov	r2, r4
 800f596:	4630      	mov	r0, r6
 800f598:	f7ff fdc0 	bl	800f11c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 800f59c:	3701      	adds	r7, #1
 800f59e:	e7ee      	b.n	800f57e <PixelPatterns::FadeUpdate(unsigned int)+0x62>
 800f5a0:	2000c4bc 			; <UNDEFINED> instruction: 0x2000c4bc
 800f5a4:	2000c5c4 	andcs	ip, r0, r4, asr #11

0800f5a8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 800f5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5aa:	4b12      	ldr	r3, [pc, #72]	; (800f5f4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 800f5ac:	014e      	lsls	r6, r1, #5
 800f5ae:	599c      	ldr	r4, [r3, r6]
 800f5b0:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 800f5b4:	686f      	ldr	r7, [r5, #4]
 800f5b6:	1b14      	subs	r4, r2, r4
 800f5b8:	42bc      	cmp	r4, r7
 800f5ba:	d319      	bcc.n	800f5f0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800f5bc:	519a      	str	r2, [r3, r6]
 800f5be:	69eb      	ldr	r3, [r5, #28]
 800f5c0:	3b01      	subs	r3, #1
 800f5c2:	2b04      	cmp	r3, #4
 800f5c4:	d814      	bhi.n	800f5f0 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800f5c6:	e8df f003 	tbb	[pc, r3]
 800f5ca:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 800f5ce:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 800f5d2:	feda 2001 	cdp2	0, 13, cr2, cr10, cr1, {0}
 800f5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5d8:	f7ff ff02 	bl	800f3e0 <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 800f5dc:	e7fa      	b.n	800f5d4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800f5de:	f7ff ff2f 	bl	800f440 <PixelPatterns::ColourWipeUpdate(unsigned int)>
 800f5e2:	e7f7      	b.n	800f5d4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800f5e4:	f7ff ff40 	bl	800f468 <PixelPatterns::ScannerUpdate(unsigned int)>
 800f5e8:	e7f4      	b.n	800f5d4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800f5ea:	f7ff ff97 	bl	800f51c <PixelPatterns::FadeUpdate(unsigned int)>
 800f5ee:	e7f1      	b.n	800f5d4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800f5f0:	2000      	movs	r0, #0
 800f5f2:	e7f0      	b.n	800f5d6 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 800f5f4:	2000c4bc 			; <UNDEFINED> instruction: 0x2000c4bc

0800f5f8 <PixelPatterns::Run()>:
 800f5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5fc:	4f11      	ldr	r7, [pc, #68]	; (800f644 <PixelPatterns::Run()+0x4c>)
 800f5fe:	4606      	mov	r6, r0
 800f600:	6838      	ldr	r0, [r7, #0]
 800f602:	f000 fb25 	bl	800fc50 <WS28xxMulti::IsUpdating()>
 800f606:	4604      	mov	r4, r0
 800f608:	b9c8      	cbnz	r0, 800f63e <PixelPatterns::Run()+0x46>
 800f60a:	4605      	mov	r5, r0
 800f60c:	4b0e      	ldr	r3, [pc, #56]	; (800f648 <PixelPatterns::Run()+0x50>)
 800f60e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 800f64c <PixelPatterns::Run()+0x54>
 800f612:	f8d3 9000 	ldr.w	r9, [r3]
 800f616:	f8d8 3000 	ldr.w	r3, [r8]
 800f61a:	b2e9      	uxtb	r1, r5
 800f61c:	428b      	cmp	r3, r1
 800f61e:	f105 0501 	add.w	r5, r5, #1
 800f622:	d805      	bhi.n	800f630 <PixelPatterns::Run()+0x38>
 800f624:	b15c      	cbz	r4, 800f63e <PixelPatterns::Run()+0x46>
 800f626:	6838      	ldr	r0, [r7, #0]
 800f628:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f62c:	f000 ba7a 	b.w	800fb24 <WS28xxMulti::Update()>
 800f630:	464a      	mov	r2, r9
 800f632:	4630      	mov	r0, r6
 800f634:	f7ff ffb8 	bl	800f5a8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 800f638:	4320      	orrs	r0, r4
 800f63a:	b2c4      	uxtb	r4, r0
 800f63c:	e7eb      	b.n	800f616 <PixelPatterns::Run()+0x1e>
 800f63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f642:	bf00      	nop
 800f644:	2000c5c8 	andcs	ip, r0, r8, asr #11
 800f648:	2001ce64 	andcs	ip, r1, r4, ror #28
 800f64c:	2000c5bc 			; <UNDEFINED> instruction: 0x2000c5bc

0800f650 <PixelType::GetType(pixel::Type)>:
 800f650:	280d      	cmp	r0, #13
 800f652:	bfda      	itte	le
 800f654:	4b02      	ldrle	r3, [pc, #8]	; (800f660 <PixelType::GetType(pixel::Type)+0x10>)
 800f656:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 800f65a:	4802      	ldrgt	r0, [pc, #8]	; (800f664 <PixelType::GetType(pixel::Type)+0x14>)
 800f65c:	4770      	bx	lr
 800f65e:	bf00      	nop
 800f660:	080189d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, fp, pc}
 800f664:	0801895b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, fp, pc}

0800f668 <PixelType::GetType(char const*)>:
 800f668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f66a:	4604      	mov	r4, r0
 800f66c:	2000      	movs	r0, #0
 800f66e:	490f      	ldr	r1, [pc, #60]	; (800f6ac <PixelType::GetType(char const*)+0x44>)
 800f670:	1e67      	subs	r7, r4, #1
 800f672:	1e4e      	subs	r6, r1, #1
 800f674:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800f678:	4615      	mov	r5, r2
 800f67a:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800f67e:	2b19      	cmp	r3, #25
 800f680:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800f684:	bf98      	it	ls
 800f686:	f102 0520 	addls.w	r5, r2, #32
 800f68a:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 800f68e:	f1bc 0f19 	cmp.w	ip, #25
 800f692:	bf98      	it	ls
 800f694:	3320      	addls	r3, #32
 800f696:	42ab      	cmp	r3, r5
 800f698:	d005      	beq.n	800f6a6 <PixelType::GetType(char const*)+0x3e>
 800f69a:	3001      	adds	r0, #1
 800f69c:	280e      	cmp	r0, #14
 800f69e:	f101 0108 	add.w	r1, r1, #8
 800f6a2:	d1e5      	bne.n	800f670 <PixelType::GetType(char const*)+0x8>
 800f6a4:	e001      	b.n	800f6aa <PixelType::GetType(char const*)+0x42>
 800f6a6:	2a00      	cmp	r2, #0
 800f6a8:	d1e4      	bne.n	800f674 <PixelType::GetType(char const*)+0xc>
 800f6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6ac:	080189d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, fp, pc}

0800f6b0 <PixelType::GetMap(char const*)>:
 800f6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6b2:	4605      	mov	r5, r0
 800f6b4:	2000      	movs	r0, #0
 800f6b6:	4b11      	ldr	r3, [pc, #68]	; (800f6fc <PixelType::GetMap(char const*)+0x4c>)
 800f6b8:	1e5c      	subs	r4, r3, #1
 800f6ba:	1e6e      	subs	r6, r5, #1
 800f6bc:	f103 0c02 	add.w	ip, r3, #2
 800f6c0:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800f6c4:	4617      	mov	r7, r2
 800f6c6:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800f6ca:	2919      	cmp	r1, #25
 800f6cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f6d0:	bf98      	it	ls
 800f6d2:	f102 0720 	addls.w	r7, r2, #32
 800f6d6:	f1a1 0e41 	sub.w	lr, r1, #65	; 0x41
 800f6da:	f1be 0f19 	cmp.w	lr, #25
 800f6de:	bf98      	it	ls
 800f6e0:	3120      	addls	r1, #32
 800f6e2:	42b9      	cmp	r1, r7
 800f6e4:	d005      	beq.n	800f6f2 <PixelType::GetMap(char const*)+0x42>
 800f6e6:	3001      	adds	r0, #1
 800f6e8:	2806      	cmp	r0, #6
 800f6ea:	f103 0304 	add.w	r3, r3, #4
 800f6ee:	d1e3      	bne.n	800f6b8 <PixelType::GetMap(char const*)+0x8>
 800f6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6f2:	2a00      	cmp	r2, #0
 800f6f4:	d0fc      	beq.n	800f6f0 <PixelType::GetMap(char const*)+0x40>
 800f6f6:	4564      	cmp	r4, ip
 800f6f8:	d1e2      	bne.n	800f6c0 <PixelType::GetMap(char const*)+0x10>
 800f6fa:	e7f9      	b.n	800f6f0 <PixelType::GetMap(char const*)+0x40>
 800f6fc:	080189c1 	stmdaeq	r1, {r0, r6, r7, r8, fp, pc}

0800f700 <PixelType::GetMap(pixel::Map)>:
 800f700:	2805      	cmp	r0, #5
 800f702:	bfda      	itte	le
 800f704:	4b02      	ldrle	r3, [pc, #8]	; (800f710 <PixelType::GetMap(pixel::Map)+0x10>)
 800f706:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 800f70a:	4802      	ldrgt	r0, [pc, #8]	; (800f714 <PixelType::GetMap(pixel::Map)+0x14>)
 800f70c:	4770      	bx	lr
 800f70e:	bf00      	nop
 800f710:	080189c1 	stmdaeq	r1, {r0, r6, r7, r8, fp, pc}
 800f714:	080189b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, fp, pc}

0800f718 <PixelType::ConvertTxH(unsigned char)>:
 800f718:	28f0      	cmp	r0, #240	; 0xf0
 800f71a:	d010      	beq.n	800f73e <PixelType::ConvertTxH(unsigned char)+0x26>
 800f71c:	d807      	bhi.n	800f72e <PixelType::ConvertTxH(unsigned char)+0x16>
 800f71e:	28c0      	cmp	r0, #192	; 0xc0
 800f720:	d00f      	beq.n	800f742 <PixelType::ConvertTxH(unsigned char)+0x2a>
 800f722:	28e0      	cmp	r0, #224	; 0xe0
 800f724:	d00f      	beq.n	800f746 <PixelType::ConvertTxH(unsigned char)+0x2e>
 800f726:	2880      	cmp	r0, #128	; 0x80
 800f728:	d113      	bne.n	800f752 <PixelType::ConvertTxH(unsigned char)+0x3a>
 800f72a:	480b      	ldr	r0, [pc, #44]	; (800f758 <PixelType::ConvertTxH(unsigned char)+0x40>)
 800f72c:	4770      	bx	lr
 800f72e:	28fc      	cmp	r0, #252	; 0xfc
 800f730:	d00b      	beq.n	800f74a <PixelType::ConvertTxH(unsigned char)+0x32>
 800f732:	28fe      	cmp	r0, #254	; 0xfe
 800f734:	d00b      	beq.n	800f74e <PixelType::ConvertTxH(unsigned char)+0x36>
 800f736:	28f8      	cmp	r0, #248	; 0xf8
 800f738:	d10b      	bne.n	800f752 <PixelType::ConvertTxH(unsigned char)+0x3a>
 800f73a:	4808      	ldr	r0, [pc, #32]	; (800f75c <PixelType::ConvertTxH(unsigned char)+0x44>)
 800f73c:	4770      	bx	lr
 800f73e:	4808      	ldr	r0, [pc, #32]	; (800f760 <PixelType::ConvertTxH(unsigned char)+0x48>)
 800f740:	4770      	bx	lr
 800f742:	4808      	ldr	r0, [pc, #32]	; (800f764 <PixelType::ConvertTxH(unsigned char)+0x4c>)
 800f744:	4770      	bx	lr
 800f746:	4808      	ldr	r0, [pc, #32]	; (800f768 <PixelType::ConvertTxH(unsigned char)+0x50>)
 800f748:	4770      	bx	lr
 800f74a:	4808      	ldr	r0, [pc, #32]	; (800f76c <PixelType::ConvertTxH(unsigned char)+0x54>)
 800f74c:	4770      	bx	lr
 800f74e:	4808      	ldr	r0, [pc, #32]	; (800f770 <PixelType::ConvertTxH(unsigned char)+0x58>)
 800f750:	4770      	bx	lr
 800f752:	2000      	movs	r0, #0
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop
 800f758:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
 800f75c:	3f480000 	svccc	0x00480000
 800f760:	3f200000 	svccc	0x00200000
 800f764:	3ea00000 	cdpcc	0, 10, cr0, cr0, cr0, {0}
 800f768:	3ef00000 	cdpcc	0, 15, cr0, cr0, cr0, {0}
 800f76c:	3f700000 	svccc	0x00700000
 800f770:	3f8c0000 	svccc	0x008c0000

0800f774 <PixelType::ConvertTxH(float)>:
 800f774:	b510      	push	{r4, lr}
 800f776:	491d      	ldr	r1, [pc, #116]	; (800f7ec <PixelType::ConvertTxH(float)+0x78>)
 800f778:	4604      	mov	r4, r0
 800f77a:	f7f8 fb8b 	bl	8007e94 <__aeabi_fcmplt>
 800f77e:	bb30      	cbnz	r0, 800f7ce <PixelType::ConvertTxH(float)+0x5a>
 800f780:	4620      	mov	r0, r4
 800f782:	491b      	ldr	r1, [pc, #108]	; (800f7f0 <PixelType::ConvertTxH(float)+0x7c>)
 800f784:	f7f8 fb86 	bl	8007e94 <__aeabi_fcmplt>
 800f788:	bb18      	cbnz	r0, 800f7d2 <PixelType::ConvertTxH(float)+0x5e>
 800f78a:	4620      	mov	r0, r4
 800f78c:	4919      	ldr	r1, [pc, #100]	; (800f7f4 <PixelType::ConvertTxH(float)+0x80>)
 800f78e:	f7f8 fb81 	bl	8007e94 <__aeabi_fcmplt>
 800f792:	bb00      	cbnz	r0, 800f7d6 <PixelType::ConvertTxH(float)+0x62>
 800f794:	4620      	mov	r0, r4
 800f796:	4918      	ldr	r1, [pc, #96]	; (800f7f8 <PixelType::ConvertTxH(float)+0x84>)
 800f798:	f7f8 fb7c 	bl	8007e94 <__aeabi_fcmplt>
 800f79c:	b9e8      	cbnz	r0, 800f7da <PixelType::ConvertTxH(float)+0x66>
 800f79e:	4620      	mov	r0, r4
 800f7a0:	4916      	ldr	r1, [pc, #88]	; (800f7fc <PixelType::ConvertTxH(float)+0x88>)
 800f7a2:	f7f8 fb77 	bl	8007e94 <__aeabi_fcmplt>
 800f7a6:	b9d0      	cbnz	r0, 800f7de <PixelType::ConvertTxH(float)+0x6a>
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	4915      	ldr	r1, [pc, #84]	; (800f800 <PixelType::ConvertTxH(float)+0x8c>)
 800f7ac:	f7f8 fb72 	bl	8007e94 <__aeabi_fcmplt>
 800f7b0:	b9b8      	cbnz	r0, 800f7e2 <PixelType::ConvertTxH(float)+0x6e>
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	4913      	ldr	r1, [pc, #76]	; (800f804 <PixelType::ConvertTxH(float)+0x90>)
 800f7b6:	f7f8 fb6d 	bl	8007e94 <__aeabi_fcmplt>
 800f7ba:	b9a0      	cbnz	r0, 800f7e6 <PixelType::ConvertTxH(float)+0x72>
 800f7bc:	4620      	mov	r0, r4
 800f7be:	4912      	ldr	r1, [pc, #72]	; (800f808 <PixelType::ConvertTxH(float)+0x94>)
 800f7c0:	f7f8 fb68 	bl	8007e94 <__aeabi_fcmplt>
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	bf14      	ite	ne
 800f7c8:	20fe      	movne	r0, #254	; 0xfe
 800f7ca:	2000      	moveq	r0, #0
 800f7cc:	bd10      	pop	{r4, pc}
 800f7ce:	2000      	movs	r0, #0
 800f7d0:	e7fc      	b.n	800f7cc <PixelType::ConvertTxH(float)+0x58>
 800f7d2:	2080      	movs	r0, #128	; 0x80
 800f7d4:	e7fa      	b.n	800f7cc <PixelType::ConvertTxH(float)+0x58>
 800f7d6:	20c0      	movs	r0, #192	; 0xc0
 800f7d8:	e7f8      	b.n	800f7cc <PixelType::ConvertTxH(float)+0x58>
 800f7da:	20e0      	movs	r0, #224	; 0xe0
 800f7dc:	e7f6      	b.n	800f7cc <PixelType::ConvertTxH(float)+0x58>
 800f7de:	20f0      	movs	r0, #240	; 0xf0
 800f7e0:	e7f4      	b.n	800f7cc <PixelType::ConvertTxH(float)+0x58>
 800f7e2:	20f8      	movs	r0, #248	; 0xf8
 800f7e4:	e7f2      	b.n	800f7cc <PixelType::ConvertTxH(float)+0x58>
 800f7e6:	20fc      	movs	r0, #252	; 0xfc
 800f7e8:	e7f0      	b.n	800f7cc <PixelType::ConvertTxH(float)+0x58>
 800f7ea:	bf00      	nop
 800f7ec:	3da00000 	stccc	0, cr0, [r0]
 800f7f0:	3e700000 	cdpcc	0, 7, cr0, cr0, cr0, {0}
 800f7f4:	3ec80000 	cdpcc	0, 12, cr0, cr8, cr0, {0}
 800f7f8:	3f0c0000 	svccc	0x000c0000
 800f7fc:	3f340000 	svccc	0x00340000
 800f800:	3f5c0000 	svccc	0x005c0000
 800f804:	3f820000 	svccc	0x00820000
 800f808:	3f960000 	svccc	0x00960000

0800f80c <TIMER4_IRQHandler>:
 800f80c:	f3bf 8f5f 	dmb	sy
 800f810:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f814:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
 800f818:	0791      	lsls	r1, r2, #30
 800f81a:	d51c      	bpl.n	800f856 <TIMER4_IRQHandler+0x4a>
 800f81c:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 800f820:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800f824:	f021 0101 	bic.w	r1, r1, #1
 800f828:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
 800f82c:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
 800f830:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800f834:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
 800f838:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
 800f83c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800f840:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
 800f844:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
 800f848:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800f84c:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
 800f850:	2100      	movs	r1, #0
 800f852:	4b05      	ldr	r3, [pc, #20]	; (800f868 <TIMER4_IRQHandler+0x5c>)
 800f854:	7019      	strb	r1, [r3, #0]
 800f856:	43d2      	mvns	r2, r2
 800f858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f85c:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 800f860:	f3bf 8f5f 	dmb	sy
 800f864:	4770      	bx	lr
 800f866:	bf00      	nop
 800f868:	2000c5d4 	ldrdcs	ip, [r0], -r4

0800f86c <WS28xxMulti::WS28xxMulti(PixelConfiguration&)>:
 800f86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f870:	23aa      	movs	r3, #170	; 0xaa
 800f872:	f04f 0903 	mov.w	r9, #3
 800f876:	2400      	movs	r4, #0
 800f878:	e9c0 9300 	strd	r9, r3, [r0]
 800f87c:	2306      	movs	r3, #6
 800f87e:	460e      	mov	r6, r1
 800f880:	4605      	mov	r5, r0
 800f882:	e9c0 3402 	strd	r3, r4, [r0, #8]
 800f886:	4b8c      	ldr	r3, [pc, #560]	; (800fab8 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x24c>)
 800f888:	b08d      	sub	sp, #52	; 0x34
 800f88a:	4669      	mov	r1, sp
 800f88c:	6018      	str	r0, [r3, #0]
 800f88e:	4630      	mov	r0, r6
 800f890:	f7ff fbd6 	bl	800f040 <PixelConfiguration::Validate(unsigned int&)>
 800f894:	4630      	mov	r0, r6
 800f896:	f7ff fc3f 	bl	800f118 <PixelConfiguration::Dump()>
 800f89a:	6833      	ldr	r3, [r6, #0]
 800f89c:	68b2      	ldr	r2, [r6, #8]
 800f89e:	602b      	str	r3, [r5, #0]
 800f8a0:	60aa      	str	r2, [r5, #8]
 800f8a2:	6873      	ldr	r3, [r6, #4]
 800f8a4:	9a00      	ldr	r2, [sp, #0]
 800f8a6:	606b      	str	r3, [r5, #4]
 800f8a8:	4353      	muls	r3, r2
 800f8aa:	fa03 f309 	lsl.w	r3, r3, r9
 800f8ae:	60eb      	str	r3, [r5, #12]
 800f8b0:	7c30      	ldrb	r0, [r6, #16]
 800f8b2:	f008 fa25 	bl	8017d00 <__popcountsi2>
 800f8b6:	4680      	mov	r8, r0
 800f8b8:	7c70      	ldrb	r0, [r6, #17]
 800f8ba:	f008 fa21 	bl	8017d00 <__popcountsi2>
 800f8be:	4e7f      	ldr	r6, [pc, #508]	; (800fabc <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x250>)
 800f8c0:	4607      	mov	r7, r0
 800f8c2:	f240 6004 	movw	r0, #1540	; 0x604
 800f8c6:	f006 fd0f 	bl	80162e8 <rcu_periph_clock_enable>
 800f8ca:	464a      	mov	r2, r9
 800f8cc:	2110      	movs	r1, #16
 800f8ce:	4630      	mov	r0, r6
 800f8d0:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 800f8d4:	f006 fc70 	bl	80161b8 <gpio_init>
 800f8d8:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 800f8dc:	f240 600d 	movw	r0, #1549	; 0x60d
 800f8e0:	6173      	str	r3, [r6, #20]
 800f8e2:	f506 5610 	add.w	r6, r6, #9216	; 0x2400
 800f8e6:	f006 fcff 	bl	80162e8 <rcu_periph_clock_enable>
 800f8ea:	4630      	mov	r0, r6
 800f8ec:	f006 fe70 	bl	80165d0 <timer_deinit>
 800f8f0:	2395      	movs	r3, #149	; 0x95
 800f8f2:	f04f 0996 	mov.w	r9, #150	; 0x96
 800f8f6:	4630      	mov	r0, r6
 800f8f8:	a901      	add	r1, sp, #4
 800f8fa:	9303      	str	r3, [sp, #12]
 800f8fc:	9401      	str	r4, [sp, #4]
 800f8fe:	f8ad 4008 	strh.w	r4, [sp, #8]
 800f902:	f8ad 4010 	strh.w	r4, [sp, #16]
 800f906:	f006 ff09 	bl	801671c <timer_init>
 800f90a:	4621      	mov	r1, r4
 800f90c:	4630      	mov	r0, r6
 800f90e:	f006 ffb2 	bl	8016876 <timer_master_slave_mode_config>
 800f912:	4630      	mov	r0, r6
 800f914:	2130      	movs	r1, #48	; 0x30
 800f916:	f006 ff9e 	bl	8016856 <timer_master_output_trigger_source_select>
 800f91a:	4621      	mov	r1, r4
 800f91c:	4630      	mov	r0, r6
 800f91e:	2210      	movs	r2, #16
 800f920:	f006 ff5d 	bl	80167de <timer_channel_output_mode_config>
 800f924:	4630      	mov	r0, r6
 800f926:	2210      	movs	r2, #16
 800f928:	2101      	movs	r1, #1
 800f92a:	f006 ff58 	bl	80167de <timer_channel_output_mode_config>
 800f92e:	4630      	mov	r0, r6
 800f930:	2210      	movs	r2, #16
 800f932:	2102      	movs	r1, #2
 800f934:	f006 ff53 	bl	80167de <timer_channel_output_mode_config>
 800f938:	4621      	mov	r1, r4
 800f93a:	4630      	mov	r0, r6
 800f93c:	2201      	movs	r2, #1
 800f93e:	f006 ff74 	bl	801682a <timer_channel_output_pulse_value_config>
 800f942:	fb09 f208 	mul.w	r2, r9, r8
 800f946:	4630      	mov	r0, r6
 800f948:	2101      	movs	r1, #1
 800f94a:	f3c2 02cf 	ubfx	r2, r2, #3, #16
 800f94e:	f006 ff6c 	bl	801682a <timer_channel_output_pulse_value_config>
 800f952:	fb09 f207 	mul.w	r2, r9, r7
 800f956:	2102      	movs	r1, #2
 800f958:	f3c2 02cf 	ubfx	r2, r2, #3, #16
 800f95c:	4630      	mov	r0, r6
 800f95e:	f006 ff64 	bl	801682a <timer_channel_output_pulse_value_config>
 800f962:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800f966:	f240 7003 	movw	r0, #1795	; 0x703
 800f96a:	f006 fcbd 	bl	80162e8 <rcu_periph_clock_enable>
 800f96e:	4630      	mov	r0, r6
 800f970:	f006 fe2e 	bl	80165d0 <timer_deinit>
 800f974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f978:	4630      	mov	r0, r6
 800f97a:	a901      	add	r1, sp, #4
 800f97c:	9303      	str	r3, [sp, #12]
 800f97e:	9401      	str	r4, [sp, #4]
 800f980:	f8ad 4008 	strh.w	r4, [sp, #8]
 800f984:	f8ad 4010 	strh.w	r4, [sp, #16]
 800f988:	f006 fec8 	bl	801671c <timer_init>
 800f98c:	4621      	mov	r1, r4
 800f98e:	4630      	mov	r0, r6
 800f990:	f006 ff71 	bl	8016876 <timer_master_slave_mode_config>
 800f994:	4630      	mov	r0, r6
 800f996:	2107      	movs	r1, #7
 800f998:	f006 ff65 	bl	8016866 <timer_slave_mode_select>
 800f99c:	4630      	mov	r0, r6
 800f99e:	2130      	movs	r1, #48	; 0x30
 800f9a0:	f006 ff51 	bl	8016846 <timer_input_trigger_source_select>
 800f9a4:	4621      	mov	r1, r4
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	2210      	movs	r2, #16
 800f9aa:	f006 ff18 	bl	80167de <timer_channel_output_mode_config>
 800f9ae:	68ea      	ldr	r2, [r5, #12]
 800f9b0:	4621      	mov	r1, r4
 800f9b2:	3201      	adds	r2, #1
 800f9b4:	4630      	mov	r0, r6
 800f9b6:	b292      	uxth	r2, r2
 800f9b8:	f006 ff37 	bl	801682a <timer_channel_output_pulse_value_config>
 800f9bc:	2102      	movs	r1, #2
 800f9be:	4630      	mov	r0, r6
 800f9c0:	f006 ff66 	bl	8016890 <timer_interrupt_enable>
 800f9c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800f9c8:	f44f 7780 	mov.w	r7, #256	; 0x100
 800f9cc:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 800f9d0:	f44f 5900 	mov.w	r9, #8192	; 0x2000
 800f9d4:	f04f 0801 	mov.w	r8, #1
 800f9d8:	4b39      	ldr	r3, [pc, #228]	; (800fac0 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x254>)
 800f9da:	f506 36fc 	add.w	r6, r6, #129024	; 0x1f800
 800f9de:	f883 4332 	strb.w	r4, [r3, #818]	; 0x332
 800f9e2:	f240 5001 	movw	r0, #1281	; 0x501
 800f9e6:	605a      	str	r2, [r3, #4]
 800f9e8:	f006 fc7e 	bl	80162e8 <rcu_periph_clock_enable>
 800f9ec:	2102      	movs	r1, #2
 800f9ee:	4630      	mov	r0, r6
 800f9f0:	f006 faee 	bl	8015fd0 <dma_deinit>
 800f9f4:	a805      	add	r0, sp, #20
 800f9f6:	f006 fb09 	bl	801600c <dma_struct_para_init>
 800f9fa:	4a32      	ldr	r2, [pc, #200]	; (800fac4 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x258>)
 800f9fc:	4b32      	ldr	r3, [pc, #200]	; (800fac8 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x25c>)
 800f9fe:	4630      	mov	r0, r6
 800fa00:	e9cd 2705 	strd	r2, r7, [sp, #20]
 800fa04:	2102      	movs	r1, #2
 800fa06:	aa05      	add	r2, sp, #20
 800fa08:	9307      	str	r3, [sp, #28]
 800fa0a:	f8cd a020 	str.w	sl, [sp, #32]
 800fa0e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800fa12:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 800fa16:	f88d 802e 	strb.w	r8, [sp, #46]	; 0x2e
 800fa1a:	f006 fb01 	bl	8016020 <dma_init>
 800fa1e:	4630      	mov	r0, r6
 800fa20:	2102      	movs	r1, #2
 800fa22:	f006 fb2e 	bl	8016082 <dma_circulation_disable>
 800fa26:	4630      	mov	r0, r6
 800fa28:	2102      	movs	r1, #2
 800fa2a:	f006 fb32 	bl	8016092 <dma_memory_to_memory_disable>
 800fa2e:	2104      	movs	r1, #4
 800fa30:	4630      	mov	r0, r6
 800fa32:	f006 facd 	bl	8015fd0 <dma_deinit>
 800fa36:	a805      	add	r0, sp, #20
 800fa38:	f006 fae8 	bl	801600c <dma_struct_para_init>
 800fa3c:	4a23      	ldr	r2, [pc, #140]	; (800facc <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x260>)
 800fa3e:	f8df b090 	ldr.w	fp, [pc, #144]	; 800fad0 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x264>
 800fa42:	4630      	mov	r0, r6
 800fa44:	e9cd 2a07 	strd	r2, sl, [sp, #28]
 800fa48:	2104      	movs	r1, #4
 800fa4a:	aa05      	add	r2, sp, #20
 800fa4c:	e9cd b705 	strd	fp, r7, [sp, #20]
 800fa50:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800fa54:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 800fa58:	f88d 802e 	strb.w	r8, [sp, #46]	; 0x2e
 800fa5c:	f006 fae0 	bl	8016020 <dma_init>
 800fa60:	4630      	mov	r0, r6
 800fa62:	2104      	movs	r1, #4
 800fa64:	f006 fb0d 	bl	8016082 <dma_circulation_disable>
 800fa68:	4630      	mov	r0, r6
 800fa6a:	2104      	movs	r1, #4
 800fa6c:	f006 fb11 	bl	8016092 <dma_memory_to_memory_disable>
 800fa70:	4621      	mov	r1, r4
 800fa72:	4630      	mov	r0, r6
 800fa74:	f006 faac 	bl	8015fd0 <dma_deinit>
 800fa78:	a805      	add	r0, sp, #20
 800fa7a:	f006 fac7 	bl	801600c <dma_struct_para_init>
 800fa7e:	4b12      	ldr	r3, [pc, #72]	; (800fac8 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x25c>)
 800fa80:	aa05      	add	r2, sp, #20
 800fa82:	4621      	mov	r1, r4
 800fa84:	4630      	mov	r0, r6
 800fa86:	e9cd 3a07 	strd	r3, sl, [sp, #28]
 800fa8a:	e9cd b705 	strd	fp, r7, [sp, #20]
 800fa8e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800fa92:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 800fa96:	f88d 802e 	strb.w	r8, [sp, #46]	; 0x2e
 800fa9a:	f006 fac1 	bl	8016020 <dma_init>
 800fa9e:	4621      	mov	r1, r4
 800faa0:	4630      	mov	r0, r6
 800faa2:	f006 faee 	bl	8016082 <dma_circulation_disable>
 800faa6:	4630      	mov	r0, r6
 800faa8:	4621      	mov	r1, r4
 800faaa:	f006 faf2 	bl	8016092 <dma_memory_to_memory_disable>
 800faae:	4628      	mov	r0, r5
 800fab0:	b00d      	add	sp, #52	; 0x34
 800fab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fab6:	bf00      	nop
 800fab8:	20013dd8 	ldrdcs	r3, [r1], -r8
 800fabc:	40011000 	andmi	r1, r1, r0
 800fac0:	e000e100 	and	lr, r0, r0, lsl #2
 800fac4:	40011010 	andmi	r1, r1, r0, lsl r0
 800fac8:	08018a7a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r9, fp, pc}
 800facc:	2000c5d8 	ldrdcs	ip, [r0], -r8
 800fad0:	40011014 	andmi	r1, r1, r4, lsl r0

0800fad4 <WS28xxMulti::~WS28xxMulti()>:
 800fad4:	2200      	movs	r2, #0
 800fad6:	4b01      	ldr	r3, [pc, #4]	; (800fadc <WS28xxMulti::~WS28xxMulti()+0x8>)
 800fad8:	601a      	str	r2, [r3, #0]
 800fada:	4770      	bx	lr
 800fadc:	20013dd8 	ldrdcs	r3, [r1], -r8

0800fae0 <WS28xxMulti::Print()>:
 800fae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fae2:	4604      	mov	r4, r0
 800fae4:	480c      	ldr	r0, [pc, #48]	; (800fb18 <WS28xxMulti::Print()+0x38>)
 800fae6:	f7f9 fe39 	bl	800975c <printf>
 800faea:	6820      	ldr	r0, [r4, #0]
 800faec:	f7ff fdb0 	bl	800f650 <PixelType::GetType(pixel::Type)>
 800faf0:	4605      	mov	r5, r0
 800faf2:	68a0      	ldr	r0, [r4, #8]
 800faf4:	6826      	ldr	r6, [r4, #0]
 800faf6:	f7ff fe03 	bl	800f700 <PixelType::GetMap(pixel::Map)>
 800fafa:	68a2      	ldr	r2, [r4, #8]
 800fafc:	4603      	mov	r3, r0
 800fafe:	4629      	mov	r1, r5
 800fb00:	9200      	str	r2, [sp, #0]
 800fb02:	4806      	ldr	r0, [pc, #24]	; (800fb1c <WS28xxMulti::Print()+0x3c>)
 800fb04:	4632      	mov	r2, r6
 800fb06:	f7f9 fe29 	bl	800975c <printf>
 800fb0a:	6861      	ldr	r1, [r4, #4]
 800fb0c:	4804      	ldr	r0, [pc, #16]	; (800fb20 <WS28xxMulti::Print()+0x40>)
 800fb0e:	b002      	add	sp, #8
 800fb10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb14:	f7f9 be22 	b.w	800975c <printf>
 800fb18:	08018a49 	stmdaeq	r1, {r0, r3, r6, r9, fp, pc}
 800fb1c:	08018a50 	stmdaeq	r1, {r4, r6, r9, fp, pc}
 800fb20:	08018a6c 	stmdaeq	r1, {r2, r3, r5, r6, r9, fp, pc}

0800fb24 <WS28xxMulti::Update()>:
 800fb24:	2201      	movs	r2, #1
 800fb26:	b570      	push	{r4, r5, r6, lr}
 800fb28:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 800fb2c:	4b33      	ldr	r3, [pc, #204]	; (800fbfc <WS28xxMulti::Update()+0xd8>)
 800fb2e:	4c34      	ldr	r4, [pc, #208]	; (800fc00 <WS28xxMulti::Update()+0xdc>)
 800fb30:	701a      	strb	r2, [r3, #0]
 800fb32:	2200      	movs	r2, #0
 800fb34:	f8d5 3c00 	ldr.w	r3, [r5, #3072]	; 0xc00
 800fb38:	4932      	ldr	r1, [pc, #200]	; (800fc04 <WS28xxMulti::Update()+0xe0>)
 800fb3a:	f023 0301 	bic.w	r3, r3, #1
 800fb3e:	f8c5 3c00 	str.w	r3, [r5, #3072]	; 0xc00
 800fb42:	f8c5 2c24 	str.w	r2, [r5, #3108]	; 0xc24
 800fb46:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800fb4a:	4e2f      	ldr	r6, [pc, #188]	; (800fc08 <WS28xxMulti::Update()+0xe4>)
 800fb4c:	f023 0301 	bic.w	r3, r3, #1
 800fb50:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 800fb54:	4b2d      	ldr	r3, [pc, #180]	; (800fc0c <WS28xxMulti::Update()+0xe8>)
 800fb56:	f8c4 2424 	str.w	r2, [r4, #1060]	; 0x424
 800fb5a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800fb5e:	f022 0201 	bic.w	r2, r2, #1
 800fb62:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800fb66:	f8c3 143c 	str.w	r1, [r3, #1084]	; 0x43c
 800fb6a:	8982      	ldrh	r2, [r0, #12]
 800fb6c:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
 800fb70:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800fb74:	f042 0201 	orr.w	r2, r2, #1
 800fb78:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800fb7c:	f8d3 2458 	ldr.w	r2, [r3, #1112]	; 0x458
 800fb80:	f022 0201 	bic.w	r2, r2, #1
 800fb84:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
 800fb88:	4a21      	ldr	r2, [pc, #132]	; (800fc10 <WS28xxMulti::Update()+0xec>)
 800fb8a:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
 800fb8e:	8982      	ldrh	r2, [r0, #12]
 800fb90:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
 800fb94:	f8d3 2458 	ldr.w	r2, [r3, #1112]	; 0x458
 800fb98:	f042 0201 	orr.w	r2, r2, #1
 800fb9c:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
 800fba0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800fba4:	f022 0201 	bic.w	r2, r2, #1
 800fba8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800fbac:	f8c3 1414 	str.w	r1, [r3, #1044]	; 0x414
 800fbb0:	8982      	ldrh	r2, [r0, #12]
 800fbb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fbb6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 800fbba:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800fbbe:	4630      	mov	r0, r6
 800fbc0:	f042 0201 	orr.w	r2, r2, #1
 800fbc4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800fbc8:	f006 fe05 	bl	80167d6 <timer_dma_enable>
 800fbcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fbd0:	4630      	mov	r0, r6
 800fbd2:	f006 fe00 	bl	80167d6 <timer_dma_enable>
 800fbd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fbda:	4630      	mov	r0, r6
 800fbdc:	f006 fdfb 	bl	80167d6 <timer_dma_enable>
 800fbe0:	f8d5 3c00 	ldr.w	r3, [r5, #3072]	; 0xc00
 800fbe4:	f043 0301 	orr.w	r3, r3, #1
 800fbe8:	f8c5 3c00 	str.w	r3, [r5, #3072]	; 0xc00
 800fbec:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 800fbf0:	f043 0301 	orr.w	r3, r3, #1
 800fbf4:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 800fbf8:	bd70      	pop	{r4, r5, r6, pc}
 800fbfa:	bf00      	nop
 800fbfc:	2000c5d4 	ldrdcs	ip, [r0], -r4
 800fc00:	40013000 	andmi	r3, r1, r0
 800fc04:	08018a7a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r9, fp, pc}
 800fc08:	40013400 	andmi	r3, r1, r0, lsl #8
 800fc0c:	40020000 	andmi	r0, r2, r0
 800fc10:	2000c5d8 	ldrdcs	ip, [r0], -r8

0800fc14 <WS28xxMulti::Blackout()>:
 800fc14:	b510      	push	{r4, lr}
 800fc16:	4c0c      	ldr	r4, [pc, #48]	; (800fc48 <WS28xxMulti::Blackout()+0x34>)
 800fc18:	f3bf 8f5f 	dmb	sy
 800fc1c:	7822      	ldrb	r2, [r4, #0]
 800fc1e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 800fc22:	2a00      	cmp	r2, #0
 800fc24:	d1f8      	bne.n	800fc18 <WS28xxMulti::Blackout()+0x4>
 800fc26:	f44f 517f 	mov.w	r1, #16320	; 0x3fc0
 800fc2a:	4a08      	ldr	r2, [pc, #32]	; (800fc4c <WS28xxMulti::Blackout()+0x38>)
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	f5b3 5f70 	cmp.w	r3, #15360	; 0x3c00
 800fc32:	f822 1b02 	strh.w	r1, [r2], #2
 800fc36:	d1f9      	bne.n	800fc2c <WS28xxMulti::Blackout()+0x18>
 800fc38:	f7ff ff74 	bl	800fb24 <WS28xxMulti::Update()>
 800fc3c:	f3bf 8f5f 	dmb	sy
 800fc40:	7823      	ldrb	r3, [r4, #0]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d1fa      	bne.n	800fc3c <WS28xxMulti::Blackout()+0x28>
 800fc46:	bd10      	pop	{r4, pc}
 800fc48:	2000c5d4 	ldrdcs	ip, [r0], -r4
 800fc4c:	2000c5d8 	ldrdcs	ip, [r0], -r8

0800fc50 <WS28xxMulti::IsUpdating()>:
 800fc50:	f3bf 8f5f 	dmb	sy
 800fc54:	4b01      	ldr	r3, [pc, #4]	; (800fc5c <WS28xxMulti::IsUpdating()+0xc>)
 800fc56:	7818      	ldrb	r0, [r3, #0]
 800fc58:	4770      	bx	lr
 800fc5a:	bf00      	nop
 800fc5c:	2000c5d4 	ldrdcs	ip, [r0], -r4

0800fc60 <WS28xxMulti::SetColour(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>:
 800fc60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc62:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800fc66:	2400      	movs	r4, #0
 800fc68:	2501      	movs	r5, #1
 800fc6a:	4f1a      	ldr	r7, [pc, #104]	; (800fcd4 <WS28xxMulti::SetColour(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x74>)
 800fc6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fc70:	4819      	ldr	r0, [pc, #100]	; (800fcd8 <WS28xxMulti::SetColour(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x78>)
 800fc72:	eb07 1702 	add.w	r7, r7, r2, lsl #4
 800fc76:	3106      	adds	r1, #6
 800fc78:	b2c9      	uxtb	r1, r1
 800fc7a:	4438      	add	r0, r7
 800fc7c:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 800fc80:	f101 6108 	add.w	r1, r1, #142606336	; 0x8800000
 800fc84:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800fc88:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800fc8c:	f89d e014 	ldrb.w	lr, [sp, #20]
 800fc90:	f89d 6018 	ldrb.w	r6, [sp, #24]
 800fc94:	0092      	lsls	r2, r2, #2
 800fc96:	0089      	lsls	r1, r1, #2
 800fc98:	ea13 0f0c 	tst.w	r3, ip
 800fc9c:	f5a2 6080 	sub.w	r0, r2, #1024	; 0x400
 800fca0:	bf16      	itet	ne
 800fca2:	f5a2 6080 	subne.w	r0, r2, #1024	; 0x400
 800fca6:	6005      	streq	r5, [r0, #0]
 800fca8:	6004      	strne	r4, [r0, #0]
 800fcaa:	ea1e 0f0c 	tst.w	lr, ip
 800fcae:	f5a2 7000 	sub.w	r0, r2, #512	; 0x200
 800fcb2:	bf16      	itet	ne
 800fcb4:	f5a2 7000 	subne.w	r0, r2, #512	; 0x200
 800fcb8:	6005      	streq	r5, [r0, #0]
 800fcba:	6004      	strne	r4, [r0, #0]
 800fcbc:	ea16 0f0c 	tst.w	r6, ip
 800fcc0:	bf0c      	ite	eq
 800fcc2:	6015      	streq	r5, [r2, #0]
 800fcc4:	6014      	strne	r4, [r2, #0]
 800fcc6:	3240      	adds	r2, #64	; 0x40
 800fcc8:	4291      	cmp	r1, r2
 800fcca:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800fcce:	d1e3      	bne.n	800fc98 <WS28xxMulti::SetColour(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x38>
 800fcd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcd2:	bf00      	nop
 800fcd4:	2000c5d8 	ldrdcs	ip, [r0], -r8
 800fcd8:	e1100020 	tst	r0, r0, lsr #32

0800fcdc <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>:
 800fcdc:	b470      	push	{r4, r5, r6}
 800fcde:	461c      	mov	r4, r3
 800fce0:	6883      	ldr	r3, [r0, #8]
 800fce2:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800fce6:	f89d 6010 	ldrb.w	r6, [sp, #16]
 800fcea:	2b05      	cmp	r3, #5
 800fcec:	d80a      	bhi.n	800fd04 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x28>
 800fcee:	e8df f003 	tbb	[pc, r3]
 800fcf2:	1b18120f 	blne	8614536 <__exidx_end+0x5f9de2>
 800fcf6:	46330903 	ldrtmi	r0, [r3], -r3, lsl #18
 800fcfa:	9504      	str	r5, [sp, #16]
 800fcfc:	9403      	str	r4, [sp, #12]
 800fcfe:	bc70      	pop	{r4, r5, r6}
 800fd00:	f7ff bfae 	b.w	800fc60 <WS28xxMulti::SetColour(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 800fd04:	4633      	mov	r3, r6
 800fd06:	9404      	str	r4, [sp, #16]
 800fd08:	9503      	str	r5, [sp, #12]
 800fd0a:	bc70      	pop	{r4, r5, r6}
 800fd0c:	f7ff bfa8 	b.w	800fc60 <WS28xxMulti::SetColour(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 800fd10:	4623      	mov	r3, r4
 800fd12:	9604      	str	r6, [sp, #16]
 800fd14:	e7f8      	b.n	800fd08 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x2c>
 800fd16:	4623      	mov	r3, r4
 800fd18:	9504      	str	r5, [sp, #16]
 800fd1a:	9603      	str	r6, [sp, #12]
 800fd1c:	bc70      	pop	{r4, r5, r6}
 800fd1e:	f7ff bf9f 	b.w	800fc60 <WS28xxMulti::SetColour(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 800fd22:	462b      	mov	r3, r5
 800fd24:	9604      	str	r6, [sp, #16]
 800fd26:	e7e9      	b.n	800fcfc <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x20>
 800fd28:	462b      	mov	r3, r5
 800fd2a:	9404      	str	r4, [sp, #16]
 800fd2c:	e7f5      	b.n	800fd1a <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x3e>
 800fd2e:	bf00      	nop

0800fd30 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 800fd30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd32:	2080      	movs	r0, #128	; 0x80
 800fd34:	2400      	movs	r4, #0
 800fd36:	2501      	movs	r5, #1
 800fd38:	4e1a      	ldr	r6, [pc, #104]	; (800fda4 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x74>)
 800fd3a:	f89d c014 	ldrb.w	ip, [sp, #20]
 800fd3e:	eb06 1682 	add.w	r6, r6, r2, lsl #6
 800fd42:	1d8a      	adds	r2, r1, #6
 800fd44:	4918      	ldr	r1, [pc, #96]	; (800fda8 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x78>)
 800fd46:	b2d2      	uxtb	r2, r2
 800fd48:	4431      	add	r1, r6
 800fd4a:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800fd4e:	f102 6208 	add.w	r2, r2, #142606336	; 0x8800000
 800fd52:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800fd56:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 800fd5a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800fd5e:	f89d 601c 	ldrb.w	r6, [sp, #28]
 800fd62:	0089      	lsls	r1, r1, #2
 800fd64:	0092      	lsls	r2, r2, #2
 800fd66:	f5a1 67c0 	sub.w	r7, r1, #1536	; 0x600
 800fd6a:	ea1c 0f00 	tst.w	ip, r0
 800fd6e:	bf0c      	ite	eq
 800fd70:	603d      	streq	r5, [r7, #0]
 800fd72:	603c      	strne	r4, [r7, #0]
 800fd74:	f5a1 6780 	sub.w	r7, r1, #1024	; 0x400
 800fd78:	4203      	tst	r3, r0
 800fd7a:	bf0c      	ite	eq
 800fd7c:	603d      	streq	r5, [r7, #0]
 800fd7e:	603c      	strne	r4, [r7, #0]
 800fd80:	ea1e 0f00 	tst.w	lr, r0
 800fd84:	f5a1 7700 	sub.w	r7, r1, #512	; 0x200
 800fd88:	bf0c      	ite	eq
 800fd8a:	603d      	streq	r5, [r7, #0]
 800fd8c:	603c      	strne	r4, [r7, #0]
 800fd8e:	4206      	tst	r6, r0
 800fd90:	bf0c      	ite	eq
 800fd92:	600d      	streq	r5, [r1, #0]
 800fd94:	600c      	strne	r4, [r1, #0]
 800fd96:	3140      	adds	r1, #64	; 0x40
 800fd98:	428a      	cmp	r2, r1
 800fd9a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800fd9e:	d1e2      	bne.n	800fd66 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x36>
 800fda0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fda2:	bf00      	nop
 800fda4:	2000c5d8 	ldrdcs	ip, [r0], -r8
 800fda8:	e1100030 	tst	r0, r0, lsr r0

0800fdac <RemoteConfig::HandleList()>:
 800fdac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fdb0:	6801      	ldr	r1, [r0, #0]
 800fdb2:	4604      	mov	r4, r0
 800fdb4:	2012      	movs	r0, #18
 800fdb6:	f04f 080c 	mov.w	r8, #12
 800fdba:	4a2b      	ldr	r2, [pc, #172]	; (800fe68 <RemoteConfig::HandleList()+0xbc>)
 800fdbc:	4b2b      	ldr	r3, [pc, #172]	; (800fe6c <RemoteConfig::HandleList()+0xc0>)
 800fdbe:	fb00 2201 	mla	r2, r0, r1, r2
 800fdc2:	6860      	ldr	r0, [r4, #4]
 800fdc4:	492a      	ldr	r1, [pc, #168]	; (800fe70 <RemoteConfig::HandleList()+0xc4>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	fb08 1100 	mla	r1, r8, r0, r1
 800fdcc:	4e29      	ldr	r6, [pc, #164]	; (800fe74 <RemoteConfig::HandleList()+0xc8>)
 800fdce:	482a      	ldr	r0, [pc, #168]	; (800fe78 <RemoteConfig::HandleList()+0xcc>)
 800fdd0:	691f      	ldr	r7, [r3, #16]
 800fdd2:	6835      	ldr	r5, [r6, #0]
 800fdd4:	f890 9009 	ldrb.w	r9, [r0, #9]
 800fdd8:	b2fb      	uxtb	r3, r7
 800fdda:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 800fdde:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800fde2:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800fde6:	b089      	sub	sp, #36	; 0x24
 800fde8:	3507      	adds	r5, #7
 800fdea:	0e3f      	lsrs	r7, r7, #24
 800fdec:	f1b9 0f00 	cmp.w	r9, #0
 800fdf0:	d020      	beq.n	800fe34 <RemoteConfig::HandleList()+0x88>
 800fdf2:	3009      	adds	r0, #9
 800fdf4:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800fdf8:	e9cd 8005 	strd	r8, r0, [sp, #20]
 800fdfc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800fe00:	4628      	mov	r0, r5
 800fe02:	e9cd e701 	strd	lr, r7, [sp, #4]
 800fe06:	4a1d      	ldr	r2, [pc, #116]	; (800fe7c <RemoteConfig::HandleList()+0xd0>)
 800fe08:	f8cd c000 	str.w	ip, [sp]
 800fe0c:	f7f9 fcce 	bl	80097ac <snprintf>
 800fe10:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 800fe14:	2b05      	cmp	r3, #5
 800fe16:	d11a      	bne.n	800fe4e <RemoteConfig::HandleList()+0xa2>
 800fe18:	f642 1305 	movw	r3, #10501	; 0x2905
 800fe1c:	9300      	str	r3, [sp, #0]
 800fe1e:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800fe22:	b282      	uxth	r2, r0
 800fe24:	4629      	mov	r1, r5
 800fe26:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800fe2a:	f002 fbb7 	bl	801259c <udp_send>
 800fe2e:	b009      	add	sp, #36	; 0x24
 800fe30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe34:	e9cd 1804 	strd	r1, r8, [sp, #16]
 800fe38:	e9cd 7202 	strd	r7, r2, [sp, #8]
 800fe3c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800fe40:	4628      	mov	r0, r5
 800fe42:	e9cd ce00 	strd	ip, lr, [sp]
 800fe46:	4a0e      	ldr	r2, [pc, #56]	; (800fe80 <RemoteConfig::HandleList()+0xd4>)
 800fe48:	f7f9 fcb0 	bl	80097ac <snprintf>
 800fe4c:	e7e0      	b.n	800fe10 <RemoteConfig::HandleList()+0x64>
 800fe4e:	2b06      	cmp	r3, #6
 800fe50:	d1ed      	bne.n	800fe2e <RemoteConfig::HandleList()+0x82>
 800fe52:	6833      	ldr	r3, [r6, #0]
 800fe54:	799b      	ldrb	r3, [r3, #6]
 800fe56:	2b2a      	cmp	r3, #42	; 0x2a
 800fe58:	d1e9      	bne.n	800fe2e <RemoteConfig::HandleList()+0x82>
 800fe5a:	f642 1305 	movw	r3, #10501	; 0x2905
 800fe5e:	9300      	str	r3, [sp, #0]
 800fe60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe64:	e7dd      	b.n	800fe22 <RemoteConfig::HandleList()+0x76>
 800fe66:	bf00      	nop
 800fe68:	08018b42 	stmdaeq	r1, {r1, r6, r8, r9, fp, pc}
 800fe6c:	2001c724 	andcs	ip, r1, r4, lsr #14
 800fe70:	08018be4 	stmdaeq	r1, {r2, r5, r6, r7, r8, r9, fp, pc}
 800fe74:	20013ddc 	ldrdcs	r3, [r1], -ip
 800fe78:	20013de0 	andcs	r3, r1, r0, ror #27
 800fe7c:	08018a7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r9, fp, pc}
 800fe80:	08018a95 	stmdaeq	r1, {r0, r2, r4, r7, r9, fp, pc}

0800fe84 <RemoteConfig::HandleDisplayGet()>:
 800fe84:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800fe88:	2b08      	cmp	r3, #8
 800fe8a:	d11d      	bne.n	800fec8 <RemoteConfig::HandleDisplayGet()+0x44>
 800fe8c:	4b0f      	ldr	r3, [pc, #60]	; (800fecc <RemoteConfig::HandleDisplayGet()+0x48>)
 800fe8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4d0f      	ldr	r5, [pc, #60]	; (800fed0 <RemoteConfig::HandleDisplayGet()+0x4c>)
 800fe94:	7c19      	ldrb	r1, [r3, #16]
 800fe96:	4a0f      	ldr	r2, [pc, #60]	; (800fed4 <RemoteConfig::HandleDisplayGet()+0x50>)
 800fe98:	4b0f      	ldr	r3, [pc, #60]	; (800fed8 <RemoteConfig::HandleDisplayGet()+0x54>)
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	2900      	cmp	r1, #0
 800fe9e:	bf18      	it	ne
 800fea0:	4613      	movne	r3, r2
 800fea2:	6828      	ldr	r0, [r5, #0]
 800fea4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800fea8:	4a0c      	ldr	r2, [pc, #48]	; (800fedc <RemoteConfig::HandleDisplayGet()+0x58>)
 800feaa:	f7f9 fc7f 	bl	80097ac <snprintf>
 800feae:	f642 1305 	movw	r3, #10501	; 0x2905
 800feb2:	9300      	str	r3, [sp, #0]
 800feb4:	b282      	uxth	r2, r0
 800feb6:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800feba:	6829      	ldr	r1, [r5, #0]
 800febc:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800fec0:	f002 fb6c 	bl	801259c <udp_send>
 800fec4:	b003      	add	sp, #12
 800fec6:	bd30      	pop	{r4, r5, pc}
 800fec8:	4770      	bx	lr
 800feca:	bf00      	nop
 800fecc:	2001cd5c 	andcs	ip, r1, ip, asr sp
 800fed0:	20013ddc 	ldrdcs	r3, [r1], -ip
 800fed4:	08018aae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r9, fp, pc}
 800fed8:	08018aab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r9, fp, pc}
 800fedc:	08018ab2 	stmdaeq	r1, {r1, r4, r5, r7, r9, fp, pc}

0800fee0 <RemoteConfig::HandleTftpSet()>:
 800fee0:	f8d0 25e4 	ldr.w	r2, [r0, #1508]	; 0x5e4
 800fee4:	2a06      	cmp	r2, #6
 800fee6:	d109      	bne.n	800fefc <RemoteConfig::HandleTftpSet()+0x1c>
 800fee8:	4a05      	ldr	r2, [pc, #20]	; (800ff00 <RemoteConfig::HandleTftpSet()+0x20>)
 800feea:	6812      	ldr	r2, [r2, #0]
 800feec:	7992      	ldrb	r2, [r2, #6]
 800feee:	3a30      	subs	r2, #48	; 0x30
 800fef0:	bf18      	it	ne
 800fef2:	2201      	movne	r2, #1
 800fef4:	f880 25ec 	strb.w	r2, [r0, #1516]	; 0x5ec
 800fef8:	f000 bd70 	b.w	80109dc <RemoteConfig::PlatformHandleTftpSet()>
 800fefc:	4770      	bx	lr
 800fefe:	bf00      	nop
 800ff00:	20013ddc 	ldrdcs	r3, [r1], -ip

0800ff04 <RemoteConfig::HandleTftpGet()>:
 800ff04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff06:	4604      	mov	r4, r0
 800ff08:	f000 fd70 	bl	80109ec <RemoteConfig::PlatformHandleTftpGet()>
 800ff0c:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 800ff10:	2b05      	cmp	r3, #5
 800ff12:	d118      	bne.n	800ff46 <RemoteConfig::HandleTftpGet()+0x42>
 800ff14:	f894 15ec 	ldrb.w	r1, [r4, #1516]	; 0x5ec
 800ff18:	4d0c      	ldr	r5, [pc, #48]	; (800ff4c <RemoteConfig::HandleTftpGet()+0x48>)
 800ff1a:	4a0d      	ldr	r2, [pc, #52]	; (800ff50 <RemoteConfig::HandleTftpGet()+0x4c>)
 800ff1c:	4b0d      	ldr	r3, [pc, #52]	; (800ff54 <RemoteConfig::HandleTftpGet()+0x50>)
 800ff1e:	6828      	ldr	r0, [r5, #0]
 800ff20:	2900      	cmp	r1, #0
 800ff22:	bf08      	it	eq
 800ff24:	4613      	moveq	r3, r2
 800ff26:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800ff2a:	4a0b      	ldr	r2, [pc, #44]	; (800ff58 <RemoteConfig::HandleTftpGet()+0x54>)
 800ff2c:	f7f9 fc3e 	bl	80097ac <snprintf>
 800ff30:	f642 1305 	movw	r3, #10501	; 0x2905
 800ff34:	b282      	uxth	r2, r0
 800ff36:	9300      	str	r3, [sp, #0]
 800ff38:	6829      	ldr	r1, [r5, #0]
 800ff3a:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800ff3e:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800ff42:	f002 fb2b 	bl	801259c <udp_send>
 800ff46:	b003      	add	sp, #12
 800ff48:	bd30      	pop	{r4, r5, pc}
 800ff4a:	bf00      	nop
 800ff4c:	20013ddc 	ldrdcs	r3, [r1], -ip
 800ff50:	08018aae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r9, fp, pc}
 800ff54:	08018aab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r9, fp, pc}
 800ff58:	08018abe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r9, fp, pc}

0800ff5c <RemoteConfig::HandleVersion()>:
 800ff5c:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800ff60:	2b08      	cmp	r3, #8
 800ff62:	d116      	bne.n	800ff92 <RemoteConfig::HandleVersion()+0x36>
 800ff64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff66:	4d0b      	ldr	r5, [pc, #44]	; (800ff94 <RemoteConfig::HandleVersion()+0x38>)
 800ff68:	4604      	mov	r4, r0
 800ff6a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800ff6e:	4b0a      	ldr	r3, [pc, #40]	; (800ff98 <RemoteConfig::HandleVersion()+0x3c>)
 800ff70:	4a0a      	ldr	r2, [pc, #40]	; (800ff9c <RemoteConfig::HandleVersion()+0x40>)
 800ff72:	6828      	ldr	r0, [r5, #0]
 800ff74:	f7f9 fc1a 	bl	80097ac <snprintf>
 800ff78:	f642 1305 	movw	r3, #10501	; 0x2905
 800ff7c:	9300      	str	r3, [sp, #0]
 800ff7e:	b282      	uxth	r2, r0
 800ff80:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800ff84:	6829      	ldr	r1, [r5, #0]
 800ff86:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800ff8a:	f002 fb07 	bl	801259c <udp_send>
 800ff8e:	b003      	add	sp, #12
 800ff90:	bd30      	pop	{r4, r5, pc}
 800ff92:	4770      	bx	lr
 800ff94:	20013ddc 	ldrdcs	r3, [r1], -ip
 800ff98:	2001ce02 	andcs	ip, r1, r2, lsl #28
 800ff9c:	08018ac7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r9, fp, pc}

0800ffa0 <RemoteConfig::HandleUptime()>:
 800ffa0:	f890 35d7 	ldrb.w	r3, [r0, #1495]	; 0x5d7
 800ffa4:	b1fb      	cbz	r3, 800ffe6 <RemoteConfig::HandleUptime()+0x46>
 800ffa6:	4b10      	ldr	r3, [pc, #64]	; (800ffe8 <RemoteConfig::HandleUptime()+0x48>)
 800ffa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffaa:	681a      	ldr	r2, [r3, #0]
 800ffac:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800ffb0:	4604      	mov	r4, r0
 800ffb2:	2b07      	cmp	r3, #7
 800ffb4:	d115      	bne.n	800ffe2 <RemoteConfig::HandleUptime()+0x42>
 800ffb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ffba:	4d0c      	ldr	r5, [pc, #48]	; (800ffec <RemoteConfig::HandleUptime()+0x4c>)
 800ffbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffc0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800ffc4:	4a0a      	ldr	r2, [pc, #40]	; (800fff0 <RemoteConfig::HandleUptime()+0x50>)
 800ffc6:	6828      	ldr	r0, [r5, #0]
 800ffc8:	f7f9 fbf0 	bl	80097ac <snprintf>
 800ffcc:	f642 1305 	movw	r3, #10501	; 0x2905
 800ffd0:	9300      	str	r3, [sp, #0]
 800ffd2:	b282      	uxth	r2, r0
 800ffd4:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800ffd8:	6829      	ldr	r1, [r5, #0]
 800ffda:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800ffde:	f002 fadd 	bl	801259c <udp_send>
 800ffe2:	b003      	add	sp, #12
 800ffe4:	bd30      	pop	{r4, r5, pc}
 800ffe6:	4770      	bx	lr
 800ffe8:	2001ce64 	andcs	ip, r1, r4, ror #28
 800ffec:	20013ddc 	ldrdcs	r3, [r1], -ip
 800fff0:	08018ad2 	stmdaeq	r1, {r1, r4, r6, r7, r9, fp, pc}

0800fff4 <RemoteConfig::HandleDisplaySet()>:
 800fff4:	b538      	push	{r3, r4, r5, lr}
 800fff6:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800fffa:	2b09      	cmp	r3, #9
 800fffc:	d113      	bne.n	8010026 <RemoteConfig::HandleDisplaySet()+0x32>
 800fffe:	4b0a      	ldr	r3, [pc, #40]	; (8010028 <RemoteConfig::HandleDisplaySet()+0x34>)
 8010000:	681c      	ldr	r4, [r3, #0]
 8010002:	4b0a      	ldr	r3, [pc, #40]	; (801002c <RemoteConfig::HandleDisplaySet()+0x38>)
 8010004:	69a0      	ldr	r0, [r4, #24]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	7a5d      	ldrb	r5, [r3, #9]
 801000a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 801000e:	4259      	negs	r1, r3
 8010010:	4159      	adcs	r1, r3
 8010012:	b140      	cbz	r0, 8010026 <RemoteConfig::HandleDisplaySet()+0x32>
 8010014:	6803      	ldr	r3, [r0, #0]
 8010016:	7421      	strb	r1, [r4, #16]
 8010018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801001a:	4798      	blx	r3
 801001c:	2d30      	cmp	r5, #48	; 0x30
 801001e:	bf1e      	ittt	ne
 8010020:	4b03      	ldrne	r3, [pc, #12]	; (8010030 <RemoteConfig::HandleDisplaySet()+0x3c>)
 8010022:	681b      	ldrne	r3, [r3, #0]
 8010024:	6063      	strne	r3, [r4, #4]
 8010026:	bd38      	pop	{r3, r4, r5, pc}
 8010028:	2001cd5c 	andcs	ip, r1, ip, asr sp
 801002c:	20013ddc 	ldrdcs	r3, [r1], -ip
 8010030:	2001ce64 	andcs	ip, r1, r4, ror #28

08010034 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 8010034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010038:	f100 0a0c 	add.w	sl, r0, #12
 801003c:	4604      	mov	r4, r0
 801003e:	e9c0 1200 	strd	r1, r2, [r0]
 8010042:	6083      	str	r3, [r0, #8]
 8010044:	4650      	mov	r0, sl
 8010046:	4690      	mov	r8, r2
 8010048:	4689      	mov	r9, r1
 801004a:	461f      	mov	r7, r3
 801004c:	f000 fd0e 	bl	8010a6c <HttpDaemon::HttpDaemon()>
 8010050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010054:	2500      	movs	r5, #0
 8010056:	4e16      	ldr	r6, [pc, #88]	; (80100b0 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x7c>)
 8010058:	f8df b058 	ldr.w	fp, [pc, #88]	; 80100b4 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x80>
 801005c:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 8010060:	4b15      	ldr	r3, [pc, #84]	; (80100b8 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x84>)
 8010062:	4631      	mov	r1, r6
 8010064:	f8db 0000 	ldr.w	r0, [fp]
 8010068:	f8c4 55d4 	str.w	r5, [r4, #1492]	; 0x5d4
 801006c:	f8a4 55d8 	strh.w	r5, [r4, #1496]	; 0x5d8
 8010070:	f8c4 55e0 	str.w	r5, [r4, #1504]	; 0x5e0
 8010074:	f8c4 55e4 	str.w	r5, [r4, #1508]	; 0x5e4
 8010078:	f8c4 55e8 	str.w	r5, [r4, #1512]	; 0x5e8
 801007c:	f884 55ec 	strb.w	r5, [r4, #1516]	; 0x5ec
 8010080:	601c      	str	r4, [r3, #0]
 8010082:	f002 ff57 	bl	8012f34 <Network::MacAddressCopyTo(unsigned char*)>
 8010086:	f642 1105 	movw	r1, #10501	; 0x2905
 801008a:	f8db 0000 	ldr.w	r0, [fp]
 801008e:	f886 9006 	strb.w	r9, [r6, #6]
 8010092:	f886 8007 	strb.w	r8, [r6, #7]
 8010096:	7237      	strb	r7, [r6, #8]
 8010098:	7275      	strb	r5, [r6, #9]
 801009a:	f002 ff45 	bl	8012f28 <Network::Begin(unsigned short)>
 801009e:	f8c4 05dc 	str.w	r0, [r4, #1500]	; 0x5dc
 80100a2:	4650      	mov	r0, sl
 80100a4:	f000 fcfa 	bl	8010a9c <HttpDaemon::Start()>
 80100a8:	4620      	mov	r0, r4
 80100aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ae:	bf00      	nop
 80100b0:	20013de0 	andcs	r3, r1, r0, ror #27
 80100b4:	2001c724 	andcs	ip, r1, r4, lsr #14
 80100b8:	20013e04 	andcs	r3, r1, r4, lsl #28

080100bc <RemoteConfig::GetStringNode() const>:
 80100bc:	2012      	movs	r0, #18
 80100be:	4b03      	ldr	r3, [pc, #12]	; (80100cc <RemoteConfig::GetStringNode() const+0x10>)
 80100c0:	799a      	ldrb	r2, [r3, #6]
 80100c2:	4b03      	ldr	r3, [pc, #12]	; (80100d0 <RemoteConfig::GetStringNode() const+0x14>)
 80100c4:	fb00 3002 	mla	r0, r0, r2, r3
 80100c8:	4770      	bx	lr
 80100ca:	bf00      	nop
 80100cc:	20013de0 	andcs	r3, r1, r0, ror #27
 80100d0:	08018b42 	stmdaeq	r1, {r1, r6, r8, r9, fp, pc}

080100d4 <RemoteConfig::GetStringOutput() const>:
 80100d4:	200c      	movs	r0, #12
 80100d6:	4b03      	ldr	r3, [pc, #12]	; (80100e4 <RemoteConfig::GetStringOutput() const+0x10>)
 80100d8:	79da      	ldrb	r2, [r3, #7]
 80100da:	4b03      	ldr	r3, [pc, #12]	; (80100e8 <RemoteConfig::GetStringOutput() const+0x14>)
 80100dc:	fb00 3002 	mla	r0, r0, r2, r3
 80100e0:	4770      	bx	lr
 80100e2:	bf00      	nop
 80100e4:	20013de0 	andcs	r3, r1, r0, ror #27
 80100e8:	08018be4 	stmdaeq	r1, {r2, r5, r6, r7, r8, r9, fp, pc}

080100ec <RemoteConfig::SetDisable(bool)>:
 80100ec:	b538      	push	{r3, r4, r5, lr}
 80100ee:	4604      	mov	r4, r0
 80100f0:	f890 35d4 	ldrb.w	r3, [r0, #1492]	; 0x5d4
 80100f4:	b171      	cbz	r1, 8010114 <RemoteConfig::SetDisable(bool)+0x28>
 80100f6:	b963      	cbnz	r3, 8010112 <RemoteConfig::SetDisable(bool)+0x26>
 80100f8:	4b0d      	ldr	r3, [pc, #52]	; (8010130 <RemoteConfig::SetDisable(bool)+0x44>)
 80100fa:	f642 1105 	movw	r1, #10501	; 0x2905
 80100fe:	6818      	ldr	r0, [r3, #0]
 8010100:	f002 ff15 	bl	8012f2e <Network::End(unsigned short)>
 8010104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010108:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 801010c:	2301      	movs	r3, #1
 801010e:	f884 35d4 	strb.w	r3, [r4, #1492]	; 0x5d4
 8010112:	bd38      	pop	{r3, r4, r5, pc}
 8010114:	2b00      	cmp	r3, #0
 8010116:	d0fc      	beq.n	8010112 <RemoteConfig::SetDisable(bool)+0x26>
 8010118:	4b05      	ldr	r3, [pc, #20]	; (8010130 <RemoteConfig::SetDisable(bool)+0x44>)
 801011a:	460d      	mov	r5, r1
 801011c:	6818      	ldr	r0, [r3, #0]
 801011e:	f642 1105 	movw	r1, #10501	; 0x2905
 8010122:	f002 ff01 	bl	8012f28 <Network::Begin(unsigned short)>
 8010126:	f884 55d4 	strb.w	r5, [r4, #1492]	; 0x5d4
 801012a:	f8c4 05dc 	str.w	r0, [r4, #1500]	; 0x5dc
 801012e:	e7f0      	b.n	8010112 <RemoteConfig::SetDisable(bool)+0x26>
 8010130:	2001c724 	andcs	ip, r1, r4, lsr #14

08010134 <RemoteConfig::SetDisplayName(char const*)>:
 8010134:	2217      	movs	r2, #23
 8010136:	4809      	ldr	r0, [pc, #36]	; (801015c <RemoteConfig::SetDisplayName(char const*)+0x28>)
 8010138:	b508      	push	{r3, lr}
 801013a:	1e4b      	subs	r3, r1, #1
 801013c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010140:	b911      	cbnz	r1, 8010148 <RemoteConfig::SetDisplayName(char const*)+0x14>
 8010142:	f005 fd17 	bl	8015b74 <memset>
 8010146:	e003      	b.n	8010150 <RemoteConfig::SetDisplayName(char const*)+0x1c>
 8010148:	3a01      	subs	r2, #1
 801014a:	f800 1b01 	strb.w	r1, [r0], #1
 801014e:	d1f5      	bne.n	801013c <RemoteConfig::SetDisplayName(char const*)+0x8>
 8010150:	2200      	movs	r2, #0
 8010152:	4b03      	ldr	r3, [pc, #12]	; (8010160 <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 8010154:	f883 2020 	strb.w	r2, [r3, #32]
 8010158:	bd08      	pop	{r3, pc}
 801015a:	bf00      	nop
 801015c:	20013de9 	andcs	r3, r1, r9, ror #27
 8010160:	20013de0 	andcs	r3, r1, r0, ror #27

08010164 <RemoteConfig::HandleGet(void*, unsigned int)>:
 8010164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010166:	4604      	mov	r4, r0
 8010168:	4616      	mov	r6, r2
 801016a:	460d      	mov	r5, r1
 801016c:	4f2a      	ldr	r7, [pc, #168]	; (8010218 <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 801016e:	b085      	sub	sp, #20
 8010170:	b9b9      	cbnz	r1, 80101a2 <RemoteConfig::HandleGet(void*, unsigned int)+0x3e>
 8010172:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8010176:	6839      	ldr	r1, [r7, #0]
 8010178:	aa03      	add	r2, sp, #12
 801017a:	3105      	adds	r1, #5
 801017c:	9303      	str	r3, [sp, #12]
 801017e:	f000 fc03 	bl	8010988 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 8010182:	1e03      	subs	r3, r0, #0
 8010184:	da1d      	bge.n	80101c2 <RemoteConfig::HandleGet(void*, unsigned int)+0x5e>
 8010186:	f642 1305 	movw	r3, #10501	; 0x2905
 801018a:	220b      	movs	r2, #11
 801018c:	9300      	str	r3, [sp, #0]
 801018e:	4923      	ldr	r1, [pc, #140]	; (801021c <RemoteConfig::HandleGet(void*, unsigned int)+0xb8>)
 8010190:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 8010194:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 8010198:	f002 fa00 	bl	801259c <udp_send>
 801019c:	200c      	movs	r0, #12
 801019e:	b005      	add	sp, #20
 80101a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101a2:	9203      	str	r2, [sp, #12]
 80101a4:	aa03      	add	r2, sp, #12
 80101a6:	6039      	str	r1, [r7, #0]
 80101a8:	f000 fbee 	bl	8010988 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 80101ac:	1e03      	subs	r3, r0, #0
 80101ae:	da08      	bge.n	80101c2 <RemoteConfig::HandleGet(void*, unsigned int)+0x5e>
 80101b0:	2e0b      	cmp	r6, #11
 80101b2:	4632      	mov	r2, r6
 80101b4:	4628      	mov	r0, r5
 80101b6:	bf28      	it	cs
 80101b8:	220b      	movcs	r2, #11
 80101ba:	4918      	ldr	r1, [pc, #96]	; (801021c <RemoteConfig::HandleGet(void*, unsigned int)+0xb8>)
 80101bc:	f005 fcb8 	bl	8015b30 <memcpy>
 80101c0:	e7ec      	b.n	801019c <RemoteConfig::HandleGet(void*, unsigned int)+0x38>
 80101c2:	221c      	movs	r2, #28
 80101c4:	4353      	muls	r3, r2
 80101c6:	4916      	ldr	r1, [pc, #88]	; (8010220 <RemoteConfig::HandleGet(void*, unsigned int)+0xbc>)
 80101c8:	18ca      	adds	r2, r1, r3
 80101ca:	6852      	ldr	r2, [r2, #4]
 80101cc:	58cb      	ldr	r3, [r1, r3]
 80101ce:	ea4f 0c62 	mov.w	ip, r2, asr #1
 80101d2:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80101d6:	07d2      	lsls	r2, r2, #31
 80101d8:	bf48      	it	mi
 80101da:	f854 200c 	ldrmi.w	r2, [r4, ip]
 80101de:	a903      	add	r1, sp, #12
 80101e0:	bf48      	it	mi
 80101e2:	58d3      	ldrmi	r3, [r2, r3]
 80101e4:	4798      	blx	r3
 80101e6:	b96d      	cbnz	r5, 8010204 <RemoteConfig::HandleGet(void*, unsigned int)+0xa0>
 80101e8:	f642 1305 	movw	r3, #10501	; 0x2905
 80101ec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80101f0:	9300      	str	r3, [sp, #0]
 80101f2:	6839      	ldr	r1, [r7, #0]
 80101f4:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 80101f8:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 80101fc:	f002 f9ce 	bl	801259c <udp_send>
 8010200:	9803      	ldr	r0, [sp, #12]
 8010202:	e7cc      	b.n	801019e <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 8010204:	9a03      	ldr	r2, [sp, #12]
 8010206:	4628      	mov	r0, r5
 8010208:	42b2      	cmp	r2, r6
 801020a:	bf28      	it	cs
 801020c:	4632      	movcs	r2, r6
 801020e:	6839      	ldr	r1, [r7, #0]
 8010210:	f005 fc99 	bl	8015b46 <memmove>
 8010214:	e7f4      	b.n	8010200 <RemoteConfig::HandleGet(void*, unsigned int)+0x9c>
 8010216:	bf00      	nop
 8010218:	20013ddc 	ldrdcs	r3, [r1], -ip
 801021c:	08018adf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r9, fp, pc}
 8010220:	08018d7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, fp, pc}

08010224 <RemoteConfig::HandleGetNoParams()>:
 8010224:	2200      	movs	r2, #0
 8010226:	4611      	mov	r1, r2
 8010228:	f7ff bf9c 	b.w	8010164 <RemoteConfig::HandleGet(void*, unsigned int)>

0801022c <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 801022c:	b510      	push	{r4, lr}
 801022e:	460c      	mov	r4, r1
 8010230:	4b07      	ldr	r3, [pc, #28]	; (8010250 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x24>)
 8010232:	b08a      	sub	sp, #40	; 0x28
 8010234:	6819      	ldr	r1, [r3, #0]
 8010236:	a801      	add	r0, sp, #4
 8010238:	f000 f9fc 	bl	8010634 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 801023c:	4905      	ldr	r1, [pc, #20]	; (8010254 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 801023e:	4623      	mov	r3, r4
 8010240:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010244:	6809      	ldr	r1, [r1, #0]
 8010246:	a801      	add	r0, sp, #4
 8010248:	f000 fb18 	bl	801087c <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 801024c:	b00a      	add	sp, #40	; 0x28
 801024e:	bd10      	pop	{r4, pc}
 8010250:	20014e34 	andcs	r4, r1, r4, lsr lr
 8010254:	20013ddc 	ldrdcs	r3, [r1], -ip

08010258 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 8010258:	b513      	push	{r0, r1, r4, lr}
 801025a:	460c      	mov	r4, r1
 801025c:	4b07      	ldr	r3, [pc, #28]	; (801027c <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x24>)
 801025e:	a801      	add	r0, sp, #4
 8010260:	6819      	ldr	r1, [r3, #0]
 8010262:	f003 f979 	bl	8013558 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 8010266:	4906      	ldr	r1, [pc, #24]	; (8010280 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 8010268:	4623      	mov	r3, r4
 801026a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801026e:	6809      	ldr	r1, [r1, #0]
 8010270:	a801      	add	r0, sp, #4
 8010272:	f003 fbe1 	bl	8013a38 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 8010276:	b002      	add	sp, #8
 8010278:	bd10      	pop	{r4, pc}
 801027a:	bf00      	nop
 801027c:	20014e2c 	andcs	r4, r1, ip, lsr #28
 8010280:	20013ddc 	ldrdcs	r3, [r1], -ip

08010284 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
 8010284:	b510      	push	{r4, lr}
 8010286:	460c      	mov	r4, r1
 8010288:	4b07      	ldr	r3, [pc, #28]	; (80102a8 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x24>)
 801028a:	b0a4      	sub	sp, #144	; 0x90
 801028c:	6819      	ldr	r1, [r3, #0]
 801028e:	a801      	add	r0, sp, #4
 8010290:	f7fb fab6 	bl	800b800 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8010294:	4905      	ldr	r1, [pc, #20]	; (80102ac <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x28>)
 8010296:	4623      	mov	r3, r4
 8010298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801029c:	6809      	ldr	r1, [r1, #0]
 801029e:	a801      	add	r0, sp, #4
 80102a0:	f7fb fe78 	bl	800bf94 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
 80102a4:	b024      	add	sp, #144	; 0x90
 80102a6:	bd10      	pop	{r4, pc}
 80102a8:	20014e24 	andcs	r4, r1, r4, lsr #28
 80102ac:	20013ddc 	ldrdcs	r3, [r1], -ip

080102b0 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)>:
 80102b0:	b510      	push	{r4, lr}
 80102b2:	460c      	mov	r4, r1
 80102b4:	4b07      	ldr	r3, [pc, #28]	; (80102d4 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x24>)
 80102b6:	b08c      	sub	sp, #48	; 0x30
 80102b8:	6819      	ldr	r1, [r3, #0]
 80102ba:	a801      	add	r0, sp, #4
 80102bc:	f7fe fb4a 	bl	800e954 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 80102c0:	4905      	ldr	r1, [pc, #20]	; (80102d8 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x28>)
 80102c2:	4623      	mov	r3, r4
 80102c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80102c8:	6809      	ldr	r1, [r1, #0]
 80102ca:	a801      	add	r0, sp, #4
 80102cc:	f7fe fdfc 	bl	800eec8 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)>
 80102d0:	b00c      	add	sp, #48	; 0x30
 80102d2:	bd10      	pop	{r4, pc}
 80102d4:	20014e38 	andcs	r4, r1, r8, lsr lr
 80102d8:	20013ddc 	ldrdcs	r3, [r1], -ip

080102dc <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 80102dc:	b510      	push	{r4, lr}
 80102de:	460c      	mov	r4, r1
 80102e0:	4b07      	ldr	r3, [pc, #28]	; (8010300 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x24>)
 80102e2:	b08a      	sub	sp, #40	; 0x28
 80102e4:	6819      	ldr	r1, [r3, #0]
 80102e6:	4668      	mov	r0, sp
 80102e8:	f004 f95c 	bl	80145a4 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 80102ec:	4905      	ldr	r1, [pc, #20]	; (8010304 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 80102ee:	4623      	mov	r3, r4
 80102f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80102f4:	4668      	mov	r0, sp
 80102f6:	6809      	ldr	r1, [r1, #0]
 80102f8:	f004 fa8c 	bl	8014814 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 80102fc:	b00a      	add	sp, #40	; 0x28
 80102fe:	bd10      	pop	{r4, pc}
 8010300:	20014e28 	andcs	r4, r1, r8, lsr #28
 8010304:	20013ddc 	ldrdcs	r3, [r1], -ip

08010308 <RemoteConfig::HandleSet(void*, unsigned int)>:
 8010308:	b530      	push	{r4, r5, lr}
 801030a:	b085      	sub	sp, #20
 801030c:	4604      	mov	r4, r0
 801030e:	9201      	str	r2, [sp, #4]
 8010310:	b9d1      	cbnz	r1, 8010348 <RemoteConfig::HandleSet(void*, unsigned int)+0x40>
 8010312:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8010316:	9303      	str	r3, [sp, #12]
 8010318:	4b1b      	ldr	r3, [pc, #108]	; (8010388 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 801031a:	aa03      	add	r2, sp, #12
 801031c:	6819      	ldr	r1, [r3, #0]
 801031e:	3101      	adds	r1, #1
 8010320:	f000 fb32 	bl	8010988 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 8010324:	2800      	cmp	r0, #0
 8010326:	db0d      	blt.n	8010344 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 8010328:	221c      	movs	r2, #28
 801032a:	4b18      	ldr	r3, [pc, #96]	; (801038c <RemoteConfig::HandleSet(void*, unsigned int)+0x84>)
 801032c:	fb02 3300 	mla	r3, r2, r0, r3
 8010330:	68da      	ldr	r2, [r3, #12]
 8010332:	689b      	ldr	r3, [r3, #8]
 8010334:	1051      	asrs	r1, r2, #1
 8010336:	eb04 0062 	add.w	r0, r4, r2, asr #1
 801033a:	07d2      	lsls	r2, r2, #31
 801033c:	bf44      	itt	mi
 801033e:	5862      	ldrmi	r2, [r4, r1]
 8010340:	58d3      	ldrmi	r3, [r2, r3]
 8010342:	4798      	blx	r3
 8010344:	b005      	add	sp, #20
 8010346:	bd30      	pop	{r4, r5, pc}
 8010348:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801034c:	4613      	mov	r3, r2
 801034e:	d8f9      	bhi.n	8010344 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 8010350:	2200      	movs	r2, #0
 8010352:	460d      	mov	r5, r1
 8010354:	490e      	ldr	r1, [pc, #56]	; (8010390 <RemoteConfig::HandleSet(void*, unsigned int)+0x88>)
 8010356:	f8c0 25e8 	str.w	r2, [r0, #1512]	; 0x5e8
 801035a:	7809      	ldrb	r1, [r1, #0]
 801035c:	07c9      	lsls	r1, r1, #31
 801035e:	d50a      	bpl.n	8010376 <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 8010360:	7829      	ldrb	r1, [r5, #0]
 8010362:	297b      	cmp	r1, #123	; 0x7b
 8010364:	d107      	bne.n	8010376 <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 8010366:	3b01      	subs	r3, #1
 8010368:	b299      	uxth	r1, r3
 801036a:	4628      	mov	r0, r5
 801036c:	f004 fbca 	bl	8014b04 <properties::convert_json_file(char*, unsigned short, bool)>
 8010370:	1e03      	subs	r3, r0, #0
 8010372:	dde7      	ble.n	8010344 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 8010374:	b29b      	uxth	r3, r3
 8010376:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 801037a:	4b03      	ldr	r3, [pc, #12]	; (8010388 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 801037c:	4620      	mov	r0, r4
 801037e:	601d      	str	r5, [r3, #0]
 8010380:	aa01      	add	r2, sp, #4
 8010382:	1c69      	adds	r1, r5, #1
 8010384:	e7cc      	b.n	8010320 <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 8010386:	bf00      	nop
 8010388:	20013ddc 	ldrdcs	r3, [r1], -ip
 801038c:	08018d7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, fp, pc}
 8010390:	2001cd58 	andcs	ip, r1, r8, asr sp

08010394 <RemoteConfig::Run()>:
 8010394:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8010398:	f890 55d4 	ldrb.w	r5, [r0, #1492]	; 0x5d4
 801039c:	2d00      	cmp	r5, #0
 801039e:	d15d      	bne.n	801045c <RemoteConfig::Run()+0xc8>
 80103a0:	4604      	mov	r4, r0
 80103a2:	4e4a      	ldr	r6, [pc, #296]	; (80104cc <RemoteConfig::Run()+0x138>)
 80103a4:	300c      	adds	r0, #12
 80103a6:	f000 fdf3 	bl	8010f90 <HttpDaemon::Run()>
 80103aa:	4631      	mov	r1, r6
 80103ac:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 80103b0:	f10d 030e 	add.w	r3, sp, #14
 80103b4:	f504 62bc 	add.w	r2, r4, #1504	; 0x5e0
 80103b8:	f002 f8ca 	bl	8012550 <udp_recv2>
 80103bc:	2803      	cmp	r0, #3
 80103be:	f8c4 05e4 	str.w	r0, [r4, #1508]	; 0x5e4
 80103c2:	d94b      	bls.n	801045c <RemoteConfig::Run()+0xc8>
 80103c4:	6831      	ldr	r1, [r6, #0]
 80103c6:	1e43      	subs	r3, r0, #1
 80103c8:	5cca      	ldrb	r2, [r1, r3]
 80103ca:	2a0a      	cmp	r2, #10
 80103cc:	bf18      	it	ne
 80103ce:	4603      	movne	r3, r0
 80103d0:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 80103d4:	7808      	ldrb	r0, [r1, #0]
 80103d6:	283f      	cmp	r0, #63	; 0x3f
 80103d8:	d135      	bne.n	8010446 <RemoteConfig::Run()+0xb2>
 80103da:	483d      	ldr	r0, [pc, #244]	; (80104d0 <RemoteConfig::Run()+0x13c>)
 80103dc:	462a      	mov	r2, r5
 80103de:	4607      	mov	r7, r0
 80103e0:	3b01      	subs	r3, #1
 80103e2:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 80103e6:	7b86      	ldrb	r6, [r0, #14]
 80103e8:	8985      	ldrh	r5, [r0, #12]
 80103ea:	b176      	cbz	r6, 801040a <RemoteConfig::Run()+0x76>
 80103ec:	42ab      	cmp	r3, r5
 80103ee:	d80e      	bhi.n	801040e <RemoteConfig::Run()+0x7a>
 80103f0:	3201      	adds	r2, #1
 80103f2:	2a09      	cmp	r2, #9
 80103f4:	f100 0010 	add.w	r0, r0, #16
 80103f8:	d1f5      	bne.n	80103e6 <RemoteConfig::Run()+0x52>
 80103fa:	f642 1305 	movw	r3, #10501	; 0x2905
 80103fe:	9300      	str	r3, [sp, #0]
 8010400:	2208      	movs	r2, #8
 8010402:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 8010406:	4933      	ldr	r1, [pc, #204]	; (80104d4 <RemoteConfig::Run()+0x140>)
 8010408:	e052      	b.n	80104b0 <RemoteConfig::Run()+0x11c>
 801040a:	42ab      	cmp	r3, r5
 801040c:	d1f0      	bne.n	80103f0 <RemoteConfig::Run()+0x5c>
 801040e:	6886      	ldr	r6, [r0, #8]
 8010410:	f101 0c01 	add.w	ip, r1, #1
 8010414:	4435      	add	r5, r6
 8010416:	42b5      	cmp	r5, r6
 8010418:	d10b      	bne.n	8010432 <RemoteConfig::Run()+0x9e>
 801041a:	0113      	lsls	r3, r2, #4
 801041c:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 8010420:	6852      	ldr	r2, [r2, #4]
 8010422:	58fb      	ldr	r3, [r7, r3]
 8010424:	1051      	asrs	r1, r2, #1
 8010426:	eb04 0062 	add.w	r0, r4, r2, asr #1
 801042a:	07d2      	lsls	r2, r2, #31
 801042c:	d408      	bmi.n	8010440 <RemoteConfig::Run()+0xac>
 801042e:	4798      	blx	r3
 8010430:	e014      	b.n	801045c <RemoteConfig::Run()+0xc8>
 8010432:	f81c 8b01 	ldrb.w	r8, [ip], #1
 8010436:	f816 eb01 	ldrb.w	lr, [r6], #1
 801043a:	45f0      	cmp	r8, lr
 801043c:	d0eb      	beq.n	8010416 <RemoteConfig::Run()+0x82>
 801043e:	e7d7      	b.n	80103f0 <RemoteConfig::Run()+0x5c>
 8010440:	5862      	ldr	r2, [r4, r1]
 8010442:	58d3      	ldr	r3, [r2, r3]
 8010444:	e7f3      	b.n	801042e <RemoteConfig::Run()+0x9a>
 8010446:	f894 25d5 	ldrb.w	r2, [r4, #1493]	; 0x5d5
 801044a:	b93a      	cbnz	r2, 801045c <RemoteConfig::Run()+0xc8>
 801044c:	2823      	cmp	r0, #35	; 0x23
 801044e:	d108      	bne.n	8010462 <RemoteConfig::Run()+0xce>
 8010450:	4611      	mov	r1, r2
 8010452:	4620      	mov	r0, r4
 8010454:	f8c4 25e8 	str.w	r2, [r4, #1512]	; 0x5e8
 8010458:	f7ff ff56 	bl	8010308 <RemoteConfig::HandleSet(void*, unsigned int)>
 801045c:	b004      	add	sp, #16
 801045e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010462:	2821      	cmp	r0, #33	; 0x21
 8010464:	d1fa      	bne.n	801045c <RemoteConfig::Run()+0xc8>
 8010466:	3b01      	subs	r3, #1
 8010468:	2b05      	cmp	r3, #5
 801046a:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 801046e:	d918      	bls.n	80104a2 <RemoteConfig::Run()+0x10e>
 8010470:	1c4a      	adds	r2, r1, #1
 8010472:	4610      	mov	r0, r2
 8010474:	4d18      	ldr	r5, [pc, #96]	; (80104d8 <RemoteConfig::Run()+0x144>)
 8010476:	f101 0c06 	add.w	ip, r1, #6
 801047a:	4560      	cmp	r0, ip
 801047c:	d01d      	beq.n	80104ba <RemoteConfig::Run()+0x126>
 801047e:	f810 7b01 	ldrb.w	r7, [r0], #1
 8010482:	f815 6b01 	ldrb.w	r6, [r5], #1
 8010486:	42b7      	cmp	r7, r6
 8010488:	d0f7      	beq.n	801047a <RemoteConfig::Run()+0xe6>
 801048a:	2b08      	cmp	r3, #8
 801048c:	d909      	bls.n	80104a2 <RemoteConfig::Run()+0x10e>
 801048e:	4b13      	ldr	r3, [pc, #76]	; (80104dc <RemoteConfig::Run()+0x148>)
 8010490:	3109      	adds	r1, #9
 8010492:	428a      	cmp	r2, r1
 8010494:	d017      	beq.n	80104c6 <RemoteConfig::Run()+0x132>
 8010496:	f812 5b01 	ldrb.w	r5, [r2], #1
 801049a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801049e:	4285      	cmp	r5, r0
 80104a0:	d0f7      	beq.n	8010492 <RemoteConfig::Run()+0xfe>
 80104a2:	f642 1305 	movw	r3, #10501	; 0x2905
 80104a6:	2208      	movs	r2, #8
 80104a8:	9300      	str	r3, [sp, #0]
 80104aa:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 80104ae:	490c      	ldr	r1, [pc, #48]	; (80104e0 <RemoteConfig::Run()+0x14c>)
 80104b0:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 80104b4:	f002 f872 	bl	801259c <udp_send>
 80104b8:	e7d0      	b.n	801045c <RemoteConfig::Run()+0xc8>
 80104ba:	2300      	movs	r3, #0
 80104bc:	4a09      	ldr	r2, [pc, #36]	; (80104e4 <RemoteConfig::Run()+0x150>)
 80104be:	011b      	lsls	r3, r3, #4
 80104c0:	4620      	mov	r0, r4
 80104c2:	58d3      	ldr	r3, [r2, r3]
 80104c4:	e7b3      	b.n	801042e <RemoteConfig::Run()+0x9a>
 80104c6:	2301      	movs	r3, #1
 80104c8:	e7f8      	b.n	80104bc <RemoteConfig::Run()+0x128>
 80104ca:	bf00      	nop
 80104cc:	20013ddc 	ldrdcs	r3, [r1], -ip
 80104d0:	08018c74 	stmdaeq	r1, {r2, r4, r5, r6, sl, fp, pc}
 80104d4:	08018b03 	stmdaeq	r1, {r0, r1, r8, r9, fp, pc}
 80104d8:	08018aeb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r9, fp, pc}
 80104dc:	08018af1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, fp, pc}
 80104e0:	08018afa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, fp, pc}
 80104e4:	08018d04 	stmdaeq	r1, {r2, r8, sl, fp, pc}

080104e8 <RemoteConfig::HandleSetRconfig()>:
 80104e8:	b510      	push	{r4, lr}
 80104ea:	4604      	mov	r4, r0
 80104ec:	4b09      	ldr	r3, [pc, #36]	; (8010514 <RemoteConfig::HandleSetRconfig()+0x2c>)
 80104ee:	b08a      	sub	sp, #40	; 0x28
 80104f0:	6819      	ldr	r1, [r3, #0]
 80104f2:	a801      	add	r0, sp, #4
 80104f4:	f000 f89e 	bl	8010634 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 80104f8:	4b07      	ldr	r3, [pc, #28]	; (8010518 <RemoteConfig::HandleSetRconfig()+0x30>)
 80104fa:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 80104fe:	6819      	ldr	r1, [r3, #0]
 8010500:	a801      	add	r0, sp, #4
 8010502:	f000 f8ad 	bl	8010660 <RemoteConfigParams::Load(char const*, unsigned int)>
 8010506:	4621      	mov	r1, r4
 8010508:	a801      	add	r0, sp, #4
 801050a:	f000 f9c4 	bl	8010896 <RemoteConfigParams::Set(RemoteConfig*)>
 801050e:	b00a      	add	sp, #40	; 0x28
 8010510:	bd10      	pop	{r4, pc}
 8010512:	bf00      	nop
 8010514:	20014e34 	andcs	r4, r1, r4, lsr lr
 8010518:	20013ddc 	ldrdcs	r3, [r1], -ip

0801051c <RemoteConfig::HandleSetNetworkTxt()>:
 801051c:	b513      	push	{r0, r1, r4, lr}
 801051e:	4604      	mov	r4, r0
 8010520:	4b06      	ldr	r3, [pc, #24]	; (801053c <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 8010522:	a801      	add	r0, sp, #4
 8010524:	6819      	ldr	r1, [r3, #0]
 8010526:	f003 f817 	bl	8013558 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 801052a:	4b05      	ldr	r3, [pc, #20]	; (8010540 <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 801052c:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 8010530:	6819      	ldr	r1, [r3, #0]
 8010532:	a801      	add	r0, sp, #4
 8010534:	f003 f830 	bl	8013598 <NetworkParams::Load(char const*, unsigned int)>
 8010538:	b002      	add	sp, #8
 801053a:	bd10      	pop	{r4, pc}
 801053c:	20014e2c 	andcs	r4, r1, ip, lsr #28
 8010540:	20013ddc 	ldrdcs	r3, [r1], -ip

08010544 <RemoteConfig::HandleSetArtnetTxt()>:
 8010544:	b510      	push	{r4, lr}
 8010546:	4604      	mov	r4, r0
 8010548:	4b07      	ldr	r3, [pc, #28]	; (8010568 <RemoteConfig::HandleSetArtnetTxt()+0x24>)
 801054a:	b0a4      	sub	sp, #144	; 0x90
 801054c:	6819      	ldr	r1, [r3, #0]
 801054e:	a801      	add	r0, sp, #4
 8010550:	f7fb f956 	bl	800b800 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8010554:	4b05      	ldr	r3, [pc, #20]	; (801056c <RemoteConfig::HandleSetArtnetTxt()+0x28>)
 8010556:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 801055a:	6819      	ldr	r1, [r3, #0]
 801055c:	a801      	add	r0, sp, #4
 801055e:	f7fb f981 	bl	800b864 <ArtNetParams::Load(char const*, unsigned int)>
 8010562:	b024      	add	sp, #144	; 0x90
 8010564:	bd10      	pop	{r4, pc}
 8010566:	bf00      	nop
 8010568:	20014e24 	andcs	r4, r1, r4, lsr #28
 801056c:	20013ddc 	ldrdcs	r3, [r1], -ip

08010570 <RemoteConfig::HandleSetDevicesTxt()>:
 8010570:	b510      	push	{r4, lr}
 8010572:	4604      	mov	r4, r0
 8010574:	4b07      	ldr	r3, [pc, #28]	; (8010594 <RemoteConfig::HandleSetDevicesTxt()+0x24>)
 8010576:	b08c      	sub	sp, #48	; 0x30
 8010578:	6819      	ldr	r1, [r3, #0]
 801057a:	a801      	add	r0, sp, #4
 801057c:	f7fe f9ea 	bl	800e954 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 8010580:	4b05      	ldr	r3, [pc, #20]	; (8010598 <RemoteConfig::HandleSetDevicesTxt()+0x28>)
 8010582:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 8010586:	6819      	ldr	r1, [r3, #0]
 8010588:	a801      	add	r0, sp, #4
 801058a:	f7fe fa23 	bl	800e9d4 <WS28xxDmxParams::Load(char const*, unsigned int)>
 801058e:	b00c      	add	sp, #48	; 0x30
 8010590:	bd10      	pop	{r4, pc}
 8010592:	bf00      	nop
 8010594:	20014e38 	andcs	r4, r1, r8, lsr lr
 8010598:	20013ddc 	ldrdcs	r3, [r1], -ip

0801059c <RemoteConfig::HandleSetDisplayTxt()>:
 801059c:	b510      	push	{r4, lr}
 801059e:	4604      	mov	r4, r0
 80105a0:	4b07      	ldr	r3, [pc, #28]	; (80105c0 <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 80105a2:	b08a      	sub	sp, #40	; 0x28
 80105a4:	6819      	ldr	r1, [r3, #0]
 80105a6:	4668      	mov	r0, sp
 80105a8:	f003 fffc 	bl	80145a4 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 80105ac:	4b05      	ldr	r3, [pc, #20]	; (80105c4 <RemoteConfig::HandleSetDisplayTxt()+0x28>)
 80105ae:	4668      	mov	r0, sp
 80105b0:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 80105b4:	6819      	ldr	r1, [r3, #0]
 80105b6:	f004 f80f 	bl	80145d8 <DisplayUdfParams::Load(char const*, unsigned int)>
 80105ba:	b00a      	add	sp, #40	; 0x28
 80105bc:	bd10      	pop	{r4, pc}
 80105be:	bf00      	nop
 80105c0:	20014e28 	andcs	r4, r1, r8, lsr #28
 80105c4:	20013ddc 	ldrdcs	r3, [r1], -ip

080105c8 <RemoteConfig::HandleFactory()>:
 80105c8:	b538      	push	{r3, r4, r5, lr}
 80105ca:	2400      	movs	r4, #0
 80105cc:	4d04      	ldr	r5, [pc, #16]	; (80105e0 <RemoteConfig::HandleFactory()+0x18>)
 80105ce:	4621      	mov	r1, r4
 80105d0:	6828      	ldr	r0, [r5, #0]
 80105d2:	3401      	adds	r4, #1
 80105d4:	f000 ff12 	bl	80113fc <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 80105d8:	2c1c      	cmp	r4, #28
 80105da:	d1f8      	bne.n	80105ce <RemoteConfig::HandleFactory()+0x6>
 80105dc:	bd38      	pop	{r3, r4, r5, pc}
 80105de:	bf00      	nop
 80105e0:	20014e1c 	andcs	r4, r1, ip, lsl lr

080105e4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 80105e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105e6:	460b      	mov	r3, r1
 80105e8:	8885      	ldrh	r5, [r0, #4]
 80105ea:	88c1      	ldrh	r1, [r0, #6]
 80105ec:	42a9      	cmp	r1, r5
 80105ee:	d214      	bcs.n	801061a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 80105f0:	4604      	mov	r4, r0
 80105f2:	6800      	ldr	r0, [r0, #0]
 80105f4:	1a6d      	subs	r5, r5, r1
 80105f6:	4408      	add	r0, r1
 80105f8:	7a21      	ldrb	r1, [r4, #8]
 80105fa:	b91a      	cbnz	r2, 8010604 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 80105fc:	b919      	cbnz	r1, 8010606 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 80105fe:	4a0a      	ldr	r2, [pc, #40]	; (8010628 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 8010600:	9100      	str	r1, [sp, #0]
 8010602:	e002      	b.n	801060a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 8010604:	b159      	cbz	r1, 801061e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 8010606:	9200      	str	r2, [sp, #0]
 8010608:	4a08      	ldr	r2, [pc, #32]	; (801062c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 801060a:	4629      	mov	r1, r5
 801060c:	f7f9 f8ce 	bl	80097ac <snprintf>
 8010610:	4285      	cmp	r5, r0
 8010612:	bfa2      	ittt	ge
 8010614:	88e3      	ldrhge	r3, [r4, #6]
 8010616:	181b      	addge	r3, r3, r0
 8010618:	80e3      	strhge	r3, [r4, #6]
 801061a:	b003      	add	sp, #12
 801061c:	bd30      	pop	{r4, r5, pc}
 801061e:	2201      	movs	r2, #1
 8010620:	9200      	str	r2, [sp, #0]
 8010622:	4a03      	ldr	r2, [pc, #12]	; (8010630 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 8010624:	e7f1      	b.n	801060a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 8010626:	bf00      	nop
 8010628:	080180d1 	stmdaeq	r1, {r0, r4, r6, r7, pc}
 801062c:	080180c8 	stmdaeq	r1, {r3, r6, r7, pc}
 8010630:	080180d2 	stmdaeq	r1, {r1, r4, r6, r7, pc}

08010634 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 8010634:	b510      	push	{r4, lr}
 8010636:	4604      	mov	r4, r0
 8010638:	2220      	movs	r2, #32
 801063a:	f840 1b04 	str.w	r1, [r0], #4
 801063e:	2100      	movs	r1, #0
 8010640:	f005 fa98 	bl	8015b74 <memset>
 8010644:	4620      	mov	r0, r4
 8010646:	bd10      	pop	{r4, pc}

08010648 <RemoteConfigParams::Load()>:
 8010648:	b508      	push	{r3, lr}
 801064a:	2300      	movs	r3, #0
 801064c:	4601      	mov	r1, r0
 801064e:	6043      	str	r3, [r0, #4]
 8010650:	6800      	ldr	r0, [r0, #0]
 8010652:	b120      	cbz	r0, 801065e <RemoteConfigParams::Load()+0x16>
 8010654:	6803      	ldr	r3, [r0, #0]
 8010656:	3104      	adds	r1, #4
 8010658:	68db      	ldr	r3, [r3, #12]
 801065a:	4798      	blx	r3
 801065c:	2001      	movs	r0, #1
 801065e:	bd08      	pop	{r3, pc}

08010660 <RemoteConfigParams::Load(char const*, unsigned int)>:
 8010660:	2300      	movs	r3, #0
 8010662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010664:	460d      	mov	r5, r1
 8010666:	4616      	mov	r6, r2
 8010668:	4604      	mov	r4, r0
 801066a:	6043      	str	r3, [r0, #4]
 801066c:	4602      	mov	r2, r0
 801066e:	490a      	ldr	r1, [pc, #40]	; (8010698 <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 8010670:	4668      	mov	r0, sp
 8010672:	f004 fbc9 	bl	8014e08 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8010676:	4632      	mov	r2, r6
 8010678:	4629      	mov	r1, r5
 801067a:	4668      	mov	r0, sp
 801067c:	f004 fbc8 	bl	8014e10 <ReadConfigFile::Read(char const*, unsigned int)>
 8010680:	4621      	mov	r1, r4
 8010682:	f851 0b04 	ldr.w	r0, [r1], #4
 8010686:	6803      	ldr	r3, [r0, #0]
 8010688:	689b      	ldr	r3, [r3, #8]
 801068a:	4798      	blx	r3
 801068c:	4668      	mov	r0, sp
 801068e:	f004 fbbe 	bl	8014e0e <ReadConfigFile::~ReadConfigFile()>
 8010692:	b002      	add	sp, #8
 8010694:	bd70      	pop	{r4, r5, r6, pc}
 8010696:	bf00      	nop
 8010698:	08010759 	stmdaeq	r1, {r0, r3, r4, r6, r8, r9, sl}

0801069c <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 801069c:	6843      	ldr	r3, [r0, #4]
 801069e:	b111      	cbz	r1, 80106a6 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 80106a0:	4313      	orrs	r3, r2
 80106a2:	6043      	str	r3, [r0, #4]
 80106a4:	4770      	bx	lr
 80106a6:	ea23 0302 	bic.w	r3, r3, r2
 80106aa:	e7fa      	b.n	80106a2 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

080106ac <RemoteConfigParams::callbackFunction(char const*)>:
 80106ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106ae:	460d      	mov	r5, r1
 80106b0:	4604      	mov	r4, r0
 80106b2:	4923      	ldr	r1, [pc, #140]	; (8010740 <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 80106b4:	4628      	mov	r0, r5
 80106b6:	f10d 0203 	add.w	r2, sp, #3
 80106ba:	f004 fd0b 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80106be:	b940      	cbnz	r0, 80106d2 <RemoteConfigParams::callbackFunction(char const*)+0x26>
 80106c0:	2201      	movs	r2, #1
 80106c2:	4620      	mov	r0, r4
 80106c4:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80106c8:	b003      	add	sp, #12
 80106ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106ce:	f7ff bfe5 	b.w	801069c <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 80106d2:	4628      	mov	r0, r5
 80106d4:	491b      	ldr	r1, [pc, #108]	; (8010744 <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 80106d6:	f10d 0203 	add.w	r2, sp, #3
 80106da:	f004 fcfb 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80106de:	b908      	cbnz	r0, 80106e4 <RemoteConfigParams::callbackFunction(char const*)+0x38>
 80106e0:	2202      	movs	r2, #2
 80106e2:	e7ee      	b.n	80106c2 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 80106e4:	4628      	mov	r0, r5
 80106e6:	4918      	ldr	r1, [pc, #96]	; (8010748 <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 80106e8:	f10d 0203 	add.w	r2, sp, #3
 80106ec:	f004 fcf2 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80106f0:	b908      	cbnz	r0, 80106f6 <RemoteConfigParams::callbackFunction(char const*)+0x4a>
 80106f2:	2204      	movs	r2, #4
 80106f4:	e7e5      	b.n	80106c2 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 80106f6:	4628      	mov	r0, r5
 80106f8:	4914      	ldr	r1, [pc, #80]	; (801074c <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 80106fa:	f10d 0203 	add.w	r2, sp, #3
 80106fe:	f004 fce9 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010702:	b908      	cbnz	r0, 8010708 <RemoteConfigParams::callbackFunction(char const*)+0x5c>
 8010704:	2208      	movs	r2, #8
 8010706:	e7dc      	b.n	80106c2 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 8010708:	4628      	mov	r0, r5
 801070a:	4911      	ldr	r1, [pc, #68]	; (8010750 <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 801070c:	f10d 0203 	add.w	r2, sp, #3
 8010710:	f004 fce0 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010714:	b908      	cbnz	r0, 801071a <RemoteConfigParams::callbackFunction(char const*)+0x6e>
 8010716:	2220      	movs	r2, #32
 8010718:	e7d3      	b.n	80106c2 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 801071a:	2317      	movs	r3, #23
 801071c:	4628      	mov	r0, r5
 801071e:	9301      	str	r3, [sp, #4]
 8010720:	490c      	ldr	r1, [pc, #48]	; (8010754 <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 8010722:	ab01      	add	r3, sp, #4
 8010724:	f104 020c 	add.w	r2, r4, #12
 8010728:	f004 fba6 	bl	8014e78 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 801072c:	b930      	cbnz	r0, 801073c <RemoteConfigParams::callbackFunction(char const*)+0x90>
 801072e:	9b01      	ldr	r3, [sp, #4]
 8010730:	4423      	add	r3, r4
 8010732:	7318      	strb	r0, [r3, #12]
 8010734:	6863      	ldr	r3, [r4, #4]
 8010736:	f043 0310 	orr.w	r3, r3, #16
 801073a:	6063      	str	r3, [r4, #4]
 801073c:	b003      	add	sp, #12
 801073e:	bd30      	pop	{r4, r5, pc}
 8010740:	080190e2 	stmdaeq	r1, {r1, r5, r6, r7, ip, pc}
 8010744:	08019103 	stmdaeq	r1, {r0, r1, r8, ip, pc}
 8010748:	08019111 	stmdaeq	r1, {r0, r4, r8, ip, pc}
 801074c:	0801911f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, ip, pc}
 8010750:	0801912d 	stmdaeq	r1, {r0, r2, r3, r5, r8, ip, pc}
 8010754:	080190f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, ip, pc}

08010758 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 8010758:	f7ff bfa8 	b.w	80106ac <RemoteConfigParams::callbackFunction(char const*)>

0801075c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 801075c:	b570      	push	{r4, r5, r6, lr}
 801075e:	4604      	mov	r4, r0
 8010760:	4615      	mov	r5, r2
 8010762:	461e      	mov	r6, r3
 8010764:	b086      	sub	sp, #24
 8010766:	3004      	adds	r0, #4
 8010768:	2900      	cmp	r1, #0
 801076a:	d041      	beq.n	80107f0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x94>
 801076c:	2220      	movs	r2, #32
 801076e:	f005 f9ea 	bl	8015b46 <memmove>
 8010772:	4633      	mov	r3, r6
 8010774:	462a      	mov	r2, r5
 8010776:	4937      	ldr	r1, [pc, #220]	; (8010854 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 8010778:	a803      	add	r0, sp, #12
 801077a:	f004 fa75 	bl	8014c68 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 801077e:	6862      	ldr	r2, [r4, #4]
 8010780:	4935      	ldr	r1, [pc, #212]	; (8010858 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 8010782:	f002 0201 	and.w	r2, r2, #1
 8010786:	a803      	add	r0, sp, #12
 8010788:	f7ff ff2c 	bl	80105e4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 801078c:	6862      	ldr	r2, [r4, #4]
 801078e:	4933      	ldr	r1, [pc, #204]	; (801085c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 8010790:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8010794:	a803      	add	r0, sp, #12
 8010796:	f7ff ff25 	bl	80105e4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 801079a:	6862      	ldr	r2, [r4, #4]
 801079c:	4930      	ldr	r1, [pc, #192]	; (8010860 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 801079e:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80107a2:	a803      	add	r0, sp, #12
 80107a4:	f7ff ff1e 	bl	80105e4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 80107a8:	6862      	ldr	r2, [r4, #4]
 80107aa:	492e      	ldr	r1, [pc, #184]	; (8010864 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 80107ac:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80107b0:	a803      	add	r0, sp, #12
 80107b2:	f7ff ff17 	bl	80105e4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 80107b6:	6862      	ldr	r2, [r4, #4]
 80107b8:	492b      	ldr	r1, [pc, #172]	; (8010868 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 80107ba:	f3c2 1240 	ubfx	r2, r2, #5, #1
 80107be:	a803      	add	r0, sp, #12
 80107c0:	f7ff ff10 	bl	80105e4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 80107c4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80107c8:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80107cc:	6862      	ldr	r2, [r4, #4]
 80107ce:	42ab      	cmp	r3, r5
 80107d0:	d223      	bcs.n	801081a <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbe>
 80107d2:	9803      	ldr	r0, [sp, #12]
 80107d4:	06d2      	lsls	r2, r2, #27
 80107d6:	4418      	add	r0, r3
 80107d8:	eba5 0503 	sub.w	r5, r5, r3
 80107dc:	f104 040c 	add.w	r4, r4, #12
 80107e0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80107e4:	d40b      	bmi.n	80107fe <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 80107e6:	b95b      	cbnz	r3, 8010800 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa4>
 80107e8:	4b20      	ldr	r3, [pc, #128]	; (801086c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 80107ea:	4a21      	ldr	r2, [pc, #132]	; (8010870 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 80107ec:	9400      	str	r4, [sp, #0]
 80107ee:	e00a      	b.n	8010806 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 80107f0:	6823      	ldr	r3, [r4, #0]
 80107f2:	4601      	mov	r1, r0
 80107f4:	681a      	ldr	r2, [r3, #0]
 80107f6:	4618      	mov	r0, r3
 80107f8:	68d2      	ldr	r2, [r2, #12]
 80107fa:	4790      	blx	r2
 80107fc:	e7b9      	b.n	8010772 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 80107fe:	b32b      	cbz	r3, 801084c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf0>
 8010800:	4b1a      	ldr	r3, [pc, #104]	; (801086c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 8010802:	4a1c      	ldr	r2, [pc, #112]	; (8010874 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 8010804:	9400      	str	r4, [sp, #0]
 8010806:	4629      	mov	r1, r5
 8010808:	f7f8 ffd0 	bl	80097ac <snprintf>
 801080c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010810:	4285      	cmp	r5, r0
 8010812:	bfa4      	itt	ge
 8010814:	181b      	addge	r3, r3, r0
 8010816:	f8ad 3012 	strhge.w	r3, [sp, #18]
 801081a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801081e:	b17b      	cbz	r3, 8010840 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe4>
 8010820:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010824:	9b03      	ldr	r3, [sp, #12]
 8010826:	4413      	add	r3, r2
 8010828:	227d      	movs	r2, #125	; 0x7d
 801082a:	f803 2c01 	strb.w	r2, [r3, #-1]
 801082e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010832:	9903      	ldr	r1, [sp, #12]
 8010834:	54ca      	strb	r2, [r1, r3]
 8010836:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801083a:	3301      	adds	r3, #1
 801083c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010840:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010846:	601a      	str	r2, [r3, #0]
 8010848:	b006      	add	sp, #24
 801084a:	bd70      	pop	{r4, r5, r6, pc}
 801084c:	4b07      	ldr	r3, [pc, #28]	; (801086c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 801084e:	4a0a      	ldr	r2, [pc, #40]	; (8010878 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 8010850:	9400      	str	r4, [sp, #0]
 8010852:	e7d8      	b.n	8010806 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 8010854:	080190ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, ip, pc}
 8010858:	080190e2 	stmdaeq	r1, {r1, r5, r6, r7, ip, pc}
 801085c:	08019103 	stmdaeq	r1, {r0, r1, r8, ip, pc}
 8010860:	08019111 	stmdaeq	r1, {r0, r4, r8, ip, pc}
 8010864:	0801911f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, ip, pc}
 8010868:	0801912d 	stmdaeq	r1, {r0, r2, r3, r5, r8, ip, pc}
 801086c:	080190f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, ip, pc}
 8010870:	080180e4 	stmdaeq	r1, {r2, r5, r6, r7, pc}
 8010874:	080180d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, pc}
 8010878:	080180e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, pc}

0801087c <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 801087c:	b513      	push	{r0, r1, r4, lr}
 801087e:	6804      	ldr	r4, [r0, #0]
 8010880:	b914      	cbnz	r4, 8010888 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8010882:	601c      	str	r4, [r3, #0]
 8010884:	b002      	add	sp, #8
 8010886:	bd10      	pop	{r4, pc}
 8010888:	9300      	str	r3, [sp, #0]
 801088a:	4613      	mov	r3, r2
 801088c:	460a      	mov	r2, r1
 801088e:	2100      	movs	r1, #0
 8010890:	f7ff ff64 	bl	801075c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 8010894:	e7f6      	b.n	8010884 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

08010896 <RemoteConfigParams::Set(RemoteConfig*)>:
 8010896:	b538      	push	{r3, r4, r5, lr}
 8010898:	460c      	mov	r4, r1
 801089a:	4605      	mov	r5, r0
 801089c:	6841      	ldr	r1, [r0, #4]
 801089e:	4620      	mov	r0, r4
 80108a0:	f001 0101 	and.w	r1, r1, #1
 80108a4:	f7ff fc22 	bl	80100ec <RemoteConfig::SetDisable(bool)>
 80108a8:	686b      	ldr	r3, [r5, #4]
 80108aa:	f3c3 0240 	ubfx	r2, r3, #1, #1
 80108ae:	f884 25d5 	strb.w	r2, [r4, #1493]	; 0x5d5
 80108b2:	f3c3 0280 	ubfx	r2, r3, #2, #1
 80108b6:	f884 25d6 	strb.w	r2, [r4, #1494]	; 0x5d6
 80108ba:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 80108be:	f884 25d7 	strb.w	r2, [r4, #1495]	; 0x5d7
 80108c2:	f3c3 1240 	ubfx	r2, r3, #5, #1
 80108c6:	06db      	lsls	r3, r3, #27
 80108c8:	f884 25d8 	strb.w	r2, [r4, #1496]	; 0x5d8
 80108cc:	d506      	bpl.n	80108dc <RemoteConfigParams::Set(RemoteConfig*)+0x46>
 80108ce:	4620      	mov	r0, r4
 80108d0:	f105 010c 	add.w	r1, r5, #12
 80108d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108d8:	f7ff bc2c 	b.w	8010134 <RemoteConfig::SetDisplayName(char const*)>
 80108dc:	bd38      	pop	{r3, r4, r5, pc}

080108de <RemoteConfigParams::Dump()>:
 80108de:	4770      	bx	lr

080108e0 <RemoteConfig::HandleReboot()>:
 80108e0:	f890 35d6 	ldrb.w	r3, [r0, #1494]	; 0x5d6
 80108e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d03d      	beq.n	8010966 <RemoteConfig::HandleReboot()+0x86>
 80108ea:	2301      	movs	r3, #1
 80108ec:	4c1f      	ldr	r4, [pc, #124]	; (801096c <RemoteConfig::HandleReboot()+0x8c>)
 80108ee:	f880 35d9 	strb.w	r3, [r0, #1497]	; 0x5d9
 80108f2:	6825      	ldr	r5, [r4, #0]
 80108f4:	69a8      	ldr	r0, [r5, #24]
 80108f6:	b138      	cbz	r0, 8010908 <RemoteConfig::HandleReboot()+0x28>
 80108f8:	2100      	movs	r1, #0
 80108fa:	6803      	ldr	r3, [r0, #0]
 80108fc:	7429      	strb	r1, [r5, #16]
 80108fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010900:	4798      	blx	r3
 8010902:	4b1b      	ldr	r3, [pc, #108]	; (8010970 <RemoteConfig::HandleReboot()+0x90>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	606b      	str	r3, [r5, #4]
 8010908:	4d1a      	ldr	r5, [pc, #104]	; (8010974 <RemoteConfig::HandleReboot()+0x94>)
 801090a:	6828      	ldr	r0, [r5, #0]
 801090c:	f000 fdf2 	bl	80114f4 <SpiFlashStore::Flash()>
 8010910:	2800      	cmp	r0, #0
 8010912:	d1fa      	bne.n	801090a <RemoteConfig::HandleReboot()+0x2a>
 8010914:	4b18      	ldr	r3, [pc, #96]	; (8010978 <RemoteConfig::HandleReboot()+0x98>)
 8010916:	6818      	ldr	r0, [r3, #0]
 8010918:	f002 fafe 	bl	8012f18 <Network::Shutdown()>
 801091c:	4817      	ldr	r0, [pc, #92]	; (801097c <RemoteConfig::HandleReboot()+0x9c>)
 801091e:	f7f8 ff1d 	bl	800975c <printf>
 8010922:	6823      	ldr	r3, [r4, #0]
 8010924:	6998      	ldr	r0, [r3, #24]
 8010926:	b110      	cbz	r0, 801092e <RemoteConfig::HandleReboot()+0x4e>
 8010928:	6803      	ldr	r3, [r0, #0]
 801092a:	68db      	ldr	r3, [r3, #12]
 801092c:	4798      	blx	r3
 801092e:	6824      	ldr	r4, [r4, #0]
 8010930:	4913      	ldr	r1, [pc, #76]	; (8010980 <RemoteConfig::HandleReboot()+0xa0>)
 8010932:	4620      	mov	r0, r4
 8010934:	f7f7 ff80 	bl	8008838 <Display::TextStatus(char const*)>
 8010938:	7c63      	ldrb	r3, [r4, #17]
 801093a:	b183      	cbz	r3, 801095e <RemoteConfig::HandleReboot()+0x7e>
 801093c:	f64b 7312 	movw	r3, #48914	; 0xbf12
 8010940:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010944:	23bf      	movs	r3, #191	; 0xbf
 8010946:	7a20      	ldrb	r0, [r4, #8]
 8010948:	f88d 3006 	strb.w	r3, [sp, #6]
 801094c:	f006 f9d2 	bl	8016cf4 <gd32_i2c_set_address(unsigned char)>
 8010950:	68e0      	ldr	r0, [r4, #12]
 8010952:	f006 f9c7 	bl	8016ce4 <gd32_i2c_set_baudrate(unsigned int)>
 8010956:	2103      	movs	r1, #3
 8010958:	a801      	add	r0, sp, #4
 801095a:	f006 f9d1 	bl	8016d00 <gd32_i2c_write(char const*, unsigned int)>
 801095e:	4b09      	ldr	r3, [pc, #36]	; (8010984 <RemoteConfig::HandleReboot()+0xa4>)
 8010960:	6818      	ldr	r0, [r3, #0]
 8010962:	f004 ffef 	bl	8015944 <Hardware::Reboot()>
 8010966:	b003      	add	sp, #12
 8010968:	bd30      	pop	{r4, r5, pc}
 801096a:	bf00      	nop
 801096c:	2001cd5c 	andcs	ip, r1, ip, asr sp
 8010970:	2001ce64 	andcs	ip, r1, r4, ror #28
 8010974:	20014e1c 	andcs	r4, r1, ip, lsl lr
 8010978:	2001c724 	andcs	ip, r1, r4, lsr #14
 801097c:	08018d24 	stmdaeq	r1, {r2, r5, r8, sl, fp, pc}
 8010980:	08018d33 	stmdaeq	r1, {r0, r1, r4, r5, r8, sl, fp, pc}
 8010984:	2001ce4c 	andcs	ip, r1, ip, asr #28

08010988 <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 8010988:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801098c:	2000      	movs	r0, #0
 801098e:	4d12      	ldr	r5, [pc, #72]	; (80109d8 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 8010990:	f10d 0c04 	add.w	ip, sp, #4
 8010994:	6814      	ldr	r4, [r2, #0]
 8010996:	7d2b      	ldrb	r3, [r5, #20]
 8010998:	692e      	ldr	r6, [r5, #16]
 801099a:	42a3      	cmp	r3, r4
 801099c:	bf34      	ite	cc
 801099e:	4664      	movcc	r4, ip
 80109a0:	4614      	movcs	r4, r2
 80109a2:	9301      	str	r3, [sp, #4]
 80109a4:	6827      	ldr	r7, [r4, #0]
 80109a6:	460c      	mov	r4, r1
 80109a8:	3e01      	subs	r6, #1
 80109aa:	440f      	add	r7, r1
 80109ac:	42bc      	cmp	r4, r7
 80109ae:	d101      	bne.n	80109b4 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x2c>
 80109b0:	6013      	str	r3, [r2, #0]
 80109b2:	e00c      	b.n	80109ce <RemoteConfig::GetIndex(void const*, unsigned int&)+0x46>
 80109b4:	f894 8000 	ldrb.w	r8, [r4]
 80109b8:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 80109bc:	45f0      	cmp	r8, lr
 80109be:	d009      	beq.n	80109d4 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 80109c0:	3001      	adds	r0, #1
 80109c2:	2805      	cmp	r0, #5
 80109c4:	f105 051c 	add.w	r5, r5, #28
 80109c8:	d1e4      	bne.n	8010994 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 80109ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109ce:	b002      	add	sp, #8
 80109d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109d4:	3401      	adds	r4, #1
 80109d6:	e7e9      	b.n	80109ac <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 80109d8:	08018d7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, fp, pc}

080109dc <RemoteConfig::PlatformHandleTftpSet()>:
 80109dc:	f890 15ec 	ldrb.w	r1, [r0, #1516]	; 0x5ec
 80109e0:	b109      	cbz	r1, 80109e6 <RemoteConfig::PlatformHandleTftpSet()+0xa>
 80109e2:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 80109e6:	2002      	movs	r0, #2
 80109e8:	f005 bac4 	b.w	8015f74 <bkp_data_write>

080109ec <RemoteConfig::PlatformHandleTftpGet()>:
 80109ec:	b510      	push	{r4, lr}
 80109ee:	4604      	mov	r4, r0
 80109f0:	2002      	movs	r0, #2
 80109f2:	f005 fad5 	bl	8015fa0 <bkp_data_read>
 80109f6:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 80109fa:	1ac3      	subs	r3, r0, r3
 80109fc:	4258      	negs	r0, r3
 80109fe:	4158      	adcs	r0, r3
 8010a00:	f884 05ec 	strb.w	r0, [r4, #1516]	; 0x5ec
 8010a04:	bd10      	pop	{r4, pc}

08010a06 <strcmp>:
 8010a06:	1e43      	subs	r3, r0, #1
 8010a08:	3901      	subs	r1, #1
 8010a0a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8010a0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010a12:	4290      	cmp	r0, r2
 8010a14:	d001      	beq.n	8010a1a <strcmp+0x14>
 8010a16:	1a80      	subs	r0, r0, r2
 8010a18:	e001      	b.n	8010a1e <strcmp+0x18>
 8010a1a:	2800      	cmp	r0, #0
 8010a1c:	d1f5      	bne.n	8010a0a <strcmp+0x4>
 8010a1e:	4770      	bx	lr

08010a20 <strcasecmp>:
 8010a20:	b530      	push	{r4, r5, lr}
 8010a22:	1e42      	subs	r2, r0, #1
 8010a24:	3901      	subs	r1, #1
 8010a26:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010a2a:	4604      	mov	r4, r0
 8010a2c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010a30:	2b19      	cmp	r3, #25
 8010a32:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010a36:	bf98      	it	ls
 8010a38:	f100 0420 	addls.w	r4, r0, #32
 8010a3c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 8010a40:	2d19      	cmp	r5, #25
 8010a42:	bf98      	it	ls
 8010a44:	3320      	addls	r3, #32
 8010a46:	42a3      	cmp	r3, r4
 8010a48:	d001      	beq.n	8010a4e <strcasecmp+0x2e>
 8010a4a:	1ae0      	subs	r0, r4, r3
 8010a4c:	e001      	b.n	8010a52 <strcasecmp+0x32>
 8010a4e:	2800      	cmp	r0, #0
 8010a50:	d1e9      	bne.n	8010a26 <strcasecmp+0x6>
 8010a52:	bd30      	pop	{r4, r5, pc}

08010a54 <PropertiesConfig::EnableJSON(bool)>:
 8010a54:	4a04      	ldr	r2, [pc, #16]	; (8010a68 <PropertiesConfig::EnableJSON(bool)+0x14>)
 8010a56:	7813      	ldrb	r3, [r2, #0]
 8010a58:	b118      	cbz	r0, 8010a62 <PropertiesConfig::EnableJSON(bool)+0xe>
 8010a5a:	f043 0301 	orr.w	r3, r3, #1
 8010a5e:	7013      	strb	r3, [r2, #0]
 8010a60:	4770      	bx	lr
 8010a62:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8010a66:	e7fa      	b.n	8010a5e <PropertiesConfig::EnableJSON(bool)+0xa>
 8010a68:	2001cd58 	andcs	ip, r1, r8, asr sp

08010a6c <HttpDaemon::HttpDaemon()>:
 8010a6c:	4a0a      	ldr	r2, [pc, #40]	; (8010a98 <HttpDaemon::HttpDaemon()+0x2c>)
 8010a6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010a72:	6002      	str	r2, [r0, #0]
 8010a74:	2200      	movs	r2, #0
 8010a76:	f44f 7c02 	mov.w	ip, #520	; 0x208
 8010a7a:	e9c0 1204 	strd	r1, r2, [r0, #16]
 8010a7e:	2102      	movs	r1, #2
 8010a80:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8010a84:	e9c0 c106 	strd	ip, r1, [r0, #24]
 8010a88:	60c2      	str	r2, [r0, #12]
 8010a8a:	8402      	strh	r2, [r0, #32]
 8010a8c:	f8a0 25c2 	strh.w	r2, [r0, #1474]	; 0x5c2
 8010a90:	f8c0 25c4 	str.w	r2, [r0, #1476]	; 0x5c4
 8010a94:	4770      	bx	lr
 8010a96:	bf00      	nop
 8010a98:	08019062 	stmdaeq	r1, {r1, r5, r6, ip, pc}

08010a9c <HttpDaemon::Start()>:
 8010a9c:	4b04      	ldr	r3, [pc, #16]	; (8010ab0 <HttpDaemon::Start()+0x14>)
 8010a9e:	b510      	push	{r4, lr}
 8010aa0:	2150      	movs	r1, #80	; 0x50
 8010aa2:	4604      	mov	r4, r0
 8010aa4:	6818      	ldr	r0, [r3, #0]
 8010aa6:	f002 fd4b 	bl	8013540 <Network::TcpBegin(unsigned short)>
 8010aaa:	6120      	str	r0, [r4, #16]
 8010aac:	bd10      	pop	{r4, pc}
 8010aae:	bf00      	nop
 8010ab0:	2001c724 	andcs	ip, r1, r4, lsr #14

08010ab4 <HttpDaemon::ParseMethod(char*)>:
 8010ab4:	b538      	push	{r3, r4, r5, lr}
 8010ab6:	4604      	mov	r4, r0
 8010ab8:	4608      	mov	r0, r1
 8010aba:	491a      	ldr	r1, [pc, #104]	; (8010b24 <HttpDaemon::ParseMethod(char*)+0x70>)
 8010abc:	f005 f884 	bl	8015bc8 <strtok>
 8010ac0:	4605      	mov	r5, r0
 8010ac2:	b360      	cbz	r0, 8010b1e <HttpDaemon::ParseMethod(char*)+0x6a>
 8010ac4:	4918      	ldr	r1, [pc, #96]	; (8010b28 <HttpDaemon::ParseMethod(char*)+0x74>)
 8010ac6:	f7ff ff9e 	bl	8010a06 <strcmp>
 8010aca:	b128      	cbz	r0, 8010ad8 <HttpDaemon::ParseMethod(char*)+0x24>
 8010acc:	4628      	mov	r0, r5
 8010ace:	4917      	ldr	r1, [pc, #92]	; (8010b2c <HttpDaemon::ParseMethod(char*)+0x78>)
 8010ad0:	f7ff ff99 	bl	8010a06 <strcmp>
 8010ad4:	bb18      	cbnz	r0, 8010b1e <HttpDaemon::ParseMethod(char*)+0x6a>
 8010ad6:	2001      	movs	r0, #1
 8010ad8:	61e0      	str	r0, [r4, #28]
 8010ada:	4912      	ldr	r1, [pc, #72]	; (8010b24 <HttpDaemon::ParseMethod(char*)+0x70>)
 8010adc:	2000      	movs	r0, #0
 8010ade:	f005 f873 	bl	8015bc8 <strtok>
 8010ae2:	b910      	cbnz	r0, 8010aea <HttpDaemon::ParseMethod(char*)+0x36>
 8010ae4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8010ae8:	bd38      	pop	{r3, r4, r5, pc}
 8010aea:	6060      	str	r0, [r4, #4]
 8010aec:	4910      	ldr	r1, [pc, #64]	; (8010b30 <HttpDaemon::ParseMethod(char*)+0x7c>)
 8010aee:	2000      	movs	r0, #0
 8010af0:	f005 f86a 	bl	8015bc8 <strtok>
 8010af4:	2800      	cmp	r0, #0
 8010af6:	d0f5      	beq.n	8010ae4 <HttpDaemon::ParseMethod(char*)+0x30>
 8010af8:	490e      	ldr	r1, [pc, #56]	; (8010b34 <HttpDaemon::ParseMethod(char*)+0x80>)
 8010afa:	f7ff ff84 	bl	8010a06 <strcmp>
 8010afe:	2800      	cmp	r0, #0
 8010b00:	d1f0      	bne.n	8010ae4 <HttpDaemon::ParseMethod(char*)+0x30>
 8010b02:	490d      	ldr	r1, [pc, #52]	; (8010b38 <HttpDaemon::ParseMethod(char*)+0x84>)
 8010b04:	f005 f860 	bl	8015bc8 <strtok>
 8010b08:	2800      	cmp	r0, #0
 8010b0a:	d0eb      	beq.n	8010ae4 <HttpDaemon::ParseMethod(char*)+0x30>
 8010b0c:	490b      	ldr	r1, [pc, #44]	; (8010b3c <HttpDaemon::ParseMethod(char*)+0x88>)
 8010b0e:	f7ff ff7a 	bl	8010a06 <strcmp>
 8010b12:	2800      	cmp	r0, #0
 8010b14:	f240 10f9 	movw	r0, #505	; 0x1f9
 8010b18:	bf08      	it	eq
 8010b1a:	20c8      	moveq	r0, #200	; 0xc8
 8010b1c:	e7e4      	b.n	8010ae8 <HttpDaemon::ParseMethod(char*)+0x34>
 8010b1e:	f240 10f5 	movw	r0, #501	; 0x1f5
 8010b22:	e7e1      	b.n	8010ae8 <HttpDaemon::ParseMethod(char*)+0x34>
 8010b24:	0801a06f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, sp, pc}
 8010b28:	08018e08 	stmdaeq	r1, {r3, r9, sl, fp, pc}
 8010b2c:	08018e0c 	stmdaeq	r1, {r2, r3, r9, sl, fp, pc}
 8010b30:	08018e76 	stmdaeq	r1, {r1, r2, r4, r5, r6, r9, sl, fp, pc}
 8010b34:	08018e11 	stmdaeq	r1, {r0, r4, r9, sl, fp, pc}
 8010b38:	08018e16 	stmdaeq	r1, {r1, r2, r4, r9, sl, fp, pc}
 8010b3c:	08018e19 	stmdaeq	r1, {r0, r3, r4, r9, sl, fp, pc}

08010b40 <HttpDaemon::ParseHeaderField(char*)>:
 8010b40:	b538      	push	{r3, r4, r5, lr}
 8010b42:	4605      	mov	r5, r0
 8010b44:	4608      	mov	r0, r1
 8010b46:	491d      	ldr	r1, [pc, #116]	; (8010bbc <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 8010b48:	f005 f83e 	bl	8015bc8 <strtok>
 8010b4c:	4604      	mov	r4, r0
 8010b4e:	b910      	cbnz	r0, 8010b56 <HttpDaemon::ParseHeaderField(char*)+0x16>
 8010b50:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8010b54:	bd38      	pop	{r3, r4, r5, pc}
 8010b56:	491a      	ldr	r1, [pc, #104]	; (8010bc0 <HttpDaemon::ParseHeaderField(char*)+0x80>)
 8010b58:	f7ff ff62 	bl	8010a20 <strcasecmp>
 8010b5c:	b970      	cbnz	r0, 8010b7c <HttpDaemon::ParseHeaderField(char*)+0x3c>
 8010b5e:	4919      	ldr	r1, [pc, #100]	; (8010bc4 <HttpDaemon::ParseHeaderField(char*)+0x84>)
 8010b60:	f005 f832 	bl	8015bc8 <strtok>
 8010b64:	2800      	cmp	r0, #0
 8010b66:	d0f3      	beq.n	8010b50 <HttpDaemon::ParseHeaderField(char*)+0x10>
 8010b68:	4917      	ldr	r1, [pc, #92]	; (8010bc8 <HttpDaemon::ParseHeaderField(char*)+0x88>)
 8010b6a:	f7ff ff4c 	bl	8010a06 <strcmp>
 8010b6e:	b108      	cbz	r0, 8010b74 <HttpDaemon::ParseHeaderField(char*)+0x34>
 8010b70:	20c8      	movs	r0, #200	; 0xc8
 8010b72:	e7ef      	b.n	8010b54 <HttpDaemon::ParseHeaderField(char*)+0x14>
 8010b74:	2301      	movs	r3, #1
 8010b76:	f885 3020 	strb.w	r3, [r5, #32]
 8010b7a:	e7f9      	b.n	8010b70 <HttpDaemon::ParseHeaderField(char*)+0x30>
 8010b7c:	4620      	mov	r0, r4
 8010b7e:	4913      	ldr	r1, [pc, #76]	; (8010bcc <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 8010b80:	f7ff ff4e 	bl	8010a20 <strcasecmp>
 8010b84:	4604      	mov	r4, r0
 8010b86:	2800      	cmp	r0, #0
 8010b88:	d1f2      	bne.n	8010b70 <HttpDaemon::ParseHeaderField(char*)+0x30>
 8010b8a:	4911      	ldr	r1, [pc, #68]	; (8010bd0 <HttpDaemon::ParseHeaderField(char*)+0x90>)
 8010b8c:	f005 f81c 	bl	8015bc8 <strtok>
 8010b90:	2800      	cmp	r0, #0
 8010b92:	d0dd      	beq.n	8010b50 <HttpDaemon::ParseHeaderField(char*)+0x10>
 8010b94:	1e42      	subs	r2, r0, #1
 8010b96:	4623      	mov	r3, r4
 8010b98:	200a      	movs	r0, #10
 8010b9a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8010b9e:	b911      	cbnz	r1, 8010ba6 <HttpDaemon::ParseHeaderField(char*)+0x66>
 8010ba0:	f8a5 35c6 	strh.w	r3, [r5, #1478]	; 0x5c6
 8010ba4:	e7e4      	b.n	8010b70 <HttpDaemon::ParseHeaderField(char*)+0x30>
 8010ba6:	3930      	subs	r1, #48	; 0x30
 8010ba8:	2909      	cmp	r1, #9
 8010baa:	d8d1      	bhi.n	8010b50 <HttpDaemon::ParseHeaderField(char*)+0x10>
 8010bac:	fb00 1303 	mla	r3, r0, r3, r1
 8010bb0:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8010bb4:	d9f1      	bls.n	8010b9a <HttpDaemon::ParseHeaderField(char*)+0x5a>
 8010bb6:	f240 109d 	movw	r0, #413	; 0x19d
 8010bba:	e7cb      	b.n	8010b54 <HttpDaemon::ParseHeaderField(char*)+0x14>
 8010bbc:	08018e1d 	stmdaeq	r1, {r0, r2, r3, r4, r9, sl, fp, pc}
 8010bc0:	08018e1f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r9, sl, fp, pc}
 8010bc4:	08018e2c 	stmdaeq	r1, {r2, r3, r5, r9, sl, fp, pc}
 8010bc8:	08018e2f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, sl, fp, pc}
 8010bcc:	08018e40 	stmdaeq	r1, {r6, r9, sl, fp, pc}
 8010bd0:	0801a06f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, sp, pc}

08010bd4 <HttpDaemon::ParseRequest()>:
 8010bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bd6:	2400      	movs	r4, #0
 8010bd8:	4605      	mov	r5, r0
 8010bda:	4622      	mov	r2, r4
 8010bdc:	4626      	mov	r6, r4
 8010bde:	68c1      	ldr	r1, [r0, #12]
 8010be0:	f880 4020 	strb.w	r4, [r0, #32]
 8010be4:	f8c0 45c4 	str.w	r4, [r0, #1476]	; 0x5c4
 8010be8:	8aab      	ldrh	r3, [r5, #20]
 8010bea:	42a3      	cmp	r3, r4
 8010bec:	d91e      	bls.n	8010c2c <HttpDaemon::ParseRequest()+0x58>
 8010bee:	68eb      	ldr	r3, [r5, #12]
 8010bf0:	5d18      	ldrb	r0, [r3, r4]
 8010bf2:	280a      	cmp	r0, #10
 8010bf4:	d10e      	bne.n	8010c14 <HttpDaemon::ParseRequest()+0x40>
 8010bf6:	4423      	add	r3, r4
 8010bf8:	f803 6c01 	strb.w	r6, [r3, #-1]
 8010bfc:	1c57      	adds	r7, r2, #1
 8010bfe:	b962      	cbnz	r2, 8010c1a <HttpDaemon::ParseRequest()+0x46>
 8010c00:	4628      	mov	r0, r5
 8010c02:	f7ff ff57 	bl	8010ab4 <HttpDaemon::ParseMethod(char*)>
 8010c06:	28c8      	cmp	r0, #200	; 0xc8
 8010c08:	d111      	bne.n	8010c2e <HttpDaemon::ParseRequest()+0x5a>
 8010c0a:	463a      	mov	r2, r7
 8010c0c:	68e9      	ldr	r1, [r5, #12]
 8010c0e:	3401      	adds	r4, #1
 8010c10:	b2a4      	uxth	r4, r4
 8010c12:	4421      	add	r1, r4
 8010c14:	3401      	adds	r4, #1
 8010c16:	b2a4      	uxth	r4, r4
 8010c18:	e7e6      	b.n	8010be8 <HttpDaemon::ParseRequest()+0x14>
 8010c1a:	7808      	ldrb	r0, [r1, #0]
 8010c1c:	b970      	cbnz	r0, 8010c3c <HttpDaemon::ParseRequest()+0x68>
 8010c1e:	696b      	ldr	r3, [r5, #20]
 8010c20:	3b01      	subs	r3, #1
 8010c22:	1b1b      	subs	r3, r3, r4
 8010c24:	b29b      	uxth	r3, r3
 8010c26:	f8a5 35c4 	strh.w	r3, [r5, #1476]	; 0x5c4
 8010c2a:	b90b      	cbnz	r3, 8010c30 <HttpDaemon::ParseRequest()+0x5c>
 8010c2c:	20c8      	movs	r0, #200	; 0xc8
 8010c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c30:	68ea      	ldr	r2, [r5, #12]
 8010c32:	3401      	adds	r4, #1
 8010c34:	4414      	add	r4, r2
 8010c36:	60ac      	str	r4, [r5, #8]
 8010c38:	54e0      	strb	r0, [r4, r3]
 8010c3a:	e7f7      	b.n	8010c2c <HttpDaemon::ParseRequest()+0x58>
 8010c3c:	4628      	mov	r0, r5
 8010c3e:	f7ff ff7f 	bl	8010b40 <HttpDaemon::ParseHeaderField(char*)>
 8010c42:	e7e0      	b.n	8010c06 <HttpDaemon::ParseRequest()+0x32>

08010c44 <HttpDaemon::HandleGetTxt()>:
 8010c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c48:	6847      	ldr	r7, [r0, #4]
 8010c4a:	4604      	mov	r4, r0
 8010c4c:	1dbd      	adds	r5, r7, #6
 8010c4e:	462b      	mov	r3, r5
 8010c50:	4618      	mov	r0, r3
 8010c52:	7802      	ldrb	r2, [r0, #0]
 8010c54:	3301      	adds	r3, #1
 8010c56:	2a00      	cmp	r2, #0
 8010c58:	d1fa      	bne.n	8010c50 <HttpDaemon::HandleGetTxt()+0xc>
 8010c5a:	1b40      	subs	r0, r0, r5
 8010c5c:	2804      	cmp	r0, #4
 8010c5e:	d803      	bhi.n	8010c68 <HttpDaemon::HandleGetTxt()+0x24>
 8010c60:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8010c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c68:	3804      	subs	r0, #4
 8010c6a:	4914      	ldr	r1, [pc, #80]	; (8010cbc <HttpDaemon::HandleGetTxt()+0x78>)
 8010c6c:	4428      	add	r0, r5
 8010c6e:	f7ff feca 	bl	8010a06 <strcmp>
 8010c72:	2800      	cmp	r0, #0
 8010c74:	d1f4      	bne.n	8010c60 <HttpDaemon::HandleGetTxt()+0x1c>
 8010c76:	4b12      	ldr	r3, [pc, #72]	; (8010cc0 <HttpDaemon::HandleGetTxt()+0x7c>)
 8010c78:	2001      	movs	r0, #1
 8010c7a:	f893 8000 	ldrb.w	r8, [r3]
 8010c7e:	f7ff fee9 	bl	8010a54 <PropertiesConfig::EnableJSON(bool)>
 8010c82:	4b10      	ldr	r3, [pc, #64]	; (8010cc4 <HttpDaemon::HandleGetTxt()+0x80>)
 8010c84:	f240 529b 	movw	r2, #1435	; 0x59b
 8010c88:	4629      	mov	r1, r5
 8010c8a:	6818      	ldr	r0, [r3, #0]
 8010c8c:	f7ff fa6a 	bl	8010164 <RemoteConfig::HandleGet(void*, unsigned int)>
 8010c90:	4606      	mov	r6, r0
 8010c92:	f008 0801 	and.w	r8, r8, #1
 8010c96:	4640      	mov	r0, r8
 8010c98:	f7ff fedc 	bl	8010a54 <PropertiesConfig::EnableJSON(bool)>
 8010c9c:	2e00      	cmp	r6, #0
 8010c9e:	d0df      	beq.n	8010c60 <HttpDaemon::HandleGetTxt()+0x1c>
 8010ca0:	f8a4 65c2 	strh.w	r6, [r4, #1474]	; 0x5c2
 8010ca4:	3606      	adds	r6, #6
 8010ca6:	3422      	adds	r4, #34	; 0x22
 8010ca8:	4437      	add	r7, r6
 8010caa:	42bd      	cmp	r5, r7
 8010cac:	d101      	bne.n	8010cb2 <HttpDaemon::HandleGetTxt()+0x6e>
 8010cae:	20c8      	movs	r0, #200	; 0xc8
 8010cb0:	e7d8      	b.n	8010c64 <HttpDaemon::HandleGetTxt()+0x20>
 8010cb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010cb6:	f804 3b01 	strb.w	r3, [r4], #1
 8010cba:	e7f6      	b.n	8010caa <HttpDaemon::HandleGetTxt()+0x66>
 8010cbc:	08018d48 	stmdaeq	r1, {r3, r6, r8, sl, fp, pc}
 8010cc0:	2001cd58 	andcs	ip, r1, r8, asr sp
 8010cc4:	20013e04 	andcs	r3, r1, r4, lsl #28

08010cc8 <HttpDaemon::HandleGet()>:
 8010cc8:	b570      	push	{r4, r5, r6, lr}
 8010cca:	6845      	ldr	r5, [r0, #4]
 8010ccc:	4604      	mov	r4, r0
 8010cce:	4943      	ldr	r1, [pc, #268]	; (8010ddc <HttpDaemon::HandleGet()+0x114>)
 8010cd0:	4628      	mov	r0, r5
 8010cd2:	f7ff fe98 	bl	8010a06 <strcmp>
 8010cd6:	b120      	cbz	r0, 8010ce2 <HttpDaemon::HandleGet()+0x1a>
 8010cd8:	4628      	mov	r0, r5
 8010cda:	4941      	ldr	r1, [pc, #260]	; (8010de0 <HttpDaemon::HandleGet()+0x118>)
 8010cdc:	f7ff fe93 	bl	8010a06 <strcmp>
 8010ce0:	b960      	cbnz	r0, 8010cfc <HttpDaemon::HandleGet()+0x34>
 8010ce2:	4621      	mov	r1, r4
 8010ce4:	4b3f      	ldr	r3, [pc, #252]	; (8010de4 <HttpDaemon::HandleGet()+0x11c>)
 8010ce6:	4840      	ldr	r0, [pc, #256]	; (8010de8 <HttpDaemon::HandleGet()+0x120>)
 8010ce8:	f841 3b22 	str.w	r3, [r1], #34
 8010cec:	f000 fa7a 	bl	80111e4 <get_file_content(char const*, char*)>
 8010cf0:	2800      	cmp	r0, #0
 8010cf2:	dd33      	ble.n	8010d5c <HttpDaemon::HandleGet()+0x94>
 8010cf4:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 8010cf8:	20c8      	movs	r0, #200	; 0xc8
 8010cfa:	bd70      	pop	{r4, r5, r6, pc}
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	493b      	ldr	r1, [pc, #236]	; (8010dec <HttpDaemon::HandleGet()+0x124>)
 8010d00:	f7ff fe81 	bl	8010a06 <strcmp>
 8010d04:	b928      	cbnz	r0, 8010d12 <HttpDaemon::HandleGet()+0x4a>
 8010d06:	4621      	mov	r1, r4
 8010d08:	4b39      	ldr	r3, [pc, #228]	; (8010df0 <HttpDaemon::HandleGet()+0x128>)
 8010d0a:	483a      	ldr	r0, [pc, #232]	; (8010df4 <HttpDaemon::HandleGet()+0x12c>)
 8010d0c:	f841 3b22 	str.w	r3, [r1], #34
 8010d10:	e7ec      	b.n	8010cec <HttpDaemon::HandleGet()+0x24>
 8010d12:	4628      	mov	r0, r5
 8010d14:	4938      	ldr	r1, [pc, #224]	; (8010df8 <HttpDaemon::HandleGet()+0x130>)
 8010d16:	f7ff fe76 	bl	8010a06 <strcmp>
 8010d1a:	b198      	cbz	r0, 8010d44 <HttpDaemon::HandleGet()+0x7c>
 8010d1c:	4a37      	ldr	r2, [pc, #220]	; (8010dfc <HttpDaemon::HandleGet()+0x134>)
 8010d1e:	1e6b      	subs	r3, r5, #1
 8010d20:	1d69      	adds	r1, r5, #5
 8010d22:	428b      	cmp	r3, r1
 8010d24:	d114      	bne.n	8010d50 <HttpDaemon::HandleGet()+0x88>
 8010d26:	4b36      	ldr	r3, [pc, #216]	; (8010e00 <HttpDaemon::HandleGet()+0x138>)
 8010d28:	3506      	adds	r5, #6
 8010d2a:	4628      	mov	r0, r5
 8010d2c:	4935      	ldr	r1, [pc, #212]	; (8010e04 <HttpDaemon::HandleGet()+0x13c>)
 8010d2e:	6023      	str	r3, [r4, #0]
 8010d30:	f7ff fe69 	bl	8010a06 <strcmp>
 8010d34:	b9a8      	cbnz	r0, 8010d62 <HttpDaemon::HandleGet()+0x9a>
 8010d36:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8010d3a:	f104 0022 	add.w	r0, r4, #34	; 0x22
 8010d3e:	f000 f9d9 	bl	80110f4 <remoteconfig::json_get_list(char*, unsigned short)>
 8010d42:	e7d5      	b.n	8010cf0 <HttpDaemon::HandleGet()+0x28>
 8010d44:	4621      	mov	r1, r4
 8010d46:	4b30      	ldr	r3, [pc, #192]	; (8010e08 <HttpDaemon::HandleGet()+0x140>)
 8010d48:	4830      	ldr	r0, [pc, #192]	; (8010e0c <HttpDaemon::HandleGet()+0x144>)
 8010d4a:	f841 3b22 	str.w	r3, [r1], #34
 8010d4e:	e7cd      	b.n	8010cec <HttpDaemon::HandleGet()+0x24>
 8010d50:	f812 0b01 	ldrb.w	r0, [r2], #1
 8010d54:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8010d58:	4286      	cmp	r6, r0
 8010d5a:	d0e2      	beq.n	8010d22 <HttpDaemon::HandleGet()+0x5a>
 8010d5c:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8010d60:	e7cb      	b.n	8010cfa <HttpDaemon::HandleGet()+0x32>
 8010d62:	4628      	mov	r0, r5
 8010d64:	492a      	ldr	r1, [pc, #168]	; (8010e10 <HttpDaemon::HandleGet()+0x148>)
 8010d66:	f7ff fe4e 	bl	8010a06 <strcmp>
 8010d6a:	b930      	cbnz	r0, 8010d7a <HttpDaemon::HandleGet()+0xb2>
 8010d6c:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8010d70:	f104 0022 	add.w	r0, r4, #34	; 0x22
 8010d74:	f000 f9f2 	bl	801115c <remoteconfig::json_get_version(char*, unsigned short)>
 8010d78:	e7ba      	b.n	8010cf0 <HttpDaemon::HandleGet()+0x28>
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	4925      	ldr	r1, [pc, #148]	; (8010e14 <HttpDaemon::HandleGet()+0x14c>)
 8010d7e:	f7ff fe42 	bl	8010a06 <strcmp>
 8010d82:	b958      	cbnz	r0, 8010d9c <HttpDaemon::HandleGet()+0xd4>
 8010d84:	4b24      	ldr	r3, [pc, #144]	; (8010e18 <HttpDaemon::HandleGet()+0x150>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	f893 35d7 	ldrb.w	r3, [r3, #1495]	; 0x5d7
 8010d8c:	b31b      	cbz	r3, 8010dd6 <HttpDaemon::HandleGet()+0x10e>
 8010d8e:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8010d92:	f104 0022 	add.w	r0, r4, #34	; 0x22
 8010d96:	f000 f9fd 	bl	8011194 <remoteconfig::json_get_uptime(char*, unsigned short)>
 8010d9a:	e7a9      	b.n	8010cf0 <HttpDaemon::HandleGet()+0x28>
 8010d9c:	4628      	mov	r0, r5
 8010d9e:	491f      	ldr	r1, [pc, #124]	; (8010e1c <HttpDaemon::HandleGet()+0x154>)
 8010da0:	f7ff fe31 	bl	8010a06 <strcmp>
 8010da4:	b930      	cbnz	r0, 8010db4 <HttpDaemon::HandleGet()+0xec>
 8010da6:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8010daa:	f104 0022 	add.w	r0, r4, #34	; 0x22
 8010dae:	f000 fa01 	bl	80111b4 <remoteconfig::json_get_display(char*, unsigned short)>
 8010db2:	e79d      	b.n	8010cf0 <HttpDaemon::HandleGet()+0x28>
 8010db4:	4628      	mov	r0, r5
 8010db6:	491a      	ldr	r1, [pc, #104]	; (8010e20 <HttpDaemon::HandleGet()+0x158>)
 8010db8:	f7ff fe25 	bl	8010a06 <strcmp>
 8010dbc:	b930      	cbnz	r0, 8010dcc <HttpDaemon::HandleGet()+0x104>
 8010dbe:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8010dc2:	f104 0022 	add.w	r0, r4, #34	; 0x22
 8010dc6:	f000 fa05 	bl	80111d4 <remoteconfig::json_get_directory(char*, unsigned short)>
 8010dca:	e791      	b.n	8010cf0 <HttpDaemon::HandleGet()+0x28>
 8010dcc:	4620      	mov	r0, r4
 8010dce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010dd2:	f7ff bf37 	b.w	8010c44 <HttpDaemon::HandleGetTxt()>
 8010dd6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8010dda:	e78e      	b.n	8010cfa <HttpDaemon::HandleGet()+0x32>
 8010ddc:	08018e76 	stmdaeq	r1, {r1, r2, r4, r5, r6, r9, sl, fp, pc}
 8010de0:	08018e4f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r9, sl, fp, pc}
 8010de4:	08019062 	stmdaeq	r1, {r1, r5, r6, ip, pc}
 8010de8:	08018e50 	stmdaeq	r1, {r4, r6, r9, sl, fp, pc}
 8010dec:	08018e5b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r9, sl, fp, pc}
 8010df0:	08019082 	stmdaeq	r1, {r1, r7, ip, pc}
 8010df4:	08018e5c 	stmdaeq	r1, {r2, r3, r4, r6, r9, sl, fp, pc}
 8010df8:	08018e67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r9, sl, fp, pc}
 8010dfc:	08018e71 	stmdaeq	r1, {r0, r4, r5, r6, r9, sl, fp, pc}
 8010e00:	080190c2 	stmdaeq	r1, {r1, r6, r7, ip, pc}
 8010e04:	08018e78 	stmdaeq	r1, {r3, r4, r5, r6, r9, sl, fp, pc}
 8010e08:	080190a2 	stmdaeq	r1, {r1, r5, r7, ip, pc}
 8010e0c:	08018e68 	stmdaeq	r1, {r3, r5, r6, r9, sl, fp, pc}
 8010e10:	08018e7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r9, sl, fp, pc}
 8010e14:	08018e85 	stmdaeq	r1, {r0, r2, r7, r9, sl, fp, pc}
 8010e18:	20013e04 	andcs	r3, r1, r4, lsl #28
 8010e1c:	08018e8c 	stmdaeq	r1, {r2, r3, r7, r9, sl, fp, pc}
 8010e20:	08018e94 	stmdaeq	r1, {r2, r4, r7, r9, sl, fp, pc}

08010e24 <HttpDaemon::HandlePost(bool)>:
 8010e24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010e26:	4604      	mov	r4, r0
 8010e28:	2900      	cmp	r1, #0
 8010e2a:	f040 8091 	bne.w	8010f50 <HttpDaemon::HandlePost(bool)+0x12c>
 8010e2e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d05d      	beq.n	8010ef2 <HttpDaemon::HandlePost(bool)+0xce>
 8010e36:	6845      	ldr	r5, [r0, #4]
 8010e38:	4948      	ldr	r1, [pc, #288]	; (8010f5c <HttpDaemon::HandlePost(bool)+0x138>)
 8010e3a:	4628      	mov	r0, r5
 8010e3c:	f7ff fde3 	bl	8010a06 <strcmp>
 8010e40:	2800      	cmp	r0, #0
 8010e42:	bf0c      	ite	eq
 8010e44:	2301      	moveq	r3, #1
 8010e46:	2300      	movne	r3, #0
 8010e48:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8010e4c:	d055      	beq.n	8010efa <HttpDaemon::HandlePost(bool)+0xd6>
 8010e4e:	4628      	mov	r0, r5
 8010e50:	4943      	ldr	r1, [pc, #268]	; (8010f60 <HttpDaemon::HandlePost(bool)+0x13c>)
 8010e52:	f7ff fdd8 	bl	8010a06 <strcmp>
 8010e56:	2800      	cmp	r0, #0
 8010e58:	d04f      	beq.n	8010efa <HttpDaemon::HandlePost(bool)+0xd6>
 8010e5a:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8010e5e:	e04a      	b.n	8010ef6 <HttpDaemon::HandlePost(bool)+0xd2>
 8010e60:	4940      	ldr	r1, [pc, #256]	; (8010f64 <HttpDaemon::HandlePost(bool)+0x140>)
 8010e62:	68a0      	ldr	r0, [r4, #8]
 8010e64:	f10d 0207 	add.w	r2, sp, #7
 8010e68:	f004 f934 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010e6c:	b9e8      	cbnz	r0, 8010eaa <HttpDaemon::HandlePost(bool)+0x86>
 8010e6e:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8010e72:	4b3d      	ldr	r3, [pc, #244]	; (8010f68 <HttpDaemon::HandlePost(bool)+0x144>)
 8010e74:	fab6 f186 	clz	r1, r6
 8010e78:	681d      	ldr	r5, [r3, #0]
 8010e7a:	0949      	lsrs	r1, r1, #5
 8010e7c:	69a8      	ldr	r0, [r5, #24]
 8010e7e:	b138      	cbz	r0, 8010e90 <HttpDaemon::HandlePost(bool)+0x6c>
 8010e80:	6803      	ldr	r3, [r0, #0]
 8010e82:	7429      	strb	r1, [r5, #16]
 8010e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e86:	4798      	blx	r3
 8010e88:	b116      	cbz	r6, 8010e90 <HttpDaemon::HandlePost(bool)+0x6c>
 8010e8a:	4b38      	ldr	r3, [pc, #224]	; (8010f6c <HttpDaemon::HandlePost(bool)+0x148>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	606b      	str	r3, [r5, #4]
 8010e90:	4620      	mov	r0, r4
 8010e92:	4b37      	ldr	r3, [pc, #220]	; (8010f70 <HttpDaemon::HandlePost(bool)+0x14c>)
 8010e94:	f240 519f 	movw	r1, #1439	; 0x59f
 8010e98:	4a36      	ldr	r2, [pc, #216]	; (8010f74 <HttpDaemon::HandlePost(bool)+0x150>)
 8010e9a:	f840 3b22 	str.w	r3, [r0], #34
 8010e9e:	f7f8 fc85 	bl	80097ac <snprintf>
 8010ea2:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 8010ea6:	20c8      	movs	r0, #200	; 0xc8
 8010ea8:	e025      	b.n	8010ef6 <HttpDaemon::HandlePost(bool)+0xd2>
 8010eaa:	4933      	ldr	r1, [pc, #204]	; (8010f78 <HttpDaemon::HandlePost(bool)+0x154>)
 8010eac:	68a0      	ldr	r0, [r4, #8]
 8010eae:	f10d 0207 	add.w	r2, sp, #7
 8010eb2:	f004 f90f 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010eb6:	b9e0      	cbnz	r0, 8010ef2 <HttpDaemon::HandlePost(bool)+0xce>
 8010eb8:	4b30      	ldr	r3, [pc, #192]	; (8010f7c <HttpDaemon::HandlePost(bool)+0x158>)
 8010eba:	6818      	ldr	r0, [r3, #0]
 8010ebc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010ec0:	b11b      	cbz	r3, 8010eca <HttpDaemon::HandlePost(bool)+0xa6>
 8010ec2:	2104      	movs	r1, #4
 8010ec4:	f004 fc98 	bl	80157f8 <LedBlink::SetMode(ledblink::Mode)>
 8010ec8:	e7e2      	b.n	8010e90 <HttpDaemon::HandlePost(bool)+0x6c>
 8010eca:	2102      	movs	r1, #2
 8010ecc:	e7fa      	b.n	8010ec4 <HttpDaemon::HandlePost(bool)+0xa0>
 8010ece:	4b2c      	ldr	r3, [pc, #176]	; (8010f80 <HttpDaemon::HandlePost(bool)+0x15c>)
 8010ed0:	2001      	movs	r0, #1
 8010ed2:	781d      	ldrb	r5, [r3, #0]
 8010ed4:	f7ff fdbe 	bl	8010a54 <PropertiesConfig::EnableJSON(bool)>
 8010ed8:	4b2a      	ldr	r3, [pc, #168]	; (8010f84 <HttpDaemon::HandlePost(bool)+0x160>)
 8010eda:	f8b4 25c4 	ldrh.w	r2, [r4, #1476]	; 0x5c4
 8010ede:	6818      	ldr	r0, [r3, #0]
 8010ee0:	68a1      	ldr	r1, [r4, #8]
 8010ee2:	f005 0501 	and.w	r5, r5, #1
 8010ee6:	f7ff fa0f 	bl	8010308 <RemoteConfig::HandleSet(void*, unsigned int)>
 8010eea:	4628      	mov	r0, r5
 8010eec:	f7ff fdb2 	bl	8010a54 <PropertiesConfig::EnableJSON(bool)>
 8010ef0:	e7ce      	b.n	8010e90 <HttpDaemon::HandlePost(bool)+0x6c>
 8010ef2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8010ef6:	b002      	add	sp, #8
 8010ef8:	bd70      	pop	{r4, r5, r6, pc}
 8010efa:	f8b4 35c6 	ldrh.w	r3, [r4, #1478]	; 0x5c6
 8010efe:	6962      	ldr	r2, [r4, #20]
 8010f00:	429a      	cmp	r2, r3
 8010f02:	dbd0      	blt.n	8010ea6 <HttpDaemon::HandlePost(bool)+0x82>
 8010f04:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d0cc      	beq.n	8010ea6 <HttpDaemon::HandlePost(bool)+0x82>
 8010f0c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d0dc      	beq.n	8010ece <HttpDaemon::HandlePost(bool)+0xaa>
 8010f14:	2201      	movs	r2, #1
 8010f16:	f8b4 15c4 	ldrh.w	r1, [r4, #1476]	; 0x5c4
 8010f1a:	68a0      	ldr	r0, [r4, #8]
 8010f1c:	f003 fdf2 	bl	8014b04 <properties::convert_json_file(char*, unsigned short, bool)>
 8010f20:	2800      	cmp	r0, #0
 8010f22:	dde6      	ble.n	8010ef2 <HttpDaemon::HandlePost(bool)+0xce>
 8010f24:	4918      	ldr	r1, [pc, #96]	; (8010f88 <HttpDaemon::HandlePost(bool)+0x164>)
 8010f26:	68a0      	ldr	r0, [r4, #8]
 8010f28:	f10d 0207 	add.w	r2, sp, #7
 8010f2c:	f004 f8d2 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010f30:	2800      	cmp	r0, #0
 8010f32:	d195      	bne.n	8010e60 <HttpDaemon::HandlePost(bool)+0x3c>
 8010f34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d0a9      	beq.n	8010e90 <HttpDaemon::HandlePost(bool)+0x6c>
 8010f3c:	4b11      	ldr	r3, [pc, #68]	; (8010f84 <HttpDaemon::HandlePost(bool)+0x160>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	f893 35d6 	ldrb.w	r3, [r3, #1494]	; 0x5d6
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d0d4      	beq.n	8010ef2 <HttpDaemon::HandlePost(bool)+0xce>
 8010f48:	4b10      	ldr	r3, [pc, #64]	; (8010f8c <HttpDaemon::HandlePost(bool)+0x168>)
 8010f4a:	6818      	ldr	r0, [r3, #0]
 8010f4c:	f004 fcfa 	bl	8015944 <Hardware::Reboot()>
 8010f50:	68c3      	ldr	r3, [r0, #12]
 8010f52:	6083      	str	r3, [r0, #8]
 8010f54:	6943      	ldr	r3, [r0, #20]
 8010f56:	f8a0 35c4 	strh.w	r3, [r0, #1476]	; 0x5c4
 8010f5a:	e7d7      	b.n	8010f0c <HttpDaemon::HandlePost(bool)+0xe8>
 8010f5c:	08018e9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r9, sl, fp, pc}
 8010f60:	08018e3a 	stmdaeq	r1, {r1, r3, r4, r5, r9, sl, fp, pc}
 8010f64:	08018e8c 	stmdaeq	r1, {r2, r3, r7, r9, sl, fp, pc}
 8010f68:	2001cd5c 	andcs	ip, r1, ip, asr sp
 8010f6c:	2001ce64 	andcs	ip, r1, r4, ror #28
 8010f70:	08019062 	stmdaeq	r1, {r1, r5, r6, ip, pc}
 8010f74:	08018ebb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r9, sl, fp, pc}
 8010f78:	08018eb2 	stmdaeq	r1, {r1, r4, r5, r7, r9, sl, fp, pc}
 8010f7c:	2001ce48 	andcs	ip, r1, r8, asr #28
 8010f80:	2001cd58 	andcs	ip, r1, r8, asr sp
 8010f84:	20013e04 	andcs	r3, r1, r4, lsl #28
 8010f88:	08018eab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r9, sl, fp, pc}
 8010f8c:	2001ce4c 	andcs	ip, r1, ip, asr #28

08010f90 <HttpDaemon::Run()>:
 8010f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f92:	4e4a      	ldr	r6, [pc, #296]	; (80110bc <HttpDaemon::Run()+0x12c>)
 8010f94:	4604      	mov	r4, r0
 8010f96:	6901      	ldr	r1, [r0, #16]
 8010f98:	f100 020c 	add.w	r2, r0, #12
 8010f9c:	b085      	sub	sp, #20
 8010f9e:	6830      	ldr	r0, [r6, #0]
 8010fa0:	f002 fad1 	bl	8013546 <Network::TcpRead(int, unsigned char const**)>
 8010fa4:	6160      	str	r0, [r4, #20]
 8010fa6:	2800      	cmp	r0, #0
 8010fa8:	d061      	beq.n	801106e <HttpDaemon::Run()+0xde>
 8010faa:	69a3      	ldr	r3, [r4, #24]
 8010fac:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8010fb0:	d15f      	bne.n	8011072 <HttpDaemon::Run()+0xe2>
 8010fb2:	4620      	mov	r0, r4
 8010fb4:	f7ff fe0e 	bl	8010bd4 <HttpDaemon::ParseRequest()>
 8010fb8:	28c8      	cmp	r0, #200	; 0xc8
 8010fba:	61a0      	str	r0, [r4, #24]
 8010fbc:	d106      	bne.n	8010fcc <HttpDaemon::Run()+0x3c>
 8010fbe:	69e3      	ldr	r3, [r4, #28]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d147      	bne.n	8011054 <HttpDaemon::Run()+0xc4>
 8010fc4:	4620      	mov	r0, r4
 8010fc6:	f7ff fe7f 	bl	8010cc8 <HttpDaemon::HandleGet()>
 8010fca:	61a0      	str	r0, [r4, #24]
 8010fcc:	69a3      	ldr	r3, [r4, #24]
 8010fce:	f104 0722 	add.w	r7, r4, #34	; 0x22
 8010fd2:	2bc8      	cmp	r3, #200	; 0xc8
 8010fd4:	d06f      	beq.n	80110b6 <HttpDaemon::Run()+0x126>
 8010fd6:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 8010fda:	d062      	beq.n	80110a2 <HttpDaemon::Run()+0x112>
 8010fdc:	dc52      	bgt.n	8011084 <HttpDaemon::Run()+0xf4>
 8010fde:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8010fe2:	d060      	beq.n	80110a6 <HttpDaemon::Run()+0x116>
 8010fe4:	f240 129d 	movw	r2, #413	; 0x19d
 8010fe8:	4293      	cmp	r3, r2
 8010fea:	d05e      	beq.n	80110aa <HttpDaemon::Run()+0x11a>
 8010fec:	4d34      	ldr	r5, [pc, #208]	; (80110c0 <HttpDaemon::Run()+0x130>)
 8010fee:	4a35      	ldr	r2, [pc, #212]	; (80110c4 <HttpDaemon::Run()+0x134>)
 8010ff0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8010ff4:	bf18      	it	ne
 8010ff6:	4615      	movne	r5, r2
 8010ff8:	4a33      	ldr	r2, [pc, #204]	; (80110c8 <HttpDaemon::Run()+0x138>)
 8010ffa:	f240 519f 	movw	r1, #1439	; 0x59f
 8010ffe:	6022      	str	r2, [r4, #0]
 8011000:	4638      	mov	r0, r7
 8011002:	e9cd 5500 	strd	r5, r5, [sp]
 8011006:	4a31      	ldr	r2, [pc, #196]	; (80110cc <HttpDaemon::Run()+0x13c>)
 8011008:	f7f8 fbd0 	bl	80097ac <snprintf>
 801100c:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 8011010:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 8011014:	f240 519f 	movw	r1, #1439	; 0x59f
 8011018:	9303      	str	r3, [sp, #12]
 801101a:	6823      	ldr	r3, [r4, #0]
 801101c:	4a2c      	ldr	r2, [pc, #176]	; (80110d0 <HttpDaemon::Run()+0x140>)
 801101e:	9302      	str	r3, [sp, #8]
 8011020:	4b2c      	ldr	r3, [pc, #176]	; (80110d4 <HttpDaemon::Run()+0x144>)
 8011022:	68e0      	ldr	r0, [r4, #12]
 8011024:	e9cd 5300 	strd	r5, r3, [sp]
 8011028:	69a3      	ldr	r3, [r4, #24]
 801102a:	f7f8 fbbf 	bl	80097ac <snprintf>
 801102e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8011032:	b283      	uxth	r3, r0
 8011034:	6830      	ldr	r0, [r6, #0]
 8011036:	f002 fa8a 	bl	801354e <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 801103a:	463a      	mov	r2, r7
 801103c:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 8011040:	6921      	ldr	r1, [r4, #16]
 8011042:	6830      	ldr	r0, [r6, #0]
 8011044:	f002 fa83 	bl	801354e <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 8011048:	f44f 7202 	mov.w	r2, #520	; 0x208
 801104c:	2302      	movs	r3, #2
 801104e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8011052:	e00c      	b.n	801106e <HttpDaemon::Run()+0xde>
 8011054:	2b01      	cmp	r3, #1
 8011056:	d1b9      	bne.n	8010fcc <HttpDaemon::Run()+0x3c>
 8011058:	2100      	movs	r1, #0
 801105a:	4620      	mov	r0, r4
 801105c:	f7ff fee2 	bl	8010e24 <HttpDaemon::HandlePost(bool)>
 8011060:	28c8      	cmp	r0, #200	; 0xc8
 8011062:	61a0      	str	r0, [r4, #24]
 8011064:	d1b2      	bne.n	8010fcc <HttpDaemon::Run()+0x3c>
 8011066:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 801106a:	2b00      	cmp	r3, #0
 801106c:	d1ae      	bne.n	8010fcc <HttpDaemon::Run()+0x3c>
 801106e:	b005      	add	sp, #20
 8011070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011072:	2bc8      	cmp	r3, #200	; 0xc8
 8011074:	d1aa      	bne.n	8010fcc <HttpDaemon::Run()+0x3c>
 8011076:	69e1      	ldr	r1, [r4, #28]
 8011078:	2901      	cmp	r1, #1
 801107a:	d1a7      	bne.n	8010fcc <HttpDaemon::Run()+0x3c>
 801107c:	4620      	mov	r0, r4
 801107e:	f7ff fed1 	bl	8010e24 <HttpDaemon::HandlePost(bool)>
 8011082:	e7a2      	b.n	8010fca <HttpDaemon::Run()+0x3a>
 8011084:	f240 12f5 	movw	r2, #501	; 0x1f5
 8011088:	4293      	cmp	r3, r2
 801108a:	d010      	beq.n	80110ae <HttpDaemon::Run()+0x11e>
 801108c:	f240 12f9 	movw	r2, #505	; 0x1f9
 8011090:	4293      	cmp	r3, r2
 8011092:	d00e      	beq.n	80110b2 <HttpDaemon::Run()+0x122>
 8011094:	4d10      	ldr	r5, [pc, #64]	; (80110d8 <HttpDaemon::Run()+0x148>)
 8011096:	4a0b      	ldr	r2, [pc, #44]	; (80110c4 <HttpDaemon::Run()+0x134>)
 8011098:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801109c:	bf18      	it	ne
 801109e:	4615      	movne	r5, r2
 80110a0:	e7aa      	b.n	8010ff8 <HttpDaemon::Run()+0x68>
 80110a2:	4d0e      	ldr	r5, [pc, #56]	; (80110dc <HttpDaemon::Run()+0x14c>)
 80110a4:	e7a8      	b.n	8010ff8 <HttpDaemon::Run()+0x68>
 80110a6:	4d0e      	ldr	r5, [pc, #56]	; (80110e0 <HttpDaemon::Run()+0x150>)
 80110a8:	e7a6      	b.n	8010ff8 <HttpDaemon::Run()+0x68>
 80110aa:	4d0e      	ldr	r5, [pc, #56]	; (80110e4 <HttpDaemon::Run()+0x154>)
 80110ac:	e7a4      	b.n	8010ff8 <HttpDaemon::Run()+0x68>
 80110ae:	4d0e      	ldr	r5, [pc, #56]	; (80110e8 <HttpDaemon::Run()+0x158>)
 80110b0:	e7a2      	b.n	8010ff8 <HttpDaemon::Run()+0x68>
 80110b2:	4d0e      	ldr	r5, [pc, #56]	; (80110ec <HttpDaemon::Run()+0x15c>)
 80110b4:	e7a0      	b.n	8010ff8 <HttpDaemon::Run()+0x68>
 80110b6:	4d0e      	ldr	r5, [pc, #56]	; (80110f0 <HttpDaemon::Run()+0x160>)
 80110b8:	e7aa      	b.n	8011010 <HttpDaemon::Run()+0x80>
 80110ba:	bf00      	nop
 80110bc:	2001c724 	andcs	ip, r1, r4, lsr #14
 80110c0:	08018f17 	stmdaeq	r1, {r0, r1, r2, r4, r8, r9, sl, fp, pc}
 80110c4:	08018f9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, r9, sl, fp, pc}
 80110c8:	08019062 	stmdaeq	r1, {r1, r5, r6, ip, pc}
 80110cc:	08018faf 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, r9, sl, fp, pc}
 80110d0:	0801900a 	stmdaeq	r1, {r1, r3, ip, pc}
 80110d4:	08017f79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 80110d8:	08018f5b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, r9, sl, fp, pc}
 80110dc:	08018f46 	stmdaeq	r1, {r1, r2, r6, r8, r9, sl, fp, pc}
 80110e0:	08018f23 	stmdaeq	r1, {r0, r1, r5, r8, r9, sl, fp, pc}
 80110e4:	08018f2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, sl, fp, pc}
 80110e8:	08018f71 	stmdaeq	r1, {r0, r4, r5, r6, r8, r9, sl, fp, pc}
 80110ec:	08018f88 	stmdaeq	r1, {r3, r7, r8, r9, sl, fp, pc}
 80110f0:	08018fac 	stmdaeq	r1, {r2, r3, r5, r7, r8, r9, sl, fp, pc}

080110f4 <remoteconfig::json_get_list(char*, unsigned short)>:
 80110f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110f8:	4b14      	ldr	r3, [pc, #80]	; (801114c <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 80110fa:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8011150 <remoteconfig::json_get_list(char*, unsigned short)+0x5c>
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	b088      	sub	sp, #32
 8011102:	4605      	mov	r5, r0
 8011104:	f8d8 0000 	ldr.w	r0, [r8]
 8011108:	691c      	ldr	r4, [r3, #16]
 801110a:	460e      	mov	r6, r1
 801110c:	f7fe ffd6 	bl	80100bc <RemoteConfig::GetStringNode() const>
 8011110:	4607      	mov	r7, r0
 8011112:	f8d8 0000 	ldr.w	r0, [r8]
 8011116:	f7fe ffdd 	bl	80100d4 <RemoteConfig::GetStringOutput() const>
 801111a:	4b0e      	ldr	r3, [pc, #56]	; (8011154 <remoteconfig::json_get_list(char*, unsigned short)+0x60>)
 801111c:	4631      	mov	r1, r6
 801111e:	7a1a      	ldrb	r2, [r3, #8]
 8011120:	3309      	adds	r3, #9
 8011122:	9303      	str	r3, [sp, #12]
 8011124:	0e23      	lsrs	r3, r4, #24
 8011126:	9302      	str	r3, [sp, #8]
 8011128:	f3c4 4307 	ubfx	r3, r4, #16, #8
 801112c:	9301      	str	r3, [sp, #4]
 801112e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8011132:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8011136:	9300      	str	r3, [sp, #0]
 8011138:	4628      	mov	r0, r5
 801113a:	4a07      	ldr	r2, [pc, #28]	; (8011158 <remoteconfig::json_get_list(char*, unsigned short)+0x64>)
 801113c:	9704      	str	r7, [sp, #16]
 801113e:	b2e3      	uxtb	r3, r4
 8011140:	f7f8 fb34 	bl	80097ac <snprintf>
 8011144:	b280      	uxth	r0, r0
 8011146:	b008      	add	sp, #32
 8011148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801114c:	2001c724 	andcs	ip, r1, r4, lsr #14
 8011150:	20013e04 	andcs	r3, r1, r4, lsl #28
 8011154:	20013de0 	andcs	r3, r1, r0, ror #27
 8011158:	0801913c 	stmdaeq	r1, {r2, r3, r4, r5, r8, ip, pc}

0801115c <remoteconfig::json_get_version(char*, unsigned short)>:
 801115c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801115e:	2208      	movs	r2, #8
 8011160:	4b09      	ldr	r3, [pc, #36]	; (8011188 <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 8011162:	9204      	str	r2, [sp, #16]
 8011164:	f1a3 020b 	sub.w	r2, r3, #11
 8011168:	9203      	str	r2, [sp, #12]
 801116a:	220b      	movs	r2, #11
 801116c:	9202      	str	r2, [sp, #8]
 801116e:	4a07      	ldr	r2, [pc, #28]	; (801118c <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 8011170:	9305      	str	r3, [sp, #20]
 8011172:	3b0e      	subs	r3, #14
 8011174:	9201      	str	r2, [sp, #4]
 8011176:	9300      	str	r3, [sp, #0]
 8011178:	4a05      	ldr	r2, [pc, #20]	; (8011190 <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 801117a:	2303      	movs	r3, #3
 801117c:	f7f8 fb16 	bl	80097ac <snprintf>
 8011180:	b280      	uxth	r0, r0
 8011182:	b007      	add	sp, #28
 8011184:	f85d fb04 	ldr.w	pc, [sp], #4
 8011188:	2001cdfa 	strdcs	ip, [r1], -sl
 801118c:	08017f79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 8011190:	0801919b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r8, ip, pc}

08011194 <remoteconfig::json_get_uptime(char*, unsigned short)>:
 8011194:	b508      	push	{r3, lr}
 8011196:	4b05      	ldr	r3, [pc, #20]	; (80111ac <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 8011198:	681a      	ldr	r2, [r3, #0]
 801119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80111a2:	4a03      	ldr	r2, [pc, #12]	; (80111b0 <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 80111a4:	f7f8 fb02 	bl	80097ac <snprintf>
 80111a8:	b280      	uxth	r0, r0
 80111aa:	bd08      	pop	{r3, pc}
 80111ac:	2001ce64 	andcs	ip, r1, r4, ror #28
 80111b0:	080191e1 	stmdaeq	r1, {r0, r5, r6, r7, r8, ip, pc}

080111b4 <remoteconfig::json_get_display(char*, unsigned short)>:
 80111b4:	b508      	push	{r3, lr}
 80111b6:	4b05      	ldr	r3, [pc, #20]	; (80111cc <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 80111b8:	4a05      	ldr	r2, [pc, #20]	; (80111d0 <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	7c1b      	ldrb	r3, [r3, #16]
 80111be:	f083 0301 	eor.w	r3, r3, #1
 80111c2:	f7f8 faf3 	bl	80097ac <snprintf>
 80111c6:	b280      	uxth	r0, r0
 80111c8:	bd08      	pop	{r3, pc}
 80111ca:	bf00      	nop
 80111cc:	2001cd5c 	andcs	ip, r1, ip, asr sp
 80111d0:	080191f0 	stmdaeq	r1, {r4, r5, r6, r7, r8, ip, pc}

080111d4 <remoteconfig::json_get_directory(char*, unsigned short)>:
 80111d4:	b508      	push	{r3, lr}
 80111d6:	4a02      	ldr	r2, [pc, #8]	; (80111e0 <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 80111d8:	f7f8 fae8 	bl	80097ac <snprintf>
 80111dc:	b280      	uxth	r0, r0
 80111de:	bd08      	pop	{r3, pc}
 80111e0:	080191ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, ip, pc}

080111e4 <get_file_content(char const*, char*)>:
 80111e4:	2300      	movs	r3, #0
 80111e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80111e8:	4a18      	ldr	r2, [pc, #96]	; (801124c <get_file_content(char const*, char*)+0x68>)
 80111ea:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80111ee:	1e47      	subs	r7, r0, #1
 80111f0:	1e6e      	subs	r6, r5, #1
 80111f2:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 80111f6:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 80111fa:	4564      	cmp	r4, ip
 80111fc:	d00b      	beq.n	8011216 <get_file_content(char const*, char*)+0x32>
 80111fe:	3301      	adds	r3, #1
 8011200:	2b03      	cmp	r3, #3
 8011202:	d1f2      	bne.n	80111ea <get_file_content(char const*, char*)+0x6>
 8011204:	2333      	movs	r3, #51	; 0x33
 8011206:	4a12      	ldr	r2, [pc, #72]	; (8011250 <get_file_content(char const*, char*)+0x6c>)
 8011208:	4912      	ldr	r1, [pc, #72]	; (8011254 <get_file_content(char const*, char*)+0x70>)
 801120a:	4813      	ldr	r0, [pc, #76]	; (8011258 <get_file_content(char const*, char*)+0x74>)
 801120c:	f7f8 faa6 	bl	800975c <printf>
 8011210:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011214:	e016      	b.n	8011244 <get_file_content(char const*, char*)+0x60>
 8011216:	2c00      	cmp	r4, #0
 8011218:	d1eb      	bne.n	80111f2 <get_file_content(char const*, char*)+0xe>
 801121a:	460c      	mov	r4, r1
 801121c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011220:	6853      	ldr	r3, [r2, #4]
 8011222:	3b01      	subs	r3, #1
 8011224:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8011228:	f804 2b01 	strb.w	r2, [r4], #1
 801122c:	2a00      	cmp	r2, #0
 801122e:	d1f9      	bne.n	8011224 <get_file_content(char const*, char*)+0x40>
 8011230:	1a64      	subs	r4, r4, r1
 8011232:	3c01      	subs	r4, #1
 8011234:	232e      	movs	r3, #46	; 0x2e
 8011236:	e9cd 5400 	strd	r5, r4, [sp]
 801123a:	4a06      	ldr	r2, [pc, #24]	; (8011254 <get_file_content(char const*, char*)+0x70>)
 801123c:	4904      	ldr	r1, [pc, #16]	; (8011250 <get_file_content(char const*, char*)+0x6c>)
 801123e:	4807      	ldr	r0, [pc, #28]	; (801125c <get_file_content(char const*, char*)+0x78>)
 8011240:	f7f8 fa8c 	bl	800975c <printf>
 8011244:	4620      	mov	r0, r4
 8011246:	b003      	add	sp, #12
 8011248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801124a:	bf00      	nop
 801124c:	08019598 	stmdaeq	r1, {r3, r4, r7, r8, sl, ip, pc}
 8011250:	080192b4 	stmdaeq	r1, {r2, r4, r5, r7, r9, ip, pc}
 8011254:	08019295 	stmdaeq	r1, {r0, r2, r4, r7, r9, ip, pc}
 8011258:	080192e1 	stmdaeq	r1, {r0, r5, r6, r7, r9, ip, pc}
 801125c:	080192c5 	stmdaeq	r1, {r0, r2, r6, r7, r9, ip, pc}

08011260 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 8011260:	2300      	movs	r3, #0
 8011262:	2020      	movs	r0, #32
 8011264:	b510      	push	{r4, lr}
 8011266:	4a04      	ldr	r2, [pc, #16]	; (8011278 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 8011268:	428b      	cmp	r3, r1
 801126a:	d100      	bne.n	801126e <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0xe>
 801126c:	bd10      	pop	{r4, pc}
 801126e:	f852 4b04 	ldr.w	r4, [r2], #4
 8011272:	3301      	adds	r3, #1
 8011274:	4420      	add	r0, r4
 8011276:	e7f7      	b.n	8011268 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 8011278:	08019adc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, fp, ip, pc}

0801127c <SpiFlashStore::Init()>:
 801127c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011280:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8011398 <SpiFlashStore::Init()+0x11c>
 8011284:	4607      	mov	r7, r0
 8011286:	b085      	sub	sp, #20
 8011288:	f8d8 0000 	ldr.w	r0, [r8]
 801128c:	f000 fcf2 	bl	8011c74 <FlashRom::GetSectorSize() const>
 8011290:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8011294:	4605      	mov	r5, r0
 8011296:	d17d      	bne.n	8011394 <SpiFlashStore::Init()+0x118>
 8011298:	f8d8 0000 	ldr.w	r0, [r8]
 801129c:	f000 fce2 	bl	8011c64 <FlashRom::GetSize() const>
 80112a0:	4b3e      	ldr	r3, [pc, #248]	; (801139c <SpiFlashStore::Init()+0x120>)
 80112a2:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 80112a6:	f3c1 060b 	ubfx	r6, r1, #0, #12
 80112aa:	6019      	str	r1, [r3, #0]
 80112ac:	2e00      	cmp	r6, #0
 80112ae:	d171      	bne.n	8011394 <SpiFlashStore::Init()+0x118>
 80112b0:	4c3b      	ldr	r4, [pc, #236]	; (80113a0 <SpiFlashStore::Init()+0x124>)
 80112b2:	ab03      	add	r3, sp, #12
 80112b4:	9300      	str	r3, [sp, #0]
 80112b6:	462a      	mov	r2, r5
 80112b8:	4623      	mov	r3, r4
 80112ba:	f8d8 0000 	ldr.w	r0, [r8]
 80112be:	f000 fcdc 	bl	8011c7a <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 80112c2:	7823      	ldrb	r3, [r4, #0]
 80112c4:	2b41      	cmp	r3, #65	; 0x41
 80112c6:	bf1c      	itt	ne
 80112c8:	2341      	movne	r3, #65	; 0x41
 80112ca:	7023      	strbne	r3, [r4, #0]
 80112cc:	7863      	ldrb	r3, [r4, #1]
 80112ce:	bf14      	ite	ne
 80112d0:	4635      	movne	r5, r6
 80112d2:	2501      	moveq	r5, #1
 80112d4:	2b76      	cmp	r3, #118	; 0x76
 80112d6:	bf1c      	itt	ne
 80112d8:	2376      	movne	r3, #118	; 0x76
 80112da:	7063      	strbne	r3, [r4, #1]
 80112dc:	78a3      	ldrb	r3, [r4, #2]
 80112de:	bf18      	it	ne
 80112e0:	2500      	movne	r5, #0
 80112e2:	2b56      	cmp	r3, #86	; 0x56
 80112e4:	bf1c      	itt	ne
 80112e6:	2356      	movne	r3, #86	; 0x56
 80112e8:	70a3      	strbne	r3, [r4, #2]
 80112ea:	78e3      	ldrb	r3, [r4, #3]
 80112ec:	bf18      	it	ne
 80112ee:	2500      	movne	r5, #0
 80112f0:	2b10      	cmp	r3, #16
 80112f2:	d022      	beq.n	801133a <SpiFlashStore::Init()+0xbe>
 80112f4:	2310      	movs	r3, #16
 80112f6:	70e3      	strb	r3, [r4, #3]
 80112f8:	2201      	movs	r2, #1
 80112fa:	2500      	movs	r5, #0
 80112fc:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8011300:	4b28      	ldr	r3, [pc, #160]	; (80113a4 <SpiFlashStore::Init()+0x128>)
 8011302:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80113a8 <SpiFlashStore::Init()+0x12c>
 8011306:	701a      	strb	r2, [r3, #0]
 8011308:	4631      	mov	r1, r6
 801130a:	4638      	mov	r0, r7
 801130c:	f7ff ffa8 	bl	8011260 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8011310:	1823      	adds	r3, r4, r0
 8011312:	5425      	strb	r5, [r4, r0]
 8011314:	705d      	strb	r5, [r3, #1]
 8011316:	709d      	strb	r5, [r3, #2]
 8011318:	70dd      	strb	r5, [r3, #3]
 801131a:	f858 3b04 	ldr.w	r3, [r8], #4
 801131e:	1d02      	adds	r2, r0, #4
 8011320:	4403      	add	r3, r0
 8011322:	429a      	cmp	r2, r3
 8011324:	d332      	bcc.n	801138c <SpiFlashStore::Init()+0x110>
 8011326:	3601      	adds	r6, #1
 8011328:	2e1c      	cmp	r6, #28
 801132a:	d1ed      	bne.n	8011308 <SpiFlashStore::Init()+0x8c>
 801132c:	2501      	movs	r5, #1
 801132e:	4b1f      	ldr	r3, [pc, #124]	; (80113ac <SpiFlashStore::Init()+0x130>)
 8011330:	601d      	str	r5, [r3, #0]
 8011332:	4628      	mov	r0, r5
 8011334:	b005      	add	sp, #20
 8011336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801133a:	2d00      	cmp	r5, #0
 801133c:	d0dc      	beq.n	80112f8 <SpiFlashStore::Init()+0x7c>
 801133e:	f04f 0900 	mov.w	r9, #0
 8011342:	46c8      	mov	r8, r9
 8011344:	4631      	mov	r1, r6
 8011346:	4638      	mov	r0, r7
 8011348:	f7ff ff8a 	bl	8011260 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 801134c:	5c23      	ldrb	r3, [r4, r0]
 801134e:	2bff      	cmp	r3, #255	; 0xff
 8011350:	d112      	bne.n	8011378 <SpiFlashStore::Init()+0xfc>
 8011352:	1823      	adds	r3, r4, r0
 8011354:	785a      	ldrb	r2, [r3, #1]
 8011356:	2aff      	cmp	r2, #255	; 0xff
 8011358:	d10e      	bne.n	8011378 <SpiFlashStore::Init()+0xfc>
 801135a:	789a      	ldrb	r2, [r3, #2]
 801135c:	2aff      	cmp	r2, #255	; 0xff
 801135e:	d10b      	bne.n	8011378 <SpiFlashStore::Init()+0xfc>
 8011360:	78da      	ldrb	r2, [r3, #3]
 8011362:	2aff      	cmp	r2, #255	; 0xff
 8011364:	d108      	bne.n	8011378 <SpiFlashStore::Init()+0xfc>
 8011366:	46a9      	mov	r9, r5
 8011368:	f804 8000 	strb.w	r8, [r4, r0]
 801136c:	f883 8001 	strb.w	r8, [r3, #1]
 8011370:	f883 8002 	strb.w	r8, [r3, #2]
 8011374:	f883 8003 	strb.w	r8, [r3, #3]
 8011378:	3601      	adds	r6, #1
 801137a:	2e1c      	cmp	r6, #28
 801137c:	d1e2      	bne.n	8011344 <SpiFlashStore::Init()+0xc8>
 801137e:	f1b9 0f00 	cmp.w	r9, #0
 8011382:	d0d6      	beq.n	8011332 <SpiFlashStore::Init()+0xb6>
 8011384:	2201      	movs	r2, #1
 8011386:	4b09      	ldr	r3, [pc, #36]	; (80113ac <SpiFlashStore::Init()+0x130>)
 8011388:	601a      	str	r2, [r3, #0]
 801138a:	e7d2      	b.n	8011332 <SpiFlashStore::Init()+0xb6>
 801138c:	f804 9002 	strb.w	r9, [r4, r2]
 8011390:	3201      	adds	r2, #1
 8011392:	e7c6      	b.n	8011322 <SpiFlashStore::Init()+0xa6>
 8011394:	2500      	movs	r5, #0
 8011396:	e7cc      	b.n	8011332 <SpiFlashStore::Init()+0xb6>
 8011398:	20014e3c 	andcs	r4, r1, ip, lsr lr
 801139c:	20014e0c 	andcs	r4, r1, ip, lsl #28
 80113a0:	20013e0c 	andcs	r3, r1, ip, lsl #28
 80113a4:	20014e20 	andcs	r4, r1, r0, lsr #28
 80113a8:	08019adc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, fp, ip, pc}
 80113ac:	20014e18 	andcs	r4, r1, r8, lsl lr

080113b0 <SpiFlashStore::SpiFlashStore()>:
 80113b0:	b538      	push	{r3, r4, r5, lr}
 80113b2:	4b0d      	ldr	r3, [pc, #52]	; (80113e8 <SpiFlashStore::SpiFlashStore()+0x38>)
 80113b4:	4604      	mov	r4, r0
 80113b6:	6018      	str	r0, [r3, #0]
 80113b8:	4b0c      	ldr	r3, [pc, #48]	; (80113ec <SpiFlashStore::SpiFlashStore()+0x3c>)
 80113ba:	4d0d      	ldr	r5, [pc, #52]	; (80113f0 <SpiFlashStore::SpiFlashStore()+0x40>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	b113      	cbz	r3, 80113c8 <SpiFlashStore::SpiFlashStore()+0x18>
 80113c2:	f7ff ff5b 	bl	801127c <SpiFlashStore::Init()>
 80113c6:	7028      	strb	r0, [r5, #0]
 80113c8:	782b      	ldrb	r3, [r5, #0]
 80113ca:	b153      	cbz	r3, 80113e2 <SpiFlashStore::SpiFlashStore()+0x32>
 80113cc:	2320      	movs	r3, #32
 80113ce:	2200      	movs	r2, #0
 80113d0:	4908      	ldr	r1, [pc, #32]	; (80113f4 <SpiFlashStore::SpiFlashStore()+0x44>)
 80113d2:	f851 0b04 	ldr.w	r0, [r1], #4
 80113d6:	3201      	adds	r2, #1
 80113d8:	2a1c      	cmp	r2, #28
 80113da:	4403      	add	r3, r0
 80113dc:	d1f9      	bne.n	80113d2 <SpiFlashStore::SpiFlashStore()+0x22>
 80113de:	4a06      	ldr	r2, [pc, #24]	; (80113f8 <SpiFlashStore::SpiFlashStore()+0x48>)
 80113e0:	6013      	str	r3, [r2, #0]
 80113e2:	4620      	mov	r0, r4
 80113e4:	bd38      	pop	{r3, r4, r5, pc}
 80113e6:	bf00      	nop
 80113e8:	20014e1c 	andcs	r4, r1, ip, lsl lr
 80113ec:	20014e3c 	andcs	r4, r1, ip, lsr lr
 80113f0:	20014e10 	andcs	r4, r1, r0, lsl lr
 80113f4:	08019adc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, fp, ip, pc}
 80113f8:	20014e14 	andcs	r4, r1, r4, lsl lr

080113fc <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 80113fc:	b508      	push	{r3, lr}
 80113fe:	f7ff ff2f 	bl	8011260 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8011402:	2300      	movs	r3, #0
 8011404:	4904      	ldr	r1, [pc, #16]	; (8011418 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 8011406:	1842      	adds	r2, r0, r1
 8011408:	540b      	strb	r3, [r1, r0]
 801140a:	7053      	strb	r3, [r2, #1]
 801140c:	7093      	strb	r3, [r2, #2]
 801140e:	70d3      	strb	r3, [r2, #3]
 8011410:	2201      	movs	r2, #1
 8011412:	4b02      	ldr	r3, [pc, #8]	; (801141c <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 8011414:	601a      	str	r2, [r3, #0]
 8011416:	bd08      	pop	{r3, pc}
 8011418:	20013e0c 	andcs	r3, r1, ip, lsl #28
 801141c:	20014e18 	andcs	r4, r1, r8, lsl lr

08011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 8011420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011424:	461c      	mov	r4, r3
 8011426:	4b19      	ldr	r3, [pc, #100]	; (801148c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 8011428:	4615      	mov	r5, r2
 801142a:	781f      	ldrb	r7, [r3, #0]
 801142c:	9e07      	ldr	r6, [sp, #28]
 801142e:	b307      	cbz	r7, 8011472 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8011430:	f7ff ff16 	bl	8011260 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8011434:	f04f 0c00 	mov.w	ip, #0
 8011438:	4a15      	ldr	r2, [pc, #84]	; (8011490 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 801143a:	1941      	adds	r1, r0, r5
 801143c:	1e63      	subs	r3, r4, #1
 801143e:	9c06      	ldr	r4, [sp, #24]
 8011440:	4411      	add	r1, r2
 8011442:	440c      	add	r4, r1
 8011444:	42a1      	cmp	r1, r4
 8011446:	d116      	bne.n	8011476 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 8011448:	f1bc 0f00 	cmp.w	ip, #0
 801144c:	d011      	beq.n	8011472 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 801144e:	4b11      	ldr	r3, [pc, #68]	; (8011494 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 8011450:	6819      	ldr	r1, [r3, #0]
 8011452:	b109      	cbz	r1, 8011458 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 8011454:	2906      	cmp	r1, #6
 8011456:	d101      	bne.n	801145c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 8011458:	2101      	movs	r1, #1
 801145a:	6019      	str	r1, [r3, #0]
 801145c:	4b0e      	ldr	r3, [pc, #56]	; (8011498 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 801145e:	6819      	ldr	r1, [r3, #0]
 8011460:	4b0e      	ldr	r3, [pc, #56]	; (801149c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 8011462:	6019      	str	r1, [r3, #0]
 8011464:	b12d      	cbz	r5, 8011472 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8011466:	b126      	cbz	r6, 8011472 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8011468:	9b08      	ldr	r3, [sp, #32]
 801146a:	4418      	add	r0, r3
 801146c:	5813      	ldr	r3, [r2, r0]
 801146e:	4333      	orrs	r3, r6
 8011470:	5013      	str	r3, [r2, r0]
 8011472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011476:	f891 8000 	ldrb.w	r8, [r1]
 801147a:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801147e:	3101      	adds	r1, #1
 8011480:	45f0      	cmp	r8, lr
 8011482:	bf1c      	itt	ne
 8011484:	f801 ec01 	strbne.w	lr, [r1, #-1]
 8011488:	46bc      	movne	ip, r7
 801148a:	e7db      	b.n	8011444 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 801148c:	20014e10 	andcs	r4, r1, r0, lsl lr
 8011490:	20013e0c 	andcs	r3, r1, ip, lsl #28
 8011494:	20014e18 	andcs	r4, r1, r8, lsl lr
 8011498:	2001ce64 	andcs	ip, r1, r4, ror #28
 801149c:	20013e08 	andcs	r3, r1, r8, lsl #28

080114a0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>:
 80114a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80114a4:	461d      	mov	r5, r3
 80114a6:	4b11      	ldr	r3, [pc, #68]	; (80114ec <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x4c>)
 80114a8:	4607      	mov	r7, r0
 80114aa:	781b      	ldrb	r3, [r3, #0]
 80114ac:	4614      	mov	r4, r2
 80114ae:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80114b2:	b1c3      	cbz	r3, 80114e6 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x46>
 80114b4:	f7ff fed4 	bl	8011260 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 80114b8:	4a0d      	ldr	r2, [pc, #52]	; (80114f0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x50>)
 80114ba:	eb00 0608 	add.w	r6, r0, r8
 80114be:	5990      	ldr	r0, [r2, r6]
 80114c0:	18b3      	adds	r3, r6, r2
 80114c2:	b140      	cbz	r0, 80114d6 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x36>
 80114c4:	3c01      	subs	r4, #1
 80114c6:	441d      	add	r5, r3
 80114c8:	429d      	cmp	r5, r3
 80114ca:	d00c      	beq.n	80114e6 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x46>
 80114cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114d0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80114d4:	e7f8      	b.n	80114c8 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x28>
 80114d6:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80114da:	4623      	mov	r3, r4
 80114dc:	4642      	mov	r2, r8
 80114de:	4638      	mov	r0, r7
 80114e0:	9500      	str	r5, [sp, #0]
 80114e2:	f7ff ff9d 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80114e6:	b004      	add	sp, #16
 80114e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114ec:	20014e10 	andcs	r4, r1, r0, lsl lr
 80114f0:	20013e0c 	andcs	r3, r1, ip, lsl #28

080114f4 <SpiFlashStore::Flash()>:
 80114f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80114f6:	4c25      	ldr	r4, [pc, #148]	; (801158c <SpiFlashStore::Flash()+0x98>)
 80114f8:	6820      	ldr	r0, [r4, #0]
 80114fa:	2800      	cmp	r0, #0
 80114fc:	d043      	beq.n	8011586 <SpiFlashStore::Flash()+0x92>
 80114fe:	3801      	subs	r0, #1
 8011500:	2805      	cmp	r0, #5
 8011502:	d831      	bhi.n	8011568 <SpiFlashStore::Flash()+0x74>
 8011504:	e8df f000 	tbb	[pc, r0]
 8011508:	2e140b03 	vnmlscs.f64	d0, d4, d3
 801150c:	4b203025 	blmi	881d5a8 <__exidx_end+0x802e54>
 8011510:	681a      	ldr	r2, [r3, #0]
 8011512:	4b20      	ldr	r3, [pc, #128]	; (8011594 <SpiFlashStore::Flash()+0xa0>)
 8011514:	601a      	str	r2, [r3, #0]
 8011516:	2302      	movs	r3, #2
 8011518:	6023      	str	r3, [r4, #0]
 801151a:	2001      	movs	r0, #1
 801151c:	e033      	b.n	8011586 <SpiFlashStore::Flash()+0x92>
 801151e:	4b1c      	ldr	r3, [pc, #112]	; (8011590 <SpiFlashStore::Flash()+0x9c>)
 8011520:	4a1c      	ldr	r2, [pc, #112]	; (8011594 <SpiFlashStore::Flash()+0xa0>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	6812      	ldr	r2, [r2, #0]
 8011526:	1a9b      	subs	r3, r3, r2
 8011528:	2b63      	cmp	r3, #99	; 0x63
 801152a:	d9f6      	bls.n	801151a <SpiFlashStore::Flash()+0x26>
 801152c:	2303      	movs	r3, #3
 801152e:	e7f3      	b.n	8011518 <SpiFlashStore::Flash()+0x24>
 8011530:	4919      	ldr	r1, [pc, #100]	; (8011598 <SpiFlashStore::Flash()+0xa4>)
 8011532:	481a      	ldr	r0, [pc, #104]	; (801159c <SpiFlashStore::Flash()+0xa8>)
 8011534:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011538:	6809      	ldr	r1, [r1, #0]
 801153a:	6800      	ldr	r0, [r0, #0]
 801153c:	ab03      	add	r3, sp, #12
 801153e:	f000 fbab 	bl	8011c98 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 8011542:	2800      	cmp	r0, #0
 8011544:	d0e9      	beq.n	801151a <SpiFlashStore::Flash()+0x26>
 8011546:	4b12      	ldr	r3, [pc, #72]	; (8011590 <SpiFlashStore::Flash()+0x9c>)
 8011548:	681a      	ldr	r2, [r3, #0]
 801154a:	4b12      	ldr	r3, [pc, #72]	; (8011594 <SpiFlashStore::Flash()+0xa0>)
 801154c:	601a      	str	r2, [r3, #0]
 801154e:	2305      	movs	r3, #5
 8011550:	e7e2      	b.n	8011518 <SpiFlashStore::Flash()+0x24>
 8011552:	4b0f      	ldr	r3, [pc, #60]	; (8011590 <SpiFlashStore::Flash()+0x9c>)
 8011554:	4a0f      	ldr	r2, [pc, #60]	; (8011594 <SpiFlashStore::Flash()+0xa0>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	6812      	ldr	r2, [r2, #0]
 801155a:	1a9b      	subs	r3, r3, r2
 801155c:	2b63      	cmp	r3, #99	; 0x63
 801155e:	d9dc      	bls.n	801151a <SpiFlashStore::Flash()+0x26>
 8011560:	2304      	movs	r3, #4
 8011562:	e7d9      	b.n	8011518 <SpiFlashStore::Flash()+0x24>
 8011564:	2306      	movs	r3, #6
 8011566:	e7d7      	b.n	8011518 <SpiFlashStore::Flash()+0x24>
 8011568:	ab03      	add	r3, sp, #12
 801156a:	4a0d      	ldr	r2, [pc, #52]	; (80115a0 <SpiFlashStore::Flash()+0xac>)
 801156c:	490a      	ldr	r1, [pc, #40]	; (8011598 <SpiFlashStore::Flash()+0xa4>)
 801156e:	480b      	ldr	r0, [pc, #44]	; (801159c <SpiFlashStore::Flash()+0xa8>)
 8011570:	9300      	str	r3, [sp, #0]
 8011572:	6812      	ldr	r2, [r2, #0]
 8011574:	4b0b      	ldr	r3, [pc, #44]	; (80115a4 <SpiFlashStore::Flash()+0xb0>)
 8011576:	6809      	ldr	r1, [r1, #0]
 8011578:	6800      	ldr	r0, [r0, #0]
 801157a:	f000 fc2d 	bl	8011dd8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 801157e:	2800      	cmp	r0, #0
 8011580:	d0cb      	beq.n	801151a <SpiFlashStore::Flash()+0x26>
 8011582:	2000      	movs	r0, #0
 8011584:	6020      	str	r0, [r4, #0]
 8011586:	b004      	add	sp, #16
 8011588:	bd10      	pop	{r4, pc}
 801158a:	bf00      	nop
 801158c:	20014e18 	andcs	r4, r1, r8, lsl lr
 8011590:	2001ce64 	andcs	ip, r1, r4, ror #28
 8011594:	20013e08 	andcs	r3, r1, r8, lsl #28
 8011598:	20014e0c 	andcs	r4, r1, ip, lsl #28
 801159c:	20014e3c 	andcs	r4, r1, ip, lsr lr
 80115a0:	20014e14 	andcs	r4, r1, r4, lsl lr
 80115a4:	20013e0c 	andcs	r3, r1, ip, lsl #28

080115a8 <StoreArtNet::~StoreArtNet()>:
 80115a8:	4770      	bx	lr

080115aa <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 80115aa:	3804      	subs	r0, #4
 80115ac:	4770      	bx	lr
	...

080115b0 <StoreArtNet::Update(artnetparams::Params const*)>:
 80115b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80115b2:	2200      	movs	r2, #0
 80115b4:	460b      	mov	r3, r1
 80115b6:	2187      	movs	r1, #135	; 0x87
 80115b8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80115bc:	4804      	ldr	r0, [pc, #16]	; (80115d0 <StoreArtNet::Update(artnetparams::Params const*)+0x20>)
 80115be:	9100      	str	r1, [sp, #0]
 80115c0:	6800      	ldr	r0, [r0, #0]
 80115c2:	2101      	movs	r1, #1
 80115c4:	f7ff ff2c 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80115c8:	b005      	add	sp, #20
 80115ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80115ce:	bf00      	nop
 80115d0:	20014e1c 	andcs	r4, r1, ip, lsl lr

080115d4 <StoreArtNet::SaveShortName(char const*)>:
 80115d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80115d6:	460b      	mov	r3, r1
 80115d8:	2202      	movs	r2, #2
 80115da:	2100      	movs	r1, #0
 80115dc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80115e0:	2212      	movs	r2, #18
 80115e2:	4805      	ldr	r0, [pc, #20]	; (80115f8 <StoreArtNet::SaveShortName(char const*)+0x24>)
 80115e4:	9200      	str	r2, [sp, #0]
 80115e6:	2101      	movs	r1, #1
 80115e8:	220c      	movs	r2, #12
 80115ea:	6800      	ldr	r0, [r0, #0]
 80115ec:	f7ff ff18 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80115f0:	b005      	add	sp, #20
 80115f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80115f6:	bf00      	nop
 80115f8:	20014e1c 	andcs	r4, r1, ip, lsl lr

080115fc <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
 80115fc:	f1a0 0004 	sub.w	r0, r0, #4
 8011600:	f7ff bfe8 	b.w	80115d4 <StoreArtNet::SaveShortName(char const*)>

08011604 <StoreArtNet::SaveLongName(char const*)>:
 8011604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011606:	460b      	mov	r3, r1
 8011608:	2200      	movs	r2, #0
 801160a:	2101      	movs	r1, #1
 801160c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8011610:	2240      	movs	r2, #64	; 0x40
 8011612:	4804      	ldr	r0, [pc, #16]	; (8011624 <StoreArtNet::SaveLongName(char const*)+0x20>)
 8011614:	9200      	str	r2, [sp, #0]
 8011616:	6800      	ldr	r0, [r0, #0]
 8011618:	221e      	movs	r2, #30
 801161a:	f7ff ff01 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801161e:	b005      	add	sp, #20
 8011620:	f85d fb04 	ldr.w	pc, [sp], #4
 8011624:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011628 <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
 8011628:	f1a0 0004 	sub.w	r0, r0, #4
 801162c:	f7ff bfea 	b.w	8011604 <StoreArtNet::SaveLongName(char const*)>

08011630 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 8011630:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011632:	2300      	movs	r3, #0
 8011634:	9302      	str	r3, [sp, #8]
 8011636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801163a:	4608      	mov	r0, r1
 801163c:	408b      	lsls	r3, r1
 801163e:	2101      	movs	r1, #1
 8011640:	f88d 2017 	strb.w	r2, [sp, #23]
 8011644:	f100 0267 	add.w	r2, r0, #103	; 0x67
 8011648:	4805      	ldr	r0, [pc, #20]	; (8011660 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x30>)
 801164a:	9301      	str	r3, [sp, #4]
 801164c:	9100      	str	r1, [sp, #0]
 801164e:	6800      	ldr	r0, [r0, #0]
 8011650:	f10d 0317 	add.w	r3, sp, #23
 8011654:	f7ff fee4 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011658:	b007      	add	sp, #28
 801165a:	f85d fb04 	ldr.w	pc, [sp], #4
 801165e:	bf00      	nop
 8011660:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011664 <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 8011664:	f1a0 0004 	sub.w	r0, r0, #4
 8011668:	f7ff bfe2 	b.w	8011630 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

0801166c <StoreArtNet::SaveNetSwitch(unsigned char)>:
 801166c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801166e:	2204      	movs	r2, #4
 8011670:	2300      	movs	r3, #0
 8011672:	f88d 1017 	strb.w	r1, [sp, #23]
 8011676:	2101      	movs	r1, #1
 8011678:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801167c:	4804      	ldr	r0, [pc, #16]	; (8011690 <StoreArtNet::SaveNetSwitch(unsigned char)+0x24>)
 801167e:	9100      	str	r1, [sp, #0]
 8011680:	6800      	ldr	r0, [r0, #0]
 8011682:	f10d 0317 	add.w	r3, sp, #23
 8011686:	f7ff fecb 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801168a:	b007      	add	sp, #28
 801168c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011690:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011694 <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned char)>:
 8011694:	f1a0 0004 	sub.w	r0, r0, #4
 8011698:	f7ff bfe8 	b.w	801166c <StoreArtNet::SaveNetSwitch(unsigned char)>

0801169c <StoreArtNet::SaveSubnetSwitch(unsigned char)>:
 801169c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801169e:	2308      	movs	r3, #8
 80116a0:	2200      	movs	r2, #0
 80116a2:	f88d 1017 	strb.w	r1, [sp, #23]
 80116a6:	2101      	movs	r1, #1
 80116a8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80116ac:	4805      	ldr	r0, [pc, #20]	; (80116c4 <StoreArtNet::SaveSubnetSwitch(unsigned char)+0x28>)
 80116ae:	9100      	str	r1, [sp, #0]
 80116b0:	2205      	movs	r2, #5
 80116b2:	6800      	ldr	r0, [r0, #0]
 80116b4:	f10d 0317 	add.w	r3, sp, #23
 80116b8:	f7ff feb2 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80116bc:	b007      	add	sp, #28
 80116be:	f85d fb04 	ldr.w	pc, [sp], #4
 80116c2:	bf00      	nop
 80116c4:	20014e1c 	andcs	r4, r1, ip, lsl lr

080116c8 <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned char)>:
 80116c8:	f1a0 0004 	sub.w	r0, r0, #4
 80116cc:	f7ff bfe6 	b.w	801169c <StoreArtNet::SaveSubnetSwitch(unsigned char)>

080116d0 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 80116d0:	b530      	push	{r4, r5, lr}
 80116d2:	b087      	sub	sp, #28
 80116d4:	460c      	mov	r4, r1
 80116d6:	4d0f      	ldr	r5, [pc, #60]	; (8011714 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x44>)
 80116d8:	9205      	str	r2, [sp, #20]
 80116da:	b951      	cbnz	r1, 80116f2 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x22>
 80116dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80116e0:	9102      	str	r1, [sp, #8]
 80116e2:	2101      	movs	r1, #1
 80116e4:	226b      	movs	r2, #107	; 0x6b
 80116e6:	e9cd 1300 	strd	r1, r3, [sp]
 80116ea:	6828      	ldr	r0, [r5, #0]
 80116ec:	ab05      	add	r3, sp, #20
 80116ee:	f7ff fe97 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80116f2:	2300      	movs	r3, #0
 80116f4:	9302      	str	r3, [sp, #8]
 80116f6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80116fa:	2101      	movs	r1, #1
 80116fc:	40a3      	lsls	r3, r4
 80116fe:	9301      	str	r3, [sp, #4]
 8011700:	6828      	ldr	r0, [r5, #0]
 8011702:	9100      	str	r1, [sp, #0]
 8011704:	ab05      	add	r3, sp, #20
 8011706:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 801170a:	f7ff fe89 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801170e:	b007      	add	sp, #28
 8011710:	bd30      	pop	{r4, r5, pc}
 8011712:	bf00      	nop
 8011714:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011718 <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 8011718:	f1a0 0004 	sub.w	r0, r0, #4
 801171c:	f7ff bfd8 	b.w	80116d0 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

08011720 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 8011720:	b530      	push	{r4, r5, lr}
 8011722:	b087      	sub	sp, #28
 8011724:	460c      	mov	r4, r1
 8011726:	4d0f      	ldr	r5, [pc, #60]	; (8011764 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x44>)
 8011728:	9205      	str	r2, [sp, #20]
 801172a:	b951      	cbnz	r1, 8011742 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x22>
 801172c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011730:	9102      	str	r1, [sp, #8]
 8011732:	2101      	movs	r1, #1
 8011734:	2270      	movs	r2, #112	; 0x70
 8011736:	e9cd 1300 	strd	r1, r3, [sp]
 801173a:	6828      	ldr	r0, [r5, #0]
 801173c:	ab05      	add	r3, sp, #20
 801173e:	f7ff fe6f 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011742:	2300      	movs	r3, #0
 8011744:	9302      	str	r3, [sp, #8]
 8011746:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801174a:	2101      	movs	r1, #1
 801174c:	40a3      	lsls	r3, r4
 801174e:	9301      	str	r3, [sp, #4]
 8011750:	6828      	ldr	r0, [r5, #0]
 8011752:	9100      	str	r1, [sp, #0]
 8011754:	ab05      	add	r3, sp, #20
 8011756:	f104 0271 	add.w	r2, r4, #113	; 0x71
 801175a:	f7ff fe61 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801175e:	b007      	add	sp, #28
 8011760:	bd30      	pop	{r4, r5, pc}
 8011762:	bf00      	nop
 8011764:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011768 <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 8011768:	f1a0 0004 	sub.w	r0, r0, #4
 801176c:	f7ff bfd8 	b.w	8011720 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

08011770 <StoreArtNet::~StoreArtNet()>:
 8011770:	b510      	push	{r4, lr}
 8011772:	4604      	mov	r4, r0
 8011774:	f004 f924 	bl	80159c0 <operator delete(void*)>
 8011778:	4620      	mov	r0, r4
 801177a:	bd10      	pop	{r4, pc}

0801177c <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 801177c:	f1a0 0004 	sub.w	r0, r0, #4
 8011780:	e7f6      	b.n	8011770 <StoreArtNet::~StoreArtNet()>
	...

08011784 <StoreArtNet::Copy(artnetparams::Params*)>:
 8011784:	2300      	movs	r3, #0
 8011786:	b507      	push	{r0, r1, r2, lr}
 8011788:	4805      	ldr	r0, [pc, #20]	; (80117a0 <StoreArtNet::Copy(artnetparams::Params*)+0x1c>)
 801178a:	9300      	str	r3, [sp, #0]
 801178c:	460a      	mov	r2, r1
 801178e:	2387      	movs	r3, #135	; 0x87
 8011790:	2101      	movs	r1, #1
 8011792:	6800      	ldr	r0, [r0, #0]
 8011794:	f7ff fe84 	bl	80114a0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8011798:	b003      	add	sp, #12
 801179a:	f85d fb04 	ldr.w	pc, [sp], #4
 801179e:	bf00      	nop
 80117a0:	20014e1c 	andcs	r4, r1, ip, lsl lr

080117a4 <StoreArtNet::StoreArtNet()>:
 80117a4:	4a04      	ldr	r2, [pc, #16]	; (80117b8 <StoreArtNet::StoreArtNet()+0x14>)
 80117a6:	f102 0108 	add.w	r1, r2, #8
 80117aa:	323c      	adds	r2, #60	; 0x3c
 80117ac:	6042      	str	r2, [r0, #4]
 80117ae:	4a03      	ldr	r2, [pc, #12]	; (80117bc <StoreArtNet::StoreArtNet()+0x18>)
 80117b0:	6001      	str	r1, [r0, #0]
 80117b2:	6010      	str	r0, [r2, #0]
 80117b4:	4770      	bx	lr
 80117b6:	bf00      	nop
 80117b8:	08019b4c 	stmdaeq	r1, {r2, r3, r6, r8, r9, fp, ip, pc}
 80117bc:	20014e24 	andcs	r4, r1, r4, lsr #28

080117c0 <StoreDisplayUdf::~StoreDisplayUdf()>:
 80117c0:	4770      	bx	lr
	...

080117c4 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 80117c4:	2300      	movs	r3, #0
 80117c6:	b507      	push	{r0, r1, r2, lr}
 80117c8:	4805      	ldr	r0, [pc, #20]	; (80117e0 <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x1c>)
 80117ca:	9300      	str	r3, [sp, #0]
 80117cc:	460a      	mov	r2, r1
 80117ce:	2322      	movs	r3, #34	; 0x22
 80117d0:	210f      	movs	r1, #15
 80117d2:	6800      	ldr	r0, [r0, #0]
 80117d4:	f7ff fe64 	bl	80114a0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 80117d8:	b003      	add	sp, #12
 80117da:	f85d fb04 	ldr.w	pc, [sp], #4
 80117de:	bf00      	nop
 80117e0:	20014e1c 	andcs	r4, r1, ip, lsl lr

080117e4 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 80117e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80117e6:	2200      	movs	r2, #0
 80117e8:	460b      	mov	r3, r1
 80117ea:	2122      	movs	r1, #34	; 0x22
 80117ec:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80117f0:	4804      	ldr	r0, [pc, #16]	; (8011804 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 80117f2:	9100      	str	r1, [sp, #0]
 80117f4:	6800      	ldr	r0, [r0, #0]
 80117f6:	210f      	movs	r1, #15
 80117f8:	f7ff fe12 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80117fc:	b005      	add	sp, #20
 80117fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8011802:	bf00      	nop
 8011804:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011808 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8011808:	b510      	push	{r4, lr}
 801180a:	4604      	mov	r4, r0
 801180c:	f004 f8d8 	bl	80159c0 <operator delete(void*)>
 8011810:	4620      	mov	r0, r4
 8011812:	bd10      	pop	{r4, pc}

08011814 <StoreDisplayUdf::StoreDisplayUdf()>:
 8011814:	4a02      	ldr	r2, [pc, #8]	; (8011820 <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 8011816:	6002      	str	r2, [r0, #0]
 8011818:	4a02      	ldr	r2, [pc, #8]	; (8011824 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 801181a:	6010      	str	r0, [r2, #0]
 801181c:	4770      	bx	lr
 801181e:	bf00      	nop
 8011820:	08019bb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, fp, ip, pc}
 8011824:	20014e28 	andcs	r4, r1, r8, lsr #28

08011828 <StoreNetwork::~StoreNetwork()>:
 8011828:	4770      	bx	lr

0801182a <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 801182a:	3804      	subs	r0, #4
 801182c:	4770      	bx	lr
	...

08011830 <StoreNetwork::Update(TNetworkParams const*)>:
 8011830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011832:	2200      	movs	r2, #0
 8011834:	460b      	mov	r3, r1
 8011836:	215e      	movs	r1, #94	; 0x5e
 8011838:	e9cd 2201 	strd	r2, r2, [sp, #4]
 801183c:	4804      	ldr	r0, [pc, #16]	; (8011850 <StoreNetwork::Update(TNetworkParams const*)+0x20>)
 801183e:	9100      	str	r1, [sp, #0]
 8011840:	6800      	ldr	r0, [r0, #0]
 8011842:	4611      	mov	r1, r2
 8011844:	f7ff fdec 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011848:	b005      	add	sp, #20
 801184a:	f85d fb04 	ldr.w	pc, [sp], #4
 801184e:	bf00      	nop
 8011850:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011854 <StoreNetwork::SaveGatewayIp(unsigned int)>:
 8011854:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011856:	2308      	movs	r3, #8
 8011858:	9105      	str	r1, [sp, #20]
 801185a:	2100      	movs	r1, #0
 801185c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011860:	2304      	movs	r3, #4
 8011862:	4805      	ldr	r0, [pc, #20]	; (8011878 <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 8011864:	9300      	str	r3, [sp, #0]
 8011866:	220c      	movs	r2, #12
 8011868:	6800      	ldr	r0, [r0, #0]
 801186a:	ab05      	add	r3, sp, #20
 801186c:	f7ff fdd8 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011870:	b007      	add	sp, #28
 8011872:	f85d fb04 	ldr.w	pc, [sp], #4
 8011876:	bf00      	nop
 8011878:	20014e1c 	andcs	r4, r1, ip, lsl lr

0801187c <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 801187c:	f1a0 0004 	sub.w	r0, r0, #4
 8011880:	e7e8      	b.n	8011854 <StoreNetwork::SaveGatewayIp(unsigned int)>
 8011882:	bf00      	nop

08011884 <StoreNetwork::SaveNetMask(unsigned int)>:
 8011884:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011886:	2304      	movs	r3, #4
 8011888:	9105      	str	r1, [sp, #20]
 801188a:	2100      	movs	r1, #0
 801188c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011890:	4804      	ldr	r0, [pc, #16]	; (80118a4 <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 8011892:	9300      	str	r3, [sp, #0]
 8011894:	2208      	movs	r2, #8
 8011896:	6800      	ldr	r0, [r0, #0]
 8011898:	ab05      	add	r3, sp, #20
 801189a:	f7ff fdc1 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801189e:	b007      	add	sp, #28
 80118a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80118a4:	20014e1c 	andcs	r4, r1, ip, lsl lr

080118a8 <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 80118a8:	f1a0 0004 	sub.w	r0, r0, #4
 80118ac:	e7ea      	b.n	8011884 <StoreNetwork::SaveNetMask(unsigned int)>
 80118ae:	bf00      	nop

080118b0 <StoreNetwork::SaveIp(unsigned int)>:
 80118b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80118b2:	2302      	movs	r3, #2
 80118b4:	9105      	str	r1, [sp, #20]
 80118b6:	2100      	movs	r1, #0
 80118b8:	2204      	movs	r2, #4
 80118ba:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80118be:	4804      	ldr	r0, [pc, #16]	; (80118d0 <StoreNetwork::SaveIp(unsigned int)+0x20>)
 80118c0:	9200      	str	r2, [sp, #0]
 80118c2:	6800      	ldr	r0, [r0, #0]
 80118c4:	ab05      	add	r3, sp, #20
 80118c6:	f7ff fdab 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80118ca:	b007      	add	sp, #28
 80118cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80118d0:	20014e1c 	andcs	r4, r1, ip, lsl lr

080118d4 <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 80118d4:	f1a0 0004 	sub.w	r0, r0, #4
 80118d8:	e7ea      	b.n	80118b0 <StoreNetwork::SaveIp(unsigned int)>
 80118da:	bf00      	nop

080118dc <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 80118dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80118de:	460b      	mov	r3, r1
 80118e0:	2020      	movs	r0, #32
 80118e2:	2100      	movs	r1, #0
 80118e4:	2a40      	cmp	r2, #64	; 0x40
 80118e6:	bf28      	it	cs
 80118e8:	2240      	movcs	r2, #64	; 0x40
 80118ea:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80118ee:	4804      	ldr	r0, [pc, #16]	; (8011900 <StoreNetwork::SaveHostName(char const*, unsigned int)+0x24>)
 80118f0:	9200      	str	r2, [sp, #0]
 80118f2:	6800      	ldr	r0, [r0, #0]
 80118f4:	2215      	movs	r2, #21
 80118f6:	f7ff fd93 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80118fa:	b005      	add	sp, #20
 80118fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8011900:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011904 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 8011904:	f1a0 0004 	sub.w	r0, r0, #4
 8011908:	e7e8      	b.n	80118dc <StoreNetwork::SaveHostName(char const*, unsigned int)>
 801190a:	bf00      	nop

0801190c <StoreNetwork::~StoreNetwork()>:
 801190c:	b510      	push	{r4, lr}
 801190e:	4604      	mov	r4, r0
 8011910:	f004 f856 	bl	80159c0 <operator delete(void*)>
 8011914:	4620      	mov	r0, r4
 8011916:	bd10      	pop	{r4, pc}

08011918 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 8011918:	f1a0 0004 	sub.w	r0, r0, #4
 801191c:	e7f6      	b.n	801190c <StoreNetwork::~StoreNetwork()>
	...

08011920 <StoreNetwork::Copy(TNetworkParams*)>:
 8011920:	b507      	push	{r0, r1, r2, lr}
 8011922:	460a      	mov	r2, r1
 8011924:	2100      	movs	r1, #0
 8011926:	4804      	ldr	r0, [pc, #16]	; (8011938 <StoreNetwork::Copy(TNetworkParams*)+0x18>)
 8011928:	9100      	str	r1, [sp, #0]
 801192a:	235e      	movs	r3, #94	; 0x5e
 801192c:	6800      	ldr	r0, [r0, #0]
 801192e:	f7ff fdb7 	bl	80114a0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8011932:	b003      	add	sp, #12
 8011934:	f85d fb04 	ldr.w	pc, [sp], #4
 8011938:	20014e1c 	andcs	r4, r1, ip, lsl lr

0801193c <StoreNetwork::StoreNetwork()>:
 801193c:	4a03      	ldr	r2, [pc, #12]	; (801194c <StoreNetwork::StoreNetwork()+0x10>)
 801193e:	6002      	str	r2, [r0, #0]
 8011940:	322c      	adds	r2, #44	; 0x2c
 8011942:	6042      	str	r2, [r0, #4]
 8011944:	4a02      	ldr	r2, [pc, #8]	; (8011950 <StoreNetwork::StoreNetwork()+0x14>)
 8011946:	6010      	str	r0, [r2, #0]
 8011948:	4770      	bx	lr
 801194a:	bf00      	nop
 801194c:	08019bcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, fp, ip, pc}
 8011950:	20014e2c 	andcs	r4, r1, ip, lsr #28

08011954 <StoreRDMDevice::~StoreRDMDevice()>:
 8011954:	4770      	bx	lr

08011956 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 8011956:	3804      	subs	r0, #4
 8011958:	4770      	bx	lr
	...

0801195c <StoreRDMDevice::Update(TRDMDeviceParams const*)>:
 801195c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801195e:	2200      	movs	r2, #0
 8011960:	460b      	mov	r3, r1
 8011962:	2129      	movs	r1, #41	; 0x29
 8011964:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8011968:	4804      	ldr	r0, [pc, #16]	; (801197c <StoreRDMDevice::Update(TRDMDeviceParams const*)+0x20>)
 801196a:	9100      	str	r1, [sp, #0]
 801196c:	6800      	ldr	r0, [r0, #0]
 801196e:	210b      	movs	r1, #11
 8011970:	f7ff fd56 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011974:	b005      	add	sp, #20
 8011976:	f85d fb04 	ldr.w	pc, [sp], #4
 801197a:	bf00      	nop
 801197c:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011980 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 8011980:	b570      	push	{r4, r5, r6, lr}
 8011982:	2401      	movs	r4, #1
 8011984:	2600      	movs	r6, #0
 8011986:	4d0c      	ldr	r5, [pc, #48]	; (80119b8 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 8011988:	b086      	sub	sp, #24
 801198a:	460b      	mov	r3, r1
 801198c:	6828      	ldr	r0, [r5, #0]
 801198e:	f88d 2017 	strb.w	r2, [sp, #23]
 8011992:	9200      	str	r2, [sp, #0]
 8011994:	210b      	movs	r1, #11
 8011996:	2204      	movs	r2, #4
 8011998:	e9cd 4601 	strd	r4, r6, [sp, #4]
 801199c:	f7ff fd40 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80119a0:	2224      	movs	r2, #36	; 0x24
 80119a2:	210b      	movs	r1, #11
 80119a4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80119a8:	6828      	ldr	r0, [r5, #0]
 80119aa:	9400      	str	r4, [sp, #0]
 80119ac:	f10d 0317 	add.w	r3, sp, #23
 80119b0:	f7ff fd36 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80119b4:	b006      	add	sp, #24
 80119b6:	bd70      	pop	{r4, r5, r6, pc}
 80119b8:	20014e1c 	andcs	r4, r1, ip, lsl lr

080119bc <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 80119bc:	f1a0 0004 	sub.w	r0, r0, #4
 80119c0:	e7de      	b.n	8011980 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 80119c2:	bf00      	nop

080119c4 <StoreRDMDevice::~StoreRDMDevice()>:
 80119c4:	b510      	push	{r4, lr}
 80119c6:	4604      	mov	r4, r0
 80119c8:	f003 fffa 	bl	80159c0 <operator delete(void*)>
 80119cc:	4620      	mov	r0, r4
 80119ce:	bd10      	pop	{r4, pc}

080119d0 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 80119d0:	f1a0 0004 	sub.w	r0, r0, #4
 80119d4:	e7f6      	b.n	80119c4 <StoreRDMDevice::~StoreRDMDevice()>
	...

080119d8 <StoreRDMDevice::Copy(TRDMDeviceParams*)>:
 80119d8:	2300      	movs	r3, #0
 80119da:	b507      	push	{r0, r1, r2, lr}
 80119dc:	4805      	ldr	r0, [pc, #20]	; (80119f4 <StoreRDMDevice::Copy(TRDMDeviceParams*)+0x1c>)
 80119de:	9300      	str	r3, [sp, #0]
 80119e0:	460a      	mov	r2, r1
 80119e2:	2329      	movs	r3, #41	; 0x29
 80119e4:	210b      	movs	r1, #11
 80119e6:	6800      	ldr	r0, [r0, #0]
 80119e8:	f7ff fd5a 	bl	80114a0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 80119ec:	b003      	add	sp, #12
 80119ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80119f2:	bf00      	nop
 80119f4:	20014e1c 	andcs	r4, r1, ip, lsl lr

080119f8 <StoreRDMDevice::StoreRDMDevice()>:
 80119f8:	4a03      	ldr	r2, [pc, #12]	; (8011a08 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 80119fa:	6002      	str	r2, [r0, #0]
 80119fc:	321c      	adds	r2, #28
 80119fe:	6042      	str	r2, [r0, #4]
 8011a00:	4a02      	ldr	r2, [pc, #8]	; (8011a0c <StoreRDMDevice::StoreRDMDevice()+0x14>)
 8011a02:	6010      	str	r0, [r2, #0]
 8011a04:	4770      	bx	lr
 8011a06:	bf00      	nop
 8011a08:	08019c1c 	stmdaeq	r1, {r2, r3, r4, sl, fp, ip, pc}
 8011a0c:	20014e30 	andcs	r4, r1, r0, lsr lr

08011a10 <StoreRemoteConfig::~StoreRemoteConfig()>:
 8011a10:	4770      	bx	lr
	...

08011a14 <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 8011a14:	2300      	movs	r3, #0
 8011a16:	b507      	push	{r0, r1, r2, lr}
 8011a18:	4805      	ldr	r0, [pc, #20]	; (8011a30 <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x1c>)
 8011a1a:	9300      	str	r3, [sp, #0]
 8011a1c:	460a      	mov	r2, r1
 8011a1e:	2320      	movs	r3, #32
 8011a20:	210c      	movs	r1, #12
 8011a22:	6800      	ldr	r0, [r0, #0]
 8011a24:	f7ff fd3c 	bl	80114a0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8011a28:	b003      	add	sp, #12
 8011a2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a2e:	bf00      	nop
 8011a30:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011a34 <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 8011a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a36:	2200      	movs	r2, #0
 8011a38:	460b      	mov	r3, r1
 8011a3a:	2120      	movs	r1, #32
 8011a3c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8011a40:	4804      	ldr	r0, [pc, #16]	; (8011a54 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 8011a42:	9100      	str	r1, [sp, #0]
 8011a44:	6800      	ldr	r0, [r0, #0]
 8011a46:	210c      	movs	r1, #12
 8011a48:	f7ff fcea 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011a4c:	b005      	add	sp, #20
 8011a4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a52:	bf00      	nop
 8011a54:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011a58 <StoreRemoteConfig::~StoreRemoteConfig()>:
 8011a58:	b510      	push	{r4, lr}
 8011a5a:	4604      	mov	r4, r0
 8011a5c:	f003 ffb0 	bl	80159c0 <operator delete(void*)>
 8011a60:	4620      	mov	r0, r4
 8011a62:	bd10      	pop	{r4, pc}

08011a64 <StoreRemoteConfig::StoreRemoteConfig()>:
 8011a64:	4a02      	ldr	r2, [pc, #8]	; (8011a70 <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 8011a66:	6002      	str	r2, [r0, #0]
 8011a68:	4a02      	ldr	r2, [pc, #8]	; (8011a74 <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 8011a6a:	6010      	str	r0, [r2, #0]
 8011a6c:	4770      	bx	lr
 8011a6e:	bf00      	nop
 8011a70:	08019c4c 	stmdaeq	r1, {r2, r3, r6, sl, fp, ip, pc}
 8011a74:	20014e34 	andcs	r4, r1, r4, lsr lr

08011a78 <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8011a78:	4770      	bx	lr

08011a7a <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8011a7a:	3804      	subs	r0, #4
 8011a7c:	4770      	bx	lr
	...

08011a80 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)>:
 8011a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a82:	2200      	movs	r2, #0
 8011a84:	460b      	mov	r3, r1
 8011a86:	2127      	movs	r1, #39	; 0x27
 8011a88:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8011a8c:	4804      	ldr	r0, [pc, #16]	; (8011aa0 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)+0x20>)
 8011a8e:	9100      	str	r1, [sp, #0]
 8011a90:	6800      	ldr	r0, [r0, #0]
 8011a92:	2103      	movs	r1, #3
 8011a94:	f7ff fcc4 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011a98:	b005      	add	sp, #20
 8011a9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a9e:	bf00      	nop
 8011aa0:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011aa4 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 8011aa4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011aa6:	2304      	movs	r3, #4
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011aae:	2302      	movs	r3, #2
 8011ab0:	4806      	ldr	r0, [pc, #24]	; (8011acc <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 8011ab2:	9300      	str	r3, [sp, #0]
 8011ab4:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011ab8:	2207      	movs	r2, #7
 8011aba:	2103      	movs	r1, #3
 8011abc:	6800      	ldr	r0, [r0, #0]
 8011abe:	f10d 0316 	add.w	r3, sp, #22
 8011ac2:	f7ff fcad 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011ac6:	b007      	add	sp, #28
 8011ac8:	f85d fb04 	ldr.w	pc, [sp], #4
 8011acc:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011ad0 <non-virtual thunk to StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 8011ad0:	f1a0 0004 	sub.w	r0, r0, #4
 8011ad4:	e7e6      	b.n	8011aa4 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>
 8011ad6:	bf00      	nop

08011ad8 <StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 8011ad8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011ada:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011ade:	2200      	movs	r2, #0
 8011ae0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	4807      	ldr	r0, [pc, #28]	; (8011b04 <StoreWS28xxDmx::SaveTestPattern(unsigned char)+0x2c>)
 8011ae8:	9300      	str	r3, [sp, #0]
 8011aea:	f88d 1017 	strb.w	r1, [sp, #23]
 8011aee:	2226      	movs	r2, #38	; 0x26
 8011af0:	2103      	movs	r1, #3
 8011af2:	6800      	ldr	r0, [r0, #0]
 8011af4:	f10d 0317 	add.w	r3, sp, #23
 8011af8:	f7ff fc92 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011afc:	b007      	add	sp, #28
 8011afe:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b02:	bf00      	nop
 8011b04:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011b08 <non-virtual thunk to StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 8011b08:	f1a0 0004 	sub.w	r0, r0, #4
 8011b0c:	e7e4      	b.n	8011ad8 <StoreWS28xxDmx::SaveTestPattern(unsigned char)>
 8011b0e:	bf00      	nop

08011b10 <StoreWS28xxDmx::SaveMap(unsigned char)>:
 8011b10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b16:	2200      	movs	r2, #0
 8011b18:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	4807      	ldr	r0, [pc, #28]	; (8011b3c <StoreWS28xxDmx::SaveMap(unsigned char)+0x2c>)
 8011b20:	9300      	str	r3, [sp, #0]
 8011b22:	f88d 1017 	strb.w	r1, [sp, #23]
 8011b26:	2213      	movs	r2, #19
 8011b28:	2103      	movs	r1, #3
 8011b2a:	6800      	ldr	r0, [r0, #0]
 8011b2c:	f10d 0317 	add.w	r3, sp, #23
 8011b30:	f7ff fc76 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011b34:	b007      	add	sp, #28
 8011b36:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b3a:	bf00      	nop
 8011b3c:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011b40 <non-virtual thunk to StoreWS28xxDmx::SaveMap(unsigned char)>:
 8011b40:	f1a0 0004 	sub.w	r0, r0, #4
 8011b44:	e7e4      	b.n	8011b10 <StoreWS28xxDmx::SaveMap(unsigned char)>
 8011b46:	bf00      	nop

08011b48 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 8011b48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b4e:	2200      	movs	r2, #0
 8011b50:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011b54:	2302      	movs	r3, #2
 8011b56:	4807      	ldr	r0, [pc, #28]	; (8011b74 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)+0x2c>)
 8011b58:	9300      	str	r3, [sp, #0]
 8011b5a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011b5e:	2211      	movs	r2, #17
 8011b60:	2103      	movs	r1, #3
 8011b62:	6800      	ldr	r0, [r0, #0]
 8011b64:	f10d 0316 	add.w	r3, sp, #22
 8011b68:	f7ff fc5a 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011b6c:	b007      	add	sp, #28
 8011b6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b72:	bf00      	nop
 8011b74:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011b78 <non-virtual thunk to StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 8011b78:	f1a0 0004 	sub.w	r0, r0, #4
 8011b7c:	e7e4      	b.n	8011b48 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>
 8011b7e:	bf00      	nop

08011b80 <StoreWS28xxDmx::SaveCount(unsigned short)>:
 8011b80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011b82:	2302      	movs	r3, #2
 8011b84:	2200      	movs	r2, #0
 8011b86:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011b8a:	4807      	ldr	r0, [pc, #28]	; (8011ba8 <StoreWS28xxDmx::SaveCount(unsigned short)+0x28>)
 8011b8c:	9300      	str	r3, [sp, #0]
 8011b8e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011b92:	2205      	movs	r2, #5
 8011b94:	2103      	movs	r1, #3
 8011b96:	6800      	ldr	r0, [r0, #0]
 8011b98:	f10d 0316 	add.w	r3, sp, #22
 8011b9c:	f7ff fc40 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011ba0:	b007      	add	sp, #28
 8011ba2:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ba6:	bf00      	nop
 8011ba8:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011bac <non-virtual thunk to StoreWS28xxDmx::SaveCount(unsigned short)>:
 8011bac:	f1a0 0004 	sub.w	r0, r0, #4
 8011bb0:	e7e6      	b.n	8011b80 <StoreWS28xxDmx::SaveCount(unsigned short)>
 8011bb2:	bf00      	nop

08011bb4 <StoreWS28xxDmx::SaveType(unsigned char)>:
 8011bb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	2200      	movs	r2, #0
 8011bba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011bbe:	4807      	ldr	r0, [pc, #28]	; (8011bdc <StoreWS28xxDmx::SaveType(unsigned char)+0x28>)
 8011bc0:	9300      	str	r3, [sp, #0]
 8011bc2:	f88d 1017 	strb.w	r1, [sp, #23]
 8011bc6:	2204      	movs	r2, #4
 8011bc8:	2103      	movs	r1, #3
 8011bca:	6800      	ldr	r0, [r0, #0]
 8011bcc:	f10d 0317 	add.w	r3, sp, #23
 8011bd0:	f7ff fc26 	bl	8011420 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011bd4:	b007      	add	sp, #28
 8011bd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8011bda:	bf00      	nop
 8011bdc:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011be0 <non-virtual thunk to StoreWS28xxDmx::SaveType(unsigned char)>:
 8011be0:	f1a0 0004 	sub.w	r0, r0, #4
 8011be4:	e7e6      	b.n	8011bb4 <StoreWS28xxDmx::SaveType(unsigned char)>
 8011be6:	bf00      	nop

08011be8 <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8011be8:	b510      	push	{r4, lr}
 8011bea:	4604      	mov	r4, r0
 8011bec:	f003 fee8 	bl	80159c0 <operator delete(void*)>
 8011bf0:	4620      	mov	r0, r4
 8011bf2:	bd10      	pop	{r4, pc}

08011bf4 <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 8011bf4:	f1a0 0004 	sub.w	r0, r0, #4
 8011bf8:	e7f6      	b.n	8011be8 <StoreWS28xxDmx::~StoreWS28xxDmx()>
	...

08011bfc <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)>:
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	b507      	push	{r0, r1, r2, lr}
 8011c00:	4805      	ldr	r0, [pc, #20]	; (8011c18 <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)+0x1c>)
 8011c02:	9300      	str	r3, [sp, #0]
 8011c04:	460a      	mov	r2, r1
 8011c06:	2327      	movs	r3, #39	; 0x27
 8011c08:	2103      	movs	r1, #3
 8011c0a:	6800      	ldr	r0, [r0, #0]
 8011c0c:	f7ff fc48 	bl	80114a0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 8011c10:	b003      	add	sp, #12
 8011c12:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c16:	bf00      	nop
 8011c18:	20014e1c 	andcs	r4, r1, ip, lsl lr

08011c1c <StoreWS28xxDmx::StoreWS28xxDmx()>:
 8011c1c:	4a03      	ldr	r2, [pc, #12]	; (8011c2c <StoreWS28xxDmx::StoreWS28xxDmx()+0x10>)
 8011c1e:	6002      	str	r2, [r0, #0]
 8011c20:	3230      	adds	r2, #48	; 0x30
 8011c22:	6042      	str	r2, [r0, #4]
 8011c24:	4a02      	ldr	r2, [pc, #8]	; (8011c30 <StoreWS28xxDmx::StoreWS28xxDmx()+0x14>)
 8011c26:	6010      	str	r0, [r2, #0]
 8011c28:	4770      	bx	lr
 8011c2a:	bf00      	nop
 8011c2c:	08019c64 	stmdaeq	r1, {r2, r5, r6, sl, fp, ip, pc}
 8011c30:	20014e38 	andcs	r4, r1, r8, lsr lr

08011c34 <FlashRom::FlashRom()>:
 8011c34:	4b07      	ldr	r3, [pc, #28]	; (8011c54 <FlashRom::FlashRom()+0x20>)
 8011c36:	b510      	push	{r4, lr}
 8011c38:	6018      	str	r0, [r3, #0]
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	4604      	mov	r4, r0
 8011c3e:	7003      	strb	r3, [r0, #0]
 8011c40:	4b05      	ldr	r3, [pc, #20]	; (8011c58 <FlashRom::FlashRom()+0x24>)
 8011c42:	4906      	ldr	r1, [pc, #24]	; (8011c5c <FlashRom::FlashRom()+0x28>)
 8011c44:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8011c48:	4805      	ldr	r0, [pc, #20]	; (8011c60 <FlashRom::FlashRom()+0x2c>)
 8011c4a:	029a      	lsls	r2, r3, #10
 8011c4c:	f7f7 fd86 	bl	800975c <printf>
 8011c50:	4620      	mov	r0, r4
 8011c52:	bd10      	pop	{r4, pc}
 8011c54:	20014e3c 	andcs	r4, r1, ip, lsr lr
 8011c58:	1ffff700 	svcne	0x00fff700
 8011c5c:	08017f79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 8011c60:	08019cb4 	stmdaeq	r1, {r2, r4, r5, r7, sl, fp, ip, pc}

08011c64 <FlashRom::GetSize() const>:
 8011c64:	4b02      	ldr	r3, [pc, #8]	; (8011c70 <FlashRom::GetSize() const+0xc>)
 8011c66:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 8011c6a:	0280      	lsls	r0, r0, #10
 8011c6c:	4770      	bx	lr
 8011c6e:	bf00      	nop
 8011c70:	1ffff700 	svcne	0x00fff700

08011c74 <FlashRom::GetSectorSize() const>:
 8011c74:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011c78:	4770      	bx	lr

08011c7a <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 8011c7a:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8011c7e:	441a      	add	r2, r3
 8011c80:	4293      	cmp	r3, r2
 8011c82:	d104      	bne.n	8011c8e <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 8011c84:	2200      	movs	r2, #0
 8011c86:	9b00      	ldr	r3, [sp, #0]
 8011c88:	2001      	movs	r0, #1
 8011c8a:	601a      	str	r2, [r3, #0]
 8011c8c:	4770      	bx	lr
 8011c8e:	f851 0b04 	ldr.w	r0, [r1], #4
 8011c92:	f843 0b04 	str.w	r0, [r3], #4
 8011c96:	e7f3      	b.n	8011c80 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>

08011c98 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 8011c98:	2000      	movs	r0, #0
 8011c9a:	b538      	push	{r3, r4, r5, lr}
 8011c9c:	4c47      	ldr	r4, [pc, #284]	; (8011dbc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 8011c9e:	6018      	str	r0, [r3, #0]
 8011ca0:	6823      	ldr	r3, [r4, #0]
 8011ca2:	2b04      	cmp	r3, #4
 8011ca4:	f200 8082 	bhi.w	8011dac <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8011ca8:	e8df f003 	tbb	[pc, r3]
 8011cac:	78452003 	stmdavc	r5, {r0, r1, sp}^
 8011cb0:	4b430080 	blmi	90d1eb8 <__exidx_end+0x10b7764>
 8011cb4:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8011cb8:	6019      	str	r1, [r3, #0]
 8011cba:	4b42      	ldr	r3, [pc, #264]	; (8011dc4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8011cbc:	601a      	str	r2, [r3, #0]
 8011cbe:	4b42      	ldr	r3, [pc, #264]	; (8011dc8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 8011cc0:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8011cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011cc8:	4b40      	ldr	r3, [pc, #256]	; (8011dcc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8011cca:	d807      	bhi.n	8011cdc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 8011ccc:	2201      	movs	r2, #1
 8011cce:	701a      	strb	r2, [r3, #0]
 8011cd0:	f004 f9e8 	bl	80160a4 <fmc_bank0_unlock>
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	6023      	str	r3, [r4, #0]
 8011cd8:	2000      	movs	r0, #0
 8011cda:	e026      	b.n	8011d2a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 8011cdc:	4a3c      	ldr	r2, [pc, #240]	; (8011dd0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 8011cde:	4291      	cmp	r1, r2
 8011ce0:	d3f4      	bcc.n	8011ccc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	701a      	strb	r2, [r3, #0]
 8011ce6:	f004 f9eb 	bl	80160c0 <fmc_bank1_unlock>
 8011cea:	e7f3      	b.n	8011cd4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8011cec:	4d37      	ldr	r5, [pc, #220]	; (8011dcc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8011cee:	782b      	ldrb	r3, [r5, #0]
 8011cf0:	b15b      	cbz	r3, 8011d0a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 8011cf2:	f004 fa03 	bl	80160fc <fmc_bank0_state_get>
 8011cf6:	2801      	cmp	r0, #1
 8011cf8:	d0ee      	beq.n	8011cd8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 8011cfa:	7829      	ldrb	r1, [r5, #0]
 8011cfc:	4b35      	ldr	r3, [pc, #212]	; (8011dd4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8011cfe:	b939      	cbnz	r1, 8011d10 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 8011d00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d02:	f022 0202 	bic.w	r2, r2, #2
 8011d06:	651a      	str	r2, [r3, #80]	; 0x50
 8011d08:	e006      	b.n	8011d18 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 8011d0a:	f004 fa09 	bl	8016120 <fmc_bank1_state_get>
 8011d0e:	e7f2      	b.n	8011cf6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 8011d10:	691a      	ldr	r2, [r3, #16]
 8011d12:	f022 0202 	bic.w	r2, r2, #2
 8011d16:	611a      	str	r2, [r3, #16]
 8011d18:	4b2a      	ldr	r3, [pc, #168]	; (8011dc4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	b94b      	cbnz	r3, 8011d32 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 8011d1e:	b129      	cbz	r1, 8011d2c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 8011d20:	f004 f9dc 	bl	80160dc <fmc_bank0_lock>
 8011d24:	2300      	movs	r3, #0
 8011d26:	2001      	movs	r0, #1
 8011d28:	6023      	str	r3, [r4, #0]
 8011d2a:	bd38      	pop	{r3, r4, r5, pc}
 8011d2c:	f004 f9de 	bl	80160ec <fmc_bank1_lock>
 8011d30:	e7f8      	b.n	8011d24 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 8011d32:	2302      	movs	r3, #2
 8011d34:	e7cf      	b.n	8011cd6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 8011d36:	4923      	ldr	r1, [pc, #140]	; (8011dc4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8011d38:	680b      	ldr	r3, [r1, #0]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d0ca      	beq.n	8011cd4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8011d3e:	4b23      	ldr	r3, [pc, #140]	; (8011dcc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8011d40:	4a1f      	ldr	r2, [pc, #124]	; (8011dc0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 8011d42:	7818      	ldrb	r0, [r3, #0]
 8011d44:	4b23      	ldr	r3, [pc, #140]	; (8011dd4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8011d46:	b190      	cbz	r0, 8011d6e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 8011d48:	6918      	ldr	r0, [r3, #16]
 8011d4a:	f040 0002 	orr.w	r0, r0, #2
 8011d4e:	6118      	str	r0, [r3, #16]
 8011d50:	6810      	ldr	r0, [r2, #0]
 8011d52:	6158      	str	r0, [r3, #20]
 8011d54:	6918      	ldr	r0, [r3, #16]
 8011d56:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8011d5a:	6118      	str	r0, [r3, #16]
 8011d5c:	680b      	ldr	r3, [r1, #0]
 8011d5e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8011d62:	600b      	str	r3, [r1, #0]
 8011d64:	6813      	ldr	r3, [r2, #0]
 8011d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d6a:	6013      	str	r3, [r2, #0]
 8011d6c:	e7b2      	b.n	8011cd4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8011d6e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011d70:	f040 0002 	orr.w	r0, r0, #2
 8011d74:	6518      	str	r0, [r3, #80]	; 0x50
 8011d76:	6810      	ldr	r0, [r2, #0]
 8011d78:	6558      	str	r0, [r3, #84]	; 0x54
 8011d7a:	69dd      	ldr	r5, [r3, #28]
 8011d7c:	07ad      	lsls	r5, r5, #30
 8011d7e:	bf48      	it	mi
 8011d80:	6158      	strmi	r0, [r3, #20]
 8011d82:	4814      	ldr	r0, [pc, #80]	; (8011dd4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8011d84:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d8a:	6503      	str	r3, [r0, #80]	; 0x50
 8011d8c:	680b      	ldr	r3, [r1, #0]
 8011d8e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8011d92:	600b      	str	r3, [r1, #0]
 8011d94:	6813      	ldr	r3, [r2, #0]
 8011d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d9a:	e7e6      	b.n	8011d6a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 8011d9c:	4b0b      	ldr	r3, [pc, #44]	; (8011dcc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8011d9e:	781a      	ldrb	r2, [r3, #0]
 8011da0:	4b0c      	ldr	r3, [pc, #48]	; (8011dd4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8011da2:	b132      	cbz	r2, 8011db2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 8011da4:	691a      	ldr	r2, [r3, #16]
 8011da6:	f022 0201 	bic.w	r2, r2, #1
 8011daa:	611a      	str	r2, [r3, #16]
 8011dac:	2000      	movs	r0, #0
 8011dae:	6020      	str	r0, [r4, #0]
 8011db0:	e7bb      	b.n	8011d2a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 8011db2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011db4:	f022 0201 	bic.w	r2, r2, #1
 8011db8:	651a      	str	r2, [r3, #80]	; 0x50
 8011dba:	e7f7      	b.n	8011dac <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8011dbc:	20014e44 	andcs	r4, r1, r4, asr #28
 8011dc0:	20014e48 	andcs	r4, r1, r8, asr #28
 8011dc4:	20014e54 	andcs	r4, r1, r4, asr lr
 8011dc8:	1ffff700 	svcne	0x00fff700
 8011dcc:	20014e50 	andcs	r4, r1, r0, asr lr
 8011dd0:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8011dd4:	40022000 	andmi	r2, r2, r0

08011dd8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 8011dd8:	b570      	push	{r4, r5, r6, lr}
 8011dda:	2400      	movs	r4, #0
 8011ddc:	9804      	ldr	r0, [sp, #16]
 8011dde:	6004      	str	r4, [r0, #0]
 8011de0:	4c48      	ldr	r4, [pc, #288]	; (8011f04 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 8011de2:	6820      	ldr	r0, [r4, #0]
 8011de4:	2804      	cmp	r0, #4
 8011de6:	d848      	bhi.n	8011e7a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 8011de8:	e8df f000 	tbb	[pc, r0]
 8011dec:	22847c03 	addcs	r7, r4, #768	; 0x300
 8011df0:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 8011df4:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8011df8:	6001      	str	r1, [r0, #0]
 8011dfa:	4844      	ldr	r0, [pc, #272]	; (8011f0c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8011dfc:	6003      	str	r3, [r0, #0]
 8011dfe:	4b44      	ldr	r3, [pc, #272]	; (8011f10 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8011e00:	601a      	str	r2, [r3, #0]
 8011e02:	4b44      	ldr	r3, [pc, #272]	; (8011f14 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 8011e04:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8011e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e0c:	4b42      	ldr	r3, [pc, #264]	; (8011f18 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8011e0e:	d807      	bhi.n	8011e20 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 8011e10:	2201      	movs	r2, #1
 8011e12:	701a      	strb	r2, [r3, #0]
 8011e14:	f004 f946 	bl	80160a4 <fmc_bank0_unlock>
 8011e18:	2303      	movs	r3, #3
 8011e1a:	6023      	str	r3, [r4, #0]
 8011e1c:	2000      	movs	r0, #0
 8011e1e:	e026      	b.n	8011e6e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 8011e20:	4a3e      	ldr	r2, [pc, #248]	; (8011f1c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 8011e22:	4291      	cmp	r1, r2
 8011e24:	d3f4      	bcc.n	8011e10 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 8011e26:	2200      	movs	r2, #0
 8011e28:	701a      	strb	r2, [r3, #0]
 8011e2a:	f004 f949 	bl	80160c0 <fmc_bank1_unlock>
 8011e2e:	e7f3      	b.n	8011e18 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8011e30:	4d39      	ldr	r5, [pc, #228]	; (8011f18 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8011e32:	782b      	ldrb	r3, [r5, #0]
 8011e34:	b15b      	cbz	r3, 8011e4e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 8011e36:	f004 f961 	bl	80160fc <fmc_bank0_state_get>
 8011e3a:	2801      	cmp	r0, #1
 8011e3c:	d0ee      	beq.n	8011e1c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 8011e3e:	7829      	ldrb	r1, [r5, #0]
 8011e40:	4b37      	ldr	r3, [pc, #220]	; (8011f20 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8011e42:	b939      	cbnz	r1, 8011e54 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 8011e44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011e46:	f022 0201 	bic.w	r2, r2, #1
 8011e4a:	651a      	str	r2, [r3, #80]	; 0x50
 8011e4c:	e006      	b.n	8011e5c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 8011e4e:	f004 f967 	bl	8016120 <fmc_bank1_state_get>
 8011e52:	e7f2      	b.n	8011e3a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 8011e54:	691a      	ldr	r2, [r3, #16]
 8011e56:	f022 0201 	bic.w	r2, r2, #1
 8011e5a:	611a      	str	r2, [r3, #16]
 8011e5c:	4b2c      	ldr	r3, [pc, #176]	; (8011f10 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	b94b      	cbnz	r3, 8011e76 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 8011e62:	b129      	cbz	r1, 8011e70 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 8011e64:	f004 f93a 	bl	80160dc <fmc_bank0_lock>
 8011e68:	2300      	movs	r3, #0
 8011e6a:	2001      	movs	r0, #1
 8011e6c:	6023      	str	r3, [r4, #0]
 8011e6e:	bd70      	pop	{r4, r5, r6, pc}
 8011e70:	f004 f93c 	bl	80160ec <fmc_bank1_lock>
 8011e74:	e7f8      	b.n	8011e68 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 8011e76:	2304      	movs	r3, #4
 8011e78:	e7cf      	b.n	8011e1a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 8011e7a:	4a25      	ldr	r2, [pc, #148]	; (8011f10 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8011e7c:	6813      	ldr	r3, [r2, #0]
 8011e7e:	2b03      	cmp	r3, #3
 8011e80:	d91a      	bls.n	8011eb8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 8011e82:	4b25      	ldr	r3, [pc, #148]	; (8011f18 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8011e84:	7819      	ldrb	r1, [r3, #0]
 8011e86:	4b26      	ldr	r3, [pc, #152]	; (8011f20 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8011e88:	b189      	cbz	r1, 8011eae <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 8011e8a:	6919      	ldr	r1, [r3, #16]
 8011e8c:	f041 0101 	orr.w	r1, r1, #1
 8011e90:	6119      	str	r1, [r3, #16]
 8011e92:	4d1e      	ldr	r5, [pc, #120]	; (8011f0c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8011e94:	481c      	ldr	r0, [pc, #112]	; (8011f08 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 8011e96:	6829      	ldr	r1, [r5, #0]
 8011e98:	6803      	ldr	r3, [r0, #0]
 8011e9a:	f851 6b04 	ldr.w	r6, [r1], #4
 8011e9e:	f843 6b04 	str.w	r6, [r3], #4
 8011ea2:	6003      	str	r3, [r0, #0]
 8011ea4:	6813      	ldr	r3, [r2, #0]
 8011ea6:	6029      	str	r1, [r5, #0]
 8011ea8:	3b04      	subs	r3, #4
 8011eaa:	6013      	str	r3, [r2, #0]
 8011eac:	e7b4      	b.n	8011e18 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8011eae:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8011eb0:	f041 0101 	orr.w	r1, r1, #1
 8011eb4:	6519      	str	r1, [r3, #80]	; 0x50
 8011eb6:	e7ec      	b.n	8011e92 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d0ad      	beq.n	8011e18 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8011ebc:	4b16      	ldr	r3, [pc, #88]	; (8011f18 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8011ebe:	781a      	ldrb	r2, [r3, #0]
 8011ec0:	4b17      	ldr	r3, [pc, #92]	; (8011f20 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8011ec2:	b152      	cbz	r2, 8011eda <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 8011ec4:	691a      	ldr	r2, [r3, #16]
 8011ec6:	f042 0201 	orr.w	r2, r2, #1
 8011eca:	611a      	str	r2, [r3, #16]
 8011ecc:	4a0f      	ldr	r2, [pc, #60]	; (8011f0c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8011ece:	4b0e      	ldr	r3, [pc, #56]	; (8011f08 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 8011ed0:	6812      	ldr	r2, [r2, #0]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	6812      	ldr	r2, [r2, #0]
 8011ed6:	601a      	str	r2, [r3, #0]
 8011ed8:	e79e      	b.n	8011e18 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8011eda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011edc:	f042 0201 	orr.w	r2, r2, #1
 8011ee0:	651a      	str	r2, [r3, #80]	; 0x50
 8011ee2:	e7f3      	b.n	8011ecc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 8011ee4:	4b0c      	ldr	r3, [pc, #48]	; (8011f18 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8011ee6:	781a      	ldrb	r2, [r3, #0]
 8011ee8:	4b0d      	ldr	r3, [pc, #52]	; (8011f20 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8011eea:	b132      	cbz	r2, 8011efa <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 8011eec:	691a      	ldr	r2, [r3, #16]
 8011eee:	f022 0202 	bic.w	r2, r2, #2
 8011ef2:	611a      	str	r2, [r3, #16]
 8011ef4:	2000      	movs	r0, #0
 8011ef6:	6020      	str	r0, [r4, #0]
 8011ef8:	e7b9      	b.n	8011e6e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 8011efa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011efc:	f022 0202 	bic.w	r2, r2, #2
 8011f00:	651a      	str	r2, [r3, #80]	; 0x50
 8011f02:	e7f7      	b.n	8011ef4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 8011f04:	20014e44 	andcs	r4, r1, r4, asr #28
 8011f08:	20014e40 	andcs	r4, r1, r0, asr #28
 8011f0c:	20014e4c 	andcs	r4, r1, ip, asr #28
 8011f10:	20014e54 	andcs	r4, r1, r4, asr lr
 8011f14:	1ffff700 	svcne	0x00fff700
 8011f18:	20014e50 	andcs	r4, r1, r0, asr lr
 8011f1c:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8011f20:	40022000 	andmi	r2, r2, r0

08011f24 <net_set_ip>:
 8011f24:	b510      	push	{r4, lr}
 8011f26:	4c05      	ldr	r4, [pc, #20]	; (8011f3c <net_set_ip+0x18>)
 8011f28:	6020      	str	r0, [r4, #0]
 8011f2a:	4621      	mov	r1, r4
 8011f2c:	4804      	ldr	r0, [pc, #16]	; (8011f40 <net_set_ip+0x1c>)
 8011f2e:	f7f5 f9f5 	bl	800731c <arp_init>
 8011f32:	4620      	mov	r0, r4
 8011f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f38:	f002 b928 	b.w	801418c <ip_set_ip>
 8011f3c:	20014e58 	andcs	r4, r1, r8, asr lr
 8011f40:	20014e64 	andcs	r4, r1, r4, ror #28

08011f44 <net_set_gw>:
 8011f44:	4b02      	ldr	r3, [pc, #8]	; (8011f50 <net_set_gw+0xc>)
 8011f46:	6098      	str	r0, [r3, #8]
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f002 b91f 	b.w	801418c <ip_set_ip>
 8011f4e:	bf00      	nop
 8011f50:	20014e58 	andcs	r4, r1, r8, asr lr

08011f54 <net_set_dhcp>:
 8011f54:	b570      	push	{r4, r5, r6, lr}
 8011f56:	2400      	movs	r4, #0
 8011f58:	4605      	mov	r5, r0
 8011f5a:	7014      	strb	r4, [r2, #0]
 8011f5c:	4616      	mov	r6, r2
 8011f5e:	4810      	ldr	r0, [pc, #64]	; (8011fa0 <net_set_dhcp+0x4c>)
 8011f60:	460a      	mov	r2, r1
 8011f62:	4910      	ldr	r1, [pc, #64]	; (8011fa4 <net_set_dhcp+0x50>)
 8011f64:	f001 fef2 	bl	8013d4c <dhcp_client>
 8011f68:	42a0      	cmp	r0, r4
 8011f6a:	da17      	bge.n	8011f9c <net_set_dhcp+0x48>
 8011f6c:	480d      	ldr	r0, [pc, #52]	; (8011fa4 <net_set_dhcp+0x50>)
 8011f6e:	f000 f859 	bl	8012024 <rfc3927>
 8011f72:	7030      	strb	r0, [r6, #0]
 8011f74:	490b      	ldr	r1, [pc, #44]	; (8011fa4 <net_set_dhcp+0x50>)
 8011f76:	480a      	ldr	r0, [pc, #40]	; (8011fa0 <net_set_dhcp+0x4c>)
 8011f78:	f7f5 f9d0 	bl	800731c <arp_init>
 8011f7c:	4809      	ldr	r0, [pc, #36]	; (8011fa4 <net_set_dhcp+0x50>)
 8011f7e:	f002 f905 	bl	801418c <ip_set_ip>
 8011f82:	4a08      	ldr	r2, [pc, #32]	; (8011fa4 <net_set_dhcp+0x50>)
 8011f84:	1e6b      	subs	r3, r5, #1
 8011f86:	350b      	adds	r5, #11
 8011f88:	f812 1b01 	ldrb.w	r1, [r2], #1
 8011f8c:	f803 1f01 	strb.w	r1, [r3, #1]!
 8011f90:	42ab      	cmp	r3, r5
 8011f92:	d1f9      	bne.n	8011f88 <net_set_dhcp+0x34>
 8011f94:	4b04      	ldr	r3, [pc, #16]	; (8011fa8 <net_set_dhcp+0x54>)
 8011f96:	4620      	mov	r0, r4
 8011f98:	701c      	strb	r4, [r3, #0]
 8011f9a:	bd70      	pop	{r4, r5, r6, pc}
 8011f9c:	2401      	movs	r4, #1
 8011f9e:	e7e9      	b.n	8011f74 <net_set_dhcp+0x20>
 8011fa0:	20014e64 	andcs	r4, r1, r4, ror #28
 8011fa4:	20014e58 	andcs	r4, r1, r8, asr lr
 8011fa8:	20014e6a 	andcs	r4, r1, sl, ror #28

08011fac <net_dhcp_release>:
 8011fac:	b508      	push	{r3, lr}
 8011fae:	f001 ffd5 	bl	8013f5c <dhcp_client_release>
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	4b01      	ldr	r3, [pc, #4]	; (8011fbc <net_dhcp_release+0x10>)
 8011fb6:	701a      	strb	r2, [r3, #0]
 8011fb8:	bd08      	pop	{r3, pc}
 8011fba:	bf00      	nop
 8011fbc:	20014e6a 	andcs	r4, r1, sl, ror #28

08011fc0 <net_set_zeroconf>:
 8011fc0:	b538      	push	{r3, r4, r5, lr}
 8011fc2:	4604      	mov	r4, r0
 8011fc4:	480c      	ldr	r0, [pc, #48]	; (8011ff8 <net_set_zeroconf+0x38>)
 8011fc6:	f000 f82d 	bl	8012024 <rfc3927>
 8011fca:	4605      	mov	r5, r0
 8011fcc:	b190      	cbz	r0, 8011ff4 <net_set_zeroconf+0x34>
 8011fce:	490a      	ldr	r1, [pc, #40]	; (8011ff8 <net_set_zeroconf+0x38>)
 8011fd0:	480a      	ldr	r0, [pc, #40]	; (8011ffc <net_set_zeroconf+0x3c>)
 8011fd2:	f7f5 f9a3 	bl	800731c <arp_init>
 8011fd6:	4808      	ldr	r0, [pc, #32]	; (8011ff8 <net_set_zeroconf+0x38>)
 8011fd8:	f002 f8d8 	bl	801418c <ip_set_ip>
 8011fdc:	4a06      	ldr	r2, [pc, #24]	; (8011ff8 <net_set_zeroconf+0x38>)
 8011fde:	1e63      	subs	r3, r4, #1
 8011fe0:	340b      	adds	r4, #11
 8011fe2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8011fe6:	f803 1f01 	strb.w	r1, [r3, #1]!
 8011fea:	42a3      	cmp	r3, r4
 8011fec:	d1f9      	bne.n	8011fe2 <net_set_zeroconf+0x22>
 8011fee:	2200      	movs	r2, #0
 8011ff0:	4b03      	ldr	r3, [pc, #12]	; (8012000 <net_set_zeroconf+0x40>)
 8011ff2:	701a      	strb	r2, [r3, #0]
 8011ff4:	4628      	mov	r0, r5
 8011ff6:	bd38      	pop	{r3, r4, r5, pc}
 8011ff8:	20014e58 	andcs	r4, r1, r8, asr lr
 8011ffc:	20014e64 	andcs	r4, r1, r4, ror #28
 8012000:	20014e6a 	andcs	r4, r1, sl, ror #28

08012004 <net_timers_run>:
 8012004:	4b05      	ldr	r3, [pc, #20]	; (801201c <net_timers_run+0x18>)
 8012006:	4a06      	ldr	r2, [pc, #24]	; (8012020 <net_timers_run+0x1c>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	6811      	ldr	r1, [r2, #0]
 801200c:	4299      	cmp	r1, r3
 801200e:	d803      	bhi.n	8012018 <net_timers_run+0x14>
 8012010:	3364      	adds	r3, #100	; 0x64
 8012012:	6013      	str	r3, [r2, #0]
 8012014:	f002 b830 	b.w	8014078 <igmp_timer>
 8012018:	4770      	bx	lr
 801201a:	bf00      	nop
 801201c:	2001ce64 	andcs	ip, r1, r4, ror #28
 8012020:	20014e70 	andcs	r4, r1, r0, ror lr

08012024 <rfc3927>:
 8012024:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012028:	4606      	mov	r6, r0
 801202a:	25ff      	movs	r5, #255	; 0xff
 801202c:	4b18      	ldr	r3, [pc, #96]	; (8012090 <rfc3927+0x6c>)
 801202e:	4f19      	ldr	r7, [pc, #100]	; (8012094 <rfc3927+0x70>)
 8012030:	791a      	ldrb	r2, [r3, #4]
 8012032:	78dc      	ldrb	r4, [r3, #3]
 8012034:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8012098 <rfc3927+0x74>
 8012038:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 801203c:	f8d7 9000 	ldr.w	r9, [r7]
 8012040:	f8df b058 	ldr.w	fp, [pc, #88]	; 801209c <rfc3927+0x78>
 8012044:	f8df a058 	ldr.w	sl, [pc, #88]	; 80120a0 <rfc3927+0x7c>
 8012048:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 801204c:	4659      	mov	r1, fp
 801204e:	4620      	mov	r0, r4
 8012050:	f001 fd72 	bl	8013b38 <arp_cache_lookup>
 8012054:	b190      	cbz	r0, 801207c <rfc3927+0x58>
 8012056:	ba24      	rev	r4, r4
 8012058:	3401      	adds	r4, #1
 801205a:	3d01      	subs	r5, #1
 801205c:	ba24      	rev	r4, r4
 801205e:	b2ad      	uxth	r5, r5
 8012060:	4554      	cmp	r4, sl
 8012062:	bf08      	it	eq
 8012064:	4644      	moveq	r4, r8
 8012066:	b18d      	cbz	r5, 801208c <rfc3927+0x68>
 8012068:	683b      	ldr	r3, [r7, #0]
 801206a:	eba3 0309 	sub.w	r3, r3, r9
 801206e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8012072:	d3eb      	bcc.n	801204c <rfc3927+0x28>
 8012074:	2400      	movs	r4, #0
 8012076:	4623      	mov	r3, r4
 8012078:	4620      	mov	r0, r4
 801207a:	e002      	b.n	8012082 <rfc3927+0x5e>
 801207c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012080:	2001      	movs	r0, #1
 8012082:	e9c6 3401 	strd	r3, r4, [r6, #4]
 8012086:	6034      	str	r4, [r6, #0]
 8012088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801208c:	462c      	mov	r4, r5
 801208e:	e7f2      	b.n	8012076 <rfc3927+0x52>
 8012090:	20014e74 	andcs	r4, r1, r4, ror lr
 8012094:	2001ce64 	andcs	ip, r1, r4, ror #28
 8012098:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 801209c:	20014e7c 	andcs	r4, r1, ip, ror lr
 80120a0:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

080120a4 <_init_tcb>:
 80120a4:	b510      	push	{r4, lr}
 80120a6:	4603      	mov	r3, r0
 80120a8:	2400      	movs	r4, #0
 80120aa:	f100 0244 	add.w	r2, r0, #68	; 0x44
 80120ae:	4293      	cmp	r3, r2
 80120b0:	d10d      	bne.n	80120ce <_init_tcb+0x2a>
 80120b2:	4b08      	ldr	r3, [pc, #32]	; (80120d4 <_init_tcb+0x30>)
 80120b4:	f640 3268 	movw	r2, #2920	; 0xb68
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	8702      	strh	r2, [r0, #56]	; 0x38
 80120bc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80120c0:	6283      	str	r3, [r0, #40]	; 0x28
 80120c2:	6243      	str	r3, [r0, #36]	; 0x24
 80120c4:	2301      	movs	r3, #1
 80120c6:	8001      	strh	r1, [r0, #0]
 80120c8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80120cc:	bd10      	pop	{r4, pc}
 80120ce:	f803 4b01 	strb.w	r4, [r3], #1
 80120d2:	e7ec      	b.n	80120ae <_init_tcb+0xa>
 80120d4:	2001ce64 	andcs	ip, r1, r4, ror #28

080120d8 <memcpy.isra.0>:
 80120d8:	3801      	subs	r0, #1
 80120da:	440a      	add	r2, r1
 80120dc:	4291      	cmp	r1, r2
 80120de:	d100      	bne.n	80120e2 <memcpy.isra.0+0xa>
 80120e0:	4770      	bx	lr
 80120e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120e6:	f800 3f01 	strb.w	r3, [r0, #1]!
 80120ea:	e7f7      	b.n	80120dc <memcpy.isra.0+0x4>

080120ec <_bswap32>:
 80120ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80120ee:	2204      	movs	r2, #4
 80120f0:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 80120f4:	4629      	mov	r1, r5
 80120f6:	4604      	mov	r4, r0
 80120f8:	eb0d 0002 	add.w	r0, sp, r2
 80120fc:	f7ff ffec 	bl	80120d8 <memcpy.isra.0>
 8012100:	2204      	movs	r2, #4
 8012102:	9b01      	ldr	r3, [sp, #4]
 8012104:	eb0d 0102 	add.w	r1, sp, r2
 8012108:	ba1b      	rev	r3, r3
 801210a:	4628      	mov	r0, r5
 801210c:	9301      	str	r3, [sp, #4]
 801210e:	f7ff ffe3 	bl	80120d8 <memcpy.isra.0>
 8012112:	2204      	movs	r2, #4
 8012114:	3426      	adds	r4, #38	; 0x26
 8012116:	eb0d 0002 	add.w	r0, sp, r2
 801211a:	4621      	mov	r1, r4
 801211c:	f7ff ffdc 	bl	80120d8 <memcpy.isra.0>
 8012120:	2204      	movs	r2, #4
 8012122:	9b01      	ldr	r3, [sp, #4]
 8012124:	4620      	mov	r0, r4
 8012126:	ba1b      	rev	r3, r3
 8012128:	eb0d 0102 	add.w	r1, sp, r2
 801212c:	9301      	str	r3, [sp, #4]
 801212e:	f7ff ffd3 	bl	80120d8 <memcpy.isra.0>
 8012132:	b003      	add	sp, #12
 8012134:	bd30      	pop	{r4, r5, pc}
	...

08012138 <_tcp_send_package>:
 8012138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801213c:	7a0b      	ldrb	r3, [r1, #8]
 801213e:	4605      	mov	r5, r0
 8012140:	f013 0f02 	tst.w	r3, #2
 8012144:	bf0c      	ite	eq
 8012146:	f04f 0805 	moveq.w	r8, #5
 801214a:	f04f 0806 	movne.w	r8, #6
 801214e:	f04f 0a00 	mov.w	sl, #0
 8012152:	4c47      	ldr	r4, [pc, #284]	; (8012270 <_tcp_send_package+0x138>)
 8012154:	460f      	mov	r7, r1
 8012156:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8012158:	f100 0108 	add.w	r1, r0, #8
 801215c:	2206      	movs	r2, #6
 801215e:	4620      	mov	r0, r4
 8012160:	f7ff ffba 	bl	80120d8 <memcpy.isra.0>
 8012164:	4a43      	ldr	r2, [pc, #268]	; (8012274 <_tcp_send_package+0x13c>)
 8012166:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 801216a:	8813      	ldrh	r3, [r2, #0]
 801216c:	b2b6      	uxth	r6, r6
 801216e:	1c59      	adds	r1, r3, #1
 8012170:	8263      	strh	r3, [r4, #18]
 8012172:	f105 0904 	add.w	r9, r5, #4
 8012176:	f106 0314 	add.w	r3, r6, #20
 801217a:	ba5b      	rev16	r3, r3
 801217c:	8011      	strh	r1, [r2, #0]
 801217e:	f104 001e 	add.w	r0, r4, #30
 8012182:	2204      	movs	r2, #4
 8012184:	4649      	mov	r1, r9
 8012186:	8223      	strh	r3, [r4, #16]
 8012188:	f7ff ffa6 	bl	80120d8 <memcpy.isra.0>
 801218c:	2114      	movs	r1, #20
 801218e:	f104 000e 	add.w	r0, r4, #14
 8012192:	f8a4 a018 	strh.w	sl, [r4, #24]
 8012196:	f002 f802 	bl	801419e <net_chksum>
 801219a:	882b      	ldrh	r3, [r5, #0]
 801219c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80121a0:	8463      	strh	r3, [r4, #34]	; 0x22
 80121a2:	886b      	ldrh	r3, [r5, #2]
 80121a4:	8320      	strh	r0, [r4, #24]
 80121a6:	84a3      	strh	r3, [r4, #36]	; 0x24
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 80121ac:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f884 802e 	strb.w	r8, [r4, #46]	; 0x2e
 80121b6:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 80121ba:	7a3b      	ldrb	r3, [r7, #8]
 80121bc:	8622      	strh	r2, [r4, #48]	; 0x30
 80121be:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 80121c2:	079b      	lsls	r3, r3, #30
 80121c4:	bf48      	it	mi
 80121c6:	f240 4302 	movwmi	r3, #1026	; 0x402
 80121ca:	8baa      	ldrh	r2, [r5, #28]
 80121cc:	bf48      	it	mi
 80121ce:	86e3      	strhmi	r3, [r4, #54]	; 0x36
 80121d0:	86a2      	strh	r2, [r4, #52]	; 0x34
 80121d2:	bf42      	ittt	mi
 80121d4:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 80121d8:	4622      	movmi	r2, r4
 80121da:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 80121de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80121e0:	f8a4 a032 	strh.w	sl, [r4, #50]	; 0x32
 80121e4:	bf58      	it	pl
 80121e6:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d13e      	bne.n	801226c <_tcp_send_package+0x134>
 80121ee:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80121f0:	481f      	ldr	r0, [pc, #124]	; (8012270 <_tcp_send_package+0x138>)
 80121f2:	ba5b      	rev16	r3, r3
 80121f4:	8463      	strh	r3, [r4, #34]	; 0x22
 80121f6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80121f8:	ba5b      	rev16	r3, r3
 80121fa:	84a3      	strh	r3, [r4, #36]	; 0x24
 80121fc:	f7ff ff76 	bl	80120ec <_bswap32>
 8012200:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8012202:	a801      	add	r0, sp, #4
 8012204:	ba5b      	rev16	r3, r3
 8012206:	8623      	strh	r3, [r4, #48]	; 0x30
 8012208:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801220a:	220c      	movs	r2, #12
 801220c:	ba5b      	rev16	r3, r3
 801220e:	491a      	ldr	r1, [pc, #104]	; (8012278 <_tcp_send_package+0x140>)
 8012210:	86a3      	strh	r3, [r4, #52]	; 0x34
 8012212:	f7ff ff61 	bl	80120d8 <memcpy.isra.0>
 8012216:	2204      	movs	r2, #4
 8012218:	4918      	ldr	r1, [pc, #96]	; (801227c <_tcp_send_package+0x144>)
 801221a:	4817      	ldr	r0, [pc, #92]	; (8012278 <_tcp_send_package+0x140>)
 801221c:	f7ff ff5c 	bl	80120d8 <memcpy.isra.0>
 8012220:	2204      	movs	r2, #4
 8012222:	4649      	mov	r1, r9
 8012224:	4816      	ldr	r0, [pc, #88]	; (8012280 <_tcp_send_package+0x148>)
 8012226:	f7ff ff57 	bl	80120d8 <memcpy.isra.0>
 801222a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801222e:	f106 010c 	add.w	r1, r6, #12
 8012232:	83e3      	strh	r3, [r4, #30]
 8012234:	4810      	ldr	r0, [pc, #64]	; (8012278 <_tcp_send_package+0x140>)
 8012236:	ba73      	rev16	r3, r6
 8012238:	8423      	strh	r3, [r4, #32]
 801223a:	f001 ffb0 	bl	801419e <net_chksum>
 801223e:	a901      	add	r1, sp, #4
 8012240:	4605      	mov	r5, r0
 8012242:	220c      	movs	r2, #12
 8012244:	480c      	ldr	r0, [pc, #48]	; (8012278 <_tcp_send_package+0x140>)
 8012246:	f7ff ff47 	bl	80120d8 <memcpy.isra.0>
 801224a:	4809      	ldr	r0, [pc, #36]	; (8012270 <_tcp_send_package+0x138>)
 801224c:	f106 0122 	add.w	r1, r6, #34	; 0x22
 8012250:	8665      	strh	r5, [r4, #50]	; 0x32
 8012252:	b004      	add	sp, #16
 8012254:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012258:	f004 bcb4 	b.w	8016bc4 <emac_eth_send>
 801225c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 801225e:	5cc9      	ldrb	r1, [r1, r3]
 8012260:	54d1      	strb	r1, [r2, r3]
 8012262:	3301      	adds	r3, #1
 8012264:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8012266:	4299      	cmp	r1, r3
 8012268:	d8f8      	bhi.n	801225c <_tcp_send_package+0x124>
 801226a:	e7c0      	b.n	80121ee <_tcp_send_package+0xb6>
 801226c:	2300      	movs	r3, #0
 801226e:	e7f9      	b.n	8012264 <_tcp_send_package+0x12c>
 8012270:	20015a3c 	andcs	r5, r1, ip, lsr sl
 8012274:	20014e84 	andcs	r4, r1, r4, lsl #29
 8012278:	20015a52 	andcs	r5, r1, r2, asr sl
 801227c:	20014e58 	andcs	r4, r1, r8, asr lr
 8012280:	20015a56 	andcs	r5, r1, r6, asr sl

08012284 <_send_reset>:
 8012284:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012286:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 801228a:	4604      	mov	r4, r0
 801228c:	075a      	lsls	r2, r3, #29
 801228e:	460e      	mov	r6, r1
 8012290:	d421      	bmi.n	80122d6 <_send_reset+0x52>
 8012292:	2204      	movs	r2, #4
 8012294:	f013 0310 	ands.w	r3, r3, #16
 8012298:	f88d 200c 	strb.w	r2, [sp, #12]
 801229c:	d01d      	beq.n	80122da <_send_reset+0x56>
 801229e:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 80122a2:	4668      	mov	r0, sp
 80122a4:	f7ff ff18 	bl	80120d8 <memcpy.isra.0>
 80122a8:	9b00      	ldr	r3, [sp, #0]
 80122aa:	9301      	str	r3, [sp, #4]
 80122ac:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80122b0:	4668      	mov	r0, sp
 80122b2:	f3c3 0540 	ubfx	r5, r3, #1, #1
 80122b6:	f104 0126 	add.w	r1, r4, #38	; 0x26
 80122ba:	07db      	lsls	r3, r3, #31
 80122bc:	f04f 0204 	mov.w	r2, #4
 80122c0:	bf48      	it	mi
 80122c2:	3501      	addmi	r5, #1
 80122c4:	f7ff ff08 	bl	80120d8 <memcpy.isra.0>
 80122c8:	9b00      	ldr	r3, [sp, #0]
 80122ca:	4630      	mov	r0, r6
 80122cc:	441d      	add	r5, r3
 80122ce:	a901      	add	r1, sp, #4
 80122d0:	9502      	str	r5, [sp, #8]
 80122d2:	f7ff ff31 	bl	8012138 <_tcp_send_package>
 80122d6:	b004      	add	sp, #16
 80122d8:	bd70      	pop	{r4, r5, r6, pc}
 80122da:	9301      	str	r3, [sp, #4]
 80122dc:	2314      	movs	r3, #20
 80122de:	f88d 300c 	strb.w	r3, [sp, #12]
 80122e2:	e7e3      	b.n	80122ac <_send_reset+0x28>

080122e4 <tcp_begin>:
 80122e4:	b508      	push	{r3, lr}
 80122e6:	4b0a      	ldr	r3, [pc, #40]	; (8012310 <tcp_begin+0x2c>)
 80122e8:	4601      	mov	r1, r0
 80122ea:	881a      	ldrh	r2, [r3, #0]
 80122ec:	4282      	cmp	r2, r0
 80122ee:	d102      	bne.n	80122f6 <tcp_begin+0x12>
 80122f0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80122f4:	b130      	cbz	r0, 8012304 <tcp_begin+0x20>
 80122f6:	b12a      	cbz	r2, 8012304 <tcp_begin+0x20>
 80122f8:	4806      	ldr	r0, [pc, #24]	; (8012314 <tcp_begin+0x30>)
 80122fa:	f003 f9eb 	bl	80156d4 <console_error>
 80122fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012302:	bd08      	pop	{r3, pc}
 8012304:	4802      	ldr	r0, [pc, #8]	; (8012310 <tcp_begin+0x2c>)
 8012306:	8019      	strh	r1, [r3, #0]
 8012308:	f7ff fecc 	bl	80120a4 <_init_tcb>
 801230c:	2000      	movs	r0, #0
 801230e:	e7f8      	b.n	8012302 <tcp_begin+0x1e>
 8012310:	200159f8 	strdcs	r5, [r1], -r8
 8012314:	08019ce2 	stmdaeq	r1, {r1, r5, r6, r7, sl, fp, ip, pc}

08012318 <tcp_write>:
 8012318:	f240 53b4 	movw	r3, #1460	; 0x5b4
 801231c:	429a      	cmp	r2, r3
 801231e:	bf28      	it	cs
 8012320:	461a      	movcs	r2, r3
 8012322:	2344      	movs	r3, #68	; 0x44
 8012324:	b530      	push	{r4, r5, lr}
 8012326:	4c0d      	ldr	r4, [pc, #52]	; (801235c <tcp_write+0x44>)
 8012328:	b085      	sub	sp, #20
 801232a:	fb03 4400 	mla	r4, r3, r0, r4
 801232e:	6963      	ldr	r3, [r4, #20]
 8012330:	62e1      	str	r1, [r4, #44]	; 0x2c
 8012332:	9301      	str	r3, [sp, #4]
 8012334:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012336:	4620      	mov	r0, r4
 8012338:	9302      	str	r3, [sp, #8]
 801233a:	2318      	movs	r3, #24
 801233c:	8622      	strh	r2, [r4, #48]	; 0x30
 801233e:	a901      	add	r1, sp, #4
 8012340:	4615      	mov	r5, r2
 8012342:	f88d 300c 	strb.w	r3, [sp, #12]
 8012346:	f7ff fef7 	bl	8012138 <_tcp_send_package>
 801234a:	2300      	movs	r3, #0
 801234c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801234e:	8623      	strh	r3, [r4, #48]	; 0x30
 8012350:	6963      	ldr	r3, [r4, #20]
 8012352:	442b      	add	r3, r5
 8012354:	6163      	str	r3, [r4, #20]
 8012356:	b005      	add	sp, #20
 8012358:	bd30      	pop	{r4, r5, pc}
 801235a:	bf00      	nop
 801235c:	200159f8 	strdcs	r5, [r1], -r8

08012360 <tcp_read>:
 8012360:	2344      	movs	r3, #68	; 0x44
 8012362:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012364:	4c1c      	ldr	r4, [pc, #112]	; (80123d8 <tcp_read+0x78>)
 8012366:	b085      	sub	sp, #20
 8012368:	fb03 4400 	mla	r4, r3, r0, r4
 801236c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8012370:	2b07      	cmp	r3, #7
 8012372:	d112      	bne.n	801239a <tcp_read+0x3a>
 8012374:	6963      	ldr	r3, [r4, #20]
 8012376:	4620      	mov	r0, r4
 8012378:	9301      	str	r3, [sp, #4]
 801237a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801237c:	a901      	add	r1, sp, #4
 801237e:	9302      	str	r3, [sp, #8]
 8012380:	2311      	movs	r3, #17
 8012382:	f88d 300c 	strb.w	r3, [sp, #12]
 8012386:	f7ff fed7 	bl	8012138 <_tcp_send_package>
 801238a:	2309      	movs	r3, #9
 801238c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8012390:	6963      	ldr	r3, [r4, #20]
 8012392:	3301      	adds	r3, #1
 8012394:	6163      	str	r3, [r4, #20]
 8012396:	2000      	movs	r0, #0
 8012398:	e01b      	b.n	80123d2 <tcp_read+0x72>
 801239a:	f44f 6337 	mov.w	r3, #2928	; 0xb70
 801239e:	4358      	muls	r0, r3
 80123a0:	4a0e      	ldr	r2, [pc, #56]	; (80123dc <tcp_read+0x7c>)
 80123a2:	1817      	adds	r7, r2, r0
 80123a4:	887b      	ldrh	r3, [r7, #2]
 80123a6:	5a15      	ldrh	r5, [r2, r0]
 80123a8:	429d      	cmp	r5, r3
 80123aa:	d0f4      	beq.n	8012396 <tcp_read+0x36>
 80123ac:	f240 55b6 	movw	r5, #1462	; 0x5b6
 80123b0:	435d      	muls	r5, r3
 80123b2:	1d06      	adds	r6, r0, #4
 80123b4:	442e      	add	r6, r5
 80123b6:	4416      	add	r6, r2
 80123b8:	4405      	add	r5, r0
 80123ba:	600e      	str	r6, [r1, #0]
 80123bc:	442a      	add	r2, r5
 80123be:	f8b2 05b8 	ldrh.w	r0, [r2, #1464]	; 0x5b8
 80123c2:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80123c4:	3301      	adds	r3, #1
 80123c6:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 80123ca:	f003 0301 	and.w	r3, r3, #1
 80123ce:	8722      	strh	r2, [r4, #56]	; 0x38
 80123d0:	807b      	strh	r3, [r7, #2]
 80123d2:	b005      	add	sp, #20
 80123d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123d6:	bf00      	nop
 80123d8:	200159f8 	strdcs	r5, [r1], -r8
 80123dc:	20014e88 	andcs	r4, r1, r8, lsl #29

080123e0 <memcpy.isra.0>:
 80123e0:	3801      	subs	r0, #1
 80123e2:	440a      	add	r2, r1
 80123e4:	4291      	cmp	r1, r2
 80123e6:	d100      	bne.n	80123ea <memcpy.isra.0+0xa>
 80123e8:	4770      	bx	lr
 80123ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80123ee:	f800 3f01 	strb.w	r3, [r0, #1]!
 80123f2:	e7f7      	b.n	80123e4 <memcpy.isra.0+0x4>

080123f4 <net_memcpy>:
 80123f4:	ea40 0301 	orr.w	r3, r0, r1
 80123f8:	079b      	lsls	r3, r3, #30
 80123fa:	b570      	push	{r4, r5, r6, lr}
 80123fc:	d108      	bne.n	8012410 <net_memcpy+0x1c>
 80123fe:	f022 0303 	bic.w	r3, r2, #3
 8012402:	1f04      	subs	r4, r0, #4
 8012404:	18cd      	adds	r5, r1, r3
 8012406:	42a9      	cmp	r1, r5
 8012408:	d108      	bne.n	801241c <net_memcpy+0x28>
 801240a:	1ad2      	subs	r2, r2, r3
 801240c:	4403      	add	r3, r0
 801240e:	e000      	b.n	8012412 <net_memcpy+0x1e>
 8012410:	4603      	mov	r3, r0
 8012412:	3b01      	subs	r3, #1
 8012414:	440a      	add	r2, r1
 8012416:	4291      	cmp	r1, r2
 8012418:	d105      	bne.n	8012426 <net_memcpy+0x32>
 801241a:	bd70      	pop	{r4, r5, r6, pc}
 801241c:	f851 6b04 	ldr.w	r6, [r1], #4
 8012420:	f844 6f04 	str.w	r6, [r4, #4]!
 8012424:	e7ef      	b.n	8012406 <net_memcpy+0x12>
 8012426:	f811 4b01 	ldrb.w	r4, [r1], #1
 801242a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801242e:	e7f2      	b.n	8012416 <net_memcpy+0x22>

08012430 <udp_set_ip>:
 8012430:	2204      	movs	r2, #4
 8012432:	b513      	push	{r0, r1, r4, lr}
 8012434:	4604      	mov	r4, r0
 8012436:	6803      	ldr	r3, [r0, #0]
 8012438:	eb0d 0102 	add.w	r1, sp, r2
 801243c:	4808      	ldr	r0, [pc, #32]	; (8012460 <udp_set_ip+0x30>)
 801243e:	9301      	str	r3, [sp, #4]
 8012440:	f7ff ffce 	bl	80123e0 <memcpy.isra.0>
 8012444:	6862      	ldr	r2, [r4, #4]
 8012446:	4b07      	ldr	r3, [pc, #28]	; (8012464 <udp_set_ip+0x34>)
 8012448:	43d1      	mvns	r1, r2
 801244a:	6019      	str	r1, [r3, #0]
 801244c:	6823      	ldr	r3, [r4, #0]
 801244e:	4013      	ands	r3, r2
 8012450:	4a05      	ldr	r2, [pc, #20]	; (8012468 <udp_set_ip+0x38>)
 8012452:	6013      	str	r3, [r2, #0]
 8012454:	68a2      	ldr	r2, [r4, #8]
 8012456:	4b05      	ldr	r3, [pc, #20]	; (801246c <udp_set_ip+0x3c>)
 8012458:	601a      	str	r2, [r3, #0]
 801245a:	b002      	add	sp, #8
 801245c:	bd10      	pop	{r4, pc}
 801245e:	bf00      	nop
 8012460:	2001bd12 	andcs	fp, r1, r2, lsl sp
 8012464:	20016028 	andcs	r6, r1, r8, lsr #32
 8012468:	20016030 	andcs	r6, r1, r0, lsr r0
 801246c:	2001602c 	andcs	r6, r1, ip, lsr #32

08012470 <udp_bind>:
 8012470:	4a0a      	ldr	r2, [pc, #40]	; (801249c <udp_bind+0x2c>)
 8012472:	4603      	mov	r3, r0
 8012474:	b510      	push	{r4, lr}
 8012476:	2000      	movs	r0, #0
 8012478:	4614      	mov	r4, r2
 801247a:	f852 1b04 	ldr.w	r1, [r2], #4
 801247e:	4299      	cmp	r1, r3
 8012480:	d008      	beq.n	8012494 <udp_bind+0x24>
 8012482:	b141      	cbz	r1, 8012496 <udp_bind+0x26>
 8012484:	3001      	adds	r0, #1
 8012486:	2808      	cmp	r0, #8
 8012488:	d1f7      	bne.n	801247a <udp_bind+0xa>
 801248a:	4805      	ldr	r0, [pc, #20]	; (80124a0 <udp_bind+0x30>)
 801248c:	f003 f922 	bl	80156d4 <console_error>
 8012490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012494:	bd10      	pop	{r4, pc}
 8012496:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 801249a:	e7fb      	b.n	8012494 <udp_bind+0x24>
 801249c:	20016038 	andcs	r6, r1, r8, lsr r0
 80124a0:	08019d02 	stmdaeq	r1, {r1, r8, sl, fp, ip, pc}

080124a4 <udp_unbind>:
 80124a4:	4a0c      	ldr	r2, [pc, #48]	; (80124d8 <udp_unbind+0x34>)
 80124a6:	2300      	movs	r3, #0
 80124a8:	4611      	mov	r1, r2
 80124aa:	b510      	push	{r4, lr}
 80124ac:	f852 4b04 	ldr.w	r4, [r2], #4
 80124b0:	4284      	cmp	r4, r0
 80124b2:	d108      	bne.n	80124c6 <udp_unbind+0x22>
 80124b4:	2000      	movs	r0, #0
 80124b6:	f640 3294 	movw	r2, #2964	; 0xb94
 80124ba:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80124be:	4353      	muls	r3, r2
 80124c0:	4a06      	ldr	r2, [pc, #24]	; (80124dc <udp_unbind+0x38>)
 80124c2:	50d0      	str	r0, [r2, r3]
 80124c4:	bd10      	pop	{r4, pc}
 80124c6:	3301      	adds	r3, #1
 80124c8:	2b08      	cmp	r3, #8
 80124ca:	d1ef      	bne.n	80124ac <udp_unbind+0x8>
 80124cc:	4804      	ldr	r0, [pc, #16]	; (80124e0 <udp_unbind+0x3c>)
 80124ce:	f003 f901 	bl	80156d4 <console_error>
 80124d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124d6:	e7f5      	b.n	80124c4 <udp_unbind+0x20>
 80124d8:	20016038 	andcs	r6, r1, r8, lsr r0
 80124dc:	20016058 	andcs	r6, r1, r8, asr r0
 80124e0:	08019d07 	stmdaeq	r1, {r0, r1, r2, r8, sl, fp, ip, pc}

080124e4 <udp_recv>:
 80124e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124e8:	4604      	mov	r4, r0
 80124ea:	4698      	mov	r8, r3
 80124ec:	f640 3394 	movw	r3, #2964	; 0xb94
 80124f0:	435c      	muls	r4, r3
 80124f2:	4608      	mov	r0, r1
 80124f4:	4915      	ldr	r1, [pc, #84]	; (801254c <udp_recv+0x68>)
 80124f6:	190f      	adds	r7, r1, r4
 80124f8:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 80124fc:	5b0b      	ldrh	r3, [r1, r4]
 80124fe:	4563      	cmp	r3, ip
 8012500:	d021      	beq.n	8012546 <udp_recv+0x62>
 8012502:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 8012506:	fb03 fc0c 	mul.w	ip, r3, ip
 801250a:	eb0c 0604 	add.w	r6, ip, r4
 801250e:	440e      	add	r6, r1
 8012510:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 8012514:	3404      	adds	r4, #4
 8012516:	4295      	cmp	r5, r2
 8012518:	bf28      	it	cs
 801251a:	4615      	movcs	r5, r2
 801251c:	4464      	add	r4, ip
 801251e:	462a      	mov	r2, r5
 8012520:	4421      	add	r1, r4
 8012522:	f7ff ff67 	bl	80123f4 <net_memcpy>
 8012526:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 801252a:	f8c8 3000 	str.w	r3, [r8]
 801252e:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 8012532:	9b06      	ldr	r3, [sp, #24]
 8012534:	801a      	strh	r2, [r3, #0]
 8012536:	887b      	ldrh	r3, [r7, #2]
 8012538:	3301      	adds	r3, #1
 801253a:	f003 0301 	and.w	r3, r3, #1
 801253e:	807b      	strh	r3, [r7, #2]
 8012540:	4628      	mov	r0, r5
 8012542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012546:	2500      	movs	r5, #0
 8012548:	e7fa      	b.n	8012540 <udp_recv+0x5c>
 801254a:	bf00      	nop
 801254c:	20016058 	andcs	r6, r1, r8, asr r0

08012550 <udp_recv2>:
 8012550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012552:	f640 3594 	movw	r5, #2964	; 0xb94
 8012556:	4368      	muls	r0, r5
 8012558:	4c0f      	ldr	r4, [pc, #60]	; (8012598 <udp_recv2+0x48>)
 801255a:	1827      	adds	r7, r4, r0
 801255c:	887d      	ldrh	r5, [r7, #2]
 801255e:	5a26      	ldrh	r6, [r4, r0]
 8012560:	42ae      	cmp	r6, r5
 8012562:	d017      	beq.n	8012594 <udp_recv2+0x44>
 8012564:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 8012568:	fb0c f505 	mul.w	r5, ip, r5
 801256c:	1d06      	adds	r6, r0, #4
 801256e:	442e      	add	r6, r5
 8012570:	4405      	add	r5, r0
 8012572:	4426      	add	r6, r4
 8012574:	442c      	add	r4, r5
 8012576:	600e      	str	r6, [r1, #0]
 8012578:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 801257c:	6011      	str	r1, [r2, #0]
 801257e:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 8012582:	801a      	strh	r2, [r3, #0]
 8012584:	887b      	ldrh	r3, [r7, #2]
 8012586:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 801258a:	3301      	adds	r3, #1
 801258c:	f003 0301 	and.w	r3, r3, #1
 8012590:	807b      	strh	r3, [r7, #2]
 8012592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012594:	2000      	movs	r0, #0
 8012596:	e7fc      	b.n	8012592 <udp_recv2+0x42>
 8012598:	20016058 	andcs	r6, r1, r8, asr r0

0801259c <udp_send>:
 801259c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80125a0:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80126d4 <udp_send+0x138>
 80125a4:	461c      	mov	r4, r3
 80125a6:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 80125aa:	4607      	mov	r7, r0
 80125ac:	4688      	mov	r8, r1
 80125ae:	4616      	mov	r6, r2
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	f000 808b 	beq.w	80126cc <udp_send+0x130>
 80125b6:	1c63      	adds	r3, r4, #1
 80125b8:	d141      	bne.n	801263e <udp_send+0xa2>
 80125ba:	4a47      	ldr	r2, [pc, #284]	; (80126d8 <udp_send+0x13c>)
 80125bc:	2307      	movs	r3, #7
 80125be:	4611      	mov	r1, r2
 80125c0:	20ff      	movs	r0, #255	; 0xff
 80125c2:	e001      	b.n	80125c8 <udp_send+0x2c>
 80125c4:	f802 0b01 	strb.w	r0, [r2], #1
 80125c8:	3b01      	subs	r3, #1
 80125ca:	d1fb      	bne.n	80125c4 <udp_send+0x28>
 80125cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125d0:	83cb      	strh	r3, [r1, #30]
 80125d2:	840b      	strh	r3, [r1, #32]
 80125d4:	2500      	movs	r5, #0
 80125d6:	f8df a104 	ldr.w	sl, [pc, #260]	; 80126dc <udp_send+0x140>
 80125da:	4c3f      	ldr	r4, [pc, #252]	; (80126d8 <udp_send+0x13c>)
 80125dc:	f8ba 3000 	ldrh.w	r3, [sl]
 80125e0:	2114      	movs	r1, #20
 80125e2:	8263      	strh	r3, [r4, #18]
 80125e4:	f106 031c 	add.w	r3, r6, #28
 80125e8:	ba5b      	rev16	r3, r3
 80125ea:	f104 000e 	add.w	r0, r4, #14
 80125ee:	8223      	strh	r3, [r4, #16]
 80125f0:	8325      	strh	r5, [r4, #24]
 80125f2:	f001 fdd4 	bl	801419e <net_chksum>
 80125f6:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 80125fa:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 80125fe:	ba5b      	rev16	r3, r3
 8012600:	8463      	strh	r3, [r4, #34]	; 0x22
 8012602:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8012606:	4632      	mov	r2, r6
 8012608:	ba5b      	rev16	r3, r3
 801260a:	84a3      	strh	r3, [r4, #36]	; 0x24
 801260c:	f106 0308 	add.w	r3, r6, #8
 8012610:	ba5b      	rev16	r3, r3
 8012612:	bf28      	it	cs
 8012614:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 8012618:	4641      	mov	r1, r8
 801261a:	8320      	strh	r0, [r4, #24]
 801261c:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8012620:	84e3      	strh	r3, [r4, #38]	; 0x26
 8012622:	f7ff fee7 	bl	80123f4 <net_memcpy>
 8012626:	4620      	mov	r0, r4
 8012628:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 801262c:	f004 faca 	bl	8016bc4 <emac_eth_send>
 8012630:	f8ba 3000 	ldrh.w	r3, [sl]
 8012634:	4628      	mov	r0, r5
 8012636:	3301      	adds	r3, #1
 8012638:	f8aa 3000 	strh.w	r3, [sl]
 801263c:	e037      	b.n	80126ae <udp_send+0x112>
 801263e:	4b28      	ldr	r3, [pc, #160]	; (80126e0 <udp_send+0x144>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	43a3      	bics	r3, r4
 8012644:	d10f      	bne.n	8012666 <udp_send+0xca>
 8012646:	2307      	movs	r3, #7
 8012648:	21ff      	movs	r1, #255	; 0xff
 801264a:	4a23      	ldr	r2, [pc, #140]	; (80126d8 <udp_send+0x13c>)
 801264c:	e001      	b.n	8012652 <udp_send+0xb6>
 801264e:	f802 1b01 	strb.w	r1, [r2], #1
 8012652:	3b01      	subs	r3, #1
 8012654:	d1fb      	bne.n	801264e <udp_send+0xb2>
 8012656:	2204      	movs	r2, #4
 8012658:	4822      	ldr	r0, [pc, #136]	; (80126e4 <udp_send+0x148>)
 801265a:	eb0d 0102 	add.w	r1, sp, r2
 801265e:	9401      	str	r4, [sp, #4]
 8012660:	f7ff febe 	bl	80123e0 <memcpy.isra.0>
 8012664:	e7b6      	b.n	80125d4 <udp_send+0x38>
 8012666:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 801266a:	2be0      	cmp	r3, #224	; 0xe0
 801266c:	d10e      	bne.n	801268c <udp_send+0xf0>
 801266e:	491e      	ldr	r1, [pc, #120]	; (80126e8 <udp_send+0x14c>)
 8012670:	f3c4 2306 	ubfx	r3, r4, #8, #7
 8012674:	70cb      	strb	r3, [r1, #3]
 8012676:	f3c4 4307 	ubfx	r3, r4, #16, #8
 801267a:	710b      	strb	r3, [r1, #4]
 801267c:	f3c4 6307 	ubfx	r3, r4, #24, #8
 8012680:	2206      	movs	r2, #6
 8012682:	4815      	ldr	r0, [pc, #84]	; (80126d8 <udp_send+0x13c>)
 8012684:	714b      	strb	r3, [r1, #5]
 8012686:	f7ff feab 	bl	80123e0 <memcpy.isra.0>
 801268a:	e7e4      	b.n	8012656 <udp_send+0xba>
 801268c:	4b17      	ldr	r3, [pc, #92]	; (80126ec <udp_send+0x150>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	43a3      	bics	r3, r4
 8012692:	d00f      	beq.n	80126b4 <udp_send+0x118>
 8012694:	4d16      	ldr	r5, [pc, #88]	; (80126f0 <udp_send+0x154>)
 8012696:	4910      	ldr	r1, [pc, #64]	; (80126d8 <udp_send+0x13c>)
 8012698:	6828      	ldr	r0, [r5, #0]
 801269a:	f001 fa4d 	bl	8013b38 <arp_cache_lookup>
 801269e:	682b      	ldr	r3, [r5, #0]
 80126a0:	4298      	cmp	r0, r3
 80126a2:	d0d8      	beq.n	8012656 <udp_send+0xba>
 80126a4:	4813      	ldr	r0, [pc, #76]	; (80126f4 <udp_send+0x158>)
 80126a6:	f003 f815 	bl	80156d4 <console_error>
 80126aa:	f06f 0002 	mvn.w	r0, #2
 80126ae:	b002      	add	sp, #8
 80126b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126b4:	4620      	mov	r0, r4
 80126b6:	4908      	ldr	r1, [pc, #32]	; (80126d8 <udp_send+0x13c>)
 80126b8:	f001 fa3e 	bl	8013b38 <arp_cache_lookup>
 80126bc:	42a0      	cmp	r0, r4
 80126be:	d0ca      	beq.n	8012656 <udp_send+0xba>
 80126c0:	480d      	ldr	r0, [pc, #52]	; (80126f8 <udp_send+0x15c>)
 80126c2:	f003 f807 	bl	80156d4 <console_error>
 80126c6:	f06f 0001 	mvn.w	r0, #1
 80126ca:	e7f0      	b.n	80126ae <udp_send+0x112>
 80126cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126d0:	e7ed      	b.n	80126ae <udp_send+0x112>
 80126d2:	bf00      	nop
 80126d4:	20016038 	andcs	r6, r1, r8, lsr r0
 80126d8:	2001bcf8 	strdcs	fp, [r1], -r8
 80126dc:	20016034 	andcs	r6, r1, r4, lsr r0
 80126e0:	20016028 	andcs	r6, r1, r8, lsr #32
 80126e4:	2001bd16 	andcs	fp, r1, r6, lsl sp
 80126e8:	20000004 	andcs	r0, r0, r4
 80126ec:	20016030 	andcs	r6, r1, r0, lsr r0
 80126f0:	2001602c 	andcs	r6, r1, ip, lsr #32
 80126f4:	08019d0f 	stmdaeq	r1, {r0, r1, r2, r3, r8, sl, fp, ip, pc}
 80126f8:	08019d35 	stmdaeq	r1, {r0, r2, r4, r5, r8, sl, fp, ip, pc}

080126fc <strlen>:
 80126fc:	4603      	mov	r3, r0
 80126fe:	461a      	mov	r2, r3
 8012700:	7811      	ldrb	r1, [r2, #0]
 8012702:	3301      	adds	r3, #1
 8012704:	2900      	cmp	r1, #0
 8012706:	d1fa      	bne.n	80126fe <strlen+0x2>
 8012708:	1a10      	subs	r0, r2, r0
 801270a:	4770      	bx	lr

0801270c <strcmp>:
 801270c:	1e43      	subs	r3, r0, #1
 801270e:	3901      	subs	r1, #1
 8012710:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8012714:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012718:	4290      	cmp	r0, r2
 801271a:	d001      	beq.n	8012720 <strcmp+0x14>
 801271c:	1a80      	subs	r0, r0, r2
 801271e:	e001      	b.n	8012724 <strcmp+0x18>
 8012720:	2800      	cmp	r0, #0
 8012722:	d1f5      	bne.n	8012710 <strcmp+0x4>
 8012724:	4770      	bx	lr

08012726 <strcpy.isra.0>:
 8012726:	3801      	subs	r0, #1
 8012728:	f811 3b01 	ldrb.w	r3, [r1], #1
 801272c:	f800 3f01 	strb.w	r3, [r0, #1]!
 8012730:	2b00      	cmp	r3, #0
 8012732:	d1f9      	bne.n	8012728 <strcpy.isra.0+0x2>
 8012734:	4770      	bx	lr

08012736 <strcat.isra.0>:
 8012736:	b538      	push	{r3, r4, r5, lr}
 8012738:	4604      	mov	r4, r0
 801273a:	460d      	mov	r5, r1
 801273c:	f7ff ffde 	bl	80126fc <strlen>
 8012740:	4629      	mov	r1, r5
 8012742:	4420      	add	r0, r4
 8012744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012748:	f7ff bfed 	b.w	8012726 <strcpy.isra.0>

0801274c <MDNS::MDNS()>:
 801274c:	b513      	push	{r0, r1, r4, lr}
 801274e:	4604      	mov	r4, r0
 8012750:	a901      	add	r1, sp, #4
 8012752:	4804      	ldr	r0, [pc, #16]	; (8012764 <MDNS::MDNS()+0x18>)
 8012754:	f003 f93c 	bl	80159d0 <inet_aton>
 8012758:	4620      	mov	r0, r4
 801275a:	4b03      	ldr	r3, [pc, #12]	; (8012768 <MDNS::MDNS()+0x1c>)
 801275c:	9a01      	ldr	r2, [sp, #4]
 801275e:	601a      	str	r2, [r3, #0]
 8012760:	b002      	add	sp, #8
 8012762:	bd10      	pop	{r4, pc}
 8012764:	08019d70 	stmdaeq	r1, {r4, r5, r6, r8, sl, fp, ip, pc}
 8012768:	2001c2ec 	andcs	ip, r1, ip, ror #5

0801276c <MDNS::SetName(char const*)>:
 801276c:	b538      	push	{r3, r4, r5, lr}
 801276e:	4d0b      	ldr	r5, [pc, #44]	; (801279c <MDNS::SetName(char const*)+0x30>)
 8012770:	460c      	mov	r4, r1
 8012772:	6828      	ldr	r0, [r5, #0]
 8012774:	b108      	cbz	r0, 801277a <MDNS::SetName(char const*)+0xe>
 8012776:	f003 f925 	bl	80159c4 <operator delete[](void*)>
 801277a:	4620      	mov	r0, r4
 801277c:	f7ff ffbe 	bl	80126fc <strlen>
 8012780:	3007      	adds	r0, #7
 8012782:	f003 f923 	bl	80159cc <operator new[](unsigned int)>
 8012786:	4621      	mov	r1, r4
 8012788:	6028      	str	r0, [r5, #0]
 801278a:	f7ff ffcc 	bl	8012726 <strcpy.isra.0>
 801278e:	6828      	ldr	r0, [r5, #0]
 8012790:	4903      	ldr	r1, [pc, #12]	; (80127a0 <MDNS::SetName(char const*)+0x34>)
 8012792:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012796:	f7ff bfce 	b.w	8012736 <strcat.isra.0>
 801279a:	bf00      	nop
 801279c:	2001c71c 	andcs	ip, r1, ip, lsl r7
 80127a0:	08019d80 	stmdaeq	r1, {r7, r8, sl, fp, ip, pc}

080127a4 <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 80127a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80127a8:	f04f 0e00 	mov.w	lr, #0
 80127ac:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 80127b0:	4675      	mov	r5, lr
 80127b2:	4e1b      	ldr	r6, [pc, #108]	; (8012820 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7c>)
 80127b4:	4f1b      	ldr	r7, [pc, #108]	; (8012824 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x80>)
 80127b6:	780b      	ldrb	r3, [r1, #0]
 80127b8:	1c68      	adds	r0, r5, #1
 80127ba:	b913      	cbnz	r3, 80127c2 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x1e>
 80127bc:	7013      	strb	r3, [r2, #0]
 80127be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127c2:	2b3f      	cmp	r3, #63	; 0x3f
 80127c4:	d91c      	bls.n	8012800 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5c>
 80127c6:	7849      	ldrb	r1, [r1, #1]
 80127c8:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 80127cc:	430b      	orrs	r3, r1
 80127ce:	6839      	ldr	r1, [r7, #0]
 80127d0:	f1be 0f00 	cmp.w	lr, #0
 80127d4:	bf08      	it	eq
 80127d6:	4605      	moveq	r5, r0
 80127d8:	5ccc      	ldrb	r4, [r1, r3]
 80127da:	3301      	adds	r3, #1
 80127dc:	4419      	add	r1, r3
 80127de:	2300      	movs	r3, #0
 80127e0:	42a3      	cmp	r3, r4
 80127e2:	5cc8      	ldrb	r0, [r1, r3]
 80127e4:	d309      	bcc.n	80127fa <MDNS::DecodeDNSNameNotation(char const*, char*)+0x56>
 80127e6:	f04f 0e01 	mov.w	lr, #1
 80127ea:	4421      	add	r1, r4
 80127ec:	4414      	add	r4, r2
 80127ee:	780b      	ldrb	r3, [r1, #0]
 80127f0:	b10b      	cbz	r3, 80127f6 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x52>
 80127f2:	f804 cb01 	strb.w	ip, [r4], #1
 80127f6:	4622      	mov	r2, r4
 80127f8:	e7dd      	b.n	80127b6 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 80127fa:	54d0      	strb	r0, [r2, r3]
 80127fc:	3301      	adds	r3, #1
 80127fe:	e7ef      	b.n	80127e0 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x3c>
 8012800:	4688      	mov	r8, r1
 8012802:	18d4      	adds	r4, r2, r3
 8012804:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8012808:	f802 9b01 	strb.w	r9, [r2], #1
 801280c:	4294      	cmp	r4, r2
 801280e:	d1f9      	bne.n	8012804 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x60>
 8012810:	1c5a      	adds	r2, r3, #1
 8012812:	4411      	add	r1, r2
 8012814:	f1be 0f00 	cmp.w	lr, #0
 8012818:	d1e9      	bne.n	80127ee <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 801281a:	181d      	adds	r5, r3, r0
 801281c:	e7e7      	b.n	80127ee <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 801281e:	bf00      	nop
 8012820:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 8012824:	2001c720 	andcs	ip, r1, r0, lsr #14

08012828 <MDNS::FindFirstDotFromRight(char const*) const>:
 8012828:	b510      	push	{r4, lr}
 801282a:	4608      	mov	r0, r1
 801282c:	460c      	mov	r4, r1
 801282e:	f7ff ff65 	bl	80126fc <strlen>
 8012832:	4420      	add	r0, r4
 8012834:	42a0      	cmp	r0, r4
 8012836:	d903      	bls.n	8012840 <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 8012838:	f810 3901 	ldrb.w	r3, [r0], #-1
 801283c:	2b2e      	cmp	r3, #46	; 0x2e
 801283e:	d1f9      	bne.n	8012834 <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 8012840:	3001      	adds	r0, #1
 8012842:	bd10      	pop	{r4, pc}

08012844 <MDNS::WriteDnsName(char const*, char*, bool)>:
 8012844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012846:	4614      	mov	r4, r2
 8012848:	460f      	mov	r7, r1
 801284a:	1c60      	adds	r0, r4, #1
 801284c:	463d      	mov	r5, r7
 801284e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012852:	b946      	cbnz	r6, 8012866 <MDNS::WriteDnsName(char const*, char*, bool)+0x22>
 8012854:	1a69      	subs	r1, r5, r1
 8012856:	7021      	strb	r1, [r4, #0]
 8012858:	7829      	ldrb	r1, [r5, #0]
 801285a:	b949      	cbnz	r1, 8012870 <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 801285c:	b10b      	cbz	r3, 8012862 <MDNS::WriteDnsName(char const*, char*, bool)+0x1e>
 801285e:	f800 1b01 	strb.w	r1, [r0], #1
 8012862:	1a80      	subs	r0, r0, r2
 8012864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012866:	2e2e      	cmp	r6, #46	; 0x2e
 8012868:	d0f4      	beq.n	8012854 <MDNS::WriteDnsName(char const*, char*, bool)+0x10>
 801286a:	f800 6b01 	strb.w	r6, [r0], #1
 801286e:	e7ed      	b.n	801284c <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 8012870:	4604      	mov	r4, r0
 8012872:	1c69      	adds	r1, r5, #1
 8012874:	e7e8      	b.n	8012848 <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

08012878 <MDNS::CreateAnswerLocalIpAddress()>:
 8012878:	2384      	movs	r3, #132	; 0x84
 801287a:	b510      	push	{r4, lr}
 801287c:	4c0f      	ldr	r4, [pc, #60]	; (80128bc <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 801287e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012882:	80e3      	strh	r3, [r4, #6]
 8012884:	2300      	movs	r3, #0
 8012886:	490e      	ldr	r1, [pc, #56]	; (80128c0 <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 8012888:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801288c:	6809      	ldr	r1, [r1, #0]
 801288e:	f104 0210 	add.w	r2, r4, #16
 8012892:	2301      	movs	r3, #1
 8012894:	f7ff ffd6 	bl	8012844 <MDNS::WriteDnsName(char const*, char*, bool)>
 8012898:	490a      	ldr	r1, [pc, #40]	; (80128c4 <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 801289a:	1813      	adds	r3, r2, r0
 801289c:	5011      	str	r1, [r2, r0]
 801289e:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 80128a2:	605a      	str	r2, [r3, #4]
 80128a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80128a8:	811a      	strh	r2, [r3, #8]
 80128aa:	4a07      	ldr	r2, [pc, #28]	; (80128c8 <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 80128ac:	6812      	ldr	r2, [r2, #0]
 80128ae:	6912      	ldr	r2, [r2, #16]
 80128b0:	f8c3 200a 	str.w	r2, [r3, #10]
 80128b4:	1b1b      	subs	r3, r3, r4
 80128b6:	330a      	adds	r3, #10
 80128b8:	6023      	str	r3, [r4, #0]
 80128ba:	bd10      	pop	{r4, pc}
 80128bc:	2001c2f0 	strdcs	ip, [r1], -r0
 80128c0:	2001c71c 	andcs	ip, r1, ip, lsl r7
 80128c4:	01800100 	orreq	r0, r0, r0, lsl #2
 80128c8:	2001c724 	andcs	ip, r1, r4, lsr #14

080128cc <MDNS::Start()>:
 80128cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80128ce:	4c1d      	ldr	r4, [pc, #116]	; (8012944 <MDNS::Start()+0x78>)
 80128d0:	f241 41e9 	movw	r1, #5353	; 0x14e9
 80128d4:	4605      	mov	r5, r0
 80128d6:	6820      	ldr	r0, [r4, #0]
 80128d8:	f000 fb26 	bl	8012f28 <Network::Begin(unsigned short)>
 80128dc:	4e1a      	ldr	r6, [pc, #104]	; (8012948 <MDNS::Start()+0x7c>)
 80128de:	4f1b      	ldr	r7, [pc, #108]	; (801294c <MDNS::Start()+0x80>)
 80128e0:	4601      	mov	r1, r0
 80128e2:	6030      	str	r0, [r6, #0]
 80128e4:	683a      	ldr	r2, [r7, #0]
 80128e6:	6820      	ldr	r0, [r4, #0]
 80128e8:	f000 fb2f 	bl	8012f4a <Network::JoinGroup(int, unsigned int)>
 80128ec:	4b18      	ldr	r3, [pc, #96]	; (8012950 <MDNS::Start()+0x84>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	b923      	cbnz	r3, 80128fc <MDNS::Start()+0x30>
 80128f2:	6821      	ldr	r1, [r4, #0]
 80128f4:	4628      	mov	r0, r5
 80128f6:	311c      	adds	r1, #28
 80128f8:	f7ff ff38 	bl	801276c <MDNS::SetName(char const*)>
 80128fc:	4628      	mov	r0, r5
 80128fe:	f7ff ffbb 	bl	8012878 <MDNS::CreateAnswerLocalIpAddress()>
 8012902:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8012906:	4913      	ldr	r1, [pc, #76]	; (8012954 <MDNS::Start()+0x88>)
 8012908:	7830      	ldrb	r0, [r6, #0]
 801290a:	f831 2b04 	ldrh.w	r2, [r1], #4
 801290e:	9300      	str	r3, [sp, #0]
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	f7ff fe43 	bl	801259c <udp_send>
 8012916:	233f      	movs	r3, #63	; 0x3f
 8012918:	6820      	ldr	r0, [r4, #0]
 801291a:	4c0f      	ldr	r4, [pc, #60]	; (8012958 <MDNS::Start()+0x8c>)
 801291c:	f100 025c 	add.w	r2, r0, #92	; 0x5c
 8012920:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8012924:	b929      	cbnz	r1, 8012932 <MDNS::Start()+0x66>
 8012926:	4413      	add	r3, r2
 8012928:	429a      	cmp	r2, r3
 801292a:	d006      	beq.n	801293a <MDNS::Start()+0x6e>
 801292c:	f802 1b01 	strb.w	r1, [r2], #1
 8012930:	e7fa      	b.n	8012928 <MDNS::Start()+0x5c>
 8012932:	3b01      	subs	r3, #1
 8012934:	f802 1b01 	strb.w	r1, [r2], #1
 8012938:	d1f2      	bne.n	8012920 <MDNS::Start()+0x54>
 801293a:	2300      	movs	r3, #0
 801293c:	f880 309b 	strb.w	r3, [r0, #155]	; 0x9b
 8012940:	b003      	add	sp, #12
 8012942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012944:	2001c724 	andcs	ip, r1, r4, lsr #14
 8012948:	2000000c 	andcs	r0, r0, ip
 801294c:	2001c2ec 	andcs	ip, r1, ip, ror #5
 8012950:	2001c71c 	andcs	ip, r1, ip, lsl r7
 8012954:	2001c2f0 	strdcs	ip, [r1], -r0
 8012958:	08019d80 	stmdaeq	r1, {r7, r8, sl, fp, ip, pc}

0801295c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 801295c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012960:	4c1b      	ldr	r4, [pc, #108]	; (80129d0 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 8012962:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8012966:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 801296a:	2300      	movs	r3, #0
 801296c:	f854 100c 	ldr.w	r1, [r4, ip]
 8012970:	4607      	mov	r7, r0
 8012972:	f7ff ff67 	bl	8012844 <MDNS::WriteDnsName(char const*, char*, bool)>
 8012976:	2301      	movs	r3, #1
 8012978:	7bac      	ldrb	r4, [r5, #14]
 801297a:	4616      	mov	r6, r2
 801297c:	4915      	ldr	r1, [pc, #84]	; (80129d4 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 801297e:	4402      	add	r2, r0
 8012980:	4815      	ldr	r0, [pc, #84]	; (80129d8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 8012982:	429c      	cmp	r4, r3
 8012984:	bf18      	it	ne
 8012986:	4601      	movne	r1, r0
 8012988:	4638      	mov	r0, r7
 801298a:	f7ff ff5b 	bl	8012844 <MDNS::WriteDnsName(char const*, char*, bool)>
 801298e:	4b13      	ldr	r3, [pc, #76]	; (80129dc <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 8012990:	1814      	adds	r4, r2, r0
 8012992:	5013      	str	r3, [r2, r0]
 8012994:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8012998:	6063      	str	r3, [r4, #4]
 801299a:	4b11      	ldr	r3, [pc, #68]	; (80129e0 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 801299c:	f8d3 8000 	ldr.w	r8, [r3]
 80129a0:	4640      	mov	r0, r8
 80129a2:	f7ff feab 	bl	80126fc <strlen>
 80129a6:	f100 0308 	add.w	r3, r0, #8
 80129aa:	ba5b      	rev16	r3, r3
 80129ac:	8123      	strh	r3, [r4, #8]
 80129ae:	2300      	movs	r3, #0
 80129b0:	f8c4 300a 	str.w	r3, [r4, #10]
 80129b4:	89ab      	ldrh	r3, [r5, #12]
 80129b6:	f104 0210 	add.w	r2, r4, #16
 80129ba:	ba5b      	rev16	r3, r3
 80129bc:	81e3      	strh	r3, [r4, #14]
 80129be:	4641      	mov	r1, r8
 80129c0:	2301      	movs	r3, #1
 80129c2:	4638      	mov	r0, r7
 80129c4:	f7ff ff3e 	bl	8012844 <MDNS::WriteDnsName(char const*, char*, bool)>
 80129c8:	4410      	add	r0, r2
 80129ca:	1b80      	subs	r0, r0, r6
 80129cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129d0:	2001c4f4 	strdcs	ip, [r1], -r4
 80129d4:	08019d7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, fp, ip, pc}
 80129d8:	08019d99 	stmdaeq	r1, {r0, r3, r4, r7, r8, sl, fp, ip, pc}
 80129dc:	01802100 	orreq	r2, r0, r0, lsl #2
 80129e0:	2001c71c 	andcs	ip, r1, ip, lsl r7

080129e4 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 80129e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129e8:	4e19      	ldr	r6, [pc, #100]	; (8012a50 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 80129ea:	010f      	lsls	r7, r1, #4
 80129ec:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 80129f0:	2300      	movs	r3, #0
 80129f2:	59f1      	ldr	r1, [r6, r7]
 80129f4:	4604      	mov	r4, r0
 80129f6:	f7ff ff25 	bl	8012844 <MDNS::WriteDnsName(char const*, char*, bool)>
 80129fa:	2301      	movs	r3, #1
 80129fc:	7bae      	ldrb	r6, [r5, #14]
 80129fe:	4690      	mov	r8, r2
 8012a00:	4914      	ldr	r1, [pc, #80]	; (8012a54 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 8012a02:	4402      	add	r2, r0
 8012a04:	4814      	ldr	r0, [pc, #80]	; (8012a58 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 8012a06:	429e      	cmp	r6, r3
 8012a08:	bf18      	it	ne
 8012a0a:	4601      	movne	r1, r0
 8012a0c:	4620      	mov	r0, r4
 8012a0e:	f7ff ff19 	bl	8012844 <MDNS::WriteDnsName(char const*, char*, bool)>
 8012a12:	4b12      	ldr	r3, [pc, #72]	; (8012a5c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 8012a14:	1816      	adds	r6, r2, r0
 8012a16:	5013      	str	r3, [r2, r0]
 8012a18:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8012a1c:	68a8      	ldr	r0, [r5, #8]
 8012a1e:	6073      	str	r3, [r6, #4]
 8012a20:	f106 040b 	add.w	r4, r6, #11
 8012a24:	b938      	cbnz	r0, 8012a36 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 8012a26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a2a:	72b0      	strb	r0, [r6, #10]
 8012a2c:	8133      	strh	r3, [r6, #8]
 8012a2e:	eba4 0008 	sub.w	r0, r4, r8
 8012a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a36:	f7ff fe61 	bl	80126fc <strlen>
 8012a3a:	4607      	mov	r7, r0
 8012a3c:	1c43      	adds	r3, r0, #1
 8012a3e:	72b0      	strb	r0, [r6, #10]
 8012a40:	ba5b      	rev16	r3, r3
 8012a42:	4620      	mov	r0, r4
 8012a44:	68a9      	ldr	r1, [r5, #8]
 8012a46:	8133      	strh	r3, [r6, #8]
 8012a48:	f7ff fe6d 	bl	8012726 <strcpy.isra.0>
 8012a4c:	443c      	add	r4, r7
 8012a4e:	e7ee      	b.n	8012a2e <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 8012a50:	2001c4f4 	strdcs	ip, [r1], -r4
 8012a54:	08019d7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, fp, ip, pc}
 8012a58:	08019d99 	stmdaeq	r1, {r0, r3, r4, r7, r8, sl, fp, ip, pc}
 8012a5c:	01801000 	orreq	r1, r0, r0

08012a60 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 8012a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a64:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8012ac8 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x68>
 8012a68:	ea4f 1901 	mov.w	r9, r1, lsl #4
 8012a6c:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 8012a70:	6869      	ldr	r1, [r5, #4]
 8012a72:	2301      	movs	r3, #1
 8012a74:	4607      	mov	r7, r0
 8012a76:	f7ff fee5 	bl	8012844 <MDNS::WriteDnsName(char const*, char*, bool)>
 8012a7a:	4b14      	ldr	r3, [pc, #80]	; (8012acc <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 8012a7c:	f858 8009 	ldr.w	r8, [r8, r9]
 8012a80:	5013      	str	r3, [r2, r0]
 8012a82:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8012a86:	1816      	adds	r6, r2, r0
 8012a88:	6073      	str	r3, [r6, #4]
 8012a8a:	4640      	mov	r0, r8
 8012a8c:	4614      	mov	r4, r2
 8012a8e:	f7ff fe35 	bl	80126fc <strlen>
 8012a92:	f100 030d 	add.w	r3, r0, #13
 8012a96:	ba5b      	rev16	r3, r3
 8012a98:	4641      	mov	r1, r8
 8012a9a:	8133      	strh	r3, [r6, #8]
 8012a9c:	f106 020a 	add.w	r2, r6, #10
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	4638      	mov	r0, r7
 8012aa4:	f7ff fece 	bl	8012844 <MDNS::WriteDnsName(char const*, char*, bool)>
 8012aa8:	2301      	movs	r3, #1
 8012aaa:	4402      	add	r2, r0
 8012aac:	7bad      	ldrb	r5, [r5, #14]
 8012aae:	4808      	ldr	r0, [pc, #32]	; (8012ad0 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 8012ab0:	4908      	ldr	r1, [pc, #32]	; (8012ad4 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 8012ab2:	429d      	cmp	r5, r3
 8012ab4:	bf18      	it	ne
 8012ab6:	4601      	movne	r1, r0
 8012ab8:	4638      	mov	r0, r7
 8012aba:	f7ff fec3 	bl	8012844 <MDNS::WriteDnsName(char const*, char*, bool)>
 8012abe:	4410      	add	r0, r2
 8012ac0:	1b00      	subs	r0, r0, r4
 8012ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ac6:	bf00      	nop
 8012ac8:	2001c4f4 	strdcs	ip, [r1], -r4
 8012acc:	01000c00 	tsteq	r0, r0, lsl #24
 8012ad0:	08019d99 	stmdaeq	r1, {r0, r3, r4, r7, r8, sl, fp, ip, pc}
 8012ad4:	08019d7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, fp, ip, pc}

08012ad8 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 8012ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ada:	460f      	mov	r7, r1
 8012adc:	2301      	movs	r3, #1
 8012ade:	490f      	ldr	r1, [pc, #60]	; (8012b1c <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x44>)
 8012ae0:	4606      	mov	r6, r0
 8012ae2:	f7ff feaf 	bl	8012844 <MDNS::WriteDnsName(char const*, char*, bool)>
 8012ae6:	4b0e      	ldr	r3, [pc, #56]	; (8012b20 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 8012ae8:	490e      	ldr	r1, [pc, #56]	; (8012b24 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 8012aea:	5013      	str	r3, [r2, r0]
 8012aec:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8012af0:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8012af4:	684f      	ldr	r7, [r1, #4]
 8012af6:	1815      	adds	r5, r2, r0
 8012af8:	606b      	str	r3, [r5, #4]
 8012afa:	4638      	mov	r0, r7
 8012afc:	4614      	mov	r4, r2
 8012afe:	f7ff fdfd 	bl	80126fc <strlen>
 8012b02:	1c83      	adds	r3, r0, #2
 8012b04:	ba5b      	rev16	r3, r3
 8012b06:	812b      	strh	r3, [r5, #8]
 8012b08:	f105 020a 	add.w	r2, r5, #10
 8012b0c:	2301      	movs	r3, #1
 8012b0e:	4639      	mov	r1, r7
 8012b10:	4630      	mov	r0, r6
 8012b12:	f7ff fe97 	bl	8012844 <MDNS::WriteDnsName(char const*, char*, bool)>
 8012b16:	4410      	add	r0, r2
 8012b18:	1b00      	subs	r0, r0, r4
 8012b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b1c:	08019d87 	stmdaeq	r1, {r0, r1, r2, r7, r8, sl, fp, ip, pc}
 8012b20:	01000c00 	tsteq	r0, r0, lsl #24
 8012b24:	2001c4f4 	strdcs	ip, [r1], -r4

08012b28 <MDNS::CreateMDNSMessage(unsigned int)>:
 8012b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b2a:	2384      	movs	r3, #132	; 0x84
 8012b2c:	4d19      	ldr	r5, [pc, #100]	; (8012b94 <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 8012b2e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8012b32:	80eb      	strh	r3, [r5, #6]
 8012b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b38:	f105 0410 	add.w	r4, r5, #16
 8012b3c:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8012b40:	4622      	mov	r2, r4
 8012b42:	4606      	mov	r6, r0
 8012b44:	460f      	mov	r7, r1
 8012b46:	f7ff ff09 	bl	801295c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 8012b4a:	4404      	add	r4, r0
 8012b4c:	4622      	mov	r2, r4
 8012b4e:	4639      	mov	r1, r7
 8012b50:	4630      	mov	r0, r6
 8012b52:	f7ff ff47 	bl	80129e4 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 8012b56:	4404      	add	r4, r0
 8012b58:	4622      	mov	r2, r4
 8012b5a:	4639      	mov	r1, r7
 8012b5c:	4630      	mov	r0, r6
 8012b5e:	f7ff ffbb 	bl	8012ad8 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 8012b62:	4404      	add	r4, r0
 8012b64:	4622      	mov	r2, r4
 8012b66:	4639      	mov	r1, r7
 8012b68:	4630      	mov	r0, r6
 8012b6a:	f7ff ff79 	bl	8012a60 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 8012b6e:	4a0a      	ldr	r2, [pc, #40]	; (8012b98 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 8012b70:	4404      	add	r4, r0
 8012b72:	f852 3b10 	ldr.w	r3, [r2], #16
 8012b76:	1e60      	subs	r0, r4, #1
 8012b78:	3b0c      	subs	r3, #12
 8012b7a:	4619      	mov	r1, r3
 8012b7c:	3901      	subs	r1, #1
 8012b7e:	d204      	bcs.n	8012b8a <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 8012b80:	441c      	add	r4, r3
 8012b82:	4b06      	ldr	r3, [pc, #24]	; (8012b9c <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 8012b84:	1ae4      	subs	r4, r4, r3
 8012b86:	602c      	str	r4, [r5, #0]
 8012b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b8a:	f812 6b01 	ldrb.w	r6, [r2], #1
 8012b8e:	f800 6f01 	strb.w	r6, [r0, #1]!
 8012b92:	e7f3      	b.n	8012b7c <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 8012b94:	2001c518 	andcs	ip, r1, r8, lsl r5
 8012b98:	2001c2f0 	strdcs	ip, [r1], -r0
 8012b9c:	2001c51c 	andcs	ip, r1, ip, lsl r5

08012ba0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 8012ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ba4:	4d40      	ldr	r5, [pc, #256]	; (8012ca8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>)
 8012ba6:	b085      	sub	sp, #20
 8012ba8:	682c      	ldr	r4, [r5, #0]
 8012baa:	4680      	mov	r8, r0
 8012bac:	460f      	mov	r7, r1
 8012bae:	4616      	mov	r6, r2
 8012bb0:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8012bb4:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8012bb8:	b11c      	cbz	r4, 8012bc2 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22>
 8012bba:	692a      	ldr	r2, [r5, #16]
 8012bbc:	2a00      	cmp	r2, #0
 8012bbe:	d16e      	bne.n	8012c9e <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfe>
 8012bc0:	2401      	movs	r4, #1
 8012bc2:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8012bc6:	ea4f 1904 	mov.w	r9, r4, lsl #4
 8012bca:	8193      	strh	r3, [r2, #12]
 8012bcc:	f882 b00e 	strb.w	fp, [r2, #14]
 8012bd0:	2f00      	cmp	r7, #0
 8012bd2:	d154      	bne.n	8012c7e <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xde>
 8012bd4:	4b35      	ldr	r3, [pc, #212]	; (8012cac <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 8012bd6:	6818      	ldr	r0, [r3, #0]
 8012bd8:	301c      	adds	r0, #28
 8012bda:	f7ff fd8f 	bl	80126fc <strlen>
 8012bde:	4607      	mov	r7, r0
 8012be0:	4630      	mov	r0, r6
 8012be2:	f7ff fd8b 	bl	80126fc <strlen>
 8012be6:	4438      	add	r0, r7
 8012be8:	3001      	adds	r0, #1
 8012bea:	f002 feef 	bl	80159cc <operator new[](unsigned int)>
 8012bee:	4b2f      	ldr	r3, [pc, #188]	; (8012cac <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 8012bf0:	f845 0009 	str.w	r0, [r5, r9]
 8012bf4:	6819      	ldr	r1, [r3, #0]
 8012bf6:	311c      	adds	r1, #28
 8012bf8:	f7ff fd95 	bl	8012726 <strcpy.isra.0>
 8012bfc:	f855 0009 	ldr.w	r0, [r5, r9]
 8012c00:	4631      	mov	r1, r6
 8012c02:	f7ff fd98 	bl	8012736 <strcat.isra.0>
 8012c06:	4631      	mov	r1, r6
 8012c08:	4640      	mov	r0, r8
 8012c0a:	f7ff fe0d 	bl	8012828 <MDNS::FindFirstDotFromRight(char const*) const>
 8012c0e:	eb05 0709 	add.w	r7, r5, r9
 8012c12:	4605      	mov	r5, r0
 8012c14:	f7ff fd72 	bl	80126fc <strlen>
 8012c18:	300d      	adds	r0, #13
 8012c1a:	f002 fed7 	bl	80159cc <operator new[](unsigned int)>
 8012c1e:	4629      	mov	r1, r5
 8012c20:	6078      	str	r0, [r7, #4]
 8012c22:	f7ff fd80 	bl	8012726 <strcpy.isra.0>
 8012c26:	4922      	ldr	r1, [pc, #136]	; (8012cb0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f7ff fd84 	bl	8012736 <strcat.isra.0>
 8012c2e:	4921      	ldr	r1, [pc, #132]	; (8012cb4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 8012c30:	4b21      	ldr	r3, [pc, #132]	; (8012cb8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 8012c32:	6878      	ldr	r0, [r7, #4]
 8012c34:	f1bb 0f01 	cmp.w	fp, #1
 8012c38:	bf18      	it	ne
 8012c3a:	4619      	movne	r1, r3
 8012c3c:	f7ff fd7b 	bl	8012736 <strcat.isra.0>
 8012c40:	f1ba 0f00 	cmp.w	sl, #0
 8012c44:	d009      	beq.n	8012c5a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xba>
 8012c46:	4650      	mov	r0, sl
 8012c48:	f7ff fd58 	bl	80126fc <strlen>
 8012c4c:	3001      	adds	r0, #1
 8012c4e:	f002 febd 	bl	80159cc <operator new[](unsigned int)>
 8012c52:	4651      	mov	r1, sl
 8012c54:	60b8      	str	r0, [r7, #8]
 8012c56:	f7ff fd66 	bl	8012726 <strcpy.isra.0>
 8012c5a:	4621      	mov	r1, r4
 8012c5c:	4640      	mov	r0, r8
 8012c5e:	f7ff ff63 	bl	8012b28 <MDNS::CreateMDNSMessage(unsigned int)>
 8012c62:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8012c66:	4915      	ldr	r1, [pc, #84]	; (8012cbc <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 8012c68:	4815      	ldr	r0, [pc, #84]	; (8012cc0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 8012c6a:	f831 2b04 	ldrh.w	r2, [r1], #4
 8012c6e:	9300      	str	r3, [sp, #0]
 8012c70:	4b14      	ldr	r3, [pc, #80]	; (8012cc4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x124>)
 8012c72:	7800      	ldrb	r0, [r0, #0]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	f7ff fc91 	bl	801259c <udp_send>
 8012c7a:	2001      	movs	r0, #1
 8012c7c:	e010      	b.n	8012ca0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x100>
 8012c7e:	4638      	mov	r0, r7
 8012c80:	f7ff fd3c 	bl	80126fc <strlen>
 8012c84:	9003      	str	r0, [sp, #12]
 8012c86:	4630      	mov	r0, r6
 8012c88:	f7ff fd38 	bl	80126fc <strlen>
 8012c8c:	9b03      	ldr	r3, [sp, #12]
 8012c8e:	4418      	add	r0, r3
 8012c90:	3001      	adds	r0, #1
 8012c92:	f002 fe9b 	bl	80159cc <operator new[](unsigned int)>
 8012c96:	4639      	mov	r1, r7
 8012c98:	f845 0009 	str.w	r0, [r5, r9]
 8012c9c:	e7ac      	b.n	8012bf8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x58>
 8012c9e:	2000      	movs	r0, #0
 8012ca0:	b005      	add	sp, #20
 8012ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ca6:	bf00      	nop
 8012ca8:	2001c4f4 	strdcs	ip, [r1], -r4
 8012cac:	2001c724 	andcs	ip, r1, r4, lsr #14
 8012cb0:	08018d3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, sl, fp, pc}
 8012cb4:	08019d7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, fp, ip, pc}
 8012cb8:	08019d99 	stmdaeq	r1, {r0, r3, r4, r7, r8, sl, fp, ip, pc}
 8012cbc:	2001c518 	andcs	ip, r1, r8, lsl r5
 8012cc0:	2000000c 	andcs	r0, r0, ip
 8012cc4:	2001c2ec 	andcs	ip, r1, ip, ror #5

08012cc8 <MDNS::HandleRequest(unsigned short)>:
 8012cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ccc:	4605      	mov	r5, r0
 8012cce:	2700      	movs	r7, #0
 8012cd0:	f04f 080c 	mov.w	r8, #12
 8012cd4:	b0c5      	sub	sp, #276	; 0x114
 8012cd6:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8012d98 <MDNS::HandleRequest(unsigned short)+0xd0>
 8012cda:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8012d9c <MDNS::HandleRequest(unsigned short)+0xd4>
 8012cde:	9103      	str	r1, [sp, #12]
 8012ce0:	9b03      	ldr	r3, [sp, #12]
 8012ce2:	42bb      	cmp	r3, r7
 8012ce4:	d802      	bhi.n	8012cec <MDNS::HandleRequest(unsigned short)+0x24>
 8012ce6:	b045      	add	sp, #276	; 0x114
 8012ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cec:	f8da 1000 	ldr.w	r1, [sl]
 8012cf0:	aa04      	add	r2, sp, #16
 8012cf2:	4441      	add	r1, r8
 8012cf4:	4628      	mov	r0, r5
 8012cf6:	f7ff fd55 	bl	80127a4 <MDNS::DecodeDNSNameNotation(char const*, char*)>
 8012cfa:	f8da 2000 	ldr.w	r2, [sl]
 8012cfe:	4440      	add	r0, r8
 8012d00:	1813      	adds	r3, r2, r0
 8012d02:	885b      	ldrh	r3, [r3, #2]
 8012d04:	f100 0804 	add.w	r8, r0, #4
 8012d08:	ba5b      	rev16	r3, r3
 8012d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d0e:	2b01      	cmp	r3, #1
 8012d10:	d13d      	bne.n	8012d8e <MDNS::HandleRequest(unsigned short)+0xc6>
 8012d12:	5a14      	ldrh	r4, [r2, r0]
 8012d14:	4b22      	ldr	r3, [pc, #136]	; (8012da0 <MDNS::HandleRequest(unsigned short)+0xd8>)
 8012d16:	ba64      	rev16	r4, r4
 8012d18:	6818      	ldr	r0, [r3, #0]
 8012d1a:	a904      	add	r1, sp, #16
 8012d1c:	b2a4      	uxth	r4, r4
 8012d1e:	f7ff fcf5 	bl	801270c <strcmp>
 8012d22:	b968      	cbnz	r0, 8012d40 <MDNS::HandleRequest(unsigned short)+0x78>
 8012d24:	2c01      	cmp	r4, #1
 8012d26:	d10b      	bne.n	8012d40 <MDNS::HandleRequest(unsigned short)+0x78>
 8012d28:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8012d2c:	491d      	ldr	r1, [pc, #116]	; (8012da4 <MDNS::HandleRequest(unsigned short)+0xdc>)
 8012d2e:	481e      	ldr	r0, [pc, #120]	; (8012da8 <MDNS::HandleRequest(unsigned short)+0xe0>)
 8012d30:	f831 2b04 	ldrh.w	r2, [r1], #4
 8012d34:	9300      	str	r3, [sp, #0]
 8012d36:	4b1d      	ldr	r3, [pc, #116]	; (8012dac <MDNS::HandleRequest(unsigned short)+0xe4>)
 8012d38:	7800      	ldrb	r0, [r0, #0]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	f7ff fc2e 	bl	801259c <udp_send>
 8012d40:	481b      	ldr	r0, [pc, #108]	; (8012db0 <MDNS::HandleRequest(unsigned short)+0xe8>)
 8012d42:	a904      	add	r1, sp, #16
 8012d44:	f7ff fce2 	bl	801270c <strcmp>
 8012d48:	f04f 0900 	mov.w	r9, #0
 8012d4c:	4e19      	ldr	r6, [pc, #100]	; (8012db4 <MDNS::HandleRequest(unsigned short)+0xec>)
 8012d4e:	9002      	str	r0, [sp, #8]
 8012d50:	6833      	ldr	r3, [r6, #0]
 8012d52:	b1c3      	cbz	r3, 8012d86 <MDNS::HandleRequest(unsigned short)+0xbe>
 8012d54:	9b02      	ldr	r3, [sp, #8]
 8012d56:	b123      	cbz	r3, 8012d62 <MDNS::HandleRequest(unsigned short)+0x9a>
 8012d58:	6870      	ldr	r0, [r6, #4]
 8012d5a:	a904      	add	r1, sp, #16
 8012d5c:	f7ff fcd6 	bl	801270c <strcmp>
 8012d60:	b988      	cbnz	r0, 8012d86 <MDNS::HandleRequest(unsigned short)+0xbe>
 8012d62:	2c0c      	cmp	r4, #12
 8012d64:	d10f      	bne.n	8012d86 <MDNS::HandleRequest(unsigned short)+0xbe>
 8012d66:	4649      	mov	r1, r9
 8012d68:	4628      	mov	r0, r5
 8012d6a:	f7ff fedd 	bl	8012b28 <MDNS::CreateMDNSMessage(unsigned int)>
 8012d6e:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8012d72:	480d      	ldr	r0, [pc, #52]	; (8012da8 <MDNS::HandleRequest(unsigned short)+0xe0>)
 8012d74:	9300      	str	r3, [sp, #0]
 8012d76:	4b0d      	ldr	r3, [pc, #52]	; (8012dac <MDNS::HandleRequest(unsigned short)+0xe4>)
 8012d78:	f8bb 2000 	ldrh.w	r2, [fp]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	490e      	ldr	r1, [pc, #56]	; (8012db8 <MDNS::HandleRequest(unsigned short)+0xf0>)
 8012d80:	7800      	ldrb	r0, [r0, #0]
 8012d82:	f7ff fc0b 	bl	801259c <udp_send>
 8012d86:	3610      	adds	r6, #16
 8012d88:	f1b9 0f00 	cmp.w	r9, #0
 8012d8c:	d001      	beq.n	8012d92 <MDNS::HandleRequest(unsigned short)+0xca>
 8012d8e:	3701      	adds	r7, #1
 8012d90:	e7a6      	b.n	8012ce0 <MDNS::HandleRequest(unsigned short)+0x18>
 8012d92:	f04f 0901 	mov.w	r9, #1
 8012d96:	e7db      	b.n	8012d50 <MDNS::HandleRequest(unsigned short)+0x88>
 8012d98:	2001c720 	andcs	ip, r1, r0, lsr #14
 8012d9c:	2001c518 	andcs	ip, r1, r8, lsl r5
 8012da0:	2001c71c 	andcs	ip, r1, ip, lsl r7
 8012da4:	2001c2f0 	strdcs	ip, [r1], -r0
 8012da8:	2000000c 	andcs	r0, r0, ip
 8012dac:	2001c2ec 	andcs	ip, r1, ip, ror #5
 8012db0:	08019d87 	stmdaeq	r1, {r0, r1, r2, r7, r8, sl, fp, ip, pc}
 8012db4:	2001c4f4 	strdcs	ip, [r1], -r4
 8012db8:	2001c51c 	andcs	ip, r1, ip, lsl r5

08012dbc <MDNS::Parse()>:
 8012dbc:	4b08      	ldr	r3, [pc, #32]	; (8012de0 <MDNS::Parse()+0x24>)
 8012dbe:	681a      	ldr	r2, [r3, #0]
 8012dc0:	8853      	ldrh	r3, [r2, #2]
 8012dc2:	ba5b      	rev16	r3, r3
 8012dc4:	b299      	uxth	r1, r3
 8012dc6:	041b      	lsls	r3, r3, #16
 8012dc8:	d408      	bmi.n	8012ddc <MDNS::Parse()+0x20>
 8012dca:	0b89      	lsrs	r1, r1, #14
 8012dcc:	d106      	bne.n	8012ddc <MDNS::Parse()+0x20>
 8012dce:	8891      	ldrh	r1, [r2, #4]
 8012dd0:	b28b      	uxth	r3, r1
 8012dd2:	b11b      	cbz	r3, 8012ddc <MDNS::Parse()+0x20>
 8012dd4:	ba49      	rev16	r1, r1
 8012dd6:	b289      	uxth	r1, r1
 8012dd8:	f7ff bf76 	b.w	8012cc8 <MDNS::HandleRequest(unsigned short)>
 8012ddc:	4770      	bx	lr
 8012dde:	bf00      	nop
 8012de0:	2001c720 	andcs	ip, r1, r0, lsr #14

08012de4 <MDNS::Run()>:
 8012de4:	b538      	push	{r3, r4, r5, lr}
 8012de6:	4d0c      	ldr	r5, [pc, #48]	; (8012e18 <MDNS::Run()+0x34>)
 8012de8:	4604      	mov	r4, r0
 8012dea:	480c      	ldr	r0, [pc, #48]	; (8012e1c <MDNS::Run()+0x38>)
 8012dec:	462b      	mov	r3, r5
 8012dee:	4a0c      	ldr	r2, [pc, #48]	; (8012e20 <MDNS::Run()+0x3c>)
 8012df0:	490c      	ldr	r1, [pc, #48]	; (8012e24 <MDNS::Run()+0x40>)
 8012df2:	7800      	ldrb	r0, [r0, #0]
 8012df4:	f7ff fbac 	bl	8012550 <udp_recv2>
 8012df8:	4b0b      	ldr	r3, [pc, #44]	; (8012e28 <MDNS::Run()+0x44>)
 8012dfa:	882a      	ldrh	r2, [r5, #0]
 8012dfc:	8018      	strh	r0, [r3, #0]
 8012dfe:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8012e02:	429a      	cmp	r2, r3
 8012e04:	d106      	bne.n	8012e14 <MDNS::Run()+0x30>
 8012e06:	280c      	cmp	r0, #12
 8012e08:	d904      	bls.n	8012e14 <MDNS::Run()+0x30>
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e10:	f7ff bfd4 	b.w	8012dbc <MDNS::Parse()>
 8012e14:	bd38      	pop	{r3, r4, r5, pc}
 8012e16:	bf00      	nop
 8012e18:	2001c2e8 	andcs	ip, r1, r8, ror #5
 8012e1c:	2000000c 	andcs	r0, r0, ip
 8012e20:	2001c2e4 	andcs	ip, r1, r4, ror #5
 8012e24:	2001c720 	andcs	ip, r1, r0, lsr #14
 8012e28:	2001c514 	andcs	ip, r1, r4, lsl r5

08012e2c <MDNS::Print()>:
 8012e2c:	b510      	push	{r4, lr}
 8012e2e:	4816      	ldr	r0, [pc, #88]	; (8012e88 <MDNS::Print()+0x5c>)
 8012e30:	f7f6 fc94 	bl	800975c <printf>
 8012e34:	4b15      	ldr	r3, [pc, #84]	; (8012e8c <MDNS::Print()+0x60>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	3301      	adds	r3, #1
 8012e3a:	d104      	bne.n	8012e46 <MDNS::Print()+0x1a>
 8012e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e40:	4813      	ldr	r0, [pc, #76]	; (8012e90 <MDNS::Print()+0x64>)
 8012e42:	f7f6 bc8b 	b.w	800975c <printf>
 8012e46:	4b13      	ldr	r3, [pc, #76]	; (8012e94 <MDNS::Print()+0x68>)
 8012e48:	4c13      	ldr	r4, [pc, #76]	; (8012e98 <MDNS::Print()+0x6c>)
 8012e4a:	6819      	ldr	r1, [r3, #0]
 8012e4c:	4813      	ldr	r0, [pc, #76]	; (8012e9c <MDNS::Print()+0x70>)
 8012e4e:	f7f6 fc85 	bl	800975c <printf>
 8012e52:	6823      	ldr	r3, [r4, #0]
 8012e54:	b14b      	cbz	r3, 8012e6a <MDNS::Print()+0x3e>
 8012e56:	4a12      	ldr	r2, [pc, #72]	; (8012ea0 <MDNS::Print()+0x74>)
 8012e58:	68a3      	ldr	r3, [r4, #8]
 8012e5a:	6861      	ldr	r1, [r4, #4]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	bf08      	it	eq
 8012e60:	4613      	moveq	r3, r2
 8012e62:	4810      	ldr	r0, [pc, #64]	; (8012ea4 <MDNS::Print()+0x78>)
 8012e64:	89a2      	ldrh	r2, [r4, #12]
 8012e66:	f7f6 fc79 	bl	800975c <printf>
 8012e6a:	6923      	ldr	r3, [r4, #16]
 8012e6c:	b15b      	cbz	r3, 8012e86 <MDNS::Print()+0x5a>
 8012e6e:	69a3      	ldr	r3, [r4, #24]
 8012e70:	4a0b      	ldr	r2, [pc, #44]	; (8012ea0 <MDNS::Print()+0x74>)
 8012e72:	6961      	ldr	r1, [r4, #20]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	bf08      	it	eq
 8012e78:	4613      	moveq	r3, r2
 8012e7a:	480a      	ldr	r0, [pc, #40]	; (8012ea4 <MDNS::Print()+0x78>)
 8012e7c:	8ba2      	ldrh	r2, [r4, #28]
 8012e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e82:	f7f6 bc6b 	b.w	800975c <printf>
 8012e86:	bd10      	pop	{r4, pc}
 8012e88:	08019da4 	stmdaeq	r1, {r2, r5, r7, r8, sl, fp, ip, pc}
 8012e8c:	2000000c 	andcs	r0, r0, ip
 8012e90:	08019daa 	stmdaeq	r1, {r1, r3, r5, r7, r8, sl, fp, ip, pc}
 8012e94:	2001c71c 	andcs	ip, r1, ip, lsl r7
 8012e98:	2001c4f4 	strdcs	ip, [r1], -r4
 8012e9c:	08019db8 	stmdaeq	r1, {r3, r4, r5, r7, r8, sl, fp, ip, pc}
 8012ea0:	08019061 	stmdaeq	r1, {r0, r5, r6, ip, pc}
 8012ea4:	08019dc4 	stmdaeq	r1, {r2, r6, r7, r8, sl, fp, ip, pc}

08012ea8 <strncpy.constprop.0.isra.0>:
 8012ea8:	233f      	movs	r3, #63	; 0x3f
 8012eaa:	3901      	subs	r1, #1
 8012eac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012eb0:	b92a      	cbnz	r2, 8012ebe <strncpy.constprop.0.isra.0+0x16>
 8012eb2:	4403      	add	r3, r0
 8012eb4:	4298      	cmp	r0, r3
 8012eb6:	d006      	beq.n	8012ec6 <strncpy.constprop.0.isra.0+0x1e>
 8012eb8:	f800 2b01 	strb.w	r2, [r0], #1
 8012ebc:	e7fa      	b.n	8012eb4 <strncpy.constprop.0.isra.0+0xc>
 8012ebe:	3b01      	subs	r3, #1
 8012ec0:	f800 2b01 	strb.w	r2, [r0], #1
 8012ec4:	d1f2      	bne.n	8012eac <strncpy.constprop.0.isra.0+0x4>
 8012ec6:	4770      	bx	lr

08012ec8 <Network::Network()>:
 8012ec8:	4a11      	ldr	r2, [pc, #68]	; (8012f10 <Network::Network()+0x48>)
 8012eca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012ece:	6010      	str	r0, [r2, #0]
 8012ed0:	2201      	movs	r2, #1
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	e9c0 1200 	strd	r1, r2, [r0]
 8012ed8:	2200      	movs	r2, #0
 8012eda:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
 8012ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012ee2:	490c      	ldr	r1, [pc, #48]	; (8012f14 <Network::Network()+0x4c>)
 8012ee4:	60c2      	str	r2, [r0, #12]
 8012ee6:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 8012eea:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
 8012eee:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
 8012ef2:	6083      	str	r3, [r0, #8]
 8012ef4:	6183      	str	r3, [r0, #24]
 8012ef6:	7703      	strb	r3, [r0, #28]
 8012ef8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8012efc:	f100 02a2 	add.w	r2, r0, #162	; 0xa2
 8012f00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f04:	f802 3b01 	strb.w	r3, [r2], #1
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d1f9      	bne.n	8012f00 <Network::Network()+0x38>
 8012f0c:	4770      	bx	lr
 8012f0e:	bf00      	nop
 8012f10:	2001c724 	andcs	ip, r1, r4, lsr #14
 8012f14:	08019dcf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r8, sl, fp, ip, pc}

08012f18 <Network::Shutdown()>:
 8012f18:	b508      	push	{r3, lr}
 8012f1a:	30b8      	adds	r0, #184	; 0xb8
 8012f1c:	f001 fde6 	bl	8014aec <NetworkDisplay::ShowShutdown()>
 8012f20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012f24:	f7f4 b990 	b.w	8007248 <net_shutdown>

08012f28 <Network::Begin(unsigned short)>:
 8012f28:	4608      	mov	r0, r1
 8012f2a:	f7ff baa1 	b.w	8012470 <udp_bind>

08012f2e <Network::End(unsigned short)>:
 8012f2e:	4608      	mov	r0, r1
 8012f30:	f7ff bab8 	b.w	80124a4 <udp_unbind>

08012f34 <Network::MacAddressCopyTo(unsigned char*)>:
 8012f34:	f100 039c 	add.w	r3, r0, #156	; 0x9c
 8012f38:	3901      	subs	r1, #1
 8012f3a:	30a2      	adds	r0, #162	; 0xa2
 8012f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f40:	4283      	cmp	r3, r0
 8012f42:	f801 2f01 	strb.w	r2, [r1, #1]!
 8012f46:	d1f9      	bne.n	8012f3c <Network::MacAddressCopyTo(unsigned char*)+0x8>
 8012f48:	4770      	bx	lr

08012f4a <Network::JoinGroup(int, unsigned int)>:
 8012f4a:	4610      	mov	r0, r2
 8012f4c:	f001 b8ae 	b.w	80140ac <igmp_join>

08012f50 <Network::LeaveGroup(int, unsigned int)>:
 8012f50:	4610      	mov	r0, r2
 8012f52:	f001 b8d7 	b.w	8014104 <igmp_leave>

08012f56 <Network::SetDefaultIp()>:
 8012f56:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8012f5a:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
 8012f5e:	041b      	lsls	r3, r3, #16
 8012f60:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012f64:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
 8012f68:	3302      	adds	r3, #2
 8012f6a:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8012f6e:	22ff      	movs	r2, #255	; 0xff
 8012f70:	6103      	str	r3, [r0, #16]
 8012f72:	e9c0 3205 	strd	r3, r2, [r0, #20]
 8012f76:	4770      	bx	lr

08012f78 <Network::Init(NetworkParamsStore*)>:
 8012f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f7c:	b08b      	sub	sp, #44	; 0x2c
 8012f7e:	4604      	mov	r4, r0
 8012f80:	a806      	add	r0, sp, #24
 8012f82:	f000 fae9 	bl	8013558 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 8012f86:	a806      	add	r0, sp, #24
 8012f88:	f000 faf6 	bl	8013578 <NetworkParams::Load()>
 8012f8c:	b110      	cbz	r0, 8012f94 <Network::Init(NetworkParamsStore*)+0x1c>
 8012f8e:	a806      	add	r0, sp, #24
 8012f90:	f000 fd5f 	bl	8013a52 <NetworkParams::Dump()>
 8012f94:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 8012f98:	f8df 822c 	ldr.w	r8, [pc, #556]	; 80131c8 <Network::Init(NetworkParamsStore*)+0x250>
 8012f9c:	4628      	mov	r0, r5
 8012f9e:	f104 079c 	add.w	r7, r4, #156	; 0x9c
 8012fa2:	f001 fd85 	bl	8014ab0 <NetworkDisplay::ShowEmacStart()>
 8012fa6:	4638      	mov	r0, r7
 8012fa8:	f003 fd48 	bl	8016a3c <emac_start>
 8012fac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012fb0:	f104 061c 	add.w	r6, r4, #28
 8012fb4:	9307      	str	r3, [sp, #28]
 8012fb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012fba:	9308      	str	r3, [sp, #32]
 8012fbc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8012fc2:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012fc6:	7063      	strb	r3, [r4, #1]
 8012fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8012fcc:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8012fd0:	bf18      	it	ne
 8012fd2:	f8d8 2055 	ldrne.w	r2, [r8, #85]	; 0x55
 8012fd6:	061b      	lsls	r3, r3, #24
 8012fd8:	bf58      	it	pl
 8012fda:	2300      	movpl	r3, #0
 8012fdc:	60a2      	str	r2, [r4, #8]
 8012fde:	bf48      	it	mi
 8012fe0:	f8d8 3059 	ldrmi.w	r3, [r8, #89]	; 0x59
 8012fe4:	60e3      	str	r3, [r4, #12]
 8012fe6:	f898 3015 	ldrb.w	r3, [r8, #21]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	f040 80bc 	bne.w	8013168 <Network::Init(NetworkParamsStore*)+0x1f0>
 8012ff0:	4630      	mov	r0, r6
 8012ff2:	4976      	ldr	r1, [pc, #472]	; (80131cc <Network::Init(NetworkParamsStore*)+0x254>)
 8012ff4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012ff8:	f103 0c01 	add.w	ip, r3, #1
 8012ffc:	2a00      	cmp	r2, #0
 8012ffe:	f040 80af 	bne.w	8013160 <Network::Init(NetworkParamsStore*)+0x1e8>
 8013002:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
 8013006:	18e1      	adds	r1, r4, r3
 8013008:	0910      	lsrs	r0, r2, #4
 801300a:	2a9f      	cmp	r2, #159	; 0x9f
 801300c:	f002 020f 	and.w	r2, r2, #15
 8013010:	bf94      	ite	ls
 8013012:	3030      	addls	r0, #48	; 0x30
 8013014:	3037      	addhi	r0, #55	; 0x37
 8013016:	2a09      	cmp	r2, #9
 8013018:	bf94      	ite	ls
 801301a:	3230      	addls	r2, #48	; 0x30
 801301c:	3237      	addhi	r2, #55	; 0x37
 801301e:	44a4      	add	ip, r4
 8013020:	7708      	strb	r0, [r1, #28]
 8013022:	f88c 201c 	strb.w	r2, [ip, #28]
 8013026:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
 801302a:	f103 0e02 	add.w	lr, r3, #2
 801302e:	0910      	lsrs	r0, r2, #4
 8013030:	2a9f      	cmp	r2, #159	; 0x9f
 8013032:	f002 020f 	and.w	r2, r2, #15
 8013036:	bf94      	ite	ls
 8013038:	3030      	addls	r0, #48	; 0x30
 801303a:	3037      	addhi	r0, #55	; 0x37
 801303c:	f103 0903 	add.w	r9, r3, #3
 8013040:	2a09      	cmp	r2, #9
 8013042:	44a6      	add	lr, r4
 8013044:	f88e 001c 	strb.w	r0, [lr, #28]
 8013048:	bf94      	ite	ls
 801304a:	3230      	addls	r2, #48	; 0x30
 801304c:	3237      	addhi	r2, #55	; 0x37
 801304e:	eb04 0009 	add.w	r0, r4, r9
 8013052:	7702      	strb	r2, [r0, #28]
 8013054:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 8013058:	f103 0c04 	add.w	ip, r3, #4
 801305c:	0910      	lsrs	r0, r2, #4
 801305e:	2a9f      	cmp	r2, #159	; 0x9f
 8013060:	f002 020f 	and.w	r2, r2, #15
 8013064:	bf94      	ite	ls
 8013066:	3030      	addls	r0, #48	; 0x30
 8013068:	3037      	addhi	r0, #55	; 0x37
 801306a:	3305      	adds	r3, #5
 801306c:	2a09      	cmp	r2, #9
 801306e:	4423      	add	r3, r4
 8013070:	44a4      	add	ip, r4
 8013072:	bf94      	ite	ls
 8013074:	3230      	addls	r2, #48	; 0x30
 8013076:	3237      	addhi	r2, #55	; 0x37
 8013078:	f88c 001c 	strb.w	r0, [ip, #28]
 801307c:	771a      	strb	r2, [r3, #28]
 801307e:	2300      	movs	r3, #0
 8013080:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
 8013084:	7863      	ldrb	r3, [r4, #1]
 8013086:	2b00      	cmp	r3, #0
 8013088:	f040 8098 	bne.w	80131bc <Network::Init(NetworkParamsStore*)+0x244>
 801308c:	9b07      	ldr	r3, [sp, #28]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d172      	bne.n	8013178 <Network::Init(NetworkParamsStore*)+0x200>
 8013092:	4620      	mov	r0, r4
 8013094:	f7ff ff5f 	bl	8012f56 <Network::SetDefaultIp()>
 8013098:	6923      	ldr	r3, [r4, #16]
 801309a:	69a2      	ldr	r2, [r4, #24]
 801309c:	9307      	str	r3, [sp, #28]
 801309e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80130a2:	1ce3      	adds	r3, r4, #3
 80130a4:	f104 0901 	add.w	r9, r4, #1
 80130a8:	9302      	str	r3, [sp, #8]
 80130aa:	9300      	str	r3, [sp, #0]
 80130ac:	4632      	mov	r2, r6
 80130ae:	464b      	mov	r3, r9
 80130b0:	4638      	mov	r0, r7
 80130b2:	a907      	add	r1, sp, #28
 80130b4:	f7f4 f878 	bl	80071a8 <net_init>
 80130b8:	78e3      	ldrb	r3, [r4, #3]
 80130ba:	b11b      	cbz	r3, 80130c4 <Network::Init(NetworkParamsStore*)+0x14c>
 80130bc:	2104      	movs	r1, #4
 80130be:	4628      	mov	r0, r5
 80130c0:	f001 fd1a 	bl	8014af8 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80130c4:	f898 3014 	ldrb.w	r3, [r8, #20]
 80130c8:	f898 a05d 	ldrb.w	sl, [r8, #93]	; 0x5d
 80130cc:	9304      	str	r3, [sp, #16]
 80130ce:	233c      	movs	r3, #60	; 0x3c
 80130d0:	fb03 f30a 	mul.w	r3, r3, sl
 80130d4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80131d0 <Network::Init(NetworkParamsStore*)+0x258>
 80130d8:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 80131d4 <Network::Init(NetworkParamsStore*)+0x25c>
 80130dc:	9303      	str	r3, [sp, #12]
 80130de:	78e3      	ldrb	r3, [r4, #3]
 80130e0:	b393      	cbz	r3, 8013148 <Network::Init(NetworkParamsStore*)+0x1d0>
 80130e2:	f1ba 0f00 	cmp.w	sl, #0
 80130e6:	d02f      	beq.n	8013148 <Network::Init(NetworkParamsStore*)+0x1d0>
 80130e8:	9b04      	ldr	r3, [sp, #16]
 80130ea:	b36b      	cbz	r3, 8013148 <Network::Init(NetworkParamsStore*)+0x1d0>
 80130ec:	2104      	movs	r1, #4
 80130ee:	f8d8 0000 	ldr.w	r0, [r8]
 80130f2:	f002 fb81 	bl	80157f8 <LedBlink::SetMode(ledblink::Mode)>
 80130f6:	2103      	movs	r1, #3
 80130f8:	4628      	mov	r0, r5
 80130fa:	f001 fcfd 	bl	8014af8 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80130fe:	2000      	movs	r0, #0
 8013100:	f002 fe40 	bl	8015d84 <time>
 8013104:	9005      	str	r0, [sp, #20]
 8013106:	2000      	movs	r0, #0
 8013108:	f002 fe3c 	bl	8015d84 <time>
 801310c:	9b05      	ldr	r3, [sp, #20]
 801310e:	4932      	ldr	r1, [pc, #200]	; (80131d8 <Network::Init(NetworkParamsStore*)+0x260>)
 8013110:	1ac0      	subs	r0, r0, r3
 8013112:	9b03      	ldr	r3, [sp, #12]
 8013114:	4298      	cmp	r0, r3
 8013116:	db37      	blt.n	8013188 <Network::Init(NetworkParamsStore*)+0x210>
 8013118:	2101      	movs	r1, #1
 801311a:	4628      	mov	r0, r5
 801311c:	f001 fcec 	bl	8014af8 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8013120:	2101      	movs	r1, #1
 8013122:	f8d8 0000 	ldr.w	r0, [r8]
 8013126:	f002 fb67 	bl	80157f8 <LedBlink::SetMode(ledblink::Mode)>
 801312a:	2301      	movs	r3, #1
 801312c:	7063      	strb	r3, [r4, #1]
 801312e:	2300      	movs	r3, #0
 8013130:	70e3      	strb	r3, [r4, #3]
 8013132:	9b02      	ldr	r3, [sp, #8]
 8013134:	4632      	mov	r2, r6
 8013136:	9300      	str	r3, [sp, #0]
 8013138:	4638      	mov	r0, r7
 801313a:	464b      	mov	r3, r9
 801313c:	a907      	add	r1, sp, #28
 801313e:	f7f4 f833 	bl	80071a8 <net_init>
 8013142:	7863      	ldrb	r3, [r4, #1]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d0ca      	beq.n	80130de <Network::Init(NetworkParamsStore*)+0x166>
 8013148:	9b07      	ldr	r3, [sp, #28]
 801314a:	4628      	mov	r0, r5
 801314c:	6123      	str	r3, [r4, #16]
 801314e:	9b08      	ldr	r3, [sp, #32]
 8013150:	61a3      	str	r3, [r4, #24]
 8013152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013154:	6163      	str	r3, [r4, #20]
 8013156:	f001 fcb1 	bl	8014abc <NetworkDisplay::ShowIp()>
 801315a:	b00b      	add	sp, #44	; 0x2c
 801315c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013160:	4663      	mov	r3, ip
 8013162:	f800 2b01 	strb.w	r2, [r0], #1
 8013166:	e745      	b.n	8012ff4 <Network::Init(NetworkParamsStore*)+0x7c>
 8013168:	4630      	mov	r0, r6
 801316a:	491c      	ldr	r1, [pc, #112]	; (80131dc <Network::Init(NetworkParamsStore*)+0x264>)
 801316c:	f7ff fe9c 	bl	8012ea8 <strncpy.constprop.0.isra.0>
 8013170:	2300      	movs	r3, #0
 8013172:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 8013176:	e785      	b.n	8013084 <Network::Init(NetworkParamsStore*)+0x10c>
 8013178:	69a1      	ldr	r1, [r4, #24]
 801317a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801317e:	4053      	eors	r3, r2
 8013180:	420b      	tst	r3, r1
 8013182:	bf18      	it	ne
 8013184:	9209      	strne	r2, [sp, #36]	; 0x24
 8013186:	e78c      	b.n	80130a2 <Network::Init(NetworkParamsStore*)+0x12a>
 8013188:	f8d8 3000 	ldr.w	r3, [r8]
 801318c:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8013190:	f1bc 0f00 	cmp.w	ip, #0
 8013194:	d0b7      	beq.n	8013106 <Network::Init(NetworkParamsStore*)+0x18e>
 8013196:	6808      	ldr	r0, [r1, #0]
 8013198:	695a      	ldr	r2, [r3, #20]
 801319a:	1a80      	subs	r0, r0, r2
 801319c:	4584      	cmp	ip, r0
 801319e:	d8b2      	bhi.n	8013106 <Network::Init(NetworkParamsStore*)+0x18e>
 80131a0:	6808      	ldr	r0, [r1, #0]
 80131a2:	6158      	str	r0, [r3, #20]
 80131a4:	6918      	ldr	r0, [r3, #16]
 80131a6:	2801      	cmp	r0, #1
 80131a8:	f080 0201 	eor.w	r2, r0, #1
 80131ac:	611a      	str	r2, [r3, #16]
 80131ae:	bf16      	itet	ne
 80131b0:	2301      	movne	r3, #1
 80131b2:	f8cb 0014 	streq.w	r0, [fp, #20]
 80131b6:	f8cb 3010 	strne.w	r3, [fp, #16]
 80131ba:	e7a4      	b.n	8013106 <Network::Init(NetworkParamsStore*)+0x18e>
 80131bc:	2101      	movs	r1, #1
 80131be:	4628      	mov	r0, r5
 80131c0:	f001 fc9a 	bl	8014af8 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80131c4:	e76d      	b.n	80130a2 <Network::Init(NetworkParamsStore*)+0x12a>
 80131c6:	bf00      	nop
 80131c8:	2001c728 	andcs	ip, r1, r8, lsr #14
 80131cc:	08019dd4 	stmdaeq	r1, {r2, r4, r6, r7, r8, sl, fp, ip, pc}
 80131d0:	2001ce48 	andcs	ip, r1, r8, asr #28
 80131d4:	40011000 	andmi	r1, r1, r0
 80131d8:	2001ce64 	andcs	ip, r1, r4, ror #28
 80131dc:	2001c73d 	andcs	ip, r1, sp, lsr r7

080131e0 <Network::SetIp(unsigned int)>:
 80131e0:	7843      	ldrb	r3, [r0, #1]
 80131e2:	b570      	push	{r4, r5, r6, lr}
 80131e4:	4604      	mov	r4, r0
 80131e6:	460d      	mov	r5, r1
 80131e8:	2600      	movs	r6, #0
 80131ea:	b113      	cbz	r3, 80131f2 <Network::SetIp(unsigned int)+0x12>
 80131ec:	7046      	strb	r6, [r0, #1]
 80131ee:	f7fe fedd 	bl	8011fac <net_dhcp_release>
 80131f2:	70e6      	strb	r6, [r4, #3]
 80131f4:	b975      	cbnz	r5, 8013214 <Network::SetIp(unsigned int)+0x34>
 80131f6:	4620      	mov	r0, r4
 80131f8:	f7ff fead 	bl	8012f56 <Network::SetDefaultIp()>
 80131fc:	6920      	ldr	r0, [r4, #16]
 80131fe:	f7fe fe91 	bl	8011f24 <net_set_ip>
 8013202:	34b8      	adds	r4, #184	; 0xb8
 8013204:	4620      	mov	r0, r4
 8013206:	f001 fc59 	bl	8014abc <NetworkDisplay::ShowIp()>
 801320a:	4620      	mov	r0, r4
 801320c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013210:	f001 bc5a 	b.w	8014ac8 <NetworkDisplay::ShowNetMask()>
 8013214:	4628      	mov	r0, r5
 8013216:	f7fe fe85 	bl	8011f24 <net_set_ip>
 801321a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 801321e:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013222:	2800      	cmp	r0, #0
 8013224:	d0ed      	beq.n	8013202 <Network::SetIp(unsigned int)+0x22>
 8013226:	6803      	ldr	r3, [r0, #0]
 8013228:	4629      	mov	r1, r5
 801322a:	689b      	ldr	r3, [r3, #8]
 801322c:	4798      	blx	r3
 801322e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8013232:	2100      	movs	r1, #0
 8013234:	6803      	ldr	r3, [r0, #0]
 8013236:	699b      	ldr	r3, [r3, #24]
 8013238:	4798      	blx	r3
 801323a:	e7e2      	b.n	8013202 <Network::SetIp(unsigned int)+0x22>

0801323c <Network::SetNetmask(unsigned int)>:
 801323c:	6982      	ldr	r2, [r0, #24]
 801323e:	b510      	push	{r4, lr}
 8013240:	428a      	cmp	r2, r1
 8013242:	4604      	mov	r4, r0
 8013244:	d00f      	beq.n	8013266 <Network::SetNetmask(unsigned int)+0x2a>
 8013246:	6181      	str	r1, [r0, #24]
 8013248:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 801324c:	b110      	cbz	r0, 8013254 <Network::SetNetmask(unsigned int)+0x18>
 801324e:	6803      	ldr	r3, [r0, #0]
 8013250:	68db      	ldr	r3, [r3, #12]
 8013252:	4798      	blx	r3
 8013254:	34b8      	adds	r4, #184	; 0xb8
 8013256:	4620      	mov	r0, r4
 8013258:	f001 fc30 	bl	8014abc <NetworkDisplay::ShowIp()>
 801325c:	4620      	mov	r0, r4
 801325e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013262:	f001 bc31 	b.w	8014ac8 <NetworkDisplay::ShowNetMask()>
 8013266:	bd10      	pop	{r4, pc}

08013268 <Network::SetGatewayIp(unsigned int)>:
 8013268:	b538      	push	{r3, r4, r5, lr}
 801326a:	6943      	ldr	r3, [r0, #20]
 801326c:	4604      	mov	r4, r0
 801326e:	428b      	cmp	r3, r1
 8013270:	460d      	mov	r5, r1
 8013272:	d00f      	beq.n	8013294 <Network::SetGatewayIp(unsigned int)+0x2c>
 8013274:	4608      	mov	r0, r1
 8013276:	f7fe fe65 	bl	8011f44 <net_set_gw>
 801327a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 801327e:	b118      	cbz	r0, 8013288 <Network::SetGatewayIp(unsigned int)+0x20>
 8013280:	6803      	ldr	r3, [r0, #0]
 8013282:	4629      	mov	r1, r5
 8013284:	691b      	ldr	r3, [r3, #16]
 8013286:	4798      	blx	r3
 8013288:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 801328c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013290:	f001 bc20 	b.w	8014ad4 <NetworkDisplay::ShowGatewayIp()>
 8013294:	bd38      	pop	{r3, r4, r5, pc}

08013296 <Network::SetHostName(char const*)>:
 8013296:	b570      	push	{r4, r5, r6, lr}
 8013298:	4604      	mov	r4, r0
 801329a:	f100 051c 	add.w	r5, r0, #28
 801329e:	4628      	mov	r0, r5
 80132a0:	f7ff fe02 	bl	8012ea8 <strncpy.constprop.0.isra.0>
 80132a4:	2300      	movs	r3, #0
 80132a6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80132aa:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 80132ae:	b158      	cbz	r0, 80132c8 <Network::SetHostName(char const*)+0x32>
 80132b0:	6803      	ldr	r3, [r0, #0]
 80132b2:	695e      	ldr	r6, [r3, #20]
 80132b4:	462b      	mov	r3, r5
 80132b6:	461a      	mov	r2, r3
 80132b8:	7811      	ldrb	r1, [r2, #0]
 80132ba:	3301      	adds	r3, #1
 80132bc:	2900      	cmp	r1, #0
 80132be:	d1fa      	bne.n	80132b6 <Network::SetHostName(char const*)+0x20>
 80132c0:	1b52      	subs	r2, r2, r5
 80132c2:	4629      	mov	r1, r5
 80132c4:	b292      	uxth	r2, r2
 80132c6:	47b0      	blx	r6
 80132c8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 80132cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132d0:	f001 bc06 	b.w	8014ae0 <NetworkDisplay::ShowHostName()>

080132d4 <Network::SetZeroconf()>:
 80132d4:	b530      	push	{r4, r5, lr}
 80132d6:	b085      	sub	sp, #20
 80132d8:	4604      	mov	r4, r0
 80132da:	a801      	add	r0, sp, #4
 80132dc:	f7fe fe70 	bl	8011fc0 <net_set_zeroconf>
 80132e0:	70e0      	strb	r0, [r4, #3]
 80132e2:	b170      	cbz	r0, 8013302 <Network::SetZeroconf()+0x2e>
 80132e4:	9b01      	ldr	r3, [sp, #4]
 80132e6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80132ea:	6123      	str	r3, [r4, #16]
 80132ec:	9b02      	ldr	r3, [sp, #8]
 80132ee:	61a3      	str	r3, [r4, #24]
 80132f0:	9b03      	ldr	r3, [sp, #12]
 80132f2:	6163      	str	r3, [r4, #20]
 80132f4:	2300      	movs	r3, #0
 80132f6:	7063      	strb	r3, [r4, #1]
 80132f8:	b118      	cbz	r0, 8013302 <Network::SetZeroconf()+0x2e>
 80132fa:	6803      	ldr	r3, [r0, #0]
 80132fc:	2101      	movs	r1, #1
 80132fe:	699b      	ldr	r3, [r3, #24]
 8013300:	4798      	blx	r3
 8013302:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 8013306:	4628      	mov	r0, r5
 8013308:	f001 fbd8 	bl	8014abc <NetworkDisplay::ShowIp()>
 801330c:	4628      	mov	r0, r5
 801330e:	f001 fbdb 	bl	8014ac8 <NetworkDisplay::ShowNetMask()>
 8013312:	78e0      	ldrb	r0, [r4, #3]
 8013314:	b005      	add	sp, #20
 8013316:	bd30      	pop	{r4, r5, pc}

08013318 <Network::EnableDhcp()>:
 8013318:	b5f0      	push	{r4, r5, r6, r7, lr}
 801331a:	4e23      	ldr	r6, [pc, #140]	; (80133a8 <Network::EnableDhcp()+0x90>)
 801331c:	4604      	mov	r4, r0
 801331e:	6833      	ldr	r3, [r6, #0]
 8013320:	b085      	sub	sp, #20
 8013322:	791f      	ldrb	r7, [r3, #4]
 8013324:	b137      	cbz	r7, 8013334 <Network::EnableDhcp()+0x1c>
 8013326:	2200      	movs	r2, #0
 8013328:	2104      	movs	r1, #4
 801332a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801332e:	711a      	strb	r2, [r3, #4]
 8013330:	f002 ff18 	bl	8016164 <fwdgt_config>
 8013334:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 8013338:	2101      	movs	r1, #1
 801333a:	4628      	mov	r0, r5
 801333c:	f001 fbdc 	bl	8014af8 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8013340:	1ce2      	adds	r2, r4, #3
 8013342:	f104 011c 	add.w	r1, r4, #28
 8013346:	a801      	add	r0, sp, #4
 8013348:	f7fe fe04 	bl	8011f54 <net_set_dhcp>
 801334c:	78e3      	ldrb	r3, [r4, #3]
 801334e:	7060      	strb	r0, [r4, #1]
 8013350:	b343      	cbz	r3, 80133a4 <Network::EnableDhcp()+0x8c>
 8013352:	2104      	movs	r1, #4
 8013354:	4628      	mov	r0, r5
 8013356:	f001 fbcf 	bl	8014af8 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 801335a:	b16f      	cbz	r7, 8013378 <Network::EnableDhcp()+0x60>
 801335c:	2102      	movs	r1, #2
 801335e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013362:	6836      	ldr	r6, [r6, #0]
 8013364:	f002 fefe 	bl	8016164 <fwdgt_config>
 8013368:	2801      	cmp	r0, #1
 801336a:	bf0c      	ite	eq
 801336c:	2301      	moveq	r3, #1
 801336e:	2300      	movne	r3, #0
 8013370:	7133      	strb	r3, [r6, #4]
 8013372:	d101      	bne.n	8013378 <Network::EnableDhcp()+0x60>
 8013374:	f002 fee6 	bl	8016144 <fwdgt_enable>
 8013378:	9b01      	ldr	r3, [sp, #4]
 801337a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 801337e:	6123      	str	r3, [r4, #16]
 8013380:	9b02      	ldr	r3, [sp, #8]
 8013382:	61a3      	str	r3, [r4, #24]
 8013384:	9b03      	ldr	r3, [sp, #12]
 8013386:	6163      	str	r3, [r4, #20]
 8013388:	b118      	cbz	r0, 8013392 <Network::EnableDhcp()+0x7a>
 801338a:	6803      	ldr	r3, [r0, #0]
 801338c:	7861      	ldrb	r1, [r4, #1]
 801338e:	699b      	ldr	r3, [r3, #24]
 8013390:	4798      	blx	r3
 8013392:	4628      	mov	r0, r5
 8013394:	f001 fb92 	bl	8014abc <NetworkDisplay::ShowIp()>
 8013398:	4628      	mov	r0, r5
 801339a:	f001 fb95 	bl	8014ac8 <NetworkDisplay::ShowNetMask()>
 801339e:	7860      	ldrb	r0, [r4, #1]
 80133a0:	b005      	add	sp, #20
 80133a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133a4:	2102      	movs	r1, #2
 80133a6:	e7d5      	b.n	8013354 <Network::EnableDhcp()+0x3c>
 80133a8:	2001ce4c 	andcs	ip, r1, ip, asr #28

080133ac <Network::SetQueuedStaticIp(unsigned int, unsigned int)>:
 80133ac:	b109      	cbz	r1, 80133b2 <Network::SetQueuedStaticIp(unsigned int, unsigned int)+0x6>
 80133ae:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
 80133b2:	b10a      	cbz	r2, 80133b8 <Network::SetQueuedStaticIp(unsigned int, unsigned int)+0xc>
 80133b4:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
 80133b8:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 80133bc:	f043 0303 	orr.w	r3, r3, #3
 80133c0:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
 80133c4:	4770      	bx	lr

080133c6 <Network::ApplyQueuedConfig()>:
 80133c6:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 80133ca:	b510      	push	{r4, lr}
 80133cc:	4604      	mov	r4, r0
 80133ce:	b3c3      	cbz	r3, 8013442 <Network::ApplyQueuedConfig()+0x7c>
 80133d0:	079a      	lsls	r2, r3, #30
 80133d2:	d01a      	beq.n	801340a <Network::ApplyQueuedConfig()+0x44>
 80133d4:	079b      	lsls	r3, r3, #30
 80133d6:	d509      	bpl.n	80133ec <Network::ApplyQueuedConfig()+0x26>
 80133d8:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
 80133dc:	f7ff ff2e 	bl	801323c <Network::SetNetmask(unsigned int)>
 80133e0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80133e4:	f023 0302 	bic.w	r3, r3, #2
 80133e8:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 80133ec:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80133f0:	07d9      	lsls	r1, r3, #31
 80133f2:	d50a      	bpl.n	801340a <Network::ApplyQueuedConfig()+0x44>
 80133f4:	4620      	mov	r0, r4
 80133f6:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 80133fa:	f7ff fef1 	bl	80131e0 <Network::SetIp(unsigned int)>
 80133fe:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8013402:	f023 0301 	bic.w	r3, r3, #1
 8013406:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 801340a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801340e:	075a      	lsls	r2, r3, #29
 8013410:	d508      	bpl.n	8013424 <Network::ApplyQueuedConfig()+0x5e>
 8013412:	4620      	mov	r0, r4
 8013414:	f7ff ff80 	bl	8013318 <Network::EnableDhcp()>
 8013418:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801341c:	f023 0304 	bic.w	r3, r3, #4
 8013420:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 8013424:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8013428:	071b      	lsls	r3, r3, #28
 801342a:	d508      	bpl.n	801343e <Network::ApplyQueuedConfig()+0x78>
 801342c:	4620      	mov	r0, r4
 801342e:	f7ff ff51 	bl	80132d4 <Network::SetZeroconf()>
 8013432:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8013436:	f023 0308 	bic.w	r3, r3, #8
 801343a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 801343e:	2001      	movs	r0, #1
 8013440:	e000      	b.n	8013444 <Network::ApplyQueuedConfig()+0x7e>
 8013442:	4618      	mov	r0, r3
 8013444:	bd10      	pop	{r4, pc}
	...

08013448 <Network::Print()>:
 8013448:	b530      	push	{r4, r5, lr}
 801344a:	4604      	mov	r4, r0
 801344c:	b085      	sub	sp, #20
 801344e:	4832      	ldr	r0, [pc, #200]	; (8013518 <Network::Print()+0xd0>)
 8013450:	f7f6 f984 	bl	800975c <printf>
 8013454:	f104 011c 	add.w	r1, r4, #28
 8013458:	4830      	ldr	r0, [pc, #192]	; (801351c <Network::Print()+0xd4>)
 801345a:	f7f6 f97f 	bl	800975c <printf>
 801345e:	6861      	ldr	r1, [r4, #4]
 8013460:	f104 02a2 	add.w	r2, r4, #162	; 0xa2
 8013464:	482e      	ldr	r0, [pc, #184]	; (8013520 <Network::Print()+0xd8>)
 8013466:	f7f6 f979 	bl	800975c <printf>
 801346a:	69a0      	ldr	r0, [r4, #24]
 801346c:	f004 fc48 	bl	8017d00 <__popcountsi2>
 8013470:	6925      	ldr	r5, [r4, #16]
 8013472:	9001      	str	r0, [sp, #4]
 8013474:	0e2b      	lsrs	r3, r5, #24
 8013476:	9300      	str	r3, [sp, #0]
 8013478:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801347c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8013480:	b2e9      	uxtb	r1, r5
 8013482:	4828      	ldr	r0, [pc, #160]	; (8013524 <Network::Print()+0xdc>)
 8013484:	f7f6 f96a 	bl	800975c <printf>
 8013488:	69a1      	ldr	r1, [r4, #24]
 801348a:	4827      	ldr	r0, [pc, #156]	; (8013528 <Network::Print()+0xe0>)
 801348c:	0e0b      	lsrs	r3, r1, #24
 801348e:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8013492:	9300      	str	r3, [sp, #0]
 8013494:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8013498:	b2c9      	uxtb	r1, r1
 801349a:	f7f6 f95f 	bl	800975c <printf>
 801349e:	6961      	ldr	r1, [r4, #20]
 80134a0:	4822      	ldr	r0, [pc, #136]	; (801352c <Network::Print()+0xe4>)
 80134a2:	0e0b      	lsrs	r3, r1, #24
 80134a4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80134a8:	9300      	str	r3, [sp, #0]
 80134aa:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80134ae:	b2c9      	uxtb	r1, r1
 80134b0:	f7f6 f954 	bl	800975c <printf>
 80134b4:	69a3      	ldr	r3, [r4, #24]
 80134b6:	6921      	ldr	r1, [r4, #16]
 80134b8:	481d      	ldr	r0, [pc, #116]	; (8013530 <Network::Print()+0xe8>)
 80134ba:	ea61 0103 	orn	r1, r1, r3
 80134be:	0e0b      	lsrs	r3, r1, #24
 80134c0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80134c4:	9300      	str	r3, [sp, #0]
 80134c6:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80134ca:	b2c9      	uxtb	r1, r1
 80134cc:	f7f6 f946 	bl	800975c <printf>
 80134d0:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 80134d4:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
 80134d8:	9302      	str	r3, [sp, #8]
 80134da:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 80134de:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
 80134e2:	9301      	str	r3, [sp, #4]
 80134e4:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 80134e8:	4812      	ldr	r0, [pc, #72]	; (8013534 <Network::Print()+0xec>)
 80134ea:	9300      	str	r3, [sp, #0]
 80134ec:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 80134f0:	f7f6 f934 	bl	800975c <printf>
 80134f4:	4b10      	ldr	r3, [pc, #64]	; (8013538 <Network::Print()+0xf0>)
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	78da      	ldrb	r2, [r3, #3]
 80134fa:	b952      	cbnz	r2, 8013512 <Network::Print()+0xca>
 80134fc:	785b      	ldrb	r3, [r3, #1]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	bf14      	ite	ne
 8013502:	2144      	movne	r1, #68	; 0x44
 8013504:	2153      	moveq	r1, #83	; 0x53
 8013506:	480d      	ldr	r0, [pc, #52]	; (801353c <Network::Print()+0xf4>)
 8013508:	b005      	add	sp, #20
 801350a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801350e:	f7f6 b925 	b.w	800975c <printf>
 8013512:	215a      	movs	r1, #90	; 0x5a
 8013514:	e7f7      	b.n	8013506 <Network::Print()+0xbe>
 8013516:	bf00      	nop
 8013518:	08019de0 	stmdaeq	r1, {r5, r6, r7, r8, sl, fp, ip, pc}
 801351c:	08019de9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, sl, fp, ip, pc}
 8013520:	08019dfa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, sl, fp, ip, pc}
 8013524:	08019e0f 	stmdaeq	r1, {r0, r1, r2, r3, r9, sl, fp, ip, pc}
 8013528:	08019e2c 	stmdaeq	r1, {r2, r3, r5, r9, sl, fp, ip, pc}
 801352c:	08019e46 	stmdaeq	r1, {r1, r2, r6, r9, sl, fp, ip, pc}
 8013530:	08019e60 	stmdaeq	r1, {r5, r6, r9, sl, fp, ip, pc}
 8013534:	08019e7a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r9, sl, fp, ip, pc}
 8013538:	2001c724 	andcs	ip, r1, r4, lsr #14
 801353c:	08019ea6 	stmdaeq	r1, {r1, r2, r5, r7, r9, sl, fp, ip, pc}

08013540 <Network::TcpBegin(unsigned short)>:
 8013540:	4608      	mov	r0, r1
 8013542:	f7fe becf 	b.w	80122e4 <tcp_begin>

08013546 <Network::TcpRead(int, unsigned char const**)>:
 8013546:	4608      	mov	r0, r1
 8013548:	4611      	mov	r1, r2
 801354a:	f7fe bf09 	b.w	8012360 <tcp_read>

0801354e <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 801354e:	4608      	mov	r0, r1
 8013550:	4611      	mov	r1, r2
 8013552:	461a      	mov	r2, r3
 8013554:	f7fe bee0 	b.w	8012318 <tcp_write>

08013558 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 8013558:	4b06      	ldr	r3, [pc, #24]	; (8013574 <NetworkParams::NetworkParams(NetworkParamsStore*)+0x1c>)
 801355a:	b510      	push	{r4, lr}
 801355c:	225e      	movs	r2, #94	; 0x5e
 801355e:	4604      	mov	r4, r0
 8013560:	6001      	str	r1, [r0, #0]
 8013562:	2100      	movs	r1, #0
 8013564:	4618      	mov	r0, r3
 8013566:	f002 fb05 	bl	8015b74 <memset>
 801356a:	2201      	movs	r2, #1
 801356c:	7502      	strb	r2, [r0, #20]
 801356e:	4620      	mov	r0, r4
 8013570:	bd10      	pop	{r4, pc}
 8013572:	bf00      	nop
 8013574:	2001c728 	andcs	ip, r1, r8, lsr #14

08013578 <NetworkParams::Load()>:
 8013578:	b508      	push	{r3, lr}
 801357a:	2300      	movs	r3, #0
 801357c:	4905      	ldr	r1, [pc, #20]	; (8013594 <NetworkParams::Load()+0x1c>)
 801357e:	6800      	ldr	r0, [r0, #0]
 8013580:	700b      	strb	r3, [r1, #0]
 8013582:	704b      	strb	r3, [r1, #1]
 8013584:	708b      	strb	r3, [r1, #2]
 8013586:	70cb      	strb	r3, [r1, #3]
 8013588:	b118      	cbz	r0, 8013592 <NetworkParams::Load()+0x1a>
 801358a:	6803      	ldr	r3, [r0, #0]
 801358c:	68db      	ldr	r3, [r3, #12]
 801358e:	4798      	blx	r3
 8013590:	2001      	movs	r0, #1
 8013592:	bd08      	pop	{r3, pc}
 8013594:	2001c728 	andcs	ip, r1, r8, lsr #14

08013598 <NetworkParams::Load(char const*, unsigned int)>:
 8013598:	6803      	ldr	r3, [r0, #0]
 801359a:	b1eb      	cbz	r3, 80135d8 <NetworkParams::Load(char const*, unsigned int)+0x40>
 801359c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801359e:	2300      	movs	r3, #0
 80135a0:	460e      	mov	r6, r1
 80135a2:	4617      	mov	r7, r2
 80135a4:	4605      	mov	r5, r0
 80135a6:	4c0d      	ldr	r4, [pc, #52]	; (80135dc <NetworkParams::Load(char const*, unsigned int)+0x44>)
 80135a8:	4602      	mov	r2, r0
 80135aa:	490d      	ldr	r1, [pc, #52]	; (80135e0 <NetworkParams::Load(char const*, unsigned int)+0x48>)
 80135ac:	4668      	mov	r0, sp
 80135ae:	7023      	strb	r3, [r4, #0]
 80135b0:	7063      	strb	r3, [r4, #1]
 80135b2:	70a3      	strb	r3, [r4, #2]
 80135b4:	70e3      	strb	r3, [r4, #3]
 80135b6:	f001 fc27 	bl	8014e08 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 80135ba:	463a      	mov	r2, r7
 80135bc:	4631      	mov	r1, r6
 80135be:	4668      	mov	r0, sp
 80135c0:	f001 fc26 	bl	8014e10 <ReadConfigFile::Read(char const*, unsigned int)>
 80135c4:	6828      	ldr	r0, [r5, #0]
 80135c6:	4621      	mov	r1, r4
 80135c8:	6803      	ldr	r3, [r0, #0]
 80135ca:	689b      	ldr	r3, [r3, #8]
 80135cc:	4798      	blx	r3
 80135ce:	4668      	mov	r0, sp
 80135d0:	f001 fc1d 	bl	8014e0e <ReadConfigFile::~ReadConfigFile()>
 80135d4:	b003      	add	sp, #12
 80135d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135d8:	4770      	bx	lr
 80135da:	bf00      	nop
 80135dc:	2001c728 	andcs	ip, r1, r8, lsr #14
 80135e0:	08013781 	stmdaeq	r1, {r0, r7, r8, r9, sl, ip, sp}

080135e4 <NetworkParams::callbackFunction(char const*)>:
 80135e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80135e6:	460d      	mov	r5, r1
 80135e8:	f10d 0203 	add.w	r2, sp, #3
 80135ec:	4628      	mov	r0, r5
 80135ee:	495b      	ldr	r1, [pc, #364]	; (801375c <NetworkParams::callbackFunction(char const*)+0x178>)
 80135f0:	f001 fd70 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80135f4:	b980      	cbnz	r0, 8013618 <NetworkParams::callbackFunction(char const*)+0x34>
 80135f6:	495a      	ldr	r1, [pc, #360]	; (8013760 <NetworkParams::callbackFunction(char const*)+0x17c>)
 80135f8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80135fc:	680b      	ldr	r3, [r1, #0]
 80135fe:	b142      	cbz	r2, 8013612 <NetworkParams::callbackFunction(char const*)+0x2e>
 8013600:	f023 0301 	bic.w	r3, r3, #1
 8013604:	3a00      	subs	r2, #0
 8013606:	bf18      	it	ne
 8013608:	2201      	movne	r2, #1
 801360a:	600b      	str	r3, [r1, #0]
 801360c:	750a      	strb	r2, [r1, #20]
 801360e:	b004      	add	sp, #16
 8013610:	bd70      	pop	{r4, r5, r6, pc}
 8013612:	f043 0301 	orr.w	r3, r3, #1
 8013616:	e7f5      	b.n	8013604 <NetworkParams::callbackFunction(char const*)+0x20>
 8013618:	4628      	mov	r0, r5
 801361a:	4952      	ldr	r1, [pc, #328]	; (8013764 <NetworkParams::callbackFunction(char const*)+0x180>)
 801361c:	f10d 0203 	add.w	r2, sp, #3
 8013620:	f001 fd58 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8013624:	b988      	cbnz	r0, 801364a <NetworkParams::callbackFunction(char const*)+0x66>
 8013626:	4a4e      	ldr	r2, [pc, #312]	; (8013760 <NetworkParams::callbackFunction(char const*)+0x17c>)
 8013628:	f89d 1003 	ldrb.w	r1, [sp, #3]
 801362c:	6813      	ldr	r3, [r2, #0]
 801362e:	1e4c      	subs	r4, r1, #1
 8013630:	2c04      	cmp	r4, #4
 8013632:	bf97      	itett	ls
 8013634:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 8013638:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 801363c:	6013      	strls	r3, [r2, #0]
 801363e:	f882 105d 	strbls.w	r1, [r2, #93]	; 0x5d
 8013642:	bf84      	itt	hi
 8013644:	6013      	strhi	r3, [r2, #0]
 8013646:	f882 005d 	strbhi.w	r0, [r2, #93]	; 0x5d
 801364a:	4628      	mov	r0, r5
 801364c:	4946      	ldr	r1, [pc, #280]	; (8013768 <NetworkParams::callbackFunction(char const*)+0x184>)
 801364e:	aa01      	add	r2, sp, #4
 8013650:	f001 fcb8 	bl	8014fc4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8013654:	b9d0      	cbnz	r0, 801368c <NetworkParams::callbackFunction(char const*)+0xa8>
 8013656:	9b01      	ldr	r3, [sp, #4]
 8013658:	b2d9      	uxtb	r1, r3
 801365a:	29ac      	cmp	r1, #172	; 0xac
 801365c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013660:	d00a      	beq.n	8013678 <NetworkParams::callbackFunction(char const*)+0x94>
 8013662:	29c0      	cmp	r1, #192	; 0xc0
 8013664:	d00c      	beq.n	8013680 <NetworkParams::callbackFunction(char const*)+0x9c>
 8013666:	290a      	cmp	r1, #10
 8013668:	d10d      	bne.n	8013686 <NetworkParams::callbackFunction(char const*)+0xa2>
 801366a:	4a3d      	ldr	r2, [pc, #244]	; (8013760 <NetworkParams::callbackFunction(char const*)+0x17c>)
 801366c:	6053      	str	r3, [r2, #4]
 801366e:	6813      	ldr	r3, [r2, #0]
 8013670:	f043 0302 	orr.w	r3, r3, #2
 8013674:	6013      	str	r3, [r2, #0]
 8013676:	e7ca      	b.n	801360e <NetworkParams::callbackFunction(char const*)+0x2a>
 8013678:	3a10      	subs	r2, #16
 801367a:	2a0f      	cmp	r2, #15
 801367c:	d8c7      	bhi.n	801360e <NetworkParams::callbackFunction(char const*)+0x2a>
 801367e:	e7f4      	b.n	801366a <NetworkParams::callbackFunction(char const*)+0x86>
 8013680:	2aa8      	cmp	r2, #168	; 0xa8
 8013682:	d1c4      	bne.n	801360e <NetworkParams::callbackFunction(char const*)+0x2a>
 8013684:	e7f1      	b.n	801366a <NetworkParams::callbackFunction(char const*)+0x86>
 8013686:	2b00      	cmp	r3, #0
 8013688:	d0ef      	beq.n	801366a <NetworkParams::callbackFunction(char const*)+0x86>
 801368a:	e7c0      	b.n	801360e <NetworkParams::callbackFunction(char const*)+0x2a>
 801368c:	4628      	mov	r0, r5
 801368e:	4937      	ldr	r1, [pc, #220]	; (801376c <NetworkParams::callbackFunction(char const*)+0x188>)
 8013690:	aa01      	add	r2, sp, #4
 8013692:	f001 fc97 	bl	8014fc4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8013696:	b970      	cbnz	r0, 80136b6 <NetworkParams::callbackFunction(char const*)+0xd2>
 8013698:	9a01      	ldr	r2, [sp, #4]
 801369a:	2a00      	cmp	r2, #0
 801369c:	d0b7      	beq.n	801360e <NetworkParams::callbackFunction(char const*)+0x2a>
 801369e:	ba13      	rev	r3, r2
 80136a0:	43d9      	mvns	r1, r3
 80136a2:	ea13 0351 	ands.w	r3, r3, r1, lsr #1
 80136a6:	d1b2      	bne.n	801360e <NetworkParams::callbackFunction(char const*)+0x2a>
 80136a8:	4b2d      	ldr	r3, [pc, #180]	; (8013760 <NetworkParams::callbackFunction(char const*)+0x17c>)
 80136aa:	609a      	str	r2, [r3, #8]
 80136ac:	681a      	ldr	r2, [r3, #0]
 80136ae:	f042 0204 	orr.w	r2, r2, #4
 80136b2:	601a      	str	r2, [r3, #0]
 80136b4:	e7ab      	b.n	801360e <NetworkParams::callbackFunction(char const*)+0x2a>
 80136b6:	4628      	mov	r0, r5
 80136b8:	492d      	ldr	r1, [pc, #180]	; (8013770 <NetworkParams::callbackFunction(char const*)+0x18c>)
 80136ba:	aa01      	add	r2, sp, #4
 80136bc:	f001 fc82 	bl	8014fc4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 80136c0:	4c27      	ldr	r4, [pc, #156]	; (8013760 <NetworkParams::callbackFunction(char const*)+0x17c>)
 80136c2:	b930      	cbnz	r0, 80136d2 <NetworkParams::callbackFunction(char const*)+0xee>
 80136c4:	9b01      	ldr	r3, [sp, #4]
 80136c6:	60e3      	str	r3, [r4, #12]
 80136c8:	6823      	ldr	r3, [r4, #0]
 80136ca:	f043 0308 	orr.w	r3, r3, #8
 80136ce:	6023      	str	r3, [r4, #0]
 80136d0:	e79d      	b.n	801360e <NetworkParams::callbackFunction(char const*)+0x2a>
 80136d2:	233f      	movs	r3, #63	; 0x3f
 80136d4:	4628      	mov	r0, r5
 80136d6:	9302      	str	r3, [sp, #8]
 80136d8:	4926      	ldr	r1, [pc, #152]	; (8013774 <NetworkParams::callbackFunction(char const*)+0x190>)
 80136da:	ab02      	add	r3, sp, #8
 80136dc:	f104 0215 	add.w	r2, r4, #21
 80136e0:	f001 fbca 	bl	8014e78 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 80136e4:	b930      	cbnz	r0, 80136f4 <NetworkParams::callbackFunction(char const*)+0x110>
 80136e6:	9b02      	ldr	r3, [sp, #8]
 80136e8:	4423      	add	r3, r4
 80136ea:	7558      	strb	r0, [r3, #21]
 80136ec:	6823      	ldr	r3, [r4, #0]
 80136ee:	f043 0320 	orr.w	r3, r3, #32
 80136f2:	e7ec      	b.n	80136ce <NetworkParams::callbackFunction(char const*)+0xea>
 80136f4:	4628      	mov	r0, r5
 80136f6:	4920      	ldr	r1, [pc, #128]	; (8013778 <NetworkParams::callbackFunction(char const*)+0x194>)
 80136f8:	aa01      	add	r2, sp, #4
 80136fa:	f001 fc63 	bl	8014fc4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 80136fe:	b958      	cbnz	r0, 8013718 <NetworkParams::callbackFunction(char const*)+0x134>
 8013700:	9a01      	ldr	r2, [sp, #4]
 8013702:	6823      	ldr	r3, [r4, #0]
 8013704:	b12a      	cbz	r2, 8013712 <NetworkParams::callbackFunction(char const*)+0x12e>
 8013706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801370a:	6023      	str	r3, [r4, #0]
 801370c:	f8c4 2055 	str.w	r2, [r4, #85]	; 0x55
 8013710:	e77d      	b.n	801360e <NetworkParams::callbackFunction(char const*)+0x2a>
 8013712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013716:	e7f8      	b.n	801370a <NetworkParams::callbackFunction(char const*)+0x126>
 8013718:	4628      	mov	r0, r5
 801371a:	4918      	ldr	r1, [pc, #96]	; (801377c <NetworkParams::callbackFunction(char const*)+0x198>)
 801371c:	aa03      	add	r2, sp, #12
 801371e:	f001 fbc4 	bl	8014eaa <Sscan::Float(char const*, char const*, float&)>
 8013722:	2800      	cmp	r0, #0
 8013724:	f47f af73 	bne.w	801360e <NetworkParams::callbackFunction(char const*)+0x2a>
 8013728:	9e03      	ldr	r6, [sp, #12]
 801372a:	6825      	ldr	r5, [r4, #0]
 801372c:	4630      	mov	r0, r6
 801372e:	f7f4 fbd9 	bl	8007ee4 <__aeabi_f2iz>
 8013732:	300c      	adds	r0, #12
 8013734:	281a      	cmp	r0, #26
 8013736:	d80a      	bhi.n	801374e <NetworkParams::callbackFunction(char const*)+0x16a>
 8013738:	2100      	movs	r1, #0
 801373a:	4630      	mov	r0, r6
 801373c:	f7f4 fba0 	bl	8007e80 <__aeabi_fcmpeq>
 8013740:	b928      	cbnz	r0, 801374e <NetworkParams::callbackFunction(char const*)+0x16a>
 8013742:	f8c4 6059 	str.w	r6, [r4, #89]	; 0x59
 8013746:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 801374a:	6025      	str	r5, [r4, #0]
 801374c:	e75f      	b.n	801360e <NetworkParams::callbackFunction(char const*)+0x2a>
 801374e:	2300      	movs	r3, #0
 8013750:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8013754:	f8c4 3059 	str.w	r3, [r4, #89]	; 0x59
 8013758:	e7f7      	b.n	801374a <NetworkParams::callbackFunction(char const*)+0x166>
 801375a:	bf00      	nop
 801375c:	08019f23 	stmdaeq	r1, {r0, r1, r5, r8, r9, sl, fp, ip, pc}
 8013760:	2001c728 	andcs	ip, r1, r8, lsr #14
 8013764:	08019f01 	stmdaeq	r1, {r0, r8, r9, sl, fp, ip, pc}
 8013768:	08019ecc 	stmdaeq	r1, {r2, r3, r6, r7, r9, sl, fp, ip, pc}
 801376c:	08019f1a 	stmdaeq	r1, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
 8013770:	08019ef1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, sl, fp, ip, pc}
 8013774:	08019f11 	stmdaeq	r1, {r0, r4, r8, r9, sl, fp, ip, pc}
 8013778:	08019ed7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, sl, fp, ip, pc}
 801377c:	08019ee2 	stmdaeq	r1, {r1, r5, r6, r7, r9, sl, fp, ip, pc}

08013780 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 8013780:	f7ff bf30 	b.w	80135e4 <NetworkParams::callbackFunction(char const*)>

08013784 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>:
 8013784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013786:	4614      	mov	r4, r2
 8013788:	461d      	mov	r5, r3
 801378a:	b089      	sub	sp, #36	; 0x24
 801378c:	2900      	cmp	r1, #0
 801378e:	d02a      	beq.n	80137e6 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x62>
 8013790:	225e      	movs	r2, #94	; 0x5e
 8013792:	4892      	ldr	r0, [pc, #584]	; (80139dc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x258>)
 8013794:	f002 f9d7 	bl	8015b46 <memmove>
 8013798:	4622      	mov	r2, r4
 801379a:	462b      	mov	r3, r5
 801379c:	4990      	ldr	r1, [pc, #576]	; (80139e0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x25c>)
 801379e:	a805      	add	r0, sp, #20
 80137a0:	f001 fa62 	bl	8014c68 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 80137a4:	4c8d      	ldr	r4, [pc, #564]	; (80139dc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x258>)
 80137a6:	6823      	ldr	r3, [r4, #0]
 80137a8:	0798      	lsls	r0, r3, #30
 80137aa:	bf5f      	itttt	pl
 80137ac:	4a8d      	ldrpl	r2, [pc, #564]	; (80139e4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x260>)
 80137ae:	6812      	ldrpl	r2, [r2, #0]
 80137b0:	6912      	ldrpl	r2, [r2, #16]
 80137b2:	6062      	strpl	r2, [r4, #4]
 80137b4:	0759      	lsls	r1, r3, #29
 80137b6:	bf5f      	itttt	pl
 80137b8:	4a8a      	ldrpl	r2, [pc, #552]	; (80139e4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x260>)
 80137ba:	6812      	ldrpl	r2, [r2, #0]
 80137bc:	6992      	ldrpl	r2, [r2, #24]
 80137be:	60a2      	strpl	r2, [r4, #8]
 80137c0:	071a      	lsls	r2, r3, #28
 80137c2:	bf5f      	itttt	pl
 80137c4:	4a87      	ldrpl	r2, [pc, #540]	; (80139e4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x260>)
 80137c6:	6812      	ldrpl	r2, [r2, #0]
 80137c8:	6952      	ldrpl	r2, [r2, #20]
 80137ca:	60e2      	strpl	r2, [r4, #12]
 80137cc:	069f      	lsls	r7, r3, #26
 80137ce:	d417      	bmi.n	8013800 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x7c>
 80137d0:	223f      	movs	r2, #63	; 0x3f
 80137d2:	4b84      	ldr	r3, [pc, #528]	; (80139e4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x260>)
 80137d4:	4884      	ldr	r0, [pc, #528]	; (80139e8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x264>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	331b      	adds	r3, #27
 80137da:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80137de:	b941      	cbnz	r1, 80137f2 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x6e>
 80137e0:	f002 f9c8 	bl	8015b74 <memset>
 80137e4:	e009      	b.n	80137fa <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x76>
 80137e6:	6800      	ldr	r0, [r0, #0]
 80137e8:	497c      	ldr	r1, [pc, #496]	; (80139dc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x258>)
 80137ea:	6803      	ldr	r3, [r0, #0]
 80137ec:	68db      	ldr	r3, [r3, #12]
 80137ee:	4798      	blx	r3
 80137f0:	e7d2      	b.n	8013798 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x14>
 80137f2:	3a01      	subs	r2, #1
 80137f4:	f800 1b01 	strb.w	r1, [r0], #1
 80137f8:	d1ef      	bne.n	80137da <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x56>
 80137fa:	2300      	movs	r3, #0
 80137fc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8013800:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8013804:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 8013808:	7d23      	ldrb	r3, [r4, #20]
 801380a:	42aa      	cmp	r2, r5
 801380c:	6821      	ldr	r1, [r4, #0]
 801380e:	d21a      	bcs.n	8013846 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xc2>
 8013810:	9805      	ldr	r0, [sp, #20]
 8013812:	07ce      	lsls	r6, r1, #31
 8013814:	4410      	add	r0, r2
 8013816:	eba5 0502 	sub.w	r5, r5, r2
 801381a:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801381e:	d404      	bmi.n	801382a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa6>
 8013820:	b922      	cbnz	r2, 801382c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa8>
 8013822:	9300      	str	r3, [sp, #0]
 8013824:	4a71      	ldr	r2, [pc, #452]	; (80139ec <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x268>)
 8013826:	4b72      	ldr	r3, [pc, #456]	; (80139f0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x26c>)
 8013828:	e003      	b.n	8013832 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xae>
 801382a:	b312      	cbz	r2, 8013872 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xee>
 801382c:	9300      	str	r3, [sp, #0]
 801382e:	4a71      	ldr	r2, [pc, #452]	; (80139f4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x270>)
 8013830:	4b6f      	ldr	r3, [pc, #444]	; (80139f0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x26c>)
 8013832:	4629      	mov	r1, r5
 8013834:	f7f5 ffba 	bl	80097ac <snprintf>
 8013838:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801383c:	4285      	cmp	r5, r0
 801383e:	bfa4      	itt	ge
 8013840:	181b      	addge	r3, r3, r0
 8013842:	f8ad 301a 	strhge.w	r3, [sp, #26]
 8013846:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801384a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 801384e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8013852:	42aa      	cmp	r2, r5
 8013854:	6821      	ldr	r1, [r4, #0]
 8013856:	d21f      	bcs.n	8013898 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x114>
 8013858:	9805      	ldr	r0, [sp, #20]
 801385a:	05c9      	lsls	r1, r1, #23
 801385c:	4410      	add	r0, r2
 801385e:	eba5 0502 	sub.w	r5, r5, r2
 8013862:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8013866:	d408      	bmi.n	801387a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xf6>
 8013868:	b94a      	cbnz	r2, 801387e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xfa>
 801386a:	9300      	str	r3, [sp, #0]
 801386c:	4a5f      	ldr	r2, [pc, #380]	; (80139ec <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x268>)
 801386e:	4b62      	ldr	r3, [pc, #392]	; (80139f8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x274>)
 8013870:	e008      	b.n	8013884 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x100>
 8013872:	9300      	str	r3, [sp, #0]
 8013874:	4a61      	ldr	r2, [pc, #388]	; (80139fc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x278>)
 8013876:	4b5e      	ldr	r3, [pc, #376]	; (80139f0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x26c>)
 8013878:	e7db      	b.n	8013832 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xae>
 801387a:	2a00      	cmp	r2, #0
 801387c:	d03e      	beq.n	80138fc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x178>
 801387e:	9300      	str	r3, [sp, #0]
 8013880:	4a5c      	ldr	r2, [pc, #368]	; (80139f4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x270>)
 8013882:	4b5d      	ldr	r3, [pc, #372]	; (80139f8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x274>)
 8013884:	4629      	mov	r1, r5
 8013886:	f7f5 ff91 	bl	80097ac <snprintf>
 801388a:	4285      	cmp	r5, r0
 801388c:	bfa2      	ittt	ge
 801388e:	f8bd 301a 	ldrhge.w	r3, [sp, #26]
 8013892:	18c0      	addge	r0, r0, r3
 8013894:	f8ad 001a 	strhge.w	r0, [sp, #26]
 8013898:	4959      	ldr	r1, [pc, #356]	; (8013a00 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x27c>)
 801389a:	a805      	add	r0, sp, #20
 801389c:	f001 fa6a 	bl	8014d74 <PropertiesBuilder::AddComment(char const*)>
 80138a0:	6823      	ldr	r3, [r4, #0]
 80138a2:	6862      	ldr	r2, [r4, #4]
 80138a4:	4957      	ldr	r1, [pc, #348]	; (8013a04 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x280>)
 80138a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80138aa:	a805      	add	r0, sp, #20
 80138ac:	f001 fa1e 	bl	8014cec <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80138b0:	6823      	ldr	r3, [r4, #0]
 80138b2:	68a2      	ldr	r2, [r4, #8]
 80138b4:	4954      	ldr	r1, [pc, #336]	; (8013a08 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x284>)
 80138b6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80138ba:	a805      	add	r0, sp, #20
 80138bc:	f001 fa16 	bl	8014cec <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80138c0:	6823      	ldr	r3, [r4, #0]
 80138c2:	4952      	ldr	r1, [pc, #328]	; (8013a0c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x288>)
 80138c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80138c8:	68e2      	ldr	r2, [r4, #12]
 80138ca:	a805      	add	r0, sp, #20
 80138cc:	f001 fa0e 	bl	8014cec <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80138d0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80138d4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80138d8:	6821      	ldr	r1, [r4, #0]
 80138da:	42ab      	cmp	r3, r5
 80138dc:	d221      	bcs.n	8013922 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x19e>
 80138de:	9805      	ldr	r0, [sp, #20]
 80138e0:	f011 0f20 	tst.w	r1, #32
 80138e4:	4418      	add	r0, r3
 80138e6:	eba5 0503 	sub.w	r5, r5, r3
 80138ea:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80138ee:	4b3e      	ldr	r3, [pc, #248]	; (80139e8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x264>)
 80138f0:	d108      	bne.n	8013904 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x180>
 80138f2:	b94a      	cbnz	r2, 8013908 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x184>
 80138f4:	9300      	str	r3, [sp, #0]
 80138f6:	4a46      	ldr	r2, [pc, #280]	; (8013a10 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x28c>)
 80138f8:	4b46      	ldr	r3, [pc, #280]	; (8013a14 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x290>)
 80138fa:	e008      	b.n	801390e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x18a>
 80138fc:	9300      	str	r3, [sp, #0]
 80138fe:	4a3f      	ldr	r2, [pc, #252]	; (80139fc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x278>)
 8013900:	4b3d      	ldr	r3, [pc, #244]	; (80139f8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x274>)
 8013902:	e7bf      	b.n	8013884 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x100>
 8013904:	2a00      	cmp	r2, #0
 8013906:	d035      	beq.n	8013974 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>
 8013908:	9300      	str	r3, [sp, #0]
 801390a:	4a43      	ldr	r2, [pc, #268]	; (8013a18 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x294>)
 801390c:	4b41      	ldr	r3, [pc, #260]	; (8013a14 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x290>)
 801390e:	4629      	mov	r1, r5
 8013910:	f7f5 ff4c 	bl	80097ac <snprintf>
 8013914:	4285      	cmp	r5, r0
 8013916:	bfa2      	ittt	ge
 8013918:	f8bd 301a 	ldrhge.w	r3, [sp, #26]
 801391c:	18c0      	addge	r0, r0, r3
 801391e:	f8ad 001a 	strhge.w	r0, [sp, #26]
 8013922:	493e      	ldr	r1, [pc, #248]	; (8013a1c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x298>)
 8013924:	a805      	add	r0, sp, #20
 8013926:	f001 fa25 	bl	8014d74 <PropertiesBuilder::AddComment(char const*)>
 801392a:	6823      	ldr	r3, [r4, #0]
 801392c:	f8d4 2055 	ldr.w	r2, [r4, #85]	; 0x55
 8013930:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8013934:	493a      	ldr	r1, [pc, #232]	; (8013a20 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x29c>)
 8013936:	a805      	add	r0, sp, #20
 8013938:	f001 f9d8 	bl	8014cec <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 801393c:	f8d4 0059 	ldr.w	r0, [r4, #89]	; 0x59
 8013940:	6827      	ldr	r7, [r4, #0]
 8013942:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8013946:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 801394a:	42a3      	cmp	r3, r4
 801394c:	d227      	bcs.n	801399e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x21a>
 801394e:	9d05      	ldr	r5, [sp, #20]
 8013950:	1ae4      	subs	r4, r4, r3
 8013952:	441d      	add	r5, r3
 8013954:	f7f4 fc6a 	bl	800822c <__aeabi_f2d>
 8013958:	f017 0f80 	tst.w	r7, #128	; 0x80
 801395c:	f04f 0301 	mov.w	r3, #1
 8013960:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8013964:	d10a      	bne.n	801397c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f8>
 8013966:	b956      	cbnz	r6, 801397e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1fa>
 8013968:	9300      	str	r3, [sp, #0]
 801396a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801396e:	4b2d      	ldr	r3, [pc, #180]	; (8013a24 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x2a0>)
 8013970:	4a2d      	ldr	r2, [pc, #180]	; (8013a28 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x2a4>)
 8013972:	e009      	b.n	8013988 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x204>
 8013974:	9300      	str	r3, [sp, #0]
 8013976:	4a2d      	ldr	r2, [pc, #180]	; (8013a2c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x2a8>)
 8013978:	4b26      	ldr	r3, [pc, #152]	; (8013a14 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x290>)
 801397a:	e7c8      	b.n	801390e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x18a>
 801397c:	b346      	cbz	r6, 80139d0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x24c>
 801397e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013982:	9300      	str	r3, [sp, #0]
 8013984:	4a2a      	ldr	r2, [pc, #168]	; (8013a30 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x2ac>)
 8013986:	4b27      	ldr	r3, [pc, #156]	; (8013a24 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x2a0>)
 8013988:	4621      	mov	r1, r4
 801398a:	4628      	mov	r0, r5
 801398c:	f7f5 ff0e 	bl	80097ac <snprintf>
 8013990:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8013994:	4284      	cmp	r4, r0
 8013996:	bfa4      	itt	ge
 8013998:	181b      	addge	r3, r3, r0
 801399a:	f8ad 301a 	strhge.w	r3, [sp, #26]
 801399e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80139a2:	b17b      	cbz	r3, 80139c4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x240>
 80139a4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80139a8:	9b05      	ldr	r3, [sp, #20]
 80139aa:	4413      	add	r3, r2
 80139ac:	227d      	movs	r2, #125	; 0x7d
 80139ae:	f803 2c01 	strb.w	r2, [r3, #-1]
 80139b2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80139b6:	9905      	ldr	r1, [sp, #20]
 80139b8:	54ca      	strb	r2, [r1, r3]
 80139ba:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80139be:	3301      	adds	r3, #1
 80139c0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80139c4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80139c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80139ca:	601a      	str	r2, [r3, #0]
 80139cc:	b009      	add	sp, #36	; 0x24
 80139ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139d0:	9300      	str	r3, [sp, #0]
 80139d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80139d6:	4b13      	ldr	r3, [pc, #76]	; (8013a24 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x2a0>)
 80139d8:	4a16      	ldr	r2, [pc, #88]	; (8013a34 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x2b0>)
 80139da:	e7d5      	b.n	8013988 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x204>
 80139dc:	2001c728 	andcs	ip, r1, r8, lsr #14
 80139e0:	08019f2c 	stmdaeq	r1, {r2, r3, r5, r8, r9, sl, fp, ip, pc}
 80139e4:	2001c724 	andcs	ip, r1, r4, lsr #14
 80139e8:	2001c73d 	andcs	ip, r1, sp, lsr r7
 80139ec:	080180d1 	stmdaeq	r1, {r0, r4, r6, r7, pc}
 80139f0:	08019f23 	stmdaeq	r1, {r0, r1, r5, r8, r9, sl, fp, ip, pc}
 80139f4:	080180c8 	stmdaeq	r1, {r3, r6, r7, pc}
 80139f8:	08019f01 	stmdaeq	r1, {r0, r8, r9, sl, fp, ip, pc}
 80139fc:	080180d2 	stmdaeq	r1, {r1, r4, r6, r7, pc}
 8013a00:	08019eb7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r9, sl, fp, ip, pc}
 8013a04:	08019ecc 	stmdaeq	r1, {r2, r3, r6, r7, r9, sl, fp, ip, pc}
 8013a08:	08019f1a 	stmdaeq	r1, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
 8013a0c:	08019ef1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, sl, fp, ip, pc}
 8013a10:	080180e4 	stmdaeq	r1, {r2, r5, r6, r7, pc}
 8013a14:	08019f11 	stmdaeq	r1, {r0, r4, r8, r9, sl, fp, ip, pc}
 8013a18:	080180d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, pc}
 8013a1c:	08019ec1 	stmdaeq	r1, {r0, r6, r7, r9, sl, fp, ip, pc}
 8013a20:	08019ed7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, sl, fp, ip, pc}
 8013a24:	08019ee2 	stmdaeq	r1, {r1, r5, r6, r7, r9, sl, fp, ip, pc}
 8013a28:	080188e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, fp, pc}
 8013a2c:	080180e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, pc}
 8013a30:	080188dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, fp, pc}
 8013a34:	080188e8 	stmdaeq	r1, {r3, r5, r6, r7, fp, pc}

08013a38 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 8013a38:	b513      	push	{r0, r1, r4, lr}
 8013a3a:	6804      	ldr	r4, [r0, #0]
 8013a3c:	b914      	cbnz	r4, 8013a44 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8013a3e:	601c      	str	r4, [r3, #0]
 8013a40:	b002      	add	sp, #8
 8013a42:	bd10      	pop	{r4, pc}
 8013a44:	9300      	str	r3, [sp, #0]
 8013a46:	4613      	mov	r3, r2
 8013a48:	460a      	mov	r2, r1
 8013a4a:	2100      	movs	r1, #0
 8013a4c:	f7ff fe9a 	bl	8013784 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>
 8013a50:	e7f6      	b.n	8013a40 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

08013a52 <NetworkParams::Dump()>:
 8013a52:	4770      	bx	lr

08013a54 <memcpy.isra.0>:
 8013a54:	3801      	subs	r0, #1
 8013a56:	440a      	add	r2, r1
 8013a58:	4291      	cmp	r1, r2
 8013a5a:	d100      	bne.n	8013a5e <memcpy.isra.0+0xa>
 8013a5c:	4770      	bx	lr
 8013a5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a62:	f800 3f01 	strb.w	r3, [r0, #1]!
 8013a66:	e7f7      	b.n	8013a58 <memcpy.isra.0+0x4>

08013a68 <arp_announce>:
 8013a68:	4803      	ldr	r0, [pc, #12]	; (8013a78 <arp_announce+0x10>)
 8013a6a:	69c3      	ldr	r3, [r0, #28]
 8013a6c:	b113      	cbz	r3, 8013a74 <arp_announce+0xc>
 8013a6e:	212a      	movs	r1, #42	; 0x2a
 8013a70:	f003 b8a8 	b.w	8016bc4 <emac_eth_send>
 8013a74:	4770      	bx	lr
 8013a76:	bf00      	nop
 8013a78:	2001c788 	andcs	ip, r1, r8, lsl #15

08013a7c <arp_handle_request>:
 8013a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013a7e:	2204      	movs	r2, #4
 8013a80:	f100 0126 	add.w	r1, r0, #38	; 0x26
 8013a84:	4604      	mov	r4, r0
 8013a86:	eb0d 0002 	add.w	r0, sp, r2
 8013a8a:	f7ff ffe3 	bl	8013a54 <memcpy.isra.0>
 8013a8e:	4b0d      	ldr	r3, [pc, #52]	; (8013ac4 <arp_handle_request+0x48>)
 8013a90:	9a01      	ldr	r2, [sp, #4]
 8013a92:	69db      	ldr	r3, [r3, #28]
 8013a94:	429a      	cmp	r2, r3
 8013a96:	d113      	bne.n	8013ac0 <arp_handle_request+0x44>
 8013a98:	2206      	movs	r2, #6
 8013a9a:	4d0b      	ldr	r5, [pc, #44]	; (8013ac8 <arp_handle_request+0x4c>)
 8013a9c:	18a1      	adds	r1, r4, r2
 8013a9e:	4628      	mov	r0, r5
 8013aa0:	f7ff ffd8 	bl	8013a54 <memcpy.isra.0>
 8013aa4:	f104 0116 	add.w	r1, r4, #22
 8013aa8:	f105 0020 	add.w	r0, r5, #32
 8013aac:	2206      	movs	r2, #6
 8013aae:	f7ff ffd1 	bl	8013a54 <memcpy.isra.0>
 8013ab2:	69e3      	ldr	r3, [r4, #28]
 8013ab4:	212a      	movs	r1, #42	; 0x2a
 8013ab6:	4628      	mov	r0, r5
 8013ab8:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 8013abc:	f003 f882 	bl	8016bc4 <emac_eth_send>
 8013ac0:	b003      	add	sp, #12
 8013ac2:	bd30      	pop	{r4, r5, pc}
 8013ac4:	2001c788 	andcs	ip, r1, r8, lsl #15
 8013ac8:	2001c7b4 			; <UNDEFINED> instruction: 0x2001c7b4

08013acc <arp_handle_reply>:
 8013acc:	69c1      	ldr	r1, [r0, #28]
 8013ace:	3016      	adds	r0, #22
 8013ad0:	f000 b80a 	b.w	8013ae8 <arp_cache_update>

08013ad4 <arp_send_request>:
 8013ad4:	4b03      	ldr	r3, [pc, #12]	; (8013ae4 <arp_send_request+0x10>)
 8013ad6:	212a      	movs	r1, #42	; 0x2a
 8013ad8:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 8013adc:	4618      	mov	r0, r3
 8013ade:	f003 b871 	b.w	8016bc4 <emac_eth_send>
 8013ae2:	bf00      	nop
 8013ae4:	2001c7e0 	andcs	ip, r1, r0, ror #15

08013ae8 <arp_cache_update>:
 8013ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013aea:	4e11      	ldr	r6, [pc, #68]	; (8013b30 <arp_cache_update+0x48>)
 8013aec:	8833      	ldrh	r3, [r6, #0]
 8013aee:	2b20      	cmp	r3, #32
 8013af0:	d018      	beq.n	8013b24 <arp_cache_update+0x3c>
 8013af2:	2400      	movs	r4, #0
 8013af4:	220c      	movs	r2, #12
 8013af6:	4d0f      	ldr	r5, [pc, #60]	; (8013b34 <arp_cache_update+0x4c>)
 8013af8:	b2a7      	uxth	r7, r4
 8013afa:	42bb      	cmp	r3, r7
 8013afc:	d80b      	bhi.n	8013b16 <arp_cache_update+0x2e>
 8013afe:	fb02 5203 	mla	r2, r2, r3, r5
 8013b02:	1d84      	adds	r4, r0, #6
 8013b04:	3203      	adds	r2, #3
 8013b06:	42a0      	cmp	r0, r4
 8013b08:	d10d      	bne.n	8013b26 <arp_cache_update+0x3e>
 8013b0a:	220c      	movs	r2, #12
 8013b0c:	435a      	muls	r2, r3
 8013b0e:	3301      	adds	r3, #1
 8013b10:	50a9      	str	r1, [r5, r2]
 8013b12:	8033      	strh	r3, [r6, #0]
 8013b14:	e006      	b.n	8013b24 <arp_cache_update+0x3c>
 8013b16:	3401      	adds	r4, #1
 8013b18:	fb02 5704 	mla	r7, r2, r4, r5
 8013b1c:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 8013b20:	428f      	cmp	r7, r1
 8013b22:	d1e9      	bne.n	8013af8 <arp_cache_update+0x10>
 8013b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b26:	f810 7b01 	ldrb.w	r7, [r0], #1
 8013b2a:	f802 7f01 	strb.w	r7, [r2, #1]!
 8013b2e:	e7ea      	b.n	8013b06 <arp_cache_update+0x1e>
 8013b30:	2001c98c 	andcs	ip, r1, ip, lsl #19
 8013b34:	2001c80c 	andcs	ip, r1, ip, lsl #16

08013b38 <arp_cache_lookup>:
 8013b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	4606      	mov	r6, r0
 8013b40:	460c      	mov	r4, r1
 8013b42:	200c      	movs	r0, #12
 8013b44:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8013bcc <arp_cache_lookup+0x94>
 8013b48:	fb00 f302 	mul.w	r3, r0, r2
 8013b4c:	f853 1008 	ldr.w	r1, [r3, r8]
 8013b50:	42b1      	cmp	r1, r6
 8013b52:	d10d      	bne.n	8013b70 <arp_cache_lookup+0x38>
 8013b54:	3304      	adds	r3, #4
 8013b56:	4443      	add	r3, r8
 8013b58:	3c01      	subs	r4, #1
 8013b5a:	1d9a      	adds	r2, r3, #6
 8013b5c:	4293      	cmp	r3, r2
 8013b5e:	d102      	bne.n	8013b66 <arp_cache_lookup+0x2e>
 8013b60:	4630      	mov	r0, r6
 8013b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b66:	f813 1b01 	ldrb.w	r1, [r3], #1
 8013b6a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8013b6e:	e7f5      	b.n	8013b5c <arp_cache_lookup+0x24>
 8013b70:	b111      	cbz	r1, 8013b78 <arp_cache_lookup+0x40>
 8013b72:	3201      	adds	r2, #1
 8013b74:	2a20      	cmp	r2, #32
 8013b76:	d1e7      	bne.n	8013b48 <arp_cache_lookup+0x10>
 8013b78:	2704      	movs	r7, #4
 8013b7a:	f8df a054 	ldr.w	sl, [pc, #84]	; 8013bd0 <arp_cache_lookup+0x98>
 8013b7e:	f8ba 5000 	ldrh.w	r5, [sl]
 8013b82:	3f01      	subs	r7, #1
 8013b84:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8013b88:	d101      	bne.n	8013b8e <arp_cache_lookup+0x56>
 8013b8a:	463e      	mov	r6, r7
 8013b8c:	e7e8      	b.n	8013b60 <arp_cache_lookup+0x28>
 8013b8e:	4630      	mov	r0, r6
 8013b90:	f7ff ffa0 	bl	8013ad4 <arp_send_request>
 8013b94:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 8013b98:	f1b9 0901 	subs.w	r9, r9, #1
 8013b9c:	f8ba 3000 	ldrh.w	r3, [sl]
 8013ba0:	d011      	beq.n	8013bc6 <arp_cache_lookup+0x8e>
 8013ba2:	429d      	cmp	r5, r3
 8013ba4:	d00c      	beq.n	8013bc0 <arp_cache_lookup+0x88>
 8013ba6:	230c      	movs	r3, #12
 8013ba8:	fb03 8505 	mla	r5, r3, r5, r8
 8013bac:	3c01      	subs	r4, #1
 8013bae:	1d2b      	adds	r3, r5, #4
 8013bb0:	350a      	adds	r5, #10
 8013bb2:	42ab      	cmp	r3, r5
 8013bb4:	d0d4      	beq.n	8013b60 <arp_cache_lookup+0x28>
 8013bb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013bba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013bbe:	e7f8      	b.n	8013bb2 <arp_cache_lookup+0x7a>
 8013bc0:	f7f3 fcda 	bl	8007578 <net_handle>
 8013bc4:	e7e8      	b.n	8013b98 <arp_cache_lookup+0x60>
 8013bc6:	429d      	cmp	r5, r3
 8013bc8:	d0db      	beq.n	8013b82 <arp_cache_lookup+0x4a>
 8013bca:	e7ec      	b.n	8013ba6 <arp_cache_lookup+0x6e>
 8013bcc:	2001c80c 	andcs	ip, r1, ip, lsl #16
 8013bd0:	2001c98c 	andcs	ip, r1, ip, lsl #19

08013bd4 <_parse_response>:
 8013bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd8:	2400      	movs	r4, #0
 8013bda:	460d      	mov	r5, r1
 8013bdc:	46a3      	mov	fp, r4
 8013bde:	4627      	mov	r7, r4
 8013be0:	46a2      	mov	sl, r4
 8013be2:	46a1      	mov	r9, r4
 8013be4:	46a0      	mov	r8, r4
 8013be6:	4e4f      	ldr	r6, [pc, #316]	; (8013d24 <_parse_response+0x150>)
 8013be8:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8013bec:	6833      	ldr	r3, [r6, #0]
 8013bee:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8013bf2:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8013bf6:	9009      	str	r0, [sp, #36]	; 0x24
 8013bf8:	9402      	str	r4, [sp, #8]
 8013bfa:	9407      	str	r4, [sp, #28]
 8013bfc:	9308      	str	r3, [sp, #32]
 8013bfe:	f7f3 fcbb 	bl	8007578 <net_handle>
 8013c02:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8013c06:	9300      	str	r3, [sp, #0]
 8013c08:	f44f 7209 	mov.w	r2, #548	; 0x224
 8013c0c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8013c10:	ab0c      	add	r3, sp, #48	; 0x30
 8013c12:	a90d      	add	r1, sp, #52	; 0x34
 8013c14:	f7fe fc66 	bl	80124e4 <udp_recv>
 8013c18:	2800      	cmp	r0, #0
 8013c1a:	d03e      	beq.n	8013c9a <_parse_response+0xc6>
 8013c1c:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8013c20:	2b43      	cmp	r3, #67	; 0x43
 8013c22:	d13a      	bne.n	8013c9a <_parse_response+0xc6>
 8013c24:	aa14      	add	r2, sp, #80	; 0x50
 8013c26:	1e6b      	subs	r3, r5, #1
 8013c28:	1d69      	adds	r1, r5, #5
 8013c2a:	4299      	cmp	r1, r3
 8013c2c:	d12f      	bne.n	8013c8e <_parse_response+0xba>
 8013c2e:	2100      	movs	r1, #0
 8013c30:	ab0d      	add	r3, sp, #52	; 0x34
 8013c32:	181d      	adds	r5, r3, r0
 8013c34:	468c      	mov	ip, r1
 8013c36:	460e      	mov	r6, r1
 8013c38:	4608      	mov	r0, r1
 8013c3a:	ab49      	add	r3, sp, #292	; 0x124
 8013c3c:	42ab      	cmp	r3, r5
 8013c3e:	d337      	bcc.n	8013cb0 <_parse_response+0xdc>
 8013c40:	b141      	cbz	r1, 8013c54 <_parse_response+0x80>
 8013c42:	4b39      	ldr	r3, [pc, #228]	; (8013d28 <_parse_response+0x154>)
 8013c44:	9a07      	ldr	r2, [sp, #28]
 8013c46:	f883 8003 	strb.w	r8, [r3, #3]
 8013c4a:	709a      	strb	r2, [r3, #2]
 8013c4c:	9a06      	ldr	r2, [sp, #24]
 8013c4e:	705a      	strb	r2, [r3, #1]
 8013c50:	9a05      	ldr	r2, [sp, #20]
 8013c52:	701a      	strb	r2, [r3, #0]
 8013c54:	f1bc 0f00 	cmp.w	ip, #0
 8013c58:	d007      	beq.n	8013c6a <_parse_response+0x96>
 8013c5a:	4b34      	ldr	r3, [pc, #208]	; (8013d2c <_parse_response+0x158>)
 8013c5c:	9a04      	ldr	r2, [sp, #16]
 8013c5e:	705c      	strb	r4, [r3, #1]
 8013c60:	70da      	strb	r2, [r3, #3]
 8013c62:	9a03      	ldr	r2, [sp, #12]
 8013c64:	709a      	strb	r2, [r3, #2]
 8013c66:	9a02      	ldr	r2, [sp, #8]
 8013c68:	701a      	strb	r2, [r3, #0]
 8013c6a:	b13e      	cbz	r6, 8013c7c <_parse_response+0xa8>
 8013c6c:	4b30      	ldr	r3, [pc, #192]	; (8013d30 <_parse_response+0x15c>)
 8013c6e:	70df      	strb	r7, [r3, #3]
 8013c70:	f883 a002 	strb.w	sl, [r3, #2]
 8013c74:	f883 9001 	strb.w	r9, [r3, #1]
 8013c78:	f883 b000 	strb.w	fp, [r3]
 8013c7c:	2802      	cmp	r0, #2
 8013c7e:	d102      	bne.n	8013c86 <_parse_response+0xb2>
 8013c80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013c82:	4b2c      	ldr	r3, [pc, #176]	; (8013d34 <_parse_response+0x160>)
 8013c84:	601a      	str	r2, [r3, #0]
 8013c86:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8013c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c8e:	f812 cb01 	ldrb.w	ip, [r2], #1
 8013c92:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8013c96:	45e6      	cmp	lr, ip
 8013c98:	d0c7      	beq.n	8013c2a <_parse_response+0x56>
 8013c9a:	6833      	ldr	r3, [r6, #0]
 8013c9c:	9a08      	ldr	r2, [sp, #32]
 8013c9e:	1a9b      	subs	r3, r3, r2
 8013ca0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8013ca4:	d3ab      	bcc.n	8013bfe <_parse_response+0x2a>
 8013ca6:	2800      	cmp	r0, #0
 8013ca8:	d1c1      	bne.n	8013c2e <_parse_response+0x5a>
 8013caa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013cae:	e7ea      	b.n	8013c86 <_parse_response+0xb2>
 8013cb0:	781a      	ldrb	r2, [r3, #0]
 8013cb2:	2a35      	cmp	r2, #53	; 0x35
 8013cb4:	d011      	beq.n	8013cda <_parse_response+0x106>
 8013cb6:	d808      	bhi.n	8013cca <_parse_response+0xf6>
 8013cb8:	2a01      	cmp	r2, #1
 8013cba:	d011      	beq.n	8013ce0 <_parse_response+0x10c>
 8013cbc:	2a03      	cmp	r2, #3
 8013cbe:	d019      	beq.n	8013cf4 <_parse_response+0x120>
 8013cc0:	b14a      	cbz	r2, 8013cd6 <_parse_response+0x102>
 8013cc2:	1c9a      	adds	r2, r3, #2
 8013cc4:	785b      	ldrb	r3, [r3, #1]
 8013cc6:	4413      	add	r3, r2
 8013cc8:	e7b8      	b.n	8013c3c <_parse_response+0x68>
 8013cca:	2a36      	cmp	r2, #54	; 0x36
 8013ccc:	d01f      	beq.n	8013d0e <_parse_response+0x13a>
 8013cce:	2aff      	cmp	r2, #255	; 0xff
 8013cd0:	d1f7      	bne.n	8013cc2 <_parse_response+0xee>
 8013cd2:	462b      	mov	r3, r5
 8013cd4:	e7b2      	b.n	8013c3c <_parse_response+0x68>
 8013cd6:	3301      	adds	r3, #1
 8013cd8:	e7b0      	b.n	8013c3c <_parse_response+0x68>
 8013cda:	7898      	ldrb	r0, [r3, #2]
 8013cdc:	3303      	adds	r3, #3
 8013cde:	e7ad      	b.n	8013c3c <_parse_response+0x68>
 8013ce0:	f893 b002 	ldrb.w	fp, [r3, #2]
 8013ce4:	f893 9003 	ldrb.w	r9, [r3, #3]
 8013ce8:	f893 a004 	ldrb.w	sl, [r3, #4]
 8013cec:	795f      	ldrb	r7, [r3, #5]
 8013cee:	4616      	mov	r6, r2
 8013cf0:	3306      	adds	r3, #6
 8013cf2:	e7a3      	b.n	8013c3c <_parse_response+0x68>
 8013cf4:	789a      	ldrb	r2, [r3, #2]
 8013cf6:	78dc      	ldrb	r4, [r3, #3]
 8013cf8:	9202      	str	r2, [sp, #8]
 8013cfa:	791a      	ldrb	r2, [r3, #4]
 8013cfc:	f04f 0c01 	mov.w	ip, #1
 8013d00:	9203      	str	r2, [sp, #12]
 8013d02:	795a      	ldrb	r2, [r3, #5]
 8013d04:	9204      	str	r2, [sp, #16]
 8013d06:	785a      	ldrb	r2, [r3, #1]
 8013d08:	4413      	add	r3, r2
 8013d0a:	3302      	adds	r3, #2
 8013d0c:	e796      	b.n	8013c3c <_parse_response+0x68>
 8013d0e:	789a      	ldrb	r2, [r3, #2]
 8013d10:	f893 8005 	ldrb.w	r8, [r3, #5]
 8013d14:	9205      	str	r2, [sp, #20]
 8013d16:	78da      	ldrb	r2, [r3, #3]
 8013d18:	2101      	movs	r1, #1
 8013d1a:	9206      	str	r2, [sp, #24]
 8013d1c:	791a      	ldrb	r2, [r3, #4]
 8013d1e:	3306      	adds	r3, #6
 8013d20:	9207      	str	r2, [sp, #28]
 8013d22:	e78b      	b.n	8013c3c <_parse_response+0x68>
 8013d24:	2001ce64 	andcs	ip, r1, r4, ror #28
 8013d28:	2001cbc0 	andcs	ip, r1, r0, asr #23
 8013d2c:	2001c990 	mulcs	r1, r0, r9
 8013d30:	2001c998 	mulcs	r1, r8, r9
 8013d34:	2001c994 	mulcs	r1, r4, r9

08013d38 <memcpy.isra.0>:
 8013d38:	3801      	subs	r0, #1
 8013d3a:	440a      	add	r2, r1
 8013d3c:	4291      	cmp	r1, r2
 8013d3e:	d100      	bne.n	8013d42 <memcpy.isra.0+0xa>
 8013d40:	4770      	bx	lr
 8013d42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d46:	f800 3f01 	strb.w	r3, [r0, #1]!
 8013d4a:	e7f7      	b.n	8013d3c <memcpy.isra.0+0x4>

08013d4c <dhcp_client>:
 8013d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d50:	b087      	sub	sp, #28
 8013d52:	9203      	str	r2, [sp, #12]
 8013d54:	4a77      	ldr	r2, [pc, #476]	; (8013f34 <dhcp_client+0x1e8>)
 8013d56:	460f      	mov	r7, r1
 8013d58:	4605      	mov	r5, r0
 8013d5a:	f44f 7309 	mov.w	r3, #548	; 0x224
 8013d5e:	4614      	mov	r4, r2
 8013d60:	2100      	movs	r1, #0
 8013d62:	3b01      	subs	r3, #1
 8013d64:	f802 1b01 	strb.w	r1, [r2], #1
 8013d68:	d1fb      	bne.n	8013d62 <dhcp_client+0x16>
 8013d6a:	f240 1301 	movw	r3, #257	; 0x101
 8013d6e:	2206      	movs	r2, #6
 8013d70:	4629      	mov	r1, r5
 8013d72:	4871      	ldr	r0, [pc, #452]	; (8013f38 <dhcp_client+0x1ec>)
 8013d74:	8023      	strh	r3, [r4, #0]
 8013d76:	70a2      	strb	r2, [r4, #2]
 8013d78:	f7ff ffde 	bl	8013d38 <memcpy.isra.0>
 8013d7c:	4b6f      	ldr	r3, [pc, #444]	; (8013f3c <dhcp_client+0x1f0>)
 8013d7e:	2044      	movs	r0, #68	; 0x44
 8013d80:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8013d84:	f240 1335 	movw	r3, #309	; 0x135
 8013d88:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 8013d8c:	f7fe fb70 	bl	8012470 <udp_bind>
 8013d90:	1e06      	subs	r6, r0, #0
 8013d92:	f2c0 80c9 	blt.w	8013f28 <dhcp_client+0x1dc>
 8013d96:	f04f 0915 	mov.w	r9, #21
 8013d9a:	f8df a198 	ldr.w	sl, [pc, #408]	; 8013f34 <dhcp_client+0x1e8>
 8013d9e:	f1b9 0901 	subs.w	r9, r9, #1
 8013da2:	d11f      	bne.n	8013de4 <dhcp_client+0x98>
 8013da4:	464c      	mov	r4, r9
 8013da6:	2044      	movs	r0, #68	; 0x44
 8013da8:	f7fe fb7c 	bl	80124a4 <udp_unbind>
 8013dac:	2c00      	cmp	r4, #0
 8013dae:	f000 80be 	beq.w	8013f2e <dhcp_client+0x1e2>
 8013db2:	2204      	movs	r2, #4
 8013db4:	4962      	ldr	r1, [pc, #392]	; (8013f40 <dhcp_client+0x1f4>)
 8013db6:	a805      	add	r0, sp, #20
 8013db8:	f7ff ffbe 	bl	8013d38 <memcpy.isra.0>
 8013dbc:	9b05      	ldr	r3, [sp, #20]
 8013dbe:	2204      	movs	r2, #4
 8013dc0:	4960      	ldr	r1, [pc, #384]	; (8013f44 <dhcp_client+0x1f8>)
 8013dc2:	603b      	str	r3, [r7, #0]
 8013dc4:	a805      	add	r0, sp, #20
 8013dc6:	f7ff ffb7 	bl	8013d38 <memcpy.isra.0>
 8013dca:	9b05      	ldr	r3, [sp, #20]
 8013dcc:	a805      	add	r0, sp, #20
 8013dce:	60bb      	str	r3, [r7, #8]
 8013dd0:	2204      	movs	r2, #4
 8013dd2:	495d      	ldr	r1, [pc, #372]	; (8013f48 <dhcp_client+0x1fc>)
 8013dd4:	f7ff ffb0 	bl	8013d38 <memcpy.isra.0>
 8013dd8:	2000      	movs	r0, #0
 8013dda:	9b05      	ldr	r3, [sp, #20]
 8013ddc:	607b      	str	r3, [r7, #4]
 8013dde:	b007      	add	sp, #28
 8013de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013de4:	f643 5301 	movw	r3, #15617	; 0x3d01
 8013de8:	f240 1807 	movw	r8, #263	; 0x107
 8013dec:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8013df0:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8013df4:	782b      	ldrb	r3, [r5, #0]
 8013df6:	4a55      	ldr	r2, [pc, #340]	; (8013f4c <dhcp_client+0x200>)
 8013df8:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8013dfc:	786b      	ldrb	r3, [r5, #1]
 8013dfe:	fa5f fb86 	uxtb.w	fp, r6
 8013e02:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8013e06:	78ab      	ldrb	r3, [r5, #2]
 8013e08:	4651      	mov	r1, sl
 8013e0a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8013e0e:	78eb      	ldrb	r3, [r5, #3]
 8013e10:	4658      	mov	r0, fp
 8013e12:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8013e16:	792b      	ldrb	r3, [r5, #4]
 8013e18:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8013e1c:	796b      	ldrb	r3, [r5, #5]
 8013e1e:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8013e22:	4b4b      	ldr	r3, [pc, #300]	; (8013f50 <dhcp_client+0x204>)
 8013e24:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 8013e28:	23ff      	movs	r3, #255	; 0xff
 8013e2a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8013e2e:	2343      	movs	r3, #67	; 0x43
 8013e30:	f240 1205 	movw	r2, #261	; 0x105
 8013e34:	9300      	str	r3, [sp, #0]
 8013e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e3a:	f7fe fbaf 	bl	801259c <udp_send>
 8013e3e:	4629      	mov	r1, r5
 8013e40:	4630      	mov	r0, r6
 8013e42:	f7ff fec7 	bl	8013bd4 <_parse_response>
 8013e46:	2802      	cmp	r0, #2
 8013e48:	d1a9      	bne.n	8013d9e <dhcp_client+0x52>
 8013e4a:	f643 5303 	movw	r3, #15619	; 0x3d03
 8013e4e:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8013e52:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8013e56:	782b      	ldrb	r3, [r5, #0]
 8013e58:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8013f54 <dhcp_client+0x208>
 8013e5c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8013e60:	786b      	ldrb	r3, [r5, #1]
 8013e62:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8013e66:	78ab      	ldrb	r3, [r5, #2]
 8013e68:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8013e6c:	78eb      	ldrb	r3, [r5, #3]
 8013e6e:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8013e72:	792b      	ldrb	r3, [r5, #4]
 8013e74:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8013e78:	796b      	ldrb	r3, [r5, #5]
 8013e7a:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8013e7e:	f240 4332 	movw	r3, #1074	; 0x432
 8013e82:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 8013e86:	4b2e      	ldr	r3, [pc, #184]	; (8013f40 <dhcp_client+0x1f4>)
 8013e88:	881a      	ldrh	r2, [r3, #0]
 8013e8a:	885b      	ldrh	r3, [r3, #2]
 8013e8c:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 8013e90:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8013e94:	f240 4336 	movw	r3, #1078	; 0x436
 8013e98:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 8013e9c:	4b2e      	ldr	r3, [pc, #184]	; (8013f58 <dhcp_client+0x20c>)
 8013e9e:	221e      	movs	r2, #30
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8013ea6:	230c      	movs	r3, #12
 8013ea8:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 8013eac:	9b03      	ldr	r3, [sp, #12]
 8013eae:	1e58      	subs	r0, r3, #1
 8013eb0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8013eb4:	f1a2 0e1e 	sub.w	lr, r2, #30
 8013eb8:	1c51      	adds	r1, r2, #1
 8013eba:	bb8b      	cbnz	r3, 8013f20 <dhcp_client+0x1d4>
 8013ebc:	2037      	movs	r0, #55	; 0x37
 8013ebe:	18a3      	adds	r3, r4, r2
 8013ec0:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 8013ec4:	2006      	movs	r0, #6
 8013ec6:	4421      	add	r1, r4
 8013ec8:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 8013ecc:	2103      	movs	r1, #3
 8013ece:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 8013ed2:	210f      	movs	r1, #15
 8013ed4:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 8013ed8:	213a      	movs	r1, #58	; 0x3a
 8013eda:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 8013ede:	213b      	movs	r1, #59	; 0x3b
 8013ee0:	f04f 0801 	mov.w	r8, #1
 8013ee4:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8013ee8:	21ff      	movs	r1, #255	; 0xff
 8013eea:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8013eee:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 8013ef2:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 8013ef6:	2343      	movs	r3, #67	; 0x43
 8013ef8:	32f5      	adds	r2, #245	; 0xf5
 8013efa:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 8013efe:	4651      	mov	r1, sl
 8013f00:	9300      	str	r3, [sp, #0]
 8013f02:	b292      	uxth	r2, r2
 8013f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f08:	4658      	mov	r0, fp
 8013f0a:	f7fe fb47 	bl	801259c <udp_send>
 8013f0e:	4629      	mov	r1, r5
 8013f10:	4630      	mov	r0, r6
 8013f12:	f7ff fe5f 	bl	8013bd4 <_parse_response>
 8013f16:	2805      	cmp	r0, #5
 8013f18:	f47f af41 	bne.w	8013d9e <dhcp_client+0x52>
 8013f1c:	4644      	mov	r4, r8
 8013f1e:	e742      	b.n	8013da6 <dhcp_client+0x5a>
 8013f20:	460a      	mov	r2, r1
 8013f22:	f80c 3b01 	strb.w	r3, [ip], #1
 8013f26:	e7c3      	b.n	8013eb0 <dhcp_client+0x164>
 8013f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f2c:	e757      	b.n	8013dde <dhcp_client+0x92>
 8013f2e:	f06f 0001 	mvn.w	r0, #1
 8013f32:	e754      	b.n	8013dde <dhcp_client+0x92>
 8013f34:	2001c99c 	mulcs	r1, ip, r9
 8013f38:	2001c9b8 			; <UNDEFINED> instruction: 0x2001c9b8
 8013f3c:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 8013f40:	2001c994 	mulcs	r1, r4, r9
 8013f44:	2001c990 	mulcs	r1, r0, r9
 8013f48:	2001c998 	mulcs	r1, r8, r9
 8013f4c:	03010637 	movweq	r0, #5687	; 0x1637
 8013f50:	3b3a0f06 	blcc	8e97b70 <__exidx_end+0xe7d41c>
 8013f54:	2001caa6 	andcs	ip, r1, r6, lsr #21
 8013f58:	2001cbc0 	andcs	ip, r1, r0, asr #23

08013f5c <dhcp_client_release>:
 8013f5c:	b507      	push	{r0, r1, r2, lr}
 8013f5e:	2044      	movs	r0, #68	; 0x44
 8013f60:	f7fe fa86 	bl	8012470 <udp_bind>
 8013f64:	f243 6307 	movw	r3, #13831	; 0x3607
 8013f68:	4911      	ldr	r1, [pc, #68]	; (8013fb0 <dhcp_client_release+0x54>)
 8013f6a:	b2c0      	uxtb	r0, r0
 8013f6c:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 8013f70:	2304      	movs	r3, #4
 8013f72:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 8013f76:	4b0f      	ldr	r3, [pc, #60]	; (8013fb4 <dhcp_client_release+0x58>)
 8013f78:	781a      	ldrb	r2, [r3, #0]
 8013f7a:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 8013f7e:	785a      	ldrb	r2, [r3, #1]
 8013f80:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 8013f84:	789a      	ldrb	r2, [r3, #2]
 8013f86:	78db      	ldrb	r3, [r3, #3]
 8013f88:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 8013f8c:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 8013f90:	23ff      	movs	r3, #255	; 0xff
 8013f92:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 8013f96:	2343      	movs	r3, #67	; 0x43
 8013f98:	22fa      	movs	r2, #250	; 0xfa
 8013f9a:	9300      	str	r3, [sp, #0]
 8013f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013fa0:	f7fe fafc 	bl	801259c <udp_send>
 8013fa4:	2044      	movs	r0, #68	; 0x44
 8013fa6:	b003      	add	sp, #12
 8013fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013fac:	f7fe ba7a 	b.w	80124a4 <udp_unbind>
 8013fb0:	2001c99c 	mulcs	r1, ip, r9
 8013fb4:	2001cbc0 	andcs	ip, r1, r0, asr #23

08013fb8 <memcpy.isra.0>:
 8013fb8:	3801      	subs	r0, #1
 8013fba:	440a      	add	r2, r1
 8013fbc:	4291      	cmp	r1, r2
 8013fbe:	d100      	bne.n	8013fc2 <memcpy.isra.0+0xa>
 8013fc0:	4770      	bx	lr
 8013fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013fc6:	f800 3f01 	strb.w	r3, [r0, #1]!
 8013fca:	e7f7      	b.n	8013fbc <memcpy.isra.0+0x4>

08013fcc <_send_report>:
 8013fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013fce:	491c      	ldr	r1, [pc, #112]	; (8014040 <_send_report+0x74>)
 8013fd0:	4c1c      	ldr	r4, [pc, #112]	; (8014044 <_send_report+0x78>)
 8013fd2:	f3c0 2306 	ubfx	r3, r0, #8, #7
 8013fd6:	9001      	str	r0, [sp, #4]
 8013fd8:	70cb      	strb	r3, [r1, #3]
 8013fda:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013fde:	f3c0 6007 	ubfx	r0, r0, #24, #8
 8013fe2:	710b      	strb	r3, [r1, #4]
 8013fe4:	7148      	strb	r0, [r1, #5]
 8013fe6:	2206      	movs	r2, #6
 8013fe8:	4620      	mov	r0, r4
 8013fea:	f7ff ffe5 	bl	8013fb8 <memcpy.isra.0>
 8013fee:	2204      	movs	r2, #4
 8013ff0:	2700      	movs	r7, #0
 8013ff2:	4d15      	ldr	r5, [pc, #84]	; (8014048 <_send_report+0x7c>)
 8013ff4:	eb0d 0102 	add.w	r1, sp, r2
 8013ff8:	882b      	ldrh	r3, [r5, #0]
 8013ffa:	f104 001e 	add.w	r0, r4, #30
 8013ffe:	f104 060e 	add.w	r6, r4, #14
 8014002:	8263      	strh	r3, [r4, #18]
 8014004:	f7ff ffd8 	bl	8013fb8 <memcpy.isra.0>
 8014008:	2118      	movs	r1, #24
 801400a:	4630      	mov	r0, r6
 801400c:	8327      	strh	r7, [r4, #24]
 801400e:	f000 f8c6 	bl	801419e <net_chksum>
 8014012:	2204      	movs	r2, #4
 8014014:	8320      	strh	r0, [r4, #24]
 8014016:	eb0d 0102 	add.w	r1, sp, r2
 801401a:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 801401e:	f7ff ffcb 	bl	8013fb8 <memcpy.isra.0>
 8014022:	2120      	movs	r1, #32
 8014024:	4630      	mov	r0, r6
 8014026:	8527      	strh	r7, [r4, #40]	; 0x28
 8014028:	f000 f8b9 	bl	801419e <net_chksum>
 801402c:	212e      	movs	r1, #46	; 0x2e
 801402e:	8520      	strh	r0, [r4, #40]	; 0x28
 8014030:	4620      	mov	r0, r4
 8014032:	f002 fdc7 	bl	8016bc4 <emac_eth_send>
 8014036:	882b      	ldrh	r3, [r5, #0]
 8014038:	3301      	adds	r3, #1
 801403a:	802b      	strh	r3, [r5, #0]
 801403c:	b003      	add	sp, #12
 801403e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014040:	2001cd1c 	andcs	ip, r1, ip, lsl sp
 8014044:	2001cd24 	andcs	ip, r1, r4, lsr #26
 8014048:	2001cce4 	andcs	ip, r1, r4, ror #25

0801404c <igmp_set_ip>:
 801404c:	b507      	push	{r0, r1, r2, lr}
 801404e:	2204      	movs	r2, #4
 8014050:	6803      	ldr	r3, [r0, #0]
 8014052:	eb0d 0102 	add.w	r1, sp, r2
 8014056:	4806      	ldr	r0, [pc, #24]	; (8014070 <igmp_set_ip+0x24>)
 8014058:	9301      	str	r3, [sp, #4]
 801405a:	f7ff ffad 	bl	8013fb8 <memcpy.isra.0>
 801405e:	2204      	movs	r2, #4
 8014060:	4804      	ldr	r0, [pc, #16]	; (8014074 <igmp_set_ip+0x28>)
 8014062:	eb0d 0102 	add.w	r1, sp, r2
 8014066:	f7ff ffa7 	bl	8013fb8 <memcpy.isra.0>
 801406a:	b003      	add	sp, #12
 801406c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014070:	2001cd3e 	andcs	ip, r1, lr, lsr sp
 8014074:	2001cd06 	andcs	ip, r1, r6, lsl #26

08014078 <igmp_timer>:
 8014078:	b570      	push	{r4, r5, r6, lr}
 801407a:	2500      	movs	r5, #0
 801407c:	2602      	movs	r6, #2
 801407e:	4c0a      	ldr	r4, [pc, #40]	; (80140a8 <igmp_timer+0x30>)
 8014080:	7963      	ldrb	r3, [r4, #5]
 8014082:	2b01      	cmp	r3, #1
 8014084:	d109      	bne.n	801409a <igmp_timer+0x22>
 8014086:	7923      	ldrb	r3, [r4, #4]
 8014088:	b13b      	cbz	r3, 801409a <igmp_timer+0x22>
 801408a:	3b01      	subs	r3, #1
 801408c:	b2db      	uxtb	r3, r3
 801408e:	7123      	strb	r3, [r4, #4]
 8014090:	b91b      	cbnz	r3, 801409a <igmp_timer+0x22>
 8014092:	6820      	ldr	r0, [r4, #0]
 8014094:	f7ff ff9a 	bl	8013fcc <_send_report>
 8014098:	7166      	strb	r6, [r4, #5]
 801409a:	3501      	adds	r5, #1
 801409c:	2d24      	cmp	r5, #36	; 0x24
 801409e:	f104 0408 	add.w	r4, r4, #8
 80140a2:	d1ed      	bne.n	8014080 <igmp_timer+0x8>
 80140a4:	bd70      	pop	{r4, r5, r6, pc}
 80140a6:	bf00      	nop
 80140a8:	2001cbc4 	andcs	ip, r1, r4, asr #23

080140ac <igmp_join>:
 80140ac:	b538      	push	{r3, r4, r5, lr}
 80140ae:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 80140b2:	2be0      	cmp	r3, #224	; 0xe0
 80140b4:	d11b      	bne.n	80140ee <igmp_join+0x42>
 80140b6:	4911      	ldr	r1, [pc, #68]	; (80140fc <igmp_join+0x50>)
 80140b8:	680c      	ldr	r4, [r1, #0]
 80140ba:	2c24      	cmp	r4, #36	; 0x24
 80140bc:	d01a      	beq.n	80140f4 <igmp_join+0x48>
 80140be:	2300      	movs	r3, #0
 80140c0:	4a0f      	ldr	r2, [pc, #60]	; (8014100 <igmp_join+0x54>)
 80140c2:	429c      	cmp	r4, r3
 80140c4:	dc0d      	bgt.n	80140e2 <igmp_join+0x36>
 80140c6:	f44f 7381 	mov.w	r3, #258	; 0x102
 80140ca:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
 80140ce:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80140d2:	8093      	strh	r3, [r2, #4]
 80140d4:	1c63      	adds	r3, r4, #1
 80140d6:	600b      	str	r3, [r1, #0]
 80140d8:	f7ff ff78 	bl	8013fcc <_send_report>
 80140dc:	4623      	mov	r3, r4
 80140de:	4618      	mov	r0, r3
 80140e0:	bd38      	pop	{r3, r4, r5, pc}
 80140e2:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80140e6:	4285      	cmp	r5, r0
 80140e8:	d0f9      	beq.n	80140de <igmp_join+0x32>
 80140ea:	3301      	adds	r3, #1
 80140ec:	e7e9      	b.n	80140c2 <igmp_join+0x16>
 80140ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80140f2:	e7f4      	b.n	80140de <igmp_join+0x32>
 80140f4:	f06f 0301 	mvn.w	r3, #1
 80140f8:	e7f1      	b.n	80140de <igmp_join+0x32>
 80140fa:	bf00      	nop
 80140fc:	2001cce8 	andcs	ip, r1, r8, ror #25
 8014100:	2001cbc4 	andcs	ip, r1, r4, asr #23

08014104 <igmp_leave>:
 8014104:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014108:	2600      	movs	r6, #0
 801410a:	4f1c      	ldr	r7, [pc, #112]	; (801417c <igmp_leave+0x78>)
 801410c:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 8014110:	4283      	cmp	r3, r0
 8014112:	d007      	beq.n	8014124 <igmp_leave+0x20>
 8014114:	3601      	adds	r6, #1
 8014116:	2e24      	cmp	r6, #36	; 0x24
 8014118:	d1f8      	bne.n	801410c <igmp_leave+0x8>
 801411a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801411e:	b002      	add	sp, #8
 8014120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014124:	2400      	movs	r4, #0
 8014126:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8014180 <igmp_leave+0x7c>
 801412a:	4d16      	ldr	r5, [pc, #88]	; (8014184 <igmp_leave+0x80>)
 801412c:	f8b8 3000 	ldrh.w	r3, [r8]
 8014130:	2118      	movs	r1, #24
 8014132:	9001      	str	r0, [sp, #4]
 8014134:	4814      	ldr	r0, [pc, #80]	; (8014188 <igmp_leave+0x84>)
 8014136:	826b      	strh	r3, [r5, #18]
 8014138:	832c      	strh	r4, [r5, #24]
 801413a:	f000 f830 	bl	801419e <net_chksum>
 801413e:	2204      	movs	r2, #4
 8014140:	8328      	strh	r0, [r5, #24]
 8014142:	eb0d 0102 	add.w	r1, sp, r2
 8014146:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 801414a:	f7ff ff35 	bl	8013fb8 <memcpy.isra.0>
 801414e:	2120      	movs	r1, #32
 8014150:	f105 000e 	add.w	r0, r5, #14
 8014154:	852c      	strh	r4, [r5, #40]	; 0x28
 8014156:	f000 f822 	bl	801419e <net_chksum>
 801415a:	212e      	movs	r1, #46	; 0x2e
 801415c:	8528      	strh	r0, [r5, #40]	; 0x28
 801415e:	4628      	mov	r0, r5
 8014160:	f002 fd30 	bl	8016bc4 <emac_eth_send>
 8014164:	f8b8 3000 	ldrh.w	r3, [r8]
 8014168:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
 801416c:	3301      	adds	r3, #1
 801416e:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8014172:	4620      	mov	r0, r4
 8014174:	f8a8 3000 	strh.w	r3, [r8]
 8014178:	80bc      	strh	r4, [r7, #4]
 801417a:	e7d0      	b.n	801411e <igmp_leave+0x1a>
 801417c:	2001cbc4 	andcs	ip, r1, r4, asr #23
 8014180:	2001cce4 	andcs	ip, r1, r4, ror #25
 8014184:	2001ccec 	andcs	ip, r1, ip, ror #25
 8014188:	2001cd32 	andcs	ip, r1, r2, lsr sp

0801418c <ip_set_ip>:
 801418c:	b510      	push	{r4, lr}
 801418e:	4604      	mov	r4, r0
 8014190:	f7fe f94e 	bl	8012430 <udp_set_ip>
 8014194:	4620      	mov	r0, r4
 8014196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801419a:	f7ff bf57 	b.w	801404c <igmp_set_ip>

0801419e <net_chksum>:
 801419e:	2300      	movs	r3, #0
 80141a0:	f021 0201 	bic.w	r2, r1, #1
 80141a4:	b530      	push	{r4, r5, lr}
 80141a6:	1884      	adds	r4, r0, r2
 80141a8:	42a0      	cmp	r0, r4
 80141aa:	d10b      	bne.n	80141c4 <net_chksum+0x26>
 80141ac:	4291      	cmp	r1, r2
 80141ae:	d004      	beq.n	80141ba <net_chksum+0x1c>
 80141b0:	7802      	ldrb	r2, [r0, #0]
 80141b2:	0212      	lsls	r2, r2, #8
 80141b4:	ba52      	rev16	r2, r2
 80141b6:	b292      	uxth	r2, r2
 80141b8:	4413      	add	r3, r2
 80141ba:	0c1a      	lsrs	r2, r3, #16
 80141bc:	d106      	bne.n	80141cc <net_chksum+0x2e>
 80141be:	43d8      	mvns	r0, r3
 80141c0:	b280      	uxth	r0, r0
 80141c2:	bd30      	pop	{r4, r5, pc}
 80141c4:	f830 5b02 	ldrh.w	r5, [r0], #2
 80141c8:	442b      	add	r3, r5
 80141ca:	e7ed      	b.n	80141a8 <net_chksum+0xa>
 80141cc:	b29b      	uxth	r3, r3
 80141ce:	e7f3      	b.n	80141b8 <net_chksum+0x1a>

080141d0 <memcpy.isra.0>:
 80141d0:	3801      	subs	r0, #1
 80141d2:	440a      	add	r2, r1
 80141d4:	4291      	cmp	r1, r2
 80141d6:	d100      	bne.n	80141da <memcpy.isra.0+0xa>
 80141d8:	4770      	bx	lr
 80141da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80141de:	f800 3f01 	strb.w	r3, [r0, #1]!
 80141e2:	e7f7      	b.n	80141d4 <memcpy.isra.0+0x4>

080141e4 <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 80141e4:	b430      	push	{r4, r5}
 80141e6:	b168      	cbz	r0, 8014204 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 80141e8:	2300      	movs	r3, #0
 80141ea:	7905      	ldrb	r5, [r0, #4]
 80141ec:	5cd4      	ldrb	r4, [r2, r3]
 80141ee:	b11c      	cbz	r4, 80141f8 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 80141f0:	1c5c      	adds	r4, r3, #1
 80141f2:	429d      	cmp	r5, r3
 80141f4:	4623      	mov	r3, r4
 80141f6:	dcf9      	bgt.n	80141ec <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 80141f8:	6804      	ldr	r4, [r0, #0]
 80141fa:	b2db      	uxtb	r3, r3
 80141fc:	69e4      	ldr	r4, [r4, #28]
 80141fe:	46a4      	mov	ip, r4
 8014200:	bc30      	pop	{r4, r5}
 8014202:	4760      	bx	ip
 8014204:	bc30      	pop	{r4, r5}
 8014206:	4770      	bx	lr

08014208 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8014208:	b110      	cbz	r0, 8014210 <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 801420a:	6803      	ldr	r3, [r0, #0]
 801420c:	691b      	ldr	r3, [r3, #16]
 801420e:	4718      	bx	r3
 8014210:	4770      	bx	lr

08014212 <Display::Status(Display7SegmentMessage)>:
 8014212:	7c43      	ldrb	r3, [r0, #17]
 8014214:	b513      	push	{r0, r1, r4, lr}
 8014216:	4604      	mov	r4, r0
 8014218:	b19b      	cbz	r3, 8014242 <Display::Status(Display7SegmentMessage)+0x30>
 801421a:	43c9      	mvns	r1, r1
 801421c:	2312      	movs	r3, #18
 801421e:	7a00      	ldrb	r0, [r0, #8]
 8014220:	f88d 3004 	strb.w	r3, [sp, #4]
 8014224:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8014228:	f88d 1006 	strb.w	r1, [sp, #6]
 801422c:	f88d 3005 	strb.w	r3, [sp, #5]
 8014230:	f002 fd60 	bl	8016cf4 <gd32_i2c_set_address(unsigned char)>
 8014234:	68e0      	ldr	r0, [r4, #12]
 8014236:	f002 fd55 	bl	8016ce4 <gd32_i2c_set_baudrate(unsigned int)>
 801423a:	2103      	movs	r1, #3
 801423c:	a801      	add	r0, sp, #4
 801423e:	f002 fd5f 	bl	8016d00 <gd32_i2c_write(char const*, unsigned int)>
 8014242:	b002      	add	sp, #8
 8014244:	bd10      	pop	{r4, pc}
	...

08014248 <DisplayUdf::DisplayUdf()>:
 8014248:	b510      	push	{r4, lr}
 801424a:	4604      	mov	r4, r0
 801424c:	f000 fffa 	bl	8015244 <Display::Display()>
 8014250:	2202      	movs	r2, #2
 8014252:	2300      	movs	r3, #0
 8014254:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8014258:	4b05      	ldr	r3, [pc, #20]	; (8014270 <DisplayUdf::DisplayUdf()+0x28>)
 801425a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801425e:	601c      	str	r4, [r3, #0]
 8014260:	2301      	movs	r3, #1
 8014262:	f802 3b01 	strb.w	r3, [r2], #1
 8014266:	3301      	adds	r3, #1
 8014268:	2b15      	cmp	r3, #21
 801426a:	d1fa      	bne.n	8014262 <DisplayUdf::DisplayUdf()+0x1a>
 801426c:	4620      	mov	r0, r4
 801426e:	bd10      	pop	{r4, pc}
 8014270:	2001cd54 	andcs	ip, r1, r4, asr sp

08014274 <DisplayUdf::SetTitle(char const*, ...)>:
 8014274:	b40e      	push	{r1, r2, r3}
 8014276:	b517      	push	{r0, r1, r2, r4, lr}
 8014278:	ab05      	add	r3, sp, #20
 801427a:	f853 2b04 	ldr.w	r2, [r3], #4
 801427e:	4604      	mov	r4, r0
 8014280:	211f      	movs	r1, #31
 8014282:	301c      	adds	r0, #28
 8014284:	9301      	str	r3, [sp, #4]
 8014286:	f7f5 faa9 	bl	80097dc <vsnprintf>
 801428a:	2300      	movs	r3, #0
 801428c:	4404      	add	r4, r0
 801428e:	7723      	strb	r3, [r4, #28]
 8014290:	b003      	add	sp, #12
 8014292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014296:	b003      	add	sp, #12
 8014298:	4770      	bx	lr
	...

0801429c <DisplayUdf::ShowEmacStart()>:
 801429c:	b510      	push	{r4, lr}
 801429e:	4604      	mov	r4, r0
 80142a0:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 80142a4:	6980      	ldr	r0, [r0, #24]
 80142a6:	f7ff ffaf 	bl	8014208 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80142aa:	4620      	mov	r0, r4
 80142ac:	4a02      	ldr	r2, [pc, #8]	; (80142b8 <DisplayUdf::ShowEmacStart()+0x1c>)
 80142ae:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80142b2:	f7f4 faa5 	bl	8008800 <Display::Printf(unsigned char, char const*, ...)>
 80142b6:	bd10      	pop	{r4, pc}
 80142b8:	08019f38 	stmdaeq	r1, {r3, r4, r5, r8, r9, sl, fp, ip, pc}

080142bc <DisplayUdf::ShowIpAddress()>:
 80142bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142c0:	4604      	mov	r4, r0
 80142c2:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 80142c6:	b086      	sub	sp, #24
 80142c8:	6980      	ldr	r0, [r0, #24]
 80142ca:	f7ff ff9d 	bl	8014208 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80142ce:	4b13      	ldr	r3, [pc, #76]	; (801431c <DisplayUdf::ShowIpAddress()+0x60>)
 80142d0:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
 80142d4:	681d      	ldr	r5, [r3, #0]
 80142d6:	69a8      	ldr	r0, [r5, #24]
 80142d8:	692e      	ldr	r6, [r5, #16]
 80142da:	f003 fd11 	bl	8017d00 <__popcountsi2>
 80142de:	78eb      	ldrb	r3, [r5, #3]
 80142e0:	fa5f f886 	uxtb.w	r8, r6
 80142e4:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80142e8:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 80142ec:	0e36      	lsrs	r6, r6, #24
 80142ee:	b99b      	cbnz	r3, 8014318 <DisplayUdf::ShowIpAddress()+0x5c>
 80142f0:	786b      	ldrb	r3, [r5, #1]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	bf14      	ite	ne
 80142f6:	2244      	movne	r2, #68	; 0x44
 80142f8:	2253      	moveq	r2, #83	; 0x53
 80142fa:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80142fe:	4643      	mov	r3, r8
 8014300:	4639      	mov	r1, r7
 8014302:	4620      	mov	r0, r4
 8014304:	e9cd a601 	strd	sl, r6, [sp, #4]
 8014308:	4a05      	ldr	r2, [pc, #20]	; (8014320 <DisplayUdf::ShowIpAddress()+0x64>)
 801430a:	f8cd 9000 	str.w	r9, [sp]
 801430e:	f7f4 fa77 	bl	8008800 <Display::Printf(unsigned char, char const*, ...)>
 8014312:	b006      	add	sp, #24
 8014314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014318:	225a      	movs	r2, #90	; 0x5a
 801431a:	e7ee      	b.n	80142fa <DisplayUdf::ShowIpAddress()+0x3e>
 801431c:	2001c724 	andcs	ip, r1, r4, lsr #14
 8014320:	08019f47 	stmdaeq	r1, {r0, r1, r2, r6, r8, r9, sl, fp, ip, pc}

08014324 <DisplayUdf::ShowNetmask()>:
 8014324:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014326:	4604      	mov	r4, r0
 8014328:	4b0b      	ldr	r3, [pc, #44]	; (8014358 <DisplayUdf::ShowNetmask()+0x34>)
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	699b      	ldr	r3, [r3, #24]
 801432e:	0e1a      	lsrs	r2, r3, #24
 8014330:	9202      	str	r2, [sp, #8]
 8014332:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014336:	9201      	str	r2, [sp, #4]
 8014338:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801433c:	9200      	str	r2, [sp, #0]
 801433e:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8014342:	4a06      	ldr	r2, [pc, #24]	; (801435c <DisplayUdf::ShowNetmask()+0x38>)
 8014344:	b2db      	uxtb	r3, r3
 8014346:	f7f4 fa5b 	bl	8008800 <Display::Printf(unsigned char, char const*, ...)>
 801434a:	4620      	mov	r0, r4
 801434c:	b004      	add	sp, #16
 801434e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014352:	f7ff bfb3 	b.w	80142bc <DisplayUdf::ShowIpAddress()>
 8014356:	bf00      	nop
 8014358:	2001c724 	andcs	ip, r1, r4, lsr #14
 801435c:	08019f59 	stmdaeq	r1, {r0, r3, r4, r6, r8, r9, sl, fp, ip, pc}

08014360 <DisplayUdf::ShowGatewayIp()>:
 8014360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014362:	4604      	mov	r4, r0
 8014364:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8014368:	6980      	ldr	r0, [r0, #24]
 801436a:	f7ff ff4d 	bl	8014208 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801436e:	4b0a      	ldr	r3, [pc, #40]	; (8014398 <DisplayUdf::ShowGatewayIp()+0x38>)
 8014370:	4620      	mov	r0, r4
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 8014378:	695b      	ldr	r3, [r3, #20]
 801437a:	0e1a      	lsrs	r2, r3, #24
 801437c:	9202      	str	r2, [sp, #8]
 801437e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014382:	9201      	str	r2, [sp, #4]
 8014384:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014388:	9200      	str	r2, [sp, #0]
 801438a:	b2db      	uxtb	r3, r3
 801438c:	4a03      	ldr	r2, [pc, #12]	; (801439c <DisplayUdf::ShowGatewayIp()+0x3c>)
 801438e:	f7f4 fa37 	bl	8008800 <Display::Printf(unsigned char, char const*, ...)>
 8014392:	b004      	add	sp, #16
 8014394:	bd10      	pop	{r4, pc}
 8014396:	bf00      	nop
 8014398:	2001c724 	andcs	ip, r1, r4, lsr #14
 801439c:	08019f68 	stmdaeq	r1, {r3, r5, r6, r8, r9, sl, fp, ip, pc}

080143a0 <DisplayUdf::ShowHostName()>:
 80143a0:	b510      	push	{r4, lr}
 80143a2:	4604      	mov	r4, r0
 80143a4:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 80143a8:	6980      	ldr	r0, [r0, #24]
 80143aa:	f7ff ff2d 	bl	8014208 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80143ae:	4b05      	ldr	r3, [pc, #20]	; (80143c4 <DisplayUdf::ShowHostName()+0x24>)
 80143b0:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 80143b4:	681a      	ldr	r2, [r3, #0]
 80143b6:	69a0      	ldr	r0, [r4, #24]
 80143b8:	321c      	adds	r2, #28
 80143ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143be:	f7ff bf11 	b.w	80141e4 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80143c2:	bf00      	nop
 80143c4:	2001c724 	andcs	ip, r1, r4, lsr #14

080143c8 <DisplayUdf::Show()>:
 80143c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80143ca:	4604      	mov	r4, r0
 80143cc:	21ff      	movs	r1, #255	; 0xff
 80143ce:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 80143d2:	f100 0250 	add.w	r2, r0, #80	; 0x50
 80143d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80143da:	2806      	cmp	r0, #6
 80143dc:	bf88      	it	hi
 80143de:	f803 1c01 	strbhi.w	r1, [r3, #-1]
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d1f7      	bne.n	80143d6 <DisplayUdf::Show()+0xe>
 80143e6:	2501      	movs	r5, #1
 80143e8:	4629      	mov	r1, r5
 80143ea:	3501      	adds	r5, #1
 80143ec:	69a0      	ldr	r0, [r4, #24]
 80143ee:	b2ed      	uxtb	r5, r5
 80143f0:	f7ff ff0a 	bl	8014208 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80143f4:	2d06      	cmp	r5, #6
 80143f6:	d1f7      	bne.n	80143e8 <DisplayUdf::Show()+0x20>
 80143f8:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80143fc:	69a0      	ldr	r0, [r4, #24]
 80143fe:	f104 021c 	add.w	r2, r4, #28
 8014402:	f7ff feef 	bl	80141e4 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8014406:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 801440a:	69a0      	ldr	r0, [r4, #24]
 801440c:	4a0d      	ldr	r2, [pc, #52]	; (8014444 <DisplayUdf::Show()+0x7c>)
 801440e:	f7ff fee9 	bl	80141e4 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8014412:	4b0d      	ldr	r3, [pc, #52]	; (8014448 <DisplayUdf::Show()+0x80>)
 8014414:	4a0d      	ldr	r2, [pc, #52]	; (801444c <DisplayUdf::Show()+0x84>)
 8014416:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 801441a:	9300      	str	r3, [sp, #0]
 801441c:	4620      	mov	r0, r4
 801441e:	2303      	movs	r3, #3
 8014420:	f7f4 f9ee 	bl	8008800 <Display::Printf(unsigned char, char const*, ...)>
 8014424:	4620      	mov	r0, r4
 8014426:	f7ff ff49 	bl	80142bc <DisplayUdf::ShowIpAddress()>
 801442a:	4620      	mov	r0, r4
 801442c:	f7ff ff98 	bl	8014360 <DisplayUdf::ShowGatewayIp()>
 8014430:	4620      	mov	r0, r4
 8014432:	f7ff ff77 	bl	8014324 <DisplayUdf::ShowNetmask()>
 8014436:	4620      	mov	r0, r4
 8014438:	b003      	add	sp, #12
 801443a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801443e:	f7ff bfaf 	b.w	80143a0 <DisplayUdf::ShowHostName()>
 8014442:	bf00      	nop
 8014444:	08017f79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 8014448:	2001cdec 	andcs	ip, r1, ip, ror #27
 801444c:	08019f77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, pc}

08014450 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8014450:	3901      	subs	r1, #1
 8014452:	b510      	push	{r4, lr}
 8014454:	4604      	mov	r4, r0
 8014456:	2903      	cmp	r1, #3
 8014458:	d814      	bhi.n	8014484 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 801445a:	e8df f001 	tbb	[pc, r1]
 801445e:	281b1402 	ldmdacs	fp, {r1, sl, ip}
 8014462:	4b14      	ldr	r3, [pc, #80]	; (80144b4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8014464:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8014468:	6818      	ldr	r0, [r3, #0]
 801446a:	f7ff fed2 	bl	8014212 <Display::Status(Display7SegmentMessage)>
 801446e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8014472:	69a0      	ldr	r0, [r4, #24]
 8014474:	f7ff fec8 	bl	8014208 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8014478:	4a0f      	ldr	r2, [pc, #60]	; (80144b8 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 801447a:	4620      	mov	r0, r4
 801447c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8014480:	f7f4 f9be 	bl	8008800 <Display::Printf(unsigned char, char const*, ...)>
 8014484:	bd10      	pop	{r4, pc}
 8014486:	f248 0180 	movw	r1, #32896	; 0x8080
 801448a:	4b0a      	ldr	r3, [pc, #40]	; (80144b4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 801448c:	6818      	ldr	r0, [r3, #0]
 801448e:	f7ff fec0 	bl	8014212 <Display::Status(Display7SegmentMessage)>
 8014492:	e7f7      	b.n	8014484 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8014494:	4b07      	ldr	r3, [pc, #28]	; (80144b4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8014496:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 801449a:	6818      	ldr	r0, [r3, #0]
 801449c:	f7ff feb9 	bl	8014212 <Display::Status(Display7SegmentMessage)>
 80144a0:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80144a4:	69a0      	ldr	r0, [r4, #24]
 80144a6:	f7ff feaf 	bl	8014208 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80144aa:	4a04      	ldr	r2, [pc, #16]	; (80144bc <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 80144ac:	e7e5      	b.n	801447a <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 80144ae:	f645 3179 	movw	r1, #23417	; 0x5b79
 80144b2:	e7ea      	b.n	801448a <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3a>
 80144b4:	2001cd5c 	andcs	ip, r1, ip, asr sp
 80144b8:	08019f86 	stmdaeq	r1, {r1, r2, r7, r8, r9, sl, fp, ip, pc}
 80144bc:	08019f94 	stmdaeq	r1, {r2, r4, r7, r8, r9, sl, fp, ip, pc}

080144c0 <DisplayUdf::ShowShutdown()>:
 80144c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144c4:	4604      	mov	r4, r0
 80144c6:	6980      	ldr	r0, [r0, #24]
 80144c8:	b1d0      	cbz	r0, 8014500 <DisplayUdf::ShowShutdown()+0x40>
 80144ca:	f890 8005 	ldrb.w	r8, [r0, #5]
 80144ce:	6803      	ldr	r3, [r0, #0]
 80144d0:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 80144d4:	b2ed      	uxtb	r5, r5
 80144d6:	462a      	mov	r2, r5
 80144d8:	2100      	movs	r1, #0
 80144da:	6a1b      	ldr	r3, [r3, #32]
 80144dc:	7906      	ldrb	r6, [r0, #4]
 80144de:	2700      	movs	r7, #0
 80144e0:	4798      	blx	r3
 80144e2:	3e01      	subs	r6, #1
 80144e4:	42b7      	cmp	r7, r6
 80144e6:	69a0      	ldr	r0, [r4, #24]
 80144e8:	d311      	bcc.n	801450e <DisplayUdf::ShowShutdown()+0x4e>
 80144ea:	b120      	cbz	r0, 80144f6 <DisplayUdf::ShowShutdown()+0x36>
 80144ec:	6803      	ldr	r3, [r0, #0]
 80144ee:	462a      	mov	r2, r5
 80144f0:	2100      	movs	r1, #0
 80144f2:	6a1b      	ldr	r3, [r3, #32]
 80144f4:	4798      	blx	r3
 80144f6:	4641      	mov	r1, r8
 80144f8:	4a08      	ldr	r2, [pc, #32]	; (801451c <DisplayUdf::ShowShutdown()+0x5c>)
 80144fa:	69a0      	ldr	r0, [r4, #24]
 80144fc:	f7ff fe72 	bl	80141e4 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8014500:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 8014504:	4620      	mov	r0, r4
 8014506:	f7ff fe84 	bl	8014212 <Display::Status(Display7SegmentMessage)>
 801450a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801450e:	b118      	cbz	r0, 8014518 <DisplayUdf::ShowShutdown()+0x58>
 8014510:	6803      	ldr	r3, [r0, #0]
 8014512:	2120      	movs	r1, #32
 8014514:	695b      	ldr	r3, [r3, #20]
 8014516:	4798      	blx	r3
 8014518:	3701      	adds	r7, #1
 801451a:	e7e3      	b.n	80144e4 <DisplayUdf::ShowShutdown()+0x24>
 801451c:	08019fa2 	stmdaeq	r1, {r1, r5, r7, r8, r9, sl, fp, ip, pc}

08014520 <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 8014520:	1e4b      	subs	r3, r1, #1
 8014522:	2b05      	cmp	r3, #5
 8014524:	b530      	push	{r4, r5, lr}
 8014526:	d80f      	bhi.n	8014548 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 8014528:	2300      	movs	r3, #0
 801452a:	f100 043c 	add.w	r4, r0, #60	; 0x3c
 801452e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014532:	428d      	cmp	r5, r1
 8014534:	d109      	bne.n	801454a <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 8014536:	1884      	adds	r4, r0, r2
 8014538:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 801453c:	4403      	add	r3, r0
 801453e:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 8014542:	4410      	add	r0, r2
 8014544:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8014548:	bd30      	pop	{r4, r5, pc}
 801454a:	3301      	adds	r3, #1
 801454c:	2b14      	cmp	r3, #20
 801454e:	d1ee      	bne.n	801452e <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 8014550:	e7f7      	b.n	8014542 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>
	...

08014554 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 8014554:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014556:	88c6      	ldrh	r6, [r0, #6]
 8014558:	8885      	ldrh	r5, [r0, #4]
 801455a:	42ae      	cmp	r6, r5
 801455c:	d216      	bcs.n	801458c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 801455e:	4604      	mov	r4, r0
 8014560:	6800      	ldr	r0, [r0, #0]
 8014562:	1bad      	subs	r5, r5, r6
 8014564:	4430      	add	r0, r6
 8014566:	7a26      	ldrb	r6, [r4, #8]
 8014568:	b923      	cbnz	r3, 8014574 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 801456a:	b926      	cbnz	r6, 8014576 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 801456c:	9200      	str	r2, [sp, #0]
 801456e:	460b      	mov	r3, r1
 8014570:	4a09      	ldr	r2, [pc, #36]	; (8014598 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 8014572:	e003      	b.n	801457c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8014574:	b166      	cbz	r6, 8014590 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 8014576:	460b      	mov	r3, r1
 8014578:	9200      	str	r2, [sp, #0]
 801457a:	4a08      	ldr	r2, [pc, #32]	; (801459c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 801457c:	4629      	mov	r1, r5
 801457e:	f7f5 f915 	bl	80097ac <snprintf>
 8014582:	4285      	cmp	r5, r0
 8014584:	bfa2      	ittt	ge
 8014586:	88e3      	ldrhge	r3, [r4, #6]
 8014588:	181b      	addge	r3, r3, r0
 801458a:	80e3      	strhge	r3, [r4, #6]
 801458c:	b002      	add	sp, #8
 801458e:	bd70      	pop	{r4, r5, r6, pc}
 8014590:	9200      	str	r2, [sp, #0]
 8014592:	460b      	mov	r3, r1
 8014594:	4a02      	ldr	r2, [pc, #8]	; (80145a0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 8014596:	e7f1      	b.n	801457c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8014598:	080180d1 	stmdaeq	r1, {r0, r4, r6, r7, pc}
 801459c:	080180c8 	stmdaeq	r1, {r3, r6, r7, pc}
 80145a0:	080180d2 	stmdaeq	r1, {r1, r4, r6, r7, pc}

080145a4 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 80145a4:	b510      	push	{r4, lr}
 80145a6:	2220      	movs	r2, #32
 80145a8:	4604      	mov	r4, r0
 80145aa:	f840 1b04 	str.w	r1, [r0], #4
 80145ae:	2100      	movs	r1, #0
 80145b0:	f001 fae0 	bl	8015b74 <memset>
 80145b4:	f647 7305 	movw	r3, #32517	; 0x7f05
 80145b8:	4620      	mov	r0, r4
 80145ba:	84a3      	strh	r3, [r4, #36]	; 0x24
 80145bc:	bd10      	pop	{r4, pc}

080145be <DisplayUdfParams::Load()>:
 80145be:	b508      	push	{r3, lr}
 80145c0:	2300      	movs	r3, #0
 80145c2:	4601      	mov	r1, r0
 80145c4:	6043      	str	r3, [r0, #4]
 80145c6:	6800      	ldr	r0, [r0, #0]
 80145c8:	b120      	cbz	r0, 80145d4 <DisplayUdfParams::Load()+0x16>
 80145ca:	6803      	ldr	r3, [r0, #0]
 80145cc:	3104      	adds	r1, #4
 80145ce:	68db      	ldr	r3, [r3, #12]
 80145d0:	4798      	blx	r3
 80145d2:	2001      	movs	r0, #1
 80145d4:	bd08      	pop	{r3, pc}
	...

080145d8 <DisplayUdfParams::Load(char const*, unsigned int)>:
 80145d8:	6803      	ldr	r3, [r0, #0]
 80145da:	b1d3      	cbz	r3, 8014612 <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 80145dc:	2300      	movs	r3, #0
 80145de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80145e0:	460d      	mov	r5, r1
 80145e2:	4616      	mov	r6, r2
 80145e4:	4604      	mov	r4, r0
 80145e6:	6043      	str	r3, [r0, #4]
 80145e8:	4602      	mov	r2, r0
 80145ea:	490a      	ldr	r1, [pc, #40]	; (8014614 <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 80145ec:	4668      	mov	r0, sp
 80145ee:	f000 fc0b 	bl	8014e08 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 80145f2:	4632      	mov	r2, r6
 80145f4:	4629      	mov	r1, r5
 80145f6:	4668      	mov	r0, sp
 80145f8:	f000 fc0a 	bl	8014e10 <ReadConfigFile::Read(char const*, unsigned int)>
 80145fc:	4621      	mov	r1, r4
 80145fe:	f851 0b04 	ldr.w	r0, [r1], #4
 8014602:	6803      	ldr	r3, [r0, #0]
 8014604:	689b      	ldr	r3, [r3, #8]
 8014606:	4798      	blx	r3
 8014608:	4668      	mov	r0, sp
 801460a:	f000 fc00 	bl	8014e0e <ReadConfigFile::~ReadConfigFile()>
 801460e:	b002      	add	sp, #8
 8014610:	bd70      	pop	{r4, r5, r6, pc}
 8014612:	4770      	bx	lr
 8014614:	080146e1 	stmdaeq	r1, {r0, r5, r6, r7, r9, sl, lr}

08014618 <DisplayUdfParams::callbackFunction(char const*)>:
 8014618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801461a:	460e      	mov	r6, r1
 801461c:	4604      	mov	r4, r0
 801461e:	492c      	ldr	r1, [pc, #176]	; (80146d0 <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 8014620:	4630      	mov	r0, r6
 8014622:	f10d 0207 	add.w	r2, sp, #7
 8014626:	f000 fd55 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801462a:	b968      	cbnz	r0, 8014648 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 801462c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014630:	6863      	ldr	r3, [r4, #4]
 8014632:	2a7f      	cmp	r2, #127	; 0x7f
 8014634:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8014638:	bf14      	ite	ne
 801463a:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 801463e:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 8014642:	6063      	str	r3, [r4, #4]
 8014644:	b003      	add	sp, #12
 8014646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014648:	4630      	mov	r0, r6
 801464a:	4922      	ldr	r1, [pc, #136]	; (80146d4 <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 801464c:	f10d 0207 	add.w	r2, sp, #7
 8014650:	f000 fd40 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8014654:	b958      	cbnz	r0, 801466e <DisplayUdfParams::callbackFunction(char const*)+0x56>
 8014656:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801465a:	6863      	ldr	r3, [r4, #4]
 801465c:	2a05      	cmp	r2, #5
 801465e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8014662:	bf14      	ite	ne
 8014664:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8014668:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 801466c:	e7e9      	b.n	8014642 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 801466e:	4630      	mov	r0, r6
 8014670:	4919      	ldr	r1, [pc, #100]	; (80146d8 <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 8014672:	f10d 0207 	add.w	r2, sp, #7
 8014676:	f000 fd2d 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801467a:	b948      	cbnz	r0, 8014690 <DisplayUdfParams::callbackFunction(char const*)+0x78>
 801467c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014680:	6863      	ldr	r3, [r4, #4]
 8014682:	b112      	cbz	r2, 801468a <DisplayUdfParams::callbackFunction(char const*)+0x72>
 8014684:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014688:	e7db      	b.n	8014642 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 801468a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801468e:	e7d8      	b.n	8014642 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8014690:	2500      	movs	r5, #0
 8014692:	4f12      	ldr	r7, [pc, #72]	; (80146dc <DisplayUdfParams::callbackFunction(char const*)+0xc4>)
 8014694:	4630      	mov	r0, r6
 8014696:	f857 1b04 	ldr.w	r1, [r7], #4
 801469a:	f10d 0207 	add.w	r2, sp, #7
 801469e:	f000 fd19 	bl	80150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80146a2:	b980      	cbnz	r0, 80146c6 <DisplayUdfParams::callbackFunction(char const*)+0xae>
 80146a4:	2301      	movs	r3, #1
 80146a6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80146aa:	40ab      	lsls	r3, r5
 80146ac:	1e4e      	subs	r6, r1, #1
 80146ae:	2e05      	cmp	r6, #5
 80146b0:	6862      	ldr	r2, [r4, #4]
 80146b2:	4425      	add	r5, r4
 80146b4:	d802      	bhi.n	80146bc <DisplayUdfParams::callbackFunction(char const*)+0xa4>
 80146b6:	7229      	strb	r1, [r5, #8]
 80146b8:	4313      	orrs	r3, r2
 80146ba:	e7c2      	b.n	8014642 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80146bc:	ea22 0203 	bic.w	r2, r2, r3
 80146c0:	7228      	strb	r0, [r5, #8]
 80146c2:	6062      	str	r2, [r4, #4]
 80146c4:	e7be      	b.n	8014644 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 80146c6:	3501      	adds	r5, #1
 80146c8:	2d14      	cmp	r5, #20
 80146ca:	d1e3      	bne.n	8014694 <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 80146cc:	e7ba      	b.n	8014644 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 80146ce:	bf00      	nop
 80146d0:	0801a062 	stmdaeq	r1, {r1, r5, r6, sp, pc}
 80146d4:	0801a02a 	stmdaeq	r1, {r1, r3, r5, sp, pc}
 80146d8:	0801a038 	stmdaeq	r1, {r3, r4, r5, sp, pc}
 80146dc:	08019fb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, fp, ip, pc}

080146e0 <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 80146e0:	f7ff bf9a 	b.w	8014618 <DisplayUdfParams::callbackFunction(char const*)>

080146e4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 80146e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146e8:	4604      	mov	r4, r0
 80146ea:	4615      	mov	r5, r2
 80146ec:	461e      	mov	r6, r3
 80146ee:	b086      	sub	sp, #24
 80146f0:	3004      	adds	r0, #4
 80146f2:	b379      	cbz	r1, 8014754 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 80146f4:	2222      	movs	r2, #34	; 0x22
 80146f6:	f001 fa26 	bl	8015b46 <memmove>
 80146fa:	462a      	mov	r2, r5
 80146fc:	4633      	mov	r3, r6
 80146fe:	493d      	ldr	r1, [pc, #244]	; (80147f4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x110>)
 8014700:	a803      	add	r0, sp, #12
 8014702:	f000 fab1 	bl	8014c68 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8014706:	6863      	ldr	r3, [r4, #4]
 8014708:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 801470c:	493a      	ldr	r1, [pc, #232]	; (80147f8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 801470e:	f3c3 7340 	ubfx	r3, r3, #29, #1
 8014712:	a803      	add	r0, sp, #12
 8014714:	f7ff ff1e 	bl	8014554 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8014718:	6863      	ldr	r3, [r4, #4]
 801471a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 801471e:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8014722:	4936      	ldr	r1, [pc, #216]	; (80147fc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 8014724:	a803      	add	r0, sp, #12
 8014726:	f7ff ff15 	bl	8014554 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 801472a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801472e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8014732:	6863      	ldr	r3, [r4, #4]
 8014734:	42aa      	cmp	r2, r5
 8014736:	d226      	bcs.n	8014786 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 8014738:	9803      	ldr	r0, [sp, #12]
 801473a:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 801473e:	4410      	add	r0, r2
 8014740:	eba5 0502 	sub.w	r5, r5, r2
 8014744:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8014748:	d10b      	bne.n	8014762 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 801474a:	b962      	cbnz	r2, 8014766 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 801474c:	9200      	str	r2, [sp, #0]
 801474e:	4b2c      	ldr	r3, [pc, #176]	; (8014800 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8014750:	4a2c      	ldr	r2, [pc, #176]	; (8014804 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 8014752:	e00e      	b.n	8014772 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8014754:	6823      	ldr	r3, [r4, #0]
 8014756:	4601      	mov	r1, r0
 8014758:	681a      	ldr	r2, [r3, #0]
 801475a:	4618      	mov	r0, r3
 801475c:	68d2      	ldr	r2, [r2, #12]
 801475e:	4790      	blx	r2
 8014760:	e7cb      	b.n	80146fa <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 8014762:	2a00      	cmp	r2, #0
 8014764:	d041      	beq.n	80147ea <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 8014766:	3b00      	subs	r3, #0
 8014768:	bf18      	it	ne
 801476a:	2301      	movne	r3, #1
 801476c:	4a26      	ldr	r2, [pc, #152]	; (8014808 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 801476e:	9300      	str	r3, [sp, #0]
 8014770:	4b23      	ldr	r3, [pc, #140]	; (8014800 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8014772:	4629      	mov	r1, r5
 8014774:	f7f5 f81a 	bl	80097ac <snprintf>
 8014778:	4285      	cmp	r5, r0
 801477a:	bfa2      	ittt	ge
 801477c:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8014780:	181b      	addge	r3, r3, r0
 8014782:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8014786:	2500      	movs	r5, #0
 8014788:	2701      	movs	r7, #1
 801478a:	4e20      	ldr	r6, [pc, #128]	; (801480c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 801478c:	f104 0808 	add.w	r8, r4, #8
 8014790:	f856 1b04 	ldr.w	r1, [r6], #4
 8014794:	780b      	ldrb	r3, [r1, #0]
 8014796:	b15b      	cbz	r3, 80147b0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 8014798:	6862      	ldr	r2, [r4, #4]
 801479a:	fa07 f305 	lsl.w	r3, r7, r5
 801479e:	4393      	bics	r3, r2
 80147a0:	bf0c      	ite	eq
 80147a2:	2301      	moveq	r3, #1
 80147a4:	2300      	movne	r3, #0
 80147a6:	f818 2005 	ldrb.w	r2, [r8, r5]
 80147aa:	a803      	add	r0, sp, #12
 80147ac:	f7ff fed2 	bl	8014554 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80147b0:	3501      	adds	r5, #1
 80147b2:	2d14      	cmp	r5, #20
 80147b4:	d1ec      	bne.n	8014790 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 80147b6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80147ba:	b17b      	cbz	r3, 80147dc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xf8>
 80147bc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80147c0:	9b03      	ldr	r3, [sp, #12]
 80147c2:	4413      	add	r3, r2
 80147c4:	227d      	movs	r2, #125	; 0x7d
 80147c6:	f803 2c01 	strb.w	r2, [r3, #-1]
 80147ca:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80147ce:	9903      	ldr	r1, [sp, #12]
 80147d0:	54ca      	strb	r2, [r1, r3]
 80147d2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80147d6:	3301      	adds	r3, #1
 80147d8:	f8ad 3012 	strh.w	r3, [sp, #18]
 80147dc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80147e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147e2:	601a      	str	r2, [r3, #0]
 80147e4:	b006      	add	sp, #24
 80147e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147ea:	2301      	movs	r3, #1
 80147ec:	4a08      	ldr	r2, [pc, #32]	; (8014810 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 80147ee:	9300      	str	r3, [sp, #0]
 80147f0:	4b03      	ldr	r3, [pc, #12]	; (8014800 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 80147f2:	e7be      	b.n	8014772 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 80147f4:	0801a056 	stmdaeq	r1, {r1, r2, r4, r6, sp, pc}
 80147f8:	0801a062 	stmdaeq	r1, {r1, r5, r6, sp, pc}
 80147fc:	0801a02a 	stmdaeq	r1, {r1, r3, r5, sp, pc}
 8014800:	0801a038 	stmdaeq	r1, {r3, r4, r5, sp, pc}
 8014804:	080180d1 	stmdaeq	r1, {r0, r4, r6, r7, pc}
 8014808:	080180c8 	stmdaeq	r1, {r3, r6, r7, pc}
 801480c:	08019fb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, fp, ip, pc}
 8014810:	080180d2 	stmdaeq	r1, {r1, r4, r6, r7, pc}

08014814 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 8014814:	b513      	push	{r0, r1, r4, lr}
 8014816:	6804      	ldr	r4, [r0, #0]
 8014818:	b914      	cbnz	r4, 8014820 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 801481a:	601c      	str	r4, [r3, #0]
 801481c:	b002      	add	sp, #8
 801481e:	bd10      	pop	{r4, pc}
 8014820:	9300      	str	r3, [sp, #0]
 8014822:	4613      	mov	r3, r2
 8014824:	460a      	mov	r2, r1
 8014826:	2100      	movs	r1, #0
 8014828:	f7ff ff5c 	bl	80146e4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 801482c:	e7f6      	b.n	801481c <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

0801482e <DisplayUdfParams::Set(DisplayUdf*)>:
 801482e:	6843      	ldr	r3, [r0, #4]
 8014830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014834:	009a      	lsls	r2, r3, #2
 8014836:	4604      	mov	r4, r0
 8014838:	460e      	mov	r6, r1
 801483a:	d506      	bpl.n	801484a <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 801483c:	6988      	ldr	r0, [r1, #24]
 801483e:	b120      	cbz	r0, 801484a <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8014840:	6803      	ldr	r3, [r0, #0]
 8014842:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8014846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014848:	4798      	blx	r3
 801484a:	6863      	ldr	r3, [r4, #4]
 801484c:	69b0      	ldr	r0, [r6, #24]
 801484e:	00db      	lsls	r3, r3, #3
 8014850:	bf41      	itttt	mi
 8014852:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 8014856:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 801485a:	4353      	mulmi	r3, r2
 801485c:	6173      	strmi	r3, [r6, #20]
 801485e:	6861      	ldr	r1, [r4, #4]
 8014860:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8014864:	b110      	cbz	r0, 801486c <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 8014866:	6803      	ldr	r3, [r0, #0]
 8014868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801486a:	4798      	blx	r3
 801486c:	2500      	movs	r5, #0
 801486e:	2701      	movs	r7, #1
 8014870:	f104 0808 	add.w	r8, r4, #8
 8014874:	6862      	ldr	r2, [r4, #4]
 8014876:	fa07 f305 	lsl.w	r3, r7, r5
 801487a:	4393      	bics	r3, r2
 801487c:	d105      	bne.n	801488a <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 801487e:	462a      	mov	r2, r5
 8014880:	4630      	mov	r0, r6
 8014882:	f818 1005 	ldrb.w	r1, [r8, r5]
 8014886:	f7ff fe4b 	bl	8014520 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 801488a:	3501      	adds	r5, #1
 801488c:	2d14      	cmp	r5, #20
 801488e:	d1f1      	bne.n	8014874 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 8014890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014894 <DisplayUdfParams::Dump()>:
 8014894:	4770      	bx	lr

08014896 <DisplayUdf::ShowNodeName(ArtNetNode*)>:
 8014896:	b570      	push	{r4, r5, r6, lr}
 8014898:	4605      	mov	r5, r0
 801489a:	6980      	ldr	r0, [r0, #24]
 801489c:	460c      	mov	r4, r1
 801489e:	b120      	cbz	r0, 80148aa <DisplayUdf::ShowNodeName(ArtNetNode*)+0x14>
 80148a0:	6803      	ldr	r3, [r0, #0]
 80148a2:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 80148a6:	691b      	ldr	r3, [r3, #16]
 80148a8:	4798      	blx	r3
 80148aa:	69a8      	ldr	r0, [r5, #24]
 80148ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80148b0:	b190      	cbz	r0, 80148d8 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x42>
 80148b2:	2300      	movs	r3, #0
 80148b4:	7906      	ldrb	r6, [r0, #4]
 80148b6:	344f      	adds	r4, #79	; 0x4f
 80148b8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80148bc:	b119      	cbz	r1, 80148c6 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x30>
 80148be:	1c59      	adds	r1, r3, #1
 80148c0:	429e      	cmp	r6, r3
 80148c2:	460b      	mov	r3, r1
 80148c4:	dcf8      	bgt.n	80148b8 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x22>
 80148c6:	6801      	ldr	r1, [r0, #0]
 80148c8:	b2db      	uxtb	r3, r3
 80148ca:	69cc      	ldr	r4, [r1, #28]
 80148cc:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 80148d0:	46a4      	mov	ip, r4
 80148d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148d6:	4760      	bx	ip
 80148d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080148dc <DisplayUdf::ShowUniverse(ArtNetNode*)>:
 80148dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148e0:	460c      	mov	r4, r1
 80148e2:	b08b      	sub	sp, #44	; 0x2c
 80148e4:	4606      	mov	r6, r0
 80148e6:	2301      	movs	r3, #1
 80148e8:	2100      	movs	r1, #0
 80148ea:	4620      	mov	r0, r4
 80148ec:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 80148f0:	f7f5 fd28 	bl	800a344 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 80148f4:	b350      	cbz	r0, 801494c <DisplayUdf::ShowUniverse(ArtNetNode*)+0x70>
 80148f6:	2100      	movs	r1, #0
 80148f8:	4620      	mov	r0, r4
 80148fa:	f896 9040 	ldrb.w	r9, [r6, #64]	; 0x40
 80148fe:	f7f5 fd3b 	bl	800a378 <ArtNetNode::GetNetSwitch(unsigned int) const>
 8014902:	2100      	movs	r1, #0
 8014904:	4605      	mov	r5, r0
 8014906:	4620      	mov	r0, r4
 8014908:	f7f5 fd32 	bl	800a370 <ArtNetNode::GetSubnetSwitch(unsigned int) const>
 801490c:	2100      	movs	r1, #0
 801490e:	4607      	mov	r7, r0
 8014910:	4620      	mov	r0, r4
 8014912:	f89d a027 	ldrb.w	sl, [sp, #39]	; 0x27
 8014916:	f7f5 febc 	bl	800a692 <ArtNetNode::GetMergeMode(unsigned int) const>
 801491a:	4a2d      	ldr	r2, [pc, #180]	; (80149d0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf4>)
 801491c:	4b2d      	ldr	r3, [pc, #180]	; (80149d4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf8>)
 801491e:	2100      	movs	r1, #0
 8014920:	2800      	cmp	r0, #0
 8014922:	bf0c      	ite	eq
 8014924:	4690      	moveq	r8, r2
 8014926:	4698      	movne	r8, r3
 8014928:	4620      	mov	r0, r4
 801492a:	f7f5 fe81 	bl	800a630 <ArtNetNode::GetPortProtocol(unsigned int) const>
 801492e:	4a2a      	ldr	r2, [pc, #168]	; (80149d8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xfc>)
 8014930:	4b2a      	ldr	r3, [pc, #168]	; (80149dc <DisplayUdf::ShowUniverse(ArtNetNode*)+0x100>)
 8014932:	4649      	mov	r1, r9
 8014934:	2800      	cmp	r0, #0
 8014936:	bf18      	it	ne
 8014938:	4613      	movne	r3, r2
 801493a:	e9cd 7a00 	strd	r7, sl, [sp]
 801493e:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8014942:	4630      	mov	r0, r6
 8014944:	462b      	mov	r3, r5
 8014946:	4a26      	ldr	r2, [pc, #152]	; (80149e0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x104>)
 8014948:	f7f3 ff5a 	bl	8008800 <Display::Printf(unsigned char, char const*, ...)>
 801494c:	2500      	movs	r5, #0
 801494e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80149dc <DisplayUdf::ShowUniverse(ArtNetNode*)+0x100>
 8014952:	4629      	mov	r1, r5
 8014954:	2301      	movs	r3, #1
 8014956:	4620      	mov	r0, r4
 8014958:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 801495c:	f7f5 fcf2 	bl	800a344 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8014960:	46a9      	mov	r9, r5
 8014962:	3501      	adds	r5, #1
 8014964:	b378      	cbz	r0, 80149c6 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xea>
 8014966:	f106 0343 	add.w	r3, r6, #67	; 0x43
 801496a:	2100      	movs	r1, #0
 801496c:	4620      	mov	r0, r4
 801496e:	f813 b005 	ldrb.w	fp, [r3, r5]
 8014972:	f7f5 fd01 	bl	800a378 <ArtNetNode::GetNetSwitch(unsigned int) const>
 8014976:	2100      	movs	r1, #0
 8014978:	4607      	mov	r7, r0
 801497a:	4620      	mov	r0, r4
 801497c:	f7f5 fcf8 	bl	800a370 <ArtNetNode::GetSubnetSwitch(unsigned int) const>
 8014980:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8014984:	4680      	mov	r8, r0
 8014986:	4649      	mov	r1, r9
 8014988:	4620      	mov	r0, r4
 801498a:	9307      	str	r3, [sp, #28]
 801498c:	f7f5 fe81 	bl	800a692 <ArtNetNode::GetMergeMode(unsigned int) const>
 8014990:	4b10      	ldr	r3, [pc, #64]	; (80149d4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf8>)
 8014992:	4a0f      	ldr	r2, [pc, #60]	; (80149d0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf4>)
 8014994:	4649      	mov	r1, r9
 8014996:	2800      	cmp	r0, #0
 8014998:	bf18      	it	ne
 801499a:	461a      	movne	r2, r3
 801499c:	4620      	mov	r0, r4
 801499e:	9206      	str	r2, [sp, #24]
 80149a0:	f7f5 fe46 	bl	800a630 <ArtNetNode::GetPortProtocol(unsigned int) const>
 80149a4:	490c      	ldr	r1, [pc, #48]	; (80149d8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xfc>)
 80149a6:	9a06      	ldr	r2, [sp, #24]
 80149a8:	2800      	cmp	r0, #0
 80149aa:	bf08      	it	eq
 80149ac:	4651      	moveq	r1, sl
 80149ae:	9b07      	ldr	r3, [sp, #28]
 80149b0:	9104      	str	r1, [sp, #16]
 80149b2:	e9cd 8301 	strd	r8, r3, [sp, #4]
 80149b6:	9203      	str	r2, [sp, #12]
 80149b8:	462b      	mov	r3, r5
 80149ba:	4659      	mov	r1, fp
 80149bc:	4630      	mov	r0, r6
 80149be:	4a09      	ldr	r2, [pc, #36]	; (80149e4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x108>)
 80149c0:	9700      	str	r7, [sp, #0]
 80149c2:	f7f3 ff1d 	bl	8008800 <Display::Printf(unsigned char, char const*, ...)>
 80149c6:	2d04      	cmp	r5, #4
 80149c8:	d1c3      	bne.n	8014952 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x76>
 80149ca:	b00b      	add	sp, #44	; 0x2c
 80149cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149d0:	08017ff9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 80149d4:	08017ffd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 80149d8:	08018009 	stmdaeq	r1, {r0, r3, pc}
 80149dc:	0801a06c 	stmdaeq	r1, {r2, r3, r5, r6, sp, pc}
 80149e0:	0801a071 	stmdaeq	r1, {r0, r4, r5, r6, sp, pc}
 80149e4:	0801a085 	stmdaeq	r1, {r0, r2, r7, sp, pc}

080149e8 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
 80149e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80149ec:	4606      	mov	r6, r0
 80149ee:	2541      	movs	r5, #65	; 0x41
 80149f0:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8014a30 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x48>
 80149f4:	b085      	sub	sp, #20
 80149f6:	f100 084a 	add.w	r8, r0, #74	; 0x4a
 80149fa:	f201 776c 	addw	r7, r1, #1900	; 0x76c
 80149fe:	012b      	lsls	r3, r5, #4
 8014a00:	58fc      	ldr	r4, [r7, r3]
 8014a02:	464a      	mov	r2, r9
 8014a04:	0e23      	lsrs	r3, r4, #24
 8014a06:	9303      	str	r3, [sp, #12]
 8014a08:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8014a0c:	9302      	str	r3, [sp, #8]
 8014a0e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8014a12:	b2e4      	uxtb	r4, r4
 8014a14:	9301      	str	r3, [sp, #4]
 8014a16:	9400      	str	r4, [sp, #0]
 8014a18:	462b      	mov	r3, r5
 8014a1a:	4630      	mov	r0, r6
 8014a1c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014a20:	3501      	adds	r5, #1
 8014a22:	f7f3 feed 	bl	8008800 <Display::Printf(unsigned char, char const*, ...)>
 8014a26:	2d45      	cmp	r5, #69	; 0x45
 8014a28:	d1e9      	bne.n	80149fe <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x16>
 8014a2a:	b005      	add	sp, #20
 8014a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a30:	0801a09b 	stmdaeq	r1, {r0, r1, r3, r4, r7, sp, pc}

08014a34 <DisplayUdf::Show(ArtNetNode*)>:
 8014a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014a36:	4604      	mov	r4, r0
 8014a38:	460d      	mov	r5, r1
 8014a3a:	f7ff fcc5 	bl	80143c8 <DisplayUdf::Show()>
 8014a3e:	4629      	mov	r1, r5
 8014a40:	4620      	mov	r0, r4
 8014a42:	f7ff ff28 	bl	8014896 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 8014a46:	4629      	mov	r1, r5
 8014a48:	4620      	mov	r0, r4
 8014a4a:	f7ff ff47 	bl	80148dc <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8014a4e:	4629      	mov	r1, r5
 8014a50:	4620      	mov	r0, r4
 8014a52:	f7ff ffc9 	bl	80149e8 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>
 8014a56:	f895 26ee 	ldrb.w	r2, [r5, #1774]	; 0x6ee
 8014a5a:	f895 36ef 	ldrb.w	r3, [r5, #1775]	; 0x6ef
 8014a5e:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8014a62:	4413      	add	r3, r2
 8014a64:	4620      	mov	r0, r4
 8014a66:	4a0d      	ldr	r2, [pc, #52]	; (8014a9c <DisplayUdf::Show(ArtNetNode*)+0x68>)
 8014a68:	f7f3 feca 	bl	8008800 <Display::Printf(unsigned char, char const*, ...)>
 8014a6c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8014a6e:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 8014a72:	2a02      	cmp	r2, #2
 8014a74:	d001      	beq.n	8014a7a <DisplayUdf::Show(ArtNetNode*)+0x46>
 8014a76:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014a78:	b92b      	cbnz	r3, 8014a86 <DisplayUdf::Show(ArtNetNode*)+0x52>
 8014a7a:	4620      	mov	r0, r4
 8014a7c:	4a08      	ldr	r2, [pc, #32]	; (8014aa0 <DisplayUdf::Show(ArtNetNode*)+0x6c>)
 8014a7e:	f7f3 febf 	bl	8008800 <Display::Printf(unsigned char, char const*, ...)>
 8014a82:	b003      	add	sp, #12
 8014a84:	bd30      	pop	{r4, r5, pc}
 8014a86:	4807      	ldr	r0, [pc, #28]	; (8014aa4 <DisplayUdf::Show(ArtNetNode*)+0x70>)
 8014a88:	9300      	str	r3, [sp, #0]
 8014a8a:	4b07      	ldr	r3, [pc, #28]	; (8014aa8 <DisplayUdf::Show(ArtNetNode*)+0x74>)
 8014a8c:	2a00      	cmp	r2, #0
 8014a8e:	bf08      	it	eq
 8014a90:	4603      	moveq	r3, r0
 8014a92:	4620      	mov	r0, r4
 8014a94:	4a05      	ldr	r2, [pc, #20]	; (8014aac <DisplayUdf::Show(ArtNetNode*)+0x78>)
 8014a96:	f7f3 feb3 	bl	8008800 <Display::Printf(unsigned char, char const*, ...)>
 8014a9a:	e7f2      	b.n	8014a82 <DisplayUdf::Show(ArtNetNode*)+0x4e>
 8014a9c:	0801a0ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, sp, pc}
 8014aa0:	0801a0b2 	stmdaeq	r1, {r1, r4, r5, r7, sp, pc}
 8014aa4:	0801813e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, pc}
 8014aa8:	08018133 	stmdaeq	r1, {r0, r1, r4, r5, r8, pc}
 8014aac:	0801a0b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, sp, pc}

08014ab0 <NetworkDisplay::ShowEmacStart()>:
 8014ab0:	4b01      	ldr	r3, [pc, #4]	; (8014ab8 <NetworkDisplay::ShowEmacStart()+0x8>)
 8014ab2:	6818      	ldr	r0, [r3, #0]
 8014ab4:	f7ff bbf2 	b.w	801429c <DisplayUdf::ShowEmacStart()>
 8014ab8:	2001cd54 	andcs	ip, r1, r4, asr sp

08014abc <NetworkDisplay::ShowIp()>:
 8014abc:	4b01      	ldr	r3, [pc, #4]	; (8014ac4 <NetworkDisplay::ShowIp()+0x8>)
 8014abe:	6818      	ldr	r0, [r3, #0]
 8014ac0:	f7ff bbfc 	b.w	80142bc <DisplayUdf::ShowIpAddress()>
 8014ac4:	2001cd54 	andcs	ip, r1, r4, asr sp

08014ac8 <NetworkDisplay::ShowNetMask()>:
 8014ac8:	4b01      	ldr	r3, [pc, #4]	; (8014ad0 <NetworkDisplay::ShowNetMask()+0x8>)
 8014aca:	6818      	ldr	r0, [r3, #0]
 8014acc:	f7ff bc2a 	b.w	8014324 <DisplayUdf::ShowNetmask()>
 8014ad0:	2001cd54 	andcs	ip, r1, r4, asr sp

08014ad4 <NetworkDisplay::ShowGatewayIp()>:
 8014ad4:	4b01      	ldr	r3, [pc, #4]	; (8014adc <NetworkDisplay::ShowGatewayIp()+0x8>)
 8014ad6:	6818      	ldr	r0, [r3, #0]
 8014ad8:	f7ff bc42 	b.w	8014360 <DisplayUdf::ShowGatewayIp()>
 8014adc:	2001cd54 	andcs	ip, r1, r4, asr sp

08014ae0 <NetworkDisplay::ShowHostName()>:
 8014ae0:	4b01      	ldr	r3, [pc, #4]	; (8014ae8 <NetworkDisplay::ShowHostName()+0x8>)
 8014ae2:	6818      	ldr	r0, [r3, #0]
 8014ae4:	f7ff bc5c 	b.w	80143a0 <DisplayUdf::ShowHostName()>
 8014ae8:	2001cd54 	andcs	ip, r1, r4, asr sp

08014aec <NetworkDisplay::ShowShutdown()>:
 8014aec:	4b01      	ldr	r3, [pc, #4]	; (8014af4 <NetworkDisplay::ShowShutdown()+0x8>)
 8014aee:	6818      	ldr	r0, [r3, #0]
 8014af0:	f7ff bce6 	b.w	80144c0 <DisplayUdf::ShowShutdown()>
 8014af4:	2001cd54 	andcs	ip, r1, r4, asr sp

08014af8 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8014af8:	4b01      	ldr	r3, [pc, #4]	; (8014b00 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)+0x8>)
 8014afa:	6818      	ldr	r0, [r3, #0]
 8014afc:	f7ff bca8 	b.w	8014450 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8014b00:	2001cd54 	andcs	ip, r1, r4, asr sp

08014b04 <properties::convert_json_file(char*, unsigned short, bool)>:
 8014b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b08:	4603      	mov	r3, r0
 8014b0a:	7800      	ldrb	r0, [r0, #0]
 8014b0c:	287b      	cmp	r0, #123	; 0x7b
 8014b0e:	f040 80a2 	bne.w	8014c56 <properties::convert_json_file(char*, unsigned short, bool)+0x152>
 8014b12:	b17a      	cbz	r2, 8014b34 <properties::convert_json_file(char*, unsigned short, bool)+0x30>
 8014b14:	2401      	movs	r4, #1
 8014b16:	461e      	mov	r6, r3
 8014b18:	4620      	mov	r0, r4
 8014b1a:	2a00      	cmp	r2, #0
 8014b1c:	bf0c      	ite	eq
 8014b1e:	f04f 0c0a 	moveq.w	ip, #10
 8014b22:	f04f 0c00 	movne.w	ip, #0
 8014b26:	273d      	movs	r7, #61	; 0x3d
 8014b28:	42a1      	cmp	r1, r4
 8014b2a:	d850      	bhi.n	8014bce <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 8014b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b30:	463c      	mov	r4, r7
 8014b32:	e7f2      	b.n	8014b1a <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 8014b34:	2023      	movs	r0, #35	; 0x23
 8014b36:	f803 0b01 	strb.w	r0, [r3], #1
 8014b3a:	461c      	mov	r4, r3
 8014b3c:	2701      	movs	r7, #1
 8014b3e:	42b9      	cmp	r1, r7
 8014b40:	d811      	bhi.n	8014b66 <properties::convert_json_file(char*, unsigned short, bool)+0x62>
 8014b42:	2001      	movs	r0, #1
 8014b44:	461e      	mov	r6, r3
 8014b46:	230a      	movs	r3, #10
 8014b48:	4625      	mov	r5, r4
 8014b4a:	f806 3b01 	strb.w	r3, [r6], #1
 8014b4e:	3001      	adds	r0, #1
 8014b50:	462b      	mov	r3, r5
 8014b52:	781c      	ldrb	r4, [r3, #0]
 8014b54:	3501      	adds	r5, #1
 8014b56:	2c7b      	cmp	r4, #123	; 0x7b
 8014b58:	d0ea      	beq.n	8014b30 <properties::convert_json_file(char*, unsigned short, bool)+0x2c>
 8014b5a:	42b9      	cmp	r1, r7
 8014b5c:	f107 0401 	add.w	r4, r7, #1
 8014b60:	d9db      	bls.n	8014b1a <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 8014b62:	4627      	mov	r7, r4
 8014b64:	e7f4      	b.n	8014b50 <properties::convert_json_file(char*, unsigned short, bool)+0x4c>
 8014b66:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014b6a:	2822      	cmp	r0, #34	; 0x22
 8014b6c:	d119      	bne.n	8014ba2 <properties::convert_json_file(char*, unsigned short, bool)+0x9e>
 8014b6e:	46a4      	mov	ip, r4
 8014b70:	461d      	mov	r5, r3
 8014b72:	2601      	movs	r6, #1
 8014b74:	f89c e000 	ldrb.w	lr, [ip]
 8014b78:	4664      	mov	r4, ip
 8014b7a:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8014b7e:	462b      	mov	r3, r5
 8014b80:	4630      	mov	r0, r6
 8014b82:	f10c 0c01 	add.w	ip, ip, #1
 8014b86:	f105 0501 	add.w	r5, r5, #1
 8014b8a:	f106 0601 	add.w	r6, r6, #1
 8014b8e:	d0d9      	beq.n	8014b44 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 8014b90:	3701      	adds	r7, #1
 8014b92:	42b9      	cmp	r1, r7
 8014b94:	4664      	mov	r4, ip
 8014b96:	f805 ec01 	strb.w	lr, [r5, #-1]
 8014b9a:	d8eb      	bhi.n	8014b74 <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 8014b9c:	4630      	mov	r0, r6
 8014b9e:	462b      	mov	r3, r5
 8014ba0:	e7d0      	b.n	8014b44 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 8014ba2:	3701      	adds	r7, #1
 8014ba4:	e7cb      	b.n	8014b3e <properties::convert_json_file(char*, unsigned short, bool)+0x3a>
 8014ba6:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8014baa:	d110      	bne.n	8014bce <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 8014bac:	eba0 0803 	sub.w	r8, r0, r3
 8014bb0:	461a      	mov	r2, r3
 8014bb2:	eb08 0003 	add.w	r0, r8, r3
 8014bb6:	f813 eb01 	ldrb.w	lr, [r3], #1
 8014bba:	1c65      	adds	r5, r4, #1
 8014bbc:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8014bc0:	d04c      	beq.n	8014c5c <properties::convert_json_file(char*, unsigned short, bool)+0x158>
 8014bc2:	42a1      	cmp	r1, r4
 8014bc4:	d911      	bls.n	8014bea <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
 8014bc6:	462c      	mov	r4, r5
 8014bc8:	f806 eb01 	strb.w	lr, [r6], #1
 8014bcc:	e7f0      	b.n	8014bb0 <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 8014bce:	42a1      	cmp	r1, r4
 8014bd0:	461d      	mov	r5, r3
 8014bd2:	f893 e000 	ldrb.w	lr, [r3]
 8014bd6:	f104 0401 	add.w	r4, r4, #1
 8014bda:	f103 0301 	add.w	r3, r3, #1
 8014bde:	d8e2      	bhi.n	8014ba6 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8014be0:	462b      	mov	r3, r5
 8014be2:	e7e3      	b.n	8014bac <properties::convert_json_file(char*, unsigned short, bool)+0xa8>
 8014be4:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
 8014be8:	d009      	beq.n	8014bfe <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 8014bea:	42a9      	cmp	r1, r5
 8014bec:	4614      	mov	r4, r2
 8014bee:	f892 e000 	ldrb.w	lr, [r2]
 8014bf2:	f105 0501 	add.w	r5, r5, #1
 8014bf6:	f102 0201 	add.w	r2, r2, #1
 8014bfa:	d8f3      	bhi.n	8014be4 <properties::convert_json_file(char*, unsigned short, bool)+0xe0>
 8014bfc:	4622      	mov	r2, r4
 8014bfe:	7814      	ldrb	r4, [r2, #0]
 8014c00:	4696      	mov	lr, r2
 8014c02:	2c2f      	cmp	r4, #47	; 0x2f
 8014c04:	462b      	mov	r3, r5
 8014c06:	f102 0201 	add.w	r2, r2, #1
 8014c0a:	f105 0501 	add.w	r5, r5, #1
 8014c0e:	d81a      	bhi.n	8014c46 <properties::convert_json_file(char*, unsigned short, bool)+0x142>
 8014c10:	4299      	cmp	r1, r3
 8014c12:	d8f4      	bhi.n	8014bfe <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 8014c14:	2c22      	cmp	r4, #34	; 0x22
 8014c16:	bf08      	it	eq
 8014c18:	4696      	moveq	lr, r2
 8014c1a:	4673      	mov	r3, lr
 8014c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c20:	1c6c      	adds	r4, r5, #1
 8014c22:	2a22      	cmp	r2, #34	; 0x22
 8014c24:	d011      	beq.n	8014c4a <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8014c26:	2a2c      	cmp	r2, #44	; 0x2c
 8014c28:	d00f      	beq.n	8014c4a <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8014c2a:	2a7d      	cmp	r2, #125	; 0x7d
 8014c2c:	d00d      	beq.n	8014c4a <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8014c2e:	42a9      	cmp	r1, r5
 8014c30:	d90f      	bls.n	8014c52 <properties::convert_json_file(char*, unsigned short, bool)+0x14e>
 8014c32:	f1a2 0520 	sub.w	r5, r2, #32
 8014c36:	2d5a      	cmp	r5, #90	; 0x5a
 8014c38:	d803      	bhi.n	8014c42 <properties::convert_json_file(char*, unsigned short, bool)+0x13e>
 8014c3a:	469e      	mov	lr, r3
 8014c3c:	f806 2b01 	strb.w	r2, [r6], #1
 8014c40:	3001      	adds	r0, #1
 8014c42:	4625      	mov	r5, r4
 8014c44:	e7e9      	b.n	8014c1a <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 8014c46:	461d      	mov	r5, r3
 8014c48:	e7e7      	b.n	8014c1a <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 8014c4a:	462c      	mov	r4, r5
 8014c4c:	f806 cb01 	strb.w	ip, [r6], #1
 8014c50:	3001      	adds	r0, #1
 8014c52:	3401      	adds	r4, #1
 8014c54:	e768      	b.n	8014b28 <properties::convert_json_file(char*, unsigned short, bool)+0x24>
 8014c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c5a:	e767      	b.n	8014b2c <properties::convert_json_file(char*, unsigned short, bool)+0x28>
 8014c5c:	4625      	mov	r5, r4
 8014c5e:	f806 7b01 	strb.w	r7, [r6], #1
 8014c62:	3001      	adds	r0, #1
 8014c64:	e7c1      	b.n	8014bea <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
	...

08014c68 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 8014c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c6c:	6002      	str	r2, [r0, #0]
 8014c6e:	4614      	mov	r4, r2
 8014c70:	2200      	movs	r2, #0
 8014c72:	80c2      	strh	r2, [r0, #6]
 8014c74:	4a1c      	ldr	r2, [pc, #112]	; (8014ce8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 8014c76:	4606      	mov	r6, r0
 8014c78:	7812      	ldrb	r2, [r2, #0]
 8014c7a:	8083      	strh	r3, [r0, #4]
 8014c7c:	f002 0201 	and.w	r2, r2, #1
 8014c80:	7202      	strb	r2, [r0, #8]
 8014c82:	4608      	mov	r0, r1
 8014c84:	4605      	mov	r5, r0
 8014c86:	782f      	ldrb	r7, [r5, #0]
 8014c88:	3001      	adds	r0, #1
 8014c8a:	2f00      	cmp	r7, #0
 8014c8c:	d1fa      	bne.n	8014c84 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 8014c8e:	1a6d      	subs	r5, r5, r1
 8014c90:	b29b      	uxth	r3, r3
 8014c92:	b1d2      	cbz	r2, 8014cca <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 8014c94:	1d2f      	adds	r7, r5, #4
 8014c96:	429f      	cmp	r7, r3
 8014c98:	d814      	bhi.n	8014cc4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8014c9a:	f04f 087b 	mov.w	r8, #123	; 0x7b
 8014c9e:	f04f 0922 	mov.w	r9, #34	; 0x22
 8014ca2:	462a      	mov	r2, r5
 8014ca4:	f884 8000 	strb.w	r8, [r4]
 8014ca8:	f884 9001 	strb.w	r9, [r4, #1]
 8014cac:	1ca0      	adds	r0, r4, #2
 8014cae:	f000 ff4a 	bl	8015b46 <memmove>
 8014cb2:	223a      	movs	r2, #58	; 0x3a
 8014cb4:	1963      	adds	r3, r4, r5
 8014cb6:	3505      	adds	r5, #5
 8014cb8:	f883 9002 	strb.w	r9, [r3, #2]
 8014cbc:	70da      	strb	r2, [r3, #3]
 8014cbe:	80f5      	strh	r5, [r6, #6]
 8014cc0:	f804 8007 	strb.w	r8, [r4, r7]
 8014cc4:	4630      	mov	r0, r6
 8014cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cca:	1caf      	adds	r7, r5, #2
 8014ccc:	429f      	cmp	r7, r3
 8014cce:	d8f9      	bhi.n	8014cc4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8014cd0:	4620      	mov	r0, r4
 8014cd2:	2323      	movs	r3, #35	; 0x23
 8014cd4:	462a      	mov	r2, r5
 8014cd6:	f800 3b01 	strb.w	r3, [r0], #1
 8014cda:	f000 ff34 	bl	8015b46 <memmove>
 8014cde:	230a      	movs	r3, #10
 8014ce0:	442c      	add	r4, r5
 8014ce2:	7063      	strb	r3, [r4, #1]
 8014ce4:	80f7      	strh	r7, [r6, #6]
 8014ce6:	e7ed      	b.n	8014cc4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8014ce8:	2001cd58 	andcs	ip, r1, r8, asr sp

08014cec <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 8014cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cee:	469c      	mov	ip, r3
 8014cf0:	8885      	ldrh	r5, [r0, #4]
 8014cf2:	88c3      	ldrh	r3, [r0, #6]
 8014cf4:	b085      	sub	sp, #20
 8014cf6:	42ab      	cmp	r3, r5
 8014cf8:	d302      	bcc.n	8014d00 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 8014cfa:	2000      	movs	r0, #0
 8014cfc:	b005      	add	sp, #20
 8014cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d00:	4604      	mov	r4, r0
 8014d02:	6800      	ldr	r0, [r0, #0]
 8014d04:	1aed      	subs	r5, r5, r3
 8014d06:	4418      	add	r0, r3
 8014d08:	b2d6      	uxtb	r6, r2
 8014d0a:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8014d0e:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8014d12:	f894 e008 	ldrb.w	lr, [r4, #8]
 8014d16:	0e12      	lsrs	r2, r2, #24
 8014d18:	f1bc 0f00 	cmp.w	ip, #0
 8014d1c:	d109      	bne.n	8014d32 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 8014d1e:	f1be 0f00 	cmp.w	lr, #0
 8014d22:	d109      	bne.n	8014d38 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 8014d24:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014d28:	e9cd 6700 	strd	r6, r7, [sp]
 8014d2c:	460b      	mov	r3, r1
 8014d2e:	4a0e      	ldr	r2, [pc, #56]	; (8014d68 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 8014d30:	e008      	b.n	8014d44 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8014d32:	f1be 0f00 	cmp.w	lr, #0
 8014d36:	d00f      	beq.n	8014d58 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 8014d38:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014d3c:	460b      	mov	r3, r1
 8014d3e:	e9cd 6700 	strd	r6, r7, [sp]
 8014d42:	4a0a      	ldr	r2, [pc, #40]	; (8014d6c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 8014d44:	4629      	mov	r1, r5
 8014d46:	f7f4 fd31 	bl	80097ac <snprintf>
 8014d4a:	4285      	cmp	r5, r0
 8014d4c:	dbd5      	blt.n	8014cfa <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 8014d4e:	88e3      	ldrh	r3, [r4, #6]
 8014d50:	4403      	add	r3, r0
 8014d52:	80e3      	strh	r3, [r4, #6]
 8014d54:	2001      	movs	r0, #1
 8014d56:	e7d1      	b.n	8014cfc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 8014d58:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8014d5c:	e9cd 6700 	strd	r6, r7, [sp]
 8014d60:	460b      	mov	r3, r1
 8014d62:	4a03      	ldr	r2, [pc, #12]	; (8014d70 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 8014d64:	e7ee      	b.n	8014d44 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8014d66:	bf00      	nop
 8014d68:	0801a152 	stmdaeq	r1, {r1, r4, r6, r8, sp, pc}
 8014d6c:	0801a13e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, sp, pc}
 8014d70:	0801a153 	stmdaeq	r1, {r0, r1, r4, r6, r8, sp, pc}

08014d74 <PropertiesBuilder::AddComment(char const*)>:
 8014d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d76:	7a06      	ldrb	r6, [r0, #8]
 8014d78:	b996      	cbnz	r6, 8014da0 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8014d7a:	4604      	mov	r4, r0
 8014d7c:	88c0      	ldrh	r0, [r0, #6]
 8014d7e:	88a5      	ldrh	r5, [r4, #4]
 8014d80:	42a8      	cmp	r0, r5
 8014d82:	d20d      	bcs.n	8014da0 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8014d84:	6827      	ldr	r7, [r4, #0]
 8014d86:	1a2d      	subs	r5, r5, r0
 8014d88:	460b      	mov	r3, r1
 8014d8a:	4a06      	ldr	r2, [pc, #24]	; (8014da4 <PropertiesBuilder::AddComment(char const*)+0x30>)
 8014d8c:	4629      	mov	r1, r5
 8014d8e:	4438      	add	r0, r7
 8014d90:	f7f4 fd0c 	bl	80097ac <snprintf>
 8014d94:	4285      	cmp	r5, r0
 8014d96:	bfa1      	itttt	ge
 8014d98:	2601      	movge	r6, #1
 8014d9a:	88e3      	ldrhge	r3, [r4, #6]
 8014d9c:	18c0      	addge	r0, r0, r3
 8014d9e:	80e0      	strhge	r0, [r4, #6]
 8014da0:	4630      	mov	r0, r6
 8014da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014da4:	0801a163 	stmdaeq	r1, {r0, r1, r5, r6, r8, sp, pc}

08014da8 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>:
 8014da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014daa:	88c7      	ldrh	r7, [r0, #6]
 8014dac:	8885      	ldrh	r5, [r0, #4]
 8014dae:	9e08      	ldr	r6, [sp, #32]
 8014db0:	42af      	cmp	r7, r5
 8014db2:	d302      	bcc.n	8014dba <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x12>
 8014db4:	2000      	movs	r0, #0
 8014db6:	b003      	add	sp, #12
 8014db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dba:	4604      	mov	r4, r0
 8014dbc:	6800      	ldr	r0, [r0, #0]
 8014dbe:	1bed      	subs	r5, r5, r7
 8014dc0:	4438      	add	r0, r7
 8014dc2:	7a27      	ldrb	r7, [r4, #8]
 8014dc4:	b92b      	cbnz	r3, 8014dd2 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2a>
 8014dc6:	b92f      	cbnz	r7, 8014dd4 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2c>
 8014dc8:	e9cd 6200 	strd	r6, r2, [sp]
 8014dcc:	460b      	mov	r3, r1
 8014dce:	4a0b      	ldr	r2, [pc, #44]	; (8014dfc <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x54>)
 8014dd0:	e004      	b.n	8014ddc <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x34>
 8014dd2:	b16f      	cbz	r7, 8014df0 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x48>
 8014dd4:	460b      	mov	r3, r1
 8014dd6:	e9cd 6200 	strd	r6, r2, [sp]
 8014dda:	4a09      	ldr	r2, [pc, #36]	; (8014e00 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x58>)
 8014ddc:	4629      	mov	r1, r5
 8014dde:	f7f4 fce5 	bl	80097ac <snprintf>
 8014de2:	4285      	cmp	r5, r0
 8014de4:	dbe6      	blt.n	8014db4 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xc>
 8014de6:	88e3      	ldrh	r3, [r4, #6]
 8014de8:	4403      	add	r3, r0
 8014dea:	80e3      	strh	r3, [r4, #6]
 8014dec:	2001      	movs	r0, #1
 8014dee:	e7e2      	b.n	8014db6 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xe>
 8014df0:	e9cd 6200 	strd	r6, r2, [sp]
 8014df4:	460b      	mov	r3, r1
 8014df6:	4a03      	ldr	r2, [pc, #12]	; (8014e04 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x5c>)
 8014df8:	e7f0      	b.n	8014ddc <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x34>
 8014dfa:	bf00      	nop
 8014dfc:	0801a178 	stmdaeq	r1, {r3, r4, r5, r6, r8, sp, pc}
 8014e00:	0801a16b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r8, sp, pc}
 8014e04:	0801a179 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, sp, pc}

08014e08 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 8014e08:	e9c0 1200 	strd	r1, r2, [r0]
 8014e0c:	4770      	bx	lr

08014e0e <ReadConfigFile::~ReadConfigFile()>:
 8014e0e:	4770      	bx	lr

08014e10 <ReadConfigFile::Read(char const*, unsigned int)>:
 8014e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e14:	4606      	mov	r6, r0
 8014e16:	460d      	mov	r5, r1
 8014e18:	4614      	mov	r4, r2
 8014e1a:	f04f 0800 	mov.w	r8, #0
 8014e1e:	b090      	sub	sp, #64	; 0x40
 8014e20:	b33c      	cbz	r4, 8014e72 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8014e22:	466b      	mov	r3, sp
 8014e24:	462a      	mov	r2, r5
 8014e26:	4619      	mov	r1, r3
 8014e28:	e007      	b.n	8014e3a <ReadConfigFile::Read(char const*, unsigned int)+0x2a>
 8014e2a:	f803 7b01 	strb.w	r7, [r3], #1
 8014e2e:	1a58      	subs	r0, r3, r1
 8014e30:	283f      	cmp	r0, #63	; 0x3f
 8014e32:	4615      	mov	r5, r2
 8014e34:	dc1d      	bgt.n	8014e72 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8014e36:	3c01      	subs	r4, #1
 8014e38:	d00f      	beq.n	8014e5a <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 8014e3a:	7817      	ldrb	r7, [r2, #0]
 8014e3c:	4610      	mov	r0, r2
 8014e3e:	2f0d      	cmp	r7, #13
 8014e40:	f102 0201 	add.w	r2, r2, #1
 8014e44:	d001      	beq.n	8014e4a <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 8014e46:	2f0a      	cmp	r7, #10
 8014e48:	d1ef      	bne.n	8014e2a <ReadConfigFile::Read(char const*, unsigned int)+0x1a>
 8014e4a:	4605      	mov	r5, r0
 8014e4c:	b12c      	cbz	r4, 8014e5a <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 8014e4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014e52:	2a0d      	cmp	r2, #13
 8014e54:	d00b      	beq.n	8014e6e <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8014e56:	2a0a      	cmp	r2, #10
 8014e58:	d009      	beq.n	8014e6e <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8014e5a:	f89d 2000 	ldrb.w	r2, [sp]
 8014e5e:	2a60      	cmp	r2, #96	; 0x60
 8014e60:	d9de      	bls.n	8014e20 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8014e62:	f883 8000 	strb.w	r8, [r3]
 8014e66:	e9d6 3000 	ldrd	r3, r0, [r6]
 8014e6a:	4798      	blx	r3
 8014e6c:	e7d8      	b.n	8014e20 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8014e6e:	3c01      	subs	r4, #1
 8014e70:	e7eb      	b.n	8014e4a <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 8014e72:	b010      	add	sp, #64	; 0x40
 8014e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e78 <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 8014e78:	b570      	push	{r4, r5, r6, lr}
 8014e7a:	4615      	mov	r5, r2
 8014e7c:	461c      	mov	r4, r3
 8014e7e:	f000 f946 	bl	801510e <Sscan::checkName(char const*, char const*)>
 8014e82:	b180      	cbz	r0, 8014ea6 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2e>
 8014e84:	2100      	movs	r1, #0
 8014e86:	5c43      	ldrb	r3, [r0, r1]
 8014e88:	6826      	ldr	r6, [r4, #0]
 8014e8a:	b28a      	uxth	r2, r1
 8014e8c:	b143      	cbz	r3, 8014ea0 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 8014e8e:	42b2      	cmp	r2, r6
 8014e90:	d303      	bcc.n	8014e9a <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x22>
 8014e92:	2b0a      	cmp	r3, #10
 8014e94:	d004      	beq.n	8014ea0 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 8014e96:	2002      	movs	r0, #2
 8014e98:	e004      	b.n	8014ea4 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>
 8014e9a:	546b      	strb	r3, [r5, r1]
 8014e9c:	3101      	adds	r1, #1
 8014e9e:	e7f2      	b.n	8014e86 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 8014ea0:	2000      	movs	r0, #0
 8014ea2:	6022      	str	r2, [r4, #0]
 8014ea4:	bd70      	pop	{r4, r5, r6, pc}
 8014ea6:	2001      	movs	r0, #1
 8014ea8:	e7fc      	b.n	8014ea4 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>

08014eaa <Sscan::Float(char const*, char const*, float&)>:
 8014eaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014eae:	4616      	mov	r6, r2
 8014eb0:	f000 f92d 	bl	801510e <Sscan::checkName(char const*, char const*)>
 8014eb4:	2800      	cmp	r0, #0
 8014eb6:	d059      	beq.n	8014f6c <Sscan::Float(char const*, char const*, float&)+0xc2>
 8014eb8:	4604      	mov	r4, r0
 8014eba:	7803      	ldrb	r3, [r0, #0]
 8014ebc:	2b2d      	cmp	r3, #45	; 0x2d
 8014ebe:	bf08      	it	eq
 8014ec0:	3401      	addeq	r4, #1
 8014ec2:	7823      	ldrb	r3, [r4, #0]
 8014ec4:	bf0c      	ite	eq
 8014ec6:	f04f 0801 	moveq.w	r8, #1
 8014eca:	f04f 0800 	movne.w	r8, #0
 8014ece:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8014ed2:	d103      	bne.n	8014edc <Sscan::Float(char const*, char const*, float&)+0x32>
 8014ed4:	2702      	movs	r7, #2
 8014ed6:	4638      	mov	r0, r7
 8014ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014edc:	2000      	movs	r0, #0
 8014ede:	220a      	movs	r2, #10
 8014ee0:	7823      	ldrb	r3, [r4, #0]
 8014ee2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8014ee6:	2909      	cmp	r1, #9
 8014ee8:	d8f4      	bhi.n	8014ed4 <Sscan::Float(char const*, char const*, float&)+0x2a>
 8014eea:	fb02 3000 	mla	r0, r2, r0, r3
 8014eee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014ef2:	3830      	subs	r0, #48	; 0x30
 8014ef4:	2b2e      	cmp	r3, #46	; 0x2e
 8014ef6:	d002      	beq.n	8014efe <Sscan::Float(char const*, char const*, float&)+0x54>
 8014ef8:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8014efc:	d1f0      	bne.n	8014ee0 <Sscan::Float(char const*, char const*, float&)+0x36>
 8014efe:	f7f2 ff23 	bl	8007d48 <__aeabi_ui2f>
 8014f02:	6030      	str	r0, [r6, #0]
 8014f04:	7823      	ldrb	r3, [r4, #0]
 8014f06:	4605      	mov	r5, r0
 8014f08:	2b2e      	cmp	r3, #46	; 0x2e
 8014f0a:	d008      	beq.n	8014f1e <Sscan::Float(char const*, char const*, float&)+0x74>
 8014f0c:	f1b8 0f00 	cmp.w	r8, #0
 8014f10:	d101      	bne.n	8014f16 <Sscan::Float(char const*, char const*, float&)+0x6c>
 8014f12:	2700      	movs	r7, #0
 8014f14:	e7df      	b.n	8014ed6 <Sscan::Float(char const*, char const*, float&)+0x2c>
 8014f16:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8014f1a:	6035      	str	r5, [r6, #0]
 8014f1c:	e7f9      	b.n	8014f12 <Sscan::Float(char const*, char const*, float&)+0x68>
 8014f1e:	f04f 0901 	mov.w	r9, #1
 8014f22:	2000      	movs	r0, #0
 8014f24:	220a      	movs	r2, #10
 8014f26:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014f2a:	f013 07df 	ands.w	r7, r3, #223	; 0xdf
 8014f2e:	d111      	bne.n	8014f54 <Sscan::Float(char const*, char const*, float&)+0xaa>
 8014f30:	f7f2 ff0a 	bl	8007d48 <__aeabi_ui2f>
 8014f34:	4604      	mov	r4, r0
 8014f36:	4648      	mov	r0, r9
 8014f38:	f7f2 ff06 	bl	8007d48 <__aeabi_ui2f>
 8014f3c:	4601      	mov	r1, r0
 8014f3e:	4620      	mov	r0, r4
 8014f40:	f7f3 fa80 	bl	8008444 <__aeabi_fdiv>
 8014f44:	4629      	mov	r1, r5
 8014f46:	f7f2 fe4f 	bl	8007be8 <__addsf3>
 8014f4a:	f1b8 0f00 	cmp.w	r8, #0
 8014f4e:	d109      	bne.n	8014f64 <Sscan::Float(char const*, char const*, float&)+0xba>
 8014f50:	6030      	str	r0, [r6, #0]
 8014f52:	e7de      	b.n	8014f12 <Sscan::Float(char const*, char const*, float&)+0x68>
 8014f54:	3b30      	subs	r3, #48	; 0x30
 8014f56:	2b09      	cmp	r3, #9
 8014f58:	d8bc      	bhi.n	8014ed4 <Sscan::Float(char const*, char const*, float&)+0x2a>
 8014f5a:	fb02 3000 	mla	r0, r2, r0, r3
 8014f5e:	fb02 f909 	mul.w	r9, r2, r9
 8014f62:	e7e0      	b.n	8014f26 <Sscan::Float(char const*, char const*, float&)+0x7c>
 8014f64:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8014f68:	6030      	str	r0, [r6, #0]
 8014f6a:	e7b4      	b.n	8014ed6 <Sscan::Float(char const*, char const*, float&)+0x2c>
 8014f6c:	2701      	movs	r7, #1
 8014f6e:	e7b2      	b.n	8014ed6 <Sscan::Float(char const*, char const*, float&)+0x2c>

08014f70 <Sscan::HexUint16(char const*, char const*, unsigned short&)>:
 8014f70:	b570      	push	{r4, r5, r6, lr}
 8014f72:	4616      	mov	r6, r2
 8014f74:	f000 f8cb 	bl	801510e <Sscan::checkName(char const*, char const*)>
 8014f78:	bb08      	cbnz	r0, 8014fbe <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x4e>
 8014f7a:	2001      	movs	r0, #1
 8014f7c:	bd70      	pop	{r4, r5, r6, pc}
 8014f7e:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 8014f82:	2d09      	cmp	r5, #9
 8014f84:	d904      	bls.n	8014f90 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x20>
 8014f86:	f041 0220 	orr.w	r2, r1, #32
 8014f8a:	3a61      	subs	r2, #97	; 0x61
 8014f8c:	2a05      	cmp	r2, #5
 8014f8e:	d8f4      	bhi.n	8014f7a <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xa>
 8014f90:	2939      	cmp	r1, #57	; 0x39
 8014f92:	bf83      	ittte	hi
 8014f94:	f041 0120 	orrhi.w	r1, r1, #32
 8014f98:	3957      	subhi	r1, #87	; 0x57
 8014f9a:	b2c9      	uxtbhi	r1, r1
 8014f9c:	b2e9      	uxtbls	r1, r5
 8014f9e:	ea41 1404 	orr.w	r4, r1, r4, lsl #4
 8014fa2:	b2a4      	uxth	r4, r4
 8014fa4:	3301      	adds	r3, #1
 8014fa6:	8034      	strh	r4, [r6, #0]
 8014fa8:	5cc1      	ldrb	r1, [r0, r3]
 8014faa:	b119      	cbz	r1, 8014fb4 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x44>
 8014fac:	2b04      	cmp	r3, #4
 8014fae:	d1e6      	bne.n	8014f7e <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xe>
 8014fb0:	2920      	cmp	r1, #32
 8014fb2:	d1e2      	bne.n	8014f7a <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xa>
 8014fb4:	1f18      	subs	r0, r3, #4
 8014fb6:	bf18      	it	ne
 8014fb8:	2001      	movne	r0, #1
 8014fba:	0040      	lsls	r0, r0, #1
 8014fbc:	e7de      	b.n	8014f7c <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xc>
 8014fbe:	2400      	movs	r4, #0
 8014fc0:	4623      	mov	r3, r4
 8014fc2:	e7f0      	b.n	8014fa6 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x36>

08014fc4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 8014fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014fc6:	4615      	mov	r5, r2
 8014fc8:	f000 f8a1 	bl	801510e <Sscan::checkName(char const*, char const*)>
 8014fcc:	bb58      	cbnz	r0, 8015026 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x62>
 8014fce:	2001      	movs	r0, #1
 8014fd0:	e027      	b.n	8015022 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 8014fd2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014fd6:	2b09      	cmp	r3, #9
 8014fd8:	d822      	bhi.n	8015020 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8014fe0:	3930      	subs	r1, #48	; 0x30
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014fe8:	2a2e      	cmp	r2, #46	; 0x2e
 8014fea:	d115      	bne.n	8015018 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 8014fec:	29ff      	cmp	r1, #255	; 0xff
 8014fee:	d817      	bhi.n	8015020 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8014ff0:	3401      	adds	r4, #1
 8014ff2:	2c03      	cmp	r4, #3
 8014ff4:	f806 1b01 	strb.w	r1, [r6], #1
 8014ff8:	d119      	bne.n	801502e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6a>
 8014ffa:	2400      	movs	r4, #0
 8014ffc:	260a      	movs	r6, #10
 8014ffe:	1d1a      	adds	r2, r3, #4
 8015000:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8015004:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8015008:	d115      	bne.n	8015036 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x72>
 801500a:	2cff      	cmp	r4, #255	; 0xff
 801500c:	d808      	bhi.n	8015020 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 801500e:	f88d 4007 	strb.w	r4, [sp, #7]
 8015012:	9b01      	ldr	r3, [sp, #4]
 8015014:	602b      	str	r3, [r5, #0]
 8015016:	e004      	b.n	8015022 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 8015018:	2a00      	cmp	r2, #0
 801501a:	d0e7      	beq.n	8014fec <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 801501c:	42b8      	cmp	r0, r7
 801501e:	d1d8      	bne.n	8014fd2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xe>
 8015020:	2002      	movs	r0, #2
 8015022:	b003      	add	sp, #12
 8015024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015026:	2400      	movs	r4, #0
 8015028:	f04f 0c0a 	mov.w	ip, #10
 801502c:	ae01      	add	r6, sp, #4
 801502e:	4603      	mov	r3, r0
 8015030:	2100      	movs	r1, #0
 8015032:	1d07      	adds	r7, r0, #4
 8015034:	e7d5      	b.n	8014fe2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x1e>
 8015036:	4293      	cmp	r3, r2
 8015038:	d0f2      	beq.n	8015020 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 801503a:	3930      	subs	r1, #48	; 0x30
 801503c:	2909      	cmp	r1, #9
 801503e:	d8ef      	bhi.n	8015020 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8015040:	fb06 1404 	mla	r4, r6, r4, r1
 8015044:	e7dc      	b.n	8015000 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x3c>

08015046 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 8015046:	b538      	push	{r3, r4, r5, lr}
 8015048:	4615      	mov	r5, r2
 801504a:	f000 f860 	bl	801510e <Sscan::checkName(char const*, char const*)>
 801504e:	b1a0      	cbz	r0, 801507a <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 8015050:	4604      	mov	r4, r0
 8015052:	2100      	movs	r1, #0
 8015054:	220a      	movs	r2, #10
 8015056:	7823      	ldrb	r3, [r4, #0]
 8015058:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 801505c:	2809      	cmp	r0, #9
 801505e:	d80e      	bhi.n	801507e <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8015060:	fb02 3101 	mla	r1, r2, r1, r3
 8015064:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015068:	3930      	subs	r1, #48	; 0x30
 801506a:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 801506e:	d1f2      	bne.n	8015056 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x10>
 8015070:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8015074:	d203      	bcs.n	801507e <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8015076:	8029      	strh	r1, [r5, #0]
 8015078:	bd38      	pop	{r3, r4, r5, pc}
 801507a:	2001      	movs	r0, #1
 801507c:	e7fc      	b.n	8015078 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 801507e:	2002      	movs	r0, #2
 8015080:	e7fa      	b.n	8015078 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

08015082 <Sscan::Uint32(char const*, char const*, unsigned int&)>:
 8015082:	b570      	push	{r4, r5, r6, lr}
 8015084:	4615      	mov	r5, r2
 8015086:	f000 f842 	bl	801510e <Sscan::checkName(char const*, char const*)>
 801508a:	b1f8      	cbz	r0, 80150cc <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4a>
 801508c:	2300      	movs	r3, #0
 801508e:	4604      	mov	r4, r0
 8015090:	461a      	mov	r2, r3
 8015092:	260a      	movs	r6, #10
 8015094:	7820      	ldrb	r0, [r4, #0]
 8015096:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 801509a:	2909      	cmp	r1, #9
 801509c:	d818      	bhi.n	80150d0 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 801509e:	fba3 3106 	umull	r3, r1, r3, r6
 80150a2:	fb06 1102 	mla	r1, r6, r2, r1
 80150a6:	3b30      	subs	r3, #48	; 0x30
 80150a8:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 80150ac:	18c3      	adds	r3, r0, r3
 80150ae:	f141 0200 	adc.w	r2, r1, #0
 80150b2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80150b6:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 80150ba:	d1eb      	bne.n	8015094 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x12>
 80150bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80150c0:	4299      	cmp	r1, r3
 80150c2:	eb70 0202 	sbcs.w	r2, r0, r2
 80150c6:	d303      	bcc.n	80150d0 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 80150c8:	602b      	str	r3, [r5, #0]
 80150ca:	bd70      	pop	{r4, r5, r6, pc}
 80150cc:	2001      	movs	r0, #1
 80150ce:	e7fc      	b.n	80150ca <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>
 80150d0:	2002      	movs	r0, #2
 80150d2:	e7fa      	b.n	80150ca <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>

080150d4 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 80150d4:	b538      	push	{r3, r4, r5, lr}
 80150d6:	4615      	mov	r5, r2
 80150d8:	f000 f819 	bl	801510e <Sscan::checkName(char const*, char const*)>
 80150dc:	b198      	cbz	r0, 8015106 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 80150de:	4604      	mov	r4, r0
 80150e0:	2100      	movs	r1, #0
 80150e2:	220a      	movs	r2, #10
 80150e4:	7823      	ldrb	r3, [r4, #0]
 80150e6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80150ea:	2809      	cmp	r0, #9
 80150ec:	d80d      	bhi.n	801510a <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 80150ee:	fb02 3101 	mla	r1, r2, r1, r3
 80150f2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80150f6:	3930      	subs	r1, #48	; 0x30
 80150f8:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 80150fc:	d1f2      	bne.n	80150e4 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x10>
 80150fe:	29ff      	cmp	r1, #255	; 0xff
 8015100:	d803      	bhi.n	801510a <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8015102:	7029      	strb	r1, [r5, #0]
 8015104:	bd38      	pop	{r3, r4, r5, pc}
 8015106:	2001      	movs	r0, #1
 8015108:	e7fc      	b.n	8015104 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 801510a:	2002      	movs	r0, #2
 801510c:	e7fa      	b.n	8015104 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

0801510e <Sscan::checkName(char const*, char const*)>:
 801510e:	4603      	mov	r3, r0
 8015110:	b510      	push	{r4, lr}
 8015112:	3901      	subs	r1, #1
 8015114:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015118:	461c      	mov	r4, r3
 801511a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801511e:	b120      	cbz	r0, 801512a <Sscan::checkName(char const*, char const*)+0x1c>
 8015120:	b10a      	cbz	r2, 8015126 <Sscan::checkName(char const*, char const*)+0x18>
 8015122:	4290      	cmp	r0, r2
 8015124:	d0f6      	beq.n	8015114 <Sscan::checkName(char const*, char const*)+0x6>
 8015126:	2000      	movs	r0, #0
 8015128:	e006      	b.n	8015138 <Sscan::checkName(char const*, char const*)+0x2a>
 801512a:	2a3d      	cmp	r2, #61	; 0x3d
 801512c:	d104      	bne.n	8015138 <Sscan::checkName(char const*, char const*)+0x2a>
 801512e:	7860      	ldrb	r0, [r4, #1]
 8015130:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 8015134:	d000      	beq.n	8015138 <Sscan::checkName(char const*, char const*)+0x2a>
 8015136:	1c60      	adds	r0, r4, #1
 8015138:	bd10      	pop	{r4, pc}

0801513a <LightSet::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 801513a:	2300      	movs	r3, #0
 801513c:	2001      	movs	r0, #1
 801513e:	7093      	strb	r3, [r2, #2]
 8015140:	8010      	strh	r0, [r2, #0]
 8015142:	4770      	bx	lr

08015144 <Display::PrintInfo() [clone .isra.0]>:
 8015144:	b910      	cbnz	r0, 801514c <Display::PrintInfo() [clone .isra.0]+0x8>
 8015146:	4803      	ldr	r0, [pc, #12]	; (8015154 <Display::PrintInfo() [clone .isra.0]+0x10>)
 8015148:	f000 bd35 	b.w	8015bb6 <puts>
 801514c:	6803      	ldr	r3, [r0, #0]
 801514e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015150:	4718      	bx	r3
 8015152:	bf00      	nop
 8015154:	0801a315 	stmdaeq	r1, {r0, r2, r4, r8, r9, sp, pc}

08015158 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8015158:	b513      	push	{r0, r1, r4, lr}
 801515a:	4604      	mov	r4, r0
 801515c:	0a13      	lsrs	r3, r2, #8
 801515e:	7800      	ldrb	r0, [r0, #0]
 8015160:	f88d 1004 	strb.w	r1, [sp, #4]
 8015164:	f88d 3005 	strb.w	r3, [sp, #5]
 8015168:	f88d 2006 	strb.w	r2, [sp, #6]
 801516c:	f001 fdc2 	bl	8016cf4 <gd32_i2c_set_address(unsigned char)>
 8015170:	6860      	ldr	r0, [r4, #4]
 8015172:	f001 fdb7 	bl	8016ce4 <gd32_i2c_set_baudrate(unsigned int)>
 8015176:	2103      	movs	r1, #3
 8015178:	a801      	add	r0, sp, #4
 801517a:	f001 fdc1 	bl	8016d00 <gd32_i2c_write(char const*, unsigned int)>
 801517e:	b002      	add	sp, #8
 8015180:	bd10      	pop	{r4, pc}

08015182 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 8015182:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015184:	460d      	mov	r5, r1
 8015186:	4604      	mov	r4, r0
 8015188:	f001 fdb4 	bl	8016cf4 <gd32_i2c_set_address(unsigned char)>
 801518c:	4628      	mov	r0, r5
 801518e:	f001 fda9 	bl	8016ce4 <gd32_i2c_set_baudrate(unsigned int)>
 8015192:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8015196:	2b07      	cmp	r3, #7
 8015198:	d902      	bls.n	80151a0 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 801519a:	3c50      	subs	r4, #80	; 0x50
 801519c:	2c0f      	cmp	r4, #15
 801519e:	d809      	bhi.n	80151b4 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 80151a0:	2101      	movs	r1, #1
 80151a2:	f10d 0007 	add.w	r0, sp, #7
 80151a6:	f001 fe11 	bl	8016dcc <gd32_i2c_read(char*, unsigned int)>
 80151aa:	fab0 f080 	clz	r0, r0
 80151ae:	0940      	lsrs	r0, r0, #5
 80151b0:	b003      	add	sp, #12
 80151b2:	bd30      	pop	{r4, r5, pc}
 80151b4:	2100      	movs	r1, #0
 80151b6:	4608      	mov	r0, r1
 80151b8:	f001 fda2 	bl	8016d00 <gd32_i2c_write(char const*, unsigned int)>
 80151bc:	e7f5      	b.n	80151aa <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

080151be <Display::Detect7Segment()>:
 80151be:	b538      	push	{r3, r4, r5, lr}
 80151c0:	68c1      	ldr	r1, [r0, #12]
 80151c2:	4604      	mov	r4, r0
 80151c4:	7a00      	ldrb	r0, [r0, #8]
 80151c6:	f7ff ffdc 	bl	8015182 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 80151ca:	7460      	strb	r0, [r4, #17]
 80151cc:	b170      	cbz	r0, 80151ec <Display::Detect7Segment()+0x2e>
 80151ce:	2200      	movs	r2, #0
 80151d0:	f104 0508 	add.w	r5, r4, #8
 80151d4:	4611      	mov	r1, r2
 80151d6:	4628      	mov	r0, r5
 80151d8:	f7ff ffbe 	bl	8015158 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80151dc:	7c63      	ldrb	r3, [r4, #17]
 80151de:	b12b      	cbz	r3, 80151ec <Display::Detect7Segment()+0x2e>
 80151e0:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 80151e4:	2112      	movs	r1, #18
 80151e6:	4628      	mov	r0, r5
 80151e8:	f7ff ffb6 	bl	8015158 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80151ec:	bd38      	pop	{r3, r4, r5, pc}

080151ee <Display::Detect(display::Type)>:
 80151ee:	2902      	cmp	r1, #2
 80151f0:	b538      	push	{r3, r4, r5, lr}
 80151f2:	4604      	mov	r4, r0
 80151f4:	d014      	beq.n	8015220 <Display::Detect(display::Type)+0x32>
 80151f6:	2904      	cmp	r1, #4
 80151f8:	d01b      	beq.n	8015232 <Display::Detect(display::Type)+0x44>
 80151fa:	69a0      	ldr	r0, [r4, #24]
 80151fc:	b168      	cbz	r0, 801521a <Display::Detect(display::Type)+0x2c>
 80151fe:	6803      	ldr	r3, [r0, #0]
 8015200:	689b      	ldr	r3, [r3, #8]
 8015202:	4798      	blx	r3
 8015204:	4603      	mov	r3, r0
 8015206:	69a0      	ldr	r0, [r4, #24]
 8015208:	b9ab      	cbnz	r3, 8015236 <Display::Detect(display::Type)+0x48>
 801520a:	b110      	cbz	r0, 8015212 <Display::Detect(display::Type)+0x24>
 801520c:	6803      	ldr	r3, [r0, #0]
 801520e:	685b      	ldr	r3, [r3, #4]
 8015210:	4798      	blx	r3
 8015212:	2300      	movs	r3, #0
 8015214:	61a3      	str	r3, [r4, #24]
 8015216:	2304      	movs	r3, #4
 8015218:	6023      	str	r3, [r4, #0]
 801521a:	2300      	movs	r3, #0
 801521c:	6163      	str	r3, [r4, #20]
 801521e:	e010      	b.n	8015242 <Display::Detect(display::Type)+0x54>
 8015220:	2018      	movs	r0, #24
 8015222:	f000 fbd1 	bl	80159c8 <operator new(unsigned int)>
 8015226:	4605      	mov	r5, r0
 8015228:	2100      	movs	r1, #0
 801522a:	f000 f89d 	bl	8015368 <Ssd1306::Ssd1306(TOledPanel)>
 801522e:	61a5      	str	r5, [r4, #24]
 8015230:	e7e3      	b.n	80151fa <Display::Detect(display::Type)+0xc>
 8015232:	6001      	str	r1, [r0, #0]
 8015234:	e7e1      	b.n	80151fa <Display::Detect(display::Type)+0xc>
 8015236:	6803      	ldr	r3, [r0, #0]
 8015238:	68db      	ldr	r3, [r3, #12]
 801523a:	4798      	blx	r3
 801523c:	69a3      	ldr	r3, [r4, #24]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d0eb      	beq.n	801521a <Display::Detect(display::Type)+0x2c>
 8015242:	bd38      	pop	{r3, r4, r5, pc}

08015244 <Display::Display()>:
 8015244:	2304      	movs	r3, #4
 8015246:	b510      	push	{r4, lr}
 8015248:	6003      	str	r3, [r0, #0]
 801524a:	4b0f      	ldr	r3, [pc, #60]	; (8015288 <Display::Display()+0x44>)
 801524c:	4604      	mov	r4, r0
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	4a0e      	ldr	r2, [pc, #56]	; (801528c <Display::Display()+0x48>)
 8015252:	6043      	str	r3, [r0, #4]
 8015254:	2321      	movs	r3, #33	; 0x21
 8015256:	7203      	strb	r3, [r0, #8]
 8015258:	4b0d      	ldr	r3, [pc, #52]	; (8015290 <Display::Display()+0x4c>)
 801525a:	2102      	movs	r1, #2
 801525c:	60c3      	str	r3, [r0, #12]
 801525e:	2300      	movs	r3, #0
 8015260:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8015264:	8203      	strh	r3, [r0, #16]
 8015266:	4b0b      	ldr	r3, [pc, #44]	; (8015294 <Display::Display()+0x50>)
 8015268:	6018      	str	r0, [r3, #0]
 801526a:	f7ff ffc0 	bl	80151ee <Display::Detect(display::Type)>
 801526e:	4620      	mov	r0, r4
 8015270:	f7ff ffa5 	bl	80151be <Display::Detect7Segment()>
 8015274:	69a3      	ldr	r3, [r4, #24]
 8015276:	b10b      	cbz	r3, 801527c <Display::Display()+0x38>
 8015278:	f7f3 fb3c 	bl	80088f4 <display::timeout::gpio_init()>
 801527c:	69a0      	ldr	r0, [r4, #24]
 801527e:	f7ff ff61 	bl	8015144 <Display::PrintInfo() [clone .isra.0]>
 8015282:	4620      	mov	r0, r4
 8015284:	bd10      	pop	{r4, pc}
 8015286:	bf00      	nop
 8015288:	2001ce64 	andcs	ip, r1, r4, ror #28
 801528c:	000493e0 	andeq	r9, r4, r0, ror #7
 8015290:	00061a80 	andeq	r1, r6, r0, lsl #21
 8015294:	2001cd5c 	andcs	ip, r1, ip, asr sp

08015298 <Ssd1306::~Ssd1306()>:
 8015298:	4770      	bx	lr

0801529a <Ssd1306::SetCursor(unsigned int)>:
 801529a:	4770      	bx	lr

0801529c <Ssd1306::PrintInfo()>:
 801529c:	b410      	push	{r4}
 801529e:	4906      	ldr	r1, [pc, #24]	; (80152b8 <Ssd1306::PrintInfo()+0x1c>)
 80152a0:	7c44      	ldrb	r4, [r0, #17]
 80152a2:	7903      	ldrb	r3, [r0, #4]
 80152a4:	7942      	ldrb	r2, [r0, #5]
 80152a6:	4805      	ldr	r0, [pc, #20]	; (80152bc <Ssd1306::PrintInfo()+0x20>)
 80152a8:	2c00      	cmp	r4, #0
 80152aa:	bf08      	it	eq
 80152ac:	4601      	moveq	r1, r0
 80152ae:	4804      	ldr	r0, [pc, #16]	; (80152c0 <Ssd1306::PrintInfo()+0x24>)
 80152b0:	bc10      	pop	{r4}
 80152b2:	f7f4 ba53 	b.w	800975c <printf>
 80152b6:	bf00      	nop
 80152b8:	0801a326 	stmdaeq	r1, {r1, r2, r5, r8, r9, sp, pc}
 80152bc:	0801a32d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, sp, pc}
 80152c0:	0801a335 	stmdaeq	r1, {r0, r2, r4, r5, r8, r9, sp, pc}

080152c4 <Ssd1306::~Ssd1306()>:
 80152c4:	b510      	push	{r4, lr}
 80152c6:	4604      	mov	r4, r0
 80152c8:	f000 fb7a 	bl	80159c0 <operator delete(void*)>
 80152cc:	4620      	mov	r0, r4
 80152ce:	bd10      	pop	{r4, pc}

080152d0 <HAL_I2C::Setup()>:
 80152d0:	b510      	push	{r4, lr}
 80152d2:	4604      	mov	r4, r0
 80152d4:	7800      	ldrb	r0, [r0, #0]
 80152d6:	f001 fd0d 	bl	8016cf4 <gd32_i2c_set_address(unsigned char)>
 80152da:	6860      	ldr	r0, [r4, #4]
 80152dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152e0:	f001 bd00 	b.w	8016ce4 <gd32_i2c_set_baudrate(unsigned int)>

080152e4 <Ssd1306::PutChar(int)>:
 80152e4:	b510      	push	{r4, lr}
 80152e6:	f1a1 0420 	sub.w	r4, r1, #32
 80152ea:	2c5f      	cmp	r4, #95	; 0x5f
 80152ec:	bf88      	it	hi
 80152ee:	2400      	movhi	r4, #0
 80152f0:	3008      	adds	r0, #8
 80152f2:	f7ff ffed 	bl	80152d0 <HAL_I2C::Setup()>
 80152f6:	4804      	ldr	r0, [pc, #16]	; (8015308 <Ssd1306::PutChar(int)+0x24>)
 80152f8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80152fc:	4420      	add	r0, r4
 80152fe:	2107      	movs	r1, #7
 8015300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015304:	f001 bcfc 	b.w	8016d00 <gd32_i2c_write(char const*, unsigned int)>
 8015308:	0801a348 	stmdaeq	r1, {r3, r6, r8, r9, sp, pc}

0801530c <Ssd1306::PutString(char const*)>:
 801530c:	b538      	push	{r3, r4, r5, lr}
 801530e:	4605      	mov	r5, r0
 8015310:	1e4c      	subs	r4, r1, #1
 8015312:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8015316:	b901      	cbnz	r1, 801531a <Ssd1306::PutString(char const*)+0xe>
 8015318:	bd38      	pop	{r3, r4, r5, pc}
 801531a:	4628      	mov	r0, r5
 801531c:	f7ff ffe2 	bl	80152e4 <Ssd1306::PutChar(int)>
 8015320:	e7f7      	b.n	8015312 <Ssd1306::PutString(char const*)+0x6>

08015322 <Ssd1306::Text(char const*, unsigned int)>:
 8015322:	b570      	push	{r4, r5, r6, lr}
 8015324:	7903      	ldrb	r3, [r0, #4]
 8015326:	4605      	mov	r5, r0
 8015328:	460c      	mov	r4, r1
 801532a:	4293      	cmp	r3, r2
 801532c:	bf94      	ite	ls
 801532e:	18ce      	addls	r6, r1, r3
 8015330:	188e      	addhi	r6, r1, r2
 8015332:	42b4      	cmp	r4, r6
 8015334:	d100      	bne.n	8015338 <Ssd1306::Text(char const*, unsigned int)+0x16>
 8015336:	bd70      	pop	{r4, r5, r6, pc}
 8015338:	4628      	mov	r0, r5
 801533a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801533e:	f7ff ffd1 	bl	80152e4 <Ssd1306::PutChar(int)>
 8015342:	e7f6      	b.n	8015332 <Ssd1306::Text(char const*, unsigned int)+0x10>

08015344 <Ssd1306::InitMembers()>:
 8015344:	7c03      	ldrb	r3, [r0, #16]
 8015346:	b14b      	cbz	r3, 801535c <Ssd1306::InitMembers()+0x18>
 8015348:	3b01      	subs	r3, #1
 801534a:	2b01      	cmp	r3, #1
 801534c:	d909      	bls.n	8015362 <Ssd1306::InitMembers()+0x1e>
 801534e:	2308      	movs	r3, #8
 8015350:	2204      	movs	r2, #4
 8015352:	2115      	movs	r1, #21
 8015354:	7143      	strb	r3, [r0, #5]
 8015356:	7101      	strb	r1, [r0, #4]
 8015358:	6142      	str	r2, [r0, #20]
 801535a:	4770      	bx	lr
 801535c:	2308      	movs	r3, #8
 801535e:	461a      	mov	r2, r3
 8015360:	e7f7      	b.n	8015352 <Ssd1306::InitMembers()+0xe>
 8015362:	2304      	movs	r3, #4
 8015364:	e7fb      	b.n	801535e <Ssd1306::InitMembers()+0x1a>
	...

08015368 <Ssd1306::Ssd1306(TOledPanel)>:
 8015368:	4a08      	ldr	r2, [pc, #32]	; (801538c <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 801536a:	b508      	push	{r3, lr}
 801536c:	6002      	str	r2, [r0, #0]
 801536e:	227f      	movs	r2, #127	; 0x7f
 8015370:	80c2      	strh	r2, [r0, #6]
 8015372:	223c      	movs	r2, #60	; 0x3c
 8015374:	7202      	strb	r2, [r0, #8]
 8015376:	4a06      	ldr	r2, [pc, #24]	; (8015390 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8015378:	7401      	strb	r1, [r0, #16]
 801537a:	60c2      	str	r2, [r0, #12]
 801537c:	2200      	movs	r2, #0
 801537e:	7442      	strb	r2, [r0, #17]
 8015380:	4a04      	ldr	r2, [pc, #16]	; (8015394 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 8015382:	6010      	str	r0, [r2, #0]
 8015384:	f7ff ffde 	bl	8015344 <Ssd1306::InitMembers()>
 8015388:	bd08      	pop	{r3, pc}
 801538a:	bf00      	nop
 801538c:	0801a620 	stmdaeq	r1, {r5, r9, sl, sp, pc}
 8015390:	00061a80 	andeq	r1, r6, r0, lsl #21
 8015394:	2001cde8 	andcs	ip, r1, r8, ror #27

08015398 <Ssd1306::SendCommand(unsigned char)>:
 8015398:	2300      	movs	r3, #0
 801539a:	b507      	push	{r0, r1, r2, lr}
 801539c:	3008      	adds	r0, #8
 801539e:	f88d 3004 	strb.w	r3, [sp, #4]
 80153a2:	f88d 1005 	strb.w	r1, [sp, #5]
 80153a6:	f7ff ff93 	bl	80152d0 <HAL_I2C::Setup()>
 80153aa:	2102      	movs	r1, #2
 80153ac:	a801      	add	r0, sp, #4
 80153ae:	f001 fca7 	bl	8016d00 <gd32_i2c_write(char const*, unsigned int)>
 80153b2:	b003      	add	sp, #12
 80153b4:	f85d fb04 	ldr.w	pc, [sp], #4

080153b8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 80153b8:	2914      	cmp	r1, #20
 80153ba:	b570      	push	{r4, r5, r6, lr}
 80153bc:	4605      	mov	r5, r0
 80153be:	4616      	mov	r6, r2
 80153c0:	d81c      	bhi.n	80153fc <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 80153c2:	7943      	ldrb	r3, [r0, #5]
 80153c4:	4293      	cmp	r3, r2
 80153c6:	d919      	bls.n	80153fc <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 80153c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80153cc:	7c43      	ldrb	r3, [r0, #17]
 80153ce:	004c      	lsls	r4, r1, #1
 80153d0:	b2e4      	uxtb	r4, r4
 80153d2:	b10b      	cbz	r3, 80153d8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 80153d4:	3404      	adds	r4, #4
 80153d6:	b2e4      	uxtb	r4, r4
 80153d8:	4628      	mov	r0, r5
 80153da:	f004 010e 	and.w	r1, r4, #14
 80153de:	f7ff ffdb 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 80153e2:	0921      	lsrs	r1, r4, #4
 80153e4:	4628      	mov	r0, r5
 80153e6:	f041 0110 	orr.w	r1, r1, #16
 80153ea:	f7ff ffd5 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 80153ee:	4628      	mov	r0, r5
 80153f0:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 80153f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80153f8:	f7ff bfce 	b.w	8015398 <Ssd1306::SendCommand(unsigned char)>
 80153fc:	bd70      	pop	{r4, r5, r6, pc}

080153fe <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 80153fe:	b570      	push	{r4, r5, r6, lr}
 8015400:	4604      	mov	r4, r0
 8015402:	4615      	mov	r5, r2
 8015404:	461e      	mov	r6, r3
 8015406:	b171      	cbz	r1, 8015426 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 8015408:	7943      	ldrb	r3, [r0, #5]
 801540a:	428b      	cmp	r3, r1
 801540c:	d30b      	bcc.n	8015426 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 801540e:	3901      	subs	r1, #1
 8015410:	b2ca      	uxtb	r2, r1
 8015412:	2100      	movs	r1, #0
 8015414:	f7ff ffd0 	bl	80153b8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8015418:	4632      	mov	r2, r6
 801541a:	4629      	mov	r1, r5
 801541c:	4620      	mov	r0, r4
 801541e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015422:	f7ff bf7e 	b.w	8015322 <Ssd1306::Text(char const*, unsigned int)>
 8015426:	bd70      	pop	{r4, r5, r6, pc}

08015428 <Ssd1306::ClearLine(unsigned char)>:
 8015428:	b538      	push	{r3, r4, r5, lr}
 801542a:	4605      	mov	r5, r0
 801542c:	b1b9      	cbz	r1, 801545e <Ssd1306::ClearLine(unsigned char)+0x36>
 801542e:	7943      	ldrb	r3, [r0, #5]
 8015430:	428b      	cmp	r3, r1
 8015432:	d314      	bcc.n	801545e <Ssd1306::ClearLine(unsigned char)+0x36>
 8015434:	3901      	subs	r1, #1
 8015436:	b2cc      	uxtb	r4, r1
 8015438:	4622      	mov	r2, r4
 801543a:	2100      	movs	r1, #0
 801543c:	f7ff ffbc 	bl	80153b8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8015440:	f105 0008 	add.w	r0, r5, #8
 8015444:	f7ff ff44 	bl	80152d0 <HAL_I2C::Setup()>
 8015448:	2181      	movs	r1, #129	; 0x81
 801544a:	4805      	ldr	r0, [pc, #20]	; (8015460 <Ssd1306::ClearLine(unsigned char)+0x38>)
 801544c:	f001 fc58 	bl	8016d00 <gd32_i2c_write(char const*, unsigned int)>
 8015450:	4622      	mov	r2, r4
 8015452:	4628      	mov	r0, r5
 8015454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015458:	2100      	movs	r1, #0
 801545a:	f7ff bfad 	b.w	80153b8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 801545e:	bd38      	pop	{r3, r4, r5, pc}
 8015460:	2001cd60 	andcs	ip, r1, r0, ror #26

08015464 <Ssd1306::SetSleep(bool)>:
 8015464:	b111      	cbz	r1, 801546c <Ssd1306::SetSleep(bool)+0x8>
 8015466:	21ae      	movs	r1, #174	; 0xae
 8015468:	f7ff bf96 	b.w	8015398 <Ssd1306::SendCommand(unsigned char)>
 801546c:	21af      	movs	r1, #175	; 0xaf
 801546e:	e7fb      	b.n	8015468 <Ssd1306::SetSleep(bool)+0x4>

08015470 <Ssd1306::SetContrast(unsigned char)>:
 8015470:	b538      	push	{r3, r4, r5, lr}
 8015472:	4604      	mov	r4, r0
 8015474:	460d      	mov	r5, r1
 8015476:	7181      	strb	r1, [r0, #6]
 8015478:	2181      	movs	r1, #129	; 0x81
 801547a:	f7ff ff8d 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 801547e:	4629      	mov	r1, r5
 8015480:	4620      	mov	r0, r4
 8015482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015486:	f7ff bf87 	b.w	8015398 <Ssd1306::SendCommand(unsigned char)>

0801548a <Ssd1306::SetFlipVertically(bool)>:
 801548a:	b510      	push	{r4, lr}
 801548c:	4604      	mov	r4, r0
 801548e:	71c1      	strb	r1, [r0, #7]
 8015490:	b141      	cbz	r1, 80154a4 <Ssd1306::SetFlipVertically(bool)+0x1a>
 8015492:	21c0      	movs	r1, #192	; 0xc0
 8015494:	f7ff ff80 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 8015498:	21a0      	movs	r1, #160	; 0xa0
 801549a:	4620      	mov	r0, r4
 801549c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154a0:	f7ff bf7a 	b.w	8015398 <Ssd1306::SendCommand(unsigned char)>
 80154a4:	21c8      	movs	r1, #200	; 0xc8
 80154a6:	f7ff ff77 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 80154aa:	21a1      	movs	r1, #161	; 0xa1
 80154ac:	e7f5      	b.n	801549a <Ssd1306::SetFlipVertically(bool)+0x10>
	...

080154b0 <Ssd1306::CheckSH1106()>:
 80154b0:	b570      	push	{r4, r5, r6, lr}
 80154b2:	4604      	mov	r4, r0
 80154b4:	b086      	sub	sp, #24
 80154b6:	2100      	movs	r1, #0
 80154b8:	f7ff ff6e 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 80154bc:	2190      	movs	r1, #144	; 0x90
 80154be:	4620      	mov	r0, r4
 80154c0:	f7ff ff6a 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 80154c4:	21b0      	movs	r1, #176	; 0xb0
 80154c6:	4620      	mov	r0, r4
 80154c8:	f7ff ff66 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 80154cc:	4b22      	ldr	r3, [pc, #136]	; (8015558 <Ssd1306::CheckSH1106()+0xa8>)
 80154ce:	f104 0608 	add.w	r6, r4, #8
 80154d2:	6818      	ldr	r0, [r3, #0]
 80154d4:	791b      	ldrb	r3, [r3, #4]
 80154d6:	ad02      	add	r5, sp, #8
 80154d8:	9002      	str	r0, [sp, #8]
 80154da:	4630      	mov	r0, r6
 80154dc:	712b      	strb	r3, [r5, #4]
 80154de:	f7ff fef7 	bl	80152d0 <HAL_I2C::Setup()>
 80154e2:	2105      	movs	r1, #5
 80154e4:	4628      	mov	r0, r5
 80154e6:	f001 fc0b 	bl	8016d00 <gd32_i2c_write(char const*, unsigned int)>
 80154ea:	2100      	movs	r1, #0
 80154ec:	4620      	mov	r0, r4
 80154ee:	f7ff ff53 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 80154f2:	2190      	movs	r1, #144	; 0x90
 80154f4:	4620      	mov	r0, r4
 80154f6:	f7ff ff4f 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 80154fa:	21b0      	movs	r1, #176	; 0xb0
 80154fc:	4620      	mov	r0, r4
 80154fe:	f7ff ff4b 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 8015502:	2300      	movs	r3, #0
 8015504:	9304      	str	r3, [sp, #16]
 8015506:	f88d 3014 	strb.w	r3, [sp, #20]
 801550a:	2340      	movs	r3, #64	; 0x40
 801550c:	4630      	mov	r0, r6
 801550e:	f88d 3007 	strb.w	r3, [sp, #7]
 8015512:	f7ff fedd 	bl	80152d0 <HAL_I2C::Setup()>
 8015516:	2101      	movs	r1, #1
 8015518:	f10d 0007 	add.w	r0, sp, #7
 801551c:	f001 fbf0 	bl	8016d00 <gd32_i2c_write(char const*, unsigned int)>
 8015520:	4630      	mov	r0, r6
 8015522:	f7ff fed5 	bl	80152d0 <HAL_I2C::Setup()>
 8015526:	2105      	movs	r1, #5
 8015528:	a804      	add	r0, sp, #16
 801552a:	f001 fc4f 	bl	8016dcc <gd32_i2c_read(char*, unsigned int)>
 801552e:	2201      	movs	r2, #1
 8015530:	5cab      	ldrb	r3, [r5, r2]
 8015532:	a904      	add	r1, sp, #16
 8015534:	3201      	adds	r2, #1
 8015536:	4411      	add	r1, r2
 8015538:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 801553c:	428b      	cmp	r3, r1
 801553e:	d006      	beq.n	801554e <Ssd1306::CheckSH1106()+0x9e>
 8015540:	1a5b      	subs	r3, r3, r1
 8015542:	fab3 f383 	clz	r3, r3
 8015546:	095b      	lsrs	r3, r3, #5
 8015548:	7463      	strb	r3, [r4, #17]
 801554a:	b006      	add	sp, #24
 801554c:	bd70      	pop	{r4, r5, r6, pc}
 801554e:	2a05      	cmp	r2, #5
 8015550:	d1ee      	bne.n	8015530 <Ssd1306::CheckSH1106()+0x80>
 8015552:	2300      	movs	r3, #0
 8015554:	e7f5      	b.n	8015542 <Ssd1306::CheckSH1106()+0x92>
 8015556:	bf00      	nop
 8015558:	0801a341 	stmdaeq	r1, {r0, r6, r8, r9, sp, pc}

0801555c <Ssd1306::Cls()>:
 801555c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015560:	4604      	mov	r4, r0
 8015562:	2600      	movs	r6, #0
 8015564:	7c45      	ldrb	r5, [r0, #17]
 8015566:	00ad      	lsls	r5, r5, #2
 8015568:	b2ed      	uxtb	r5, r5
 801556a:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 801556e:	f045 0810 	orr.w	r8, r5, #16
 8015572:	b2ff      	uxtb	r7, r7
 8015574:	6963      	ldr	r3, [r4, #20]
 8015576:	4629      	mov	r1, r5
 8015578:	42b3      	cmp	r3, r6
 801557a:	4620      	mov	r0, r4
 801557c:	d80b      	bhi.n	8015596 <Ssd1306::Cls()+0x3a>
 801557e:	f7ff ff0b 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 8015582:	4641      	mov	r1, r8
 8015584:	4620      	mov	r0, r4
 8015586:	f7ff ff07 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 801558a:	4620      	mov	r0, r4
 801558c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015590:	21b0      	movs	r1, #176	; 0xb0
 8015592:	f7ff bf01 	b.w	8015398 <Ssd1306::SendCommand(unsigned char)>
 8015596:	f7ff feff 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 801559a:	4641      	mov	r1, r8
 801559c:	4620      	mov	r0, r4
 801559e:	f7ff fefb 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 80155a2:	f066 014f 	orn	r1, r6, #79	; 0x4f
 80155a6:	4620      	mov	r0, r4
 80155a8:	b2c9      	uxtb	r1, r1
 80155aa:	f7ff fef5 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 80155ae:	7c23      	ldrb	r3, [r4, #16]
 80155b0:	b123      	cbz	r3, 80155bc <Ssd1306::Cls()+0x60>
 80155b2:	3b01      	subs	r3, #1
 80155b4:	2b01      	cmp	r3, #1
 80155b6:	d901      	bls.n	80155bc <Ssd1306::Cls()+0x60>
 80155b8:	3601      	adds	r6, #1
 80155ba:	e7db      	b.n	8015574 <Ssd1306::Cls()+0x18>
 80155bc:	f104 0008 	add.w	r0, r4, #8
 80155c0:	f7ff fe86 	bl	80152d0 <HAL_I2C::Setup()>
 80155c4:	4639      	mov	r1, r7
 80155c6:	4802      	ldr	r0, [pc, #8]	; (80155d0 <Ssd1306::Cls()+0x74>)
 80155c8:	f001 fb9a 	bl	8016d00 <gd32_i2c_write(char const*, unsigned int)>
 80155cc:	e7f4      	b.n	80155b8 <Ssd1306::Cls()+0x5c>
 80155ce:	bf00      	nop
 80155d0:	2001cd60 	andcs	ip, r1, r0, ror #26

080155d4 <Ssd1306::Start()>:
 80155d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80155d6:	7a04      	ldrb	r4, [r0, #8]
 80155d8:	68c6      	ldr	r6, [r0, #12]
 80155da:	4605      	mov	r5, r0
 80155dc:	4620      	mov	r0, r4
 80155de:	f001 fb89 	bl	8016cf4 <gd32_i2c_set_address(unsigned char)>
 80155e2:	4630      	mov	r0, r6
 80155e4:	f001 fb7e 	bl	8016ce4 <gd32_i2c_set_baudrate(unsigned int)>
 80155e8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80155ec:	2b07      	cmp	r3, #7
 80155ee:	d902      	bls.n	80155f6 <Ssd1306::Start()+0x22>
 80155f0:	3c50      	subs	r4, #80	; 0x50
 80155f2:	2c0f      	cmp	r4, #15
 80155f4:	d80f      	bhi.n	8015616 <Ssd1306::Start()+0x42>
 80155f6:	2101      	movs	r1, #1
 80155f8:	f10d 0007 	add.w	r0, sp, #7
 80155fc:	f001 fbe6 	bl	8016dcc <gd32_i2c_read(char*, unsigned int)>
 8015600:	fab0 f480 	clz	r4, r0
 8015604:	0964      	lsrs	r4, r4, #5
 8015606:	b35c      	cbz	r4, 8015660 <Ssd1306::Start()+0x8c>
 8015608:	7c2e      	ldrb	r6, [r5, #16]
 801560a:	b14e      	cbz	r6, 8015620 <Ssd1306::Start()+0x4c>
 801560c:	3e01      	subs	r6, #1
 801560e:	2e01      	cmp	r6, #1
 8015610:	d929      	bls.n	8015666 <Ssd1306::Start()+0x92>
 8015612:	2400      	movs	r4, #0
 8015614:	e024      	b.n	8015660 <Ssd1306::Start()+0x8c>
 8015616:	2100      	movs	r1, #0
 8015618:	4608      	mov	r0, r1
 801561a:	f001 fb71 	bl	8016d00 <gd32_i2c_write(char const*, unsigned int)>
 801561e:	e7ef      	b.n	8015600 <Ssd1306::Start()+0x2c>
 8015620:	4f16      	ldr	r7, [pc, #88]	; (801567c <Ssd1306::Start()+0xa8>)
 8015622:	4628      	mov	r0, r5
 8015624:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015628:	3601      	adds	r6, #1
 801562a:	f7ff feb5 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 801562e:	2e18      	cmp	r6, #24
 8015630:	d1f7      	bne.n	8015622 <Ssd1306::Start()+0x4e>
 8015632:	2300      	movs	r3, #0
 8015634:	4a12      	ldr	r2, [pc, #72]	; (8015680 <Ssd1306::Start()+0xac>)
 8015636:	4618      	mov	r0, r3
 8015638:	4611      	mov	r1, r2
 801563a:	3301      	adds	r3, #1
 801563c:	2b86      	cmp	r3, #134	; 0x86
 801563e:	f802 0b01 	strb.w	r0, [r2], #1
 8015642:	d1fa      	bne.n	801563a <Ssd1306::Start()+0x66>
 8015644:	2340      	movs	r3, #64	; 0x40
 8015646:	4628      	mov	r0, r5
 8015648:	700b      	strb	r3, [r1, #0]
 801564a:	f7ff ff31 	bl	80154b0 <Ssd1306::CheckSH1106()>
 801564e:	4628      	mov	r0, r5
 8015650:	f7ff ff84 	bl	801555c <Ssd1306::Cls()>
 8015654:	21af      	movs	r1, #175	; 0xaf
 8015656:	4628      	mov	r0, r5
 8015658:	f7ff fe9e 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 801565c:	2301      	movs	r3, #1
 801565e:	71eb      	strb	r3, [r5, #7]
 8015660:	4620      	mov	r0, r4
 8015662:	b003      	add	sp, #12
 8015664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015666:	2600      	movs	r6, #0
 8015668:	4f06      	ldr	r7, [pc, #24]	; (8015684 <Ssd1306::Start()+0xb0>)
 801566a:	4628      	mov	r0, r5
 801566c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015670:	3601      	adds	r6, #1
 8015672:	f7ff fe91 	bl	8015398 <Ssd1306::SendCommand(unsigned char)>
 8015676:	2e18      	cmp	r6, #24
 8015678:	d1f7      	bne.n	801566a <Ssd1306::Start()+0x96>
 801567a:	e7da      	b.n	8015632 <Ssd1306::Start()+0x5e>
 801567c:	0801a600 	stmdaeq	r1, {r9, sl, sp, pc}
 8015680:	2001cd60 	andcs	ip, r1, r0, ror #26
 8015684:	0801a5e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, sl, sp, pc}

08015688 <console_putc>:
 8015688:	f000 bb98 	b.w	8015dbc <uart0_putc>

0801568c <console_puts>:
 801568c:	f000 bbb6 	b.w	8015dfc <uart0_puts>

08015690 <console_set_fg_color>:
 8015690:	2807      	cmp	r0, #7
 8015692:	d810      	bhi.n	80156b6 <console_set_fg_color+0x26>
 8015694:	e8df f000 	tbb	[pc, r0]
 8015698:	0b090704 	bleq	82572b0 <__exidx_end+0x23cb5c>
 801569c:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 8015668 <Ssd1306::Start()+0x94>
 80156a0:	4806      	ldr	r0, [pc, #24]	; (80156bc <console_set_fg_color+0x2c>)
 80156a2:	f000 bbab 	b.w	8015dfc <uart0_puts>
 80156a6:	4806      	ldr	r0, [pc, #24]	; (80156c0 <console_set_fg_color+0x30>)
 80156a8:	e7fb      	b.n	80156a2 <console_set_fg_color+0x12>
 80156aa:	4806      	ldr	r0, [pc, #24]	; (80156c4 <console_set_fg_color+0x34>)
 80156ac:	e7f9      	b.n	80156a2 <console_set_fg_color+0x12>
 80156ae:	4806      	ldr	r0, [pc, #24]	; (80156c8 <console_set_fg_color+0x38>)
 80156b0:	e7f7      	b.n	80156a2 <console_set_fg_color+0x12>
 80156b2:	4806      	ldr	r0, [pc, #24]	; (80156cc <console_set_fg_color+0x3c>)
 80156b4:	e7f5      	b.n	80156a2 <console_set_fg_color+0x12>
 80156b6:	4806      	ldr	r0, [pc, #24]	; (80156d0 <console_set_fg_color+0x40>)
 80156b8:	e7f3      	b.n	80156a2 <console_set_fg_color+0x12>
 80156ba:	bf00      	nop
 80156bc:	0801a65e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r9, sl, sp, pc}
 80156c0:	0801a664 	stmdaeq	r1, {r2, r5, r6, r9, sl, sp, pc}
 80156c4:	0801a66a 	stmdaeq	r1, {r1, r3, r5, r6, r9, sl, sp, pc}
 80156c8:	0801a670 	stmdaeq	r1, {r4, r5, r6, r9, sl, sp, pc}
 80156cc:	08017db4 	stmdaeq	r1, {r2, r4, r5, r7, r8, sl, fp, ip, sp, lr}
 80156d0:	0801a676 	stmdaeq	r1, {r1, r2, r4, r5, r6, r9, sl, sp, pc}

080156d4 <console_error>:
 80156d4:	b510      	push	{r4, lr}
 80156d6:	4604      	mov	r4, r0
 80156d8:	4805      	ldr	r0, [pc, #20]	; (80156f0 <console_error+0x1c>)
 80156da:	f000 fb8f 	bl	8015dfc <uart0_puts>
 80156de:	4620      	mov	r0, r4
 80156e0:	f000 fb8c 	bl	8015dfc <uart0_puts>
 80156e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80156e8:	4802      	ldr	r0, [pc, #8]	; (80156f4 <console_error+0x20>)
 80156ea:	f000 bb87 	b.w	8015dfc <uart0_puts>
 80156ee:	bf00      	nop
 80156f0:	0801a664 	stmdaeq	r1, {r2, r5, r6, r9, sl, sp, pc}
 80156f4:	08017db4 	stmdaeq	r1, {r2, r4, r5, r7, r8, sl, fp, ip, sp, lr}

080156f8 <console_status>:
 80156f8:	b510      	push	{r4, lr}
 80156fa:	460c      	mov	r4, r1
 80156fc:	b280      	uxth	r0, r0
 80156fe:	f7ff ffc7 	bl	8015690 <console_set_fg_color>
 8015702:	4807      	ldr	r0, [pc, #28]	; (8015720 <console_status+0x28>)
 8015704:	f000 fb7a 	bl	8015dfc <uart0_puts>
 8015708:	4620      	mov	r0, r4
 801570a:	f000 fb77 	bl	8015dfc <uart0_puts>
 801570e:	200a      	movs	r0, #10
 8015710:	f000 fb54 	bl	8015dbc <uart0_putc>
 8015714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015718:	4802      	ldr	r0, [pc, #8]	; (8015724 <console_status+0x2c>)
 801571a:	f000 bb6f 	b.w	8015dfc <uart0_puts>
 801571e:	bf00      	nop
 8015720:	0801a658 	stmdaeq	r1, {r3, r4, r6, r9, sl, sp, pc}
 8015724:	08017db4 	stmdaeq	r1, {r2, r4, r5, r7, r8, sl, fp, ip, sp, lr}

08015728 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8015728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801572c:	4617      	mov	r7, r2
 801572e:	461e      	mov	r6, r3
 8015730:	4d14      	ldr	r5, [pc, #80]	; (8015784 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8015732:	4b15      	ldr	r3, [pc, #84]	; (8015788 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8015734:	b086      	sub	sp, #24
 8015736:	6018      	str	r0, [r3, #0]
 8015738:	4604      	mov	r4, r0
 801573a:	f105 0803 	add.w	r8, r5, #3
 801573e:	2203      	movs	r2, #3
 8015740:	4628      	mov	r0, r5
 8015742:	f000 fa00 	bl	8015b46 <memmove>
 8015746:	4639      	mov	r1, r7
 8015748:	220b      	movs	r2, #11
 801574a:	4640      	mov	r0, r8
 801574c:	f000 f9fb 	bl	8015b46 <memmove>
 8015750:	f105 030e 	add.w	r3, r5, #14
 8015754:	4631      	mov	r1, r6
 8015756:	2208      	movs	r2, #8
 8015758:	4618      	mov	r0, r3
 801575a:	f000 f9f4 	bl	8015b46 <memmove>
 801575e:	2308      	movs	r3, #8
 8015760:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8015764:	230b      	movs	r3, #11
 8015766:	9302      	str	r3, [sp, #8]
 8015768:	4b08      	ldr	r3, [pc, #32]	; (801578c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 801576a:	9005      	str	r0, [sp, #20]
 801576c:	e9cd 5300 	strd	r5, r3, [sp]
 8015770:	213f      	movs	r1, #63	; 0x3f
 8015772:	2303      	movs	r3, #3
 8015774:	4a06      	ldr	r2, [pc, #24]	; (8015790 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 8015776:	4807      	ldr	r0, [pc, #28]	; (8015794 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8015778:	f7f4 f818 	bl	80097ac <snprintf>
 801577c:	4620      	mov	r0, r4
 801577e:	b006      	add	sp, #24
 8015780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015784:	2001cdec 	andcs	ip, r1, ip, ror #27
 8015788:	2001ce44 	andcs	ip, r1, r4, asr #28
 801578c:	08017f79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 8015790:	0801a67c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r9, sl, sp, pc}
 8015794:	2001ce02 	andcs	ip, r1, r2, lsl #28

08015798 <FirmwareVersion::Print(char const*)>:
 8015798:	b510      	push	{r4, lr}
 801579a:	460c      	mov	r4, r1
 801579c:	4804      	ldr	r0, [pc, #16]	; (80157b0 <FirmwareVersion::Print(char const*)+0x18>)
 801579e:	f000 fa0a 	bl	8015bb6 <puts>
 80157a2:	b124      	cbz	r4, 80157ae <FirmwareVersion::Print(char const*)+0x16>
 80157a4:	4620      	mov	r0, r4
 80157a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157aa:	f000 ba04 	b.w	8015bb6 <puts>
 80157ae:	bd10      	pop	{r4, pc}
 80157b0:	2001ce02 	andcs	ip, r1, r2, lsl #28

080157b4 <LedBlink::LedBlink()>:
 80157b4:	b538      	push	{r3, r4, r5, lr}
 80157b6:	2205      	movs	r2, #5
 80157b8:	2300      	movs	r3, #0
 80157ba:	e9c0 3200 	strd	r3, r2, [r0]
 80157be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80157c2:	6083      	str	r3, [r0, #8]
 80157c4:	e9c0 2303 	strd	r2, r3, [r0, #12]
 80157c8:	6143      	str	r3, [r0, #20]
 80157ca:	4b09      	ldr	r3, [pc, #36]	; (80157f0 <LedBlink::LedBlink()+0x3c>)
 80157cc:	4d09      	ldr	r5, [pc, #36]	; (80157f4 <LedBlink::LedBlink()+0x40>)
 80157ce:	4604      	mov	r4, r0
 80157d0:	6018      	str	r0, [r3, #0]
 80157d2:	f240 6004 	movw	r0, #1540	; 0x604
 80157d6:	f000 fd87 	bl	80162e8 <rcu_periph_clock_enable>
 80157da:	4628      	mov	r0, r5
 80157dc:	2301      	movs	r3, #1
 80157de:	2203      	movs	r2, #3
 80157e0:	2110      	movs	r1, #16
 80157e2:	f000 fce9 	bl	80161b8 <gpio_init>
 80157e6:	2301      	movs	r3, #1
 80157e8:	4620      	mov	r0, r4
 80157ea:	616b      	str	r3, [r5, #20]
 80157ec:	bd38      	pop	{r3, r4, r5, pc}
 80157ee:	bf00      	nop
 80157f0:	2001ce48 	andcs	ip, r1, r8, asr #28
 80157f4:	40011000 	andmi	r1, r1, r0

080157f8 <LedBlink::SetMode(ledblink::Mode)>:
 80157f8:	6843      	ldr	r3, [r0, #4]
 80157fa:	428b      	cmp	r3, r1
 80157fc:	d02f      	beq.n	801585e <LedBlink::SetMode(ledblink::Mode)+0x66>
 80157fe:	6041      	str	r1, [r0, #4]
 8015800:	2904      	cmp	r1, #4
 8015802:	d822      	bhi.n	801584a <LedBlink::SetMode(ledblink::Mode)+0x52>
 8015804:	e8df f001 	tbb	[pc, r1]
 8015808:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 801580c:	23ff001d 	mvnscs	r0, #29
 8015810:	6003      	str	r3, [r0, #0]
 8015812:	2300      	movs	r3, #0
 8015814:	2201      	movs	r2, #1
 8015816:	60c3      	str	r3, [r0, #12]
 8015818:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801581c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8015820:	611a      	str	r2, [r3, #16]
 8015822:	6880      	ldr	r0, [r0, #8]
 8015824:	b1d8      	cbz	r0, 801585e <LedBlink::SetMode(ledblink::Mode)+0x66>
 8015826:	6803      	ldr	r3, [r0, #0]
 8015828:	689b      	ldr	r3, [r3, #8]
 801582a:	4718      	bx	r3
 801582c:	2301      	movs	r3, #1
 801582e:	6003      	str	r3, [r0, #0]
 8015830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015834:	60c3      	str	r3, [r0, #12]
 8015836:	e7f4      	b.n	8015822 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8015838:	2303      	movs	r3, #3
 801583a:	6003      	str	r3, [r0, #0]
 801583c:	f240 134d 	movw	r3, #333	; 0x14d
 8015840:	e7f8      	b.n	8015834 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8015842:	2305      	movs	r3, #5
 8015844:	6003      	str	r3, [r0, #0]
 8015846:	23c8      	movs	r3, #200	; 0xc8
 8015848:	e7f4      	b.n	8015834 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 801584a:	2300      	movs	r3, #0
 801584c:	2201      	movs	r2, #1
 801584e:	6003      	str	r3, [r0, #0]
 8015850:	60c3      	str	r3, [r0, #12]
 8015852:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015856:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 801585a:	615a      	str	r2, [r3, #20]
 801585c:	e7e1      	b.n	8015822 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 801585e:	4770      	bx	lr

08015860 <Hardware::Hardware()>:
 8015860:	b570      	push	{r4, r5, r6, lr}
 8015862:	2400      	movs	r4, #0
 8015864:	4b26      	ldr	r3, [pc, #152]	; (8015900 <Hardware::Hardware()+0xa0>)
 8015866:	b090      	sub	sp, #64	; 0x40
 8015868:	6004      	str	r4, [r0, #0]
 801586a:	7104      	strb	r4, [r0, #4]
 801586c:	6018      	str	r0, [r3, #0]
 801586e:	4605      	mov	r5, r0
 8015870:	f7f1 fe72 	bl	8007558 <console_init>
 8015874:	f000 fad2 	bl	8015e1c <systick_config>
 8015878:	f001 fcb2 	bl	80171e0 <udelay_init()>
 801587c:	f001 fc62 	bl	8017144 <micros_init()>
 8015880:	f240 701b 	movw	r0, #1819	; 0x71b
 8015884:	f000 fd30 	bl	80162e8 <rcu_periph_clock_enable>
 8015888:	f240 701c 	movw	r0, #1820	; 0x71c
 801588c:	f000 fd2c 	bl	80162e8 <rcu_periph_clock_enable>
 8015890:	4e1c      	ldr	r6, [pc, #112]	; (8015904 <Hardware::Hardware()+0xa4>)
 8015892:	f000 fd21 	bl	80162d8 <pmu_backup_write_enable>
 8015896:	f000 fb65 	bl	8015f64 <bkp_deinit>
 801589a:	4621      	mov	r1, r4
 801589c:	2002      	movs	r0, #2
 801589e:	f000 fb69 	bl	8015f74 <bkp_data_write>
 80158a2:	f240 7004 	movw	r0, #1796	; 0x704
 80158a6:	f000 fd1f 	bl	80162e8 <rcu_periph_clock_enable>
 80158aa:	4630      	mov	r0, r6
 80158ac:	f000 fe90 	bl	80165d0 <timer_deinit>
 80158b0:	2377      	movs	r3, #119	; 0x77
 80158b2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80158b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80158ba:	a903      	add	r1, sp, #12
 80158bc:	4630      	mov	r0, r6
 80158be:	9305      	str	r3, [sp, #20]
 80158c0:	f000 ff2c 	bl	801671c <timer_init>
 80158c4:	4630      	mov	r0, r6
 80158c6:	f000 ff81 	bl	80167cc <timer_enable>
 80158ca:	f001 f97d 	bl	8016bc8 <gd32_adc_init()>
 80158ce:	2213      	movs	r2, #19
 80158d0:	2302      	movs	r3, #2
 80158d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80158d6:	237a      	movs	r3, #122	; 0x7a
 80158d8:	a807      	add	r0, sp, #28
 80158da:	930c      	str	r3, [sp, #48]	; 0x30
 80158dc:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80158e0:	9407      	str	r4, [sp, #28]
 80158e2:	940f      	str	r4, [sp, #60]	; 0x3c
 80158e4:	f000 f9c0 	bl	8015c68 <mktime>
 80158e8:	4621      	mov	r1, r4
 80158ea:	e9cd 0401 	strd	r0, r4, [sp, #4]
 80158ee:	a801      	add	r0, sp, #4
 80158f0:	f000 fa30 	bl	8015d54 <settimeofday>
 80158f4:	f001 f9c2 	bl	8016c7c <gd32_i2c_begin()>
 80158f8:	4628      	mov	r0, r5
 80158fa:	b010      	add	sp, #64	; 0x40
 80158fc:	bd70      	pop	{r4, r5, r6, pc}
 80158fe:	bf00      	nop
 8015900:	2001ce4c 	andcs	ip, r1, ip, asr #28
 8015904:	40001000 	andmi	r1, r0, r0

08015908 <Hardware::GetUuid(unsigned char*)>:
 8015908:	4a0c      	ldr	r2, [pc, #48]	; (801593c <Hardware::GetUuid(unsigned char*)+0x34>)
 801590a:	b084      	sub	sp, #16
 801590c:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8015910:	9300      	str	r3, [sp, #0]
 8015912:	f8d2 07ec 	ldr.w	r0, [r2, #2028]	; 0x7ec
 8015916:	9001      	str	r0, [sp, #4]
 8015918:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 801591c:	4403      	add	r3, r0
 801591e:	4413      	add	r3, r2
 8015920:	9202      	str	r2, [sp, #8]
 8015922:	466a      	mov	r2, sp
 8015924:	9303      	str	r3, [sp, #12]
 8015926:	1e4b      	subs	r3, r1, #1
 8015928:	310f      	adds	r1, #15
 801592a:	428b      	cmp	r3, r1
 801592c:	d101      	bne.n	8015932 <Hardware::GetUuid(unsigned char*)+0x2a>
 801592e:	b004      	add	sp, #16
 8015930:	4770      	bx	lr
 8015932:	f812 0b01 	ldrb.w	r0, [r2], #1
 8015936:	f803 0f01 	strb.w	r0, [r3, #1]!
 801593a:	e7f6      	b.n	801592a <Hardware::GetUuid(unsigned char*)+0x22>
 801593c:	1ffff000 	svcne	0x00fff000

08015940 <Hardware::SetTime(tm const*)>:
 8015940:	2000      	movs	r0, #0
 8015942:	4770      	bx	lr

08015944 <Hardware::Reboot()>:
 8015944:	b508      	push	{r3, lr}
 8015946:	6803      	ldr	r3, [r0, #0]
 8015948:	4604      	mov	r4, r0
 801594a:	b153      	cbz	r3, 8015962 <Hardware::Reboot()+0x1e>
 801594c:	2300      	movs	r3, #0
 801594e:	2104      	movs	r1, #4
 8015950:	7103      	strb	r3, [r0, #4]
 8015952:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015956:	f000 fc05 	bl	8016164 <fwdgt_config>
 801595a:	6820      	ldr	r0, [r4, #0]
 801595c:	6803      	ldr	r3, [r0, #0]
 801595e:	689b      	ldr	r3, [r3, #8]
 8015960:	4798      	blx	r3
 8015962:	2102      	movs	r1, #2
 8015964:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015968:	f000 fbfc 	bl	8016164 <fwdgt_config>
 801596c:	2801      	cmp	r0, #1
 801596e:	bf0c      	ite	eq
 8015970:	2301      	moveq	r3, #1
 8015972:	2300      	movne	r3, #0
 8015974:	7123      	strb	r3, [r4, #4]
 8015976:	d101      	bne.n	801597c <Hardware::Reboot()+0x38>
 8015978:	f000 fbe4 	bl	8016144 <fwdgt_enable>
 801597c:	2208      	movs	r2, #8
 801597e:	4b0d      	ldr	r3, [pc, #52]	; (80159b4 <Hardware::Reboot()+0x70>)
 8015980:	2501      	movs	r5, #1
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	480c      	ldr	r0, [pc, #48]	; (80159b8 <Hardware::Reboot()+0x74>)
 8015986:	601a      	str	r2, [r3, #0]
 8015988:	227d      	movs	r2, #125	; 0x7d
 801598a:	490c      	ldr	r1, [pc, #48]	; (80159bc <Hardware::Reboot()+0x78>)
 801598c:	60da      	str	r2, [r3, #12]
 801598e:	68dc      	ldr	r4, [r3, #12]
 8015990:	b904      	cbnz	r4, 8015994 <Hardware::Reboot()+0x50>
 8015992:	e7fe      	b.n	8015992 <Hardware::Reboot()+0x4e>
 8015994:	6802      	ldr	r2, [r0, #0]
 8015996:	695e      	ldr	r6, [r3, #20]
 8015998:	1b92      	subs	r2, r2, r6
 801599a:	4294      	cmp	r4, r2
 801599c:	d8f8      	bhi.n	8015990 <Hardware::Reboot()+0x4c>
 801599e:	6802      	ldr	r2, [r0, #0]
 80159a0:	615a      	str	r2, [r3, #20]
 80159a2:	691a      	ldr	r2, [r3, #16]
 80159a4:	2a01      	cmp	r2, #1
 80159a6:	f082 0401 	eor.w	r4, r2, #1
 80159aa:	611c      	str	r4, [r3, #16]
 80159ac:	bf14      	ite	ne
 80159ae:	610d      	strne	r5, [r1, #16]
 80159b0:	614a      	streq	r2, [r1, #20]
 80159b2:	e7ec      	b.n	801598e <Hardware::Reboot()+0x4a>
 80159b4:	2001ce48 	andcs	ip, r1, r8, asr #28
 80159b8:	2001ce64 	andcs	ip, r1, r4, ror #28
 80159bc:	40011000 	andmi	r1, r1, r0

080159c0 <operator delete(void*)>:
 80159c0:	f000 b890 	b.w	8015ae4 <free>

080159c4 <operator delete[](void*)>:
 80159c4:	f000 b88e 	b.w	8015ae4 <free>

080159c8 <operator new(unsigned int)>:
 80159c8:	f000 b842 	b.w	8015a50 <malloc>

080159cc <operator new[](unsigned int)>:
 80159cc:	f000 b840 	b.w	8015a50 <malloc>

080159d0 <inet_aton>:
 80159d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80159d2:	f04f 0c0a 	mov.w	ip, #10
 80159d6:	2500      	movs	r5, #0
 80159d8:	ae01      	add	r6, sp, #4
 80159da:	4603      	mov	r3, r0
 80159dc:	2200      	movs	r2, #0
 80159de:	1d07      	adds	r7, r0, #4
 80159e0:	e007      	b.n	80159f2 <inet_aton+0x22>
 80159e2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80159e6:	2b09      	cmp	r3, #9
 80159e8:	d820      	bhi.n	8015a2c <inet_aton+0x5c>
 80159ea:	4603      	mov	r3, r0
 80159ec:	fb0c 4202 	mla	r2, ip, r2, r4
 80159f0:	3a30      	subs	r2, #48	; 0x30
 80159f2:	4618      	mov	r0, r3
 80159f4:	f810 4b01 	ldrb.w	r4, [r0], #1
 80159f8:	2c2e      	cmp	r4, #46	; 0x2e
 80159fa:	d111      	bne.n	8015a20 <inet_aton+0x50>
 80159fc:	3501      	adds	r5, #1
 80159fe:	2d03      	cmp	r5, #3
 8015a00:	f806 2b01 	strb.w	r2, [r6], #1
 8015a04:	d1e9      	bne.n	80159da <inet_aton+0xa>
 8015a06:	2200      	movs	r2, #0
 8015a08:	250a      	movs	r5, #10
 8015a0a:	1d1c      	adds	r4, r3, #4
 8015a0c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8015a10:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 8015a14:	d10d      	bne.n	8015a32 <inet_aton+0x62>
 8015a16:	f88d 2007 	strb.w	r2, [sp, #7]
 8015a1a:	b9b1      	cbnz	r1, 8015a4a <inet_aton+0x7a>
 8015a1c:	2001      	movs	r0, #1
 8015a1e:	e006      	b.n	8015a2e <inet_aton+0x5e>
 8015a20:	2c00      	cmp	r4, #0
 8015a22:	d0eb      	beq.n	80159fc <inet_aton+0x2c>
 8015a24:	2c0a      	cmp	r4, #10
 8015a26:	d0e9      	beq.n	80159fc <inet_aton+0x2c>
 8015a28:	42b8      	cmp	r0, r7
 8015a2a:	d1da      	bne.n	80159e2 <inet_aton+0x12>
 8015a2c:	2000      	movs	r0, #0
 8015a2e:	b003      	add	sp, #12
 8015a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a32:	280a      	cmp	r0, #10
 8015a34:	d0ef      	beq.n	8015a16 <inet_aton+0x46>
 8015a36:	42a3      	cmp	r3, r4
 8015a38:	d0f8      	beq.n	8015a2c <inet_aton+0x5c>
 8015a3a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 8015a3e:	2e09      	cmp	r6, #9
 8015a40:	d8f4      	bhi.n	8015a2c <inet_aton+0x5c>
 8015a42:	fb05 0202 	mla	r2, r5, r2, r0
 8015a46:	3a30      	subs	r2, #48	; 0x30
 8015a48:	e7e0      	b.n	8015a0c <inet_aton+0x3c>
 8015a4a:	9b01      	ldr	r3, [sp, #4]
 8015a4c:	600b      	str	r3, [r1, #0]
 8015a4e:	e7e5      	b.n	8015a1c <inet_aton+0x4c>

08015a50 <malloc>:
 8015a50:	b538      	push	{r3, r4, r5, lr}
 8015a52:	4604      	mov	r4, r0
 8015a54:	4601      	mov	r1, r0
 8015a56:	481c      	ldr	r0, [pc, #112]	; (8015ac8 <malloc+0x78>)
 8015a58:	f7f3 fe80 	bl	800975c <printf>
 8015a5c:	b17c      	cbz	r4, 8015a7e <malloc+0x2e>
 8015a5e:	4b1b      	ldr	r3, [pc, #108]	; (8015acc <malloc+0x7c>)
 8015a60:	6818      	ldr	r0, [r3, #0]
 8015a62:	b978      	cbnz	r0, 8015a84 <malloc+0x34>
 8015a64:	4a1a      	ldr	r2, [pc, #104]	; (8015ad0 <malloc+0x80>)
 8015a66:	f104 031b 	add.w	r3, r4, #27
 8015a6a:	6811      	ldr	r1, [r2, #0]
 8015a6c:	4819      	ldr	r0, [pc, #100]	; (8015ad4 <malloc+0x84>)
 8015a6e:	f023 030f 	bic.w	r3, r3, #15
 8015a72:	440b      	add	r3, r1
 8015a74:	4283      	cmp	r3, r0
 8015a76:	d921      	bls.n	8015abc <malloc+0x6c>
 8015a78:	4817      	ldr	r0, [pc, #92]	; (8015ad8 <malloc+0x88>)
 8015a7a:	f7f3 fe6f 	bl	800975c <printf>
 8015a7e:	2500      	movs	r5, #0
 8015a80:	4628      	mov	r0, r5
 8015a82:	bd38      	pop	{r3, r4, r5, pc}
 8015a84:	4284      	cmp	r4, r0
 8015a86:	d80a      	bhi.n	8015a9e <malloc+0x4e>
 8015a88:	685a      	ldr	r2, [r3, #4]
 8015a8a:	6899      	ldr	r1, [r3, #8]
 8015a8c:	3201      	adds	r2, #1
 8015a8e:	428a      	cmp	r2, r1
 8015a90:	605a      	str	r2, [r3, #4]
 8015a92:	d900      	bls.n	8015a96 <malloc+0x46>
 8015a94:	609a      	str	r2, [r3, #8]
 8015a96:	68d9      	ldr	r1, [r3, #12]
 8015a98:	b919      	cbnz	r1, 8015aa2 <malloc+0x52>
 8015a9a:	4604      	mov	r4, r0
 8015a9c:	e7e2      	b.n	8015a64 <malloc+0x14>
 8015a9e:	3310      	adds	r3, #16
 8015aa0:	e7de      	b.n	8015a60 <malloc+0x10>
 8015aa2:	4604      	mov	r4, r0
 8015aa4:	688a      	ldr	r2, [r1, #8]
 8015aa6:	60da      	str	r2, [r3, #12]
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	f101 050c 	add.w	r5, r1, #12
 8015aae:	608b      	str	r3, [r1, #8]
 8015ab0:	4622      	mov	r2, r4
 8015ab2:	462b      	mov	r3, r5
 8015ab4:	4809      	ldr	r0, [pc, #36]	; (8015adc <malloc+0x8c>)
 8015ab6:	f7f3 fe51 	bl	800975c <printf>
 8015aba:	e7e1      	b.n	8015a80 <malloc+0x30>
 8015abc:	6013      	str	r3, [r2, #0]
 8015abe:	4b08      	ldr	r3, [pc, #32]	; (8015ae0 <malloc+0x90>)
 8015ac0:	e9c1 3400 	strd	r3, r4, [r1]
 8015ac4:	e7f0      	b.n	8015aa8 <malloc+0x58>
 8015ac6:	bf00      	nop
 8015ac8:	0801a6a0 	stmdaeq	r1, {r5, r7, r9, sl, sp, pc}
 8015acc:	20000014 	andcs	r0, r0, r4, lsl r0
 8015ad0:	20000010 	andcs	r0, r0, r0, lsl r0
 8015ad4:	2003d800 	andcs	sp, r3, r0, lsl #16
 8015ad8:	0801a6ac 	stmdaeq	r1, {r2, r3, r5, r7, r9, sl, sp, pc}
 8015adc:	0801a6c8 	stmdaeq	r1, {r3, r6, r7, r9, sl, sp, pc}
 8015ae0:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08015ae4 <free>:
 8015ae4:	b538      	push	{r3, r4, r5, lr}
 8015ae6:	4604      	mov	r4, r0
 8015ae8:	b1c8      	cbz	r0, 8015b1e <free+0x3a>
 8015aea:	f1a0 050c 	sub.w	r5, r0, #12
 8015aee:	4602      	mov	r2, r0
 8015af0:	4629      	mov	r1, r5
 8015af2:	480c      	ldr	r0, [pc, #48]	; (8015b24 <free+0x40>)
 8015af4:	f7f3 fe32 	bl	800975c <printf>
 8015af8:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8015afc:	4b0a      	ldr	r3, [pc, #40]	; (8015b28 <free+0x44>)
 8015afe:	429a      	cmp	r2, r3
 8015b00:	d10d      	bne.n	8015b1e <free+0x3a>
 8015b02:	4b0a      	ldr	r3, [pc, #40]	; (8015b2c <free+0x48>)
 8015b04:	681a      	ldr	r2, [r3, #0]
 8015b06:	b152      	cbz	r2, 8015b1e <free+0x3a>
 8015b08:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8015b0c:	4291      	cmp	r1, r2
 8015b0e:	d107      	bne.n	8015b20 <free+0x3c>
 8015b10:	68da      	ldr	r2, [r3, #12]
 8015b12:	f844 2c04 	str.w	r2, [r4, #-4]
 8015b16:	685a      	ldr	r2, [r3, #4]
 8015b18:	60dd      	str	r5, [r3, #12]
 8015b1a:	3a01      	subs	r2, #1
 8015b1c:	605a      	str	r2, [r3, #4]
 8015b1e:	bd38      	pop	{r3, r4, r5, pc}
 8015b20:	3310      	adds	r3, #16
 8015b22:	e7ef      	b.n	8015b04 <free+0x20>
 8015b24:	0801a6f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, sl, sp, pc}
 8015b28:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8015b2c:	20000014 	andcs	r0, r0, r4, lsl r0

08015b30 <memcpy>:
 8015b30:	b510      	push	{r4, lr}
 8015b32:	1e43      	subs	r3, r0, #1
 8015b34:	440a      	add	r2, r1
 8015b36:	4291      	cmp	r1, r2
 8015b38:	d100      	bne.n	8015b3c <memcpy+0xc>
 8015b3a:	bd10      	pop	{r4, pc}
 8015b3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015b44:	e7f7      	b.n	8015b36 <memcpy+0x6>

08015b46 <memmove>:
 8015b46:	4288      	cmp	r0, r1
 8015b48:	b510      	push	{r4, lr}
 8015b4a:	eb01 0302 	add.w	r3, r1, r2
 8015b4e:	d208      	bcs.n	8015b62 <memmove+0x1c>
 8015b50:	1e42      	subs	r2, r0, #1
 8015b52:	4299      	cmp	r1, r3
 8015b54:	d100      	bne.n	8015b58 <memmove+0x12>
 8015b56:	bd10      	pop	{r4, pc}
 8015b58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b5c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015b60:	e7f7      	b.n	8015b52 <memmove+0xc>
 8015b62:	4601      	mov	r1, r0
 8015b64:	4402      	add	r2, r0
 8015b66:	428a      	cmp	r2, r1
 8015b68:	d0f5      	beq.n	8015b56 <memmove+0x10>
 8015b6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015b6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015b72:	e7f8      	b.n	8015b66 <memmove+0x20>

08015b74 <memset>:
 8015b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b76:	b1c2      	cbz	r2, 8015baa <memset+0x36>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	b2c9      	uxtb	r1, r1
 8015b7c:	075c      	lsls	r4, r3, #29
 8015b7e:	d110      	bne.n	8015ba2 <memset+0x2e>
 8015b80:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 8015b84:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8015b88:	463d      	mov	r5, r7
 8015b8a:	461e      	mov	r6, r3
 8015b8c:	f022 0407 	bic.w	r4, r2, #7
 8015b90:	441c      	add	r4, r3
 8015b92:	42a6      	cmp	r6, r4
 8015b94:	d10a      	bne.n	8015bac <memset+0x38>
 8015b96:	4413      	add	r3, r2
 8015b98:	429c      	cmp	r4, r3
 8015b9a:	d006      	beq.n	8015baa <memset+0x36>
 8015b9c:	f804 1b01 	strb.w	r1, [r4], #1
 8015ba0:	e7fa      	b.n	8015b98 <memset+0x24>
 8015ba2:	3a01      	subs	r2, #1
 8015ba4:	f803 1b01 	strb.w	r1, [r3], #1
 8015ba8:	d1e8      	bne.n	8015b7c <memset+0x8>
 8015baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bac:	f846 7b08 	str.w	r7, [r6], #8
 8015bb0:	f846 5c04 	str.w	r5, [r6, #-4]
 8015bb4:	e7ed      	b.n	8015b92 <memset+0x1e>

08015bb6 <puts>:
 8015bb6:	b508      	push	{r3, lr}
 8015bb8:	f7ff fd68 	bl	801568c <console_puts>
 8015bbc:	200a      	movs	r0, #10
 8015bbe:	f7ff fd63 	bl	8015688 <console_putc>
 8015bc2:	2001      	movs	r0, #1
 8015bc4:	bd08      	pop	{r3, pc}
	...

08015bc8 <strtok>:
 8015bc8:	b530      	push	{r4, r5, lr}
 8015bca:	b910      	cbnz	r0, 8015bd2 <strtok+0xa>
 8015bcc:	4b12      	ldr	r3, [pc, #72]	; (8015c18 <strtok+0x50>)
 8015bce:	6818      	ldr	r0, [r3, #0]
 8015bd0:	b158      	cbz	r0, 8015bea <strtok+0x22>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	460d      	mov	r5, r1
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015bdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015be0:	b924      	cbnz	r4, 8015bec <strtok+0x24>
 8015be2:	b94a      	cbnz	r2, 8015bf8 <strtok+0x30>
 8015be4:	4610      	mov	r0, r2
 8015be6:	4b0c      	ldr	r3, [pc, #48]	; (8015c18 <strtok+0x50>)
 8015be8:	601a      	str	r2, [r3, #0]
 8015bea:	bd30      	pop	{r4, r5, pc}
 8015bec:	42a2      	cmp	r2, r4
 8015bee:	d1f5      	bne.n	8015bdc <strtok+0x14>
 8015bf0:	e7f0      	b.n	8015bd4 <strtok+0xc>
 8015bf2:	4613      	mov	r3, r2
 8015bf4:	e00c      	b.n	8015c10 <strtok+0x48>
 8015bf6:	b914      	cbnz	r4, 8015bfe <strtok+0x36>
 8015bf8:	460d      	mov	r5, r1
 8015bfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015bfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015c02:	42a2      	cmp	r2, r4
 8015c04:	d1f7      	bne.n	8015bf6 <strtok+0x2e>
 8015c06:	2a00      	cmp	r2, #0
 8015c08:	d0f3      	beq.n	8015bf2 <strtok+0x2a>
 8015c0a:	2200      	movs	r2, #0
 8015c0c:	f803 2c01 	strb.w	r2, [r3, #-1]
 8015c10:	4a01      	ldr	r2, [pc, #4]	; (8015c18 <strtok+0x50>)
 8015c12:	6013      	str	r3, [r2, #0]
 8015c14:	e7e9      	b.n	8015bea <strtok+0x22>
 8015c16:	bf00      	nop
 8015c18:	2001ce50 	andcs	ip, r1, r0, asr lr

08015c1c <isleapyear>:
 8015c1c:	2264      	movs	r2, #100	; 0x64
 8015c1e:	fb90 f3f2 	sdiv	r3, r0, r2
 8015c22:	fb02 0313 	mls	r3, r2, r3, r0
 8015c26:	b94b      	cbnz	r3, 8015c3c <isleapyear+0x20>
 8015c28:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8015c2c:	fb90 f2f3 	sdiv	r2, r0, r3
 8015c30:	fb03 0012 	mls	r0, r3, r2, r0
 8015c34:	fab0 f080 	clz	r0, r0
 8015c38:	0940      	lsrs	r0, r0, #5
 8015c3a:	4770      	bx	lr
 8015c3c:	f010 0f03 	tst.w	r0, #3
 8015c40:	bf0c      	ite	eq
 8015c42:	2001      	moveq	r0, #1
 8015c44:	2000      	movne	r0, #0
 8015c46:	4770      	bx	lr

08015c48 <getdaysofmonth>:
 8015c48:	b510      	push	{r4, lr}
 8015c4a:	4604      	mov	r4, r0
 8015c4c:	2c01      	cmp	r4, #1
 8015c4e:	4608      	mov	r0, r1
 8015c50:	d102      	bne.n	8015c58 <getdaysofmonth+0x10>
 8015c52:	f7ff ffe3 	bl	8015c1c <isleapyear>
 8015c56:	b918      	cbnz	r0, 8015c60 <getdaysofmonth+0x18>
 8015c58:	4b02      	ldr	r3, [pc, #8]	; (8015c64 <getdaysofmonth+0x1c>)
 8015c5a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015c5e:	bd10      	pop	{r4, pc}
 8015c60:	201d      	movs	r0, #29
 8015c62:	e7fc      	b.n	8015c5e <getdaysofmonth+0x16>
 8015c64:	0801a71c 	stmdaeq	r1, {r2, r3, r4, r8, r9, sl, sp, pc}

08015c68 <mktime>:
 8015c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c6c:	4604      	mov	r4, r0
 8015c6e:	2800      	cmp	r0, #0
 8015c70:	d043      	beq.n	8015cfa <mktime+0x92>
 8015c72:	6941      	ldr	r1, [r0, #20]
 8015c74:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8015c78:	2b45      	cmp	r3, #69	; 0x45
 8015c7a:	d83e      	bhi.n	8015cfa <mktime+0x92>
 8015c7c:	2600      	movs	r6, #0
 8015c7e:	f240 75b2 	movw	r5, #1970	; 0x7b2
 8015c82:	f240 186d 	movw	r8, #365	; 0x16d
 8015c86:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 8015c8a:	42af      	cmp	r7, r5
 8015c8c:	da24      	bge.n	8015cd8 <mktime+0x70>
 8015c8e:	6927      	ldr	r7, [r4, #16]
 8015c90:	2f0b      	cmp	r7, #11
 8015c92:	d832      	bhi.n	8015cfa <mktime+0x92>
 8015c94:	2500      	movs	r5, #0
 8015c96:	42af      	cmp	r7, r5
 8015c98:	d129      	bne.n	8015cee <mktime+0x86>
 8015c9a:	68e5      	ldr	r5, [r4, #12]
 8015c9c:	2d00      	cmp	r5, #0
 8015c9e:	dd2c      	ble.n	8015cfa <mktime+0x92>
 8015ca0:	4638      	mov	r0, r7
 8015ca2:	f7ff ffd1 	bl	8015c48 <getdaysofmonth>
 8015ca6:	4285      	cmp	r5, r0
 8015ca8:	dc27      	bgt.n	8015cfa <mktime+0x92>
 8015caa:	2318      	movs	r3, #24
 8015cac:	3d01      	subs	r5, #1
 8015cae:	4435      	add	r5, r6
 8015cb0:	435d      	muls	r5, r3
 8015cb2:	68a3      	ldr	r3, [r4, #8]
 8015cb4:	2b17      	cmp	r3, #23
 8015cb6:	d820      	bhi.n	8015cfa <mktime+0x92>
 8015cb8:	213c      	movs	r1, #60	; 0x3c
 8015cba:	442b      	add	r3, r5
 8015cbc:	fb01 f203 	mul.w	r2, r1, r3
 8015cc0:	6863      	ldr	r3, [r4, #4]
 8015cc2:	2b3b      	cmp	r3, #59	; 0x3b
 8015cc4:	d819      	bhi.n	8015cfa <mktime+0x92>
 8015cc6:	6820      	ldr	r0, [r4, #0]
 8015cc8:	4413      	add	r3, r2
 8015cca:	283b      	cmp	r0, #59	; 0x3b
 8015ccc:	fb01 f303 	mul.w	r3, r1, r3
 8015cd0:	d813      	bhi.n	8015cfa <mktime+0x92>
 8015cd2:	4418      	add	r0, r3
 8015cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cd8:	4628      	mov	r0, r5
 8015cda:	f7ff ff9f 	bl	8015c1c <isleapyear>
 8015cde:	2800      	cmp	r0, #0
 8015ce0:	bf14      	ite	ne
 8015ce2:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8015ce6:	4643      	moveq	r3, r8
 8015ce8:	3501      	adds	r5, #1
 8015cea:	441e      	add	r6, r3
 8015cec:	e7cd      	b.n	8015c8a <mktime+0x22>
 8015cee:	4628      	mov	r0, r5
 8015cf0:	f7ff ffaa 	bl	8015c48 <getdaysofmonth>
 8015cf4:	3501      	adds	r5, #1
 8015cf6:	4406      	add	r6, r0
 8015cf8:	e7cd      	b.n	8015c96 <mktime+0x2e>
 8015cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015cfe:	e7e9      	b.n	8015cd4 <mktime+0x6c>

08015d00 <gettimeofday>:
 8015d00:	b538      	push	{r3, r4, r5, lr}
 8015d02:	4b10      	ldr	r3, [pc, #64]	; (8015d44 <gettimeofday+0x44>)
 8015d04:	4a10      	ldr	r2, [pc, #64]	; (8015d48 <gettimeofday+0x48>)
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	6814      	ldr	r4, [r2, #0]
 8015d0a:	6013      	str	r3, [r2, #0]
 8015d0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015d10:	429c      	cmp	r4, r3
 8015d12:	bf2c      	ite	cs
 8015d14:	1ae4      	subcs	r4, r4, r3
 8015d16:	1b1c      	subcc	r4, r3, r4
 8015d18:	4354      	muls	r4, r2
 8015d1a:	4b0c      	ldr	r3, [pc, #48]	; (8015d4c <gettimeofday+0x4c>)
 8015d1c:	4605      	mov	r5, r0
 8015d1e:	e9d3 2100 	ldrd	r2, r1, [r3]
 8015d22:	18a4      	adds	r4, r4, r2
 8015d24:	f141 0100 	adc.w	r1, r1, #0
 8015d28:	e9c3 4100 	strd	r4, r1, [r3]
 8015d2c:	4620      	mov	r0, r4
 8015d2e:	2300      	movs	r3, #0
 8015d30:	4a07      	ldr	r2, [pc, #28]	; (8015d50 <gettimeofday+0x50>)
 8015d32:	f7f2 f8fd 	bl	8007f30 <__aeabi_uldivmod>
 8015d36:	4b06      	ldr	r3, [pc, #24]	; (8015d50 <gettimeofday+0x50>)
 8015d38:	6028      	str	r0, [r5, #0]
 8015d3a:	fb03 4410 	mls	r4, r3, r0, r4
 8015d3e:	2000      	movs	r0, #0
 8015d40:	606c      	str	r4, [r5, #4]
 8015d42:	bd38      	pop	{r3, r4, r5, pc}
 8015d44:	2001ce64 	andcs	ip, r1, r4, ror #28
 8015d48:	2001ce60 	andcs	ip, r1, r0, ror #28
 8015d4c:	2001ce58 	andcs	ip, r1, r8, asr lr
 8015d50:	000f4240 	andeq	r4, pc, r0, asr #4

08015d54 <settimeofday>:
 8015d54:	4b07      	ldr	r3, [pc, #28]	; (8015d74 <settimeofday+0x20>)
 8015d56:	b510      	push	{r4, lr}
 8015d58:	681a      	ldr	r2, [r3, #0]
 8015d5a:	4b07      	ldr	r3, [pc, #28]	; (8015d78 <settimeofday+0x24>)
 8015d5c:	6804      	ldr	r4, [r0, #0]
 8015d5e:	601a      	str	r2, [r3, #0]
 8015d60:	6843      	ldr	r3, [r0, #4]
 8015d62:	4806      	ldr	r0, [pc, #24]	; (8015d7c <settimeofday+0x28>)
 8015d64:	17da      	asrs	r2, r3, #31
 8015d66:	fbc4 3200 	smlal	r3, r2, r4, r0
 8015d6a:	4905      	ldr	r1, [pc, #20]	; (8015d80 <settimeofday+0x2c>)
 8015d6c:	2000      	movs	r0, #0
 8015d6e:	e9c1 3200 	strd	r3, r2, [r1]
 8015d72:	bd10      	pop	{r4, pc}
 8015d74:	2001ce64 	andcs	ip, r1, r4, ror #28
 8015d78:	2001ce60 	andcs	ip, r1, r0, ror #28
 8015d7c:	000f4240 	andeq	r4, pc, r0, asr #4
 8015d80:	2001ce58 	andcs	ip, r1, r8, asr lr

08015d84 <time>:
 8015d84:	b513      	push	{r0, r1, r4, lr}
 8015d86:	4604      	mov	r4, r0
 8015d88:	2100      	movs	r1, #0
 8015d8a:	4668      	mov	r0, sp
 8015d8c:	f7ff ffb8 	bl	8015d00 <gettimeofday>
 8015d90:	9800      	ldr	r0, [sp, #0]
 8015d92:	b104      	cbz	r4, 8015d96 <time+0x12>
 8015d94:	6020      	str	r0, [r4, #0]
 8015d96:	b002      	add	sp, #8
 8015d98:	bd10      	pop	{r4, pc}
	...

08015d9c <uart0_init>:
 8015d9c:	2301      	movs	r3, #1
 8015d9e:	b507      	push	{r0, r1, r2, lr}
 8015da0:	2208      	movs	r2, #8
 8015da2:	9300      	str	r3, [sp, #0]
 8015da4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8015da8:	2300      	movs	r3, #0
 8015daa:	4803      	ldr	r0, [pc, #12]	; (8015db8 <uart0_init+0x1c>)
 8015dac:	f001 f8b2 	bl	8016f14 <gd32_uart_begin>
 8015db0:	b003      	add	sp, #12
 8015db2:	f85d fb04 	ldr.w	pc, [sp], #4
 8015db6:	bf00      	nop
 8015db8:	40013800 	andmi	r3, r1, r0, lsl #16

08015dbc <uart0_putc>:
 8015dbc:	280a      	cmp	r0, #10
 8015dbe:	b538      	push	{r3, r4, r5, lr}
 8015dc0:	4604      	mov	r4, r0
 8015dc2:	d10a      	bne.n	8015dda <uart0_putc+0x1e>
 8015dc4:	4d0b      	ldr	r5, [pc, #44]	; (8015df4 <uart0_putc+0x38>)
 8015dc6:	2107      	movs	r1, #7
 8015dc8:	4628      	mov	r0, r5
 8015dca:	f000 fe2b 	bl	8016a24 <usart_flag_get>
 8015dce:	2800      	cmp	r0, #0
 8015dd0:	d0f9      	beq.n	8015dc6 <uart0_putc+0xa>
 8015dd2:	220d      	movs	r2, #13
 8015dd4:	4b08      	ldr	r3, [pc, #32]	; (8015df8 <uart0_putc+0x3c>)
 8015dd6:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8015dda:	4d06      	ldr	r5, [pc, #24]	; (8015df4 <uart0_putc+0x38>)
 8015ddc:	2107      	movs	r1, #7
 8015dde:	4628      	mov	r0, r5
 8015de0:	f000 fe20 	bl	8016a24 <usart_flag_get>
 8015de4:	2800      	cmp	r0, #0
 8015de6:	d0f9      	beq.n	8015ddc <uart0_putc+0x20>
 8015de8:	4b03      	ldr	r3, [pc, #12]	; (8015df8 <uart0_putc+0x3c>)
 8015dea:	b2e4      	uxtb	r4, r4
 8015dec:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 8015df0:	bd38      	pop	{r3, r4, r5, pc}
 8015df2:	bf00      	nop
 8015df4:	40013800 	andmi	r3, r1, r0, lsl #16
 8015df8:	40013000 	andmi	r3, r1, r0

08015dfc <uart0_puts>:
 8015dfc:	b510      	push	{r4, lr}
 8015dfe:	1e44      	subs	r4, r0, #1
 8015e00:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015e04:	b903      	cbnz	r3, 8015e08 <uart0_puts+0xc>
 8015e06:	bd10      	pop	{r4, pc}
 8015e08:	2b0a      	cmp	r3, #10
 8015e0a:	d102      	bne.n	8015e12 <uart0_puts+0x16>
 8015e0c:	200d      	movs	r0, #13
 8015e0e:	f7ff ffd5 	bl	8015dbc <uart0_putc>
 8015e12:	7820      	ldrb	r0, [r4, #0]
 8015e14:	f7ff ffd2 	bl	8015dbc <uart0_putc>
 8015e18:	e7f2      	b.n	8015e00 <uart0_puts+0x4>
	...

08015e1c <systick_config>:
 8015e1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015e20:	4b0b      	ldr	r3, [pc, #44]	; (8015e50 <systick_config+0x34>)
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8015e28:	3b01      	subs	r3, #1
 8015e2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015e2e:	d20d      	bcs.n	8015e4c <systick_config+0x30>
 8015e30:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8015e34:	21f0      	movs	r1, #240	; 0xf0
 8015e36:	6153      	str	r3, [r2, #20]
 8015e38:	4b06      	ldr	r3, [pc, #24]	; (8015e54 <systick_config+0x38>)
 8015e3a:	2007      	movs	r0, #7
 8015e3c:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8015e40:	2100      	movs	r1, #0
 8015e42:	6191      	str	r1, [r2, #24]
 8015e44:	6110      	str	r0, [r2, #16]
 8015e46:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8015e4a:	4770      	bx	lr
 8015e4c:	e7fe      	b.n	8015e4c <systick_config+0x30>
 8015e4e:	bf00      	nop
 8015e50:	200000e4 	andcs	r0, r0, r4, ror #1
 8015e54:	e000ed00 	and	lr, r0, r0, lsl #26

08015e58 <SysTick_Handler>:
 8015e58:	4a02      	ldr	r2, [pc, #8]	; (8015e64 <SysTick_Handler+0xc>)
 8015e5a:	6813      	ldr	r3, [r2, #0]
 8015e5c:	3301      	adds	r3, #1
 8015e5e:	6013      	str	r3, [r2, #0]
 8015e60:	4770      	bx	lr
 8015e62:	bf00      	nop
 8015e64:	2001ce64 	andcs	ip, r1, r4, ror #28

08015e68 <SystemInit>:
 8015e68:	4b3a      	ldr	r3, [pc, #232]	; (8015f54 <SystemInit+0xec>)
 8015e6a:	681a      	ldr	r2, [r3, #0]
 8015e6c:	f042 0201 	orr.w	r2, r2, #1
 8015e70:	601a      	str	r2, [r3, #0]
 8015e72:	6859      	ldr	r1, [r3, #4]
 8015e74:	4a38      	ldr	r2, [pc, #224]	; (8015f58 <SystemInit+0xf0>)
 8015e76:	400a      	ands	r2, r1
 8015e78:	605a      	str	r2, [r3, #4]
 8015e7a:	681a      	ldr	r2, [r3, #0]
 8015e7c:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8015e80:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8015e84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8015e88:	601a      	str	r2, [r3, #0]
 8015e8a:	681a      	ldr	r2, [r3, #0]
 8015e8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8015e90:	601a      	str	r2, [r3, #0]
 8015e92:	685a      	ldr	r2, [r3, #4]
 8015e94:	f022 5203 	bic.w	r2, r2, #549453824	; 0x20c00000
 8015e98:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8015e9c:	605a      	str	r2, [r3, #4]
 8015e9e:	681a      	ldr	r2, [r3, #0]
 8015ea0:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8015ea4:	601a      	str	r2, [r3, #0]
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	62da      	str	r2, [r3, #44]	; 0x2c
 8015eaa:	6099      	str	r1, [r3, #8]
 8015eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8015eb0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8015eb4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8015eb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8015ebc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8015ec0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8015ec4:	4a25      	ldr	r2, [pc, #148]	; (8015f5c <SystemInit+0xf4>)
 8015ec6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8015eca:	681a      	ldr	r2, [r3, #0]
 8015ecc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8015ed0:	601a      	str	r2, [r3, #0]
 8015ed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015ed6:	6819      	ldr	r1, [r3, #0]
 8015ed8:	0389      	lsls	r1, r1, #14
 8015eda:	d401      	bmi.n	8015ee0 <SystemInit+0x78>
 8015edc:	3a01      	subs	r2, #1
 8015ede:	d1fa      	bne.n	8015ed6 <SystemInit+0x6e>
 8015ee0:	681a      	ldr	r2, [r3, #0]
 8015ee2:	0392      	lsls	r2, r2, #14
 8015ee4:	d400      	bmi.n	8015ee8 <SystemInit+0x80>
 8015ee6:	e7fe      	b.n	8015ee6 <SystemInit+0x7e>
 8015ee8:	685a      	ldr	r2, [r3, #4]
 8015eea:	605a      	str	r2, [r3, #4]
 8015eec:	685a      	ldr	r2, [r3, #4]
 8015eee:	605a      	str	r2, [r3, #4]
 8015ef0:	685a      	ldr	r2, [r3, #4]
 8015ef2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8015ef6:	605a      	str	r2, [r3, #4]
 8015ef8:	685a      	ldr	r2, [r3, #4]
 8015efa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8015efe:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8015f02:	605a      	str	r2, [r3, #4]
 8015f04:	685a      	ldr	r2, [r3, #4]
 8015f06:	f442 1204 	orr.w	r2, r2, #2162688	; 0x210000
 8015f0a:	605a      	str	r2, [r3, #4]
 8015f0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015f0e:	4a14      	ldr	r2, [pc, #80]	; (8015f60 <SystemInit+0xf8>)
 8015f10:	400a      	ands	r2, r1
 8015f12:	62da      	str	r2, [r3, #44]	; 0x2c
 8015f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f16:	f442 3285 	orr.w	r2, r2, #68096	; 0x10a00
 8015f1a:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 8015f1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8015f20:	681a      	ldr	r2, [r3, #0]
 8015f22:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8015f26:	601a      	str	r2, [r3, #0]
 8015f28:	681a      	ldr	r2, [r3, #0]
 8015f2a:	0110      	lsls	r0, r2, #4
 8015f2c:	d5fc      	bpl.n	8015f28 <SystemInit+0xc0>
 8015f2e:	681a      	ldr	r2, [r3, #0]
 8015f30:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8015f34:	601a      	str	r2, [r3, #0]
 8015f36:	681a      	ldr	r2, [r3, #0]
 8015f38:	0191      	lsls	r1, r2, #6
 8015f3a:	d5fc      	bpl.n	8015f36 <SystemInit+0xce>
 8015f3c:	685a      	ldr	r2, [r3, #4]
 8015f3e:	f022 0203 	bic.w	r2, r2, #3
 8015f42:	605a      	str	r2, [r3, #4]
 8015f44:	685a      	ldr	r2, [r3, #4]
 8015f46:	f042 0202 	orr.w	r2, r2, #2
 8015f4a:	605a      	str	r2, [r3, #4]
 8015f4c:	685a      	ldr	r2, [r3, #4]
 8015f4e:	0712      	lsls	r2, r2, #28
 8015f50:	d5fc      	bpl.n	8015f4c <SystemInit+0xe4>
 8015f52:	4770      	bx	lr
 8015f54:	40021000 	andmi	r1, r2, r0
 8015f58:	e0ff000c 	rscs	r0, pc, ip
 8015f5c:	20003010 	andcs	r3, r0, r0, lsl r0
 8015f60:	fffef000 			; <UNDEFINED> instruction: 0xfffef000

08015f64 <bkp_deinit>:
 8015f64:	b508      	push	{r3, lr}
 8015f66:	f000 f9df 	bl	8016328 <rcu_bkp_reset_enable>
 8015f6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015f6e:	f000 b9e3 	b.w	8016338 <rcu_bkp_reset_disable>
	...

08015f74 <bkp_data_write>:
 8015f74:	f1a0 030b 	sub.w	r3, r0, #11
 8015f78:	2b1f      	cmp	r3, #31
 8015f7a:	d804      	bhi.n	8015f86 <bkp_data_write+0x12>
 8015f7c:	4b07      	ldr	r3, [pc, #28]	; (8015f9c <bkp_data_write+0x28>)
 8015f7e:	4403      	add	r3, r0
 8015f80:	009b      	lsls	r3, r3, #2
 8015f82:	8019      	strh	r1, [r3, #0]
 8015f84:	4770      	bx	lr
 8015f86:	1e43      	subs	r3, r0, #1
 8015f88:	2b09      	cmp	r3, #9
 8015f8a:	bf9f      	itttt	ls
 8015f8c:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 8015f90:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 8015f94:	0080      	lslls	r0, r0, #2
 8015f96:	8001      	strhls	r1, [r0, #0]
 8015f98:	4770      	bx	lr
 8015f9a:	bf00      	nop
 8015f9c:	10001b05 	andne	r1, r0, r5, lsl #22

08015fa0 <bkp_data_read>:
 8015fa0:	f1a0 030b 	sub.w	r3, r0, #11
 8015fa4:	2b1f      	cmp	r3, #31
 8015fa6:	d805      	bhi.n	8015fb4 <bkp_data_read+0x14>
 8015fa8:	4b08      	ldr	r3, [pc, #32]	; (8015fcc <bkp_data_read+0x2c>)
 8015faa:	4403      	add	r3, r0
 8015fac:	009b      	lsls	r3, r3, #2
 8015fae:	8818      	ldrh	r0, [r3, #0]
 8015fb0:	b280      	uxth	r0, r0
 8015fb2:	4770      	bx	lr
 8015fb4:	1e43      	subs	r3, r0, #1
 8015fb6:	2b09      	cmp	r3, #9
 8015fb8:	d806      	bhi.n	8015fc8 <bkp_data_read+0x28>
 8015fba:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8015fbe:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 8015fc2:	0080      	lsls	r0, r0, #2
 8015fc4:	8800      	ldrh	r0, [r0, #0]
 8015fc6:	e7f3      	b.n	8015fb0 <bkp_data_read+0x10>
 8015fc8:	2000      	movs	r0, #0
 8015fca:	4770      	bx	lr
 8015fcc:	10001b05 	andne	r1, r0, r5, lsl #22

08015fd0 <dma_deinit>:
 8015fd0:	2314      	movs	r3, #20
 8015fd2:	fb03 0301 	mla	r3, r3, r1, r0
 8015fd6:	689a      	ldr	r2, [r3, #8]
 8015fd8:	b530      	push	{r4, r5, lr}
 8015fda:	f022 0201 	bic.w	r2, r2, #1
 8015fde:	609a      	str	r2, [r3, #8]
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	609a      	str	r2, [r3, #8]
 8015fe4:	60da      	str	r2, [r3, #12]
 8015fe6:	611a      	str	r2, [r3, #16]
 8015fe8:	615a      	str	r2, [r3, #20]
 8015fea:	230f      	movs	r3, #15
 8015fec:	6844      	ldr	r4, [r0, #4]
 8015fee:	008d      	lsls	r5, r1, #2
 8015ff0:	40ab      	lsls	r3, r5
 8015ff2:	4323      	orrs	r3, r4
 8015ff4:	6043      	str	r3, [r0, #4]
 8015ff6:	4b04      	ldr	r3, [pc, #16]	; (8016008 <dma_deinit+0x38>)
 8015ff8:	4298      	cmp	r0, r3
 8015ffa:	d103      	bne.n	8016004 <dma_deinit+0x34>
 8015ffc:	2905      	cmp	r1, #5
 8015ffe:	bf08      	it	eq
 8016000:	f8c3 2300 	streq.w	r2, [r3, #768]	; 0x300
 8016004:	bd30      	pop	{r4, r5, pc}
 8016006:	bf00      	nop
 8016008:	40020400 	andmi	r0, r2, r0, lsl #8

0801600c <dma_struct_para_init>:
 801600c:	2300      	movs	r3, #0
 801600e:	e9c0 3300 	strd	r3, r3, [r0]
 8016012:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8016016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801601a:	8303      	strh	r3, [r0, #24]
 801601c:	7683      	strb	r3, [r0, #26]
 801601e:	4770      	bx	lr

08016020 <dma_init>:
 8016020:	2314      	movs	r3, #20
 8016022:	fb03 0101 	mla	r1, r3, r1, r0
 8016026:	6813      	ldr	r3, [r2, #0]
 8016028:	b510      	push	{r4, lr}
 801602a:	610b      	str	r3, [r1, #16]
 801602c:	6893      	ldr	r3, [r2, #8]
 801602e:	614b      	str	r3, [r1, #20]
 8016030:	8a13      	ldrh	r3, [r2, #16]
 8016032:	60cb      	str	r3, [r1, #12]
 8016034:	68d4      	ldr	r4, [r2, #12]
 8016036:	6853      	ldr	r3, [r2, #4]
 8016038:	6888      	ldr	r0, [r1, #8]
 801603a:	4323      	orrs	r3, r4
 801603c:	6954      	ldr	r4, [r2, #20]
 801603e:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8016042:	4323      	orrs	r3, r4
 8016044:	4303      	orrs	r3, r0
 8016046:	608b      	str	r3, [r1, #8]
 8016048:	7e13      	ldrb	r3, [r2, #24]
 801604a:	2b01      	cmp	r3, #1
 801604c:	688b      	ldr	r3, [r1, #8]
 801604e:	bf0c      	ite	eq
 8016050:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8016054:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8016058:	608b      	str	r3, [r1, #8]
 801605a:	7e53      	ldrb	r3, [r2, #25]
 801605c:	2b01      	cmp	r3, #1
 801605e:	688b      	ldr	r3, [r1, #8]
 8016060:	bf0c      	ite	eq
 8016062:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8016066:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 801606a:	608b      	str	r3, [r1, #8]
 801606c:	7e93      	ldrb	r3, [r2, #26]
 801606e:	b923      	cbnz	r3, 801607a <dma_init+0x5a>
 8016070:	688b      	ldr	r3, [r1, #8]
 8016072:	f023 0310 	bic.w	r3, r3, #16
 8016076:	608b      	str	r3, [r1, #8]
 8016078:	bd10      	pop	{r4, pc}
 801607a:	688b      	ldr	r3, [r1, #8]
 801607c:	f043 0310 	orr.w	r3, r3, #16
 8016080:	e7f9      	b.n	8016076 <dma_init+0x56>

08016082 <dma_circulation_disable>:
 8016082:	2314      	movs	r3, #20
 8016084:	4359      	muls	r1, r3
 8016086:	3008      	adds	r0, #8
 8016088:	580b      	ldr	r3, [r1, r0]
 801608a:	f023 0320 	bic.w	r3, r3, #32
 801608e:	500b      	str	r3, [r1, r0]
 8016090:	4770      	bx	lr

08016092 <dma_memory_to_memory_disable>:
 8016092:	2314      	movs	r3, #20
 8016094:	4359      	muls	r1, r3
 8016096:	3008      	adds	r0, #8
 8016098:	580b      	ldr	r3, [r1, r0]
 801609a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801609e:	500b      	str	r3, [r1, r0]
 80160a0:	4770      	bx	lr
	...

080160a4 <fmc_bank0_unlock>:
 80160a4:	4b04      	ldr	r3, [pc, #16]	; (80160b8 <fmc_bank0_unlock+0x14>)
 80160a6:	691a      	ldr	r2, [r3, #16]
 80160a8:	0612      	lsls	r2, r2, #24
 80160aa:	bf41      	itttt	mi
 80160ac:	4a03      	ldrmi	r2, [pc, #12]	; (80160bc <fmc_bank0_unlock+0x18>)
 80160ae:	605a      	strmi	r2, [r3, #4]
 80160b0:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 80160b4:	605a      	strmi	r2, [r3, #4]
 80160b6:	4770      	bx	lr
 80160b8:	40022000 	andmi	r2, r2, r0
 80160bc:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

080160c0 <fmc_bank1_unlock>:
 80160c0:	4b04      	ldr	r3, [pc, #16]	; (80160d4 <fmc_bank1_unlock+0x14>)
 80160c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80160c4:	0612      	lsls	r2, r2, #24
 80160c6:	bf41      	itttt	mi
 80160c8:	4a03      	ldrmi	r2, [pc, #12]	; (80160d8 <fmc_bank1_unlock+0x18>)
 80160ca:	645a      	strmi	r2, [r3, #68]	; 0x44
 80160cc:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 80160d0:	645a      	strmi	r2, [r3, #68]	; 0x44
 80160d2:	4770      	bx	lr
 80160d4:	40022000 	andmi	r2, r2, r0
 80160d8:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

080160dc <fmc_bank0_lock>:
 80160dc:	4a02      	ldr	r2, [pc, #8]	; (80160e8 <fmc_bank0_lock+0xc>)
 80160de:	6913      	ldr	r3, [r2, #16]
 80160e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80160e4:	6113      	str	r3, [r2, #16]
 80160e6:	4770      	bx	lr
 80160e8:	40022000 	andmi	r2, r2, r0

080160ec <fmc_bank1_lock>:
 80160ec:	4a02      	ldr	r2, [pc, #8]	; (80160f8 <fmc_bank1_lock+0xc>)
 80160ee:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80160f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80160f4:	6513      	str	r3, [r2, #80]	; 0x50
 80160f6:	4770      	bx	lr
 80160f8:	40022000 	andmi	r2, r2, r0

080160fc <fmc_bank0_state_get>:
 80160fc:	4b07      	ldr	r3, [pc, #28]	; (801611c <fmc_bank0_state_get+0x20>)
 80160fe:	68da      	ldr	r2, [r3, #12]
 8016100:	07d1      	lsls	r1, r2, #31
 8016102:	d407      	bmi.n	8016114 <fmc_bank0_state_get+0x18>
 8016104:	68da      	ldr	r2, [r3, #12]
 8016106:	06d2      	lsls	r2, r2, #27
 8016108:	d406      	bmi.n	8016118 <fmc_bank0_state_get+0x1c>
 801610a:	68d8      	ldr	r0, [r3, #12]
 801610c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8016110:	0040      	lsls	r0, r0, #1
 8016112:	4770      	bx	lr
 8016114:	2001      	movs	r0, #1
 8016116:	4770      	bx	lr
 8016118:	2003      	movs	r0, #3
 801611a:	4770      	bx	lr
 801611c:	40022000 	andmi	r2, r2, r0

08016120 <fmc_bank1_state_get>:
 8016120:	4b07      	ldr	r3, [pc, #28]	; (8016140 <fmc_bank1_state_get+0x20>)
 8016122:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016124:	07d1      	lsls	r1, r2, #31
 8016126:	d407      	bmi.n	8016138 <fmc_bank1_state_get+0x18>
 8016128:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801612a:	06d2      	lsls	r2, r2, #27
 801612c:	d406      	bmi.n	801613c <fmc_bank1_state_get+0x1c>
 801612e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016130:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8016134:	0040      	lsls	r0, r0, #1
 8016136:	4770      	bx	lr
 8016138:	2001      	movs	r0, #1
 801613a:	4770      	bx	lr
 801613c:	2003      	movs	r0, #3
 801613e:	4770      	bx	lr
 8016140:	40022000 	andmi	r2, r2, r0

08016144 <fwdgt_enable>:
 8016144:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8016148:	4b01      	ldr	r3, [pc, #4]	; (8016150 <fwdgt_enable+0xc>)
 801614a:	601a      	str	r2, [r3, #0]
 801614c:	4770      	bx	lr
 801614e:	bf00      	nop
 8016150:	40003000 	andmi	r3, r0, r0

08016154 <fwdgt_counter_reload>:
 8016154:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8016158:	4b01      	ldr	r3, [pc, #4]	; (8016160 <fwdgt_counter_reload+0xc>)
 801615a:	601a      	str	r2, [r3, #0]
 801615c:	4770      	bx	lr
 801615e:	bf00      	nop
 8016160:	40003000 	andmi	r3, r0, r0

08016164 <fwdgt_config>:
 8016164:	f245 5355 	movw	r3, #21845	; 0x5555
 8016168:	4a11      	ldr	r2, [pc, #68]	; (80161b0 <fwdgt_config+0x4c>)
 801616a:	b510      	push	{r4, lr}
 801616c:	4c11      	ldr	r4, [pc, #68]	; (80161b4 <fwdgt_config+0x50>)
 801616e:	6013      	str	r3, [r2, #0]
 8016170:	68d3      	ldr	r3, [r2, #12]
 8016172:	3c01      	subs	r4, #1
 8016174:	f003 0301 	and.w	r3, r3, #1
 8016178:	d013      	beq.n	80161a2 <fwdgt_config+0x3e>
 801617a:	2b00      	cmp	r3, #0
 801617c:	d1f8      	bne.n	8016170 <fwdgt_config+0xc>
 801617e:	6051      	str	r1, [r2, #4]
 8016180:	490c      	ldr	r1, [pc, #48]	; (80161b4 <fwdgt_config+0x50>)
 8016182:	4a0b      	ldr	r2, [pc, #44]	; (80161b0 <fwdgt_config+0x4c>)
 8016184:	68d3      	ldr	r3, [r2, #12]
 8016186:	3901      	subs	r1, #1
 8016188:	f003 0302 	and.w	r3, r3, #2
 801618c:	d00d      	beq.n	80161aa <fwdgt_config+0x46>
 801618e:	2b00      	cmp	r3, #0
 8016190:	d1f8      	bne.n	8016184 <fwdgt_config+0x20>
 8016192:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8016196:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801619a:	6090      	str	r0, [r2, #8]
 801619c:	2001      	movs	r0, #1
 801619e:	6013      	str	r3, [r2, #0]
 80161a0:	e002      	b.n	80161a8 <fwdgt_config+0x44>
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d0eb      	beq.n	801617e <fwdgt_config+0x1a>
 80161a6:	2000      	movs	r0, #0
 80161a8:	bd10      	pop	{r4, pc}
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d1fb      	bne.n	80161a6 <fwdgt_config+0x42>
 80161ae:	e7f0      	b.n	8016192 <fwdgt_config+0x2e>
 80161b0:	40003000 	andmi	r3, r0, r0
 80161b4:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

080161b8 <gpio_init>:
 80161b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161bc:	f04f 0c0f 	mov.w	ip, #15
 80161c0:	06cf      	lsls	r7, r1, #27
 80161c2:	f04f 0400 	mov.w	r4, #0
 80161c6:	f04f 0701 	mov.w	r7, #1
 80161ca:	f001 050f 	and.w	r5, r1, #15
 80161ce:	bf48      	it	mi
 80161d0:	4315      	orrmi	r5, r2
 80161d2:	fa23 f204 	lsr.w	r2, r3, r4
 80161d6:	07d6      	lsls	r6, r2, #31
 80161d8:	d510      	bpl.n	80161fc <gpio_init+0x44>
 80161da:	00a2      	lsls	r2, r4, #2
 80161dc:	6806      	ldr	r6, [r0, #0]
 80161de:	fa0c fe02 	lsl.w	lr, ip, r2
 80161e2:	ea26 060e 	bic.w	r6, r6, lr
 80161e6:	fa05 f202 	lsl.w	r2, r5, r2
 80161ea:	2928      	cmp	r1, #40	; 0x28
 80161ec:	ea42 0206 	orr.w	r2, r2, r6
 80161f0:	d128      	bne.n	8016244 <gpio_init+0x8c>
 80161f2:	fa07 f604 	lsl.w	r6, r7, r4
 80161f6:	401e      	ands	r6, r3
 80161f8:	6146      	str	r6, [r0, #20]
 80161fa:	6002      	str	r2, [r0, #0]
 80161fc:	3401      	adds	r4, #1
 80161fe:	2c08      	cmp	r4, #8
 8016200:	d1e7      	bne.n	80161d2 <gpio_init+0x1a>
 8016202:	2600      	movs	r6, #0
 8016204:	f04f 0c0f 	mov.w	ip, #15
 8016208:	2701      	movs	r7, #1
 801620a:	f106 0208 	add.w	r2, r6, #8
 801620e:	fa23 f402 	lsr.w	r4, r3, r2
 8016212:	07e4      	lsls	r4, r4, #31
 8016214:	d511      	bpl.n	801623a <gpio_init+0x82>
 8016216:	00b4      	lsls	r4, r6, #2
 8016218:	f8d0 e004 	ldr.w	lr, [r0, #4]
 801621c:	fa0c f804 	lsl.w	r8, ip, r4
 8016220:	ea2e 0e08 	bic.w	lr, lr, r8
 8016224:	fa05 f404 	lsl.w	r4, r5, r4
 8016228:	2928      	cmp	r1, #40	; 0x28
 801622a:	ea44 040e 	orr.w	r4, r4, lr
 801622e:	d110      	bne.n	8016252 <gpio_init+0x9a>
 8016230:	fa07 f202 	lsl.w	r2, r7, r2
 8016234:	401a      	ands	r2, r3
 8016236:	6142      	str	r2, [r0, #20]
 8016238:	6044      	str	r4, [r0, #4]
 801623a:	3601      	adds	r6, #1
 801623c:	2e08      	cmp	r6, #8
 801623e:	d1e4      	bne.n	801620a <gpio_init+0x52>
 8016240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016244:	2948      	cmp	r1, #72	; 0x48
 8016246:	bf02      	ittt	eq
 8016248:	fa07 f604 	lsleq.w	r6, r7, r4
 801624c:	401e      	andeq	r6, r3
 801624e:	6106      	streq	r6, [r0, #16]
 8016250:	e7d3      	b.n	80161fa <gpio_init+0x42>
 8016252:	2948      	cmp	r1, #72	; 0x48
 8016254:	bf02      	ittt	eq
 8016256:	fa07 f202 	lsleq.w	r2, r7, r2
 801625a:	401a      	andeq	r2, r3
 801625c:	6102      	streq	r2, [r0, #16]
 801625e:	e7eb      	b.n	8016238 <gpio_init+0x80>

08016260 <gpio_pin_remap_config>:
 8016260:	2800      	cmp	r0, #0
 8016262:	4a16      	ldr	r2, [pc, #88]	; (80162bc <gpio_pin_remap_config+0x5c>)
 8016264:	b530      	push	{r4, r5, lr}
 8016266:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 801626a:	bfb4      	ite	lt
 801626c:	69d3      	ldrlt	r3, [r2, #28]
 801626e:	6853      	ldrge	r3, [r2, #4]
 8016270:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8016274:	b284      	uxth	r4, r0
 8016276:	d110      	bne.n	801629a <gpio_pin_remap_config+0x3a>
 8016278:	6855      	ldr	r5, [r2, #4]
 801627a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 801627e:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8016282:	6055      	str	r5, [r2, #4]
 8016284:	b119      	cbz	r1, 801628e <gpio_pin_remap_config+0x2e>
 8016286:	0d42      	lsrs	r2, r0, #21
 8016288:	0112      	lsls	r2, r2, #4
 801628a:	4094      	lsls	r4, r2
 801628c:	4323      	orrs	r3, r4
 801628e:	4a0b      	ldr	r2, [pc, #44]	; (80162bc <gpio_pin_remap_config+0x5c>)
 8016290:	2800      	cmp	r0, #0
 8016292:	bfb4      	ite	lt
 8016294:	61d3      	strlt	r3, [r2, #28]
 8016296:	6053      	strge	r3, [r2, #4]
 8016298:	bd30      	pop	{r4, r5, pc}
 801629a:	02c2      	lsls	r2, r0, #11
 801629c:	bf4d      	iteet	mi
 801629e:	2203      	movmi	r2, #3
 80162a0:	0d42      	lsrpl	r2, r0, #21
 80162a2:	0112      	lslpl	r2, r2, #4
 80162a4:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 80162a8:	bf4c      	ite	mi
 80162aa:	40aa      	lslmi	r2, r5
 80162ac:	fa04 f202 	lslpl.w	r2, r4, r2
 80162b0:	ea23 0302 	bic.w	r3, r3, r2
 80162b4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80162b8:	e7e4      	b.n	8016284 <gpio_pin_remap_config+0x24>
 80162ba:	bf00      	nop
 80162bc:	40010000 	andmi	r0, r1, r0

080162c0 <gpio_ethernet_phy_select>:
 80162c0:	4b04      	ldr	r3, [pc, #16]	; (80162d4 <gpio_ethernet_phy_select+0x14>)
 80162c2:	685a      	ldr	r2, [r3, #4]
 80162c4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80162c8:	605a      	str	r2, [r3, #4]
 80162ca:	685a      	ldr	r2, [r3, #4]
 80162cc:	4302      	orrs	r2, r0
 80162ce:	605a      	str	r2, [r3, #4]
 80162d0:	4770      	bx	lr
 80162d2:	bf00      	nop
 80162d4:	40010000 	andmi	r0, r1, r0

080162d8 <pmu_backup_write_enable>:
 80162d8:	4a02      	ldr	r2, [pc, #8]	; (80162e4 <pmu_backup_write_enable+0xc>)
 80162da:	6813      	ldr	r3, [r2, #0]
 80162dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80162e0:	6013      	str	r3, [r2, #0]
 80162e2:	4770      	bx	lr
 80162e4:	40007000 	andmi	r7, r0, r0

080162e8 <rcu_periph_clock_enable>:
 80162e8:	2201      	movs	r2, #1
 80162ea:	0983      	lsrs	r3, r0, #6
 80162ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80162f0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80162f4:	6819      	ldr	r1, [r3, #0]
 80162f6:	f000 001f 	and.w	r0, r0, #31
 80162fa:	4082      	lsls	r2, r0
 80162fc:	430a      	orrs	r2, r1
 80162fe:	601a      	str	r2, [r3, #0]
 8016300:	4770      	bx	lr

08016302 <rcu_periph_clock_disable>:
 8016302:	2101      	movs	r1, #1
 8016304:	0983      	lsrs	r3, r0, #6
 8016306:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801630a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 801630e:	681a      	ldr	r2, [r3, #0]
 8016310:	f000 001f 	and.w	r0, r0, #31
 8016314:	4081      	lsls	r1, r0
 8016316:	ea22 0201 	bic.w	r2, r2, r1
 801631a:	601a      	str	r2, [r3, #0]
 801631c:	4770      	bx	lr

0801631e <rcu_periph_reset_enable>:
 801631e:	f7ff bfe3 	b.w	80162e8 <rcu_periph_clock_enable>

08016322 <rcu_periph_reset_disable>:
 8016322:	f7ff bfee 	b.w	8016302 <rcu_periph_clock_disable>
	...

08016328 <rcu_bkp_reset_enable>:
 8016328:	4a02      	ldr	r2, [pc, #8]	; (8016334 <rcu_bkp_reset_enable+0xc>)
 801632a:	6a13      	ldr	r3, [r2, #32]
 801632c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016330:	6213      	str	r3, [r2, #32]
 8016332:	4770      	bx	lr
 8016334:	40021000 	andmi	r1, r2, r0

08016338 <rcu_bkp_reset_disable>:
 8016338:	4a02      	ldr	r2, [pc, #8]	; (8016344 <rcu_bkp_reset_disable+0xc>)
 801633a:	6a13      	ldr	r3, [r2, #32]
 801633c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016340:	6213      	str	r3, [r2, #32]
 8016342:	4770      	bx	lr
 8016344:	40021000 	andmi	r1, r2, r0

08016348 <rcu_ckout0_config>:
 8016348:	4a06      	ldr	r2, [pc, #24]	; (8016364 <rcu_ckout0_config+0x1c>)
 801634a:	6853      	ldr	r3, [r2, #4]
 801634c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8016350:	4303      	orrs	r3, r0
 8016352:	6053      	str	r3, [r2, #4]
 8016354:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8016358:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801635c:	430b      	orrs	r3, r1
 801635e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8016362:	4770      	bx	lr
 8016364:	40021000 	andmi	r1, r2, r0

08016368 <rcu_pll2_config>:
 8016368:	4b04      	ldr	r3, [pc, #16]	; (801637c <rcu_pll2_config+0x14>)
 801636a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801636c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8016370:	62da      	str	r2, [r3, #44]	; 0x2c
 8016372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016374:	4302      	orrs	r2, r0
 8016376:	62da      	str	r2, [r3, #44]	; 0x2c
 8016378:	4770      	bx	lr
 801637a:	bf00      	nop
 801637c:	40021000 	andmi	r1, r2, r0

08016380 <rcu_adc_clock_config>:
 8016380:	490c      	ldr	r1, [pc, #48]	; (80163b4 <rcu_adc_clock_config+0x34>)
 8016382:	2805      	cmp	r0, #5
 8016384:	684b      	ldr	r3, [r1, #4]
 8016386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801638a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 801638e:	d006      	beq.n	801639e <rcu_adc_clock_config+0x1e>
 8016390:	d803      	bhi.n	801639a <rcu_adc_clock_config+0x1a>
 8016392:	2804      	cmp	r0, #4
 8016394:	d10a      	bne.n	80163ac <rcu_adc_clock_config+0x2c>
 8016396:	604b      	str	r3, [r1, #4]
 8016398:	4770      	bx	lr
 801639a:	2807      	cmp	r0, #7
 801639c:	d1fb      	bne.n	8016396 <rcu_adc_clock_config+0x16>
 801639e:	4a06      	ldr	r2, [pc, #24]	; (80163b8 <rcu_adc_clock_config+0x38>)
 80163a0:	ea02 3280 	and.w	r2, r2, r0, lsl #14
 80163a4:	4313      	orrs	r3, r2
 80163a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80163aa:	e7f4      	b.n	8016396 <rcu_adc_clock_config+0x16>
 80163ac:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 80163b0:	e7f1      	b.n	8016396 <rcu_adc_clock_config+0x16>
 80163b2:	bf00      	nop
 80163b4:	40021000 	andmi	r1, r2, r0
 80163b8:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

080163bc <rcu_flag_get>:
 80163bc:	0983      	lsrs	r3, r0, #6
 80163be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80163c2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80163c6:	681a      	ldr	r2, [r3, #0]
 80163c8:	2301      	movs	r3, #1
 80163ca:	f000 001f 	and.w	r0, r0, #31
 80163ce:	4083      	lsls	r3, r0
 80163d0:	4213      	tst	r3, r2
 80163d2:	bf14      	ite	ne
 80163d4:	2001      	movne	r0, #1
 80163d6:	2000      	moveq	r0, #0
 80163d8:	4770      	bx	lr
	...

080163dc <rcu_osci_stab_wait>:
 80163dc:	281c      	cmp	r0, #28
 80163de:	b508      	push	{r3, lr}
 80163e0:	d056      	beq.n	8016490 <rcu_osci_stab_wait+0xb4>
 80163e2:	d812      	bhi.n	801640a <rcu_osci_stab_wait+0x2e>
 80163e4:	2818      	cmp	r0, #24
 80163e6:	d04a      	beq.n	801647e <rcu_osci_stab_wait+0xa2>
 80163e8:	d804      	bhi.n	80163f4 <rcu_osci_stab_wait+0x18>
 80163ea:	b398      	cbz	r0, 8016454 <rcu_osci_stab_wait+0x78>
 80163ec:	2810      	cmp	r0, #16
 80163ee:	d022      	beq.n	8016436 <rcu_osci_stab_wait+0x5a>
 80163f0:	2000      	movs	r0, #0
 80163f2:	bd08      	pop	{r3, pc}
 80163f4:	281a      	cmp	r0, #26
 80163f6:	d1fb      	bne.n	80163f0 <rcu_osci_stab_wait+0x14>
 80163f8:	492f      	ldr	r1, [pc, #188]	; (80164b8 <rcu_osci_stab_wait+0xdc>)
 80163fa:	201b      	movs	r0, #27
 80163fc:	f7ff ffde 	bl	80163bc <rcu_flag_get>
 8016400:	b908      	cbnz	r0, 8016406 <rcu_osci_stab_wait+0x2a>
 8016402:	3901      	subs	r1, #1
 8016404:	d1f9      	bne.n	80163fa <rcu_osci_stab_wait+0x1e>
 8016406:	201b      	movs	r0, #27
 8016408:	e01e      	b.n	8016448 <rcu_osci_stab_wait+0x6c>
 801640a:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 801640e:	d02b      	beq.n	8016468 <rcu_osci_stab_wait+0x8c>
 8016410:	f242 431c 	movw	r3, #9244	; 0x241c
 8016414:	4298      	cmp	r0, r3
 8016416:	d044      	beq.n	80164a2 <rcu_osci_stab_wait+0xc6>
 8016418:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 801641c:	d1e8      	bne.n	80163f0 <rcu_osci_stab_wait+0x14>
 801641e:	f06f 417c 	mvn.w	r1, #4227858432	; 0xfc000000
 8016422:	f640 0001 	movw	r0, #2049	; 0x801
 8016426:	f7ff ffc9 	bl	80163bc <rcu_flag_get>
 801642a:	b908      	cbnz	r0, 8016430 <rcu_osci_stab_wait+0x54>
 801642c:	3901      	subs	r1, #1
 801642e:	d1f8      	bne.n	8016422 <rcu_osci_stab_wait+0x46>
 8016430:	f640 0001 	movw	r0, #2049	; 0x801
 8016434:	e008      	b.n	8016448 <rcu_osci_stab_wait+0x6c>
 8016436:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801643a:	2011      	movs	r0, #17
 801643c:	f7ff ffbe 	bl	80163bc <rcu_flag_get>
 8016440:	b908      	cbnz	r0, 8016446 <rcu_osci_stab_wait+0x6a>
 8016442:	3901      	subs	r1, #1
 8016444:	d1f9      	bne.n	801643a <rcu_osci_stab_wait+0x5e>
 8016446:	2011      	movs	r0, #17
 8016448:	f7ff ffb8 	bl	80163bc <rcu_flag_get>
 801644c:	3800      	subs	r0, #0
 801644e:	bf18      	it	ne
 8016450:	2001      	movne	r0, #1
 8016452:	e7ce      	b.n	80163f2 <rcu_osci_stab_wait+0x16>
 8016454:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8016458:	2001      	movs	r0, #1
 801645a:	f7ff ffaf 	bl	80163bc <rcu_flag_get>
 801645e:	b908      	cbnz	r0, 8016464 <rcu_osci_stab_wait+0x88>
 8016460:	3901      	subs	r1, #1
 8016462:	d1f9      	bne.n	8016458 <rcu_osci_stab_wait+0x7c>
 8016464:	2001      	movs	r0, #1
 8016466:	e7ef      	b.n	8016448 <rcu_osci_stab_wait+0x6c>
 8016468:	4913      	ldr	r1, [pc, #76]	; (80164b8 <rcu_osci_stab_wait+0xdc>)
 801646a:	f640 1001 	movw	r0, #2305	; 0x901
 801646e:	f7ff ffa5 	bl	80163bc <rcu_flag_get>
 8016472:	b908      	cbnz	r0, 8016478 <rcu_osci_stab_wait+0x9c>
 8016474:	3901      	subs	r1, #1
 8016476:	d1f8      	bne.n	801646a <rcu_osci_stab_wait+0x8e>
 8016478:	f640 1001 	movw	r0, #2305	; 0x901
 801647c:	e7e4      	b.n	8016448 <rcu_osci_stab_wait+0x6c>
 801647e:	490e      	ldr	r1, [pc, #56]	; (80164b8 <rcu_osci_stab_wait+0xdc>)
 8016480:	2019      	movs	r0, #25
 8016482:	f7ff ff9b 	bl	80163bc <rcu_flag_get>
 8016486:	b908      	cbnz	r0, 801648c <rcu_osci_stab_wait+0xb0>
 8016488:	3901      	subs	r1, #1
 801648a:	d1f9      	bne.n	8016480 <rcu_osci_stab_wait+0xa4>
 801648c:	2019      	movs	r0, #25
 801648e:	e7db      	b.n	8016448 <rcu_osci_stab_wait+0x6c>
 8016490:	4909      	ldr	r1, [pc, #36]	; (80164b8 <rcu_osci_stab_wait+0xdc>)
 8016492:	201d      	movs	r0, #29
 8016494:	f7ff ff92 	bl	80163bc <rcu_flag_get>
 8016498:	b908      	cbnz	r0, 801649e <rcu_osci_stab_wait+0xc2>
 801649a:	3901      	subs	r1, #1
 801649c:	d1f9      	bne.n	8016492 <rcu_osci_stab_wait+0xb6>
 801649e:	201d      	movs	r0, #29
 80164a0:	e7d2      	b.n	8016448 <rcu_osci_stab_wait+0x6c>
 80164a2:	4905      	ldr	r1, [pc, #20]	; (80164b8 <rcu_osci_stab_wait+0xdc>)
 80164a4:	f242 401d 	movw	r0, #9245	; 0x241d
 80164a8:	f7ff ff88 	bl	80163bc <rcu_flag_get>
 80164ac:	b908      	cbnz	r0, 80164b2 <rcu_osci_stab_wait+0xd6>
 80164ae:	3901      	subs	r1, #1
 80164b0:	d1f8      	bne.n	80164a4 <rcu_osci_stab_wait+0xc8>
 80164b2:	f242 401d 	movw	r0, #9245	; 0x241d
 80164b6:	e7c7      	b.n	8016448 <rcu_osci_stab_wait+0x6c>
 80164b8:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

080164bc <rcu_osci_on>:
 80164bc:	f7ff bf14 	b.w	80162e8 <rcu_periph_clock_enable>

080164c0 <rcu_clock_freq_get>:
 80164c0:	4b3e      	ldr	r3, [pc, #248]	; (80165bc <rcu_clock_freq_get+0xfc>)
 80164c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164c4:	4604      	mov	r4, r0
 80164c6:	461f      	mov	r7, r3
 80164c8:	b089      	sub	sp, #36	; 0x24
 80164ca:	ad04      	add	r5, sp, #16
 80164cc:	f103 0610 	add.w	r6, r3, #16
 80164d0:	462a      	mov	r2, r5
 80164d2:	6818      	ldr	r0, [r3, #0]
 80164d4:	6859      	ldr	r1, [r3, #4]
 80164d6:	3308      	adds	r3, #8
 80164d8:	c203      	stmia	r2!, {r0, r1}
 80164da:	42b3      	cmp	r3, r6
 80164dc:	4615      	mov	r5, r2
 80164de:	d1f7      	bne.n	80164d0 <rcu_clock_freq_get+0x10>
 80164e0:	466b      	mov	r3, sp
 80164e2:	6938      	ldr	r0, [r7, #16]
 80164e4:	6871      	ldr	r1, [r6, #4]
 80164e6:	4a36      	ldr	r2, [pc, #216]	; (80165c0 <rcu_clock_freq_get+0x100>)
 80164e8:	c303      	stmia	r3!, {r0, r1}
 80164ea:	c303      	stmia	r3!, {r0, r1}
 80164ec:	6853      	ldr	r3, [r2, #4]
 80164ee:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80164f2:	2b01      	cmp	r3, #1
 80164f4:	d053      	beq.n	801659e <rcu_clock_freq_get+0xde>
 80164f6:	2b02      	cmp	r3, #2
 80164f8:	d153      	bne.n	80165a2 <rcu_clock_freq_get+0xe2>
 80164fa:	6853      	ldr	r3, [r2, #4]
 80164fc:	03dd      	lsls	r5, r3, #15
 80164fe:	d523      	bpl.n	8016548 <rcu_clock_freq_get+0x88>
 8016500:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8016502:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8016506:	4b2f      	ldr	r3, [pc, #188]	; (80165c4 <rcu_clock_freq_get+0x104>)
 8016508:	d00e      	beq.n	8016528 <rcu_clock_freq_get+0x68>
 801650a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801650c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 801650e:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8016512:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8016516:	3101      	adds	r1, #1
 8016518:	280f      	cmp	r0, #15
 801651a:	f100 0502 	add.w	r5, r0, #2
 801651e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016522:	bf08      	it	eq
 8016524:	2514      	moveq	r5, #20
 8016526:	436b      	muls	r3, r5
 8016528:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801652a:	f001 010f 	and.w	r1, r1, #15
 801652e:	3101      	adds	r1, #1
 8016530:	fbb3 f3f1 	udiv	r3, r3, r1
 8016534:	6851      	ldr	r1, [r2, #4]
 8016536:	6850      	ldr	r0, [r2, #4]
 8016538:	f3c1 4183 	ubfx	r1, r1, #18, #4
 801653c:	0080      	lsls	r0, r0, #2
 801653e:	d505      	bpl.n	801654c <rcu_clock_freq_get+0x8c>
 8016540:	f041 0110 	orr.w	r1, r1, #16
 8016544:	3101      	adds	r1, #1
 8016546:	e027      	b.n	8016598 <rcu_clock_freq_get+0xd8>
 8016548:	4b1f      	ldr	r3, [pc, #124]	; (80165c8 <rcu_clock_freq_get+0x108>)
 801654a:	e7f3      	b.n	8016534 <rcu_clock_freq_get+0x74>
 801654c:	290d      	cmp	r1, #13
 801654e:	d120      	bne.n	8016592 <rcu_clock_freq_get+0xd2>
 8016550:	2006      	movs	r0, #6
 8016552:	0859      	lsrs	r1, r3, #1
 8016554:	fb00 1003 	mla	r0, r0, r3, r1
 8016558:	6853      	ldr	r3, [r2, #4]
 801655a:	6851      	ldr	r1, [r2, #4]
 801655c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8016560:	6852      	ldr	r2, [r2, #4]
 8016562:	3320      	adds	r3, #32
 8016564:	446b      	add	r3, sp
 8016566:	f3c1 2102 	ubfx	r1, r1, #8, #3
 801656a:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 801656e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8016572:	3120      	adds	r1, #32
 8016574:	3220      	adds	r2, #32
 8016576:	4469      	add	r1, sp
 8016578:	446a      	add	r2, sp
 801657a:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 801657e:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8016582:	fa20 f303 	lsr.w	r3, r0, r3
 8016586:	2c03      	cmp	r4, #3
 8016588:	d816      	bhi.n	80165b8 <rcu_clock_freq_get+0xf8>
 801658a:	e8df f004 	tbb	[pc, r4]
 801658e:	120f0c0d 	andne	r0, pc, #3328	; 0xd00
 8016592:	290f      	cmp	r1, #15
 8016594:	d0d6      	beq.n	8016544 <rcu_clock_freq_get+0x84>
 8016596:	3102      	adds	r1, #2
 8016598:	fb03 f001 	mul.w	r0, r3, r1
 801659c:	e7dc      	b.n	8016558 <rcu_clock_freq_get+0x98>
 801659e:	4809      	ldr	r0, [pc, #36]	; (80165c4 <rcu_clock_freq_get+0x104>)
 80165a0:	e7da      	b.n	8016558 <rcu_clock_freq_get+0x98>
 80165a2:	480a      	ldr	r0, [pc, #40]	; (80165cc <rcu_clock_freq_get+0x10c>)
 80165a4:	e7d8      	b.n	8016558 <rcu_clock_freq_get+0x98>
 80165a6:	4618      	mov	r0, r3
 80165a8:	b009      	add	sp, #36	; 0x24
 80165aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165ac:	fa23 f001 	lsr.w	r0, r3, r1
 80165b0:	e7fa      	b.n	80165a8 <rcu_clock_freq_get+0xe8>
 80165b2:	fa23 f002 	lsr.w	r0, r3, r2
 80165b6:	e7f7      	b.n	80165a8 <rcu_clock_freq_get+0xe8>
 80165b8:	2000      	movs	r0, #0
 80165ba:	e7f5      	b.n	80165a8 <rcu_clock_freq_get+0xe8>
 80165bc:	08017d51 	stmdaeq	r1, {r0, r4, r6, r8, sl, fp, ip, sp, lr}
 80165c0:	40021000 	andmi	r1, r2, r0
 80165c4:	017d7840 	cmneq	sp, r0, asr #16
 80165c8:	003d0900 	eorseq	r0, sp, r0, lsl #18
 80165cc:	007a1200 	rsbseq	r1, sl, r0, lsl #4

080165d0 <timer_deinit>:
 80165d0:	b508      	push	{r3, lr}
 80165d2:	4b4e      	ldr	r3, [pc, #312]	; (801670c <timer_deinit+0x13c>)
 80165d4:	4298      	cmp	r0, r3
 80165d6:	f000 8092 	beq.w	80166fe <timer_deinit+0x12e>
 80165da:	d822      	bhi.n	8016622 <timer_deinit+0x52>
 80165dc:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80165e0:	4298      	cmp	r0, r3
 80165e2:	d062      	beq.n	80166aa <timer_deinit+0xda>
 80165e4:	d80b      	bhi.n	80165fe <timer_deinit+0x2e>
 80165e6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80165ea:	4298      	cmp	r0, r3
 80165ec:	d04f      	beq.n	801668e <timer_deinit+0xbe>
 80165ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80165f2:	4298      	cmp	r0, r3
 80165f4:	d052      	beq.n	801669c <timer_deinit+0xcc>
 80165f6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80165fa:	d041      	beq.n	8016680 <timer_deinit+0xb0>
 80165fc:	bd08      	pop	{r3, pc}
 80165fe:	4b44      	ldr	r3, [pc, #272]	; (8016710 <timer_deinit+0x140>)
 8016600:	4298      	cmp	r0, r3
 8016602:	d059      	beq.n	80166b8 <timer_deinit+0xe8>
 8016604:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8016608:	4298      	cmp	r0, r3
 801660a:	d071      	beq.n	80166f0 <timer_deinit+0x120>
 801660c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016610:	4298      	cmp	r0, r3
 8016612:	d1f3      	bne.n	80165fc <timer_deinit+0x2c>
 8016614:	f240 4004 	movw	r0, #1028	; 0x404
 8016618:	f7ff fe81 	bl	801631e <rcu_periph_reset_enable>
 801661c:	f240 4004 	movw	r0, #1028	; 0x404
 8016620:	e02a      	b.n	8016678 <timer_deinit+0xa8>
 8016622:	4b3c      	ldr	r3, [pc, #240]	; (8016714 <timer_deinit+0x144>)
 8016624:	4298      	cmp	r0, r3
 8016626:	d055      	beq.n	80166d4 <timer_deinit+0x104>
 8016628:	d812      	bhi.n	8016650 <timer_deinit+0x80>
 801662a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 801662e:	4298      	cmp	r0, r3
 8016630:	d01c      	beq.n	801666c <timer_deinit+0x9c>
 8016632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016636:	4298      	cmp	r0, r3
 8016638:	d045      	beq.n	80166c6 <timer_deinit+0xf6>
 801663a:	f5a3 338a 	sub.w	r3, r3, #70656	; 0x11400
 801663e:	4298      	cmp	r0, r3
 8016640:	d1dc      	bne.n	80165fc <timer_deinit+0x2c>
 8016642:	f44f 6081 	mov.w	r0, #1032	; 0x408
 8016646:	f7ff fe6a 	bl	801631e <rcu_periph_reset_enable>
 801664a:	f44f 6081 	mov.w	r0, #1032	; 0x408
 801664e:	e013      	b.n	8016678 <timer_deinit+0xa8>
 8016650:	4b31      	ldr	r3, [pc, #196]	; (8016718 <timer_deinit+0x148>)
 8016652:	4298      	cmp	r0, r3
 8016654:	d045      	beq.n	80166e2 <timer_deinit+0x112>
 8016656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801665a:	4298      	cmp	r0, r3
 801665c:	d1ce      	bne.n	80165fc <timer_deinit+0x2c>
 801665e:	f240 3015 	movw	r0, #789	; 0x315
 8016662:	f7ff fe5c 	bl	801631e <rcu_periph_reset_enable>
 8016666:	f240 3015 	movw	r0, #789	; 0x315
 801666a:	e005      	b.n	8016678 <timer_deinit+0xa8>
 801666c:	f240 300b 	movw	r0, #779	; 0x30b
 8016670:	f7ff fe55 	bl	801631e <rcu_periph_reset_enable>
 8016674:	f240 300b 	movw	r0, #779	; 0x30b
 8016678:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801667c:	f7ff be51 	b.w	8016322 <rcu_periph_reset_disable>
 8016680:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8016684:	f7ff fe4b 	bl	801631e <rcu_periph_reset_enable>
 8016688:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801668c:	e7f4      	b.n	8016678 <timer_deinit+0xa8>
 801668e:	f240 4001 	movw	r0, #1025	; 0x401
 8016692:	f7ff fe44 	bl	801631e <rcu_periph_reset_enable>
 8016696:	f240 4001 	movw	r0, #1025	; 0x401
 801669a:	e7ed      	b.n	8016678 <timer_deinit+0xa8>
 801669c:	f240 4002 	movw	r0, #1026	; 0x402
 80166a0:	f7ff fe3d 	bl	801631e <rcu_periph_reset_enable>
 80166a4:	f240 4002 	movw	r0, #1026	; 0x402
 80166a8:	e7e6      	b.n	8016678 <timer_deinit+0xa8>
 80166aa:	f240 4003 	movw	r0, #1027	; 0x403
 80166ae:	f7ff fe36 	bl	801631e <rcu_periph_reset_enable>
 80166b2:	f240 4003 	movw	r0, #1027	; 0x403
 80166b6:	e7df      	b.n	8016678 <timer_deinit+0xa8>
 80166b8:	f240 4005 	movw	r0, #1029	; 0x405
 80166bc:	f7ff fe2f 	bl	801631e <rcu_periph_reset_enable>
 80166c0:	f240 4005 	movw	r0, #1029	; 0x405
 80166c4:	e7d8      	b.n	8016678 <timer_deinit+0xa8>
 80166c6:	f240 300d 	movw	r0, #781	; 0x30d
 80166ca:	f7ff fe28 	bl	801631e <rcu_periph_reset_enable>
 80166ce:	f240 300d 	movw	r0, #781	; 0x30d
 80166d2:	e7d1      	b.n	8016678 <timer_deinit+0xa8>
 80166d4:	f240 3013 	movw	r0, #787	; 0x313
 80166d8:	f7ff fe21 	bl	801631e <rcu_periph_reset_enable>
 80166dc:	f240 3013 	movw	r0, #787	; 0x313
 80166e0:	e7ca      	b.n	8016678 <timer_deinit+0xa8>
 80166e2:	f44f 7045 	mov.w	r0, #788	; 0x314
 80166e6:	f7ff fe1a 	bl	801631e <rcu_periph_reset_enable>
 80166ea:	f44f 7045 	mov.w	r0, #788	; 0x314
 80166ee:	e7c3      	b.n	8016678 <timer_deinit+0xa8>
 80166f0:	f240 4006 	movw	r0, #1030	; 0x406
 80166f4:	f7ff fe13 	bl	801631e <rcu_periph_reset_enable>
 80166f8:	f240 4006 	movw	r0, #1030	; 0x406
 80166fc:	e7bc      	b.n	8016678 <timer_deinit+0xa8>
 80166fe:	f240 4007 	movw	r0, #1031	; 0x407
 8016702:	f7ff fe0c 	bl	801631e <rcu_periph_reset_enable>
 8016706:	f240 4007 	movw	r0, #1031	; 0x407
 801670a:	e7b5      	b.n	8016678 <timer_deinit+0xa8>
 801670c:	40001c00 	andmi	r1, r0, r0, lsl #24
 8016710:	40001400 	andmi	r1, r0, r0, lsl #8
 8016714:	40014c00 	andmi	r4, r1, r0, lsl #24
 8016718:	40015000 	andmi	r5, r1, r0

0801671c <timer_init>:
 801671c:	880b      	ldrh	r3, [r1, #0]
 801671e:	6283      	str	r3, [r0, #40]	; 0x28
 8016720:	4b26      	ldr	r3, [pc, #152]	; (80167bc <timer_init+0xa0>)
 8016722:	4298      	cmp	r0, r3
 8016724:	d018      	beq.n	8016758 <timer_init+0x3c>
 8016726:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 801672a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801672e:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 8016732:	d011      	beq.n	8016758 <timer_init+0x3c>
 8016734:	4a22      	ldr	r2, [pc, #136]	; (80167c0 <timer_init+0xa4>)
 8016736:	4290      	cmp	r0, r2
 8016738:	d00e      	beq.n	8016758 <timer_init+0x3c>
 801673a:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 801673e:	4290      	cmp	r0, r2
 8016740:	d00a      	beq.n	8016758 <timer_init+0x3c>
 8016742:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8016746:	4293      	cmp	r3, r2
 8016748:	d006      	beq.n	8016758 <timer_init+0x3c>
 801674a:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 801674e:	4293      	cmp	r3, r2
 8016750:	d002      	beq.n	8016758 <timer_init+0x3c>
 8016752:	4b1c      	ldr	r3, [pc, #112]	; (80167c4 <timer_init+0xa8>)
 8016754:	4298      	cmp	r0, r3
 8016756:	d10f      	bne.n	8016778 <timer_init+0x5c>
 8016758:	6803      	ldr	r3, [r0, #0]
 801675a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801675e:	6003      	str	r3, [r0, #0]
 8016760:	884b      	ldrh	r3, [r1, #2]
 8016762:	6802      	ldr	r2, [r0, #0]
 8016764:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016768:	4313      	orrs	r3, r2
 801676a:	6003      	str	r3, [r0, #0]
 801676c:	888b      	ldrh	r3, [r1, #4]
 801676e:	6802      	ldr	r2, [r0, #0]
 8016770:	f003 0310 	and.w	r3, r3, #16
 8016774:	4313      	orrs	r3, r2
 8016776:	6003      	str	r3, [r0, #0]
 8016778:	688b      	ldr	r3, [r1, #8]
 801677a:	62c3      	str	r3, [r0, #44]	; 0x2c
 801677c:	4b12      	ldr	r3, [pc, #72]	; (80167c8 <timer_init+0xac>)
 801677e:	4298      	cmp	r0, r3
 8016780:	d003      	beq.n	801678a <timer_init+0x6e>
 8016782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8016786:	4298      	cmp	r0, r3
 8016788:	d104      	bne.n	8016794 <timer_init+0x78>
 801678a:	6943      	ldr	r3, [r0, #20]
 801678c:	f043 0301 	orr.w	r3, r3, #1
 8016790:	6143      	str	r3, [r0, #20]
 8016792:	4770      	bx	lr
 8016794:	6803      	ldr	r3, [r0, #0]
 8016796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801679a:	6003      	str	r3, [r0, #0]
 801679c:	898b      	ldrh	r3, [r1, #12]
 801679e:	6802      	ldr	r2, [r0, #0]
 80167a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80167a4:	4313      	orrs	r3, r2
 80167a6:	6003      	str	r3, [r0, #0]
 80167a8:	4b04      	ldr	r3, [pc, #16]	; (80167bc <timer_init+0xa0>)
 80167aa:	4298      	cmp	r0, r3
 80167ac:	d002      	beq.n	80167b4 <timer_init+0x98>
 80167ae:	4b04      	ldr	r3, [pc, #16]	; (80167c0 <timer_init+0xa4>)
 80167b0:	4298      	cmp	r0, r3
 80167b2:	d1ea      	bne.n	801678a <timer_init+0x6e>
 80167b4:	7b8b      	ldrb	r3, [r1, #14]
 80167b6:	6303      	str	r3, [r0, #48]	; 0x30
 80167b8:	e7e7      	b.n	801678a <timer_init+0x6e>
 80167ba:	bf00      	nop
 80167bc:	40012c00 	andmi	r2, r1, r0, lsl #24
 80167c0:	40013400 	andmi	r3, r1, r0, lsl #8
 80167c4:	40002000 	andmi	r2, r0, r0
 80167c8:	40001000 	andmi	r1, r0, r0

080167cc <timer_enable>:
 80167cc:	6803      	ldr	r3, [r0, #0]
 80167ce:	f043 0301 	orr.w	r3, r3, #1
 80167d2:	6003      	str	r3, [r0, #0]
 80167d4:	4770      	bx	lr

080167d6 <timer_dma_enable>:
 80167d6:	68c3      	ldr	r3, [r0, #12]
 80167d8:	4319      	orrs	r1, r3
 80167da:	60c1      	str	r1, [r0, #12]
 80167dc:	4770      	bx	lr

080167de <timer_channel_output_mode_config>:
 80167de:	2903      	cmp	r1, #3
 80167e0:	d81a      	bhi.n	8016818 <timer_channel_output_mode_config+0x3a>
 80167e2:	e8df f001 	tbb	[pc, r1]
 80167e6:	1a120a02 	bne	8498ff6 <__exidx_end+0x47e8a2>
 80167ea:	6983      	ldr	r3, [r0, #24]
 80167ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80167f0:	6183      	str	r3, [r0, #24]
 80167f2:	6983      	ldr	r3, [r0, #24]
 80167f4:	4313      	orrs	r3, r2
 80167f6:	6183      	str	r3, [r0, #24]
 80167f8:	4770      	bx	lr
 80167fa:	6983      	ldr	r3, [r0, #24]
 80167fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8016800:	6183      	str	r3, [r0, #24]
 8016802:	6983      	ldr	r3, [r0, #24]
 8016804:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8016808:	e7f5      	b.n	80167f6 <timer_channel_output_mode_config+0x18>
 801680a:	69c3      	ldr	r3, [r0, #28]
 801680c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016810:	61c3      	str	r3, [r0, #28]
 8016812:	69c3      	ldr	r3, [r0, #28]
 8016814:	4313      	orrs	r3, r2
 8016816:	61c3      	str	r3, [r0, #28]
 8016818:	4770      	bx	lr
 801681a:	69c3      	ldr	r3, [r0, #28]
 801681c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8016820:	61c3      	str	r3, [r0, #28]
 8016822:	69c3      	ldr	r3, [r0, #28]
 8016824:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8016828:	e7f5      	b.n	8016816 <timer_channel_output_mode_config+0x38>

0801682a <timer_channel_output_pulse_value_config>:
 801682a:	2903      	cmp	r1, #3
 801682c:	d80a      	bhi.n	8016844 <timer_channel_output_pulse_value_config+0x1a>
 801682e:	e8df f001 	tbb	[pc, r1]
 8016832:	08060402 	stmdaeq	r6, {r1, sl}
 8016836:	6342      	str	r2, [r0, #52]	; 0x34
 8016838:	4770      	bx	lr
 801683a:	6382      	str	r2, [r0, #56]	; 0x38
 801683c:	4770      	bx	lr
 801683e:	63c2      	str	r2, [r0, #60]	; 0x3c
 8016840:	4770      	bx	lr
 8016842:	6402      	str	r2, [r0, #64]	; 0x40
 8016844:	4770      	bx	lr

08016846 <timer_input_trigger_source_select>:
 8016846:	6883      	ldr	r3, [r0, #8]
 8016848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801684c:	6083      	str	r3, [r0, #8]
 801684e:	6883      	ldr	r3, [r0, #8]
 8016850:	430b      	orrs	r3, r1
 8016852:	6083      	str	r3, [r0, #8]
 8016854:	4770      	bx	lr

08016856 <timer_master_output_trigger_source_select>:
 8016856:	6843      	ldr	r3, [r0, #4]
 8016858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801685c:	6043      	str	r3, [r0, #4]
 801685e:	6843      	ldr	r3, [r0, #4]
 8016860:	430b      	orrs	r3, r1
 8016862:	6043      	str	r3, [r0, #4]
 8016864:	4770      	bx	lr

08016866 <timer_slave_mode_select>:
 8016866:	6883      	ldr	r3, [r0, #8]
 8016868:	f023 0307 	bic.w	r3, r3, #7
 801686c:	6083      	str	r3, [r0, #8]
 801686e:	6883      	ldr	r3, [r0, #8]
 8016870:	430b      	orrs	r3, r1
 8016872:	6083      	str	r3, [r0, #8]
 8016874:	4770      	bx	lr

08016876 <timer_master_slave_mode_config>:
 8016876:	2980      	cmp	r1, #128	; 0x80
 8016878:	d104      	bne.n	8016884 <timer_master_slave_mode_config+0xe>
 801687a:	6883      	ldr	r3, [r0, #8]
 801687c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016880:	6083      	str	r3, [r0, #8]
 8016882:	4770      	bx	lr
 8016884:	2900      	cmp	r1, #0
 8016886:	d1fc      	bne.n	8016882 <timer_master_slave_mode_config+0xc>
 8016888:	6883      	ldr	r3, [r0, #8]
 801688a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801688e:	e7f7      	b.n	8016880 <timer_master_slave_mode_config+0xa>

08016890 <timer_interrupt_enable>:
 8016890:	68c3      	ldr	r3, [r0, #12]
 8016892:	430b      	orrs	r3, r1
 8016894:	60c3      	str	r3, [r0, #12]
 8016896:	4770      	bx	lr

08016898 <usart_deinit>:
 8016898:	b508      	push	{r3, lr}
 801689a:	4b2d      	ldr	r3, [pc, #180]	; (8016950 <usart_deinit+0xb8>)
 801689c:	4298      	cmp	r0, r3
 801689e:	d050      	beq.n	8016942 <usart_deinit+0xaa>
 80168a0:	d817      	bhi.n	80168d2 <usart_deinit+0x3a>
 80168a2:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 80168a6:	4298      	cmp	r0, r3
 80168a8:	d044      	beq.n	8016934 <usart_deinit+0x9c>
 80168aa:	d808      	bhi.n	80168be <usart_deinit+0x26>
 80168ac:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80168b0:	4298      	cmp	r0, r3
 80168b2:	d02a      	beq.n	801690a <usart_deinit+0x72>
 80168b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80168b8:	4298      	cmp	r0, r3
 80168ba:	d02d      	beq.n	8016918 <usart_deinit+0x80>
 80168bc:	bd08      	pop	{r3, pc}
 80168be:	4b25      	ldr	r3, [pc, #148]	; (8016954 <usart_deinit+0xbc>)
 80168c0:	4298      	cmp	r0, r3
 80168c2:	d1fb      	bne.n	80168bc <usart_deinit+0x24>
 80168c4:	f240 4014 	movw	r0, #1044	; 0x414
 80168c8:	f7ff fd29 	bl	801631e <rcu_periph_reset_enable>
 80168cc:	f240 4014 	movw	r0, #1044	; 0x414
 80168d0:	e017      	b.n	8016902 <usart_deinit+0x6a>
 80168d2:	4b21      	ldr	r3, [pc, #132]	; (8016958 <usart_deinit+0xc0>)
 80168d4:	4298      	cmp	r0, r3
 80168d6:	d00e      	beq.n	80168f6 <usart_deinit+0x5e>
 80168d8:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 80168dc:	4298      	cmp	r0, r3
 80168de:	d022      	beq.n	8016926 <usart_deinit+0x8e>
 80168e0:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 80168e4:	4298      	cmp	r0, r3
 80168e6:	d1e9      	bne.n	80168bc <usart_deinit+0x24>
 80168e8:	f641 601f 	movw	r0, #7711	; 0x1e1f
 80168ec:	f7ff fd17 	bl	801631e <rcu_periph_reset_enable>
 80168f0:	f641 601f 	movw	r0, #7711	; 0x1e1f
 80168f4:	e005      	b.n	8016902 <usart_deinit+0x6a>
 80168f6:	f240 300e 	movw	r0, #782	; 0x30e
 80168fa:	f7ff fd10 	bl	801631e <rcu_periph_reset_enable>
 80168fe:	f240 300e 	movw	r0, #782	; 0x30e
 8016902:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016906:	f7ff bd0c 	b.w	8016322 <rcu_periph_reset_disable>
 801690a:	f240 4011 	movw	r0, #1041	; 0x411
 801690e:	f7ff fd06 	bl	801631e <rcu_periph_reset_enable>
 8016912:	f240 4011 	movw	r0, #1041	; 0x411
 8016916:	e7f4      	b.n	8016902 <usart_deinit+0x6a>
 8016918:	f240 4012 	movw	r0, #1042	; 0x412
 801691c:	f7ff fcff 	bl	801631e <rcu_periph_reset_enable>
 8016920:	f240 4012 	movw	r0, #1042	; 0x412
 8016924:	e7ed      	b.n	8016902 <usart_deinit+0x6a>
 8016926:	f641 5018 	movw	r0, #7448	; 0x1d18
 801692a:	f7ff fcf8 	bl	801631e <rcu_periph_reset_enable>
 801692e:	f641 5018 	movw	r0, #7448	; 0x1d18
 8016932:	e7e6      	b.n	8016902 <usart_deinit+0x6a>
 8016934:	f240 4013 	movw	r0, #1043	; 0x413
 8016938:	f7ff fcf1 	bl	801631e <rcu_periph_reset_enable>
 801693c:	f240 4013 	movw	r0, #1043	; 0x413
 8016940:	e7df      	b.n	8016902 <usart_deinit+0x6a>
 8016942:	f641 601e 	movw	r0, #7710	; 0x1e1e
 8016946:	f7ff fcea 	bl	801631e <rcu_periph_reset_enable>
 801694a:	f641 601e 	movw	r0, #7710	; 0x1e1e
 801694e:	e7d8      	b.n	8016902 <usart_deinit+0x6a>
 8016950:	40007800 	andmi	r7, r0, r0, lsl #16
 8016954:	40005000 	andmi	r5, r0, r0
 8016958:	40013800 	andmi	r3, r1, r0, lsl #16

0801695c <usart_baudrate_set>:
 801695c:	b538      	push	{r3, r4, r5, lr}
 801695e:	4b16      	ldr	r3, [pc, #88]	; (80169b8 <usart_baudrate_set+0x5c>)
 8016960:	4604      	mov	r4, r0
 8016962:	4298      	cmp	r0, r3
 8016964:	460d      	mov	r5, r1
 8016966:	d025      	beq.n	80169b4 <usart_baudrate_set+0x58>
 8016968:	d816      	bhi.n	8016998 <usart_baudrate_set+0x3c>
 801696a:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 801696e:	4298      	cmp	r0, r3
 8016970:	d020      	beq.n	80169b4 <usart_baudrate_set+0x58>
 8016972:	d80f      	bhi.n	8016994 <usart_baudrate_set+0x38>
 8016974:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016978:	4298      	cmp	r0, r3
 801697a:	d01b      	beq.n	80169b4 <usart_baudrate_set+0x58>
 801697c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8016980:	429c      	cmp	r4, r3
 8016982:	d017      	beq.n	80169b4 <usart_baudrate_set+0x58>
 8016984:	2000      	movs	r0, #0
 8016986:	eb00 0155 	add.w	r1, r0, r5, lsr #1
 801698a:	fbb1 f1f5 	udiv	r1, r1, r5
 801698e:	b289      	uxth	r1, r1
 8016990:	60a1      	str	r1, [r4, #8]
 8016992:	bd38      	pop	{r3, r4, r5, pc}
 8016994:	4b09      	ldr	r3, [pc, #36]	; (80169bc <usart_baudrate_set+0x60>)
 8016996:	e7f3      	b.n	8016980 <usart_baudrate_set+0x24>
 8016998:	4b09      	ldr	r3, [pc, #36]	; (80169c0 <usart_baudrate_set+0x64>)
 801699a:	4298      	cmp	r0, r3
 801699c:	d006      	beq.n	80169ac <usart_baudrate_set+0x50>
 801699e:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 80169a2:	4298      	cmp	r0, r3
 80169a4:	d002      	beq.n	80169ac <usart_baudrate_set+0x50>
 80169a6:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 80169aa:	e7e9      	b.n	8016980 <usart_baudrate_set+0x24>
 80169ac:	2003      	movs	r0, #3
 80169ae:	f7ff fd87 	bl	80164c0 <rcu_clock_freq_get>
 80169b2:	e7e8      	b.n	8016986 <usart_baudrate_set+0x2a>
 80169b4:	2002      	movs	r0, #2
 80169b6:	e7fa      	b.n	80169ae <usart_baudrate_set+0x52>
 80169b8:	40007800 	andmi	r7, r0, r0, lsl #16
 80169bc:	40005000 	andmi	r5, r0, r0
 80169c0:	40013800 	andmi	r3, r1, r0, lsl #16

080169c4 <usart_parity_config>:
 80169c4:	68c3      	ldr	r3, [r0, #12]
 80169c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80169ca:	60c3      	str	r3, [r0, #12]
 80169cc:	68c3      	ldr	r3, [r0, #12]
 80169ce:	430b      	orrs	r3, r1
 80169d0:	60c3      	str	r3, [r0, #12]
 80169d2:	4770      	bx	lr

080169d4 <usart_word_length_set>:
 80169d4:	68c3      	ldr	r3, [r0, #12]
 80169d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80169da:	60c3      	str	r3, [r0, #12]
 80169dc:	68c3      	ldr	r3, [r0, #12]
 80169de:	430b      	orrs	r3, r1
 80169e0:	60c3      	str	r3, [r0, #12]
 80169e2:	4770      	bx	lr

080169e4 <usart_stop_bit_set>:
 80169e4:	6903      	ldr	r3, [r0, #16]
 80169e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80169ea:	6103      	str	r3, [r0, #16]
 80169ec:	6903      	ldr	r3, [r0, #16]
 80169ee:	430b      	orrs	r3, r1
 80169f0:	6103      	str	r3, [r0, #16]
 80169f2:	4770      	bx	lr

080169f4 <usart_transmit_config>:
 80169f4:	68c3      	ldr	r3, [r0, #12]
 80169f6:	f023 0308 	bic.w	r3, r3, #8
 80169fa:	430b      	orrs	r3, r1
 80169fc:	60c3      	str	r3, [r0, #12]
 80169fe:	4770      	bx	lr

08016a00 <usart_receive_config>:
 8016a00:	68c3      	ldr	r3, [r0, #12]
 8016a02:	f023 0304 	bic.w	r3, r3, #4
 8016a06:	430b      	orrs	r3, r1
 8016a08:	60c3      	str	r3, [r0, #12]
 8016a0a:	4770      	bx	lr

08016a0c <usart_hardware_flow_rts_config>:
 8016a0c:	6943      	ldr	r3, [r0, #20]
 8016a0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016a12:	430b      	orrs	r3, r1
 8016a14:	6143      	str	r3, [r0, #20]
 8016a16:	4770      	bx	lr

08016a18 <usart_hardware_flow_cts_config>:
 8016a18:	6943      	ldr	r3, [r0, #20]
 8016a1a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8016a1e:	430b      	orrs	r3, r1
 8016a20:	6143      	str	r3, [r0, #20]
 8016a22:	4770      	bx	lr

08016a24 <usart_flag_get>:
 8016a24:	098b      	lsrs	r3, r1, #6
 8016a26:	581a      	ldr	r2, [r3, r0]
 8016a28:	2301      	movs	r3, #1
 8016a2a:	f001 011f 	and.w	r1, r1, #31
 8016a2e:	408b      	lsls	r3, r1
 8016a30:	4213      	tst	r3, r2
 8016a32:	bf14      	ite	ne
 8016a34:	2001      	movne	r0, #1
 8016a36:	2000      	moveq	r0, #0
 8016a38:	4770      	bx	lr
	...

08016a3c <emac_start>:
 8016a3c:	b510      	push	{r4, lr}
 8016a3e:	4604      	mov	r4, r0
 8016a40:	f240 6002 	movw	r0, #1538	; 0x602
 8016a44:	f7ff fc50 	bl	80162e8 <rcu_periph_clock_enable>
 8016a48:	f240 6003 	movw	r0, #1539	; 0x603
 8016a4c:	f7ff fc4c 	bl	80162e8 <rcu_periph_clock_enable>
 8016a50:	f240 6004 	movw	r0, #1540	; 0x604
 8016a54:	f7ff fc48 	bl	80162e8 <rcu_periph_clock_enable>
 8016a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016a5c:	2203      	movs	r2, #3
 8016a5e:	2118      	movs	r1, #24
 8016a60:	4846      	ldr	r0, [pc, #280]	; (8016b7c <emac_start+0x140>)
 8016a62:	f7ff fba9 	bl	80161b8 <gpio_init>
 8016a66:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8016a6a:	f7ff fc3d 	bl	80162e8 <rcu_periph_clock_enable>
 8016a6e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8016a72:	f7ff fc79 	bl	8016368 <rcu_pll2_config>
 8016a76:	201c      	movs	r0, #28
 8016a78:	f7ff fd20 	bl	80164bc <rcu_osci_on>
 8016a7c:	201c      	movs	r0, #28
 8016a7e:	f7ff fcad 	bl	80163dc <rcu_osci_stab_wait>
 8016a82:	2100      	movs	r1, #0
 8016a84:	f04f 6030 	mov.w	r0, #184549376	; 0xb000000
 8016a88:	f7ff fc5e 	bl	8016348 <rcu_ckout0_config>
 8016a8c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8016a90:	f7ff fc16 	bl	80162c0 <gpio_ethernet_phy_select>
 8016a94:	2302      	movs	r3, #2
 8016a96:	2203      	movs	r2, #3
 8016a98:	2104      	movs	r1, #4
 8016a9a:	4838      	ldr	r0, [pc, #224]	; (8016b7c <emac_start+0x140>)
 8016a9c:	f7ff fb8c 	bl	80161b8 <gpio_init>
 8016aa0:	2304      	movs	r3, #4
 8016aa2:	2203      	movs	r2, #3
 8016aa4:	2118      	movs	r1, #24
 8016aa6:	4835      	ldr	r0, [pc, #212]	; (8016b7c <emac_start+0x140>)
 8016aa8:	f7ff fb86 	bl	80161b8 <gpio_init>
 8016aac:	2380      	movs	r3, #128	; 0x80
 8016aae:	2203      	movs	r2, #3
 8016ab0:	2104      	movs	r1, #4
 8016ab2:	4832      	ldr	r0, [pc, #200]	; (8016b7c <emac_start+0x140>)
 8016ab4:	f7ff fb80 	bl	80161b8 <gpio_init>
 8016ab8:	2302      	movs	r3, #2
 8016aba:	2203      	movs	r2, #3
 8016abc:	2118      	movs	r1, #24
 8016abe:	4830      	ldr	r0, [pc, #192]	; (8016b80 <emac_start+0x144>)
 8016ac0:	f7ff fb7a 	bl	80161b8 <gpio_init>
 8016ac4:	2310      	movs	r3, #16
 8016ac6:	2203      	movs	r2, #3
 8016ac8:	2104      	movs	r1, #4
 8016aca:	482d      	ldr	r0, [pc, #180]	; (8016b80 <emac_start+0x144>)
 8016acc:	f7ff fb74 	bl	80161b8 <gpio_init>
 8016ad0:	2320      	movs	r3, #32
 8016ad2:	2203      	movs	r2, #3
 8016ad4:	2104      	movs	r1, #4
 8016ad6:	482a      	ldr	r0, [pc, #168]	; (8016b80 <emac_start+0x144>)
 8016ad8:	f7ff fb6e 	bl	80161b8 <gpio_init>
 8016adc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016ae0:	2203      	movs	r2, #3
 8016ae2:	2118      	movs	r1, #24
 8016ae4:	4827      	ldr	r0, [pc, #156]	; (8016b84 <emac_start+0x148>)
 8016ae6:	f7ff fb67 	bl	80161b8 <gpio_init>
 8016aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016aee:	2203      	movs	r2, #3
 8016af0:	2118      	movs	r1, #24
 8016af2:	4824      	ldr	r0, [pc, #144]	; (8016b84 <emac_start+0x148>)
 8016af4:	f7ff fb60 	bl	80161b8 <gpio_init>
 8016af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016afc:	2203      	movs	r2, #3
 8016afe:	2118      	movs	r1, #24
 8016b00:	4820      	ldr	r0, [pc, #128]	; (8016b84 <emac_start+0x148>)
 8016b02:	f7ff fb59 	bl	80161b8 <gpio_init>
 8016b06:	f240 500e 	movw	r0, #1294	; 0x50e
 8016b0a:	f7ff fbed 	bl	80162e8 <rcu_periph_clock_enable>
 8016b0e:	f240 500f 	movw	r0, #1295	; 0x50f
 8016b12:	f7ff fbe9 	bl	80162e8 <rcu_periph_clock_enable>
 8016b16:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 8016b1a:	f7ff fbe5 	bl	80162e8 <rcu_periph_clock_enable>
 8016b1e:	f001 f833 	bl	8017b88 <enet_deinit>
 8016b22:	f000 fc8f 	bl	8017444 <enet_software_reset>
 8016b26:	b900      	cbnz	r0, 8016b2a <emac_start+0xee>
 8016b28:	e7fe      	b.n	8016b28 <emac_start+0xec>
 8016b2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016b2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016b32:	2001      	movs	r0, #1
 8016b34:	f000 fe0a 	bl	801774c <enet_init>
 8016b38:	4b13      	ldr	r3, [pc, #76]	; (8016b88 <emac_start+0x14c>)
 8016b3a:	6018      	str	r0, [r3, #0]
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	b903      	cbnz	r3, 8016b42 <emac_start+0x106>
 8016b40:	e7fe      	b.n	8016b40 <emac_start+0x104>
 8016b42:	4620      	mov	r0, r4
 8016b44:	f000 fb78 	bl	8017238 <mac_address_get>
 8016b48:	4621      	mov	r1, r4
 8016b4a:	2000      	movs	r0, #0
 8016b4c:	f000 fd5e 	bl	801760c <enet_mac_address_set>
 8016b50:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 8016b54:	f000 fc8a 	bl	801746c <enet_descriptors_chain_init>
 8016b58:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8016b5c:	f000 fc86 	bl	801746c <enet_descriptors_chain_init>
 8016b60:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8016b64:	4809      	ldr	r0, [pc, #36]	; (8016b8c <emac_start+0x150>)
 8016b66:	f000 fd4b 	bl	8017600 <enet_transmit_checksum_config>
 8016b6a:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8016b6e:	4808      	ldr	r0, [pc, #32]	; (8016b90 <emac_start+0x154>)
 8016b70:	f000 fd46 	bl	8017600 <enet_transmit_checksum_config>
 8016b74:	f000 ff80 	bl	8017a78 <enet_enable>
 8016b78:	2001      	movs	r0, #1
 8016b7a:	bd10      	pop	{r4, pc}
 8016b7c:	40010800 	andmi	r0, r1, r0, lsl #16
 8016b80:	40011000 	andmi	r1, r1, r0
 8016b84:	40010c00 	andmi	r0, r1, r0, lsl #24
 8016b88:	2001ce68 	andcs	ip, r1, r8, ror #28
 8016b8c:	2002a72c 	andcs	sl, r2, ip, lsr #14
 8016b90:	2002a73c 	andcs	sl, r2, ip, lsr r7

08016b94 <emac_eth_recv>:
 8016b94:	b538      	push	{r3, r4, r5, lr}
 8016b96:	4605      	mov	r5, r0
 8016b98:	f000 ffc6 	bl	8017b28 <enet_rxframe_size_get>
 8016b9c:	4604      	mov	r4, r0
 8016b9e:	b138      	cbz	r0, 8016bb0 <emac_eth_recv+0x1c>
 8016ba0:	4b05      	ldr	r3, [pc, #20]	; (8016bb8 <emac_eth_recv+0x24>)
 8016ba2:	2105      	movs	r1, #5
 8016ba4:	6818      	ldr	r0, [r3, #0]
 8016ba6:	f000 ff6e 	bl	8017a86 <enet_desc_information_get>
 8016baa:	6028      	str	r0, [r5, #0]
 8016bac:	4620      	mov	r0, r4
 8016bae:	bd38      	pop	{r3, r4, r5, pc}
 8016bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016bb4:	e7fb      	b.n	8016bae <emac_eth_recv+0x1a>
 8016bb6:	bf00      	nop
 8016bb8:	2001ce78 	andcs	ip, r1, r8, ror lr

08016bbc <emac_free_pkt>:
 8016bbc:	2100      	movs	r1, #0
 8016bbe:	4608      	mov	r0, r1
 8016bc0:	f000 bc9c 	b.w	80174fc <enet_frame_receive>

08016bc4 <emac_eth_send>:
 8016bc4:	f000 bcda 	b.w	801757c <enet_frame_transmit>

08016bc8 <gd32_adc_init()>:
 8016bc8:	b510      	push	{r4, lr}
 8016bca:	f240 6009 	movw	r0, #1545	; 0x609
 8016bce:	4c21      	ldr	r4, [pc, #132]	; (8016c54 <gd32_adc_init()+0x8c>)
 8016bd0:	f7ff fb8a 	bl	80162e8 <rcu_periph_clock_enable>
 8016bd4:	2005      	movs	r0, #5
 8016bd6:	f7ff fbd3 	bl	8016380 <rcu_adc_clock_config>
 8016bda:	4620      	mov	r0, r4
 8016bdc:	2201      	movs	r2, #1
 8016bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016be2:	f000 fb4b 	bl	801727c <adc_special_function_config>
 8016be6:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8016bea:	4620      	mov	r0, r4
 8016bec:	2102      	movs	r1, #2
 8016bee:	f000 fbe4 	bl	80173ba <adc_external_trigger_source_config>
 8016bf2:	2100      	movs	r1, #0
 8016bf4:	4620      	mov	r0, r4
 8016bf6:	f000 fb69 	bl	80172cc <adc_data_alignment_config>
 8016bfa:	2000      	movs	r0, #0
 8016bfc:	f000 fb2e 	bl	801725c <adc_mode_config>
 8016c00:	2202      	movs	r2, #2
 8016c02:	4620      	mov	r0, r4
 8016c04:	4611      	mov	r1, r2
 8016c06:	f000 fb8d 	bl	8017324 <adc_channel_length_config>
 8016c0a:	4620      	mov	r0, r4
 8016c0c:	2307      	movs	r3, #7
 8016c0e:	2210      	movs	r2, #16
 8016c10:	2100      	movs	r1, #0
 8016c12:	f000 fba4 	bl	801735e <adc_inserted_channel_config>
 8016c16:	2307      	movs	r3, #7
 8016c18:	4620      	mov	r0, r4
 8016c1a:	2211      	movs	r2, #17
 8016c1c:	2101      	movs	r1, #1
 8016c1e:	f000 fb9e 	bl	801735e <adc_inserted_channel_config>
 8016c22:	2201      	movs	r2, #1
 8016c24:	2102      	movs	r1, #2
 8016c26:	4620      	mov	r0, r4
 8016c28:	f000 fbd8 	bl	80173dc <adc_external_trigger_config>
 8016c2c:	f000 fb70 	bl	8017310 <adc_tempsensor_vrefint_enable>
 8016c30:	4620      	mov	r0, r4
 8016c32:	f000 fb54 	bl	80172de <adc_enable>
 8016c36:	2100      	movs	r1, #0
 8016c38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016c3c:	f000 fae4 	bl	8017208 <udelay(unsigned int, unsigned int)>
 8016c40:	4620      	mov	r0, r4
 8016c42:	f000 fb54 	bl	80172ee <adc_calibration_enable>
 8016c46:	4620      	mov	r0, r4
 8016c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c4c:	2102      	movs	r1, #2
 8016c4e:	f000 bbe0 	b.w	8017412 <adc_software_trigger_enable>
 8016c52:	bf00      	nop
 8016c54:	40012400 	andmi	r2, r1, r0, lsl #8

08016c58 <_stop() [clone .isra.0]>:
 8016c58:	b508      	push	{r3, lr}
 8016c5a:	4806      	ldr	r0, [pc, #24]	; (8016c74 <_stop() [clone .isra.0]+0x1c>)
 8016c5c:	f001 f828 	bl	8017cb0 <i2c_stop_on_bus>
 8016c60:	f640 73ff 	movw	r3, #4095	; 0xfff
 8016c64:	4904      	ldr	r1, [pc, #16]	; (8016c78 <_stop() [clone .isra.0]+0x20>)
 8016c66:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8016c6a:	0592      	lsls	r2, r2, #22
 8016c6c:	d501      	bpl.n	8016c72 <_stop() [clone .isra.0]+0x1a>
 8016c6e:	3b01      	subs	r3, #1
 8016c70:	d1f9      	bne.n	8016c66 <_stop() [clone .isra.0]+0xe>
 8016c72:	bd08      	pop	{r3, pc}
 8016c74:	40005400 	andmi	r5, r0, r0, lsl #8
 8016c78:	40005000 	andmi	r5, r0, r0

08016c7c <gd32_i2c_begin()>:
 8016c7c:	b510      	push	{r4, lr}
 8016c7e:	f240 7015 	movw	r0, #1813	; 0x715
 8016c82:	f7ff fb31 	bl	80162e8 <rcu_periph_clock_enable>
 8016c86:	4c15      	ldr	r4, [pc, #84]	; (8016cdc <gd32_i2c_begin()+0x60>)
 8016c88:	f240 6003 	movw	r0, #1539	; 0x603
 8016c8c:	f7ff fb2c 	bl	80162e8 <rcu_periph_clock_enable>
 8016c90:	f240 6003 	movw	r0, #1539	; 0x603
 8016c94:	f7ff fb28 	bl	80162e8 <rcu_periph_clock_enable>
 8016c98:	4620      	mov	r0, r4
 8016c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016c9e:	2203      	movs	r2, #3
 8016ca0:	211c      	movs	r1, #28
 8016ca2:	f7ff fa89 	bl	80161b8 <gpio_init>
 8016ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016caa:	2203      	movs	r2, #3
 8016cac:	4620      	mov	r0, r4
 8016cae:	211c      	movs	r1, #28
 8016cb0:	f7ff fa82 	bl	80161b8 <gpio_init>
 8016cb4:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 8016cb8:	2101      	movs	r1, #1
 8016cba:	2002      	movs	r0, #2
 8016cbc:	f7ff fad0 	bl	8016260 <gpio_pin_remap_config>
 8016cc0:	4620      	mov	r0, r4
 8016cc2:	4907      	ldr	r1, [pc, #28]	; (8016ce0 <gd32_i2c_begin()+0x64>)
 8016cc4:	2200      	movs	r2, #0
 8016cc6:	f000 ff6d 	bl	8017ba4 <i2c_clock_config>
 8016cca:	4620      	mov	r0, r4
 8016ccc:	f000 ffe6 	bl	8017c9c <i2c_enable>
 8016cd0:	4620      	mov	r0, r4
 8016cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cd6:	2101      	movs	r1, #1
 8016cd8:	f000 bfc6 	b.w	8017c68 <i2c_ack_config>
 8016cdc:	40010c00 	andmi	r0, r1, r0, lsl #24
 8016ce0:	00061a80 	andeq	r1, r6, r0, lsl #21

08016ce4 <gd32_i2c_set_baudrate(unsigned int)>:
 8016ce4:	4601      	mov	r1, r0
 8016ce6:	2200      	movs	r2, #0
 8016ce8:	4801      	ldr	r0, [pc, #4]	; (8016cf0 <gd32_i2c_set_baudrate(unsigned int)+0xc>)
 8016cea:	f000 bf5b 	b.w	8017ba4 <i2c_clock_config>
 8016cee:	bf00      	nop
 8016cf0:	40005400 	andmi	r5, r0, r0, lsl #8

08016cf4 <gd32_i2c_set_address(unsigned char)>:
 8016cf4:	4b01      	ldr	r3, [pc, #4]	; (8016cfc <gd32_i2c_set_address(unsigned char)+0x8>)
 8016cf6:	0040      	lsls	r0, r0, #1
 8016cf8:	7018      	strb	r0, [r3, #0]
 8016cfa:	4770      	bx	lr
 8016cfc:	2001ce6c 	andcs	ip, r1, ip, ror #28

08016d00 <gd32_i2c_write(char const*, unsigned int)>:
 8016d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d02:	4604      	mov	r4, r0
 8016d04:	460f      	mov	r7, r1
 8016d06:	f640 75ff 	movw	r5, #4095	; 0xfff
 8016d0a:	4e2e      	ldr	r6, [pc, #184]	; (8016dc4 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8016d0c:	f240 6101 	movw	r1, #1537	; 0x601
 8016d10:	4630      	mov	r0, r6
 8016d12:	f000 ffd7 	bl	8017cc4 <i2c_flag_get>
 8016d16:	b9b0      	cbnz	r0, 8016d46 <gd32_i2c_write(char const*, unsigned int)+0x46>
 8016d18:	482a      	ldr	r0, [pc, #168]	; (8016dc4 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8016d1a:	f000 ffc4 	bl	8017ca6 <i2c_start_on_bus>
 8016d1e:	f640 75ff 	movw	r5, #4095	; 0xfff
 8016d22:	4e28      	ldr	r6, [pc, #160]	; (8016dc4 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8016d24:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8016d28:	4630      	mov	r0, r6
 8016d2a:	f000 ffcb 	bl	8017cc4 <i2c_flag_get>
 8016d2e:	b190      	cbz	r0, 8016d56 <gd32_i2c_write(char const*, unsigned int)+0x56>
 8016d30:	4b25      	ldr	r3, [pc, #148]	; (8016dc8 <gd32_i2c_write(char const*, unsigned int)+0xc8>)
 8016d32:	f06f 0201 	mvn.w	r2, #1
 8016d36:	7819      	ldrb	r1, [r3, #0]
 8016d38:	4822      	ldr	r0, [pc, #136]	; (8016dc4 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8016d3a:	f000 ffa7 	bl	8017c8c <i2c_master_addressing>
 8016d3e:	f640 75ff 	movw	r5, #4095	; 0xfff
 8016d42:	4e20      	ldr	r6, [pc, #128]	; (8016dc4 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8016d44:	e00c      	b.n	8016d60 <gd32_i2c_write(char const*, unsigned int)+0x60>
 8016d46:	3d01      	subs	r5, #1
 8016d48:	d1e0      	bne.n	8016d0c <gd32_i2c_write(char const*, unsigned int)+0xc>
 8016d4a:	f7ff ff85 	bl	8016c58 <_stop() [clone .isra.0]>
 8016d4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016d52:	4240      	negs	r0, r0
 8016d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d56:	3d01      	subs	r5, #1
 8016d58:	d1e4      	bne.n	8016d24 <gd32_i2c_write(char const*, unsigned int)+0x24>
 8016d5a:	e7f6      	b.n	8016d4a <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8016d5c:	3d01      	subs	r5, #1
 8016d5e:	d0f4      	beq.n	8016d4a <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8016d60:	f240 5101 	movw	r1, #1281	; 0x501
 8016d64:	4630      	mov	r0, r6
 8016d66:	f000 ffad 	bl	8017cc4 <i2c_flag_get>
 8016d6a:	2800      	cmp	r0, #0
 8016d6c:	d0f6      	beq.n	8016d5c <gd32_i2c_write(char const*, unsigned int)+0x5c>
 8016d6e:	f240 5101 	movw	r1, #1281	; 0x501
 8016d72:	4814      	ldr	r0, [pc, #80]	; (8016dc4 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8016d74:	f000 ffb1 	bl	8017cda <i2c_flag_clear>
 8016d78:	f640 75ff 	movw	r5, #4095	; 0xfff
 8016d7c:	4e11      	ldr	r6, [pc, #68]	; (8016dc4 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8016d7e:	f240 5107 	movw	r1, #1287	; 0x507
 8016d82:	4630      	mov	r0, r6
 8016d84:	f000 ff9e 	bl	8017cc4 <i2c_flag_get>
 8016d88:	2801      	cmp	r0, #1
 8016d8a:	d107      	bne.n	8016d9c <gd32_i2c_write(char const*, unsigned int)+0x9c>
 8016d8c:	4e0d      	ldr	r6, [pc, #52]	; (8016dc4 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8016d8e:	4427      	add	r7, r4
 8016d90:	42a7      	cmp	r7, r4
 8016d92:	d106      	bne.n	8016da2 <gd32_i2c_write(char const*, unsigned int)+0xa2>
 8016d94:	f7ff ff60 	bl	8016c58 <_stop() [clone .isra.0]>
 8016d98:	2000      	movs	r0, #0
 8016d9a:	e7da      	b.n	8016d52 <gd32_i2c_write(char const*, unsigned int)+0x52>
 8016d9c:	3d01      	subs	r5, #1
 8016d9e:	d1ee      	bne.n	8016d7e <gd32_i2c_write(char const*, unsigned int)+0x7e>
 8016da0:	e7d3      	b.n	8016d4a <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8016da2:	4630      	mov	r0, r6
 8016da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016da8:	f000 ff87 	bl	8017cba <i2c_data_transmit>
 8016dac:	f640 75ff 	movw	r5, #4095	; 0xfff
 8016db0:	f240 5102 	movw	r1, #1282	; 0x502
 8016db4:	4630      	mov	r0, r6
 8016db6:	f000 ff85 	bl	8017cc4 <i2c_flag_get>
 8016dba:	2800      	cmp	r0, #0
 8016dbc:	d1e8      	bne.n	8016d90 <gd32_i2c_write(char const*, unsigned int)+0x90>
 8016dbe:	3d01      	subs	r5, #1
 8016dc0:	d1f6      	bne.n	8016db0 <gd32_i2c_write(char const*, unsigned int)+0xb0>
 8016dc2:	e7c2      	b.n	8016d4a <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8016dc4:	40005400 	andmi	r5, r0, r0, lsl #8
 8016dc8:	2001ce6c 	andcs	ip, r1, ip, ror #28

08016dcc <gd32_i2c_read(char*, unsigned int)>:
 8016dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016dd0:	4680      	mov	r8, r0
 8016dd2:	460c      	mov	r4, r1
 8016dd4:	f640 76ff 	movw	r6, #4095	; 0xfff
 8016dd8:	4f4b      	ldr	r7, [pc, #300]	; (8016f08 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8016dda:	f240 6101 	movw	r1, #1537	; 0x601
 8016dde:	4638      	mov	r0, r7
 8016de0:	f000 ff70 	bl	8017cc4 <i2c_flag_get>
 8016de4:	4605      	mov	r5, r0
 8016de6:	bb08      	cbnz	r0, 8016e2c <gd32_i2c_read(char*, unsigned int)+0x60>
 8016de8:	2c02      	cmp	r4, #2
 8016dea:	d103      	bne.n	8016df4 <gd32_i2c_read(char*, unsigned int)+0x28>
 8016dec:	4601      	mov	r1, r0
 8016dee:	4846      	ldr	r0, [pc, #280]	; (8016f08 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8016df0:	f000 ff43 	bl	8017c7a <i2c_ackpos_config>
 8016df4:	4844      	ldr	r0, [pc, #272]	; (8016f08 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8016df6:	f000 ff56 	bl	8017ca6 <i2c_start_on_bus>
 8016dfa:	f640 76ff 	movw	r6, #4095	; 0xfff
 8016dfe:	4f42      	ldr	r7, [pc, #264]	; (8016f08 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8016e00:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8016e04:	4638      	mov	r0, r7
 8016e06:	f000 ff5d 	bl	8017cc4 <i2c_flag_get>
 8016e0a:	b1a8      	cbz	r0, 8016e38 <gd32_i2c_read(char*, unsigned int)+0x6c>
 8016e0c:	4b3f      	ldr	r3, [pc, #252]	; (8016f0c <gd32_i2c_read(char*, unsigned int)+0x140>)
 8016e0e:	2201      	movs	r2, #1
 8016e10:	7819      	ldrb	r1, [r3, #0]
 8016e12:	483d      	ldr	r0, [pc, #244]	; (8016f08 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8016e14:	f000 ff3a 	bl	8017c8c <i2c_master_addressing>
 8016e18:	2c02      	cmp	r4, #2
 8016e1a:	d803      	bhi.n	8016e24 <gd32_i2c_read(char*, unsigned int)+0x58>
 8016e1c:	2100      	movs	r1, #0
 8016e1e:	483a      	ldr	r0, [pc, #232]	; (8016f08 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8016e20:	f000 ff22 	bl	8017c68 <i2c_ack_config>
 8016e24:	f640 76ff 	movw	r6, #4095	; 0xfff
 8016e28:	4f37      	ldr	r7, [pc, #220]	; (8016f08 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8016e2a:	e00a      	b.n	8016e42 <gd32_i2c_read(char*, unsigned int)+0x76>
 8016e2c:	3e01      	subs	r6, #1
 8016e2e:	d1d4      	bne.n	8016dda <gd32_i2c_read(char*, unsigned int)+0xe>
 8016e30:	f7ff ff12 	bl	8016c58 <_stop() [clone .isra.0]>
 8016e34:	2504      	movs	r5, #4
 8016e36:	e04d      	b.n	8016ed4 <gd32_i2c_read(char*, unsigned int)+0x108>
 8016e38:	3e01      	subs	r6, #1
 8016e3a:	d1e1      	bne.n	8016e00 <gd32_i2c_read(char*, unsigned int)+0x34>
 8016e3c:	e7f8      	b.n	8016e30 <gd32_i2c_read(char*, unsigned int)+0x64>
 8016e3e:	3e01      	subs	r6, #1
 8016e40:	d0f6      	beq.n	8016e30 <gd32_i2c_read(char*, unsigned int)+0x64>
 8016e42:	f240 5101 	movw	r1, #1281	; 0x501
 8016e46:	4638      	mov	r0, r7
 8016e48:	f000 ff3c 	bl	8017cc4 <i2c_flag_get>
 8016e4c:	2800      	cmp	r0, #0
 8016e4e:	d0f6      	beq.n	8016e3e <gd32_i2c_read(char*, unsigned int)+0x72>
 8016e50:	f240 5101 	movw	r1, #1281	; 0x501
 8016e54:	482c      	ldr	r0, [pc, #176]	; (8016f08 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8016e56:	f000 ff40 	bl	8017cda <i2c_flag_clear>
 8016e5a:	2c01      	cmp	r4, #1
 8016e5c:	d102      	bne.n	8016e64 <gd32_i2c_read(char*, unsigned int)+0x98>
 8016e5e:	482a      	ldr	r0, [pc, #168]	; (8016f08 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8016e60:	f000 ff26 	bl	8017cb0 <i2c_stop_on_bus>
 8016e64:	f640 77ff 	movw	r7, #4095	; 0xfff
 8016e68:	4e27      	ldr	r6, [pc, #156]	; (8016f08 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8016e6a:	e022      	b.n	8016eb2 <gd32_i2c_read(char*, unsigned int)+0xe6>
 8016e6c:	2c03      	cmp	r4, #3
 8016e6e:	d134      	bne.n	8016eda <gd32_i2c_read(char*, unsigned int)+0x10e>
 8016e70:	f640 79ff 	movw	r9, #4095	; 0xfff
 8016e74:	e002      	b.n	8016e7c <gd32_i2c_read(char*, unsigned int)+0xb0>
 8016e76:	f1b9 0901 	subs.w	r9, r9, #1
 8016e7a:	d0d9      	beq.n	8016e30 <gd32_i2c_read(char*, unsigned int)+0x64>
 8016e7c:	f240 5102 	movw	r1, #1282	; 0x502
 8016e80:	4630      	mov	r0, r6
 8016e82:	f000 ff1f 	bl	8017cc4 <i2c_flag_get>
 8016e86:	2800      	cmp	r0, #0
 8016e88:	d0f5      	beq.n	8016e76 <gd32_i2c_read(char*, unsigned int)+0xaa>
 8016e8a:	2100      	movs	r1, #0
 8016e8c:	4630      	mov	r0, r6
 8016e8e:	f000 feeb 	bl	8017c68 <i2c_ack_config>
 8016e92:	f240 5106 	movw	r1, #1286	; 0x506
 8016e96:	4630      	mov	r0, r6
 8016e98:	f000 ff14 	bl	8017cc4 <i2c_flag_get>
 8016e9c:	b138      	cbz	r0, 8016eae <gd32_i2c_read(char*, unsigned int)+0xe2>
 8016e9e:	4630      	mov	r0, r6
 8016ea0:	f000 ff0d 	bl	8017cbe <i2c_data_receive>
 8016ea4:	f640 77ff 	movw	r7, #4095	; 0xfff
 8016ea8:	f808 0b01 	strb.w	r0, [r8], #1
 8016eac:	3c01      	subs	r4, #1
 8016eae:	3f01      	subs	r7, #1
 8016eb0:	d0be      	beq.n	8016e30 <gd32_i2c_read(char*, unsigned int)+0x64>
 8016eb2:	2c00      	cmp	r4, #0
 8016eb4:	d1da      	bne.n	8016e6c <gd32_i2c_read(char*, unsigned int)+0xa0>
 8016eb6:	f640 73ff 	movw	r3, #4095	; 0xfff
 8016eba:	4915      	ldr	r1, [pc, #84]	; (8016f10 <gd32_i2c_read(char*, unsigned int)+0x144>)
 8016ebc:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8016ec0:	0592      	lsls	r2, r2, #22
 8016ec2:	d41d      	bmi.n	8016f00 <gd32_i2c_read(char*, unsigned int)+0x134>
 8016ec4:	2101      	movs	r1, #1
 8016ec6:	4810      	ldr	r0, [pc, #64]	; (8016f08 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8016ec8:	f000 fece 	bl	8017c68 <i2c_ack_config>
 8016ecc:	2101      	movs	r1, #1
 8016ece:	480e      	ldr	r0, [pc, #56]	; (8016f08 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8016ed0:	f000 fed3 	bl	8017c7a <i2c_ackpos_config>
 8016ed4:	4628      	mov	r0, r5
 8016ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016eda:	2c02      	cmp	r4, #2
 8016edc:	d1d9      	bne.n	8016e92 <gd32_i2c_read(char*, unsigned int)+0xc6>
 8016ede:	f640 79ff 	movw	r9, #4095	; 0xfff
 8016ee2:	e002      	b.n	8016eea <gd32_i2c_read(char*, unsigned int)+0x11e>
 8016ee4:	f1b9 0901 	subs.w	r9, r9, #1
 8016ee8:	d0a2      	beq.n	8016e30 <gd32_i2c_read(char*, unsigned int)+0x64>
 8016eea:	f240 5102 	movw	r1, #1282	; 0x502
 8016eee:	4630      	mov	r0, r6
 8016ef0:	f000 fee8 	bl	8017cc4 <i2c_flag_get>
 8016ef4:	2800      	cmp	r0, #0
 8016ef6:	d0f5      	beq.n	8016ee4 <gd32_i2c_read(char*, unsigned int)+0x118>
 8016ef8:	4630      	mov	r0, r6
 8016efa:	f000 fed9 	bl	8017cb0 <i2c_stop_on_bus>
 8016efe:	e7c8      	b.n	8016e92 <gd32_i2c_read(char*, unsigned int)+0xc6>
 8016f00:	3b01      	subs	r3, #1
 8016f02:	d1db      	bne.n	8016ebc <gd32_i2c_read(char*, unsigned int)+0xf0>
 8016f04:	e796      	b.n	8016e34 <gd32_i2c_read(char*, unsigned int)+0x68>
 8016f06:	bf00      	nop
 8016f08:	40005400 	andmi	r5, r0, r0, lsl #8
 8016f0c:	2001ce6c 	andcs	ip, r1, ip, ror #28
 8016f10:	40005000 	andmi	r5, r0, r0

08016f14 <gd32_uart_begin>:
 8016f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f16:	461e      	mov	r6, r3
 8016f18:	4b82      	ldr	r3, [pc, #520]	; (8017124 <gd32_uart_begin+0x210>)
 8016f1a:	4604      	mov	r4, r0
 8016f1c:	4298      	cmp	r0, r3
 8016f1e:	460f      	mov	r7, r1
 8016f20:	4615      	mov	r5, r2
 8016f22:	d060      	beq.n	8016fe6 <gd32_uart_begin+0xd2>
 8016f24:	d80f      	bhi.n	8016f46 <gd32_uart_begin+0x32>
 8016f26:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 8016f2a:	4298      	cmp	r0, r3
 8016f2c:	d04a      	beq.n	8016fc4 <gd32_uart_begin+0xb0>
 8016f2e:	d84c      	bhi.n	8016fca <gd32_uart_begin+0xb6>
 8016f30:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016f34:	4298      	cmp	r0, r3
 8016f36:	d03e      	beq.n	8016fb6 <gd32_uart_begin+0xa2>
 8016f38:	f240 7012 	movw	r0, #1810	; 0x712
 8016f3c:	f7ff f9d4 	bl	80162e8 <rcu_periph_clock_enable>
 8016f40:	f240 6004 	movw	r0, #1540	; 0x604
 8016f44:	e00f      	b.n	8016f66 <gd32_uart_begin+0x52>
 8016f46:	4b78      	ldr	r3, [pc, #480]	; (8017128 <gd32_uart_begin+0x214>)
 8016f48:	4298      	cmp	r0, r3
 8016f4a:	d006      	beq.n	8016f5a <gd32_uart_begin+0x46>
 8016f4c:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8016f50:	4298      	cmp	r0, r3
 8016f52:	d045      	beq.n	8016fe0 <gd32_uart_begin+0xcc>
 8016f54:	f641 201f 	movw	r0, #6687	; 0x1a1f
 8016f58:	e047      	b.n	8016fea <gd32_uart_begin+0xd6>
 8016f5a:	f240 600e 	movw	r0, #1550	; 0x60e
 8016f5e:	f7ff f9c3 	bl	80162e8 <rcu_periph_clock_enable>
 8016f62:	f240 6003 	movw	r0, #1539	; 0x603
 8016f66:	f7ff f9bf 	bl	80162e8 <rcu_periph_clock_enable>
 8016f6a:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8016f6e:	f7ff f9bb 	bl	80162e8 <rcu_periph_clock_enable>
 8016f72:	4b6c      	ldr	r3, [pc, #432]	; (8017124 <gd32_uart_begin+0x210>)
 8016f74:	429c      	cmp	r4, r3
 8016f76:	f000 80c3 	beq.w	8017100 <gd32_uart_begin+0x1ec>
 8016f7a:	d83b      	bhi.n	8016ff4 <gd32_uart_begin+0xe0>
 8016f7c:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 8016f80:	429c      	cmp	r4, r3
 8016f82:	f000 809c 	beq.w	80170be <gd32_uart_begin+0x1aa>
 8016f86:	f200 80a7 	bhi.w	80170d8 <gd32_uart_begin+0x1c4>
 8016f8a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8016f8e:	429c      	cmp	r4, r3
 8016f90:	f000 8088 	beq.w	80170a4 <gd32_uart_begin+0x190>
 8016f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016f98:	2203      	movs	r2, #3
 8016f9a:	2118      	movs	r1, #24
 8016f9c:	4863      	ldr	r0, [pc, #396]	; (801712c <gd32_uart_begin+0x218>)
 8016f9e:	f7ff f90b 	bl	80161b8 <gpio_init>
 8016fa2:	2104      	movs	r1, #4
 8016fa4:	4861      	ldr	r0, [pc, #388]	; (801712c <gd32_uart_begin+0x218>)
 8016fa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016faa:	2203      	movs	r2, #3
 8016fac:	f7ff f904 	bl	80161b8 <gpio_init>
 8016fb0:	2101      	movs	r1, #1
 8016fb2:	485f      	ldr	r0, [pc, #380]	; (8017130 <gd32_uart_begin+0x21c>)
 8016fb4:	e03b      	b.n	801702e <gd32_uart_begin+0x11a>
 8016fb6:	f240 7011 	movw	r0, #1809	; 0x711
 8016fba:	f7ff f995 	bl	80162e8 <rcu_periph_clock_enable>
 8016fbe:	f240 6002 	movw	r0, #1538	; 0x602
 8016fc2:	e7d0      	b.n	8016f66 <gd32_uart_begin+0x52>
 8016fc4:	f240 7013 	movw	r0, #1811	; 0x713
 8016fc8:	e7b8      	b.n	8016f3c <gd32_uart_begin+0x28>
 8016fca:	f240 7014 	movw	r0, #1812	; 0x714
 8016fce:	f7ff f98b 	bl	80162e8 <rcu_periph_clock_enable>
 8016fd2:	f240 6004 	movw	r0, #1540	; 0x604
 8016fd6:	f7ff f987 	bl	80162e8 <rcu_periph_clock_enable>
 8016fda:	f240 6005 	movw	r0, #1541	; 0x605
 8016fde:	e7c2      	b.n	8016f66 <gd32_uart_begin+0x52>
 8016fe0:	f641 1018 	movw	r0, #6424	; 0x1918
 8016fe4:	e7aa      	b.n	8016f3c <gd32_uart_begin+0x28>
 8016fe6:	f641 201e 	movw	r0, #6686	; 0x1a1e
 8016fea:	f7ff f97d 	bl	80162e8 <rcu_periph_clock_enable>
 8016fee:	f240 6006 	movw	r0, #1542	; 0x606
 8016ff2:	e7b8      	b.n	8016f66 <gd32_uart_begin+0x52>
 8016ff4:	4b4c      	ldr	r3, [pc, #304]	; (8017128 <gd32_uart_begin+0x214>)
 8016ff6:	429c      	cmp	r4, r3
 8016ff8:	d00b      	beq.n	8017012 <gd32_uart_begin+0xfe>
 8016ffa:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8016ffe:	429c      	cmp	r4, r3
 8017000:	d076      	beq.n	80170f0 <gd32_uart_begin+0x1dc>
 8017002:	2302      	movs	r3, #2
 8017004:	2203      	movs	r2, #3
 8017006:	2118      	movs	r1, #24
 8017008:	484a      	ldr	r0, [pc, #296]	; (8017134 <gd32_uart_begin+0x220>)
 801700a:	f7ff f8d5 	bl	80161b8 <gpio_init>
 801700e:	2301      	movs	r3, #1
 8017010:	e07e      	b.n	8017110 <gd32_uart_begin+0x1fc>
 8017012:	2340      	movs	r3, #64	; 0x40
 8017014:	2203      	movs	r2, #3
 8017016:	2118      	movs	r1, #24
 8017018:	4847      	ldr	r0, [pc, #284]	; (8017138 <gd32_uart_begin+0x224>)
 801701a:	f7ff f8cd 	bl	80161b8 <gpio_init>
 801701e:	2104      	movs	r1, #4
 8017020:	4845      	ldr	r0, [pc, #276]	; (8017138 <gd32_uart_begin+0x224>)
 8017022:	2380      	movs	r3, #128	; 0x80
 8017024:	2203      	movs	r2, #3
 8017026:	f7ff f8c7 	bl	80161b8 <gpio_init>
 801702a:	2101      	movs	r1, #1
 801702c:	2004      	movs	r0, #4
 801702e:	f7ff f917 	bl	8016260 <gpio_pin_remap_config>
 8017032:	4620      	mov	r0, r4
 8017034:	f7ff fc30 	bl	8016898 <usart_deinit>
 8017038:	68e3      	ldr	r3, [r4, #12]
 801703a:	4639      	mov	r1, r7
 801703c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017040:	4620      	mov	r0, r4
 8017042:	60e3      	str	r3, [r4, #12]
 8017044:	f7ff fc8a 	bl	801695c <usart_baudrate_set>
 8017048:	f1a5 0309 	sub.w	r3, r5, #9
 801704c:	4259      	negs	r1, r3
 801704e:	4159      	adcs	r1, r3
 8017050:	4620      	mov	r0, r4
 8017052:	0309      	lsls	r1, r1, #12
 8017054:	f7ff fcbe 	bl	80169d4 <usart_word_length_set>
 8017058:	9906      	ldr	r1, [sp, #24]
 801705a:	4620      	mov	r0, r4
 801705c:	1e8a      	subs	r2, r1, #2
 801705e:	4251      	negs	r1, r2
 8017060:	4151      	adcs	r1, r2
 8017062:	0349      	lsls	r1, r1, #13
 8017064:	f7ff fcbe 	bl	80169e4 <usart_stop_bit_set>
 8017068:	2e01      	cmp	r6, #1
 801706a:	d055      	beq.n	8017118 <gd32_uart_begin+0x204>
 801706c:	2e02      	cmp	r6, #2
 801706e:	d156      	bne.n	801711e <gd32_uart_begin+0x20a>
 8017070:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017074:	4620      	mov	r0, r4
 8017076:	f7ff fca5 	bl	80169c4 <usart_parity_config>
 801707a:	2100      	movs	r1, #0
 801707c:	4620      	mov	r0, r4
 801707e:	f7ff fcc5 	bl	8016a0c <usart_hardware_flow_rts_config>
 8017082:	2100      	movs	r1, #0
 8017084:	4620      	mov	r0, r4
 8017086:	f7ff fcc7 	bl	8016a18 <usart_hardware_flow_cts_config>
 801708a:	2104      	movs	r1, #4
 801708c:	4620      	mov	r0, r4
 801708e:	f7ff fcb7 	bl	8016a00 <usart_receive_config>
 8017092:	2108      	movs	r1, #8
 8017094:	4620      	mov	r0, r4
 8017096:	f7ff fcad 	bl	80169f4 <usart_transmit_config>
 801709a:	68e3      	ldr	r3, [r4, #12]
 801709c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80170a0:	60e3      	str	r3, [r4, #12]
 80170a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170a4:	2304      	movs	r3, #4
 80170a6:	2203      	movs	r2, #3
 80170a8:	2118      	movs	r1, #24
 80170aa:	4824      	ldr	r0, [pc, #144]	; (801713c <gd32_uart_begin+0x228>)
 80170ac:	f7ff f884 	bl	80161b8 <gpio_init>
 80170b0:	2308      	movs	r3, #8
 80170b2:	2203      	movs	r2, #3
 80170b4:	2104      	movs	r1, #4
 80170b6:	4821      	ldr	r0, [pc, #132]	; (801713c <gd32_uart_begin+0x228>)
 80170b8:	f7ff f87e 	bl	80161b8 <gpio_init>
 80170bc:	e7b9      	b.n	8017032 <gd32_uart_begin+0x11e>
 80170be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80170c2:	2203      	movs	r2, #3
 80170c4:	2118      	movs	r1, #24
 80170c6:	4819      	ldr	r0, [pc, #100]	; (801712c <gd32_uart_begin+0x218>)
 80170c8:	f7ff f876 	bl	80161b8 <gpio_init>
 80170cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80170d0:	2203      	movs	r2, #3
 80170d2:	2104      	movs	r1, #4
 80170d4:	4815      	ldr	r0, [pc, #84]	; (801712c <gd32_uart_begin+0x218>)
 80170d6:	e7ef      	b.n	80170b8 <gd32_uart_begin+0x1a4>
 80170d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80170dc:	2203      	movs	r2, #3
 80170de:	2118      	movs	r1, #24
 80170e0:	4812      	ldr	r0, [pc, #72]	; (801712c <gd32_uart_begin+0x218>)
 80170e2:	f7ff f869 	bl	80161b8 <gpio_init>
 80170e6:	2304      	movs	r3, #4
 80170e8:	2203      	movs	r2, #3
 80170ea:	4619      	mov	r1, r3
 80170ec:	4814      	ldr	r0, [pc, #80]	; (8017140 <gd32_uart_begin+0x22c>)
 80170ee:	e7e3      	b.n	80170b8 <gd32_uart_begin+0x1a4>
 80170f0:	2340      	movs	r3, #64	; 0x40
 80170f2:	2203      	movs	r2, #3
 80170f4:	2118      	movs	r1, #24
 80170f6:	480d      	ldr	r0, [pc, #52]	; (801712c <gd32_uart_begin+0x218>)
 80170f8:	f7ff f85e 	bl	80161b8 <gpio_init>
 80170fc:	2380      	movs	r3, #128	; 0x80
 80170fe:	e7e7      	b.n	80170d0 <gd32_uart_begin+0x1bc>
 8017100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017104:	2203      	movs	r2, #3
 8017106:	2118      	movs	r1, #24
 8017108:	480a      	ldr	r0, [pc, #40]	; (8017134 <gd32_uart_begin+0x220>)
 801710a:	f7ff f855 	bl	80161b8 <gpio_init>
 801710e:	2380      	movs	r3, #128	; 0x80
 8017110:	2203      	movs	r2, #3
 8017112:	2104      	movs	r1, #4
 8017114:	4807      	ldr	r0, [pc, #28]	; (8017134 <gd32_uart_begin+0x220>)
 8017116:	e7cf      	b.n	80170b8 <gd32_uart_begin+0x1a4>
 8017118:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801711c:	e7aa      	b.n	8017074 <gd32_uart_begin+0x160>
 801711e:	2100      	movs	r1, #0
 8017120:	e7a8      	b.n	8017074 <gd32_uart_begin+0x160>
 8017122:	bf00      	nop
 8017124:	40007800 	andmi	r7, r0, r0, lsl #16
 8017128:	40013800 	andmi	r3, r1, r0, lsl #16
 801712c:	40011000 	andmi	r1, r1, r0
 8017130:	00140010 	andseq	r0, r4, r0, lsl r0
 8017134:	40011800 	andmi	r1, r1, r0, lsl #16
 8017138:	40010c00 	andmi	r0, r1, r0, lsl #24
 801713c:	40010800 	andmi	r0, r1, r0, lsl #16
 8017140:	40011400 	andmi	r1, r1, r0, lsl #8

08017144 <micros_init()>:
 8017144:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017146:	2400      	movs	r4, #0
 8017148:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801714c:	4d22      	ldr	r5, [pc, #136]	; (80171d8 <micros_init()+0x94>)
 801714e:	f240 6013 	movw	r0, #1555	; 0x613
 8017152:	f7ff f8c9 	bl	80162e8 <rcu_periph_clock_enable>
 8017156:	4628      	mov	r0, r5
 8017158:	f7ff fa3a 	bl	80165d0 <timer_deinit>
 801715c:	4b1f      	ldr	r3, [pc, #124]	; (80171dc <micros_init()+0x98>)
 801715e:	4628      	mov	r0, r5
 8017160:	f8c3 4c24 	str.w	r4, [r3, #3108]	; 0xc24
 8017164:	4669      	mov	r1, sp
 8017166:	9400      	str	r4, [sp, #0]
 8017168:	f8ad 4004 	strh.w	r4, [sp, #4]
 801716c:	9602      	str	r6, [sp, #8]
 801716e:	f8ad 400c 	strh.w	r4, [sp, #12]
 8017172:	f7ff fad3 	bl	801671c <timer_init>
 8017176:	4628      	mov	r0, r5
 8017178:	4621      	mov	r1, r4
 801717a:	f7ff fb7c 	bl	8016876 <timer_master_slave_mode_config>
 801717e:	4628      	mov	r0, r5
 8017180:	2107      	movs	r1, #7
 8017182:	f7ff fb70 	bl	8016866 <timer_slave_mode_select>
 8017186:	2120      	movs	r1, #32
 8017188:	4628      	mov	r0, r5
 801718a:	f7ff fb5c 	bl	8016846 <timer_input_trigger_source_select>
 801718e:	4628      	mov	r0, r5
 8017190:	f7ff fb1c 	bl	80167cc <timer_enable>
 8017194:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8017198:	f240 6014 	movw	r0, #1556	; 0x614
 801719c:	f7ff f8a4 	bl	80162e8 <rcu_periph_clock_enable>
 80171a0:	4628      	mov	r0, r5
 80171a2:	f7ff fa15 	bl	80165d0 <timer_deinit>
 80171a6:	2377      	movs	r3, #119	; 0x77
 80171a8:	626c      	str	r4, [r5, #36]	; 0x24
 80171aa:	4669      	mov	r1, sp
 80171ac:	4628      	mov	r0, r5
 80171ae:	9300      	str	r3, [sp, #0]
 80171b0:	f8ad 4004 	strh.w	r4, [sp, #4]
 80171b4:	9602      	str	r6, [sp, #8]
 80171b6:	f8ad 400c 	strh.w	r4, [sp, #12]
 80171ba:	f7ff faaf 	bl	801671c <timer_init>
 80171be:	4621      	mov	r1, r4
 80171c0:	4628      	mov	r0, r5
 80171c2:	f7ff fb58 	bl	8016876 <timer_master_slave_mode_config>
 80171c6:	2120      	movs	r1, #32
 80171c8:	4628      	mov	r0, r5
 80171ca:	f7ff fb44 	bl	8016856 <timer_master_output_trigger_source_select>
 80171ce:	4628      	mov	r0, r5
 80171d0:	f7ff fafc 	bl	80167cc <timer_enable>
 80171d4:	b004      	add	sp, #16
 80171d6:	bd70      	pop	{r4, r5, r6, pc}
 80171d8:	40014c00 	andmi	r4, r1, r0, lsl #24
 80171dc:	40014000 	andmi	r4, r1, r0

080171e0 <udelay_init()>:
 80171e0:	4a07      	ldr	r2, [pc, #28]	; (8017200 <udelay_init()+0x20>)
 80171e2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 80171e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80171ea:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80171ee:	2200      	movs	r2, #0
 80171f0:	4b04      	ldr	r3, [pc, #16]	; (8017204 <udelay_init()+0x24>)
 80171f2:	605a      	str	r2, [r3, #4]
 80171f4:	681a      	ldr	r2, [r3, #0]
 80171f6:	f042 0201 	orr.w	r2, r2, #1
 80171fa:	601a      	str	r2, [r3, #0]
 80171fc:	4770      	bx	lr
 80171fe:	bf00      	nop
 8017200:	e000ed00 	and	lr, r0, r0, lsl #26
 8017204:	e0001000 	and	r1, r0, r0

08017208 <udelay(unsigned int, unsigned int)>:
 8017208:	2378      	movs	r3, #120	; 0x78
 801720a:	b530      	push	{r4, r5, lr}
 801720c:	4358      	muls	r0, r3
 801720e:	b909      	cbnz	r1, 8017214 <udelay(unsigned int, unsigned int)+0xc>
 8017210:	4b08      	ldr	r3, [pc, #32]	; (8017234 <udelay(unsigned int, unsigned int)+0x2c>)
 8017212:	6859      	ldr	r1, [r3, #4]
 8017214:	2300      	movs	r3, #0
 8017216:	4c07      	ldr	r4, [pc, #28]	; (8017234 <udelay(unsigned int, unsigned int)+0x2c>)
 8017218:	6862      	ldr	r2, [r4, #4]
 801721a:	4291      	cmp	r1, r2
 801721c:	d0fc      	beq.n	8017218 <udelay(unsigned int, unsigned int)+0x10>
 801721e:	bf2a      	itet	cs
 8017220:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 8017224:	189b      	addcc	r3, r3, r2
 8017226:	195b      	addcs	r3, r3, r5
 8017228:	1a5b      	subs	r3, r3, r1
 801722a:	4283      	cmp	r3, r0
 801722c:	d300      	bcc.n	8017230 <udelay(unsigned int, unsigned int)+0x28>
 801722e:	bd30      	pop	{r4, r5, pc}
 8017230:	4611      	mov	r1, r2
 8017232:	e7f1      	b.n	8017218 <udelay(unsigned int, unsigned int)+0x10>
 8017234:	e0001000 	and	r1, r0, r0

08017238 <mac_address_get>:
 8017238:	2102      	movs	r1, #2
 801723a:	4a07      	ldr	r2, [pc, #28]	; (8017258 <mac_address_get+0x20>)
 801723c:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8017240:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 8017244:	7001      	strb	r1, [r0, #0]
 8017246:	7042      	strb	r2, [r0, #1]
 8017248:	0e1a      	lsrs	r2, r3, #24
 801724a:	7082      	strb	r2, [r0, #2]
 801724c:	0c1a      	lsrs	r2, r3, #16
 801724e:	70c2      	strb	r2, [r0, #3]
 8017250:	0a1a      	lsrs	r2, r3, #8
 8017252:	7102      	strb	r2, [r0, #4]
 8017254:	7143      	strb	r3, [r0, #5]
 8017256:	4770      	bx	lr
 8017258:	1ffff000 	svcne	0x00fff000

0801725c <adc_mode_config>:
 801725c:	4b06      	ldr	r3, [pc, #24]	; (8017278 <adc_mode_config+0x1c>)
 801725e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8017262:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8017266:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 801726a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801726e:	4302      	orrs	r2, r0
 8017270:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8017274:	4770      	bx	lr
 8017276:	bf00      	nop
 8017278:	40012000 	andmi	r2, r1, r0

0801727c <adc_special_function_config>:
 801727c:	b510      	push	{r4, lr}
 801727e:	f401 7380 	and.w	r3, r1, #256	; 0x100
 8017282:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 8017286:	f001 0102 	and.w	r1, r1, #2
 801728a:	b17a      	cbz	r2, 80172ac <adc_special_function_config+0x30>
 801728c:	b11b      	cbz	r3, 8017296 <adc_special_function_config+0x1a>
 801728e:	6843      	ldr	r3, [r0, #4]
 8017290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017294:	6043      	str	r3, [r0, #4]
 8017296:	b11c      	cbz	r4, 80172a0 <adc_special_function_config+0x24>
 8017298:	6843      	ldr	r3, [r0, #4]
 801729a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801729e:	6043      	str	r3, [r0, #4]
 80172a0:	b119      	cbz	r1, 80172aa <adc_special_function_config+0x2e>
 80172a2:	6883      	ldr	r3, [r0, #8]
 80172a4:	f043 0302 	orr.w	r3, r3, #2
 80172a8:	6083      	str	r3, [r0, #8]
 80172aa:	bd10      	pop	{r4, pc}
 80172ac:	b11b      	cbz	r3, 80172b6 <adc_special_function_config+0x3a>
 80172ae:	6843      	ldr	r3, [r0, #4]
 80172b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80172b4:	6043      	str	r3, [r0, #4]
 80172b6:	b11c      	cbz	r4, 80172c0 <adc_special_function_config+0x44>
 80172b8:	6843      	ldr	r3, [r0, #4]
 80172ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80172be:	6043      	str	r3, [r0, #4]
 80172c0:	2900      	cmp	r1, #0
 80172c2:	d0f2      	beq.n	80172aa <adc_special_function_config+0x2e>
 80172c4:	6883      	ldr	r3, [r0, #8]
 80172c6:	f023 0302 	bic.w	r3, r3, #2
 80172ca:	e7ed      	b.n	80172a8 <adc_special_function_config+0x2c>

080172cc <adc_data_alignment_config>:
 80172cc:	6883      	ldr	r3, [r0, #8]
 80172ce:	b119      	cbz	r1, 80172d8 <adc_data_alignment_config+0xc>
 80172d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80172d4:	6083      	str	r3, [r0, #8]
 80172d6:	4770      	bx	lr
 80172d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80172dc:	e7fa      	b.n	80172d4 <adc_data_alignment_config+0x8>

080172de <adc_enable>:
 80172de:	6883      	ldr	r3, [r0, #8]
 80172e0:	07db      	lsls	r3, r3, #31
 80172e2:	bf5e      	ittt	pl
 80172e4:	6883      	ldrpl	r3, [r0, #8]
 80172e6:	f043 0301 	orrpl.w	r3, r3, #1
 80172ea:	6083      	strpl	r3, [r0, #8]
 80172ec:	4770      	bx	lr

080172ee <adc_calibration_enable>:
 80172ee:	6883      	ldr	r3, [r0, #8]
 80172f0:	f100 0208 	add.w	r2, r0, #8
 80172f4:	f043 0308 	orr.w	r3, r3, #8
 80172f8:	6083      	str	r3, [r0, #8]
 80172fa:	6813      	ldr	r3, [r2, #0]
 80172fc:	0719      	lsls	r1, r3, #28
 80172fe:	d4fc      	bmi.n	80172fa <adc_calibration_enable+0xc>
 8017300:	6883      	ldr	r3, [r0, #8]
 8017302:	f043 0304 	orr.w	r3, r3, #4
 8017306:	6083      	str	r3, [r0, #8]
 8017308:	6813      	ldr	r3, [r2, #0]
 801730a:	075b      	lsls	r3, r3, #29
 801730c:	d4fc      	bmi.n	8017308 <adc_calibration_enable+0x1a>
 801730e:	4770      	bx	lr

08017310 <adc_tempsensor_vrefint_enable>:
 8017310:	4a03      	ldr	r2, [pc, #12]	; (8017320 <adc_tempsensor_vrefint_enable+0x10>)
 8017312:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 8017316:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801731a:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 801731e:	4770      	bx	lr
 8017320:	40012000 	andmi	r2, r1, r0

08017324 <adc_channel_length_config>:
 8017324:	2901      	cmp	r1, #1
 8017326:	d002      	beq.n	801732e <adc_channel_length_config+0xa>
 8017328:	2902      	cmp	r1, #2
 801732a:	d00c      	beq.n	8017346 <adc_channel_length_config+0x22>
 801732c:	4770      	bx	lr
 801732e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8017330:	3a01      	subs	r2, #1
 8017332:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8017336:	62c3      	str	r3, [r0, #44]	; 0x2c
 8017338:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801733a:	0512      	lsls	r2, r2, #20
 801733c:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 8017340:	431a      	orrs	r2, r3
 8017342:	62c2      	str	r2, [r0, #44]	; 0x2c
 8017344:	4770      	bx	lr
 8017346:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017348:	3a01      	subs	r2, #1
 801734a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801734e:	6383      	str	r3, [r0, #56]	; 0x38
 8017350:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017352:	0512      	lsls	r2, r2, #20
 8017354:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8017358:	431a      	orrs	r2, r3
 801735a:	6382      	str	r2, [r0, #56]	; 0x38
 801735c:	4770      	bx	lr

0801735e <adc_inserted_channel_config>:
 801735e:	b530      	push	{r4, r5, lr}
 8017360:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8017362:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8017364:	f3c4 5401 	ubfx	r4, r4, #20, #2
 8017368:	1a61      	subs	r1, r4, r1
 801736a:	f06f 0404 	mvn.w	r4, #4
 801736e:	4361      	muls	r1, r4
 8017370:	241f      	movs	r4, #31
 8017372:	310f      	adds	r1, #15
 8017374:	408c      	lsls	r4, r1
 8017376:	ea25 0504 	bic.w	r5, r5, r4
 801737a:	fa02 f101 	lsl.w	r1, r2, r1
 801737e:	4329      	orrs	r1, r5
 8017380:	2a09      	cmp	r2, #9
 8017382:	6381      	str	r1, [r0, #56]	; 0x38
 8017384:	d80b      	bhi.n	801739e <adc_inserted_channel_config+0x40>
 8017386:	2407      	movs	r4, #7
 8017388:	6901      	ldr	r1, [r0, #16]
 801738a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801738e:	4094      	lsls	r4, r2
 8017390:	ea21 0104 	bic.w	r1, r1, r4
 8017394:	fa03 f202 	lsl.w	r2, r3, r2
 8017398:	430a      	orrs	r2, r1
 801739a:	6102      	str	r2, [r0, #16]
 801739c:	bd30      	pop	{r4, r5, pc}
 801739e:	2a11      	cmp	r2, #17
 80173a0:	d8fc      	bhi.n	801739c <adc_inserted_channel_config+0x3e>
 80173a2:	2407      	movs	r4, #7
 80173a4:	3a0a      	subs	r2, #10
 80173a6:	68c1      	ldr	r1, [r0, #12]
 80173a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80173ac:	4094      	lsls	r4, r2
 80173ae:	ea21 0104 	bic.w	r1, r1, r4
 80173b2:	4093      	lsls	r3, r2
 80173b4:	430b      	orrs	r3, r1
 80173b6:	60c3      	str	r3, [r0, #12]
 80173b8:	e7f0      	b.n	801739c <adc_inserted_channel_config+0x3e>

080173ba <adc_external_trigger_source_config>:
 80173ba:	2901      	cmp	r1, #1
 80173bc:	d002      	beq.n	80173c4 <adc_external_trigger_source_config+0xa>
 80173be:	2902      	cmp	r1, #2
 80173c0:	d008      	beq.n	80173d4 <adc_external_trigger_source_config+0x1a>
 80173c2:	4770      	bx	lr
 80173c4:	6883      	ldr	r3, [r0, #8]
 80173c6:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80173ca:	6083      	str	r3, [r0, #8]
 80173cc:	6883      	ldr	r3, [r0, #8]
 80173ce:	4313      	orrs	r3, r2
 80173d0:	6083      	str	r3, [r0, #8]
 80173d2:	4770      	bx	lr
 80173d4:	6883      	ldr	r3, [r0, #8]
 80173d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80173da:	e7f6      	b.n	80173ca <adc_external_trigger_source_config+0x10>

080173dc <adc_external_trigger_config>:
 80173dc:	f001 0301 	and.w	r3, r1, #1
 80173e0:	f001 0102 	and.w	r1, r1, #2
 80173e4:	b152      	cbz	r2, 80173fc <adc_external_trigger_config+0x20>
 80173e6:	b11b      	cbz	r3, 80173f0 <adc_external_trigger_config+0x14>
 80173e8:	6883      	ldr	r3, [r0, #8]
 80173ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80173ee:	6083      	str	r3, [r0, #8]
 80173f0:	b119      	cbz	r1, 80173fa <adc_external_trigger_config+0x1e>
 80173f2:	6883      	ldr	r3, [r0, #8]
 80173f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80173f8:	6083      	str	r3, [r0, #8]
 80173fa:	4770      	bx	lr
 80173fc:	b11b      	cbz	r3, 8017406 <adc_external_trigger_config+0x2a>
 80173fe:	6883      	ldr	r3, [r0, #8]
 8017400:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017404:	6083      	str	r3, [r0, #8]
 8017406:	2900      	cmp	r1, #0
 8017408:	d0f7      	beq.n	80173fa <adc_external_trigger_config+0x1e>
 801740a:	6883      	ldr	r3, [r0, #8]
 801740c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8017410:	e7f2      	b.n	80173f8 <adc_external_trigger_config+0x1c>

08017412 <adc_software_trigger_enable>:
 8017412:	07ca      	lsls	r2, r1, #31
 8017414:	bf42      	ittt	mi
 8017416:	6883      	ldrmi	r3, [r0, #8]
 8017418:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 801741c:	6083      	strmi	r3, [r0, #8]
 801741e:	078b      	lsls	r3, r1, #30
 8017420:	bf42      	ittt	mi
 8017422:	6883      	ldrmi	r3, [r0, #8]
 8017424:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8017428:	6083      	strmi	r3, [r0, #8]
 801742a:	4770      	bx	lr

0801742c <enet_delay>:
 801742c:	2300      	movs	r3, #0
 801742e:	b082      	sub	sp, #8
 8017430:	9301      	str	r3, [sp, #4]
 8017432:	9001      	str	r0, [sp, #4]
 8017434:	9b01      	ldr	r3, [sp, #4]
 8017436:	b90b      	cbnz	r3, 801743c <enet_delay+0x10>
 8017438:	b002      	add	sp, #8
 801743a:	4770      	bx	lr
 801743c:	9b01      	ldr	r3, [sp, #4]
 801743e:	3b01      	subs	r3, #1
 8017440:	9301      	str	r3, [sp, #4]
 8017442:	e7f7      	b.n	8017434 <enet_delay+0x8>

08017444 <enet_software_reset>:
 8017444:	4b07      	ldr	r3, [pc, #28]	; (8017464 <enet_software_reset+0x20>)
 8017446:	681a      	ldr	r2, [r3, #0]
 8017448:	f042 0201 	orr.w	r2, r2, #1
 801744c:	601a      	str	r2, [r3, #0]
 801744e:	4a06      	ldr	r2, [pc, #24]	; (8017468 <enet_software_reset+0x24>)
 8017450:	6819      	ldr	r1, [r3, #0]
 8017452:	07c9      	lsls	r1, r1, #31
 8017454:	d501      	bpl.n	801745a <enet_software_reset+0x16>
 8017456:	3a01      	subs	r2, #1
 8017458:	d1fa      	bne.n	8017450 <enet_software_reset+0xc>
 801745a:	6818      	ldr	r0, [r3, #0]
 801745c:	43c0      	mvns	r0, r0
 801745e:	f000 0001 	and.w	r0, r0, #1
 8017462:	4770      	bx	lr
 8017464:	40029000 	andmi	r9, r2, r0
 8017468:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

0801746c <enet_descriptors_chain_init>:
 801746c:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 8017470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017472:	4a19      	ldr	r2, [pc, #100]	; (80174d8 <enet_descriptors_chain_init+0x6c>)
 8017474:	d125      	bne.n	80174c2 <enet_descriptors_chain_init+0x56>
 8017476:	2500      	movs	r5, #0
 8017478:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 801747c:	2002      	movs	r0, #2
 801747e:	4b17      	ldr	r3, [pc, #92]	; (80174dc <enet_descriptors_chain_init+0x70>)
 8017480:	4c17      	ldr	r4, [pc, #92]	; (80174e0 <enet_descriptors_chain_init+0x74>)
 8017482:	6113      	str	r3, [r2, #16]
 8017484:	4a17      	ldr	r2, [pc, #92]	; (80174e4 <enet_descriptors_chain_init+0x78>)
 8017486:	6013      	str	r3, [r2, #0]
 8017488:	2200      	movs	r2, #0
 801748a:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 801748e:	4916      	ldr	r1, [pc, #88]	; (80174e8 <enet_descriptors_chain_init+0x7c>)
 8017490:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8017494:	600a      	str	r2, [r1, #0]
 8017496:	4915      	ldr	r1, [pc, #84]	; (80174ec <enet_descriptors_chain_init+0x80>)
 8017498:	600a      	str	r2, [r1, #0]
 801749a:	f103 0110 	add.w	r1, r3, #16
 801749e:	fb0e 4702 	mla	r7, lr, r2, r4
 80174a2:	f841 7c08 	str.w	r7, [r1, #-8]
 80174a6:	4594      	cmp	ip, r2
 80174a8:	bf94      	ite	ls
 80174aa:	461f      	movls	r7, r3
 80174ac:	460f      	movhi	r7, r1
 80174ae:	3201      	adds	r2, #1
 80174b0:	4290      	cmp	r0, r2
 80174b2:	e941 6504 	strd	r6, r5, [r1, #-16]
 80174b6:	f841 7c04 	str.w	r7, [r1, #-4]
 80174ba:	f101 0110 	add.w	r1, r1, #16
 80174be:	d1ee      	bne.n	801749e <enet_descriptors_chain_init+0x32>
 80174c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174c2:	4b0b      	ldr	r3, [pc, #44]	; (80174f0 <enet_descriptors_chain_init+0x84>)
 80174c4:	f244 55f4 	movw	r5, #17908	; 0x45f4
 80174c8:	60d3      	str	r3, [r2, #12]
 80174ca:	4a0a      	ldr	r2, [pc, #40]	; (80174f4 <enet_descriptors_chain_init+0x88>)
 80174cc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80174d0:	2022      	movs	r0, #34	; 0x22
 80174d2:	4c09      	ldr	r4, [pc, #36]	; (80174f8 <enet_descriptors_chain_init+0x8c>)
 80174d4:	6013      	str	r3, [r2, #0]
 80174d6:	e7d7      	b.n	8017488 <enet_descriptors_chain_init+0x1c>
 80174d8:	40029000 	andmi	r9, r2, r0
 80174dc:	2002a72c 	andcs	sl, r2, ip, lsr #14
 80174e0:	20029b44 	andcs	r9, r2, r4, asr #22
 80174e4:	2001ce7c 	andcs	ip, r1, ip, ror lr
 80174e8:	2001ce70 	andcs	ip, r1, r0, ror lr
 80174ec:	2001ce74 	andcs	ip, r1, r4, ror lr
 80174f0:	20029924 	andcs	r9, r2, r4, lsr #18
 80174f4:	2001ce78 	andcs	ip, r1, r8, ror lr
 80174f8:	2001cebc 			; <UNDEFINED> instruction: 0x2001cebc

080174fc <enet_frame_receive>:
 80174fc:	4a1d      	ldr	r2, [pc, #116]	; (8017574 <enet_frame_receive+0x78>)
 80174fe:	b510      	push	{r4, lr}
 8017500:	6813      	ldr	r3, [r2, #0]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	2b00      	cmp	r3, #0
 8017506:	db33      	blt.n	8017570 <enet_frame_receive+0x74>
 8017508:	b970      	cbnz	r0, 8017528 <enet_frame_receive+0x2c>
 801750a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801750e:	6813      	ldr	r3, [r2, #0]
 8017510:	6019      	str	r1, [r3, #0]
 8017512:	4919      	ldr	r1, [pc, #100]	; (8017578 <enet_frame_receive+0x7c>)
 8017514:	6948      	ldr	r0, [r1, #20]
 8017516:	0604      	lsls	r4, r0, #24
 8017518:	d419      	bmi.n	801754e <enet_frame_receive+0x52>
 801751a:	6859      	ldr	r1, [r3, #4]
 801751c:	0448      	lsls	r0, r1, #17
 801751e:	d51b      	bpl.n	8017558 <enet_frame_receive+0x5c>
 8017520:	68db      	ldr	r3, [r3, #12]
 8017522:	2001      	movs	r0, #1
 8017524:	6013      	str	r3, [r2, #0]
 8017526:	bd10      	pop	{r4, pc}
 8017528:	f403 4403 	and.w	r4, r3, #33536	; 0x8300
 801752c:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 8017530:	d11e      	bne.n	8017570 <enet_frame_receive+0x74>
 8017532:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8017536:	3b04      	subs	r3, #4
 8017538:	428b      	cmp	r3, r1
 801753a:	d819      	bhi.n	8017570 <enet_frame_receive+0x74>
 801753c:	2100      	movs	r1, #0
 801753e:	4299      	cmp	r1, r3
 8017540:	6814      	ldr	r4, [r2, #0]
 8017542:	d2e2      	bcs.n	801750a <enet_frame_receive+0xe>
 8017544:	68a4      	ldr	r4, [r4, #8]
 8017546:	5d0c      	ldrb	r4, [r1, r4]
 8017548:	5444      	strb	r4, [r0, r1]
 801754a:	3101      	adds	r1, #1
 801754c:	e7f7      	b.n	801753e <enet_frame_receive+0x42>
 801754e:	2080      	movs	r0, #128	; 0x80
 8017550:	6148      	str	r0, [r1, #20]
 8017552:	2000      	movs	r0, #0
 8017554:	6088      	str	r0, [r1, #8]
 8017556:	e7e0      	b.n	801751a <enet_frame_receive+0x1e>
 8017558:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 801755c:	4906      	ldr	r1, [pc, #24]	; (8017578 <enet_frame_receive+0x7c>)
 801755e:	bf05      	ittet	eq
 8017560:	3310      	addeq	r3, #16
 8017562:	6809      	ldreq	r1, [r1, #0]
 8017564:	68cb      	ldrne	r3, [r1, #12]
 8017566:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 801756a:	bf08      	it	eq
 801756c:	185b      	addeq	r3, r3, r1
 801756e:	e7d8      	b.n	8017522 <enet_frame_receive+0x26>
 8017570:	2000      	movs	r0, #0
 8017572:	e7d8      	b.n	8017526 <enet_frame_receive+0x2a>
 8017574:	2001ce78 	andcs	ip, r1, r8, ror lr
 8017578:	40029000 	andmi	r9, r2, r0

0801757c <enet_frame_transmit>:
 801757c:	4a1e      	ldr	r2, [pc, #120]	; (80175f8 <enet_frame_transmit+0x7c>)
 801757e:	b530      	push	{r4, r5, lr}
 8017580:	6813      	ldr	r3, [r2, #0]
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	2b00      	cmp	r3, #0
 8017586:	db34      	blt.n	80175f2 <enet_frame_transmit+0x76>
 8017588:	f240 53f4 	movw	r3, #1524	; 0x5f4
 801758c:	4299      	cmp	r1, r3
 801758e:	d830      	bhi.n	80175f2 <enet_frame_transmit+0x76>
 8017590:	b9e8      	cbnz	r0, 80175ce <enet_frame_transmit+0x52>
 8017592:	6813      	ldr	r3, [r2, #0]
 8017594:	4819      	ldr	r0, [pc, #100]	; (80175fc <enet_frame_transmit+0x80>)
 8017596:	6059      	str	r1, [r3, #4]
 8017598:	6819      	ldr	r1, [r3, #0]
 801759a:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 801759e:	6019      	str	r1, [r3, #0]
 80175a0:	6941      	ldr	r1, [r0, #20]
 80175a2:	6944      	ldr	r4, [r0, #20]
 80175a4:	f001 0104 	and.w	r1, r1, #4
 80175a8:	f004 0420 	and.w	r4, r4, #32
 80175ac:	4321      	orrs	r1, r4
 80175ae:	d110      	bne.n	80175d2 <enet_frame_transmit+0x56>
 80175b0:	6819      	ldr	r1, [r3, #0]
 80175b2:	02c8      	lsls	r0, r1, #11
 80175b4:	d511      	bpl.n	80175da <enet_frame_transmit+0x5e>
 80175b6:	68db      	ldr	r3, [r3, #12]
 80175b8:	2001      	movs	r0, #1
 80175ba:	6013      	str	r3, [r2, #0]
 80175bc:	bd30      	pop	{r4, r5, pc}
 80175be:	5cc5      	ldrb	r5, [r0, r3]
 80175c0:	68a4      	ldr	r4, [r4, #8]
 80175c2:	551d      	strb	r5, [r3, r4]
 80175c4:	3301      	adds	r3, #1
 80175c6:	428b      	cmp	r3, r1
 80175c8:	6814      	ldr	r4, [r2, #0]
 80175ca:	d1f8      	bne.n	80175be <enet_frame_transmit+0x42>
 80175cc:	e7e1      	b.n	8017592 <enet_frame_transmit+0x16>
 80175ce:	2300      	movs	r3, #0
 80175d0:	e7f9      	b.n	80175c6 <enet_frame_transmit+0x4a>
 80175d2:	6141      	str	r1, [r0, #20]
 80175d4:	2100      	movs	r1, #0
 80175d6:	6041      	str	r1, [r0, #4]
 80175d8:	e7ea      	b.n	80175b0 <enet_frame_transmit+0x34>
 80175da:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 80175de:	4907      	ldr	r1, [pc, #28]	; (80175fc <enet_frame_transmit+0x80>)
 80175e0:	bf05      	ittet	eq
 80175e2:	3310      	addeq	r3, #16
 80175e4:	6809      	ldreq	r1, [r1, #0]
 80175e6:	690b      	ldrne	r3, [r1, #16]
 80175e8:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 80175ec:	bf08      	it	eq
 80175ee:	185b      	addeq	r3, r3, r1
 80175f0:	e7e2      	b.n	80175b8 <enet_frame_transmit+0x3c>
 80175f2:	2000      	movs	r0, #0
 80175f4:	e7e2      	b.n	80175bc <enet_frame_transmit+0x40>
 80175f6:	bf00      	nop
 80175f8:	2001ce7c 	andcs	ip, r1, ip, ror lr
 80175fc:	40029000 	andmi	r9, r2, r0

08017600 <enet_transmit_checksum_config>:
 8017600:	6803      	ldr	r3, [r0, #0]
 8017602:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8017606:	430b      	orrs	r3, r1
 8017608:	6003      	str	r3, [r0, #0]
 801760a:	4770      	bx	lr

0801760c <enet_mac_address_set>:
 801760c:	888a      	ldrh	r2, [r1, #4]
 801760e:	4b03      	ldr	r3, [pc, #12]	; (801761c <enet_mac_address_set+0x10>)
 8017610:	50c2      	str	r2, [r0, r3]
 8017612:	680a      	ldr	r2, [r1, #0]
 8017614:	3304      	adds	r3, #4
 8017616:	50c2      	str	r2, [r0, r3]
 8017618:	4770      	bx	lr
 801761a:	bf00      	nop
 801761c:	40028040 	andmi	r8, r2, r0, asr #32

08017620 <enet_rx_enable>:
 8017620:	4a05      	ldr	r2, [pc, #20]	; (8017638 <enet_rx_enable+0x18>)
 8017622:	6813      	ldr	r3, [r2, #0]
 8017624:	f043 0304 	orr.w	r3, r3, #4
 8017628:	6013      	str	r3, [r2, #0]
 801762a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801762e:	6993      	ldr	r3, [r2, #24]
 8017630:	f043 0302 	orr.w	r3, r3, #2
 8017634:	6193      	str	r3, [r2, #24]
 8017636:	4770      	bx	lr
 8017638:	40028000 	andmi	r8, r2, r0

0801763c <enet_phy_write_read>:
 801763c:	b530      	push	{r4, r5, lr}
 801763e:	4604      	mov	r4, r0
 8017640:	4d13      	ldr	r5, [pc, #76]	; (8017690 <enet_phy_write_read+0x54>)
 8017642:	0192      	lsls	r2, r2, #6
 8017644:	6928      	ldr	r0, [r5, #16]
 8017646:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 801764a:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 801764e:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 8017652:	4302      	orrs	r2, r0
 8017654:	02c9      	lsls	r1, r1, #11
 8017656:	b289      	uxth	r1, r1
 8017658:	2c02      	cmp	r4, #2
 801765a:	ea42 0204 	orr.w	r2, r2, r4
 801765e:	ea42 0201 	orr.w	r2, r2, r1
 8017662:	bf08      	it	eq
 8017664:	8819      	ldrheq	r1, [r3, #0]
 8017666:	f042 0201 	orr.w	r2, r2, #1
 801766a:	bf08      	it	eq
 801766c:	6169      	streq	r1, [r5, #20]
 801766e:	612a      	str	r2, [r5, #16]
 8017670:	4907      	ldr	r1, [pc, #28]	; (8017690 <enet_phy_write_read+0x54>)
 8017672:	4a08      	ldr	r2, [pc, #32]	; (8017694 <enet_phy_write_read+0x58>)
 8017674:	6908      	ldr	r0, [r1, #16]
 8017676:	07c0      	lsls	r0, r0, #31
 8017678:	d501      	bpl.n	801767e <enet_phy_write_read+0x42>
 801767a:	3a01      	subs	r2, #1
 801767c:	d1fa      	bne.n	8017674 <enet_phy_write_read+0x38>
 801767e:	690a      	ldr	r2, [r1, #16]
 8017680:	43d2      	mvns	r2, r2
 8017682:	f002 0001 	and.w	r0, r2, #1
 8017686:	b90c      	cbnz	r4, 801768c <enet_phy_write_read+0x50>
 8017688:	694a      	ldr	r2, [r1, #20]
 801768a:	801a      	strh	r2, [r3, #0]
 801768c:	bd30      	pop	{r4, r5, pc}
 801768e:	bf00      	nop
 8017690:	40028000 	andmi	r8, r2, r0
 8017694:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08017698 <enet_phy_config>:
 8017698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801769a:	4d22      	ldr	r5, [pc, #136]	; (8017724 <enet_phy_config+0x8c>)
 801769c:	2001      	movs	r0, #1
 801769e:	692c      	ldr	r4, [r5, #16]
 80176a0:	f7fe ff0e 	bl	80164c0 <rcu_clock_freq_get>
 80176a4:	4b20      	ldr	r3, [pc, #128]	; (8017728 <enet_phy_config+0x90>)
 80176a6:	4a21      	ldr	r2, [pc, #132]	; (801772c <enet_phy_config+0x94>)
 80176a8:	4403      	add	r3, r0
 80176aa:	4293      	cmp	r3, r2
 80176ac:	f024 041c 	bic.w	r4, r4, #28
 80176b0:	d21f      	bcs.n	80176f2 <enet_phy_config+0x5a>
 80176b2:	f044 0408 	orr.w	r4, r4, #8
 80176b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80176ba:	612c      	str	r4, [r5, #16]
 80176bc:	2200      	movs	r2, #0
 80176be:	f8ad 3006 	strh.w	r3, [sp, #6]
 80176c2:	2101      	movs	r1, #1
 80176c4:	2002      	movs	r0, #2
 80176c6:	f10d 0306 	add.w	r3, sp, #6
 80176ca:	f7ff ffb7 	bl	801763c <enet_phy_write_read>
 80176ce:	b310      	cbz	r0, 8017716 <enet_phy_config+0x7e>
 80176d0:	2200      	movs	r2, #0
 80176d2:	4817      	ldr	r0, [pc, #92]	; (8017730 <enet_phy_config+0x98>)
 80176d4:	f7ff feaa 	bl	801742c <enet_delay>
 80176d8:	2101      	movs	r1, #1
 80176da:	4610      	mov	r0, r2
 80176dc:	f10d 0306 	add.w	r3, sp, #6
 80176e0:	f7ff ffac 	bl	801763c <enet_phy_write_read>
 80176e4:	b1b8      	cbz	r0, 8017716 <enet_phy_config+0x7e>
 80176e6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80176ea:	43c0      	mvns	r0, r0
 80176ec:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80176f0:	e012      	b.n	8017718 <enet_phy_config+0x80>
 80176f2:	4b10      	ldr	r3, [pc, #64]	; (8017734 <enet_phy_config+0x9c>)
 80176f4:	4a10      	ldr	r2, [pc, #64]	; (8017738 <enet_phy_config+0xa0>)
 80176f6:	4403      	add	r3, r0
 80176f8:	4293      	cmp	r3, r2
 80176fa:	d802      	bhi.n	8017702 <enet_phy_config+0x6a>
 80176fc:	f044 040c 	orr.w	r4, r4, #12
 8017700:	e7d9      	b.n	80176b6 <enet_phy_config+0x1e>
 8017702:	4b0e      	ldr	r3, [pc, #56]	; (801773c <enet_phy_config+0xa4>)
 8017704:	4a0e      	ldr	r2, [pc, #56]	; (8017740 <enet_phy_config+0xa8>)
 8017706:	4403      	add	r3, r0
 8017708:	4293      	cmp	r3, r2
 801770a:	d3d4      	bcc.n	80176b6 <enet_phy_config+0x1e>
 801770c:	4b0d      	ldr	r3, [pc, #52]	; (8017744 <enet_phy_config+0xac>)
 801770e:	4a0e      	ldr	r2, [pc, #56]	; (8017748 <enet_phy_config+0xb0>)
 8017710:	4403      	add	r3, r0
 8017712:	4293      	cmp	r3, r2
 8017714:	d902      	bls.n	801771c <enet_phy_config+0x84>
 8017716:	2000      	movs	r0, #0
 8017718:	b003      	add	sp, #12
 801771a:	bd30      	pop	{r4, r5, pc}
 801771c:	f044 0404 	orr.w	r4, r4, #4
 8017720:	e7c9      	b.n	80176b6 <enet_phy_config+0x1e>
 8017722:	bf00      	nop
 8017724:	40028000 	andmi	r8, r2, r0
 8017728:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 801772c:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8017730:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8017734:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 8017738:	017d783f 	cmneq	sp, pc, lsr r8
 801773c:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 8017740:	02625a00 	rsbeq	r5, r2, #0, 20
 8017744:	fa0a1f00 	blx	829f34c <__exidx_end+0x284bf8>
 8017748:	01312d00 	teqeq	r1, r0, lsl #26

0801774c <enet_init>:
 801774c:	2300      	movs	r3, #0
 801774e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017750:	4604      	mov	r4, r0
 8017752:	460d      	mov	r5, r1
 8017754:	4616      	mov	r6, r2
 8017756:	f8ad 3006 	strh.w	r3, [sp, #6]
 801775a:	f7ff ff9d 	bl	8017698 <enet_phy_config>
 801775e:	2800      	cmp	r0, #0
 8017760:	d039      	beq.n	80177d6 <enet_init+0x8a>
 8017762:	4b3c      	ldr	r3, [pc, #240]	; (8017854 <enet_init+0x108>)
 8017764:	4a3c      	ldr	r2, [pc, #240]	; (8017858 <enet_init+0x10c>)
 8017766:	6819      	ldr	r1, [r3, #0]
 8017768:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 801776c:	400a      	ands	r2, r1
 801776e:	601a      	str	r2, [r3, #0]
 8017770:	2200      	movs	r2, #0
 8017772:	605a      	str	r2, [r3, #4]
 8017774:	609a      	str	r2, [r3, #8]
 8017776:	60da      	str	r2, [r3, #12]
 8017778:	6999      	ldr	r1, [r3, #24]
 801777a:	2c01      	cmp	r4, #1
 801777c:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 8017780:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8017784:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8017788:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 801778c:	6199      	str	r1, [r3, #24]
 801778e:	4933      	ldr	r1, [pc, #204]	; (801785c <enet_init+0x110>)
 8017790:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
 8017794:	61da      	str	r2, [r3, #28]
 8017796:	6988      	ldr	r0, [r1, #24]
 8017798:	4b31      	ldr	r3, [pc, #196]	; (8017860 <enet_init+0x114>)
 801779a:	ea03 0300 	and.w	r3, r3, r0
 801779e:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80177a2:	618b      	str	r3, [r1, #24]
 80177a4:	680b      	ldr	r3, [r1, #0]
 80177a6:	4b2f      	ldr	r3, [pc, #188]	; (8017864 <enet_init+0x118>)
 80177a8:	600b      	str	r3, [r1, #0]
 80177aa:	d01e      	beq.n	80177ea <enet_init+0x9e>
 80177ac:	08e3      	lsrs	r3, r4, #3
 80177ae:	0861      	lsrs	r1, r4, #1
 80177b0:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80177b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80177b8:	430b      	orrs	r3, r1
 80177ba:	f8ad 3006 	strh.w	r3, [sp, #6]
 80177be:	2101      	movs	r1, #1
 80177c0:	2002      	movs	r0, #2
 80177c2:	f10d 0306 	add.w	r3, sp, #6
 80177c6:	f7ff ff39 	bl	801763c <enet_phy_write_read>
 80177ca:	b158      	cbz	r0, 80177e4 <enet_init+0x98>
 80177cc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80177d0:	f7ff fe2c 	bl	801742c <enet_delay>
 80177d4:	e05d      	b.n	8017892 <enet_init+0x146>
 80177d6:	4824      	ldr	r0, [pc, #144]	; (8017868 <enet_init+0x11c>)
 80177d8:	f7ff fe28 	bl	801742c <enet_delay>
 80177dc:	f7ff ff5c 	bl	8017698 <enet_phy_config>
 80177e0:	2800      	cmp	r0, #0
 80177e2:	d1be      	bne.n	8017762 <enet_init+0x16>
 80177e4:	2000      	movs	r0, #0
 80177e6:	b003      	add	sp, #12
 80177e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177ea:	4614      	mov	r4, r2
 80177ec:	4f1f      	ldr	r7, [pc, #124]	; (801786c <enet_init+0x120>)
 80177ee:	2201      	movs	r2, #1
 80177f0:	2000      	movs	r0, #0
 80177f2:	4611      	mov	r1, r2
 80177f4:	f10d 0306 	add.w	r3, sp, #6
 80177f8:	f7ff ff20 	bl	801763c <enet_phy_write_read>
 80177fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017800:	3401      	adds	r4, #1
 8017802:	f002 0204 	and.w	r2, r2, #4
 8017806:	f8ad 2006 	strh.w	r2, [sp, #6]
 801780a:	b912      	cbnz	r2, 8017812 <enet_init+0xc6>
 801780c:	42bc      	cmp	r4, r7
 801780e:	d1ee      	bne.n	80177ee <enet_init+0xa2>
 8017810:	e7e8      	b.n	80177e4 <enet_init+0x98>
 8017812:	42bc      	cmp	r4, r7
 8017814:	d0e6      	beq.n	80177e4 <enet_init+0x98>
 8017816:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801781a:	2101      	movs	r1, #1
 801781c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017820:	2002      	movs	r0, #2
 8017822:	2200      	movs	r2, #0
 8017824:	f7ff ff0a 	bl	801763c <enet_phy_write_read>
 8017828:	2800      	cmp	r0, #0
 801782a:	d0db      	beq.n	80177e4 <enet_init+0x98>
 801782c:	2400      	movs	r4, #0
 801782e:	4f0f      	ldr	r7, [pc, #60]	; (801786c <enet_init+0x120>)
 8017830:	2201      	movs	r2, #1
 8017832:	2000      	movs	r0, #0
 8017834:	4611      	mov	r1, r2
 8017836:	f10d 0306 	add.w	r3, sp, #6
 801783a:	f7ff feff 	bl	801763c <enet_phy_write_read>
 801783e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017842:	3401      	adds	r4, #1
 8017844:	f002 0220 	and.w	r2, r2, #32
 8017848:	f8ad 2006 	strh.w	r2, [sp, #6]
 801784c:	b982      	cbnz	r2, 8017870 <enet_init+0x124>
 801784e:	42bc      	cmp	r4, r7
 8017850:	d1ee      	bne.n	8017830 <enet_init+0xe4>
 8017852:	e7c7      	b.n	80177e4 <enet_init+0x98>
 8017854:	40028000 	andmi	r8, r2, r0
 8017858:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 801785c:	40029000 	andmi	r9, r2, r0
 8017860:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 8017864:	02c16000 	sbceq	r6, r1, #0
 8017868:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 801786c:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8017870:	42bc      	cmp	r4, r7
 8017872:	d0b7      	beq.n	80177e4 <enet_init+0x98>
 8017874:	2101      	movs	r1, #1
 8017876:	2210      	movs	r2, #16
 8017878:	2000      	movs	r0, #0
 801787a:	f7ff fedf 	bl	801763c <enet_phy_write_read>
 801787e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017882:	f3c3 0480 	ubfx	r4, r3, #2, #1
 8017886:	0799      	lsls	r1, r3, #30
 8017888:	ea4f 24c4 	mov.w	r4, r4, lsl #11
 801788c:	d401      	bmi.n	8017892 <enet_init+0x146>
 801788e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8017892:	4b63      	ldr	r3, [pc, #396]	; (8017a20 <enet_init+0x2d4>)
 8017894:	681a      	ldr	r2, [r3, #0]
 8017896:	f422 42b0 	bic.w	r2, r2, #22528	; 0x5800
 801789a:	4314      	orrs	r4, r2
 801789c:	056a      	lsls	r2, r5, #21
 801789e:	601c      	str	r4, [r3, #0]
 80178a0:	d50b      	bpl.n	80178ba <enet_init+0x16e>
 80178a2:	681a      	ldr	r2, [r3, #0]
 80178a4:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 80178a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80178ac:	601a      	str	r2, [r3, #0]
 80178ae:	4a5d      	ldr	r2, [pc, #372]	; (8017a24 <enet_init+0x2d8>)
 80178b0:	6993      	ldr	r3, [r2, #24]
 80178b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80178b6:	431d      	orrs	r5, r3
 80178b8:	6195      	str	r5, [r2, #24]
 80178ba:	4959      	ldr	r1, [pc, #356]	; (8017a20 <enet_init+0x2d4>)
 80178bc:	684b      	ldr	r3, [r1, #4]
 80178be:	431e      	orrs	r6, r3
 80178c0:	4b59      	ldr	r3, [pc, #356]	; (8017a28 <enet_init+0x2dc>)
 80178c2:	604e      	str	r6, [r1, #4]
 80178c4:	681a      	ldr	r2, [r3, #0]
 80178c6:	07d7      	lsls	r7, r2, #31
 80178c8:	d510      	bpl.n	80178ec <enet_init+0x1a0>
 80178ca:	685a      	ldr	r2, [r3, #4]
 80178cc:	680c      	ldr	r4, [r1, #0]
 80178ce:	f002 0080 	and.w	r0, r2, #128	; 0x80
 80178d2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 80178d6:	4320      	orrs	r0, r4
 80178d8:	6008      	str	r0, [r1, #0]
 80178da:	4852      	ldr	r0, [pc, #328]	; (8017a24 <enet_init+0x2d8>)
 80178dc:	0892      	lsrs	r2, r2, #2
 80178de:	6981      	ldr	r1, [r0, #24]
 80178e0:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80178e4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80178e8:	430a      	orrs	r2, r1
 80178ea:	6182      	str	r2, [r0, #24]
 80178ec:	681a      	ldr	r2, [r3, #0]
 80178ee:	0796      	lsls	r6, r2, #30
 80178f0:	d508      	bpl.n	8017904 <enet_init+0x1b8>
 80178f2:	494c      	ldr	r1, [pc, #304]	; (8017a24 <enet_init+0x2d8>)
 80178f4:	6898      	ldr	r0, [r3, #8]
 80178f6:	680a      	ldr	r2, [r1, #0]
 80178f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80178fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8017900:	4302      	orrs	r2, r0
 8017902:	600a      	str	r2, [r1, #0]
 8017904:	681a      	ldr	r2, [r3, #0]
 8017906:	0755      	lsls	r5, r2, #29
 8017908:	d508      	bpl.n	801791c <enet_init+0x1d0>
 801790a:	4946      	ldr	r1, [pc, #280]	; (8017a24 <enet_init+0x2d8>)
 801790c:	68d8      	ldr	r0, [r3, #12]
 801790e:	680a      	ldr	r2, [r1, #0]
 8017910:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 8017914:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8017918:	4302      	orrs	r2, r0
 801791a:	600a      	str	r2, [r1, #0]
 801791c:	681a      	ldr	r2, [r3, #0]
 801791e:	0714      	lsls	r4, r2, #28
 8017920:	d508      	bpl.n	8017934 <enet_init+0x1e8>
 8017922:	4940      	ldr	r1, [pc, #256]	; (8017a24 <enet_init+0x2d8>)
 8017924:	6918      	ldr	r0, [r3, #16]
 8017926:	680a      	ldr	r2, [r1, #0]
 8017928:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801792c:	f022 0202 	bic.w	r2, r2, #2
 8017930:	4302      	orrs	r2, r0
 8017932:	600a      	str	r2, [r1, #0]
 8017934:	681a      	ldr	r2, [r3, #0]
 8017936:	06d0      	lsls	r0, r2, #27
 8017938:	d506      	bpl.n	8017948 <enet_init+0x1fc>
 801793a:	493a      	ldr	r1, [pc, #232]	; (8017a24 <enet_init+0x2d8>)
 801793c:	4a3b      	ldr	r2, [pc, #236]	; (8017a2c <enet_init+0x2e0>)
 801793e:	6988      	ldr	r0, [r1, #24]
 8017940:	4002      	ands	r2, r0
 8017942:	6958      	ldr	r0, [r3, #20]
 8017944:	4302      	orrs	r2, r0
 8017946:	618a      	str	r2, [r1, #24]
 8017948:	681a      	ldr	r2, [r3, #0]
 801794a:	0691      	lsls	r1, r2, #26
 801794c:	d508      	bpl.n	8017960 <enet_init+0x214>
 801794e:	4935      	ldr	r1, [pc, #212]	; (8017a24 <enet_init+0x2d8>)
 8017950:	6998      	ldr	r0, [r3, #24]
 8017952:	698a      	ldr	r2, [r1, #24]
 8017954:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8017958:	f022 0204 	bic.w	r2, r2, #4
 801795c:	4302      	orrs	r2, r0
 801795e:	618a      	str	r2, [r1, #24]
 8017960:	681a      	ldr	r2, [r3, #0]
 8017962:	0652      	lsls	r2, r2, #25
 8017964:	d506      	bpl.n	8017974 <enet_init+0x228>
 8017966:	492e      	ldr	r1, [pc, #184]	; (8017a20 <enet_init+0x2d4>)
 8017968:	69d8      	ldr	r0, [r3, #28]
 801796a:	69ca      	ldr	r2, [r1, #28]
 801796c:	0c52      	lsrs	r2, r2, #17
 801796e:	0452      	lsls	r2, r2, #17
 8017970:	4302      	orrs	r2, r0
 8017972:	61ca      	str	r2, [r1, #28]
 8017974:	681a      	ldr	r2, [r3, #0]
 8017976:	0617      	lsls	r7, r2, #24
 8017978:	d517      	bpl.n	80179aa <enet_init+0x25e>
 801797a:	4c29      	ldr	r4, [pc, #164]	; (8017a20 <enet_init+0x2d4>)
 801797c:	6a1a      	ldr	r2, [r3, #32]
 801797e:	69a0      	ldr	r0, [r4, #24]
 8017980:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 8017984:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 8017988:	0400      	lsls	r0, r0, #16
 801798a:	0c00      	lsrs	r0, r0, #16
 801798c:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8017990:	4301      	orrs	r1, r0
 8017992:	4824      	ldr	r0, [pc, #144]	; (8017a24 <enet_init+0x2d8>)
 8017994:	61a1      	str	r1, [r4, #24]
 8017996:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 801799a:	0a12      	lsrs	r2, r2, #8
 801799c:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 80179a0:	f002 0277 	and.w	r2, r2, #119	; 0x77
 80179a4:	430a      	orrs	r2, r1
 80179a6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 80179aa:	681a      	ldr	r2, [r3, #0]
 80179ac:	05d6      	lsls	r6, r2, #23
 80179ae:	bf42      	ittt	mi
 80179b0:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 80179b2:	4a1b      	ldrmi	r2, [pc, #108]	; (8017a20 <enet_init+0x2d4>)
 80179b4:	6091      	strmi	r1, [r2, #8]
 80179b6:	681a      	ldr	r2, [r3, #0]
 80179b8:	0595      	lsls	r5, r2, #22
 80179ba:	bf42      	ittt	mi
 80179bc:	4a18      	ldrmi	r2, [pc, #96]	; (8017a20 <enet_init+0x2d4>)
 80179be:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 80179c0:	60d1      	strmi	r1, [r2, #12]
 80179c2:	681a      	ldr	r2, [r3, #0]
 80179c4:	0554      	lsls	r4, r2, #21
 80179c6:	d508      	bpl.n	80179da <enet_init+0x28e>
 80179c8:	4915      	ldr	r1, [pc, #84]	; (8017a20 <enet_init+0x2d4>)
 80179ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80179cc:	684a      	ldr	r2, [r1, #4]
 80179ce:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 80179d2:	f022 0206 	bic.w	r2, r2, #6
 80179d6:	4302      	orrs	r2, r0
 80179d8:	604a      	str	r2, [r1, #4]
 80179da:	681a      	ldr	r2, [r3, #0]
 80179dc:	0510      	lsls	r0, r2, #20
 80179de:	d508      	bpl.n	80179f2 <enet_init+0x2a6>
 80179e0:	490f      	ldr	r1, [pc, #60]	; (8017a20 <enet_init+0x2d4>)
 80179e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80179e4:	680a      	ldr	r2, [r1, #0]
 80179e6:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 80179ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80179ee:	4302      	orrs	r2, r0
 80179f0:	600a      	str	r2, [r1, #0]
 80179f2:	681a      	ldr	r2, [r3, #0]
 80179f4:	04d1      	lsls	r1, r2, #19
 80179f6:	d506      	bpl.n	8017a06 <enet_init+0x2ba>
 80179f8:	4909      	ldr	r1, [pc, #36]	; (8017a20 <enet_init+0x2d4>)
 80179fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80179fc:	680a      	ldr	r2, [r1, #0]
 80179fe:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8017a02:	4302      	orrs	r2, r0
 8017a04:	600a      	str	r2, [r1, #0]
 8017a06:	681a      	ldr	r2, [r3, #0]
 8017a08:	0492      	lsls	r2, r2, #18
 8017a0a:	d506      	bpl.n	8017a1a <enet_init+0x2ce>
 8017a0c:	4904      	ldr	r1, [pc, #16]	; (8017a20 <enet_init+0x2d4>)
 8017a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a10:	680a      	ldr	r2, [r1, #0]
 8017a12:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 8017a16:	4313      	orrs	r3, r2
 8017a18:	600b      	str	r3, [r1, #0]
 8017a1a:	2001      	movs	r0, #1
 8017a1c:	e6e3      	b.n	80177e6 <enet_init+0x9a>
 8017a1e:	bf00      	nop
 8017a20:	40028000 	andmi	r8, r2, r0
 8017a24:	40029000 	andmi	r9, r2, r0
 8017a28:	2001ce80 	andcs	ip, r1, r0, lsl #29
 8017a2c:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c

08017a30 <enet_txfifo_flush>:
 8017a30:	4b06      	ldr	r3, [pc, #24]	; (8017a4c <enet_txfifo_flush+0x1c>)
 8017a32:	4807      	ldr	r0, [pc, #28]	; (8017a50 <enet_txfifo_flush+0x20>)
 8017a34:	699a      	ldr	r2, [r3, #24]
 8017a36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8017a3a:	619a      	str	r2, [r3, #24]
 8017a3c:	699a      	ldr	r2, [r3, #24]
 8017a3e:	02d2      	lsls	r2, r2, #11
 8017a40:	d502      	bpl.n	8017a48 <enet_txfifo_flush+0x18>
 8017a42:	3801      	subs	r0, #1
 8017a44:	d1fa      	bne.n	8017a3c <enet_txfifo_flush+0xc>
 8017a46:	4770      	bx	lr
 8017a48:	2001      	movs	r0, #1
 8017a4a:	4770      	bx	lr
 8017a4c:	40029000 	andmi	r9, r2, r0
 8017a50:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08017a54 <enet_tx_enable>:
 8017a54:	4a06      	ldr	r2, [pc, #24]	; (8017a70 <enet_tx_enable+0x1c>)
 8017a56:	b508      	push	{r3, lr}
 8017a58:	6813      	ldr	r3, [r2, #0]
 8017a5a:	f043 0308 	orr.w	r3, r3, #8
 8017a5e:	6013      	str	r3, [r2, #0]
 8017a60:	f7ff ffe6 	bl	8017a30 <enet_txfifo_flush>
 8017a64:	4a03      	ldr	r2, [pc, #12]	; (8017a74 <enet_tx_enable+0x20>)
 8017a66:	6993      	ldr	r3, [r2, #24]
 8017a68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017a6c:	6193      	str	r3, [r2, #24]
 8017a6e:	bd08      	pop	{r3, pc}
 8017a70:	40028000 	andmi	r8, r2, r0
 8017a74:	40029000 	andmi	r9, r2, r0

08017a78 <enet_enable>:
 8017a78:	b508      	push	{r3, lr}
 8017a7a:	f7ff ffeb 	bl	8017a54 <enet_tx_enable>
 8017a7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017a82:	f7ff bdcd 	b.w	8017620 <enet_rx_enable>

08017a86 <enet_desc_information_get>:
 8017a86:	2905      	cmp	r1, #5
 8017a88:	d817      	bhi.n	8017aba <enet_desc_information_get+0x34>
 8017a8a:	e8df f001 	tbb	[pc, r1]
 8017a8e:	03091012 	movweq	r1, #36882	; 0x9012
 8017a92:	68401007 	stmdavs	r0, {r0, r1, r2, ip}^
 8017a96:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017a9a:	4770      	bx	lr
 8017a9c:	88c0      	ldrh	r0, [r0, #6]
 8017a9e:	e7fa      	b.n	8017a96 <enet_desc_information_get+0x10>
 8017aa0:	8840      	ldrh	r0, [r0, #2]
 8017aa2:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8017aa6:	2804      	cmp	r0, #4
 8017aa8:	d90a      	bls.n	8017ac0 <enet_desc_information_get+0x3a>
 8017aaa:	3804      	subs	r0, #4
 8017aac:	4770      	bx	lr
 8017aae:	6880      	ldr	r0, [r0, #8]
 8017ab0:	4770      	bx	lr
 8017ab2:	6800      	ldr	r0, [r0, #0]
 8017ab4:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8017ab8:	4770      	bx	lr
 8017aba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017abe:	4770      	bx	lr
 8017ac0:	2000      	movs	r0, #0
 8017ac2:	4770      	bx	lr

08017ac4 <enet_rxframe_drop>:
 8017ac4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8017ac8:	4814      	ldr	r0, [pc, #80]	; (8017b1c <enet_rxframe_drop+0x58>)
 8017aca:	b510      	push	{r4, lr}
 8017acc:	6802      	ldr	r2, [r0, #0]
 8017ace:	4914      	ldr	r1, [pc, #80]	; (8017b20 <enet_rxframe_drop+0x5c>)
 8017ad0:	6854      	ldr	r4, [r2, #4]
 8017ad2:	6013      	str	r3, [r2, #0]
 8017ad4:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8017ad8:	680b      	ldr	r3, [r1, #0]
 8017ada:	d009      	beq.n	8017af0 <enet_rxframe_drop+0x2c>
 8017adc:	b12b      	cbz	r3, 8017aea <enet_rxframe_drop+0x26>
 8017ade:	68da      	ldr	r2, [r3, #12]
 8017ae0:	6002      	str	r2, [r0, #0]
 8017ae2:	681a      	ldr	r2, [r3, #0]
 8017ae4:	b1ba      	cbz	r2, 8017b16 <enet_rxframe_drop+0x52>
 8017ae6:	600a      	str	r2, [r1, #0]
 8017ae8:	bd10      	pop	{r4, pc}
 8017aea:	68d3      	ldr	r3, [r2, #12]
 8017aec:	6003      	str	r3, [r0, #0]
 8017aee:	e7fb      	b.n	8017ae8 <enet_rxframe_drop+0x24>
 8017af0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8017af4:	4c0b      	ldr	r4, [pc, #44]	; (8017b24 <enet_rxframe_drop+0x60>)
 8017af6:	d006      	beq.n	8017b06 <enet_rxframe_drop+0x42>
 8017af8:	68e2      	ldr	r2, [r4, #12]
 8017afa:	6002      	str	r2, [r0, #0]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d0f3      	beq.n	8017ae8 <enet_rxframe_drop+0x24>
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	600b      	str	r3, [r1, #0]
 8017b04:	e7f0      	b.n	8017ae8 <enet_rxframe_drop+0x24>
 8017b06:	6824      	ldr	r4, [r4, #0]
 8017b08:	3210      	adds	r2, #16
 8017b0a:	f3c4 0484 	ubfx	r4, r4, #2, #5
 8017b0e:	4422      	add	r2, r4
 8017b10:	6002      	str	r2, [r0, #0]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d0e8      	beq.n	8017ae8 <enet_rxframe_drop+0x24>
 8017b16:	3310      	adds	r3, #16
 8017b18:	e7f3      	b.n	8017b02 <enet_rxframe_drop+0x3e>
 8017b1a:	bf00      	nop
 8017b1c:	2001ce78 	andcs	ip, r1, r8, ror lr
 8017b20:	2001ce70 	andcs	ip, r1, r0, ror lr
 8017b24:	40029000 	andmi	r9, r2, r0

08017b28 <enet_rxframe_size_get>:
 8017b28:	b508      	push	{r3, lr}
 8017b2a:	4b0c      	ldr	r3, [pc, #48]	; (8017b5c <enet_rxframe_size_get+0x34>)
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	6818      	ldr	r0, [r3, #0]
 8017b30:	2800      	cmp	r0, #0
 8017b32:	db10      	blt.n	8017b56 <enet_rxframe_size_get+0x2e>
 8017b34:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
 8017b38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017b3c:	d003      	beq.n	8017b46 <enet_rxframe_size_get+0x1e>
 8017b3e:	f7ff ffc1 	bl	8017ac4 <enet_rxframe_drop>
 8017b42:	2001      	movs	r0, #1
 8017b44:	bd08      	pop	{r3, pc}
 8017b46:	f000 0321 	and.w	r3, r0, #33	; 0x21
 8017b4a:	2b21      	cmp	r3, #33	; 0x21
 8017b4c:	d0f7      	beq.n	8017b3e <enet_rxframe_size_get+0x16>
 8017b4e:	f3c0 400d 	ubfx	r0, r0, #16, #14
 8017b52:	3804      	subs	r0, #4
 8017b54:	e7f6      	b.n	8017b44 <enet_rxframe_size_get+0x1c>
 8017b56:	2000      	movs	r0, #0
 8017b58:	e7f4      	b.n	8017b44 <enet_rxframe_size_get+0x1c>
 8017b5a:	bf00      	nop
 8017b5c:	2001ce78 	andcs	ip, r1, r8, ror lr

08017b60 <enet_initpara_reset>:
 8017b60:	2200      	movs	r2, #0
 8017b62:	4b08      	ldr	r3, [pc, #32]	; (8017b84 <enet_initpara_reset+0x24>)
 8017b64:	e9c3 2200 	strd	r2, r2, [r3]
 8017b68:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8017b6c:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8017b70:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8017b74:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8017b78:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8017b7c:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 8017b80:	639a      	str	r2, [r3, #56]	; 0x38
 8017b82:	4770      	bx	lr
 8017b84:	2001ce80 	andcs	ip, r1, r0, lsl #29

08017b88 <enet_deinit>:
 8017b88:	b508      	push	{r3, lr}
 8017b8a:	f640 200e 	movw	r0, #2574	; 0xa0e
 8017b8e:	f7fe fbc6 	bl	801631e <rcu_periph_reset_enable>
 8017b92:	f640 200e 	movw	r0, #2574	; 0xa0e
 8017b96:	f7fe fbc4 	bl	8016322 <rcu_periph_reset_disable>
 8017b9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017b9e:	f7ff bfdf 	b.w	8017b60 <enet_initpara_reset>
	...

08017ba4 <i2c_clock_config>:
 8017ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ba6:	4605      	mov	r5, r0
 8017ba8:	2002      	movs	r0, #2
 8017baa:	460c      	mov	r4, r1
 8017bac:	4617      	mov	r7, r2
 8017bae:	f7fe fc87 	bl	80164c0 <rcu_clock_freq_get>
 8017bb2:	4603      	mov	r3, r0
 8017bb4:	4828      	ldr	r0, [pc, #160]	; (8017c58 <i2c_clock_config+0xb4>)
 8017bb6:	4a29      	ldr	r2, [pc, #164]	; (8017c5c <i2c_clock_config+0xb8>)
 8017bb8:	fbb3 f0f0 	udiv	r0, r3, r0
 8017bbc:	4293      	cmp	r3, r2
 8017bbe:	bf94      	ite	ls
 8017bc0:	4601      	movls	r1, r0
 8017bc2:	213f      	movhi	r1, #63	; 0x3f
 8017bc4:	686e      	ldr	r6, [r5, #4]
 8017bc6:	4a26      	ldr	r2, [pc, #152]	; (8017c60 <i2c_clock_config+0xbc>)
 8017bc8:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8017bcc:	430e      	orrs	r6, r1
 8017bce:	4294      	cmp	r4, r2
 8017bd0:	606e      	str	r6, [r5, #4]
 8017bd2:	d816      	bhi.n	8017c02 <i2c_clock_config+0x5e>
 8017bd4:	3001      	adds	r0, #1
 8017bd6:	283e      	cmp	r0, #62	; 0x3e
 8017bd8:	d90d      	bls.n	8017bf6 <i2c_clock_config+0x52>
 8017bda:	223f      	movs	r2, #63	; 0x3f
 8017bdc:	622a      	str	r2, [r5, #32]
 8017bde:	0064      	lsls	r4, r4, #1
 8017be0:	fbb3 f4f4 	udiv	r4, r3, r4
 8017be4:	2c04      	cmp	r4, #4
 8017be6:	bf38      	it	cc
 8017be8:	2404      	movcc	r4, #4
 8017bea:	69ea      	ldr	r2, [r5, #28]
 8017bec:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8017bf0:	4314      	orrs	r4, r2
 8017bf2:	61ec      	str	r4, [r5, #28]
 8017bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bf6:	2802      	cmp	r0, #2
 8017bf8:	d801      	bhi.n	8017bfe <i2c_clock_config+0x5a>
 8017bfa:	2202      	movs	r2, #2
 8017bfc:	e7ee      	b.n	8017bdc <i2c_clock_config+0x38>
 8017bfe:	6228      	str	r0, [r5, #32]
 8017c00:	e7ed      	b.n	8017bde <i2c_clock_config+0x3a>
 8017c02:	4a18      	ldr	r2, [pc, #96]	; (8017c64 <i2c_clock_config+0xc0>)
 8017c04:	4294      	cmp	r4, r2
 8017c06:	d8f5      	bhi.n	8017bf4 <i2c_clock_config+0x50>
 8017c08:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8017c0c:	4351      	muls	r1, r2
 8017c0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017c12:	fbb1 f1f2 	udiv	r1, r1, r2
 8017c16:	3101      	adds	r1, #1
 8017c18:	6229      	str	r1, [r5, #32]
 8017c1a:	b9a7      	cbnz	r7, 8017c46 <i2c_clock_config+0xa2>
 8017c1c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017c20:	fbb3 f4f4 	udiv	r4, r3, r4
 8017c24:	69eb      	ldr	r3, [r5, #28]
 8017c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017c2a:	61eb      	str	r3, [r5, #28]
 8017c2c:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8017c30:	b90b      	cbnz	r3, 8017c36 <i2c_clock_config+0x92>
 8017c32:	f044 0401 	orr.w	r4, r4, #1
 8017c36:	69eb      	ldr	r3, [r5, #28]
 8017c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017c3c:	61eb      	str	r3, [r5, #28]
 8017c3e:	69eb      	ldr	r3, [r5, #28]
 8017c40:	4323      	orrs	r3, r4
 8017c42:	61eb      	str	r3, [r5, #28]
 8017c44:	e7d6      	b.n	8017bf4 <i2c_clock_config+0x50>
 8017c46:	2219      	movs	r2, #25
 8017c48:	4354      	muls	r4, r2
 8017c4a:	fbb3 f4f4 	udiv	r4, r3, r4
 8017c4e:	69eb      	ldr	r3, [r5, #28]
 8017c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017c54:	e7e9      	b.n	8017c2a <i2c_clock_config+0x86>
 8017c56:	bf00      	nop
 8017c58:	000f4240 	andeq	r4, pc, r0, asr #4
 8017c5c:	03c14dbf 	biceq	r4, r1, #12224	; 0x2fc0
 8017c60:	000186a0 	andeq	r8, r1, r0, lsr #13
 8017c64:	00061a80 	andeq	r1, r6, r0, lsl #21

08017c68 <i2c_ack_config>:
 8017c68:	6803      	ldr	r3, [r0, #0]
 8017c6a:	2901      	cmp	r1, #1
 8017c6c:	bf0c      	ite	eq
 8017c6e:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 8017c72:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8017c76:	6003      	str	r3, [r0, #0]
 8017c78:	4770      	bx	lr

08017c7a <i2c_ackpos_config>:
 8017c7a:	6803      	ldr	r3, [r0, #0]
 8017c7c:	b919      	cbnz	r1, 8017c86 <i2c_ackpos_config+0xc>
 8017c7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017c82:	6003      	str	r3, [r0, #0]
 8017c84:	4770      	bx	lr
 8017c86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017c8a:	e7fa      	b.n	8017c82 <i2c_ackpos_config+0x8>

08017c8c <i2c_master_addressing>:
 8017c8c:	3202      	adds	r2, #2
 8017c8e:	bf0c      	ite	eq
 8017c90:	f021 0101 	biceq.w	r1, r1, #1
 8017c94:	f041 0101 	orrne.w	r1, r1, #1
 8017c98:	6101      	str	r1, [r0, #16]
 8017c9a:	4770      	bx	lr

08017c9c <i2c_enable>:
 8017c9c:	6803      	ldr	r3, [r0, #0]
 8017c9e:	f043 0301 	orr.w	r3, r3, #1
 8017ca2:	6003      	str	r3, [r0, #0]
 8017ca4:	4770      	bx	lr

08017ca6 <i2c_start_on_bus>:
 8017ca6:	6803      	ldr	r3, [r0, #0]
 8017ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017cac:	6003      	str	r3, [r0, #0]
 8017cae:	4770      	bx	lr

08017cb0 <i2c_stop_on_bus>:
 8017cb0:	6803      	ldr	r3, [r0, #0]
 8017cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017cb6:	6003      	str	r3, [r0, #0]
 8017cb8:	4770      	bx	lr

08017cba <i2c_data_transmit>:
 8017cba:	6101      	str	r1, [r0, #16]
 8017cbc:	4770      	bx	lr

08017cbe <i2c_data_receive>:
 8017cbe:	6900      	ldr	r0, [r0, #16]
 8017cc0:	b2c0      	uxtb	r0, r0
 8017cc2:	4770      	bx	lr

08017cc4 <i2c_flag_get>:
 8017cc4:	098b      	lsrs	r3, r1, #6
 8017cc6:	581a      	ldr	r2, [r3, r0]
 8017cc8:	2301      	movs	r3, #1
 8017cca:	f001 011f 	and.w	r1, r1, #31
 8017cce:	408b      	lsls	r3, r1
 8017cd0:	4213      	tst	r3, r2
 8017cd2:	bf14      	ite	ne
 8017cd4:	2001      	movne	r0, #1
 8017cd6:	2000      	moveq	r0, #0
 8017cd8:	4770      	bx	lr

08017cda <i2c_flag_clear>:
 8017cda:	f240 5301 	movw	r3, #1281	; 0x501
 8017cde:	4299      	cmp	r1, r3
 8017ce0:	b510      	push	{r4, lr}
 8017ce2:	d102      	bne.n	8017cea <i2c_flag_clear+0x10>
 8017ce4:	6943      	ldr	r3, [r0, #20]
 8017ce6:	6983      	ldr	r3, [r0, #24]
 8017ce8:	bd10      	pop	{r4, pc}
 8017cea:	2201      	movs	r2, #1
 8017cec:	098c      	lsrs	r4, r1, #6
 8017cee:	5823      	ldr	r3, [r4, r0]
 8017cf0:	f001 011f 	and.w	r1, r1, #31
 8017cf4:	408a      	lsls	r2, r1
 8017cf6:	ea23 0302 	bic.w	r3, r3, r2
 8017cfa:	5023      	str	r3, [r4, r0]
 8017cfc:	e7f4      	b.n	8017ce8 <i2c_flag_clear+0xe>
	...

08017d00 <__popcountsi2>:
 8017d00:	0843      	lsrs	r3, r0, #1
 8017d02:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8017d06:	1ac0      	subs	r0, r0, r3
 8017d08:	0883      	lsrs	r3, r0, #2
 8017d0a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8017d0e:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8017d12:	4418      	add	r0, r3
 8017d14:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8017d18:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8017d1c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8017d20:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8017d24:	0e00      	lsrs	r0, r0, #24
 8017d26:	4770      	bx	lr

Disassembly of section .rodata:

08017d28 <vtable for DisplayHandler-0xfc>:
 8017d28:	00000003 	andeq	r0, r0, r3
 8017d2c:	000000aa 	andeq	r0, r0, sl, lsr #1
 8017d30:	00000006 	andeq	r0, r0, r6
 8017d34:	00000000 	andeq	r0, r0, r0
 8017d38:	01ff0000 	mvnseq	r0, r0
 8017d3c:	00000001 	andeq	r0, r0, r1
 8017d40:	00000001 	andeq	r0, r0, r1
 8017d44:	00000001 	andeq	r0, r0, r1
 8017d48:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8017d4c:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8017d58:	03020100 	movweq	r0, #8448	; 0x2100
 8017d5c:	08070604 	stmdaeq	r7, {r2, r9, sl}
 8017d60:	00000009 	andeq	r0, r0, r9
 8017d64:	03020100 	movweq	r0, #8448	; 0x2100
 8017d68:	3a732504 	bcc	9ce1180 <__exidx_end+0x1cc6a2c>
 8017d6c:	31007525 	tstcc	r0, r5, lsr #10
 8017d70:	36353a37 			; <UNDEFINED> instruction: 0x36353a37
 8017d74:	0036353a 	eorseq	r3, r6, sl, lsr r5
 8017d78:	2072614d 	rsbscs	r6, r2, sp, asr #2
 8017d7c:	32203931 	eorcc	r3, r0, #802816	; 0xc4000
 8017d80:	00323230 	eorseq	r3, r2, r0, lsr r2
 8017d84:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8017d88:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8017d8c:	5b1b2034 	blpl	86dfe64 <__exidx_end+0x6c5710>
 8017d90:	506d3233 	rsbpl	r3, sp, r3, lsr r2
 8017d94:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 8017d98:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8017d9c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 8017bd4 <i2c_clock_config+0x30>
 8017da0:	2072656c 	rsbscs	r6, r2, ip, ror #10
 8017da4:	2078387b 	rsbscs	r3, r8, fp, ror r8
 8017da8:	6e552034 	mrcvs	0, 2, r2, cr5, cr4, {1}
 8017dac:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8017db0:	7d736573 	cfldr64vc	mvdx6, [r3, #-460]!	; 0xfffffe34
 8017db4:	37335b1b 			; <UNDEFINED> instruction: 0x37335b1b
 8017db8:	5f2e006d 	svcpl	0x002e006d
 8017dbc:	70746674 	rsbsvc	r6, r4, r4, ror r6
 8017dc0:	685f2e00 	ldmdavs	pc, {r9, sl, fp, sp}^	; <UNPREDICTABLE>
 8017dc4:	00707474 	rsbseq	r7, r0, r4, ror r4
 8017dc8:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8017dcc:	7472413d 	ldrbtvc	r4, [r2], #-317	; 0xfffffec3
 8017dd0:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 8017dd4:	78695020 	stmdavc	r9!, {r5, ip, lr}^
 8017dd8:	41006c65 	tstmi	r0, r5, ror #24
 8017ddc:	4e2d7472 	mcrmi	4, 1, r7, cr13, cr2, {3}
 8017de0:	50207465 	eorpl	r7, r0, r5, ror #8
 8017de4:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 8017de8:	2d642520 	cfstr64cs	mvdx2, [r4, #-128]!	; 0xffffff80
 8017dec:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 8017df0:	44470064 	strbmi	r0, [r7], #-100	; 0xffffff9c
 8017df4:	32463233 	subcc	r3, r6, #805306371	; 0x30000003
 8017df8:	20523730 	subscs	r3, r2, r0, lsr r7
 8017dfc:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8017e00:	7241006c 	subvc	r0, r1, #108	; 0x6c
 8017e04:	74654e74 	strbtvc	r4, [r5], #-3700	; 0xfffff18c
 8017e08:	78695020 	stmdavc	r9!, {r5, ip, lr}^
 8017e0c:	38206c65 	stmdacc	r0!, {r0, r2, r5, r6, sl, fp, sp, lr}
 8017e10:	7864253a 	stmdavc	r4!, {r1, r3, r4, r5, r8, sl, sp}^
 8017e14:	25006425 	strcs	r6, [r0, #-1061]	; 0xfffffbdb
 8017e18:	64253a73 	strtvs	r3, [r5], #-2675	; 0xfffff58d
 8017e1c:	64254720 	strtvs	r4, [r5], #-1824	; 0xfffff8e0
 8017e20:	00732520 	rsbseq	r2, r3, r0, lsr #10

08017e24 <vtable for DisplayHandler>:
	...
 8017e2c:	080085d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, sl, pc}
 8017e30:	08008661 	stmdaeq	r0, {r0, r5, r6, r9, sl, pc}
 8017e34:	08008745 	stmdaeq	r0, {r0, r2, r6, r8, r9, sl, pc}

08017e38 <vtable for DisplayUdfHandler>:
	...
 8017e40:	080085db 	stmdaeq	r0, {r0, r1, r3, r4, r6, r7, r8, sl, pc}
 8017e44:	0800866d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, pc}
 8017e48:	08008701 	stmdaeq	r0, {r0, r8, r9, sl, pc}
 8017e4c:	080085dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sl, pc}
 8017e50:	080086ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r9, sl, pc}
 8017e54:	080086d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, pc}
 8017e58:	080086c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sl, pc}
 8017e5c:	080086b1 	stmdaeq	r0, {r0, r4, r5, r7, r9, sl, pc}
 8017e60:	0800869d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, sl, pc}

08017e64 <vtable for ArtNetTriggerHandler>:
	...
 8017e6c:	080085df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r8, sl, pc}
 8017e70:	08008679 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sl, pc}
 8017e74:	08008a15 	stmdaeq	r0, {r0, r2, r4, r9, fp, pc}

08017e78 <vtable for PixelDmxStartStop>:
	...
 8017e80:	080085e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, sl, pc}
 8017e84:	08008685 	stmdaeq	r0, {r0, r2, r7, r9, sl, pc}
 8017e88:	080085e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, sl, pc}
 8017e8c:	080085f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl, pc}

08017e90 <vtable for RDMNetDevice>:
	...
 8017e98:	08008795 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, sl, pc}
 8017e9c:	080087bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, r9, sl, pc}
 8017ea0:	0800d5e3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r8, sl, ip, lr, pc}
 8017ea4:	0800d5e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, sl, ip, lr, pc}
 8017ea8:	08008605 	stmdaeq	r0, {r0, r2, r9, sl, pc}
 8017eac:	08008619 	stmdaeq	r0, {r0, r3, r4, r9, sl, pc}
 8017eb0:	08008715 	stmdaeq	r0, {r0, r2, r4, r8, r9, sl, pc}
 8017eb4:	ffffff34 			; <UNDEFINED> instruction: 0xffffff34
 8017eb8:	00000000 	andeq	r0, r0, r0
 8017ebc:	080087b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, sl, pc}
 8017ec0:	080087cf 	stmdaeq	r0, {r0, r1, r2, r3, r6, r7, r8, r9, sl, pc}
 8017ec4:	08008611 	stmdaeq	r0, {r0, r4, r9, sl, pc}
 8017ec8:	08008629 	stmdaeq	r0, {r0, r3, r5, r9, sl, pc}
 8017ecc:	08008729 	stmdaeq	r0, {r0, r3, r5, r8, r9, sl, pc}

08017ed0 <vtable for FactoryDefaults>:
	...
 8017ed8:	08008631 	stmdaeq	r0, {r0, r4, r5, r9, sl, pc}
 8017edc:	08008691 	stmdaeq	r0, {r0, r4, r7, r9, sl, pc}
 8017ee0:	08008ac9 	stmdaeq	r0, {r0, r3, r6, r7, r9, fp, pc}

08017ee4 <vtable for Reboot>:
	...
 8017eec:	08008633 	stmdaeq	r0, {r0, r1, r4, r5, r9, sl, pc}
 8017ef0:	08008655 	stmdaeq	r0, {r0, r2, r4, r6, r9, sl, pc}
 8017ef4:	08008635 	stmdaeq	r0, {r0, r2, r4, r5, r9, sl, pc}

08017ef8 <CSWTCH.87>:
 8017ef8:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 8017efc:	 			; <UNDEFINED> instruction: 0x312e3146

08017efd <SOFTWARE_VERSION>:
 8017efd:	00312e31 	eorseq	r2, r1, r1, lsr lr

08017f01 <SOFTWARE_VERSION>:
 8017f01:	00312e31 	eorseq	r2, r1, r1, lsr lr
 8017f05:	6e552020 	cdpvs	0, 5, cr2, cr5, cr0, {1}
 8017f09:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8017f0d:	20736573 	rsbscs	r6, r3, r3, ror r5
 8017f11:	20657261 	rsbcs	r7, r5, r1, ror #4
 8017f15:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 8017f19:	20646570 	rsbcs	r6, r4, r0, ror r5
 8017f1d:	000a312b 	andeq	r3, sl, fp, lsr #2
 8017f21:	 	andeq	r0, r0, r0

08017f24 <vtable for ArtNet4Node>:
	...
 8017f2c:	08009b25 	stmdaeq	r0, {r0, r2, r5, r8, r9, fp, ip, pc}
 8017f30:	08009c19 	stmdaeq	r0, {r0, r3, r4, sl, fp, ip, pc}
 8017f34:	08009ac9 	stmdaeq	r0, {r0, r3, r6, r7, r9, fp, ip, pc}
 8017f38:	08009b45 	stmdaeq	r0, {r0, r2, r6, r8, r9, fp, ip, pc}
 8017f3c:	08009c2b 	stmdaeq	r0, {r0, r1, r3, r5, sl, fp, ip, pc}
 8017f40:	08009c11 	stmdaeq	r0, {r0, r4, sl, fp, ip, pc}

08017f44 <ArtNetMsgConst::START>:
 8017f44:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 8017f48:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8017f4c:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 8017f50:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
	...

08017f55 <ArtNetMsgConst::PARAMS>:
 8017f55:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8017f59:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8017f5d:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8017f61:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8017f65:	0074654e 	rsbseq	r6, r4, lr, asr #10

08017f69 <ArtNetMsgConst::STARTED>:
 8017f69:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8017f6d:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8017f71:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8017f75:	00646574 	rsbeq	r6, r4, r4, ror r5
 8017f79:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8017f7d:	37303246 	ldrcc	r3, [r0, -r6, asr #4]!
 8017f81:	73250052 			; <UNDEFINED> instruction: 0x73250052
 8017f85:	20732520 	rsbscs	r2, r3, r0, lsr #10
 8017f89:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 8017f8d:	74680073 	strbtvc	r0, [r8], #-115	; 0xffffff8d
 8017f91:	2f3a7074 	svccs	0x003a7074
 8017f95:	3364672f 	cmncc	r4, #12320768	; 0xbc0000
 8017f99:	6d642d32 	stclvs	13, cr2, [r4, #-200]!	; 0xffffff38
 8017f9d:	726f2e78 	rsbvc	r2, pc, #120, 28	; 0x780
 8017fa1:	6d450067 	stclvs	0, cr0, [r5, #-412]	; 0xfffffe64
 8017fa5:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 8017fa9:	 	tstmi	r0, r5, ror #8

08017fac <artnet::NODE_ID>:
 8017fac:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8017fb0:	0074654e 	rsbseq	r6, r4, lr, asr #10

08017fb4 <defaults::SHORT_NAME>:
 8017fb4:	20567641 	subscs	r7, r6, r1, asr #12
 8017fb8:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8017fbc:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8017fc0:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
	...

08017fc5 <artnet::NODE_ID>:
 8017fc5:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8017fc9:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8017fcd:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 8017fd1:	30255b20 	eorcc	r5, r5, r0, lsr #22
 8017fd5:	205d6434 	subscs	r6, sp, r4, lsr r4
 8017fd9:	41207325 			; <UNDEFINED> instruction: 0x41207325
 8017fdd:	 	tstmi	r0, r6, ror r6

08017fe0 <artnet::NODE_ID>:
 8017fe0:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8017fe4:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8017fe8:	52206f4e 	eorpl	r6, r0, #312	; 0x138
 8017fec:	72204d44 	eorvc	r4, r0, #68, 26	; 0x1100
 8017ff0:	6f707365 	svcvs	0x00707365
 8017ff4:	0a65736e 	beq	9974db4 <__exidx_end+0x195a660>
 8017ff8:	50544800 	subspl	r4, r4, r0, lsl #16
 8017ffc:	50544c00 	subspl	r4, r4, r0, lsl #24
 8018000:	74724100 	ldrbtvc	r4, [r2], #-256	; 0xffffff00
 8018004:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 8018008:	43417300 	movtmi	r7, #4864	; 0x1300
 801800c:	6f4e004e 	svcvs	0x004e004e
 8018010:	25206564 	strcs	r6, [r0, #-1380]!	; 0xfffffa9c
 8018014:	255b2064 	ldrbcs	r2, [fp, #-100]	; 0xffffff9c
 8018018:	000a5d75 	andeq	r5, sl, r5, ror sp
 801801c:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 8018020:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 8018024:	20202065 	eorcs	r2, r0, r5, rrx
 8018028:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801802c:	0a64252e 	beq	99214ec <__exidx_end+0x1906d98>
 8018030:	68532000 	ldmdavs	r3, {sp}^
 8018034:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8018038:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 801803c:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8018040:	20000a73 	andcs	r0, r0, r3, ror sl
 8018044:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 8018048:	6d616e20 	stclvs	14, cr6, [r1, #-128]!	; 0xffffff80
 801804c:	3a202065 	bcc	88201e8 <__exidx_end+0x805a94>
 8018050:	0a732520 	beq	9ce14d8 <__exidx_end+0x1cc6d84>
 8018054:	754f2000 	strbvc	r2, [pc, #-0]	; 801805c <artnet::NODE_ID+0x7c>
 8018058:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 801805c:	2020000a 	eorcs	r0, r0, sl
 8018060:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 8018064:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 8018068:	3a642520 	bcc	99214f0 <__exidx_end+0x1906d9c>
 801806c:	322d255b 	eorcc	r2, sp, #381681664	; 0x16c00000
 8018070:	2d253a64 	vstmdbcs	r5!, {s6-s105}
 8018074:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 8018078:	5d64322d 	sfmpl	f3, 2, [r4, #-180]!	; 0xffffff4c
 801807c:	7534253a 	ldrvc	r2, [r4, #-1338]!	; 0xfffffac6
 8018080:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
 8018084:	7b20005d 	blvc	8818200 <__exidx_end+0x7fdaac>
 8018088:	0a7d7325 	beq	9f74d24 <__exidx_end+0x1f5a5d0>
 801808c:	6e492000 	cdpvs	0, 4, cr2, cr9, cr0, {0}
 8018090:	0a747570 	beq	9d35658 <__exidx_end+0x1d1af04>
 8018094:	50202000 	eorpl	r2, r0, r0
 8018098:	2074726f 	rsbscs	r7, r4, pc, ror #4
 801809c:	20643225 	rsbcs	r3, r4, r5, lsr #4
 80180a0:	5b3a6425 	blpl	8eb113c <__exidx_end+0xe969e8>
 80180a4:	64322d25 	ldrtvs	r2, [r2], #-3365	; 0xfffff2db
 80180a8:	322d253a 	eorcc	r2, sp, #243269632	; 0xe800000
 80180ac:	2d253a64 	vstmdbcs	r5!, {s6-s105}
 80180b0:	3a5d6432 	bcc	9771180 <__exidx_end+0x1756a2c>
 80180b4:	20753425 	rsbscs	r3, r5, r5, lsr #8
 80180b8:	25203e2d 	strcs	r3, [r0, #-3629]!	; 0xfffff1d3
 80180bc:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80180c0:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80180c4:	000a6425 	andeq	r6, sl, r5, lsr #8
 80180c8:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 80180cc:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	; 0xffffff18
 80180d0:	73252300 			; <UNDEFINED> instruction: 0x73252300
 80180d4:	0a64253d 	beq	99215d0 <__exidx_end+0x1906e7c>
 80180d8:	73252200 			; <UNDEFINED> instruction: 0x73252200
 80180dc:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 80180e0:	002c2273 	eoreq	r2, ip, r3, ror r2
 80180e4:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 80180e8:	000a7325 	andeq	r7, sl, r5, lsr #6
 80180ec:	6e636173 	mcrvs	1, 3, r6, cr3, cr3, {3}
 80180f0:	706e6900 	rsbvc	r6, lr, r0, lsl #18
 80180f4:	6f007475 	svcvs	0x00007475
 80180f8:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 80180fc:	746c0074 	strbtvc	r0, [ip], #-116	; 0xffffff8c
 8018100:	74680070 	strbtvc	r0, [r8], #-112	; 0xffffff90
 8018104:	72610070 	rsbvc	r0, r1, #112	; 0x70
 8018108:	74656e74 	strbtvc	r6, [r5], #-3700	; 0xfffff18c
 801810c:	6c754d00 	ldclvs	13, cr4, [r5], #-0
 8018110:	70206974 	eorvc	r6, r0, r4, ror r9
 8018114:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8018118:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801811c:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8018120:	6f697461 	svcvs	0x00697461
 8018124:	6f4e006e 	svcvs	0x004e006e
 8018128:	44006564 	strmi	r6, [r0], #-1380	; 0xfffffa9c
 801812c:	522f584d 	eorpl	r5, pc, #5046272	; 0x4d0000
 8018130:	4f204d44 	svcmi	0x00204d44
 8018134:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 8018138:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
 801813c:	6e492058 	mcrvs	0, 2, r2, cr9, cr8, {2}
 8018140:	00747570 	rsbseq	r7, r4, r0, ror r5
 8018144:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8018148:	2074654e 	rsbscs	r6, r4, lr, asr #10
 801814c:	 	mcrvs	0, 3, r0, cr5, cr4, {1}

0801814e <ArtNetParamsConst::ENABLE_RDM>:
 801814e:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8018152:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8018156:	 	stcvs	13, cr6, [r0, #-400]	; 0xfffffe70

08018159 <ArtNetParamsConst::MAP_UNIVERSE0>:
 8018159:	5f70616d 	svcpl	0x0070616d
 801815d:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8018161:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8018165:	 	rsbsvc	r0, r0, #48	; 0x30

08018167 <ArtNetParamsConst::PROTOCOL_PORT>:
 8018167:	746f7270 	strbtvc	r7, [pc], #-624	; 801816f <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 801816b:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8017fb4 <defaults::SHORT_NAME>
 801816f:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018173:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8018177:	746f7270 	strbtvc	r7, [pc], #-624	; 801817f <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 801817b:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8017fc4 <defaults::SHORT_NAME+0x10>
 801817f:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018183:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8018187:	746f7270 	strbtvc	r7, [pc], #-624	; 801818f <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 801818b:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8017fd4 <artnet::NODE_ID+0xf>
 801818f:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018193:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8018197:	746f7270 	strbtvc	r7, [pc], #-624	; 801819f <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 801819b:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8017fe4 <artnet::NODE_ID+0x4>
 801819f:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80181a3:	00645f74 	rsbeq	r5, r4, r4, ror pc

080181a7 <ArtNetParamsConst::NODE_LONG_NAME>:
 80181a7:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 80181ab:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	; 0xfffffe84
 80181af:	 	strbvs	r0, [pc, #-101]!	; 8018152 <ArtNetParamsConst::ENABLE_RDM+0x4>

080181b1 <ArtNetParamsConst::NODE_OEM_VALUE>:
 80181b1:	5f6d656f 	svcpl	0x006d656f
 80181b5:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 80181b9:	 	ldmdavs	r3!, {r0, r2, r5, r6}^

080181bb <ArtNetParamsConst::NODE_SHORT_NAME>:
 80181bb:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 80181bf:	616e5f74 	smcvs	58868	; 0xe5f4
 80181c3:	 	strvs	r6, [r0], #-1389	; 0xfffffa93

080181c6 <ArtNetParamsConst::DESTINATION_IP_PORT>:
 80181c6:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 80181ca:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 80181ce:	5f6e6f69 	svcpl	0x006e6f69
 80181d2:	705f7069 	subsvc	r7, pc, r9, rrx
 80181d6:	5f74726f 	svcpl	0x0074726f
 80181da:	00000061 	andeq	r0, r0, r1, rrx
 80181de:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 80181e2:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 80181e6:	5f6e6f69 	svcpl	0x006e6f69
 80181ea:	705f7069 	subsvc	r7, pc, r9, rrx
 80181ee:	5f74726f 	svcpl	0x0074726f
 80181f2:	00000062 	andeq	r0, r0, r2, rrx
 80181f6:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 80181fa:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 80181fe:	5f6e6f69 	svcpl	0x006e6f69
 8018202:	705f7069 	subsvc	r7, pc, r9, rrx
 8018206:	5f74726f 	svcpl	0x0074726f
 801820a:	00000063 	andeq	r0, r0, r3, rrx
 801820e:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8018212:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8018216:	5f6e6f69 	svcpl	0x006e6f69
 801821a:	705f7069 	subsvc	r7, pc, r9, rrx
 801821e:	5f74726f 	svcpl	0x0074726f
 8018222:	00000064 	andeq	r0, r0, r4, rrx

08018226 <ArtNetParamsConst::DISABLE_MERGE_TIMEOUT>:
 8018226:	61736964 	cmnvs	r3, r4, ror #18
 801822a:	5f656c62 	svcpl	0x00656c62
 801822e:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8018232:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 8018236:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8017cd1 <i2c_flag_get+0xd>
 801823a:	 	strbvs	r0, [lr, #-116]!	; 0xffffff8c

0801823c <ArtNetParamsConst::NODE_NETWORK_DATA_LOSS_TIMEOUT>:
 801823c:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8018240:	5f6b726f 	svcpl	0x006b726f
 8018244:	61746164 	cmnvs	r4, r4, ror #2
 8018248:	736f6c5f 	cmnvc	pc, #24320	; 0x5f00
 801824c:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8018250:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8017ceb <i2c_flag_clear+0x11>
 8018254:	 	strbvs	r0, [lr, #-116]!	; 0xffffff8c

08018256 <ArtNetParamsConst::NET>:
 8018256:	0074656e 	rsbseq	r6, r4, lr, ror #10

0801825a <ArtNetParamsConst::SUBNET>:
 801825a:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
 801825e:	 	andvc	r7, r0, r5, ror #8

08018261 <ArtNetParamsConst::PROTOCOL>:
 8018261:	746f7270 	strbtvc	r7, [pc], #-624	; 8018269 <ArtNetParamsConst::PROTOCOL+0x8>
 8018265:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 80180b0 <artnet::NODE_ID+0xd0>
	...

0801826a <ArtNetParamsConst::FILE_NAME>:
 801826a:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 801826e:	742e7465 	strtvc	r7, [lr], #-1125	; 0xfffffb9b
 8018272:	 			; <UNDEFINED> instruction: 0xff007478

08018275 <ArtNetConst::OEM_ID>:
 8018275:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

08018277 <ArtNetConst::ESTA_ID>:
 8018277:	 			; <UNDEFINED> instruction: 0x36010050

08018279 <ArtNetConst::VERSION>:
 8018279:	33323601 	teqcc	r2, #1048576	; 0x100000
 801827d:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 8018281:	2e302e35 	mrccs	14, 1, r2, cr0, cr5, {1}
 8018285:	2e250030 	mcrcs	0, 1, r0, cr5, cr0, {1}
 8018289:	20733834 	rsbscs	r3, r3, r4, lsr r8
 801828d:	30007325 	andcc	r7, r0, r5, lsr #6
 8018291:	6f4e202e 	svcvs	0x004e202e
 8018295:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 8018299:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 801829d:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 80182a1:	202c6465 	eorcs	r6, ip, r5, ror #8
 80182a5:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 80182a9:	6f687320 	svcvs	0x00687320
 80182ad:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 80182b1:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 80182b5:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 80182b9:	000a216e 	andeq	r2, sl, lr, ror #2
 80182bd:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 80182c1:	000a6567 	andeq	r6, sl, r7, ror #10
 80182c5:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 80182c9:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 80182cd:	203a2065 	eorscs	r2, sl, r5, rrx
 80182d1:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80182d5:	20000a64 	andcs	r0, r0, r4, ror #20
 80182d9:	20444943 	subcs	r4, r4, r3, asr #18
 80182dd:	20202020 	eorcs	r2, r0, r0, lsr #32
 80182e1:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 80182e5:	20000a73 	andcs	r0, r0, r3, ror sl
 80182e9:	726f5020 	rsbvc	r5, pc, #32
 80182ed:	32252074 	eorcc	r2, r5, #116	; 0x74
 80182f1:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 80182f5:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 80182f9:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 80182fd:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 8018301:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 8018305:	2020000a 	eorcs	r0, r0, sl
 8018309:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 801830d:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 8018311:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 8018315:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8018319:	2d252065 	stccs	0, cr2, [r5, #-404]!	; 0xfffffe6c
 801831d:	5b206433 	blpl	88313f1 <__exidx_end+0x816c9d>
 8018321:	0a5d6425 	beq	97713bd <__exidx_end+0x1756c69>
 8018325:	79532000 	ldmdbvc	r3, {sp}^
 8018329:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
 801832d:	7a696e6f 	bvc	9a73cf1 <__exidx_end+0x1a5959d>
 8018331:	73692065 	cmnvc	r9, #101	; 0x65
 8018335:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8018339:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801833d:	 	tstmi	r0, r4, ror #20

08018340 <E117Const::ACN_PACKET_IDENTIFIER>:
 8018340:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 8018344:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 8018348:	00000037 	andeq	r0, r0, r7, lsr r0

0801834c <E131BridgeConst::VERSION>:
 801834c:	30251801 	eorcc	r1, r5, r1, lsl #16
 8018350:	252d7838 	strcs	r7, [sp, #-2104]!	; 0xfffff7c8
 8018354:	2d783430 	cfldrdcs	mvd3, [r8, #-192]!	; 0xffffff40
 8018358:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 801835c:	3230252d 	eorscc	r2, r0, #188743680	; 0xb400000
 8018360:	32302578 	eorscc	r2, r0, #120, 10	; 0x1e000000
 8018364:	30252d78 	eorcc	r2, r5, r8, ror sp
 8018368:	30257832 	eorcc	r7, r5, r2, lsr r8
 801836c:	30257832 	eorcc	r7, r5, r2, lsr r8
 8018370:	30257832 	eorcc	r7, r5, r2, lsr r8
 8018374:	30257832 	eorcc	r7, r5, r2, lsr r8
 8018378:	30257832 	eorcc	r7, r5, r2, lsr r8
 801837c:	32007832 	andcc	r7, r0, #3276800	; 0x320000
 8018380:	322e3933 	eorcc	r3, lr, #835584	; 0xcc000
 8018384:	322e3535 	eorcc	r3, lr, #222298112	; 0xd400000
 8018388:	312e3035 			; <UNDEFINED> instruction: 0x312e3035
 801838c:	32003333 	andcc	r3, r0, #-872415232	; 0xcc000000
 8018390:	322e3933 	eorcc	r3, lr, #835584	; 0xcc000
 8018394:	322e3535 	eorcc	r3, lr, #222298112	; 0xd400000
 8018398:	312e3035 			; <UNDEFINED> instruction: 0x312e3035
 801839c:	4c003433 	cfstrsmi	mvf3, [r0], {51}	; 0x33
 80183a0:	2050524c 	subscs	r5, r0, ip, asr #4
 80183a4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 80183a8:	63206563 			; <UNDEFINED> instruction: 0x63206563
 80183ac:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 80183b0:	61727567 	cmnvs	r2, r7, ror #10
 80183b4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80183b8:	5020000a 	eorpl	r0, r0, sl
 80183bc:	2074726f 	rsbscs	r7, r4, pc, ror #4
 80183c0:	20504455 	subscs	r4, r0, r5, asr r4
 80183c4:	20202020 	eorcs	r2, r0, r0, lsr #32
 80183c8:	20202020 	eorcs	r2, r0, r0, lsr #32
 80183cc:	20202020 	eorcs	r2, r0, r0, lsr #32
 80183d0:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80183d4:	000a6425 	andeq	r6, sl, r5, lsr #8
 80183d8:	6c754d20 	ldclvs	13, cr4, [r5], #-128	; 0xffffff80
 80183dc:	61636974 	smcvs	13972	; 0x3694
 80183e0:	6a207473 	bvs	88355b4 <__exidx_end+0x81ae60>
 80183e4:	206e696f 	rsbcs	r6, lr, pc, ror #18
 80183e8:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
 80183ec:	20747365 	rsbscs	r7, r4, r5, ror #6
 80183f0:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80183f4:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80183f8:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80183fc:	20000a64 	andcs	r0, r0, r4, ror #20
 8018400:	746c754d 	strbtvc	r7, [ip], #-1357	; 0xfffffab3
 8018404:	73616369 	cmnvc	r1, #-1543503871	; 0xa4000001
 8018408:	65522074 	ldrbvs	r2, [r2, #-116]	; 0xffffff8c
 801840c:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
 8018410:	20206573 	eorcs	r6, r0, r3, ror r5
 8018414:	3a202020 	bcc	882049c <__exidx_end+0x805d48>
 8018418:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801841c:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8018420:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8018424:	0000000a 	andeq	r0, r0, sl

08018428 <vtable for LLRPDevice>:
	...
 8018430:	0800d0f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, ip, lr, pc}
 8018434:	0800d0ff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, ip, lr, pc}
 8018438:	0800d0f7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, ip, lr, pc}
 801843c:	0800d0f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, ip, lr, pc}
 8018440:	0800d0fb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, ip, lr, pc}

08018444 <RDMNetConst::MSG_CONFIG>:
 8018444:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8018448:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801844c:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8018450:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 8018454:	 	andpl	r7, r0, #1694498816	; 0x65000000

08018457 <RDMNetConst::MSG_STARTED>:
 8018457:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 801845b:	73207465 			; <UNDEFINED> instruction: 0x73207465
 801845f:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 8018463:	 	movwpl	r6, #1125	; 0x465

08018466 <RDMNetConst::MSG_START>:
 8018466:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 801846a:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 801846e:	4d445220 	sfmmi	f5, 2, [r4, #-128]	; 0xffffff80
 8018472:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8018476:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 801847a:	000a7465 	andeq	r7, sl, r5, ror #8
 801847e:	44494320 	strbmi	r4, [r9], #-800	; 0xfffffce0
 8018482:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8018486:	52000a73 	andpl	r0, r0, #471040	; 0x73000
 801848a:	52204d44 	eorpl	r4, r0, #68, 26	; 0x1100
 801848e:	6f707365 	svcvs	0x00707365
 8018492:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
 8018496:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 801849a:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 801849e:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 80184a2:	000a6e6f 	andeq	r6, sl, pc, ror #28
 80184a6:	6f725020 	svcvs	0x00725020
 80184aa:	6f636f74 	svcvs	0x00636f74
 80184ae:	6556206c 	ldrbvs	r2, [r6, #-108]	; 0xffffff94
 80184b2:	6f697372 	svcvs	0x00697372
 80184b6:	6425206e 	strtvs	r2, [r5], #-110	; 0xffffff92
 80184ba:	0a64252e 	beq	992197a <__exidx_end+0x1907226>
 80184be:	4d442000 	stclmi	0, cr2, [r4, #-0]
 80184c2:	64412058 	strbvs	r2, [r1], #-88	; 0xffffffa8
 80184c6:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 80184ca:	20202073 	eorcs	r2, r0, r3, ror r0
 80184ce:	3a202020 	bcc	8820556 <__exidx_end+0x805e02>
 80184d2:	0a642520 	beq	992195a <__exidx_end+0x1907206>
 80184d6:	4d442000 	stclmi	0, cr2, [r4, #-0]
 80184da:	6f462058 	svcvs	0x00462058
 80184de:	7270746f 	rsbsvc	r7, r0, #1862270976	; 0x6f000000
 80184e2:	20746e69 	rsbscs	r6, r4, r9, ror #28
 80184e6:	3a202020 	bcc	882056e <__exidx_end+0x805e1a>
 80184ea:	0a642520 	beq	9921972 <__exidx_end+0x190721e>
 80184ee:	65502000 	ldrbvs	r2, [r0, #-0]
 80184f2:	6e6f7372 	mcrvs	3, 3, r7, cr15, cr2, {3}
 80184f6:	74696c61 	strbtvc	r6, [r9], #-3169	; 0xfffff39f
 80184fa:	64252079 	strtvs	r2, [r5], #-121	; 0xffffff87
 80184fe:	20666f20 	rsbcs	r6, r6, r0, lsr #30
 8018502:	5b206425 	blpl	883159e <__exidx_end+0x816e4a>
 8018506:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 801850a:	20000a5d 	andcs	r0, r0, sp, asr sl
 801850e:	20627553 	rsbcs	r7, r2, r3, asr r5
 8018512:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 8018516:	20736563 	rsbscs	r6, r3, r3, ror #10
 801851a:	20202020 	eorcs	r2, r0, r0, lsr #32
 801851e:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8018522:	20000a64 	andcs	r0, r0, r4, ror #20
 8018526:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
 801852a:	2073726f 	rsbscs	r7, r3, pc, ror #4
 801852e:	20202020 	eorcs	r2, r0, r0, lsr #32
 8018532:	20202020 	eorcs	r2, r0, r0, lsr #32
 8018536:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801853a:	 	strmi	r0, [r0, -r4, ror #20]

0801853d <DEVICE_LABEL>:
 801853d:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8018541:	37303246 	ldrcc	r3, [r0, -r6, asr #4]!
 8018545:	44522052 	ldrbmi	r2, [r2], #-82	; 0xffffffae
 8018549:	6552204d 	ldrbvs	r2, [r2, #-77]	; 0xffffffb3
 801854d:	6e6f7073 	mcrvs	0, 3, r7, cr15, cr3, {3}
 8018551:	00726564 	rsbseq	r6, r2, r4, ror #10
 8018555:	 	andeq	r0, r0, r0

08018558 <vtable for RDMDeviceResponder>:
	...
 8018560:	0800d5e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, sl, ip, lr, pc}
 8018564:	0800d609 	stmdaeq	r0, {r0, r3, r9, sl, ip, lr, pc}
 8018568:	0800d5e3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r8, sl, ip, lr, pc}
 801856c:	0800d5e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, sl, ip, lr, pc}

08018570 <UID_ALL>:
 8018570:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8018574:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

08018578 <RDMHandler::PID_DEFINITIONS>:
 8018578:	00000060 	andeq	r0, r0, r0, rrx
 801857c:	0800daed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r9, fp, ip, lr, pc}
	...
 801858c:	01010000 	mrseq	r0, (UNDEF: 1)
 8018590:	00000080 	andeq	r0, r0, r0, lsl #1
 8018594:	0800dbd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, r9, fp, ip, lr, pc}
	...
 80185a4:	01010100 	mrseq	r0, (UNDEF: 17)
 80185a8:	00000081 	andeq	r0, r0, r1, lsl #1
 80185ac:	0800dbf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
	...
 80185bc:	01010100 	mrseq	r0, (UNDEF: 17)
 80185c0:	00000082 	andeq	r0, r0, r2, lsl #1
 80185c4:	0800dc11 	stmdaeq	r0, {r0, r4, sl, fp, ip, lr, pc}
 80185c8:	00000000 	andeq	r0, r0, r0
 80185cc:	0800dd61 	stmdaeq	r0, {r0, r5, r6, r8, sl, fp, ip, lr, pc}
 80185d0:	00000000 	andeq	r0, r0, r0
 80185d4:	01010100 	mrseq	r0, (UNDEF: 17)
 80185d8:	00000090 	muleq	r0, r0, r0
 80185dc:	0800db55 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, fp, ip, lr, pc}
 80185e0:	00000000 	andeq	r0, r0, r0
 80185e4:	0800dd2d 	stmdaeq	r0, {r0, r2, r3, r5, r8, sl, fp, ip, lr, pc}
 80185e8:	00000000 	andeq	r0, r0, r0
 80185ec:	01010100 	mrseq	r0, (UNDEF: 17)
 80185f0:	00001000 	andeq	r1, r0, r0
 80185f4:	0800dc4d 	stmdaeq	r0, {r0, r2, r3, r6, sl, fp, ip, lr, pc}
 80185f8:	00000000 	andeq	r0, r0, r0
 80185fc:	0800dcb1 	stmdaeq	r0, {r0, r4, r5, r7, sl, fp, ip, lr, pc}
 8018600:	00000000 	andeq	r0, r0, r0
 8018604:	01010000 	mrseq	r0, (UNDEF: 1)
 8018608:	00001001 	andeq	r1, r0, r1
	...
 8018614:	0800dc69 	stmdaeq	r0, {r0, r3, r5, r6, sl, fp, ip, lr, pc}
 8018618:	00000000 	andeq	r0, r0, r0
 801861c:	01010100 	mrseq	r0, (UNDEF: 17)
 8018620:	00000700 	andeq	r0, r0, r0, lsl #14
 8018624:	0800e061 	stmdaeq	r0, {r0, r5, r6, sp, lr, pc}
	...
 8018634:	01000000 	mrseq	r0, (UNDEF: 0)
 8018638:	00000701 	andeq	r0, r0, r1, lsl #14
 801863c:	0800e089 	stmdaeq	r0, {r0, r3, r7, sp, lr, pc}
	...
 801864c:	01000004 	tsteq	r0, r4
 8018650:	00000702 	andeq	r0, r0, r2, lsl #14
 8018654:	0800e0d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, sp, lr, pc}
	...
 8018664:	01000004 	tsteq	r0, r4
 8018668:	00000703 	andeq	r0, r0, r3, lsl #14
 801866c:	0800e105 	stmdaeq	r0, {r0, r2, r8, sp, lr, pc}
 8018670:	00000000 	andeq	r0, r0, r0
 8018674:	0800e131 	stmdaeq	r0, {r0, r4, r5, r8, sp, lr, pc}
 8018678:	00000000 	andeq	r0, r0, r0
 801867c:	01000004 	tsteq	r0, r4
 8018680:	00000704 	andeq	r0, r0, r4, lsl #14
 8018684:	0800e19d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, sp, lr, pc}
 8018688:	00000000 	andeq	r0, r0, r0
 801868c:	0800e1cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, sp, lr, pc}
 8018690:	00000000 	andeq	r0, r0, r0
 8018694:	01000004 	tsteq	r0, r4
 8018698:	00000705 	andeq	r0, r0, r5, lsl #14
 801869c:	0800e241 	stmdaeq	r0, {r0, r6, r9, sp, lr, pc}
	...
 80186ac:	01000004 	tsteq	r0, r4
 80186b0:	00000707 	andeq	r0, r0, r7, lsl #14
	...
 80186bc:	0800e215 	stmdaeq	r0, {r0, r2, r4, r9, sp, lr, pc}
 80186c0:	00000000 	andeq	r0, r0, r0
 80186c4:	01000004 	tsteq	r0, r4
 80186c8:	00000706 	andeq	r0, r0, r6, lsl #14
 80186cc:	0800e289 	stmdaeq	r0, {r0, r3, r7, r9, sp, lr, pc}
 80186d0:	00000000 	andeq	r0, r0, r0
 80186d4:	0800e2cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sp, lr, pc}
 80186d8:	00000000 	andeq	r0, r0, r0
 80186dc:	01000004 	tsteq	r0, r4
 80186e0:	00000709 	andeq	r0, r0, r9, lsl #14
	...
 80186ec:	0800e319 	stmdaeq	r0, {r0, r3, r4, r8, r9, sp, lr, pc}
 80186f0:	00000000 	andeq	r0, r0, r0
 80186f4:	01000004 	tsteq	r0, r4
 80186f8:	0000070b 	andeq	r0, r0, fp, lsl #14
 80186fc:	0800e179 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sp, lr, pc}
	...
 801870c:	01000001 	tsteq	r0, r1
 8018710:	0000070a 	andeq	r0, r0, sl, lsl #14
 8018714:	0800e341 	stmdaeq	r0, {r0, r6, r8, r9, sp, lr, pc}
 8018718:	00000000 	andeq	r0, r0, r0
 801871c:	0800e379 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, r9, sp, lr, pc}
 8018720:	00000000 	andeq	r0, r0, r0
 8018724:	01000004 	tsteq	r0, r4
 8018728:	0000070c 	andeq	r0, r0, ip, lsl #14
 801872c:	0800e381 	stmdaeq	r0, {r0, r7, r8, r9, sp, lr, pc}
 8018730:	00000000 	andeq	r0, r0, r0
 8018734:	0800e3b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sp, lr, pc}
 8018738:	00000000 	andeq	r0, r0, r0
 801873c:	01000000 	mrseq	r0, (UNDEF: 0)
 8018740:	0000070d 	andeq	r0, r0, sp, lsl #14
 8018744:	0800e3e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, sp, lr, pc}
 8018748:	00000000 	andeq	r0, r0, r0
 801874c:	0800e415 	stmdaeq	r0, {r0, r2, r4, sl, sp, lr, pc}
 8018750:	00000000 	andeq	r0, r0, r0
 8018754:	01000000 	mrseq	r0, (UNDEF: 0)
 8018758:	204d4452 	subcs	r4, sp, r2, asr r4
 801875c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 8018760:	63206563 			; <UNDEFINED> instruction: 0x63206563
 8018764:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8018768:	61727567 	cmnvs	r2, r7, ror #10
 801876c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8018770:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 8018774:	66756e61 	ldrbtvs	r6, [r5], -r1, ror #28
 8018778:	75746361 	ldrbvc	r6, [r4, #-865]!	; 0xfffffc9f
 801877c:	20726572 	rsbscs	r6, r2, r2, ror r5
 8018780:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 8018784:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8018788:	0a732a2e 	beq	9ce3048 <__exidx_end+0x1cc88f4>
 801878c:	614d2000 	mrsvs	r2, (UNDEF: 77)
 8018790:	6166756e 	cmnvs	r6, lr, ror #10
 8018794:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
 8018798:	49207265 	stmdbmi	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
 801879c:	20202044 	eorcs	r2, r0, r4, asr #32
 80187a0:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 80187a4:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 80187a8:	000a5832 	andeq	r5, sl, r2, lsr r8
 80187ac:	72655320 	rsbvc	r5, r5, #32, 6	; 0x80000000
 80187b0:	206c6169 	rsbcs	r6, ip, r9, ror #2
 80187b4:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
 80187b8:	20207265 	eorcs	r7, r0, r5, ror #4
 80187bc:	3a202020 	bcc	8820844 <__exidx_end+0x8060f0>
 80187c0:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 80187c4:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 80187c8:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 80187cc:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 80187d0:	20000a58 	andcs	r0, r0, r8, asr sl
 80187d4:	746f6f52 	strbtvc	r6, [pc], #-3922	; 80187dc <RDMHandler::PID_DEFINITIONS+0x264>
 80187d8:	62616c20 	rsbvs	r6, r1, #32, 24	; 0x2000
 80187dc:	20206c65 	eorcs	r6, r0, r5, ror #24
 80187e0:	20202020 	eorcs	r2, r0, r0, lsr #32
 80187e4:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80187e8:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 80187ec:	5020000a 	eorpl	r0, r0, sl
 80187f0:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xfffff08e
 80187f4:	43207463 			; <UNDEFINED> instruction: 0x43207463
 80187f8:	67657461 	strbvs	r7, [r5, -r1, ror #8]!
 80187fc:	2079726f 	rsbscs	r7, r9, pc, ror #4
 8018800:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8018804:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8018808:	0a58322e 	beq	96250c8 <__exidx_end+0x160a974>
 801880c:	72502000 	subsvc	r2, r0, #0
 8018810:	6375646f 	cmnvs	r5, #1862270976	; 0x6f000000
 8018814:	65442074 	strbvs	r2, [r4, #-116]	; 0xffffff8c
 8018818:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
 801881c:	20202020 	eorcs	r2, r0, r0, lsr #32
 8018820:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8018824:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 8018828:	000a5832 	andeq	r5, sl, r2, lsr r8

0801882c <DEVICE_LABEL>:
 801882c:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8018830:	37303246 	ldrcc	r3, [r0, -r6, asr #4]!
 8018834:	44522052 	ldrbmi	r2, [r2], #-82	; 0xffffffae
 8018838:	6544204d 	strbvs	r2, [r4, #-77]	; 0xffffffb3
 801883c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
	...

08018841 <RDMConst::MANUFACTURER_ID>:
 8018841:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

08018843 <RDMConst::MANUFACTURER_NAME>:
 8018843:	70747468 	rsbsvc	r7, r4, r8, ror #8
 8018847:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 801884b:	6f2e7777 	svcvs	0x002e7777
 801884f:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 8018853:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 8018857:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 801885b:	0067726f 	rsbeq	r7, r7, pc, ror #4
 801885f:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8018863:	4d44206c 	stclmi	0, cr2, [r4, #-432]	; 0xfffffe50
 8018867:	61702058 	cmnvs	r0, r8, asr r0
 801886b:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 801886f:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
 8018873:	4f20000a 	svcmi	0x0020000a
 8018877:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 801887b:	3a207374 	bcc	8835653 <__exidx_end+0x81aeff>
 801887f:	0a642520 	beq	9921d07 <__exidx_end+0x19075b3>
 8018883:	72472000 	subvc	r2, r7, #0
 8018887:	6970756f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
 801888b:	6320676e 			; <UNDEFINED> instruction: 0x6320676e
 801888f:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 8018893:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8018897:	475b2064 	ldrbmi	r2, [fp, -r4, rrx]
 801889b:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 801889f:	203a2073 	eorscs	r2, sl, r3, ror r0
 80188a3:	0a5d6425 	beq	977193f <__exidx_end+0x17571eb>
	...

080188a8 <vtable for WS28xxDmxMulti>:
	...
 80188b0:	0800e5b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, sl, sp, lr, pc}
 80188b4:	0800e5d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, sl, sp, lr, pc}
 80188b8:	0800e593 	stmdaeq	r0, {r0, r1, r4, r7, r8, sl, sp, lr, pc}
 80188bc:	0800e745 	stmdaeq	r0, {r0, r2, r6, r8, r9, sl, sp, lr, pc}
 80188c0:	0800e60f 	stmdaeq	r0, {r0, r1, r2, r3, r9, sl, sp, lr, pc}
 80188c4:	0800e5e7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, r8, sl, sp, lr, pc}
 80188c8:	0800e711 	stmdaeq	r0, {r0, r4, r8, r9, sl, sp, lr, pc}
 80188cc:	0800e585 	stmdaeq	r0, {r0, r2, r7, r8, sl, sp, lr, pc}
 80188d0:	0800e589 	stmdaeq	r0, {r0, r3, r7, r8, sl, sp, lr, pc}
 80188d4:	0800e58f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r8, sl, sp, lr, pc}
 80188d8:	0801513b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, ip, lr}
 80188dc:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 80188e0:	2a2e253a 	bcs	8ba1dd0 <__exidx_end+0xb8767c>
 80188e4:	23002c66 	movwcs	r2, #3174	; 0xc66
 80188e8:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 80188ec:	0a662a2e 	beq	99a31ac <__exidx_end+0x1988a58>
 80188f0:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xfffff100
 80188f4:	69727772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
 80188f8:	64206574 	strtvs	r6, [r0], #-1396	; 0xfffffa8c
 80188fc:	73617461 	cmnvc	r1, #1627389952	; 0x61000000
 8018900:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8018904:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xfffff100
 8018908:	69727772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
 801890c:	74206574 	strtvc	r6, [r0], #-1396	; 0xfffffa8c
 8018910:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
 8018914:	75282067 	strvc	r2, [r8, #-103]!	; 0xffffff99
 8018918:	47002973 	smlsdxmi	r0, r3, r9, r2
 801891c:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 8018920:	00676e69 	rsbeq	r6, r7, r9, ror #28
 8018924:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 8018928:	6162206b 	cmnvs	r2, fp, rrx
 801892c:	20646573 	rsbcs	r6, r4, r3, ror r5
 8018930:	70696863 	rsbvc	r6, r9, r3, ror #16
 8018934:	50410073 	subpl	r0, r1, r3, ror r0
 8018938:	32303141 	eorscc	r3, r0, #1073741840	; 0x40000010
 801893c:	394b532f 	stmdbcc	fp, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 8018940:	00323238 	eorseq	r3, r2, r8, lsr r2
 8018944:	74736554 	ldrbtvc	r6, [r3], #-1364	; 0xfffffaac
 8018948:	74617020 	strbtvc	r7, [r1], #-32	; 0xffffffe0
 801894c:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	...

08018951 <CSWTCH.6>:
 8018951:	02020200 	andeq	r0, r2, #0, 4
 8018955:	04020202 	streq	r0, [r2], #-514	; 0xfffffdfe
 8018959:	6e550500 	cdpvs	5, 5, cr0, cr5, cr0, {0}
 801895d:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 8018961:	 	svcvs	0x004e006e

08018963 <s_patternName>:
 8018963:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 801896f:	61520000 	cmpvs	r2, r0
 8018973:	6f626e69 	svcvs	0x00626e69
 8018977:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 801897b:	00656c63 	rsbeq	r6, r5, r3, ror #24
 801897f:	61656854 	cmnvs	r5, r4, asr r8
 8018983:	20726574 	rsbscs	r6, r2, r4, ror r5
 8018987:	73616863 	cmnvc	r1, #6488064	; 0x630000
 801898b:	6f430065 	svcvs	0x00430065
 801898f:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 8018993:	70697720 	rsbvc	r7, r9, r0, lsr #14
 8018997:	00000065 	andeq	r0, r0, r5, rrx
 801899b:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 801899f:	0072656e 	rsbseq	r6, r2, lr, ror #10
 80189a3:	00000000 	andeq	r0, r0, r0
 80189a7:	61460000 	mrsvs	r0, (UNDEF: 70)
 80189ab:	00006564 	andeq	r6, r0, r4, ror #10
	...
 80189b7:	65646e55 	strbvs	r6, [r4, #-3669]!	; 0xfffff1ab
 80189bb:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0xfffff69a
 80189bf:	 	ldrbmi	r0, [r2, -r4, rrx]

080189c1 <PixelType::MAPS>:
 80189c1:	00424752 	subeq	r4, r2, r2, asr r7
 80189c5:	00474252 	subeq	r4, r7, r2, asr r2
 80189c9:	00425247 	subeq	r5, r2, r7, asr #4
 80189cd:	00524247 	subseq	r4, r2, r7, asr #4
 80189d1:	00475242 	subeq	r5, r7, r2, asr #4
 80189d5:	00524742 	subseq	r4, r2, r2, asr #14

080189d9 <PixelType::TYPES>:
 80189d9:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80189dd:	00003130 	andeq	r3, r0, r0, lsr r1
 80189e1:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80189e5:	00003131 	andeq	r3, r0, r1, lsr r1
 80189e9:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80189ed:	00003231 	andeq	r3, r0, r1, lsr r2
 80189f1:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80189f5:	00423231 	subeq	r3, r2, r1, lsr r2
 80189f9:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80189fd:	00003331 	andeq	r3, r0, r1, lsr r3
 8018a01:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8018a05:	00003531 	andeq	r3, r0, r1, lsr r5
 8018a09:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 8018a0d:	00003231 	andeq	r3, r0, r1, lsr r2
 8018a11:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 8018a15:	00573231 	subseq	r3, r7, r1, lsr r2
 8018a19:	31534355 	cmpcc	r3, r5, asr r3
 8018a1d:	00333039 	eorseq	r3, r3, r9, lsr r0
 8018a21:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 8018a25:	00333039 	eorseq	r3, r3, r9, lsr r0
 8018a29:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 8018a2d:	00003231 	andeq	r3, r0, r1, lsr r2
 8018a31:	31415041 	cmpcc	r1, r1, asr #32
 8018a35:	00003230 	andeq	r3, r0, r0, lsr r2
 8018a39:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 8018a3d:	00003232 	andeq	r3, r0, r2, lsr r2
 8018a41:	31383950 	teqcc	r8, r0, asr r9
 8018a45:	00000033 	andeq	r0, r0, r3, lsr r0
 8018a49:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8018a4d:	20000a6c 	andcs	r0, r0, ip, ror #20
 8018a51:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 8018a55:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8018a59:	5b207325 	blpl	88356f5 <__exidx_end+0x81afa1>
 8018a5d:	205d6425 	subscs	r6, sp, r5, lsr #8
 8018a61:	7325202d 			; <UNDEFINED> instruction: 0x7325202d
 8018a65:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 8018a69:	20000a5d 	andcs	r0, r0, sp, asr sl
 8018a6d:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 8018a71:	203a2074 	eorscs	r2, sl, r4, ror r0
 8018a75:	000a6425 	andeq	r6, sl, r5, lsr #8
	...

08018a7a <s_GPIO_PINs>:
 8018a7a:	64253fc0 	strtvs	r3, [r5], #-4032	; 0xfffff040
 8018a7e:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8018a82:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8018a86:	73252c64 			; <UNDEFINED> instruction: 0x73252c64
 8018a8a:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 8018a8e:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 8018a92:	25000a73 	strcs	r0, [r0, #-2675]	; 0xfffff58d
 8018a96:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8018a9a:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8018a9e:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 8018aa2:	73252c73 			; <UNDEFINED> instruction: 0x73252c73
 8018aa6:	0a64252c 	beq	9921f5e <__exidx_end+0x190780a>
 8018aaa:	006e4f00 	rsbeq	r4, lr, r0, lsl #30
 8018aae:	0066664f 	rsbeq	r6, r6, pc, asr #12
 8018ab2:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8018ab6:	3a79616c 	bcc	9e7106e <__exidx_end+0x1e5691a>
 8018aba:	000a7325 	andeq	r7, sl, r5, lsr #6
 8018abe:	70746674 	rsbsvc	r6, r4, r4, ror r6
 8018ac2:	0a73253a 	beq	9ce1fb2 <__exidx_end+0x1cc785e>
 8018ac6:	72657600 	rsbvc	r7, r5, #0, 12
 8018aca:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8018ace:	0073253a 	rsbseq	r2, r3, sl, lsr r5
 8018ad2:	69747075 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, ip, sp, lr}^
 8018ad6:	203a656d 	eorscs	r6, sl, sp, ror #10
 8018ada:	0a737525 	beq	9cf5f76 <__exidx_end+0x1cdb822>
 8018ade:	52524500 	subspl	r4, r2, #0, 10
 8018ae2:	3f23524f 	svccc	0x0023524f
 8018ae6:	0a746567 	beq	9d3208a <__exidx_end+0x1d17936>
 8018aea:	74667400 	strbtvc	r7, [r6], #-1024	; 0xfffffc00
 8018aee:	64002370 	strvs	r2, [r0], #-880	; 0xfffffc90
 8018af2:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 8018af6:	00237961 	eoreq	r7, r3, r1, ror #18
 8018afa:	4f525245 	svcmi	0x00525245
 8018afe:	0a212352 	beq	886184e <__exidx_end+0x8470fa>
 8018b02:	52524500 	subspl	r4, r2, #0, 10
 8018b06:	3f23524f 	svccc	0x0023524f
 8018b0a:	6572000a 	ldrbvs	r0, [r2, #-10]!
 8018b0e:	746f6f62 	strbtvc	r6, [pc], #-3938	; 8018b16 <s_GPIO_PINs+0x9c>
 8018b12:	6c002323 	stcvs	3, cr2, [r0], {35}	; 0x23
 8018b16:	23747369 	cmncs	r4, #-1543503871	; 0xa4000001
 8018b1a:	73696c00 	cmnvc	r9, #0, 24
 8018b1e:	002a2374 	eoreq	r2, sl, r4, ror r3
 8018b22:	69747075 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, ip, sp, lr}^
 8018b26:	0023656d 	eoreq	r6, r3, sp, ror #10
 8018b2a:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8018b2e:	236e6f69 	cmncs	lr, #420	; 0x1a4
 8018b32:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
 8018b36:	61660023 	cmnvs	r6, r3, lsr #32
 8018b3a:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8018b3e:	00232379 	eoreq	r2, r3, r9, ror r3

08018b42 <s_Node>:
 8018b42:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8018b46:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8018b52:	41730000 	cmnmi	r3, r0
 8018b56:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 8018b5a:	31332e31 	teqcc	r3, r1, lsr lr
	...
 8018b66:	2043534f 	subcs	r5, r3, pc, asr #6
 8018b6a:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8018b6e:	00007265 	andeq	r7, r0, r5, ror #4
 8018b72:	00000000 	andeq	r0, r0, r0
 8018b76:	544c0000 	strbpl	r0, [ip], #-0
 8018b7a:	00000043 	andeq	r0, r0, r3, asr #32
	...
 8018b8a:	2043534f 	subcs	r5, r3, pc, asr #6
 8018b8e:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 8018b92:	0000746e 	andeq	r7, r0, lr, ror #8
 8018b96:	00000000 	andeq	r0, r0, r0
 8018b9a:	44520000 	ldrbmi	r0, [r2], #-0
 8018b9e:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 8018ba2:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 8018ba6:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 8018baa:	0000796c 	andeq	r7, r0, ip, ror #18
 8018bae:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 8018bb2:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 8018bbe:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 8018bc2:	00004944 	andeq	r4, r0, r4, asr #18
	...
 8018bd2:	00504444 	subseq	r4, r0, r4, asr #8
	...

08018be4 <s_Output>:
 8018be4:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 8018bf0:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 8018bfc:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 8018c00:	00726f74 	rsbseq	r6, r2, r4, ror pc
 8018c04:	00000000 	andeq	r0, r0, r0
 8018c08:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8018c0c:	0000006c 	andeq	r0, r0, ip, rrx
 8018c10:	00000000 	andeq	r0, r0, r0
 8018c14:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 8018c18:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 8018c1c:	00000000 	andeq	r0, r0, r0
 8018c20:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 8018c2c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8018c30:	00006769 	andeq	r6, r0, r9, ror #14
 8018c34:	00000000 	andeq	r0, r0, r0
 8018c38:	70657453 	rsbvc	r7, r5, r3, asr r4
 8018c3c:	00726570 	rsbseq	r6, r2, r0, ror r5
 8018c40:	00000000 	andeq	r0, r0, r0
 8018c44:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 8018c48:	00007265 	andeq	r7, r0, r5, ror #4
 8018c4c:	00000000 	andeq	r0, r0, r0
 8018c50:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8018c54:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8018c58:	00000000 	andeq	r0, r0, r0
 8018c5c:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 8018c60:	00006c61 	andeq	r6, r0, r1, ror #24
 8018c64:	00000000 	andeq	r0, r0, r0
 8018c68:	20424752 	subcs	r4, r2, r2, asr r7
 8018c6c:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 8018c70:	0000006c 	andeq	r0, r0, ip, rrx

08018c74 <RemoteConfig::s_GET>:
 8018c74:	080108e1 	stmdaeq	r1, {r0, r5, r6, r7, fp}
 8018c78:	00000000 	andeq	r0, r0, r0
 8018c7c:	08018b0c 	stmdaeq	r1, {r2, r3, r8, r9, fp, pc}
 8018c80:	00000008 	andeq	r0, r0, r8
 8018c84:	0800fdad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, sl, fp, ip, sp, lr, pc}
 8018c88:	00000000 	andeq	r0, r0, r0
 8018c8c:	08018b15 	stmdaeq	r1, {r0, r2, r4, r8, r9, fp, pc}
 8018c90:	00000005 	andeq	r0, r0, r5
 8018c94:	0800fdad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, sl, fp, ip, sp, lr, pc}
 8018c98:	00000000 	andeq	r0, r0, r0
 8018c9c:	08018b1b 	stmdaeq	r1, {r0, r1, r3, r4, r8, r9, fp, pc}
 8018ca0:	00000006 	andeq	r0, r0, r6
 8018ca4:	0800ffa1 	stmdaeq	r0, {r0, r5, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8018ca8:	00000000 	andeq	r0, r0, r0
 8018cac:	08018b22 	stmdaeq	r1, {r1, r5, r8, r9, fp, pc}
 8018cb0:	00000007 	andeq	r0, r0, r7
 8018cb4:	0800ff5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, sl, fp, ip, sp, lr, pc}
 8018cb8:	00000000 	andeq	r0, r0, r0
 8018cbc:	08018b2a 	stmdaeq	r1, {r1, r3, r5, r8, r9, fp, pc}
 8018cc0:	00000008 	andeq	r0, r0, r8
 8018cc4:	0800fe85 	stmdaeq	r0, {r0, r2, r7, r9, sl, fp, ip, sp, lr, pc}
 8018cc8:	00000000 	andeq	r0, r0, r0
 8018ccc:	08018af1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, fp, pc}
 8018cd0:	00000008 	andeq	r0, r0, r8
 8018cd4:	08010225 	stmdaeq	r1, {r0, r2, r5, r9}
 8018cd8:	00000000 	andeq	r0, r0, r0
 8018cdc:	08018b33 	stmdaeq	r1, {r0, r1, r4, r5, r8, r9, fp, pc}
 8018ce0:	00010004 	andeq	r0, r1, r4
 8018ce4:	0800ff05 	stmdaeq	r0, {r0, r2, r8, r9, sl, fp, ip, sp, lr, pc}
 8018ce8:	00000000 	andeq	r0, r0, r0
 8018cec:	08018aeb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r9, fp, pc}
 8018cf0:	00000005 	andeq	r0, r0, r5
 8018cf4:	080105c9 	stmdaeq	r1, {r0, r3, r6, r7, r8, sl}
 8018cf8:	00000000 	andeq	r0, r0, r0
 8018cfc:	08018b38 	stmdaeq	r1, {r3, r4, r5, r8, r9, fp, pc}
 8018d00:	00000009 	andeq	r0, r0, r9

08018d04 <RemoteConfig::s_SET>:
 8018d04:	0800fee1 	stmdaeq	r0, {r0, r5, r6, r7, r9, sl, fp, ip, sp, lr, pc}
 8018d08:	00000000 	andeq	r0, r0, r0
 8018d0c:	08018aeb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r9, fp, pc}
 8018d10:	00010005 	andeq	r0, r1, r5
 8018d14:	0800fff5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8018d18:	00000000 	andeq	r0, r0, r0
 8018d1c:	08018af1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, fp, pc}
 8018d20:	00010008 	andeq	r0, r1, r8
 8018d24:	6f626552 	svcvs	0x00626552
 8018d28:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 8018d2c:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 8018d30:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 8018d34:	6f6f6265 	svcvs	0x006f6265
 8018d38:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8018d3c:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 8018d40:	6f637200 	svcvs	0x00637200
 8018d44:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8018d48:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8018d4c:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 8018d50:	6b726f77 	blvs	9cb4b34 <__exidx_end+0x1c9a3e0>
 8018d54:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8018d58:	73696400 	cmnvc	r9, #0, 8
 8018d5c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8018d60:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8018d64:	74726100 	ldrbtvc	r6, [r2], #-256	; 0xffffff00
 8018d68:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8018d6c:	00747874 	rsbseq	r7, r4, r4, ror r8
 8018d70:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 8018d74:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8018d78:	00747874 	rsbseq	r7, r4, r4, ror r8

08018d7c <RemoteConfig::s_TXT>:
 8018d7c:	0801022d 	stmdaeq	r1, {r0, r2, r3, r5, r9}
 8018d80:	00000000 	andeq	r0, r0, r0
 8018d84:	080104e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, sl}
 8018d88:	00000000 	andeq	r0, r0, r0
 8018d8c:	08018d41 	stmdaeq	r1, {r0, r6, r8, sl, fp, pc}
 8018d90:	0000000b 	andeq	r0, r0, fp
 8018d94:	0000000c 	andeq	r0, r0, ip
 8018d98:	08010259 	stmdaeq	r1, {r0, r3, r4, r6, r9}
 8018d9c:	00000000 	andeq	r0, r0, r0
 8018da0:	0801051d 	stmdaeq	r1, {r0, r2, r3, r4, r8, sl}
 8018da4:	00000000 	andeq	r0, r0, r0
 8018da8:	08018d4d 	stmdaeq	r1, {r0, r2, r3, r6, r8, sl, fp, pc}
 8018dac:	0000000b 	andeq	r0, r0, fp
 8018db0:	00000000 	andeq	r0, r0, r0
 8018db4:	080102dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r9}
 8018db8:	00000000 	andeq	r0, r0, r0
 8018dbc:	0801059d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, sl}
 8018dc0:	00000000 	andeq	r0, r0, r0
 8018dc4:	08018d59 	stmdaeq	r1, {r0, r3, r4, r6, r8, sl, fp, pc}
 8018dc8:	0000000b 	andeq	r0, r0, fp
 8018dcc:	0000000f 	andeq	r0, r0, pc
 8018dd0:	08010285 	stmdaeq	r1, {r0, r2, r7, r9}
 8018dd4:	00000000 	andeq	r0, r0, r0
 8018dd8:	08010545 	stmdaeq	r1, {r0, r2, r6, r8, sl}
 8018ddc:	00000000 	andeq	r0, r0, r0
 8018de0:	08018d65 	stmdaeq	r1, {r0, r2, r5, r6, r8, sl, fp, pc}
 8018de4:	0000000a 	andeq	r0, r0, sl
 8018de8:	00000001 	andeq	r0, r0, r1
 8018dec:	080102b1 	stmdaeq	r1, {r0, r4, r5, r7, r9}
 8018df0:	00000000 	andeq	r0, r0, r0
 8018df4:	08010571 	stmdaeq	r1, {r0, r4, r5, r6, r8, sl}
 8018df8:	00000000 	andeq	r0, r0, r0
 8018dfc:	08018d70 	stmdaeq	r1, {r4, r5, r6, r8, sl, fp, pc}
 8018e00:	0000000b 	andeq	r0, r0, fp
 8018e04:	00000003 	andeq	r0, r0, r3
 8018e08:	00544547 	subseq	r4, r4, r7, asr #10
 8018e0c:	54534f50 	ldrbpl	r4, [r3], #-3920	; 0xfffff0b0
 8018e10:	54544800 	ldrbpl	r4, [r4], #-2048	; 0xfffff800
 8018e14:	0a200050 	beq	8818f5c <__exidx_end+0x7fe808>
 8018e18:	312e3100 			; <UNDEFINED> instruction: 0x312e3100
 8018e1c:	43003a00 	movwmi	r3, #2560	; 0xa00
 8018e20:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8018e24:	542d746e 	strtpl	r7, [sp], #-1134	; 0xfffffb92
 8018e28:	00657079 	rsbeq	r7, r5, r9, ror r0
 8018e2c:	61003b20 	tstvs	r0, r0, lsr #22
 8018e30:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 8018e34:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 8018e38:	6a2f6e6f 	bvs	8bf47fc <__exidx_end+0xbda0a8>
 8018e3c:	006e6f73 	rsbeq	r6, lr, r3, ror pc
 8018e40:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8018e44:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8018e48:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8018e4c:	2f006874 	svccs	0x00006874
 8018e50:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8018e54:	74682e78 	strbtvc	r2, [r8], #-3704	; 0xfffff188
 8018e58:	2f006c6d 	svccs	0x00006c6d
 8018e5c:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8018e60:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8018e64:	2f007373 	svccs	0x00007373
 8018e68:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8018e6c:	736a2e78 	cmnvc	sl, #120, 28	; 0x780
 8018e70:	736a2f00 	cmnvc	sl, #0, 30
 8018e74:	002f6e6f 	eoreq	r6, pc, pc, ror #28
 8018e78:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8018e7c:	72657600 	rsbvc	r7, r5, #0, 12
 8018e80:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8018e84:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 8018e88:	00656d69 	rsbeq	r6, r5, r9, ror #26
 8018e8c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8018e90:	0079616c 	rsbseq	r6, r9, ip, ror #2
 8018e94:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8018e98:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8018e9c:	6a2f0079 	bvs	8bd9088 <__exidx_end+0xbbe934>
 8018ea0:	2f6e6f73 	svccs	0x006e6f73
 8018ea4:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8018ea8:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
 8018eac:	6f6f6265 	svcvs	0x006f6265
 8018eb0:	64690074 	strbtvs	r0, [r9], #-116	; 0xffffff8c
 8018eb4:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 8018eb8:	3c007966 			; <UNDEFINED> instruction: 0x3c007966
 8018ebc:	434f4421 	movtmi	r4, #62497	; 0xf421
 8018ec0:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8018ec4:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8018ec8:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8018ecc:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8018ed0:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 8018ed4:	3e646165 	powccsz	f6, f4, f5
 8018ed8:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8018edc:	533e656c 	teqpl	lr, #108, 10	; 0x1b000000
 8018ee0:	696d6275 	stmdbvs	sp!, {r0, r2, r4, r5, r6, r9, sp, lr}^
 8018ee4:	742f3c74 	strtvc	r3, [pc], #-3188	; 8018eec <RemoteConfig::s_TXT+0x170>
 8018ee8:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 8018eec:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8018ef0:	3e646165 	powccsz	f6, f4, f5
 8018ef4:	6f623c0a 	svcvs	0x00623c0a
 8018ef8:	3c3e7964 			; <UNDEFINED> instruction: 0x3c3e7964
 8018efc:	4f3e3168 	svcmi	0x003e3168
 8018f00:	682f3c4b 	stmdavs	pc!, {r0, r1, r3, r6, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8018f04:	2f3c3e31 	svccs	0x003c3e31
 8018f08:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8018f0c:	2f3c0a3e 	svccs	0x003c0a3e
 8018f10:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8018f14:	42000a3e 	andmi	r0, r0, #253952	; 0x3e000
 8018f18:	52206461 	eorpl	r6, r0, #1627389952	; 0x61000000
 8018f1c:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 8018f20:	4e007473 	mcrmi	4, 0, r7, cr0, cr3, {3}
 8018f24:	4620746f 	strtmi	r7, [r0], -pc, ror #8
 8018f28:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 8018f2c:	71655200 	cmnvc	r5, r0, lsl #4
 8018f30:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
 8018f34:	746e4520 	strbtvc	r4, [lr], #-1312	; 0xfffffae0
 8018f38:	20797469 	rsbscs	r7, r9, r9, ror #8
 8018f3c:	206f6f54 	rsbcs	r6, pc, r4, asr pc	; <UNPREDICTABLE>
 8018f40:	6772614c 	ldrbvs	r6, [r2, -ip, asr #2]!
 8018f44:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
 8018f48:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
 8018f4c:	52552d74 	subspl	r2, r5, #116, 26	; 0x1d00
 8018f50:	6f542049 	svcvs	0x00542049
 8018f54:	6f4c206f 	svcvs	0x004c206f
 8018f58:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 8018f5c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 8018f60:	206c616e 	rsbcs	r6, ip, lr, ror #2
 8018f64:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8018f68:	45207265 	strmi	r7, [r0, #-613]!	; 0xfffffd9b
 8018f6c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 8018f70:	74654d00 	strbtvc	r4, [r5], #-3328	; 0xfffff300
 8018f74:	20646f68 	rsbcs	r6, r4, r8, ror #30
 8018f78:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8018f7c:	6c706d49 	ldclvs	13, cr6, [r0], #-292	; 0xfffffedc
 8018f80:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8018f84:	00646574 	rsbeq	r6, r4, r4, ror r5
 8018f88:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 8018f8c:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 8018f90:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8018f94:	70707553 	rsbsvc	r7, r0, r3, asr r5
 8018f98:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
 8018f9c:	6e550064 	cdpvs	0, 5, cr0, cr5, cr4, {3}
 8018fa0:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 8018fa4:	7245206e 	subvc	r2, r5, #110	; 0x6e
 8018fa8:	00726f72 	rsbseq	r6, r2, r2, ror pc
 8018fac:	3c004b4f 			; <UNDEFINED> instruction: 0x3c004b4f
 8018fb0:	434f4421 	movtmi	r4, #62497	; 0xf421
 8018fb4:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8018fb8:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8018fbc:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8018fc0:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8018fc4:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 8018fc8:	3e646165 	powccsz	f6, f4, f5
 8018fcc:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8018fd0:	253e656c 	ldrcs	r6, [lr, #-1388]!	; 0xfffffa94
 8018fd4:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8018fd8:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8018fdc:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 8018fe0:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 8018fe4:	0a3e6461 	beq	8fb2170 <__exidx_end+0xf97a1c>
 8018fe8:	646f623c 	strbtvs	r6, [pc], #-572	; 8018ff0 <RemoteConfig::s_TXT+0x274>
 8018fec:	683c3e79 	ldmdavs	ip!, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8018ff0:	73253e31 			; <UNDEFINED> instruction: 0x73253e31
 8018ff4:	31682f3c 	cmncc	r8, ip, lsr pc
 8018ff8:	622f3c3e 	eorvs	r3, pc, #15872	; 0x3e00
 8018ffc:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8019000:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8019004:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8019008:	5448000a 	strbpl	r0, [r8], #-10
 801900c:	312f5054 	qsubcc	r5, r4, pc	; <UNPREDICTABLE>
 8019010:	2520312e 	strcs	r3, [r0, #-302]!	; 0xfffffed2
 8019014:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8019018:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
 801901c:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
 8019020:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8019024:	6f430a0d 	svcvs	0x00430a0d
 8019028:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 801902c:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 8019030:	203a6570 	eorscs	r6, sl, r0, ror r5
 8019034:	0a0d7325 	beq	8375cd0 <__exidx_end+0x35b57c>
 8019038:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 801903c:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8019040:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8019044:	203a6874 	eorscs	r6, sl, r4, ror r8
 8019048:	0a0d7525 	beq	83764e4 <__exidx_end+0x35bd90>
 801904c:	6e6e6f43 	cdpvs	15, 6, cr6, cr14, cr3, {2}
 8019050:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8019054:	203a6e6f 	eorscs	r6, sl, pc, ror #28
 8019058:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 801905c:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
 8019060:	 	ldrbvs	r0, [r4, #-10]!

08019062 <contentType>:
 8019062:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8019066:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 801906a:	0000006c 	andeq	r0, r0, ip, rrx
	...
 8019082:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8019086:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 80190a2:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 80190a6:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 80190aa:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 80190ae:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 80190c2:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 80190c6:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 80190ca:	2f6e6f69 	svccs	0x006e6f69
 80190ce:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

080190e2 <RemoteConfigConst::PARAMS_DISABLE>:
 80190e2:	61736964 	cmnvs	r3, r4, ror #18
 80190e6:	00656c62 	rsbeq	r6, r5, r2, ror #24

080190ea <RemoteConfigConst::PARAMS_FILE_NAME>:
 80190ea:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 80190ee:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 80190f2:	00747874 	rsbseq	r7, r4, r4, ror r8

080190f6 <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 80190f6:	70736964 	rsbsvc	r6, r3, r4, ror #18
 80190fa:	5f79616c 	svcpl	0x0079616c
 80190fe:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08019103 <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 8019103:	61736964 	cmnvs	r3, r4, ror #18
 8019107:	5f656c62 	svcpl	0x00656c62
 801910b:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 801910f:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08019111 <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 8019111:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8019115:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8019119:	6f6f6265 	svcvs	0x006f6265
 801911d:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

0801911f <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 801911f:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8019123:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 8018bbf <s_Node+0x7d>
 8019127:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 801912b:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

0801912d <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 801912d:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8019131:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 8019135:	6f746361 	svcvs	0x00746361
 8019139:	7b007972 	blvc	8037709 <__exidx_end+0x1cfb5>
 801913d:	73696c22 	cmnvc	r9, #8704	; 0x2200
 8019141:	7b3a2274 	blvc	8ea1b19 <__exidx_end+0xe873c5>
 8019145:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 8019149:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 801914d:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8019151:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8019155:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 8019159:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 801915d:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8019161:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8019165:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8019169:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 801916d:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8019171:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8019175:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8019179:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801917d:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8019181:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8019185:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8019189:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 801918d:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 8019191:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 8019195:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 8019199:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 801919d:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80191a1:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 80191a5:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 80191a9:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 80191ad:	616f6222 	cmnvs	pc, r2, lsr #4
 80191b1:	3a226472 	bcc	88b2381 <__exidx_end+0x897c2d>
 80191b5:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 80191b9:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 80191bd:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 80191c1:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 80191c5:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 80191c9:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 80191cd:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 80191d1:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 80191d5:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 80191d9:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 80191dd:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 80191e1:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 80191e5:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 80191e9:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 80191ed:	7b000a7d 	blvc	801bbe9 <__exidx_end+0x1495>
 80191f1:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 80191f5:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80191f9:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 80191fd:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8019201:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8019205:	7b3a2273 	blvc	8ea1bd9 <__exidx_end+0xe87485>
 8019209:	74726122 	ldrbtvc	r6, [r2], #-290	; 0xfffffede
 801920d:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8019211:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8019215:	7241223a 	subvc	r2, r1, #-1610612733	; 0xa0000003
 8019219:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 801921d:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 8019221:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 8019225:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8019229:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 801922d:	4d44223a 	sfmmi	f2, 2, [r4, #-232]	; 0xffffff18
 8019231:	69502058 	ldmdbvs	r0, {r3, r4, r6, sp}^
 8019235:	226c6578 	rsbcs	r6, ip, #120, 10	; 0x1e000000
 8019239:	6964222c 	stmdbvs	r4!, {r2, r3, r5, r9, sp}^
 801923d:	616c7073 	smcvs	50947	; 0xc703
 8019241:	78742e79 	ldmdavc	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp}^
 8019245:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 8019249:	70736944 	rsbsvc	r6, r3, r4, asr #18
 801924d:	2079616c 	rsbscs	r6, r9, ip, ror #2
 8019251:	22464455 	subcs	r4, r6, #1426063360	; 0x55000000
 8019255:	656e222c 	strbvs	r2, [lr, #-556]!	; 0xfffffdd4
 8019259:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 801925d:	78742e6b 	ldmdavc	r4!, {r0, r1, r3, r5, r6, r9, sl, fp, sp}^
 8019261:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 8019265:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8019269:	226b726f 	rsbcs	r7, fp, #-268435450	; 0xf0000006
 801926d:	6372222c 	cmnvs	r2, #44, 4	; 0xc0000002
 8019271:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8019275:	78742e67 	ldmdavc	r4!, {r0, r1, r2, r5, r6, r9, sl, fp, sp}^
 8019279:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 801927d:	6f6d6552 	svcvs	0x006d6552
 8019281:	63206574 			; <UNDEFINED> instruction: 0x63206574
 8019285:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8019289:	61727567 	cmnvs	r2, r7, ror #10
 801928d:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8019291:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 8019295:	2f637273 	svccs	0x00637273
 8019299:	70747468 	rsbsvc	r7, r4, r8, ror #8
 801929d:	65672f64 	strbvs	r2, [r7, #-3940]!	; 0xfffff09c
 80192a1:	69665f74 	stmdbvs	r6!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 80192a5:	635f656c 	cmpvs	pc, #108, 10	; 0x1b000000
 80192a9:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 80192ad:	632e746e 			; <UNDEFINED> instruction: 0x632e746e
 80192b1:	67007070 	smlsdxvs	r0, r0, r0, r7
 80192b5:	665f7465 	ldrbvs	r7, [pc], -r5, ror #8
 80192b9:	5f656c69 	svcpl	0x00656c69
 80192bd:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 80192c1:	00746e65 	rsbseq	r6, r4, r5, ror #28
 80192c5:	29287325 	stmdbcs	r8!, {r0, r2, r5, r8, r9, ip, sp, lr}
 80192c9:	2c732520 	cfldr64cs	mvdx2, [r3], #-128	; 0xffffff80
 80192cd:	6e696c20 	cdpvs	12, 6, cr6, cr9, cr0, {1}
 80192d1:	69252065 	stmdbvs	r5!, {r0, r2, r5, r6, sp}
 80192d5:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 80192d9:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 80192dd:	000a6425 	andeq	r6, sl, r5, lsr #8
 80192e1:	202d2d3c 	eorcs	r2, sp, ip, lsr sp
 80192e5:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 80192e9:	64253a73 	strtvs	r3, [r5], #-2675	; 0xfffff58d
 80192ed:	 	teqcs	ip, sl

080192ef <index_html>:
 80192ef:	4f44213c 	svcmi	0x0044213c
 80192f3:	50595443 	subspl	r5, r9, r3, asr #8
 80192f7:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 80192fb:	0a3e6c6d 	beq	8fb44b7 <__exidx_end+0xf99d63>
 80192ff:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 8019303:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8019307:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 801930b:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 801930f:	6b6e696c 	blvs	9bb38c7 <__exidx_end+0x1b99173>
 8019313:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 8019317:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 801931b:	73656c79 	cmnvc	r5, #30976	; 0x7900
 801931f:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8019323:	72682022 	rsbvc	r2, r8, #34	; 0x22
 8019327:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 801932b:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 801932f:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8019333:	20227373 	eorcs	r7, r2, r3, ror r3
 8019337:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 801933b:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 801933f:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 8019343:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 8019347:	0a3e656c 	beq	8fb28ff <__exidx_end+0xf981ab>
 801934b:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 801934f:	0a3e6461 	beq	8fb24db <__exidx_end+0xf97d87>
 8019353:	646f623c 	strbtvs	r6, [pc], #-572	; 801935b <index_html+0x6c>
 8019357:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 801935b:	6165683c 	cmnvs	r5, ip, lsr r8
 801935f:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 8019363:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 8019367:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 801936b:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 801936f:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 8019373:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8019377:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801937b:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 801937f:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8019383:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 8019387:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 801938b:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 801938f:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 8019393:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8019397:	6f746365 	svcvs	0x00746365
 801939b:	20227972 	eorcs	r7, r2, r2, ror r9
 801939f:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 80193a3:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 80193a7:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 80193ab:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 80193af:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 80193b3:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 80193b7:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 80193bb:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 80193bf:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 80193c3:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 80193c7:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 80193cb:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 80193cf:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 80193d3:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 80193d7:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 80193db:	20227478 	eorcs	r7, r2, r8, ror r4
 80193df:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 80193e3:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 80193e7:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 80193eb:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 80193ef:	0a3e656c 	beq	8fb29a7 <__exidx_end+0xf98253>
 80193f3:	6f663c09 	svcvs	0x00663c09
 80193f7:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 80193fb:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 80193ff:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8019403:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 8019407:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801940b:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 801940f:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8019413:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 8019417:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 801941b:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 801941f:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 8019423:	20747069 	rsbscs	r7, r4, r9, rrx
 8019427:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 801942b:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 801942f:	6a2e7865 	bvs	8bb75cb <__exidx_end+0xb9ce77>
 8019433:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 8019437:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 801943b:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801943f:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 8019443:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8019447:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801944b:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 801944f:	 	strbtvs	r6, [pc], #-522	; 8019457 <styles_css+0x7>

08019450 <styles_css>:
 8019450:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8019454:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8019458:	63616220 	cmnvs	r1, #32, 4
 801945c:	6f72676b 	svcvs	0x0072676b
 8019460:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 8019464:	6f6c6f63 	svcvs	0x006c6f63
 8019468:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 801946c:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8019470:	30322c30 	eorscc	r2, r2, r0, lsr ip
 8019474:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 8019478:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 801947c:	6f6c6f63 	svcvs	0x006c6f63
 8019480:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 8019484:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8019488:	202c3535 	eorcs	r3, ip, r5, lsr r5
 801948c:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 8019490:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 8019494:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8019498:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 801949c:	200a7b20 	andcs	r7, sl, r0, lsr #22
 80194a0:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 80194a4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80194a8:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 80194ac:	0a3b7865 	beq	8ef7648 <__exidx_end+0xedcef4>
 80194b0:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 80194b4:	0a7b2069 	beq	9ee1660 <__exidx_end+0x1ec6f0c>
 80194b8:	696c2020 	stmdbvs	ip!, {r5, sp}^
 80194bc:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 80194c0:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 80194c4:	6f6e203a 	svcvs	0x006e203a
 80194c8:	0a3b656e 	beq	8ef2a88 <__exidx_end+0xed8334>
 80194cc:	616d2020 	cmnvs	sp, r0, lsr #32
 80194d0:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 80194d4:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 80194d8:	70352078 	eorsvc	r2, r5, r8, ror r0
 80194dc:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 80194e0:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 80194e4:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 80194e8:	200a7b20 	andcs	r7, sl, r0, lsr #22
 80194ec:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 80194f0:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80194f4:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 80194f8:	0a3b7865 	beq	8ef7694 <__exidx_end+0xedcf40>
 80194fc:	6f622020 	svcvs	0x00622020
 8019500:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 8019504:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 8019508:	3a737569 	bcc	9cf6ab4 <__exidx_end+0x1cdc360>
 801950c:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8019510:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8019514:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8019518:	203a7265 	eorscs	r7, sl, r5, ror #4
 801951c:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8019520:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8019524:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8019528:	0a3b7870 	beq	8ef76f0 <__exidx_end+0xedcf9c>
 801952c:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 8019530:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 8019534:	0a7b2072 	beq	9ee1704 <__exidx_end+0x1ec6fb0>
 8019538:	69642020 	stmdbvs	r4!, {r5, sp}^
 801953c:	616c7073 	smcvs	50947	; 0xc703
 8019540:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 8019544:	3b78656c 	blcc	9e32afc <__exidx_end+0x1e183a8>
 8019548:	6a20200a 	bvs	8821578 <__exidx_end+0x806e24>
 801954c:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 8019550:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 8019554:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8019558:	203a746e 	eorscs	r7, sl, lr, ror #8
 801955c:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 8019560:	0a3b7265 	beq	8ef5efc <__exidx_end+0xedb7a8>
 8019564:	6f622020 	svcvs	0x00622020
 8019568:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 801956c:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 8019570:	3a737569 	bcc	9cf6b1c <__exidx_end+0x1cdc3c8>
 8019574:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8019578:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 801957c:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8019580:	203a7265 	eorscs	r7, sl, r5, ror #4
 8019584:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8019588:	72672064 	rsbvc	r2, r7, #100	; 0x64
 801958c:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8019590:	0a3b7870 	beq	8ef7758 <__exidx_end+0xedd004>
 8019594:	00000a7d 	andeq	r0, r0, sp, ror sl

08019598 <HttpContent>:
 8019598:	08018e5c 	stmdaeq	r1, {r2, r3, r4, r6, r9, sl, fp, pc}
 801959c:	08019450 	stmdaeq	r1, {r4, r6, sl, ip, pc}
 80195a0:	08018e68 	stmdaeq	r1, {r3, r5, r6, r9, sl, fp, pc}
 80195a4:	080195b0 	stmdaeq	r1, {r4, r5, r7, r8, sl, ip, pc}
 80195a8:	08018e50 	stmdaeq	r1, {r4, r6, r9, sl, fp, pc}
 80195ac:	080192ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r9, ip, pc}

080195b0 <index_js>:
 80195b0:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 80195b4:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 80195b8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80195bc:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 80195c0:	534a7465 	movtpl	r7, #42085	; 0xa465
 80195c4:	6a284e4f 	bvs	8a2cf08 <__exidx_end+0xa127b4>
 80195c8:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80195cc:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 80195d0:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 80195d4:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 80195d8:	6a2f273d 	bvs	8be32d4 <__exidx_end+0xbc8b80>
 80195dc:	2f6e6f73 	svccs	0x006e6f73
 80195e0:	202b2027 	eorcs	r2, fp, r7, lsr #32
 80195e4:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 80195e8:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 80195ec:	20797274 	rsbscs	r7, r9, r4, ror r2
 80195f0:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 80195f4:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 80195f8:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 80195fc:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 8019600:	20746961 	rsbscs	r6, r4, r1, ror #18
 8019604:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 8019608:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 801960c:	0a3b296c 	beq	8ee3bc4 <__exidx_end+0xec9470>
 8019610:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8019614:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 8019618:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 801961c:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 8019620:	73657220 	cmnvc	r5, #32, 4
 8019624:	6f736a2e 	svcvs	0x00736a2e
 8019628:	3b29286e 	blcc	8a637e8 <__exidx_end+0xa49094>
 801962c:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 8019630:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 8019634:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 8019638:	6f727265 	svcvs	0x00727265
 801963c:	7b202972 	blvc	8823c0c <__exidx_end+0x8094b8>
 8019640:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8019644:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 8019648:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 801964c:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 8019650:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 8019654:	3b29726f 	blcc	8a76018 <__exidx_end+0xa5b8c4>
 8019658:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 801965c:	0a0a7d0a 	beq	82b8a8c <__exidx_end+0x29e338>
 8019660:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8019664:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8019668:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801966c:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 8019670:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8019674:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8019678:	20292874 	eorcs	r2, r9, r4, ror r8
 801967c:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8019680:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8019684:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8019688:	6177613d 	cmnvs	r7, sp, lsr r1
 801968c:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8019690:	534a7465 	movtpl	r7, #42085	; 0xa465
 8019694:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8019698:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801969c:	0a3b2927 	beq	8ee3b40 <__exidx_end+0xec93ec>
 80196a0:	6f640909 	svcvs	0x00640909
 80196a4:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 80196a8:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 80196ac:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 80196b0:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 80196b4:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 80196b8:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 80196bc:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 80196c0:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 80196c4:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 80196c8:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 80196cc:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 80196d0:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 80196d4:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 80196d8:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 80196dc:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 80196e0:	2b656d61 	blcs	9974c6c <__exidx_end+0x195a518>
 80196e4:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8019664 <index_js+0xb4>
 80196e8:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 80196ec:	2b223e69 	blcs	88a9098 <__exidx_end+0x88e944>
 80196f0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80196f4:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 80196f8:	6f6e2e74 	svcvs	0x006e2e74
 80196fc:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 8019700:	2b657079 	blcs	99758ec <__exidx_end+0x195b198>
 8019704:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8019684 <index_js+0xd4>
 8019708:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801970c:	2b223e69 	blcs	88a90b8 <__exidx_end+0x88e964>
 8019710:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8019714:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8019718:	6f6e2e74 	svcvs	0x006e2e74
 801971c:	702e6564 	eorvc	r6, lr, r4, ror #10
 8019720:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 8019724:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8019728:	2f3c222b 	svccs	0x003c222b
 801972c:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8019730:	0a7d0a3b 	beq	9f5c024 <__exidx_end+0x1f418d0>
 8019734:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 8019738:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 801973c:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8019740:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 8019744:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 8019748:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801974c:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8019750:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 8019754:	0a7b2029 	beq	9ee1800 <__exidx_end+0x1ec70ac>
 8019758:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 801975c:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 8019760:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8019764:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8019768:	6177613d 	cmnvs	r7, sp, lsr r1
 801976c:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8019770:	534a7465 	movtpl	r7, #42085	; 0xa465
 8019774:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8019778:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801977c:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8019780:	3b292779 	blcc	8a6356c <__exidx_end+0xa48e18>
 8019784:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8019788:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801978c:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8019790:	0a22223d 	beq	88a208c <__exidx_end+0x887938>
 8019794:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8019798:	66207465 	strtvs	r7, [r0], -r5, ror #8
 801979c:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 80197a0:	73656d61 	cmnvc	r5, #6208	; 0x1840
 80197a4:	6a624f3d 	bvs	98ad4a0 <__exidx_end+0x1892d4c>
 80197a8:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 80197ac:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 80197b0:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 80197b4:	6f746365 	svcvs	0x00746365
 80197b8:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 80197bc:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 80197c0:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 80197c4:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 80197c8:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 80197cc:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 80197d0:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 80197d4:	6145726f 	cmpvs	r5, pc, ror #4
 80197d8:	66286863 	strtvs	r6, [r8], -r3, ror #16
 80197dc:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 80197e0:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 80197e4:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 80197e8:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 80197ec:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 80197f0:	20726176 	rsbscs	r6, r2, r6, ror r1
 80197f4:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 80197f8:	203d2065 	eorscs	r2, sp, r5, rrx
 80197fc:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8019800:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8019804:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 8019808:	73656c69 	cmnvc	r5, #26880	; 0x6900
 801980c:	6b5b5d22 	blvs	96f0c9c <__exidx_end+0x16d6548>
 8019810:	3b5d7965 	blcc	9777dac <__exidx_end+0x175d658>
 8019814:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8019818:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 801981c:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 8019820:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 8019824:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8019828:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 801982c:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 8019830:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 8019834:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 8019838:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 801983c:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 8019840:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 8019844:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8019848:	0a3b223e 	beq	8ee2148 <__exidx_end+0xec79f4>
 801984c:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 8019850:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8019854:	6f640909 	svcvs	0x00640909
 8019858:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 801985c:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8019860:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8019864:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8019868:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 801986c:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 8019870:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8019874:	6f746365 	svcvs	0x00746365
 8019878:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 801987c:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 8019880:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 8019884:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 8019888:	3b6c6d74 	blcc	9b34e60 <__exidx_end+0x1b1a70c>
 801988c:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8019890:	5f746567 	svcpl	0x00746567
 8019894:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 8019898:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 801989c:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 80198a0:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 80198a4:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 80198a8:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 80198ac:	20636e79 	rsbcs	r6, r3, r9, ror lr
 80198b0:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 80198b4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80198b8:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 80198bc:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 80198c0:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80198c4:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 80198c8:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 80198cc:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 80198d0:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 80198d4:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 80198d8:	6177613d 	cmnvs	r7, sp, lsr r1
 80198dc:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 80198e0:	534a7465 	movtpl	r7, #42085	; 0xa465
 80198e4:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 80198e8:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80198ec:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 80198f0:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 80198f4:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 80198f8:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 80198fc:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 8019900:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 8019904:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 8019908:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 801990c:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 8019910:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 8019914:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8019918:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 801991c:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 8019920:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 8019924:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 8019928:	2b22563e 	blcs	88af228 <__exidx_end+0x894ad4>
 801992c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8019930:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 8019934:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8019938:	2b6e6f69 	blcs	9bb56e4 <__exidx_end+0x1b9af90>
 801993c:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80198bc <index_js+0x30c>
 8019940:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8019944:	2b223e69 	blcs	88a92f0 <__exidx_end+0x88eb9c>
 8019948:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801994c:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 8019950:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 8019954:	61642e64 	cmnvs	r4, r4, ror #28
 8019958:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 801995c:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8019960:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 8019964:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 8019968:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801996c:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 8019970:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 8019974:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 8019978:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 801997c:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 8019980:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 8019984:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 8019988:	6f697372 	svcvs	0x00697372
 801998c:	6f622e6e 	svcvs	0x00622e6e
 8019990:	2b647261 	blcs	993631c <__exidx_end+0x191bbc8>
 8019994:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8019914 <index_js+0x364>
 8019998:	3b223e69 	blcc	88a9344 <__exidx_end+0x88ebf0>
 801999c:	0a0a7d0a 	beq	82b8dcc <__exidx_end+0x29e678>
 80199a0:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 80199a4:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 80199a8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80199ac:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 80199b0:	745f7465 	ldrbvc	r7, [pc], #-1125	; 80199b8 <index_js+0x408>
 80199b4:	73287478 			; <UNDEFINED> instruction: 0x73287478
 80199b8:	20296c65 	eorcs	r6, r9, r5, ror #24
 80199bc:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 80199c0:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 80199c4:	613d7478 	teqvs	sp, r8, ror r4
 80199c8:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 80199cc:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 80199d0:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 80199d4:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 80199d8:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 80199dc:	2074656c 	rsbscs	r6, r4, ip, ror #10
 80199e0:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80199e4:	3b22223d 	blcc	88a22e0 <__exidx_end+0x887b8c>
 80199e8:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 80199ec:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 80199f0:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 80199f4:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 80199f8:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 80199fc:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 8019a00:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 8019a04:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 8019a08:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8019a0c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8019a10:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 8019a14:	0a7b2029 	beq	9ee1ac0 <__exidx_end+0x1ec736c>
 8019a18:	61760909 	cmnvs	r6, r9, lsl #18
 8019a1c:	61762072 	cmnvs	r6, r2, ror r0
 8019a20:	2065756c 	rsbcs	r7, r5, ip, ror #10
 8019a24:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 8019a28:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 8019a2c:	6b5b5d6c 	blvs	96f0fe4 <__exidx_end+0x16d6890>
 8019a30:	3b5d7965 	blcc	9777fcc <__exidx_end+0x175d878>
 8019a34:	2009090a 	andcs	r0, r9, sl, lsl #18
 8019a38:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8019a3c:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 8019a40:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 8019a44:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8019a48:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 8019a4c:	2f3c222b 	svccs	0x003c222b
 8019a50:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 8019a54:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8019a58:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 8019a5c:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 8019a60:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 8019a64:	742f3c3e 	strtvc	r3, [pc], #-3134	; 8019a6c <index_js+0x4bc>
 8019a68:	3b223e72 	blcc	88a9438 <__exidx_end+0x88ece4>
 8019a6c:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 8019a70:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 8019a74:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 8019a78:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 8019a7c:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 8019a80:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 8019a84:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 8019a88:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 8019a8c:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 8019a90:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8019a94:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8019a98:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8019a9c:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 8019aa0:	0a3b6c6d 	beq	8ef4c5c <__exidx_end+0xeda508>
 8019aa4:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 8019aa8:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8019aac:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8019ab0:	3b292874 	blcc	8a63c88 <__exidx_end+0xa49534>
 8019ab4:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 8019ab8:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 8019abc:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8019ac0:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8019ac4:	0a3b2928 	beq	8ee3f6c <__exidx_end+0xec9818>
 8019ac8:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 8019acc:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 8019ad0:	6f697372 	svcvs	0x00697372
 8019ad4:	3b29286e 	blcc	8a63c94 <__exidx_end+0xa49540>
 8019ad8:	0000000a 	andeq	r0, r0, sl

08019adc <s_aStorSize>:
 8019adc:	00000060 	andeq	r0, r0, r0, rrx
 8019ae0:	00000090 	muleq	r0, r0, r0
 8019ae4:	00000020 	andeq	r0, r0, r0, lsr #32
 8019ae8:	00000040 	andeq	r0, r0, r0, asr #32
 8019aec:	00000060 	andeq	r0, r0, r0, rrx
 8019af0:	00000040 	andeq	r0, r0, r0, asr #32
 8019af4:	00000020 	andeq	r0, r0, r0, lsr #32
 8019af8:	00000020 	andeq	r0, r0, r0, lsr #32
 8019afc:	000001e0 	andeq	r0, r0, r0, ror #3
 8019b00:	00000040 	andeq	r0, r0, r0, asr #32
 8019b04:	00000020 	andeq	r0, r0, r0, lsr #32
 8019b08:	00000060 	andeq	r0, r0, r0, rrx
 8019b0c:	00000030 	andeq	r0, r0, r0, lsr r0
 8019b10:	00000020 	andeq	r0, r0, r0, lsr #32
 8019b14:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 8019b18:	00000030 	andeq	r0, r0, r0, lsr r0
 8019b1c:	00000040 	andeq	r0, r0, r0, asr #32
 8019b20:	00000020 	andeq	r0, r0, r0, lsr #32
 8019b24:	00000060 	andeq	r0, r0, r0, rrx
 8019b28:	00000020 	andeq	r0, r0, r0, lsr #32
 8019b2c:	00000400 	andeq	r0, r0, r0, lsl #8
 8019b30:	00000020 	andeq	r0, r0, r0, lsr #32
 8019b34:	00000020 	andeq	r0, r0, r0, lsr #32
 8019b38:	00000040 	andeq	r0, r0, r0, asr #32
 8019b3c:	00000060 	andeq	r0, r0, r0, rrx
 8019b40:	00000020 	andeq	r0, r0, r0, lsr #32
 8019b44:	00000020 	andeq	r0, r0, r0, lsr #32
 8019b48:	00000020 	andeq	r0, r0, r0, lsr #32

08019b4c <vtable for StoreArtNet>:
	...
 8019b54:	080115a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, sl, ip}
 8019b58:	08011771 	stmdaeq	r1, {r0, r4, r5, r6, r8, r9, sl, ip}
 8019b5c:	080115b1 	stmdaeq	r1, {r0, r4, r5, r7, r8, sl, ip}
 8019b60:	08011785 	stmdaeq	r1, {r0, r2, r7, r8, r9, sl, ip}
 8019b64:	080115d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, sl, ip}
 8019b68:	08011605 	stmdaeq	r1, {r0, r2, r9, sl, ip}
 8019b6c:	08011631 	stmdaeq	r1, {r0, r4, r5, r9, sl, ip}
 8019b70:	0801166d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r9, sl, ip}
 8019b74:	0801169d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r9, sl, ip}
 8019b78:	080116d1 	stmdaeq	r1, {r0, r4, r6, r7, r9, sl, ip}
 8019b7c:	08011721 	stmdaeq	r1, {r0, r5, r8, r9, sl, ip}
 8019b80:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8019b84:	00000000 	andeq	r0, r0, r0
 8019b88:	080115ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, sl, ip}
 8019b8c:	0801177d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, r9, sl, ip}
 8019b90:	080115fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, sl, ip}
 8019b94:	08011629 	stmdaeq	r1, {r0, r3, r5, r9, sl, ip}
 8019b98:	08011665 	stmdaeq	r1, {r0, r2, r5, r6, r9, sl, ip}
 8019b9c:	08011695 	stmdaeq	r1, {r0, r2, r4, r7, r9, sl, ip}
 8019ba0:	080116c9 	stmdaeq	r1, {r0, r3, r6, r7, r9, sl, ip}
 8019ba4:	08011719 	stmdaeq	r1, {r0, r3, r4, r8, r9, sl, ip}
 8019ba8:	08011769 	stmdaeq	r1, {r0, r3, r5, r6, r8, r9, sl, ip}

08019bac <vtable for StoreDisplayUdf>:
	...
 8019bb4:	080117c1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl, ip}
 8019bb8:	08011809 	stmdaeq	r1, {r0, r3, fp, ip}
 8019bbc:	080117e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, r9, sl, ip}
 8019bc0:	080117c5 	stmdaeq	r1, {r0, r2, r6, r7, r8, r9, sl, ip}

08019bc4 <vtable for StoreNetwork>:
	...
 8019bcc:	08011829 	stmdaeq	r1, {r0, r3, r5, fp, ip}
 8019bd0:	0801190d 	stmdaeq	r1, {r0, r2, r3, r8, fp, ip}
 8019bd4:	08011831 	stmdaeq	r1, {r0, r4, r5, fp, ip}
 8019bd8:	08011921 	stmdaeq	r1, {r0, r5, r8, fp, ip}
 8019bdc:	080118b1 	stmdaeq	r1, {r0, r4, r5, r7, fp, ip}
 8019be0:	08011885 	stmdaeq	r1, {r0, r2, r7, fp, ip}
 8019be4:	08011855 	stmdaeq	r1, {r0, r2, r4, r6, fp, ip}
 8019be8:	080118dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, fp, ip}
 8019bec:	08008a99 	stmdaeq	r0, {r0, r3, r4, r7, r9, fp, pc}
 8019bf0:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8019bf4:	00000000 	andeq	r0, r0, r0
 8019bf8:	0801182b 	stmdaeq	r1, {r0, r1, r3, r5, fp, ip}
 8019bfc:	08011919 	stmdaeq	r1, {r0, r3, r4, r8, fp, ip}
 8019c00:	080118d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, fp, ip}
 8019c04:	080118a9 	stmdaeq	r1, {r0, r3, r5, r7, fp, ip}
 8019c08:	0801187d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, fp, ip}
 8019c0c:	08011905 	stmdaeq	r1, {r0, r2, r8, fp, ip}
 8019c10:	08008ac1 	stmdaeq	r0, {r0, r6, r7, r9, fp, pc}

08019c14 <vtable for StoreRDMDevice>:
	...
 8019c1c:	08011955 	stmdaeq	r1, {r0, r2, r4, r6, r8, fp, ip}
 8019c20:	080119c5 	stmdaeq	r1, {r0, r2, r6, r7, r8, fp, ip}
 8019c24:	0801195d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, fp, ip}
 8019c28:	080119d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, fp, ip}
 8019c2c:	08011981 	stmdaeq	r1, {r0, r7, r8, fp, ip}
 8019c30:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8019c34:	00000000 	andeq	r0, r0, r0
 8019c38:	08011957 	stmdaeq	r1, {r0, r1, r2, r4, r6, r8, fp, ip}
 8019c3c:	080119d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, fp, ip}
 8019c40:	080119bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, fp, ip}

08019c44 <vtable for StoreRemoteConfig>:
	...
 8019c4c:	08011a11 	stmdaeq	r1, {r0, r4, r9, fp, ip}
 8019c50:	08011a59 	stmdaeq	r1, {r0, r3, r4, r6, r9, fp, ip}
 8019c54:	08011a35 	stmdaeq	r1, {r0, r2, r4, r5, r9, fp, ip}
 8019c58:	08011a15 	stmdaeq	r1, {r0, r2, r4, r9, fp, ip}

08019c5c <vtable for StoreWS28xxDmx>:
	...
 8019c64:	08011a79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, fp, ip}
 8019c68:	08011be9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, fp, ip}
 8019c6c:	08011a81 	stmdaeq	r1, {r0, r7, r9, fp, ip}
 8019c70:	08011bfd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip}
 8019c74:	08011bb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, fp, ip}
 8019c78:	08011b81 	stmdaeq	r1, {r0, r7, r8, r9, fp, ip}
 8019c7c:	08011b49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp, ip}
 8019c80:	08011b11 	stmdaeq	r1, {r0, r4, r8, r9, fp, ip}
 8019c84:	08011ad9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r9, fp, ip}
 8019c88:	08011aa5 	stmdaeq	r1, {r0, r2, r5, r7, r9, fp, ip}
 8019c8c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8019c90:	00000000 	andeq	r0, r0, r0
 8019c94:	08011a7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r9, fp, ip}
 8019c98:	08011bf5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, fp, ip}
 8019c9c:	08011be1 	stmdaeq	r1, {r0, r5, r6, r7, r8, r9, fp, ip}
 8019ca0:	08011bad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r8, r9, fp, ip}
 8019ca4:	08011b79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, fp, ip}
 8019ca8:	08011b41 	stmdaeq	r1, {r0, r6, r8, r9, fp, ip}
 8019cac:	08011b09 	stmdaeq	r1, {r0, r3, r8, r9, fp, ip}
 8019cb0:	08011ad1 	stmdaeq	r1, {r0, r4, r6, r7, r9, fp, ip}
 8019cb4:	3a434d46 	bcc	90ed1d4 <__exidx_end+0x10d2a80>
 8019cb8:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 8019cbc:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 8019cc0:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8019cc4:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 8019cc8:	6f742068 	svcvs	0x00742068
 8019ccc:	206c6174 	rsbcs	r6, ip, r4, ror r1
 8019cd0:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 8019cd4:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 8019cd8:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 8019cdc:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 8019ce0:	6374000a 	cmnvs	r4, #10
 8019ce4:	65625f70 	strbvs	r5, [r2, #-3952]!	; 0xfffff090
 8019ce8:	3a6e6967 	bcc	9bb428c <__exidx_end+0x1b99b38>
 8019cec:	6f6f7420 	svcvs	0x006f7420
 8019cf0:	6e616d20 	cdpvs	13, 6, cr6, cr1, cr0, {1}
 8019cf4:	6f632079 	svcvs	0x00632079
 8019cf8:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
 8019cfc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8019d00:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
 8019d04:	7500646e 	strvc	r6, [r0, #-1134]	; 0xfffffb92
 8019d08:	6e69626e 	cdpvs	2, 6, cr6, cr9, cr14, {3}
 8019d0c:	41000a64 	tstmi	r0, r4, ror #20
 8019d10:	6c205052 	stcvs	0, cr5, [r0], #-328	; 0xfffffeb8
 8019d14:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
 8019d18:	61662070 	smcvs	25088	; 0x6200
 8019d1c:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
 8019d20:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 8019d24:	61666564 	cmnvs	r6, r4, ror #10
 8019d28:	20746c75 	rsbscs	r6, r4, r5, ror ip
 8019d2c:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8019d30:	0a796177 	beq	9e72314 <__exidx_end+0x1e57bc0>
 8019d34:	50524100 	subspl	r4, r2, r0, lsl #2
 8019d38:	6f6f6c20 	svcvs	0x006f6c20
 8019d3c:	2070756b 	rsbscs	r7, r0, fp, ror #10
 8019d40:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 8019d44:	000a6465 	andeq	r6, sl, r5, ror #8

08019d48 <NetworkConst::MSG_MDNS_CONFIG>:
 8019d48:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8019d4c:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8019d50:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8019d54:	534e444d 	movtpl	r4, #58445	; 0xe44d
	...

08019d59 <NetworkConst::MSG_NETWORK_INIT>:
 8019d59:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8019d5d:	206b726f 	rsbcs	r7, fp, pc, ror #4
 8019d61:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 8019d65:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 8019d69:	6974617a 	ldmdbvs	r4!, {r1, r3, r4, r5, r6, r8, sp, lr}^
 8019d6d:	32006e6f 	andcc	r6, r0, #1776	; 0x6f0
 8019d71:	302e3432 	eorcc	r3, lr, r2, lsr r4
 8019d75:	322e302e 	eorcc	r3, lr, #46	; 0x2e
 8019d79:	5f003135 	svcpl	0x00003135
 8019d7d:	2e706374 	mrccs	3, 3, r6, cr0, cr4, {3}
 8019d81:	61636f6c 	cmnvs	r3, ip, ror #30
 8019d85:	735f006c 	cmpvc	pc, #108	; 0x6c
 8019d89:	69767265 	ldmdbvs	r6!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8019d8d:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8019d91:	736e645f 	cmnvc	lr, #1593835520	; 0x5f000000
 8019d95:	2e64732d 	cdpcs	3, 6, cr7, cr4, cr13, {1}
 8019d99:	7064755f 	rsbvc	r7, r4, pc, asr r5
 8019d9d:	636f6c2e 	cmnvs	pc, #11776	; 0x2e00
 8019da1:	6d006c61 	stcvs	12, cr6, [r0, #-388]	; 0xfffffe7c
 8019da5:	0a534e44 	beq	94ed6bd <__exidx_end+0x14d2f69>
 8019da9:	6f4e2000 	svcvs	0x004e2000
 8019dad:	75722074 	ldrbvc	r2, [r2, #-116]!	; 0xffffff8c
 8019db1:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
 8019db5:	20000a67 	andcs	r0, r0, r7, ror #20
 8019db9:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 8019dbd:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8019dc1:	20000a73 	andcs	r0, r0, r3, ror sl
 8019dc5:	25207325 	strcs	r7, [r0, #-805]!	; 0xfffffcdb
 8019dc9:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8019dcd:	7465000a 	strbtvc	r0, [r5], #-10
 8019dd1:	67003068 	strvs	r3, [r0, -r8, rrx]
 8019dd5:	64616769 	strbtvs	r6, [r1], #-1897	; 0xfffff897
 8019dd9:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 8019ddd:	4e005f65 	cdpmi	15, 0, cr5, cr0, cr5, {3}
 8019de1:	6f777465 	svcvs	0x00777465
 8019de5:	000a6b72 	andeq	r6, sl, r2, ror fp
 8019de9:	736f4820 	cmnvc	pc, #32, 16	; 0x200000
 8019ded:	6d616e74 	stclvs	14, cr6, [r1, #-464]!	; 0xfffffe30
 8019df1:	3a202065 	bcc	8821f8d <__exidx_end+0x807839>
 8019df5:	0a732520 	beq	9ce327d <__exidx_end+0x1cc8b29>
 8019df9:	66492000 	strbvs	r2, [r9], -r0
 8019dfd:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 8019e01:	20202020 	eorcs	r2, r0, r0, lsr #32
 8019e05:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8019e09:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8019e0d:	4920000a 	stmdbmi	r0!, {r1, r3}
 8019e11:	2074656e 	rsbscs	r6, r4, lr, ror #10
 8019e15:	20202020 	eorcs	r2, r0, r0, lsr #32
 8019e19:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8019e1d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8019e21:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8019e25:	252f6425 	strcs	r6, [pc, #-1061]!	; 8019a08 <index_js+0x458>
 8019e29:	20000a64 	andcs	r0, r0, r4, ror #20
 8019e2d:	6d74654e 	cfldr64vs	mvdx6, [r4, #-312]!	; 0xfffffec8
 8019e31:	206b7361 	rsbcs	r7, fp, r1, ror #6
 8019e35:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8019e39:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8019e3d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8019e41:	0a64252e 	beq	9923301 <__exidx_end+0x1908bad>
 8019e45:	61472000 	mrsvs	r2, (UNDEF: 71)
 8019e49:	61776574 	cmnvs	r7, r4, ror r5
 8019e4d:	20202079 	eorcs	r2, r0, r9, ror r0
 8019e51:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8019e55:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8019e59:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8019e5d:	20000a64 	andcs	r0, r0, r4, ror #20
 8019e61:	616f7242 	cmnvs	pc, r2, asr #4
 8019e65:	73616364 	cmnvc	r1, #100, 6	; 0x90000001
 8019e69:	203a2074 	eorscs	r2, sl, r4, ror r0
 8019e6d:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8019e71:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8019e75:	0a64252e 	beq	9923335 <__exidx_end+0x1908be1>
 8019e79:	614d2000 	mrsvs	r2, (UNDEF: 77)
 8019e7d:	20202063 	eorcs	r2, r0, r3, rrx
 8019e81:	20202020 	eorcs	r2, r0, r0, lsr #32
 8019e85:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8019e89:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8019e8d:	3a78322e 	bcc	9e2674d <__exidx_end+0x1e0bff9>
 8019e91:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8019e95:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8019e99:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 8019e9d:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8019ea1:	0a78322e 	beq	9e26761 <__exidx_end+0x1e0c00d>
 8019ea5:	6f4d2000 	svcvs	0x004d2000
 8019ea9:	20206564 	eorcs	r6, r0, r4, ror #10
 8019ead:	20202020 	eorcs	r2, r0, r0, lsr #32
 8019eb1:	6325203a 			; <UNDEFINED> instruction: 0x6325203a
 8019eb5:	7453000a 	ldrbvc	r0, [r3], #-10
 8019eb9:	63697461 	cmnvs	r9, #1627389952	; 0x61000000
 8019ebd:	00504920 	subseq	r4, r0, r0, lsr #18
 8019ec1:	2050544e 	subscs	r5, r0, lr, asr #8
 8019ec5:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8019ec9:	 	stmdbvs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}

08019ecc <NetworkParamsConst::IP_ADDRESS>:
 8019ecc:	615f7069 	cmpvs	pc, r9, rrx
 8019ed0:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 8019ed4:	 	mcrvs	3, 0, r7, cr0, cr3, {3}

08019ed7 <NetworkParamsConst::NTP_SERVER>:
 8019ed7:	5f70746e 	svcpl	0x0070746e
 8019edb:	76726573 			; <UNDEFINED> instruction: 0x76726573
 8019edf:	 	cdpvs	2, 0, cr7, cr0, cr5, {3}

08019ee2 <NetworkParamsConst::NTP_UTC_OFFSET>:
 8019ee2:	5f70746e 	svcpl	0x0070746e
 8019ee6:	5f637475 	svcpl	0x00637475
 8019eea:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
 8019eee:	 	strvs	r7, [r0], #-1125	; 0xfffffb9b

08019ef1 <NetworkParamsConst::DEFAULT_GATEWAY>:
 8019ef1:	61666564 	cmnvs	r6, r4, ror #10
 8019ef5:	5f746c75 	svcpl	0x00746c75
 8019ef9:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8019efd:	00796177 	rsbseq	r6, r9, r7, ror r1

08019f01 <NetworkParamsConst::DHCP_RETRY_TIME>:
 8019f01:	70636864 	rsbvc	r6, r3, r4, ror #16
 8019f05:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 8019f09:	745f7972 	ldrbvc	r7, [pc], #-2418	; 8019f11 <NetworkParamsConst::HOSTNAME>
 8019f0d:	00656d69 	rsbeq	r6, r5, r9, ror #26

08019f11 <NetworkParamsConst::HOSTNAME>:
 8019f11:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 8019f15:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08019f1a <NetworkParamsConst::NET_MASK>:
 8019f1a:	5f74656e 	svcpl	0x0074656e
 8019f1e:	6b73616d 	blvs	9cf24da <__exidx_end+0x1cd7d86>
	...

08019f23 <NetworkParamsConst::USE_DHCP>:
 8019f23:	5f657375 	svcpl	0x00657375
 8019f27:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

08019f2c <NetworkParamsConst::FILE_NAME>:
 8019f2c:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8019f30:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 8019f34:	00747874 	rsbseq	r7, r4, r4, ror r8
 8019f38:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 8019f3c:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 8019f40:	61747320 	cmnvs	r4, r0, lsr #6
 8019f44:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 8019f48:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8019f4c:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8019f50:	252f6425 	strcs	r6, [pc, #-1061]!	; 8019b33 <s_aStorSize+0x57>
 8019f54:	63252064 			; <UNDEFINED> instruction: 0x63252064
 8019f58:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 8019f5c:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8019f60:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8019f64:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 8019f68:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 8019f6c:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8019f70:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8019f74:	46006425 	strmi	r6, [r0], -r5, lsr #8
 8019f78:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 8019f7c:	20657261 	rsbcs	r7, r5, r1, ror #4
 8019f80:	2a2e2556 	bcs	8ba34e0 <__exidx_end+0xb88d8c>
 8019f84:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 8019f88:	72205043 	eorvc	r5, r0, #67	; 0x43
 8019f8c:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 8019f90:	00676e69 	rsbeq	r6, r7, r9, ror #28
 8019f94:	50434844 	subpl	r4, r3, r4, asr #16
 8019f98:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 8019f9c:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 8019fa0:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 8019fa4:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8019fa8:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 8019fac:	6f647475 	svcvs	0x00647475
 8019fb0:	00006e77 	andeq	r6, r0, r7, ror lr

08019fb4 <pArray>:
 8019fb4:	0801a048 	stmdaeq	r1, {r3, r6, sp, pc}
 8019fb8:	0801a004 	stmdaeq	r1, {r2, sp, pc}
 8019fbc:	08019ecc 	stmdaeq	r1, {r2, r3, r6, r7, r9, sl, fp, ip, pc}
 8019fc0:	0801a04e 	stmdaeq	r1, {r1, r2, r3, r6, sp, pc}
 8019fc4:	0801a2c4 	stmdaeq	r1, {r2, r6, r7, r9, sp, pc}
 8019fc8:	0801a00f 	stmdaeq	r1, {r0, r1, r2, r3, sp, pc}
 8019fcc:	080181bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r8, pc}
 8019fd0:	08019f11 	stmdaeq	r1, {r0, r4, r8, r9, sl, fp, ip, pc}
 8019fd4:	0801a19a 	stmdaeq	r1, {r1, r3, r4, r7, r8, sp, pc}
 8019fd8:	0801a1aa 	stmdaeq	r1, {r1, r3, r5, r7, r8, sp, pc}
 8019fdc:	0801a1ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, sp, pc}
 8019fe0:	0801a1ca 	stmdaeq	r1, {r1, r3, r6, r7, r8, sp, pc}
 8019fe4:	08019f1a 	stmdaeq	r1, {r1, r3, r4, r8, r9, sl, fp, ip, pc}
 8019fe8:	0801a2b2 	stmdaeq	r1, {r1, r4, r5, r7, r9, sp, pc}
 8019fec:	080181c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, pc}
 8019ff0:	080181de 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, pc}
 8019ff4:	080181f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, pc}
 8019ff8:	0801820e 	stmdaeq	r1, {r1, r2, r3, r9, pc}
 8019ffc:	08019ef1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, sl, fp, ip, pc}
 801a000:	0801a01c 	stmdaeq	r1, {r2, r3, r4, sp, pc}

0801a004 <DisplayUdfParamsConst::BOARD_NAME>:
 801a004:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 801a008:	616e5f64 	cmnvs	lr, r4, ror #30
 801a00c:	 	tstvs	r0, sp, ror #10

0801a00f <DisplayUdfParamsConst::ACTIVE_PORTS>:
 801a00f:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801a013:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 801a017:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

0801a01c <DisplayUdfParamsConst::DMX_DIRECTION>:
 801a01c:	5f786d64 	svcpl	0x00786d64
 801a020:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801a024:	6f697463 	svcvs	0x00697463
 801a028:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

0801a02a <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 801a02a:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 801a02e:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801a032:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8019acd <index_js+0x51d>
 801a036:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

0801a038 <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 801a038:	70696c66 	rsbvc	r6, r9, r6, ror #24
 801a03c:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 801a040:	61636974 	smcvs	13972	; 0x3694
 801a044:	00796c6c 	rsbseq	r6, r9, ip, ror #24

0801a048 <DisplayUdfParamsConst::TITLE>:
 801a048:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 801a04c:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

0801a04e <DisplayUdfParamsConst::VERSION>:
 801a04e:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801a052:	006e6f69 	rsbeq	r6, lr, r9, ror #30

0801a056 <DisplayUdfParamsConst::FILE_NAME>:
 801a056:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801a05a:	2e79616c 	rpwcsez	f6, f1, #4.0
 801a05e:	00747874 	rsbseq	r7, r4, r4, ror r8

0801a062 <DisplayUdfParamsConst::INTENSITY>:
 801a062:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 801a066:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 801a06a:	20200079 	eorcs	r0, r0, r9, ror r0
 801a06e:	4f002020 	svcmi	0x00002020
 801a072:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801a076:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 801a07a:	64253a64 	strtvs	r3, [r5], #-2660	; 0xfffff59c
 801a07e:	20632520 	rsbcs	r2, r3, r0, lsr #10
 801a082:	4f007325 	svcmi	0x00007325
 801a086:	203a6425 	eorscs	r6, sl, r5, lsr #8
 801a08a:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 801a08e:	3a64253a 	bcc	992357e <__exidx_end+0x1908e2a>
 801a092:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 801a096:	73252063 			; <UNDEFINED> instruction: 0x73252063
 801a09a:	3a632500 	bcc	98e34a2 <__exidx_end+0x18c8d4e>
 801a09e:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801a0a2:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801a0a6:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801a0aa:	3a504100 	bcc	942a4b2 <__exidx_end+0x140fd5e>
 801a0ae:	00642520 	rsbeq	r2, r4, r0, lsr #10
 801a0b2:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 801a0b6:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 801a0ba:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 801a0be:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
	...

0801a0c3 <DevicesParamsConst::ACTIVE_OUT>:
 801a0c3:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801a0c7:	6f5f6576 	svcvs	0x005f6576
 801a0cb:	 	movwvs	r7, #1141	; 0x475

0801a0ce <DevicesParamsConst::SPI_SPEED_HZ>:
 801a0ce:	636f6c63 	cmnvs	pc, #25344	; 0x6300
 801a0d2:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
 801a0d6:	5f646565 	svcpl	0x00646565
 801a0da:	 			; <UNDEFINED> instruction: 0x6c007a68

0801a0dd <DevicesParamsConst::GROUPING_COUNT>:
 801a0dd:	5f64656c 	svcpl	0x0064656c
 801a0e1:	756f7267 	strbvc	r7, [pc, #-615]!	; 8019e82 <NetworkConst::MSG_NETWORK_INIT+0x129>
 801a0e5:	6f635f70 	svcvs	0x00635f70
 801a0e9:	00746e75 	rsbseq	r6, r4, r5, ror lr

0801a0ed <DevicesParamsConst::GLOBAL_BRIGHTNESS>:
 801a0ed:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
 801a0f1:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
 801a0f5:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801a0f9:	73656e74 	cmnvc	r5, #116, 28	; 0x740
 801a0fd:	 	strbvs	r0, [ip, #-115]!	; 0xffffff8d

0801a0ff <DevicesParamsConst::MAP>:
 801a0ff:	5f64656c 	svcpl	0x0064656c
 801a103:	5f626772 	svcpl	0x00626772
 801a107:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 801a10b:	00676e69 	rsbeq	r6, r7, r9, ror #28

0801a10f <DevicesParamsConst::TYPE>:
 801a10f:	5f64656c 	svcpl	0x0064656c
 801a113:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
	...

0801a118 <DevicesParamsConst::COUNT>:
 801a118:	5f64656c 	svcpl	0x0064656c
 801a11c:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 801a120:	 	strbvs	r0, [ip, #-116]!	; 0xffffff8c

0801a122 <DevicesParamsConst::LED_T0H>:
 801a122:	5f64656c 	svcpl	0x0064656c
 801a126:	00683074 	rsbeq	r3, r8, r4, ror r0

0801a12a <DevicesParamsConst::LED_T1H>:
 801a12a:	5f64656c 	svcpl	0x0064656c
 801a12e:	00683174 	rsbeq	r3, r8, r4, ror r1

0801a132 <DevicesParamsConst::FILE_NAME>:
 801a132:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801a136:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 801a13a:	00747874 	rsbseq	r7, r4, r4, ror r8
 801a13e:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801a142:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 801a146:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801a14a:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801a14e:	002c2264 	eoreq	r2, ip, r4, ror #4
 801a152:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 801a156:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801a15a:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801a15e:	0a64252e 	beq	992361e <__exidx_end+0x1908eca>
 801a162:	25202300 	strcs	r2, [r0, #-768]!	; 0xfffffd00
 801a166:	0a232073 	beq	88e233a <__exidx_end+0x8c7be6>
 801a16a:	73252200 			; <UNDEFINED> instruction: 0x73252200
 801a16e:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801a172:	22782a2e 	rsbscs	r2, r8, #188416	; 0x2e000
 801a176:	2523002c 	strcs	r0, [r3, #-44]!	; 0xffffffd4
 801a17a:	2e253d73 	mcrcs	13, 1, r3, cr5, cr3, {3}
 801a17e:	000a782a 	andeq	r7, sl, sl, lsr #16

0801a182 <LightSetParamsConst::MERGE_MODE>:
 801a182:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801a186:	6f6d5f65 	svcvs	0x006d5f65
 801a18a:	 	strvc	r6, [r0], #-1380	; 0xfffffa9c

0801a18d <LightSetParamsConst::TEST_PATTERN>:
 801a18d:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 801a191:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
 801a195:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	...

0801a19a <LightSetParamsConst::UNIVERSE_PORT>:
 801a19a:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801a19e:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801a1a2:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801a1a6:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801a1aa:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801a1ae:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801a1b2:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801a1b6:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801a1ba:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801a1be:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801a1c2:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801a1c6:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801a1ca:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801a1ce:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801a1d2:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801a1d6:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801a1da <LightSetParamsConst::START_UNI_PORT>:
 801a1da:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801a1de:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801a1e2:	6f705f69 	svcvs	0x00705f69
 801a1e6:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801a1ea:	74730000 	ldrbtvc	r0, [r3], #-0
 801a1ee:	5f747261 	svcpl	0x00747261
 801a1f2:	5f696e75 	svcpl	0x00696e75
 801a1f6:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801a1fa:	0000325f 	andeq	r3, r0, pc, asr r2
 801a1fe:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801a202:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801a206:	6f705f69 	svcvs	0x00705f69
 801a20a:	335f7472 	cmpcc	pc, #1912602624	; 0x72000000
 801a20e:	74730000 	ldrbtvc	r0, [r3], #-0
 801a212:	5f747261 	svcpl	0x00747261
 801a216:	5f696e75 	svcpl	0x00696e75
 801a21a:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801a21e:	0000345f 	andeq	r3, r0, pc, asr r4
 801a222:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801a226:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801a22a:	6f705f69 	svcvs	0x00705f69
 801a22e:	355f7472 	ldrbcc	r7, [pc, #-1138]	; 8019dc4 <NetworkConst::MSG_NETWORK_INIT+0x6b>
 801a232:	74730000 	ldrbtvc	r0, [r3], #-0
 801a236:	5f747261 	svcpl	0x00747261
 801a23a:	5f696e75 	svcpl	0x00696e75
 801a23e:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801a242:	0000365f 	andeq	r3, r0, pc, asr r6
 801a246:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801a24a:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801a24e:	6f705f69 	svcvs	0x00705f69
 801a252:	375f7472 			; <UNDEFINED> instruction: 0x375f7472
 801a256:	74730000 	ldrbtvc	r0, [r3], #-0
 801a25a:	5f747261 	svcpl	0x00747261
 801a25e:	5f696e75 	svcpl	0x00696e75
 801a262:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801a266:	0000385f 	andeq	r3, r0, pc, asr r8

0801a26a <LightSetParamsConst::MERGE_MODE_PORT>:
 801a26a:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801a26e:	6f6d5f65 	svcvs	0x006d5f65
 801a272:	705f6564 	subsvc	r6, pc, r4, ror #10
 801a276:	5f74726f 	svcpl	0x0074726f
 801a27a:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 801a27e:	5f656772 	svcpl	0x00656772
 801a282:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 801a286:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801a28a:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801a28e:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801a292:	6f6d5f65 	svcvs	0x006d5f65
 801a296:	705f6564 	subsvc	r6, pc, r4, ror #10
 801a29a:	5f74726f 	svcpl	0x0074726f
 801a29e:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 801a2a2:	5f656772 	svcpl	0x00656772
 801a2a6:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 801a2aa:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801a2ae:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801a2b2 <LightSetParamsConst::DMX_START_ADDRESS>:
 801a2b2:	5f786d64 	svcpl	0x00786d64
 801a2b6:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801a2ba:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 801a2be:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 801a2c2:	 	mrcvs	0, 3, r0, cr5, cr3, {3}

0801a2c4 <LightSetParamsConst::UNIVERSE>:
 801a2c4:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801a2c8:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

0801a2cd <LightSetParamsConst::DIRECTION>:
 801a2cd:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801a2d1:	6f697463 	svcvs	0x00697463
 801a2d5:	6f705f6e 	svcvs	0x00705f6e
 801a2d9:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 801a2dd:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 801a2e1:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801a2e5:	5f6e6f69 	svcpl	0x006e6f69
 801a2e9:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801a2ed:	0000625f 	andeq	r6, r0, pc, asr r2
 801a2f1:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801a2f5:	6f697463 	svcvs	0x00697463
 801a2f9:	6f705f6e 	svcvs	0x00705f6e
 801a2fd:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 801a301:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 801a305:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801a309:	5f6e6f69 	svcpl	0x006e6f69
 801a30d:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801a311:	0000645f 	andeq	r6, r0, pc, asr r4
 801a315:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 801a319:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 801a31d:	66207961 	strtvs	r7, [r0], -r1, ror #18
 801a321:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 801a325:	31485300 	mrscc	r5, (UNDEF: 120)
 801a329:	00363031 	eorseq	r3, r6, r1, lsr r0
 801a32d:	31445353 	cmpcc	r4, r3, asr r3
 801a331:	00363033 	eorseq	r3, r6, r3, lsr r0
 801a335:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801a339:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 801a33d:	000a2964 	andeq	r2, sl, r4, ror #18
 801a341:	aaeeaa40 	bge	7bc4c49 <__stack_size+0x7bc2449>
 801a345:	 	andmi	r0, r0, lr, ror #1

0801a348 <_OledFont8x6>:
 801a348:	00000040 	andeq	r0, r0, r0, asr #32
 801a34c:	40000000 	andmi	r0, r0, r0
 801a350:	005f0000 	subseq	r0, pc, r0
 801a354:	00400000 	subeq	r0, r0, r0
 801a358:	00070007 	andeq	r0, r7, r7
 801a35c:	7f144000 	svcvc	0x00144000
 801a360:	00147f14 	andseq	r7, r4, r4, lsl pc
 801a364:	7f2a2440 	svcvc	0x002a2440
 801a368:	4000122a 	andmi	r1, r0, sl, lsr #4
 801a36c:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 801a370:	36400062 	strbcc	r0, [r0], -r2, rrx
 801a374:	50205649 	eorpl	r5, r0, r9, asr #12
 801a378:	08004000 	stmdaeq	r0, {lr}
 801a37c:	00000307 	andeq	r0, r0, r7, lsl #6
 801a380:	221c0040 	andscs	r0, ip, #64	; 0x40
 801a384:	40000041 	andmi	r0, r0, r1, asr #32
 801a388:	1c224100 	stfnes	f4, [r2], #-0
 801a38c:	2a400000 	bcs	901a394 <__exidx_end+0xfffc40>
 801a390:	2a1c7f1c 	bcs	873a008 <__exidx_end+0x71f8b4>
 801a394:	08084000 	stmdaeq	r8, {lr}
 801a398:	0008083e 	andeq	r0, r8, lr, lsr r8
 801a39c:	70800040 	addvc	r0, r0, r0, asr #32
 801a3a0:	40000030 	andmi	r0, r0, r0, lsr r0
 801a3a4:	08080808 	stmdaeq	r8, {r3, fp}
 801a3a8:	00400008 	subeq	r0, r0, r8
 801a3ac:	00606000 	rsbeq	r6, r0, r0
 801a3b0:	10204000 	eorne	r4, r0, r0
 801a3b4:	00020408 	andeq	r0, r2, r8, lsl #8
 801a3b8:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 801a3bc:	40003e45 	andmi	r3, r0, r5, asr #28
 801a3c0:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 801a3c4:	72400000 	subvc	r0, r0, #0
 801a3c8:	46494949 	strbmi	r4, [r9], -r9, asr #18
 801a3cc:	41214000 			; <UNDEFINED> instruction: 0x41214000
 801a3d0:	00334d49 	eorseq	r4, r3, r9, asr #26
 801a3d4:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 801a3d8:	4000107f 	andmi	r1, r0, pc, ror r0
 801a3dc:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 801a3e0:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 801a3e4:	3149494a 	cmpcc	r9, sl, asr #18
 801a3e8:	21414000 	mrscs	r4, (UNDEF: 65)
 801a3ec:	00070911 	andeq	r0, r7, r1, lsl r9
 801a3f0:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 801a3f4:	40003649 	andmi	r3, r0, r9, asr #12
 801a3f8:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 801a3fc:	0040001e 	subeq	r0, r0, lr, lsl r0
 801a400:	00001400 	andeq	r1, r0, r0, lsl #8
 801a404:	40004000 	andmi	r4, r0, r0
 801a408:	00000034 	andeq	r0, r0, r4, lsr r0
 801a40c:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 801a410:	40004122 	andmi	r4, r0, r2, lsr #2
 801a414:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 801a418:	00400014 	subeq	r0, r0, r4, lsl r0
 801a41c:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 801a420:	01024000 	mrseq	r4, (UNDEF: 2)
 801a424:	00060959 	andeq	r0, r6, r9, asr r9
 801a428:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 801a42c:	40004e59 	andmi	r4, r0, r9, asr lr
 801a430:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 801a434:	7f40007c 	svcvc	0x0040007c
 801a438:	36494949 	strbcc	r4, [r9], -r9, asr #18
 801a43c:	413e4000 	teqmi	lr, r0
 801a440:	00224141 	eoreq	r4, r2, r1, asr #2
 801a444:	41417f40 	cmpmi	r1, r0, asr #30
 801a448:	40003e41 	andmi	r3, r0, r1, asr #28
 801a44c:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 801a450:	7f400041 	svcvc	0x00400041
 801a454:	01090909 	tsteq	r9, r9, lsl #18
 801a458:	413e4000 	teqmi	lr, r0
 801a45c:	00735141 	rsbseq	r5, r3, r1, asr #2
 801a460:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 801a464:	40007f08 	andmi	r7, r0, r8, lsl #30
 801a468:	417f4100 	cmnmi	pc, r0, lsl #2
 801a46c:	20400000 	subcs	r0, r0, r0
 801a470:	013f4140 	teqeq	pc, r0, asr #2
 801a474:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 801a478:	00412214 	subeq	r2, r1, r4, lsl r2
 801a47c:	40407f40 	submi	r7, r0, r0, asr #30
 801a480:	40004040 	andmi	r4, r0, r0, asr #32
 801a484:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 801a488:	7f40007f 	svcvc	0x0040007f
 801a48c:	7f100804 	svcvc	0x00100804
 801a490:	413e4000 	teqmi	lr, r0
 801a494:	003e4141 	eorseq	r4, lr, r1, asr #2
 801a498:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 801a49c:	40000609 	andmi	r0, r0, r9, lsl #12
 801a4a0:	2151413e 	cmpcs	r1, lr, lsr r1
 801a4a4:	7f40005e 	svcvc	0x0040005e
 801a4a8:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 801a4ac:	49264000 	stmdbmi	r6!, {lr}
 801a4b0:	00324949 	eorseq	r4, r2, r9, asr #18
 801a4b4:	7f010340 	svcvc	0x00010340
 801a4b8:	40000301 	andmi	r0, r0, r1, lsl #6
 801a4bc:	4040403f 	submi	r4, r0, pc, lsr r0
 801a4c0:	1f40003f 	svcne	0x0040003f
 801a4c4:	1f204020 	svcne	0x00204020
 801a4c8:	403f4000 	eorsmi	r4, pc, r0
 801a4cc:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 801a4d0:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 801a4d4:	40006314 	andmi	r6, r0, r4, lsl r3
 801a4d8:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 801a4dc:	61400003 	cmpvs	r0, r3
 801a4e0:	434d4959 	movtmi	r4, #55641	; 0xd959
 801a4e4:	7f004000 	svcvc	0x00004000
 801a4e8:	00414141 	subeq	r4, r1, r1, asr #2
 801a4ec:	08040240 	stmdaeq	r4, {r6, r9}
 801a4f0:	40002010 	andmi	r2, r0, r0, lsl r0
 801a4f4:	41414100 	mrsmi	r4, (UNDEF: 81)
 801a4f8:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 801a4fc:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 801a500:	40404000 	submi	r4, r0, r0
 801a504:	00404040 	subeq	r4, r0, r0, asr #32
 801a508:	07030040 	streq	r0, [r3, -r0, asr #32]
 801a50c:	40000008 	andmi	r0, r0, r8
 801a510:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 801a514:	7f400040 	svcvc	0x00400040
 801a518:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 801a51c:	44384000 	ldrtmi	r4, [r8], #-0
 801a520:	00284444 	eoreq	r4, r8, r4, asr #8
 801a524:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 801a528:	40007f28 	andmi	r7, r0, r8, lsr #30
 801a52c:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 801a530:	00400018 	subeq	r0, r0, r8, lsl r0
 801a534:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 801a538:	a4184000 	ldrge	r4, [r8], #-0
 801a53c:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 801a540:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 801a544:	40007804 	andmi	r7, r0, r4, lsl #16
 801a548:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 801a54c:	20400000 	subcs	r0, r0, r0
 801a550:	003d4040 	eorseq	r4, sp, r0, asr #32
 801a554:	107f4000 	rsbsne	r4, pc, r0
 801a558:	00004428 	andeq	r4, r0, r8, lsr #8
 801a55c:	7f410040 	svcvc	0x00410040
 801a560:	40000040 	andmi	r0, r0, r0, asr #32
 801a564:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 801a568:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 801a56c:	78040408 	stmdavc	r4, {r3, sl}
 801a570:	44384000 	ldrtmi	r4, [r8], #-0
 801a574:	00384444 	eorseq	r4, r8, r4, asr #8
 801a578:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 801a57c:	40001824 	andmi	r1, r0, r4, lsr #16
 801a580:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 801a584:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 801a588:	08040408 	stmdaeq	r4, {r3, sl}
 801a58c:	54484000 	strbpl	r4, [r8], #-0
 801a590:	00245454 	eoreq	r5, r4, r4, asr r4
 801a594:	3f040440 	svccc	0x00040440
 801a598:	40002444 	andmi	r2, r0, r4, asr #8
 801a59c:	2040403c 	subcs	r4, r0, ip, lsr r0
 801a5a0:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 801a5a4:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 801a5a8:	403c4000 	eorsmi	r4, ip, r0
 801a5ac:	003c4030 	eorseq	r4, ip, r0, lsr r0
 801a5b0:	10284440 	eorne	r4, r8, r0, asr #8
 801a5b4:	40004428 	andmi	r4, r0, r8, lsr #8
 801a5b8:	9090904c 	addsls	r9, r0, ip, asr #32
 801a5bc:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 801a5c0:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 801a5c4:	08004000 	stmdaeq	r0, {lr}
 801a5c8:	00004136 	andeq	r4, r0, r6, lsr r1
 801a5cc:	77000040 	strvc	r0, [r0, -r0, asr #32]
 801a5d0:	40000000 	andmi	r0, r0, r0
 801a5d4:	08364100 	ldmdaeq	r6!, {r8, lr}
 801a5d8:	02400000 	subeq	r0, r0, #0
 801a5dc:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 801a5e0:	263c4000 	ldrtcs	r4, [ip], -r0
 801a5e4:	003c2623 	eorseq	r2, ip, r3, lsr #12

0801a5e8 <oled_128x32_init>:
 801a5e8:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 801a5ec:	4000d31f 	andmi	sp, r0, pc, lsl r3
 801a5f0:	0020148d 	eoreq	r1, r0, sp, lsl #9
 801a5f4:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 801a5f8:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 801a5fc:	a6a440db 	ssatge	r4, #5, fp, asr #1

0801a600 <oled_128x64_init>:
 801a600:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 801a604:	4000d33f 	andmi	sp, r0, pc, lsr r3
 801a608:	0020148d 	eoreq	r1, r0, sp, lsl #9
 801a60c:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 801a610:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 801a614:	a6a440db 	ssatge	r4, #5, fp, asr #1

0801a618 <vtable for Ssd1306>:
	...
 801a620:	08015299 	stmdaeq	r1, {r0, r3, r4, r7, r9, ip, lr}
 801a624:	080152c5 	stmdaeq	r1, {r0, r2, r6, r7, r9, ip, lr}
 801a628:	080155d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, sl, ip, lr}
 801a62c:	0801555d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, sl, ip, lr}
 801a630:	08015429 	stmdaeq	r1, {r0, r3, r5, sl, ip, lr}
 801a634:	080152e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r9, ip, lr}
 801a638:	0801530d 	stmdaeq	r1, {r0, r2, r3, r8, r9, ip, lr}
 801a63c:	080153ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, ip, lr}
 801a640:	080153b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, r9, ip, lr}
 801a644:	0801529b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r9, ip, lr}
 801a648:	08015465 	stmdaeq	r1, {r0, r2, r5, r6, sl, ip, lr}
 801a64c:	08015471 	stmdaeq	r1, {r0, r4, r5, r6, sl, ip, lr}
 801a650:	0801548b 	stmdaeq	r1, {r0, r1, r3, r7, sl, ip, lr}
 801a654:	0801529d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r9, ip, lr}
 801a658:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 801a65c:	5b1b006d 	blpl	86da818 <__exidx_end+0x6c00c4>
 801a660:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 801a664:	31335b1b 	teqcc	r3, fp, lsl fp
 801a668:	5b1b006d 	blpl	86da824 <__exidx_end+0x6c00d0>
 801a66c:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 801a670:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 801a674:	5b1b006d 	blpl	86da830 <__exidx_end+0x6c00dc>
 801a678:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 801a67c:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 801a680:	205d732a 	subscs	r7, sp, sl, lsr #6
 801a684:	43207325 			; <UNDEFINED> instruction: 0x43207325
 801a688:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 801a68c:	2064656c 	rsbcs	r6, r4, ip, ror #10
 801a690:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 801a694:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 801a698:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 801a69c:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 801a6a0:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 801a6a4:	203a636f 	eorscs	r6, sl, pc, ror #6
 801a6a8:	000a7525 	andeq	r7, sl, r5, lsr #10
 801a6ac:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 801a6b0:	203a636f 	eorscs	r6, sl, pc, ror #6
 801a6b4:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 801a6b8:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 801a6bc:	6b636f6c 	blvs	98f6474 <__exidx_end+0x18dbd20>
 801a6c0:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 801a6c4:	000a7469 	andeq	r7, sl, r9, ror #8
 801a6c8:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 801a6cc:	203a636f 	eorscs	r6, sl, pc, ror #6
 801a6d0:	6f6c4270 	svcvs	0x006c4270
 801a6d4:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 801a6d8:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 801a6dc:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 801a6e0:	7a697320 	bvc	9a77368 <__exidx_end+0x1a5cc14>
 801a6e4:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 801a6e8:	6164202c 	cmnvs	r4, ip, lsr #32
 801a6ec:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 801a6f0:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 801a6f4:	3a656572 	bcc	9973cc4 <__exidx_end+0x1959570>
 801a6f8:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 801a6fc:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801a700:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 801a704:	203d2072 	eorscs	r2, sp, r2, ror r0
 801a708:	202c7025 	eorcs	r7, ip, r5, lsr #32
 801a70c:	6f6c4270 	svcvs	0x006c4270
 801a710:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 801a714:	0a702520 	beq	9c23b9c <__exidx_end+0x1c09448>
 801a718:	00000000 	andeq	r0, r0, r0

0801a71c <days_of_month>:
 801a71c:	0000001f 	andeq	r0, r0, pc, lsl r0
 801a720:	0000001c 	andeq	r0, r0, ip, lsl r0
 801a724:	0000001f 	andeq	r0, r0, pc, lsl r0
 801a728:	0000001e 	andeq	r0, r0, lr, lsl r0
 801a72c:	0000001f 	andeq	r0, r0, pc, lsl r0
 801a730:	0000001e 	andeq	r0, r0, lr, lsl r0
 801a734:	0000001f 	andeq	r0, r0, pc, lsl r0
 801a738:	0000001f 	andeq	r0, r0, pc, lsl r0
 801a73c:	0000001e 	andeq	r0, r0, lr, lsl r0
 801a740:	0000001f 	andeq	r0, r0, pc, lsl r0
 801a744:	0000001e 	andeq	r0, r0, lr, lsl r0
 801a748:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

0801a74c <__exidx_start>:
 801a74c:	7ffef0b0 	svcvc	0x00fef0b0
 801a750:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

0801a754 <.ARM.attributes>:
 801a754:	00002e41 	andeq	r2, r0, r1, asr #28
 801a758:	61656100 	cmnvs	r5, r0, lsl #2
 801a75c:	01006962 	tsteq	r0, r2, ror #18
 801a760:	00000024 	andeq	r0, r0, r4, lsr #32
 801a764:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 801a768:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 801a76c:	0600334d 	streq	r3, [r0], -sp, asr #6
 801a770:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 801a774:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 801a778:	17011501 	strne	r1, [r1, -r1, lsl #10]
 801a77c:	1a011803 	bne	8060790 <__exidx_end+0x4603c>
 801a780:	Address 0x000000000801a780 is out of bounds.


Disassembly of section .data:

20000000 <LLRPDevice::m_nHandleLLRP>:
20000000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000004 <s_multicast_mac>:
20000004:	005e0001 	subseq	r0, lr, r1
20000008:	00000000 	andeq	r0, r0, r0

2000000c <MDNS::s_nHandle>:
2000000c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000010 <next_block>:
20000010:	2003c000 	andcs	ip, r3, r0

20000014 <s_block_bucket>:
20000014:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000024:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000034:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000044:	00000060 	andeq	r0, r0, r0, rrx
	...
20000054:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000064:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000074:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000084:	00000180 	andeq	r0, r0, r0, lsl #3
	...
20000094:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000a4:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000b4:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000c4:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000e4 <SystemCoreClock>:
200000e4:	07270e00 	streq	r0, [r7, -r0, lsl #28]!

Disassembly of section .bss:

200000e8 <outptr>:
200000e8:	00000000 	andeq	r0, r0, r0

200000ec <guard variable for lightset::Data::Get()::instance>:
200000ec:	00000000 	andeq	r0, r0, r0

200000f0 <lightset::Data::Get()::instance>:
	...

2000c170 <ArtNetNode::s_pThis>:
2000c170:	00000000 	andeq	r0, r0, r0

2000c174 <s_ReceivingMask>:
2000c174:	00000000 	andeq	r0, r0, r0

2000c178 <ip>:
2000c178:	00000000 	andeq	r0, r0, r0

2000c17c <ip>:
2000c17c:	00000000 	andeq	r0, r0, r0

2000c180 <E131Bridge::s_pThis>:
2000c180:	00000000 	andeq	r0, r0, r0

2000c184 <s_ReceivingMask>:
2000c184:	00000000 	andeq	r0, r0, r0

2000c188 <LLRPDevice::s_nIpAddressFrom>:
2000c188:	00000000 	andeq	r0, r0, r0

2000c18c <LLRPDevice::m_nIpAddresLLRPRequest>:
2000c18c:	00000000 	andeq	r0, r0, r0

2000c190 <LLRPDevice::m_nIpAddressLLRPResponse>:
2000c190:	00000000 	andeq	r0, r0, r0

2000c194 <LLRPDevice::m_pLLRP>:
2000c194:	00000000 	andeq	r0, r0, r0

2000c198 <RDMNetDevice::s_RdmCommand>:
	...

2000c297 <RDMNetDevice::s_Cid>:
	...

2000c2a8 <RDMSensors::s_pThis>:
2000c2a8:	00000000 	andeq	r0, r0, r0

2000c2ac <RDMSubDevices::s_pThis>:
2000c2ac:	00000000 	andeq	r0, r0, r0

2000c2b0 <RDMDeviceResponder::s_pThis>:
2000c2b0:	00000000 	andeq	r0, r0, r0

2000c2b4 <RDMIdentify::m_bIsEnabled>:
	...

2000c2b5 <RDMIdentify::m_nMode>:
2000c2b5:	 	andeq	r0, r0, r0

2000c2b8 <RDMIdentify::s_pThis>:
2000c2b8:	00000000 	andeq	r0, r0, r0

2000c2bc <s_StopBuffer>:
	...

2000c4bc <PixelPatterns::m_PortConfig>:
	...

2000c5bc <PixelPatterns::m_nActivePorts>:
2000c5bc:	00000000 	andeq	r0, r0, r0

2000c5c0 <PixelPatterns::m_pScannerColours>:
2000c5c0:	00000000 	andeq	r0, r0, r0

2000c5c4 <PixelPatterns::m_nCount>:
2000c5c4:	00000000 	andeq	r0, r0, r0

2000c5c8 <PixelPatterns::m_pOutput>:
2000c5c8:	00000000 	andeq	r0, r0, r0

2000c5cc <PixelTestPattern::s_pThis>:
2000c5cc:	00000000 	andeq	r0, r0, r0

2000c5d0 <PixelTestPattern::s_Pattern>:
2000c5d0:	00000000 	andeq	r0, r0, r0

2000c5d4 <sv_isRunning>:
2000c5d4:	00000000 	andeq	r0, r0, r0

2000c5d8 <s_T0H>:
	...

20013dd8 <WS28xxMulti::s_pThis>:
20013dd8:	00000000 	andeq	r0, r0, r0

20013ddc <RemoteConfig::s_pUdpBuffer>:
20013ddc:	00000000 	andeq	r0, r0, r0

20013de0 <RemoteConfig::s_RemoteConfigListBin>:
	...

20013e04 <RemoteConfig::s_pThis>:
20013e04:	00000000 	andeq	r0, r0, r0

20013e08 <SpiFlashStore::s_nWaitMillis>:
20013e08:	00000000 	andeq	r0, r0, r0

20013e0c <SpiFlashStore::s_SpiFlashData>:
	...

20014e0c <SpiFlashStore::s_nStartAddress>:
20014e0c:	00000000 	andeq	r0, r0, r0

20014e10 <SpiFlashStore::s_bHaveFlashChip>:
20014e10:	00000000 	andeq	r0, r0, r0

20014e14 <SpiFlashStore::s_nSpiFlashStoreSize>:
20014e14:	00000000 	andeq	r0, r0, r0

20014e18 <SpiFlashStore::s_State>:
20014e18:	00000000 	andeq	r0, r0, r0

20014e1c <SpiFlashStore::s_pThis>:
20014e1c:	00000000 	andeq	r0, r0, r0

20014e20 <SpiFlashStore::s_bIsNew>:
20014e20:	00000000 	andeq	r0, r0, r0

20014e24 <StoreArtNet::s_pThis>:
20014e24:	00000000 	andeq	r0, r0, r0

20014e28 <StoreDisplayUdf::s_pThis>:
20014e28:	00000000 	andeq	r0, r0, r0

20014e2c <StoreNetwork::s_pThis>:
20014e2c:	00000000 	andeq	r0, r0, r0

20014e30 <StoreRDMDevice::s_pThis>:
20014e30:	00000000 	andeq	r0, r0, r0

20014e34 <StoreRemoteConfig::s_pThis>:
20014e34:	00000000 	andeq	r0, r0, r0

20014e38 <StoreWS28xxDmx::s_pThis>:
20014e38:	00000000 	andeq	r0, r0, r0

20014e3c <FlashRom::s_pThis>:
20014e3c:	00000000 	andeq	r0, r0, r0

20014e40 <flashrom::s_nAddress>:
20014e40:	00000000 	andeq	r0, r0, r0

20014e44 <flashrom::s_State>:
20014e44:	00000000 	andeq	r0, r0, r0

20014e48 <flashrom::s_nPage>:
20014e48:	00000000 	andeq	r0, r0, r0

20014e4c <flashrom::s_pData>:
20014e4c:	00000000 	andeq	r0, r0, r0

20014e50 <flashrom::s_isBank0>:
20014e50:	00000000 	andeq	r0, r0, r0

20014e54 <flashrom::s_nLength>:
20014e54:	00000000 	andeq	r0, r0, r0

20014e58 <g_ip_info>:
	...

20014e64 <g_mac_address>:
20014e64:	00000000 	andeq	r0, r0, r0
	...

20014e6a <s_is_dhcp>:
	...

20014e6c <s_p>:
20014e6c:	00000000 	andeq	r0, r0, r0

20014e70 <s_ticker>:
20014e70:	00000000 	andeq	r0, r0, r0

20014e74 <s_mac_address>:
	...

20014e7c <s_mac_address_arp_reply>:
	...

20014e84 <s_id>:
20014e84:	00000000 	andeq	r0, r0, r0

20014e88 <s_recv_queue>:
	...

200159f8 <s_tcb>:
	...

20015a3c <s_tcp>:
	...

20016028 <broadcast_mask>:
20016028:	00000000 	andeq	r0, r0, r0

2001602c <gw_ip>:
2001602c:	00000000 	andeq	r0, r0, r0

20016030 <on_network_mask>:
20016030:	00000000 	andeq	r0, r0, r0

20016034 <s_id>:
20016034:	00000000 	andeq	r0, r0, r0

20016038 <s_ports_allowed>:
	...

20016058 <s_recv_queue>:
	...

2001bcf8 <s_send_packet>:
	...

2001c2e4 <MDNS::s_nRemoteIp>:
2001c2e4:	00000000 	andeq	r0, r0, r0

2001c2e8 <MDNS::s_nRemotePort>:
2001c2e8:	00000000 	andeq	r0, r0, r0

2001c2ec <MDNS::s_nMulticastIp>:
2001c2ec:	00000000 	andeq	r0, r0, r0

2001c2f0 <MDNS::s_AnswerLocalIp>:
	...

2001c4f4 <MDNS::s_ServiceRecords>:
	...

2001c514 <MDNS::s_nBytesReceived>:
2001c514:	00000000 	andeq	r0, r0, r0

2001c518 <MDNS::s_ServiceRecordsData>:
	...

2001c71c <MDNS::s_pName>:
2001c71c:	00000000 	andeq	r0, r0, r0

2001c720 <MDNS::s_pBuffer>:
2001c720:	00000000 	andeq	r0, r0, r0

2001c724 <Network::s_pThis>:
2001c724:	00000000 	andeq	r0, r0, r0

2001c728 <NetworkParams::m_tNetworkParams>:
	...

2001c788 <s_arp_announce>:
	...

2001c7b4 <s_arp_reply>:
	...

2001c7e0 <s_arp_request>:
	...

2001c80c <s_arp_records>:
	...

2001c98c <s_entry_current>:
2001c98c:	00000000 	andeq	r0, r0, r0

2001c990 <s_dhcp_allocated_gw>:
2001c990:	00000000 	andeq	r0, r0, r0

2001c994 <s_dhcp_allocated_ip>:
2001c994:	00000000 	andeq	r0, r0, r0

2001c998 <s_dhcp_allocated_netmask>:
2001c998:	00000000 	andeq	r0, r0, r0

2001c99c <s_dhcp_message>:
	...

2001cbc0 <s_dhcp_server_ip>:
2001cbc0:	00000000 	andeq	r0, r0, r0

2001cbc4 <s_groups>:
	...

2001cce4 <s_id>:
2001cce4:	00000000 	andeq	r0, r0, r0

2001cce8 <s_joins_allowed_index>:
2001cce8:	00000000 	andeq	r0, r0, r0

2001ccec <s_leave>:
	...

2001cd1c <s_multicast_mac>:
	...

2001cd24 <s_report>:
	...

2001cd54 <DisplayUdf::s_pThis>:
2001cd54:	00000000 	andeq	r0, r0, r0

2001cd58 <PropertiesConfig::s_Config>:
2001cd58:	00000000 	andeq	r0, r0, r0

2001cd5c <Display::s_pThis>:
2001cd5c:	00000000 	andeq	r0, r0, r0

2001cd60 <_ClearBuffer>:
	...

2001cde8 <Ssd1306::s_pThis>:
2001cde8:	00000000 	andeq	r0, r0, r0

2001cdec <FirmwareVersion::s_FirmwareVersion>:
	...

2001ce02 <FirmwareVersion::s_Print>:
	...

2001ce44 <FirmwareVersion::s_pThis>:
2001ce44:	00000000 	andeq	r0, r0, r0

2001ce48 <LedBlink::s_pThis>:
2001ce48:	00000000 	andeq	r0, r0, r0

2001ce4c <Hardware::s_pThis>:
2001ce4c:	00000000 	andeq	r0, r0, r0

2001ce50 <last.0>:
	...

2001ce58 <s_micros>:
	...

2001ce60 <set_timer>:
2001ce60:	00000000 	andeq	r0, r0, r0

2001ce64 <s_nSysTickMillis>:
2001ce64:	00000000 	andeq	r0, r0, r0

2001ce68 <enet_init_status>:
2001ce68:	00000000 	andeq	r0, r0, r0

2001ce6c <s_nAddress>:
2001ce6c:	00000000 	andeq	r0, r0, r0

2001ce70 <dma_current_ptp_rxdesc>:
2001ce70:	00000000 	andeq	r0, r0, r0

2001ce74 <dma_current_ptp_txdesc>:
2001ce74:	00000000 	andeq	r0, r0, r0

2001ce78 <dma_current_rxdesc>:
2001ce78:	00000000 	andeq	r0, r0, r0

2001ce7c <dma_current_txdesc>:
2001ce7c:	00000000 	andeq	r0, r0, r0

2001ce80 <enet_initpara>:
	...

2001cebc <rx_buff>:
	...

20029924 <rxdesc_tab>:
	...

20029b44 <tx_buff>:
	...

2002a72c <txdesc_tab>:
	...

Disassembly of section .heap:

2003c000 <heap_low>:
	...

Disassembly of section .stack:

2003d800 <_sp-0x2800>:
	...
