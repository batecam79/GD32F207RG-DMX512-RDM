
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08007000 <__gVectors>:
 8007000:	20040000 	andcs	r0, r4, r0
 8007004:	080085bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, sl, pc}
 8007008:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 800700c:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007010:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007014:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007018:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
	...
 800702c:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007030:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007034:	00000000 	andeq	r0, r0, r0
 8007038:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 800703c:	08016ae1 	stmdaeq	r1, {r0, r5, r6, r7, r9, fp, sp, lr}
 8007040:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007044:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007048:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 800704c:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007050:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007054:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007058:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 800705c:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007060:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007064:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007068:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 800706c:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007070:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007074:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007078:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 800707c:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007080:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007084:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007088:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 800708c:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007090:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007094:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007098:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 800709c:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070a0:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070a4:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070a8:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070ac:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070b0:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070b4:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070b8:	080115ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r8, sl, ip}
 80070bc:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070c0:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070c4:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070c8:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070cc:	00000000 	andeq	r0, r0, r0
 80070d0:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070d4:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070d8:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070dc:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070e0:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070e4:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070e8:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070ec:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070f0:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070f4:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070f8:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80070fc:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007100:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007104:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007108:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 800710c:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007110:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007114:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007118:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 800711c:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007120:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007124:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007128:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 800712c:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007130:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007134:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007138:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 800713c:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007140:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007144:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007148:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 800714c:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007150:	00000000 	andeq	r0, r0, r0
 8007154:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007158:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 800715c:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007160:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007164:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
	...
 8007178:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 800717c:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007180:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 8007184:	00000000 	andeq	r0, r0, r0
 8007188:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 800718c:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
	...
 80071a0:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}
 80071a4:	08008601 	stmdaeq	r0, {r0, r9, sl, pc}

Disassembly of section .text:

080071a8 <net_init>:
 80071a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ac:	460c      	mov	r4, r1
 80071ae:	4616      	mov	r6, r2
 80071b0:	9f06      	ldr	r7, [sp, #24]
 80071b2:	4a22      	ldr	r2, [pc, #136]	; (800723c <net_init+0x94>)
 80071b4:	461d      	mov	r5, r3
 80071b6:	1e43      	subs	r3, r0, #1
 80071b8:	3005      	adds	r0, #5
 80071ba:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80071be:	4283      	cmp	r3, r0
 80071c0:	f802 1b01 	strb.w	r1, [r2], #1
 80071c4:	d1f9      	bne.n	80071ba <net_init+0x12>
 80071c6:	4623      	mov	r3, r4
 80071c8:	4a1d      	ldr	r2, [pc, #116]	; (8007240 <net_init+0x98>)
 80071ca:	f104 010c 	add.w	r1, r4, #12
 80071ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80071d2:	428b      	cmp	r3, r1
 80071d4:	f802 0b01 	strb.w	r0, [r2], #1
 80071d8:	d1f9      	bne.n	80071ce <net_init+0x26>
 80071da:	f04f 0800 	mov.w	r8, #0
 80071de:	4918      	ldr	r1, [pc, #96]	; (8007240 <net_init+0x98>)
 80071e0:	4816      	ldr	r0, [pc, #88]	; (800723c <net_init+0x94>)
 80071e2:	f000 f9a7 	bl	8007534 <ip_init>
 80071e6:	4815      	ldr	r0, [pc, #84]	; (800723c <net_init+0x94>)
 80071e8:	f000 f83c 	bl	8007264 <rfc3927_init>
 80071ec:	f887 8000 	strb.w	r8, [r7]
 80071f0:	782b      	ldrb	r3, [r5, #0]
 80071f2:	b163      	cbz	r3, 800720e <net_init+0x66>
 80071f4:	4632      	mov	r2, r6
 80071f6:	4912      	ldr	r1, [pc, #72]	; (8007240 <net_init+0x98>)
 80071f8:	4810      	ldr	r0, [pc, #64]	; (800723c <net_init+0x94>)
 80071fa:	f00d fc7d 	bl	8014af8 <dhcp_client>
 80071fe:	4540      	cmp	r0, r8
 8007200:	da05      	bge.n	800720e <net_init+0x66>
 8007202:	480f      	ldr	r0, [pc, #60]	; (8007240 <net_init+0x98>)
 8007204:	f885 8000 	strb.w	r8, [r5]
 8007208:	f00b fe62 	bl	8012ed0 <rfc3927>
 800720c:	7038      	strb	r0, [r7, #0]
 800720e:	490c      	ldr	r1, [pc, #48]	; (8007240 <net_init+0x98>)
 8007210:	480a      	ldr	r0, [pc, #40]	; (800723c <net_init+0x94>)
 8007212:	f000 f883 	bl	800731c <arp_init>
 8007216:	480a      	ldr	r0, [pc, #40]	; (8007240 <net_init+0x98>)
 8007218:	f00d fe8e 	bl	8014f38 <ip_set_ip>
 800721c:	f000 f82e 	bl	800727c <tcp_init>
 8007220:	4a07      	ldr	r2, [pc, #28]	; (8007240 <net_init+0x98>)
 8007222:	1e63      	subs	r3, r4, #1
 8007224:	340b      	adds	r4, #11
 8007226:	f812 1b01 	ldrb.w	r1, [r2], #1
 800722a:	f803 1f01 	strb.w	r1, [r3, #1]!
 800722e:	429c      	cmp	r4, r3
 8007230:	d1f9      	bne.n	8007226 <net_init+0x7e>
 8007232:	782a      	ldrb	r2, [r5, #0]
 8007234:	4b03      	ldr	r3, [pc, #12]	; (8007244 <net_init+0x9c>)
 8007236:	701a      	strb	r2, [r3, #0]
 8007238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800723c:	20015a14 	andcs	r5, r1, r4, lsl sl
 8007240:	20015a08 	andcs	r5, r1, r8, lsl #20
 8007244:	20015a1a 	andcs	r5, r1, sl, lsl sl

08007248 <net_shutdown>:
 8007248:	b508      	push	{r3, lr}
 800724a:	f000 f97e 	bl	800754a <ip_shutdown>
 800724e:	4b04      	ldr	r3, [pc, #16]	; (8007260 <net_shutdown+0x18>)
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	b11b      	cbz	r3, 800725c <net_shutdown+0x14>
 8007254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007258:	f00d bd56 	b.w	8014d08 <dhcp_client_release>
 800725c:	bd08      	pop	{r3, pc}
 800725e:	bf00      	nop
 8007260:	20015a1a 	andcs	r5, r1, sl, lsl sl

08007264 <rfc3927_init>:
 8007264:	4b04      	ldr	r3, [pc, #16]	; (8007278 <rfc3927_init+0x14>)
 8007266:	1d82      	adds	r2, r0, #6
 8007268:	4290      	cmp	r0, r2
 800726a:	d100      	bne.n	800726e <rfc3927_init+0xa>
 800726c:	4770      	bx	lr
 800726e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007272:	f803 1b01 	strb.w	r1, [r3], #1
 8007276:	e7f7      	b.n	8007268 <rfc3927_init+0x4>
 8007278:	20015a24 	andcs	r5, r1, r4, lsr #20

0800727c <tcp_init>:
 800727c:	2206      	movs	r2, #6
 800727e:	b513      	push	{r0, r1, r4, lr}
 8007280:	4c0b      	ldr	r4, [pc, #44]	; (80072b0 <tcp_init+0x34>)
 8007282:	490c      	ldr	r1, [pc, #48]	; (80072b4 <tcp_init+0x38>)
 8007284:	18a0      	adds	r0, r4, r2
 8007286:	f00b fe7d 	bl	8012f84 <memcpy.isra.0>
 800728a:	2308      	movs	r3, #8
 800728c:	2204      	movs	r2, #4
 800728e:	81a3      	strh	r3, [r4, #12]
 8007290:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <tcp_init+0x3c>)
 8007292:	eb0d 0102 	add.w	r1, sp, r2
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f104 001a 	add.w	r0, r4, #26
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	f00b fe71 	bl	8012f84 <memcpy.isra.0>
 80072a2:	2345      	movs	r3, #69	; 0x45
 80072a4:	81e3      	strh	r3, [r4, #14]
 80072a6:	4b05      	ldr	r3, [pc, #20]	; (80072bc <tcp_init+0x40>)
 80072a8:	6163      	str	r3, [r4, #20]
 80072aa:	b002      	add	sp, #8
 80072ac:	bd10      	pop	{r4, pc}
 80072ae:	bf00      	nop
 80072b0:	200165ec 	andcs	r6, r1, ip, ror #11
 80072b4:	20015a14 	andcs	r5, r1, r4, lsl sl
 80072b8:	20015a08 	andcs	r5, r1, r8, lsl #20
 80072bc:	06400040 	strbeq	r0, [r0], -r0, asr #32

080072c0 <udp_init>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	2200      	movs	r2, #0
 80072c4:	2408      	movs	r4, #8
 80072c6:	460e      	mov	r6, r1
 80072c8:	4b0d      	ldr	r3, [pc, #52]	; (8007300 <udp_init+0x40>)
 80072ca:	490e      	ldr	r1, [pc, #56]	; (8007304 <udp_init+0x44>)
 80072cc:	3c01      	subs	r4, #1
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	805a      	strh	r2, [r3, #2]
 80072d2:	f841 2b04 	str.w	r2, [r1], #4
 80072d6:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 80072da:	d1f7      	bne.n	80072cc <udp_init+0xc>
 80072dc:	2206      	movs	r2, #6
 80072de:	4d0a      	ldr	r5, [pc, #40]	; (8007308 <udp_init+0x48>)
 80072e0:	4b0a      	ldr	r3, [pc, #40]	; (800730c <udp_init+0x4c>)
 80072e2:	4601      	mov	r1, r0
 80072e4:	18a8      	adds	r0, r5, r2
 80072e6:	801c      	strh	r4, [r3, #0]
 80072e8:	f00b ffd0 	bl	801328c <memcpy.isra.0>
 80072ec:	4b08      	ldr	r3, [pc, #32]	; (8007310 <udp_init+0x50>)
 80072ee:	4630      	mov	r0, r6
 80072f0:	60eb      	str	r3, [r5, #12]
 80072f2:	4b08      	ldr	r3, [pc, #32]	; (8007314 <udp_init+0x54>)
 80072f4:	616b      	str	r3, [r5, #20]
 80072f6:	f00b fff1 	bl	80132dc <udp_set_ip>
 80072fa:	852c      	strh	r4, [r5, #40]	; 0x28
 80072fc:	bd70      	pop	{r4, r5, r6, pc}
 80072fe:	bf00      	nop
 8007300:	20016c08 	andcs	r6, r1, r8, lsl #24
 8007304:	20016be8 	andcs	r6, r1, r8, ror #23
 8007308:	2001c8a8 	andcs	ip, r1, r8, lsr #17
 800730c:	20016be4 	andcs	r6, r1, r4, ror #23
 8007310:	00450008 	subeq	r0, r5, r8
 8007314:	11400040 	cmpne	r0, r0, asr #32

08007318 <udp_shutdown>:
 8007318:	4770      	bx	lr
	...

0800731c <arp_init>:
 800731c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007320:	4604      	mov	r4, r0
 8007322:	460d      	mov	r5, r1
 8007324:	f000 f876 	bl	8007414 <arp_cache_init>
 8007328:	2206      	movs	r2, #6
 800732a:	4621      	mov	r1, r4
 800732c:	482e      	ldr	r0, [pc, #184]	; (80073e8 <arp_init+0xcc>)
 800732e:	682f      	ldr	r7, [r5, #0]
 8007330:	f00d fa64 	bl	80147fc <memcpy.isra.0>
 8007334:	4b2d      	ldr	r3, [pc, #180]	; (80073ec <arp_init+0xd0>)
 8007336:	2507      	movs	r5, #7
 8007338:	461e      	mov	r6, r3
 800733a:	22ff      	movs	r2, #255	; 0xff
 800733c:	3d01      	subs	r5, #1
 800733e:	d146      	bne.n	80073ce <arp_init+0xb2>
 8007340:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <arp_init+0xd4>)
 8007342:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80073f4 <arp_init+0xd8>
 8007346:	2206      	movs	r2, #6
 8007348:	e9c6 3803 	strd	r3, r8, [r6, #12]
 800734c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007350:	4621      	mov	r1, r4
 8007352:	4829      	ldr	r0, [pc, #164]	; (80073f8 <arp_init+0xdc>)
 8007354:	82b3      	strh	r3, [r6, #20]
 8007356:	f00d fa51 	bl	80147fc <memcpy.isra.0>
 800735a:	2307      	movs	r3, #7
 800735c:	4a27      	ldr	r2, [pc, #156]	; (80073fc <arp_init+0xe0>)
 800735e:	61f7      	str	r7, [r6, #28]
 8007360:	3b01      	subs	r3, #1
 8007362:	d137      	bne.n	80073d4 <arp_init+0xb8>
 8007364:	2206      	movs	r2, #6
 8007366:	4621      	mov	r1, r4
 8007368:	4825      	ldr	r0, [pc, #148]	; (8007400 <arp_init+0xe4>)
 800736a:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 800736e:	f00d fa45 	bl	80147fc <memcpy.isra.0>
 8007372:	4a24      	ldr	r2, [pc, #144]	; (8007404 <arp_init+0xe8>)
 8007374:	2306      	movs	r3, #6
 8007376:	4615      	mov	r5, r2
 8007378:	21ff      	movs	r1, #255	; 0xff
 800737a:	3b01      	subs	r3, #1
 800737c:	d22d      	bcs.n	80073da <arp_init+0xbe>
 800737e:	4b1c      	ldr	r3, [pc, #112]	; (80073f0 <arp_init+0xd4>)
 8007380:	2206      	movs	r2, #6
 8007382:	e9c5 3803 	strd	r3, r8, [r5, #12]
 8007386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800738a:	4621      	mov	r1, r4
 800738c:	481e      	ldr	r0, [pc, #120]	; (8007408 <arp_init+0xec>)
 800738e:	82ab      	strh	r3, [r5, #20]
 8007390:	f00d fa34 	bl	80147fc <memcpy.isra.0>
 8007394:	2307      	movs	r3, #7
 8007396:	2100      	movs	r1, #0
 8007398:	4a1c      	ldr	r2, [pc, #112]	; (800740c <arp_init+0xf0>)
 800739a:	61ef      	str	r7, [r5, #28]
 800739c:	3b01      	subs	r3, #1
 800739e:	d11f      	bne.n	80073e0 <arp_init+0xc4>
 80073a0:	2206      	movs	r2, #6
 80073a2:	4d1b      	ldr	r5, [pc, #108]	; (8007410 <arp_init+0xf4>)
 80073a4:	4621      	mov	r1, r4
 80073a6:	18a8      	adds	r0, r5, r2
 80073a8:	f00d fa28 	bl	80147fc <memcpy.isra.0>
 80073ac:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <arp_init+0xd4>)
 80073ae:	4621      	mov	r1, r4
 80073b0:	e9c5 3803 	strd	r3, r8, [r5, #12]
 80073b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073b8:	f105 0016 	add.w	r0, r5, #22
 80073bc:	2206      	movs	r2, #6
 80073be:	82ab      	strh	r3, [r5, #20]
 80073c0:	f00d fa1c 	bl	80147fc <memcpy.isra.0>
 80073c4:	61ef      	str	r7, [r5, #28]
 80073c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073ca:	f00d ba21 	b.w	8014810 <arp_announce>
 80073ce:	f803 2b01 	strb.w	r2, [r3], #1
 80073d2:	e7b3      	b.n	800733c <arp_init+0x20>
 80073d4:	f802 5b01 	strb.w	r5, [r2], #1
 80073d8:	e7c2      	b.n	8007360 <arp_init+0x44>
 80073da:	f802 1b01 	strb.w	r1, [r2], #1
 80073de:	e7cc      	b.n	800737a <arp_init+0x5e>
 80073e0:	f802 1b01 	strb.w	r1, [r2], #1
 80073e4:	e7da      	b.n	800739c <arp_init+0x80>
 80073e6:	bf00      	nop
 80073e8:	2001d2de 	ldrdcs	sp, [r1], -lr
 80073ec:	2001d2d8 	ldrdcs	sp, [r1], -r8
 80073f0:	01000608 	tsteq	r0, r8, lsl #12
 80073f4:	04060008 	streq	r0, [r6], #-8
 80073f8:	2001d2ee 	andcs	sp, r1, lr, ror #5
 80073fc:	2001d2f8 	strdcs	sp, [r1], -r8
 8007400:	2001d336 	andcs	sp, r1, r6, lsr r3
 8007404:	2001d330 	andcs	sp, r1, r0, lsr r3
 8007408:	2001d346 	andcs	sp, r1, r6, asr #6
 800740c:	2001d350 	andcs	sp, r1, r0, asr r3
 8007410:	2001d304 	andcs	sp, r1, r4, lsl #6

08007414 <arp_cache_init>:
 8007414:	2300      	movs	r3, #0
 8007416:	4618      	mov	r0, r3
 8007418:	4a09      	ldr	r2, [pc, #36]	; (8007440 <arp_cache_init+0x2c>)
 800741a:	b510      	push	{r4, lr}
 800741c:	8013      	strh	r3, [r2, #0]
 800741e:	4a09      	ldr	r2, [pc, #36]	; (8007444 <arp_cache_init+0x30>)
 8007420:	4611      	mov	r1, r2
 8007422:	f842 0c04 	str.w	r0, [r2, #-4]
 8007426:	1d94      	adds	r4, r2, #6
 8007428:	42a1      	cmp	r1, r4
 800742a:	d105      	bne.n	8007438 <arp_cache_init+0x24>
 800742c:	3303      	adds	r3, #3
 800742e:	2b60      	cmp	r3, #96	; 0x60
 8007430:	f102 020c 	add.w	r2, r2, #12
 8007434:	d1f4      	bne.n	8007420 <arp_cache_init+0xc>
 8007436:	bd10      	pop	{r4, pc}
 8007438:	f801 0b01 	strb.w	r0, [r1], #1
 800743c:	e7f4      	b.n	8007428 <arp_cache_init+0x14>
 800743e:	bf00      	nop
 8007440:	2001d4dc 	ldrdcs	sp, [r1], -ip
 8007444:	2001d360 	andcs	sp, r1, r0, ror #6

08007448 <igmp_init>:
 8007448:	2200      	movs	r2, #0
 800744a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800744e:	4605      	mov	r5, r0
 8007450:	4608      	mov	r0, r1
 8007452:	4611      	mov	r1, r2
 8007454:	4b23      	ldr	r3, [pc, #140]	; (80074e4 <igmp_init+0x9c>)
 8007456:	f103 0408 	add.w	r4, r3, #8
 800745a:	42a3      	cmp	r3, r4
 800745c:	d13e      	bne.n	80074dc <igmp_init+0x94>
 800745e:	3201      	adds	r2, #1
 8007460:	2a24      	cmp	r2, #36	; 0x24
 8007462:	d1f8      	bne.n	8007456 <igmp_init+0xe>
 8007464:	2600      	movs	r6, #0
 8007466:	4b20      	ldr	r3, [pc, #128]	; (80074e8 <igmp_init+0xa0>)
 8007468:	4c20      	ldr	r4, [pc, #128]	; (80074ec <igmp_init+0xa4>)
 800746a:	601e      	str	r6, [r3, #0]
 800746c:	4b20      	ldr	r3, [pc, #128]	; (80074f0 <igmp_init+0xa8>)
 800746e:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8007472:	801e      	strh	r6, [r3, #0]
 8007474:	f00d fcc0 	bl	8014df8 <igmp_set_ip>
 8007478:	2201      	movs	r2, #1
 800747a:	4b1e      	ldr	r3, [pc, #120]	; (80074f4 <igmp_init+0xac>)
 800747c:	4629      	mov	r1, r5
 800747e:	801a      	strh	r2, [r3, #0]
 8007480:	225e      	movs	r2, #94	; 0x5e
 8007482:	709a      	strb	r2, [r3, #2]
 8007484:	2206      	movs	r2, #6
 8007486:	18a0      	adds	r0, r4, r2
 8007488:	f00d fc6c 	bl	8014d64 <memcpy.isra.0>
 800748c:	f240 4394 	movw	r3, #1172	; 0x494
 8007490:	8463      	strh	r3, [r4, #34]	; 0x22
 8007492:	2316      	movs	r3, #22
 8007494:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80074f8 <igmp_init+0xb0>
 8007498:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80074fc <igmp_init+0xb4>
 800749c:	84e3      	strh	r3, [r4, #38]	; 0x26
 800749e:	f8c4 9014 	str.w	r9, [r4, #20]
 80074a2:	4b17      	ldr	r3, [pc, #92]	; (8007500 <igmp_init+0xb8>)
 80074a4:	f8c4 800c 	str.w	r8, [r4, #12]
 80074a8:	8227      	strh	r7, [r4, #16]
 80074aa:	84a6      	strh	r6, [r4, #36]	; 0x24
 80074ac:	4c15      	ldr	r4, [pc, #84]	; (8007504 <igmp_init+0xbc>)
 80074ae:	2206      	movs	r2, #6
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074b6:	18a0      	adds	r0, r4, r2
 80074b8:	80a3      	strh	r3, [r4, #4]
 80074ba:	4629      	mov	r1, r5
 80074bc:	f00d fc52 	bl	8014d64 <memcpy.isra.0>
 80074c0:	23e0      	movs	r3, #224	; 0xe0
 80074c2:	83e3      	strh	r3, [r4, #30]
 80074c4:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 80074c8:	4a0f      	ldr	r2, [pc, #60]	; (8007508 <igmp_init+0xc0>)
 80074ca:	f8c4 9014 	str.w	r9, [r4, #20]
 80074ce:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80074d2:	f8c4 800c 	str.w	r8, [r4, #12]
 80074d6:	8227      	strh	r7, [r4, #16]
 80074d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074dc:	f803 1b01 	strb.w	r1, [r3], #1
 80074e0:	e7bb      	b.n	800745a <igmp_init+0x12>
 80074e2:	bf00      	nop
 80074e4:	2001d714 	andcs	sp, r1, r4, lsl r7
 80074e8:	2001d838 	andcs	sp, r1, r8, lsr r8
 80074ec:	2001d874 	andcs	sp, r1, r4, ror r8
 80074f0:	2001d834 	andcs	sp, r1, r4, lsr r8
 80074f4:	2001d86c 	andcs	sp, r1, ip, ror #16
 80074f8:	02010040 	andeq	r0, r1, #64	; 0x40
 80074fc:	00460008 	subeq	r0, r6, r8
 8007500:	005e0001 	subseq	r0, lr, r1
 8007504:	2001d83c 	andcs	sp, r1, ip, lsr r8
 8007508:	04940200 	ldreq	r0, [r4], #512	; 0x200

0800750c <igmp_shutdown>:
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	2500      	movs	r5, #0
 8007510:	462e      	mov	r6, r5
 8007512:	4c07      	ldr	r4, [pc, #28]	; (8007530 <igmp_shutdown+0x24>)
 8007514:	6820      	ldr	r0, [r4, #0]
 8007516:	b120      	cbz	r0, 8007522 <igmp_shutdown+0x16>
 8007518:	f00d fcca 	bl	8014eb0 <igmp_leave>
 800751c:	6026      	str	r6, [r4, #0]
 800751e:	7166      	strb	r6, [r4, #5]
 8007520:	7126      	strb	r6, [r4, #4]
 8007522:	3501      	adds	r5, #1
 8007524:	2d24      	cmp	r5, #36	; 0x24
 8007526:	f104 0408 	add.w	r4, r4, #8
 800752a:	d1f3      	bne.n	8007514 <igmp_shutdown+0x8>
 800752c:	bd70      	pop	{r4, r5, r6, pc}
 800752e:	bf00      	nop
 8007530:	2001d714 	andcs	sp, r1, r4, lsl r7

08007534 <ip_init>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4604      	mov	r4, r0
 8007538:	460d      	mov	r5, r1
 800753a:	f7ff fec1 	bl	80072c0 <udp_init>
 800753e:	4629      	mov	r1, r5
 8007540:	4620      	mov	r0, r4
 8007542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007546:	f7ff bf7f 	b.w	8007448 <igmp_init>

0800754a <ip_shutdown>:
 800754a:	b508      	push	{r3, lr}
 800754c:	f7ff ffde 	bl	800750c <igmp_shutdown>
 8007550:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007554:	f7ff bee0 	b.w	8007318 <udp_shutdown>

08007558 <console_init>:
 8007558:	b508      	push	{r3, lr}
 800755a:	f00f fa63 	bl	8016a24 <uart0_init>
 800755e:	4804      	ldr	r0, [pc, #16]	; (8007570 <console_init+0x18>)
 8007560:	f00f fa90 	bl	8016a84 <uart0_puts>
 8007564:	4803      	ldr	r0, [pc, #12]	; (8007574 <console_init+0x1c>)
 8007566:	f00f fa8d 	bl	8016a84 <uart0_puts>
 800756a:	2000      	movs	r0, #0
 800756c:	bd08      	pop	{r3, pc}
 800756e:	bf00      	nop
 8007570:	08018c3c 	stmdaeq	r1, {r2, r3, r4, r5, sl, fp, pc}
 8007574:	0801bed8 	stmdaeq	r1, {r3, r4, r6, r7, r9, sl, fp, ip, sp, pc}

08007578 <net_handle>:
 8007578:	b510      	push	{r4, lr}
 800757a:	4c0c      	ldr	r4, [pc, #48]	; (80075ac <net_handle+0x34>)
 800757c:	4620      	mov	r0, r4
 800757e:	f010 f9a1 	bl	80178c4 <emac_eth_recv>
 8007582:	2800      	cmp	r0, #0
 8007584:	dd07      	ble.n	8007596 <net_handle+0x1e>
 8007586:	6820      	ldr	r0, [r4, #0]
 8007588:	8983      	ldrh	r3, [r0, #12]
 800758a:	2b08      	cmp	r3, #8
 800758c:	d107      	bne.n	800759e <net_handle+0x26>
 800758e:	f000 fa6f 	bl	8007a70 <ip_handle>
 8007592:	f010 f9ab 	bl	80178ec <emac_free_pkt>
 8007596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800759a:	f00b bc89 	b.w	8012eb0 <net_timers_run>
 800759e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80075a2:	d1f6      	bne.n	8007592 <net_handle+0x1a>
 80075a4:	f000 fa08 	bl	80079b8 <arp_handle>
 80075a8:	e7f3      	b.n	8007592 <net_handle+0x1a>
 80075aa:	bf00      	nop
 80075ac:	20015a1c 	andcs	r5, r1, ip, lsl sl

080075b0 <tcp_handle>:
 80075b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075b4:	4605      	mov	r5, r0
 80075b6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80075b8:	f8b0 8010 	ldrh.w	r8, [r0, #16]
 80075bc:	ba5b      	rev16	r3, r3
 80075be:	8443      	strh	r3, [r0, #34]	; 0x22
 80075c0:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80075c2:	f890 902e 	ldrb.w	r9, [r0, #46]	; 0x2e
 80075c6:	ba5b      	rev16	r3, r3
 80075c8:	8483      	strh	r3, [r0, #36]	; 0x24
 80075ca:	f00b fce5 	bl	8012f98 <_bswap32>
 80075ce:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 80075d0:	4ca5      	ldr	r4, [pc, #660]	; (8007868 <tcp_handle+0x2b8>)
 80075d2:	ba5b      	rev16	r3, r3
 80075d4:	862b      	strh	r3, [r5, #48]	; 0x30
 80075d6:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80075d8:	8822      	ldrh	r2, [r4, #0]
 80075da:	ba5b      	rev16	r3, r3
 80075dc:	86ab      	strh	r3, [r5, #52]	; 0x34
 80075de:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d14d      	bne.n	8007680 <tcp_handle+0xd0>
 80075e4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d00d      	beq.n	8007608 <tcp_handle+0x58>
 80075ec:	2204      	movs	r2, #4
 80075ee:	4668      	mov	r0, sp
 80075f0:	f105 011a 	add.w	r1, r5, #26
 80075f4:	f00b fcc6 	bl	8012f84 <memcpy.isra.0>
 80075f8:	8862      	ldrh	r2, [r4, #2]
 80075fa:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d13f      	bne.n	8007680 <tcp_handle+0xd0>
 8007600:	6862      	ldr	r2, [r4, #4]
 8007602:	9b00      	ldr	r3, [sp, #0]
 8007604:	429a      	cmp	r2, r3
 8007606:	d13b      	bne.n	8007680 <tcp_handle+0xd0>
 8007608:	2204      	movs	r2, #4
 800760a:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 800760e:	eb0d 0002 	add.w	r0, sp, r2
 8007612:	f00b fcb7 	bl	8012f84 <memcpy.isra.0>
 8007616:	2204      	movs	r2, #4
 8007618:	f105 0126 	add.w	r1, r5, #38	; 0x26
 800761c:	eb0d 0002 	add.w	r0, sp, r2
 8007620:	9e01      	ldr	r6, [sp, #4]
 8007622:	f00b fcaf 	bl	8012f84 <memcpy.isra.0>
 8007626:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800762a:	9f01      	ldr	r7, [sp, #4]
 800762c:	2a01      	cmp	r2, #1
 800762e:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 8007632:	d01b      	beq.n	800766c <tcp_handle+0xbc>
 8007634:	1ed3      	subs	r3, r2, #3
 8007636:	2b07      	cmp	r3, #7
 8007638:	d822      	bhi.n	8007680 <tcp_handle+0xd0>
 800763a:	fa98 f198 	rev16.w	r1, r8
 800763e:	f64f 78ec 	movw	r8, #65516	; 0xffec
 8007642:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8007646:	eba8 0883 	sub.w	r8, r8, r3, lsl #2
 800764a:	4488      	add	r8, r1
 800764c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800764e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 8007652:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8007656:	fa1f f888 	uxth.w	r8, r8
 800765a:	2900      	cmp	r1, #0
 800765c:	d142      	bne.n	80076e4 <tcp_handle+0x134>
 800765e:	f1b8 0f00 	cmp.w	r8, #0
 8007662:	d16b      	bne.n	800773c <tcp_handle+0x18c>
 8007664:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007666:	42bb      	cmp	r3, r7
 8007668:	d168      	bne.n	800773c <tcp_handle+0x18c>
 800766a:	e048      	b.n	80076fe <tcp_handle+0x14e>
 800766c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007670:	075a      	lsls	r2, r3, #29
 8007672:	d405      	bmi.n	8007680 <tcp_handle+0xd0>
 8007674:	06d8      	lsls	r0, r3, #27
 8007676:	d506      	bpl.n	8007686 <tcp_handle+0xd6>
 8007678:	4628      	mov	r0, r5
 800767a:	497b      	ldr	r1, [pc, #492]	; (8007868 <tcp_handle+0x2b8>)
 800767c:	f00b fd58 	bl	8013130 <_send_reset>
 8007680:	b004      	add	sp, #16
 8007682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007686:	0799      	lsls	r1, r3, #30
 8007688:	d5fa      	bpl.n	8007680 <tcp_handle+0xd0>
 800768a:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 800768e:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8007692:	4668      	mov	r0, sp
 8007694:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007698:	f105 011a 	add.w	r1, r5, #26
 800769c:	2204      	movs	r2, #4
 800769e:	8063      	strh	r3, [r4, #2]
 80076a0:	f00b fc70 	bl	8012f84 <memcpy.isra.0>
 80076a4:	2206      	movs	r2, #6
 80076a6:	9b00      	ldr	r3, [sp, #0]
 80076a8:	18a9      	adds	r1, r5, r2
 80076aa:	4870      	ldr	r0, [pc, #448]	; (800786c <tcp_handle+0x2bc>)
 80076ac:	6063      	str	r3, [r4, #4]
 80076ae:	f00b fc69 	bl	8012f84 <memcpy.isra.0>
 80076b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80076b4:	1c7b      	adds	r3, r7, #1
 80076b6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80076ba:	6363      	str	r3, [r4, #52]	; 0x34
 80076bc:	2312      	movs	r3, #18
 80076be:	486a      	ldr	r0, [pc, #424]	; (8007868 <tcp_handle+0x2b8>)
 80076c0:	a901      	add	r1, sp, #4
 80076c2:	f88d 300c 	strb.w	r3, [sp, #12]
 80076c6:	e9c4 7608 	strd	r7, r6, [r4, #32]
 80076ca:	63e7      	str	r7, [r4, #60]	; 0x3c
 80076cc:	f8c4 a018 	str.w	sl, [r4, #24]
 80076d0:	f00b fc88 	bl	8012fe4 <_tcp_send_package>
 80076d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	e9c4 3204 	strd	r3, r2, [r4, #16]
 80076dc:	2303      	movs	r3, #3
 80076de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80076e2:	e7cd      	b.n	8007680 <tcp_handle+0xd0>
 80076e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076e6:	eba3 0c07 	sub.w	ip, r3, r7
 80076ea:	f1b8 0f00 	cmp.w	r8, #0
 80076ee:	d10d      	bne.n	800770c <tcp_handle+0x15c>
 80076f0:	f1bc 0f00 	cmp.w	ip, #0
 80076f4:	dc22      	bgt.n	800773c <tcp_handle+0x18c>
 80076f6:	1afb      	subs	r3, r7, r3
 80076f8:	1a5b      	subs	r3, r3, r1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	da1e      	bge.n	800773c <tcp_handle+0x18c>
 80076fe:	0743      	lsls	r3, r0, #29
 8007700:	d530      	bpl.n	8007764 <tcp_handle+0x1b4>
 8007702:	8821      	ldrh	r1, [r4, #0]
 8007704:	4858      	ldr	r0, [pc, #352]	; (8007868 <tcp_handle+0x2b8>)
 8007706:	f00b fc23 	bl	8012f50 <_init_tcb>
 800770a:	e7b9      	b.n	8007680 <tcp_handle+0xd0>
 800770c:	f1bc 0f00 	cmp.w	ip, #0
 8007710:	dc06      	bgt.n	8007720 <tcp_handle+0x170>
 8007712:	eba7 0c03 	sub.w	ip, r7, r3
 8007716:	ebac 0c01 	sub.w	ip, ip, r1
 800771a:	f1bc 0f00 	cmp.w	ip, #0
 800771e:	dbee      	blt.n	80076fe <tcp_handle+0x14e>
 8007720:	eb08 0c07 	add.w	ip, r8, r7
 8007724:	f103 0e01 	add.w	lr, r3, #1
 8007728:	ebae 0e0c 	sub.w	lr, lr, ip
 800772c:	f1be 0f00 	cmp.w	lr, #0
 8007730:	dc04      	bgt.n	800773c <tcp_handle+0x18c>
 8007732:	43db      	mvns	r3, r3
 8007734:	1a5b      	subs	r3, r3, r1
 8007736:	eb13 0f0c 	cmn.w	r3, ip
 800773a:	d4e0      	bmi.n	80076fe <tcp_handle+0x14e>
 800773c:	0742      	lsls	r2, r0, #29
 800773e:	d505      	bpl.n	800774c <tcp_handle+0x19c>
 8007740:	8821      	ldrh	r1, [r4, #0]
 8007742:	4849      	ldr	r0, [pc, #292]	; (8007868 <tcp_handle+0x2b8>)
 8007744:	f00b fc04 	bl	8012f50 <_init_tcb>
 8007748:	2301      	movs	r3, #1
 800774a:	e7c8      	b.n	80076de <tcp_handle+0x12e>
 800774c:	6963      	ldr	r3, [r4, #20]
 800774e:	9301      	str	r3, [sp, #4]
 8007750:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007752:	9302      	str	r3, [sp, #8]
 8007754:	2310      	movs	r3, #16
 8007756:	4844      	ldr	r0, [pc, #272]	; (8007868 <tcp_handle+0x2b8>)
 8007758:	a901      	add	r1, sp, #4
 800775a:	f88d 300c 	strb.w	r3, [sp, #12]
 800775e:	f00b fc41 	bl	8012fe4 <_tcp_send_package>
 8007762:	e78d      	b.n	8007680 <tcp_handle+0xd0>
 8007764:	0781      	lsls	r1, r0, #30
 8007766:	d505      	bpl.n	8007774 <tcp_handle+0x1c4>
 8007768:	2a03      	cmp	r2, #3
 800776a:	d0ed      	beq.n	8007748 <tcp_handle+0x198>
 800776c:	4628      	mov	r0, r5
 800776e:	493e      	ldr	r1, [pc, #248]	; (8007868 <tcp_handle+0x2b8>)
 8007770:	f00b fcde 	bl	8013130 <_send_reset>
 8007774:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007778:	06da      	lsls	r2, r3, #27
 800777a:	d581      	bpl.n	8007680 <tcp_handle+0xd0>
 800777c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007780:	3b03      	subs	r3, #3
 8007782:	2b07      	cmp	r3, #7
 8007784:	d818      	bhi.n	80077b8 <tcp_handle+0x208>
 8007786:	e8df f003 	tbb	[pc, r3]
 800778a:	75757504 	ldrbvc	r7, [r5, #-1284]!	; 0xfffffafc
 800778e:	a59c7575 	ldrge	r7, [ip, #1397]	; 0x575
 8007792:	6923      	ldr	r3, [r4, #16]
 8007794:	1b9b      	subs	r3, r3, r6
 8007796:	2b00      	cmp	r3, #0
 8007798:	dc0a      	bgt.n	80077b0 <tcp_handle+0x200>
 800779a:	6963      	ldr	r3, [r4, #20]
 800779c:	1af3      	subs	r3, r6, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	dc06      	bgt.n	80077b0 <tcp_handle+0x200>
 80077a2:	2304      	movs	r3, #4
 80077a4:	e9c4 7608 	strd	r7, r6, [r4, #32]
 80077a8:	f8c4 a018 	str.w	sl, [r4, #24]
 80077ac:	6126      	str	r6, [r4, #16]
 80077ae:	e796      	b.n	80076de <tcp_handle+0x12e>
 80077b0:	4628      	mov	r0, r5
 80077b2:	492d      	ldr	r1, [pc, #180]	; (8007868 <tcp_handle+0x2b8>)
 80077b4:	f00b fcbc 	bl	8013130 <_send_reset>
 80077b8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80077bc:	3b04      	subs	r3, #4
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d830      	bhi.n	8007824 <tcp_handle+0x274>
 80077c2:	f1b8 0f00 	cmp.w	r8, #0
 80077c6:	d02d      	beq.n	8007824 <tcp_handle+0x274>
 80077c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077ca:	42bb      	cmp	r3, r7
 80077cc:	f040 8091 	bne.w	80078f2 <tcp_handle+0x342>
 80077d0:	f240 53b6 	movw	r3, #1462	; 0x5b6
 80077d4:	f8df a098 	ldr.w	sl, [pc, #152]	; 8007870 <tcp_handle+0x2c0>
 80077d8:	f105 0122 	add.w	r1, r5, #34	; 0x22
 80077dc:	f8ba 7000 	ldrh.w	r7, [sl]
 80077e0:	4642      	mov	r2, r8
 80077e2:	435f      	muls	r7, r3
 80077e4:	1d38      	adds	r0, r7, #4
 80077e6:	4449      	add	r1, r9
 80077e8:	4450      	add	r0, sl
 80077ea:	f00b fbcb 	bl	8012f84 <memcpy.isra.0>
 80077ee:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80077f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077f2:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 80077f6:	8722      	strh	r2, [r4, #56]	; 0x38
 80077f8:	6962      	ldr	r2, [r4, #20]
 80077fa:	4443      	add	r3, r8
 80077fc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007800:	6363      	str	r3, [r4, #52]	; 0x34
 8007802:	2310      	movs	r3, #16
 8007804:	4457      	add	r7, sl
 8007806:	4818      	ldr	r0, [pc, #96]	; (8007868 <tcp_handle+0x2b8>)
 8007808:	f8a7 85b8 	strh.w	r8, [r7, #1464]	; 0x5b8
 800780c:	a901      	add	r1, sp, #4
 800780e:	f88d 300c 	strb.w	r3, [sp, #12]
 8007812:	f00b fbe7 	bl	8012fe4 <_tcp_send_package>
 8007816:	f8ba 3000 	ldrh.w	r3, [sl]
 800781a:	3301      	adds	r3, #1
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	f8aa 3000 	strh.w	r3, [sl]
 8007824:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007828:	2b02      	cmp	r3, #2
 800782a:	f67f af29 	bls.w	8007680 <tcp_handle+0xd0>
 800782e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007832:	07db      	lsls	r3, r3, #31
 8007834:	f57f af24 	bpl.w	8007680 <tcp_handle+0xd0>
 8007838:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800783a:	6962      	ldr	r2, [r4, #20]
 800783c:	3301      	adds	r3, #1
 800783e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007842:	6363      	str	r3, [r4, #52]	; 0x34
 8007844:	2310      	movs	r3, #16
 8007846:	4808      	ldr	r0, [pc, #32]	; (8007868 <tcp_handle+0x2b8>)
 8007848:	a901      	add	r1, sp, #4
 800784a:	f88d 300c 	strb.w	r3, [sp, #12]
 800784e:	f00b fbc9 	bl	8012fe4 <_tcp_send_package>
 8007852:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007856:	2b05      	cmp	r3, #5
 8007858:	d053      	beq.n	8007902 <tcp_handle+0x352>
 800785a:	d84d      	bhi.n	80078f8 <tcp_handle+0x348>
 800785c:	3b03      	subs	r3, #3
 800785e:	2b01      	cmp	r3, #1
 8007860:	f63f af0e 	bhi.w	8007680 <tcp_handle+0xd0>
 8007864:	2307      	movs	r3, #7
 8007866:	e73a      	b.n	80076de <tcp_handle+0x12e>
 8007868:	200165a8 	andcs	r6, r1, r8, lsr #11
 800786c:	200165b0 			; <UNDEFINED> instruction: 0x200165b0
 8007870:	20015a38 	andcs	r5, r1, r8, lsr sl
 8007874:	6923      	ldr	r3, [r4, #16]
 8007876:	1b99      	subs	r1, r3, r6
 8007878:	d513      	bpl.n	80078a2 <tcp_handle+0x2f2>
 800787a:	6962      	ldr	r2, [r4, #20]
 800787c:	1ab2      	subs	r2, r6, r2
 800787e:	2a00      	cmp	r2, #0
 8007880:	dc0f      	bgt.n	80078a2 <tcp_handle+0x2f2>
 8007882:	6126      	str	r6, [r4, #16]
 8007884:	6a23      	ldr	r3, [r4, #32]
 8007886:	1bda      	subs	r2, r3, r7
 8007888:	2a00      	cmp	r2, #0
 800788a:	db05      	blt.n	8007898 <tcp_handle+0x2e8>
 800788c:	42bb      	cmp	r3, r7
 800788e:	d193      	bne.n	80077b8 <tcp_handle+0x208>
 8007890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007892:	1b9b      	subs	r3, r3, r6
 8007894:	2b00      	cmp	r3, #0
 8007896:	dc8f      	bgt.n	80077b8 <tcp_handle+0x208>
 8007898:	e9c4 7608 	strd	r7, r6, [r4, #32]
 800789c:	f8c4 a018 	str.w	sl, [r4, #24]
 80078a0:	e78a      	b.n	80077b8 <tcp_handle+0x208>
 80078a2:	1af3      	subs	r3, r6, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	dc06      	bgt.n	80078b6 <tcp_handle+0x306>
 80078a8:	2900      	cmp	r1, #0
 80078aa:	dc85      	bgt.n	80077b8 <tcp_handle+0x208>
 80078ac:	6963      	ldr	r3, [r4, #20]
 80078ae:	1af3      	subs	r3, r6, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dc81      	bgt.n	80077b8 <tcp_handle+0x208>
 80078b4:	e7e6      	b.n	8007884 <tcp_handle+0x2d4>
 80078b6:	6963      	ldr	r3, [r4, #20]
 80078b8:	1b9a      	subs	r2, r3, r6
 80078ba:	2a00      	cmp	r2, #0
 80078bc:	f6bf af7c 	bge.w	80077b8 <tcp_handle+0x208>
 80078c0:	e745      	b.n	800774e <tcp_handle+0x19e>
 80078c2:	6963      	ldr	r3, [r4, #20]
 80078c4:	42b3      	cmp	r3, r6
 80078c6:	f47f af77 	bne.w	80077b8 <tcp_handle+0x208>
 80078ca:	8821      	ldrh	r1, [r4, #0]
 80078cc:	480f      	ldr	r0, [pc, #60]	; (800790c <tcp_handle+0x35c>)
 80078ce:	f00b fb3f 	bl	8012f50 <_init_tcb>
 80078d2:	e771      	b.n	80077b8 <tcp_handle+0x208>
 80078d4:	6963      	ldr	r3, [r4, #20]
 80078d6:	42b3      	cmp	r3, r6
 80078d8:	f47f af6e 	bne.w	80077b8 <tcp_handle+0x208>
 80078dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078de:	480b      	ldr	r0, [pc, #44]	; (800790c <tcp_handle+0x35c>)
 80078e0:	9302      	str	r3, [sp, #8]
 80078e2:	2310      	movs	r3, #16
 80078e4:	a901      	add	r1, sp, #4
 80078e6:	9601      	str	r6, [sp, #4]
 80078e8:	f88d 300c 	strb.w	r3, [sp, #12]
 80078ec:	f00b fb7a 	bl	8012fe4 <_tcp_send_package>
 80078f0:	e762      	b.n	80077b8 <tcp_handle+0x208>
 80078f2:	6962      	ldr	r2, [r4, #20]
 80078f4:	9201      	str	r2, [sp, #4]
 80078f6:	e72c      	b.n	8007752 <tcp_handle+0x1a2>
 80078f8:	2b06      	cmp	r3, #6
 80078fa:	f47f aec1 	bne.w	8007680 <tcp_handle+0xd0>
 80078fe:	230a      	movs	r3, #10
 8007900:	e6ed      	b.n	80076de <tcp_handle+0x12e>
 8007902:	6963      	ldr	r3, [r4, #20]
 8007904:	42b3      	cmp	r3, r6
 8007906:	d0fa      	beq.n	80078fe <tcp_handle+0x34e>
 8007908:	2308      	movs	r3, #8
 800790a:	e6e8      	b.n	80076de <tcp_handle+0x12e>
 800790c:	200165a8 	andcs	r6, r1, r8, lsr #11

08007910 <udp_handle>:
 8007910:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007914:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8007916:	4607      	mov	r7, r0
 8007918:	ba5b      	rev16	r3, r3
 800791a:	b29b      	uxth	r3, r3
 800791c:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 8007920:	2a01      	cmp	r2, #1
 8007922:	d904      	bls.n	800792e <udp_handle+0x1e>
 8007924:	2b7b      	cmp	r3, #123	; 0x7b
 8007926:	d002      	beq.n	800792e <udp_handle+0x1e>
 8007928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800792c:	d308      	bcc.n	8007940 <udp_handle+0x30>
 800792e:	2400      	movs	r4, #0
 8007930:	4a1f      	ldr	r2, [pc, #124]	; (80079b0 <udp_handle+0xa0>)
 8007932:	f852 1b04 	ldr.w	r1, [r2], #4
 8007936:	4299      	cmp	r1, r3
 8007938:	d005      	beq.n	8007946 <udp_handle+0x36>
 800793a:	3401      	adds	r4, #1
 800793c:	2c08      	cmp	r4, #8
 800793e:	d1f8      	bne.n	8007932 <udp_handle+0x22>
 8007940:	b002      	add	sp, #8
 8007942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007946:	f640 3394 	movw	r3, #2964	; 0xb94
 800794a:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 800794c:	435c      	muls	r4, r3
 800794e:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 8007952:	ba76      	rev16	r6, r6
 8007954:	3e08      	subs	r6, #8
 8007956:	b2b6      	uxth	r6, r6
 8007958:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 800795c:	bf28      	it	cs
 800795e:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 8007962:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80079b4 <udp_handle+0xa4>
 8007966:	1d20      	adds	r0, r4, #4
 8007968:	f838 5004 	ldrh.w	r5, [r8, r4]
 800796c:	4632      	mov	r2, r6
 800796e:	435d      	muls	r5, r3
 8007970:	4428      	add	r0, r5
 8007972:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8007976:	4440      	add	r0, r8
 8007978:	f00b fc88 	bl	801328c <memcpy.isra.0>
 800797c:	2204      	movs	r2, #4
 800797e:	f107 011a 	add.w	r1, r7, #26
 8007982:	eb0d 0002 	add.w	r0, sp, r2
 8007986:	f00b fc81 	bl	801328c <memcpy.isra.0>
 800798a:	9a01      	ldr	r2, [sp, #4]
 800798c:	192b      	adds	r3, r5, r4
 800798e:	4443      	add	r3, r8
 8007990:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 8007994:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007996:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 800799a:	ba52      	rev16	r2, r2
 800799c:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 80079a0:	f838 3004 	ldrh.w	r3, [r8, r4]
 80079a4:	3301      	adds	r3, #1
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	f828 3004 	strh.w	r3, [r8, r4]
 80079ae:	e7c7      	b.n	8007940 <udp_handle+0x30>
 80079b0:	20016be8 	andcs	r6, r1, r8, ror #23
 80079b4:	20016c08 	andcs	r6, r1, r8, lsl #24

080079b8 <arp_handle>:
 80079b8:	8a83      	ldrh	r3, [r0, #20]
 80079ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079be:	d003      	beq.n	80079c8 <arp_handle+0x10>
 80079c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c4:	d002      	beq.n	80079cc <arp_handle+0x14>
 80079c6:	4770      	bx	lr
 80079c8:	f00c bf2c 	b.w	8014824 <arp_handle_request>
 80079cc:	f00c bf52 	b.w	8014874 <arp_handle_reply>

080079d0 <igmp_handle>:
 80079d0:	7b83      	ldrb	r3, [r0, #14]
 80079d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079d6:	2b45      	cmp	r3, #69	; 0x45
 80079d8:	d116      	bne.n	8007a08 <igmp_handle+0x38>
 80079da:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80079de:	2b11      	cmp	r3, #17
 80079e0:	d112      	bne.n	8007a08 <igmp_handle+0x38>
 80079e2:	4b20      	ldr	r3, [pc, #128]	; (8007a64 <igmp_handle+0x94>)
 80079e4:	f100 051d 	add.w	r5, r0, #29
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	466a      	mov	r2, sp
 80079ec:	462b      	mov	r3, r5
 80079ee:	f100 0621 	add.w	r6, r0, #33	; 0x21
 80079f2:	42b3      	cmp	r3, r6
 80079f4:	d10b      	bne.n	8007a0e <igmp_handle+0x3e>
 80079f6:	2401      	movs	r4, #1
 80079f8:	2100      	movs	r1, #0
 80079fa:	f04f 0c01 	mov.w	ip, #1
 80079fe:	4b1a      	ldr	r3, [pc, #104]	; (8007a68 <igmp_handle+0x98>)
 8007a00:	4a1a      	ldr	r2, [pc, #104]	; (8007a6c <igmp_handle+0x9c>)
 8007a02:	681f      	ldr	r7, [r3, #0]
 8007a04:	428f      	cmp	r7, r1
 8007a06:	d10a      	bne.n	8007a1e <igmp_handle+0x4e>
 8007a08:	b003      	add	sp, #12
 8007a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a0e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007a12:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8007a16:	428c      	cmp	r4, r1
 8007a18:	d0eb      	beq.n	80079f2 <igmp_handle+0x22>
 8007a1a:	2400      	movs	r4, #0
 8007a1c:	e7ec      	b.n	80079f8 <igmp_handle+0x28>
 8007a1e:	6813      	ldr	r3, [r2, #0]
 8007a20:	9301      	str	r3, [sp, #4]
 8007a22:	b924      	cbnz	r4, 8007a2e <igmp_handle+0x5e>
 8007a24:	462b      	mov	r3, r5
 8007a26:	f10d 0e04 	add.w	lr, sp, #4
 8007a2a:	42b3      	cmp	r3, r6
 8007a2c:	d10e      	bne.n	8007a4c <igmp_handle+0x7c>
 8007a2e:	f892 e005 	ldrb.w	lr, [r2, #5]
 8007a32:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8007a36:	f1be 0f01 	cmp.w	lr, #1
 8007a3a:	d110      	bne.n	8007a5e <igmp_handle+0x8e>
 8007a3c:	f892 e004 	ldrb.w	lr, [r2, #4]
 8007a40:	459e      	cmp	lr, r3
 8007a42:	d909      	bls.n	8007a58 <igmp_handle+0x88>
 8007a44:	085b      	lsrs	r3, r3, #1
 8007a46:	3301      	adds	r3, #1
 8007a48:	7113      	strb	r3, [r2, #4]
 8007a4a:	e005      	b.n	8007a58 <igmp_handle+0x88>
 8007a4c:	f81e 8b01 	ldrb.w	r8, [lr], #1
 8007a50:	f813 9f01 	ldrb.w	r9, [r3, #1]!
 8007a54:	45c1      	cmp	r9, r8
 8007a56:	d0e8      	beq.n	8007a2a <igmp_handle+0x5a>
 8007a58:	3101      	adds	r1, #1
 8007a5a:	3208      	adds	r2, #8
 8007a5c:	e7d2      	b.n	8007a04 <igmp_handle+0x34>
 8007a5e:	f882 c005 	strb.w	ip, [r2, #5]
 8007a62:	e7ef      	b.n	8007a44 <igmp_handle+0x74>
 8007a64:	010000e0 	smlatteq	r0, r0, r0, r0
 8007a68:	2001d838 	andcs	sp, r1, r8, lsr r8
 8007a6c:	2001d714 	andcs	sp, r1, r4, lsl r7

08007a70 <ip_handle>:
 8007a70:	7b82      	ldrb	r2, [r0, #14]
 8007a72:	7dc3      	ldrb	r3, [r0, #23]
 8007a74:	2a45      	cmp	r2, #69	; 0x45
 8007a76:	d003      	beq.n	8007a80 <ip_handle+0x10>
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d111      	bne.n	8007aa0 <ip_handle+0x30>
 8007a7c:	f7ff bfa8 	b.w	80079d0 <igmp_handle>
 8007a80:	2b06      	cmp	r3, #6
 8007a82:	d00b      	beq.n	8007a9c <ip_handle+0x2c>
 8007a84:	d804      	bhi.n	8007a90 <ip_handle+0x20>
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d006      	beq.n	8007a98 <ip_handle+0x28>
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d0f6      	beq.n	8007a7c <ip_handle+0xc>
 8007a8e:	4770      	bx	lr
 8007a90:	2b11      	cmp	r3, #17
 8007a92:	d105      	bne.n	8007aa0 <ip_handle+0x30>
 8007a94:	f7ff bf3c 	b.w	8007910 <udp_handle>
 8007a98:	f000 b804 	b.w	8007aa4 <icmp_handle>
 8007a9c:	f7ff bd88 	b.w	80075b0 <tcp_handle>
 8007aa0:	4770      	bx	lr
	...

08007aa4 <icmp_handle>:
 8007aa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007aa6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007aaa:	4604      	mov	r4, r0
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d13e      	bne.n	8007b2e <icmp_handle+0x8a>
 8007ab0:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8007ab4:	2d00      	cmp	r5, #0
 8007ab6:	d13a      	bne.n	8007b2e <icmp_handle+0x8a>
 8007ab8:	1d86      	adds	r6, r0, #6
 8007aba:	4631      	mov	r1, r6
 8007abc:	2206      	movs	r2, #6
 8007abe:	f00d fa5d 	bl	8014f7c <memcpy.isra.0>
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	2206      	movs	r2, #6
 8007ac6:	491b      	ldr	r1, [pc, #108]	; (8007b34 <icmp_handle+0x90>)
 8007ac8:	f00d fa58 	bl	8014f7c <memcpy.isra.0>
 8007acc:	8a63      	ldrh	r3, [r4, #18]
 8007ace:	f104 061a 	add.w	r6, r4, #26
 8007ad2:	43db      	mvns	r3, r3
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	2204      	movs	r2, #4
 8007ad8:	8263      	strh	r3, [r4, #18]
 8007ada:	f104 001e 	add.w	r0, r4, #30
 8007ade:	f00d fa4d 	bl	8014f7c <memcpy.isra.0>
 8007ae2:	2204      	movs	r2, #4
 8007ae4:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <icmp_handle+0x94>)
 8007ae6:	eb0d 0102 	add.w	r1, sp, r2
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4630      	mov	r0, r6
 8007aee:	f104 060e 	add.w	r6, r4, #14
 8007af2:	9301      	str	r3, [sp, #4]
 8007af4:	f00d fa42 	bl	8014f7c <memcpy.isra.0>
 8007af8:	2114      	movs	r1, #20
 8007afa:	4630      	mov	r0, r6
 8007afc:	7625      	strb	r5, [r4, #24]
 8007afe:	7665      	strb	r5, [r4, #25]
 8007b00:	f00d fa23 	bl	8014f4a <net_chksum>
 8007b04:	8a21      	ldrh	r1, [r4, #16]
 8007b06:	8320      	strh	r0, [r4, #24]
 8007b08:	ba49      	rev16	r1, r1
 8007b0a:	b289      	uxth	r1, r1
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8007b12:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8007b16:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8007b1a:	f00d fa16 	bl	8014f4a <net_chksum>
 8007b1e:	8a21      	ldrh	r1, [r4, #16]
 8007b20:	84a0      	strh	r0, [r4, #36]	; 0x24
 8007b22:	ba49      	rev16	r1, r1
 8007b24:	b289      	uxth	r1, r1
 8007b26:	4620      	mov	r0, r4
 8007b28:	310e      	adds	r1, #14
 8007b2a:	f00f fee3 	bl	80178f4 <emac_eth_send>
 8007b2e:	b002      	add	sp, #8
 8007b30:	bd70      	pop	{r4, r5, r6, pc}
 8007b32:	bf00      	nop
 8007b34:	20015a14 	andcs	r5, r1, r4, lsl sl
 8007b38:	20015a08 	andcs	r5, r1, r8, lsl #20

08007b3c <__aeabi_d2f>:
 8007b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007b40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8007b44:	bf24      	itt	cs
 8007b46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8007b4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8007b4e:	d90d      	bls.n	8007b6c <__aeabi_d2f+0x30>
 8007b50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007b54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007b58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007b5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007b60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8007b64:	bf08      	it	eq
 8007b66:	f020 0001 	biceq.w	r0, r0, #1
 8007b6a:	4770      	bx	lr
 8007b6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007b70:	d121      	bne.n	8007bb6 <__aeabi_d2f+0x7a>
 8007b72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8007b76:	bfbc      	itt	lt
 8007b78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8007b7c:	4770      	bxlt	lr
 8007b7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007b82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8007b86:	f1c2 0218 	rsb	r2, r2, #24
 8007b8a:	f1c2 0c20 	rsb	ip, r2, #32
 8007b8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8007b92:	fa20 f002 	lsr.w	r0, r0, r2
 8007b96:	bf18      	it	ne
 8007b98:	f040 0001 	orrne.w	r0, r0, #1
 8007b9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007ba0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8007ba4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8007ba8:	ea40 000c 	orr.w	r0, r0, ip
 8007bac:	fa23 f302 	lsr.w	r3, r3, r2
 8007bb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007bb4:	e7cc      	b.n	8007b50 <__aeabi_d2f+0x14>
 8007bb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8007bba:	d107      	bne.n	8007bcc <__aeabi_d2f+0x90>
 8007bbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8007bc0:	bf1e      	ittt	ne
 8007bc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8007bc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8007bca:	4770      	bxne	lr
 8007bcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8007bd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop

08007bdc <__aeabi_frsub>:
 8007bdc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8007be0:	e002      	b.n	8007be8 <__addsf3>
 8007be2:	bf00      	nop

08007be4 <__aeabi_fsub>:
 8007be4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08007be8 <__addsf3>:
 8007be8:	0042      	lsls	r2, r0, #1
 8007bea:	bf1f      	itttt	ne
 8007bec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8007bf0:	ea92 0f03 	teqne	r2, r3
 8007bf4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8007bf8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007bfc:	d06a      	beq.n	8007cd4 <__addsf3+0xec>
 8007bfe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8007c02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8007c06:	bfc1      	itttt	gt
 8007c08:	18d2      	addgt	r2, r2, r3
 8007c0a:	4041      	eorgt	r1, r0
 8007c0c:	4048      	eorgt	r0, r1
 8007c0e:	4041      	eorgt	r1, r0
 8007c10:	bfb8      	it	lt
 8007c12:	425b      	neglt	r3, r3
 8007c14:	2b19      	cmp	r3, #25
 8007c16:	bf88      	it	hi
 8007c18:	4770      	bxhi	lr
 8007c1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007c22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8007c26:	bf18      	it	ne
 8007c28:	4240      	negne	r0, r0
 8007c2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007c2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007c32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007c36:	bf18      	it	ne
 8007c38:	4249      	negne	r1, r1
 8007c3a:	ea92 0f03 	teq	r2, r3
 8007c3e:	d03f      	beq.n	8007cc0 <__addsf3+0xd8>
 8007c40:	f1a2 0201 	sub.w	r2, r2, #1
 8007c44:	fa41 fc03 	asr.w	ip, r1, r3
 8007c48:	eb10 000c 	adds.w	r0, r0, ip
 8007c4c:	f1c3 0320 	rsb	r3, r3, #32
 8007c50:	fa01 f103 	lsl.w	r1, r1, r3
 8007c54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007c58:	d502      	bpl.n	8007c60 <__addsf3+0x78>
 8007c5a:	4249      	negs	r1, r1
 8007c5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8007c60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007c64:	d313      	bcc.n	8007c8e <__addsf3+0xa6>
 8007c66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007c6a:	d306      	bcc.n	8007c7a <__addsf3+0x92>
 8007c6c:	0840      	lsrs	r0, r0, #1
 8007c6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8007c72:	f102 0201 	add.w	r2, r2, #1
 8007c76:	2afe      	cmp	r2, #254	; 0xfe
 8007c78:	d251      	bcs.n	8007d1e <__addsf3+0x136>
 8007c7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8007c7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007c82:	bf08      	it	eq
 8007c84:	f020 0001 	biceq.w	r0, r0, #1
 8007c88:	ea40 0003 	orr.w	r0, r0, r3
 8007c8c:	4770      	bx	lr
 8007c8e:	0049      	lsls	r1, r1, #1
 8007c90:	eb40 0000 	adc.w	r0, r0, r0
 8007c94:	3a01      	subs	r2, #1
 8007c96:	bf28      	it	cs
 8007c98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8007c9c:	d2ed      	bcs.n	8007c7a <__addsf3+0x92>
 8007c9e:	fab0 fc80 	clz	ip, r0
 8007ca2:	f1ac 0c08 	sub.w	ip, ip, #8
 8007ca6:	ebb2 020c 	subs.w	r2, r2, ip
 8007caa:	fa00 f00c 	lsl.w	r0, r0, ip
 8007cae:	bfaa      	itet	ge
 8007cb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8007cb4:	4252      	neglt	r2, r2
 8007cb6:	4318      	orrge	r0, r3
 8007cb8:	bfbc      	itt	lt
 8007cba:	40d0      	lsrlt	r0, r2
 8007cbc:	4318      	orrlt	r0, r3
 8007cbe:	4770      	bx	lr
 8007cc0:	f092 0f00 	teq	r2, #0
 8007cc4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8007cc8:	bf06      	itte	eq
 8007cca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8007cce:	3201      	addeq	r2, #1
 8007cd0:	3b01      	subne	r3, #1
 8007cd2:	e7b5      	b.n	8007c40 <__addsf3+0x58>
 8007cd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007cd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007cdc:	bf18      	it	ne
 8007cde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007ce2:	d021      	beq.n	8007d28 <__addsf3+0x140>
 8007ce4:	ea92 0f03 	teq	r2, r3
 8007ce8:	d004      	beq.n	8007cf4 <__addsf3+0x10c>
 8007cea:	f092 0f00 	teq	r2, #0
 8007cee:	bf08      	it	eq
 8007cf0:	4608      	moveq	r0, r1
 8007cf2:	4770      	bx	lr
 8007cf4:	ea90 0f01 	teq	r0, r1
 8007cf8:	bf1c      	itt	ne
 8007cfa:	2000      	movne	r0, #0
 8007cfc:	4770      	bxne	lr
 8007cfe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8007d02:	d104      	bne.n	8007d0e <__addsf3+0x126>
 8007d04:	0040      	lsls	r0, r0, #1
 8007d06:	bf28      	it	cs
 8007d08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8007d0c:	4770      	bx	lr
 8007d0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8007d12:	bf3c      	itt	cc
 8007d14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8007d18:	4770      	bxcc	lr
 8007d1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007d1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8007d22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007d26:	4770      	bx	lr
 8007d28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8007d2c:	bf16      	itet	ne
 8007d2e:	4608      	movne	r0, r1
 8007d30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8007d34:	4601      	movne	r1, r0
 8007d36:	0242      	lsls	r2, r0, #9
 8007d38:	bf06      	itte	eq
 8007d3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8007d3e:	ea90 0f01 	teqeq	r0, r1
 8007d42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8007d46:	4770      	bx	lr

08007d48 <__aeabi_ui2f>:
 8007d48:	f04f 0300 	mov.w	r3, #0
 8007d4c:	e004      	b.n	8007d58 <__aeabi_i2f+0x8>
 8007d4e:	bf00      	nop

08007d50 <__aeabi_i2f>:
 8007d50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8007d54:	bf48      	it	mi
 8007d56:	4240      	negmi	r0, r0
 8007d58:	ea5f 0c00 	movs.w	ip, r0
 8007d5c:	bf08      	it	eq
 8007d5e:	4770      	bxeq	lr
 8007d60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8007d64:	4601      	mov	r1, r0
 8007d66:	f04f 0000 	mov.w	r0, #0
 8007d6a:	e01c      	b.n	8007da6 <__aeabi_l2f+0x2a>

08007d6c <__aeabi_ul2f>:
 8007d6c:	ea50 0201 	orrs.w	r2, r0, r1
 8007d70:	bf08      	it	eq
 8007d72:	4770      	bxeq	lr
 8007d74:	f04f 0300 	mov.w	r3, #0
 8007d78:	e00a      	b.n	8007d90 <__aeabi_l2f+0x14>
 8007d7a:	bf00      	nop

08007d7c <__aeabi_l2f>:
 8007d7c:	ea50 0201 	orrs.w	r2, r0, r1
 8007d80:	bf08      	it	eq
 8007d82:	4770      	bxeq	lr
 8007d84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8007d88:	d502      	bpl.n	8007d90 <__aeabi_l2f+0x14>
 8007d8a:	4240      	negs	r0, r0
 8007d8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007d90:	ea5f 0c01 	movs.w	ip, r1
 8007d94:	bf02      	ittt	eq
 8007d96:	4684      	moveq	ip, r0
 8007d98:	4601      	moveq	r1, r0
 8007d9a:	2000      	moveq	r0, #0
 8007d9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8007da0:	bf08      	it	eq
 8007da2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8007da6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8007daa:	fabc f28c 	clz	r2, ip
 8007dae:	3a08      	subs	r2, #8
 8007db0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8007db4:	db10      	blt.n	8007dd8 <__aeabi_l2f+0x5c>
 8007db6:	fa01 fc02 	lsl.w	ip, r1, r2
 8007dba:	4463      	add	r3, ip
 8007dbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8007dc0:	f1c2 0220 	rsb	r2, r2, #32
 8007dc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007dc8:	fa20 f202 	lsr.w	r2, r0, r2
 8007dcc:	eb43 0002 	adc.w	r0, r3, r2
 8007dd0:	bf08      	it	eq
 8007dd2:	f020 0001 	biceq.w	r0, r0, #1
 8007dd6:	4770      	bx	lr
 8007dd8:	f102 0220 	add.w	r2, r2, #32
 8007ddc:	fa01 fc02 	lsl.w	ip, r1, r2
 8007de0:	f1c2 0220 	rsb	r2, r2, #32
 8007de4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8007de8:	fa21 f202 	lsr.w	r2, r1, r2
 8007dec:	eb43 0002 	adc.w	r0, r3, r2
 8007df0:	bf08      	it	eq
 8007df2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8007df6:	4770      	bx	lr

08007df8 <__gesf2>:
 8007df8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007dfc:	e006      	b.n	8007e0c <__cmpsf2+0x4>
 8007dfe:	bf00      	nop

08007e00 <__lesf2>:
 8007e00:	f04f 0c01 	mov.w	ip, #1
 8007e04:	e002      	b.n	8007e0c <__cmpsf2+0x4>
 8007e06:	bf00      	nop

08007e08 <__cmpsf2>:
 8007e08:	f04f 0c01 	mov.w	ip, #1
 8007e0c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007e10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007e14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007e1c:	bf18      	it	ne
 8007e1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007e22:	d011      	beq.n	8007e48 <__cmpsf2+0x40>
 8007e24:	b001      	add	sp, #4
 8007e26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8007e2a:	bf18      	it	ne
 8007e2c:	ea90 0f01 	teqne	r0, r1
 8007e30:	bf58      	it	pl
 8007e32:	ebb2 0003 	subspl.w	r0, r2, r3
 8007e36:	bf88      	it	hi
 8007e38:	17c8      	asrhi	r0, r1, #31
 8007e3a:	bf38      	it	cc
 8007e3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8007e40:	bf18      	it	ne
 8007e42:	f040 0001 	orrne.w	r0, r0, #1
 8007e46:	4770      	bx	lr
 8007e48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007e4c:	d102      	bne.n	8007e54 <__cmpsf2+0x4c>
 8007e4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8007e52:	d105      	bne.n	8007e60 <__cmpsf2+0x58>
 8007e54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8007e58:	d1e4      	bne.n	8007e24 <__cmpsf2+0x1c>
 8007e5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8007e5e:	d0e1      	beq.n	8007e24 <__cmpsf2+0x1c>
 8007e60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop

08007e68 <__aeabi_cfrcmple>:
 8007e68:	4684      	mov	ip, r0
 8007e6a:	4608      	mov	r0, r1
 8007e6c:	4661      	mov	r1, ip
 8007e6e:	e7ff      	b.n	8007e70 <__aeabi_cfcmpeq>

08007e70 <__aeabi_cfcmpeq>:
 8007e70:	b50f      	push	{r0, r1, r2, r3, lr}
 8007e72:	f7ff ffc9 	bl	8007e08 <__cmpsf2>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	bf48      	it	mi
 8007e7a:	f110 0f00 	cmnmi.w	r0, #0
 8007e7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08007e80 <__aeabi_fcmpeq>:
 8007e80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e84:	f7ff fff4 	bl	8007e70 <__aeabi_cfcmpeq>
 8007e88:	bf0c      	ite	eq
 8007e8a:	2001      	moveq	r0, #1
 8007e8c:	2000      	movne	r0, #0
 8007e8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e92:	bf00      	nop

08007e94 <__aeabi_fcmplt>:
 8007e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e98:	f7ff ffea 	bl	8007e70 <__aeabi_cfcmpeq>
 8007e9c:	bf34      	ite	cc
 8007e9e:	2001      	movcc	r0, #1
 8007ea0:	2000      	movcs	r0, #0
 8007ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ea6:	bf00      	nop

08007ea8 <__aeabi_fcmple>:
 8007ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007eac:	f7ff ffe0 	bl	8007e70 <__aeabi_cfcmpeq>
 8007eb0:	bf94      	ite	ls
 8007eb2:	2001      	movls	r0, #1
 8007eb4:	2000      	movhi	r0, #0
 8007eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8007eba:	bf00      	nop

08007ebc <__aeabi_fcmpge>:
 8007ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ec0:	f7ff ffd2 	bl	8007e68 <__aeabi_cfrcmple>
 8007ec4:	bf94      	ite	ls
 8007ec6:	2001      	movls	r0, #1
 8007ec8:	2000      	movhi	r0, #0
 8007eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ece:	bf00      	nop

08007ed0 <__aeabi_fcmpgt>:
 8007ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ed4:	f7ff ffc8 	bl	8007e68 <__aeabi_cfrcmple>
 8007ed8:	bf34      	ite	cc
 8007eda:	2001      	movcc	r0, #1
 8007edc:	2000      	movcs	r0, #0
 8007ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ee2:	bf00      	nop

08007ee4 <__aeabi_f2iz>:
 8007ee4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007ee8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8007eec:	d30f      	bcc.n	8007f0e <__aeabi_f2iz+0x2a>
 8007eee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8007ef2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8007ef6:	d90d      	bls.n	8007f14 <__aeabi_f2iz+0x30>
 8007ef8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8007efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f00:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007f04:	fa23 f002 	lsr.w	r0, r3, r2
 8007f08:	bf18      	it	ne
 8007f0a:	4240      	negne	r0, r0
 8007f0c:	4770      	bx	lr
 8007f0e:	f04f 0000 	mov.w	r0, #0
 8007f12:	4770      	bx	lr
 8007f14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8007f18:	d101      	bne.n	8007f1e <__aeabi_f2iz+0x3a>
 8007f1a:	0242      	lsls	r2, r0, #9
 8007f1c:	d105      	bne.n	8007f2a <__aeabi_f2iz+0x46>
 8007f1e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8007f22:	bf08      	it	eq
 8007f24:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007f28:	4770      	bx	lr
 8007f2a:	f04f 0000 	mov.w	r0, #0
 8007f2e:	4770      	bx	lr

08007f30 <__aeabi_uldivmod>:
 8007f30:	b953      	cbnz	r3, 8007f48 <__aeabi_uldivmod+0x18>
 8007f32:	b94a      	cbnz	r2, 8007f48 <__aeabi_uldivmod+0x18>
 8007f34:	2900      	cmp	r1, #0
 8007f36:	bf08      	it	eq
 8007f38:	2800      	cmpeq	r0, #0
 8007f3a:	bf1c      	itt	ne
 8007f3c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007f40:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007f44:	f000 b80c 	b.w	8007f60 <__aeabi_idiv0>
 8007f48:	f1ad 0c08 	sub.w	ip, sp, #8
 8007f4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007f50:	f001 fc86 	bl	8009860 <__udivmoddi4>
 8007f54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007f58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f5c:	b004      	add	sp, #16
 8007f5e:	4770      	bx	lr

08007f60 <__aeabi_idiv0>:
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop

08007f64 <__aeabi_drsub>:
 8007f64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007f68:	e002      	b.n	8007f70 <__adddf3>
 8007f6a:	bf00      	nop

08007f6c <__aeabi_dsub>:
 8007f6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007f70 <__adddf3>:
 8007f70:	b530      	push	{r4, r5, lr}
 8007f72:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007f76:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007f7a:	ea94 0f05 	teq	r4, r5
 8007f7e:	bf08      	it	eq
 8007f80:	ea90 0f02 	teqeq	r0, r2
 8007f84:	bf1f      	itttt	ne
 8007f86:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007f8a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007f8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007f92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007f96:	f000 80e2 	beq.w	800815e <__adddf3+0x1ee>
 8007f9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007f9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007fa2:	bfb8      	it	lt
 8007fa4:	426d      	neglt	r5, r5
 8007fa6:	dd0c      	ble.n	8007fc2 <__adddf3+0x52>
 8007fa8:	442c      	add	r4, r5
 8007faa:	ea80 0202 	eor.w	r2, r0, r2
 8007fae:	ea81 0303 	eor.w	r3, r1, r3
 8007fb2:	ea82 0000 	eor.w	r0, r2, r0
 8007fb6:	ea83 0101 	eor.w	r1, r3, r1
 8007fba:	ea80 0202 	eor.w	r2, r0, r2
 8007fbe:	ea81 0303 	eor.w	r3, r1, r3
 8007fc2:	2d36      	cmp	r5, #54	; 0x36
 8007fc4:	bf88      	it	hi
 8007fc6:	bd30      	pophi	{r4, r5, pc}
 8007fc8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007fcc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007fd0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007fd4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007fd8:	d002      	beq.n	8007fe0 <__adddf3+0x70>
 8007fda:	4240      	negs	r0, r0
 8007fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007fe0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007fe4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007fe8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007fec:	d002      	beq.n	8007ff4 <__adddf3+0x84>
 8007fee:	4252      	negs	r2, r2
 8007ff0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007ff4:	ea94 0f05 	teq	r4, r5
 8007ff8:	f000 80a7 	beq.w	800814a <__adddf3+0x1da>
 8007ffc:	f1a4 0401 	sub.w	r4, r4, #1
 8008000:	f1d5 0e20 	rsbs	lr, r5, #32
 8008004:	db0d      	blt.n	8008022 <__adddf3+0xb2>
 8008006:	fa02 fc0e 	lsl.w	ip, r2, lr
 800800a:	fa22 f205 	lsr.w	r2, r2, r5
 800800e:	1880      	adds	r0, r0, r2
 8008010:	f141 0100 	adc.w	r1, r1, #0
 8008014:	fa03 f20e 	lsl.w	r2, r3, lr
 8008018:	1880      	adds	r0, r0, r2
 800801a:	fa43 f305 	asr.w	r3, r3, r5
 800801e:	4159      	adcs	r1, r3
 8008020:	e00e      	b.n	8008040 <__adddf3+0xd0>
 8008022:	f1a5 0520 	sub.w	r5, r5, #32
 8008026:	f10e 0e20 	add.w	lr, lr, #32
 800802a:	2a01      	cmp	r2, #1
 800802c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008030:	bf28      	it	cs
 8008032:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008036:	fa43 f305 	asr.w	r3, r3, r5
 800803a:	18c0      	adds	r0, r0, r3
 800803c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008040:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008044:	d507      	bpl.n	8008056 <__adddf3+0xe6>
 8008046:	f04f 0e00 	mov.w	lr, #0
 800804a:	f1dc 0c00 	rsbs	ip, ip, #0
 800804e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008052:	eb6e 0101 	sbc.w	r1, lr, r1
 8008056:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800805a:	d31b      	bcc.n	8008094 <__adddf3+0x124>
 800805c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008060:	d30c      	bcc.n	800807c <__adddf3+0x10c>
 8008062:	0849      	lsrs	r1, r1, #1
 8008064:	ea5f 0030 	movs.w	r0, r0, rrx
 8008068:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800806c:	f104 0401 	add.w	r4, r4, #1
 8008070:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008074:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008078:	f080 809a 	bcs.w	80081b0 <__adddf3+0x240>
 800807c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008080:	bf08      	it	eq
 8008082:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008086:	f150 0000 	adcs.w	r0, r0, #0
 800808a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800808e:	ea41 0105 	orr.w	r1, r1, r5
 8008092:	bd30      	pop	{r4, r5, pc}
 8008094:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008098:	4140      	adcs	r0, r0
 800809a:	eb41 0101 	adc.w	r1, r1, r1
 800809e:	3c01      	subs	r4, #1
 80080a0:	bf28      	it	cs
 80080a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80080a6:	d2e9      	bcs.n	800807c <__adddf3+0x10c>
 80080a8:	f091 0f00 	teq	r1, #0
 80080ac:	bf04      	itt	eq
 80080ae:	4601      	moveq	r1, r0
 80080b0:	2000      	moveq	r0, #0
 80080b2:	fab1 f381 	clz	r3, r1
 80080b6:	bf08      	it	eq
 80080b8:	3320      	addeq	r3, #32
 80080ba:	f1a3 030b 	sub.w	r3, r3, #11
 80080be:	f1b3 0220 	subs.w	r2, r3, #32
 80080c2:	da0c      	bge.n	80080de <__adddf3+0x16e>
 80080c4:	320c      	adds	r2, #12
 80080c6:	dd08      	ble.n	80080da <__adddf3+0x16a>
 80080c8:	f102 0c14 	add.w	ip, r2, #20
 80080cc:	f1c2 020c 	rsb	r2, r2, #12
 80080d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80080d4:	fa21 f102 	lsr.w	r1, r1, r2
 80080d8:	e00c      	b.n	80080f4 <__adddf3+0x184>
 80080da:	f102 0214 	add.w	r2, r2, #20
 80080de:	bfd8      	it	le
 80080e0:	f1c2 0c20 	rsble	ip, r2, #32
 80080e4:	fa01 f102 	lsl.w	r1, r1, r2
 80080e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80080ec:	bfdc      	itt	le
 80080ee:	ea41 010c 	orrle.w	r1, r1, ip
 80080f2:	4090      	lslle	r0, r2
 80080f4:	1ae4      	subs	r4, r4, r3
 80080f6:	bfa2      	ittt	ge
 80080f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80080fc:	4329      	orrge	r1, r5
 80080fe:	bd30      	popge	{r4, r5, pc}
 8008100:	ea6f 0404 	mvn.w	r4, r4
 8008104:	3c1f      	subs	r4, #31
 8008106:	da1c      	bge.n	8008142 <__adddf3+0x1d2>
 8008108:	340c      	adds	r4, #12
 800810a:	dc0e      	bgt.n	800812a <__adddf3+0x1ba>
 800810c:	f104 0414 	add.w	r4, r4, #20
 8008110:	f1c4 0220 	rsb	r2, r4, #32
 8008114:	fa20 f004 	lsr.w	r0, r0, r4
 8008118:	fa01 f302 	lsl.w	r3, r1, r2
 800811c:	ea40 0003 	orr.w	r0, r0, r3
 8008120:	fa21 f304 	lsr.w	r3, r1, r4
 8008124:	ea45 0103 	orr.w	r1, r5, r3
 8008128:	bd30      	pop	{r4, r5, pc}
 800812a:	f1c4 040c 	rsb	r4, r4, #12
 800812e:	f1c4 0220 	rsb	r2, r4, #32
 8008132:	fa20 f002 	lsr.w	r0, r0, r2
 8008136:	fa01 f304 	lsl.w	r3, r1, r4
 800813a:	ea40 0003 	orr.w	r0, r0, r3
 800813e:	4629      	mov	r1, r5
 8008140:	bd30      	pop	{r4, r5, pc}
 8008142:	fa21 f004 	lsr.w	r0, r1, r4
 8008146:	4629      	mov	r1, r5
 8008148:	bd30      	pop	{r4, r5, pc}
 800814a:	f094 0f00 	teq	r4, #0
 800814e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008152:	bf06      	itte	eq
 8008154:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008158:	3401      	addeq	r4, #1
 800815a:	3d01      	subne	r5, #1
 800815c:	e74e      	b.n	8007ffc <__adddf3+0x8c>
 800815e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008162:	bf18      	it	ne
 8008164:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008168:	d029      	beq.n	80081be <__adddf3+0x24e>
 800816a:	ea94 0f05 	teq	r4, r5
 800816e:	bf08      	it	eq
 8008170:	ea90 0f02 	teqeq	r0, r2
 8008174:	d005      	beq.n	8008182 <__adddf3+0x212>
 8008176:	ea54 0c00 	orrs.w	ip, r4, r0
 800817a:	bf04      	itt	eq
 800817c:	4619      	moveq	r1, r3
 800817e:	4610      	moveq	r0, r2
 8008180:	bd30      	pop	{r4, r5, pc}
 8008182:	ea91 0f03 	teq	r1, r3
 8008186:	bf1e      	ittt	ne
 8008188:	2100      	movne	r1, #0
 800818a:	2000      	movne	r0, #0
 800818c:	bd30      	popne	{r4, r5, pc}
 800818e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8008192:	d105      	bne.n	80081a0 <__adddf3+0x230>
 8008194:	0040      	lsls	r0, r0, #1
 8008196:	4149      	adcs	r1, r1
 8008198:	bf28      	it	cs
 800819a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800819e:	bd30      	pop	{r4, r5, pc}
 80081a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80081a4:	bf3c      	itt	cc
 80081a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80081aa:	bd30      	popcc	{r4, r5, pc}
 80081ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80081b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081b8:	f04f 0000 	mov.w	r0, #0
 80081bc:	bd30      	pop	{r4, r5, pc}
 80081be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80081c2:	bf1a      	itte	ne
 80081c4:	4619      	movne	r1, r3
 80081c6:	4610      	movne	r0, r2
 80081c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80081cc:	bf1c      	itt	ne
 80081ce:	460b      	movne	r3, r1
 80081d0:	4602      	movne	r2, r0
 80081d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80081d6:	bf06      	itte	eq
 80081d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80081dc:	ea91 0f03 	teqeq	r1, r3
 80081e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80081e4:	bd30      	pop	{r4, r5, pc}
 80081e6:	bf00      	nop

080081e8 <__aeabi_ui2d>:
 80081e8:	f090 0f00 	teq	r0, #0
 80081ec:	bf04      	itt	eq
 80081ee:	2100      	moveq	r1, #0
 80081f0:	4770      	bxeq	lr
 80081f2:	b530      	push	{r4, r5, lr}
 80081f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80081f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80081fc:	f04f 0500 	mov.w	r5, #0
 8008200:	f04f 0100 	mov.w	r1, #0
 8008204:	e750      	b.n	80080a8 <__adddf3+0x138>
 8008206:	bf00      	nop

08008208 <__aeabi_i2d>:
 8008208:	f090 0f00 	teq	r0, #0
 800820c:	bf04      	itt	eq
 800820e:	2100      	moveq	r1, #0
 8008210:	4770      	bxeq	lr
 8008212:	b530      	push	{r4, r5, lr}
 8008214:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008218:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800821c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008220:	bf48      	it	mi
 8008222:	4240      	negmi	r0, r0
 8008224:	f04f 0100 	mov.w	r1, #0
 8008228:	e73e      	b.n	80080a8 <__adddf3+0x138>
 800822a:	bf00      	nop

0800822c <__aeabi_f2d>:
 800822c:	0042      	lsls	r2, r0, #1
 800822e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008232:	ea4f 0131 	mov.w	r1, r1, rrx
 8008236:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800823a:	bf1f      	itttt	ne
 800823c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008240:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008244:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008248:	4770      	bxne	lr
 800824a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800824e:	bf08      	it	eq
 8008250:	4770      	bxeq	lr
 8008252:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8008256:	bf04      	itt	eq
 8008258:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800825c:	4770      	bxeq	lr
 800825e:	b530      	push	{r4, r5, lr}
 8008260:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800826c:	e71c      	b.n	80080a8 <__adddf3+0x138>
 800826e:	bf00      	nop

08008270 <__aeabi_ul2d>:
 8008270:	ea50 0201 	orrs.w	r2, r0, r1
 8008274:	bf08      	it	eq
 8008276:	4770      	bxeq	lr
 8008278:	b530      	push	{r4, r5, lr}
 800827a:	f04f 0500 	mov.w	r5, #0
 800827e:	e00a      	b.n	8008296 <__aeabi_l2d+0x16>

08008280 <__aeabi_l2d>:
 8008280:	ea50 0201 	orrs.w	r2, r0, r1
 8008284:	bf08      	it	eq
 8008286:	4770      	bxeq	lr
 8008288:	b530      	push	{r4, r5, lr}
 800828a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800828e:	d502      	bpl.n	8008296 <__aeabi_l2d+0x16>
 8008290:	4240      	negs	r0, r0
 8008292:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008296:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800829a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800829e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80082a2:	f43f aed8 	beq.w	8008056 <__adddf3+0xe6>
 80082a6:	f04f 0203 	mov.w	r2, #3
 80082aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80082ae:	bf18      	it	ne
 80082b0:	3203      	addne	r2, #3
 80082b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80082b6:	bf18      	it	ne
 80082b8:	3203      	addne	r2, #3
 80082ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80082be:	f1c2 0320 	rsb	r3, r2, #32
 80082c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80082c6:	fa20 f002 	lsr.w	r0, r0, r2
 80082ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80082ce:	ea40 000e 	orr.w	r0, r0, lr
 80082d2:	fa21 f102 	lsr.w	r1, r1, r2
 80082d6:	4414      	add	r4, r2
 80082d8:	e6bd      	b.n	8008056 <__adddf3+0xe6>
 80082da:	bf00      	nop

080082dc <__aeabi_fmul>:
 80082dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80082e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80082e4:	bf1e      	ittt	ne
 80082e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80082ea:	ea92 0f0c 	teqne	r2, ip
 80082ee:	ea93 0f0c 	teqne	r3, ip
 80082f2:	d06f      	beq.n	80083d4 <__aeabi_fmul+0xf8>
 80082f4:	441a      	add	r2, r3
 80082f6:	ea80 0c01 	eor.w	ip, r0, r1
 80082fa:	0240      	lsls	r0, r0, #9
 80082fc:	bf18      	it	ne
 80082fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8008302:	d01e      	beq.n	8008342 <__aeabi_fmul+0x66>
 8008304:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008308:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800830c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8008310:	fba0 3101 	umull	r3, r1, r0, r1
 8008314:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8008318:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800831c:	bf3e      	ittt	cc
 800831e:	0049      	lslcc	r1, r1, #1
 8008320:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8008324:	005b      	lslcc	r3, r3, #1
 8008326:	ea40 0001 	orr.w	r0, r0, r1
 800832a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800832e:	2afd      	cmp	r2, #253	; 0xfd
 8008330:	d81d      	bhi.n	800836e <__aeabi_fmul+0x92>
 8008332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008336:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800833a:	bf08      	it	eq
 800833c:	f020 0001 	biceq.w	r0, r0, #1
 8008340:	4770      	bx	lr
 8008342:	f090 0f00 	teq	r0, #0
 8008346:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800834a:	bf08      	it	eq
 800834c:	0249      	lsleq	r1, r1, #9
 800834e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8008352:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8008356:	3a7f      	subs	r2, #127	; 0x7f
 8008358:	bfc2      	ittt	gt
 800835a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800835e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8008362:	4770      	bxgt	lr
 8008364:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008368:	f04f 0300 	mov.w	r3, #0
 800836c:	3a01      	subs	r2, #1
 800836e:	dc5d      	bgt.n	800842c <__aeabi_fmul+0x150>
 8008370:	f112 0f19 	cmn.w	r2, #25
 8008374:	bfdc      	itt	le
 8008376:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800837a:	4770      	bxle	lr
 800837c:	f1c2 0200 	rsb	r2, r2, #0
 8008380:	0041      	lsls	r1, r0, #1
 8008382:	fa21 f102 	lsr.w	r1, r1, r2
 8008386:	f1c2 0220 	rsb	r2, r2, #32
 800838a:	fa00 fc02 	lsl.w	ip, r0, r2
 800838e:	ea5f 0031 	movs.w	r0, r1, rrx
 8008392:	f140 0000 	adc.w	r0, r0, #0
 8008396:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800839a:	bf08      	it	eq
 800839c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80083a0:	4770      	bx	lr
 80083a2:	f092 0f00 	teq	r2, #0
 80083a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80083aa:	bf02      	ittt	eq
 80083ac:	0040      	lsleq	r0, r0, #1
 80083ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80083b2:	3a01      	subeq	r2, #1
 80083b4:	d0f9      	beq.n	80083aa <__aeabi_fmul+0xce>
 80083b6:	ea40 000c 	orr.w	r0, r0, ip
 80083ba:	f093 0f00 	teq	r3, #0
 80083be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80083c2:	bf02      	ittt	eq
 80083c4:	0049      	lsleq	r1, r1, #1
 80083c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80083ca:	3b01      	subeq	r3, #1
 80083cc:	d0f9      	beq.n	80083c2 <__aeabi_fmul+0xe6>
 80083ce:	ea41 010c 	orr.w	r1, r1, ip
 80083d2:	e78f      	b.n	80082f4 <__aeabi_fmul+0x18>
 80083d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80083d8:	ea92 0f0c 	teq	r2, ip
 80083dc:	bf18      	it	ne
 80083de:	ea93 0f0c 	teqne	r3, ip
 80083e2:	d00a      	beq.n	80083fa <__aeabi_fmul+0x11e>
 80083e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80083e8:	bf18      	it	ne
 80083ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80083ee:	d1d8      	bne.n	80083a2 <__aeabi_fmul+0xc6>
 80083f0:	ea80 0001 	eor.w	r0, r0, r1
 80083f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80083f8:	4770      	bx	lr
 80083fa:	f090 0f00 	teq	r0, #0
 80083fe:	bf17      	itett	ne
 8008400:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8008404:	4608      	moveq	r0, r1
 8008406:	f091 0f00 	teqne	r1, #0
 800840a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800840e:	d014      	beq.n	800843a <__aeabi_fmul+0x15e>
 8008410:	ea92 0f0c 	teq	r2, ip
 8008414:	d101      	bne.n	800841a <__aeabi_fmul+0x13e>
 8008416:	0242      	lsls	r2, r0, #9
 8008418:	d10f      	bne.n	800843a <__aeabi_fmul+0x15e>
 800841a:	ea93 0f0c 	teq	r3, ip
 800841e:	d103      	bne.n	8008428 <__aeabi_fmul+0x14c>
 8008420:	024b      	lsls	r3, r1, #9
 8008422:	bf18      	it	ne
 8008424:	4608      	movne	r0, r1
 8008426:	d108      	bne.n	800843a <__aeabi_fmul+0x15e>
 8008428:	ea80 0001 	eor.w	r0, r0, r1
 800842c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008430:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008434:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008438:	4770      	bx	lr
 800843a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800843e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8008442:	4770      	bx	lr

08008444 <__aeabi_fdiv>:
 8008444:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008448:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800844c:	bf1e      	ittt	ne
 800844e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8008452:	ea92 0f0c 	teqne	r2, ip
 8008456:	ea93 0f0c 	teqne	r3, ip
 800845a:	d069      	beq.n	8008530 <__aeabi_fdiv+0xec>
 800845c:	eba2 0203 	sub.w	r2, r2, r3
 8008460:	ea80 0c01 	eor.w	ip, r0, r1
 8008464:	0249      	lsls	r1, r1, #9
 8008466:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800846a:	d037      	beq.n	80084dc <__aeabi_fdiv+0x98>
 800846c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008470:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8008474:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8008478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800847c:	428b      	cmp	r3, r1
 800847e:	bf38      	it	cc
 8008480:	005b      	lslcc	r3, r3, #1
 8008482:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8008486:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800848a:	428b      	cmp	r3, r1
 800848c:	bf24      	itt	cs
 800848e:	1a5b      	subcs	r3, r3, r1
 8008490:	ea40 000c 	orrcs.w	r0, r0, ip
 8008494:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8008498:	bf24      	itt	cs
 800849a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800849e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80084a2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80084a6:	bf24      	itt	cs
 80084a8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80084ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80084b0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80084b4:	bf24      	itt	cs
 80084b6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80084ba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80084be:	011b      	lsls	r3, r3, #4
 80084c0:	bf18      	it	ne
 80084c2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80084c6:	d1e0      	bne.n	800848a <__aeabi_fdiv+0x46>
 80084c8:	2afd      	cmp	r2, #253	; 0xfd
 80084ca:	f63f af50 	bhi.w	800836e <__aeabi_fmul+0x92>
 80084ce:	428b      	cmp	r3, r1
 80084d0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80084d4:	bf08      	it	eq
 80084d6:	f020 0001 	biceq.w	r0, r0, #1
 80084da:	4770      	bx	lr
 80084dc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80084e0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80084e4:	327f      	adds	r2, #127	; 0x7f
 80084e6:	bfc2      	ittt	gt
 80084e8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80084ec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80084f0:	4770      	bxgt	lr
 80084f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80084f6:	f04f 0300 	mov.w	r3, #0
 80084fa:	3a01      	subs	r2, #1
 80084fc:	e737      	b.n	800836e <__aeabi_fmul+0x92>
 80084fe:	f092 0f00 	teq	r2, #0
 8008502:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8008506:	bf02      	ittt	eq
 8008508:	0040      	lsleq	r0, r0, #1
 800850a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800850e:	3a01      	subeq	r2, #1
 8008510:	d0f9      	beq.n	8008506 <__aeabi_fdiv+0xc2>
 8008512:	ea40 000c 	orr.w	r0, r0, ip
 8008516:	f093 0f00 	teq	r3, #0
 800851a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800851e:	bf02      	ittt	eq
 8008520:	0049      	lsleq	r1, r1, #1
 8008522:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008526:	3b01      	subeq	r3, #1
 8008528:	d0f9      	beq.n	800851e <__aeabi_fdiv+0xda>
 800852a:	ea41 010c 	orr.w	r1, r1, ip
 800852e:	e795      	b.n	800845c <__aeabi_fdiv+0x18>
 8008530:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8008534:	ea92 0f0c 	teq	r2, ip
 8008538:	d108      	bne.n	800854c <__aeabi_fdiv+0x108>
 800853a:	0242      	lsls	r2, r0, #9
 800853c:	f47f af7d 	bne.w	800843a <__aeabi_fmul+0x15e>
 8008540:	ea93 0f0c 	teq	r3, ip
 8008544:	f47f af70 	bne.w	8008428 <__aeabi_fmul+0x14c>
 8008548:	4608      	mov	r0, r1
 800854a:	e776      	b.n	800843a <__aeabi_fmul+0x15e>
 800854c:	ea93 0f0c 	teq	r3, ip
 8008550:	d104      	bne.n	800855c <__aeabi_fdiv+0x118>
 8008552:	024b      	lsls	r3, r1, #9
 8008554:	f43f af4c 	beq.w	80083f0 <__aeabi_fmul+0x114>
 8008558:	4608      	mov	r0, r1
 800855a:	e76e      	b.n	800843a <__aeabi_fmul+0x15e>
 800855c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8008560:	bf18      	it	ne
 8008562:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8008566:	d1ca      	bne.n	80084fe <__aeabi_fdiv+0xba>
 8008568:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800856c:	f47f af5c 	bne.w	8008428 <__aeabi_fmul+0x14c>
 8008570:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8008574:	f47f af3c 	bne.w	80083f0 <__aeabi_fmul+0x114>
 8008578:	e75f      	b.n	800843a <__aeabi_fmul+0x15e>
 800857a:	bf00      	nop

0800857c <__aeabi_f2uiz>:
 800857c:	0042      	lsls	r2, r0, #1
 800857e:	d20e      	bcs.n	800859e <__aeabi_f2uiz+0x22>
 8008580:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8008584:	d30b      	bcc.n	800859e <__aeabi_f2uiz+0x22>
 8008586:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800858a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800858e:	d409      	bmi.n	80085a4 <__aeabi_f2uiz+0x28>
 8008590:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8008594:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008598:	fa23 f002 	lsr.w	r0, r3, r2
 800859c:	4770      	bx	lr
 800859e:	f04f 0000 	mov.w	r0, #0
 80085a2:	4770      	bx	lr
 80085a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80085a8:	d101      	bne.n	80085ae <__aeabi_f2uiz+0x32>
 80085aa:	0242      	lsls	r2, r0, #9
 80085ac:	d102      	bne.n	80085b4 <__aeabi_f2uiz+0x38>
 80085ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085b2:	4770      	bx	lr
 80085b4:	f04f 0000 	mov.w	r0, #0
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop

080085bc <Reset_Handler>:
 80085bc:	2100      	movs	r1, #0
 80085be:	e003      	b.n	80085c8 <DataInit>

080085c0 <CopyData>:
 80085c0:	4b0a      	ldr	r3, [pc, #40]	; (80085ec <Zerobss+0x10>)
 80085c2:	585b      	ldr	r3, [r3, r1]
 80085c4:	5043      	str	r3, [r0, r1]
 80085c6:	3104      	adds	r1, #4

080085c8 <DataInit>:
 80085c8:	4809      	ldr	r0, [pc, #36]	; (80085f0 <Zerobss+0x14>)
 80085ca:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <Zerobss+0x18>)
 80085cc:	1842      	adds	r2, r0, r1
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d3f6      	bcc.n	80085c0 <CopyData>
 80085d2:	4a09      	ldr	r2, [pc, #36]	; (80085f8 <Zerobss+0x1c>)
 80085d4:	e002      	b.n	80085dc <Zerobss>

080085d6 <FillZerobss>:
 80085d6:	2300      	movs	r3, #0
 80085d8:	f842 3b04 	str.w	r3, [r2], #4

080085dc <Zerobss>:
 80085dc:	4b07      	ldr	r3, [pc, #28]	; (80085fc <Zerobss+0x20>)
 80085de:	429a      	cmp	r2, r3
 80085e0:	d3f9      	bcc.n	80085d6 <FillZerobss>
 80085e2:	f00e fa85 	bl	8016af0 <SystemInit>
 80085e6:	f000 faab 	bl	8008b40 <main>
 80085ea:	4770      	bx	lr
 80085ec:	0801bfd4 	stmdaeq	r1, {r2, r4, r6, r7, r8, r9, sl, fp, ip, sp, pc}
 80085f0:	20000000 	andcs	r0, r0, r0
 80085f4:	200000e8 	andcs	r0, r0, r8, ror #1
 80085f8:	200000e8 	andcs	r0, r0, r8, ror #1
 80085fc:	2002b298 	mulcs	r2, r8, r2

08008600 <ADC0_1_IRQHandler>:
 8008600:	e7fe      	b.n	8008600 <ADC0_1_IRQHandler>

08008602 <memcpy>:
 8008602:	b510      	push	{r4, lr}
 8008604:	1e43      	subs	r3, r0, #1
 8008606:	440a      	add	r2, r1
 8008608:	4291      	cmp	r1, r2
 800860a:	d100      	bne.n	800860e <memcpy+0xc>
 800860c:	bd10      	pop	{r4, pc}
 800860e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008612:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008616:	e7f7      	b.n	8008608 <memcpy+0x6>

08008618 <DisplayHandler::~DisplayHandler()>:
 8008618:	4770      	bx	lr

0800861a <DisplayUdfHandler::~DisplayUdfHandler()>:
 800861a:	4770      	bx	lr

0800861c <DisplayUdfHandler::ShowLongName(char const*)>:
 800861c:	4770      	bx	lr

0800861e <DisplayUdfHandler::ShowRdmEnabled(unsigned int, bool)>:
 800861e:	4770      	bx	lr

08008620 <DisplayUdfHandler::ShowFailSafe(unsigned char)>:
 8008620:	4770      	bx	lr

08008622 <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 8008622:	4770      	bx	lr

08008624 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8008624:	4770      	bx	lr
	...

08008628 <PixelDmxStartStop::Start()>:
 8008628:	2204      	movs	r2, #4
 800862a:	4b01      	ldr	r3, [pc, #4]	; (8008630 <PixelDmxStartStop::Start()+0x8>)
 800862c:	611a      	str	r2, [r3, #16]
 800862e:	4770      	bx	lr
 8008630:	40011000 	andmi	r1, r1, r0

08008634 <PixelDmxStartStop::Stop()>:
 8008634:	2204      	movs	r2, #4
 8008636:	4b01      	ldr	r3, [pc, #4]	; (800863c <PixelDmxStartStop::Stop()+0x8>)
 8008638:	615a      	str	r2, [r3, #20]
 800863a:	4770      	bx	lr
 800863c:	40011000 	andmi	r1, r1, r0

08008640 <RDMNetDevice::CopyUID(unsigned char*)>:
 8008640:	460b      	mov	r3, r1
 8008642:	2206      	movs	r2, #6
 8008644:	1d01      	adds	r1, r0, #4
 8008646:	4618      	mov	r0, r3
 8008648:	f7ff bfdb 	b.w	8008602 <memcpy>

0800864c <non-virtual thunk to RDMNetDevice::CopyUID(unsigned char*)>:
 800864c:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 8008650:	e7f6      	b.n	8008640 <RDMNetDevice::CopyUID(unsigned char*)>
	...

08008654 <RDMNetDevice::CopyCID(unsigned char*)>:
 8008654:	4608      	mov	r0, r1
 8008656:	2210      	movs	r2, #16
 8008658:	4901      	ldr	r1, [pc, #4]	; (8008660 <RDMNetDevice::CopyCID(unsigned char*)+0xc>)
 800865a:	f7ff bfd2 	b.w	8008602 <memcpy>
 800865e:	bf00      	nop
 8008660:	2000c86b 	andcs	ip, r0, fp, ror #16

08008664 <non-virtual thunk to RDMNetDevice::CopyCID(unsigned char*)>:
 8008664:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 8008668:	e7f4      	b.n	8008654 <RDMNetDevice::CopyCID(unsigned char*)>
 800866a:	bf00      	nop

0800866c <FactoryDefaults::~FactoryDefaults()>:
 800866c:	4770      	bx	lr

0800866e <DisplayHandler::~DisplayHandler()>:
 800866e:	b510      	push	{r4, lr}
 8008670:	4604      	mov	r4, r0
 8008672:	f00d ffe9 	bl	8016648 <operator delete(void*)>
 8008676:	4620      	mov	r0, r4
 8008678:	bd10      	pop	{r4, pc}

0800867a <DisplayUdfHandler::~DisplayUdfHandler()>:
 800867a:	b510      	push	{r4, lr}
 800867c:	4604      	mov	r4, r0
 800867e:	f00d ffe3 	bl	8016648 <operator delete(void*)>
 8008682:	4620      	mov	r0, r4
 8008684:	bd10      	pop	{r4, pc}

08008686 <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 8008686:	b510      	push	{r4, lr}
 8008688:	4604      	mov	r4, r0
 800868a:	f00d ffdd 	bl	8016648 <operator delete(void*)>
 800868e:	4620      	mov	r0, r4
 8008690:	bd10      	pop	{r4, pc}

08008692 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8008692:	b510      	push	{r4, lr}
 8008694:	4604      	mov	r4, r0
 8008696:	f00d ffd7 	bl	8016648 <operator delete(void*)>
 800869a:	4620      	mov	r0, r4
 800869c:	bd10      	pop	{r4, pc}

0800869e <FactoryDefaults::~FactoryDefaults()>:
 800869e:	b510      	push	{r4, lr}
 80086a0:	4604      	mov	r4, r0
 80086a2:	f00d ffd1 	bl	8016648 <operator delete(void*)>
 80086a6:	4620      	mov	r0, r4
 80086a8:	bd10      	pop	{r4, pc}
	...

080086ac <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)>:
 80086ac:	4b02      	ldr	r3, [pc, #8]	; (80086b8 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0xc>)
 80086ae:	6819      	ldr	r1, [r3, #0]
 80086b0:	4b02      	ldr	r3, [pc, #8]	; (80086bc <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0x10>)
 80086b2:	6818      	ldr	r0, [r3, #0]
 80086b4:	f00c bfca 	b.w	801564c <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80086b8:	2000c73c 	andcs	ip, r0, ip, lsr r7
 80086bc:	2001d8a4 	andcs	sp, r1, r4, lsr #17

080086c0 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)>:
 80086c0:	4b02      	ldr	r3, [pc, #8]	; (80086cc <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0xc>)
 80086c2:	6819      	ldr	r1, [r3, #0]
 80086c4:	4b02      	ldr	r3, [pc, #8]	; (80086d0 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0x10>)
 80086c6:	6818      	ldr	r0, [r3, #0]
 80086c8:	f00c bfc0 	b.w	801564c <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80086cc:	2000c73c 	andcs	ip, r0, ip, lsr r7
 80086d0:	2001d8a4 	andcs	sp, r1, r4, lsr #17

080086d4 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)>:
 80086d4:	4b02      	ldr	r3, [pc, #8]	; (80086e0 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0xc>)
 80086d6:	6819      	ldr	r1, [r3, #0]
 80086d8:	4b02      	ldr	r3, [pc, #8]	; (80086e4 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0x10>)
 80086da:	6818      	ldr	r0, [r3, #0]
 80086dc:	f00c bfb6 	b.w	801564c <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80086e0:	2000c73c 	andcs	ip, r0, ip, lsr r7
 80086e4:	2001d8a4 	andcs	sp, r1, r4, lsr #17

080086e8 <DisplayUdfHandler::ShowNetSwitch(unsigned char)>:
 80086e8:	4b02      	ldr	r3, [pc, #8]	; (80086f4 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0xc>)
 80086ea:	6819      	ldr	r1, [r3, #0]
 80086ec:	4b02      	ldr	r3, [pc, #8]	; (80086f8 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0x10>)
 80086ee:	6818      	ldr	r0, [r3, #0]
 80086f0:	f00c bfac 	b.w	801564c <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80086f4:	2000c73c 	andcs	ip, r0, ip, lsr r7
 80086f8:	2001d8a4 	andcs	sp, r1, r4, lsr #17

080086fc <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)>:
 80086fc:	4b02      	ldr	r3, [pc, #8]	; (8008708 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0xc>)
 80086fe:	6819      	ldr	r1, [r3, #0]
 8008700:	4b02      	ldr	r3, [pc, #8]	; (800870c <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0x10>)
 8008702:	6818      	ldr	r0, [r3, #0]
 8008704:	f00c bfa2 	b.w	801564c <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8008708:	2000c73c 	andcs	ip, r0, ip, lsr r7
 800870c:	2001d8a4 	andcs	sp, r1, r4, lsr #17

08008710 <DisplayUdfHandler::ShowShortName(char const*)>:
 8008710:	4b02      	ldr	r3, [pc, #8]	; (800871c <DisplayUdfHandler::ShowShortName(char const*)+0xc>)
 8008712:	6819      	ldr	r1, [r3, #0]
 8008714:	4b02      	ldr	r3, [pc, #8]	; (8008720 <DisplayUdfHandler::ShowShortName(char const*)+0x10>)
 8008716:	6818      	ldr	r0, [r3, #0]
 8008718:	f00c bf75 	b.w	8015606 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 800871c:	2000c73c 	andcs	ip, r0, ip, lsr r7
 8008720:	2001d8a4 	andcs	sp, r1, r4, lsr #17

08008724 <RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)>:
 8008724:	b510      	push	{r4, lr}
 8008726:	4c03      	ldr	r4, [pc, #12]	; (8008734 <RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)+0x10>)
 8008728:	30d0      	adds	r0, #208	; 0xd0
 800872a:	4622      	mov	r2, r4
 800872c:	f007 f8fc 	bl	800f928 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>
 8008730:	4620      	mov	r0, r4
 8008732:	bd10      	pop	{r4, pc}
 8008734:	2000c76c 	andcs	ip, r0, ip, ror #14

08008738 <non-virtual thunk to RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)>:
 8008738:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 800873c:	e7f2      	b.n	8008724 <RDMNetDevice::LLRPHandleRdmCommand(unsigned char const*)>
 800873e:	bf00      	nop

08008740 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 8008740:	b110      	cbz	r0, 8008748 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 8008742:	6803      	ldr	r3, [r0, #0]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	4718      	bx	r3
 8008748:	4770      	bx	lr

0800874a <Display::PutChar(int) [clone .isra.0]>:
 800874a:	b110      	cbz	r0, 8008752 <Display::PutChar(int) [clone .isra.0]+0x8>
 800874c:	6803      	ldr	r3, [r0, #0]
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	4718      	bx	r3
 8008752:	4770      	bx	lr

08008754 <DisplayHandler::Print(unsigned int)>:
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	7903      	ldrb	r3, [r0, #4]
 8008758:	b1f3      	cbz	r3, 8008798 <DisplayHandler::Print(unsigned int)+0x44>
 800875a:	2904      	cmp	r1, #4
 800875c:	bf98      	it	ls
 800875e:	4b0f      	ldrls	r3, [pc, #60]	; (800879c <DisplayHandler::Print(unsigned int)+0x48>)
 8008760:	4d0f      	ldr	r5, [pc, #60]	; (80087a0 <DisplayHandler::Print(unsigned int)+0x4c>)
 8008762:	bf98      	it	ls
 8008764:	5c5c      	ldrbls	r4, [r3, r1]
 8008766:	682b      	ldr	r3, [r5, #0]
 8008768:	bf88      	it	hi
 800876a:	2455      	movhi	r4, #85	; 0x55
 800876c:	6998      	ldr	r0, [r3, #24]
 800876e:	b178      	cbz	r0, 8008790 <DisplayHandler::Print(unsigned int)+0x3c>
 8008770:	7901      	ldrb	r1, [r0, #4]
 8008772:	3901      	subs	r1, #1
 8008774:	b2c9      	uxtb	r1, r1
 8008776:	b168      	cbz	r0, 8008794 <DisplayHandler::Print(unsigned int)+0x40>
 8008778:	7942      	ldrb	r2, [r0, #5]
 800877a:	3a01      	subs	r2, #1
 800877c:	b2d2      	uxtb	r2, r2
 800877e:	f7ff ffdf 	bl	8008740 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8008782:	682b      	ldr	r3, [r5, #0]
 8008784:	4621      	mov	r1, r4
 8008786:	6998      	ldr	r0, [r3, #24]
 8008788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800878c:	f7ff bfdd 	b.w	800874a <Display::PutChar(int) [clone .isra.0]>
 8008790:	4601      	mov	r1, r0
 8008792:	e7ee      	b.n	8008772 <DisplayHandler::Print(unsigned int)+0x1e>
 8008794:	4602      	mov	r2, r0
 8008796:	e7f0      	b.n	800877a <DisplayHandler::Print(unsigned int)+0x26>
 8008798:	bd38      	pop	{r3, r4, r5, pc}
 800879a:	bf00      	nop
 800879c:	08018d78 	stmdaeq	r1, {r3, r4, r5, r6, r8, sl, fp, pc}
 80087a0:	2001d8ac 	andcs	sp, r1, ip, lsr #17

080087a4 <RDMNetDevice::~RDMNetDevice()>:
 80087a4:	b510      	push	{r4, lr}
 80087a6:	4604      	mov	r4, r0
 80087a8:	4b05      	ldr	r3, [pc, #20]	; (80087c0 <RDMNetDevice::~RDMNetDevice()+0x1c>)
 80087aa:	f840 3b88 	str.w	r3, [r0], #136
 80087ae:	f006 fb63 	bl	800ee78 <RDMSubDevices::~RDMSubDevices()>
 80087b2:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80087b6:	f006 fb3f 	bl	800ee38 <RDMSensors::~RDMSensors()>
 80087ba:	4620      	mov	r0, r4
 80087bc:	bd10      	pop	{r4, pc}
 80087be:	bf00      	nop
 80087c0:	0801a540 	stmdaeq	r1, {r6, r8, sl, sp, pc}

080087c4 <non-virtual thunk to RDMNetDevice::~RDMNetDevice()>:
 80087c4:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 80087c8:	e7ec      	b.n	80087a4 <RDMNetDevice::~RDMNetDevice()>
 80087ca:	bf00      	nop

080087cc <RDMNetDevice::~RDMNetDevice()>:
 80087cc:	b510      	push	{r4, lr}
 80087ce:	4604      	mov	r4, r0
 80087d0:	f7ff ffe8 	bl	80087a4 <RDMNetDevice::~RDMNetDevice()>
 80087d4:	4620      	mov	r0, r4
 80087d6:	f00d ff37 	bl	8016648 <operator delete(void*)>
 80087da:	4620      	mov	r0, r4
 80087dc:	bd10      	pop	{r4, pc}

080087de <non-virtual thunk to RDMNetDevice::~RDMNetDevice()>:
 80087de:	f1a0 00cc 	sub.w	r0, r0, #204	; 0xcc
 80087e2:	e7f3      	b.n	80087cc <RDMNetDevice::~RDMNetDevice()>

080087e4 <Display::ClearLine(unsigned char)>:
 80087e4:	6980      	ldr	r0, [r0, #24]
 80087e6:	b110      	cbz	r0, 80087ee <Display::ClearLine(unsigned char)+0xa>
 80087e8:	6803      	ldr	r3, [r0, #0]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	4718      	bx	r3
 80087ee:	4770      	bx	lr

080087f0 <Display::Printf(unsigned char, char const*, ...)>:
 80087f0:	b40c      	push	{r2, r3}
 80087f2:	b570      	push	{r4, r5, r6, lr}
 80087f4:	6984      	ldr	r4, [r0, #24]
 80087f6:	4605      	mov	r5, r0
 80087f8:	460e      	mov	r6, r1
 80087fa:	b08a      	sub	sp, #40	; 0x28
 80087fc:	b174      	cbz	r4, 800881c <Display::Printf(unsigned char, char const*, ...)+0x2c>
 80087fe:	ab0f      	add	r3, sp, #60	; 0x3c
 8008800:	2120      	movs	r1, #32
 8008802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008804:	a802      	add	r0, sp, #8
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	f001 f81a 	bl	8009840 <vsnprintf>
 800880c:	4604      	mov	r4, r0
 800880e:	69a8      	ldr	r0, [r5, #24]
 8008810:	4631      	mov	r1, r6
 8008812:	6803      	ldr	r3, [r0, #0]
 8008814:	aa02      	add	r2, sp, #8
 8008816:	69dd      	ldr	r5, [r3, #28]
 8008818:	b2a3      	uxth	r3, r4
 800881a:	47a8      	blx	r5
 800881c:	4620      	mov	r0, r4
 800881e:	b00a      	add	sp, #40	; 0x28
 8008820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008824:	b002      	add	sp, #8
 8008826:	4770      	bx	lr

08008828 <Display::TextStatus(char const*)>:
 8008828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800882c:	4604      	mov	r4, r0
 800882e:	6980      	ldr	r0, [r0, #24]
 8008830:	460d      	mov	r5, r1
 8008832:	b360      	cbz	r0, 800888e <Display::TextStatus(char const*)+0x66>
 8008834:	7947      	ldrb	r7, [r0, #5]
 8008836:	2100      	movs	r1, #0
 8008838:	1e7e      	subs	r6, r7, #1
 800883a:	b2f6      	uxtb	r6, r6
 800883c:	4632      	mov	r2, r6
 800883e:	f890 9004 	ldrb.w	r9, [r0, #4]
 8008842:	f04f 0800 	mov.w	r8, #0
 8008846:	f7ff ff7b 	bl	8008740 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 800884a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800884e:	45c1      	cmp	r9, r8
 8008850:	69a0      	ldr	r0, [r4, #24]
 8008852:	d816      	bhi.n	8008882 <Display::TextStatus(char const*)+0x5a>
 8008854:	4632      	mov	r2, r6
 8008856:	2100      	movs	r1, #0
 8008858:	f7ff ff72 	bl	8008740 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 800885c:	69a0      	ldr	r0, [r4, #24]
 800885e:	b1b0      	cbz	r0, 800888e <Display::TextStatus(char const*)+0x66>
 8008860:	2300      	movs	r3, #0
 8008862:	7901      	ldrb	r1, [r0, #4]
 8008864:	5cea      	ldrb	r2, [r5, r3]
 8008866:	b11a      	cbz	r2, 8008870 <Display::TextStatus(char const*)+0x48>
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	4299      	cmp	r1, r3
 800886c:	4613      	mov	r3, r2
 800886e:	dcf9      	bgt.n	8008864 <Display::TextStatus(char const*)+0x3c>
 8008870:	6802      	ldr	r2, [r0, #0]
 8008872:	4639      	mov	r1, r7
 8008874:	69d4      	ldr	r4, [r2, #28]
 8008876:	b2db      	uxtb	r3, r3
 8008878:	462a      	mov	r2, r5
 800887a:	46a4      	mov	ip, r4
 800887c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008880:	4760      	bx	ip
 8008882:	2120      	movs	r1, #32
 8008884:	f7ff ff61 	bl	800874a <Display::PutChar(int) [clone .isra.0]>
 8008888:	f108 0801 	add.w	r8, r8, #1
 800888c:	e7df      	b.n	800884e <Display::TextStatus(char const*)+0x26>
 800888e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008892 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 8008892:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008894:	4605      	mov	r5, r0
 8008896:	461e      	mov	r6, r3
 8008898:	460f      	mov	r7, r1
 800889a:	4614      	mov	r4, r2
 800889c:	f7ff ffc4 	bl	8008828 <Display::TextStatus(char const*)>
 80088a0:	7c6b      	ldrb	r3, [r5, #17]
 80088a2:	b19b      	cbz	r3, 80088cc <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3a>
 80088a4:	43e2      	mvns	r2, r4
 80088a6:	2312      	movs	r3, #18
 80088a8:	7a28      	ldrb	r0, [r5, #8]
 80088aa:	f88d 3004 	strb.w	r3, [sp, #4]
 80088ae:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80088b2:	f88d 3005 	strb.w	r3, [sp, #5]
 80088b6:	f88d 2006 	strb.w	r2, [sp, #6]
 80088ba:	f00f f8b3 	bl	8017a24 <gd32_i2c_set_address>
 80088be:	68e8      	ldr	r0, [r5, #12]
 80088c0:	f00f f8a8 	bl	8017a14 <gd32_i2c_set_baudrate>
 80088c4:	2103      	movs	r1, #3
 80088c6:	a801      	add	r0, sp, #4
 80088c8:	f00f f8b2 	bl	8017a30 <gd32_i2c_write>
 80088cc:	1c73      	adds	r3, r6, #1
 80088ce:	d006      	beq.n	80088de <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4c>
 80088d0:	4639      	mov	r1, r7
 80088d2:	4630      	mov	r0, r6
 80088d4:	b003      	add	sp, #12
 80088d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80088da:	f00d bd57 	b.w	801638c <console_status>
 80088de:	b003      	add	sp, #12
 80088e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080088e4 <Display::SetSleep(bool)>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4604      	mov	r4, r0
 80088e8:	6980      	ldr	r0, [r0, #24]
 80088ea:	460d      	mov	r5, r1
 80088ec:	b138      	cbz	r0, 80088fe <Display::SetSleep(bool)+0x1a>
 80088ee:	6803      	ldr	r3, [r0, #0]
 80088f0:	7421      	strb	r1, [r4, #16]
 80088f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f4:	4798      	blx	r3
 80088f6:	b915      	cbnz	r5, 80088fe <Display::SetSleep(bool)+0x1a>
 80088f8:	4b01      	ldr	r3, [pc, #4]	; (8008900 <Display::SetSleep(bool)+0x1c>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6063      	str	r3, [r4, #4]
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4

08008904 <display::timeout::gpio_init()>:
 8008904:	b510      	push	{r4, lr}
 8008906:	f240 6003 	movw	r0, #1539	; 0x603
 800890a:	f00e fb29 	bl	8016f60 <rcu_periph_clock_enable>
 800890e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008912:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008916:	2203      	movs	r2, #3
 8008918:	2148      	movs	r1, #72	; 0x48
 800891a:	4801      	ldr	r0, [pc, #4]	; (8008920 <display::timeout::gpio_init()+0x1c>)
 800891c:	f00e ba88 	b.w	8016e30 <gpio_init>
 8008920:	40010c00 	andmi	r0, r1, r0, lsl #24

08008924 <display::timeout::gpio_renew()>:
 8008924:	4b03      	ldr	r3, [pc, #12]	; (8008934 <display::timeout::gpio_renew()+0x10>)
 8008926:	f8d3 0c08 	ldr.w	r0, [r3, #3080]	; 0xc08
 800892a:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 800892e:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8008932:	4770      	bx	lr
 8008934:	40010000 	andmi	r0, r1, r0

08008938 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 8008938:	2905      	cmp	r1, #5
 800893a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800893e:	4606      	mov	r6, r0
 8008940:	460f      	mov	r7, r1
 8008942:	dc6e      	bgt.n	8008a22 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xea>
 8008944:	2400      	movs	r4, #0
 8008946:	4b38      	ldr	r3, [pc, #224]	; (8008a28 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf0>)
 8008948:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8008a2c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf4>
 800894c:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8008a30 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xf8>
 8008950:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8008a34 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xfc>
 8008954:	6019      	str	r1, [r3, #0]
 8008956:	2f05      	cmp	r7, #5
 8008958:	d80a      	bhi.n	8008970 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 800895a:	e8df f007 	tbb	[pc, r7]
 800895e:	1c120339 	ldcne	3, cr0, [r2], {57}	; 0x39
 8008962:	23002d25 	movwcs	r2, #3365	; 0xd25
 8008966:	2264      	movs	r2, #100	; 0x64
 8008968:	4621      	mov	r1, r4
 800896a:	4630      	mov	r0, r6
 800896c:	f008 fb98 	bl	80110a0 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8008970:	3401      	adds	r4, #1
 8008972:	2c08      	cmp	r4, #8
 8008974:	f108 0820 	add.w	r8, r8, #32
 8008978:	d1ed      	bne.n	8008956 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x1e>
 800897a:	2001      	movs	r0, #1
 800897c:	b004      	add	sp, #16
 800897e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008982:	2364      	movs	r3, #100	; 0x64
 8008984:	2200      	movs	r2, #0
 8008986:	4621      	mov	r1, r4
 8008988:	e9cd 3200 	strd	r3, r2, [sp]
 800898c:	4630      	mov	r0, r6
 800898e:	4b2a      	ldr	r3, [pc, #168]	; (8008a38 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x100>)
 8008990:	f008 fb9c 	bl	80110cc <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008994:	e7ec      	b.n	8008970 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 8008996:	2300      	movs	r3, #0
 8008998:	4621      	mov	r1, r4
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	4630      	mov	r0, r6
 800899e:	2364      	movs	r3, #100	; 0x64
 80089a0:	4a25      	ldr	r2, [pc, #148]	; (8008a38 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x100>)
 80089a2:	f008 fbaf 	bl	8011104 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80089a6:	e7e3      	b.n	8008970 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 80089a8:	2364      	movs	r3, #100	; 0x64
 80089aa:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80089ae:	4621      	mov	r1, r4
 80089b0:	4630      	mov	r0, r6
 80089b2:	f008 fbc1 	bl	8011138 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 80089b6:	e7db      	b.n	8008970 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 80089b8:	2364      	movs	r3, #100	; 0x64
 80089ba:	2200      	movs	r2, #0
 80089bc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80089c0:	230a      	movs	r3, #10
 80089c2:	4621      	mov	r1, r4
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	4630      	mov	r0, r6
 80089c8:	4b1b      	ldr	r3, [pc, #108]	; (8008a38 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x100>)
 80089ca:	f008 fbe9 	bl	80111a0 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80089ce:	e7cf      	b.n	8008970 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 80089d0:	2500      	movs	r5, #0
 80089d2:	f8c8 501c 	str.w	r5, [r8, #28]
 80089d6:	f8da 3000 	ldr.w	r3, [sl]
 80089da:	f8d9 0000 	ldr.w	r0, [r9]
 80089de:	429d      	cmp	r5, r3
 80089e0:	d30a      	bcc.n	80089f8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xc0>
 80089e2:	f8d9 0000 	ldr.w	r0, [r9]
 80089e6:	f009 f9d5 	bl	8011d94 <WS28xxMulti::IsUpdating()>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d1f9      	bne.n	80089e2 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xaa>
 80089ee:	f8d9 0000 	ldr.w	r0, [r9]
 80089f2:	f009 f88f 	bl	8011b14 <WS28xxMulti::Update()>
 80089f6:	e7bb      	b.n	8008970 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x38>
 80089f8:	6803      	ldr	r3, [r0, #0]
 80089fa:	2b07      	cmp	r3, #7
 80089fc:	f04f 0300 	mov.w	r3, #0
 8008a00:	d007      	beq.n	8008a12 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xda>
 8008a02:	462a      	mov	r2, r5
 8008a04:	4621      	mov	r1, r4
 8008a06:	e9cd 3300 	strd	r3, r3, [sp]
 8008a0a:	f009 fa45 	bl	8011e98 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8008a0e:	3501      	adds	r5, #1
 8008a10:	e7e1      	b.n	80089d6 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x9e>
 8008a12:	462a      	mov	r2, r5
 8008a14:	4621      	mov	r1, r4
 8008a16:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	f009 fac4 	bl	8011fa8 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8008a20:	e7f5      	b.n	8008a0e <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xd6>
 8008a22:	2000      	movs	r0, #0
 8008a24:	e7aa      	b.n	800897c <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x44>
 8008a26:	bf00      	nop
 8008a28:	2000c9a4 	andcs	ip, r0, r4, lsr #19
 8008a2c:	2000c890 	mulcs	r0, r0, r8
 8008a30:	2000c99c 	mulcs	r0, ip, r9
 8008a34:	2000c998 	mulcs	r0, r8, r9
 8008a38:	00646464 	rsbeq	r6, r4, r4, ror #8

08008a3c <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)>:
 8008a3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a3e:	780b      	ldrb	r3, [r1, #0]
 8008a40:	4605      	mov	r5, r0
 8008a42:	2b03      	cmp	r3, #3
 8008a44:	d11f      	bne.n	8008a86 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 8008a46:	4b18      	ldr	r3, [pc, #96]	; (8008aa8 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x6c>)
 8008a48:	784c      	ldrb	r4, [r1, #1]
 8008a4a:	6818      	ldr	r0, [r3, #0]
 8008a4c:	4b17      	ldr	r3, [pc, #92]	; (8008aac <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x70>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	429c      	cmp	r4, r3
 8008a52:	d018      	beq.n	8008a86 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 8008a54:	4621      	mov	r1, r4
 8008a56:	f7ff ff6f 	bl	8008938 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8008a5a:	b1a0      	cbz	r0, 8008a86 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 8008a5c:	4e14      	ldr	r6, [pc, #80]	; (8008ab0 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x74>)
 8008a5e:	b1a4      	cbz	r4, 8008a8a <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4e>
 8008a60:	2200      	movs	r2, #0
 8008a62:	6833      	ldr	r3, [r6, #0]
 8008a64:	4d13      	ldr	r5, [pc, #76]	; (8008ab4 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x78>)
 8008a66:	605a      	str	r2, [r3, #4]
 8008a68:	2106      	movs	r1, #6
 8008a6a:	6828      	ldr	r0, [r5, #0]
 8008a6c:	f7ff feba 	bl	80087e4 <Display::ClearLine(unsigned char)>
 8008a70:	4620      	mov	r0, r4
 8008a72:	682d      	ldr	r5, [r5, #0]
 8008a74:	f008 fb08 	bl	8011088 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8008a78:	2106      	movs	r1, #6
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	4a0e      	ldr	r2, [pc, #56]	; (8008ab8 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x7c>)
 8008a7e:	4628      	mov	r0, r5
 8008a80:	9400      	str	r4, [sp, #0]
 8008a82:	f7ff feb5 	bl	80087f0 <Display::Printf(unsigned char, char const*, ...)>
 8008a86:	b002      	add	sp, #8
 8008a88:	bd70      	pop	{r4, r5, r6, pc}
 8008a8a:	6868      	ldr	r0, [r5, #4]
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	6803      	ldr	r3, [r0, #0]
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	4798      	blx	r3
 8008a94:	6833      	ldr	r3, [r6, #0]
 8008a96:	686a      	ldr	r2, [r5, #4]
 8008a98:	605a      	str	r2, [r3, #4]
 8008a9a:	4b08      	ldr	r3, [pc, #32]	; (8008abc <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x80>)
 8008a9c:	6818      	ldr	r0, [r3, #0]
 8008a9e:	b002      	add	sp, #8
 8008aa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008aa4:	f00c bb64 	b.w	8015170 <DisplayUdf::Show()>
 8008aa8:	2000c9a0 	andcs	ip, r0, r0, lsr #19
 8008aac:	2000c9a4 	andcs	ip, r0, r4, lsr #19
 8008ab0:	2000c73c 	andcs	ip, r0, ip, lsr r7
 8008ab4:	2001d8ac 	andcs	sp, r1, ip, lsr #17
 8008ab8:	08018bf1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, r9, fp, pc}
 8008abc:	2001d8a4 	andcs	sp, r1, r4, lsr #17

08008ac0 <StoreNetwork::SaveDhcp(bool)>:
 8008ac0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	f88d 1017 	strb.w	r1, [sp, #23]
 8008ac8:	2100      	movs	r1, #0
 8008aca:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8008ace:	4805      	ldr	r0, [pc, #20]	; (8008ae4 <StoreNetwork::SaveDhcp(bool)+0x24>)
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	2214      	movs	r2, #20
 8008ad4:	6800      	ldr	r0, [r0, #0]
 8008ad6:	f10d 0317 	add.w	r3, sp, #23
 8008ada:	f009 fb8d 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8008ade:	b007      	add	sp, #28
 8008ae0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008ae4:	200159c4 	andcs	r5, r1, r4, asr #19

08008ae8 <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 8008ae8:	f1a0 0004 	sub.w	r0, r0, #4
 8008aec:	e7e8      	b.n	8008ac0 <StoreNetwork::SaveDhcp(bool)>
 8008aee:	bf00      	nop

08008af0 <FactoryDefaults::Set()>:
 8008af0:	b508      	push	{r3, lr}
 8008af2:	4b08      	ldr	r3, [pc, #32]	; (8008b14 <FactoryDefaults::Set()+0x24>)
 8008af4:	2100      	movs	r1, #0
 8008af6:	6818      	ldr	r0, [r3, #0]
 8008af8:	f001 f9c8 	bl	8009e8c <RemoteConfig::SetDisable(bool)>
 8008afc:	4b06      	ldr	r3, [pc, #24]	; (8008b18 <FactoryDefaults::Set()+0x28>)
 8008afe:	210b      	movs	r1, #11
 8008b00:	6818      	ldr	r0, [r3, #0]
 8008b02:	f009 fb67 	bl	80121d4 <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 8008b06:	4b05      	ldr	r3, [pc, #20]	; (8008b1c <FactoryDefaults::Set()+0x2c>)
 8008b08:	2101      	movs	r1, #1
 8008b0a:	6818      	ldr	r0, [r3, #0]
 8008b0c:	f7ff ffd8 	bl	8008ac0 <StoreNetwork::SaveDhcp(bool)>
 8008b10:	bd08      	pop	{r3, pc}
 8008b12:	bf00      	nop
 8008b14:	20000114 	andcs	r0, r0, r4, lsl r1
 8008b18:	200159c4 	andcs	r5, r1, r4, asr #19
 8008b1c:	200159d0 	ldrdcs	r5, [r1], -r0

08008b20 <Hardware::RebootHandler()>:
 8008b20:	b508      	push	{r3, lr}
 8008b22:	4b05      	ldr	r3, [pc, #20]	; (8008b38 <Hardware::RebootHandler()+0x18>)
 8008b24:	6818      	ldr	r0, [r3, #0]
 8008b26:	f009 f871 	bl	8011c0c <WS28xxMulti::Blackout()>
 8008b2a:	4b04      	ldr	r3, [pc, #16]	; (8008b3c <Hardware::RebootHandler()+0x1c>)
 8008b2c:	6818      	ldr	r0, [r3, #0]
 8008b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008b32:	f002 bc05 	b.w	800b340 <ArtNetNode::Stop()>
 8008b36:	bf00      	nop
 8008b38:	2000c9ac 	andcs	ip, r0, ip, lsr #19
 8008b3c:	2000c73c 	andcs	ip, r0, ip, lsr r7

08008b40 <main>:
 8008b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b44:	2601      	movs	r6, #1
 8008b46:	f5ad 5d0f 	sub.w	sp, sp, #9152	; 0x23c0
 8008b4a:	b08d      	sub	sp, #52	; 0x34
 8008b4c:	a809      	add	r0, sp, #36	; 0x24
 8008b4e:	f00d fcd1 	bl	80164f4 <Hardware::Hardware()>
 8008b52:	a8cd      	add	r0, sp, #820	; 0x334
 8008b54:	f00b f90e 	bl	8013d74 <Network::Network()>
 8008b58:	a81d      	add	r0, sp, #116	; 0x74
 8008b5a:	f00d fc75 	bl	8016448 <LedBlink::LedBlink()>
 8008b5e:	a87e      	add	r0, sp, #504	; 0x1f8
 8008b60:	f00c fa2e 	bl	8014fc0 <DisplayUdf::DisplayUdf()>
 8008b64:	4bbe      	ldr	r3, [pc, #760]	; (8008e60 <main+0x320>)
 8008b66:	4abf      	ldr	r2, [pc, #764]	; (8008e64 <main+0x324>)
 8008b68:	49bf      	ldr	r1, [pc, #764]	; (8008e68 <main+0x328>)
 8008b6a:	a80a      	add	r0, sp, #40	; 0x28
 8008b6c:	f00d fc26 	bl	80163bc <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8008b70:	a80b      	add	r0, sp, #44	; 0x2c
 8008b72:	f009 ffb5 	bl	8012ae0 <FlashRom::FlashRom()>
 8008b76:	4fbd      	ldr	r7, [pc, #756]	; (8008e6c <main+0x32c>)
 8008b78:	a80c      	add	r0, sp, #48	; 0x30
 8008b7a:	f009 fb05 	bl	8012188 <SpiFlashStore::SpiFlashStore()>
 8008b7e:	49bc      	ldr	r1, [pc, #752]	; (8008e70 <main+0x330>)
 8008b80:	a80a      	add	r0, sp, #40	; 0x28
 8008b82:	f00d fc53 	bl	801642c <FirmwareVersion::Print(char const*)>
 8008b86:	2008      	movs	r0, #8
 8008b88:	613e      	str	r6, [r7, #16]
 8008b8a:	f00d fd61 	bl	8016650 <operator new(unsigned int)>
 8008b8e:	4bb9      	ldr	r3, [pc, #740]	; (8008e74 <main+0x334>)
 8008b90:	2500      	movs	r5, #0
 8008b92:	6003      	str	r3, [r0, #0]
 8008b94:	4bb8      	ldr	r3, [pc, #736]	; (8008e78 <main+0x338>)
 8008b96:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	49b7      	ldr	r1, [pc, #732]	; (8008e7c <main+0x33c>)
 8008b9e:	3b00      	subs	r3, #0
 8008ba0:	bf18      	it	ne
 8008ba2:	2301      	movne	r3, #1
 8008ba4:	7103      	strb	r3, [r0, #4]
 8008ba6:	901f      	str	r0, [sp, #124]	; 0x7c
 8008ba8:	ab1d      	add	r3, sp, #116	; 0x74
 8008baa:	a87e      	add	r0, sp, #504	; 0x1f8
 8008bac:	2303      	movs	r3, #3
 8008bae:	f7ff fe70 	bl	8008892 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008bb2:	ac1c      	add	r4, sp, #112	; 0x70
 8008bb4:	a813      	add	r0, sp, #76	; 0x4c
 8008bb6:	f009 fcad 	bl	8012514 <StoreNetwork::StoreNetwork()>
 8008bba:	f1a4 0320 	sub.w	r3, r4, #32
 8008bbe:	a913      	add	r1, sp, #76	; 0x4c
 8008bc0:	a8cd      	add	r0, sp, #820	; 0x334
 8008bc2:	93fb      	str	r3, [sp, #1004]	; 0x3ec
 8008bc4:	f00b f930 	bl	8013e28 <Network::Init(NetworkParamsStore*)>
 8008bc8:	a8cd      	add	r0, sp, #820	; 0x334
 8008bca:	f00b fbab 	bl	8014324 <Network::Print()>
 8008bce:	2303      	movs	r3, #3
 8008bd0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008bd4:	49aa      	ldr	r1, [pc, #680]	; (8008e80 <main+0x340>)
 8008bd6:	a87e      	add	r0, sp, #504	; 0x1f8
 8008bd8:	f7ff fe5b 	bl	8008892 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008bdc:	a80d      	add	r0, sp, #52	; 0x34
 8008bde:	f00a fd0b 	bl	80135f8 <MDNS::MDNS()>
 8008be2:	a80d      	add	r0, sp, #52	; 0x34
 8008be4:	f00a fdc8 	bl	8013778 <MDNS::Start()>
 8008be8:	f642 1305 	movw	r3, #10501	; 0x2905
 8008bec:	4629      	mov	r1, r5
 8008bee:	4aa5      	ldr	r2, [pc, #660]	; (8008e84 <main+0x344>)
 8008bf0:	e9cd 5500 	strd	r5, r5, [sp]
 8008bf4:	a80d      	add	r0, sp, #52	; 0x34
 8008bf6:	f00a ff29 	bl	8013a4c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8008bfa:	4ba3      	ldr	r3, [pc, #652]	; (8008e88 <main+0x348>)
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	4aa3      	ldr	r2, [pc, #652]	; (8008e8c <main+0x34c>)
 8008c00:	e9cd 6300 	strd	r6, r3, [sp]
 8008c04:	a80d      	add	r0, sp, #52	; 0x34
 8008c06:	2350      	movs	r3, #80	; 0x50
 8008c08:	f00a ff20 	bl	8013a4c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8008c0c:	a80d      	add	r0, sp, #52	; 0x34
 8008c0e:	f00b f863 	bl	8013cd8 <MDNS::Print()>
 8008c12:	a847      	add	r0, sp, #284	; 0x11c
 8008c14:	f001 fdfe 	bl	800a814 <HttpDaemon::HttpDaemon()>
 8008c18:	a847      	add	r0, sp, #284	; 0x11c
 8008c1a:	f001 fe0f 	bl	800a83c <HttpDaemon::Start()>
 8008c1e:	2303      	movs	r3, #3
 8008c20:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 8008c24:	499a      	ldr	r1, [pc, #616]	; (8008e90 <main+0x350>)
 8008c26:	a87e      	add	r0, sp, #504	; 0x1f8
 8008c28:	f7ff fe33 	bl	8008892 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008c2c:	f20d 40dc 	addw	r0, sp, #1244	; 0x4dc
 8008c30:	f002 face 	bl	800b1d0 <ArtNet4Node::ArtNet4Node()>
 8008c34:	4629      	mov	r1, r5
 8008c36:	a815      	add	r0, sp, #84	; 0x54
 8008c38:	f009 fe62 	bl	8012900 <StoreArtNet::StoreArtNet(unsigned int)>
 8008c3c:	a915      	add	r1, sp, #84	; 0x54
 8008c3e:	a8aa      	add	r0, sp, #680	; 0x2a8
 8008c40:	f004 f8d0 	bl	800cde4 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8008c44:	a8aa      	add	r0, sp, #680	; 0x2a8
 8008c46:	f004 f8ed 	bl	800ce24 <ArtNetParams::Load()>
 8008c4a:	b130      	cbz	r0, 8008c5a <main+0x11a>
 8008c4c:	a8aa      	add	r0, sp, #680	; 0x2a8
 8008c4e:	f004 fd17 	bl	800d680 <ArtNetParams::Dump()>
 8008c52:	4629      	mov	r1, r5
 8008c54:	a8aa      	add	r0, sp, #680	; 0x2a8
 8008c56:	f004 fc81 	bl	800d55c <ArtNetParams::Set(unsigned int)>
 8008c5a:	f20d 42dc 	addw	r2, sp, #1244	; 0x4dc
 8008c5e:	f1a4 0318 	sub.w	r3, r4, #24
 8008c62:	498c      	ldr	r1, [pc, #560]	; (8008e94 <main+0x354>)
 8008c64:	6213      	str	r3, [r2, #32]
 8008c66:	910f      	str	r1, [sp, #60]	; 0x3c
 8008c68:	ab0f      	add	r3, sp, #60	; 0x3c
 8008c6a:	f1a4 0334 	sub.w	r3, r4, #52	; 0x34
 8008c6e:	6253      	str	r3, [r2, #36]	; 0x24
 8008c70:	21aa      	movs	r1, #170	; 0xaa
 8008c72:	2203      	movs	r2, #3
 8008c74:	ab66      	add	r3, sp, #408	; 0x198
 8008c76:	e9c3 2100 	strd	r2, r1, [r3]
 8008c7a:	2006      	movs	r0, #6
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	e9c3 0202 	strd	r0, r2, [r3, #8]
 8008c82:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8008c86:	611a      	str	r2, [r3, #16]
 8008c88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c8c:	829a      	strh	r2, [r3, #20]
 8008c8e:	4a82      	ldr	r2, [pc, #520]	; (8008e98 <main+0x358>)
 8008c90:	6259      	str	r1, [r3, #36]	; 0x24
 8008c92:	619a      	str	r2, [r3, #24]
 8008c94:	2201      	movs	r2, #1
 8008c96:	a817      	add	r0, sp, #92	; 0x5c
 8008c98:	e9c3 2207 	strd	r2, r2, [r3, #28]
 8008c9c:	859a      	strh	r2, [r3, #44]	; 0x2c
 8008c9e:	f009 ff13 	bl	8012ac8 <StorePixelDmx::StorePixelDmx()>
 8008ca2:	a917      	add	r1, sp, #92	; 0x5c
 8008ca4:	a85b      	add	r0, sp, #364	; 0x16c
 8008ca6:	f007 fc27 	bl	80104f8 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 8008caa:	a85b      	add	r0, sp, #364	; 0x16c
 8008cac:	f007 fc46 	bl	801053c <PixelDmxParams::Load()>
 8008cb0:	b130      	cbz	r0, 8008cc0 <main+0x180>
 8008cb2:	a85b      	add	r0, sp, #364	; 0x16c
 8008cb4:	f007 ff96 	bl	8010be4 <PixelDmxParams::Dump()>
 8008cb8:	a966      	add	r1, sp, #408	; 0x198
 8008cba:	a85b      	add	r0, sp, #364	; 0x16c
 8008cbc:	f007 ff4d 	bl	8010b5a <PixelDmxParams::Set(PixelDmxConfiguration*)>
 8008cc0:	f50d 7a14 	add.w	sl, sp, #592	; 0x250
 8008cc4:	a966      	add	r1, sp, #408	; 0x198
 8008cc6:	4650      	mov	r0, sl
 8008cc8:	f007 fb2e 	bl	8010328 <WS28xxDmxMulti::WS28xxDmxMulti(PixelDmxConfiguration&)>
 8008ccc:	2004      	movs	r0, #4
 8008cce:	f00d fcbf 	bl	8016650 <operator new(unsigned int)>
 8008cd2:	4b72      	ldr	r3, [pc, #456]	; (8008e9c <main+0x35c>)
 8008cd4:	4605      	mov	r5, r0
 8008cd6:	6003      	str	r3, [r0, #0]
 8008cd8:	2203      	movs	r2, #3
 8008cda:	2304      	movs	r3, #4
 8008cdc:	2110      	movs	r1, #16
 8008cde:	4863      	ldr	r0, [pc, #396]	; (8008e6c <main+0x32c>)
 8008ce0:	f00e f8a6 	bl	8016e30 <gpio_init>
 8008ce4:	2304      	movs	r3, #4
 8008ce6:	617b      	str	r3, [r7, #20]
 8008ce8:	f8ca 504c 	str.w	r5, [sl, #76]	; 0x4c
 8008cec:	2500      	movs	r5, #0
 8008cee:	46a9      	mov	r9, r5
 8008cf0:	f8da b02c 	ldr.w	fp, [sl, #44]	; 0x2c
 8008cf4:	f8da 8020 	ldr.w	r8, [sl, #32]
 8008cf8:	f1cb 0304 	rsb	r3, fp, #4
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	9307      	str	r3, [sp, #28]
 8008d00:	4545      	cmp	r5, r8
 8008d02:	f040 8203 	bne.w	800910c <main+0x5cc>
 8008d06:	f89d 6180 	ldrb.w	r6, [sp, #384]	; 0x180
 8008d0a:	4641      	mov	r1, r8
 8008d0c:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8008ea0 <main+0x360>
 8008d10:	a80e      	add	r0, sp, #56	; 0x38
 8008d12:	ab5b      	add	r3, sp, #364	; 0x16c
 8008d14:	f008 f992 	bl	801103c <PixelPatterns::PixelPatterns(unsigned int)>
 8008d18:	4631      	mov	r1, r6
 8008d1a:	a80e      	add	r0, sp, #56	; 0x38
 8008d1c:	f8c9 6000 	str.w	r6, [r9]
 8008d20:	f7ff fe0a 	bl	8008938 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8008d24:	f8d9 3000 	ldr.w	r3, [r9]
 8008d28:	495e      	ldr	r1, [pc, #376]	; (8008ea4 <main+0x364>)
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	bf0c      	ite	eq
 8008d2e:	4652      	moveq	r2, sl
 8008d30:	2200      	movne	r2, #0
 8008d32:	f8cd 24e4 	str.w	r2, [sp, #1252]	; 0x4e4
 8008d36:	4a5c      	ldr	r2, [pc, #368]	; (8008ea8 <main+0x368>)
 8008d38:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 8008d3c:	ab19      	add	r3, sp, #100	; 0x64
 8008d3e:	e9c3 2a00 	strd	r2, sl, [r3]
 8008d42:	4b5a      	ldr	r3, [pc, #360]	; (8008eac <main+0x36c>)
 8008d44:	f8df a168 	ldr.w	sl, [pc, #360]	; 8008eb0 <main+0x370>
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f1a4 020c 	sub.w	r2, r4, #12
 8008d4e:	615a      	str	r2, [r3, #20]
 8008d50:	a87e      	add	r0, sp, #504	; 0x1f8
 8008d52:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8008d56:	2303      	movs	r3, #3
 8008d58:	f7ff fd9b 	bl	8008892 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008d5c:	f8da 3000 	ldr.w	r3, [sl]
 8008d60:	6818      	ldr	r0, [r3, #0]
 8008d62:	f008 f847 	bl	8010df4 <PixelType::GetType(pixel::Type)>
 8008d66:	f8da 3000 	ldr.w	r3, [sl]
 8008d6a:	2120      	movs	r1, #32
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	4a51      	ldr	r2, [pc, #324]	; (8008eb4 <main+0x374>)
 8008d70:	e9cd 0300 	strd	r0, r3, [sp]
 8008d74:	4643      	mov	r3, r8
 8008d76:	a823      	add	r0, sp, #140	; 0x8c
 8008d78:	f000 fd4a 	bl	8009810 <snprintf>
 8008d7c:	4a4e      	ldr	r2, [pc, #312]	; (8008eb8 <main+0x378>)
 8008d7e:	2120      	movs	r1, #32
 8008d80:	a82c      	add	r0, sp, #176	; 0xb0
 8008d82:	f000 fd45 	bl	8009810 <snprintf>
 8008d86:	4605      	mov	r5, r0
 8008d88:	202c      	movs	r0, #44	; 0x2c
 8008d8a:	f00d fc61 	bl	8016650 <operator new(unsigned int)>
 8008d8e:	2200      	movs	r2, #0
 8008d90:	4603      	mov	r3, r0
 8008d92:	6042      	str	r2, [r0, #4]
 8008d94:	6282      	str	r2, [r0, #40]	; 0x28
 8008d96:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 8008d9a:	f823 2b08 	strh.w	r2, [r3], #8
 8008d9e:	aa23      	add	r2, sp, #140	; 0x8c
 8008da0:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008da4:	b111      	cbz	r1, 8008dac <main+0x26c>
 8008da6:	459c      	cmp	ip, r3
 8008da8:	f040 81d8 	bne.w	800915c <main+0x61c>
 8008dac:	2201      	movs	r2, #1
 8008dae:	9010      	str	r0, [sp, #64]	; 0x40
 8008db0:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
 8008db4:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 8008db8:	ab10      	add	r3, sp, #64	; 0x40
 8008dba:	f006 f97f 	bl	800f0bc <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>
 8008dbe:	f20d 40cc 	addw	r0, sp, #1228	; 0x4cc
 8008dc2:	f005 fefd 	bl	800ebc0 <LLRPDevice::LLRPDevice()>
 8008dc6:	4b3d      	ldr	r3, [pc, #244]	; (8008ebc <main+0x37c>)
 8008dc8:	2100      	movs	r1, #0
 8008dca:	f8cd 3400 	str.w	r3, [sp, #1024]	; 0x400
 8008dce:	3324      	adds	r3, #36	; 0x24
 8008dd0:	f8cd 34cc 	str.w	r3, [sp, #1228]	; 0x4cc
 8008dd4:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
 8008dd8:	f006 fb66 	bl	800f4a8 <RDMHandler::RDMHandler(bool)>
 8008ddc:	4b38      	ldr	r3, [pc, #224]	; (8008ec0 <main+0x380>)
 8008dde:	4939      	ldr	r1, [pc, #228]	; (8008ec4 <main+0x384>)
 8008de0:	6818      	ldr	r0, [r3, #0]
 8008de2:	f00d fbd7 	bl	8016594 <Hardware::GetUuid(unsigned char*)>
 8008de6:	b2ed      	uxtb	r5, r5
 8008de8:	f89d 3454 	ldrb.w	r3, [sp, #1108]	; 0x454
 8008dec:	2d20      	cmp	r5, #32
 8008dee:	f50d 6b80 	add.w	fp, sp, #1024	; 0x400
 8008df2:	bf28      	it	cs
 8008df4:	2520      	movcs	r5, #32
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 81b6 	beq.w	8009168 <main+0x628>
 8008dfc:	f20d 430e 	addw	r3, sp, #1038	; 0x40e
 8008e00:	462a      	mov	r2, r5
 8008e02:	4618      	mov	r0, r3
 8008e04:	a92c      	add	r1, sp, #176	; 0xb0
 8008e06:	9305      	str	r3, [sp, #20]
 8008e08:	f7ff fbfb 	bl	8008602 <memcpy>
 8008e0c:	f8db 0078 	ldr.w	r0, [fp, #120]	; 0x78
 8008e10:	f88b 502e 	strb.w	r5, [fp, #46]	; 0x2e
 8008e14:	b130      	cbz	r0, 8008e24 <main+0x2e4>
 8008e16:	6802      	ldr	r2, [r0, #0]
 8008e18:	9b05      	ldr	r3, [sp, #20]
 8008e1a:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8008e1e:	4619      	mov	r1, r3
 8008e20:	462a      	mov	r2, r5
 8008e22:	47d8      	blx	fp
 8008e24:	4b28      	ldr	r3, [pc, #160]	; (8008ec8 <main+0x388>)
 8008e26:	2004      	movs	r0, #4
 8008e28:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
 8008e2c:	f00d fc10 	bl	8016650 <operator new(unsigned int)>
 8008e30:	4b26      	ldr	r3, [pc, #152]	; (8008ecc <main+0x38c>)
 8008e32:	f50d 6580 	add.w	r5, sp, #1024	; 0x400
 8008e36:	f8c5 00c8 	str.w	r0, [r5, #200]	; 0xc8
 8008e3a:	f20d 4504 	addw	r5, sp, #1028	; 0x404
 8008e3e:	6003      	str	r3, [r0, #0]
 8008e40:	2201      	movs	r2, #1
 8008e42:	4629      	mov	r1, r5
 8008e44:	f50d 609c 	add.w	r0, sp, #1248	; 0x4e0
 8008e48:	f003 fe14 	bl	800ca74 <ArtNetNode::SetRdmUID(unsigned char const*, bool)>
 8008e4c:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
 8008e50:	f006 f984 	bl	800f15c <RDMDeviceResponder::Init()>
 8008e54:	a81b      	add	r0, sp, #108	; 0x6c
 8008e56:	f009 fbbd 	bl	80125d4 <StoreRDMDevice::StoreRDMDevice()>
 8008e5a:	a91b      	add	r1, sp, #108	; 0x6c
 8008e5c:	a872      	add	r0, sp, #456	; 0x1c8
 8008e5e:	e037      	b.n	8008ed0 <main+0x390>
 8008e60:	08018bf7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, fp, pc}
 8008e64:	08018c00 	stmdaeq	r1, {sl, fp, pc}
 8008e68:	08018d7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, sl, fp, pc}
 8008e6c:	40011000 	andmi	r1, r1, r0
 8008e70:	08018c0c 	stmdaeq	r1, {r2, r3, sl, fp, pc}
 8008e74:	08018cb8 	stmdaeq	r1, {r3, r4, r5, r7, sl, fp, pc}
 8008e78:	2001d8ac 	andcs	sp, r1, ip, lsr #17
 8008e7c:	0801b5dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, sl, ip, sp, pc}
 8008e80:	0801b5cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sl, ip, sp, pc}
 8008e84:	08018c42 	stmdaeq	r1, {r1, r6, sl, fp, pc}
 8008e88:	08018c52 	stmdaeq	r1, {r1, r4, r6, sl, fp, pc}
 8008e8c:	08018c4b 	stmdaeq	r1, {r0, r1, r3, r6, sl, fp, pc}
 8008e90:	08019f7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}
 8008e94:	08018ccc 	stmdaeq	r1, {r2, r3, r6, r7, sl, fp, pc}
 8008e98:	08018d81 	stmdaeq	r1, {r0, r7, r8, sl, fp, pc}
 8008e9c:	08018d14 	stmdaeq	r1, {r2, r4, r8, sl, fp, pc}
 8008ea0:	2000c9a4 	andcs	ip, r0, r4, lsr #19
 8008ea4:	0801a43c 	stmdaeq	r1, {r2, r3, r4, r5, sl, sp, pc}
 8008ea8:	08018d00 	stmdaeq	r1, {r8, sl, fp, pc}
 8008eac:	2000c73c 	andcs	ip, r0, ip, lsr r7
 8008eb0:	2000c9ac 	andcs	ip, r0, ip, lsr #19
 8008eb4:	08018c65 	stmdaeq	r1, {r0, r2, r5, r6, sl, fp, pc}
 8008eb8:	08018c7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, sl, fp, pc}
 8008ebc:	08018d2c 	stmdaeq	r1, {r2, r3, r5, r8, sl, fp, pc}
 8008ec0:	2001d99c 	mulcs	r1, ip, r9
 8008ec4:	2000c86b 	andcs	ip, r0, fp, ror #16
 8008ec8:	06010100 	streq	r0, [r1], -r0, lsl #2
 8008ecc:	08018d6c 	stmdaeq	r1, {r2, r3, r5, r6, r8, sl, fp, pc}
 8008ed0:	f006 f884 	bl	800efdc <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 8008ed4:	a872      	add	r0, sp, #456	; 0x1c8
 8008ed6:	f006 f893 	bl	800f000 <RDMDeviceParams::Load()>
 8008eda:	b130      	cbz	r0, 8008eea <main+0x3aa>
 8008edc:	a872      	add	r0, sp, #456	; 0x1c8
 8008ede:	4629      	mov	r1, r5
 8008ee0:	f006 f899 	bl	800f016 <RDMDeviceParams::Set(RDMDevice*)>
 8008ee4:	a872      	add	r0, sp, #456	; 0x1c8
 8008ee6:	f006 f8cb 	bl	800f080 <RDMDeviceParams::Dump()>
 8008eea:	f50d 6380 	add.w	r3, sp, #1024	; 0x400
 8008eee:	4618      	mov	r0, r3
 8008ef0:	679c      	str	r4, [r3, #120]	; 0x78
 8008ef2:	f005 ff79 	bl	800ede8 <RDMNetDevice::Print()>
 8008ef6:	f20d 40dc 	addw	r0, sp, #1244	; 0x4dc
 8008efa:	f002 f9b9 	bl	800b270 <ArtNet4Node::Print()>
 8008efe:	a895      	add	r0, sp, #596	; 0x254
 8008f00:	f007 f90c 	bl	801011c <PixelDmxConfiguration::Print()>
 8008f04:	f8da 3000 	ldr.w	r3, [sl]
 8008f08:	4642      	mov	r2, r8
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	499e      	ldr	r1, [pc, #632]	; (8009188 <main+0x648>)
 8008f0e:	a87e      	add	r0, sp, #504	; 0x1f8
 8008f10:	f00c f86c 	bl	8014fec <DisplayUdf::SetTitle(char const*, ...)>
 8008f14:	2202      	movs	r2, #2
 8008f16:	a87e      	add	r0, sp, #504	; 0x1f8
 8008f18:	4611      	mov	r1, r2
 8008f1a:	f00c f87a 	bl	8015012 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008f1e:	2206      	movs	r2, #6
 8008f20:	2103      	movs	r1, #3
 8008f22:	a87e      	add	r0, sp, #504	; 0x1f8
 8008f24:	f00c f875 	bl	8015012 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008f28:	2203      	movs	r2, #3
 8008f2a:	2104      	movs	r1, #4
 8008f2c:	a87e      	add	r0, sp, #504	; 0x1f8
 8008f2e:	f00c f870 	bl	8015012 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008f32:	2204      	movs	r2, #4
 8008f34:	2105      	movs	r1, #5
 8008f36:	a87e      	add	r0, sp, #504	; 0x1f8
 8008f38:	f00c f86b 	bl	8015012 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008f3c:	ad66      	add	r5, sp, #408	; 0x198
 8008f3e:	2201      	movs	r2, #1
 8008f40:	2106      	movs	r1, #6
 8008f42:	a87e      	add	r0, sp, #504	; 0x1f8
 8008f44:	f00c f865 	bl	8015012 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008f48:	6828      	ldr	r0, [r5, #0]
 8008f4a:	f007 ff53 	bl	8010df4 <PixelType::GetType(pixel::Type)>
 8008f4e:	4680      	mov	r8, r0
 8008f50:	68a8      	ldr	r0, [r5, #8]
 8008f52:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8008f56:	f8d5 b020 	ldr.w	fp, [r5, #32]
 8008f5a:	f007 ffa3 	bl	8010ea4 <PixelType::GetMap(pixel::Map)>
 8008f5e:	4643      	mov	r3, r8
 8008f60:	2107      	movs	r1, #7
 8008f62:	4a8a      	ldr	r2, [pc, #552]	; (800918c <main+0x64c>)
 8008f64:	e9cd b001 	strd	fp, r0, [sp, #4]
 8008f68:	f8cd a000 	str.w	sl, [sp]
 8008f6c:	a87e      	add	r0, sp, #504	; 0x1f8
 8008f6e:	f7ff fc3f 	bl	80087f0 <Display::Printf(unsigned char, char const*, ...)>
 8008f72:	a811      	add	r0, sp, #68	; 0x44
 8008f74:	f009 fa38 	bl	80123e8 <StoreDisplayUdf::StoreDisplayUdf()>
 8008f78:	ab51      	add	r3, sp, #324	; 0x144
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	a911      	add	r1, sp, #68	; 0x44
 8008f7e:	9305      	str	r3, [sp, #20]
 8008f80:	f00c f9c8 	bl	8015314 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8008f84:	9805      	ldr	r0, [sp, #20]
 8008f86:	f00c f9d2 	bl	801532e <DisplayUdfParams::Load()>
 8008f8a:	b130      	cbz	r0, 8008f9a <main+0x45a>
 8008f8c:	9805      	ldr	r0, [sp, #20]
 8008f8e:	a97e      	add	r1, sp, #504	; 0x1f8
 8008f90:	f00c fb05 	bl	801559e <DisplayUdfParams::Set(DisplayUdf*)>
 8008f94:	9805      	ldr	r0, [sp, #20]
 8008f96:	f00c fb35 	bl	8015604 <DisplayUdfParams::Dump()>
 8008f9a:	f50d 619c 	add.w	r1, sp, #1248	; 0x4e0
 8008f9e:	a87e      	add	r0, sp, #504	; 0x1f8
 8008fa0:	f00c fbec 	bl	801577c <DisplayUdf::Show(ArtNetNode*)>
 8008fa4:	b16e      	cbz	r6, 8008fc2 <main+0x482>
 8008fa6:	2106      	movs	r1, #6
 8008fa8:	a87e      	add	r0, sp, #504	; 0x1f8
 8008faa:	f7ff fc1b 	bl	80087e4 <Display::ClearLine(unsigned char)>
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f008 f86a 	bl	8011088 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8008fb4:	2106      	movs	r1, #6
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	4a75      	ldr	r2, [pc, #468]	; (8009190 <main+0x650>)
 8008fba:	9600      	str	r6, [sp, #0]
 8008fbc:	a87e      	add	r0, sp, #504	; 0x1f8
 8008fbe:	f7ff fc17 	bl	80087f0 <Display::Printf(unsigned char, char const*, ...)>
 8008fc2:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 8008fc6:	2203      	movs	r2, #3
 8008fc8:	2100      	movs	r1, #0
 8008fca:	f893 38fa 	ldrb.w	r3, [r3, #2298]	; 0x8fa
 8008fce:	a835      	add	r0, sp, #212	; 0xd4
 8008fd0:	f000 ff10 	bl	8009df4 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 8008fd4:	f1a4 0328 	sub.w	r3, r4, #40	; 0x28
 8008fd8:	4618      	mov	r0, r3
 8008fda:	9306      	str	r3, [sp, #24]
 8008fdc:	f009 fb32 	bl	8012644 <StoreRemoteConfig::StoreRemoteConfig()>
 8008fe0:	ab3e      	add	r3, sp, #248	; 0xf8
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	9906      	ldr	r1, [sp, #24]
 8008fe6:	9305      	str	r3, [sp, #20]
 8008fe8:	f001 f9fe 	bl	800a3e8 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8008fec:	9805      	ldr	r0, [sp, #20]
 8008fee:	f001 fa05 	bl	800a3fc <RemoteConfigParams::Load()>
 8008ff2:	b130      	cbz	r0, 8009002 <main+0x4c2>
 8008ff4:	9805      	ldr	r0, [sp, #20]
 8008ff6:	f001 fb48 	bl	800a68a <RemoteConfigParams::Dump()>
 8008ffa:	9805      	ldr	r0, [sp, #20]
 8008ffc:	a935      	add	r1, sp, #212	; 0xd4
 8008ffe:	f001 fb24 	bl	800a64a <RemoteConfigParams::Set(RemoteConfig*)>
 8009002:	a80c      	add	r0, sp, #48	; 0x30
 8009004:	f009 f96a 	bl	80122dc <SpiFlashStore::Flash()>
 8009008:	2800      	cmp	r0, #0
 800900a:	d1fa      	bne.n	8009002 <main+0x4c2>
 800900c:	4c61      	ldr	r4, [pc, #388]	; (8009194 <main+0x654>)
 800900e:	2303      	movs	r3, #3
 8009010:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8009014:	4960      	ldr	r1, [pc, #384]	; (8009198 <main+0x658>)
 8009016:	a87e      	add	r0, sp, #504	; 0x1f8
 8009018:	f7ff fc3b 	bl	8008892 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 800901c:	f241 51c1 	movw	r1, #5569	; 0x15c1
 8009020:	6820      	ldr	r0, [r4, #0]
 8009022:	f00a fed9 	bl	8013dd8 <Network::Begin(unsigned short)>
 8009026:	4b5d      	ldr	r3, [pc, #372]	; (800919c <main+0x65c>)
 8009028:	4601      	mov	r1, r0
 800902a:	6018      	str	r0, [r3, #0]
 800902c:	4b5c      	ldr	r3, [pc, #368]	; (80091a0 <main+0x660>)
 800902e:	6820      	ldr	r0, [r4, #0]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	f00a fee2 	bl	8013dfa <Network::JoinGroup(int, unsigned int)>
 8009036:	2302      	movs	r3, #2
 8009038:	f248 0280 	movw	r2, #32896	; 0x8080
 800903c:	4959      	ldr	r1, [pc, #356]	; (80091a4 <main+0x664>)
 800903e:	a87e      	add	r0, sp, #504	; 0x1f8
 8009040:	f7ff fc27 	bl	8008892 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009044:	2303      	movs	r3, #3
 8009046:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800904a:	4957      	ldr	r1, [pc, #348]	; (80091a8 <main+0x668>)
 800904c:	a87e      	add	r0, sp, #504	; 0x1f8
 800904e:	f7ff fc20 	bl	8008892 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009052:	f20d 40dc 	addw	r0, sp, #1244	; 0x4dc
 8009056:	f002 f8cb 	bl	800b1f0 <ArtNet4Node::Start()>
 800905a:	f248 0280 	movw	r2, #32896	; 0x8080
 800905e:	2302      	movs	r3, #2
 8009060:	4952      	ldr	r1, [pc, #328]	; (80091ac <main+0x66c>)
 8009062:	a87e      	add	r0, sp, #504	; 0x1f8
 8009064:	f7ff fc15 	bl	8008892 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8009068:	2102      	movs	r1, #2
 800906a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800906e:	f00d feb5 	bl	8016ddc <fwdgt_config>
 8009072:	2801      	cmp	r0, #1
 8009074:	bf0c      	ite	eq
 8009076:	2201      	moveq	r2, #1
 8009078:	2200      	movne	r2, #0
 800907a:	ab09      	add	r3, sp, #36	; 0x24
 800907c:	701a      	strb	r2, [r3, #0]
 800907e:	d101      	bne.n	8009084 <main+0x544>
 8009080:	f00d fe9c 	bl	8016dbc <fwdgt_enable>
 8009084:	4e4a      	ldr	r6, [pc, #296]	; (80091b0 <main+0x670>)
 8009086:	f20d 44cc 	addw	r4, sp, #1228	; 0x4cc
 800908a:	ad7e      	add	r5, sp, #504	; 0x1f8
 800908c:	f00d fe9e 	bl	8016dcc <fwdgt_counter_reload>
 8009090:	f7fe fa72 	bl	8007578 <net_handle>
 8009094:	f20d 40dc 	addw	r0, sp, #1244	; 0x4dc
 8009098:	f002 f8db 	bl	800b252 <ArtNet4Node::Run()>
 800909c:	a835      	add	r0, sp, #212	; 0xd4
 800909e:	f001 f853 	bl	800a148 <RemoteConfig::Run()>
 80090a2:	a80c      	add	r0, sp, #48	; 0x30
 80090a4:	f009 f91a 	bl	80122dc <SpiFlashStore::Flash()>
 80090a8:	f8d9 3000 	ldr.w	r3, [r9]
 80090ac:	b113      	cbz	r3, 80090b4 <main+0x574>
 80090ae:	a80e      	add	r0, sp, #56	; 0x38
 80090b0:	f008 fa0c 	bl	80114cc <PixelPatterns::Run()>
 80090b4:	a80d      	add	r0, sp, #52	; 0x34
 80090b6:	f00a fdeb 	bl	8013c90 <MDNS::Run()>
 80090ba:	4620      	mov	r0, r4
 80090bc:	f005 fe3e 	bl	800ed3c <LLRPDevice::Run()>
 80090c0:	a847      	add	r0, sp, #284	; 0x11c
 80090c2:	f001 fe27 	bl	800ad14 <HttpDaemon::Run()>
 80090c6:	696a      	ldr	r2, [r5, #20]
 80090c8:	b15a      	cbz	r2, 80090e2 <main+0x5a2>
 80090ca:	7c2b      	ldrb	r3, [r5, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d154      	bne.n	800917a <main+0x63a>
 80090d0:	6833      	ldr	r3, [r6, #0]
 80090d2:	6869      	ldr	r1, [r5, #4]
 80090d4:	1a5b      	subs	r3, r3, r1
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d203      	bcs.n	80090e2 <main+0x5a2>
 80090da:	2101      	movs	r1, #1
 80090dc:	a87e      	add	r0, sp, #504	; 0x1f8
 80090de:	f7ff fc01 	bl	80088e4 <Display::SetSleep(bool)>
 80090e2:	9920      	ldr	r1, [sp, #128]	; 0x80
 80090e4:	ab1d      	add	r3, sp, #116	; 0x74
 80090e6:	2900      	cmp	r1, #0
 80090e8:	d0d0      	beq.n	800908c <main+0x54c>
 80090ea:	6832      	ldr	r2, [r6, #0]
 80090ec:	6958      	ldr	r0, [r3, #20]
 80090ee:	1a12      	subs	r2, r2, r0
 80090f0:	4291      	cmp	r1, r2
 80090f2:	d8cb      	bhi.n	800908c <main+0x54c>
 80090f4:	6832      	ldr	r2, [r6, #0]
 80090f6:	615a      	str	r2, [r3, #20]
 80090f8:	691a      	ldr	r2, [r3, #16]
 80090fa:	2a01      	cmp	r2, #1
 80090fc:	f082 0101 	eor.w	r1, r2, #1
 8009100:	6119      	str	r1, [r3, #16]
 8009102:	bf16      	itet	ne
 8009104:	2301      	movne	r3, #1
 8009106:	617a      	streq	r2, [r7, #20]
 8009108:	613b      	strne	r3, [r7, #16]
 800910a:	e7bf      	b.n	800908c <main+0x54c>
 800910c:	2d07      	cmp	r5, #7
 800910e:	d822      	bhi.n	8009156 <main+0x616>
 8009110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009114:	aa5b      	add	r2, sp, #364	; 0x16c
 8009116:	6852      	ldr	r2, [r2, #4]
 8009118:	40ab      	lsls	r3, r5
 800911a:	4393      	bics	r3, r2
 800911c:	d11b      	bne.n	8009156 <main+0x616>
 800911e:	2600      	movs	r6, #0
 8009120:	ab5b      	add	r3, sp, #364	; 0x16c
 8009122:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8009126:	8b5b      	ldrh	r3, [r3, #26]
 8009128:	9305      	str	r3, [sp, #20]
 800912a:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 800912e:	9306      	str	r3, [sp, #24]
 8009130:	b2b3      	uxth	r3, r6
 8009132:	459b      	cmp	fp, r3
 8009134:	eb09 0106 	add.w	r1, r9, r6
 8009138:	d804      	bhi.n	8009144 <main+0x604>
 800913a:	9b07      	ldr	r3, [sp, #28]
 800913c:	eb03 0901 	add.w	r9, r3, r1
 8009140:	3501      	adds	r5, #1
 8009142:	e5dd      	b.n	8008d00 <main+0x1c0>
 8009144:	9a05      	ldr	r2, [sp, #20]
 8009146:	9806      	ldr	r0, [sp, #24]
 8009148:	4413      	add	r3, r2
 800914a:	b29b      	uxth	r3, r3
 800914c:	2201      	movs	r2, #1
 800914e:	f002 fc59 	bl	800ba04 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8009152:	3601      	adds	r6, #1
 8009154:	e7ec      	b.n	8009130 <main+0x5f0>
 8009156:	f109 0904 	add.w	r9, r9, #4
 800915a:	e7f1      	b.n	8009140 <main+0x600>
 800915c:	f803 1b01 	strb.w	r1, [r3], #1
 8009160:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009162:	3101      	adds	r1, #1
 8009164:	6281      	str	r1, [r0, #40]	; 0x28
 8009166:	e61b      	b.n	8008da0 <main+0x260>
 8009168:	462a      	mov	r2, r5
 800916a:	a92c      	add	r1, sp, #176	; 0xb0
 800916c:	f20d 4055 	addw	r0, sp, #1109	; 0x455
 8009170:	f7ff fa47 	bl	8008602 <memcpy>
 8009174:	f88b 5075 	strb.w	r5, [fp, #117]	; 0x75
 8009178:	e654      	b.n	8008e24 <main+0x2e4>
 800917a:	f7ff fbd3 	bl	8008924 <display::timeout::gpio_renew()>
 800917e:	2800      	cmp	r0, #0
 8009180:	d0af      	beq.n	80090e2 <main+0x5a2>
 8009182:	2100      	movs	r1, #0
 8009184:	e7aa      	b.n	80090dc <main+0x59c>
 8009186:	bf00      	nop
 8009188:	08018c8d 	stmdaeq	r1, {r0, r2, r3, r7, sl, fp, pc}
 800918c:	08018ca0 	stmdaeq	r1, {r5, r7, sl, fp, pc}
 8009190:	08018bf1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, r9, fp, pc}
 8009194:	2001d2d4 	ldrdcs	sp, [r1], -r4
 8009198:	0801a45e 	stmdaeq	r1, {r1, r2, r3, r4, r6, sl, sp, pc}
 800919c:	20000000 	andcs	r0, r0, r0
 80091a0:	2000c760 	andcs	ip, r0, r0, ror #14
 80091a4:	0801a44f 	stmdaeq	r1, {r0, r1, r2, r3, r6, sl, sp, pc}
 80091a8:	08019f6c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, sl, fp, ip, pc}
 80091ac:	08019f91 	stmdaeq	r1, {r0, r4, r7, r8, r9, sl, fp, ip, pc}
 80091b0:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4

080091b4 <RDMSoftwareVersion::GetVersion()>:
 80091b4:	4800      	ldr	r0, [pc, #0]	; (80091b8 <RDMSoftwareVersion::GetVersion()+0x4>)
 80091b6:	4770      	bx	lr
 80091b8:	08018e81 	stmdaeq	r1, {r0, r7, r9, sl, fp, pc}

080091bc <RDMSoftwareVersion::GetVersionLength()>:
 80091bc:	2003      	movs	r0, #3
 80091be:	4770      	bx	lr

080091c0 <RDMSoftwareVersion::GetVersionId()>:
 80091c0:	4800      	ldr	r0, [pc, #0]	; (80091c4 <RDMSoftwareVersion::GetVersionId()+0x4>)
 80091c2:	4770      	bx	lr
 80091c4:	63445c74 	movtvs	r5, #19572	; 0x4c74

080091c8 <_itostr>:
 80091c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ca:	0fc7      	lsrs	r7, r0, #31
 80091cc:	b091      	sub	sp, #68	; 0x44
 80091ce:	bf18      	it	ne
 80091d0:	4240      	negne	r0, r0
 80091d2:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 80091d6:	b9c8      	cbnz	r0, 800920c <_itostr+0x44>
 80091d8:	2330      	movs	r3, #48	; 0x30
 80091da:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80091de:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80091e2:	b132      	cbz	r2, 80091f2 <_itostr+0x2a>
 80091e4:	4668      	mov	r0, sp
 80091e6:	2530      	movs	r5, #48	; 0x30
 80091e8:	1ae6      	subs	r6, r4, r3
 80091ea:	4296      	cmp	r6, r2
 80091ec:	da01      	bge.n	80091f2 <_itostr+0x2a>
 80091ee:	4283      	cmp	r3, r0
 80091f0:	d81c      	bhi.n	800922c <_itostr+0x64>
 80091f2:	b117      	cbz	r7, 80091fa <_itostr+0x32>
 80091f4:	222d      	movs	r2, #45	; 0x2d
 80091f6:	f803 2901 	strb.w	r2, [r3], #-1
 80091fa:	3301      	adds	r3, #1
 80091fc:	1ae0      	subs	r0, r4, r3
 80091fe:	3901      	subs	r1, #1
 8009200:	aa10      	add	r2, sp, #64	; 0x40
 8009202:	4293      	cmp	r3, r2
 8009204:	d315      	bcc.n	8009232 <_itostr+0x6a>
 8009206:	3001      	adds	r0, #1
 8009208:	b011      	add	sp, #68	; 0x44
 800920a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800920c:	4623      	mov	r3, r4
 800920e:	250a      	movs	r5, #10
 8009210:	46ec      	mov	ip, sp
 8009212:	fb90 f6f5 	sdiv	r6, r0, r5
 8009216:	fb05 0016 	mls	r0, r5, r6, r0
 800921a:	3030      	adds	r0, #48	; 0x30
 800921c:	f803 0901 	strb.w	r0, [r3], #-1
 8009220:	4630      	mov	r0, r6
 8009222:	2e00      	cmp	r6, #0
 8009224:	d0dd      	beq.n	80091e2 <_itostr+0x1a>
 8009226:	4563      	cmp	r3, ip
 8009228:	d1f3      	bne.n	8009212 <_itostr+0x4a>
 800922a:	e7da      	b.n	80091e2 <_itostr+0x1a>
 800922c:	f803 5901 	strb.w	r5, [r3], #-1
 8009230:	e7da      	b.n	80091e8 <_itostr+0x20>
 8009232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009236:	f801 2f01 	strb.w	r2, [r1, #1]!
 800923a:	e7e1      	b.n	8009200 <_itostr+0x38>

0800923c <_xputch>:
 800923c:	4603      	mov	r3, r0
 800923e:	b410      	push	{r4}
 8009240:	4c08      	ldr	r4, [pc, #32]	; (8009264 <_xputch+0x28>)
 8009242:	68da      	ldr	r2, [r3, #12]
 8009244:	4608      	mov	r0, r1
 8009246:	6821      	ldr	r1, [r4, #0]
 8009248:	3201      	adds	r2, #1
 800924a:	60da      	str	r2, [r3, #12]
 800924c:	b139      	cbz	r1, 800925e <_xputch+0x22>
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	429a      	cmp	r2, r3
 8009252:	da02      	bge.n	800925a <_xputch+0x1e>
 8009254:	1c4b      	adds	r3, r1, #1
 8009256:	6023      	str	r3, [r4, #0]
 8009258:	7008      	strb	r0, [r1, #0]
 800925a:	bc10      	pop	{r4}
 800925c:	4770      	bx	lr
 800925e:	bc10      	pop	{r4}
 8009260:	f00d b85c 	b.w	801631c <console_putc>
 8009264:	200000e8 	andcs	r0, r0, r8, ror #1

08009268 <_format_int>:
 8009268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800926c:	4698      	mov	r8, r3
 800926e:	b091      	sub	sp, #68	; 0x44
 8009270:	ea52 0308 	orrs.w	r3, r2, r8
 8009274:	4606      	mov	r6, r0
 8009276:	4617      	mov	r7, r2
 8009278:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 800927c:	d133      	bne.n	80092e6 <_format_int+0x7e>
 800927e:	2330      	movs	r3, #48	; 0x30
 8009280:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8009284:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8009288:	6833      	ldr	r3, [r6, #0]
 800928a:	07d8      	lsls	r0, r3, #31
 800928c:	d507      	bpl.n	800929e <_format_int+0x36>
 800928e:	466a      	mov	r2, sp
 8009290:	2030      	movs	r0, #48	; 0x30
 8009292:	6871      	ldr	r1, [r6, #4]
 8009294:	1b2f      	subs	r7, r5, r4
 8009296:	428f      	cmp	r7, r1
 8009298:	da01      	bge.n	800929e <_format_int+0x36>
 800929a:	4294      	cmp	r4, r2
 800929c:	d839      	bhi.n	8009312 <_format_int+0xaa>
 800929e:	0699      	lsls	r1, r3, #26
 80092a0:	d507      	bpl.n	80092b2 <_format_int+0x4a>
 80092a2:	466a      	mov	r2, sp
 80092a4:	2030      	movs	r0, #48	; 0x30
 80092a6:	68b1      	ldr	r1, [r6, #8]
 80092a8:	1b2f      	subs	r7, r5, r4
 80092aa:	428f      	cmp	r7, r1
 80092ac:	da01      	bge.n	80092b2 <_format_int+0x4a>
 80092ae:	4294      	cmp	r4, r2
 80092b0:	d832      	bhi.n	8009318 <_format_int+0xb0>
 80092b2:	071a      	lsls	r2, r3, #28
 80092b4:	bf44      	itt	mi
 80092b6:	222d      	movmi	r2, #45	; 0x2d
 80092b8:	f804 2901 	strbmi.w	r2, [r4], #-1
 80092bc:	065b      	lsls	r3, r3, #25
 80092be:	d407      	bmi.n	80092d0 <_format_int+0x68>
 80092c0:	466b      	mov	r3, sp
 80092c2:	2120      	movs	r1, #32
 80092c4:	68b2      	ldr	r2, [r6, #8]
 80092c6:	1b28      	subs	r0, r5, r4
 80092c8:	4290      	cmp	r0, r2
 80092ca:	da01      	bge.n	80092d0 <_format_int+0x68>
 80092cc:	429c      	cmp	r4, r3
 80092ce:	d826      	bhi.n	800931e <_format_int+0xb6>
 80092d0:	1b2d      	subs	r5, r5, r4
 80092d2:	3401      	adds	r4, #1
 80092d4:	ab10      	add	r3, sp, #64	; 0x40
 80092d6:	429c      	cmp	r4, r3
 80092d8:	d324      	bcc.n	8009324 <_format_int+0xbc>
 80092da:	68b3      	ldr	r3, [r6, #8]
 80092dc:	42ab      	cmp	r3, r5
 80092de:	dc27      	bgt.n	8009330 <_format_int+0xc8>
 80092e0:	b011      	add	sp, #68	; 0x44
 80092e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092e6:	462c      	mov	r4, r5
 80092e8:	46e9      	mov	r9, sp
 80092ea:	4638      	mov	r0, r7
 80092ec:	4641      	mov	r1, r8
 80092ee:	220a      	movs	r2, #10
 80092f0:	2300      	movs	r3, #0
 80092f2:	f7fe fe1d 	bl	8007f30 <__aeabi_uldivmod>
 80092f6:	3230      	adds	r2, #48	; 0x30
 80092f8:	f804 2901 	strb.w	r2, [r4], #-1
 80092fc:	463a      	mov	r2, r7
 80092fe:	4643      	mov	r3, r8
 8009300:	2a0a      	cmp	r2, #10
 8009302:	f173 0300 	sbcs.w	r3, r3, #0
 8009306:	4607      	mov	r7, r0
 8009308:	4688      	mov	r8, r1
 800930a:	d3bd      	bcc.n	8009288 <_format_int+0x20>
 800930c:	454c      	cmp	r4, r9
 800930e:	d1ec      	bne.n	80092ea <_format_int+0x82>
 8009310:	e7ba      	b.n	8009288 <_format_int+0x20>
 8009312:	f804 0901 	strb.w	r0, [r4], #-1
 8009316:	e7bd      	b.n	8009294 <_format_int+0x2c>
 8009318:	f804 0901 	strb.w	r0, [r4], #-1
 800931c:	e7c4      	b.n	80092a8 <_format_int+0x40>
 800931e:	f804 1901 	strb.w	r1, [r4], #-1
 8009322:	e7d0      	b.n	80092c6 <_format_int+0x5e>
 8009324:	4630      	mov	r0, r6
 8009326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800932a:	f7ff ff87 	bl	800923c <_xputch>
 800932e:	e7d1      	b.n	80092d4 <_format_int+0x6c>
 8009330:	2120      	movs	r1, #32
 8009332:	4630      	mov	r0, r6
 8009334:	f7ff ff82 	bl	800923c <_xputch>
 8009338:	3501      	adds	r5, #1
 800933a:	e7ce      	b.n	80092da <_format_int+0x72>

0800933c <_format_hex>:
 800933c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800933e:	b091      	sub	sp, #68	; 0x44
 8009340:	4606      	mov	r6, r0
 8009342:	6804      	ldr	r4, [r0, #0]
 8009344:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8009348:	bb61      	cbnz	r1, 80093a4 <_format_hex+0x68>
 800934a:	2330      	movs	r3, #48	; 0x30
 800934c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8009350:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8009354:	07e5      	lsls	r5, r4, #31
 8009356:	d507      	bpl.n	8009368 <_format_hex+0x2c>
 8009358:	4669      	mov	r1, sp
 800935a:	2530      	movs	r5, #48	; 0x30
 800935c:	6870      	ldr	r0, [r6, #4]
 800935e:	1ad7      	subs	r7, r2, r3
 8009360:	4287      	cmp	r7, r0
 8009362:	da01      	bge.n	8009368 <_format_hex+0x2c>
 8009364:	428b      	cmp	r3, r1
 8009366:	d831      	bhi.n	80093cc <_format_hex+0x90>
 8009368:	06a0      	lsls	r0, r4, #26
 800936a:	d507      	bpl.n	800937c <_format_hex+0x40>
 800936c:	4669      	mov	r1, sp
 800936e:	2530      	movs	r5, #48	; 0x30
 8009370:	68b0      	ldr	r0, [r6, #8]
 8009372:	1ad7      	subs	r7, r2, r3
 8009374:	4287      	cmp	r7, r0
 8009376:	da01      	bge.n	800937c <_format_hex+0x40>
 8009378:	428b      	cmp	r3, r1
 800937a:	d82a      	bhi.n	80093d2 <_format_hex+0x96>
 800937c:	0661      	lsls	r1, r4, #25
 800937e:	d407      	bmi.n	8009390 <_format_hex+0x54>
 8009380:	4669      	mov	r1, sp
 8009382:	2420      	movs	r4, #32
 8009384:	68b0      	ldr	r0, [r6, #8]
 8009386:	1ad5      	subs	r5, r2, r3
 8009388:	4285      	cmp	r5, r0
 800938a:	da01      	bge.n	8009390 <_format_hex+0x54>
 800938c:	428b      	cmp	r3, r1
 800938e:	d823      	bhi.n	80093d8 <_format_hex+0x9c>
 8009390:	1ad5      	subs	r5, r2, r3
 8009392:	1c5c      	adds	r4, r3, #1
 8009394:	ab10      	add	r3, sp, #64	; 0x40
 8009396:	429c      	cmp	r4, r3
 8009398:	d321      	bcc.n	80093de <_format_hex+0xa2>
 800939a:	68b3      	ldr	r3, [r6, #8]
 800939c:	429d      	cmp	r5, r3
 800939e:	db24      	blt.n	80093ea <_format_hex+0xae>
 80093a0:	b011      	add	sp, #68	; 0x44
 80093a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093a4:	f014 0f02 	tst.w	r4, #2
 80093a8:	bf0c      	ite	eq
 80093aa:	2757      	moveq	r7, #87	; 0x57
 80093ac:	2737      	movne	r7, #55	; 0x37
 80093ae:	4613      	mov	r3, r2
 80093b0:	466d      	mov	r5, sp
 80093b2:	f001 000f 	and.w	r0, r1, #15
 80093b6:	2809      	cmp	r0, #9
 80093b8:	bf94      	ite	ls
 80093ba:	3030      	addls	r0, #48	; 0x30
 80093bc:	19c0      	addhi	r0, r0, r7
 80093be:	0909      	lsrs	r1, r1, #4
 80093c0:	f803 0901 	strb.w	r0, [r3], #-1
 80093c4:	d0c6      	beq.n	8009354 <_format_hex+0x18>
 80093c6:	42ab      	cmp	r3, r5
 80093c8:	d1f3      	bne.n	80093b2 <_format_hex+0x76>
 80093ca:	e7c3      	b.n	8009354 <_format_hex+0x18>
 80093cc:	f803 5901 	strb.w	r5, [r3], #-1
 80093d0:	e7c5      	b.n	800935e <_format_hex+0x22>
 80093d2:	f803 5901 	strb.w	r5, [r3], #-1
 80093d6:	e7cc      	b.n	8009372 <_format_hex+0x36>
 80093d8:	f803 4901 	strb.w	r4, [r3], #-1
 80093dc:	e7d3      	b.n	8009386 <_format_hex+0x4a>
 80093de:	4630      	mov	r0, r6
 80093e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093e4:	f7ff ff2a 	bl	800923c <_xputch>
 80093e8:	e7d4      	b.n	8009394 <_format_hex+0x58>
 80093ea:	2120      	movs	r1, #32
 80093ec:	4630      	mov	r0, r6
 80093ee:	f7ff ff25 	bl	800923c <_xputch>
 80093f2:	3501      	adds	r5, #1
 80093f4:	e7d1      	b.n	800939a <_format_hex+0x5e>
	...

080093f8 <_vprintf>:
 80093f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fc:	4614      	mov	r4, r2
 80093fe:	2200      	movs	r2, #0
 8009400:	460b      	mov	r3, r1
 8009402:	f04f 0800 	mov.w	r8, #0
 8009406:	b099      	sub	sp, #100	; 0x64
 8009408:	e9cd 2006 	strd	r2, r0, [sp, #24]
 800940c:	af08      	add	r7, sp, #32
 800940e:	7819      	ldrb	r1, [r3, #0]
 8009410:	b919      	cbnz	r1, 800941a <_vprintf+0x22>
 8009412:	9806      	ldr	r0, [sp, #24]
 8009414:	b019      	add	sp, #100	; 0x64
 8009416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941a:	2925      	cmp	r1, #37	; 0x25
 800941c:	f103 0601 	add.w	r6, r3, #1
 8009420:	d004      	beq.n	800942c <_vprintf+0x34>
 8009422:	a803      	add	r0, sp, #12
 8009424:	f7ff ff0a 	bl	800923c <_xputch>
 8009428:	4633      	mov	r3, r6
 800942a:	e7f0      	b.n	800940e <_vprintf+0x16>
 800942c:	2200      	movs	r2, #0
 800942e:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8009432:	9205      	str	r2, [sp, #20]
 8009434:	785a      	ldrb	r2, [r3, #1]
 8009436:	2a30      	cmp	r2, #48	; 0x30
 8009438:	d129      	bne.n	800948e <_vprintf+0x96>
 800943a:	2220      	movs	r2, #32
 800943c:	9203      	str	r2, [sp, #12]
 800943e:	1c9e      	adds	r6, r3, #2
 8009440:	2200      	movs	r2, #0
 8009442:	4635      	mov	r5, r6
 8009444:	4613      	mov	r3, r2
 8009446:	f04f 0c0a 	mov.w	ip, #10
 800944a:	7829      	ldrb	r1, [r5, #0]
 800944c:	462e      	mov	r6, r5
 800944e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8009452:	2809      	cmp	r0, #9
 8009454:	f105 0501 	add.w	r5, r5, #1
 8009458:	d91d      	bls.n	8009496 <_vprintf+0x9e>
 800945a:	b12a      	cbz	r2, 8009468 <_vprintf+0x70>
 800945c:	9305      	str	r3, [sp, #20]
 800945e:	b11b      	cbz	r3, 8009468 <_vprintf+0x70>
 8009460:	9b03      	ldr	r3, [sp, #12]
 8009462:	f043 0310 	orr.w	r3, r3, #16
 8009466:	9303      	str	r3, [sp, #12]
 8009468:	292e      	cmp	r1, #46	; 0x2e
 800946a:	d123      	bne.n	80094b4 <_vprintf+0xbc>
 800946c:	7873      	ldrb	r3, [r6, #1]
 800946e:	2b2a      	cmp	r3, #42	; 0x2a
 8009470:	d015      	beq.n	800949e <_vprintf+0xa6>
 8009472:	2100      	movs	r1, #0
 8009474:	250a      	movs	r5, #10
 8009476:	460a      	mov	r2, r1
 8009478:	1c70      	adds	r0, r6, #1
 800947a:	7803      	ldrb	r3, [r0, #0]
 800947c:	4606      	mov	r6, r0
 800947e:	3b30      	subs	r3, #48	; 0x30
 8009480:	2b09      	cmp	r3, #9
 8009482:	f100 0001 	add.w	r0, r0, #1
 8009486:	d959      	bls.n	800953c <_vprintf+0x144>
 8009488:	b181      	cbz	r1, 80094ac <_vprintf+0xb4>
 800948a:	9204      	str	r2, [sp, #16]
 800948c:	e00e      	b.n	80094ac <_vprintf+0xb4>
 800948e:	2a2d      	cmp	r2, #45	; 0x2d
 8009490:	d1d6      	bne.n	8009440 <_vprintf+0x48>
 8009492:	2240      	movs	r2, #64	; 0x40
 8009494:	e7d2      	b.n	800943c <_vprintf+0x44>
 8009496:	2201      	movs	r2, #1
 8009498:	fb0c 0303 	mla	r3, ip, r3, r0
 800949c:	e7d5      	b.n	800944a <_vprintf+0x52>
 800949e:	f854 3b04 	ldr.w	r3, [r4], #4
 80094a2:	3602      	adds	r6, #2
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	bfb8      	it	lt
 80094a8:	425b      	neglt	r3, r3
 80094aa:	9304      	str	r3, [sp, #16]
 80094ac:	9b03      	ldr	r3, [sp, #12]
 80094ae:	f043 0301 	orr.w	r3, r3, #1
 80094b2:	9303      	str	r3, [sp, #12]
 80094b4:	7833      	ldrb	r3, [r6, #0]
 80094b6:	2b6c      	cmp	r3, #108	; 0x6c
 80094b8:	bf04      	itt	eq
 80094ba:	9b03      	ldreq	r3, [sp, #12]
 80094bc:	3601      	addeq	r6, #1
 80094be:	7831      	ldrb	r1, [r6, #0]
 80094c0:	bf04      	itt	eq
 80094c2:	f043 0304 	orreq.w	r3, r3, #4
 80094c6:	9303      	streq	r3, [sp, #12]
 80094c8:	2958      	cmp	r1, #88	; 0x58
 80094ca:	f000 8171 	beq.w	80097b0 <_vprintf+0x3b8>
 80094ce:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	2a15      	cmp	r2, #21
 80094d6:	d8a4      	bhi.n	8009422 <_vprintf+0x2a>
 80094d8:	2b15      	cmp	r3, #21
 80094da:	d8a2      	bhi.n	8009422 <_vprintf+0x2a>
 80094dc:	a201      	add	r2, pc, #4	; (adr r2, 80094e4 <_vprintf+0xec>)
 80094de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e2:	bf00      	nop
 80094e4:	08009545 	stmdaeq	r0, {r0, r2, r6, r8, sl, ip, pc}
 80094e8:	08009557 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, sl, ip, pc}
 80094ec:	08009423 	stmdaeq	r0, {r0, r1, r5, sl, ip, pc}
 80094f0:	0800958d 	stmdaeq	r0, {r0, r2, r3, r7, r8, sl, ip, pc}
 80094f4:	08009423 	stmdaeq	r0, {r0, r1, r5, sl, ip, pc}
 80094f8:	08009423 	stmdaeq	r0, {r0, r1, r5, sl, ip, pc}
 80094fc:	08009557 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, sl, ip, pc}
 8009500:	08009423 	stmdaeq	r0, {r0, r1, r5, sl, ip, pc}
 8009504:	08009423 	stmdaeq	r0, {r0, r1, r5, sl, ip, pc}
 8009508:	08009423 	stmdaeq	r0, {r0, r1, r5, sl, ip, pc}
 800950c:	08009423 	stmdaeq	r0, {r0, r1, r5, sl, ip, pc}
 8009510:	08009423 	stmdaeq	r0, {r0, r1, r5, sl, ip, pc}
 8009514:	08009423 	stmdaeq	r0, {r0, r1, r5, sl, ip, pc}
 8009518:	080096f3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r9, sl, ip, pc}
 800951c:	08009423 	stmdaeq	r0, {r0, r1, r5, sl, ip, pc}
 8009520:	08009423 	stmdaeq	r0, {r0, r1, r5, sl, ip, pc}
 8009524:	0800971b 	stmdaeq	r0, {r0, r1, r3, r4, r8, r9, sl, ip, pc}
 8009528:	08009423 	stmdaeq	r0, {r0, r1, r5, sl, ip, pc}
 800952c:	08009791 	stmdaeq	r0, {r0, r4, r7, r8, r9, sl, ip, pc}
 8009530:	08009423 	stmdaeq	r0, {r0, r1, r5, sl, ip, pc}
 8009534:	08009423 	stmdaeq	r0, {r0, r1, r5, sl, ip, pc}
 8009538:	080097b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, r9, sl, ip, pc}
 800953c:	2101      	movs	r1, #1
 800953e:	fb05 3202 	mla	r2, r5, r2, r3
 8009542:	e79a      	b.n	800947a <_vprintf+0x82>
 8009544:	4625      	mov	r5, r4
 8009546:	a803      	add	r0, sp, #12
 8009548:	f855 1b04 	ldr.w	r1, [r5], #4
 800954c:	f7ff fe76 	bl	800923c <_xputch>
 8009550:	462c      	mov	r4, r5
 8009552:	3601      	adds	r6, #1
 8009554:	e768      	b.n	8009428 <_vprintf+0x30>
 8009556:	9903      	ldr	r1, [sp, #12]
 8009558:	074d      	lsls	r5, r1, #29
 800955a:	bf51      	iteee	pl
 800955c:	4625      	movpl	r5, r4
 800955e:	3407      	addmi	r4, #7
 8009560:	f024 0407 	bicmi.w	r4, r4, #7
 8009564:	4625      	movmi	r5, r4
 8009566:	bf55      	itete	pl
 8009568:	f855 2b04 	ldrpl.w	r2, [r5], #4
 800956c:	6863      	ldrmi	r3, [r4, #4]
 800956e:	17d3      	asrpl	r3, r2, #31
 8009570:	f855 2b08 	ldrmi.w	r2, [r5], #8
 8009574:	2b00      	cmp	r3, #0
 8009576:	da05      	bge.n	8009584 <_vprintf+0x18c>
 8009578:	f041 0108 	orr.w	r1, r1, #8
 800957c:	4252      	negs	r2, r2
 800957e:	9103      	str	r1, [sp, #12]
 8009580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8009584:	a803      	add	r0, sp, #12
 8009586:	f7ff fe6f 	bl	8009268 <_format_int>
 800958a:	e7e1      	b.n	8009550 <_vprintf+0x158>
 800958c:	3407      	adds	r4, #7
 800958e:	f024 0507 	bic.w	r5, r4, #7
 8009592:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8009596:	f7fe fad1 	bl	8007b3c <__aeabi_d2f>
 800959a:	9b03      	ldr	r3, [sp, #12]
 800959c:	4641      	mov	r1, r8
 800959e:	07dc      	lsls	r4, r3, #31
 80095a0:	bf54      	ite	pl
 80095a2:	f04f 0a06 	movpl.w	sl, #6
 80095a6:	f8dd a010 	ldrmi.w	sl, [sp, #16]
 80095aa:	4681      	mov	r9, r0
 80095ac:	f7fe fc72 	bl	8007e94 <__aeabi_fcmplt>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d063      	beq.n	800967c <_vprintf+0x284>
 80095b4:	232d      	movs	r3, #45	; 0x2d
 80095b6:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 80095ba:	f88d 3020 	strb.w	r3, [sp, #32]
 80095be:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
 80095c2:	4648      	mov	r0, r9
 80095c4:	f7fe fc8e 	bl	8007ee4 <__aeabi_f2iz>
 80095c8:	4659      	mov	r1, fp
 80095ca:	2200      	movs	r2, #0
 80095cc:	4604      	mov	r4, r0
 80095ce:	f7ff fdfb 	bl	80091c8 <_itostr>
 80095d2:	eb0b 0200 	add.w	r2, fp, r0
 80095d6:	e9cd 2000 	strd	r2, r0, [sp]
 80095da:	4620      	mov	r0, r4
 80095dc:	f7fe fbb8 	bl	8007d50 <__aeabi_i2f>
 80095e0:	4601      	mov	r1, r0
 80095e2:	4648      	mov	r0, r9
 80095e4:	f7fe fafe 	bl	8007be4 <__aeabi_fsub>
 80095e8:	222e      	movs	r2, #46	; 0x2e
 80095ea:	4601      	mov	r1, r0
 80095ec:	200a      	movs	r0, #10
 80095ee:	9b00      	ldr	r3, [sp, #0]
 80095f0:	f10a 0901 	add.w	r9, sl, #1
 80095f4:	1c5c      	adds	r4, r3, #1
 80095f6:	9b01      	ldr	r3, [sp, #4]
 80095f8:	f80b 2003 	strb.w	r2, [fp, r3]
 80095fc:	4603      	mov	r3, r0
 80095fe:	f1ba 0f00 	cmp.w	sl, #0
 8009602:	dc3d      	bgt.n	8009680 <_vprintf+0x288>
 8009604:	9100      	str	r1, [sp, #0]
 8009606:	f7fe fba3 	bl	8007d50 <__aeabi_i2f>
 800960a:	9900      	ldr	r1, [sp, #0]
 800960c:	f7fe fe66 	bl	80082dc <__aeabi_fmul>
 8009610:	f7fe fc68 	bl	8007ee4 <__aeabi_f2iz>
 8009614:	464a      	mov	r2, r9
 8009616:	4621      	mov	r1, r4
 8009618:	f7ff fdd6 	bl	80091c8 <_itostr>
 800961c:	4404      	add	r4, r0
 800961e:	1be0      	subs	r0, r4, r7
 8009620:	1e44      	subs	r4, r0, #1
 8009622:	5d3b      	ldrb	r3, [r7, r4]
 8009624:	193a      	adds	r2, r7, r4
 8009626:	2b34      	cmp	r3, #52	; 0x34
 8009628:	d910      	bls.n	800964c <_vprintf+0x254>
 800962a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800962e:	1e53      	subs	r3, r2, #1
 8009630:	292e      	cmp	r1, #46	; 0x2e
 8009632:	d02c      	beq.n	800968e <_vprintf+0x296>
 8009634:	469c      	mov	ip, r3
 8009636:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800963a:	4663      	mov	r3, ip
 800963c:	f81c 1901 	ldrb.w	r1, [ip], #-1
 8009640:	2939      	cmp	r1, #57	; 0x39
 8009642:	d021      	beq.n	8009688 <_vprintf+0x290>
 8009644:	292e      	cmp	r1, #46	; 0x2e
 8009646:	d022      	beq.n	800968e <_vprintf+0x296>
 8009648:	3101      	adds	r1, #1
 800964a:	7019      	strb	r1, [r3, #0]
 800964c:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8009650:	446b      	add	r3, sp
 8009652:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 8009656:	2b2e      	cmp	r3, #46	; 0x2e
 8009658:	bf08      	it	eq
 800965a:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 800965e:	46a1      	mov	r9, r4
 8009660:	9b05      	ldr	r3, [sp, #20]
 8009662:	4599      	cmp	r9, r3
 8009664:	db3e      	blt.n	80096e4 <_vprintf+0x2ec>
 8009666:	46b9      	mov	r9, r7
 8009668:	2c00      	cmp	r4, #0
 800966a:	f77f af71 	ble.w	8009550 <_vprintf+0x158>
 800966e:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009672:	a803      	add	r0, sp, #12
 8009674:	f7ff fde2 	bl	800923c <_xputch>
 8009678:	3c01      	subs	r4, #1
 800967a:	e7f5      	b.n	8009668 <_vprintf+0x270>
 800967c:	46bb      	mov	fp, r7
 800967e:	e7a0      	b.n	80095c2 <_vprintf+0x1ca>
 8009680:	4358      	muls	r0, r3
 8009682:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009686:	e7ba      	b.n	80095fe <_vprintf+0x206>
 8009688:	f88c e001 	strb.w	lr, [ip, #1]
 800968c:	e7d5      	b.n	800963a <_vprintf+0x242>
 800968e:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8009692:	3b01      	subs	r3, #1
 8009694:	7819      	ldrb	r1, [r3, #0]
 8009696:	2939      	cmp	r1, #57	; 0x39
 8009698:	d112      	bne.n	80096c0 <_vprintf+0x2c8>
 800969a:	42bb      	cmp	r3, r7
 800969c:	d20d      	bcs.n	80096ba <_vprintf+0x2c2>
 800969e:	1c5c      	adds	r4, r3, #1
 80096a0:	1c99      	adds	r1, r3, #2
 80096a2:	428c      	cmp	r4, r1
 80096a4:	eba2 0203 	sub.w	r2, r2, r3
 80096a8:	d913      	bls.n	80096d2 <_vprintf+0x2da>
 80096aa:	4619      	mov	r1, r3
 80096ac:	441a      	add	r2, r3
 80096ae:	428a      	cmp	r2, r1
 80096b0:	d10b      	bne.n	80096ca <_vprintf+0x2d2>
 80096b2:	2231      	movs	r2, #49	; 0x31
 80096b4:	4604      	mov	r4, r0
 80096b6:	705a      	strb	r2, [r3, #1]
 80096b8:	e7c8      	b.n	800964c <_vprintf+0x254>
 80096ba:	f803 c901 	strb.w	ip, [r3], #-1
 80096be:	e7e9      	b.n	8009694 <_vprintf+0x29c>
 80096c0:	42bb      	cmp	r3, r7
 80096c2:	d3ec      	bcc.n	800969e <_vprintf+0x2a6>
 80096c4:	292d      	cmp	r1, #45	; 0x2d
 80096c6:	d0ea      	beq.n	800969e <_vprintf+0x2a6>
 80096c8:	e7be      	b.n	8009648 <_vprintf+0x250>
 80096ca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80096ce:	704c      	strb	r4, [r1, #1]
 80096d0:	e7ed      	b.n	80096ae <_vprintf+0x2b6>
 80096d2:	4414      	add	r4, r2
 80096d4:	440a      	add	r2, r1
 80096d6:	428a      	cmp	r2, r1
 80096d8:	d0eb      	beq.n	80096b2 <_vprintf+0x2ba>
 80096da:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
 80096de:	f802 cd01 	strb.w	ip, [r2, #-1]!
 80096e2:	e7f8      	b.n	80096d6 <_vprintf+0x2de>
 80096e4:	2120      	movs	r1, #32
 80096e6:	a803      	add	r0, sp, #12
 80096e8:	f7ff fda8 	bl	800923c <_xputch>
 80096ec:	f109 0901 	add.w	r9, r9, #1
 80096f0:	e7b6      	b.n	8009660 <_vprintf+0x268>
 80096f2:	2308      	movs	r3, #8
 80096f4:	4625      	mov	r5, r4
 80096f6:	9305      	str	r3, [sp, #20]
 80096f8:	2320      	movs	r3, #32
 80096fa:	2130      	movs	r1, #48	; 0x30
 80096fc:	f855 4b04 	ldr.w	r4, [r5], #4
 8009700:	a803      	add	r0, sp, #12
 8009702:	9303      	str	r3, [sp, #12]
 8009704:	f7ff fd9a 	bl	800923c <_xputch>
 8009708:	2178      	movs	r1, #120	; 0x78
 800970a:	a803      	add	r0, sp, #12
 800970c:	f7ff fd96 	bl	800923c <_xputch>
 8009710:	4621      	mov	r1, r4
 8009712:	a803      	add	r0, sp, #12
 8009714:	f7ff fe12 	bl	800933c <_format_hex>
 8009718:	e71a      	b.n	8009550 <_vprintf+0x158>
 800971a:	4625      	mov	r5, r4
 800971c:	2400      	movs	r4, #0
 800971e:	f855 9b04 	ldr.w	r9, [r5], #4
 8009722:	f819 3004 	ldrb.w	r3, [r9, r4]
 8009726:	b993      	cbnz	r3, 800974e <_vprintf+0x356>
 8009728:	9b03      	ldr	r3, [sp, #12]
 800972a:	07d9      	lsls	r1, r3, #31
 800972c:	d503      	bpl.n	8009736 <_vprintf+0x33e>
 800972e:	9b04      	ldr	r3, [sp, #16]
 8009730:	429c      	cmp	r4, r3
 8009732:	bfa8      	it	ge
 8009734:	461c      	movge	r4, r3
 8009736:	9b03      	ldr	r3, [sp, #12]
 8009738:	f104 0a01 	add.w	sl, r4, #1
 800973c:	065a      	lsls	r2, r3, #25
 800973e:	d403      	bmi.n	8009748 <_vprintf+0x350>
 8009740:	9b05      	ldr	r3, [sp, #20]
 8009742:	429c      	cmp	r4, r3
 8009744:	db05      	blt.n	8009752 <_vprintf+0x35a>
 8009746:	4654      	mov	r4, sl
 8009748:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800974c:	e00d      	b.n	800976a <_vprintf+0x372>
 800974e:	3401      	adds	r4, #1
 8009750:	e7e7      	b.n	8009722 <_vprintf+0x32a>
 8009752:	2120      	movs	r1, #32
 8009754:	a803      	add	r0, sp, #12
 8009756:	f7ff fd71 	bl	800923c <_xputch>
 800975a:	4654      	mov	r4, sl
 800975c:	e7eb      	b.n	8009736 <_vprintf+0x33e>
 800975e:	a803      	add	r0, sp, #12
 8009760:	f7ff fd6c 	bl	800923c <_xputch>
 8009764:	9b04      	ldr	r3, [sp, #16]
 8009766:	3b01      	subs	r3, #1
 8009768:	9304      	str	r3, [sp, #16]
 800976a:	9b03      	ldr	r3, [sp, #12]
 800976c:	07db      	lsls	r3, r3, #31
 800976e:	d501      	bpl.n	8009774 <_vprintf+0x37c>
 8009770:	9b04      	ldr	r3, [sp, #16]
 8009772:	b11b      	cbz	r3, 800977c <_vprintf+0x384>
 8009774:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8009778:	2900      	cmp	r1, #0
 800977a:	d1f0      	bne.n	800975e <_vprintf+0x366>
 800977c:	9b05      	ldr	r3, [sp, #20]
 800977e:	429c      	cmp	r4, r3
 8009780:	f6bf aee6 	bge.w	8009550 <_vprintf+0x158>
 8009784:	2120      	movs	r1, #32
 8009786:	a803      	add	r0, sp, #12
 8009788:	f7ff fd58 	bl	800923c <_xputch>
 800978c:	3401      	adds	r4, #1
 800978e:	e7f5      	b.n	800977c <_vprintf+0x384>
 8009790:	9b03      	ldr	r3, [sp, #12]
 8009792:	f013 0304 	ands.w	r3, r3, #4
 8009796:	bf1d      	ittte	ne
 8009798:	3407      	addne	r4, #7
 800979a:	f024 0407 	bicne.w	r4, r4, #7
 800979e:	4625      	movne	r5, r4
 80097a0:	4625      	moveq	r5, r4
 80097a2:	bf1a      	itte	ne
 80097a4:	f855 2b08 	ldrne.w	r2, [r5], #8
 80097a8:	6863      	ldrne	r3, [r4, #4]
 80097aa:	f855 2b04 	ldreq.w	r2, [r5], #4
 80097ae:	e6e9      	b.n	8009584 <_vprintf+0x18c>
 80097b0:	9b03      	ldr	r3, [sp, #12]
 80097b2:	f043 0302 	orr.w	r3, r3, #2
 80097b6:	9303      	str	r3, [sp, #12]
 80097b8:	4625      	mov	r5, r4
 80097ba:	f855 1b04 	ldr.w	r1, [r5], #4
 80097be:	e7a8      	b.n	8009712 <_vprintf+0x31a>

080097c0 <printf>:
 80097c0:	b40f      	push	{r0, r1, r2, r3}
 80097c2:	b507      	push	{r0, r1, r2, lr}
 80097c4:	aa04      	add	r2, sp, #16
 80097c6:	f852 1b04 	ldr.w	r1, [r2], #4
 80097ca:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80097ce:	9201      	str	r2, [sp, #4]
 80097d0:	f7ff fe12 	bl	80093f8 <_vprintf>
 80097d4:	b003      	add	sp, #12
 80097d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80097da:	b004      	add	sp, #16
 80097dc:	4770      	bx	lr
	...

080097e0 <sprintf>:
 80097e0:	b40e      	push	{r1, r2, r3}
 80097e2:	b517      	push	{r0, r1, r2, r4, lr}
 80097e4:	4c09      	ldr	r4, [pc, #36]	; (800980c <sprintf+0x2c>)
 80097e6:	aa05      	add	r2, sp, #20
 80097e8:	f852 1b04 	ldr.w	r1, [r2], #4
 80097ec:	6020      	str	r0, [r4, #0]
 80097ee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80097f2:	9201      	str	r2, [sp, #4]
 80097f4:	f7ff fe00 	bl	80093f8 <_vprintf>
 80097f8:	2300      	movs	r3, #0
 80097fa:	6822      	ldr	r2, [r4, #0]
 80097fc:	6023      	str	r3, [r4, #0]
 80097fe:	7013      	strb	r3, [r2, #0]
 8009800:	b003      	add	sp, #12
 8009802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009806:	b003      	add	sp, #12
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	200000e8 	andcs	r0, r0, r8, ror #1

08009810 <snprintf>:
 8009810:	b40c      	push	{r2, r3}
 8009812:	460b      	mov	r3, r1
 8009814:	b513      	push	{r0, r1, r4, lr}
 8009816:	4c09      	ldr	r4, [pc, #36]	; (800983c <snprintf+0x2c>)
 8009818:	aa04      	add	r2, sp, #16
 800981a:	f852 1b04 	ldr.w	r1, [r2], #4
 800981e:	6020      	str	r0, [r4, #0]
 8009820:	4618      	mov	r0, r3
 8009822:	9201      	str	r2, [sp, #4]
 8009824:	f7ff fde8 	bl	80093f8 <_vprintf>
 8009828:	2300      	movs	r3, #0
 800982a:	6822      	ldr	r2, [r4, #0]
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	7013      	strb	r3, [r2, #0]
 8009830:	b002      	add	sp, #8
 8009832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009836:	b002      	add	sp, #8
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	200000e8 	andcs	r0, r0, r8, ror #1

08009840 <vsnprintf>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	4605      	mov	r5, r0
 8009844:	4c05      	ldr	r4, [pc, #20]	; (800985c <vsnprintf+0x1c>)
 8009846:	4608      	mov	r0, r1
 8009848:	4611      	mov	r1, r2
 800984a:	461a      	mov	r2, r3
 800984c:	6025      	str	r5, [r4, #0]
 800984e:	f7ff fdd3 	bl	80093f8 <_vprintf>
 8009852:	2300      	movs	r3, #0
 8009854:	6822      	ldr	r2, [r4, #0]
 8009856:	6023      	str	r3, [r4, #0]
 8009858:	7013      	strb	r3, [r2, #0]
 800985a:	bd38      	pop	{r3, r4, r5, pc}
 800985c:	200000e8 	andcs	r0, r0, r8, ror #1

08009860 <__udivmoddi4>:
 8009860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009864:	9e08      	ldr	r6, [sp, #32]
 8009866:	460d      	mov	r5, r1
 8009868:	4604      	mov	r4, r0
 800986a:	468e      	mov	lr, r1
 800986c:	2b00      	cmp	r3, #0
 800986e:	d14c      	bne.n	800990a <__udivmoddi4+0xaa>
 8009870:	428a      	cmp	r2, r1
 8009872:	4694      	mov	ip, r2
 8009874:	d967      	bls.n	8009946 <__udivmoddi4+0xe6>
 8009876:	fab2 f382 	clz	r3, r2
 800987a:	b153      	cbz	r3, 8009892 <__udivmoddi4+0x32>
 800987c:	fa02 fc03 	lsl.w	ip, r2, r3
 8009880:	f1c3 0220 	rsb	r2, r3, #32
 8009884:	fa01 fe03 	lsl.w	lr, r1, r3
 8009888:	fa20 f202 	lsr.w	r2, r0, r2
 800988c:	ea42 0e0e 	orr.w	lr, r2, lr
 8009890:	409c      	lsls	r4, r3
 8009892:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009896:	fbbe f1f7 	udiv	r1, lr, r7
 800989a:	fa1f f58c 	uxth.w	r5, ip
 800989e:	fb07 ee11 	mls	lr, r7, r1, lr
 80098a2:	fb01 f005 	mul.w	r0, r1, r5
 80098a6:	0c22      	lsrs	r2, r4, #16
 80098a8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80098ac:	4290      	cmp	r0, r2
 80098ae:	d90a      	bls.n	80098c6 <__udivmoddi4+0x66>
 80098b0:	eb1c 0202 	adds.w	r2, ip, r2
 80098b4:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 80098b8:	f080 8119 	bcs.w	8009aee <__udivmoddi4+0x28e>
 80098bc:	4290      	cmp	r0, r2
 80098be:	f240 8116 	bls.w	8009aee <__udivmoddi4+0x28e>
 80098c2:	3902      	subs	r1, #2
 80098c4:	4462      	add	r2, ip
 80098c6:	1a12      	subs	r2, r2, r0
 80098c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80098cc:	fb07 2210 	mls	r2, r7, r0, r2
 80098d0:	fb00 f505 	mul.w	r5, r0, r5
 80098d4:	b2a4      	uxth	r4, r4
 80098d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80098da:	42a5      	cmp	r5, r4
 80098dc:	d90a      	bls.n	80098f4 <__udivmoddi4+0x94>
 80098de:	eb1c 0404 	adds.w	r4, ip, r4
 80098e2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80098e6:	f080 8104 	bcs.w	8009af2 <__udivmoddi4+0x292>
 80098ea:	42a5      	cmp	r5, r4
 80098ec:	f240 8101 	bls.w	8009af2 <__udivmoddi4+0x292>
 80098f0:	4464      	add	r4, ip
 80098f2:	3802      	subs	r0, #2
 80098f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80098f8:	2100      	movs	r1, #0
 80098fa:	1b64      	subs	r4, r4, r5
 80098fc:	b11e      	cbz	r6, 8009906 <__udivmoddi4+0xa6>
 80098fe:	40dc      	lsrs	r4, r3
 8009900:	2300      	movs	r3, #0
 8009902:	e9c6 4300 	strd	r4, r3, [r6]
 8009906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800990a:	428b      	cmp	r3, r1
 800990c:	d908      	bls.n	8009920 <__udivmoddi4+0xc0>
 800990e:	2e00      	cmp	r6, #0
 8009910:	f000 80ea 	beq.w	8009ae8 <__udivmoddi4+0x288>
 8009914:	2100      	movs	r1, #0
 8009916:	e9c6 0500 	strd	r0, r5, [r6]
 800991a:	4608      	mov	r0, r1
 800991c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009920:	fab3 f183 	clz	r1, r3
 8009924:	2900      	cmp	r1, #0
 8009926:	d148      	bne.n	80099ba <__udivmoddi4+0x15a>
 8009928:	42ab      	cmp	r3, r5
 800992a:	d302      	bcc.n	8009932 <__udivmoddi4+0xd2>
 800992c:	4282      	cmp	r2, r0
 800992e:	f200 80f8 	bhi.w	8009b22 <__udivmoddi4+0x2c2>
 8009932:	1a84      	subs	r4, r0, r2
 8009934:	eb65 0203 	sbc.w	r2, r5, r3
 8009938:	2001      	movs	r0, #1
 800993a:	4696      	mov	lr, r2
 800993c:	2e00      	cmp	r6, #0
 800993e:	d0e2      	beq.n	8009906 <__udivmoddi4+0xa6>
 8009940:	e9c6 4e00 	strd	r4, lr, [r6]
 8009944:	e7df      	b.n	8009906 <__udivmoddi4+0xa6>
 8009946:	b902      	cbnz	r2, 800994a <__udivmoddi4+0xea>
 8009948:	deff      	udf	#255	; 0xff
 800994a:	fab2 f382 	clz	r3, r2
 800994e:	2b00      	cmp	r3, #0
 8009950:	f040 808e 	bne.w	8009a70 <__udivmoddi4+0x210>
 8009954:	1a88      	subs	r0, r1, r2
 8009956:	2101      	movs	r1, #1
 8009958:	0c17      	lsrs	r7, r2, #16
 800995a:	fa1f fe82 	uxth.w	lr, r2
 800995e:	fbb0 f5f7 	udiv	r5, r0, r7
 8009962:	fb07 0015 	mls	r0, r7, r5, r0
 8009966:	0c22      	lsrs	r2, r4, #16
 8009968:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800996c:	fb0e f005 	mul.w	r0, lr, r5
 8009970:	4290      	cmp	r0, r2
 8009972:	d908      	bls.n	8009986 <__udivmoddi4+0x126>
 8009974:	eb1c 0202 	adds.w	r2, ip, r2
 8009978:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800997c:	d202      	bcs.n	8009984 <__udivmoddi4+0x124>
 800997e:	4290      	cmp	r0, r2
 8009980:	f200 80cc 	bhi.w	8009b1c <__udivmoddi4+0x2bc>
 8009984:	4645      	mov	r5, r8
 8009986:	1a12      	subs	r2, r2, r0
 8009988:	fbb2 f0f7 	udiv	r0, r2, r7
 800998c:	fb07 2210 	mls	r2, r7, r0, r2
 8009990:	fb0e fe00 	mul.w	lr, lr, r0
 8009994:	b2a4      	uxth	r4, r4
 8009996:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800999a:	45a6      	cmp	lr, r4
 800999c:	d908      	bls.n	80099b0 <__udivmoddi4+0x150>
 800999e:	eb1c 0404 	adds.w	r4, ip, r4
 80099a2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80099a6:	d202      	bcs.n	80099ae <__udivmoddi4+0x14e>
 80099a8:	45a6      	cmp	lr, r4
 80099aa:	f200 80b4 	bhi.w	8009b16 <__udivmoddi4+0x2b6>
 80099ae:	4610      	mov	r0, r2
 80099b0:	eba4 040e 	sub.w	r4, r4, lr
 80099b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80099b8:	e7a0      	b.n	80098fc <__udivmoddi4+0x9c>
 80099ba:	f1c1 0720 	rsb	r7, r1, #32
 80099be:	408b      	lsls	r3, r1
 80099c0:	fa22 fc07 	lsr.w	ip, r2, r7
 80099c4:	ea4c 0c03 	orr.w	ip, ip, r3
 80099c8:	fa25 fa07 	lsr.w	sl, r5, r7
 80099cc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80099d0:	fbba f8f9 	udiv	r8, sl, r9
 80099d4:	408d      	lsls	r5, r1
 80099d6:	fa20 f307 	lsr.w	r3, r0, r7
 80099da:	fb09 aa18 	mls	sl, r9, r8, sl
 80099de:	fa1f fe8c 	uxth.w	lr, ip
 80099e2:	432b      	orrs	r3, r5
 80099e4:	fa00 f501 	lsl.w	r5, r0, r1
 80099e8:	fb08 f00e 	mul.w	r0, r8, lr
 80099ec:	0c1c      	lsrs	r4, r3, #16
 80099ee:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80099f2:	42a0      	cmp	r0, r4
 80099f4:	fa02 f201 	lsl.w	r2, r2, r1
 80099f8:	d90b      	bls.n	8009a12 <__udivmoddi4+0x1b2>
 80099fa:	eb1c 0404 	adds.w	r4, ip, r4
 80099fe:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8009a02:	f080 8086 	bcs.w	8009b12 <__udivmoddi4+0x2b2>
 8009a06:	42a0      	cmp	r0, r4
 8009a08:	f240 8083 	bls.w	8009b12 <__udivmoddi4+0x2b2>
 8009a0c:	f1a8 0802 	sub.w	r8, r8, #2
 8009a10:	4464      	add	r4, ip
 8009a12:	1a24      	subs	r4, r4, r0
 8009a14:	b298      	uxth	r0, r3
 8009a16:	fbb4 f3f9 	udiv	r3, r4, r9
 8009a1a:	fb09 4413 	mls	r4, r9, r3, r4
 8009a1e:	fb03 fe0e 	mul.w	lr, r3, lr
 8009a22:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8009a26:	45a6      	cmp	lr, r4
 8009a28:	d908      	bls.n	8009a3c <__udivmoddi4+0x1dc>
 8009a2a:	eb1c 0404 	adds.w	r4, ip, r4
 8009a2e:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8009a32:	d26a      	bcs.n	8009b0a <__udivmoddi4+0x2aa>
 8009a34:	45a6      	cmp	lr, r4
 8009a36:	d968      	bls.n	8009b0a <__udivmoddi4+0x2aa>
 8009a38:	3b02      	subs	r3, #2
 8009a3a:	4464      	add	r4, ip
 8009a3c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8009a40:	fba0 9302 	umull	r9, r3, r0, r2
 8009a44:	eba4 040e 	sub.w	r4, r4, lr
 8009a48:	429c      	cmp	r4, r3
 8009a4a:	46c8      	mov	r8, r9
 8009a4c:	469e      	mov	lr, r3
 8009a4e:	d354      	bcc.n	8009afa <__udivmoddi4+0x29a>
 8009a50:	d051      	beq.n	8009af6 <__udivmoddi4+0x296>
 8009a52:	2e00      	cmp	r6, #0
 8009a54:	d067      	beq.n	8009b26 <__udivmoddi4+0x2c6>
 8009a56:	ebb5 0308 	subs.w	r3, r5, r8
 8009a5a:	eb64 040e 	sbc.w	r4, r4, lr
 8009a5e:	40cb      	lsrs	r3, r1
 8009a60:	fa04 f707 	lsl.w	r7, r4, r7
 8009a64:	431f      	orrs	r7, r3
 8009a66:	40cc      	lsrs	r4, r1
 8009a68:	e9c6 7400 	strd	r7, r4, [r6]
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	e74a      	b.n	8009906 <__udivmoddi4+0xa6>
 8009a70:	fa02 fc03 	lsl.w	ip, r2, r3
 8009a74:	f1c3 0020 	rsb	r0, r3, #32
 8009a78:	40c1      	lsrs	r1, r0
 8009a7a:	409d      	lsls	r5, r3
 8009a7c:	fa24 f000 	lsr.w	r0, r4, r0
 8009a80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009a84:	4328      	orrs	r0, r5
 8009a86:	fbb1 f5f7 	udiv	r5, r1, r7
 8009a8a:	fb07 1115 	mls	r1, r7, r5, r1
 8009a8e:	fa1f fe8c 	uxth.w	lr, ip
 8009a92:	0c02      	lsrs	r2, r0, #16
 8009a94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009a98:	fb05 f10e 	mul.w	r1, r5, lr
 8009a9c:	4291      	cmp	r1, r2
 8009a9e:	fa04 f403 	lsl.w	r4, r4, r3
 8009aa2:	d908      	bls.n	8009ab6 <__udivmoddi4+0x256>
 8009aa4:	eb1c 0202 	adds.w	r2, ip, r2
 8009aa8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8009aac:	d22f      	bcs.n	8009b0e <__udivmoddi4+0x2ae>
 8009aae:	4291      	cmp	r1, r2
 8009ab0:	d92d      	bls.n	8009b0e <__udivmoddi4+0x2ae>
 8009ab2:	3d02      	subs	r5, #2
 8009ab4:	4462      	add	r2, ip
 8009ab6:	1a52      	subs	r2, r2, r1
 8009ab8:	fbb2 f1f7 	udiv	r1, r2, r7
 8009abc:	fb07 2211 	mls	r2, r7, r1, r2
 8009ac0:	b280      	uxth	r0, r0
 8009ac2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8009ac6:	fb01 f20e 	mul.w	r2, r1, lr
 8009aca:	4282      	cmp	r2, r0
 8009acc:	d908      	bls.n	8009ae0 <__udivmoddi4+0x280>
 8009ace:	eb1c 0000 	adds.w	r0, ip, r0
 8009ad2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8009ad6:	d216      	bcs.n	8009b06 <__udivmoddi4+0x2a6>
 8009ad8:	4282      	cmp	r2, r0
 8009ada:	d914      	bls.n	8009b06 <__udivmoddi4+0x2a6>
 8009adc:	3902      	subs	r1, #2
 8009ade:	4460      	add	r0, ip
 8009ae0:	1a80      	subs	r0, r0, r2
 8009ae2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8009ae6:	e73a      	b.n	800995e <__udivmoddi4+0xfe>
 8009ae8:	4631      	mov	r1, r6
 8009aea:	4630      	mov	r0, r6
 8009aec:	e70b      	b.n	8009906 <__udivmoddi4+0xa6>
 8009aee:	4671      	mov	r1, lr
 8009af0:	e6e9      	b.n	80098c6 <__udivmoddi4+0x66>
 8009af2:	4610      	mov	r0, r2
 8009af4:	e6fe      	b.n	80098f4 <__udivmoddi4+0x94>
 8009af6:	454d      	cmp	r5, r9
 8009af8:	d2ab      	bcs.n	8009a52 <__udivmoddi4+0x1f2>
 8009afa:	ebb9 0802 	subs.w	r8, r9, r2
 8009afe:	eb63 0e0c 	sbc.w	lr, r3, ip
 8009b02:	3801      	subs	r0, #1
 8009b04:	e7a5      	b.n	8009a52 <__udivmoddi4+0x1f2>
 8009b06:	4641      	mov	r1, r8
 8009b08:	e7ea      	b.n	8009ae0 <__udivmoddi4+0x280>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	e796      	b.n	8009a3c <__udivmoddi4+0x1dc>
 8009b0e:	4645      	mov	r5, r8
 8009b10:	e7d1      	b.n	8009ab6 <__udivmoddi4+0x256>
 8009b12:	46d0      	mov	r8, sl
 8009b14:	e77d      	b.n	8009a12 <__udivmoddi4+0x1b2>
 8009b16:	4464      	add	r4, ip
 8009b18:	3802      	subs	r0, #2
 8009b1a:	e749      	b.n	80099b0 <__udivmoddi4+0x150>
 8009b1c:	3d02      	subs	r5, #2
 8009b1e:	4462      	add	r2, ip
 8009b20:	e731      	b.n	8009986 <__udivmoddi4+0x126>
 8009b22:	4608      	mov	r0, r1
 8009b24:	e70a      	b.n	800993c <__udivmoddi4+0xdc>
 8009b26:	4631      	mov	r1, r6
 8009b28:	e6ed      	b.n	8009906 <__udivmoddi4+0xa6>
 8009b2a:	bf00      	nop

08009b2c <RemoteConfig::HandleList()>:
 8009b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b30:	6801      	ldr	r1, [r0, #0]
 8009b32:	4604      	mov	r4, r0
 8009b34:	2012      	movs	r0, #18
 8009b36:	f04f 080c 	mov.w	r8, #12
 8009b3a:	4a29      	ldr	r2, [pc, #164]	; (8009be0 <RemoteConfig::HandleList()+0xb4>)
 8009b3c:	4b29      	ldr	r3, [pc, #164]	; (8009be4 <RemoteConfig::HandleList()+0xb8>)
 8009b3e:	fb00 2201 	mla	r2, r0, r1, r2
 8009b42:	6860      	ldr	r0, [r4, #4]
 8009b44:	4928      	ldr	r1, [pc, #160]	; (8009be8 <RemoteConfig::HandleList()+0xbc>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	fb08 1100 	mla	r1, r8, r0, r1
 8009b4c:	4e27      	ldr	r6, [pc, #156]	; (8009bec <RemoteConfig::HandleList()+0xc0>)
 8009b4e:	4828      	ldr	r0, [pc, #160]	; (8009bf0 <RemoteConfig::HandleList()+0xc4>)
 8009b50:	695f      	ldr	r7, [r3, #20]
 8009b52:	6835      	ldr	r5, [r6, #0]
 8009b54:	f890 9009 	ldrb.w	r9, [r0, #9]
 8009b58:	b2fb      	uxtb	r3, r7
 8009b5a:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8009b5e:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8009b62:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8009b66:	b089      	sub	sp, #36	; 0x24
 8009b68:	3507      	adds	r5, #7
 8009b6a:	0e3f      	lsrs	r7, r7, #24
 8009b6c:	f1b9 0f00 	cmp.w	r9, #0
 8009b70:	d01d      	beq.n	8009bae <RemoteConfig::HandleList()+0x82>
 8009b72:	3009      	adds	r0, #9
 8009b74:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8009b78:	e9cd 8005 	strd	r8, r0, [sp, #20]
 8009b7c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8009b80:	4628      	mov	r0, r5
 8009b82:	e9cd e701 	strd	lr, r7, [sp, #4]
 8009b86:	4a1b      	ldr	r2, [pc, #108]	; (8009bf4 <RemoteConfig::HandleList()+0xc8>)
 8009b88:	f8cd c000 	str.w	ip, [sp]
 8009b8c:	f7ff fe40 	bl	8009810 <snprintf>
 8009b90:	69e3      	ldr	r3, [r4, #28]
 8009b92:	2b05      	cmp	r3, #5
 8009b94:	d118      	bne.n	8009bc8 <RemoteConfig::HandleList()+0x9c>
 8009b96:	f642 1305 	movw	r3, #10501	; 0x2905
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	69a3      	ldr	r3, [r4, #24]
 8009b9e:	b282      	uxth	r2, r0
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	7d20      	ldrb	r0, [r4, #20]
 8009ba4:	f009 fc50 	bl	8013448 <udp_send>
 8009ba8:	b009      	add	sp, #36	; 0x24
 8009baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bae:	e9cd 1804 	strd	r1, r8, [sp, #16]
 8009bb2:	e9cd 7202 	strd	r7, r2, [sp, #8]
 8009bb6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8009bba:	4628      	mov	r0, r5
 8009bbc:	e9cd ce00 	strd	ip, lr, [sp]
 8009bc0:	4a0d      	ldr	r2, [pc, #52]	; (8009bf8 <RemoteConfig::HandleList()+0xcc>)
 8009bc2:	f7ff fe25 	bl	8009810 <snprintf>
 8009bc6:	e7e3      	b.n	8009b90 <RemoteConfig::HandleList()+0x64>
 8009bc8:	2b06      	cmp	r3, #6
 8009bca:	d1ed      	bne.n	8009ba8 <RemoteConfig::HandleList()+0x7c>
 8009bcc:	6833      	ldr	r3, [r6, #0]
 8009bce:	799b      	ldrb	r3, [r3, #6]
 8009bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8009bd2:	d1e9      	bne.n	8009ba8 <RemoteConfig::HandleList()+0x7c>
 8009bd4:	f642 1305 	movw	r3, #10501	; 0x2905
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bde:	e7de      	b.n	8009b9e <RemoteConfig::HandleList()+0x72>
 8009be0:	08018f70 	stmdaeq	r1, {r4, r5, r6, r8, r9, sl, fp, pc}
 8009be4:	2001d2d4 	ldrdcs	sp, [r1], -r4
 8009be8:	08019036 	stmdaeq	r1, {r1, r2, r4, r5, ip, pc}
 8009bec:	200000ec 	andcs	r0, r0, ip, ror #1
 8009bf0:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009bf4:	08018e85 	stmdaeq	r1, {r0, r2, r7, r9, sl, fp, pc}
 8009bf8:	08018e9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r9, sl, fp, pc}

08009bfc <RemoteConfig::HandleDisplayGet()>:
 8009bfc:	69c3      	ldr	r3, [r0, #28]
 8009bfe:	2b08      	cmp	r3, #8
 8009c00:	d11b      	bne.n	8009c3a <RemoteConfig::HandleDisplayGet()+0x3e>
 8009c02:	4b0e      	ldr	r3, [pc, #56]	; (8009c3c <RemoteConfig::HandleDisplayGet()+0x40>)
 8009c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4d0d      	ldr	r5, [pc, #52]	; (8009c40 <RemoteConfig::HandleDisplayGet()+0x44>)
 8009c0a:	7c19      	ldrb	r1, [r3, #16]
 8009c0c:	4a0d      	ldr	r2, [pc, #52]	; (8009c44 <RemoteConfig::HandleDisplayGet()+0x48>)
 8009c0e:	4b0e      	ldr	r3, [pc, #56]	; (8009c48 <RemoteConfig::HandleDisplayGet()+0x4c>)
 8009c10:	4604      	mov	r4, r0
 8009c12:	2900      	cmp	r1, #0
 8009c14:	bf18      	it	ne
 8009c16:	4613      	movne	r3, r2
 8009c18:	6828      	ldr	r0, [r5, #0]
 8009c1a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009c1e:	4a0b      	ldr	r2, [pc, #44]	; (8009c4c <RemoteConfig::HandleDisplayGet()+0x50>)
 8009c20:	f7ff fdf6 	bl	8009810 <snprintf>
 8009c24:	f642 1305 	movw	r3, #10501	; 0x2905
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	b282      	uxth	r2, r0
 8009c2c:	69a3      	ldr	r3, [r4, #24]
 8009c2e:	6829      	ldr	r1, [r5, #0]
 8009c30:	7d20      	ldrb	r0, [r4, #20]
 8009c32:	f009 fc09 	bl	8013448 <udp_send>
 8009c36:	b003      	add	sp, #12
 8009c38:	bd30      	pop	{r4, r5, pc}
 8009c3a:	4770      	bx	lr
 8009c3c:	2001d8ac 	andcs	sp, r1, ip, lsr #17
 8009c40:	200000ec 	andcs	r0, r0, ip, ror #1
 8009c44:	08018eb7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r9, sl, fp, pc}
 8009c48:	08018eb4 	stmdaeq	r1, {r2, r4, r5, r7, r9, sl, fp, pc}
 8009c4c:	08018ebb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r9, sl, fp, pc}

08009c50 <RemoteConfig::HandleTftpGet()>:
 8009c50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c52:	4604      	mov	r4, r0
 8009c54:	f000 fd9e 	bl	800a794 <RemoteConfig::PlatformHandleTftpGet()>
 8009c58:	69e3      	ldr	r3, [r4, #28]
 8009c5a:	2b05      	cmp	r3, #5
 8009c5c:	d116      	bne.n	8009c8c <RemoteConfig::HandleTftpGet()+0x3c>
 8009c5e:	f894 1020 	ldrb.w	r1, [r4, #32]
 8009c62:	4d0b      	ldr	r5, [pc, #44]	; (8009c90 <RemoteConfig::HandleTftpGet()+0x40>)
 8009c64:	4a0b      	ldr	r2, [pc, #44]	; (8009c94 <RemoteConfig::HandleTftpGet()+0x44>)
 8009c66:	4b0c      	ldr	r3, [pc, #48]	; (8009c98 <RemoteConfig::HandleTftpGet()+0x48>)
 8009c68:	6828      	ldr	r0, [r5, #0]
 8009c6a:	2900      	cmp	r1, #0
 8009c6c:	bf08      	it	eq
 8009c6e:	4613      	moveq	r3, r2
 8009c70:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009c74:	4a09      	ldr	r2, [pc, #36]	; (8009c9c <RemoteConfig::HandleTftpGet()+0x4c>)
 8009c76:	f7ff fdcb 	bl	8009810 <snprintf>
 8009c7a:	f642 1305 	movw	r3, #10501	; 0x2905
 8009c7e:	b282      	uxth	r2, r0
 8009c80:	9300      	str	r3, [sp, #0]
 8009c82:	6829      	ldr	r1, [r5, #0]
 8009c84:	69a3      	ldr	r3, [r4, #24]
 8009c86:	7d20      	ldrb	r0, [r4, #20]
 8009c88:	f009 fbde 	bl	8013448 <udp_send>
 8009c8c:	b003      	add	sp, #12
 8009c8e:	bd30      	pop	{r4, r5, pc}
 8009c90:	200000ec 	andcs	r0, r0, ip, ror #1
 8009c94:	08018eb7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r9, sl, fp, pc}
 8009c98:	08018eb4 	stmdaeq	r1, {r2, r4, r5, r7, r9, sl, fp, pc}
 8009c9c:	08018ec7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r9, sl, fp, pc}

08009ca0 <RemoteConfig::HandleVersion()>:
 8009ca0:	69c3      	ldr	r3, [r0, #28]
 8009ca2:	2b08      	cmp	r3, #8
 8009ca4:	d114      	bne.n	8009cd0 <RemoteConfig::HandleVersion()+0x30>
 8009ca6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ca8:	4d0a      	ldr	r5, [pc, #40]	; (8009cd4 <RemoteConfig::HandleVersion()+0x34>)
 8009caa:	4604      	mov	r4, r0
 8009cac:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009cb0:	4b09      	ldr	r3, [pc, #36]	; (8009cd8 <RemoteConfig::HandleVersion()+0x38>)
 8009cb2:	4a0a      	ldr	r2, [pc, #40]	; (8009cdc <RemoteConfig::HandleVersion()+0x3c>)
 8009cb4:	6828      	ldr	r0, [r5, #0]
 8009cb6:	f7ff fdab 	bl	8009810 <snprintf>
 8009cba:	f642 1305 	movw	r3, #10501	; 0x2905
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	b282      	uxth	r2, r0
 8009cc2:	69a3      	ldr	r3, [r4, #24]
 8009cc4:	6829      	ldr	r1, [r5, #0]
 8009cc6:	7d20      	ldrb	r0, [r4, #20]
 8009cc8:	f009 fbbe 	bl	8013448 <udp_send>
 8009ccc:	b003      	add	sp, #12
 8009cce:	bd30      	pop	{r4, r5, pc}
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	200000ec 	andcs	r0, r0, ip, ror #1
 8009cd8:	2001d952 	andcs	sp, r1, r2, asr r9
 8009cdc:	08018ed0 	stmdaeq	r1, {r4, r6, r7, r9, sl, fp, pc}

08009ce0 <RemoteConfig::HandleUptime()>:
 8009ce0:	7bc3      	ldrb	r3, [r0, #15]
 8009ce2:	b1e3      	cbz	r3, 8009d1e <RemoteConfig::HandleUptime()+0x3e>
 8009ce4:	4b0e      	ldr	r3, [pc, #56]	; (8009d20 <RemoteConfig::HandleUptime()+0x40>)
 8009ce6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	69c3      	ldr	r3, [r0, #28]
 8009cec:	4604      	mov	r4, r0
 8009cee:	2b07      	cmp	r3, #7
 8009cf0:	d113      	bne.n	8009d1a <RemoteConfig::HandleUptime()+0x3a>
 8009cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009cf6:	4d0b      	ldr	r5, [pc, #44]	; (8009d24 <RemoteConfig::HandleUptime()+0x44>)
 8009cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cfc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009d00:	4a09      	ldr	r2, [pc, #36]	; (8009d28 <RemoteConfig::HandleUptime()+0x48>)
 8009d02:	6828      	ldr	r0, [r5, #0]
 8009d04:	f7ff fd84 	bl	8009810 <snprintf>
 8009d08:	f642 1305 	movw	r3, #10501	; 0x2905
 8009d0c:	9300      	str	r3, [sp, #0]
 8009d0e:	b282      	uxth	r2, r0
 8009d10:	69a3      	ldr	r3, [r4, #24]
 8009d12:	6829      	ldr	r1, [r5, #0]
 8009d14:	7d20      	ldrb	r0, [r4, #20]
 8009d16:	f009 fb97 	bl	8013448 <udp_send>
 8009d1a:	b003      	add	sp, #12
 8009d1c:	bd30      	pop	{r4, r5, pc}
 8009d1e:	4770      	bx	lr
 8009d20:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4
 8009d24:	200000ec 	andcs	r0, r0, ip, ror #1
 8009d28:	08018edb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r9, sl, fp, pc}

08009d2c <Display::Status(Display7SegmentMessage)>:
 8009d2c:	7c43      	ldrb	r3, [r0, #17]
 8009d2e:	b1bb      	cbz	r3, 8009d60 <Display::Status(Display7SegmentMessage)+0x34>
 8009d30:	b513      	push	{r0, r1, r4, lr}
 8009d32:	2312      	movs	r3, #18
 8009d34:	43c9      	mvns	r1, r1
 8009d36:	4604      	mov	r4, r0
 8009d38:	f88d 3004 	strb.w	r3, [sp, #4]
 8009d3c:	7a00      	ldrb	r0, [r0, #8]
 8009d3e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8009d42:	f88d 3005 	strb.w	r3, [sp, #5]
 8009d46:	f88d 1006 	strb.w	r1, [sp, #6]
 8009d4a:	f00d fe6b 	bl	8017a24 <gd32_i2c_set_address>
 8009d4e:	68e0      	ldr	r0, [r4, #12]
 8009d50:	f00d fe60 	bl	8017a14 <gd32_i2c_set_baudrate>
 8009d54:	2103      	movs	r1, #3
 8009d56:	a801      	add	r0, sp, #4
 8009d58:	f00d fe6a 	bl	8017a30 <gd32_i2c_write>
 8009d5c:	b002      	add	sp, #8
 8009d5e:	bd10      	pop	{r4, pc}
 8009d60:	4770      	bx	lr
	...

08009d64 <RemoteConfig::HandleDisplaySet()>:
 8009d64:	b508      	push	{r3, lr}
 8009d66:	69c3      	ldr	r3, [r0, #28]
 8009d68:	2b09      	cmp	r3, #9
 8009d6a:	d10a      	bne.n	8009d82 <RemoteConfig::HandleDisplaySet()+0x1e>
 8009d6c:	4b05      	ldr	r3, [pc, #20]	; (8009d84 <RemoteConfig::HandleDisplaySet()+0x20>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	7a59      	ldrb	r1, [r3, #9]
 8009d72:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009d76:	4259      	negs	r1, r3
 8009d78:	4159      	adcs	r1, r3
 8009d7a:	4b03      	ldr	r3, [pc, #12]	; (8009d88 <RemoteConfig::HandleDisplaySet()+0x24>)
 8009d7c:	6818      	ldr	r0, [r3, #0]
 8009d7e:	f7fe fdb1 	bl	80088e4 <Display::SetSleep(bool)>
 8009d82:	bd08      	pop	{r3, pc}
 8009d84:	200000ec 	andcs	r0, r0, ip, ror #1
 8009d88:	2001d8ac 	andcs	sp, r1, ip, lsr #17

08009d8c <RemoteConfig::HandleTftpSet()>:
 8009d8c:	69c3      	ldr	r3, [r0, #28]
 8009d8e:	2b06      	cmp	r3, #6
 8009d90:	d127      	bne.n	8009de2 <RemoteConfig::HandleTftpSet()+0x56>
 8009d92:	b570      	push	{r4, r5, r6, lr}
 8009d94:	4b13      	ldr	r3, [pc, #76]	; (8009de4 <RemoteConfig::HandleTftpSet()+0x58>)
 8009d96:	4e14      	ldr	r6, [pc, #80]	; (8009de8 <RemoteConfig::HandleTftpSet()+0x5c>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	799b      	ldrb	r3, [r3, #6]
 8009d9e:	6835      	ldr	r5, [r6, #0]
 8009da0:	2b30      	cmp	r3, #48	; 0x30
 8009da2:	bf14      	ite	ne
 8009da4:	2301      	movne	r3, #1
 8009da6:	2300      	moveq	r3, #0
 8009da8:	f880 3020 	strb.w	r3, [r0, #32]
 8009dac:	d012      	beq.n	8009dd4 <RemoteConfig::HandleTftpSet()+0x48>
 8009dae:	4628      	mov	r0, r5
 8009db0:	2100      	movs	r1, #0
 8009db2:	f7fe fd97 	bl	80088e4 <Display::SetSleep(bool)>
 8009db6:	6835      	ldr	r5, [r6, #0]
 8009db8:	490c      	ldr	r1, [pc, #48]	; (8009dec <RemoteConfig::HandleTftpSet()+0x60>)
 8009dba:	4628      	mov	r0, r5
 8009dbc:	f7fe fd34 	bl	8008828 <Display::TextStatus(char const*)>
 8009dc0:	f244 0171 	movw	r1, #16497	; 0x4071
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	f7ff ffb1 	bl	8009d2c <Display::Status(Display7SegmentMessage)>
 8009dca:	4620      	mov	r0, r4
 8009dcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009dd0:	f000 bcd8 	b.w	800a784 <RemoteConfig::PlatformHandleTftpSet()>
 8009dd4:	4906      	ldr	r1, [pc, #24]	; (8009df0 <RemoteConfig::HandleTftpSet()+0x64>)
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	f7fe fd26 	bl	8008828 <Display::TextStatus(char const*)>
 8009ddc:	f248 0171 	movw	r1, #32881	; 0x8071
 8009de0:	e7f0      	b.n	8009dc4 <RemoteConfig::HandleTftpSet()+0x38>
 8009de2:	4770      	bx	lr
 8009de4:	200000ec 	andcs	r0, r0, ip, ror #1
 8009de8:	2001d8ac 	andcs	sp, r1, ip, lsr #17
 8009dec:	08018ee8 	stmdaeq	r1, {r3, r5, r6, r7, r9, sl, fp, pc}
 8009df0:	08018efa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, sl, fp, pc}

08009df4 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 8009df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df8:	2500      	movs	r5, #0
 8009dfa:	461f      	mov	r7, r3
 8009dfc:	6083      	str	r3, [r0, #8]
 8009dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e02:	4690      	mov	r8, r2
 8009e04:	4689      	mov	r9, r1
 8009e06:	4e12      	ldr	r6, [pc, #72]	; (8009e50 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x5c>)
 8009e08:	e9c0 3505 	strd	r3, r5, [r0, #20]
 8009e0c:	f8df a044 	ldr.w	sl, [pc, #68]	; 8009e54 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x60>
 8009e10:	4b11      	ldr	r3, [pc, #68]	; (8009e58 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x64>)
 8009e12:	e9c0 1200 	strd	r1, r2, [r0]
 8009e16:	4604      	mov	r4, r0
 8009e18:	6018      	str	r0, [r3, #0]
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	60c5      	str	r5, [r0, #12]
 8009e1e:	8205      	strh	r5, [r0, #16]
 8009e20:	61c5      	str	r5, [r0, #28]
 8009e22:	f880 5020 	strb.w	r5, [r0, #32]
 8009e26:	f8da 0000 	ldr.w	r0, [sl]
 8009e2a:	f009 ffdb 	bl	8013de4 <Network::MacAddressCopyTo(unsigned char*)>
 8009e2e:	f642 1105 	movw	r1, #10501	; 0x2905
 8009e32:	f8da 0000 	ldr.w	r0, [sl]
 8009e36:	f886 9006 	strb.w	r9, [r6, #6]
 8009e3a:	f886 8007 	strb.w	r8, [r6, #7]
 8009e3e:	7237      	strb	r7, [r6, #8]
 8009e40:	7275      	strb	r5, [r6, #9]
 8009e42:	f009 ffc9 	bl	8013dd8 <Network::Begin(unsigned short)>
 8009e46:	6160      	str	r0, [r4, #20]
 8009e48:	4620      	mov	r0, r4
 8009e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e4e:	bf00      	nop
 8009e50:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009e54:	2001d2d4 	ldrdcs	sp, [r1], -r4
 8009e58:	20000114 	andcs	r0, r0, r4, lsl r1

08009e5c <RemoteConfig::GetStringNode() const>:
 8009e5c:	2012      	movs	r0, #18
 8009e5e:	4b03      	ldr	r3, [pc, #12]	; (8009e6c <RemoteConfig::GetStringNode() const+0x10>)
 8009e60:	799a      	ldrb	r2, [r3, #6]
 8009e62:	4b03      	ldr	r3, [pc, #12]	; (8009e70 <RemoteConfig::GetStringNode() const+0x14>)
 8009e64:	fb00 3002 	mla	r0, r0, r2, r3
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009e70:	08018f70 	stmdaeq	r1, {r4, r5, r6, r8, r9, sl, fp, pc}

08009e74 <RemoteConfig::GetStringOutput() const>:
 8009e74:	200c      	movs	r0, #12
 8009e76:	4b03      	ldr	r3, [pc, #12]	; (8009e84 <RemoteConfig::GetStringOutput() const+0x10>)
 8009e78:	79da      	ldrb	r2, [r3, #7]
 8009e7a:	4b03      	ldr	r3, [pc, #12]	; (8009e88 <RemoteConfig::GetStringOutput() const+0x14>)
 8009e7c:	fb00 3002 	mla	r0, r0, r2, r3
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009e88:	08019036 	stmdaeq	r1, {r1, r2, r4, r5, ip, pc}

08009e8c <RemoteConfig::SetDisable(bool)>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4604      	mov	r4, r0
 8009e90:	7b03      	ldrb	r3, [r0, #12]
 8009e92:	b161      	cbz	r1, 8009eae <RemoteConfig::SetDisable(bool)+0x22>
 8009e94:	b953      	cbnz	r3, 8009eac <RemoteConfig::SetDisable(bool)+0x20>
 8009e96:	4b0c      	ldr	r3, [pc, #48]	; (8009ec8 <RemoteConfig::SetDisable(bool)+0x3c>)
 8009e98:	f642 1105 	movw	r1, #10501	; 0x2905
 8009e9c:	6818      	ldr	r0, [r3, #0]
 8009e9e:	f009 ff9e 	bl	8013dde <Network::End(unsigned short)>
 8009ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ea6:	6163      	str	r3, [r4, #20]
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	7323      	strb	r3, [r4, #12]
 8009eac:	bd38      	pop	{r3, r4, r5, pc}
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d0fc      	beq.n	8009eac <RemoteConfig::SetDisable(bool)+0x20>
 8009eb2:	4b05      	ldr	r3, [pc, #20]	; (8009ec8 <RemoteConfig::SetDisable(bool)+0x3c>)
 8009eb4:	460d      	mov	r5, r1
 8009eb6:	6818      	ldr	r0, [r3, #0]
 8009eb8:	f642 1105 	movw	r1, #10501	; 0x2905
 8009ebc:	f009 ff8c 	bl	8013dd8 <Network::Begin(unsigned short)>
 8009ec0:	7325      	strb	r5, [r4, #12]
 8009ec2:	6160      	str	r0, [r4, #20]
 8009ec4:	e7f2      	b.n	8009eac <RemoteConfig::SetDisable(bool)+0x20>
 8009ec6:	bf00      	nop
 8009ec8:	2001d2d4 	ldrdcs	sp, [r1], -r4

08009ecc <RemoteConfig::SetDisplayName(char const*)>:
 8009ecc:	2217      	movs	r2, #23
 8009ece:	4809      	ldr	r0, [pc, #36]	; (8009ef4 <RemoteConfig::SetDisplayName(char const*)+0x28>)
 8009ed0:	b508      	push	{r3, lr}
 8009ed2:	1e4b      	subs	r3, r1, #1
 8009ed4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8009ed8:	b911      	cbnz	r1, 8009ee0 <RemoteConfig::SetDisplayName(char const*)+0x14>
 8009eda:	f00c fc8f 	bl	80167fc <memset>
 8009ede:	e003      	b.n	8009ee8 <RemoteConfig::SetDisplayName(char const*)+0x1c>
 8009ee0:	3a01      	subs	r2, #1
 8009ee2:	f800 1b01 	strb.w	r1, [r0], #1
 8009ee6:	d1f5      	bne.n	8009ed4 <RemoteConfig::SetDisplayName(char const*)+0x8>
 8009ee8:	2200      	movs	r2, #0
 8009eea:	4b03      	ldr	r3, [pc, #12]	; (8009ef8 <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 8009eec:	f883 2020 	strb.w	r2, [r3, #32]
 8009ef0:	bd08      	pop	{r3, pc}
 8009ef2:	bf00      	nop
 8009ef4:	200000f9 	strdcs	r0, [r0], -r9
 8009ef8:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08009efc <RemoteConfig::HandleGet(void*, unsigned int)>:
 8009efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009efe:	4604      	mov	r4, r0
 8009f00:	4616      	mov	r6, r2
 8009f02:	460d      	mov	r5, r1
 8009f04:	4f28      	ldr	r7, [pc, #160]	; (8009fa8 <RemoteConfig::HandleGet(void*, unsigned int)+0xac>)
 8009f06:	b085      	sub	sp, #20
 8009f08:	b9a9      	cbnz	r1, 8009f36 <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 8009f0a:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	aa03      	add	r2, sp, #12
 8009f12:	3105      	adds	r1, #5
 8009f14:	9303      	str	r3, [sp, #12]
 8009f16:	f000 fc0b 	bl	800a730 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 8009f1a:	1e03      	subs	r3, r0, #0
 8009f1c:	da1b      	bge.n	8009f56 <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 8009f1e:	f642 1305 	movw	r3, #10501	; 0x2905
 8009f22:	220b      	movs	r2, #11
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	4921      	ldr	r1, [pc, #132]	; (8009fac <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 8009f28:	69a3      	ldr	r3, [r4, #24]
 8009f2a:	7d20      	ldrb	r0, [r4, #20]
 8009f2c:	f009 fa8c 	bl	8013448 <udp_send>
 8009f30:	200c      	movs	r0, #12
 8009f32:	b005      	add	sp, #20
 8009f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f36:	9203      	str	r2, [sp, #12]
 8009f38:	aa03      	add	r2, sp, #12
 8009f3a:	6039      	str	r1, [r7, #0]
 8009f3c:	f000 fbf8 	bl	800a730 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 8009f40:	1e03      	subs	r3, r0, #0
 8009f42:	da08      	bge.n	8009f56 <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 8009f44:	2e0b      	cmp	r6, #11
 8009f46:	4632      	mov	r2, r6
 8009f48:	4628      	mov	r0, r5
 8009f4a:	bf28      	it	cs
 8009f4c:	220b      	movcs	r2, #11
 8009f4e:	4917      	ldr	r1, [pc, #92]	; (8009fac <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 8009f50:	f00c fc32 	bl	80167b8 <memcpy>
 8009f54:	e7ec      	b.n	8009f30 <RemoteConfig::HandleGet(void*, unsigned int)+0x34>
 8009f56:	221c      	movs	r2, #28
 8009f58:	4353      	muls	r3, r2
 8009f5a:	4915      	ldr	r1, [pc, #84]	; (8009fb0 <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 8009f5c:	18ca      	adds	r2, r1, r3
 8009f5e:	6852      	ldr	r2, [r2, #4]
 8009f60:	58cb      	ldr	r3, [r1, r3]
 8009f62:	ea4f 0c62 	mov.w	ip, r2, asr #1
 8009f66:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8009f6a:	07d2      	lsls	r2, r2, #31
 8009f6c:	bf48      	it	mi
 8009f6e:	f854 200c 	ldrmi.w	r2, [r4, ip]
 8009f72:	a903      	add	r1, sp, #12
 8009f74:	bf48      	it	mi
 8009f76:	58d3      	ldrmi	r3, [r2, r3]
 8009f78:	4798      	blx	r3
 8009f7a:	b95d      	cbnz	r5, 8009f94 <RemoteConfig::HandleGet(void*, unsigned int)+0x98>
 8009f7c:	f642 1305 	movw	r3, #10501	; 0x2905
 8009f80:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8009f84:	9300      	str	r3, [sp, #0]
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	69a3      	ldr	r3, [r4, #24]
 8009f8a:	7d20      	ldrb	r0, [r4, #20]
 8009f8c:	f009 fa5c 	bl	8013448 <udp_send>
 8009f90:	9803      	ldr	r0, [sp, #12]
 8009f92:	e7ce      	b.n	8009f32 <RemoteConfig::HandleGet(void*, unsigned int)+0x36>
 8009f94:	9a03      	ldr	r2, [sp, #12]
 8009f96:	4628      	mov	r0, r5
 8009f98:	42b2      	cmp	r2, r6
 8009f9a:	bf28      	it	cs
 8009f9c:	4632      	movcs	r2, r6
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	f00c fc15 	bl	80167ce <memmove>
 8009fa4:	e7f4      	b.n	8009f90 <RemoteConfig::HandleGet(void*, unsigned int)+0x94>
 8009fa6:	bf00      	nop
 8009fa8:	200000ec 	andcs	r0, r0, ip, ror #1
 8009fac:	08018f0d 	stmdaeq	r1, {r0, r2, r3, r8, r9, sl, fp, pc}
 8009fb0:	08019200 	stmdaeq	r1, {r9, ip, pc}

08009fb4 <RemoteConfig::HandleGetNoParams()>:
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	4611      	mov	r1, r2
 8009fb8:	f7ff bfa0 	b.w	8009efc <RemoteConfig::HandleGet(void*, unsigned int)>

08009fbc <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 8009fbc:	b510      	push	{r4, lr}
 8009fbe:	460c      	mov	r4, r1
 8009fc0:	4b07      	ldr	r3, [pc, #28]	; (8009fe0 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x24>)
 8009fc2:	b08a      	sub	sp, #40	; 0x28
 8009fc4:	6819      	ldr	r1, [r3, #0]
 8009fc6:	a801      	add	r0, sp, #4
 8009fc8:	f000 fa0e 	bl	800a3e8 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8009fcc:	4905      	ldr	r1, [pc, #20]	; (8009fe4 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 8009fce:	4623      	mov	r3, r4
 8009fd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009fd4:	6809      	ldr	r1, [r1, #0]
 8009fd6:	a801      	add	r0, sp, #4
 8009fd8:	f000 fb2a 	bl	800a630 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 8009fdc:	b00a      	add	sp, #40	; 0x28
 8009fde:	bd10      	pop	{r4, pc}
 8009fe0:	200159d8 	ldrdcs	r5, [r1], -r8
 8009fe4:	200000ec 	andcs	r0, r0, ip, ror #1

08009fe8 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 8009fe8:	b510      	push	{r4, lr}
 8009fea:	460c      	mov	r4, r1
 8009fec:	4b07      	ldr	r3, [pc, #28]	; (800a00c <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x24>)
 8009fee:	b09a      	sub	sp, #104	; 0x68
 8009ff0:	6819      	ldr	r1, [r3, #0]
 8009ff2:	a801      	add	r0, sp, #4
 8009ff4:	f00a fa1e 	bl	8014434 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 8009ff8:	4905      	ldr	r1, [pc, #20]	; (800a010 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 8009ffa:	4623      	mov	r3, r4
 8009ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a000:	6809      	ldr	r1, [r1, #0]
 800a002:	a801      	add	r0, sp, #4
 800a004:	f00a fbec 	bl	80147e0 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 800a008:	b01a      	add	sp, #104	; 0x68
 800a00a:	bd10      	pop	{r4, pc}
 800a00c:	200159d0 	ldrdcs	r5, [r1], -r0
 800a010:	200000ec 	andcs	r0, r0, ip, ror #1

0800a014 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
 800a014:	b510      	push	{r4, lr}
 800a016:	460c      	mov	r4, r1
 800a018:	4b07      	ldr	r3, [pc, #28]	; (800a038 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x24>)
 800a01a:	b0a4      	sub	sp, #144	; 0x90
 800a01c:	6819      	ldr	r1, [r3, #0]
 800a01e:	a801      	add	r0, sp, #4
 800a020:	f002 fee0 	bl	800cde4 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800a024:	4905      	ldr	r1, [pc, #20]	; (800a03c <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x28>)
 800a026:	4623      	mov	r3, r4
 800a028:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a02c:	6809      	ldr	r1, [r1, #0]
 800a02e:	a801      	add	r0, sp, #4
 800a030:	f003 fa86 	bl	800d540 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
 800a034:	b024      	add	sp, #144	; 0x90
 800a036:	bd10      	pop	{r4, pc}
 800a038:	200159e0 	andcs	r5, r1, r0, ror #19
 800a03c:	200000ec 	andcs	r0, r0, ip, ror #1

0800a040 <RemoteConfig::HandleGetE131Txt(unsigned int&)>:
 800a040:	b510      	push	{r4, lr}
 800a042:	460c      	mov	r4, r1
 800a044:	4b07      	ldr	r3, [pc, #28]	; (800a064 <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x24>)
 800a046:	b08a      	sub	sp, #40	; 0x28
 800a048:	6819      	ldr	r1, [r3, #0]
 800a04a:	a801      	add	r0, sp, #4
 800a04c:	f004 faae 	bl	800e5ac <E131Params::E131Params(E131ParamsStore*)>
 800a050:	4905      	ldr	r1, [pc, #20]	; (800a068 <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x28>)
 800a052:	4623      	mov	r3, r4
 800a054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a058:	6809      	ldr	r1, [r1, #0]
 800a05a:	a801      	add	r0, sp, #4
 800a05c:	f004 fd8e 	bl	800eb7c <E131Params::Save(char*, unsigned int, unsigned int&)>
 800a060:	b00a      	add	sp, #40	; 0x28
 800a062:	bd10      	pop	{r4, pc}
 800a064:	200159e4 	andcs	r5, r1, r4, ror #19
 800a068:	200000ec 	andcs	r0, r0, ip, ror #1

0800a06c <RemoteConfig::HandleGetDevicesTxt(unsigned int&)>:
 800a06c:	b510      	push	{r4, lr}
 800a06e:	460c      	mov	r4, r1
 800a070:	4b07      	ldr	r3, [pc, #28]	; (800a090 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x24>)
 800a072:	b08c      	sub	sp, #48	; 0x30
 800a074:	6819      	ldr	r1, [r3, #0]
 800a076:	a801      	add	r0, sp, #4
 800a078:	f006 fa3e 	bl	80104f8 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 800a07c:	4905      	ldr	r1, [pc, #20]	; (800a094 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x28>)
 800a07e:	4623      	mov	r3, r4
 800a080:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a084:	6809      	ldr	r1, [r1, #0]
 800a086:	a801      	add	r0, sp, #4
 800a088:	f006 fd5a 	bl	8010b40 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)>
 800a08c:	b00c      	add	sp, #48	; 0x30
 800a08e:	bd10      	pop	{r4, pc}
 800a090:	200159e8 	andcs	r5, r1, r8, ror #19
 800a094:	200000ec 	andcs	r0, r0, ip, ror #1

0800a098 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 800a098:	b510      	push	{r4, lr}
 800a09a:	460c      	mov	r4, r1
 800a09c:	4b07      	ldr	r3, [pc, #28]	; (800a0bc <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x24>)
 800a09e:	b08a      	sub	sp, #40	; 0x28
 800a0a0:	6819      	ldr	r1, [r3, #0]
 800a0a2:	4668      	mov	r0, sp
 800a0a4:	f00b f936 	bl	8015314 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800a0a8:	4905      	ldr	r1, [pc, #20]	; (800a0c0 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 800a0aa:	4623      	mov	r3, r4
 800a0ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a0b0:	4668      	mov	r0, sp
 800a0b2:	6809      	ldr	r1, [r1, #0]
 800a0b4:	f00b fa66 	bl	8015584 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 800a0b8:	b00a      	add	sp, #40	; 0x28
 800a0ba:	bd10      	pop	{r4, pc}
 800a0bc:	200159cc 	andcs	r5, r1, ip, asr #19
 800a0c0:	200000ec 	andcs	r0, r0, ip, ror #1

0800a0c4 <RemoteConfig::HandleSet(void*, unsigned int)>:
 800a0c4:	b530      	push	{r4, r5, lr}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	9201      	str	r2, [sp, #4]
 800a0cc:	b9d1      	cbnz	r1, 800a104 <RemoteConfig::HandleSet(void*, unsigned int)+0x40>
 800a0ce:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800a0d2:	9303      	str	r3, [sp, #12]
 800a0d4:	4b19      	ldr	r3, [pc, #100]	; (800a13c <RemoteConfig::HandleSet(void*, unsigned int)+0x78>)
 800a0d6:	aa03      	add	r2, sp, #12
 800a0d8:	6819      	ldr	r1, [r3, #0]
 800a0da:	3101      	adds	r1, #1
 800a0dc:	f000 fb28 	bl	800a730 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	db0d      	blt.n	800a100 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800a0e4:	221c      	movs	r2, #28
 800a0e6:	4b16      	ldr	r3, [pc, #88]	; (800a140 <RemoteConfig::HandleSet(void*, unsigned int)+0x7c>)
 800a0e8:	fb02 3300 	mla	r3, r2, r0, r3
 800a0ec:	68da      	ldr	r2, [r3, #12]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	1051      	asrs	r1, r2, #1
 800a0f2:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800a0f6:	07d2      	lsls	r2, r2, #31
 800a0f8:	bf44      	itt	mi
 800a0fa:	5862      	ldrmi	r2, [r4, r1]
 800a0fc:	58d3      	ldrmi	r3, [r2, r3]
 800a0fe:	4798      	blx	r3
 800a100:	b005      	add	sp, #20
 800a102:	bd30      	pop	{r4, r5, pc}
 800a104:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a108:	d8fa      	bhi.n	800a100 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800a10a:	4b0e      	ldr	r3, [pc, #56]	; (800a144 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800a10c:	460d      	mov	r5, r1
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	07d9      	lsls	r1, r3, #31
 800a112:	d50b      	bpl.n	800a12c <RemoteConfig::HandleSet(void*, unsigned int)+0x68>
 800a114:	782b      	ldrb	r3, [r5, #0]
 800a116:	2b7b      	cmp	r3, #123	; 0x7b
 800a118:	d108      	bne.n	800a12c <RemoteConfig::HandleSet(void*, unsigned int)+0x68>
 800a11a:	1e51      	subs	r1, r2, #1
 800a11c:	4628      	mov	r0, r5
 800a11e:	2200      	movs	r2, #0
 800a120:	b289      	uxth	r1, r1
 800a122:	f00b fb93 	bl	801584c <properties::convert_json_file(char*, unsigned short, bool)>
 800a126:	1e02      	subs	r2, r0, #0
 800a128:	ddea      	ble.n	800a100 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800a12a:	b292      	uxth	r2, r2
 800a12c:	4b03      	ldr	r3, [pc, #12]	; (800a13c <RemoteConfig::HandleSet(void*, unsigned int)+0x78>)
 800a12e:	61e2      	str	r2, [r4, #28]
 800a130:	4620      	mov	r0, r4
 800a132:	601d      	str	r5, [r3, #0]
 800a134:	aa01      	add	r2, sp, #4
 800a136:	1c69      	adds	r1, r5, #1
 800a138:	e7d0      	b.n	800a0dc <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 800a13a:	bf00      	nop
 800a13c:	200000ec 	andcs	r0, r0, ip, ror #1
 800a140:	08019200 	stmdaeq	r1, {r9, ip, pc}
 800a144:	2001d8a8 	andcs	sp, r1, r8, lsr #17

0800a148 <RemoteConfig::Run()>:
 800a148:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a14c:	7b05      	ldrb	r5, [r0, #12]
 800a14e:	2d00      	cmp	r5, #0
 800a150:	d156      	bne.n	800a200 <RemoteConfig::Run()+0xb8>
 800a152:	4e45      	ldr	r6, [pc, #276]	; (800a268 <RemoteConfig::Run()+0x120>)
 800a154:	4604      	mov	r4, r0
 800a156:	f100 0218 	add.w	r2, r0, #24
 800a15a:	4631      	mov	r1, r6
 800a15c:	7d00      	ldrb	r0, [r0, #20]
 800a15e:	f10d 030e 	add.w	r3, sp, #14
 800a162:	f009 f94b 	bl	80133fc <udp_recv2>
 800a166:	2803      	cmp	r0, #3
 800a168:	61e0      	str	r0, [r4, #28]
 800a16a:	d949      	bls.n	800a200 <RemoteConfig::Run()+0xb8>
 800a16c:	6831      	ldr	r1, [r6, #0]
 800a16e:	1e43      	subs	r3, r0, #1
 800a170:	5cca      	ldrb	r2, [r1, r3]
 800a172:	2a0a      	cmp	r2, #10
 800a174:	bf18      	it	ne
 800a176:	4603      	movne	r3, r0
 800a178:	61e3      	str	r3, [r4, #28]
 800a17a:	7808      	ldrb	r0, [r1, #0]
 800a17c:	283f      	cmp	r0, #63	; 0x3f
 800a17e:	d137      	bne.n	800a1f0 <RemoteConfig::Run()+0xa8>
 800a180:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 800a26c <RemoteConfig::Run()+0x124>
 800a184:	462a      	mov	r2, r5
 800a186:	4667      	mov	r7, ip
 800a188:	3b01      	subs	r3, #1
 800a18a:	61e3      	str	r3, [r4, #28]
 800a18c:	f89c 500e 	ldrb.w	r5, [ip, #14]
 800a190:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 800a194:	b16d      	cbz	r5, 800a1b2 <RemoteConfig::Run()+0x6a>
 800a196:	4283      	cmp	r3, r0
 800a198:	d80d      	bhi.n	800a1b6 <RemoteConfig::Run()+0x6e>
 800a19a:	3201      	adds	r2, #1
 800a19c:	2a09      	cmp	r2, #9
 800a19e:	f10c 0c10 	add.w	ip, ip, #16
 800a1a2:	d1f3      	bne.n	800a18c <RemoteConfig::Run()+0x44>
 800a1a4:	f642 1305 	movw	r3, #10501	; 0x2905
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	2208      	movs	r2, #8
 800a1ac:	69a3      	ldr	r3, [r4, #24]
 800a1ae:	4930      	ldr	r1, [pc, #192]	; (800a270 <RemoteConfig::Run()+0x128>)
 800a1b0:	e04e      	b.n	800a250 <RemoteConfig::Run()+0x108>
 800a1b2:	4283      	cmp	r3, r0
 800a1b4:	d1f1      	bne.n	800a19a <RemoteConfig::Run()+0x52>
 800a1b6:	460e      	mov	r6, r1
 800a1b8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800a1bc:	4408      	add	r0, r1
 800a1be:	3d01      	subs	r5, #1
 800a1c0:	4286      	cmp	r6, r0
 800a1c2:	d10b      	bne.n	800a1dc <RemoteConfig::Run()+0x94>
 800a1c4:	0113      	lsls	r3, r2, #4
 800a1c6:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 800a1ca:	6852      	ldr	r2, [r2, #4]
 800a1cc:	58fb      	ldr	r3, [r7, r3]
 800a1ce:	1051      	asrs	r1, r2, #1
 800a1d0:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800a1d4:	07d2      	lsls	r2, r2, #31
 800a1d6:	d408      	bmi.n	800a1ea <RemoteConfig::Run()+0xa2>
 800a1d8:	4798      	blx	r3
 800a1da:	e011      	b.n	800a200 <RemoteConfig::Run()+0xb8>
 800a1dc:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800a1e0:	f815 ef01 	ldrb.w	lr, [r5, #1]!
 800a1e4:	45f0      	cmp	r8, lr
 800a1e6:	d0eb      	beq.n	800a1c0 <RemoteConfig::Run()+0x78>
 800a1e8:	e7d7      	b.n	800a19a <RemoteConfig::Run()+0x52>
 800a1ea:	5862      	ldr	r2, [r4, r1]
 800a1ec:	58d3      	ldr	r3, [r2, r3]
 800a1ee:	e7f3      	b.n	800a1d8 <RemoteConfig::Run()+0x90>
 800a1f0:	7b62      	ldrb	r2, [r4, #13]
 800a1f2:	b92a      	cbnz	r2, 800a200 <RemoteConfig::Run()+0xb8>
 800a1f4:	2823      	cmp	r0, #35	; 0x23
 800a1f6:	d106      	bne.n	800a206 <RemoteConfig::Run()+0xbe>
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f7ff ff62 	bl	800a0c4 <RemoteConfig::HandleSet(void*, unsigned int)>
 800a200:	b004      	add	sp, #16
 800a202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a206:	2821      	cmp	r0, #33	; 0x21
 800a208:	d1fa      	bne.n	800a200 <RemoteConfig::Run()+0xb8>
 800a20a:	3b01      	subs	r3, #1
 800a20c:	2b05      	cmp	r3, #5
 800a20e:	61e3      	str	r3, [r4, #28]
 800a210:	d918      	bls.n	800a244 <RemoteConfig::Run()+0xfc>
 800a212:	460a      	mov	r2, r1
 800a214:	4608      	mov	r0, r1
 800a216:	4d17      	ldr	r5, [pc, #92]	; (800a274 <RemoteConfig::Run()+0x12c>)
 800a218:	f101 0c05 	add.w	ip, r1, #5
 800a21c:	4560      	cmp	r0, ip
 800a21e:	d01b      	beq.n	800a258 <RemoteConfig::Run()+0x110>
 800a220:	f815 6b01 	ldrb.w	r6, [r5], #1
 800a224:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800a228:	42b7      	cmp	r7, r6
 800a22a:	d0f7      	beq.n	800a21c <RemoteConfig::Run()+0xd4>
 800a22c:	2b08      	cmp	r3, #8
 800a22e:	d909      	bls.n	800a244 <RemoteConfig::Run()+0xfc>
 800a230:	4b11      	ldr	r3, [pc, #68]	; (800a278 <RemoteConfig::Run()+0x130>)
 800a232:	3108      	adds	r1, #8
 800a234:	428a      	cmp	r2, r1
 800a236:	d015      	beq.n	800a264 <RemoteConfig::Run()+0x11c>
 800a238:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a23c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a240:	4285      	cmp	r5, r0
 800a242:	d0f7      	beq.n	800a234 <RemoteConfig::Run()+0xec>
 800a244:	f642 1305 	movw	r3, #10501	; 0x2905
 800a248:	2208      	movs	r2, #8
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	69a3      	ldr	r3, [r4, #24]
 800a24e:	490b      	ldr	r1, [pc, #44]	; (800a27c <RemoteConfig::Run()+0x134>)
 800a250:	7d20      	ldrb	r0, [r4, #20]
 800a252:	f009 f8f9 	bl	8013448 <udp_send>
 800a256:	e7d3      	b.n	800a200 <RemoteConfig::Run()+0xb8>
 800a258:	2300      	movs	r3, #0
 800a25a:	4a09      	ldr	r2, [pc, #36]	; (800a280 <RemoteConfig::Run()+0x138>)
 800a25c:	011b      	lsls	r3, r3, #4
 800a25e:	4620      	mov	r0, r4
 800a260:	58d3      	ldr	r3, [r2, r3]
 800a262:	e7b9      	b.n	800a1d8 <RemoteConfig::Run()+0x90>
 800a264:	2301      	movs	r3, #1
 800a266:	e7f8      	b.n	800a25a <RemoteConfig::Run()+0x112>
 800a268:	200000ec 	andcs	r0, r0, ip, ror #1
 800a26c:	080190c8 	stmdaeq	r1, {r3, r6, r7, ip, pc}
 800a270:	08018f31 	stmdaeq	r1, {r0, r4, r5, r8, r9, sl, fp, pc}
 800a274:	08018f19 	stmdaeq	r1, {r0, r3, r4, r8, r9, sl, fp, pc}
 800a278:	08018f1f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, r9, sl, fp, pc}
 800a27c:	08018f28 	stmdaeq	r1, {r3, r5, r8, r9, sl, fp, pc}
 800a280:	08019158 	stmdaeq	r1, {r3, r4, r6, r8, ip, pc}

0800a284 <RemoteConfig::HandleSetRconfig()>:
 800a284:	b510      	push	{r4, lr}
 800a286:	4604      	mov	r4, r0
 800a288:	4b08      	ldr	r3, [pc, #32]	; (800a2ac <RemoteConfig::HandleSetRconfig()+0x28>)
 800a28a:	b08a      	sub	sp, #40	; 0x28
 800a28c:	6819      	ldr	r1, [r3, #0]
 800a28e:	a801      	add	r0, sp, #4
 800a290:	f000 f8aa 	bl	800a3e8 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800a294:	4b06      	ldr	r3, [pc, #24]	; (800a2b0 <RemoteConfig::HandleSetRconfig()+0x2c>)
 800a296:	69e2      	ldr	r2, [r4, #28]
 800a298:	6819      	ldr	r1, [r3, #0]
 800a29a:	a801      	add	r0, sp, #4
 800a29c:	f000 f8ba 	bl	800a414 <RemoteConfigParams::Load(char const*, unsigned int)>
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	a801      	add	r0, sp, #4
 800a2a4:	f000 f9d1 	bl	800a64a <RemoteConfigParams::Set(RemoteConfig*)>
 800a2a8:	b00a      	add	sp, #40	; 0x28
 800a2aa:	bd10      	pop	{r4, pc}
 800a2ac:	200159d8 	ldrdcs	r5, [r1], -r8
 800a2b0:	200000ec 	andcs	r0, r0, ip, ror #1

0800a2b4 <RemoteConfig::HandleSetNetworkTxt()>:
 800a2b4:	b510      	push	{r4, lr}
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	4b06      	ldr	r3, [pc, #24]	; (800a2d4 <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 800a2ba:	b09a      	sub	sp, #104	; 0x68
 800a2bc:	6819      	ldr	r1, [r3, #0]
 800a2be:	a801      	add	r0, sp, #4
 800a2c0:	f00a f8b8 	bl	8014434 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800a2c4:	4b04      	ldr	r3, [pc, #16]	; (800a2d8 <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 800a2c6:	69e2      	ldr	r2, [r4, #28]
 800a2c8:	6819      	ldr	r1, [r3, #0]
 800a2ca:	a801      	add	r0, sp, #4
 800a2cc:	f00a f8ca 	bl	8014464 <NetworkParams::Load(char const*, unsigned int)>
 800a2d0:	b01a      	add	sp, #104	; 0x68
 800a2d2:	bd10      	pop	{r4, pc}
 800a2d4:	200159d0 	ldrdcs	r5, [r1], -r0
 800a2d8:	200000ec 	andcs	r0, r0, ip, ror #1

0800a2dc <RemoteConfig::HandleSetArtnetTxt()>:
 800a2dc:	b510      	push	{r4, lr}
 800a2de:	4604      	mov	r4, r0
 800a2e0:	4b06      	ldr	r3, [pc, #24]	; (800a2fc <RemoteConfig::HandleSetArtnetTxt()+0x20>)
 800a2e2:	b0a4      	sub	sp, #144	; 0x90
 800a2e4:	6819      	ldr	r1, [r3, #0]
 800a2e6:	a801      	add	r0, sp, #4
 800a2e8:	f002 fd7c 	bl	800cde4 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800a2ec:	4b04      	ldr	r3, [pc, #16]	; (800a300 <RemoteConfig::HandleSetArtnetTxt()+0x24>)
 800a2ee:	69e2      	ldr	r2, [r4, #28]
 800a2f0:	6819      	ldr	r1, [r3, #0]
 800a2f2:	a801      	add	r0, sp, #4
 800a2f4:	f002 fda4 	bl	800ce40 <ArtNetParams::Load(char const*, unsigned int)>
 800a2f8:	b024      	add	sp, #144	; 0x90
 800a2fa:	bd10      	pop	{r4, pc}
 800a2fc:	200159e0 	andcs	r5, r1, r0, ror #19
 800a300:	200000ec 	andcs	r0, r0, ip, ror #1

0800a304 <RemoteConfig::HandleSetE131Txt()>:
 800a304:	b510      	push	{r4, lr}
 800a306:	4604      	mov	r4, r0
 800a308:	4b06      	ldr	r3, [pc, #24]	; (800a324 <RemoteConfig::HandleSetE131Txt()+0x20>)
 800a30a:	b08a      	sub	sp, #40	; 0x28
 800a30c:	6819      	ldr	r1, [r3, #0]
 800a30e:	a801      	add	r0, sp, #4
 800a310:	f004 f94c 	bl	800e5ac <E131Params::E131Params(E131ParamsStore*)>
 800a314:	4b04      	ldr	r3, [pc, #16]	; (800a328 <RemoteConfig::HandleSetE131Txt()+0x24>)
 800a316:	69e2      	ldr	r2, [r4, #28]
 800a318:	6819      	ldr	r1, [r3, #0]
 800a31a:	a801      	add	r0, sp, #4
 800a31c:	f004 f96a 	bl	800e5f4 <E131Params::Load(char const*, unsigned int)>
 800a320:	b00a      	add	sp, #40	; 0x28
 800a322:	bd10      	pop	{r4, pc}
 800a324:	200159e4 	andcs	r5, r1, r4, ror #19
 800a328:	200000ec 	andcs	r0, r0, ip, ror #1

0800a32c <RemoteConfig::HandleSetDevicesTxt()>:
 800a32c:	b510      	push	{r4, lr}
 800a32e:	4604      	mov	r4, r0
 800a330:	4b06      	ldr	r3, [pc, #24]	; (800a34c <RemoteConfig::HandleSetDevicesTxt()+0x20>)
 800a332:	b08c      	sub	sp, #48	; 0x30
 800a334:	6819      	ldr	r1, [r3, #0]
 800a336:	a801      	add	r0, sp, #4
 800a338:	f006 f8de 	bl	80104f8 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>
 800a33c:	4b04      	ldr	r3, [pc, #16]	; (800a350 <RemoteConfig::HandleSetDevicesTxt()+0x24>)
 800a33e:	69e2      	ldr	r2, [r4, #28]
 800a340:	6819      	ldr	r1, [r3, #0]
 800a342:	a801      	add	r0, sp, #4
 800a344:	f006 f906 	bl	8010554 <PixelDmxParams::Load(char const*, unsigned int)>
 800a348:	b00c      	add	sp, #48	; 0x30
 800a34a:	bd10      	pop	{r4, pc}
 800a34c:	200159e8 	andcs	r5, r1, r8, ror #19
 800a350:	200000ec 	andcs	r0, r0, ip, ror #1

0800a354 <RemoteConfig::HandleSetDisplayTxt()>:
 800a354:	b510      	push	{r4, lr}
 800a356:	4604      	mov	r4, r0
 800a358:	4b06      	ldr	r3, [pc, #24]	; (800a374 <RemoteConfig::HandleSetDisplayTxt()+0x20>)
 800a35a:	b08a      	sub	sp, #40	; 0x28
 800a35c:	6819      	ldr	r1, [r3, #0]
 800a35e:	4668      	mov	r0, sp
 800a360:	f00a ffd8 	bl	8015314 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800a364:	4b04      	ldr	r3, [pc, #16]	; (800a378 <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 800a366:	4668      	mov	r0, sp
 800a368:	69e2      	ldr	r2, [r4, #28]
 800a36a:	6819      	ldr	r1, [r3, #0]
 800a36c:	f00a ffec 	bl	8015348 <DisplayUdfParams::Load(char const*, unsigned int)>
 800a370:	b00a      	add	sp, #40	; 0x28
 800a372:	bd10      	pop	{r4, pc}
 800a374:	200159cc 	andcs	r5, r1, ip, asr #19
 800a378:	200000ec 	andcs	r0, r0, ip, ror #1

0800a37c <RemoteConfig::HandleFactory()>:
 800a37c:	b538      	push	{r3, r4, r5, lr}
 800a37e:	2400      	movs	r4, #0
 800a380:	4d04      	ldr	r5, [pc, #16]	; (800a394 <RemoteConfig::HandleFactory()+0x18>)
 800a382:	4621      	mov	r1, r4
 800a384:	6828      	ldr	r0, [r5, #0]
 800a386:	3401      	adds	r4, #1
 800a388:	f007 ff24 	bl	80121d4 <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 800a38c:	2c1c      	cmp	r4, #28
 800a38e:	d1f8      	bne.n	800a382 <RemoteConfig::HandleFactory()+0x6>
 800a390:	bd38      	pop	{r3, r4, r5, pc}
 800a392:	bf00      	nop
 800a394:	200159c4 	andcs	r5, r1, r4, asr #19

0800a398 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800a398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a39a:	460b      	mov	r3, r1
 800a39c:	8885      	ldrh	r5, [r0, #4]
 800a39e:	88c1      	ldrh	r1, [r0, #6]
 800a3a0:	42a9      	cmp	r1, r5
 800a3a2:	d214      	bcs.n	800a3ce <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800a3a4:	4604      	mov	r4, r0
 800a3a6:	6800      	ldr	r0, [r0, #0]
 800a3a8:	1a6d      	subs	r5, r5, r1
 800a3aa:	4408      	add	r0, r1
 800a3ac:	7a21      	ldrb	r1, [r4, #8]
 800a3ae:	b91a      	cbnz	r2, 800a3b8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800a3b0:	b919      	cbnz	r1, 800a3ba <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800a3b2:	4a0a      	ldr	r2, [pc, #40]	; (800a3dc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800a3b4:	9100      	str	r1, [sp, #0]
 800a3b6:	e002      	b.n	800a3be <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800a3b8:	b159      	cbz	r1, 800a3d2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800a3ba:	9200      	str	r2, [sp, #0]
 800a3bc:	4a08      	ldr	r2, [pc, #32]	; (800a3e0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800a3be:	4629      	mov	r1, r5
 800a3c0:	f7ff fa26 	bl	8009810 <snprintf>
 800a3c4:	4285      	cmp	r5, r0
 800a3c6:	bfa2      	ittt	ge
 800a3c8:	88e3      	ldrhge	r3, [r4, #6]
 800a3ca:	181b      	addge	r3, r3, r0
 800a3cc:	80e3      	strhge	r3, [r4, #6]
 800a3ce:	b003      	add	sp, #12
 800a3d0:	bd30      	pop	{r4, r5, pc}
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	9200      	str	r2, [sp, #0]
 800a3d6:	4a03      	ldr	r2, [pc, #12]	; (800a3e4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800a3d8:	e7f1      	b.n	800a3be <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800a3da:	bf00      	nop
 800a3dc:	08019181 	stmdaeq	r1, {r0, r7, r8, ip, pc}
 800a3e0:	08019178 	stmdaeq	r1, {r3, r4, r5, r6, r8, ip, pc}
 800a3e4:	08019182 	stmdaeq	r1, {r1, r7, r8, ip, pc}

0800a3e8 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 800a3e8:	b510      	push	{r4, lr}
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	2220      	movs	r2, #32
 800a3ee:	f840 1b04 	str.w	r1, [r0], #4
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	f00c fa02 	bl	80167fc <memset>
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	bd10      	pop	{r4, pc}

0800a3fc <RemoteConfigParams::Load()>:
 800a3fc:	b508      	push	{r3, lr}
 800a3fe:	2300      	movs	r3, #0
 800a400:	4601      	mov	r1, r0
 800a402:	6043      	str	r3, [r0, #4]
 800a404:	6800      	ldr	r0, [r0, #0]
 800a406:	b120      	cbz	r0, 800a412 <RemoteConfigParams::Load()+0x16>
 800a408:	6803      	ldr	r3, [r0, #0]
 800a40a:	3104      	adds	r1, #4
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	4798      	blx	r3
 800a410:	2001      	movs	r0, #1
 800a412:	bd08      	pop	{r3, pc}

0800a414 <RemoteConfigParams::Load(char const*, unsigned int)>:
 800a414:	2300      	movs	r3, #0
 800a416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a418:	460d      	mov	r5, r1
 800a41a:	4616      	mov	r6, r2
 800a41c:	4604      	mov	r4, r0
 800a41e:	6043      	str	r3, [r0, #4]
 800a420:	4602      	mov	r2, r0
 800a422:	490a      	ldr	r1, [pc, #40]	; (800a44c <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 800a424:	4668      	mov	r0, sp
 800a426:	f00b fb63 	bl	8015af0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800a42a:	4632      	mov	r2, r6
 800a42c:	4629      	mov	r1, r5
 800a42e:	4668      	mov	r0, sp
 800a430:	f00b fb62 	bl	8015af8 <ReadConfigFile::Read(char const*, unsigned int)>
 800a434:	4621      	mov	r1, r4
 800a436:	f851 0b04 	ldr.w	r0, [r1], #4
 800a43a:	6803      	ldr	r3, [r0, #0]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	4798      	blx	r3
 800a440:	4668      	mov	r0, sp
 800a442:	f00b fb58 	bl	8015af6 <ReadConfigFile::~ReadConfigFile()>
 800a446:	b002      	add	sp, #8
 800a448:	bd70      	pop	{r4, r5, r6, pc}
 800a44a:	bf00      	nop
 800a44c:	0800a50d 	stmdaeq	r0, {r0, r2, r3, r8, sl, sp, pc}

0800a450 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 800a450:	6843      	ldr	r3, [r0, #4]
 800a452:	b111      	cbz	r1, 800a45a <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 800a454:	4313      	orrs	r3, r2
 800a456:	6043      	str	r3, [r0, #4]
 800a458:	4770      	bx	lr
 800a45a:	ea23 0302 	bic.w	r3, r3, r2
 800a45e:	e7fa      	b.n	800a456 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

0800a460 <RemoteConfigParams::callbackFunction(char const*)>:
 800a460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a462:	460d      	mov	r5, r1
 800a464:	4604      	mov	r4, r0
 800a466:	4923      	ldr	r1, [pc, #140]	; (800a4f4 <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 800a468:	4628      	mov	r0, r5
 800a46a:	f10d 0203 	add.w	r2, sp, #3
 800a46e:	f00b fc7b 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a472:	b940      	cbnz	r0, 800a486 <RemoteConfigParams::callbackFunction(char const*)+0x26>
 800a474:	2201      	movs	r2, #1
 800a476:	4620      	mov	r0, r4
 800a478:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800a47c:	b003      	add	sp, #12
 800a47e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a482:	f7ff bfe5 	b.w	800a450 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 800a486:	4628      	mov	r0, r5
 800a488:	491b      	ldr	r1, [pc, #108]	; (800a4f8 <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 800a48a:	f10d 0203 	add.w	r2, sp, #3
 800a48e:	f00b fc6b 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a492:	b908      	cbnz	r0, 800a498 <RemoteConfigParams::callbackFunction(char const*)+0x38>
 800a494:	2202      	movs	r2, #2
 800a496:	e7ee      	b.n	800a476 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800a498:	4628      	mov	r0, r5
 800a49a:	4918      	ldr	r1, [pc, #96]	; (800a4fc <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 800a49c:	f10d 0203 	add.w	r2, sp, #3
 800a4a0:	f00b fc62 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a4a4:	b908      	cbnz	r0, 800a4aa <RemoteConfigParams::callbackFunction(char const*)+0x4a>
 800a4a6:	2204      	movs	r2, #4
 800a4a8:	e7e5      	b.n	800a476 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	4914      	ldr	r1, [pc, #80]	; (800a500 <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 800a4ae:	f10d 0203 	add.w	r2, sp, #3
 800a4b2:	f00b fc59 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a4b6:	b908      	cbnz	r0, 800a4bc <RemoteConfigParams::callbackFunction(char const*)+0x5c>
 800a4b8:	2208      	movs	r2, #8
 800a4ba:	e7dc      	b.n	800a476 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800a4bc:	4628      	mov	r0, r5
 800a4be:	4911      	ldr	r1, [pc, #68]	; (800a504 <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 800a4c0:	f10d 0203 	add.w	r2, sp, #3
 800a4c4:	f00b fc50 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a4c8:	b908      	cbnz	r0, 800a4ce <RemoteConfigParams::callbackFunction(char const*)+0x6e>
 800a4ca:	2220      	movs	r2, #32
 800a4cc:	e7d3      	b.n	800a476 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800a4ce:	2317      	movs	r3, #23
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	9301      	str	r3, [sp, #4]
 800a4d4:	490c      	ldr	r1, [pc, #48]	; (800a508 <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 800a4d6:	ab01      	add	r3, sp, #4
 800a4d8:	f104 020c 	add.w	r2, r4, #12
 800a4dc:	f00b fb40 	bl	8015b60 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a4e0:	b930      	cbnz	r0, 800a4f0 <RemoteConfigParams::callbackFunction(char const*)+0x90>
 800a4e2:	9b01      	ldr	r3, [sp, #4]
 800a4e4:	4423      	add	r3, r4
 800a4e6:	7318      	strb	r0, [r3, #12]
 800a4e8:	6863      	ldr	r3, [r4, #4]
 800a4ea:	f043 0310 	orr.w	r3, r3, #16
 800a4ee:	6063      	str	r3, [r4, #4]
 800a4f0:	b003      	add	sp, #12
 800a4f2:	bd30      	pop	{r4, r5, pc}
 800a4f4:	0801958d 	stmdaeq	r1, {r0, r2, r3, r7, r8, sl, ip, pc}
 800a4f8:	080195ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, sl, ip, pc}
 800a4fc:	080195bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, sl, ip, pc}
 800a500:	080195ca 	stmdaeq	r1, {r1, r3, r6, r7, r8, sl, ip, pc}
 800a504:	080195d8 	stmdaeq	r1, {r3, r4, r6, r7, r8, sl, ip, pc}
 800a508:	080195a1 	stmdaeq	r1, {r0, r5, r7, r8, sl, ip, pc}

0800a50c <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 800a50c:	f7ff bfa8 	b.w	800a460 <RemoteConfigParams::callbackFunction(char const*)>

0800a510 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 800a510:	b570      	push	{r4, r5, r6, lr}
 800a512:	4604      	mov	r4, r0
 800a514:	4615      	mov	r5, r2
 800a516:	461e      	mov	r6, r3
 800a518:	b086      	sub	sp, #24
 800a51a:	3004      	adds	r0, #4
 800a51c:	2900      	cmp	r1, #0
 800a51e:	d041      	beq.n	800a5a4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x94>
 800a520:	2220      	movs	r2, #32
 800a522:	f00c f954 	bl	80167ce <memmove>
 800a526:	4633      	mov	r3, r6
 800a528:	462a      	mov	r2, r5
 800a52a:	4937      	ldr	r1, [pc, #220]	; (800a608 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800a52c:	a803      	add	r0, sp, #12
 800a52e:	f00b fa3f 	bl	80159b0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800a532:	6862      	ldr	r2, [r4, #4]
 800a534:	4935      	ldr	r1, [pc, #212]	; (800a60c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800a536:	f002 0201 	and.w	r2, r2, #1
 800a53a:	a803      	add	r0, sp, #12
 800a53c:	f7ff ff2c 	bl	800a398 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800a540:	6862      	ldr	r2, [r4, #4]
 800a542:	4933      	ldr	r1, [pc, #204]	; (800a610 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800a544:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800a548:	a803      	add	r0, sp, #12
 800a54a:	f7ff ff25 	bl	800a398 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800a54e:	6862      	ldr	r2, [r4, #4]
 800a550:	4930      	ldr	r1, [pc, #192]	; (800a614 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 800a552:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800a556:	a803      	add	r0, sp, #12
 800a558:	f7ff ff1e 	bl	800a398 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800a55c:	6862      	ldr	r2, [r4, #4]
 800a55e:	492e      	ldr	r1, [pc, #184]	; (800a618 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 800a560:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800a564:	a803      	add	r0, sp, #12
 800a566:	f7ff ff17 	bl	800a398 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800a56a:	6862      	ldr	r2, [r4, #4]
 800a56c:	492b      	ldr	r1, [pc, #172]	; (800a61c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 800a56e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800a572:	a803      	add	r0, sp, #12
 800a574:	f7ff ff10 	bl	800a398 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800a578:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800a57c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800a580:	6862      	ldr	r2, [r4, #4]
 800a582:	42ab      	cmp	r3, r5
 800a584:	d223      	bcs.n	800a5ce <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbe>
 800a586:	9803      	ldr	r0, [sp, #12]
 800a588:	06d2      	lsls	r2, r2, #27
 800a58a:	4418      	add	r0, r3
 800a58c:	eba5 0503 	sub.w	r5, r5, r3
 800a590:	f104 040c 	add.w	r4, r4, #12
 800a594:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800a598:	d40b      	bmi.n	800a5b2 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 800a59a:	b95b      	cbnz	r3, 800a5b4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa4>
 800a59c:	4b20      	ldr	r3, [pc, #128]	; (800a620 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800a59e:	4a21      	ldr	r2, [pc, #132]	; (800a624 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800a5a0:	9400      	str	r4, [sp, #0]
 800a5a2:	e00a      	b.n	800a5ba <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800a5a4:	6823      	ldr	r3, [r4, #0]
 800a5a6:	4601      	mov	r1, r0
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	68d2      	ldr	r2, [r2, #12]
 800a5ae:	4790      	blx	r2
 800a5b0:	e7b9      	b.n	800a526 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 800a5b2:	b32b      	cbz	r3, 800a600 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf0>
 800a5b4:	4b1a      	ldr	r3, [pc, #104]	; (800a620 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800a5b6:	4a1c      	ldr	r2, [pc, #112]	; (800a628 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 800a5b8:	9400      	str	r4, [sp, #0]
 800a5ba:	4629      	mov	r1, r5
 800a5bc:	f7ff f928 	bl	8009810 <snprintf>
 800a5c0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800a5c4:	4285      	cmp	r5, r0
 800a5c6:	bfa4      	itt	ge
 800a5c8:	181b      	addge	r3, r3, r0
 800a5ca:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800a5ce:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800a5d2:	b17b      	cbz	r3, 800a5f4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe4>
 800a5d4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800a5d8:	9b03      	ldr	r3, [sp, #12]
 800a5da:	4413      	add	r3, r2
 800a5dc:	227d      	movs	r2, #125	; 0x7d
 800a5de:	f803 2c01 	strb.w	r2, [r3, #-1]
 800a5e2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800a5e6:	9903      	ldr	r1, [sp, #12]
 800a5e8:	54ca      	strb	r2, [r1, r3]
 800a5ea:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	f8ad 3012 	strh.w	r3, [sp, #18]
 800a5f4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800a5f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5fa:	601a      	str	r2, [r3, #0]
 800a5fc:	b006      	add	sp, #24
 800a5fe:	bd70      	pop	{r4, r5, r6, pc}
 800a600:	4b07      	ldr	r3, [pc, #28]	; (800a620 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800a602:	4a0a      	ldr	r2, [pc, #40]	; (800a62c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 800a604:	9400      	str	r4, [sp, #0]
 800a606:	e7d8      	b.n	800a5ba <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800a608:	08019595 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl, ip, pc}
 800a60c:	0801958d 	stmdaeq	r1, {r0, r2, r3, r7, r8, sl, ip, pc}
 800a610:	080195ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, sl, ip, pc}
 800a614:	080195bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, sl, ip, pc}
 800a618:	080195ca 	stmdaeq	r1, {r1, r3, r6, r7, r8, sl, ip, pc}
 800a61c:	080195d8 	stmdaeq	r1, {r3, r4, r6, r7, r8, sl, ip, pc}
 800a620:	080195a1 	stmdaeq	r1, {r0, r5, r7, r8, sl, ip, pc}
 800a624:	08019194 	stmdaeq	r1, {r2, r4, r7, r8, ip, pc}
 800a628:	08019189 	stmdaeq	r1, {r0, r3, r7, r8, ip, pc}
 800a62c:	08019195 	stmdaeq	r1, {r0, r2, r4, r7, r8, ip, pc}

0800a630 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 800a630:	b513      	push	{r0, r1, r4, lr}
 800a632:	6804      	ldr	r4, [r0, #0]
 800a634:	b914      	cbnz	r4, 800a63c <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800a636:	601c      	str	r4, [r3, #0]
 800a638:	b002      	add	sp, #8
 800a63a:	bd10      	pop	{r4, pc}
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	4613      	mov	r3, r2
 800a640:	460a      	mov	r2, r1
 800a642:	2100      	movs	r1, #0
 800a644:	f7ff ff64 	bl	800a510 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 800a648:	e7f6      	b.n	800a638 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800a64a <RemoteConfigParams::Set(RemoteConfig*)>:
 800a64a:	b538      	push	{r3, r4, r5, lr}
 800a64c:	460c      	mov	r4, r1
 800a64e:	4605      	mov	r5, r0
 800a650:	6841      	ldr	r1, [r0, #4]
 800a652:	4620      	mov	r0, r4
 800a654:	f001 0101 	and.w	r1, r1, #1
 800a658:	f7ff fc18 	bl	8009e8c <RemoteConfig::SetDisable(bool)>
 800a65c:	686b      	ldr	r3, [r5, #4]
 800a65e:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800a662:	7362      	strb	r2, [r4, #13]
 800a664:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800a668:	73a2      	strb	r2, [r4, #14]
 800a66a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800a66e:	73e2      	strb	r2, [r4, #15]
 800a670:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800a674:	06db      	lsls	r3, r3, #27
 800a676:	7422      	strb	r2, [r4, #16]
 800a678:	d506      	bpl.n	800a688 <RemoteConfigParams::Set(RemoteConfig*)+0x3e>
 800a67a:	4620      	mov	r0, r4
 800a67c:	f105 010c 	add.w	r1, r5, #12
 800a680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a684:	f7ff bc22 	b.w	8009ecc <RemoteConfig::SetDisplayName(char const*)>
 800a688:	bd38      	pop	{r3, r4, r5, pc}

0800a68a <RemoteConfigParams::Dump()>:
 800a68a:	4770      	bx	lr

0800a68c <RemoteConfig::HandleReboot()>:
 800a68c:	7b83      	ldrb	r3, [r0, #14]
 800a68e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a690:	2b00      	cmp	r3, #0
 800a692:	d03c      	beq.n	800a70e <RemoteConfig::HandleReboot()+0x82>
 800a694:	2301      	movs	r3, #1
 800a696:	4c1f      	ldr	r4, [pc, #124]	; (800a714 <RemoteConfig::HandleReboot()+0x88>)
 800a698:	7443      	strb	r3, [r0, #17]
 800a69a:	6825      	ldr	r5, [r4, #0]
 800a69c:	69a8      	ldr	r0, [r5, #24]
 800a69e:	b138      	cbz	r0, 800a6b0 <RemoteConfig::HandleReboot()+0x24>
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	6803      	ldr	r3, [r0, #0]
 800a6a4:	7429      	strb	r1, [r5, #16]
 800a6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a8:	4798      	blx	r3
 800a6aa:	4b1b      	ldr	r3, [pc, #108]	; (800a718 <RemoteConfig::HandleReboot()+0x8c>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	606b      	str	r3, [r5, #4]
 800a6b0:	4d1a      	ldr	r5, [pc, #104]	; (800a71c <RemoteConfig::HandleReboot()+0x90>)
 800a6b2:	6828      	ldr	r0, [r5, #0]
 800a6b4:	f007 fe12 	bl	80122dc <SpiFlashStore::Flash()>
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d1fa      	bne.n	800a6b2 <RemoteConfig::HandleReboot()+0x26>
 800a6bc:	4b18      	ldr	r3, [pc, #96]	; (800a720 <RemoteConfig::HandleReboot()+0x94>)
 800a6be:	6818      	ldr	r0, [r3, #0]
 800a6c0:	f009 fb82 	bl	8013dc8 <Network::Shutdown()>
 800a6c4:	4817      	ldr	r0, [pc, #92]	; (800a724 <RemoteConfig::HandleReboot()+0x98>)
 800a6c6:	f7ff f87b 	bl	80097c0 <printf>
 800a6ca:	6823      	ldr	r3, [r4, #0]
 800a6cc:	6998      	ldr	r0, [r3, #24]
 800a6ce:	b110      	cbz	r0, 800a6d6 <RemoteConfig::HandleReboot()+0x4a>
 800a6d0:	6803      	ldr	r3, [r0, #0]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	4798      	blx	r3
 800a6d6:	6824      	ldr	r4, [r4, #0]
 800a6d8:	4913      	ldr	r1, [pc, #76]	; (800a728 <RemoteConfig::HandleReboot()+0x9c>)
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f7fe f8a4 	bl	8008828 <Display::TextStatus(char const*)>
 800a6e0:	7c63      	ldrb	r3, [r4, #17]
 800a6e2:	b183      	cbz	r3, 800a706 <RemoteConfig::HandleReboot()+0x7a>
 800a6e4:	f64b 7312 	movw	r3, #48914	; 0xbf12
 800a6e8:	f8ad 3004 	strh.w	r3, [sp, #4]
 800a6ec:	23bf      	movs	r3, #191	; 0xbf
 800a6ee:	7a20      	ldrb	r0, [r4, #8]
 800a6f0:	f88d 3006 	strb.w	r3, [sp, #6]
 800a6f4:	f00d f996 	bl	8017a24 <gd32_i2c_set_address>
 800a6f8:	68e0      	ldr	r0, [r4, #12]
 800a6fa:	f00d f98b 	bl	8017a14 <gd32_i2c_set_baudrate>
 800a6fe:	2103      	movs	r1, #3
 800a700:	a801      	add	r0, sp, #4
 800a702:	f00d f995 	bl	8017a30 <gd32_i2c_write>
 800a706:	4b09      	ldr	r3, [pc, #36]	; (800a72c <RemoteConfig::HandleReboot()+0xa0>)
 800a708:	6818      	ldr	r0, [r3, #0]
 800a70a:	f00b ff61 	bl	80165d0 <Hardware::Reboot()>
 800a70e:	b003      	add	sp, #12
 800a710:	bd30      	pop	{r4, r5, pc}
 800a712:	bf00      	nop
 800a714:	2001d8ac 	andcs	sp, r1, ip, lsr #17
 800a718:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4
 800a71c:	200159c4 	andcs	r5, r1, r4, asr #19
 800a720:	2001d2d4 	ldrdcs	sp, [r1], -r4
 800a724:	0801919c 	stmdaeq	r1, {r2, r3, r4, r7, r8, ip, pc}
 800a728:	080191ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, ip, pc}
 800a72c:	2001d99c 	mulcs	r1, ip, r9

0800a730 <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 800a730:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a734:	2000      	movs	r0, #0
 800a736:	4d12      	ldr	r5, [pc, #72]	; (800a780 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 800a738:	f10d 0c04 	add.w	ip, sp, #4
 800a73c:	6814      	ldr	r4, [r2, #0]
 800a73e:	7d2b      	ldrb	r3, [r5, #20]
 800a740:	692e      	ldr	r6, [r5, #16]
 800a742:	42a3      	cmp	r3, r4
 800a744:	bf34      	ite	cc
 800a746:	4664      	movcc	r4, ip
 800a748:	4614      	movcs	r4, r2
 800a74a:	9301      	str	r3, [sp, #4]
 800a74c:	6827      	ldr	r7, [r4, #0]
 800a74e:	460c      	mov	r4, r1
 800a750:	3e01      	subs	r6, #1
 800a752:	440f      	add	r7, r1
 800a754:	42bc      	cmp	r4, r7
 800a756:	d101      	bne.n	800a75c <RemoteConfig::GetIndex(void const*, unsigned int&)+0x2c>
 800a758:	6013      	str	r3, [r2, #0]
 800a75a:	e00c      	b.n	800a776 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x46>
 800a75c:	f894 8000 	ldrb.w	r8, [r4]
 800a760:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 800a764:	45f0      	cmp	r8, lr
 800a766:	d009      	beq.n	800a77c <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 800a768:	3001      	adds	r0, #1
 800a76a:	2806      	cmp	r0, #6
 800a76c:	f105 051c 	add.w	r5, r5, #28
 800a770:	d1e4      	bne.n	800a73c <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 800a772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a776:	b002      	add	sp, #8
 800a778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a77c:	3401      	adds	r4, #1
 800a77e:	e7e9      	b.n	800a754 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 800a780:	08019200 	stmdaeq	r1, {r9, ip, pc}

0800a784 <RemoteConfig::PlatformHandleTftpSet()>:
 800a784:	f890 1020 	ldrb.w	r1, [r0, #32]
 800a788:	b109      	cbz	r1, 800a78e <RemoteConfig::PlatformHandleTftpSet()+0xa>
 800a78a:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 800a78e:	2002      	movs	r0, #2
 800a790:	f00c ba2c 	b.w	8016bec <bkp_data_write>

0800a794 <RemoteConfig::PlatformHandleTftpGet()>:
 800a794:	b510      	push	{r4, lr}
 800a796:	4604      	mov	r4, r0
 800a798:	2002      	movs	r0, #2
 800a79a:	f00c fa3d 	bl	8016c18 <bkp_data_read>
 800a79e:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 800a7a2:	1ac3      	subs	r3, r0, r3
 800a7a4:	4258      	negs	r0, r3
 800a7a6:	4158      	adcs	r0, r3
 800a7a8:	f884 0020 	strb.w	r0, [r4, #32]
 800a7ac:	bd10      	pop	{r4, pc}

0800a7ae <strcmp>:
 800a7ae:	1e43      	subs	r3, r0, #1
 800a7b0:	3901      	subs	r1, #1
 800a7b2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800a7b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a7ba:	4290      	cmp	r0, r2
 800a7bc:	d001      	beq.n	800a7c2 <strcmp+0x14>
 800a7be:	1a80      	subs	r0, r0, r2
 800a7c0:	e001      	b.n	800a7c6 <strcmp+0x18>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	d1f5      	bne.n	800a7b2 <strcmp+0x4>
 800a7c6:	4770      	bx	lr

0800a7c8 <strcasecmp>:
 800a7c8:	b530      	push	{r4, r5, lr}
 800a7ca:	1e42      	subs	r2, r0, #1
 800a7cc:	3901      	subs	r1, #1
 800a7ce:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800a7d2:	4604      	mov	r4, r0
 800a7d4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a7d8:	2b19      	cmp	r3, #25
 800a7da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a7de:	bf98      	it	ls
 800a7e0:	f100 0420 	addls.w	r4, r0, #32
 800a7e4:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 800a7e8:	2d19      	cmp	r5, #25
 800a7ea:	bf98      	it	ls
 800a7ec:	3320      	addls	r3, #32
 800a7ee:	42a3      	cmp	r3, r4
 800a7f0:	d001      	beq.n	800a7f6 <strcasecmp+0x2e>
 800a7f2:	1ae0      	subs	r0, r4, r3
 800a7f4:	e001      	b.n	800a7fa <strcasecmp+0x32>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d1e9      	bne.n	800a7ce <strcasecmp+0x6>
 800a7fa:	bd30      	pop	{r4, r5, pc}

0800a7fc <PropertiesConfig::EnableJSON(bool)>:
 800a7fc:	4a04      	ldr	r2, [pc, #16]	; (800a810 <PropertiesConfig::EnableJSON(bool)+0x14>)
 800a7fe:	7813      	ldrb	r3, [r2, #0]
 800a800:	b118      	cbz	r0, 800a80a <PropertiesConfig::EnableJSON(bool)+0xe>
 800a802:	f043 0301 	orr.w	r3, r3, #1
 800a806:	7013      	strb	r3, [r2, #0]
 800a808:	4770      	bx	lr
 800a80a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a80e:	e7fa      	b.n	800a806 <PropertiesConfig::EnableJSON(bool)+0xa>
 800a810:	2001d8a8 	andcs	sp, r1, r8, lsr #17

0800a814 <HttpDaemon::HttpDaemon()>:
 800a814:	4a08      	ldr	r2, [pc, #32]	; (800a838 <HttpDaemon::HttpDaemon()+0x24>)
 800a816:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a81a:	6002      	str	r2, [r0, #0]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f44f 7c02 	mov.w	ip, #520	; 0x208
 800a822:	e9c0 1204 	strd	r1, r2, [r0, #16]
 800a826:	2102      	movs	r1, #2
 800a828:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800a82c:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800a830:	e9c0 2208 	strd	r2, r2, [r0, #32]
 800a834:	60c2      	str	r2, [r0, #12]
 800a836:	4770      	bx	lr
 800a838:	0801950d 	stmdaeq	r1, {r0, r2, r3, r8, sl, ip, pc}

0800a83c <HttpDaemon::Start()>:
 800a83c:	4b04      	ldr	r3, [pc, #16]	; (800a850 <HttpDaemon::Start()+0x14>)
 800a83e:	b510      	push	{r4, lr}
 800a840:	2150      	movs	r1, #80	; 0x50
 800a842:	4604      	mov	r4, r0
 800a844:	6818      	ldr	r0, [r3, #0]
 800a846:	f009 fde9 	bl	801441c <Network::TcpBegin(unsigned short)>
 800a84a:	6120      	str	r0, [r4, #16]
 800a84c:	bd10      	pop	{r4, pc}
 800a84e:	bf00      	nop
 800a850:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800a854 <HttpDaemon::ParseMethod(char*)>:
 800a854:	b538      	push	{r3, r4, r5, lr}
 800a856:	4604      	mov	r4, r0
 800a858:	4608      	mov	r0, r1
 800a85a:	491a      	ldr	r1, [pc, #104]	; (800a8c4 <HttpDaemon::ParseMethod(char*)+0x70>)
 800a85c:	f00b fff8 	bl	8016850 <strtok>
 800a860:	4605      	mov	r5, r0
 800a862:	b360      	cbz	r0, 800a8be <HttpDaemon::ParseMethod(char*)+0x6a>
 800a864:	4918      	ldr	r1, [pc, #96]	; (800a8c8 <HttpDaemon::ParseMethod(char*)+0x74>)
 800a866:	f7ff ffa2 	bl	800a7ae <strcmp>
 800a86a:	b128      	cbz	r0, 800a878 <HttpDaemon::ParseMethod(char*)+0x24>
 800a86c:	4628      	mov	r0, r5
 800a86e:	4917      	ldr	r1, [pc, #92]	; (800a8cc <HttpDaemon::ParseMethod(char*)+0x78>)
 800a870:	f7ff ff9d 	bl	800a7ae <strcmp>
 800a874:	bb18      	cbnz	r0, 800a8be <HttpDaemon::ParseMethod(char*)+0x6a>
 800a876:	2001      	movs	r0, #1
 800a878:	61e0      	str	r0, [r4, #28]
 800a87a:	4912      	ldr	r1, [pc, #72]	; (800a8c4 <HttpDaemon::ParseMethod(char*)+0x70>)
 800a87c:	2000      	movs	r0, #0
 800a87e:	f00b ffe7 	bl	8016850 <strtok>
 800a882:	b910      	cbnz	r0, 800a88a <HttpDaemon::ParseMethod(char*)+0x36>
 800a884:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800a888:	bd38      	pop	{r3, r4, r5, pc}
 800a88a:	6060      	str	r0, [r4, #4]
 800a88c:	4910      	ldr	r1, [pc, #64]	; (800a8d0 <HttpDaemon::ParseMethod(char*)+0x7c>)
 800a88e:	2000      	movs	r0, #0
 800a890:	f00b ffde 	bl	8016850 <strtok>
 800a894:	2800      	cmp	r0, #0
 800a896:	d0f5      	beq.n	800a884 <HttpDaemon::ParseMethod(char*)+0x30>
 800a898:	490e      	ldr	r1, [pc, #56]	; (800a8d4 <HttpDaemon::ParseMethod(char*)+0x80>)
 800a89a:	f7ff ff88 	bl	800a7ae <strcmp>
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	d1f0      	bne.n	800a884 <HttpDaemon::ParseMethod(char*)+0x30>
 800a8a2:	490d      	ldr	r1, [pc, #52]	; (800a8d8 <HttpDaemon::ParseMethod(char*)+0x84>)
 800a8a4:	f00b ffd4 	bl	8016850 <strtok>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d0eb      	beq.n	800a884 <HttpDaemon::ParseMethod(char*)+0x30>
 800a8ac:	490b      	ldr	r1, [pc, #44]	; (800a8dc <HttpDaemon::ParseMethod(char*)+0x88>)
 800a8ae:	f7ff ff7e 	bl	800a7ae <strcmp>
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	f240 10f9 	movw	r0, #505	; 0x1f9
 800a8b8:	bf08      	it	eq
 800a8ba:	20c8      	moveq	r0, #200	; 0xc8
 800a8bc:	e7e4      	b.n	800a888 <HttpDaemon::ParseMethod(char*)+0x34>
 800a8be:	f240 10f5 	movw	r0, #501	; 0x1f5
 800a8c2:	e7e1      	b.n	800a888 <HttpDaemon::ParseMethod(char*)+0x34>
 800a8c4:	0801b8c3 	stmdaeq	r1, {r0, r1, r6, r7, fp, ip, sp, pc}
 800a8c8:	080192a8 	stmdaeq	r1, {r3, r5, r7, r9, ip, pc}
 800a8cc:	080192ac 	stmdaeq	r1, {r2, r3, r5, r7, r9, ip, pc}
 800a8d0:	08019316 	stmdaeq	r1, {r1, r2, r4, r8, r9, ip, pc}
 800a8d4:	080192b1 	stmdaeq	r1, {r0, r4, r5, r7, r9, ip, pc}
 800a8d8:	080192b6 	stmdaeq	r1, {r1, r2, r4, r5, r7, r9, ip, pc}
 800a8dc:	080192b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r9, ip, pc}

0800a8e0 <HttpDaemon::ParseHeaderField(char*)>:
 800a8e0:	b538      	push	{r3, r4, r5, lr}
 800a8e2:	4605      	mov	r5, r0
 800a8e4:	4608      	mov	r0, r1
 800a8e6:	491d      	ldr	r1, [pc, #116]	; (800a95c <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 800a8e8:	f00b ffb2 	bl	8016850 <strtok>
 800a8ec:	4604      	mov	r4, r0
 800a8ee:	b910      	cbnz	r0, 800a8f6 <HttpDaemon::ParseHeaderField(char*)+0x16>
 800a8f0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800a8f4:	bd38      	pop	{r3, r4, r5, pc}
 800a8f6:	491a      	ldr	r1, [pc, #104]	; (800a960 <HttpDaemon::ParseHeaderField(char*)+0x80>)
 800a8f8:	f7ff ff66 	bl	800a7c8 <strcasecmp>
 800a8fc:	b970      	cbnz	r0, 800a91c <HttpDaemon::ParseHeaderField(char*)+0x3c>
 800a8fe:	4919      	ldr	r1, [pc, #100]	; (800a964 <HttpDaemon::ParseHeaderField(char*)+0x84>)
 800a900:	f00b ffa6 	bl	8016850 <strtok>
 800a904:	2800      	cmp	r0, #0
 800a906:	d0f3      	beq.n	800a8f0 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800a908:	4917      	ldr	r1, [pc, #92]	; (800a968 <HttpDaemon::ParseHeaderField(char*)+0x88>)
 800a90a:	f7ff ff50 	bl	800a7ae <strcmp>
 800a90e:	b108      	cbz	r0, 800a914 <HttpDaemon::ParseHeaderField(char*)+0x34>
 800a910:	20c8      	movs	r0, #200	; 0xc8
 800a912:	e7ef      	b.n	800a8f4 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800a914:	2301      	movs	r3, #1
 800a916:	f885 3020 	strb.w	r3, [r5, #32]
 800a91a:	e7f9      	b.n	800a910 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800a91c:	4620      	mov	r0, r4
 800a91e:	4913      	ldr	r1, [pc, #76]	; (800a96c <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 800a920:	f7ff ff52 	bl	800a7c8 <strcasecmp>
 800a924:	4604      	mov	r4, r0
 800a926:	2800      	cmp	r0, #0
 800a928:	d1f2      	bne.n	800a910 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800a92a:	4911      	ldr	r1, [pc, #68]	; (800a970 <HttpDaemon::ParseHeaderField(char*)+0x90>)
 800a92c:	f00b ff90 	bl	8016850 <strtok>
 800a930:	2800      	cmp	r0, #0
 800a932:	d0dd      	beq.n	800a8f0 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800a934:	1e42      	subs	r2, r0, #1
 800a936:	4623      	mov	r3, r4
 800a938:	200a      	movs	r0, #10
 800a93a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800a93e:	b909      	cbnz	r1, 800a944 <HttpDaemon::ParseHeaderField(char*)+0x64>
 800a940:	84eb      	strh	r3, [r5, #38]	; 0x26
 800a942:	e7e5      	b.n	800a910 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800a944:	3930      	subs	r1, #48	; 0x30
 800a946:	2909      	cmp	r1, #9
 800a948:	d8d2      	bhi.n	800a8f0 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800a94a:	fb00 1303 	mla	r3, r0, r3, r1
 800a94e:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800a952:	d9f2      	bls.n	800a93a <HttpDaemon::ParseHeaderField(char*)+0x5a>
 800a954:	f240 109d 	movw	r0, #413	; 0x19d
 800a958:	e7cc      	b.n	800a8f4 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800a95a:	bf00      	nop
 800a95c:	080192bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r9, ip, pc}
 800a960:	080192bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r9, ip, pc}
 800a964:	080192cc 	stmdaeq	r1, {r2, r3, r6, r7, r9, ip, pc}
 800a968:	080192cf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r9, ip, pc}
 800a96c:	080192e0 	stmdaeq	r1, {r5, r6, r7, r9, ip, pc}
 800a970:	0801b8c3 	stmdaeq	r1, {r0, r1, r6, r7, fp, ip, sp, pc}

0800a974 <HttpDaemon::ParseRequest()>:
 800a974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a976:	2400      	movs	r4, #0
 800a978:	4605      	mov	r5, r0
 800a97a:	4622      	mov	r2, r4
 800a97c:	4626      	mov	r6, r4
 800a97e:	68c1      	ldr	r1, [r0, #12]
 800a980:	f880 4020 	strb.w	r4, [r0, #32]
 800a984:	6244      	str	r4, [r0, #36]	; 0x24
 800a986:	8aab      	ldrh	r3, [r5, #20]
 800a988:	42a3      	cmp	r3, r4
 800a98a:	d91d      	bls.n	800a9c8 <HttpDaemon::ParseRequest()+0x54>
 800a98c:	68eb      	ldr	r3, [r5, #12]
 800a98e:	5d18      	ldrb	r0, [r3, r4]
 800a990:	280a      	cmp	r0, #10
 800a992:	d10e      	bne.n	800a9b2 <HttpDaemon::ParseRequest()+0x3e>
 800a994:	4423      	add	r3, r4
 800a996:	f803 6c01 	strb.w	r6, [r3, #-1]
 800a99a:	1c57      	adds	r7, r2, #1
 800a99c:	b962      	cbnz	r2, 800a9b8 <HttpDaemon::ParseRequest()+0x44>
 800a99e:	4628      	mov	r0, r5
 800a9a0:	f7ff ff58 	bl	800a854 <HttpDaemon::ParseMethod(char*)>
 800a9a4:	28c8      	cmp	r0, #200	; 0xc8
 800a9a6:	d110      	bne.n	800a9ca <HttpDaemon::ParseRequest()+0x56>
 800a9a8:	463a      	mov	r2, r7
 800a9aa:	68e9      	ldr	r1, [r5, #12]
 800a9ac:	3401      	adds	r4, #1
 800a9ae:	b2a4      	uxth	r4, r4
 800a9b0:	4421      	add	r1, r4
 800a9b2:	3401      	adds	r4, #1
 800a9b4:	b2a4      	uxth	r4, r4
 800a9b6:	e7e6      	b.n	800a986 <HttpDaemon::ParseRequest()+0x12>
 800a9b8:	7808      	ldrb	r0, [r1, #0]
 800a9ba:	b968      	cbnz	r0, 800a9d8 <HttpDaemon::ParseRequest()+0x64>
 800a9bc:	696b      	ldr	r3, [r5, #20]
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	1b1b      	subs	r3, r3, r4
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	84ab      	strh	r3, [r5, #36]	; 0x24
 800a9c6:	b90b      	cbnz	r3, 800a9cc <HttpDaemon::ParseRequest()+0x58>
 800a9c8:	20c8      	movs	r0, #200	; 0xc8
 800a9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9cc:	68ea      	ldr	r2, [r5, #12]
 800a9ce:	3401      	adds	r4, #1
 800a9d0:	4414      	add	r4, r2
 800a9d2:	60ac      	str	r4, [r5, #8]
 800a9d4:	54e0      	strb	r0, [r4, r3]
 800a9d6:	e7f7      	b.n	800a9c8 <HttpDaemon::ParseRequest()+0x54>
 800a9d8:	4628      	mov	r0, r5
 800a9da:	f7ff ff81 	bl	800a8e0 <HttpDaemon::ParseHeaderField(char*)>
 800a9de:	e7e1      	b.n	800a9a4 <HttpDaemon::ParseRequest()+0x30>

0800a9e0 <HttpDaemon::HandleGetTxt()>:
 800a9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e4:	6846      	ldr	r6, [r0, #4]
 800a9e6:	4607      	mov	r7, r0
 800a9e8:	1db4      	adds	r4, r6, #6
 800a9ea:	4622      	mov	r2, r4
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	7819      	ldrb	r1, [r3, #0]
 800a9f0:	3201      	adds	r2, #1
 800a9f2:	2900      	cmp	r1, #0
 800a9f4:	d1fa      	bne.n	800a9ec <HttpDaemon::HandleGetTxt()+0xc>
 800a9f6:	1b1b      	subs	r3, r3, r4
 800a9f8:	2b04      	cmp	r3, #4
 800a9fa:	d803      	bhi.n	800aa04 <HttpDaemon::HandleGetTxt()+0x24>
 800a9fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800aa00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa04:	3b04      	subs	r3, #4
 800aa06:	4914      	ldr	r1, [pc, #80]	; (800aa58 <HttpDaemon::HandleGetTxt()+0x78>)
 800aa08:	18e0      	adds	r0, r4, r3
 800aa0a:	f7ff fed0 	bl	800a7ae <strcmp>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	d1f4      	bne.n	800a9fc <HttpDaemon::HandleGetTxt()+0x1c>
 800aa12:	4b12      	ldr	r3, [pc, #72]	; (800aa5c <HttpDaemon::HandleGetTxt()+0x7c>)
 800aa14:	2001      	movs	r0, #1
 800aa16:	f893 8000 	ldrb.w	r8, [r3]
 800aa1a:	f7ff feef 	bl	800a7fc <PropertiesConfig::EnableJSON(bool)>
 800aa1e:	4b10      	ldr	r3, [pc, #64]	; (800aa60 <HttpDaemon::HandleGetTxt()+0x80>)
 800aa20:	f240 529b 	movw	r2, #1435	; 0x59b
 800aa24:	4621      	mov	r1, r4
 800aa26:	6818      	ldr	r0, [r3, #0]
 800aa28:	f7ff fa68 	bl	8009efc <RemoteConfig::HandleGet(void*, unsigned int)>
 800aa2c:	4605      	mov	r5, r0
 800aa2e:	f008 0801 	and.w	r8, r8, #1
 800aa32:	4640      	mov	r0, r8
 800aa34:	f7ff fee2 	bl	800a7fc <PropertiesConfig::EnableJSON(bool)>
 800aa38:	2d00      	cmp	r5, #0
 800aa3a:	d0df      	beq.n	800a9fc <HttpDaemon::HandleGetTxt()+0x1c>
 800aa3c:	847d      	strh	r5, [r7, #34]	; 0x22
 800aa3e:	4b09      	ldr	r3, [pc, #36]	; (800aa64 <HttpDaemon::HandleGetTxt()+0x84>)
 800aa40:	3506      	adds	r5, #6
 800aa42:	442e      	add	r6, r5
 800aa44:	42b4      	cmp	r4, r6
 800aa46:	d101      	bne.n	800aa4c <HttpDaemon::HandleGetTxt()+0x6c>
 800aa48:	20c8      	movs	r0, #200	; 0xc8
 800aa4a:	e7d9      	b.n	800aa00 <HttpDaemon::HandleGetTxt()+0x20>
 800aa4c:	f814 2b01 	ldrb.w	r2, [r4], #1
 800aa50:	f803 2b01 	strb.w	r2, [r3], #1
 800aa54:	e7f6      	b.n	800aa44 <HttpDaemon::HandleGetTxt()+0x64>
 800aa56:	bf00      	nop
 800aa58:	080191ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, ip, pc}
 800aa5c:	2001d8a8 	andcs	sp, r1, r8, lsr #17
 800aa60:	20000114 	andcs	r0, r0, r4, lsl r1
 800aa64:	20000118 	andcs	r0, r0, r8, lsl r1

0800aa68 <HttpDaemon::HandleGet()>:
 800aa68:	b570      	push	{r4, r5, r6, lr}
 800aa6a:	6845      	ldr	r5, [r0, #4]
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	493e      	ldr	r1, [pc, #248]	; (800ab68 <HttpDaemon::HandleGet()+0x100>)
 800aa70:	4628      	mov	r0, r5
 800aa72:	f7ff fe9c 	bl	800a7ae <strcmp>
 800aa76:	b120      	cbz	r0, 800aa82 <HttpDaemon::HandleGet()+0x1a>
 800aa78:	4628      	mov	r0, r5
 800aa7a:	493c      	ldr	r1, [pc, #240]	; (800ab6c <HttpDaemon::HandleGet()+0x104>)
 800aa7c:	f7ff fe97 	bl	800a7ae <strcmp>
 800aa80:	b950      	cbnz	r0, 800aa98 <HttpDaemon::HandleGet()+0x30>
 800aa82:	4b3b      	ldr	r3, [pc, #236]	; (800ab70 <HttpDaemon::HandleGet()+0x108>)
 800aa84:	493b      	ldr	r1, [pc, #236]	; (800ab74 <HttpDaemon::HandleGet()+0x10c>)
 800aa86:	483c      	ldr	r0, [pc, #240]	; (800ab78 <HttpDaemon::HandleGet()+0x110>)
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	f000 fa67 	bl	800af5c <get_file_content(char const*, char*)>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	dd2f      	ble.n	800aaf2 <HttpDaemon::HandleGet()+0x8a>
 800aa92:	8460      	strh	r0, [r4, #34]	; 0x22
 800aa94:	20c8      	movs	r0, #200	; 0xc8
 800aa96:	bd70      	pop	{r4, r5, r6, pc}
 800aa98:	4628      	mov	r0, r5
 800aa9a:	4938      	ldr	r1, [pc, #224]	; (800ab7c <HttpDaemon::HandleGet()+0x114>)
 800aa9c:	f7ff fe87 	bl	800a7ae <strcmp>
 800aaa0:	b920      	cbnz	r0, 800aaac <HttpDaemon::HandleGet()+0x44>
 800aaa2:	4b37      	ldr	r3, [pc, #220]	; (800ab80 <HttpDaemon::HandleGet()+0x118>)
 800aaa4:	4933      	ldr	r1, [pc, #204]	; (800ab74 <HttpDaemon::HandleGet()+0x10c>)
 800aaa6:	4837      	ldr	r0, [pc, #220]	; (800ab84 <HttpDaemon::HandleGet()+0x11c>)
 800aaa8:	6023      	str	r3, [r4, #0]
 800aaaa:	e7ee      	b.n	800aa8a <HttpDaemon::HandleGet()+0x22>
 800aaac:	4628      	mov	r0, r5
 800aaae:	4936      	ldr	r1, [pc, #216]	; (800ab88 <HttpDaemon::HandleGet()+0x120>)
 800aab0:	f7ff fe7d 	bl	800a7ae <strcmp>
 800aab4:	b190      	cbz	r0, 800aadc <HttpDaemon::HandleGet()+0x74>
 800aab6:	4a35      	ldr	r2, [pc, #212]	; (800ab8c <HttpDaemon::HandleGet()+0x124>)
 800aab8:	1e6b      	subs	r3, r5, #1
 800aaba:	1d69      	adds	r1, r5, #5
 800aabc:	428b      	cmp	r3, r1
 800aabe:	d112      	bne.n	800aae6 <HttpDaemon::HandleGet()+0x7e>
 800aac0:	4b33      	ldr	r3, [pc, #204]	; (800ab90 <HttpDaemon::HandleGet()+0x128>)
 800aac2:	3506      	adds	r5, #6
 800aac4:	4628      	mov	r0, r5
 800aac6:	4933      	ldr	r1, [pc, #204]	; (800ab94 <HttpDaemon::HandleGet()+0x12c>)
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	f7ff fe70 	bl	800a7ae <strcmp>
 800aace:	b998      	cbnz	r0, 800aaf8 <HttpDaemon::HandleGet()+0x90>
 800aad0:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800aad4:	4827      	ldr	r0, [pc, #156]	; (800ab74 <HttpDaemon::HandleGet()+0x10c>)
 800aad6:	f000 f9c9 	bl	800ae6c <remoteconfig::json_get_list(char*, unsigned short)>
 800aada:	e7d8      	b.n	800aa8e <HttpDaemon::HandleGet()+0x26>
 800aadc:	4b2e      	ldr	r3, [pc, #184]	; (800ab98 <HttpDaemon::HandleGet()+0x130>)
 800aade:	4925      	ldr	r1, [pc, #148]	; (800ab74 <HttpDaemon::HandleGet()+0x10c>)
 800aae0:	482e      	ldr	r0, [pc, #184]	; (800ab9c <HttpDaemon::HandleGet()+0x134>)
 800aae2:	6023      	str	r3, [r4, #0]
 800aae4:	e7d1      	b.n	800aa8a <HttpDaemon::HandleGet()+0x22>
 800aae6:	f812 0b01 	ldrb.w	r0, [r2], #1
 800aaea:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800aaee:	4286      	cmp	r6, r0
 800aaf0:	d0e4      	beq.n	800aabc <HttpDaemon::HandleGet()+0x54>
 800aaf2:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800aaf6:	e7ce      	b.n	800aa96 <HttpDaemon::HandleGet()+0x2e>
 800aaf8:	4628      	mov	r0, r5
 800aafa:	4929      	ldr	r1, [pc, #164]	; (800aba0 <HttpDaemon::HandleGet()+0x138>)
 800aafc:	f7ff fe57 	bl	800a7ae <strcmp>
 800ab00:	b928      	cbnz	r0, 800ab0e <HttpDaemon::HandleGet()+0xa6>
 800ab02:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800ab06:	481b      	ldr	r0, [pc, #108]	; (800ab74 <HttpDaemon::HandleGet()+0x10c>)
 800ab08:	f000 f9e4 	bl	800aed4 <remoteconfig::json_get_version(char*, unsigned short)>
 800ab0c:	e7bf      	b.n	800aa8e <HttpDaemon::HandleGet()+0x26>
 800ab0e:	4628      	mov	r0, r5
 800ab10:	4924      	ldr	r1, [pc, #144]	; (800aba4 <HttpDaemon::HandleGet()+0x13c>)
 800ab12:	f7ff fe4c 	bl	800a7ae <strcmp>
 800ab16:	b948      	cbnz	r0, 800ab2c <HttpDaemon::HandleGet()+0xc4>
 800ab18:	4b23      	ldr	r3, [pc, #140]	; (800aba8 <HttpDaemon::HandleGet()+0x140>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	7bdb      	ldrb	r3, [r3, #15]
 800ab1e:	b303      	cbz	r3, 800ab62 <HttpDaemon::HandleGet()+0xfa>
 800ab20:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800ab24:	4813      	ldr	r0, [pc, #76]	; (800ab74 <HttpDaemon::HandleGet()+0x10c>)
 800ab26:	f000 f9f1 	bl	800af0c <remoteconfig::json_get_uptime(char*, unsigned short)>
 800ab2a:	e7b0      	b.n	800aa8e <HttpDaemon::HandleGet()+0x26>
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	491f      	ldr	r1, [pc, #124]	; (800abac <HttpDaemon::HandleGet()+0x144>)
 800ab30:	f7ff fe3d 	bl	800a7ae <strcmp>
 800ab34:	b928      	cbnz	r0, 800ab42 <HttpDaemon::HandleGet()+0xda>
 800ab36:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800ab3a:	480e      	ldr	r0, [pc, #56]	; (800ab74 <HttpDaemon::HandleGet()+0x10c>)
 800ab3c:	f000 f9f6 	bl	800af2c <remoteconfig::json_get_display(char*, unsigned short)>
 800ab40:	e7a5      	b.n	800aa8e <HttpDaemon::HandleGet()+0x26>
 800ab42:	4628      	mov	r0, r5
 800ab44:	491a      	ldr	r1, [pc, #104]	; (800abb0 <HttpDaemon::HandleGet()+0x148>)
 800ab46:	f7ff fe32 	bl	800a7ae <strcmp>
 800ab4a:	b928      	cbnz	r0, 800ab58 <HttpDaemon::HandleGet()+0xf0>
 800ab4c:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800ab50:	4808      	ldr	r0, [pc, #32]	; (800ab74 <HttpDaemon::HandleGet()+0x10c>)
 800ab52:	f000 f9fb 	bl	800af4c <remoteconfig::json_get_directory(char*, unsigned short)>
 800ab56:	e79a      	b.n	800aa8e <HttpDaemon::HandleGet()+0x26>
 800ab58:	4620      	mov	r0, r4
 800ab5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab5e:	f7ff bf3f 	b.w	800a9e0 <HttpDaemon::HandleGetTxt()>
 800ab62:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800ab66:	e796      	b.n	800aa96 <HttpDaemon::HandleGet()+0x2e>
 800ab68:	08019316 	stmdaeq	r1, {r1, r2, r4, r8, r9, ip, pc}
 800ab6c:	080192ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r9, ip, pc}
 800ab70:	0801950d 	stmdaeq	r1, {r0, r2, r3, r8, sl, ip, pc}
 800ab74:	20000118 	andcs	r0, r0, r8, lsl r1
 800ab78:	080192f0 	stmdaeq	r1, {r4, r5, r6, r7, r9, ip, pc}
 800ab7c:	080192fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r9, ip, pc}
 800ab80:	0801952d 	stmdaeq	r1, {r0, r2, r3, r5, r8, sl, ip, pc}
 800ab84:	080192fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, ip, pc}
 800ab88:	08019307 	stmdaeq	r1, {r0, r1, r2, r8, r9, ip, pc}
 800ab8c:	08019311 	stmdaeq	r1, {r0, r4, r8, r9, ip, pc}
 800ab90:	0801956d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, sl, ip, pc}
 800ab94:	08019318 	stmdaeq	r1, {r3, r4, r8, r9, ip, pc}
 800ab98:	0801954d 	stmdaeq	r1, {r0, r2, r3, r6, r8, sl, ip, pc}
 800ab9c:	08019308 	stmdaeq	r1, {r3, r8, r9, ip, pc}
 800aba0:	0801931d 	stmdaeq	r1, {r0, r2, r3, r4, r8, r9, ip, pc}
 800aba4:	08019325 	stmdaeq	r1, {r0, r2, r5, r8, r9, ip, pc}
 800aba8:	20000114 	andcs	r0, r0, r4, lsl r1
 800abac:	0801932c 	stmdaeq	r1, {r2, r3, r5, r8, r9, ip, pc}
 800abb0:	08019334 	stmdaeq	r1, {r2, r4, r5, r8, r9, ip, pc}

0800abb4 <HttpDaemon::HandlePost(bool)>:
 800abb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abb6:	4604      	mov	r4, r0
 800abb8:	2900      	cmp	r1, #0
 800abba:	f040 808a 	bne.w	800acd2 <HttpDaemon::HandlePost(bool)+0x11e>
 800abbe:	f890 3020 	ldrb.w	r3, [r0, #32]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d05a      	beq.n	800ac7c <HttpDaemon::HandlePost(bool)+0xc8>
 800abc6:	6845      	ldr	r5, [r0, #4]
 800abc8:	4944      	ldr	r1, [pc, #272]	; (800acdc <HttpDaemon::HandlePost(bool)+0x128>)
 800abca:	4628      	mov	r0, r5
 800abcc:	f7ff fdef 	bl	800a7ae <strcmp>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	bf0c      	ite	eq
 800abd4:	2301      	moveq	r3, #1
 800abd6:	2300      	movne	r3, #0
 800abd8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 800abdc:	d052      	beq.n	800ac84 <HttpDaemon::HandlePost(bool)+0xd0>
 800abde:	4628      	mov	r0, r5
 800abe0:	493f      	ldr	r1, [pc, #252]	; (800ace0 <HttpDaemon::HandlePost(bool)+0x12c>)
 800abe2:	f7ff fde4 	bl	800a7ae <strcmp>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	d04c      	beq.n	800ac84 <HttpDaemon::HandlePost(bool)+0xd0>
 800abea:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800abee:	e047      	b.n	800ac80 <HttpDaemon::HandlePost(bool)+0xcc>
 800abf0:	493c      	ldr	r1, [pc, #240]	; (800ace4 <HttpDaemon::HandlePost(bool)+0x130>)
 800abf2:	68a0      	ldr	r0, [r4, #8]
 800abf4:	f10d 0207 	add.w	r2, sp, #7
 800abf8:	f00b f8b6 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800abfc:	b9d8      	cbnz	r0, 800ac36 <HttpDaemon::HandlePost(bool)+0x82>
 800abfe:	f89d 6007 	ldrb.w	r6, [sp, #7]
 800ac02:	4b39      	ldr	r3, [pc, #228]	; (800ace8 <HttpDaemon::HandlePost(bool)+0x134>)
 800ac04:	fab6 f186 	clz	r1, r6
 800ac08:	681d      	ldr	r5, [r3, #0]
 800ac0a:	0949      	lsrs	r1, r1, #5
 800ac0c:	69a8      	ldr	r0, [r5, #24]
 800ac0e:	b138      	cbz	r0, 800ac20 <HttpDaemon::HandlePost(bool)+0x6c>
 800ac10:	6803      	ldr	r3, [r0, #0]
 800ac12:	7429      	strb	r1, [r5, #16]
 800ac14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac16:	4798      	blx	r3
 800ac18:	b116      	cbz	r6, 800ac20 <HttpDaemon::HandlePost(bool)+0x6c>
 800ac1a:	4b34      	ldr	r3, [pc, #208]	; (800acec <HttpDaemon::HandlePost(bool)+0x138>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	606b      	str	r3, [r5, #4]
 800ac20:	4b33      	ldr	r3, [pc, #204]	; (800acf0 <HttpDaemon::HandlePost(bool)+0x13c>)
 800ac22:	f240 519f 	movw	r1, #1439	; 0x59f
 800ac26:	4a33      	ldr	r2, [pc, #204]	; (800acf4 <HttpDaemon::HandlePost(bool)+0x140>)
 800ac28:	4833      	ldr	r0, [pc, #204]	; (800acf8 <HttpDaemon::HandlePost(bool)+0x144>)
 800ac2a:	6023      	str	r3, [r4, #0]
 800ac2c:	f7fe fdf0 	bl	8009810 <snprintf>
 800ac30:	8460      	strh	r0, [r4, #34]	; 0x22
 800ac32:	20c8      	movs	r0, #200	; 0xc8
 800ac34:	e024      	b.n	800ac80 <HttpDaemon::HandlePost(bool)+0xcc>
 800ac36:	4931      	ldr	r1, [pc, #196]	; (800acfc <HttpDaemon::HandlePost(bool)+0x148>)
 800ac38:	68a0      	ldr	r0, [r4, #8]
 800ac3a:	f10d 0207 	add.w	r2, sp, #7
 800ac3e:	f00b f893 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ac42:	b9d8      	cbnz	r0, 800ac7c <HttpDaemon::HandlePost(bool)+0xc8>
 800ac44:	4b2e      	ldr	r3, [pc, #184]	; (800ad00 <HttpDaemon::HandlePost(bool)+0x14c>)
 800ac46:	6818      	ldr	r0, [r3, #0]
 800ac48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ac4c:	b11b      	cbz	r3, 800ac56 <HttpDaemon::HandlePost(bool)+0xa2>
 800ac4e:	2104      	movs	r1, #4
 800ac50:	f00b fc1c 	bl	801648c <LedBlink::SetMode(ledblink::Mode)>
 800ac54:	e7e4      	b.n	800ac20 <HttpDaemon::HandlePost(bool)+0x6c>
 800ac56:	2102      	movs	r1, #2
 800ac58:	e7fa      	b.n	800ac50 <HttpDaemon::HandlePost(bool)+0x9c>
 800ac5a:	4b2a      	ldr	r3, [pc, #168]	; (800ad04 <HttpDaemon::HandlePost(bool)+0x150>)
 800ac5c:	2001      	movs	r0, #1
 800ac5e:	781d      	ldrb	r5, [r3, #0]
 800ac60:	f7ff fdcc 	bl	800a7fc <PropertiesConfig::EnableJSON(bool)>
 800ac64:	4b28      	ldr	r3, [pc, #160]	; (800ad08 <HttpDaemon::HandlePost(bool)+0x154>)
 800ac66:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 800ac68:	6818      	ldr	r0, [r3, #0]
 800ac6a:	68a1      	ldr	r1, [r4, #8]
 800ac6c:	f005 0501 	and.w	r5, r5, #1
 800ac70:	f7ff fa28 	bl	800a0c4 <RemoteConfig::HandleSet(void*, unsigned int)>
 800ac74:	4628      	mov	r0, r5
 800ac76:	f7ff fdc1 	bl	800a7fc <PropertiesConfig::EnableJSON(bool)>
 800ac7a:	e7d1      	b.n	800ac20 <HttpDaemon::HandlePost(bool)+0x6c>
 800ac7c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800ac80:	b002      	add	sp, #8
 800ac82:	bd70      	pop	{r4, r5, r6, pc}
 800ac84:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800ac86:	6962      	ldr	r2, [r4, #20]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	dbd2      	blt.n	800ac32 <HttpDaemon::HandlePost(bool)+0x7e>
 800ac8c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d0cf      	beq.n	800ac32 <HttpDaemon::HandlePost(bool)+0x7e>
 800ac92:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d0df      	beq.n	800ac5a <HttpDaemon::HandlePost(bool)+0xa6>
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800ac9e:	68a0      	ldr	r0, [r4, #8]
 800aca0:	f00a fdd4 	bl	801584c <properties::convert_json_file(char*, unsigned short, bool)>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	dde9      	ble.n	800ac7c <HttpDaemon::HandlePost(bool)+0xc8>
 800aca8:	4918      	ldr	r1, [pc, #96]	; (800ad0c <HttpDaemon::HandlePost(bool)+0x158>)
 800acaa:	68a0      	ldr	r0, [r4, #8]
 800acac:	f10d 0207 	add.w	r2, sp, #7
 800acb0:	f00b f85a 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	d19b      	bne.n	800abf0 <HttpDaemon::HandlePost(bool)+0x3c>
 800acb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d0af      	beq.n	800ac20 <HttpDaemon::HandlePost(bool)+0x6c>
 800acc0:	4b11      	ldr	r3, [pc, #68]	; (800ad08 <HttpDaemon::HandlePost(bool)+0x154>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	7b9b      	ldrb	r3, [r3, #14]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d0d8      	beq.n	800ac7c <HttpDaemon::HandlePost(bool)+0xc8>
 800acca:	4b11      	ldr	r3, [pc, #68]	; (800ad10 <HttpDaemon::HandlePost(bool)+0x15c>)
 800accc:	6818      	ldr	r0, [r3, #0]
 800acce:	f00b fc7f 	bl	80165d0 <Hardware::Reboot()>
 800acd2:	68c3      	ldr	r3, [r0, #12]
 800acd4:	6083      	str	r3, [r0, #8]
 800acd6:	6943      	ldr	r3, [r0, #20]
 800acd8:	8483      	strh	r3, [r0, #36]	; 0x24
 800acda:	e7da      	b.n	800ac92 <HttpDaemon::HandlePost(bool)+0xde>
 800acdc:	0801933e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, r9, ip, pc}
 800ace0:	080192da 	stmdaeq	r1, {r1, r3, r4, r6, r7, r9, ip, pc}
 800ace4:	0801932c 	stmdaeq	r1, {r2, r3, r5, r8, r9, ip, pc}
 800ace8:	2001d8ac 	andcs	sp, r1, ip, lsr #17
 800acec:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4
 800acf0:	0801950d 	stmdaeq	r1, {r0, r2, r3, r8, sl, ip, pc}
 800acf4:	0801935b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, r9, ip, pc}
 800acf8:	20000118 	andcs	r0, r0, r8, lsl r1
 800acfc:	08019352 	stmdaeq	r1, {r1, r4, r6, r8, r9, ip, pc}
 800ad00:	2001d998 	mulcs	r1, r8, r9
 800ad04:	2001d8a8 	andcs	sp, r1, r8, lsr #17
 800ad08:	20000114 	andcs	r0, r0, r4, lsl r1
 800ad0c:	0801934b 	stmdaeq	r1, {r0, r1, r3, r6, r8, r9, ip, pc}
 800ad10:	2001d99c 	mulcs	r1, ip, r9

0800ad14 <HttpDaemon::Run()>:
 800ad14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ad16:	4e46      	ldr	r6, [pc, #280]	; (800ae30 <HttpDaemon::Run()+0x11c>)
 800ad18:	4604      	mov	r4, r0
 800ad1a:	6901      	ldr	r1, [r0, #16]
 800ad1c:	f100 020c 	add.w	r2, r0, #12
 800ad20:	6830      	ldr	r0, [r6, #0]
 800ad22:	f009 fb7e 	bl	8014422 <Network::TcpRead(int, unsigned char const**)>
 800ad26:	6160      	str	r0, [r4, #20]
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d05b      	beq.n	800ade4 <HttpDaemon::Run()+0xd0>
 800ad2c:	69a3      	ldr	r3, [r4, #24]
 800ad2e:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800ad32:	d159      	bne.n	800ade8 <HttpDaemon::Run()+0xd4>
 800ad34:	4620      	mov	r0, r4
 800ad36:	f7ff fe1d 	bl	800a974 <HttpDaemon::ParseRequest()>
 800ad3a:	28c8      	cmp	r0, #200	; 0xc8
 800ad3c:	61a0      	str	r0, [r4, #24]
 800ad3e:	d106      	bne.n	800ad4e <HttpDaemon::Run()+0x3a>
 800ad40:	69e3      	ldr	r3, [r4, #28]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d142      	bne.n	800adcc <HttpDaemon::Run()+0xb8>
 800ad46:	4620      	mov	r0, r4
 800ad48:	f7ff fe8e 	bl	800aa68 <HttpDaemon::HandleGet()>
 800ad4c:	61a0      	str	r0, [r4, #24]
 800ad4e:	69a3      	ldr	r3, [r4, #24]
 800ad50:	2bc8      	cmp	r3, #200	; 0xc8
 800ad52:	d06b      	beq.n	800ae2c <HttpDaemon::Run()+0x118>
 800ad54:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800ad58:	d05e      	beq.n	800ae18 <HttpDaemon::Run()+0x104>
 800ad5a:	dc4e      	bgt.n	800adfa <HttpDaemon::Run()+0xe6>
 800ad5c:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800ad60:	d05c      	beq.n	800ae1c <HttpDaemon::Run()+0x108>
 800ad62:	f240 129d 	movw	r2, #413	; 0x19d
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d05a      	beq.n	800ae20 <HttpDaemon::Run()+0x10c>
 800ad6a:	4d32      	ldr	r5, [pc, #200]	; (800ae34 <HttpDaemon::Run()+0x120>)
 800ad6c:	4a32      	ldr	r2, [pc, #200]	; (800ae38 <HttpDaemon::Run()+0x124>)
 800ad6e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800ad72:	bf18      	it	ne
 800ad74:	4615      	movne	r5, r2
 800ad76:	4a31      	ldr	r2, [pc, #196]	; (800ae3c <HttpDaemon::Run()+0x128>)
 800ad78:	f240 519f 	movw	r1, #1439	; 0x59f
 800ad7c:	6022      	str	r2, [r4, #0]
 800ad7e:	e9cd 5500 	strd	r5, r5, [sp]
 800ad82:	4a2f      	ldr	r2, [pc, #188]	; (800ae40 <HttpDaemon::Run()+0x12c>)
 800ad84:	482f      	ldr	r0, [pc, #188]	; (800ae44 <HttpDaemon::Run()+0x130>)
 800ad86:	f7fe fd43 	bl	8009810 <snprintf>
 800ad8a:	8460      	strh	r0, [r4, #34]	; 0x22
 800ad8c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800ad8e:	f240 519f 	movw	r1, #1439	; 0x59f
 800ad92:	9303      	str	r3, [sp, #12]
 800ad94:	6823      	ldr	r3, [r4, #0]
 800ad96:	4a2c      	ldr	r2, [pc, #176]	; (800ae48 <HttpDaemon::Run()+0x134>)
 800ad98:	9302      	str	r3, [sp, #8]
 800ad9a:	4b2c      	ldr	r3, [pc, #176]	; (800ae4c <HttpDaemon::Run()+0x138>)
 800ad9c:	68e0      	ldr	r0, [r4, #12]
 800ad9e:	e9cd 5300 	strd	r5, r3, [sp]
 800ada2:	69a3      	ldr	r3, [r4, #24]
 800ada4:	f7fe fd34 	bl	8009810 <snprintf>
 800ada8:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800adac:	b283      	uxth	r3, r0
 800adae:	6830      	ldr	r0, [r6, #0]
 800adb0:	f009 fb3b 	bl	801442a <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800adb4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800adb6:	4a23      	ldr	r2, [pc, #140]	; (800ae44 <HttpDaemon::Run()+0x130>)
 800adb8:	6921      	ldr	r1, [r4, #16]
 800adba:	6830      	ldr	r0, [r6, #0]
 800adbc:	f009 fb35 	bl	801442a <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800adc0:	f44f 7202 	mov.w	r2, #520	; 0x208
 800adc4:	2302      	movs	r3, #2
 800adc6:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800adca:	e00b      	b.n	800ade4 <HttpDaemon::Run()+0xd0>
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d1be      	bne.n	800ad4e <HttpDaemon::Run()+0x3a>
 800add0:	2100      	movs	r1, #0
 800add2:	4620      	mov	r0, r4
 800add4:	f7ff feee 	bl	800abb4 <HttpDaemon::HandlePost(bool)>
 800add8:	28c8      	cmp	r0, #200	; 0xc8
 800adda:	61a0      	str	r0, [r4, #24]
 800addc:	d1b7      	bne.n	800ad4e <HttpDaemon::Run()+0x3a>
 800adde:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1b4      	bne.n	800ad4e <HttpDaemon::Run()+0x3a>
 800ade4:	b004      	add	sp, #16
 800ade6:	bd70      	pop	{r4, r5, r6, pc}
 800ade8:	2bc8      	cmp	r3, #200	; 0xc8
 800adea:	d1b0      	bne.n	800ad4e <HttpDaemon::Run()+0x3a>
 800adec:	69e1      	ldr	r1, [r4, #28]
 800adee:	2901      	cmp	r1, #1
 800adf0:	d1ad      	bne.n	800ad4e <HttpDaemon::Run()+0x3a>
 800adf2:	4620      	mov	r0, r4
 800adf4:	f7ff fede 	bl	800abb4 <HttpDaemon::HandlePost(bool)>
 800adf8:	e7a8      	b.n	800ad4c <HttpDaemon::Run()+0x38>
 800adfa:	f240 12f5 	movw	r2, #501	; 0x1f5
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d010      	beq.n	800ae24 <HttpDaemon::Run()+0x110>
 800ae02:	f240 12f9 	movw	r2, #505	; 0x1f9
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d00e      	beq.n	800ae28 <HttpDaemon::Run()+0x114>
 800ae0a:	4d11      	ldr	r5, [pc, #68]	; (800ae50 <HttpDaemon::Run()+0x13c>)
 800ae0c:	4a0a      	ldr	r2, [pc, #40]	; (800ae38 <HttpDaemon::Run()+0x124>)
 800ae0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ae12:	bf18      	it	ne
 800ae14:	4615      	movne	r5, r2
 800ae16:	e7ae      	b.n	800ad76 <HttpDaemon::Run()+0x62>
 800ae18:	4d0e      	ldr	r5, [pc, #56]	; (800ae54 <HttpDaemon::Run()+0x140>)
 800ae1a:	e7ac      	b.n	800ad76 <HttpDaemon::Run()+0x62>
 800ae1c:	4d0e      	ldr	r5, [pc, #56]	; (800ae58 <HttpDaemon::Run()+0x144>)
 800ae1e:	e7aa      	b.n	800ad76 <HttpDaemon::Run()+0x62>
 800ae20:	4d0e      	ldr	r5, [pc, #56]	; (800ae5c <HttpDaemon::Run()+0x148>)
 800ae22:	e7a8      	b.n	800ad76 <HttpDaemon::Run()+0x62>
 800ae24:	4d0e      	ldr	r5, [pc, #56]	; (800ae60 <HttpDaemon::Run()+0x14c>)
 800ae26:	e7a6      	b.n	800ad76 <HttpDaemon::Run()+0x62>
 800ae28:	4d0e      	ldr	r5, [pc, #56]	; (800ae64 <HttpDaemon::Run()+0x150>)
 800ae2a:	e7a4      	b.n	800ad76 <HttpDaemon::Run()+0x62>
 800ae2c:	4d0e      	ldr	r5, [pc, #56]	; (800ae68 <HttpDaemon::Run()+0x154>)
 800ae2e:	e7ad      	b.n	800ad8c <HttpDaemon::Run()+0x78>
 800ae30:	2001d2d4 	ldrdcs	sp, [r1], -r4
 800ae34:	080193b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, r9, ip, pc}
 800ae38:	0801943e 	stmdaeq	r1, {r1, r2, r3, r4, r5, sl, ip, pc}
 800ae3c:	0801950d 	stmdaeq	r1, {r0, r2, r3, r8, sl, ip, pc}
 800ae40:	0801944f 	stmdaeq	r1, {r0, r1, r2, r3, r6, sl, ip, pc}
 800ae44:	20000118 	andcs	r0, r0, r8, lsl r1
 800ae48:	080194aa 	stmdaeq	r1, {r1, r3, r5, r7, sl, ip, pc}
 800ae4c:	08019502 	stmdaeq	r1, {r1, r8, sl, ip, pc}
 800ae50:	080193fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, r9, ip, pc}
 800ae54:	080193e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r8, r9, ip, pc}
 800ae58:	080193c3 	stmdaeq	r1, {r0, r1, r6, r7, r8, r9, ip, pc}
 800ae5c:	080193cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, ip, pc}
 800ae60:	08019411 	stmdaeq	r1, {r0, r4, sl, ip, pc}
 800ae64:	08019428 	stmdaeq	r1, {r3, r5, sl, ip, pc}
 800ae68:	0801944c 	stmdaeq	r1, {r2, r3, r6, sl, ip, pc}

0800ae6c <remoteconfig::json_get_list(char*, unsigned short)>:
 800ae6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae70:	4b14      	ldr	r3, [pc, #80]	; (800aec4 <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 800ae72:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800aec8 <remoteconfig::json_get_list(char*, unsigned short)+0x5c>
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	b088      	sub	sp, #32
 800ae7a:	4605      	mov	r5, r0
 800ae7c:	f8d8 0000 	ldr.w	r0, [r8]
 800ae80:	695c      	ldr	r4, [r3, #20]
 800ae82:	460e      	mov	r6, r1
 800ae84:	f7fe ffea 	bl	8009e5c <RemoteConfig::GetStringNode() const>
 800ae88:	4607      	mov	r7, r0
 800ae8a:	f8d8 0000 	ldr.w	r0, [r8]
 800ae8e:	f7fe fff1 	bl	8009e74 <RemoteConfig::GetStringOutput() const>
 800ae92:	4b0e      	ldr	r3, [pc, #56]	; (800aecc <remoteconfig::json_get_list(char*, unsigned short)+0x60>)
 800ae94:	4631      	mov	r1, r6
 800ae96:	7a1a      	ldrb	r2, [r3, #8]
 800ae98:	3309      	adds	r3, #9
 800ae9a:	9303      	str	r3, [sp, #12]
 800ae9c:	0e23      	lsrs	r3, r4, #24
 800ae9e:	9302      	str	r3, [sp, #8]
 800aea0:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800aea4:	9301      	str	r3, [sp, #4]
 800aea6:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800aeaa:	e9cd 0205 	strd	r0, r2, [sp, #20]
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	4a07      	ldr	r2, [pc, #28]	; (800aed0 <remoteconfig::json_get_list(char*, unsigned short)+0x64>)
 800aeb4:	9704      	str	r7, [sp, #16]
 800aeb6:	b2e3      	uxtb	r3, r4
 800aeb8:	f7fe fcaa 	bl	8009810 <snprintf>
 800aebc:	b280      	uxth	r0, r0
 800aebe:	b008      	add	sp, #32
 800aec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aec4:	2001d2d4 	ldrdcs	sp, [r1], -r4
 800aec8:	20000114 	andcs	r0, r0, r4, lsl r1
 800aecc:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800aed0:	080195e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, sl, ip, pc}

0800aed4 <remoteconfig::json_get_version(char*, unsigned short)>:
 800aed4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800aed6:	2208      	movs	r2, #8
 800aed8:	4b09      	ldr	r3, [pc, #36]	; (800af00 <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 800aeda:	9204      	str	r2, [sp, #16]
 800aedc:	f1a3 020b 	sub.w	r2, r3, #11
 800aee0:	9203      	str	r2, [sp, #12]
 800aee2:	220b      	movs	r2, #11
 800aee4:	9202      	str	r2, [sp, #8]
 800aee6:	4a07      	ldr	r2, [pc, #28]	; (800af04 <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 800aee8:	9305      	str	r3, [sp, #20]
 800aeea:	3b0e      	subs	r3, #14
 800aeec:	9201      	str	r2, [sp, #4]
 800aeee:	9300      	str	r3, [sp, #0]
 800aef0:	4a05      	ldr	r2, [pc, #20]	; (800af08 <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 800aef2:	2303      	movs	r3, #3
 800aef4:	f7fe fc8c 	bl	8009810 <snprintf>
 800aef8:	b280      	uxth	r0, r0
 800aefa:	b007      	add	sp, #28
 800aefc:	f85d fb04 	ldr.w	pc, [sp], #4
 800af00:	2001d94a 	andcs	sp, r1, sl, asr #18
 800af04:	08019502 	stmdaeq	r1, {r1, r8, sl, ip, pc}
 800af08:	08019646 	stmdaeq	r1, {r1, r2, r6, r9, sl, ip, pc}

0800af0c <remoteconfig::json_get_uptime(char*, unsigned short)>:
 800af0c:	b508      	push	{r3, lr}
 800af0e:	4b05      	ldr	r3, [pc, #20]	; (800af24 <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800af16:	fbb2 f3f3 	udiv	r3, r2, r3
 800af1a:	4a03      	ldr	r2, [pc, #12]	; (800af28 <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 800af1c:	f7fe fc78 	bl	8009810 <snprintf>
 800af20:	b280      	uxth	r0, r0
 800af22:	bd08      	pop	{r3, pc}
 800af24:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4
 800af28:	0801968c 	stmdaeq	r1, {r2, r3, r7, r9, sl, ip, pc}

0800af2c <remoteconfig::json_get_display(char*, unsigned short)>:
 800af2c:	b508      	push	{r3, lr}
 800af2e:	4b05      	ldr	r3, [pc, #20]	; (800af44 <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 800af30:	4a05      	ldr	r2, [pc, #20]	; (800af48 <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	7c1b      	ldrb	r3, [r3, #16]
 800af36:	f083 0301 	eor.w	r3, r3, #1
 800af3a:	f7fe fc69 	bl	8009810 <snprintf>
 800af3e:	b280      	uxth	r0, r0
 800af40:	bd08      	pop	{r3, pc}
 800af42:	bf00      	nop
 800af44:	2001d8ac 	andcs	sp, r1, ip, lsr #17
 800af48:	0801969b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r9, sl, ip, pc}

0800af4c <remoteconfig::json_get_directory(char*, unsigned short)>:
 800af4c:	b508      	push	{r3, lr}
 800af4e:	4a02      	ldr	r2, [pc, #8]	; (800af58 <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 800af50:	f7fe fc5e 	bl	8009810 <snprintf>
 800af54:	b280      	uxth	r0, r0
 800af56:	bd08      	pop	{r3, pc}
 800af58:	080196aa 	stmdaeq	r1, {r1, r3, r5, r7, r9, sl, ip, pc}

0800af5c <get_file_content(char const*, char*)>:
 800af5c:	2300      	movs	r3, #0
 800af5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af60:	4a10      	ldr	r2, [pc, #64]	; (800afa4 <get_file_content(char const*, char*)+0x48>)
 800af62:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800af66:	1e46      	subs	r6, r0, #1
 800af68:	3c01      	subs	r4, #1
 800af6a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800af6e:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800af72:	42bd      	cmp	r5, r7
 800af74:	d005      	beq.n	800af82 <get_file_content(char const*, char*)+0x26>
 800af76:	3301      	adds	r3, #1
 800af78:	2b03      	cmp	r3, #3
 800af7a:	d1f2      	bne.n	800af62 <get_file_content(char const*, char*)+0x6>
 800af7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af82:	2d00      	cmp	r5, #0
 800af84:	d1f1      	bne.n	800af6a <get_file_content(char const*, char*)+0xe>
 800af86:	4608      	mov	r0, r1
 800af88:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800af8c:	6853      	ldr	r3, [r2, #4]
 800af8e:	3b01      	subs	r3, #1
 800af90:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800af94:	f800 2b01 	strb.w	r2, [r0], #1
 800af98:	2a00      	cmp	r2, #0
 800af9a:	d1f9      	bne.n	800af90 <get_file_content(char const*, char*)+0x34>
 800af9c:	1a40      	subs	r0, r0, r1
 800af9e:	3801      	subs	r0, #1
 800afa0:	e7ee      	b.n	800af80 <get_file_content(char const*, char*)+0x24>
 800afa2:	bf00      	nop
 800afa4:	080199e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, fp, ip, pc}

0800afa8 <ArtNet4Node::IsStatusChanged()>:
 800afa8:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 800afac:	f893 04f8 	ldrb.w	r0, [r3, #1272]	; 0x4f8
 800afb0:	b110      	cbz	r0, 800afb8 <ArtNet4Node::IsStatusChanged()+0x10>
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 800afb8:	4770      	bx	lr

0800afba <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
 800afba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afbc:	4616      	mov	r6, r2
 800afbe:	1d07      	adds	r7, r0, #4
 800afc0:	4604      	mov	r4, r0
 800afc2:	4613      	mov	r3, r2
 800afc4:	4638      	mov	r0, r7
 800afc6:	f10d 0206 	add.w	r2, sp, #6
 800afca:	460d      	mov	r5, r1
 800afcc:	f000 fc42 	bl	800b854 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800afd0:	b1be      	cbz	r6, 800b002 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 800afd2:	b1b0      	cbz	r0, 800b002 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 800afd4:	2328      	movs	r3, #40	; 0x28
 800afd6:	fb03 4305 	mla	r3, r3, r5, r4
 800afda:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d10f      	bne.n	800b002 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 800afe2:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
 800afe6:	b123      	cbz	r3, 800aff2 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x38>
 800afe8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800afec:	3301      	adds	r3, #1
 800afee:	f8ad 3006 	strh.w	r3, [sp, #6]
 800aff2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800aff6:	b933      	cbnz	r3, 800b006 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x4c>
 800aff8:	2202      	movs	r2, #2
 800affa:	4629      	mov	r1, r5
 800affc:	4638      	mov	r0, r7
 800affe:	f000 fc4f 	bl	800b8a0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800b002:	b003      	add	sp, #12
 800b004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b006:	1e71      	subs	r1, r6, #1
 800b008:	424a      	negs	r2, r1
 800b00a:	414a      	adcs	r2, r1
 800b00c:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 800b010:	4629      	mov	r1, r5
 800b012:	f002 fc61 	bl	800d8d8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 800b016:	e7f4      	b.n	800b002 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>

0800b018 <ArtNet4Node::SetLedBlinkMode(ledblink::Mode)>:
 800b018:	1e8a      	subs	r2, r1, #2
 800b01a:	4253      	negs	r3, r2
 800b01c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800b020:	4153      	adcs	r3, r2
 800b022:	7203      	strb	r3, [r0, #8]
 800b024:	4b01      	ldr	r3, [pc, #4]	; (800b02c <ArtNet4Node::SetLedBlinkMode(ledblink::Mode)+0x14>)
 800b026:	6818      	ldr	r0, [r3, #0]
 800b028:	f00b ba30 	b.w	801648c <LedBlink::SetMode(ledblink::Mode)>
 800b02c:	2001d998 	mulcs	r1, r8, r9

0800b030 <ArtNet4Node::~ArtNet4Node()>:
 800b030:	b510      	push	{r4, lr}
 800b032:	4604      	mov	r4, r0
 800b034:	4b05      	ldr	r3, [pc, #20]	; (800b04c <ArtNet4Node::~ArtNet4Node()+0x1c>)
 800b036:	6003      	str	r3, [r0, #0]
 800b038:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800b03c:	f002 fbc8 	bl	800d7d0 <E131Bridge::~E131Bridge()>
 800b040:	1d20      	adds	r0, r4, #4
 800b042:	f000 f93c 	bl	800b2be <ArtNetNode::~ArtNetNode()>
 800b046:	4620      	mov	r0, r4
 800b048:	bd10      	pop	{r4, pc}
 800b04a:	bf00      	nop
 800b04c:	08019f50 	stmdaeq	r1, {r4, r6, r8, r9, sl, fp, ip, pc}

0800b050 <ArtNet4Node::~ArtNet4Node()>:
 800b050:	b510      	push	{r4, lr}
 800b052:	4604      	mov	r4, r0
 800b054:	f7ff ffec 	bl	800b030 <ArtNet4Node::~ArtNet4Node()>
 800b058:	4620      	mov	r0, r4
 800b05a:	f00b faf5 	bl	8016648 <operator delete(void*)>
 800b05e:	4620      	mov	r0, r4
 800b060:	bd10      	pop	{r4, pc}

0800b062 <ArtNet4Node::GetStatus(unsigned int)>:
 800b062:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b064:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 800b068:	2301      	movs	r3, #1
 800b06a:	4620      	mov	r0, r4
 800b06c:	f10d 0206 	add.w	r2, sp, #6
 800b070:	460d      	mov	r5, r1
 800b072:	f002 fca9 	bl	800d9c8 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800b076:	b160      	cbz	r0, 800b092 <ArtNet4Node::GetStatus(unsigned int)+0x30>
 800b078:	2344      	movs	r3, #68	; 0x44
 800b07a:	fb03 4405 	mla	r4, r3, r5, r4
 800b07e:	f894 0556 	ldrb.w	r0, [r4, #1366]	; 0x556
 800b082:	f894 3555 	ldrb.w	r3, [r4, #1365]	; 0x555
 800b086:	01c0      	lsls	r0, r0, #7
 800b088:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 800b08c:	f040 0001 	orr.w	r0, r0, #1
 800b090:	b2c0      	uxtb	r0, r0
 800b092:	b003      	add	sp, #12
 800b094:	bd30      	pop	{r4, r5, pc}
	...

0800b098 <ArtNet4Node::HandleAddress(unsigned char)>:
 800b098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b09a:	4604      	mov	r4, r0
 800b09c:	460d      	mov	r5, r1
 800b09e:	2600      	movs	r6, #0
 800b0a0:	1d07      	adds	r7, r0, #4
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	4631      	mov	r1, r6
 800b0a6:	4638      	mov	r0, r7
 800b0a8:	f10d 0206 	add.w	r2, sp, #6
 800b0ac:	f000 fbd2 	bl	800b854 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800b0b0:	b150      	cbz	r0, 800b0c8 <ArtNet4Node::HandleAddress(unsigned char)+0x30>
 800b0b2:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
 800b0b6:	b123      	cbz	r3, 800b0c2 <ArtNet4Node::HandleAddress(unsigned char)+0x2a>
 800b0b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b0c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b0c6:	b993      	cbnz	r3, 800b0ee <ArtNet4Node::HandleAddress(unsigned char)+0x56>
 800b0c8:	3601      	adds	r6, #1
 800b0ca:	2e20      	cmp	r6, #32
 800b0cc:	d1e9      	bne.n	800b0a2 <ArtNet4Node::HandleAddress(unsigned char)+0xa>
 800b0ce:	2d13      	cmp	r5, #19
 800b0d0:	f005 0603 	and.w	r6, r5, #3
 800b0d4:	d819      	bhi.n	800b10a <ArtNet4Node::HandleAddress(unsigned char)+0x72>
 800b0d6:	2d0f      	cmp	r5, #15
 800b0d8:	d82c      	bhi.n	800b134 <ArtNet4Node::HandleAddress(unsigned char)+0x9c>
 800b0da:	2d02      	cmp	r5, #2
 800b0dc:	d026      	beq.n	800b12c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800b0de:	3d03      	subs	r5, #3
 800b0e0:	2d01      	cmp	r5, #1
 800b0e2:	d821      	bhi.n	800b128 <ArtNet4Node::HandleAddress(unsigned char)+0x90>
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800b0ea:	7223      	strb	r3, [r4, #8]
 800b0ec:	e01c      	b.n	800b128 <ArtNet4Node::HandleAddress(unsigned char)+0x90>
 800b0ee:	2228      	movs	r2, #40	; 0x28
 800b0f0:	4372      	muls	r2, r6
 800b0f2:	f504 6112 	add.w	r1, r4, #2336	; 0x920
 800b0f6:	588a      	ldr	r2, [r1, r2]
 800b0f8:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 800b0fc:	2a01      	cmp	r2, #1
 800b0fe:	bf18      	it	ne
 800b100:	2202      	movne	r2, #2
 800b102:	4631      	mov	r1, r6
 800b104:	f002 fbe8 	bl	800d8d8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 800b108:	e7de      	b.n	800b0c8 <ArtNet4Node::HandleAddress(unsigned char)+0x30>
 800b10a:	2d53      	cmp	r5, #83	; 0x53
 800b10c:	d808      	bhi.n	800b120 <ArtNet4Node::HandleAddress(unsigned char)+0x88>
 800b10e:	2d4f      	cmp	r5, #79	; 0x4f
 800b110:	d90a      	bls.n	800b128 <ArtNet4Node::HandleAddress(unsigned char)+0x90>
 800b112:	2344      	movs	r3, #68	; 0x44
 800b114:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800b118:	fb03 4406 	mla	r4, r3, r6, r4
 800b11c:	2300      	movs	r3, #0
 800b11e:	e00f      	b.n	800b140 <ArtNet4Node::HandleAddress(unsigned char)+0xa8>
 800b120:	3570      	adds	r5, #112	; 0x70
 800b122:	b2ed      	uxtb	r5, r5
 800b124:	2d03      	cmp	r5, #3
 800b126:	d90e      	bls.n	800b146 <ArtNet4Node::HandleAddress(unsigned char)+0xae>
 800b128:	b003      	add	sp, #12
 800b12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b12c:	2301      	movs	r3, #1
 800b12e:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800b132:	e7da      	b.n	800b0ea <ArtNet4Node::HandleAddress(unsigned char)+0x52>
 800b134:	2344      	movs	r3, #68	; 0x44
 800b136:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800b13a:	fb03 4406 	mla	r4, r3, r6, r4
 800b13e:	2301      	movs	r3, #1
 800b140:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
 800b144:	e7f0      	b.n	800b128 <ArtNet4Node::HandleAddress(unsigned char)+0x90>
 800b146:	2328      	movs	r3, #40	; 0x28
 800b148:	fb03 4306 	mla	r3, r3, r6, r4
 800b14c:	f8d3 2920 	ldr.w	r2, [r3, #2336]	; 0x920
 800b150:	2a01      	cmp	r2, #1
 800b152:	d1e9      	bne.n	800b128 <ArtNet4Node::HandleAddress(unsigned char)+0x90>
 800b154:	4b1c      	ldr	r3, [pc, #112]	; (800b1c8 <ArtNet4Node::HandleAddress(unsigned char)+0x130>)
 800b156:	2700      	movs	r7, #0
 800b158:	6819      	ldr	r1, [r3, #0]
 800b15a:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800b15e:	07c9      	lsls	r1, r1, #31
 800b160:	bf58      	it	pl
 800b162:	601a      	strpl	r2, [r3, #0]
 800b164:	f240 6204 	movw	r2, #1540	; 0x604
 800b168:	4372      	muls	r2, r6
 800b16a:	4b18      	ldr	r3, [pc, #96]	; (800b1cc <ArtNet4Node::HandleAddress(unsigned char)+0x134>)
 800b16c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b170:	441a      	add	r2, r3
 800b172:	4611      	mov	r1, r2
 800b174:	6860      	ldr	r0, [r4, #4]
 800b176:	f502 7500 	add.w	r5, r2, #512	; 0x200
 800b17a:	428d      	cmp	r5, r1
 800b17c:	d120      	bne.n	800b1c0 <ArtNet4Node::HandleAddress(unsigned char)+0x128>
 800b17e:	f240 6104 	movw	r1, #1540	; 0x604
 800b182:	fb01 3106 	mla	r1, r1, r6, r3
 800b186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b18a:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800b18e:	6801      	ldr	r1, [r0, #0]
 800b190:	690d      	ldr	r5, [r1, #16]
 800b192:	4631      	mov	r1, r6
 800b194:	47a8      	blx	r5
 800b196:	2544      	movs	r5, #68	; 0x44
 800b198:	fb05 4506 	mla	r5, r5, r6, r4
 800b19c:	f895 3516 	ldrb.w	r3, [r5, #1302]	; 0x516
 800b1a0:	b153      	cbz	r3, 800b1b8 <ArtNet4Node::HandleAddress(unsigned char)+0x120>
 800b1a2:	f895 3556 	ldrb.w	r3, [r5, #1366]	; 0x556
 800b1a6:	b93b      	cbnz	r3, 800b1b8 <ArtNet4Node::HandleAddress(unsigned char)+0x120>
 800b1a8:	6860      	ldr	r0, [r4, #4]
 800b1aa:	4631      	mov	r1, r6
 800b1ac:	6803      	ldr	r3, [r0, #0]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	4798      	blx	r3
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	f885 3556 	strb.w	r3, [r5, #1366]	; 0x556
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800b1be:	e7b3      	b.n	800b128 <ArtNet4Node::HandleAddress(unsigned char)+0x90>
 800b1c0:	f801 7b01 	strb.w	r7, [r1], #1
 800b1c4:	e7d9      	b.n	800b17a <ArtNet4Node::HandleAddress(unsigned char)+0xe2>
 800b1c6:	bf00      	nop
 800b1c8:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
 800b1cc:	200006bc 			; <UNDEFINED> instruction: 0x200006bc

0800b1d0 <ArtNet4Node::ArtNet4Node()>:
 800b1d0:	b510      	push	{r4, lr}
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	3004      	adds	r0, #4
 800b1d6:	f000 f951 	bl	800b47c <ArtNetNode::ArtNetNode()>
 800b1da:	4b04      	ldr	r3, [pc, #16]	; (800b1ec <ArtNet4Node::ArtNet4Node()+0x1c>)
 800b1dc:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 800b1e0:	6023      	str	r3, [r4, #0]
 800b1e2:	f002 fa8d 	bl	800d700 <E131Bridge::E131Bridge()>
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	61e4      	str	r4, [r4, #28]
 800b1ea:	bd10      	pop	{r4, pc}
 800b1ec:	08019f50 	stmdaeq	r1, {r4, r6, r8, r9, sl, fp, ip, pc}

0800b1f0 <ArtNet4Node::Start()>:
 800b1f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	4606      	mov	r6, r0
 800b1f8:	2500      	movs	r5, #0
 800b1fa:	f500 57aa 	add.w	r7, r0, #5440	; 0x1540
 800b1fe:	3710      	adds	r7, #16
 800b200:	f104 0804 	add.w	r8, r4, #4
 800b204:	2301      	movs	r3, #1
 800b206:	4629      	mov	r1, r5
 800b208:	4640      	mov	r0, r8
 800b20a:	f10d 0206 	add.w	r2, sp, #6
 800b20e:	f000 fb21 	bl	800b854 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800b212:	b140      	cbz	r0, 800b226 <ArtNet4Node::Start()+0x36>
 800b214:	f8d6 3920 	ldr.w	r3, [r6, #2336]	; 0x920
 800b218:	2b01      	cmp	r3, #1
 800b21a:	bf01      	itttt	eq
 800b21c:	2344      	moveq	r3, #68	; 0x44
 800b21e:	436b      	muleq	r3, r5
 800b220:	f8d6 2918 	ldreq.w	r2, [r6, #2328]	; 0x918
 800b224:	50fa      	streq	r2, [r7, r3]
 800b226:	3501      	adds	r5, #1
 800b228:	2d20      	cmp	r5, #32
 800b22a:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800b22e:	d1e7      	bne.n	800b200 <ArtNet4Node::Start()+0x10>
 800b230:	f894 38f8 	ldrb.w	r3, [r4, #2296]	; 0x8f8
 800b234:	f504 5580 	add.w	r5, r4, #4096	; 0x1000
 800b238:	f885 34f9 	strb.w	r3, [r5, #1273]	; 0x4f9
 800b23c:	68a3      	ldr	r3, [r4, #8]
 800b23e:	4640      	mov	r0, r8
 800b240:	606b      	str	r3, [r5, #4]
 800b242:	f000 f83d 	bl	800b2c0 <ArtNetNode::Start()>
 800b246:	4628      	mov	r0, r5
 800b248:	b002      	add	sp, #8
 800b24a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b24e:	f002 bac1 	b.w	800d7d4 <E131Bridge::Start()>

0800b252 <ArtNet4Node::Run()>:
 800b252:	b510      	push	{r4, lr}
 800b254:	4604      	mov	r4, r0
 800b256:	3004      	adds	r0, #4
 800b258:	f000 fa20 	bl	800b69c <ArtNetNode::Run()>
 800b25c:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 800b260:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800b264:	b11b      	cbz	r3, 800b26e <ArtNet4Node::Run()+0x1c>
 800b266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b26a:	f002 be97 	b.w	800df9c <E131Bridge::Run()>
 800b26e:	bd10      	pop	{r4, pc}

0800b270 <ArtNet4Node::Print()>:
 800b270:	b510      	push	{r4, lr}
 800b272:	4604      	mov	r4, r0
 800b274:	3004      	adds	r0, #4
 800b276:	f001 fc85 	bl	800cb84 <ArtNetNode::Print()>
 800b27a:	f894 38fa 	ldrb.w	r3, [r4, #2298]	; 0x8fa
 800b27e:	b15b      	cbz	r3, 800b298 <ArtNet4Node::Print()+0x28>
 800b280:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
 800b284:	b113      	cbz	r3, 800b28c <ArtNet4Node::Print()+0x1c>
 800b286:	4805      	ldr	r0, [pc, #20]	; (800b29c <ArtNet4Node::Print()+0x2c>)
 800b288:	f7fe fa9a 	bl	80097c0 <printf>
 800b28c:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 800b290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b294:	f003 b8d4 	b.w	800e440 <E131Bridge::Print()>
 800b298:	bd10      	pop	{r4, pc}
 800b29a:	bf00      	nop
 800b29c:	08019f29 	stmdaeq	r1, {r0, r3, r5, r8, r9, sl, fp, ip, pc}

0800b2a0 <strncpy.isra.0>:
 800b2a0:	3901      	subs	r1, #1
 800b2a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b2a6:	b92b      	cbnz	r3, 800b2b4 <strncpy.isra.0+0x14>
 800b2a8:	4402      	add	r2, r0
 800b2aa:	4290      	cmp	r0, r2
 800b2ac:	d006      	beq.n	800b2bc <strncpy.isra.0+0x1c>
 800b2ae:	f800 3b01 	strb.w	r3, [r0], #1
 800b2b2:	e7fa      	b.n	800b2aa <strncpy.isra.0+0xa>
 800b2b4:	3a01      	subs	r2, #1
 800b2b6:	f800 3b01 	strb.w	r3, [r0], #1
 800b2ba:	d1f2      	bne.n	800b2a2 <strncpy.isra.0+0x2>
 800b2bc:	4770      	bx	lr

0800b2be <ArtNetNode::~ArtNetNode()>:
 800b2be:	4770      	bx	lr

0800b2c0 <ArtNetNode::Start()>:
 800b2c0:	b570      	push	{r4, r5, r6, lr}
 800b2c2:	4d1d      	ldr	r5, [pc, #116]	; (800b338 <ArtNetNode::Start()+0x78>)
 800b2c4:	f890 309e 	ldrb.w	r3, [r0, #158]	; 0x9e
 800b2c8:	682a      	ldr	r2, [r5, #0]
 800b2ca:	f023 0302 	bic.w	r3, r3, #2
 800b2ce:	7951      	ldrb	r1, [r2, #5]
 800b2d0:	4604      	mov	r4, r0
 800b2d2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800b2d6:	b25b      	sxtb	r3, r3
 800b2d8:	f880 309e 	strb.w	r3, [r0, #158]	; 0x9e
 800b2dc:	7912      	ldrb	r2, [r2, #4]
 800b2de:	f023 0304 	bic.w	r3, r3, #4
 800b2e2:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800b2e6:	f880 309e 	strb.w	r3, [r0, #158]	; 0x9e
 800b2ea:	f001 f901 	bl	800c4f0 <ArtNetNode::FillPollReply()>
 800b2ee:	f641 1136 	movw	r1, #6454	; 0x1936
 800b2f2:	6828      	ldr	r0, [r5, #0]
 800b2f4:	f008 fd70 	bl	8013dd8 <Network::Begin(unsigned short)>
 800b2f8:	2302      	movs	r3, #2
 800b2fa:	f884 38ed 	strb.w	r3, [r4, #2285]	; 0x8ed
 800b2fe:	6923      	ldr	r3, [r4, #16]
 800b300:	6020      	str	r0, [r4, #0]
 800b302:	b16b      	cbz	r3, 800b320 <ArtNetNode::Start()+0x60>
 800b304:	2500      	movs	r5, #0
 800b306:	f504 6660 	add.w	r6, r4, #3584	; 0xe00
 800b30a:	012b      	lsls	r3, r5, #4
 800b30c:	5cf3      	ldrb	r3, [r6, r3]
 800b30e:	b123      	cbz	r3, 800b31a <ArtNetNode::Start()+0x5a>
 800b310:	6920      	ldr	r0, [r4, #16]
 800b312:	4629      	mov	r1, r5
 800b314:	6803      	ldr	r3, [r0, #0]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	4798      	blx	r3
 800b31a:	3501      	adds	r5, #1
 800b31c:	2d20      	cmp	r5, #32
 800b31e:	d1f4      	bne.n	800b30a <ArtNetNode::Start()+0x4a>
 800b320:	4b06      	ldr	r3, [pc, #24]	; (800b33c <ArtNetNode::Start()+0x7c>)
 800b322:	2102      	movs	r1, #2
 800b324:	6818      	ldr	r0, [r3, #0]
 800b326:	f00b f8b1 	bl	801648c <LedBlink::SetMode(ledblink::Mode)>
 800b32a:	4620      	mov	r0, r4
 800b32c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b330:	2100      	movs	r1, #0
 800b332:	f001 b9b7 	b.w	800c6a4 <ArtNetNode::SendPollRelply(bool)>
 800b336:	bf00      	nop
 800b338:	2001d2d4 	ldrdcs	sp, [r1], -r4
 800b33c:	2001d998 	mulcs	r1, r8, r9

0800b340 <ArtNetNode::Stop()>:
 800b340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b344:	2500      	movs	r5, #0
 800b346:	4604      	mov	r4, r0
 800b348:	4606      	mov	r6, r0
 800b34a:	46a9      	mov	r9, r5
 800b34c:	f04f 0a01 	mov.w	sl, #1
 800b350:	4f1f      	ldr	r7, [pc, #124]	; (800b3d0 <ArtNetNode::Stop()+0x90>)
 800b352:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800b3d4 <ArtNetNode::Stop()+0x94>
 800b356:	f8d6 391c 	ldr.w	r3, [r6, #2332]	; 0x91c
 800b35a:	b97b      	cbnz	r3, 800b37c <ArtNetNode::Stop()+0x3c>
 800b35c:	6860      	ldr	r0, [r4, #4]
 800b35e:	b118      	cbz	r0, 800b368 <ArtNetNode::Stop()+0x28>
 800b360:	6803      	ldr	r3, [r0, #0]
 800b362:	4629      	mov	r1, r5
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	4798      	blx	r3
 800b368:	f8d8 3000 	ldr.w	r3, [r8]
 800b36c:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800b370:	07db      	lsls	r3, r3, #31
 800b372:	bf58      	it	pl
 800b374:	f8c8 a000 	strpl.w	sl, [r8]
 800b378:	f886 9921 	strb.w	r9, [r6, #2337]	; 0x921
 800b37c:	3501      	adds	r5, #1
 800b37e:	2d20      	cmp	r5, #32
 800b380:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800b384:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800b388:	d1e5      	bne.n	800b356 <ArtNetNode::Stop()+0x16>
 800b38a:	6923      	ldr	r3, [r4, #16]
 800b38c:	b16b      	cbz	r3, 800b3aa <ArtNetNode::Stop()+0x6a>
 800b38e:	2500      	movs	r5, #0
 800b390:	f504 6660 	add.w	r6, r4, #3584	; 0xe00
 800b394:	012b      	lsls	r3, r5, #4
 800b396:	5cf3      	ldrb	r3, [r6, r3]
 800b398:	b123      	cbz	r3, 800b3a4 <ArtNetNode::Stop()+0x64>
 800b39a:	6920      	ldr	r0, [r4, #16]
 800b39c:	4629      	mov	r1, r5
 800b39e:	6803      	ldr	r3, [r0, #0]
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	4798      	blx	r3
 800b3a4:	3501      	adds	r5, #1
 800b3a6:	2d04      	cmp	r5, #4
 800b3a8:	d1f4      	bne.n	800b394 <ArtNetNode::Stop()+0x54>
 800b3aa:	4b0b      	ldr	r3, [pc, #44]	; (800b3d8 <ArtNetNode::Stop()+0x98>)
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	6818      	ldr	r0, [r3, #0]
 800b3b0:	f00b f86c 	bl	801648c <LedBlink::SetMode(ledblink::Mode)>
 800b3b4:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 800b3b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b3c0:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	f884 38ed 	strb.w	r3, [r4, #2285]	; 0x8ed
 800b3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ce:	bf00      	nop
 800b3d0:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
 800b3d4:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
 800b3d8:	2001d998 	mulcs	r1, r8, r9

0800b3dc <ArtNetNode::SetShortName(char const*)>:
 800b3dc:	b570      	push	{r4, r5, r6, lr}
 800b3de:	f100 054a 	add.w	r5, r0, #74	; 0x4a
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	2211      	movs	r2, #17
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	f7ff ff5a 	bl	800b2a0 <strncpy.isra.0>
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 800b3f2:	462b      	mov	r3, r5
 800b3f4:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d111      	bne.n	800b420 <ArtNetNode::SetShortName(char const*)+0x44>
 800b3fc:	f894 38ed 	ldrb.w	r3, [r4, #2285]	; 0x8ed
 800b400:	2b02      	cmp	r3, #2
 800b402:	d112      	bne.n	800b42a <ArtNetNode::SetShortName(char const*)+0x4e>
 800b404:	69e0      	ldr	r0, [r4, #28]
 800b406:	b118      	cbz	r0, 800b410 <ArtNetNode::SetShortName(char const*)+0x34>
 800b408:	6803      	ldr	r3, [r0, #0]
 800b40a:	4629      	mov	r1, r5
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	4798      	blx	r3
 800b410:	6a20      	ldr	r0, [r4, #32]
 800b412:	b150      	cbz	r0, 800b42a <ArtNetNode::SetShortName(char const*)+0x4e>
 800b414:	6803      	ldr	r3, [r0, #0]
 800b416:	4629      	mov	r1, r5
 800b418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	4718      	bx	r3
 800b420:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b424:	f883 154b 	strb.w	r1, [r3, #1355]	; 0x54b
 800b428:	e7e6      	b.n	800b3f8 <ArtNetNode::SetShortName(char const*)+0x1c>
 800b42a:	bd70      	pop	{r4, r5, r6, pc}

0800b42c <ArtNetNode::SetLongName(char const*)>:
 800b42c:	b570      	push	{r4, r5, r6, lr}
 800b42e:	f100 055c 	add.w	r5, r0, #92	; 0x5c
 800b432:	4604      	mov	r4, r0
 800b434:	223f      	movs	r2, #63	; 0x3f
 800b436:	4628      	mov	r0, r5
 800b438:	f7ff ff32 	bl	800b2a0 <strncpy.isra.0>
 800b43c:	2300      	movs	r3, #0
 800b43e:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 800b442:	462b      	mov	r3, r5
 800b444:	f104 029c 	add.w	r2, r4, #156	; 0x9c
 800b448:	4293      	cmp	r3, r2
 800b44a:	d111      	bne.n	800b470 <ArtNetNode::SetLongName(char const*)+0x44>
 800b44c:	f894 38ed 	ldrb.w	r3, [r4, #2285]	; 0x8ed
 800b450:	2b02      	cmp	r3, #2
 800b452:	d112      	bne.n	800b47a <ArtNetNode::SetLongName(char const*)+0x4e>
 800b454:	69e0      	ldr	r0, [r4, #28]
 800b456:	b118      	cbz	r0, 800b460 <ArtNetNode::SetLongName(char const*)+0x34>
 800b458:	6803      	ldr	r3, [r0, #0]
 800b45a:	4629      	mov	r1, r5
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	4798      	blx	r3
 800b460:	6a20      	ldr	r0, [r4, #32]
 800b462:	b150      	cbz	r0, 800b47a <ArtNetNode::SetLongName(char const*)+0x4e>
 800b464:	6803      	ldr	r3, [r0, #0]
 800b466:	4629      	mov	r1, r5
 800b468:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	4718      	bx	r3
 800b470:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b474:	f883 154b 	strb.w	r1, [r3, #1355]	; 0x54b
 800b478:	e7e6      	b.n	800b448 <ArtNetNode::SetLongName(char const*)+0x1c>
 800b47a:	bd70      	pop	{r4, r5, r6, pc}

0800b47c <ArtNetNode::ArtNetNode()>:
 800b47c:	2300      	movs	r3, #0
 800b47e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b482:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b484:	4604      	mov	r4, r0
 800b486:	e9c0 2300 	strd	r2, r3, [r0]
 800b48a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800b48e:	4a47      	ldr	r2, [pc, #284]	; (800b5ac <ArtNetNode::ArtNetNode()+0x130>)
 800b490:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b494:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800b498:	6010      	str	r0, [r2, #0]
 800b49a:	b085      	sub	sp, #20
 800b49c:	6203      	str	r3, [r0, #32]
 800b49e:	f8c0 3880 	str.w	r3, [r0, #2176]	; 0x880
 800b4a2:	f8c0 3884 	str.w	r3, [r0, #2180]	; 0x884
 800b4a6:	f880 3888 	strb.w	r3, [r0, #2184]	; 0x888
 800b4aa:	f100 0224 	add.w	r2, r0, #36	; 0x24
 800b4ae:	f100 01a8 	add.w	r1, r0, #168	; 0xa8
 800b4b2:	428a      	cmp	r2, r1
 800b4b4:	d165      	bne.n	800b582 <ArtNetNode::ArtNetNode()+0x106>
 800b4b6:	4b3e      	ldr	r3, [pc, #248]	; (800b5b0 <ArtNetNode::ArtNetNode()+0x134>)
 800b4b8:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800b4bc:	6818      	ldr	r0, [r3, #0]
 800b4be:	6943      	ldr	r3, [r0, #20]
 800b4c0:	6263      	str	r3, [r4, #36]	; 0x24
 800b4c2:	69c2      	ldr	r2, [r0, #28]
 800b4c4:	ea63 0302 	orn	r3, r3, r2
 800b4c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4ca:	6323      	str	r3, [r4, #48]	; 0x30
 800b4cc:	f008 fc8a 	bl	8013de4 <Network::MacAddressCopyTo(unsigned char*)>
 800b4d0:	23d0      	movs	r3, #208	; 0xd0
 800b4d2:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800b4d6:	f642 0398 	movw	r3, #10392	; 0x2898
 800b4da:	2100      	movs	r1, #0
 800b4dc:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 800b4e0:	f604 02fc 	addw	r2, r4, #2300	; 0x8fc
 800b4e4:	f604 03dc 	addw	r3, r4, #2268	; 0x8dc
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d14d      	bne.n	800b588 <ArtNetNode::ArtNetNode()+0x10c>
 800b4ec:	f240 1201 	movw	r2, #257	; 0x101
 800b4f0:	2500      	movs	r5, #0
 800b4f2:	2708      	movs	r7, #8
 800b4f4:	f8a4 28ec 	strh.w	r2, [r4, #2284]	; 0x8ec
 800b4f8:	f604 51fc 	addw	r1, r4, #3580	; 0xdfc
 800b4fc:	f604 76fc 	addw	r6, r4, #4092	; 0xffc
 800b500:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800b504:	4283      	cmp	r3, r0
 800b506:	d145      	bne.n	800b594 <ArtNetNode::ArtNetNode()+0x118>
 800b508:	460a      	mov	r2, r1
 800b50a:	f101 0310 	add.w	r3, r1, #16
 800b50e:	429a      	cmp	r2, r3
 800b510:	d143      	bne.n	800b59a <ArtNetNode::ArtNetNode()+0x11e>
 800b512:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b514:	4296      	cmp	r6, r2
 800b516:	608b      	str	r3, [r1, #8]
 800b518:	70cf      	strb	r7, [r1, #3]
 800b51a:	d138      	bne.n	800b58e <ArtNetNode::ArtNetNode()+0x112>
 800b51c:	4620      	mov	r0, r4
 800b51e:	4925      	ldr	r1, [pc, #148]	; (800b5b4 <ArtNetNode::ArtNetNode()+0x138>)
 800b520:	f7ff ff5c 	bl	800b3dc <ArtNetNode::SetShortName(char const*)>
 800b524:	4b24      	ldr	r3, [pc, #144]	; (800b5b8 <ArtNetNode::ArtNetNode()+0x13c>)
 800b526:	4d25      	ldr	r5, [pc, #148]	; (800b5bc <ArtNetNode::ArtNetNode()+0x140>)
 800b528:	9302      	str	r3, [sp, #8]
 800b52a:	2304      	movs	r3, #4
 800b52c:	f604 0699 	addw	r6, r4, #2201	; 0x899
 800b530:	4a23      	ldr	r2, [pc, #140]	; (800b5c0 <ArtNetNode::ArtNetNode()+0x144>)
 800b532:	2140      	movs	r1, #64	; 0x40
 800b534:	9301      	str	r3, [sp, #4]
 800b536:	4630      	mov	r0, r6
 800b538:	4b22      	ldr	r3, [pc, #136]	; (800b5c4 <ArtNetNode::ArtNetNode()+0x148>)
 800b53a:	9500      	str	r5, [sp, #0]
 800b53c:	f7fe f968 	bl	8009810 <snprintf>
 800b540:	4631      	mov	r1, r6
 800b542:	4620      	mov	r0, r4
 800b544:	f7ff ff72 	bl	800b42c <ArtNetNode::SetLongName(char const*)>
 800b548:	220f      	movs	r2, #15
 800b54a:	491f      	ldr	r1, [pc, #124]	; (800b5c8 <ArtNetNode::ArtNetNode()+0x14c>)
 800b54c:	f604 0089 	addw	r0, r4, #2185	; 0x889
 800b550:	f7ff fea6 	bl	800b2a0 <strncpy.isra.0>
 800b554:	2300      	movs	r3, #0
 800b556:	f204 6272 	addw	r2, r4, #1650	; 0x672
 800b55a:	f884 3898 	strb.w	r3, [r4, #2200]	; 0x898
 800b55e:	f204 636a 	addw	r3, r4, #1642	; 0x66a
 800b562:	4293      	cmp	r3, r2
 800b564:	d11c      	bne.n	800b5a0 <ArtNetNode::ArtNetNode()+0x124>
 800b566:	2300      	movs	r3, #0
 800b568:	2250      	movs	r2, #80	; 0x50
 800b56a:	4620      	mov	r0, r4
 800b56c:	f884 3673 	strb.w	r3, [r4, #1651]	; 0x673
 800b570:	f884 3675 	strb.w	r3, [r4, #1653]	; 0x675
 800b574:	230e      	movs	r3, #14
 800b576:	f884 2674 	strb.w	r2, [r4, #1652]	; 0x674
 800b57a:	f884 3676 	strb.w	r3, [r4, #1654]	; 0x676
 800b57e:	b005      	add	sp, #20
 800b580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b582:	f802 3b01 	strb.w	r3, [r2], #1
 800b586:	e794      	b.n	800b4b2 <ArtNetNode::ArtNetNode()+0x36>
 800b588:	f803 1b01 	strb.w	r1, [r3], #1
 800b58c:	e7ac      	b.n	800b4e8 <ArtNetNode::ArtNetNode()+0x6c>
 800b58e:	4603      	mov	r3, r0
 800b590:	4611      	mov	r1, r2
 800b592:	e7b5      	b.n	800b500 <ArtNetNode::ArtNetNode()+0x84>
 800b594:	f803 5b01 	strb.w	r5, [r3], #1
 800b598:	e7b4      	b.n	800b504 <ArtNetNode::ArtNetNode()+0x88>
 800b59a:	f802 5b01 	strb.w	r5, [r2], #1
 800b59e:	e7b6      	b.n	800b50e <ArtNetNode::ArtNetNode()+0x92>
 800b5a0:	f815 1b01 	ldrb.w	r1, [r5], #1
 800b5a4:	f803 1f01 	strb.w	r1, [r3, #1]!
 800b5a8:	e7db      	b.n	800b562 <ArtNetNode::ArtNetNode()+0xe6>
 800b5aa:	bf00      	nop
 800b5ac:	2000c73c 	andcs	ip, r0, ip, lsr r7
 800b5b0:	2001d2d4 	ldrdcs	sp, [r1], -r4
 800b5b4:	08019fd3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r8, r9, sl, fp, ip, pc}
 800b5b8:	08019fad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r8, r9, sl, fp, ip, pc}
 800b5bc:	08019fcb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, r9, sl, fp, ip, pc}
 800b5c0:	08019fa1 	stmdaeq	r1, {r0, r5, r7, r8, r9, sl, fp, ip, pc}
 800b5c4:	08019502 	stmdaeq	r1, {r1, r8, sl, ip, pc}
 800b5c8:	08019fc2 	stmdaeq	r1, {r1, r6, r7, r8, r9, sl, fp, ip, pc}

0800b5cc <ArtNetNode::SetNetworkDataLossCondition()>:
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	b4f0      	push	{r4, r5, r6, r7}
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	f880 38f2 	strb.w	r3, [r0, #2290]	; 0x8f2
 800b5d6:	f880 38f1 	strb.w	r3, [r0, #2289]	; 0x8f1
 800b5da:	4603      	mov	r3, r0
 800b5dc:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 800b5e0:	f8d2 1908 	ldr.w	r1, [r2, #2312]	; 0x908
 800b5e4:	f8d2 5910 	ldr.w	r5, [r2, #2320]	; 0x910
 800b5e8:	42e9      	cmn	r1, r5
 800b5ea:	d104      	bne.n	800b5f6 <ArtNetNode::SetNetworkDataLossCondition()+0x2a>
 800b5ec:	3228      	adds	r2, #40	; 0x28
 800b5ee:	42a2      	cmp	r2, r4
 800b5f0:	d1f6      	bne.n	800b5e0 <ArtNetNode::SetNetworkDataLossCondition()+0x14>
 800b5f2:	bcf0      	pop	{r4, r5, r6, r7}
 800b5f4:	4770      	bx	lr
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	2601      	movs	r6, #1
 800b5fa:	4a12      	ldr	r2, [pc, #72]	; (800b644 <ArtNetNode::SetNetworkDataLossCondition()+0x78>)
 800b5fc:	4d12      	ldr	r5, [pc, #72]	; (800b648 <ArtNetNode::SetNetworkDataLossCondition()+0x7c>)
 800b5fe:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
 800b602:	f8c3 1910 	str.w	r1, [r3, #2320]	; 0x910
 800b606:	682f      	ldr	r7, [r5, #0]
 800b608:	3328      	adds	r3, #40	; 0x28
 800b60a:	07ff      	lsls	r7, r7, #31
 800b60c:	bf58      	it	pl
 800b60e:	602e      	strpl	r6, [r5, #0]
 800b610:	42a3      	cmp	r3, r4
 800b612:	f8c2 1600 	str.w	r1, [r2, #1536]	; 0x600
 800b616:	f202 6204 	addw	r2, r2, #1540	; 0x604
 800b61a:	d1f0      	bne.n	800b5fe <ArtNetNode::SetNetworkDataLossCondition()+0x32>
 800b61c:	f890 309f 	ldrb.w	r3, [r0, #159]	; 0x9f
 800b620:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b624:	2b40      	cmp	r3, #64	; 0x40
 800b626:	d007      	beq.n	800b638 <ArtNetNode::SetNetworkDataLossCondition()+0x6c>
 800b628:	d9e3      	bls.n	800b5f2 <ArtNetNode::SetNetworkDataLossCondition()+0x26>
 800b62a:	2b80      	cmp	r3, #128	; 0x80
 800b62c:	d1e1      	bne.n	800b5f2 <ArtNetNode::SetNetworkDataLossCondition()+0x26>
 800b62e:	bcf0      	pop	{r4, r5, r6, r7}
 800b630:	6840      	ldr	r0, [r0, #4]
 800b632:	6803      	ldr	r3, [r0, #0]
 800b634:	699b      	ldr	r3, [r3, #24]
 800b636:	4718      	bx	r3
 800b638:	6840      	ldr	r0, [r0, #4]
 800b63a:	2101      	movs	r1, #1
 800b63c:	bcf0      	pop	{r4, r5, r6, r7}
 800b63e:	6803      	ldr	r3, [r0, #0]
 800b640:	695b      	ldr	r3, [r3, #20]
 800b642:	4718      	bx	r3
 800b644:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
 800b648:	200006b8 			; <UNDEFINED> instruction: 0x200006b8

0800b64c <ArtNetNode::GetType()>:
 800b64c:	f8b0 3578 	ldrh.w	r3, [r0, #1400]	; 0x578
 800b650:	b530      	push	{r4, r5, lr}
 800b652:	2b0b      	cmp	r3, #11
 800b654:	d91d      	bls.n	800b692 <ArtNetNode::GetType()+0x46>
 800b656:	f890 30b2 	ldrb.w	r3, [r0, #178]	; 0xb2
 800b65a:	b9d3      	cbnz	r3, 800b692 <ArtNetNode::GetType()+0x46>
 800b65c:	f890 20b3 	ldrb.w	r2, [r0, #179]	; 0xb3
 800b660:	2a0e      	cmp	r2, #14
 800b662:	d10d      	bne.n	800b680 <ArtNetNode::GetType()+0x34>
 800b664:	4a0c      	ldr	r2, [pc, #48]	; (800b698 <ArtNetNode::GetType()+0x4c>)
 800b666:	f100 03a7 	add.w	r3, r0, #167	; 0xa7
 800b66a:	f100 01af 	add.w	r1, r0, #175	; 0xaf
 800b66e:	428b      	cmp	r3, r1
 800b670:	d109      	bne.n	800b686 <ArtNetNode::GetType()+0x3a>
 800b672:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 800b676:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 800b67a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b67e:	b29b      	uxth	r3, r3
 800b680:	f8a0 357a 	strh.w	r3, [r0, #1402]	; 0x57a
 800b684:	bd30      	pop	{r4, r5, pc}
 800b686:	f812 4b01 	ldrb.w	r4, [r2], #1
 800b68a:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800b68e:	42a5      	cmp	r5, r4
 800b690:	d0ed      	beq.n	800b66e <ArtNetNode::GetType()+0x22>
 800b692:	2300      	movs	r3, #0
 800b694:	e7f4      	b.n	800b680 <ArtNetNode::GetType()+0x34>
 800b696:	bf00      	nop
 800b698:	08018bd0 	stmdaeq	r1, {r4, r6, r7, r8, r9, fp, pc}

0800b69c <ArtNetNode::Run()>:
 800b69c:	b530      	push	{r4, r5, lr}
 800b69e:	4601      	mov	r1, r0
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	b085      	sub	sp, #20
 800b6a4:	f10d 030e 	add.w	r3, sp, #14
 800b6a8:	f811 0ba8 	ldrb.w	r0, [r1], #168
 800b6ac:	f240 42cc 	movw	r2, #1228	; 0x4cc
 800b6b0:	9300      	str	r3, [sp, #0]
 800b6b2:	f204 5374 	addw	r3, r4, #1396	; 0x574
 800b6b6:	f007 fe6b 	bl	8013390 <udp_recv>
 800b6ba:	4b64      	ldr	r3, [pc, #400]	; (800b84c <ArtNetNode::Run()+0x1b0>)
 800b6bc:	681d      	ldr	r5, [r3, #0]
 800b6be:	f8c4 5880 	str.w	r5, [r4, #2176]	; 0x880
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	d142      	bne.n	800b74c <ArtNetNode::Run()+0xb0>
 800b6c6:	f8d4 3884 	ldr.w	r3, [r4, #2180]	; 0x884
 800b6ca:	1aed      	subs	r5, r5, r3
 800b6cc:	f242 730f 	movw	r3, #9999	; 0x270f
 800b6d0:	429d      	cmp	r5, r3
 800b6d2:	d902      	bls.n	800b6da <ArtNetNode::Run()+0x3e>
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	f7ff ff79 	bl	800b5cc <ArtNetNode::SetNetworkDataLossCondition()>
 800b6da:	f894 38ee 	ldrb.w	r3, [r4, #2286]	; 0x8ee
 800b6de:	b15b      	cbz	r3, 800b6f8 <ArtNetNode::Run()+0x5c>
 800b6e0:	69a0      	ldr	r0, [r4, #24]
 800b6e2:	f894 58f3 	ldrb.w	r5, [r4, #2291]	; 0x8f3
 800b6e6:	6803      	ldr	r3, [r0, #0]
 800b6e8:	695b      	ldr	r3, [r3, #20]
 800b6ea:	4798      	blx	r3
 800b6ec:	b905      	cbnz	r5, 800b6f0 <ArtNetNode::Run()+0x54>
 800b6ee:	b118      	cbz	r0, 800b6f8 <ArtNetNode::Run()+0x5c>
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f000 ffd6 	bl	800c6a4 <ArtNetNode::SendPollRelply(bool)>
 800b6f8:	f8d4 3880 	ldr.w	r3, [r4, #2176]	; 0x880
 800b6fc:	f8d4 2884 	ldr.w	r2, [r4, #2180]	; 0x884
 800b700:	1a9b      	subs	r3, r3, r2
 800b702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b706:	d305      	bcc.n	800b714 <ArtNetNode::Run()+0x78>
 800b708:	f894 38f5 	ldrb.w	r3, [r4, #2293]	; 0x8f5
 800b70c:	f023 0302 	bic.w	r3, r3, #2
 800b710:	f884 38f5 	strb.w	r3, [r4, #2293]	; 0x8f5
 800b714:	6923      	ldr	r3, [r4, #16]
 800b716:	b113      	cbz	r3, 800b71e <ArtNetNode::Run()+0x82>
 800b718:	4620      	mov	r0, r4
 800b71a:	f000 fd8b 	bl	800c234 <ArtNetNode::HandleDmxIn()>
 800b71e:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 800b722:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b726:	2bc0      	cmp	r3, #192	; 0xc0
 800b728:	d10e      	bne.n	800b748 <ArtNetNode::Run()+0xac>
 800b72a:	4b49      	ldr	r3, [pc, #292]	; (800b850 <ArtNetNode::Run()+0x1b4>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	2b04      	cmp	r3, #4
 800b732:	d009      	beq.n	800b748 <ArtNetNode::Run()+0xac>
 800b734:	69a0      	ldr	r0, [r4, #24]
 800b736:	f894 28f5 	ldrb.w	r2, [r4, #2293]	; 0x8f5
 800b73a:	6803      	ldr	r3, [r0, #0]
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	2a00      	cmp	r2, #0
 800b740:	f000 8081 	beq.w	800b846 <ArtNetNode::Run()+0x1aa>
 800b744:	2103      	movs	r1, #3
 800b746:	4798      	blx	r3
 800b748:	b005      	add	sp, #20
 800b74a:	bd30      	pop	{r4, r5, pc}
 800b74c:	f8a4 0578 	strh.w	r0, [r4, #1400]	; 0x578
 800b750:	f8c4 5884 	str.w	r5, [r4, #2180]	; 0x884
 800b754:	4620      	mov	r0, r4
 800b756:	f7ff ff79 	bl	800b64c <ArtNetNode::GetType()>
 800b75a:	f894 38f1 	ldrb.w	r3, [r4, #2289]	; 0x8f1
 800b75e:	b143      	cbz	r3, 800b772 <ArtNetNode::Run()+0xd6>
 800b760:	f8d4 38e8 	ldr.w	r3, [r4, #2280]	; 0x8e8
 800b764:	1aed      	subs	r5, r5, r3
 800b766:	f5b5 6f7a 	cmp.w	r5, #4000	; 0xfa0
 800b76a:	bf24      	itt	cs
 800b76c:	2300      	movcs	r3, #0
 800b76e:	f884 38f1 	strbcs.w	r3, [r4, #2289]	; 0x8f1
 800b772:	f8b4 357a 	ldrh.w	r3, [r4, #1402]	; 0x57a
 800b776:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 800b77a:	d04c      	beq.n	800b816 <ArtNetNode::Run()+0x17a>
 800b77c:	d81d      	bhi.n	800b7ba <ArtNetNode::Run()+0x11e>
 800b77e:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 800b782:	d039      	beq.n	800b7f8 <ArtNetNode::Run()+0x15c>
 800b784:	d80c      	bhi.n	800b7a0 <ArtNetNode::Run()+0x104>
 800b786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b78a:	d031      	beq.n	800b7f0 <ArtNetNode::Run()+0x154>
 800b78c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800b790:	d1c0      	bne.n	800b714 <ArtNetNode::Run()+0x78>
 800b792:	6863      	ldr	r3, [r4, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d0bd      	beq.n	800b714 <ArtNetNode::Run()+0x78>
 800b798:	4620      	mov	r0, r4
 800b79a:	f000 fc64 	bl	800c066 <ArtNetNode::HandleDmx()>
 800b79e:	e7b9      	b.n	800b714 <ArtNetNode::Run()+0x78>
 800b7a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b7a4:	d02f      	beq.n	800b806 <ArtNetNode::Run()+0x16a>
 800b7a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7aa:	d1b3      	bne.n	800b714 <ArtNetNode::Run()+0x78>
 800b7ac:	68e3      	ldr	r3, [r4, #12]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d0b0      	beq.n	800b714 <ArtNetNode::Run()+0x78>
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f001 f8d2 	bl	800c95c <ArtNetNode::HandleTodRequest()>
 800b7b8:	e7ac      	b.n	800b714 <ArtNetNode::Run()+0x78>
 800b7ba:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 800b7be:	d026      	beq.n	800b80e <ArtNetNode::Run()+0x172>
 800b7c0:	d80c      	bhi.n	800b7dc <ArtNetNode::Run()+0x140>
 800b7c2:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 800b7c6:	d02e      	beq.n	800b826 <ArtNetNode::Run()+0x18a>
 800b7c8:	f5b3 4f17 	cmp.w	r3, #38656	; 0x9700
 800b7cc:	d1a2      	bne.n	800b714 <ArtNetNode::Run()+0x78>
 800b7ce:	68a3      	ldr	r3, [r4, #8]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d09f      	beq.n	800b714 <ArtNetNode::Run()+0x78>
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f001 f9ad 	bl	800cb34 <ArtNetNode::HandleTimeCode()>
 800b7da:	e79b      	b.n	800b714 <ArtNetNode::Run()+0x78>
 800b7dc:	f5b3 4f19 	cmp.w	r3, #39168	; 0x9900
 800b7e0:	d029      	beq.n	800b836 <ArtNetNode::Run()+0x19a>
 800b7e2:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 800b7e6:	d195      	bne.n	800b714 <ArtNetNode::Run()+0x78>
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	f000 fdbb 	bl	800c364 <ArtNetNode::HandleIpProg()>
 800b7ee:	e791      	b.n	800b714 <ArtNetNode::Run()+0x78>
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f000 ffc3 	bl	800c77c <ArtNetNode::HandlePoll()>
 800b7f6:	e78d      	b.n	800b714 <ArtNetNode::Run()+0x78>
 800b7f8:	6863      	ldr	r3, [r4, #4]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d08a      	beq.n	800b714 <ArtNetNode::Run()+0x78>
 800b7fe:	4620      	mov	r0, r4
 800b800:	f001 f94e 	bl	800caa0 <ArtNetNode::HandleSync()>
 800b804:	e786      	b.n	800b714 <ArtNetNode::Run()+0x78>
 800b806:	4620      	mov	r0, r4
 800b808:	f000 fa0c 	bl	800bc24 <ArtNetNode::HandleAddress()>
 800b80c:	e782      	b.n	800b714 <ArtNetNode::Run()+0x78>
 800b80e:	4620      	mov	r0, r4
 800b810:	f001 f996 	bl	800cb40 <ArtNetNode::HandleTimeSync()>
 800b814:	e77e      	b.n	800b714 <ArtNetNode::Run()+0x78>
 800b816:	68e3      	ldr	r3, [r4, #12]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f43f af7b 	beq.w	800b714 <ArtNetNode::Run()+0x78>
 800b81e:	4620      	mov	r0, r4
 800b820:	f001 f85f 	bl	800c8e2 <ArtNetNode::HandleTodControl()>
 800b824:	e776      	b.n	800b714 <ArtNetNode::Run()+0x78>
 800b826:	68e3      	ldr	r3, [r4, #12]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f43f af73 	beq.w	800b714 <ArtNetNode::Run()+0x78>
 800b82e:	4620      	mov	r0, r4
 800b830:	f001 f8b2 	bl	800c998 <ArtNetNode::HandleRdm()>
 800b834:	e76e      	b.n	800b714 <ArtNetNode::Run()+0x78>
 800b836:	6963      	ldr	r3, [r4, #20]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f43f af6b 	beq.w	800b714 <ArtNetNode::Run()+0x78>
 800b83e:	4620      	mov	r0, r4
 800b840:	f001 ff20 	bl	800d684 <ArtNetNode::HandleTrigger()>
 800b844:	e766      	b.n	800b714 <ArtNetNode::Run()+0x78>
 800b846:	2102      	movs	r1, #2
 800b848:	e77d      	b.n	800b746 <ArtNetNode::Run()+0xaa>
 800b84a:	bf00      	nop
 800b84c:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4
 800b850:	2001d998 	mulcs	r1, r8, r9

0800b854 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
 800b854:	b93b      	cbnz	r3, 800b866 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x12>
 800b856:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800b85a:	f8b0 3dfc 	ldrh.w	r3, [r0, #3580]	; 0xdfc
 800b85e:	f890 0e00 	ldrb.w	r0, [r0, #3584]	; 0xe00
 800b862:	8013      	strh	r3, [r2, #0]
 800b864:	4770      	bx	lr
 800b866:	2b01      	cmp	r3, #1
 800b868:	bf01      	itttt	eq
 800b86a:	2328      	moveq	r3, #40	; 0x28
 800b86c:	fb03 0001 	mlaeq	r0, r3, r1, r0
 800b870:	f8b0 38fc 	ldrheq.w	r3, [r0, #2300]	; 0x8fc
 800b874:	f890 0900 	ldrbeq.w	r0, [r0, #2304]	; 0x900
 800b878:	bf0c      	ite	eq
 800b87a:	8013      	strheq	r3, [r2, #0]
 800b87c:	2000      	movne	r0, #0
 800b87e:	4770      	bx	lr

0800b880 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
 800b880:	4402      	add	r2, r0
 800b882:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 800b886:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 800b88a:	021b      	lsls	r3, r3, #8
 800b88c:	0112      	lsls	r2, r2, #4
 800b88e:	b2d2      	uxtb	r2, r2
 800b890:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800b894:	4313      	orrs	r3, r2
 800b896:	f001 010f 	and.w	r1, r1, #15
 800b89a:	ea43 0001 	orr.w	r0, r3, r1
 800b89e:	4770      	bx	lr

0800b8a0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
 800b8a0:	291f      	cmp	r1, #31
 800b8a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	460d      	mov	r5, r1
 800b8aa:	4617      	mov	r7, r2
 800b8ac:	461e      	mov	r6, r3
 800b8ae:	f200 80a6 	bhi.w	800b9fe <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x15e>
 800b8b2:	2f02      	cmp	r7, #2
 800b8b4:	ea4f 0291 	mov.w	r2, r1, lsr #2
 800b8b8:	d121      	bne.n	800b8fe <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x5e>
 800b8ba:	2328      	movs	r3, #40	; 0x28
 800b8bc:	fb03 0301 	mla	r3, r3, r1, r0
 800b8c0:	f893 2900 	ldrb.w	r2, [r3, #2304]	; 0x900
 800b8c4:	b13a      	cbz	r2, 800b8d6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x36>
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800b8cc:	f890 38f6 	ldrb.w	r3, [r0, #2294]	; 0x8f6
 800b8d0:	3b01      	subs	r3, #1
 800b8d2:	f880 38f6 	strb.w	r3, [r0, #2294]	; 0x8f6
 800b8d6:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800b8da:	f895 3e00 	ldrb.w	r3, [r5, #3584]	; 0xe00
 800b8de:	b90b      	cbnz	r3, 800b8e4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x44>
 800b8e0:	2000      	movs	r0, #0
 800b8e2:	e00a      	b.n	800b8fa <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x5a>
 800b8e4:	2308      	movs	r3, #8
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	f885 3dff 	strb.w	r3, [r5, #3583]	; 0xdff
 800b8ec:	f885 0e00 	strb.w	r0, [r5, #3584]	; 0xe00
 800b8f0:	f894 38f7 	ldrb.w	r3, [r4, #2295]	; 0x8f7
 800b8f4:	3b01      	subs	r3, #1
 800b8f6:	f884 38f7 	strb.w	r3, [r4, #2295]	; 0x8f7
 800b8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8fe:	2f00      	cmp	r7, #0
 800b900:	d13d      	bne.n	800b97e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xde>
 800b902:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 800b906:	f893 3e00 	ldrb.w	r3, [r3, #3584]	; 0xe00
 800b90a:	ea4f 1801 	mov.w	r8, r1, lsl #4
 800b90e:	b923      	cbnz	r3, 800b91a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x7a>
 800b910:	f890 38f7 	ldrb.w	r3, [r0, #2295]	; 0x8f7
 800b914:	3301      	adds	r3, #1
 800b916:	f880 38f7 	strb.w	r3, [r0, #2295]	; 0x8f7
 800b91a:	2301      	movs	r3, #1
 800b91c:	f04f 0900 	mov.w	r9, #0
 800b920:	44a0      	add	r8, r4
 800b922:	f888 3e00 	strb.w	r3, [r8, #3584]	; 0xe00
 800b926:	f006 030f 	and.w	r3, r6, #15
 800b92a:	f888 3dfe 	strb.w	r3, [r8, #3582]	; 0xdfe
 800b92e:	4631      	mov	r1, r6
 800b930:	4620      	mov	r0, r4
 800b932:	f888 9dff 	strb.w	r9, [r8, #3583]	; 0xdff
 800b936:	f7ff ffa3 	bl	800b880 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800b93a:	2328      	movs	r3, #40	; 0x28
 800b93c:	fb03 4305 	mla	r3, r3, r5, r4
 800b940:	f893 2900 	ldrb.w	r2, [r3, #2304]	; 0x900
 800b944:	f8a8 0dfc 	strh.w	r0, [r8, #3580]	; 0xdfc
 800b948:	b132      	cbz	r2, 800b958 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb8>
 800b94a:	f883 9900 	strb.w	r9, [r3, #2304]	; 0x900
 800b94e:	f894 38f6 	ldrb.w	r3, [r4, #2294]	; 0x8f6
 800b952:	3b01      	subs	r3, #1
 800b954:	f884 38f6 	strb.w	r3, [r4, #2294]	; 0x8f6
 800b958:	69a0      	ldr	r0, [r4, #24]
 800b95a:	f894 38ed 	ldrb.w	r3, [r4, #2285]	; 0x8ed
 800b95e:	2800      	cmp	r0, #0
 800b960:	d041      	beq.n	800b9e6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x146>
 800b962:	2b02      	cmp	r3, #2
 800b964:	d13a      	bne.n	800b9dc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x13c>
 800b966:	69e0      	ldr	r0, [r4, #28]
 800b968:	2800      	cmp	r0, #0
 800b96a:	d142      	bne.n	800b9f2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x152>
 800b96c:	6a20      	ldr	r0, [r4, #32]
 800b96e:	2800      	cmp	r0, #0
 800b970:	d0b6      	beq.n	800b8e0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x40>
 800b972:	6803      	ldr	r3, [r0, #0]
 800b974:	4632      	mov	r2, r6
 800b976:	4629      	mov	r1, r5
 800b978:	691b      	ldr	r3, [r3, #16]
 800b97a:	4798      	blx	r3
 800b97c:	e7b0      	b.n	800b8e0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x40>
 800b97e:	2f01      	cmp	r7, #1
 800b980:	d1ea      	bne.n	800b958 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb8>
 800b982:	f04f 0828 	mov.w	r8, #40	; 0x28
 800b986:	fb08 0301 	mla	r3, r8, r1, r0
 800b98a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800b98e:	b923      	cbnz	r3, 800b99a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xfa>
 800b990:	f890 38f6 	ldrb.w	r3, [r0, #2294]	; 0x8f6
 800b994:	3301      	adds	r3, #1
 800b996:	f880 38f6 	strb.w	r3, [r0, #2294]	; 0x8f6
 800b99a:	2301      	movs	r3, #1
 800b99c:	fb08 4805 	mla	r8, r8, r5, r4
 800b9a0:	f888 3900 	strb.w	r3, [r8, #2304]	; 0x900
 800b9a4:	f006 030f 	and.w	r3, r6, #15
 800b9a8:	f888 38fe 	strb.w	r3, [r8, #2302]	; 0x8fe
 800b9ac:	4631      	mov	r1, r6
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f7ff ff66 	bl	800b880 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800b9b4:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 800b9b8:	f893 2e00 	ldrb.w	r2, [r3, #3584]	; 0xe00
 800b9bc:	f8a8 08fc 	strh.w	r0, [r8, #2300]	; 0x8fc
 800b9c0:	2a00      	cmp	r2, #0
 800b9c2:	d0c9      	beq.n	800b958 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb8>
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f883 2e00 	strb.w	r2, [r3, #3584]	; 0xe00
 800b9ca:	2208      	movs	r2, #8
 800b9cc:	f883 2dff 	strb.w	r2, [r3, #3583]	; 0xdff
 800b9d0:	f894 38f7 	ldrb.w	r3, [r4, #2295]	; 0x8f7
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	f884 38f7 	strb.w	r3, [r4, #2295]	; 0x8f7
 800b9da:	e7bd      	b.n	800b958 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb8>
 800b9dc:	6803      	ldr	r3, [r0, #0]
 800b9de:	463a      	mov	r2, r7
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	4798      	blx	r3
 800b9e6:	f894 38ed 	ldrb.w	r3, [r4, #2285]	; 0x8ed
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	f47f af78 	bne.w	800b8e0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x40>
 800b9f0:	e7b9      	b.n	800b966 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xc6>
 800b9f2:	6803      	ldr	r3, [r0, #0]
 800b9f4:	4632      	mov	r2, r6
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	695b      	ldr	r3, [r3, #20]
 800b9fa:	4798      	blx	r3
 800b9fc:	e7b6      	b.n	800b96c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xcc>
 800b9fe:	f06f 0004 	mvn.w	r0, #4
 800ba02:	e77a      	b.n	800b8fa <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x5a>

0800ba04 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800ba04:	b430      	push	{r4, r5}
 800ba06:	eb00 0491 	add.w	r4, r0, r1, lsr #2
 800ba0a:	f3c3 2506 	ubfx	r5, r3, #8, #7
 800ba0e:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 800ba12:	f3c3 1503 	ubfx	r5, r3, #4, #4
 800ba16:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
 800ba1a:	f003 030f 	and.w	r3, r3, #15
 800ba1e:	bc30      	pop	{r4, r5}
 800ba20:	f7ff bf3e 	b.w	800b8a0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>

0800ba24 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
 800ba24:	291f      	cmp	r1, #31
 800ba26:	d813      	bhi.n	800ba50 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x2c>
 800ba28:	b93b      	cbnz	r3, 800ba3a <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x16>
 800ba2a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800ba2e:	f890 3dfe 	ldrb.w	r3, [r0, #3582]	; 0xdfe
 800ba32:	7013      	strb	r3, [r2, #0]
 800ba34:	f890 0e00 	ldrb.w	r0, [r0, #3584]	; 0xe00
 800ba38:	4770      	bx	lr
 800ba3a:	2b02      	cmp	r3, #2
 800ba3c:	d008      	beq.n	800ba50 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x2c>
 800ba3e:	2328      	movs	r3, #40	; 0x28
 800ba40:	fb03 0001 	mla	r0, r3, r1, r0
 800ba44:	f890 38fe 	ldrb.w	r3, [r0, #2302]	; 0x8fe
 800ba48:	7013      	strb	r3, [r2, #0]
 800ba4a:	f890 0900 	ldrb.w	r0, [r0, #2304]	; 0x900
 800ba4e:	4770      	bx	lr
 800ba50:	2000      	movs	r0, #0
 800ba52:	4770      	bx	lr

0800ba54 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
 800ba54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba58:	26a0      	movs	r6, #160	; 0xa0
 800ba5a:	ea4f 0882 	mov.w	r8, r2, lsl #2
 800ba5e:	f108 0904 	add.w	r9, r8, #4
 800ba62:	f1b9 0f20 	cmp.w	r9, #32
 800ba66:	4605      	mov	r5, r0
 800ba68:	460f      	mov	r7, r1
 800ba6a:	4614      	mov	r4, r2
 800ba6c:	bf28      	it	cs
 800ba6e:	f04f 0920 	movcs.w	r9, #32
 800ba72:	fb06 0602 	mla	r6, r6, r2, r0
 800ba76:	1883      	adds	r3, r0, r2
 800ba78:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
 800ba7c:	45c8      	cmp	r8, r9
 800ba7e:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800ba82:	d30c      	bcc.n	800ba9e <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x4a>
 800ba84:	69e8      	ldr	r0, [r5, #28]
 800ba86:	b1a8      	cbz	r0, 800bab4 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x60>
 800ba88:	f895 38ed 	ldrb.w	r3, [r5, #2285]	; 0x8ed
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	d111      	bne.n	800bab4 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x60>
 800ba90:	6803      	ldr	r3, [r0, #0]
 800ba92:	463a      	mov	r2, r7
 800ba94:	4621      	mov	r1, r4
 800ba96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba9a:	69db      	ldr	r3, [r3, #28]
 800ba9c:	4718      	bx	r3
 800ba9e:	f8b6 18d4 	ldrh.w	r1, [r6, #2260]	; 0x8d4
 800baa2:	4622      	mov	r2, r4
 800baa4:	4628      	mov	r0, r5
 800baa6:	f7ff feeb 	bl	800b880 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800baaa:	f108 0801 	add.w	r8, r8, #1
 800baae:	f8a6 08d4 	strh.w	r0, [r6, #2260]	; 0x8d4
 800bab2:	e7e3      	b.n	800ba7c <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x28>
 800bab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bab8 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
 800bab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800babc:	26a0      	movs	r6, #160	; 0xa0
 800babe:	ea4f 0882 	mov.w	r8, r2, lsl #2
 800bac2:	f108 0904 	add.w	r9, r8, #4
 800bac6:	f1b9 0f20 	cmp.w	r9, #32
 800baca:	4605      	mov	r5, r0
 800bacc:	460f      	mov	r7, r1
 800bace:	4614      	mov	r4, r2
 800bad0:	bf28      	it	cs
 800bad2:	f04f 0920 	movcs.w	r9, #32
 800bad6:	fb06 0602 	mla	r6, r6, r2, r0
 800bada:	1883      	adds	r3, r0, r2
 800badc:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
 800bae0:	45c8      	cmp	r8, r9
 800bae2:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800bae6:	d30c      	bcc.n	800bb02 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x4a>
 800bae8:	69e8      	ldr	r0, [r5, #28]
 800baea:	b1a8      	cbz	r0, 800bb18 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x60>
 800baec:	f895 38ed 	ldrb.w	r3, [r5, #2285]	; 0x8ed
 800baf0:	2b02      	cmp	r3, #2
 800baf2:	d111      	bne.n	800bb18 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x60>
 800baf4:	6803      	ldr	r3, [r0, #0]
 800baf6:	463a      	mov	r2, r7
 800baf8:	4621      	mov	r1, r4
 800bafa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	4718      	bx	r3
 800bb02:	f8b6 18d4 	ldrh.w	r1, [r6, #2260]	; 0x8d4
 800bb06:	4622      	mov	r2, r4
 800bb08:	4628      	mov	r0, r5
 800bb0a:	f7ff feb9 	bl	800b880 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800bb0e:	f108 0801 	add.w	r8, r8, #1
 800bb12:	f8a6 08d4 	strh.w	r0, [r6, #2260]	; 0x8d4
 800bb16:	e7e3      	b.n	800bae0 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x28>
 800bb18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bb1c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
 800bb1c:	291f      	cmp	r1, #31
 800bb1e:	b570      	push	{r4, r5, r6, lr}
 800bb20:	4605      	mov	r5, r0
 800bb22:	460c      	mov	r4, r1
 800bb24:	4616      	mov	r6, r2
 800bb26:	d823      	bhi.n	800bb70 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800bb28:	2228      	movs	r2, #40	; 0x28
 800bb2a:	fb02 0301 	mla	r3, r2, r1, r0
 800bb2e:	fb02 0201 	mla	r2, r2, r1, r0
 800bb32:	f8c3 691c 	str.w	r6, [r3, #2332]	; 0x91c
 800bb36:	f893 38ff 	ldrb.w	r3, [r3, #2303]	; 0x8ff
 800bb3a:	2e01      	cmp	r6, #1
 800bb3c:	bf0c      	ite	eq
 800bb3e:	f043 0301 	orreq.w	r3, r3, #1
 800bb42:	f003 03fe 	andne.w	r3, r3, #254	; 0xfe
 800bb46:	f882 38ff 	strb.w	r3, [r2, #2303]	; 0x8ff
 800bb4a:	f890 38ed 	ldrb.w	r3, [r0, #2285]	; 0x8ed
 800bb4e:	2b02      	cmp	r3, #2
 800bb50:	d10e      	bne.n	800bb70 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800bb52:	69c0      	ldr	r0, [r0, #28]
 800bb54:	b118      	cbz	r0, 800bb5e <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x42>
 800bb56:	6803      	ldr	r3, [r0, #0]
 800bb58:	4632      	mov	r2, r6
 800bb5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb5c:	4798      	blx	r3
 800bb5e:	6a28      	ldr	r0, [r5, #32]
 800bb60:	b130      	cbz	r0, 800bb70 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800bb62:	6803      	ldr	r3, [r0, #0]
 800bb64:	4632      	mov	r2, r6
 800bb66:	4621      	mov	r1, r4
 800bb68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb6c:	6a1b      	ldr	r3, [r3, #32]
 800bb6e:	4718      	bx	r3
 800bb70:	bd70      	pop	{r4, r5, r6, pc}

0800bb72 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
 800bb72:	291f      	cmp	r1, #31
 800bb74:	b570      	push	{r4, r5, r6, lr}
 800bb76:	4605      	mov	r5, r0
 800bb78:	460c      	mov	r4, r1
 800bb7a:	4616      	mov	r6, r2
 800bb7c:	d823      	bhi.n	800bbc6 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800bb7e:	2228      	movs	r2, #40	; 0x28
 800bb80:	fb02 0301 	mla	r3, r2, r1, r0
 800bb84:	fb02 0201 	mla	r2, r2, r1, r0
 800bb88:	f8c3 6914 	str.w	r6, [r3, #2324]	; 0x914
 800bb8c:	f893 38ff 	ldrb.w	r3, [r3, #2303]	; 0x8ff
 800bb90:	2e01      	cmp	r6, #1
 800bb92:	bf0c      	ite	eq
 800bb94:	f043 0302 	orreq.w	r3, r3, #2
 800bb98:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 800bb9c:	f882 38ff 	strb.w	r3, [r2, #2303]	; 0x8ff
 800bba0:	f890 38ed 	ldrb.w	r3, [r0, #2285]	; 0x8ed
 800bba4:	2b02      	cmp	r3, #2
 800bba6:	d10e      	bne.n	800bbc6 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800bba8:	69c0      	ldr	r0, [r0, #28]
 800bbaa:	b118      	cbz	r0, 800bbb4 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x42>
 800bbac:	6803      	ldr	r3, [r0, #0]
 800bbae:	4632      	mov	r2, r6
 800bbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb2:	4798      	blx	r3
 800bbb4:	6a28      	ldr	r0, [r5, #32]
 800bbb6:	b130      	cbz	r0, 800bbc6 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800bbb8:	6803      	ldr	r3, [r0, #0]
 800bbba:	4632      	mov	r2, r6
 800bbbc:	4621      	mov	r1, r4
 800bbbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bbc2:	69db      	ldr	r3, [r3, #28]
 800bbc4:	4718      	bx	r3
 800bbc6:	bd70      	pop	{r4, r5, r6, pc}

0800bbc8 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>:
 800bbc8:	b570      	push	{r4, r5, r6, lr}
 800bbca:	f890 309f 	ldrb.w	r3, [r0, #159]	; 0x9f
 800bbce:	f1a1 0208 	sub.w	r2, r1, #8
 800bbd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	f880 309f 	strb.w	r3, [r0, #159]	; 0x9f
 800bbdc:	2a04      	cmp	r2, #4
 800bbde:	d81f      	bhi.n	800bc20 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x58>
 800bbe0:	e8df f002 	tbb	[pc, r2]
 800bbe4:	1e1b0307 	cdpne	3, 1, cr0, cr11, cr7, {0}
 800bbe8:	f043001e 			; <UNDEFINED> instruction: 0xf043001e
 800bbec:	0340      	lsls	r0, r0, #13
 800bbee:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
 800bbf2:	f894 38ed 	ldrb.w	r3, [r4, #2285]	; 0x8ed
 800bbf6:	2b02      	cmp	r3, #2
 800bbf8:	d112      	bne.n	800bc20 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x58>
 800bbfa:	69e0      	ldr	r0, [r4, #28]
 800bbfc:	f001 0507 	and.w	r5, r1, #7
 800bc00:	b118      	cbz	r0, 800bc0a <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x42>
 800bc02:	6803      	ldr	r3, [r0, #0]
 800bc04:	4629      	mov	r1, r5
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	4798      	blx	r3
 800bc0a:	6a20      	ldr	r0, [r4, #32]
 800bc0c:	b140      	cbz	r0, 800bc20 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x58>
 800bc0e:	6803      	ldr	r3, [r0, #0]
 800bc10:	4629      	mov	r1, r5
 800bc12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc18:	4718      	bx	r3
 800bc1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc1e:	e7e6      	b.n	800bbee <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x26>
 800bc20:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bc24 <ArtNetNode::HandleAddress()>:
 800bc24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc28:	2301      	movs	r3, #1
 800bc2a:	f880 38ec 	strb.w	r3, [r0, #2284]	; 0x8ec
 800bc2e:	f890 30b6 	ldrb.w	r3, [r0, #182]	; 0xb6
 800bc32:	4604      	mov	r4, r0
 800bc34:	b133      	cbz	r3, 800bc44 <ArtNetNode::HandleAddress()+0x20>
 800bc36:	f100 01b6 	add.w	r1, r0, #182	; 0xb6
 800bc3a:	f7ff fbcf 	bl	800b3dc <ArtNetNode::SetShortName(char const*)>
 800bc3e:	2306      	movs	r3, #6
 800bc40:	f884 38ec 	strb.w	r3, [r4, #2284]	; 0x8ec
 800bc44:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
 800bc48:	b13b      	cbz	r3, 800bc5a <ArtNetNode::HandleAddress()+0x36>
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 800bc50:	f7ff fbec 	bl	800b42c <ArtNetNode::SetLongName(char const*)>
 800bc54:	2307      	movs	r3, #7
 800bc56:	f884 38ec 	strb.w	r3, [r4, #2284]	; 0x8ec
 800bc5a:	f894 50b5 	ldrb.w	r5, [r4, #181]	; 0xb5
 800bc5e:	b105      	cbz	r5, 800bc62 <ArtNetNode::HandleAddress()+0x3e>
 800bc60:	3d01      	subs	r5, #1
 800bc62:	f894 1110 	ldrb.w	r1, [r4, #272]	; 0x110
 800bc66:	2900      	cmp	r1, #0
 800bc68:	d148      	bne.n	800bcfc <ArtNetNode::HandleAddress()+0xd8>
 800bc6a:	462a      	mov	r2, r5
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	f7ff fef1 	bl	800ba54 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800bc72:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
 800bc76:	2900      	cmp	r1, #0
 800bc78:	d146      	bne.n	800bd08 <ArtNetNode::HandleAddress()+0xe4>
 800bc7a:	462a      	mov	r2, r5
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	f7ff ff1b 	bl	800bab8 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800bc82:	00ad      	lsls	r5, r5, #2
 800bc84:	4627      	mov	r7, r4
 800bc86:	462e      	mov	r6, r5
 800bc88:	f204 1807 	addw	r8, r4, #263	; 0x107
 800bc8c:	f204 190b 	addw	r9, r4, #267	; 0x10b
 800bc90:	f898 3005 	ldrb.w	r3, [r8, #5]
 800bc94:	2b7f      	cmp	r3, #127	; 0x7f
 800bc96:	d007      	beq.n	800bca8 <ArtNetNode::HandleAddress()+0x84>
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d13b      	bne.n	800bd14 <ArtNetNode::HandleAddress()+0xf0>
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	2201      	movs	r2, #1
 800bca0:	4631      	mov	r1, r6
 800bca2:	4620      	mov	r0, r4
 800bca4:	f7ff fdfc 	bl	800b8a0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800bca8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800bcac:	2a7f      	cmp	r2, #127	; 0x7f
 800bcae:	d005      	beq.n	800bcbc <ArtNetNode::HandleAddress()+0x98>
 800bcb0:	bbaa      	cbnz	r2, 800bd1e <ArtNetNode::HandleAddress()+0xfa>
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	4631      	mov	r1, r6
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	f7ff fdf2 	bl	800b8a0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800bcbc:	45c8      	cmp	r8, r9
 800bcbe:	f106 0601 	add.w	r6, r6, #1
 800bcc2:	d1e5      	bne.n	800bc90 <ArtNetNode::HandleAddress()+0x6c>
 800bcc4:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
 800bcc8:	f003 0103 	and.w	r1, r3, #3
 800bccc:	2b53      	cmp	r3, #83	; 0x53
 800bcce:	4429      	add	r1, r5
 800bcd0:	d82b      	bhi.n	800bd2a <ArtNetNode::HandleAddress()+0x106>
 800bcd2:	2b4f      	cmp	r3, #79	; 0x4f
 800bcd4:	f200 8092 	bhi.w	800bdfc <ArtNetNode::HandleAddress()+0x1d8>
 800bcd8:	1e5a      	subs	r2, r3, #1
 800bcda:	b2d0      	uxtb	r0, r2
 800bcdc:	2812      	cmp	r0, #18
 800bcde:	d834      	bhi.n	800bd4a <ArtNetNode::HandleAddress()+0x126>
 800bce0:	2a12      	cmp	r2, #18
 800bce2:	d832      	bhi.n	800bd4a <ArtNetNode::HandleAddress()+0x126>
 800bce4:	e8df f002 	tbb	[pc, r2]
 800bce8:	74685c4d 	strbtvc	r5, [r8], #-3149	; 0xfffff3b3
 800bcec:	80313131 	eorshi	r3, r1, r1, lsr r1
 800bcf0:	80808080 	addhi	r8, r0, r0, lsl #1
 800bcf4:	85313131 	ldrhi	r3, [r1, #-305]!	; 0xfffffecf
 800bcf8:	00858585 	addeq	r8, r5, r5, lsl #11
 800bcfc:	060f      	lsls	r7, r1, #24
 800bcfe:	d5b8      	bpl.n	800bc72 <ArtNetNode::HandleAddress()+0x4e>
 800bd00:	462a      	mov	r2, r5
 800bd02:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800bd06:	e7b1      	b.n	800bc6c <ArtNetNode::HandleAddress()+0x48>
 800bd08:	060e      	lsls	r6, r1, #24
 800bd0a:	d5ba      	bpl.n	800bc82 <ArtNetNode::HandleAddress()+0x5e>
 800bd0c:	462a      	mov	r2, r5
 800bd0e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800bd12:	e7b3      	b.n	800bc7c <ArtNetNode::HandleAddress()+0x58>
 800bd14:	0618      	lsls	r0, r3, #24
 800bd16:	d5c7      	bpl.n	800bca8 <ArtNetNode::HandleAddress()+0x84>
 800bd18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd1c:	e7bf      	b.n	800bc9e <ArtNetNode::HandleAddress()+0x7a>
 800bd1e:	0611      	lsls	r1, r2, #24
 800bd20:	d5cc      	bpl.n	800bcbc <ArtNetNode::HandleAddress()+0x98>
 800bd22:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800bd26:	2200      	movs	r2, #0
 800bd28:	e7c4      	b.n	800bcb4 <ArtNetNode::HandleAddress()+0x90>
 800bd2a:	2b93      	cmp	r3, #147	; 0x93
 800bd2c:	d81a      	bhi.n	800bd64 <ArtNetNode::HandleAddress()+0x140>
 800bd2e:	2b8f      	cmp	r3, #143	; 0x8f
 800bd30:	d868      	bhi.n	800be04 <ArtNetNode::HandleAddress()+0x1e0>
 800bd32:	2b63      	cmp	r3, #99	; 0x63
 800bd34:	d806      	bhi.n	800bd44 <ArtNetNode::HandleAddress()+0x120>
 800bd36:	2b5f      	cmp	r3, #95	; 0x5f
 800bd38:	d907      	bls.n	800bd4a <ArtNetNode::HandleAddress()+0x126>
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f7ff feed 	bl	800bb1c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800bd42:	e002      	b.n	800bd4a <ArtNetNode::HandleAddress()+0x126>
 800bd44:	3b70      	subs	r3, #112	; 0x70
 800bd46:	2b03      	cmp	r3, #3
 800bd48:	d95a      	bls.n	800be00 <ArtNetNode::HandleAddress()+0x1dc>
 800bd4a:	69a0      	ldr	r0, [r4, #24]
 800bd4c:	b120      	cbz	r0, 800bd58 <ArtNetNode::HandleAddress()+0x134>
 800bd4e:	6803      	ldr	r3, [r0, #0]
 800bd50:	f894 1112 	ldrb.w	r1, [r4, #274]	; 0x112
 800bd54:	68db      	ldr	r3, [r3, #12]
 800bd56:	4798      	blx	r3
 800bd58:	4620      	mov	r0, r4
 800bd5a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd5e:	2101      	movs	r1, #1
 800bd60:	f000 bca0 	b.w	800c6a4 <ArtNetNode::SendPollRelply(bool)>
 800bd64:	2bc3      	cmp	r3, #195	; 0xc3
 800bd66:	d806      	bhi.n	800bd76 <ArtNetNode::HandleAddress()+0x152>
 800bd68:	2bbf      	cmp	r3, #191	; 0xbf
 800bd6a:	d9ee      	bls.n	800bd4a <ArtNetNode::HandleAddress()+0x126>
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f000 fd40 	bl	800c7f4 <ArtNetNode::SetRmd(unsigned int, bool)>
 800bd74:	e7e9      	b.n	800bd4a <ArtNetNode::HandleAddress()+0x126>
 800bd76:	3330      	adds	r3, #48	; 0x30
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b03      	cmp	r3, #3
 800bd7c:	d8e5      	bhi.n	800bd4a <ArtNetNode::HandleAddress()+0x126>
 800bd7e:	2200      	movs	r2, #0
 800bd80:	e7f5      	b.n	800bd6e <ArtNetNode::HandleAddress()+0x14a>
 800bd82:	2300      	movs	r3, #0
 800bd84:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
 800bd88:	f884 38f2 	strb.w	r3, [r4, #2290]	; 0x8f2
 800bd8c:	f897 38ff 	ldrb.w	r3, [r7, #2303]	; 0x8ff
 800bd90:	3728      	adds	r7, #40	; 0x28
 800bd92:	f023 0308 	bic.w	r3, r3, #8
 800bd96:	f887 38d7 	strb.w	r3, [r7, #2263]	; 0x8d7
 800bd9a:	42ba      	cmp	r2, r7
 800bd9c:	d1f6      	bne.n	800bd8c <ArtNetNode::HandleAddress()+0x168>
 800bd9e:	e7d4      	b.n	800bd4a <ArtNetNode::HandleAddress()+0x126>
 800bda0:	4b3a      	ldr	r3, [pc, #232]	; (800be8c <ArtNetNode::HandleAddress()+0x268>)
 800bda2:	2102      	movs	r1, #2
 800bda4:	6818      	ldr	r0, [r3, #0]
 800bda6:	f00a fb71 	bl	801648c <LedBlink::SetMode(ledblink::Mode)>
 800bdaa:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 800bdae:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800bdb2:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
 800bdb6:	e7c8      	b.n	800bd4a <ArtNetNode::HandleAddress()+0x126>
 800bdb8:	4b34      	ldr	r3, [pc, #208]	; (800be8c <ArtNetNode::HandleAddress()+0x268>)
 800bdba:	2100      	movs	r1, #0
 800bdbc:	6818      	ldr	r0, [r3, #0]
 800bdbe:	f00a fb65 	bl	801648c <LedBlink::SetMode(ledblink::Mode)>
 800bdc2:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 800bdc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bdce:	e7f0      	b.n	800bdb2 <ArtNetNode::HandleAddress()+0x18e>
 800bdd0:	4b2e      	ldr	r3, [pc, #184]	; (800be8c <ArtNetNode::HandleAddress()+0x268>)
 800bdd2:	2104      	movs	r1, #4
 800bdd4:	6818      	ldr	r0, [r3, #0]
 800bdd6:	f00a fb59 	bl	801648c <LedBlink::SetMode(ledblink::Mode)>
 800bdda:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 800bdde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bde2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bde6:	e7e4      	b.n	800bdb2 <ArtNetNode::HandleAddress()+0x18e>
 800bde8:	4619      	mov	r1, r3
 800bdea:	4620      	mov	r0, r4
 800bdec:	f7ff feec 	bl	800bbc8 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800bdf0:	e7ab      	b.n	800bd4a <ArtNetNode::HandleAddress()+0x126>
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f7ff febc 	bl	800bb72 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800bdfa:	e7a6      	b.n	800bd4a <ArtNetNode::HandleAddress()+0x126>
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	e7f9      	b.n	800bdf4 <ArtNetNode::HandleAddress()+0x1d0>
 800be00:	2201      	movs	r2, #1
 800be02:	e79b      	b.n	800bd3c <ArtNetNode::HandleAddress()+0x118>
 800be04:	4b22      	ldr	r3, [pc, #136]	; (800be90 <ArtNetNode::HandleAddress()+0x26c>)
 800be06:	b2cd      	uxtb	r5, r1
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	2700      	movs	r7, #0
 800be0c:	07d2      	lsls	r2, r2, #31
 800be0e:	bf5c      	itt	pl
 800be10:	2201      	movpl	r2, #1
 800be12:	601a      	strpl	r2, [r3, #0]
 800be14:	f240 6204 	movw	r2, #1540	; 0x604
 800be18:	436a      	muls	r2, r5
 800be1a:	4b1e      	ldr	r3, [pc, #120]	; (800be94 <ArtNetNode::HandleAddress()+0x270>)
 800be1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800be20:	441a      	add	r2, r3
 800be22:	4611      	mov	r1, r2
 800be24:	6860      	ldr	r0, [r4, #4]
 800be26:	f502 7600 	add.w	r6, r2, #512	; 0x200
 800be2a:	428e      	cmp	r6, r1
 800be2c:	d12a      	bne.n	800be84 <ArtNetNode::HandleAddress()+0x260>
 800be2e:	f240 6104 	movw	r1, #1540	; 0x604
 800be32:	fb01 3105 	mla	r1, r1, r5, r3
 800be36:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be3a:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800be3e:	6801      	ldr	r1, [r0, #0]
 800be40:	690e      	ldr	r6, [r1, #16]
 800be42:	4629      	mov	r1, r5
 800be44:	47b0      	blx	r6
 800be46:	2d1f      	cmp	r5, #31
 800be48:	f63f af7f 	bhi.w	800bd4a <ArtNetNode::HandleAddress()+0x126>
 800be4c:	2628      	movs	r6, #40	; 0x28
 800be4e:	fb06 4605 	mla	r6, r6, r5, r4
 800be52:	f8d6 391c 	ldr.w	r3, [r6, #2332]	; 0x91c
 800be56:	2b00      	cmp	r3, #0
 800be58:	f47f af77 	bne.w	800bd4a <ArtNetNode::HandleAddress()+0x126>
 800be5c:	f896 3921 	ldrb.w	r3, [r6, #2337]	; 0x921
 800be60:	2b00      	cmp	r3, #0
 800be62:	f47f af72 	bne.w	800bd4a <ArtNetNode::HandleAddress()+0x126>
 800be66:	6860      	ldr	r0, [r4, #4]
 800be68:	4629      	mov	r1, r5
 800be6a:	6803      	ldr	r3, [r0, #0]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	4798      	blx	r3
 800be70:	2301      	movs	r3, #1
 800be72:	f886 3921 	strb.w	r3, [r6, #2337]	; 0x921
 800be76:	f896 38ff 	ldrb.w	r3, [r6, #2303]	; 0x8ff
 800be7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be7e:	f886 38ff 	strb.w	r3, [r6, #2303]	; 0x8ff
 800be82:	e762      	b.n	800bd4a <ArtNetNode::HandleAddress()+0x126>
 800be84:	f801 7b01 	strb.w	r7, [r1], #1
 800be88:	e7cf      	b.n	800be2a <ArtNetNode::HandleAddress()+0x206>
 800be8a:	bf00      	nop
 800be8c:	2001d998 	mulcs	r1, r8, r9
 800be90:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
 800be94:	200006bc 			; <UNDEFINED> instruction: 0x200006bc

0800be98 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 800be98:	f240 6304 	movw	r3, #1540	; 0x604
 800be9c:	fb03 0001 	mla	r0, r3, r1, r0
 800bea0:	2300      	movs	r3, #0
 800bea2:	b510      	push	{r4, lr}
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d100      	bne.n	800beaa <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x12>
 800bea8:	bd10      	pop	{r4, pc}
 800beaa:	f810 4b01 	ldrb.w	r4, [r0], #1
 800beae:	3301      	adds	r3, #1
 800beb0:	f890 11ff 	ldrb.w	r1, [r0, #511]	; 0x1ff
 800beb4:	42a1      	cmp	r1, r4
 800beb6:	bf38      	it	cc
 800beb8:	4621      	movcc	r1, r4
 800beba:	f880 13ff 	strb.w	r1, [r0, #1023]	; 0x3ff
 800bebe:	e7f1      	b.n	800bea4 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>

0800bec0 <memcpy.isra.0>:
 800bec0:	3801      	subs	r0, #1
 800bec2:	440a      	add	r2, r1
 800bec4:	4291      	cmp	r1, r2
 800bec6:	d100      	bne.n	800beca <memcpy.isra.0+0xa>
 800bec8:	4770      	bx	lr
 800beca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bece:	f800 3f01 	strb.w	r3, [r0, #1]!
 800bed2:	e7f7      	b.n	800bec4 <memcpy.isra.0+0x4>

0800bed4 <lightset::Data::Get()>:
 800bed4:	4b03      	ldr	r3, [pc, #12]	; (800bee4 <lightset::Data::Get()+0x10>)
 800bed6:	4804      	ldr	r0, [pc, #16]	; (800bee8 <lightset::Data::Get()+0x14>)
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	07d2      	lsls	r2, r2, #31
 800bedc:	bf5c      	itt	pl
 800bede:	2201      	movpl	r2, #1
 800bee0:	601a      	strpl	r2, [r3, #0]
 800bee2:	4770      	bx	lr
 800bee4:	200006b8 			; <UNDEFINED> instruction: 0x200006b8
 800bee8:	200006bc 			; <UNDEFINED> instruction: 0x200006bc

0800beec <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 800beec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bef0:	4615      	mov	r5, r2
 800bef2:	460f      	mov	r7, r1
 800bef4:	4604      	mov	r4, r0
 800bef6:	f7ff ffed 	bl	800bed4 <lightset::Data::Get()>
 800befa:	f240 6304 	movw	r3, #1540	; 0x604
 800befe:	4606      	mov	r6, r0
 800bf00:	435c      	muls	r4, r3
 800bf02:	eb00 0804 	add.w	r8, r0, r4
 800bf06:	462a      	mov	r2, r5
 800bf08:	4639      	mov	r1, r7
 800bf0a:	4640      	mov	r0, r8
 800bf0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800bf10:	f7ff ffd6 	bl	800bec0 <memcpy.isra.0>
 800bf14:	462a      	mov	r2, r5
 800bf16:	4639      	mov	r1, r7
 800bf18:	f8c8 5600 	str.w	r5, [r8, #1536]	; 0x600
 800bf1c:	1930      	adds	r0, r6, r4
 800bf1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf22:	f7ff bfcd 	b.w	800bec0 <memcpy.isra.0>

0800bf26 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800bf26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf2a:	4680      	mov	r8, r0
 800bf2c:	f240 6404 	movw	r4, #1540	; 0x604
 800bf30:	4615      	mov	r5, r2
 800bf32:	460f      	mov	r7, r1
 800bf34:	4699      	mov	r9, r3
 800bf36:	f7ff ffcd 	bl	800bed4 <lightset::Data::Get()>
 800bf3a:	fb04 f408 	mul.w	r4, r4, r8
 800bf3e:	eb00 0a04 	add.w	sl, r0, r4
 800bf42:	4606      	mov	r6, r0
 800bf44:	462a      	mov	r2, r5
 800bf46:	4639      	mov	r1, r7
 800bf48:	4650      	mov	r0, sl
 800bf4a:	f7ff ffb9 	bl	800bec0 <memcpy.isra.0>
 800bf4e:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
 800bf52:	f1b9 0f00 	cmp.w	r9, #0
 800bf56:	d106      	bne.n	800bf66 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x40>
 800bf58:	462a      	mov	r2, r5
 800bf5a:	4641      	mov	r1, r8
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf62:	f7ff bf99 	b.w	800be98 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800bf66:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800bf6a:	462a      	mov	r2, r5
 800bf6c:	4639      	mov	r1, r7
 800bf6e:	1930      	adds	r0, r6, r4
 800bf70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf74:	f7ff bfa4 	b.w	800bec0 <memcpy.isra.0>

0800bf78 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800bf78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf7c:	4616      	mov	r6, r2
 800bf7e:	4699      	mov	r9, r3
 800bf80:	4680      	mov	r8, r0
 800bf82:	460f      	mov	r7, r1
 800bf84:	f7ff ffa6 	bl	800bed4 <lightset::Data::Get()>
 800bf88:	f240 6404 	movw	r4, #1540	; 0x604
 800bf8c:	4605      	mov	r5, r0
 800bf8e:	fb04 f408 	mul.w	r4, r4, r8
 800bf92:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800bf96:	4632      	mov	r2, r6
 800bf98:	4639      	mov	r1, r7
 800bf9a:	4428      	add	r0, r5
 800bf9c:	f7ff ff90 	bl	800bec0 <memcpy.isra.0>
 800bfa0:	192b      	adds	r3, r5, r4
 800bfa2:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
 800bfa6:	f1b9 0f00 	cmp.w	r9, #0
 800bfaa:	d106      	bne.n	800bfba <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 800bfac:	4632      	mov	r2, r6
 800bfae:	4641      	mov	r1, r8
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfb6:	f7ff bf6f 	b.w	800be98 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800bfba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800bfbe:	4632      	mov	r2, r6
 800bfc0:	4639      	mov	r1, r7
 800bfc2:	1928      	adds	r0, r5, r4
 800bfc4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfc8:	f7ff bf7a 	b.w	800bec0 <memcpy.isra.0>

0800bfcc <ArtNetNode::UpdateMergeStatus(unsigned int)>:
 800bfcc:	f890 38f2 	ldrb.w	r3, [r0, #2290]	; 0x8f2
 800bfd0:	b91b      	cbnz	r3, 800bfda <ArtNetNode::UpdateMergeStatus(unsigned int)+0xe>
 800bfd2:	f240 1301 	movw	r3, #257	; 0x101
 800bfd6:	f8a0 38f2 	strh.w	r3, [r0, #2290]	; 0x8f2
 800bfda:	2328      	movs	r3, #40	; 0x28
 800bfdc:	fb03 0001 	mla	r0, r3, r1, r0
 800bfe0:	f890 38ff 	ldrb.w	r3, [r0, #2303]	; 0x8ff
 800bfe4:	f043 0308 	orr.w	r3, r3, #8
 800bfe8:	f880 38ff 	strb.w	r3, [r0, #2303]	; 0x8ff
 800bfec:	4770      	bx	lr

0800bfee <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
 800bfee:	2328      	movs	r3, #40	; 0x28
 800bff0:	b530      	push	{r4, r5, lr}
 800bff2:	f242 7510 	movw	r5, #10000	; 0x2710
 800bff6:	fb03 0301 	mla	r3, r3, r1, r0
 800bffa:	f8d0 2880 	ldr.w	r2, [r0, #2176]	; 0x880
 800bffe:	f8d3 4904 	ldr.w	r4, [r3, #2308]	; 0x904
 800c002:	1b14      	subs	r4, r2, r4
 800c004:	42ac      	cmp	r4, r5
 800c006:	d908      	bls.n	800c01a <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x2c>
 800c008:	2400      	movs	r4, #0
 800c00a:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908
 800c00e:	f893 48ff 	ldrb.w	r4, [r3, #2303]	; 0x8ff
 800c012:	f024 0408 	bic.w	r4, r4, #8
 800c016:	f883 48ff 	strb.w	r4, [r3, #2303]	; 0x8ff
 800c01a:	2328      	movs	r3, #40	; 0x28
 800c01c:	fb03 0101 	mla	r1, r3, r1, r0
 800c020:	f8d1 390c 	ldr.w	r3, [r1, #2316]	; 0x90c
 800c024:	1ad2      	subs	r2, r2, r3
 800c026:	f242 7310 	movw	r3, #10000	; 0x2710
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d908      	bls.n	800c040 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x52>
 800c02e:	2300      	movs	r3, #0
 800c030:	f8c1 3910 	str.w	r3, [r1, #2320]	; 0x910
 800c034:	f891 38ff 	ldrb.w	r3, [r1, #2303]	; 0x8ff
 800c038:	f023 0308 	bic.w	r3, r3, #8
 800c03c:	f881 38ff 	strb.w	r3, [r1, #2303]	; 0x8ff
 800c040:	4603      	mov	r3, r0
 800c042:	2200      	movs	r2, #0
 800c044:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 800c048:	f893 18ff 	ldrb.w	r1, [r3, #2303]	; 0x8ff
 800c04c:	3328      	adds	r3, #40	; 0x28
 800c04e:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800c052:	429c      	cmp	r4, r3
 800c054:	ea42 0201 	orr.w	r2, r2, r1
 800c058:	d1f6      	bne.n	800c048 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x5a>
 800c05a:	b91a      	cbnz	r2, 800c064 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x76>
 800c05c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c060:	f8a0 38f2 	strh.w	r3, [r0, #2290]	; 0x8f2
 800c064:	bd30      	pop	{r4, r5, pc}

0800c066 <ArtNetNode::HandleDmx()>:
 800c066:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c06a:	f8b0 70b8 	ldrh.w	r7, [r0, #184]	; 0xb8
 800c06e:	4604      	mov	r4, r0
 800c070:	ba7f      	rev16	r7, r7
 800c072:	b2bf      	uxth	r7, r7
 800c074:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800c078:	bf28      	it	cs
 800c07a:	f44f 7700 	movcs.w	r7, #512	; 0x200
 800c07e:	4605      	mov	r5, r0
 800c080:	2600      	movs	r6, #0
 800c082:	f04f 0901 	mov.w	r9, #1
 800c086:	f100 08ba 	add.w	r8, r0, #186	; 0xba
 800c08a:	f895 3900 	ldrb.w	r3, [r5, #2304]	; 0x900
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d056      	beq.n	800c140 <ArtNetNode::HandleDmx()+0xda>
 800c092:	f8d5 391c 	ldr.w	r3, [r5, #2332]	; 0x91c
 800c096:	2b00      	cmp	r3, #0
 800c098:	d152      	bne.n	800c140 <ArtNetNode::HandleDmx()+0xda>
 800c09a:	f8b4 20b6 	ldrh.w	r2, [r4, #182]	; 0xb6
 800c09e:	f8b5 38fc 	ldrh.w	r3, [r5, #2300]	; 0x8fc
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d14c      	bne.n	800c140 <ArtNetNode::HandleDmx()+0xda>
 800c0a6:	f895 38ff 	ldrb.w	r3, [r5, #2303]	; 0x8ff
 800c0aa:	f8d5 b908 	ldr.w	fp, [r5, #2312]	; 0x908
 800c0ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c0b2:	f885 38ff 	strb.w	r3, [r5, #2303]	; 0x8ff
 800c0b6:	f894 38f2 	ldrb.w	r3, [r4, #2290]	; 0x8f2
 800c0ba:	f8d5 a910 	ldr.w	sl, [r5, #2320]	; 0x910
 800c0be:	b133      	cbz	r3, 800c0ce <ArtNetNode::HandleDmx()+0x68>
 800c0c0:	f894 38f4 	ldrb.w	r3, [r4, #2292]	; 0x8f4
 800c0c4:	b91b      	cbnz	r3, 800c0ce <ArtNetNode::HandleDmx()+0x68>
 800c0c6:	4631      	mov	r1, r6
 800c0c8:	4620      	mov	r0, r4
 800c0ca:	f7ff ff90 	bl	800bfee <ArtNetNode::CheckMergeTimeouts(unsigned int)>
 800c0ce:	ea5b 020a 	orrs.w	r2, fp, sl
 800c0d2:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
 800c0d6:	d139      	bne.n	800c14c <ArtNetNode::HandleDmx()+0xe6>
 800c0d8:	f8c5 3908 	str.w	r3, [r5, #2312]	; 0x908
 800c0dc:	f8d4 3880 	ldr.w	r3, [r4, #2176]	; 0x880
 800c0e0:	463a      	mov	r2, r7
 800c0e2:	4641      	mov	r1, r8
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	f8c5 3904 	str.w	r3, [r5, #2308]	; 0x904
 800c0ea:	f7ff feff 	bl	800beec <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800c0ee:	f894 38f1 	ldrb.w	r3, [r4, #2289]	; 0x8f1
 800c0f2:	b9fb      	cbnz	r3, 800c134 <ArtNetNode::HandleDmx()+0xce>
 800c0f4:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800c0f8:	f7ff feec 	bl	800bed4 <lightset::Data::Get()>
 800c0fc:	f240 6304 	movw	r3, #1540	; 0x604
 800c100:	4373      	muls	r3, r6
 800c102:	18c2      	adds	r2, r0, r3
 800c104:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 800c108:	f8da 3000 	ldr.w	r3, [sl]
 800c10c:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800c110:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800c114:	1842      	adds	r2, r0, r1
 800c116:	4631      	mov	r1, r6
 800c118:	4650      	mov	r0, sl
 800c11a:	47d8      	blx	fp
 800c11c:	f895 3921 	ldrb.w	r3, [r5, #2337]	; 0x921
 800c120:	b943      	cbnz	r3, 800c134 <ArtNetNode::HandleDmx()+0xce>
 800c122:	6860      	ldr	r0, [r4, #4]
 800c124:	4631      	mov	r1, r6
 800c126:	6803      	ldr	r3, [r0, #0]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	4798      	blx	r3
 800c12c:	f884 98f3 	strb.w	r9, [r4, #2291]	; 0x8f3
 800c130:	f885 9921 	strb.w	r9, [r5, #2337]	; 0x921
 800c134:	f894 38f5 	ldrb.w	r3, [r4, #2293]	; 0x8f5
 800c138:	f043 0302 	orr.w	r3, r3, #2
 800c13c:	f884 38f5 	strb.w	r3, [r4, #2293]	; 0x8f5
 800c140:	3601      	adds	r6, #1
 800c142:	2e20      	cmp	r6, #32
 800c144:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800c148:	d19f      	bne.n	800c08a <ArtNetNode::HandleDmx()+0x24>
 800c14a:	e040      	b.n	800c1ce <ArtNetNode::HandleDmx()+0x168>
 800c14c:	459b      	cmp	fp, r3
 800c14e:	d104      	bne.n	800c15a <ArtNetNode::HandleDmx()+0xf4>
 800c150:	f1ba 0f00 	cmp.w	sl, #0
 800c154:	d0c2      	beq.n	800c0dc <ArtNetNode::HandleDmx()+0x76>
 800c156:	b11b      	cbz	r3, 800c160 <ArtNetNode::HandleDmx()+0xfa>
 800c158:	e037      	b.n	800c1ca <ArtNetNode::HandleDmx()+0x164>
 800c15a:	f1bb 0f00 	cmp.w	fp, #0
 800c15e:	d132      	bne.n	800c1c6 <ArtNetNode::HandleDmx()+0x160>
 800c160:	459a      	cmp	sl, r3
 800c162:	d11d      	bne.n	800c1a0 <ArtNetNode::HandleDmx()+0x13a>
 800c164:	f8d4 3880 	ldr.w	r3, [r4, #2176]	; 0x880
 800c168:	f8c5 390c 	str.w	r3, [r5, #2316]	; 0x90c
 800c16c:	f7ff feb2 	bl	800bed4 <lightset::Data::Get()>
 800c170:	f240 6304 	movw	r3, #1540	; 0x604
 800c174:	4683      	mov	fp, r0
 800c176:	fb03 fa06 	mul.w	sl, r3, r6
 800c17a:	f50a 7000 	add.w	r0, sl, #512	; 0x200
 800c17e:	463a      	mov	r2, r7
 800c180:	4641      	mov	r1, r8
 800c182:	4458      	add	r0, fp
 800c184:	f7ff fe9c 	bl	800bec0 <memcpy.isra.0>
 800c188:	eb0b 030a 	add.w	r3, fp, sl
 800c18c:	f50a 6080 	add.w	r0, sl, #1024	; 0x400
 800c190:	463a      	mov	r2, r7
 800c192:	4641      	mov	r1, r8
 800c194:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800c198:	4458      	add	r0, fp
 800c19a:	f7ff fe91 	bl	800bec0 <memcpy.isra.0>
 800c19e:	e7a6      	b.n	800c0ee <ArtNetNode::HandleDmx()+0x88>
 800c1a0:	b9bb      	cbnz	r3, 800c1d2 <ArtNetNode::HandleDmx()+0x16c>
 800c1a2:	f8c5 3908 	str.w	r3, [r5, #2312]	; 0x908
 800c1a6:	f8d4 3880 	ldr.w	r3, [r4, #2176]	; 0x880
 800c1aa:	4631      	mov	r1, r6
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	f8c5 3904 	str.w	r3, [r5, #2308]	; 0x904
 800c1b2:	f7ff ff0b 	bl	800bfcc <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800c1b6:	463a      	mov	r2, r7
 800c1b8:	4641      	mov	r1, r8
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	f8d5 3914 	ldr.w	r3, [r5, #2324]	; 0x914
 800c1c0:	f7ff feb1 	bl	800bf26 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800c1c4:	e793      	b.n	800c0ee <ArtNetNode::HandleDmx()+0x88>
 800c1c6:	459b      	cmp	fp, r3
 800c1c8:	d118      	bne.n	800c1fc <ArtNetNode::HandleDmx()+0x196>
 800c1ca:	459a      	cmp	sl, r3
 800c1cc:	d1eb      	bne.n	800c1a6 <ArtNetNode::HandleDmx()+0x140>
 800c1ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d2:	f1ba 0f00 	cmp.w	sl, #0
 800c1d6:	d1e4      	bne.n	800c1a2 <ArtNetNode::HandleDmx()+0x13c>
 800c1d8:	f8c5 3910 	str.w	r3, [r5, #2320]	; 0x910
 800c1dc:	f8d4 3880 	ldr.w	r3, [r4, #2176]	; 0x880
 800c1e0:	4631      	mov	r1, r6
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	f8c5 390c 	str.w	r3, [r5, #2316]	; 0x90c
 800c1e8:	f7ff fef0 	bl	800bfcc <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800c1ec:	463a      	mov	r2, r7
 800c1ee:	4641      	mov	r1, r8
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	f8d5 3914 	ldr.w	r3, [r5, #2324]	; 0x914
 800c1f6:	f7ff febf 	bl	800bf78 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800c1fa:	e778      	b.n	800c0ee <ArtNetNode::HandleDmx()+0x88>
 800c1fc:	f1ba 0f00 	cmp.w	sl, #0
 800c200:	d0ea      	beq.n	800c1d8 <ArtNetNode::HandleDmx()+0x172>
 800c202:	459a      	cmp	sl, r3
 800c204:	d0ea      	beq.n	800c1dc <ArtNetNode::HandleDmx()+0x176>
 800c206:	e7e2      	b.n	800c1ce <ArtNetNode::HandleDmx()+0x168>

0800c208 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>:
 800c208:	291f      	cmp	r1, #31
 800c20a:	b510      	push	{r4, lr}
 800c20c:	d80f      	bhi.n	800c22e <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x26>
 800c20e:	4b08      	ldr	r3, [pc, #32]	; (800c230 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x28>)
 800c210:	31e0      	adds	r1, #224	; 0xe0
 800c212:	681c      	ldr	r4, [r3, #0]
 800c214:	6963      	ldr	r3, [r4, #20]
 800c216:	69e4      	ldr	r4, [r4, #28]
 800c218:	4053      	eors	r3, r2
 800c21a:	4223      	tst	r3, r4
 800c21c:	bf15      	itete	ne
 800c21e:	6a83      	ldrne	r3, [r0, #40]	; 0x28
 800c220:	eb00 1001 	addeq.w	r0, r0, r1, lsl #4
 800c224:	eb00 1101 	addne.w	r1, r0, r1, lsl #4
 800c228:	6042      	streq	r2, [r0, #4]
 800c22a:	bf18      	it	ne
 800c22c:	604b      	strne	r3, [r1, #4]
 800c22e:	bd10      	pop	{r4, pc}
 800c230:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800c234 <ArtNetNode::HandleDmxIn()>:
 800c234:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c238:	4604      	mov	r4, r0
 800c23a:	4605      	mov	r5, r0
 800c23c:	2600      	movs	r6, #0
 800c23e:	4f3a      	ldr	r7, [pc, #232]	; (800c328 <ArtNetNode::HandleDmxIn()+0xf4>)
 800c240:	f895 3e00 	ldrb.w	r3, [r5, #3584]	; 0xe00
 800c244:	b93b      	cbnz	r3, 800c256 <ArtNetNode::HandleDmxIn()+0x22>
 800c246:	3601      	adds	r6, #1
 800c248:	2e20      	cmp	r6, #32
 800c24a:	f105 0510 	add.w	r5, r5, #16
 800c24e:	d1f7      	bne.n	800c240 <ArtNetNode::HandleDmxIn()+0xc>
 800c250:	b004      	add	sp, #16
 800c252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c256:	6920      	ldr	r0, [r4, #16]
 800c258:	4631      	mov	r1, r6
 800c25a:	6803      	ldr	r3, [r0, #0]
 800c25c:	aa02      	add	r2, sp, #8
 800c25e:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800c262:	ab03      	add	r3, sp, #12
 800c264:	47c0      	blx	r8
 800c266:	2800      	cmp	r0, #0
 800c268:	d044      	beq.n	800c2f4 <ArtNetNode::HandleDmxIn()+0xc0>
 800c26a:	f895 3e08 	ldrb.w	r3, [r5, #3592]	; 0xe08
 800c26e:	f204 627c 	addw	r2, r4, #1660	; 0x67c
 800c272:	3301      	adds	r3, #1
 800c274:	b2db      	uxtb	r3, r3
 800c276:	f885 3e08 	strb.w	r3, [r5, #3592]	; 0xe08
 800c27a:	f884 3677 	strb.w	r3, [r4, #1655]	; 0x677
 800c27e:	f884 6678 	strb.w	r6, [r4, #1656]	; 0x678
 800c282:	f8b5 3dfc 	ldrh.w	r3, [r5, #3580]	; 0xdfc
 800c286:	f8a4 3679 	strh.w	r3, [r4, #1657]	; 0x679
 800c28a:	9b02      	ldr	r3, [sp, #8]
 800c28c:	18c1      	adds	r1, r0, r3
 800c28e:	4281      	cmp	r1, r0
 800c290:	d12b      	bne.n	800c2ea <ArtNetNode::HandleDmxIn()+0xb6>
 800c292:	07da      	lsls	r2, r3, #31
 800c294:	d505      	bpl.n	800c2a2 <ArtNetNode::HandleDmxIn()+0x6e>
 800c296:	2100      	movs	r1, #0
 800c298:	18e2      	adds	r2, r4, r3
 800c29a:	3301      	adds	r3, #1
 800c29c:	f882 167d 	strb.w	r1, [r2, #1661]	; 0x67d
 800c2a0:	9302      	str	r3, [sp, #8]
 800c2a2:	9b02      	ldr	r3, [sp, #8]
 800c2a4:	f204 616b 	addw	r1, r4, #1643	; 0x66b
 800c2a8:	f884 367c 	strb.w	r3, [r4, #1660]	; 0x67c
 800c2ac:	0a1a      	lsrs	r2, r3, #8
 800c2ae:	2380      	movs	r3, #128	; 0x80
 800c2b0:	f884 267b 	strb.w	r2, [r4, #1659]	; 0x67b
 800c2b4:	f885 3dff 	strb.w	r3, [r5, #3583]	; 0xdff
 800c2b8:	f641 1336 	movw	r3, #6454	; 0x1936
 800c2bc:	9300      	str	r3, [sp, #0]
 800c2be:	f240 2212 	movw	r2, #530	; 0x212
 800c2c2:	f8d5 3e04 	ldr.w	r3, [r5, #3588]	; 0xe04
 800c2c6:	7820      	ldrb	r0, [r4, #0]
 800c2c8:	f007 f8be 	bl	8013448 <udp_send>
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	683a      	ldr	r2, [r7, #0]
 800c2d0:	40b3      	lsls	r3, r6
 800c2d2:	ea33 0102 	bics.w	r1, r3, r2
 800c2d6:	d0b6      	beq.n	800c246 <ArtNetNode::HandleDmxIn()+0x12>
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	603b      	str	r3, [r7, #0]
 800c2dc:	f894 38f5 	ldrb.w	r3, [r4, #2293]	; 0x8f5
 800c2e0:	f043 0301 	orr.w	r3, r3, #1
 800c2e4:	f884 38f5 	strb.w	r3, [r4, #2293]	; 0x8f5
 800c2e8:	e7ad      	b.n	800c246 <ArtNetNode::HandleDmxIn()+0x12>
 800c2ea:	f810 cb01 	ldrb.w	ip, [r0], #1
 800c2ee:	f802 cf01 	strb.w	ip, [r2, #1]!
 800c2f2:	e7cc      	b.n	800c28e <ArtNetNode::HandleDmxIn()+0x5a>
 800c2f4:	f995 2dff 	ldrsb.w	r2, [r5, #3583]	; 0xdff
 800c2f8:	f895 3dff 	ldrb.w	r3, [r5, #3583]	; 0xdff
 800c2fc:	2a00      	cmp	r2, #0
 800c2fe:	daa2      	bge.n	800c246 <ArtNetNode::HandleDmxIn()+0x12>
 800c300:	9a03      	ldr	r2, [sp, #12]
 800c302:	2a00      	cmp	r2, #0
 800c304:	d19f      	bne.n	800c246 <ArtNetNode::HandleDmxIn()+0x12>
 800c306:	2201      	movs	r2, #1
 800c308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c30c:	f885 3dff 	strb.w	r3, [r5, #3583]	; 0xdff
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	40b2      	lsls	r2, r6
 800c314:	ea23 0302 	bic.w	r3, r3, r2
 800c318:	603b      	str	r3, [r7, #0]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d193      	bne.n	800c246 <ArtNetNode::HandleDmxIn()+0x12>
 800c31e:	f894 38f5 	ldrb.w	r3, [r4, #2293]	; 0x8f5
 800c322:	f023 0301 	bic.w	r3, r3, #1
 800c326:	e7dd      	b.n	800c2e4 <ArtNetNode::HandleDmxIn()+0xb0>
 800c328:	2000c740 	andcs	ip, r0, r0, asr #14

0800c32c <memcmp.constprop.0>:
 800c32c:	b510      	push	{r4, lr}
 800c32e:	4907      	ldr	r1, [pc, #28]	; (800c34c <memcmp.constprop.0+0x20>)
 800c330:	1e42      	subs	r2, r0, #1
 800c332:	3003      	adds	r0, #3
 800c334:	4282      	cmp	r2, r0
 800c336:	d101      	bne.n	800c33c <memcmp.constprop.0+0x10>
 800c338:	2000      	movs	r0, #0
 800c33a:	e006      	b.n	800c34a <memcmp.constprop.0+0x1e>
 800c33c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800c340:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c344:	42a3      	cmp	r3, r4
 800c346:	d0f5      	beq.n	800c334 <memcmp.constprop.0+0x8>
 800c348:	1b18      	subs	r0, r3, r4
 800c34a:	bd10      	pop	{r4, pc}
 800c34c:	2000c744 	andcs	ip, r0, r4, asr #14

0800c350 <memcpy.constprop.0.isra.0>:
 800c350:	3801      	subs	r0, #1
 800c352:	1d0b      	adds	r3, r1, #4
 800c354:	4299      	cmp	r1, r3
 800c356:	d100      	bne.n	800c35a <memcpy.constprop.0.isra.0+0xa>
 800c358:	4770      	bx	lr
 800c35a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c35e:	f800 2f01 	strb.w	r2, [r0, #1]!
 800c362:	e7f7      	b.n	800c354 <memcpy.constprop.0.isra.0+0x4>

0800c364 <ArtNetNode::HandleIpProg()>:
 800c364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c368:	f100 03a8 	add.w	r3, r0, #168	; 0xa8
 800c36c:	b085      	sub	sp, #20
 800c36e:	4604      	mov	r4, r0
 800c370:	9303      	str	r3, [sp, #12]
 800c372:	2300      	movs	r3, #0
 800c374:	4d57      	ldr	r5, [pc, #348]	; (800c4d4 <ArtNetNode::HandleIpProg()+0x170>)
 800c376:	f890 70b6 	ldrb.w	r7, [r0, #182]	; 0xb6
 800c37a:	6828      	ldr	r0, [r5, #0]
 800c37c:	f890 b005 	ldrb.w	fp, [r0, #5]
 800c380:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 800c384:	f06f 0306 	mvn.w	r3, #6
 800c388:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 800c38c:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
 800c390:	2bc0      	cmp	r3, #192	; 0xc0
 800c392:	d101      	bne.n	800c398 <ArtNetNode::HandleIpProg()+0x34>
 800c394:	f007 ff2a 	bl	80141ec <Network::EnableDhcp()>
 800c398:	f007 0388 	and.w	r3, r7, #136	; 0x88
 800c39c:	2b88      	cmp	r3, #136	; 0x88
 800c39e:	d103      	bne.n	800c3a8 <ArtNetNode::HandleIpProg()+0x44>
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	6828      	ldr	r0, [r5, #0]
 800c3a4:	f007 fe86 	bl	80140b4 <Network::SetIp(unsigned int)>
 800c3a8:	f007 0384 	and.w	r3, r7, #132	; 0x84
 800c3ac:	2b84      	cmp	r3, #132	; 0x84
 800c3ae:	4e4a      	ldr	r6, [pc, #296]	; (800c4d8 <ArtNetNode::HandleIpProg()+0x174>)
 800c3b0:	f104 08b8 	add.w	r8, r4, #184	; 0xb8
 800c3b4:	d107      	bne.n	800c3c6 <ArtNetNode::HandleIpProg()+0x62>
 800c3b6:	4641      	mov	r1, r8
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	f7ff ffc9 	bl	800c350 <memcpy.constprop.0.isra.0>
 800c3be:	6831      	ldr	r1, [r6, #0]
 800c3c0:	6828      	ldr	r0, [r5, #0]
 800c3c2:	f007 fe77 	bl	80140b4 <Network::SetIp(unsigned int)>
 800c3c6:	f007 0382 	and.w	r3, r7, #130	; 0x82
 800c3ca:	2b82      	cmp	r3, #130	; 0x82
 800c3cc:	f104 09bc 	add.w	r9, r4, #188	; 0xbc
 800c3d0:	d107      	bne.n	800c3e2 <ArtNetNode::HandleIpProg()+0x7e>
 800c3d2:	4649      	mov	r1, r9
 800c3d4:	4840      	ldr	r0, [pc, #256]	; (800c4d8 <ArtNetNode::HandleIpProg()+0x174>)
 800c3d6:	f7ff ffbb 	bl	800c350 <memcpy.constprop.0.isra.0>
 800c3da:	6831      	ldr	r1, [r6, #0]
 800c3dc:	6828      	ldr	r0, [r5, #0]
 800c3de:	f007 fe97 	bl	8014110 <Network::SetNetmask(unsigned int)>
 800c3e2:	f007 0790 	and.w	r7, r7, #144	; 0x90
 800c3e6:	2f90      	cmp	r7, #144	; 0x90
 800c3e8:	f104 0ac2 	add.w	sl, r4, #194	; 0xc2
 800c3ec:	d107      	bne.n	800c3fe <ArtNetNode::HandleIpProg()+0x9a>
 800c3ee:	4651      	mov	r1, sl
 800c3f0:	4839      	ldr	r0, [pc, #228]	; (800c4d8 <ArtNetNode::HandleIpProg()+0x174>)
 800c3f2:	f7ff ffad 	bl	800c350 <memcpy.constprop.0.isra.0>
 800c3f6:	6831      	ldr	r1, [r6, #0]
 800c3f8:	6828      	ldr	r0, [r5, #0]
 800c3fa:	f007 fe9f 	bl	801413c <Network::SetGatewayIp(unsigned int)>
 800c3fe:	6829      	ldr	r1, [r5, #0]
 800c400:	794a      	ldrb	r2, [r1, #5]
 800c402:	0192      	lsls	r2, r2, #6
 800c404:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
 800c408:	2200      	movs	r2, #0
 800c40a:	f884 20c3 	strb.w	r2, [r4, #195]	; 0xc3
 800c40e:	7948      	ldrb	r0, [r1, #5]
 800c410:	6949      	ldr	r1, [r1, #20]
 800c412:	ea8b 0b00 	eor.w	fp, fp, r0
 800c416:	4640      	mov	r0, r8
 800c418:	6031      	str	r1, [r6, #0]
 800c41a:	f7ff ff87 	bl	800c32c <memcmp.constprop.0>
 800c41e:	492e      	ldr	r1, [pc, #184]	; (800c4d8 <ArtNetNode::HandleIpProg()+0x174>)
 800c420:	4607      	mov	r7, r0
 800c422:	4640      	mov	r0, r8
 800c424:	f7ff ff94 	bl	800c350 <memcpy.constprop.0.isra.0>
 800c428:	6829      	ldr	r1, [r5, #0]
 800c42a:	4648      	mov	r0, r9
 800c42c:	69c9      	ldr	r1, [r1, #28]
 800c42e:	6031      	str	r1, [r6, #0]
 800c430:	f7ff ff7c 	bl	800c32c <memcmp.constprop.0>
 800c434:	4928      	ldr	r1, [pc, #160]	; (800c4d8 <ArtNetNode::HandleIpProg()+0x174>)
 800c436:	9003      	str	r0, [sp, #12]
 800c438:	4648      	mov	r0, r9
 800c43a:	f7ff ff89 	bl	800c350 <memcpy.constprop.0.isra.0>
 800c43e:	6829      	ldr	r1, [r5, #0]
 800c440:	4650      	mov	r0, sl
 800c442:	6989      	ldr	r1, [r1, #24]
 800c444:	6031      	str	r1, [r6, #0]
 800c446:	f7ff ff71 	bl	800c32c <memcmp.constprop.0>
 800c44a:	9b03      	ldr	r3, [sp, #12]
 800c44c:	4922      	ldr	r1, [pc, #136]	; (800c4d8 <ArtNetNode::HandleIpProg()+0x174>)
 800c44e:	431f      	orrs	r7, r3
 800c450:	4307      	orrs	r7, r0
 800c452:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 800c456:	bf0c      	ite	eq
 800c458:	465e      	moveq	r6, fp
 800c45a:	f04b 0601 	orrne.w	r6, fp, #1
 800c45e:	f7ff ff77 	bl	800c350 <memcpy.constprop.0.isra.0>
 800c462:	2200      	movs	r2, #0
 800c464:	f641 1336 	movw	r3, #6454	; 0x1936
 800c468:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
 800c46c:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	2222      	movs	r2, #34	; 0x22
 800c474:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
 800c478:	7820      	ldrb	r0, [r4, #0]
 800c47a:	f104 01a8 	add.w	r1, r4, #168	; 0xa8
 800c47e:	f006 ffe3 	bl	8013448 <udp_send>
 800c482:	b31e      	cbz	r6, 800c4cc <ArtNetNode::HandleIpProg()+0x168>
 800c484:	682a      	ldr	r2, [r5, #0]
 800c486:	f204 5086 	addw	r0, r4, #1414	; 0x586
 800c48a:	6953      	ldr	r3, [r2, #20]
 800c48c:	6263      	str	r3, [r4, #36]	; 0x24
 800c48e:	69d1      	ldr	r1, [r2, #28]
 800c490:	7952      	ldrb	r2, [r2, #5]
 800c492:	ea63 0301 	orn	r3, r3, r1
 800c496:	62a3      	str	r3, [r4, #40]	; 0x28
 800c498:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 800c49c:	4641      	mov	r1, r8
 800c49e:	f023 0302 	bic.w	r3, r3, #2
 800c4a2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800c4a6:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
 800c4aa:	f7ff ff51 	bl	800c350 <memcpy.constprop.0.isra.0>
 800c4ae:	4641      	mov	r1, r8
 800c4b0:	f204 604b 	addw	r0, r4, #1611	; 0x64b
 800c4b4:	f7ff ff4c 	bl	800c350 <memcpy.constprop.0.isra.0>
 800c4b8:	f894 38ee 	ldrb.w	r3, [r4, #2286]	; 0x8ee
 800c4bc:	b133      	cbz	r3, 800c4cc <ArtNetNode::HandleIpProg()+0x168>
 800c4be:	2101      	movs	r1, #1
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	b005      	add	sp, #20
 800c4c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c8:	f000 b8ec 	b.w	800c6a4 <ArtNetNode::SendPollRelply(bool)>
 800c4cc:	b005      	add	sp, #20
 800c4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d2:	bf00      	nop
 800c4d4:	2001d2d4 	ldrdcs	sp, [r1], -r4
 800c4d8:	2000c744 	andcs	ip, r0, r4, asr #14

0800c4dc <memcpy.isra.0>:
 800c4dc:	3801      	subs	r0, #1
 800c4de:	440a      	add	r2, r1
 800c4e0:	4291      	cmp	r1, r2
 800c4e2:	d100      	bne.n	800c4e6 <memcpy.isra.0+0xa>
 800c4e4:	4770      	bx	lr
 800c4e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4ea:	f800 3f01 	strb.w	r3, [r0, #1]!
 800c4ee:	e7f7      	b.n	800c4e0 <memcpy.isra.0+0x4>

0800c4f0 <ArtNetNode::FillPollReply()>:
 800c4f0:	b538      	push	{r3, r4, r5, lr}
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	f200 507c 	addw	r0, r0, #1404	; 0x57c
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	f204 626b 	addw	r2, r4, #1643	; 0x66b
 800c500:	429a      	cmp	r2, r3
 800c502:	d153      	bne.n	800c5ac <ArtNetNode::FillPollReply()+0xbc>
 800c504:	2208      	movs	r2, #8
 800c506:	492b      	ldr	r1, [pc, #172]	; (800c5b4 <ArtNetNode::FillPollReply()+0xc4>)
 800c508:	f7ff ffe8 	bl	800c4dc <memcpy.isra.0>
 800c50c:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800c510:	4d29      	ldr	r5, [pc, #164]	; (800c5b8 <ArtNetNode::FillPollReply()+0xc8>)
 800c512:	f8a4 3584 	strh.w	r3, [r4, #1412]	; 0x584
 800c516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c518:	4629      	mov	r1, r5
 800c51a:	f204 5086 	addw	r0, r4, #1414	; 0x586
 800c51e:	2204      	movs	r2, #4
 800c520:	602b      	str	r3, [r5, #0]
 800c522:	f7ff ffdb 	bl	800c4dc <memcpy.isra.0>
 800c526:	f641 1336 	movw	r3, #6454	; 0x1936
 800c52a:	f8a4 358a 	strh.w	r3, [r4, #1418]	; 0x58a
 800c52e:	4b23      	ldr	r3, [pc, #140]	; (800c5bc <ArtNetNode::FillPollReply()+0xcc>)
 800c530:	f104 014a 	add.w	r1, r4, #74	; 0x4a
 800c534:	781a      	ldrb	r2, [r3, #0]
 800c536:	f204 5096 	addw	r0, r4, #1430	; 0x596
 800c53a:	f884 258c 	strb.w	r2, [r4, #1420]	; 0x58c
 800c53e:	785b      	ldrb	r3, [r3, #1]
 800c540:	f884 358d 	strb.w	r3, [r4, #1421]	; 0x58d
 800c544:	4b1e      	ldr	r3, [pc, #120]	; (800c5c0 <ArtNetNode::FillPollReply()+0xd0>)
 800c546:	781a      	ldrb	r2, [r3, #0]
 800c548:	f884 2590 	strb.w	r2, [r4, #1424]	; 0x590
 800c54c:	785b      	ldrb	r3, [r3, #1]
 800c54e:	f884 3591 	strb.w	r3, [r4, #1425]	; 0x591
 800c552:	4b1c      	ldr	r3, [pc, #112]	; (800c5c4 <ArtNetNode::FillPollReply()+0xd4>)
 800c554:	785a      	ldrb	r2, [r3, #1]
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	f884 2594 	strb.w	r2, [r4, #1428]	; 0x594
 800c55c:	f884 3595 	strb.w	r3, [r4, #1429]	; 0x595
 800c560:	2212      	movs	r2, #18
 800c562:	f7ff ffbb 	bl	800c4dc <memcpy.isra.0>
 800c566:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 800c56a:	f504 60b5 	add.w	r0, r4, #1448	; 0x5a8
 800c56e:	2240      	movs	r2, #64	; 0x40
 800c570:	f7ff ffb4 	bl	800c4dc <memcpy.isra.0>
 800c574:	2300      	movs	r3, #0
 800c576:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800c57a:	f884 3644 	strb.w	r3, [r4, #1604]	; 0x644
 800c57e:	f204 6045 	addw	r0, r4, #1605	; 0x645
 800c582:	2206      	movs	r2, #6
 800c584:	f7ff ffaa 	bl	800c4dc <memcpy.isra.0>
 800c588:	4629      	mov	r1, r5
 800c58a:	f204 604b 	addw	r0, r4, #1611	; 0x64b
 800c58e:	2204      	movs	r2, #4
 800c590:	f7ff ffa4 	bl	800c4dc <memcpy.isra.0>
 800c594:	2304      	movs	r3, #4
 800c596:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 800c59a:	f884 3629 	strb.w	r3, [r4, #1577]	; 0x629
 800c59e:	f204 6056 	addw	r0, r4, #1622	; 0x656
 800c5a2:	2206      	movs	r2, #6
 800c5a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5a8:	f7ff bf98 	b.w	800c4dc <memcpy.isra.0>
 800c5ac:	f803 1b01 	strb.w	r1, [r3], #1
 800c5b0:	e7a6      	b.n	800c500 <ArtNetNode::FillPollReply()+0x10>
 800c5b2:	bf00      	nop
 800c5b4:	08019ff7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 800c5b8:	2000c748 	andcs	ip, r0, r8, asr #14
 800c5bc:	0801a22c 	stmdaeq	r1, {r2, r3, r5, r9, sp, pc}
 800c5c0:	0801a228 	stmdaeq	r1, {r3, r5, r9, sp, pc}
 800c5c4:	0801a22a 	stmdaeq	r1, {r1, r3, r5, r9, sp, pc}

0800c5c8 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)>:
 800c5c8:	1a8a      	subs	r2, r1, r2
 800c5ca:	291f      	cmp	r1, #31
 800c5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d0:	4605      	mov	r5, r0
 800c5d2:	460e      	mov	r6, r1
 800c5d4:	461f      	mov	r7, r3
 800c5d6:	eb00 0402 	add.w	r4, r0, r2
 800c5da:	d90e      	bls.n	800c5fa <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x32>
 800c5dc:	2300      	movs	r3, #0
 800c5de:	f884 362a 	strb.w	r3, [r4, #1578]	; 0x62a
 800c5e2:	f884 3632 	strb.w	r3, [r4, #1586]	; 0x632
 800c5e6:	f884 3651 	strb.w	r3, [r4, #1617]	; 0x651
 800c5ea:	f884 363a 	strb.w	r3, [r4, #1594]	; 0x63a
 800c5ee:	f884 362e 	strb.w	r3, [r4, #1582]	; 0x62e
 800c5f2:	f884 3636 	strb.w	r3, [r4, #1590]	; 0x636
 800c5f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5fa:	f04f 0928 	mov.w	r9, #40	; 0x28
 800c5fe:	fb09 0901 	mla	r9, r9, r1, r0
 800c602:	f8d9 391c 	ldr.w	r3, [r9, #2332]	; 0x91c
 800c606:	2b01      	cmp	r3, #1
 800c608:	d115      	bne.n	800c636 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x6e>
 800c60a:	6980      	ldr	r0, [r0, #24]
 800c60c:	f899 88ff 	ldrb.w	r8, [r9, #2303]	; 0x8ff
 800c610:	6803      	ldr	r3, [r0, #0]
 800c612:	f008 0876 	and.w	r8, r8, #118	; 0x76
 800c616:	691b      	ldr	r3, [r3, #16]
 800c618:	4798      	blx	r3
 800c61a:	2328      	movs	r3, #40	; 0x28
 800c61c:	fb03 5306 	mla	r3, r3, r6, r5
 800c620:	f000 0089 	and.w	r0, r0, #137	; 0x89
 800c624:	ea40 0808 	orr.w	r8, r0, r8
 800c628:	f010 0001 	ands.w	r0, r0, #1
 800c62c:	bf08      	it	eq
 800c62e:	f8c9 091c 	streq.w	r0, [r9, #2332]	; 0x91c
 800c632:	f883 88ff 	strb.w	r8, [r3, #2303]	; 0x8ff
 800c636:	2300      	movs	r3, #0
 800c638:	f884 362a 	strb.w	r3, [r4, #1578]	; 0x62a
 800c63c:	2328      	movs	r3, #40	; 0x28
 800c63e:	fb03 5306 	mla	r3, r3, r6, r5
 800c642:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800c646:	b12b      	cbz	r3, 800c654 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x8c>
 800c648:	2380      	movs	r3, #128	; 0x80
 800c64a:	f884 362a 	strb.w	r3, [r4, #1578]	; 0x62a
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	3301      	adds	r3, #1
 800c652:	603b      	str	r3, [r7, #0]
 800c654:	2328      	movs	r3, #40	; 0x28
 800c656:	fb03 5306 	mla	r3, r3, r6, r5
 800c65a:	f893 28ff 	ldrb.w	r2, [r3, #2303]	; 0x8ff
 800c65e:	f884 2632 	strb.w	r2, [r4, #1586]	; 0x632
 800c662:	f893 2918 	ldrb.w	r2, [r3, #2328]	; 0x918
 800c666:	2a00      	cmp	r2, #0
 800c668:	bf14      	ite	ne
 800c66a:	2240      	movne	r2, #64	; 0x40
 800c66c:	22c0      	moveq	r2, #192	; 0xc0
 800c66e:	f884 2651 	strb.w	r2, [r4, #1617]	; 0x651
 800c672:	f893 38fe 	ldrb.w	r3, [r3, #2302]	; 0x8fe
 800c676:	0132      	lsls	r2, r6, #4
 800c678:	f884 363a 	strb.w	r3, [r4, #1594]	; 0x63a
 800c67c:	eb05 1606 	add.w	r6, r5, r6, lsl #4
 800c680:	f896 3e00 	ldrb.w	r3, [r6, #3584]	; 0xe00
 800c684:	b12b      	cbz	r3, 800c692 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0xca>
 800c686:	2340      	movs	r3, #64	; 0x40
 800c688:	f884 362a 	strb.w	r3, [r4, #1578]	; 0x62a
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	3301      	adds	r3, #1
 800c690:	603b      	str	r3, [r7, #0]
 800c692:	4415      	add	r5, r2
 800c694:	f895 3dff 	ldrb.w	r3, [r5, #3583]	; 0xdff
 800c698:	f884 362e 	strb.w	r3, [r4, #1582]	; 0x62e
 800c69c:	f895 3dfe 	ldrb.w	r3, [r5, #3582]	; 0xdfe
 800c6a0:	e7a7      	b.n	800c5f2 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x2a>
	...

0800c6a4 <ArtNetNode::SendPollRelply(bool)>:
 800c6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a8:	4604      	mov	r4, r0
 800c6aa:	b087      	sub	sp, #28
 800c6ac:	b941      	cbnz	r1, 800c6c0 <ArtNetNode::SendPollRelply(bool)+0x1c>
 800c6ae:	f890 38ed 	ldrb.w	r3, [r0, #2285]	; 0x8ed
 800c6b2:	2b02      	cmp	r3, #2
 800c6b4:	bf02      	ittt	eq
 800c6b6:	f8d0 38dc 	ldreq.w	r3, [r0, #2268]	; 0x8dc
 800c6ba:	3301      	addeq	r3, #1
 800c6bc:	f8c0 38dc 	streq.w	r3, [r0, #2268]	; 0x8dc
 800c6c0:	2601      	movs	r6, #1
 800c6c2:	f04f 0b00 	mov.w	fp, #0
 800c6c6:	4635      	mov	r5, r6
 800c6c8:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 800c6cc:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800c778 <ArtNetNode::SendPollRelply(bool)+0xd4>
 800c6d0:	f884 3593 	strb.w	r3, [r4, #1427]	; 0x593
 800c6d4:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 800c6d8:	f104 0839 	add.w	r8, r4, #57	; 0x39
 800c6dc:	f884 3650 	strb.w	r3, [r4, #1616]	; 0x650
 800c6e0:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 800c6e4:	f884 3655 	strb.w	r3, [r4, #1621]	; 0x655
 800c6e8:	ebb6 0f85 	cmp.w	r6, r5, lsl #2
 800c6ec:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800c6f0:	bf8c      	ite	hi
 800c6f2:	f04f 0901 	movhi.w	r9, #1
 800c6f6:	f04f 0904 	movls.w	r9, #4
 800c6fa:	4617      	mov	r7, r2
 800c6fc:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 800c700:	f8cd b014 	str.w	fp, [sp, #20]
 800c704:	f884 358e 	strb.w	r3, [r4, #1422]	; 0x58e
 800c708:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c70c:	4491      	add	r9, r2
 800c70e:	f884 358f 	strb.w	r3, [r4, #1423]	; 0x58f
 800c712:	f884 564f 	strb.w	r5, [r4, #1615]	; 0x64f
 800c716:	4639      	mov	r1, r7
 800c718:	4620      	mov	r0, r4
 800c71a:	ab05      	add	r3, sp, #20
 800c71c:	3701      	adds	r7, #1
 800c71e:	9203      	str	r2, [sp, #12]
 800c720:	f7ff ff52 	bl	800c5c8 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)>
 800c724:	454f      	cmp	r7, r9
 800c726:	9a03      	ldr	r2, [sp, #12]
 800c728:	d1f5      	bne.n	800c716 <ArtNetNode::SendPollRelply(bool)+0x72>
 800c72a:	9b05      	ldr	r3, [sp, #20]
 800c72c:	4652      	mov	r2, sl
 800c72e:	f884 3629 	strb.w	r3, [r4, #1577]	; 0x629
 800c732:	f604 0389 	addw	r3, r4, #2185	; 0x889
 800c736:	9301      	str	r3, [sp, #4]
 800c738:	f8d4 38dc 	ldr.w	r3, [r4, #2268]	; 0x8dc
 800c73c:	2140      	movs	r1, #64	; 0x40
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	f504 60bd 	add.w	r0, r4, #1512	; 0x5e8
 800c744:	f894 38ec 	ldrb.w	r3, [r4, #2284]	; 0x8ec
 800c748:	f7fd f862 	bl	8009810 <snprintf>
 800c74c:	f641 1336 	movw	r3, #6454	; 0x1936
 800c750:	22ef      	movs	r2, #239	; 0xef
 800c752:	9300      	str	r3, [sp, #0]
 800c754:	7820      	ldrb	r0, [r4, #0]
 800c756:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c758:	f204 517c 	addw	r1, r4, #1404	; 0x57c
 800c75c:	3501      	adds	r5, #1
 800c75e:	f006 fe73 	bl	8013448 <udp_send>
 800c762:	2d09      	cmp	r5, #9
 800c764:	f106 0604 	add.w	r6, r6, #4
 800c768:	d1be      	bne.n	800c6e8 <ArtNetNode::SendPollRelply(bool)+0x44>
 800c76a:	2300      	movs	r3, #0
 800c76c:	f884 38f3 	strb.w	r3, [r4, #2291]	; 0x8f3
 800c770:	b007      	add	sp, #28
 800c772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c776:	bf00      	nop
 800c778:	08019fe4 	stmdaeq	r1, {r2, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0800c77c <ArtNetNode::HandlePoll()>:
 800c77c:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
 800c780:	b410      	push	{r4}
 800c782:	f3c2 0340 	ubfx	r3, r2, #1, #1
 800c786:	f880 38ee 	strb.w	r3, [r0, #2286]	; 0x8ee
 800c78a:	f012 0304 	ands.w	r3, r2, #4
 800c78e:	d02e      	beq.n	800c7ee <ArtNetNode::HandlePoll()+0x72>
 800c790:	2301      	movs	r3, #1
 800c792:	f8d0 18e4 	ldr.w	r1, [r0, #2276]	; 0x8e4
 800c796:	f890 48f0 	ldrb.w	r4, [r0, #2288]	; 0x8f0
 800c79a:	f880 38ef 	strb.w	r3, [r0, #2287]	; 0x8ef
 800c79e:	b979      	cbnz	r1, 800c7c0 <ArtNetNode::HandlePoll()+0x44>
 800c7a0:	f8d0 3574 	ldr.w	r3, [r0, #1396]	; 0x574
 800c7a4:	f8c0 38e4 	str.w	r3, [r0, #2276]	; 0x8e4
 800c7a8:	b19c      	cbz	r4, 800c7d2 <ArtNetNode::HandlePoll()+0x56>
 800c7aa:	f890 38f8 	ldrb.w	r3, [r0, #2296]	; 0x8f8
 800c7ae:	f890 20b5 	ldrb.w	r2, [r0, #181]	; 0xb5
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	bf28      	it	cs
 800c7b6:	4613      	movcs	r3, r2
 800c7b8:	f880 38f8 	strb.w	r3, [r0, #2296]	; 0x8f8
 800c7bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c7be:	e010      	b.n	800c7e2 <ArtNetNode::HandlePoll()+0x66>
 800c7c0:	2c00      	cmp	r4, #0
 800c7c2:	d1f2      	bne.n	800c7aa <ArtNetNode::HandlePoll()+0x2e>
 800c7c4:	f8d0 4574 	ldr.w	r4, [r0, #1396]	; 0x574
 800c7c8:	42a1      	cmp	r1, r4
 800c7ca:	d002      	beq.n	800c7d2 <ArtNetNode::HandlePoll()+0x56>
 800c7cc:	f880 38f0 	strb.w	r3, [r0, #2288]	; 0x8f0
 800c7d0:	e7eb      	b.n	800c7aa <ArtNetNode::HandlePoll()+0x2e>
 800c7d2:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800c7d6:	f880 38f8 	strb.w	r3, [r0, #2296]	; 0x8f8
 800c7da:	0713      	lsls	r3, r2, #28
 800c7dc:	d5ee      	bpl.n	800c7bc <ArtNetNode::HandlePoll()+0x40>
 800c7de:	f8d0 3574 	ldr.w	r3, [r0, #1396]	; 0x574
 800c7e2:	2101      	movs	r1, #1
 800c7e4:	bc10      	pop	{r4}
 800c7e6:	f8c0 38e0 	str.w	r3, [r0, #2272]	; 0x8e0
 800c7ea:	f7ff bf5b 	b.w	800c6a4 <ArtNetNode::SendPollRelply(bool)>
 800c7ee:	f880 38ef 	strb.w	r3, [r0, #2287]	; 0x8ef
 800c7f2:	e7f6      	b.n	800c7e2 <ArtNetNode::HandlePoll()+0x66>

0800c7f4 <ArtNetNode::SetRmd(unsigned int, bool)>:
 800c7f4:	2328      	movs	r3, #40	; 0x28
 800c7f6:	fb03 0301 	mla	r3, r3, r1, r0
 800c7fa:	b570      	push	{r4, r5, r6, lr}
 800c7fc:	4604      	mov	r4, r0
 800c7fe:	f893 0918 	ldrb.w	r0, [r3, #2328]	; 0x918
 800c802:	460e      	mov	r6, r1
 800c804:	4290      	cmp	r0, r2
 800c806:	4615      	mov	r5, r2
 800c808:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
 800c80c:	d011      	beq.n	800c832 <ArtNetNode::SetRmd(unsigned int, bool)+0x3e>
 800c80e:	f894 38ed 	ldrb.w	r3, [r4, #2285]	; 0x8ed
 800c812:	2b02      	cmp	r3, #2
 800c814:	d10d      	bne.n	800c832 <ArtNetNode::SetRmd(unsigned int, bool)+0x3e>
 800c816:	69e0      	ldr	r0, [r4, #28]
 800c818:	b110      	cbz	r0, 800c820 <ArtNetNode::SetRmd(unsigned int, bool)+0x2c>
 800c81a:	6803      	ldr	r3, [r0, #0]
 800c81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81e:	4798      	blx	r3
 800c820:	6a20      	ldr	r0, [r4, #32]
 800c822:	b130      	cbz	r0, 800c832 <ArtNetNode::SetRmd(unsigned int, bool)+0x3e>
 800c824:	6803      	ldr	r3, [r0, #0]
 800c826:	462a      	mov	r2, r5
 800c828:	4631      	mov	r1, r6
 800c82a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c830:	4718      	bx	r3
 800c832:	bd70      	pop	{r4, r5, r6, pc}

0800c834 <ArtNetNode::SendTod(unsigned int)>:
 800c834:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800c838:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c83c:	2500      	movs	r5, #0
 800c83e:	f880 30b1 	strb.w	r3, [r0, #177]	; 0xb1
 800c842:	2301      	movs	r3, #1
 800c844:	4688      	mov	r8, r1
 800c846:	4604      	mov	r4, r0
 800c848:	f880 30b4 	strb.w	r3, [r0, #180]	; 0xb4
 800c84c:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
 800c850:	68c0      	ldr	r0, [r0, #12]
 800c852:	088f      	lsrs	r7, r1, #2
 800c854:	6803      	ldr	r3, [r0, #0]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	4798      	blx	r3
 800c85a:	f008 0303 	and.w	r3, r8, #3
 800c85e:	3301      	adds	r3, #1
 800c860:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
 800c864:	1c7b      	adds	r3, r7, #1
 800c866:	b2ff      	uxtb	r7, r7
 800c868:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 800c86c:	f884 50b7 	strb.w	r5, [r4, #183]	; 0xb7
 800c870:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
 800c874:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
 800c878:	f884 50ba 	strb.w	r5, [r4, #186]	; 0xba
 800c87c:	f884 50bb 	strb.w	r5, [r4, #187]	; 0xbb
 800c880:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 800c884:	4427      	add	r7, r4
 800c886:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800c88a:	f884 50be 	strb.w	r5, [r4, #190]	; 0xbe
 800c88e:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
 800c892:	2328      	movs	r3, #40	; 0x28
 800c894:	fb03 4308 	mla	r3, r3, r8, r4
 800c898:	f893 38fe 	ldrb.w	r3, [r3, #2302]	; 0x8fe
 800c89c:	b2c6      	uxtb	r6, r0
 800c89e:	68e0      	ldr	r0, [r4, #12]
 800c8a0:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
 800c8a4:	f884 50c2 	strb.w	r5, [r4, #194]	; 0xc2
 800c8a8:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
 800c8ac:	f884 60c1 	strb.w	r6, [r4, #193]	; 0xc1
 800c8b0:	f884 60c3 	strb.w	r6, [r4, #195]	; 0xc3
 800c8b4:	6803      	ldr	r3, [r0, #0]
 800c8b6:	4641      	mov	r1, r8
 800c8b8:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
 800c8bc:	691b      	ldr	r3, [r3, #16]
 800c8be:	4798      	blx	r3
 800c8c0:	2306      	movs	r3, #6
 800c8c2:	fb03 f206 	mul.w	r2, r3, r6
 800c8c6:	f641 1336 	movw	r3, #6454	; 0x1936
 800c8ca:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
 800c8ce:	9300      	str	r3, [sp, #0]
 800c8d0:	4629      	mov	r1, r5
 800c8d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c8d4:	7820      	ldrb	r0, [r4, #0]
 800c8d6:	321c      	adds	r2, #28
 800c8d8:	f006 fdb6 	bl	8013448 <udp_send>
 800c8dc:	b002      	add	sp, #8
 800c8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c8e2 <ArtNetNode::HandleTodControl()>:
 800c8e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8e4:	4604      	mov	r4, r0
 800c8e6:	4606      	mov	r6, r0
 800c8e8:	2500      	movs	r5, #0
 800c8ea:	f890 30bd 	ldrb.w	r3, [r0, #189]	; 0xbd
 800c8ee:	f890 70bf 	ldrb.w	r7, [r0, #191]	; 0xbf
 800c8f2:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800c8f6:	f896 3918 	ldrb.w	r3, [r6, #2328]	; 0x918
 800c8fa:	b34b      	cbz	r3, 800c950 <ArtNetNode::HandleTodControl()+0x6e>
 800c8fc:	f8b6 38fc 	ldrh.w	r3, [r6, #2300]	; 0x8fc
 800c900:	42bb      	cmp	r3, r7
 800c902:	d125      	bne.n	800c950 <ArtNetNode::HandleTodControl()+0x6e>
 800c904:	f896 3900 	ldrb.w	r3, [r6, #2304]	; 0x900
 800c908:	b313      	cbz	r3, 800c950 <ArtNetNode::HandleTodControl()+0x6e>
 800c90a:	f896 3921 	ldrb.w	r3, [r6, #2337]	; 0x921
 800c90e:	b13b      	cbz	r3, 800c920 <ArtNetNode::HandleTodControl()+0x3e>
 800c910:	f894 3888 	ldrb.w	r3, [r4, #2184]	; 0x888
 800c914:	b923      	cbnz	r3, 800c920 <ArtNetNode::HandleTodControl()+0x3e>
 800c916:	6860      	ldr	r0, [r4, #4]
 800c918:	4629      	mov	r1, r5
 800c91a:	6803      	ldr	r3, [r0, #0]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	4798      	blx	r3
 800c920:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
 800c924:	2b01      	cmp	r3, #1
 800c926:	d104      	bne.n	800c932 <ArtNetNode::HandleTodControl()+0x50>
 800c928:	68e0      	ldr	r0, [r4, #12]
 800c92a:	4629      	mov	r1, r5
 800c92c:	6803      	ldr	r3, [r0, #0]
 800c92e:	689b      	ldr	r3, [r3, #8]
 800c930:	4798      	blx	r3
 800c932:	4629      	mov	r1, r5
 800c934:	4620      	mov	r0, r4
 800c936:	f7ff ff7d 	bl	800c834 <ArtNetNode::SendTod(unsigned int)>
 800c93a:	f896 3921 	ldrb.w	r3, [r6, #2337]	; 0x921
 800c93e:	b13b      	cbz	r3, 800c950 <ArtNetNode::HandleTodControl()+0x6e>
 800c940:	f894 3888 	ldrb.w	r3, [r4, #2184]	; 0x888
 800c944:	b923      	cbnz	r3, 800c950 <ArtNetNode::HandleTodControl()+0x6e>
 800c946:	6860      	ldr	r0, [r4, #4]
 800c948:	4629      	mov	r1, r5
 800c94a:	6803      	ldr	r3, [r0, #0]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	4798      	blx	r3
 800c950:	3501      	adds	r5, #1
 800c952:	2d20      	cmp	r5, #32
 800c954:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c958:	d1cd      	bne.n	800c8f6 <ArtNetNode::HandleTodControl()+0x14>
 800c95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c95c <ArtNetNode::HandleTodRequest()>:
 800c95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c95e:	4604      	mov	r4, r0
 800c960:	4605      	mov	r5, r0
 800c962:	2600      	movs	r6, #0
 800c964:	f890 30bd 	ldrb.w	r3, [r0, #189]	; 0xbd
 800c968:	f890 70c0 	ldrb.w	r7, [r0, #192]	; 0xc0
 800c96c:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800c970:	f895 3918 	ldrb.w	r3, [r5, #2328]	; 0x918
 800c974:	b153      	cbz	r3, 800c98c <ArtNetNode::HandleTodRequest()+0x30>
 800c976:	f8b5 38fc 	ldrh.w	r3, [r5, #2300]	; 0x8fc
 800c97a:	42bb      	cmp	r3, r7
 800c97c:	d106      	bne.n	800c98c <ArtNetNode::HandleTodRequest()+0x30>
 800c97e:	f895 3900 	ldrb.w	r3, [r5, #2304]	; 0x900
 800c982:	b11b      	cbz	r3, 800c98c <ArtNetNode::HandleTodRequest()+0x30>
 800c984:	4631      	mov	r1, r6
 800c986:	4620      	mov	r0, r4
 800c988:	f7ff ff54 	bl	800c834 <ArtNetNode::SendTod(unsigned int)>
 800c98c:	3601      	adds	r6, #1
 800c98e:	2e20      	cmp	r6, #32
 800c990:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800c994:	d1ec      	bne.n	800c970 <ArtNetNode::HandleTodRequest()+0x14>
 800c996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c998 <ArtNetNode::HandleRdm()>:
 800c998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c99c:	4604      	mov	r4, r0
 800c99e:	4605      	mov	r5, r0
 800c9a0:	2600      	movs	r6, #0
 800c9a2:	f04f 0a01 	mov.w	sl, #1
 800c9a6:	f641 1b36 	movw	fp, #6454	; 0x1936
 800c9aa:	f890 30bd 	ldrb.w	r3, [r0, #189]	; 0xbd
 800c9ae:	f890 70bf 	ldrb.w	r7, [r0, #191]	; 0xbf
 800c9b2:	f100 08a8 	add.w	r8, r0, #168	; 0xa8
 800c9b6:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800c9ba:	f100 09c0 	add.w	r9, r0, #192	; 0xc0
 800c9be:	f895 3918 	ldrb.w	r3, [r5, #2328]	; 0x918
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d049      	beq.n	800ca5a <ArtNetNode::HandleRdm()+0xc2>
 800c9c6:	f8b5 38fc 	ldrh.w	r3, [r5, #2300]	; 0x8fc
 800c9ca:	42bb      	cmp	r3, r7
 800c9cc:	d145      	bne.n	800ca5a <ArtNetNode::HandleRdm()+0xc2>
 800c9ce:	f895 3900 	ldrb.w	r3, [r5, #2304]	; 0x900
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d041      	beq.n	800ca5a <ArtNetNode::HandleRdm()+0xc2>
 800c9d6:	f894 3888 	ldrb.w	r3, [r4, #2184]	; 0x888
 800c9da:	b9c3      	cbnz	r3, 800ca0e <ArtNetNode::HandleRdm()+0x76>
 800c9dc:	f8d5 391c 	ldr.w	r3, [r5, #2332]	; 0x91c
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d10c      	bne.n	800c9fe <ArtNetNode::HandleRdm()+0x66>
 800c9e4:	69a0      	ldr	r0, [r4, #24]
 800c9e6:	b150      	cbz	r0, 800c9fe <ArtNetNode::HandleRdm()+0x66>
 800c9e8:	6803      	ldr	r3, [r0, #0]
 800c9ea:	4631      	mov	r1, r6
 800c9ec:	691b      	ldr	r3, [r3, #16]
 800c9ee:	4798      	blx	r3
 800c9f0:	f010 0f89 	tst.w	r0, #137	; 0x89
 800c9f4:	bf14      	ite	ne
 800c9f6:	2301      	movne	r3, #1
 800c9f8:	2300      	moveq	r3, #0
 800c9fa:	f885 3921 	strb.w	r3, [r5, #2337]	; 0x921
 800c9fe:	f895 3921 	ldrb.w	r3, [r5, #2337]	; 0x921
 800ca02:	b123      	cbz	r3, 800ca0e <ArtNetNode::HandleRdm()+0x76>
 800ca04:	6860      	ldr	r0, [r4, #4]
 800ca06:	4631      	mov	r1, r6
 800ca08:	6803      	ldr	r3, [r0, #0]
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	4798      	blx	r3
 800ca0e:	68e0      	ldr	r0, [r4, #12]
 800ca10:	464a      	mov	r2, r9
 800ca12:	6803      	ldr	r3, [r0, #0]
 800ca14:	4631      	mov	r1, r6
 800ca16:	695b      	ldr	r3, [r3, #20]
 800ca18:	4798      	blx	r3
 800ca1a:	b198      	cbz	r0, 800ca44 <ArtNetNode::HandleRdm()+0xac>
 800ca1c:	f884 a0b4 	strb.w	sl, [r4, #180]	; 0xb4
 800ca20:	7881      	ldrb	r1, [r0, #2]
 800ca22:	1c43      	adds	r3, r0, #1
 800ca24:	460a      	mov	r2, r1
 800ca26:	3102      	adds	r1, #2
 800ca28:	f104 0cbf 	add.w	ip, r4, #191	; 0xbf
 800ca2c:	4408      	add	r0, r1
 800ca2e:	4298      	cmp	r0, r3
 800ca30:	d11b      	bne.n	800ca6a <ArtNetNode::HandleRdm()+0xd2>
 800ca32:	4641      	mov	r1, r8
 800ca34:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
 800ca38:	7820      	ldrb	r0, [r4, #0]
 800ca3a:	f8cd b000 	str.w	fp, [sp]
 800ca3e:	3219      	adds	r2, #25
 800ca40:	f006 fd02 	bl	8013448 <udp_send>
 800ca44:	f895 3921 	ldrb.w	r3, [r5, #2337]	; 0x921
 800ca48:	b13b      	cbz	r3, 800ca5a <ArtNetNode::HandleRdm()+0xc2>
 800ca4a:	f894 3888 	ldrb.w	r3, [r4, #2184]	; 0x888
 800ca4e:	b923      	cbnz	r3, 800ca5a <ArtNetNode::HandleRdm()+0xc2>
 800ca50:	6860      	ldr	r0, [r4, #4]
 800ca52:	4631      	mov	r1, r6
 800ca54:	6803      	ldr	r3, [r0, #0]
 800ca56:	689b      	ldr	r3, [r3, #8]
 800ca58:	4798      	blx	r3
 800ca5a:	3601      	adds	r6, #1
 800ca5c:	2e20      	cmp	r6, #32
 800ca5e:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800ca62:	d1ac      	bne.n	800c9be <ArtNetNode::HandleRdm()+0x26>
 800ca64:	b003      	add	sp, #12
 800ca66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca6a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800ca6e:	f80c 1f01 	strb.w	r1, [ip, #1]!
 800ca72:	e7dc      	b.n	800ca2e <ArtNetNode::HandleRdm()+0x96>

0800ca74 <ArtNetNode::SetRdmUID(unsigned char const*, bool)>:
 800ca74:	b530      	push	{r4, r5, lr}
 800ca76:	f100 039f 	add.w	r3, r0, #159	; 0x9f
 800ca7a:	1d8c      	adds	r4, r1, #6
 800ca7c:	42a1      	cmp	r1, r4
 800ca7e:	d107      	bne.n	800ca90 <ArtNetNode::SetRdmUID(unsigned char const*, bool)+0x1c>
 800ca80:	f890 309f 	ldrb.w	r3, [r0, #159]	; 0x9f
 800ca84:	b14a      	cbz	r2, 800ca9a <ArtNetNode::SetRdmUID(unsigned char const*, bool)+0x26>
 800ca86:	f043 0310 	orr.w	r3, r3, #16
 800ca8a:	f880 309f 	strb.w	r3, [r0, #159]	; 0x9f
 800ca8e:	bd30      	pop	{r4, r5, pc}
 800ca90:	f811 5b01 	ldrb.w	r5, [r1], #1
 800ca94:	f803 5f01 	strb.w	r5, [r3, #1]!
 800ca98:	e7f0      	b.n	800ca7c <ArtNetNode::SetRdmUID(unsigned char const*, bool)+0x8>
 800ca9a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800ca9e:	e7f4      	b.n	800ca8a <ArtNetNode::SetRdmUID(unsigned char const*, bool)+0x16>

0800caa0 <ArtNetNode::HandleSync()>:
 800caa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caa4:	2500      	movs	r5, #0
 800caa6:	2301      	movs	r3, #1
 800caa8:	4604      	mov	r4, r0
 800caaa:	4606      	mov	r6, r0
 800caac:	46a9      	mov	r9, r5
 800caae:	f880 38f1 	strb.w	r3, [r0, #2289]	; 0x8f1
 800cab2:	4b1d      	ldr	r3, [pc, #116]	; (800cb28 <ArtNetNode::HandleSync()+0x88>)
 800cab4:	4f1d      	ldr	r7, [pc, #116]	; (800cb2c <ArtNetNode::HandleSync()+0x8c>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800cb30 <ArtNetNode::HandleSync()+0x90>
 800cabc:	f8c0 38e8 	str.w	r3, [r0, #2280]	; 0x8e8
 800cac0:	f8d6 391c 	ldr.w	r3, [r6, #2332]	; 0x91c
 800cac4:	bb3b      	cbnz	r3, 800cb16 <ArtNetNode::HandleSync()+0x76>
 800cac6:	f896 3900 	ldrb.w	r3, [r6, #2304]	; 0x900
 800caca:	b323      	cbz	r3, 800cb16 <ArtNetNode::HandleSync()+0x76>
 800cacc:	f8d8 3000 	ldr.w	r3, [r8]
 800cad0:	6860      	ldr	r0, [r4, #4]
 800cad2:	07da      	lsls	r2, r3, #31
 800cad4:	bf5c      	itt	pl
 800cad6:	2301      	movpl	r3, #1
 800cad8:	f8c8 3000 	strpl.w	r3, [r8]
 800cadc:	6803      	ldr	r3, [r0, #0]
 800cade:	4629      	mov	r1, r5
 800cae0:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800cae4:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800cae8:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800caec:	47d0      	blx	sl
 800caee:	f896 3921 	ldrb.w	r3, [r6, #2337]	; 0x921
 800caf2:	b93b      	cbnz	r3, 800cb04 <ArtNetNode::HandleSync()+0x64>
 800caf4:	6860      	ldr	r0, [r4, #4]
 800caf6:	4629      	mov	r1, r5
 800caf8:	6803      	ldr	r3, [r0, #0]
 800cafa:	689b      	ldr	r3, [r3, #8]
 800cafc:	4798      	blx	r3
 800cafe:	2301      	movs	r3, #1
 800cb00:	f886 3921 	strb.w	r3, [r6, #2337]	; 0x921
 800cb04:	f8d8 3000 	ldr.w	r3, [r8]
 800cb08:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800cb0c:	07db      	lsls	r3, r3, #31
 800cb0e:	bf5c      	itt	pl
 800cb10:	2301      	movpl	r3, #1
 800cb12:	f8c8 3000 	strpl.w	r3, [r8]
 800cb16:	3501      	adds	r5, #1
 800cb18:	2d20      	cmp	r5, #32
 800cb1a:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800cb1e:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800cb22:	d1cd      	bne.n	800cac0 <ArtNetNode::HandleSync()+0x20>
 800cb24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb28:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4
 800cb2c:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
 800cb30:	200006b8 			; <UNDEFINED> instruction: 0x200006b8

0800cb34 <ArtNetNode::HandleTimeCode()>:
 800cb34:	4601      	mov	r1, r0
 800cb36:	6880      	ldr	r0, [r0, #8]
 800cb38:	31b6      	adds	r1, #182	; 0xb6
 800cb3a:	6803      	ldr	r3, [r0, #0]
 800cb3c:	691b      	ldr	r3, [r3, #16]
 800cb3e:	4718      	bx	r3

0800cb40 <ArtNetNode::HandleTimeSync()>:
 800cb40:	b500      	push	{lr}
 800cb42:	f890 30b7 	ldrb.w	r3, [r0, #183]	; 0xb7
 800cb46:	b08b      	sub	sp, #44	; 0x2c
 800cb48:	9301      	str	r3, [sp, #4]
 800cb4a:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 800cb4e:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
 800cb52:	9302      	str	r3, [sp, #8]
 800cb54:	f890 30b9 	ldrb.w	r3, [r0, #185]	; 0xb9
 800cb58:	a901      	add	r1, sp, #4
 800cb5a:	9303      	str	r3, [sp, #12]
 800cb5c:	f890 30ba 	ldrb.w	r3, [r0, #186]	; 0xba
 800cb60:	9304      	str	r3, [sp, #16]
 800cb62:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
 800cb66:	9305      	str	r3, [sp, #20]
 800cb68:	f890 30bd 	ldrb.w	r3, [r0, #189]	; 0xbd
 800cb6c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cb70:	9306      	str	r3, [sp, #24]
 800cb72:	4b03      	ldr	r3, [pc, #12]	; (800cb80 <ArtNetNode::HandleTimeSync()+0x40>)
 800cb74:	6818      	ldr	r0, [r3, #0]
 800cb76:	f009 fd29 	bl	80165cc <Hardware::SetTime(tm const*)>
 800cb7a:	b00b      	add	sp, #44	; 0x2c
 800cb7c:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb80:	2001d99c 	mulcs	r1, ip, r9

0800cb84 <ArtNetNode::Print()>:
 800cb84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb88:	4604      	mov	r4, r0
 800cb8a:	b087      	sub	sp, #28
 800cb8c:	2208      	movs	r2, #8
 800cb8e:	2104      	movs	r1, #4
 800cb90:	4839      	ldr	r0, [pc, #228]	; (800cc78 <ArtNetNode::Print()+0xf4>)
 800cb92:	f7fc fe15 	bl	80097c0 <printf>
 800cb96:	4b39      	ldr	r3, [pc, #228]	; (800cc7c <ArtNetNode::Print()+0xf8>)
 800cb98:	4839      	ldr	r0, [pc, #228]	; (800cc80 <ArtNetNode::Print()+0xfc>)
 800cb9a:	7819      	ldrb	r1, [r3, #0]
 800cb9c:	785a      	ldrb	r2, [r3, #1]
 800cb9e:	f7fc fe0f 	bl	80097c0 <printf>
 800cba2:	f104 014a 	add.w	r1, r4, #74	; 0x4a
 800cba6:	4837      	ldr	r0, [pc, #220]	; (800cc84 <ArtNetNode::Print()+0x100>)
 800cba8:	f7fc fe0a 	bl	80097c0 <printf>
 800cbac:	4836      	ldr	r0, [pc, #216]	; (800cc88 <ArtNetNode::Print()+0x104>)
 800cbae:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 800cbb2:	f7fc fe05 	bl	80097c0 <printf>
 800cbb6:	f894 38f6 	ldrb.w	r3, [r4, #2294]	; 0x8f6
 800cbba:	b36b      	cbz	r3, 800cc18 <ArtNetNode::Print()+0x94>
 800cbbc:	4833      	ldr	r0, [pc, #204]	; (800cc8c <ArtNetNode::Print()+0x108>)
 800cbbe:	f7fc fdff 	bl	80097c0 <printf>
 800cbc2:	4626      	mov	r6, r4
 800cbc4:	2500      	movs	r5, #0
 800cbc6:	4f32      	ldr	r7, [pc, #200]	; (800cc90 <ArtNetNode::Print()+0x10c>)
 800cbc8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800cc94 <ArtNetNode::Print()+0x110>
 800cbcc:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800cc98 <ArtNetNode::Print()+0x114>
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	4629      	mov	r1, r5
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f10d 0216 	add.w	r2, sp, #22
 800cbda:	f7fe fe3b 	bl	800b854 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800cbde:	b1b0      	cbz	r0, 800cc0e <ArtNetNode::Print()+0x8a>
 800cbe0:	f8d6 3914 	ldr.w	r3, [r6, #2324]	; 0x914
 800cbe4:	4629      	mov	r1, r5
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	bf0c      	ite	eq
 800cbea:	463b      	moveq	r3, r7
 800cbec:	4643      	movne	r3, r8
 800cbee:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800cbf2:	4648      	mov	r0, r9
 800cbf4:	f7fc fde4 	bl	80097c0 <printf>
 800cbf8:	f8d6 191c 	ldr.w	r1, [r6, #2332]	; 0x91c
 800cbfc:	4a27      	ldr	r2, [pc, #156]	; (800cc9c <ArtNetNode::Print()+0x118>)
 800cbfe:	4b28      	ldr	r3, [pc, #160]	; (800cca0 <ArtNetNode::Print()+0x11c>)
 800cc00:	4828      	ldr	r0, [pc, #160]	; (800cca4 <ArtNetNode::Print()+0x120>)
 800cc02:	2900      	cmp	r1, #0
 800cc04:	bf0c      	ite	eq
 800cc06:	4611      	moveq	r1, r2
 800cc08:	4619      	movne	r1, r3
 800cc0a:	f7fc fdd9 	bl	80097c0 <printf>
 800cc0e:	3501      	adds	r5, #1
 800cc10:	2d20      	cmp	r5, #32
 800cc12:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800cc16:	d1db      	bne.n	800cbd0 <ArtNetNode::Print()+0x4c>
 800cc18:	f894 38f7 	ldrb.w	r3, [r4, #2295]	; 0x8f7
 800cc1c:	b34b      	cbz	r3, 800cc72 <ArtNetNode::Print()+0xee>
 800cc1e:	4822      	ldr	r0, [pc, #136]	; (800cca8 <ArtNetNode::Print()+0x124>)
 800cc20:	f7fc fdce 	bl	80097c0 <printf>
 800cc24:	2500      	movs	r5, #0
 800cc26:	4e21      	ldr	r6, [pc, #132]	; (800ccac <ArtNetNode::Print()+0x128>)
 800cc28:	4f21      	ldr	r7, [pc, #132]	; (800ccb0 <ArtNetNode::Print()+0x12c>)
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	4629      	mov	r1, r5
 800cc2e:	4620      	mov	r0, r4
 800cc30:	f10d 0216 	add.w	r2, sp, #22
 800cc34:	f7fe fe0e 	bl	800b854 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800cc38:	b1c0      	cbz	r0, 800cc6c <ArtNetNode::Print()+0xe8>
 800cc3a:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 800cc3e:	f8d3 3e04 	ldr.w	r3, [r3, #3588]	; 0xe04
 800cc42:	b923      	cbnz	r3, 800cc4e <ArtNetNode::Print()+0xca>
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	69da      	ldr	r2, [r3, #28]
 800cc48:	695b      	ldr	r3, [r3, #20]
 800cc4a:	ea63 0302 	orn	r3, r3, r2
 800cc4e:	0e1a      	lsrs	r2, r3, #24
 800cc50:	9202      	str	r2, [sp, #8]
 800cc52:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800cc56:	9201      	str	r2, [sp, #4]
 800cc58:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800cc5c:	9200      	str	r2, [sp, #0]
 800cc5e:	4629      	mov	r1, r5
 800cc60:	4630      	mov	r0, r6
 800cc62:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	f7fc fdaa 	bl	80097c0 <printf>
 800cc6c:	3501      	adds	r5, #1
 800cc6e:	2d20      	cmp	r5, #32
 800cc70:	d1db      	bne.n	800cc2a <ArtNetNode::Print()+0xa6>
 800cc72:	b007      	add	sp, #28
 800cc74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc78:	0801a014 	stmdaeq	r1, {r2, r4, sp, pc}
 800cc7c:	0801a22c 	stmdaeq	r1, {r2, r3, r5, r9, sp, pc}
 800cc80:	0801a022 	stmdaeq	r1, {r1, r5, sp, pc}
 800cc84:	0801a037 	stmdaeq	r1, {r0, r1, r2, r4, r5, sp, pc}
 800cc88:	0801a049 	stmdaeq	r1, {r0, r3, r6, sp, pc}
 800cc8c:	0801a05b 	stmdaeq	r1, {r0, r1, r3, r4, r6, sp, pc}
 800cc90:	08019fff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 800cc94:	0801a003 	stmdaeq	r1, {r0, r1, sp, pc}
 800cc98:	0801a064 	stmdaeq	r1, {r2, r5, r6, sp, pc}
 800cc9c:	0801a007 	stmdaeq	r1, {r0, r1, r2, sp, pc}
 800cca0:	0801a00f 	stmdaeq	r1, {r0, r1, r2, r3, sp, pc}
 800cca4:	0801a078 	stmdaeq	r1, {r3, r4, r5, r6, sp, pc}
 800cca8:	0801a07f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, sp, pc}
 800ccac:	0801a087 	stmdaeq	r1, {r0, r1, r2, r7, sp, pc}
 800ccb0:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800ccb4 <memcmp>:
 800ccb4:	4402      	add	r2, r0
 800ccb6:	4290      	cmp	r0, r2
 800ccb8:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800ccbc:	d106      	bne.n	800cccc <memcmp+0x18>
 800ccbe:	2000      	movs	r0, #0
 800ccc0:	4770      	bx	lr
 800ccc2:	3001      	adds	r0, #1
 800ccc4:	4290      	cmp	r0, r2
 800ccc6:	d102      	bne.n	800ccce <memcmp+0x1a>
 800ccc8:	2000      	movs	r0, #0
 800ccca:	e006      	b.n	800ccda <memcmp+0x26>
 800cccc:	b510      	push	{r4, lr}
 800ccce:	7803      	ldrb	r3, [r0, #0]
 800ccd0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ccd4:	42a3      	cmp	r3, r4
 800ccd6:	d0f4      	beq.n	800ccc2 <memcmp+0xe>
 800ccd8:	1b18      	subs	r0, r3, r4
 800ccda:	bd10      	pop	{r4, pc}

0800ccdc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800ccdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ccde:	88c6      	ldrh	r6, [r0, #6]
 800cce0:	8885      	ldrh	r5, [r0, #4]
 800cce2:	42ae      	cmp	r6, r5
 800cce4:	d216      	bcs.n	800cd14 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800cce6:	4604      	mov	r4, r0
 800cce8:	6800      	ldr	r0, [r0, #0]
 800ccea:	1bad      	subs	r5, r5, r6
 800ccec:	4430      	add	r0, r6
 800ccee:	7a26      	ldrb	r6, [r4, #8]
 800ccf0:	b923      	cbnz	r3, 800ccfc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800ccf2:	b926      	cbnz	r6, 800ccfe <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800ccf4:	9200      	str	r2, [sp, #0]
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	4a09      	ldr	r2, [pc, #36]	; (800cd20 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800ccfa:	e003      	b.n	800cd04 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800ccfc:	b166      	cbz	r6, 800cd18 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800ccfe:	460b      	mov	r3, r1
 800cd00:	9200      	str	r2, [sp, #0]
 800cd02:	4a08      	ldr	r2, [pc, #32]	; (800cd24 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800cd04:	4629      	mov	r1, r5
 800cd06:	f7fc fd83 	bl	8009810 <snprintf>
 800cd0a:	4285      	cmp	r5, r0
 800cd0c:	bfa2      	ittt	ge
 800cd0e:	88e3      	ldrhge	r3, [r4, #6]
 800cd10:	181b      	addge	r3, r3, r0
 800cd12:	80e3      	strhge	r3, [r4, #6]
 800cd14:	b002      	add	sp, #8
 800cd16:	bd70      	pop	{r4, r5, r6, pc}
 800cd18:	9200      	str	r2, [sp, #0]
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	4a02      	ldr	r2, [pc, #8]	; (800cd28 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800cd1e:	e7f1      	b.n	800cd04 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800cd20:	08019181 	stmdaeq	r1, {r0, r7, r8, ip, pc}
 800cd24:	08019178 	stmdaeq	r1, {r3, r4, r5, r6, r8, ip, pc}
 800cd28:	08019182 	stmdaeq	r1, {r1, r7, r8, ip, pc}

0800cd2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800cd2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd2e:	88c6      	ldrh	r6, [r0, #6]
 800cd30:	8885      	ldrh	r5, [r0, #4]
 800cd32:	42ae      	cmp	r6, r5
 800cd34:	d216      	bcs.n	800cd64 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800cd36:	4604      	mov	r4, r0
 800cd38:	6800      	ldr	r0, [r0, #0]
 800cd3a:	1bad      	subs	r5, r5, r6
 800cd3c:	4430      	add	r0, r6
 800cd3e:	7a26      	ldrb	r6, [r4, #8]
 800cd40:	b923      	cbnz	r3, 800cd4c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800cd42:	b926      	cbnz	r6, 800cd4e <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800cd44:	9200      	str	r2, [sp, #0]
 800cd46:	460b      	mov	r3, r1
 800cd48:	4a09      	ldr	r2, [pc, #36]	; (800cd70 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800cd4a:	e003      	b.n	800cd54 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800cd4c:	b166      	cbz	r6, 800cd68 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800cd4e:	460b      	mov	r3, r1
 800cd50:	9200      	str	r2, [sp, #0]
 800cd52:	4a08      	ldr	r2, [pc, #32]	; (800cd74 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800cd54:	4629      	mov	r1, r5
 800cd56:	f7fc fd5b 	bl	8009810 <snprintf>
 800cd5a:	4285      	cmp	r5, r0
 800cd5c:	bfa2      	ittt	ge
 800cd5e:	88e3      	ldrhge	r3, [r4, #6]
 800cd60:	181b      	addge	r3, r3, r0
 800cd62:	80e3      	strhge	r3, [r4, #6]
 800cd64:	b002      	add	sp, #8
 800cd66:	bd70      	pop	{r4, r5, r6, pc}
 800cd68:	9200      	str	r2, [sp, #0]
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	4a02      	ldr	r2, [pc, #8]	; (800cd78 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800cd6e:	e7f1      	b.n	800cd54 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800cd70:	08019194 	stmdaeq	r1, {r2, r4, r7, r8, ip, pc}
 800cd74:	08019189 	stmdaeq	r1, {r0, r3, r7, r8, ip, pc}
 800cd78:	08019195 	stmdaeq	r1, {r0, r2, r4, r7, r8, ip, pc}

0800cd7c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800cd7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd7e:	460b      	mov	r3, r1
 800cd80:	8885      	ldrh	r5, [r0, #4]
 800cd82:	88c1      	ldrh	r1, [r0, #6]
 800cd84:	42a9      	cmp	r1, r5
 800cd86:	d214      	bcs.n	800cdb2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800cd88:	4604      	mov	r4, r0
 800cd8a:	6800      	ldr	r0, [r0, #0]
 800cd8c:	1a6d      	subs	r5, r5, r1
 800cd8e:	4408      	add	r0, r1
 800cd90:	7a21      	ldrb	r1, [r4, #8]
 800cd92:	b91a      	cbnz	r2, 800cd9c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800cd94:	b919      	cbnz	r1, 800cd9e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800cd96:	4a0a      	ldr	r2, [pc, #40]	; (800cdc0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800cd98:	9100      	str	r1, [sp, #0]
 800cd9a:	e002      	b.n	800cda2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800cd9c:	b159      	cbz	r1, 800cdb6 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800cd9e:	9200      	str	r2, [sp, #0]
 800cda0:	4a08      	ldr	r2, [pc, #32]	; (800cdc4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800cda2:	4629      	mov	r1, r5
 800cda4:	f7fc fd34 	bl	8009810 <snprintf>
 800cda8:	4285      	cmp	r5, r0
 800cdaa:	bfa2      	ittt	ge
 800cdac:	88e3      	ldrhge	r3, [r4, #6]
 800cdae:	181b      	addge	r3, r3, r0
 800cdb0:	80e3      	strhge	r3, [r4, #6]
 800cdb2:	b003      	add	sp, #12
 800cdb4:	bd30      	pop	{r4, r5, pc}
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	9200      	str	r2, [sp, #0]
 800cdba:	4a03      	ldr	r2, [pc, #12]	; (800cdc8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800cdbc:	e7f1      	b.n	800cda2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800cdbe:	bf00      	nop
 800cdc0:	08019181 	stmdaeq	r1, {r0, r7, r8, ip, pc}
 800cdc4:	08019178 	stmdaeq	r1, {r3, r4, r5, r6, r8, ip, pc}
 800cdc8:	08019182 	stmdaeq	r1, {r1, r7, r8, ip, pc}

0800cdcc <strncpy.isra.0>:
 800cdcc:	1e4b      	subs	r3, r1, #1
 800cdce:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800cdd2:	b909      	cbnz	r1, 800cdd8 <strncpy.isra.0+0xc>
 800cdd4:	f009 bd12 	b.w	80167fc <memset>
 800cdd8:	3a01      	subs	r2, #1
 800cdda:	f800 1b01 	strb.w	r1, [r0], #1
 800cdde:	d1f6      	bne.n	800cdce <strncpy.isra.0+0x2>
 800cde0:	4770      	bx	lr
	...

0800cde4 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
 800cde4:	b510      	push	{r4, lr}
 800cde6:	2287      	movs	r2, #135	; 0x87
 800cde8:	4604      	mov	r4, r0
 800cdea:	f840 1b04 	str.w	r1, [r0], #4
 800cdee:	2100      	movs	r1, #0
 800cdf0:	f009 fd04 	bl	80167fc <memset>
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800cdfa:	f240 3302 	movw	r3, #770	; 0x302
 800cdfe:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800ce02:	2355      	movs	r3, #85	; 0x55
 800ce04:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
 800ce08:	2300      	movs	r3, #0
 800ce0a:	2204      	movs	r2, #4
 800ce0c:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800ce10:	4b03      	ldr	r3, [pc, #12]	; (800ce20 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x3c>)
 800ce12:	f884 206e 	strb.w	r2, [r4, #110]	; 0x6e
 800ce16:	6819      	ldr	r1, [r3, #0]
 800ce18:	b901      	cbnz	r1, 800ce1c <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x38>
 800ce1a:	601a      	str	r2, [r3, #0]
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	bd10      	pop	{r4, pc}
 800ce20:	2000c74c 	andcs	ip, r0, ip, asr #14

0800ce24 <ArtNetParams::Load()>:
 800ce24:	b508      	push	{r3, lr}
 800ce26:	2300      	movs	r3, #0
 800ce28:	4601      	mov	r1, r0
 800ce2a:	6043      	str	r3, [r0, #4]
 800ce2c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800ce30:	6800      	ldr	r0, [r0, #0]
 800ce32:	b120      	cbz	r0, 800ce3e <ArtNetParams::Load()+0x1a>
 800ce34:	6803      	ldr	r3, [r0, #0]
 800ce36:	3104      	adds	r1, #4
 800ce38:	68db      	ldr	r3, [r3, #12]
 800ce3a:	4798      	blx	r3
 800ce3c:	2001      	movs	r0, #1
 800ce3e:	bd08      	pop	{r3, pc}

0800ce40 <ArtNetParams::Load(char const*, unsigned int)>:
 800ce40:	6803      	ldr	r3, [r0, #0]
 800ce42:	b1e3      	cbz	r3, 800ce7e <ArtNetParams::Load(char const*, unsigned int)+0x3e>
 800ce44:	2300      	movs	r3, #0
 800ce46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce48:	460d      	mov	r5, r1
 800ce4a:	4616      	mov	r6, r2
 800ce4c:	4604      	mov	r4, r0
 800ce4e:	6043      	str	r3, [r0, #4]
 800ce50:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800ce54:	4602      	mov	r2, r0
 800ce56:	490a      	ldr	r1, [pc, #40]	; (800ce80 <ArtNetParams::Load(char const*, unsigned int)+0x40>)
 800ce58:	4668      	mov	r0, sp
 800ce5a:	f008 fe49 	bl	8015af0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800ce5e:	4632      	mov	r2, r6
 800ce60:	4629      	mov	r1, r5
 800ce62:	4668      	mov	r0, sp
 800ce64:	f008 fe48 	bl	8015af8 <ReadConfigFile::Read(char const*, unsigned int)>
 800ce68:	4621      	mov	r1, r4
 800ce6a:	f851 0b04 	ldr.w	r0, [r1], #4
 800ce6e:	6803      	ldr	r3, [r0, #0]
 800ce70:	689b      	ldr	r3, [r3, #8]
 800ce72:	4798      	blx	r3
 800ce74:	4668      	mov	r0, sp
 800ce76:	f008 fe3e 	bl	8015af6 <ReadConfigFile::~ReadConfigFile()>
 800ce7a:	b002      	add	sp, #8
 800ce7c:	bd70      	pop	{r4, r5, r6, pc}
 800ce7e:	4770      	bx	lr
 800ce80:	0800d265 	stmdaeq	r0, {r0, r2, r5, r6, r9, ip, lr, pc}

0800ce84 <ArtNetParams::SetBool(unsigned char, unsigned int)>:
 800ce84:	6843      	ldr	r3, [r0, #4]
 800ce86:	b111      	cbz	r1, 800ce8e <ArtNetParams::SetBool(unsigned char, unsigned int)+0xa>
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	6043      	str	r3, [r0, #4]
 800ce8c:	4770      	bx	lr
 800ce8e:	ea23 0302 	bic.w	r3, r3, r2
 800ce92:	e7fa      	b.n	800ce8a <ArtNetParams::SetBool(unsigned char, unsigned int)+0x6>

0800ce94 <ArtNetParams::callbackFunction(char const*)>:
 800ce94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce98:	460e      	mov	r6, r1
 800ce9a:	b0a7      	sub	sp, #156	; 0x9c
 800ce9c:	4604      	mov	r4, r0
 800ce9e:	499d      	ldr	r1, [pc, #628]	; (800d114 <ArtNetParams::callbackFunction(char const*)+0x280>)
 800cea0:	4630      	mov	r0, r6
 800cea2:	f10d 020f 	add.w	r2, sp, #15
 800cea6:	f008 ff5f 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ceaa:	b940      	cbnz	r0, 800cebe <ArtNetParams::callbackFunction(char const*)+0x2a>
 800ceac:	2220      	movs	r2, #32
 800ceae:	4620      	mov	r0, r4
 800ceb0:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800ceb4:	b027      	add	sp, #156	; 0x9c
 800ceb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceba:	f7ff bfe3 	b.w	800ce84 <ArtNetParams::SetBool(unsigned char, unsigned int)>
 800cebe:	2708      	movs	r7, #8
 800cec0:	4630      	mov	r0, r6
 800cec2:	4995      	ldr	r1, [pc, #596]	; (800d118 <ArtNetParams::callbackFunction(char const*)+0x284>)
 800cec4:	ab05      	add	r3, sp, #20
 800cec6:	aa06      	add	r2, sp, #24
 800cec8:	9705      	str	r7, [sp, #20]
 800ceca:	f008 fe49 	bl	8015b60 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800cece:	bb40      	cbnz	r0, 800cf22 <ArtNetParams::callbackFunction(char const*)+0x8e>
 800ced0:	2204      	movs	r2, #4
 800ced2:	4992      	ldr	r1, [pc, #584]	; (800d11c <ArtNetParams::callbackFunction(char const*)+0x288>)
 800ced4:	a806      	add	r0, sp, #24
 800ced6:	f7ff feed 	bl	800ccb4 <memcmp>
 800ceda:	6865      	ldr	r5, [r4, #4]
 800cedc:	b188      	cbz	r0, 800cf02 <ArtNetParams::callbackFunction(char const*)+0x6e>
 800cede:	2203      	movs	r2, #3
 800cee0:	498f      	ldr	r1, [pc, #572]	; (800d120 <ArtNetParams::callbackFunction(char const*)+0x28c>)
 800cee2:	a806      	add	r0, sp, #24
 800cee4:	f7ff fee6 	bl	800ccb4 <memcmp>
 800cee8:	b198      	cbz	r0, 800cf12 <ArtNetParams::callbackFunction(char const*)+0x7e>
 800ceea:	2202      	movs	r2, #2
 800ceec:	498d      	ldr	r1, [pc, #564]	; (800d124 <ArtNetParams::callbackFunction(char const*)+0x290>)
 800ceee:	a806      	add	r0, sp, #24
 800cef0:	f7ff fee0 	bl	800ccb4 <memcmp>
 800cef4:	b188      	cbz	r0, 800cf1a <ArtNetParams::callbackFunction(char const*)+0x86>
 800cef6:	463a      	mov	r2, r7
 800cef8:	498b      	ldr	r1, [pc, #556]	; (800d128 <ArtNetParams::callbackFunction(char const*)+0x294>)
 800cefa:	a806      	add	r0, sp, #24
 800cefc:	f7ff feda 	bl	800ccb4 <memcmp>
 800cf00:	b168      	cbz	r0, 800cf1e <ArtNetParams::callbackFunction(char const*)+0x8a>
 800cf02:	2300      	movs	r3, #0
 800cf04:	f025 0510 	bic.w	r5, r5, #16
 800cf08:	6065      	str	r5, [r4, #4]
 800cf0a:	72a3      	strb	r3, [r4, #10]
 800cf0c:	b027      	add	sp, #156	; 0x9c
 800cf0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf12:	2301      	movs	r3, #1
 800cf14:	f045 0510 	orr.w	r5, r5, #16
 800cf18:	e7f6      	b.n	800cf08 <ArtNetParams::callbackFunction(char const*)+0x74>
 800cf1a:	2302      	movs	r3, #2
 800cf1c:	e7fa      	b.n	800cf14 <ArtNetParams::callbackFunction(char const*)+0x80>
 800cf1e:	2303      	movs	r3, #3
 800cf20:	e7f8      	b.n	800cf14 <ArtNetParams::callbackFunction(char const*)+0x80>
 800cf22:	2311      	movs	r3, #17
 800cf24:	4630      	mov	r0, r6
 800cf26:	9305      	str	r3, [sp, #20]
 800cf28:	4980      	ldr	r1, [pc, #512]	; (800d12c <ArtNetParams::callbackFunction(char const*)+0x298>)
 800cf2a:	ab05      	add	r3, sp, #20
 800cf2c:	f104 0210 	add.w	r2, r4, #16
 800cf30:	f008 fe16 	bl	8015b60 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800cf34:	b938      	cbnz	r0, 800cf46 <ArtNetParams::callbackFunction(char const*)+0xb2>
 800cf36:	9b05      	ldr	r3, [sp, #20]
 800cf38:	4423      	add	r3, r4
 800cf3a:	7418      	strb	r0, [r3, #16]
 800cf3c:	6863      	ldr	r3, [r4, #4]
 800cf3e:	f043 0302 	orr.w	r3, r3, #2
 800cf42:	6063      	str	r3, [r4, #4]
 800cf44:	e7e2      	b.n	800cf0c <ArtNetParams::callbackFunction(char const*)+0x78>
 800cf46:	233f      	movs	r3, #63	; 0x3f
 800cf48:	4630      	mov	r0, r6
 800cf4a:	9305      	str	r3, [sp, #20]
 800cf4c:	4978      	ldr	r1, [pc, #480]	; (800d130 <ArtNetParams::callbackFunction(char const*)+0x29c>)
 800cf4e:	ab05      	add	r3, sp, #20
 800cf50:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800cf54:	f008 fe04 	bl	8015b60 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800cf58:	b938      	cbnz	r0, 800cf6a <ArtNetParams::callbackFunction(char const*)+0xd6>
 800cf5a:	9b05      	ldr	r3, [sp, #20]
 800cf5c:	4423      	add	r3, r4
 800cf5e:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800cf62:	6863      	ldr	r3, [r4, #4]
 800cf64:	f043 0301 	orr.w	r3, r3, #1
 800cf68:	e7eb      	b.n	800cf42 <ArtNetParams::callbackFunction(char const*)+0xae>
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	4971      	ldr	r1, [pc, #452]	; (800d134 <ArtNetParams::callbackFunction(char const*)+0x2a0>)
 800cf6e:	f10d 020f 	add.w	r2, sp, #15
 800cf72:	f008 fef9 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800cf76:	b950      	cbnz	r0, 800cf8e <ArtNetParams::callbackFunction(char const*)+0xfa>
 800cf78:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800cf7c:	6863      	ldr	r3, [r4, #4]
 800cf7e:	7222      	strb	r2, [r4, #8]
 800cf80:	b112      	cbz	r2, 800cf88 <ArtNetParams::callbackFunction(char const*)+0xf4>
 800cf82:	f043 0304 	orr.w	r3, r3, #4
 800cf86:	e7dc      	b.n	800cf42 <ArtNetParams::callbackFunction(char const*)+0xae>
 800cf88:	f023 0304 	bic.w	r3, r3, #4
 800cf8c:	e7d9      	b.n	800cf42 <ArtNetParams::callbackFunction(char const*)+0xae>
 800cf8e:	4630      	mov	r0, r6
 800cf90:	4969      	ldr	r1, [pc, #420]	; (800d138 <ArtNetParams::callbackFunction(char const*)+0x2a4>)
 800cf92:	f10d 020f 	add.w	r2, sp, #15
 800cf96:	f008 fee7 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800cf9a:	b950      	cbnz	r0, 800cfb2 <ArtNetParams::callbackFunction(char const*)+0x11e>
 800cf9c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800cfa0:	6863      	ldr	r3, [r4, #4]
 800cfa2:	7262      	strb	r2, [r4, #9]
 800cfa4:	b112      	cbz	r2, 800cfac <ArtNetParams::callbackFunction(char const*)+0x118>
 800cfa6:	f043 0308 	orr.w	r3, r3, #8
 800cfaa:	e7ca      	b.n	800cf42 <ArtNetParams::callbackFunction(char const*)+0xae>
 800cfac:	f023 0308 	bic.w	r3, r3, #8
 800cfb0:	e7c7      	b.n	800cf42 <ArtNetParams::callbackFunction(char const*)+0xae>
 800cfb2:	2500      	movs	r5, #0
 800cfb4:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800d13c <ArtNetParams::callbackFunction(char const*)+0x2a8>
 800cfb8:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800d140 <ArtNetParams::callbackFunction(char const*)+0x2ac>
 800cfbc:	f8df b184 	ldr.w	fp, [pc, #388]	; 800d144 <ArtNetParams::callbackFunction(char const*)+0x2b0>
 800cfc0:	4649      	mov	r1, r9
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	f10d 020f 	add.w	r2, sp, #15
 800cfc8:	f008 fece 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800cfcc:	b9a8      	cbnz	r0, 800cffa <ArtNetParams::callbackFunction(char const*)+0x166>
 800cfce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cfd2:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800cfd6:	6862      	ldr	r2, [r4, #4]
 800cfd8:	280f      	cmp	r0, #15
 800cfda:	fa03 f305 	lsl.w	r3, r3, r5
 800cfde:	eb04 0105 	add.w	r1, r4, r5
 800cfe2:	d803      	bhi.n	800cfec <ArtNetParams::callbackFunction(char const*)+0x158>
 800cfe4:	f881 006b 	strb.w	r0, [r1, #107]	; 0x6b
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	e7aa      	b.n	800cf42 <ArtNetParams::callbackFunction(char const*)+0xae>
 800cfec:	3501      	adds	r5, #1
 800cfee:	ea22 0203 	bic.w	r2, r2, r3
 800cff2:	f881 506b 	strb.w	r5, [r1, #107]	; 0x6b
 800cff6:	6062      	str	r2, [r4, #4]
 800cff8:	e788      	b.n	800cf0c <ArtNetParams::callbackFunction(char const*)+0x78>
 800cffa:	2712      	movs	r7, #18
 800cffc:	2303      	movs	r3, #3
 800cffe:	436f      	muls	r7, r5
 800d000:	4951      	ldr	r1, [pc, #324]	; (800d148 <ArtNetParams::callbackFunction(char const*)+0x2b4>)
 800d002:	9305      	str	r3, [sp, #20]
 800d004:	4630      	mov	r0, r6
 800d006:	ab05      	add	r3, sp, #20
 800d008:	aa06      	add	r2, sp, #24
 800d00a:	4439      	add	r1, r7
 800d00c:	f008 fda8 	bl	8015b60 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d010:	bb00      	cbnz	r0, 800d054 <ArtNetParams::callbackFunction(char const*)+0x1c0>
 800d012:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800d016:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800d01a:	40aa      	lsls	r2, r5
 800d01c:	f041 0120 	orr.w	r1, r1, #32
 800d020:	296c      	cmp	r1, #108	; 0x6c
 800d022:	6863      	ldr	r3, [r4, #4]
 800d024:	4425      	add	r5, r4
 800d026:	d10f      	bne.n	800d048 <ArtNetParams::callbackFunction(char const*)+0x1b4>
 800d028:	f89d 1019 	ldrb.w	r1, [sp, #25]
 800d02c:	f041 0120 	orr.w	r1, r1, #32
 800d030:	2974      	cmp	r1, #116	; 0x74
 800d032:	d109      	bne.n	800d048 <ArtNetParams::callbackFunction(char const*)+0x1b4>
 800d034:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800d038:	f041 0120 	orr.w	r1, r1, #32
 800d03c:	2970      	cmp	r1, #112	; 0x70
 800d03e:	d103      	bne.n	800d048 <ArtNetParams::callbackFunction(char const*)+0x1b4>
 800d040:	2101      	movs	r1, #1
 800d042:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800d046:	e7cf      	b.n	800cfe8 <ArtNetParams::callbackFunction(char const*)+0x154>
 800d048:	2100      	movs	r1, #0
 800d04a:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800d04e:	ea23 0302 	bic.w	r3, r3, r2
 800d052:	e776      	b.n	800cf42 <ArtNetParams::callbackFunction(char const*)+0xae>
 800d054:	f04f 0a04 	mov.w	sl, #4
 800d058:	493c      	ldr	r1, [pc, #240]	; (800d14c <ArtNetParams::callbackFunction(char const*)+0x2b8>)
 800d05a:	4630      	mov	r0, r6
 800d05c:	ab05      	add	r3, sp, #20
 800d05e:	aa06      	add	r2, sp, #24
 800d060:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800d064:	f8cd a014 	str.w	sl, [sp, #20]
 800d068:	f008 fd7a 	bl	8015b60 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d06c:	b9a0      	cbnz	r0, 800d098 <ArtNetParams::callbackFunction(char const*)+0x204>
 800d06e:	4652      	mov	r2, sl
 800d070:	9001      	str	r0, [sp, #4]
 800d072:	4937      	ldr	r1, [pc, #220]	; (800d150 <ArtNetParams::callbackFunction(char const*)+0x2bc>)
 800d074:	a806      	add	r0, sp, #24
 800d076:	f7ff fe1d 	bl	800ccb4 <memcmp>
 800d07a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800d07e:	9b01      	ldr	r3, [sp, #4]
 800d080:	40aa      	lsls	r2, r5
 800d082:	4425      	add	r5, r4
 800d084:	b920      	cbnz	r0, 800d090 <ArtNetParams::callbackFunction(char const*)+0x1fc>
 800d086:	2301      	movs	r3, #1
 800d088:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
 800d08c:	6863      	ldr	r3, [r4, #4]
 800d08e:	e7ab      	b.n	800cfe8 <ArtNetParams::callbackFunction(char const*)+0x154>
 800d090:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
 800d094:	6863      	ldr	r3, [r4, #4]
 800d096:	e7da      	b.n	800d04e <ArtNetParams::callbackFunction(char const*)+0x1ba>
 800d098:	2307      	movs	r3, #7
 800d09a:	4630      	mov	r0, r6
 800d09c:	9305      	str	r3, [sp, #20]
 800d09e:	aa06      	add	r2, sp, #24
 800d0a0:	ab05      	add	r3, sp, #20
 800d0a2:	eb0b 0107 	add.w	r1, fp, r7
 800d0a6:	f008 fd5b 	bl	8015b60 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d0aa:	2800      	cmp	r0, #0
 800d0ac:	d17d      	bne.n	800d1aa <ArtNetParams::callbackFunction(char const*)+0x316>
 800d0ae:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800d0b2:	f043 0320 	orr.w	r3, r3, #32
 800d0b6:	2b69      	cmp	r3, #105	; 0x69
 800d0b8:	d14c      	bne.n	800d154 <ArtNetParams::callbackFunction(char const*)+0x2c0>
 800d0ba:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d0be:	f043 0320 	orr.w	r3, r3, #32
 800d0c2:	2b6e      	cmp	r3, #110	; 0x6e
 800d0c4:	d16f      	bne.n	800d1a6 <ArtNetParams::callbackFunction(char const*)+0x312>
 800d0c6:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800d0ca:	f043 0320 	orr.w	r3, r3, #32
 800d0ce:	2b70      	cmp	r3, #112	; 0x70
 800d0d0:	d169      	bne.n	800d1a6 <ArtNetParams::callbackFunction(char const*)+0x312>
 800d0d2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d0d6:	f043 0320 	orr.w	r3, r3, #32
 800d0da:	2b75      	cmp	r3, #117	; 0x75
 800d0dc:	d163      	bne.n	800d1a6 <ArtNetParams::callbackFunction(char const*)+0x312>
 800d0de:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800d0e2:	f043 0320 	orr.w	r3, r3, #32
 800d0e6:	3b74      	subs	r3, #116	; 0x74
 800d0e8:	bf18      	it	ne
 800d0ea:	2301      	movne	r3, #1
 800d0ec:	2103      	movs	r1, #3
 800d0ee:	f8b4 2079 	ldrh.w	r2, [r4, #121]	; 0x79
 800d0f2:	006d      	lsls	r5, r5, #1
 800d0f4:	40a9      	lsls	r1, r5
 800d0f6:	ea22 0201 	bic.w	r2, r2, r1
 800d0fa:	b143      	cbz	r3, 800d10e <ArtNetParams::callbackFunction(char const*)+0x27a>
 800d0fc:	2b02      	cmp	r3, #2
 800d0fe:	bf15      	itete	ne
 800d100:	2301      	movne	r3, #1
 800d102:	40ab      	lsleq	r3, r5
 800d104:	fa03 f505 	lslne.w	r5, r3, r5
 800d108:	431a      	orreq	r2, r3
 800d10a:	bf18      	it	ne
 800d10c:	432a      	orrne	r2, r5
 800d10e:	f8a4 2079 	strh.w	r2, [r4, #121]	; 0x79
 800d112:	e6fb      	b.n	800cf0c <ArtNetParams::callbackFunction(char const*)+0x78>
 800d114:	0801a0fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, sp, pc}
 800d118:	0801bb39 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, fp, ip, sp, pc}
 800d11c:	0801a0a6 	stmdaeq	r1, {r1, r2, r5, r7, sp, pc}
 800d120:	0801a0ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, sp, pc}
 800d124:	08019322 	stmdaeq	r1, {r1, r5, r8, r9, ip, pc}
 800d128:	0801a0af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, sp, pc}
 800d12c:	0801a15f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r8, sp, pc}
 800d130:	0801a155 	stmdaeq	r1, {r0, r2, r4, r6, r8, sp, pc}
 800d134:	0801a212 	stmdaeq	r1, {r1, r4, r9, sp, pc}
 800d138:	0801a216 	stmdaeq	r1, {r1, r2, r4, r9, sp, pc}
 800d13c:	0801b9e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, fp, ip, sp, pc}
 800d140:	0801a16a 	stmdaeq	r1, {r1, r3, r5, r6, r8, sp, pc}
 800d144:	0801bb4b 	stmdaeq	r1, {r0, r1, r3, r6, r8, r9, fp, ip, sp, pc}
 800d148:	0801bac9 	stmdaeq	r1, {r0, r3, r6, r7, r9, fp, ip, sp, pc}
 800d14c:	0801a115 	stmdaeq	r1, {r0, r2, r4, r8, sp, pc}
 800d150:	0801a0b8 	stmdaeq	r1, {r3, r4, r5, r7, sp, pc}
 800d154:	2b64      	cmp	r3, #100	; 0x64
 800d156:	d126      	bne.n	800d1a6 <ArtNetParams::callbackFunction(char const*)+0x312>
 800d158:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d15c:	f043 0320 	orr.w	r3, r3, #32
 800d160:	2b69      	cmp	r3, #105	; 0x69
 800d162:	d120      	bne.n	800d1a6 <ArtNetParams::callbackFunction(char const*)+0x312>
 800d164:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800d168:	f043 0320 	orr.w	r3, r3, #32
 800d16c:	2b73      	cmp	r3, #115	; 0x73
 800d16e:	d11a      	bne.n	800d1a6 <ArtNetParams::callbackFunction(char const*)+0x312>
 800d170:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d174:	f043 0320 	orr.w	r3, r3, #32
 800d178:	2b61      	cmp	r3, #97	; 0x61
 800d17a:	d114      	bne.n	800d1a6 <ArtNetParams::callbackFunction(char const*)+0x312>
 800d17c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800d180:	f043 0320 	orr.w	r3, r3, #32
 800d184:	2b62      	cmp	r3, #98	; 0x62
 800d186:	d10e      	bne.n	800d1a6 <ArtNetParams::callbackFunction(char const*)+0x312>
 800d188:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d18c:	f043 0320 	orr.w	r3, r3, #32
 800d190:	2b6c      	cmp	r3, #108	; 0x6c
 800d192:	d108      	bne.n	800d1a6 <ArtNetParams::callbackFunction(char const*)+0x312>
 800d194:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d198:	f043 0320 	orr.w	r3, r3, #32
 800d19c:	2b65      	cmp	r3, #101	; 0x65
 800d19e:	bf14      	ite	ne
 800d1a0:	2301      	movne	r3, #1
 800d1a2:	2302      	moveq	r3, #2
 800d1a4:	e7a2      	b.n	800d0ec <ArtNetParams::callbackFunction(char const*)+0x258>
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e7a0      	b.n	800d0ec <ArtNetParams::callbackFunction(char const*)+0x258>
 800d1aa:	2118      	movs	r1, #24
 800d1ac:	4b2a      	ldr	r3, [pc, #168]	; (800d258 <ArtNetParams::callbackFunction(char const*)+0x3c4>)
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	fb01 3105 	mla	r1, r1, r5, r3
 800d1b4:	aa04      	add	r2, sp, #16
 800d1b6:	f008 fd4f 	bl	8015c58 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800d1ba:	b998      	cbnz	r0, 800d1e4 <ArtNetParams::callbackFunction(char const*)+0x350>
 800d1bc:	9904      	ldr	r1, [sp, #16]
 800d1be:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d1c2:	f8c3 107b 	str.w	r1, [r3, #123]	; 0x7b
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	40ab      	lsls	r3, r5
 800d1ca:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	b119      	cbz	r1, 800d1da <ArtNetParams::callbackFunction(char const*)+0x346>
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800d1d8:	e698      	b.n	800cf0c <ArtNetParams::callbackFunction(char const*)+0x78>
 800d1da:	ea22 0203 	bic.w	r2, r2, r3
 800d1de:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 800d1e2:	e693      	b.n	800cf0c <ArtNetParams::callbackFunction(char const*)+0x78>
 800d1e4:	4641      	mov	r1, r8
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	f10d 020f 	add.w	r2, sp, #15
 800d1ec:	f008 fdbc 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d1f0:	b998      	cbnz	r0, 800d21a <ArtNetParams::callbackFunction(char const*)+0x386>
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	f105 0308 	add.w	r3, r5, #8
 800d1f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d1fc:	40aa      	lsls	r2, r5
 800d1fe:	4313      	orrs	r3, r2
 800d200:	89a2      	ldrh	r2, [r4, #12]
 800d202:	b29b      	uxth	r3, r3
 800d204:	ea22 0103 	bic.w	r1, r2, r3
 800d208:	81a1      	strh	r1, [r4, #12]
 800d20a:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800d20e:	2900      	cmp	r1, #0
 800d210:	f43f ae7c 	beq.w	800cf0c <ArtNetParams::callbackFunction(char const*)+0x78>
 800d214:	431a      	orrs	r2, r3
 800d216:	81a2      	strh	r2, [r4, #12]
 800d218:	e678      	b.n	800cf0c <ArtNetParams::callbackFunction(char const*)+0x78>
 800d21a:	3501      	adds	r5, #1
 800d21c:	2d04      	cmp	r5, #4
 800d21e:	f109 0910 	add.w	r9, r9, #16
 800d222:	f108 0812 	add.w	r8, r8, #18
 800d226:	f47f aecb 	bne.w	800cfc0 <ArtNetParams::callbackFunction(char const*)+0x12c>
 800d22a:	4630      	mov	r0, r6
 800d22c:	490b      	ldr	r1, [pc, #44]	; (800d25c <ArtNetParams::callbackFunction(char const*)+0x3c8>)
 800d22e:	f10d 020f 	add.w	r2, sp, #15
 800d232:	f008 fd99 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d236:	b910      	cbnz	r0, 800d23e <ArtNetParams::callbackFunction(char const*)+0x3aa>
 800d238:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d23c:	e637      	b.n	800ceae <ArtNetParams::callbackFunction(char const*)+0x1a>
 800d23e:	4630      	mov	r0, r6
 800d240:	4907      	ldr	r1, [pc, #28]	; (800d260 <ArtNetParams::callbackFunction(char const*)+0x3cc>)
 800d242:	f10d 020f 	add.w	r2, sp, #15
 800d246:	f008 fd8f 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d24a:	2800      	cmp	r0, #0
 800d24c:	f47f ae5e 	bne.w	800cf0c <ArtNetParams::callbackFunction(char const*)+0x78>
 800d250:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d254:	e62b      	b.n	800ceae <ArtNetParams::callbackFunction(char const*)+0x1a>
 800d256:	bf00      	nop
 800d258:	0801a1b2 	stmdaeq	r1, {r1, r4, r5, r7, r8, sp, pc}
 800d25c:	0801a107 	stmdaeq	r1, {r0, r1, r2, r8, sp, pc}
 800d260:	0801bb23 	stmdaeq	r1, {r0, r1, r5, r8, r9, fp, ip, sp, pc}

0800d264 <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800d264:	f7ff be16 	b.w	800ce94 <ArtNetParams::callbackFunction(char const*)>

0800d268 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
 800d268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26c:	4604      	mov	r4, r0
 800d26e:	4615      	mov	r5, r2
 800d270:	461e      	mov	r6, r3
 800d272:	b085      	sub	sp, #20
 800d274:	3004      	adds	r0, #4
 800d276:	2900      	cmp	r1, #0
 800d278:	f000 80a4 	beq.w	800d3c4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x15c>
 800d27c:	2287      	movs	r2, #135	; 0x87
 800d27e:	f009 faa6 	bl	80167ce <memmove>
 800d282:	4633      	mov	r3, r6
 800d284:	462a      	mov	r2, r5
 800d286:	4993      	ldr	r1, [pc, #588]	; (800d4d4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x26c>)
 800d288:	a801      	add	r0, sp, #4
 800d28a:	f008 fb91 	bl	80159b0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800d28e:	6863      	ldr	r3, [r4, #4]
 800d290:	f104 0622 	add.w	r6, r4, #34	; 0x22
 800d294:	f013 0501 	ands.w	r5, r3, #1
 800d298:	d108      	bne.n	800d2ac <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x44>
 800d29a:	4b8f      	ldr	r3, [pc, #572]	; (800d4d8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800d29c:	223f      	movs	r2, #63	; 0x3f
 800d29e:	6819      	ldr	r1, [r3, #0]
 800d2a0:	4630      	mov	r0, r6
 800d2a2:	315c      	adds	r1, #92	; 0x5c
 800d2a4:	f7ff fd92 	bl	800cdcc <strncpy.isra.0>
 800d2a8:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800d2ac:	6863      	ldr	r3, [r4, #4]
 800d2ae:	4632      	mov	r2, r6
 800d2b0:	f003 0301 	and.w	r3, r3, #1
 800d2b4:	4989      	ldr	r1, [pc, #548]	; (800d4dc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800d2b6:	a801      	add	r0, sp, #4
 800d2b8:	f7ff fd38 	bl	800cd2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800d2bc:	6863      	ldr	r3, [r4, #4]
 800d2be:	f104 0610 	add.w	r6, r4, #16
 800d2c2:	f013 0502 	ands.w	r5, r3, #2
 800d2c6:	d108      	bne.n	800d2da <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x72>
 800d2c8:	4b83      	ldr	r3, [pc, #524]	; (800d4d8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800d2ca:	2211      	movs	r2, #17
 800d2cc:	6819      	ldr	r1, [r3, #0]
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	314a      	adds	r1, #74	; 0x4a
 800d2d2:	f7ff fd7b 	bl	800cdcc <strncpy.isra.0>
 800d2d6:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800d2da:	6863      	ldr	r3, [r4, #4]
 800d2dc:	4632      	mov	r2, r6
 800d2de:	4980      	ldr	r1, [pc, #512]	; (800d4e0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800d2e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d2e4:	a801      	add	r0, sp, #4
 800d2e6:	f7ff fd21 	bl	800cd2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800d2ea:	6863      	ldr	r3, [r4, #4]
 800d2ec:	7a22      	ldrb	r2, [r4, #8]
 800d2ee:	497d      	ldr	r1, [pc, #500]	; (800d4e4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800d2f0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d2f4:	a801      	add	r0, sp, #4
 800d2f6:	f7ff fcf1 	bl	800ccdc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800d2fa:	6863      	ldr	r3, [r4, #4]
 800d2fc:	7a62      	ldrb	r2, [r4, #9]
 800d2fe:	497a      	ldr	r1, [pc, #488]	; (800d4e8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800d300:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d304:	a801      	add	r0, sp, #4
 800d306:	f7ff fce9 	bl	800ccdc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800d30a:	6862      	ldr	r2, [r4, #4]
 800d30c:	4977      	ldr	r1, [pc, #476]	; (800d4ec <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x284>)
 800d30e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800d312:	a801      	add	r0, sp, #4
 800d314:	f7ff fd32 	bl	800cd7c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d318:	2500      	movs	r5, #0
 800d31a:	4f75      	ldr	r7, [pc, #468]	; (800d4f0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800d31c:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 800d4f4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x28c>
 800d320:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 800d4f8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x290>
 800d324:	f104 086a 	add.w	r8, r4, #106	; 0x6a
 800d328:	f8d9 2000 	ldr.w	r2, [r9]
 800d32c:	6863      	ldr	r3, [r4, #4]
 800d32e:	42aa      	cmp	r2, r5
 800d330:	d84f      	bhi.n	800d3d2 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x16a>
 800d332:	7aa1      	ldrb	r1, [r4, #10]
 800d334:	4a71      	ldr	r2, [pc, #452]	; (800d4fc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800d336:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d33a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d33e:	a801      	add	r0, sp, #4
 800d340:	496f      	ldr	r1, [pc, #444]	; (800d500 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800d342:	f7ff fcf3 	bl	800cd2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800d346:	496f      	ldr	r1, [pc, #444]	; (800d504 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800d348:	a801      	add	r0, sp, #4
 800d34a:	f008 fbb7 	bl	8015abc <PropertiesBuilder::AddComment(char const*)>
 800d34e:	2500      	movs	r5, #0
 800d350:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 800d354:	4e6c      	ldr	r6, [pc, #432]	; (800d508 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800d356:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 800d50c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a4>
 800d35a:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 800d510 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a8>
 800d35e:	f104 0774 	add.w	r7, r4, #116	; 0x74
 800d362:	f8d9 3000 	ldr.w	r3, [r9]
 800d366:	42ab      	cmp	r3, r5
 800d368:	6863      	ldr	r3, [r4, #4]
 800d36a:	f200 809f 	bhi.w	800d4ac <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x244>
 800d36e:	f3c3 62c0 	ubfx	r2, r3, #27, #1
 800d372:	4968      	ldr	r1, [pc, #416]	; (800d514 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ac>)
 800d374:	a801      	add	r0, sp, #4
 800d376:	f7ff fd01 	bl	800cd7c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d37a:	4967      	ldr	r1, [pc, #412]	; (800d518 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b0>)
 800d37c:	a801      	add	r0, sp, #4
 800d37e:	f008 fb9d 	bl	8015abc <PropertiesBuilder::AddComment(char const*)>
 800d382:	6862      	ldr	r2, [r4, #4]
 800d384:	4965      	ldr	r1, [pc, #404]	; (800d51c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 800d386:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800d38a:	a801      	add	r0, sp, #4
 800d38c:	f7ff fcf6 	bl	800cd7c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d390:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d394:	b17b      	cbz	r3, 800d3b6 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x14e>
 800d396:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800d39a:	9b01      	ldr	r3, [sp, #4]
 800d39c:	4413      	add	r3, r2
 800d39e:	227d      	movs	r2, #125	; 0x7d
 800d3a0:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d3a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800d3a8:	9901      	ldr	r1, [sp, #4]
 800d3aa:	54ca      	strb	r2, [r1, r3]
 800d3ac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	f8ad 300a 	strh.w	r3, [sp, #10]
 800d3b6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800d3ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3bc:	601a      	str	r2, [r3, #0]
 800d3be:	b005      	add	sp, #20
 800d3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3c4:	6823      	ldr	r3, [r4, #0]
 800d3c6:	4601      	mov	r1, r0
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	68d2      	ldr	r2, [r2, #12]
 800d3ce:	4790      	blx	r2
 800d3d0:	e757      	b.n	800d282 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a>
 800d3d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d3d6:	f04f 0b12 	mov.w	fp, #18
 800d3da:	40aa      	lsls	r2, r5
 800d3dc:	439a      	bics	r2, r3
 800d3de:	bf0c      	ite	eq
 800d3e0:	2301      	moveq	r3, #1
 800d3e2:	2300      	movne	r3, #0
 800d3e4:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800d3e8:	eb0a 1105 	add.w	r1, sl, r5, lsl #4
 800d3ec:	a801      	add	r0, sp, #4
 800d3ee:	f7ff fc75 	bl	800ccdc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800d3f2:	fb0b fb05 	mul.w	fp, fp, r5
 800d3f6:	f8b4 3079 	ldrh.w	r3, [r4, #121]	; 0x79
 800d3fa:	006a      	lsls	r2, r5, #1
 800d3fc:	4948      	ldr	r1, [pc, #288]	; (800d520 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800d3fe:	40d3      	lsrs	r3, r2
 800d400:	f013 0303 	ands.w	r3, r3, #3
 800d404:	4459      	add	r1, fp
 800d406:	d04f      	beq.n	800d4a8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x240>
 800d408:	4a46      	ldr	r2, [pc, #280]	; (800d524 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800d40a:	4847      	ldr	r0, [pc, #284]	; (800d528 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>)
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	bf08      	it	eq
 800d410:	4602      	moveq	r2, r0
 800d412:	3b01      	subs	r3, #1
 800d414:	bf18      	it	ne
 800d416:	2301      	movne	r3, #1
 800d418:	a801      	add	r0, sp, #4
 800d41a:	f7ff fc87 	bl	800cd2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800d41e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d422:	2601      	movs	r6, #1
 800d424:	6862      	ldr	r2, [r4, #4]
 800d426:	40ab      	lsls	r3, r5
 800d428:	4393      	bics	r3, r2
 800d42a:	f898 0005 	ldrb.w	r0, [r8, #5]
 800d42e:	493f      	ldr	r1, [pc, #252]	; (800d52c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800d430:	4a3f      	ldr	r2, [pc, #252]	; (800d530 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800d432:	bf0c      	ite	eq
 800d434:	2301      	moveq	r3, #1
 800d436:	2300      	movne	r3, #0
 800d438:	2800      	cmp	r0, #0
 800d43a:	bf18      	it	ne
 800d43c:	460a      	movne	r2, r1
 800d43e:	493d      	ldr	r1, [pc, #244]	; (800d534 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800d440:	a801      	add	r0, sp, #4
 800d442:	4459      	add	r1, fp
 800d444:	f7ff fc72 	bl	800cd2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800d448:	f105 0308 	add.w	r3, r5, #8
 800d44c:	89a2      	ldrh	r2, [r4, #12]
 800d44e:	fa06 f303 	lsl.w	r3, r6, r3
 800d452:	b29b      	uxth	r3, r3
 800d454:	4938      	ldr	r1, [pc, #224]	; (800d538 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 800d456:	4393      	bics	r3, r2
 800d458:	bf0c      	ite	eq
 800d45a:	4632      	moveq	r2, r6
 800d45c:	2200      	movne	r2, #0
 800d45e:	4459      	add	r1, fp
 800d460:	a801      	add	r0, sp, #4
 800d462:	f7ff fc8b 	bl	800cd7c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d466:	40ae      	lsls	r6, r5
 800d468:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800d46c:	b2b6      	uxth	r6, r6
 800d46e:	4033      	ands	r3, r6
 800d470:	429e      	cmp	r6, r3
 800d472:	bf0c      	ite	eq
 800d474:	2301      	moveq	r3, #1
 800d476:	2300      	movne	r3, #0
 800d478:	f105 021c 	add.w	r2, r5, #28
 800d47c:	d009      	beq.n	800d492 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x22a>
 800d47e:	4916      	ldr	r1, [pc, #88]	; (800d4d8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800d480:	6809      	ldr	r1, [r1, #0]
 800d482:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800d486:	f8d1 0e04 	ldr.w	r0, [r1, #3588]	; 0xe04
 800d48a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800d48e:	f8c1 000b 	str.w	r0, [r1, #11]
 800d492:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d496:	4639      	mov	r1, r7
 800d498:	f8d2 200b 	ldr.w	r2, [r2, #11]
 800d49c:	a801      	add	r0, sp, #4
 800d49e:	f008 fac9 	bl	8015a34 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800d4a2:	3501      	adds	r5, #1
 800d4a4:	3718      	adds	r7, #24
 800d4a6:	e73f      	b.n	800d328 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xc0>
 800d4a8:	4a24      	ldr	r2, [pc, #144]	; (800d53c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 800d4aa:	e7b2      	b.n	800d412 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1aa>
 800d4ac:	fa0b f105 	lsl.w	r1, fp, r5
 800d4b0:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800d4b4:	4399      	bics	r1, r3
 800d4b6:	bf0c      	ite	eq
 800d4b8:	2301      	moveq	r3, #1
 800d4ba:	2300      	movne	r3, #0
 800d4bc:	4631      	mov	r1, r6
 800d4be:	2a00      	cmp	r2, #0
 800d4c0:	bf0c      	ite	eq
 800d4c2:	4642      	moveq	r2, r8
 800d4c4:	4652      	movne	r2, sl
 800d4c6:	a801      	add	r0, sp, #4
 800d4c8:	f7ff fc30 	bl	800cd2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800d4cc:	3501      	adds	r5, #1
 800d4ce:	3610      	adds	r6, #16
 800d4d0:	e747      	b.n	800d362 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xfa>
 800d4d2:	bf00      	nop
 800d4d4:	0801a21d 	stmdaeq	r1, {r0, r2, r3, r4, r9, sp, pc}
 800d4d8:	2000c73c 	andcs	ip, r0, ip, lsr r7
 800d4dc:	0801a155 	stmdaeq	r1, {r0, r2, r4, r6, r8, sp, pc}
 800d4e0:	0801a15f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r8, sp, pc}
 800d4e4:	0801a212 	stmdaeq	r1, {r1, r4, r9, sp, pc}
 800d4e8:	0801a216 	stmdaeq	r1, {r1, r2, r4, r9, sp, pc}
 800d4ec:	0801a0fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, sp, pc}
 800d4f0:	0801a1b2 	stmdaeq	r1, {r1, r4, r5, r7, r8, sp, pc}
 800d4f4:	2000c74c 	andcs	ip, r0, ip, asr #14
 800d4f8:	0801b9e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, fp, ip, sp, pc}
 800d4fc:	0801a0ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, sp, pc}
 800d500:	0801bb39 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, fp, ip, sp, pc}
 800d504:	0801a0e1 	stmdaeq	r1, {r0, r5, r6, r7, sp, pc}
 800d508:	0801a115 	stmdaeq	r1, {r0, r2, r4, r8, sp, pc}
 800d50c:	0801a0da 	stmdaeq	r1, {r1, r3, r4, r6, r7, sp, pc}
 800d510:	0801a0b8 	stmdaeq	r1, {r3, r4, r5, r7, sp, pc}
 800d514:	0801a107 	stmdaeq	r1, {r0, r1, r2, r8, sp, pc}
 800d518:	08018f41 	stmdaeq	r1, {r0, r6, r8, r9, sl, fp, pc}
 800d51c:	0801bb23 	stmdaeq	r1, {r0, r1, r5, r8, r9, fp, ip, sp, pc}
 800d520:	0801bb4b 	stmdaeq	r1, {r0, r1, r3, r6, r8, r9, fp, ip, sp, pc}
 800d524:	0801a0c3 	stmdaeq	r1, {r0, r1, r6, r7, sp, pc}
 800d528:	0801a0ca 	stmdaeq	r1, {r1, r3, r6, r7, sp, pc}
 800d52c:	0801a0d2 	stmdaeq	r1, {r1, r4, r6, r7, sp, pc}
 800d530:	0801a0d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, sp, pc}
 800d534:	0801bac9 	stmdaeq	r1, {r0, r3, r6, r7, r9, fp, ip, sp, pc}
 800d538:	0801a16a 	stmdaeq	r1, {r1, r3, r5, r6, r8, sp, pc}
 800d53c:	0801a0bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, sp, pc}

0800d540 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
 800d540:	b513      	push	{r0, r1, r4, lr}
 800d542:	6804      	ldr	r4, [r0, #0]
 800d544:	b914      	cbnz	r4, 800d54c <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800d546:	601c      	str	r4, [r3, #0]
 800d548:	b002      	add	sp, #8
 800d54a:	bd10      	pop	{r4, pc}
 800d54c:	9300      	str	r3, [sp, #0]
 800d54e:	4613      	mov	r3, r2
 800d550:	460a      	mov	r2, r1
 800d552:	2100      	movs	r1, #0
 800d554:	f7ff fe88 	bl	800d268 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
 800d558:	e7f6      	b.n	800d548 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

0800d55c <ArtNetParams::Set(unsigned int)>:
 800d55c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d560:	1e4b      	subs	r3, r1, #1
 800d562:	2b1e      	cmp	r3, #30
 800d564:	4604      	mov	r4, r0
 800d566:	460f      	mov	r7, r1
 800d568:	d807      	bhi.n	800d57a <ArtNetParams::Set(unsigned int)+0x1e>
 800d56a:	4a43      	ldr	r2, [pc, #268]	; (800d678 <ArtNetParams::Set(unsigned int)+0x11c>)
 800d56c:	f1c1 0320 	rsb	r3, r1, #32
 800d570:	6811      	ldr	r1, [r2, #0]
 800d572:	428b      	cmp	r3, r1
 800d574:	bf94      	ite	ls
 800d576:	6013      	strls	r3, [r2, #0]
 800d578:	6011      	strhi	r1, [r2, #0]
 800d57a:	6863      	ldr	r3, [r4, #4]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d079      	beq.n	800d674 <ArtNetParams::Set(unsigned int)+0x118>
 800d580:	4a3e      	ldr	r2, [pc, #248]	; (800d67c <ArtNetParams::Set(unsigned int)+0x120>)
 800d582:	079b      	lsls	r3, r3, #30
 800d584:	6815      	ldr	r5, [r2, #0]
 800d586:	d504      	bpl.n	800d592 <ArtNetParams::Set(unsigned int)+0x36>
 800d588:	4628      	mov	r0, r5
 800d58a:	f104 0110 	add.w	r1, r4, #16
 800d58e:	f7fd ff25 	bl	800b3dc <ArtNetNode::SetShortName(char const*)>
 800d592:	6863      	ldr	r3, [r4, #4]
 800d594:	07de      	lsls	r6, r3, #31
 800d596:	d504      	bpl.n	800d5a2 <ArtNetParams::Set(unsigned int)+0x46>
 800d598:	4628      	mov	r0, r5
 800d59a:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800d59e:	f7fd ff45 	bl	800b42c <ArtNetNode::SetLongName(char const*)>
 800d5a2:	6863      	ldr	r3, [r4, #4]
 800d5a4:	0758      	lsls	r0, r3, #29
 800d5a6:	d504      	bpl.n	800d5b2 <ArtNetParams::Set(unsigned int)+0x56>
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	4628      	mov	r0, r5
 800d5ac:	7a21      	ldrb	r1, [r4, #8]
 800d5ae:	f7fe fa83 	bl	800bab8 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800d5b2:	6863      	ldr	r3, [r4, #4]
 800d5b4:	0719      	lsls	r1, r3, #28
 800d5b6:	d504      	bpl.n	800d5c2 <ArtNetParams::Set(unsigned int)+0x66>
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	4628      	mov	r0, r5
 800d5bc:	7a61      	ldrb	r1, [r4, #9]
 800d5be:	f7fe fa49 	bl	800ba54 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800d5c2:	2600      	movs	r6, #0
 800d5c4:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
 800d5c8:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800d678 <ArtNetParams::Set(unsigned int)+0x11c>
 800d5cc:	f104 0870 	add.w	r8, r4, #112	; 0x70
 800d5d0:	e03d      	b.n	800d64e <ArtNetParams::Set(unsigned int)+0xf2>
 800d5d2:	eb06 0a07 	add.w	sl, r6, r7
 800d5d6:	f1ba 0f1f 	cmp.w	sl, #31
 800d5da:	d83c      	bhi.n	800d656 <ArtNetParams::Set(unsigned int)+0xfa>
 800d5dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d5e0:	fa03 f206 	lsl.w	r2, r3, r6
 800d5e4:	6863      	ldr	r3, [r4, #4]
 800d5e6:	439a      	bics	r2, r3
 800d5e8:	d105      	bne.n	800d5f6 <ArtNetParams::Set(unsigned int)+0x9a>
 800d5ea:	4651      	mov	r1, sl
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	f898 2005 	ldrb.w	r2, [r8, #5]
 800d5f2:	f7fe fa93 	bl	800bb1c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800d5f6:	6863      	ldr	r3, [r4, #4]
 800d5f8:	fa0b f206 	lsl.w	r2, fp, r6
 800d5fc:	439a      	bics	r2, r3
 800d5fe:	d105      	bne.n	800d60c <ArtNetParams::Set(unsigned int)+0xb0>
 800d600:	4651      	mov	r1, sl
 800d602:	4628      	mov	r0, r5
 800d604:	f898 2000 	ldrb.w	r2, [r8]
 800d608:	f7fe fab3 	bl	800bb72 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800d60c:	2301      	movs	r3, #1
 800d60e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800d612:	40b3      	lsls	r3, r6
 800d614:	b29b      	uxth	r3, r3
 800d616:	4393      	bics	r3, r2
 800d618:	d109      	bne.n	800d62e <ArtNetParams::Set(unsigned int)+0xd2>
 800d61a:	f106 031c 	add.w	r3, r6, #28
 800d61e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d622:	4651      	mov	r1, sl
 800d624:	4628      	mov	r0, r5
 800d626:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800d62a:	f7fe fded 	bl	800c208 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>
 800d62e:	2201      	movs	r2, #1
 800d630:	f106 0308 	add.w	r3, r6, #8
 800d634:	89a0      	ldrh	r0, [r4, #12]
 800d636:	fa02 f303 	lsl.w	r3, r2, r3
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	4383      	bics	r3, r0
 800d63e:	d103      	bne.n	800d648 <ArtNetParams::Set(unsigned int)+0xec>
 800d640:	4651      	mov	r1, sl
 800d642:	4628      	mov	r0, r5
 800d644:	f7ff f8d6 	bl	800c7f4 <ArtNetNode::SetRmd(unsigned int, bool)>
 800d648:	3601      	adds	r6, #1
 800d64a:	f108 0801 	add.w	r8, r8, #1
 800d64e:	f8d9 3000 	ldr.w	r3, [r9]
 800d652:	42b3      	cmp	r3, r6
 800d654:	d8bd      	bhi.n	800d5d2 <ArtNetParams::Set(unsigned int)+0x76>
 800d656:	4628      	mov	r0, r5
 800d658:	7aa1      	ldrb	r1, [r4, #10]
 800d65a:	f7fe fab5 	bl	800bbc8 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800d65e:	6863      	ldr	r3, [r4, #4]
 800d660:	011a      	lsls	r2, r3, #4
 800d662:	bf44      	itt	mi
 800d664:	2201      	movmi	r2, #1
 800d666:	f885 20a6 	strbmi.w	r2, [r5, #166]	; 0xa6
 800d66a:	04db      	lsls	r3, r3, #19
 800d66c:	bf44      	itt	mi
 800d66e:	2301      	movmi	r3, #1
 800d670:	f885 38f4 	strbmi.w	r3, [r5, #2292]	; 0x8f4
 800d674:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d678:	2000c74c 	andcs	ip, r0, ip, asr #14
 800d67c:	2000c73c 	andcs	ip, r0, ip, lsr r7

0800d680 <ArtNetParams::Dump()>:
 800d680:	4770      	bx	lr
	...

0800d684 <ArtNetNode::HandleTrigger()>:
 800d684:	f890 20b6 	ldrb.w	r2, [r0, #182]	; 0xb6
 800d688:	4601      	mov	r1, r0
 800d68a:	2aff      	cmp	r2, #255	; 0xff
 800d68c:	d103      	bne.n	800d696 <ArtNetNode::HandleTrigger()+0x12>
 800d68e:	f890 30b7 	ldrb.w	r3, [r0, #183]	; 0xb7
 800d692:	2bff      	cmp	r3, #255	; 0xff
 800d694:	d008      	beq.n	800d6a8 <ArtNetNode::HandleTrigger()+0x24>
 800d696:	4b07      	ldr	r3, [pc, #28]	; (800d6b4 <ArtNetNode::HandleTrigger()+0x30>)
 800d698:	7818      	ldrb	r0, [r3, #0]
 800d69a:	4290      	cmp	r0, r2
 800d69c:	d109      	bne.n	800d6b2 <ArtNetNode::HandleTrigger()+0x2e>
 800d69e:	f891 20b7 	ldrb.w	r2, [r1, #183]	; 0xb7
 800d6a2:	785b      	ldrb	r3, [r3, #1]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d104      	bne.n	800d6b2 <ArtNetNode::HandleTrigger()+0x2e>
 800d6a8:	6948      	ldr	r0, [r1, #20]
 800d6aa:	31b8      	adds	r1, #184	; 0xb8
 800d6ac:	6803      	ldr	r3, [r0, #0]
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	4718      	bx	r3
 800d6b2:	4770      	bx	lr
 800d6b4:	0801a228 	stmdaeq	r1, {r3, r5, r9, sp, pc}

0800d6b8 <e131::universe_to_multicast_ip(unsigned short)>:
 800d6b8:	b513      	push	{r0, r1, r4, lr}
 800d6ba:	4604      	mov	r4, r0
 800d6bc:	a901      	add	r1, sp, #4
 800d6be:	4806      	ldr	r0, [pc, #24]	; (800d6d8 <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 800d6c0:	f008 ffca 	bl	8016658 <inet_aton>
 800d6c4:	9801      	ldr	r0, [sp, #4]
 800d6c6:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800d6ca:	0224      	lsls	r4, r4, #8
 800d6cc:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800d6d0:	4320      	orrs	r0, r4
 800d6d2:	b002      	add	sp, #8
 800d6d4:	bd10      	pop	{r4, pc}
 800d6d6:	bf00      	nop
 800d6d8:	0801a22e 	stmdaeq	r1, {r1, r2, r3, r5, r9, sp, pc}

0800d6dc <memset.constprop.0.isra.0>:
 800d6dc:	2300      	movs	r3, #0
 800d6de:	4401      	add	r1, r0
 800d6e0:	4288      	cmp	r0, r1
 800d6e2:	d100      	bne.n	800d6e6 <memset.constprop.0.isra.0+0xa>
 800d6e4:	4770      	bx	lr
 800d6e6:	f800 3b01 	strb.w	r3, [r0], #1
 800d6ea:	e7f9      	b.n	800d6e0 <memset.constprop.0.isra.0+0x4>

0800d6ec <memcpy.isra.0>:
 800d6ec:	3801      	subs	r0, #1
 800d6ee:	440a      	add	r2, r1
 800d6f0:	4291      	cmp	r1, r2
 800d6f2:	d100      	bne.n	800d6f6 <memcpy.isra.0+0xa>
 800d6f4:	4770      	bx	lr
 800d6f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6fa:	f800 3f01 	strb.w	r3, [r0, #1]!
 800d6fe:	e7f7      	b.n	800d6f0 <memcpy.isra.0+0x4>

0800d700 <E131Bridge::E131Bridge()>:
 800d700:	2300      	movs	r3, #0
 800d702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d706:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d708:	e9c0 2300 	strd	r2, r3, [r0]
 800d70c:	2201      	movs	r2, #1
 800d70e:	4604      	mov	r4, r0
 800d710:	2764      	movs	r7, #100	; 0x64
 800d712:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d716:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800d71a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800d71e:	6743      	str	r3, [r0, #116]	; 0x74
 800d720:	4b26      	ldr	r3, [pc, #152]	; (800d7bc <E131Bridge::E131Bridge()+0xbc>)
 800d722:	7202      	strb	r2, [r0, #8]
 800d724:	b093      	sub	sp, #76	; 0x4c
 800d726:	6018      	str	r0, [r3, #0]
 800d728:	f200 5514 	addw	r5, r0, #1300	; 0x514
 800d72c:	f600 5294 	addw	r2, r0, #3476	; 0xd94
 800d730:	f600 7614 	addw	r6, r0, #3860	; 0xf14
 800d734:	4628      	mov	r0, r5
 800d736:	2144      	movs	r1, #68	; 0x44
 800d738:	f7ff ffd0 	bl	800d6dc <memset.constprop.0.isra.0>
 800d73c:	4610      	mov	r0, r2
 800d73e:	210c      	movs	r1, #12
 800d740:	f7ff ffcc 	bl	800d6dc <memset.constprop.0.isra.0>
 800d744:	320c      	adds	r2, #12
 800d746:	f802 7c03 	strb.w	r7, [r2, #-3]
 800d74a:	4296      	cmp	r6, r2
 800d74c:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800d750:	d1f0      	bne.n	800d734 <E131Bridge::E131Bridge()+0x34>
 800d752:	2120      	movs	r1, #32
 800d754:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800d758:	f7ff ffc0 	bl	800d6dc <memset.constprop.0.isra.0>
 800d75c:	2301      	movs	r3, #1
 800d75e:	4d18      	ldr	r5, [pc, #96]	; (800d7c0 <E131Bridge::E131Bridge()+0xc0>)
 800d760:	4a18      	ldr	r2, [pc, #96]	; (800d7c4 <E131Bridge::E131Bridge()+0xc4>)
 800d762:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800d766:	682b      	ldr	r3, [r5, #0]
 800d768:	2140      	movs	r1, #64	; 0x40
 800d76a:	9200      	str	r2, [sp, #0]
 800d76c:	3320      	adds	r3, #32
 800d76e:	4a16      	ldr	r2, [pc, #88]	; (800d7c8 <E131Bridge::E131Bridge()+0xc8>)
 800d770:	a802      	add	r0, sp, #8
 800d772:	f7fc f84d 	bl	8009810 <snprintf>
 800d776:	233f      	movs	r3, #63	; 0x3f
 800d778:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d77c:	a902      	add	r1, sp, #8
 800d77e:	f811 0b01 	ldrb.w	r0, [r1], #1
 800d782:	b928      	cbnz	r0, 800d790 <E131Bridge::E131Bridge()+0x90>
 800d784:	4413      	add	r3, r2
 800d786:	429a      	cmp	r2, r3
 800d788:	d006      	beq.n	800d798 <E131Bridge::E131Bridge()+0x98>
 800d78a:	f802 0b01 	strb.w	r0, [r2], #1
 800d78e:	e7fa      	b.n	800d786 <E131Bridge::E131Bridge()+0x86>
 800d790:	3b01      	subs	r3, #1
 800d792:	f802 0b01 	strb.w	r0, [r2], #1
 800d796:	d1f2      	bne.n	800d77e <E131Bridge::E131Bridge()+0x7e>
 800d798:	2300      	movs	r3, #0
 800d79a:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 800d79e:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 800d7a2:	6828      	ldr	r0, [r5, #0]
 800d7a4:	f006 fb18 	bl	8013dd8 <Network::Begin(unsigned short)>
 800d7a8:	4621      	mov	r1, r4
 800d7aa:	4b08      	ldr	r3, [pc, #32]	; (800d7cc <E131Bridge::E131Bridge()+0xcc>)
 800d7ac:	f841 0b24 	str.w	r0, [r1], #36
 800d7b0:	6818      	ldr	r0, [r3, #0]
 800d7b2:	f008 feef 	bl	8016594 <Hardware::GetUuid(unsigned char*)>
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	b013      	add	sp, #76	; 0x4c
 800d7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7bc:	2000c750 	andcs	ip, r0, r0, asr r7
 800d7c0:	2001d2d4 	ldrdcs	sp, [r1], -r4
 800d7c4:	08019502 	stmdaeq	r1, {r1, r8, sl, ip, pc}
 800d7c8:	0801a23a 	stmdaeq	r1, {r1, r3, r4, r5, r9, sp, pc}
 800d7cc:	2001d99c 	mulcs	r1, ip, r9

0800d7d0 <E131Bridge::~E131Bridge()>:
 800d7d0:	4770      	bx	lr
	...

0800d7d4 <E131Bridge::Start()>:
 800d7d4:	6943      	ldr	r3, [r0, #20]
 800d7d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7d8:	4604      	mov	r4, r0
 800d7da:	b35b      	cbz	r3, 800d834 <E131Bridge::Start()+0x60>
 800d7dc:	6983      	ldr	r3, [r0, #24]
 800d7de:	b9cb      	cbnz	r3, 800d814 <E131Bridge::Start()+0x40>
 800d7e0:	a901      	add	r1, sp, #4
 800d7e2:	4818      	ldr	r0, [pc, #96]	; (800d844 <E131Bridge::Start()+0x70>)
 800d7e4:	f008 ff38 	bl	8016658 <inet_aton>
 800d7e8:	9b01      	ldr	r3, [sp, #4]
 800d7ea:	f240 207e 	movw	r0, #638	; 0x27e
 800d7ee:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 800d7f2:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 800d7f6:	6223      	str	r3, [r4, #32]
 800d7f8:	f008 ff2a 	bl	8016650 <operator new(unsigned int)>
 800d7fc:	61a0      	str	r0, [r4, #24]
 800d7fe:	4620      	mov	r0, r4
 800d800:	f000 fcfc 	bl	800e1fc <E131Bridge::FillDataPacket()>
 800d804:	f44f 608f 	mov.w	r0, #1144	; 0x478
 800d808:	f008 ff22 	bl	8016650 <operator new(unsigned int)>
 800d80c:	61e0      	str	r0, [r4, #28]
 800d80e:	4620      	mov	r0, r4
 800d810:	f000 fc4c 	bl	800e0ac <E131Bridge::FillDiscoveryPacket()>
 800d814:	2500      	movs	r5, #0
 800d816:	270c      	movs	r7, #12
 800d818:	f604 5696 	addw	r6, r4, #3478	; 0xd96
 800d81c:	fb07 f305 	mul.w	r3, r7, r5
 800d820:	5cf3      	ldrb	r3, [r6, r3]
 800d822:	b123      	cbz	r3, 800d82e <E131Bridge::Start()+0x5a>
 800d824:	6960      	ldr	r0, [r4, #20]
 800d826:	4629      	mov	r1, r5
 800d828:	6803      	ldr	r3, [r0, #0]
 800d82a:	689b      	ldr	r3, [r3, #8]
 800d82c:	4798      	blx	r3
 800d82e:	3501      	adds	r5, #1
 800d830:	2d20      	cmp	r5, #32
 800d832:	d1f3      	bne.n	800d81c <E131Bridge::Start()+0x48>
 800d834:	2102      	movs	r1, #2
 800d836:	4b04      	ldr	r3, [pc, #16]	; (800d848 <E131Bridge::Start()+0x74>)
 800d838:	6818      	ldr	r0, [r3, #0]
 800d83a:	b003      	add	sp, #12
 800d83c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d840:	f008 be24 	b.w	801648c <LedBlink::SetMode(ledblink::Mode)>
 800d844:	0801a22e 	stmdaeq	r1, {r1, r2, r3, r5, r9, sp, pc}
 800d848:	2001d998 	mulcs	r1, r8, r9

0800d84c <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 800d84c:	b570      	push	{r4, r5, r6, lr}
 800d84e:	4604      	mov	r4, r0
 800d850:	2300      	movs	r3, #0
 800d852:	2544      	movs	r5, #68	; 0x44
 800d854:	4610      	mov	r0, r2
 800d856:	f204 5214 	addw	r2, r4, #1300	; 0x514
 800d85a:	4299      	cmp	r1, r3
 800d85c:	d004      	beq.n	800d868 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x1c>
 800d85e:	fb05 f603 	mul.w	r6, r5, r3
 800d862:	5b96      	ldrh	r6, [r2, r6]
 800d864:	4286      	cmp	r6, r0
 800d866:	d00e      	beq.n	800d886 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3a>
 800d868:	3301      	adds	r3, #1
 800d86a:	2b20      	cmp	r3, #32
 800d86c:	d1f5      	bne.n	800d85a <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xe>
 800d86e:	4b06      	ldr	r3, [pc, #24]	; (800d888 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3c>)
 800d870:	6825      	ldr	r5, [r4, #0]
 800d872:	681c      	ldr	r4, [r3, #0]
 800d874:	f7ff ff20 	bl	800d6b8 <e131::universe_to_multicast_ip(unsigned short)>
 800d878:	4629      	mov	r1, r5
 800d87a:	4602      	mov	r2, r0
 800d87c:	4620      	mov	r0, r4
 800d87e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d882:	f006 babd 	b.w	8013e00 <Network::LeaveGroup(int, unsigned int)>
 800d886:	bd70      	pop	{r4, r5, r6, pc}
 800d888:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800d88c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800d88c:	b570      	push	{r4, r5, r6, lr}
 800d88e:	4604      	mov	r4, r0
 800d890:	461d      	mov	r5, r3
 800d892:	b1c1      	cbz	r1, 800d8c6 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 800d894:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800d898:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800d89c:	b12a      	cbz	r2, 800d8aa <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x1e>
 800d89e:	42aa      	cmp	r2, r5
 800d8a0:	d017      	beq.n	800d8d2 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800d8a2:	2120      	movs	r1, #32
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f7ff ffd1 	bl	800d84c <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800d8aa:	4b0a      	ldr	r3, [pc, #40]	; (800d8d4 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>)
 800d8ac:	8035      	strh	r5, [r6, #0]
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	6826      	ldr	r6, [r4, #0]
 800d8b2:	681c      	ldr	r4, [r3, #0]
 800d8b4:	f7ff ff00 	bl	800d6b8 <e131::universe_to_multicast_ip(unsigned short)>
 800d8b8:	4631      	mov	r1, r6
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	4620      	mov	r0, r4
 800d8be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d8c2:	f006 ba9a 	b.w	8013dfa <Network::JoinGroup(int, unsigned int)>
 800d8c6:	b122      	cbz	r2, 800d8d2 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800d8c8:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800d8cc:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 800d8d0:	e7e4      	b.n	800d89c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 800d8d2:	bd70      	pop	{r4, r5, r6, pc}
 800d8d4:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800d8d8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800d8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8dc:	4604      	mov	r4, r0
 800d8de:	460d      	mov	r5, r1
 800d8e0:	461e      	mov	r6, r3
 800d8e2:	bb02      	cbnz	r2, 800d926 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x4e>
 800d8e4:	291f      	cmp	r1, #31
 800d8e6:	d843      	bhi.n	800d970 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800d8e8:	230c      	movs	r3, #12
 800d8ea:	fb03 0301 	mla	r3, r3, r1, r0
 800d8ee:	f893 2d96 	ldrb.w	r2, [r3, #3478]	; 0xd96
 800d8f2:	b12a      	cbz	r2, 800d900 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x28>
 800d8f4:	f8b3 3d94 	ldrh.w	r3, [r3, #3476]	; 0xd94
 800d8f8:	42b3      	cmp	r3, r6
 800d8fa:	d109      	bne.n	800d910 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x38>
 800d8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d900:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800d904:	3201      	adds	r2, #1
 800d906:	f880 250a 	strb.w	r2, [r0, #1290]	; 0x50a
 800d90a:	2201      	movs	r2, #1
 800d90c:	f883 2d96 	strb.w	r2, [r3, #3478]	; 0xd96
 800d910:	230c      	movs	r3, #12
 800d912:	fb03 4405 	mla	r4, r3, r5, r4
 800d916:	4630      	mov	r0, r6
 800d918:	f8a4 6d94 	strh.w	r6, [r4, #3476]	; 0xd94
 800d91c:	f7ff fecc 	bl	800d6b8 <e131::universe_to_multicast_ip(unsigned short)>
 800d920:	f8c4 0d98 	str.w	r0, [r4, #3480]	; 0xd98
 800d924:	e7ea      	b.n	800d8fc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800d926:	2a02      	cmp	r2, #2
 800d928:	d122      	bne.n	800d970 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800d92a:	291f      	cmp	r1, #31
 800d92c:	d8e6      	bhi.n	800d8fc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800d92e:	2344      	movs	r3, #68	; 0x44
 800d930:	fb03 0301 	mla	r3, r3, r1, r0
 800d934:	f893 2516 	ldrb.w	r2, [r3, #1302]	; 0x516
 800d938:	b152      	cbz	r2, 800d950 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x78>
 800d93a:	2200      	movs	r2, #0
 800d93c:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800d940:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800d944:	4632      	mov	r2, r6
 800d946:	3b01      	subs	r3, #1
 800d948:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800d94c:	f7ff ff7e 	bl	800d84c <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800d950:	230c      	movs	r3, #12
 800d952:	fb03 4505 	mla	r5, r3, r5, r4
 800d956:	f895 3d96 	ldrb.w	r3, [r5, #3478]	; 0xd96
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d0ce      	beq.n	800d8fc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800d95e:	2300      	movs	r3, #0
 800d960:	f885 3d96 	strb.w	r3, [r5, #3478]	; 0xd96
 800d964:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800d968:	3b01      	subs	r3, #1
 800d96a:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800d96e:	e7c5      	b.n	800d8fc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800d970:	2344      	movs	r3, #68	; 0x44
 800d972:	fb03 4305 	mla	r3, r3, r5, r4
 800d976:	f893 2516 	ldrb.w	r2, [r3, #1302]	; 0x516
 800d97a:	b1d2      	cbz	r2, 800d9b2 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xda>
 800d97c:	f8b3 3514 	ldrh.w	r3, [r3, #1300]	; 0x514
 800d980:	42b3      	cmp	r3, r6
 800d982:	d0bb      	beq.n	800d8fc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800d984:	4632      	mov	r2, r6
 800d986:	4629      	mov	r1, r5
 800d988:	4620      	mov	r0, r4
 800d98a:	f7ff ff5f 	bl	800d84c <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800d98e:	4b0d      	ldr	r3, [pc, #52]	; (800d9c4 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xec>)
 800d990:	4630      	mov	r0, r6
 800d992:	681f      	ldr	r7, [r3, #0]
 800d994:	f8d4 8000 	ldr.w	r8, [r4]
 800d998:	f7ff fe8e 	bl	800d6b8 <e131::universe_to_multicast_ip(unsigned short)>
 800d99c:	4641      	mov	r1, r8
 800d99e:	4602      	mov	r2, r0
 800d9a0:	4638      	mov	r0, r7
 800d9a2:	f006 fa2a 	bl	8013dfa <Network::JoinGroup(int, unsigned int)>
 800d9a6:	2344      	movs	r3, #68	; 0x44
 800d9a8:	fb03 4305 	mla	r3, r3, r5, r4
 800d9ac:	f8a3 6514 	strh.w	r6, [r3, #1300]	; 0x514
 800d9b0:	e7a4      	b.n	800d8fc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800d9b2:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 800d9b6:	3201      	adds	r2, #1
 800d9b8:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 800d9bc:	2201      	movs	r2, #1
 800d9be:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800d9c2:	e7e4      	b.n	800d98e <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xb6>
 800d9c4:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800d9c8 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 800d9c8:	b953      	cbnz	r3, 800d9e0 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x18>
 800d9ca:	291f      	cmp	r1, #31
 800d9cc:	d811      	bhi.n	800d9f2 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x2a>
 800d9ce:	230c      	movs	r3, #12
 800d9d0:	fb03 0001 	mla	r0, r3, r1, r0
 800d9d4:	f8b0 3d94 	ldrh.w	r3, [r0, #3476]	; 0xd94
 800d9d8:	f890 0d96 	ldrb.w	r0, [r0, #3478]	; 0xd96
 800d9dc:	8013      	strh	r3, [r2, #0]
 800d9de:	4770      	bx	lr
 800d9e0:	2344      	movs	r3, #68	; 0x44
 800d9e2:	fb03 0001 	mla	r0, r3, r1, r0
 800d9e6:	f8b0 3514 	ldrh.w	r3, [r0, #1300]	; 0x514
 800d9ea:	f890 0516 	ldrb.w	r0, [r0, #1302]	; 0x516
 800d9ee:	8013      	strh	r3, [r2, #0]
 800d9f0:	4770      	bx	lr
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	4770      	bx	lr

0800d9f6 <E131Bridge::UpdateMergeStatus(unsigned int)>:
 800d9f6:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 800d9fa:	b923      	cbnz	r3, 800da06 <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 800da02:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800da06:	2344      	movs	r3, #68	; 0x44
 800da08:	fb03 0001 	mla	r0, r3, r1, r0
 800da0c:	2301      	movs	r3, #1
 800da0e:	f880 3555 	strb.w	r3, [r0, #1365]	; 0x555
 800da12:	4770      	bx	lr

0800da14 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 800da14:	4602      	mov	r2, r0
 800da16:	2044      	movs	r0, #68	; 0x44
 800da18:	4348      	muls	r0, r1
 800da1a:	b570      	push	{r4, r5, r6, lr}
 800da1c:	1815      	adds	r5, r2, r0
 800da1e:	460c      	mov	r4, r1
 800da20:	68d3      	ldr	r3, [r2, #12]
 800da22:	f8d5 1518 	ldr.w	r1, [r5, #1304]	; 0x518
 800da26:	1a5b      	subs	r3, r3, r1
 800da28:	f242 7110 	movw	r1, #10000	; 0x2710
 800da2c:	428b      	cmp	r3, r1
 800da2e:	d90a      	bls.n	800da46 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 800da30:	2600      	movs	r6, #0
 800da32:	f500 60a4 	add.w	r0, r0, #1312	; 0x520
 800da36:	2110      	movs	r1, #16
 800da38:	f8c5 651c 	str.w	r6, [r5, #1308]	; 0x51c
 800da3c:	4410      	add	r0, r2
 800da3e:	f7ff fe4d 	bl	800d6dc <memset.constprop.0.isra.0>
 800da42:	f885 6555 	strb.w	r6, [r5, #1365]	; 0x555
 800da46:	2344      	movs	r3, #68	; 0x44
 800da48:	435c      	muls	r4, r3
 800da4a:	1915      	adds	r5, r2, r4
 800da4c:	f8d5 1534 	ldr.w	r1, [r5, #1332]	; 0x534
 800da50:	68d3      	ldr	r3, [r2, #12]
 800da52:	1a5b      	subs	r3, r3, r1
 800da54:	f242 7110 	movw	r1, #10000	; 0x2710
 800da58:	428b      	cmp	r3, r1
 800da5a:	d90a      	bls.n	800da72 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800da5c:	2600      	movs	r6, #0
 800da5e:	f204 543c 	addw	r4, r4, #1340	; 0x53c
 800da62:	2110      	movs	r1, #16
 800da64:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
 800da68:	1910      	adds	r0, r2, r4
 800da6a:	f7ff fe37 	bl	800d6dc <memset.constprop.0.isra.0>
 800da6e:	f885 6555 	strb.w	r6, [r5, #1365]	; 0x555
 800da72:	4611      	mov	r1, r2
 800da74:	2300      	movs	r3, #0
 800da76:	f502 6008 	add.w	r0, r2, #2176	; 0x880
 800da7a:	f891 4555 	ldrb.w	r4, [r1, #1365]	; 0x555
 800da7e:	3144      	adds	r1, #68	; 0x44
 800da80:	4281      	cmp	r1, r0
 800da82:	ea43 0304 	orr.w	r3, r3, r4
 800da86:	d1f8      	bne.n	800da7a <E131Bridge::CheckMergeTimeouts(unsigned int)+0x66>
 800da88:	b923      	cbnz	r3, 800da94 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800da8a:	2101      	movs	r1, #1
 800da8c:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 800da90:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 800da94:	bd70      	pop	{r4, r5, r6, pc}

0800da96 <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 800da96:	2244      	movs	r2, #68	; 0x44
 800da98:	fb02 0101 	mla	r1, r2, r1, r0
 800da9c:	68c3      	ldr	r3, [r0, #12]
 800da9e:	b510      	push	{r4, lr}
 800daa0:	f8d1 2534 	ldr.w	r2, [r1, #1332]	; 0x534
 800daa4:	f8d1 451c 	ldr.w	r4, [r1, #1308]	; 0x51c
 800daa8:	f8d1 0538 	ldr.w	r0, [r1, #1336]	; 0x538
 800daac:	1a9a      	subs	r2, r3, r2
 800daae:	b184      	cbz	r4, 800dad2 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 800dab0:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
 800dab4:	1a5b      	subs	r3, r3, r1
 800dab6:	b128      	cbz	r0, 800dac4 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 800dab8:	f242 700f 	movw	r0, #9999	; 0x270f
 800dabc:	4283      	cmp	r3, r0
 800dabe:	d90d      	bls.n	800dadc <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 800dac0:	4282      	cmp	r2, r0
 800dac2:	e002      	b.n	800daca <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 800dac4:	f242 7010 	movw	r0, #10000	; 0x2710
 800dac8:	4283      	cmp	r3, r0
 800daca:	bf94      	ite	ls
 800dacc:	2000      	movls	r0, #0
 800dace:	2001      	movhi	r0, #1
 800dad0:	bd10      	pop	{r4, pc}
 800dad2:	2800      	cmp	r0, #0
 800dad4:	d0fc      	beq.n	800dad0 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 800dad6:	f242 7010 	movw	r0, #10000	; 0x2710
 800dada:	e7f1      	b.n	800dac0 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 800dadc:	2000      	movs	r0, #0
 800dade:	e7f7      	b.n	800dad0 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

0800dae0 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 800dae0:	684a      	ldr	r2, [r1, #4]
 800dae2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800dae4:	b510      	push	{r4, lr}
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d10d      	bne.n	800db06 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 800daea:	f100 0391 	add.w	r3, r0, #145	; 0x91
 800daee:	3107      	adds	r1, #7
 800daf0:	30a1      	adds	r0, #161	; 0xa1
 800daf2:	4283      	cmp	r3, r0
 800daf4:	d101      	bne.n	800dafa <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x1a>
 800daf6:	2001      	movs	r0, #1
 800daf8:	bd10      	pop	{r4, pc}
 800dafa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dafe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800db02:	4294      	cmp	r4, r2
 800db04:	d0f5      	beq.n	800daf2 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 800db06:	2000      	movs	r0, #0
 800db08:	e7f6      	b.n	800daf8 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x18>
	...

0800db0c <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800db0c:	2301      	movs	r3, #1
 800db0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db12:	4604      	mov	r4, r0
 800db14:	4690      	mov	r8, r2
 800db16:	460f      	mov	r7, r1
 800db18:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800db1c:	2900      	cmp	r1, #0
 800db1e:	d044      	beq.n	800dbaa <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9e>
 800db20:	2a00      	cmp	r2, #0
 800db22:	d042      	beq.n	800dbaa <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9e>
 800db24:	2600      	movs	r6, #0
 800db26:	f240 6904 	movw	r9, #1540	; 0x604
 800db2a:	4632      	mov	r2, r6
 800db2c:	4637      	mov	r7, r6
 800db2e:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
 800db32:	f880 350c 	strb.w	r3, [r0, #1292]	; 0x50c
 800db36:	f500 65a4 	add.w	r5, r0, #1312	; 0x520
 800db3a:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
 800db3e:	f1b8 0f00 	cmp.w	r8, #0
 800db42:	d018      	beq.n	800db76 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6a>
 800db44:	2110      	movs	r1, #16
 800db46:	4628      	mov	r0, r5
 800db48:	f845 7c04 	str.w	r7, [r5, #-4]
 800db4c:	f7ff fdc6 	bl	800d6dc <memset.constprop.0.isra.0>
 800db50:	2110      	movs	r1, #16
 800db52:	f105 001c 	add.w	r0, r5, #28
 800db56:	61af      	str	r7, [r5, #24]
 800db58:	f7ff fdc0 	bl	800d6dc <memset.constprop.0.isra.0>
 800db5c:	f7fe f9ba 	bl	800bed4 <lightset::Data::Get()>
 800db60:	4642      	mov	r2, r8
 800db62:	fb09 0006 	mla	r0, r9, r6, r0
 800db66:	f8c0 7600 	str.w	r7, [r0, #1536]	; 0x600
 800db6a:	f885 7034 	strb.w	r7, [r5, #52]	; 0x34
 800db6e:	f885 7036 	strb.w	r7, [r5, #54]	; 0x36
 800db72:	f885 7035 	strb.w	r7, [r5, #53]	; 0x35
 800db76:	3601      	adds	r6, #1
 800db78:	2e20      	cmp	r6, #32
 800db7a:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800db7e:	d1dc      	bne.n	800db3a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2e>
 800db80:	b12a      	cbz	r2, 800db8e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800db82:	f8d4 1510 	ldr.w	r1, [r4, #1296]	; 0x510
 800db86:	2901      	cmp	r1, #1
 800db88:	d04a      	beq.n	800dc20 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x114>
 800db8a:	2902      	cmp	r1, #2
 800db8c:	d04d      	beq.n	800dc2a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x11e>
 800db8e:	4b29      	ldr	r3, [pc, #164]	; (800dc34 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x128>)
 800db90:	2102      	movs	r1, #2
 800db92:	6818      	ldr	r0, [r3, #0]
 800db94:	f008 fc7a 	bl	801648c <LedBlink::SetMode(ledblink::Mode)>
 800db98:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800db9c:	f023 0302 	bic.w	r3, r3, #2
 800dba0:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800dba4:	b003      	add	sp, #12
 800dba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbaa:	2600      	movs	r6, #0
 800dbac:	f240 6b04 	movw	fp, #1540	; 0x604
 800dbb0:	4632      	mov	r2, r6
 800dbb2:	46b1      	mov	r9, r6
 800dbb4:	f204 553c 	addw	r5, r4, #1340	; 0x53c
 800dbb8:	f895 a01a 	ldrb.w	sl, [r5, #26]
 800dbbc:	f1ba 0f00 	cmp.w	sl, #0
 800dbc0:	d028      	beq.n	800dc14 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x108>
 800dbc2:	b15f      	cbz	r7, 800dbdc <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd0>
 800dbc4:	f855 3c20 	ldr.w	r3, [r5, #-32]
 800dbc8:	b143      	cbz	r3, 800dbdc <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd0>
 800dbca:	2110      	movs	r1, #16
 800dbcc:	f845 9c20 	str.w	r9, [r5, #-32]
 800dbd0:	f1a5 001c 	sub.w	r0, r5, #28
 800dbd4:	f7ff fd82 	bl	800d6dc <memset.constprop.0.isra.0>
 800dbd8:	f885 9019 	strb.w	r9, [r5, #25]
 800dbdc:	f1b8 0f00 	cmp.w	r8, #0
 800dbe0:	d00a      	beq.n	800dbf8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xec>
 800dbe2:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800dbe6:	b13b      	cbz	r3, 800dbf8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xec>
 800dbe8:	2110      	movs	r1, #16
 800dbea:	4628      	mov	r0, r5
 800dbec:	f845 9c04 	str.w	r9, [r5, #-4]
 800dbf0:	f7ff fd74 	bl	800d6dc <memset.constprop.0.isra.0>
 800dbf4:	f885 9019 	strb.w	r9, [r5, #25]
 800dbf8:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800dbfc:	b953      	cbnz	r3, 800dc14 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x108>
 800dbfe:	9301      	str	r3, [sp, #4]
 800dc00:	f7fe f968 	bl	800bed4 <lightset::Data::Get()>
 800dc04:	4652      	mov	r2, sl
 800dc06:	fb0b 0006 	mla	r0, fp, r6, r0
 800dc0a:	9b01      	ldr	r3, [sp, #4]
 800dc0c:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
 800dc10:	762b      	strb	r3, [r5, #24]
 800dc12:	76ab      	strb	r3, [r5, #26]
 800dc14:	3601      	adds	r6, #1
 800dc16:	2e20      	cmp	r6, #32
 800dc18:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800dc1c:	d1cc      	bne.n	800dbb8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xac>
 800dc1e:	e7af      	b.n	800db80 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x74>
 800dc20:	6860      	ldr	r0, [r4, #4]
 800dc22:	6803      	ldr	r3, [r0, #0]
 800dc24:	695b      	ldr	r3, [r3, #20]
 800dc26:	4798      	blx	r3
 800dc28:	e7b1      	b.n	800db8e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800dc2a:	6860      	ldr	r0, [r4, #4]
 800dc2c:	6803      	ldr	r3, [r0, #0]
 800dc2e:	699b      	ldr	r3, [r3, #24]
 800dc30:	4798      	blx	r3
 800dc32:	e7ac      	b.n	800db8e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 800dc34:	2001d998 	mulcs	r1, r8, r9

0800dc38 <E131Bridge::HandleDmx()>:
 800dc38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc40:	4604      	mov	r4, r0
 800dc42:	2600      	movs	r6, #0
 800dc44:	f8b0 70f7 	ldrh.w	r7, [r0, #247]	; 0xf7
 800dc48:	b085      	sub	sp, #20
 800dc4a:	ba7f      	rev16	r7, r7
 800dc4c:	b2bf      	uxth	r7, r7
 800dc4e:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 800dc52:	3f01      	subs	r7, #1
 800dc54:	f500 65a4 	add.w	r5, r0, #1312	; 0x520
 800dc58:	9301      	str	r3, [sp, #4]
 800dc5a:	f815 3c0a 	ldrb.w	r3, [r5, #-10]
 800dc5e:	b353      	cbz	r3, 800dcb6 <E131Bridge::HandleDmx()+0x7e>
 800dc60:	f835 3c0c 	ldrh.w	r3, [r5, #-12]
 800dc64:	f8b4 20ed 	ldrh.w	r2, [r4, #237]	; 0xed
 800dc68:	ba5b      	rev16	r3, r3
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d122      	bne.n	800dcb6 <E131Bridge::HandleDmx()+0x7e>
 800dc70:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800dc74:	f1a5 0108 	sub.w	r1, r5, #8
 800dc78:	4620      	mov	r0, r4
 800dc7a:	9302      	str	r3, [sp, #8]
 800dc7c:	f7ff ff30 	bl	800dae0 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800dc80:	f105 0114 	add.w	r1, r5, #20
 800dc84:	4682      	mov	sl, r0
 800dc86:	4620      	mov	r0, r4
 800dc88:	f7ff ff2a 	bl	800dae0 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800dc8c:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800dc90:	4680      	mov	r8, r0
 800dc92:	f1ba 0f00 	cmp.w	sl, #0
 800dc96:	d01a      	beq.n	800dcce <E131Bridge::HandleDmx()+0x96>
 800dc98:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800dc9c:	7c2a      	ldrb	r2, [r5, #16]
 800dc9e:	742b      	strb	r3, [r5, #16]
 800dca0:	3313      	adds	r3, #19
 800dca2:	1a9b      	subs	r3, r3, r2
 800dca4:	b2db      	uxtb	r3, r3
 800dca6:	2b13      	cmp	r3, #19
 800dca8:	d905      	bls.n	800dcb6 <E131Bridge::HandleDmx()+0x7e>
 800dcaa:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800dcae:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800dcb2:	2a00      	cmp	r2, #0
 800dcb4:	da14      	bge.n	800dce0 <E131Bridge::HandleDmx()+0xa8>
 800dcb6:	9b01      	ldr	r3, [sp, #4]
 800dcb8:	3601      	adds	r6, #1
 800dcba:	f203 6304 	addw	r3, r3, #1540	; 0x604
 800dcbe:	2e20      	cmp	r6, #32
 800dcc0:	9301      	str	r3, [sp, #4]
 800dcc2:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800dcc6:	d1c8      	bne.n	800dc5a <E131Bridge::HandleDmx()+0x22>
 800dcc8:	b005      	add	sp, #20
 800dcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcce:	2800      	cmp	r0, #0
 800dcd0:	d0eb      	beq.n	800dcaa <E131Bridge::HandleDmx()+0x72>
 800dcd2:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800dcd6:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800dcda:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800dcde:	e7df      	b.n	800dca0 <E131Bridge::HandleDmx()+0x68>
 800dce0:	065a      	lsls	r2, r3, #25
 800dce2:	d50b      	bpl.n	800dcfc <E131Bridge::HandleDmx()+0xc4>
 800dce4:	f1ba 0f00 	cmp.w	sl, #0
 800dce8:	d102      	bne.n	800dcf0 <E131Bridge::HandleDmx()+0xb8>
 800dcea:	f1b8 0f00 	cmp.w	r8, #0
 800dcee:	d0e2      	beq.n	800dcb6 <E131Bridge::HandleDmx()+0x7e>
 800dcf0:	4642      	mov	r2, r8
 800dcf2:	4651      	mov	r1, sl
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	f7ff ff09 	bl	800db0c <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800dcfa:	e7dc      	b.n	800dcb6 <E131Bridge::HandleDmx()+0x7e>
 800dcfc:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800dd00:	b133      	cbz	r3, 800dd10 <E131Bridge::HandleDmx()+0xd8>
 800dd02:	f894 34f9 	ldrb.w	r3, [r4, #1273]	; 0x4f9
 800dd06:	b91b      	cbnz	r3, 800dd10 <E131Bridge::HandleDmx()+0xd8>
 800dd08:	4631      	mov	r1, r6
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	f7ff fe82 	bl	800da14 <E131Bridge::CheckMergeTimeouts(unsigned int)>
 800dd10:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 800dd14:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d259      	bcs.n	800ddd0 <E131Bridge::HandleDmx()+0x198>
 800dd1c:	4631      	mov	r1, r6
 800dd1e:	4620      	mov	r0, r4
 800dd20:	9303      	str	r3, [sp, #12]
 800dd22:	f7ff feb8 	bl	800da96 <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 800dd26:	2800      	cmp	r0, #0
 800dd28:	d0c5      	beq.n	800dcb6 <E131Bridge::HandleDmx()+0x7e>
 800dd2a:	9b03      	ldr	r3, [sp, #12]
 800dd2c:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800dd30:	9b02      	ldr	r3, [sp, #8]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d154      	bne.n	800dde0 <E131Bridge::HandleDmx()+0x1a8>
 800dd36:	f1bb 0f00 	cmp.w	fp, #0
 800dd3a:	d15c      	bne.n	800ddf6 <E131Bridge::HandleDmx()+0x1be>
 800dd3c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800dd3e:	2210      	movs	r2, #16
 800dd40:	f845 3c04 	str.w	r3, [r5, #-4]
 800dd44:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800dd48:	4628      	mov	r0, r5
 800dd4a:	742b      	strb	r3, [r5, #16]
 800dd4c:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800dd50:	f7ff fccc 	bl	800d6ec <memcpy.isra.0>
 800dd54:	68e3      	ldr	r3, [r4, #12]
 800dd56:	463a      	mov	r2, r7
 800dd58:	4649      	mov	r1, r9
 800dd5a:	4630      	mov	r0, r6
 800dd5c:	f845 3c08 	str.w	r3, [r5, #-8]
 800dd60:	f7fe f8c4 	bl	800beec <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800dd64:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800dd68:	069b      	lsls	r3, r3, #26
 800dd6a:	f100 80aa 	bmi.w	800dec2 <E131Bridge::HandleDmx()+0x28a>
 800dd6e:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 800dd72:	b29a      	uxth	r2, r3
 800dd74:	2a00      	cmp	r2, #0
 800dd76:	f000 80a8 	beq.w	800deca <E131Bridge::HandleDmx()+0x292>
 800dd7a:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 800dd7e:	2a00      	cmp	r2, #0
 800dd80:	f040 80a3 	bne.w	800deca <E131Bridge::HandleDmx()+0x292>
 800dd84:	ba5b      	rev16	r3, r3
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	f1ba 0f00 	cmp.w	sl, #0
 800dd8c:	f040 8096 	bne.w	800debc <E131Bridge::HandleDmx()+0x284>
 800dd90:	f1b8 0f00 	cmp.w	r8, #0
 800dd94:	f040 8092 	bne.w	800debc <E131Bridge::HandleDmx()+0x284>
 800dd98:	69aa      	ldr	r2, [r5, #24]
 800dd9a:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800dd9e:	3a00      	subs	r2, #0
 800dda0:	bf18      	it	ne
 800dda2:	2201      	movne	r2, #1
 800dda4:	3900      	subs	r1, #0
 800dda6:	bf18      	it	ne
 800dda8:	2101      	movne	r1, #1
 800ddaa:	4620      	mov	r0, r4
 800ddac:	f7ff fd6e 	bl	800d88c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800ddb0:	f240 1301 	movw	r3, #257	; 0x101
 800ddb4:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800ddb8:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	f040 8089 	bne.w	800ded4 <E131Bridge::HandleDmx()+0x29c>
 800ddc2:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800ddc6:	f043 0302 	orr.w	r3, r3, #2
 800ddca:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800ddce:	e772      	b.n	800dcb6 <E131Bridge::HandleDmx()+0x7e>
 800ddd0:	d9ae      	bls.n	800dd30 <E131Bridge::HandleDmx()+0xf8>
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f845 2c04 	str.w	r2, [r5, #-4]
 800ddd8:	61aa      	str	r2, [r5, #24]
 800ddda:	f884 24f5 	strb.w	r2, [r4, #1269]	; 0x4f5
 800ddde:	e7a5      	b.n	800dd2c <E131Bridge::HandleDmx()+0xf4>
 800dde0:	f1ba 0f00 	cmp.w	sl, #0
 800dde4:	f000 809a 	beq.w	800df1c <E131Bridge::HandleDmx()+0x2e4>
 800dde8:	f1bb 0f00 	cmp.w	fp, #0
 800ddec:	d159      	bne.n	800dea2 <E131Bridge::HandleDmx()+0x26a>
 800ddee:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ddf2:	742b      	strb	r3, [r5, #16]
 800ddf4:	e7ae      	b.n	800dd54 <E131Bridge::HandleDmx()+0x11c>
 800ddf6:	f1b8 0f00 	cmp.w	r8, #0
 800ddfa:	d038      	beq.n	800de6e <E131Bridge::HandleDmx()+0x236>
 800ddfc:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800de00:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800de04:	68e3      	ldr	r3, [r4, #12]
 800de06:	616b      	str	r3, [r5, #20]
 800de08:	f7fe f864 	bl	800bed4 <lightset::Data::Get()>
 800de0c:	4683      	mov	fp, r0
 800de0e:	9b01      	ldr	r3, [sp, #4]
 800de10:	463a      	mov	r2, r7
 800de12:	f5a3 7000 	sub.w	r0, r3, #512	; 0x200
 800de16:	4649      	mov	r1, r9
 800de18:	4458      	add	r0, fp
 800de1a:	f7ff fc67 	bl	800d6ec <memcpy.isra.0>
 800de1e:	f240 6304 	movw	r3, #1540	; 0x604
 800de22:	fb03 b306 	mla	r3, r3, r6, fp
 800de26:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800de2a:	9b01      	ldr	r3, [sp, #4]
 800de2c:	463a      	mov	r2, r7
 800de2e:	4649      	mov	r1, r9
 800de30:	eb0b 0003 	add.w	r0, fp, r3
 800de34:	f7ff fc5a 	bl	800d6ec <memcpy.isra.0>
 800de38:	e794      	b.n	800dd64 <E131Bridge::HandleDmx()+0x12c>
 800de3a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800de3c:	2210      	movs	r2, #16
 800de3e:	61ab      	str	r3, [r5, #24]
 800de40:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800de44:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800de48:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800de4c:	f105 001c 	add.w	r0, r5, #28
 800de50:	f7ff fc4c 	bl	800d6ec <memcpy.isra.0>
 800de54:	68e3      	ldr	r3, [r4, #12]
 800de56:	4631      	mov	r1, r6
 800de58:	4620      	mov	r0, r4
 800de5a:	616b      	str	r3, [r5, #20]
 800de5c:	f7ff fdcb 	bl	800d9f6 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800de60:	463a      	mov	r2, r7
 800de62:	4649      	mov	r1, r9
 800de64:	4630      	mov	r0, r6
 800de66:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800de68:	f7fe f886 	bl	800bf78 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800de6c:	e77a      	b.n	800dd64 <E131Bridge::HandleDmx()+0x12c>
 800de6e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800de70:	2210      	movs	r2, #16
 800de72:	f845 3c04 	str.w	r3, [r5, #-4]
 800de76:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800de7a:	4628      	mov	r0, r5
 800de7c:	742b      	strb	r3, [r5, #16]
 800de7e:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800de82:	f7ff fc33 	bl	800d6ec <memcpy.isra.0>
 800de86:	68e3      	ldr	r3, [r4, #12]
 800de88:	4631      	mov	r1, r6
 800de8a:	4620      	mov	r0, r4
 800de8c:	f845 3c08 	str.w	r3, [r5, #-8]
 800de90:	f7ff fdb1 	bl	800d9f6 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800de94:	463a      	mov	r2, r7
 800de96:	4649      	mov	r1, r9
 800de98:	4630      	mov	r0, r6
 800de9a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800de9c:	f7fe f843 	bl	800bf26 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800dea0:	e760      	b.n	800dd64 <E131Bridge::HandleDmx()+0x12c>
 800dea2:	f1b8 0f00 	cmp.w	r8, #0
 800dea6:	d103      	bne.n	800deb0 <E131Bridge::HandleDmx()+0x278>
 800dea8:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800deac:	742b      	strb	r3, [r5, #16]
 800deae:	e7ea      	b.n	800de86 <E131Bridge::HandleDmx()+0x24e>
 800deb0:	4820      	ldr	r0, [pc, #128]	; (800df34 <E131Bridge::HandleDmx()+0x2fc>)
 800deb2:	b005      	add	sp, #20
 800deb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb8:	f7fb bc82 	b.w	80097c0 <printf>
 800debc:	4642      	mov	r2, r8
 800debe:	4651      	mov	r1, sl
 800dec0:	e773      	b.n	800ddaa <E131Bridge::HandleDmx()+0x172>
 800dec2:	f04f 0300 	mov.w	r3, #0
 800dec6:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 800deca:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800dece:	2b00      	cmp	r3, #0
 800ded0:	f47f af72 	bne.w	800ddb8 <E131Bridge::HandleDmx()+0x180>
 800ded4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800ded8:	f7fd fffc 	bl	800bed4 <lightset::Data::Get()>
 800dedc:	f240 6304 	movw	r3, #1540	; 0x604
 800dee0:	f8d8 2000 	ldr.w	r2, [r8]
 800dee4:	fb03 0306 	mla	r3, r3, r6, r0
 800dee8:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800deec:	9a01      	ldr	r2, [sp, #4]
 800deee:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
 800def2:	1882      	adds	r2, r0, r2
 800def4:	4631      	mov	r1, r6
 800def6:	4640      	mov	r0, r8
 800def8:	47d0      	blx	sl
 800defa:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800defe:	2b00      	cmp	r3, #0
 800df00:	f47f af5f 	bne.w	800ddc2 <E131Bridge::HandleDmx()+0x18a>
 800df04:	6860      	ldr	r0, [r4, #4]
 800df06:	4631      	mov	r1, r6
 800df08:	6803      	ldr	r3, [r0, #0]
 800df0a:	689b      	ldr	r3, [r3, #8]
 800df0c:	4798      	blx	r3
 800df0e:	f04f 0301 	mov.w	r3, #1
 800df12:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 800df16:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 800df1a:	e752      	b.n	800ddc2 <E131Bridge::HandleDmx()+0x18a>
 800df1c:	f1bb 0f00 	cmp.w	fp, #0
 800df20:	d08b      	beq.n	800de3a <E131Bridge::HandleDmx()+0x202>
 800df22:	f1b8 0f00 	cmp.w	r8, #0
 800df26:	d0c3      	beq.n	800deb0 <E131Bridge::HandleDmx()+0x278>
 800df28:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800df2c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800df30:	e790      	b.n	800de54 <E131Bridge::HandleDmx()+0x21c>
 800df32:	bf00      	nop
 800df34:	0801a243 	stmdaeq	r1, {r0, r1, r6, r9, sp, pc}

0800df38 <E131Bridge::IsValidRoot()>:
 800df38:	b530      	push	{r4, r5, lr}
 800df3a:	4a0d      	ldr	r2, [pc, #52]	; (800df70 <E131Bridge::IsValidRoot()+0x38>)
 800df3c:	f100 037f 	add.w	r3, r0, #127	; 0x7f
 800df40:	f100 018b 	add.w	r1, r0, #139	; 0x8b
 800df44:	4299      	cmp	r1, r3
 800df46:	d109      	bne.n	800df5c <E131Bridge::IsValidRoot()+0x24>
 800df48:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 800df4c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800df50:	d00c      	beq.n	800df6c <E131Bridge::IsValidRoot()+0x34>
 800df52:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800df56:	4258      	negs	r0, r3
 800df58:	4158      	adcs	r0, r3
 800df5a:	bd30      	pop	{r4, r5, pc}
 800df5c:	f812 4b01 	ldrb.w	r4, [r2], #1
 800df60:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800df64:	42a5      	cmp	r5, r4
 800df66:	d0ed      	beq.n	800df44 <E131Bridge::IsValidRoot()+0xc>
 800df68:	2000      	movs	r0, #0
 800df6a:	e7f6      	b.n	800df5a <E131Bridge::IsValidRoot()+0x22>
 800df6c:	2001      	movs	r0, #1
 800df6e:	e7f4      	b.n	800df5a <E131Bridge::IsValidRoot()+0x22>
 800df70:	0801a369 	stmdaeq	r1, {r0, r3, r5, r6, r8, r9, sp, pc}

0800df74 <E131Bridge::IsValidDataPacket()>:
 800df74:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800df78:	2b02      	cmp	r3, #2
 800df7a:	d10d      	bne.n	800df98 <E131Bridge::IsValidDataPacket()+0x24>
 800df7c:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 800df80:	2ba1      	cmp	r3, #161	; 0xa1
 800df82:	d109      	bne.n	800df98 <E131Bridge::IsValidDataPacket()+0x24>
 800df84:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800df88:	b933      	cbnz	r3, 800df98 <E131Bridge::IsValidDataPacket()+0x24>
 800df8a:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 800df8e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800df92:	4258      	negs	r0, r3
 800df94:	4158      	adcs	r0, r3
 800df96:	4770      	bx	lr
 800df98:	2000      	movs	r0, #0
 800df9a:	4770      	bx	lr

0800df9c <E131Bridge::Run()>:
 800df9c:	b530      	push	{r4, r5, lr}
 800df9e:	4601      	mov	r1, r0
 800dfa0:	4604      	mov	r4, r0
 800dfa2:	b085      	sub	sp, #20
 800dfa4:	f10d 030e 	add.w	r3, sp, #14
 800dfa8:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800dfac:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800dfb0:	9300      	str	r3, [sp, #0]
 800dfb2:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800dfb6:	f005 f9eb 	bl	8013390 <udp_recv>
 800dfba:	4b3a      	ldr	r3, [pc, #232]	; (800e0a4 <E131Bridge::Run()+0x108>)
 800dfbc:	681d      	ldr	r5, [r3, #0]
 800dfbe:	60e5      	str	r5, [r4, #12]
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d138      	bne.n	800e036 <E131Bridge::Run()+0x9a>
 800dfc4:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800dfc8:	b16b      	cbz	r3, 800dfe6 <E131Bridge::Run()+0x4a>
 800dfca:	6923      	ldr	r3, [r4, #16]
 800dfcc:	1aed      	subs	r5, r5, r3
 800dfce:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800dfd2:	429d      	cmp	r5, r3
 800dfd4:	d928      	bls.n	800e028 <E131Bridge::Run()+0x8c>
 800dfd6:	6863      	ldr	r3, [r4, #4]
 800dfd8:	b9eb      	cbnz	r3, 800e016 <E131Bridge::Run()+0x7a>
 800dfda:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800dfde:	f023 0302 	bic.w	r3, r3, #2
 800dfe2:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800dfe6:	6963      	ldr	r3, [r4, #20]
 800dfe8:	b12b      	cbz	r3, 800dff6 <E131Bridge::Run()+0x5a>
 800dfea:	4620      	mov	r0, r4
 800dfec:	f000 f94c 	bl	800e288 <E131Bridge::HandleDmxIn()>
 800dff0:	4620      	mov	r0, r4
 800dff2:	f000 f8c7 	bl	800e184 <E131Bridge::SendDiscoveryPacket()>
 800dff6:	7a23      	ldrb	r3, [r4, #8]
 800dff8:	b15b      	cbz	r3, 800e012 <E131Bridge::Run()+0x76>
 800dffa:	4b2b      	ldr	r3, [pc, #172]	; (800e0a8 <E131Bridge::Run()+0x10c>)
 800dffc:	6818      	ldr	r0, [r3, #0]
 800dffe:	6843      	ldr	r3, [r0, #4]
 800e000:	2b04      	cmp	r3, #4
 800e002:	d006      	beq.n	800e012 <E131Bridge::Run()+0x76>
 800e004:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d049      	beq.n	800e0a0 <E131Bridge::Run()+0x104>
 800e00c:	2103      	movs	r1, #3
 800e00e:	f008 fa3d 	bl	801648c <LedBlink::SetMode(ledblink::Mode)>
 800e012:	b005      	add	sp, #20
 800e014:	bd30      	pop	{r4, r5, pc}
 800e016:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d1dd      	bne.n	800dfda <E131Bridge::Run()+0x3e>
 800e01e:	2201      	movs	r2, #1
 800e020:	4620      	mov	r0, r4
 800e022:	4611      	mov	r1, r2
 800e024:	f7ff fd72 	bl	800db0c <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800e028:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800e02c:	1a9b      	subs	r3, r3, r2
 800e02e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e032:	d3d8      	bcc.n	800dfe6 <E131Bridge::Run()+0x4a>
 800e034:	e7d1      	b.n	800dfda <E131Bridge::Run()+0x3e>
 800e036:	4620      	mov	r0, r4
 800e038:	f7ff ff7e 	bl	800df38 <E131Bridge::IsValidRoot()>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	d0e8      	beq.n	800e012 <E131Bridge::Run()+0x76>
 800e040:	2300      	movs	r3, #0
 800e042:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800e046:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800e04a:	6125      	str	r5, [r4, #16]
 800e04c:	b15b      	cbz	r3, 800e066 <E131Bridge::Run()+0xca>
 800e04e:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800e052:	b943      	cbnz	r3, 800e066 <E131Bridge::Run()+0xca>
 800e054:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800e058:	1aad      	subs	r5, r5, r2
 800e05a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800e05e:	4295      	cmp	r5, r2
 800e060:	bf88      	it	hi
 800e062:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800e066:	6863      	ldr	r3, [r4, #4]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d0bc      	beq.n	800dfe6 <E131Bridge::Run()+0x4a>
 800e06c:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800e070:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e074:	ba1a      	rev	r2, r3
 800e076:	d108      	bne.n	800e08a <E131Bridge::Run()+0xee>
 800e078:	4620      	mov	r0, r4
 800e07a:	f7ff ff7b 	bl	800df74 <E131Bridge::IsValidDataPacket()>
 800e07e:	2800      	cmp	r0, #0
 800e080:	d0b1      	beq.n	800dfe6 <E131Bridge::Run()+0x4a>
 800e082:	4620      	mov	r0, r4
 800e084:	f7ff fdd8 	bl	800dc38 <E131Bridge::HandleDmx()>
 800e088:	e7ad      	b.n	800dfe6 <E131Bridge::Run()+0x4a>
 800e08a:	2a08      	cmp	r2, #8
 800e08c:	d1ab      	bne.n	800dfe6 <E131Bridge::Run()+0x4a>
 800e08e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800e092:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e096:	d1a6      	bne.n	800dfe6 <E131Bridge::Run()+0x4a>
 800e098:	4620      	mov	r0, r4
 800e09a:	f000 f973 	bl	800e384 <E131Bridge::HandleSynchronization()>
 800e09e:	e7a2      	b.n	800dfe6 <E131Bridge::Run()+0x4a>
 800e0a0:	2102      	movs	r1, #2
 800e0a2:	e7b4      	b.n	800e00e <E131Bridge::Run()+0x72>
 800e0a4:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4
 800e0a8:	2001d998 	mulcs	r1, r8, r9

0800e0ac <E131Bridge::FillDiscoveryPacket()>:
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800e0b2:	b510      	push	{r4, lr}
 800e0b4:	333c      	adds	r3, #60	; 0x3c
 800e0b6:	005b      	lsls	r3, r3, #1
 800e0b8:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800e0bc:	69c3      	ldr	r3, [r0, #28]
 800e0be:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800e0c2:	428b      	cmp	r3, r1
 800e0c4:	d14a      	bne.n	800e15c <E131Bridge::FillDiscoveryPacket()+0xb0>
 800e0c6:	69c3      	ldr	r3, [r0, #28]
 800e0c8:	492d      	ldr	r1, [pc, #180]	; (800e180 <E131Bridge::FillDiscoveryPacket()+0xd4>)
 800e0ca:	701a      	strb	r2, [r3, #0]
 800e0cc:	2210      	movs	r2, #16
 800e0ce:	705a      	strb	r2, [r3, #1]
 800e0d0:	1cda      	adds	r2, r3, #3
 800e0d2:	330f      	adds	r3, #15
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	d144      	bne.n	800e162 <E131Bridge::FillDiscoveryPacket()+0xb6>
 800e0d8:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800e0dc:	69c3      	ldr	r3, [r0, #28]
 800e0de:	3234      	adds	r2, #52	; 0x34
 800e0e0:	0052      	lsls	r2, r2, #1
 800e0e2:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800e0e6:	ba52      	rev16	r2, r2
 800e0e8:	821a      	strh	r2, [r3, #16]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	749a      	strb	r2, [r3, #18]
 800e0ee:	74da      	strb	r2, [r3, #19]
 800e0f0:	751a      	strb	r2, [r3, #20]
 800e0f2:	2208      	movs	r2, #8
 800e0f4:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800e0f8:	f803 2f15 	strb.w	r2, [r3, #21]!
 800e0fc:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800e100:	4291      	cmp	r1, r2
 800e102:	d133      	bne.n	800e16c <E131Bridge::FillDiscoveryPacket()+0xc0>
 800e104:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800e108:	69c3      	ldr	r3, [r0, #28]
 800e10a:	3229      	adds	r2, #41	; 0x29
 800e10c:	0052      	lsls	r2, r2, #1
 800e10e:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800e112:	ba52      	rev16	r2, r2
 800e114:	84da      	strh	r2, [r3, #38]	; 0x26
 800e116:	2200      	movs	r2, #0
 800e118:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800e11c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800e120:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800e124:	2202      	movs	r2, #2
 800e126:	f803 2f2b 	strb.w	r2, [r3, #43]!
 800e12a:	f100 0274 	add.w	r2, r0, #116	; 0x74
 800e12e:	4291      	cmp	r1, r2
 800e130:	d121      	bne.n	800e176 <E131Bridge::FillDiscoveryPacket()+0xca>
 800e132:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800e136:	69c2      	ldr	r2, [r0, #28]
 800e138:	3304      	adds	r3, #4
 800e13a:	005b      	lsls	r3, r3, #1
 800e13c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800e140:	ba5b      	rev16	r3, r3
 800e142:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800e146:	2300      	movs	r3, #0
 800e148:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800e14c:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800e150:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800e154:	2301      	movs	r3, #1
 800e156:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800e15a:	bd10      	pop	{r4, pc}
 800e15c:	f803 2b01 	strb.w	r2, [r3], #1
 800e160:	e7af      	b.n	800e0c2 <E131Bridge::FillDiscoveryPacket()+0x16>
 800e162:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e166:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e16a:	e7b3      	b.n	800e0d4 <E131Bridge::FillDiscoveryPacket()+0x28>
 800e16c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e170:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e174:	e7c4      	b.n	800e100 <E131Bridge::FillDiscoveryPacket()+0x54>
 800e176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e17a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e17e:	e7d6      	b.n	800e12e <E131Bridge::FillDiscoveryPacket()+0x82>
 800e180:	0801a369 	stmdaeq	r1, {r0, r3, r5, r6, r8, r9, sp, pc}

0800e184 <E131Bridge::SendDiscoveryPacket()>:
 800e184:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e186:	f242 710f 	movw	r1, #9999	; 0x270f
 800e18a:	68c2      	ldr	r2, [r0, #12]
 800e18c:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800e190:	4604      	mov	r4, r0
 800e192:	1ad3      	subs	r3, r2, r3
 800e194:	428b      	cmp	r3, r1
 800e196:	d924      	bls.n	800e1e2 <E131Bridge::SendDiscoveryPacket()+0x5e>
 800e198:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800e19c:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800e1a0:	b1ab      	cbz	r3, 800e1ce <E131Bridge::SendDiscoveryPacket()+0x4a>
 800e1a2:	2500      	movs	r5, #0
 800e1a4:	462e      	mov	r6, r5
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	f10d 020e 	add.w	r2, sp, #14
 800e1b0:	f7ff fc0a 	bl	800d9c8 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800e1b4:	b140      	cbz	r0, 800e1c8 <E131Bridge::SendDiscoveryPacket()+0x44>
 800e1b6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800e1ba:	69e2      	ldr	r2, [r4, #28]
 800e1bc:	f106 013c 	add.w	r1, r6, #60	; 0x3c
 800e1c0:	ba5b      	rev16	r3, r3
 800e1c2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800e1c6:	3601      	adds	r6, #1
 800e1c8:	3501      	adds	r5, #1
 800e1ca:	2d20      	cmp	r5, #32
 800e1cc:	d1eb      	bne.n	800e1a6 <E131Bridge::SendDiscoveryPacket()+0x22>
 800e1ce:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800e1d2:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	69e1      	ldr	r1, [r4, #28]
 800e1da:	6a23      	ldr	r3, [r4, #32]
 800e1dc:	7820      	ldrb	r0, [r4, #0]
 800e1de:	f005 f933 	bl	8013448 <udp_send>
 800e1e2:	b004      	add	sp, #16
 800e1e4:	bd70      	pop	{r4, r5, r6, pc}

0800e1e6 <memcpy.isra.0>:
 800e1e6:	3801      	subs	r0, #1
 800e1e8:	440a      	add	r2, r1
 800e1ea:	4291      	cmp	r1, r2
 800e1ec:	d100      	bne.n	800e1f0 <memcpy.isra.0+0xa>
 800e1ee:	4770      	bx	lr
 800e1f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1f4:	f800 3f01 	strb.w	r3, [r0, #1]!
 800e1f8:	e7f7      	b.n	800e1ea <memcpy.isra.0+0x4>
	...

0800e1fc <E131Bridge::FillDataPacket()>:
 800e1fc:	b570      	push	{r4, r5, r6, lr}
 800e1fe:	2400      	movs	r4, #0
 800e200:	2610      	movs	r6, #16
 800e202:	4605      	mov	r5, r0
 800e204:	6980      	ldr	r0, [r0, #24]
 800e206:	220c      	movs	r2, #12
 800e208:	7046      	strb	r6, [r0, #1]
 800e20a:	7004      	strb	r4, [r0, #0]
 800e20c:	7084      	strb	r4, [r0, #2]
 800e20e:	70c4      	strb	r4, [r0, #3]
 800e210:	491c      	ldr	r1, [pc, #112]	; (800e284 <E131Bridge::FillDataPacket()+0x88>)
 800e212:	3004      	adds	r0, #4
 800e214:	f7ff ffe7 	bl	800e1e6 <memcpy.isra.0>
 800e218:	2304      	movs	r3, #4
 800e21a:	4632      	mov	r2, r6
 800e21c:	2602      	movs	r6, #2
 800e21e:	69a8      	ldr	r0, [r5, #24]
 800e220:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800e224:	7543      	strb	r3, [r0, #21]
 800e226:	7484      	strb	r4, [r0, #18]
 800e228:	74c4      	strb	r4, [r0, #19]
 800e22a:	7504      	strb	r4, [r0, #20]
 800e22c:	3016      	adds	r0, #22
 800e22e:	f7ff ffda 	bl	800e1e6 <memcpy.isra.0>
 800e232:	69a8      	ldr	r0, [r5, #24]
 800e234:	2240      	movs	r2, #64	; 0x40
 800e236:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800e23a:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800e23e:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800e242:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800e246:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800e24a:	302c      	adds	r0, #44	; 0x2c
 800e24c:	f7ff ffcb 	bl	800e1e6 <memcpy.isra.0>
 800e250:	22a1      	movs	r2, #161	; 0xa1
 800e252:	69ab      	ldr	r3, [r5, #24]
 800e254:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800e258:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800e25c:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800e260:	69ab      	ldr	r3, [r5, #24]
 800e262:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800e266:	69ab      	ldr	r3, [r5, #24]
 800e268:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800e26c:	2201      	movs	r2, #1
 800e26e:	69ab      	ldr	r3, [r5, #24]
 800e270:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800e274:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800e278:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800e27c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800e280:	bd70      	pop	{r4, r5, r6, pc}
 800e282:	bf00      	nop
 800e284:	0801a369 	stmdaeq	r1, {r0, r3, r5, r6, r8, r9, sp, pc}

0800e288 <E131Bridge::HandleDmxIn()>:
 800e288:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800e28c:	4604      	mov	r4, r0
 800e28e:	4605      	mov	r5, r0
 800e290:	2600      	movs	r6, #0
 800e292:	4f3b      	ldr	r7, [pc, #236]	; (800e380 <E131Bridge::HandleDmxIn()+0xf8>)
 800e294:	f895 3d96 	ldrb.w	r3, [r5, #3478]	; 0xd96
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d058      	beq.n	800e34e <E131Bridge::HandleDmxIn()+0xc6>
 800e29c:	6960      	ldr	r0, [r4, #20]
 800e29e:	4631      	mov	r1, r6
 800e2a0:	6803      	ldr	r3, [r0, #0]
 800e2a2:	aa02      	add	r2, sp, #8
 800e2a4:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800e2a8:	ab03      	add	r3, sp, #12
 800e2aa:	47c0      	blx	r8
 800e2ac:	4601      	mov	r1, r0
 800e2ae:	2800      	cmp	r0, #0
 800e2b0:	d055      	beq.n	800e35e <E131Bridge::HandleDmxIn()+0xd6>
 800e2b2:	9a02      	ldr	r2, [sp, #8]
 800e2b4:	69a0      	ldr	r0, [r4, #24]
 800e2b6:	b293      	uxth	r3, r2
 800e2b8:	f103 0c6d 	add.w	ip, r3, #109	; 0x6d
 800e2bc:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800e2c0:	fa9c fc9c 	rev16.w	ip, ip
 800e2c4:	f8a0 c010 	strh.w	ip, [r0, #16]
 800e2c8:	f103 0c57 	add.w	ip, r3, #87	; 0x57
 800e2cc:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800e2d0:	fa9c fc9c 	rev16.w	ip, ip
 800e2d4:	f8a0 c026 	strh.w	ip, [r0, #38]	; 0x26
 800e2d8:	f895 cd9d 	ldrb.w	ip, [r5, #3485]	; 0xd9d
 800e2dc:	330a      	adds	r3, #10
 800e2de:	f880 c06c 	strb.w	ip, [r0, #108]	; 0x6c
 800e2e2:	f895 cd9c 	ldrb.w	ip, [r5, #3484]	; 0xd9c
 800e2e6:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800e2ea:	f10c 0001 	add.w	r0, ip, #1
 800e2ee:	f885 0d9c 	strb.w	r0, [r5, #3484]	; 0xd9c
 800e2f2:	69a0      	ldr	r0, [r4, #24]
 800e2f4:	ba5b      	rev16	r3, r3
 800e2f6:	f880 c06f 	strb.w	ip, [r0, #111]	; 0x6f
 800e2fa:	f8b5 cd94 	ldrh.w	ip, [r5, #3476]	; 0xd94
 800e2fe:	69a0      	ldr	r0, [r4, #24]
 800e300:	fa9c fc9c 	rev16.w	ip, ip
 800e304:	f8a0 c071 	strh.w	ip, [r0, #113]	; 0x71
 800e308:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800e30c:	307d      	adds	r0, #125	; 0x7d
 800e30e:	f7ff ff6a 	bl	800e1e6 <memcpy.isra.0>
 800e312:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800e316:	69a1      	ldr	r1, [r4, #24]
 800e318:	ba53      	rev16	r3, r2
 800e31a:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800e31e:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800e322:	327d      	adds	r2, #125	; 0x7d
 800e324:	9300      	str	r3, [sp, #0]
 800e326:	f8d5 3d98 	ldr.w	r3, [r5, #3480]	; 0xd98
 800e32a:	b292      	uxth	r2, r2
 800e32c:	7820      	ldrb	r0, [r4, #0]
 800e32e:	f005 f88b 	bl	8013448 <udp_send>
 800e332:	2301      	movs	r3, #1
 800e334:	683a      	ldr	r2, [r7, #0]
 800e336:	40b3      	lsls	r3, r6
 800e338:	ea33 0102 	bics.w	r1, r3, r2
 800e33c:	d007      	beq.n	800e34e <E131Bridge::HandleDmxIn()+0xc6>
 800e33e:	4313      	orrs	r3, r2
 800e340:	603b      	str	r3, [r7, #0]
 800e342:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800e346:	f043 0301 	orr.w	r3, r3, #1
 800e34a:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800e34e:	3601      	adds	r6, #1
 800e350:	2e20      	cmp	r6, #32
 800e352:	f105 050c 	add.w	r5, r5, #12
 800e356:	d19d      	bne.n	800e294 <E131Bridge::HandleDmxIn()+0xc>
 800e358:	b004      	add	sp, #16
 800e35a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e35e:	9b03      	ldr	r3, [sp, #12]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d1f4      	bne.n	800e34e <E131Bridge::HandleDmxIn()+0xc6>
 800e364:	2201      	movs	r2, #1
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	40b2      	lsls	r2, r6
 800e36a:	ea23 0302 	bic.w	r3, r3, r2
 800e36e:	603b      	str	r3, [r7, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d1ec      	bne.n	800e34e <E131Bridge::HandleDmxIn()+0xc6>
 800e374:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800e378:	f023 0301 	bic.w	r3, r3, #1
 800e37c:	e7e5      	b.n	800e34a <E131Bridge::HandleDmxIn()+0xc2>
 800e37e:	bf00      	nop
 800e380:	2000c754 	andcs	ip, r0, r4, asr r7

0800e384 <E131Bridge::HandleSynchronization()>:
 800e384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e388:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800e38c:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800e390:	ba5b      	rev16	r3, r3
 800e392:	b29b      	uxth	r3, r3
 800e394:	429a      	cmp	r2, r3
 800e396:	4604      	mov	r4, r0
 800e398:	d00a      	beq.n	800e3b0 <E131Bridge::HandleSynchronization()+0x2c>
 800e39a:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d006      	beq.n	800e3b0 <E131Bridge::HandleSynchronization()+0x2c>
 800e3a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3a6:	4b23      	ldr	r3, [pc, #140]	; (800e434 <E131Bridge::HandleSynchronization()+0xb0>)
 800e3a8:	2102      	movs	r1, #2
 800e3aa:	6818      	ldr	r0, [r3, #0]
 800e3ac:	f008 b86e 	b.w	801648c <LedBlink::SetMode(ledblink::Mode)>
 800e3b0:	2500      	movs	r5, #0
 800e3b2:	4627      	mov	r7, r4
 800e3b4:	46a9      	mov	r9, r5
 800e3b6:	68e3      	ldr	r3, [r4, #12]
 800e3b8:	4e1f      	ldr	r6, [pc, #124]	; (800e438 <E131Bridge::HandleSynchronization()+0xb4>)
 800e3ba:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800e43c <E131Bridge::HandleSynchronization()+0xb8>
 800e3be:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800e3c2:	f897 3516 	ldrb.w	r3, [r7, #1302]	; 0x516
 800e3c6:	b323      	cbz	r3, 800e412 <E131Bridge::HandleSynchronization()+0x8e>
 800e3c8:	f8d8 3000 	ldr.w	r3, [r8]
 800e3cc:	6860      	ldr	r0, [r4, #4]
 800e3ce:	07da      	lsls	r2, r3, #31
 800e3d0:	bf5c      	itt	pl
 800e3d2:	2301      	movpl	r3, #1
 800e3d4:	f8c8 3000 	strpl.w	r3, [r8]
 800e3d8:	6803      	ldr	r3, [r0, #0]
 800e3da:	4629      	mov	r1, r5
 800e3dc:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800e3e0:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800e3e4:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800e3e8:	47d0      	blx	sl
 800e3ea:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 800e3ee:	b93b      	cbnz	r3, 800e400 <E131Bridge::HandleSynchronization()+0x7c>
 800e3f0:	6860      	ldr	r0, [r4, #4]
 800e3f2:	4629      	mov	r1, r5
 800e3f4:	6803      	ldr	r3, [r0, #0]
 800e3f6:	689b      	ldr	r3, [r3, #8]
 800e3f8:	4798      	blx	r3
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
 800e400:	f8d8 3000 	ldr.w	r3, [r8]
 800e404:	f8c6 9600 	str.w	r9, [r6, #1536]	; 0x600
 800e408:	07db      	lsls	r3, r3, #31
 800e40a:	bf5c      	itt	pl
 800e40c:	2301      	movpl	r3, #1
 800e40e:	f8c8 3000 	strpl.w	r3, [r8]
 800e412:	3501      	adds	r5, #1
 800e414:	2d20      	cmp	r5, #32
 800e416:	f107 0744 	add.w	r7, r7, #68	; 0x44
 800e41a:	f206 6604 	addw	r6, r6, #1540	; 0x604
 800e41e:	d1d0      	bne.n	800e3c2 <E131Bridge::HandleSynchronization()+0x3e>
 800e420:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800e422:	b120      	cbz	r0, 800e42e <E131Bridge::HandleSynchronization()+0xaa>
 800e424:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e428:	6803      	ldr	r3, [r0, #0]
 800e42a:	689b      	ldr	r3, [r3, #8]
 800e42c:	4718      	bx	r3
 800e42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e432:	bf00      	nop
 800e434:	2001d998 	mulcs	r1, r8, r9
 800e438:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
 800e43c:	200006b8 			; <UNDEFINED> instruction: 0x200006b8

0800e440 <E131Bridge::Print()>:
 800e440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e444:	2500      	movs	r5, #0
 800e446:	4604      	mov	r4, r0
 800e448:	b08c      	sub	sp, #48	; 0x30
 800e44a:	a902      	add	r1, sp, #8
 800e44c:	3024      	adds	r0, #36	; 0x24
 800e44e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800e452:	f001 fe1d 	bl	8010090 <uuid_unparse>
 800e456:	482c      	ldr	r0, [pc, #176]	; (800e508 <E131Bridge::Print()+0xc8>)
 800e458:	f7fb f9b2 	bl	80097c0 <printf>
 800e45c:	4b2b      	ldr	r3, [pc, #172]	; (800e50c <E131Bridge::Print()+0xcc>)
 800e45e:	482c      	ldr	r0, [pc, #176]	; (800e510 <E131Bridge::Print()+0xd0>)
 800e460:	7819      	ldrb	r1, [r3, #0]
 800e462:	785a      	ldrb	r2, [r3, #1]
 800e464:	f7fb f9ac 	bl	80097c0 <printf>
 800e468:	482a      	ldr	r0, [pc, #168]	; (800e514 <E131Bridge::Print()+0xd4>)
 800e46a:	a902      	add	r1, sp, #8
 800e46c:	f7fb f9a8 	bl	80097c0 <printf>
 800e470:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800e474:	b303      	cbz	r3, 800e4b8 <E131Bridge::Print()+0x78>
 800e476:	4828      	ldr	r0, [pc, #160]	; (800e518 <E131Bridge::Print()+0xd8>)
 800e478:	f7fb f9a2 	bl	80097c0 <printf>
 800e47c:	4e27      	ldr	r6, [pc, #156]	; (800e51c <E131Bridge::Print()+0xdc>)
 800e47e:	4f28      	ldr	r7, [pc, #160]	; (800e520 <E131Bridge::Print()+0xe0>)
 800e480:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800e524 <E131Bridge::Print()+0xe4>
 800e484:	2301      	movs	r3, #1
 800e486:	4629      	mov	r1, r5
 800e488:	4620      	mov	r0, r4
 800e48a:	f10d 0206 	add.w	r2, sp, #6
 800e48e:	f7ff fa9b 	bl	800d9c8 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800e492:	b170      	cbz	r0, 800e4b2 <E131Bridge::Print()+0x72>
 800e494:	2344      	movs	r3, #68	; 0x44
 800e496:	436b      	muls	r3, r5
 800e498:	f504 62aa 	add.w	r2, r4, #1360	; 0x550
 800e49c:	58d3      	ldr	r3, [r2, r3]
 800e49e:	4629      	mov	r1, r5
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	bf0c      	ite	eq
 800e4a4:	4633      	moveq	r3, r6
 800e4a6:	463b      	movne	r3, r7
 800e4a8:	4640      	mov	r0, r8
 800e4aa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e4ae:	f7fb f987 	bl	80097c0 <printf>
 800e4b2:	3501      	adds	r5, #1
 800e4b4:	2d20      	cmp	r5, #32
 800e4b6:	d1e5      	bne.n	800e484 <E131Bridge::Print()+0x44>
 800e4b8:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800e4bc:	b1d3      	cbz	r3, 800e4f4 <E131Bridge::Print()+0xb4>
 800e4be:	481a      	ldr	r0, [pc, #104]	; (800e528 <E131Bridge::Print()+0xe8>)
 800e4c0:	f7fb f97e 	bl	80097c0 <printf>
 800e4c4:	2500      	movs	r5, #0
 800e4c6:	4e19      	ldr	r6, [pc, #100]	; (800e52c <E131Bridge::Print()+0xec>)
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	4629      	mov	r1, r5
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	f10d 0206 	add.w	r2, sp, #6
 800e4d2:	f7ff fa79 	bl	800d9c8 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800e4d6:	b150      	cbz	r0, 800e4ee <E131Bridge::Print()+0xae>
 800e4d8:	230c      	movs	r3, #12
 800e4da:	436b      	muls	r3, r5
 800e4dc:	f604 529d 	addw	r2, r4, #3485	; 0xd9d
 800e4e0:	5cd3      	ldrb	r3, [r2, r3]
 800e4e2:	4629      	mov	r1, r5
 800e4e4:	4630      	mov	r0, r6
 800e4e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e4ea:	f7fb f969 	bl	80097c0 <printf>
 800e4ee:	3501      	adds	r5, #1
 800e4f0:	2d20      	cmp	r5, #32
 800e4f2:	d1e9      	bne.n	800e4c8 <E131Bridge::Print()+0x88>
 800e4f4:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800e4f8:	b113      	cbz	r3, 800e500 <E131Bridge::Print()+0xc0>
 800e4fa:	480d      	ldr	r0, [pc, #52]	; (800e530 <E131Bridge::Print()+0xf0>)
 800e4fc:	f7fb f960 	bl	80097c0 <printf>
 800e500:	b00c      	add	sp, #48	; 0x30
 800e502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e506:	bf00      	nop
 800e508:	0801a270 	stmdaeq	r1, {r4, r5, r6, r9, sp, pc}
 800e50c:	0801a375 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, sp, pc}
 800e510:	0801a278 	stmdaeq	r1, {r3, r4, r5, r6, r9, sp, pc}
 800e514:	0801a28b 	stmdaeq	r1, {r0, r1, r3, r7, r9, sp, pc}
 800e518:	0801a05b 	stmdaeq	r1, {r0, r1, r3, r4, r6, sp, pc}
 800e51c:	08019fff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 800e520:	0801a003 	stmdaeq	r1, {r0, r1, sp, pc}
 800e524:	0801a29b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r9, sp, pc}
 800e528:	0801a07f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, sp, pc}
 800e52c:	0801a2ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, sp, pc}
 800e530:	0801a2d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r9, sp, pc}

0800e534 <memcmp>:
 800e534:	4402      	add	r2, r0
 800e536:	4290      	cmp	r0, r2
 800e538:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800e53c:	d106      	bne.n	800e54c <memcmp+0x18>
 800e53e:	2000      	movs	r0, #0
 800e540:	4770      	bx	lr
 800e542:	3001      	adds	r0, #1
 800e544:	4290      	cmp	r0, r2
 800e546:	d102      	bne.n	800e54e <memcmp+0x1a>
 800e548:	2000      	movs	r0, #0
 800e54a:	e006      	b.n	800e55a <memcmp+0x26>
 800e54c:	b510      	push	{r4, lr}
 800e54e:	7803      	ldrb	r3, [r0, #0]
 800e550:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e554:	42a3      	cmp	r3, r4
 800e556:	d0f4      	beq.n	800e542 <memcmp+0xe>
 800e558:	1b18      	subs	r0, r3, r4
 800e55a:	bd10      	pop	{r4, pc}

0800e55c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800e55c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e55e:	88c6      	ldrh	r6, [r0, #6]
 800e560:	8885      	ldrh	r5, [r0, #4]
 800e562:	42ae      	cmp	r6, r5
 800e564:	d216      	bcs.n	800e594 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800e566:	4604      	mov	r4, r0
 800e568:	6800      	ldr	r0, [r0, #0]
 800e56a:	1bad      	subs	r5, r5, r6
 800e56c:	4430      	add	r0, r6
 800e56e:	7a26      	ldrb	r6, [r4, #8]
 800e570:	b923      	cbnz	r3, 800e57c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800e572:	b926      	cbnz	r6, 800e57e <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800e574:	9200      	str	r2, [sp, #0]
 800e576:	460b      	mov	r3, r1
 800e578:	4a09      	ldr	r2, [pc, #36]	; (800e5a0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800e57a:	e003      	b.n	800e584 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800e57c:	b166      	cbz	r6, 800e598 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800e57e:	460b      	mov	r3, r1
 800e580:	9200      	str	r2, [sp, #0]
 800e582:	4a08      	ldr	r2, [pc, #32]	; (800e5a4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800e584:	4629      	mov	r1, r5
 800e586:	f7fb f943 	bl	8009810 <snprintf>
 800e58a:	4285      	cmp	r5, r0
 800e58c:	bfa2      	ittt	ge
 800e58e:	88e3      	ldrhge	r3, [r4, #6]
 800e590:	181b      	addge	r3, r3, r0
 800e592:	80e3      	strhge	r3, [r4, #6]
 800e594:	b002      	add	sp, #8
 800e596:	bd70      	pop	{r4, r5, r6, pc}
 800e598:	9200      	str	r2, [sp, #0]
 800e59a:	460b      	mov	r3, r1
 800e59c:	4a02      	ldr	r2, [pc, #8]	; (800e5a8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800e59e:	e7f1      	b.n	800e584 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800e5a0:	08019194 	stmdaeq	r1, {r2, r4, r7, r8, ip, pc}
 800e5a4:	08019189 	stmdaeq	r1, {r0, r3, r7, r8, ip, pc}
 800e5a8:	08019195 	stmdaeq	r1, {r0, r2, r4, r7, r8, ip, pc}

0800e5ac <E131Params::E131Params(E131ParamsStore*)>:
 800e5ac:	b510      	push	{r4, lr}
 800e5ae:	2219      	movs	r2, #25
 800e5b0:	4604      	mov	r4, r0
 800e5b2:	f840 1b04 	str.w	r1, [r0], #4
 800e5b6:	2100      	movs	r1, #0
 800e5b8:	f008 f920 	bl	80167fc <memset>
 800e5bc:	2201      	movs	r2, #1
 800e5be:	72e2      	strb	r2, [r4, #11]
 800e5c0:	2202      	movs	r2, #2
 800e5c2:	f04f 3364 	mov.w	r3, #1684300900	; 0x64646464
 800e5c6:	f8a4 200d 	strh.w	r2, [r4, #13]
 800e5ca:	2203      	movs	r2, #3
 800e5cc:	f8c4 301f 	str.w	r3, [r4, #31]
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	2155      	movs	r1, #85	; 0x55
 800e5d4:	f8a4 200f 	strh.w	r2, [r4, #15]
 800e5d8:	2204      	movs	r2, #4
 800e5da:	7323      	strb	r3, [r4, #12]
 800e5dc:	77a3      	strb	r3, [r4, #30]
 800e5de:	4b04      	ldr	r3, [pc, #16]	; (800e5f0 <E131Params::E131Params(E131ParamsStore*)+0x44>)
 800e5e0:	7761      	strb	r1, [r4, #29]
 800e5e2:	6819      	ldr	r1, [r3, #0]
 800e5e4:	f8a4 2011 	strh.w	r2, [r4, #17]
 800e5e8:	b901      	cbnz	r1, 800e5ec <E131Params::E131Params(E131ParamsStore*)+0x40>
 800e5ea:	601a      	str	r2, [r3, #0]
 800e5ec:	4620      	mov	r0, r4
 800e5ee:	bd10      	pop	{r4, pc}
 800e5f0:	2000c758 	andcs	ip, r0, r8, asr r7

0800e5f4 <E131Params::Load(char const*, unsigned int)>:
 800e5f4:	6803      	ldr	r3, [r0, #0]
 800e5f6:	b1d3      	cbz	r3, 800e62e <E131Params::Load(char const*, unsigned int)+0x3a>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e5fc:	460d      	mov	r5, r1
 800e5fe:	4616      	mov	r6, r2
 800e600:	4604      	mov	r4, r0
 800e602:	6043      	str	r3, [r0, #4]
 800e604:	4602      	mov	r2, r0
 800e606:	490a      	ldr	r1, [pc, #40]	; (800e630 <E131Params::Load(char const*, unsigned int)+0x3c>)
 800e608:	4668      	mov	r0, sp
 800e60a:	f007 fa71 	bl	8015af0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800e60e:	4632      	mov	r2, r6
 800e610:	4629      	mov	r1, r5
 800e612:	4668      	mov	r0, sp
 800e614:	f007 fa70 	bl	8015af8 <ReadConfigFile::Read(char const*, unsigned int)>
 800e618:	4621      	mov	r1, r4
 800e61a:	f851 0b04 	ldr.w	r0, [r1], #4
 800e61e:	6803      	ldr	r3, [r0, #0]
 800e620:	689b      	ldr	r3, [r3, #8]
 800e622:	4798      	blx	r3
 800e624:	4668      	mov	r0, sp
 800e626:	f007 fa66 	bl	8015af6 <ReadConfigFile::~ReadConfigFile()>
 800e62a:	b002      	add	sp, #8
 800e62c:	bd70      	pop	{r4, r5, r6, pc}
 800e62e:	4770      	bx	lr
 800e630:	0800e8c9 	stmdaeq	r0, {r0, r3, r6, r7, fp, sp, lr, pc}

0800e634 <E131Params::callbackFunction(char const*)>:
 800e634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e638:	460e      	mov	r6, r1
 800e63a:	2708      	movs	r7, #8
 800e63c:	b087      	sub	sp, #28
 800e63e:	4604      	mov	r4, r0
 800e640:	4997      	ldr	r1, [pc, #604]	; (800e8a0 <E131Params::callbackFunction(char const*)+0x26c>)
 800e642:	4630      	mov	r0, r6
 800e644:	ab01      	add	r3, sp, #4
 800e646:	eb0d 0207 	add.w	r2, sp, r7
 800e64a:	9701      	str	r7, [sp, #4]
 800e64c:	f007 fa88 	bl	8015b60 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800e650:	bb68      	cbnz	r0, 800e6ae <E131Params::callbackFunction(char const*)+0x7a>
 800e652:	2204      	movs	r2, #4
 800e654:	4993      	ldr	r1, [pc, #588]	; (800e8a4 <E131Params::callbackFunction(char const*)+0x270>)
 800e656:	eb0d 0007 	add.w	r0, sp, r7
 800e65a:	f7ff ff6b 	bl	800e534 <memcmp>
 800e65e:	6865      	ldr	r5, [r4, #4]
 800e660:	b1a0      	cbz	r0, 800e68c <E131Params::callbackFunction(char const*)+0x58>
 800e662:	2203      	movs	r2, #3
 800e664:	4990      	ldr	r1, [pc, #576]	; (800e8a8 <E131Params::callbackFunction(char const*)+0x274>)
 800e666:	eb0d 0007 	add.w	r0, sp, r7
 800e66a:	f7ff ff63 	bl	800e534 <memcmp>
 800e66e:	b1b0      	cbz	r0, 800e69e <E131Params::callbackFunction(char const*)+0x6a>
 800e670:	2202      	movs	r2, #2
 800e672:	498e      	ldr	r1, [pc, #568]	; (800e8ac <E131Params::callbackFunction(char const*)+0x278>)
 800e674:	eb0d 0007 	add.w	r0, sp, r7
 800e678:	f7ff ff5c 	bl	800e534 <memcmp>
 800e67c:	b198      	cbz	r0, 800e6a6 <E131Params::callbackFunction(char const*)+0x72>
 800e67e:	463a      	mov	r2, r7
 800e680:	498b      	ldr	r1, [pc, #556]	; (800e8b0 <E131Params::callbackFunction(char const*)+0x27c>)
 800e682:	eb0d 0007 	add.w	r0, sp, r7
 800e686:	f7ff ff55 	bl	800e534 <memcmp>
 800e68a:	b170      	cbz	r0, 800e6aa <E131Params::callbackFunction(char const*)+0x76>
 800e68c:	2300      	movs	r3, #0
 800e68e:	f025 0501 	bic.w	r5, r5, #1
 800e692:	6065      	str	r5, [r4, #4]
 800e694:	f8a4 3009 	strh.w	r3, [r4, #9]
 800e698:	b007      	add	sp, #28
 800e69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e69e:	2301      	movs	r3, #1
 800e6a0:	f045 0501 	orr.w	r5, r5, #1
 800e6a4:	e7f5      	b.n	800e692 <E131Params::callbackFunction(char const*)+0x5e>
 800e6a6:	2302      	movs	r3, #2
 800e6a8:	e7fa      	b.n	800e6a0 <E131Params::callbackFunction(char const*)+0x6c>
 800e6aa:	2303      	movs	r3, #3
 800e6ac:	e7f8      	b.n	800e6a0 <E131Params::callbackFunction(char const*)+0x6c>
 800e6ae:	2500      	movs	r5, #0
 800e6b0:	f8df 9200 	ldr.w	r9, [pc, #512]	; 800e8b4 <E131Params::callbackFunction(char const*)+0x280>
 800e6b4:	f8df 8200 	ldr.w	r8, [pc, #512]	; 800e8b8 <E131Params::callbackFunction(char const*)+0x284>
 800e6b8:	f8df a200 	ldr.w	sl, [pc, #512]	; 800e8bc <E131Params::callbackFunction(char const*)+0x288>
 800e6bc:	f8df b200 	ldr.w	fp, [pc, #512]	; 800e8c0 <E131Params::callbackFunction(char const*)+0x28c>
 800e6c0:	4649      	mov	r1, r9
 800e6c2:	4630      	mov	r0, r6
 800e6c4:	f10d 0202 	add.w	r2, sp, #2
 800e6c8:	f007 fb07 	bl	8015cda <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800e6cc:	b9d8      	cbnz	r0, 800e706 <E131Params::callbackFunction(char const*)+0xd2>
 800e6ce:	f64f 16fe 	movw	r6, #63998	; 0xf9fe
 800e6d2:	2310      	movs	r3, #16
 800e6d4:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800e6d8:	6861      	ldr	r1, [r4, #4]
 800e6da:	1e42      	subs	r2, r0, #1
 800e6dc:	b292      	uxth	r2, r2
 800e6de:	42b2      	cmp	r2, r6
 800e6e0:	fa03 f305 	lsl.w	r3, r3, r5
 800e6e4:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800e6e8:	d907      	bls.n	800e6fa <E131Params::callbackFunction(char const*)+0xc6>
 800e6ea:	3501      	adds	r5, #1
 800e6ec:	4422      	add	r2, r4
 800e6ee:	ea21 0103 	bic.w	r1, r1, r3
 800e6f2:	f8a2 500b 	strh.w	r5, [r2, #11]
 800e6f6:	6061      	str	r1, [r4, #4]
 800e6f8:	e7ce      	b.n	800e698 <E131Params::callbackFunction(char const*)+0x64>
 800e6fa:	4422      	add	r2, r4
 800e6fc:	f8a2 000b 	strh.w	r0, [r2, #11]
 800e700:	430b      	orrs	r3, r1
 800e702:	6063      	str	r3, [r4, #4]
 800e704:	e7c8      	b.n	800e698 <E131Params::callbackFunction(char const*)+0x64>
 800e706:	2712      	movs	r7, #18
 800e708:	2303      	movs	r3, #3
 800e70a:	436f      	muls	r7, r5
 800e70c:	9301      	str	r3, [sp, #4]
 800e70e:	4630      	mov	r0, r6
 800e710:	ab01      	add	r3, sp, #4
 800e712:	aa02      	add	r2, sp, #8
 800e714:	eb0a 0107 	add.w	r1, sl, r7
 800e718:	f007 fa22 	bl	8015b60 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800e71c:	bb00      	cbnz	r0, 800e760 <E131Params::callbackFunction(char const*)+0x12c>
 800e71e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e722:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800e726:	40ab      	lsls	r3, r5
 800e728:	f041 0120 	orr.w	r1, r1, #32
 800e72c:	296c      	cmp	r1, #108	; 0x6c
 800e72e:	6862      	ldr	r2, [r4, #4]
 800e730:	4425      	add	r5, r4
 800e732:	d10f      	bne.n	800e754 <E131Params::callbackFunction(char const*)+0x120>
 800e734:	f89d 1009 	ldrb.w	r1, [sp, #9]
 800e738:	f041 0120 	orr.w	r1, r1, #32
 800e73c:	2974      	cmp	r1, #116	; 0x74
 800e73e:	d109      	bne.n	800e754 <E131Params::callbackFunction(char const*)+0x120>
 800e740:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800e744:	f041 0120 	orr.w	r1, r1, #32
 800e748:	2970      	cmp	r1, #112	; 0x70
 800e74a:	d103      	bne.n	800e754 <E131Params::callbackFunction(char const*)+0x120>
 800e74c:	2101      	movs	r1, #1
 800e74e:	7529      	strb	r1, [r5, #20]
 800e750:	4313      	orrs	r3, r2
 800e752:	e7d6      	b.n	800e702 <E131Params::callbackFunction(char const*)+0xce>
 800e754:	2100      	movs	r1, #0
 800e756:	ea22 0203 	bic.w	r2, r2, r3
 800e75a:	7529      	strb	r1, [r5, #20]
 800e75c:	6062      	str	r2, [r4, #4]
 800e75e:	e79b      	b.n	800e698 <E131Params::callbackFunction(char const*)+0x64>
 800e760:	2307      	movs	r3, #7
 800e762:	4630      	mov	r0, r6
 800e764:	9301      	str	r3, [sp, #4]
 800e766:	aa02      	add	r2, sp, #8
 800e768:	ab01      	add	r3, sp, #4
 800e76a:	eb0b 0107 	add.w	r1, fp, r7
 800e76e:	f007 f9f7 	bl	8015b60 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800e772:	2800      	cmp	r0, #0
 800e774:	d15e      	bne.n	800e834 <E131Params::callbackFunction(char const*)+0x200>
 800e776:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e77a:	f043 0320 	orr.w	r3, r3, #32
 800e77e:	2b69      	cmp	r3, #105	; 0x69
 800e780:	d123      	bne.n	800e7ca <E131Params::callbackFunction(char const*)+0x196>
 800e782:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800e786:	f043 0320 	orr.w	r3, r3, #32
 800e78a:	2b6e      	cmp	r3, #110	; 0x6e
 800e78c:	d146      	bne.n	800e81c <E131Params::callbackFunction(char const*)+0x1e8>
 800e78e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800e792:	f043 0320 	orr.w	r3, r3, #32
 800e796:	2b70      	cmp	r3, #112	; 0x70
 800e798:	d140      	bne.n	800e81c <E131Params::callbackFunction(char const*)+0x1e8>
 800e79a:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800e79e:	f043 0320 	orr.w	r3, r3, #32
 800e7a2:	2b75      	cmp	r3, #117	; 0x75
 800e7a4:	d13a      	bne.n	800e81c <E131Params::callbackFunction(char const*)+0x1e8>
 800e7a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e7aa:	f043 0320 	orr.w	r3, r3, #32
 800e7ae:	3b74      	subs	r3, #116	; 0x74
 800e7b0:	bf18      	it	ne
 800e7b2:	2301      	movne	r3, #1
 800e7b4:	2103      	movs	r1, #3
 800e7b6:	f8b4 201d 	ldrh.w	r2, [r4, #29]
 800e7ba:	006d      	lsls	r5, r5, #1
 800e7bc:	40a9      	lsls	r1, r5
 800e7be:	ea22 0201 	bic.w	r2, r2, r1
 800e7c2:	bb6b      	cbnz	r3, 800e820 <E131Params::callbackFunction(char const*)+0x1ec>
 800e7c4:	f8a4 201d 	strh.w	r2, [r4, #29]
 800e7c8:	e766      	b.n	800e698 <E131Params::callbackFunction(char const*)+0x64>
 800e7ca:	2b64      	cmp	r3, #100	; 0x64
 800e7cc:	d126      	bne.n	800e81c <E131Params::callbackFunction(char const*)+0x1e8>
 800e7ce:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800e7d2:	f043 0320 	orr.w	r3, r3, #32
 800e7d6:	2b69      	cmp	r3, #105	; 0x69
 800e7d8:	d120      	bne.n	800e81c <E131Params::callbackFunction(char const*)+0x1e8>
 800e7da:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800e7de:	f043 0320 	orr.w	r3, r3, #32
 800e7e2:	2b73      	cmp	r3, #115	; 0x73
 800e7e4:	d11a      	bne.n	800e81c <E131Params::callbackFunction(char const*)+0x1e8>
 800e7e6:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800e7ea:	f043 0320 	orr.w	r3, r3, #32
 800e7ee:	2b61      	cmp	r3, #97	; 0x61
 800e7f0:	d114      	bne.n	800e81c <E131Params::callbackFunction(char const*)+0x1e8>
 800e7f2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e7f6:	f043 0320 	orr.w	r3, r3, #32
 800e7fa:	2b62      	cmp	r3, #98	; 0x62
 800e7fc:	d10e      	bne.n	800e81c <E131Params::callbackFunction(char const*)+0x1e8>
 800e7fe:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800e802:	f043 0320 	orr.w	r3, r3, #32
 800e806:	2b6c      	cmp	r3, #108	; 0x6c
 800e808:	d108      	bne.n	800e81c <E131Params::callbackFunction(char const*)+0x1e8>
 800e80a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800e80e:	f043 0320 	orr.w	r3, r3, #32
 800e812:	2b65      	cmp	r3, #101	; 0x65
 800e814:	bf14      	ite	ne
 800e816:	2301      	movne	r3, #1
 800e818:	2302      	moveq	r3, #2
 800e81a:	e7cb      	b.n	800e7b4 <E131Params::callbackFunction(char const*)+0x180>
 800e81c:	2301      	movs	r3, #1
 800e81e:	e7c9      	b.n	800e7b4 <E131Params::callbackFunction(char const*)+0x180>
 800e820:	2b02      	cmp	r3, #2
 800e822:	bf15      	itete	ne
 800e824:	2301      	movne	r3, #1
 800e826:	40ab      	lsleq	r3, r5
 800e828:	fa03 f505 	lslne.w	r5, r3, r5
 800e82c:	431a      	orreq	r2, r3
 800e82e:	bf18      	it	ne
 800e830:	432a      	orrne	r2, r5
 800e832:	e7c7      	b.n	800e7c4 <E131Params::callbackFunction(char const*)+0x190>
 800e834:	4641      	mov	r1, r8
 800e836:	4630      	mov	r0, r6
 800e838:	f10d 0201 	add.w	r2, sp, #1
 800e83c:	f007 fa94 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e840:	b998      	cbnz	r0, 800e86a <E131Params::callbackFunction(char const*)+0x236>
 800e842:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e846:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800e84a:	40aa      	lsls	r2, r5
 800e84c:	1e48      	subs	r0, r1, #1
 800e84e:	b2c0      	uxtb	r0, r0
 800e850:	28c7      	cmp	r0, #199	; 0xc7
 800e852:	6863      	ldr	r3, [r4, #4]
 800e854:	4425      	add	r5, r4
 800e856:	d803      	bhi.n	800e860 <E131Params::callbackFunction(char const*)+0x22c>
 800e858:	2964      	cmp	r1, #100	; 0x64
 800e85a:	d001      	beq.n	800e860 <E131Params::callbackFunction(char const*)+0x22c>
 800e85c:	77e9      	strb	r1, [r5, #31]
 800e85e:	e777      	b.n	800e750 <E131Params::callbackFunction(char const*)+0x11c>
 800e860:	2164      	movs	r1, #100	; 0x64
 800e862:	ea23 0302 	bic.w	r3, r3, r2
 800e866:	77e9      	strb	r1, [r5, #31]
 800e868:	e74b      	b.n	800e702 <E131Params::callbackFunction(char const*)+0xce>
 800e86a:	3501      	adds	r5, #1
 800e86c:	2d04      	cmp	r5, #4
 800e86e:	f109 0910 	add.w	r9, r9, #16
 800e872:	f108 0812 	add.w	r8, r8, #18
 800e876:	f47f af23 	bne.w	800e6c0 <E131Params::callbackFunction(char const*)+0x8c>
 800e87a:	4630      	mov	r0, r6
 800e87c:	4911      	ldr	r1, [pc, #68]	; (800e8c4 <E131Params::callbackFunction(char const*)+0x290>)
 800e87e:	f10d 0201 	add.w	r2, sp, #1
 800e882:	f007 fa71 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e886:	2800      	cmp	r0, #0
 800e888:	f47f af06 	bne.w	800e698 <E131Params::callbackFunction(char const*)+0x64>
 800e88c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e890:	6863      	ldr	r3, [r4, #4]
 800e892:	b112      	cbz	r2, 800e89a <E131Params::callbackFunction(char const*)+0x266>
 800e894:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e898:	e733      	b.n	800e702 <E131Params::callbackFunction(char const*)+0xce>
 800e89a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e89e:	e730      	b.n	800e702 <E131Params::callbackFunction(char const*)+0xce>
 800e8a0:	0801bb39 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, fp, ip, sp, pc}
 800e8a4:	0801a0a6 	stmdaeq	r1, {r1, r2, r5, r7, sp, pc}
 800e8a8:	0801a0ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, sp, pc}
 800e8ac:	08019322 	stmdaeq	r1, {r1, r5, r8, r9, ip, pc}
 800e8b0:	0801a0af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, sp, pc}
 800e8b4:	0801b9e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, fp, ip, sp, pc}
 800e8b8:	0801a318 	stmdaeq	r1, {r3, r4, r8, r9, sp, pc}
 800e8bc:	0801bac9 	stmdaeq	r1, {r0, r3, r6, r7, r9, fp, ip, sp, pc}
 800e8c0:	0801bb4b 	stmdaeq	r1, {r0, r1, r3, r6, r8, r9, fp, ip, sp, pc}
 800e8c4:	0801bb23 	stmdaeq	r1, {r0, r1, r5, r8, r9, fp, ip, sp, pc}

0800e8c8 <E131Params::staticCallbackFunction(void*, char const*)>:
 800e8c8:	f7ff beb4 	b.w	800e634 <E131Params::callbackFunction(char const*)>

0800e8cc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>:
 800e8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	4615      	mov	r5, r2
 800e8d4:	461e      	mov	r6, r3
 800e8d6:	b087      	sub	sp, #28
 800e8d8:	3004      	adds	r0, #4
 800e8da:	2900      	cmp	r1, #0
 800e8dc:	d05f      	beq.n	800e99e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xd2>
 800e8de:	221f      	movs	r2, #31
 800e8e0:	f007 ff75 	bl	80167ce <memmove>
 800e8e4:	4633      	mov	r3, r6
 800e8e6:	462a      	mov	r2, r5
 800e8e8:	4990      	ldr	r1, [pc, #576]	; (800eb2c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x260>)
 800e8ea:	a803      	add	r0, sp, #12
 800e8ec:	f007 f860 	bl	80159b0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800e8f0:	2500      	movs	r5, #0
 800e8f2:	4f8f      	ldr	r7, [pc, #572]	; (800eb30 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x264>)
 800e8f4:	4e8f      	ldr	r6, [pc, #572]	; (800eb34 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x268>)
 800e8f6:	f8df 8240 	ldr.w	r8, [pc, #576]	; 800eb38 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x26c>
 800e8fa:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800eb3c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x270>
 800e8fe:	f8d8 2000 	ldr.w	r2, [r8]
 800e902:	6863      	ldr	r3, [r4, #4]
 800e904:	42aa      	cmp	r2, r5
 800e906:	d851      	bhi.n	800e9ac <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xe0>
 800e908:	f8b4 1009 	ldrh.w	r1, [r4, #9]
 800e90c:	4a8c      	ldr	r2, [pc, #560]	; (800eb40 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800e90e:	f003 0301 	and.w	r3, r3, #1
 800e912:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e916:	a803      	add	r0, sp, #12
 800e918:	498a      	ldr	r1, [pc, #552]	; (800eb44 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800e91a:	f7ff fe1f 	bl	800e55c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800e91e:	498a      	ldr	r1, [pc, #552]	; (800eb48 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800e920:	a803      	add	r0, sp, #12
 800e922:	f007 f8cb 	bl	8015abc <PropertiesBuilder::AddComment(char const*)>
 800e926:	2500      	movs	r5, #0
 800e928:	f44f 7b80 	mov.w	fp, #256	; 0x100
 800e92c:	4e87      	ldr	r6, [pc, #540]	; (800eb4c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800e92e:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800eb50 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x284>
 800e932:	f8df a220 	ldr.w	sl, [pc, #544]	; 800eb54 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x288>
 800e936:	f104 0713 	add.w	r7, r4, #19
 800e93a:	f8d8 3000 	ldr.w	r3, [r8]
 800e93e:	42ab      	cmp	r3, r5
 800e940:	d87f      	bhi.n	800ea42 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x176>
 800e942:	4985      	ldr	r1, [pc, #532]	; (800eb58 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800e944:	a803      	add	r0, sp, #12
 800e946:	f007 f8b9 	bl	8015abc <PropertiesBuilder::AddComment(char const*)>
 800e94a:	2700      	movs	r7, #0
 800e94c:	4e83      	ldr	r6, [pc, #524]	; (800eb5c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800e94e:	f8df a210 	ldr.w	sl, [pc, #528]	; 800eb60 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>
 800e952:	f8df b210 	ldr.w	fp, [pc, #528]	; 800eb64 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>
 800e956:	f104 091e 	add.w	r9, r4, #30
 800e95a:	f8d8 3000 	ldr.w	r3, [r8]
 800e95e:	42bb      	cmp	r3, r7
 800e960:	f200 8083 	bhi.w	800ea6a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x19e>
 800e964:	4980      	ldr	r1, [pc, #512]	; (800eb68 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800e966:	a803      	add	r0, sp, #12
 800e968:	f007 f8a8 	bl	8015abc <PropertiesBuilder::AddComment(char const*)>
 800e96c:	6863      	ldr	r3, [r4, #4]
 800e96e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e972:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800e976:	42a2      	cmp	r2, r4
 800e978:	f080 80b8 	bcs.w	800eaec <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x220>
 800e97c:	9803      	ldr	r0, [sp, #12]
 800e97e:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 800e982:	4410      	add	r0, r2
 800e984:	eba4 0402 	sub.w	r4, r4, r2
 800e988:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800e98c:	f040 809d 	bne.w	800eaca <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1fe>
 800e990:	2a00      	cmp	r2, #0
 800e992:	f040 809b 	bne.w	800eacc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x200>
 800e996:	9200      	str	r2, [sp, #0]
 800e998:	4b74      	ldr	r3, [pc, #464]	; (800eb6c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800e99a:	4a72      	ldr	r2, [pc, #456]	; (800eb64 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800e99c:	e09c      	b.n	800ead8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20c>
 800e99e:	6823      	ldr	r3, [r4, #0]
 800e9a0:	4601      	mov	r1, r0
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	68d2      	ldr	r2, [r2, #12]
 800e9a8:	4790      	blx	r2
 800e9aa:	e79b      	b.n	800e8e4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x18>
 800e9ac:	f8bd c012 	ldrh.w	ip, [sp, #18]
 800e9b0:	f8bd b010 	ldrh.w	fp, [sp, #16]
 800e9b4:	eb04 0245 	add.w	r2, r4, r5, lsl #1
 800e9b8:	45dc      	cmp	ip, fp
 800e9ba:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800e9be:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800e9c2:	d221      	bcs.n	800ea08 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x13c>
 800e9c4:	2110      	movs	r1, #16
 800e9c6:	9803      	ldr	r0, [sp, #12]
 800e9c8:	40a9      	lsls	r1, r5
 800e9ca:	ea31 0303 	bics.w	r3, r1, r3
 800e9ce:	4460      	add	r0, ip
 800e9d0:	ebab 0b0c 	sub.w	fp, fp, ip
 800e9d4:	f89d c014 	ldrb.w	ip, [sp, #20]
 800e9d8:	d006      	beq.n	800e9e8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x11c>
 800e9da:	f1bc 0f00 	cmp.w	ip, #0
 800e9de:	d106      	bne.n	800e9ee <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x122>
 800e9e0:	9200      	str	r2, [sp, #0]
 800e9e2:	4633      	mov	r3, r6
 800e9e4:	4a5f      	ldr	r2, [pc, #380]	; (800eb64 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800e9e6:	e005      	b.n	800e9f4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x128>
 800e9e8:	f1bc 0f00 	cmp.w	ip, #0
 800e9ec:	d023      	beq.n	800ea36 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x16a>
 800e9ee:	9200      	str	r2, [sp, #0]
 800e9f0:	4633      	mov	r3, r6
 800e9f2:	464a      	mov	r2, r9
 800e9f4:	4659      	mov	r1, fp
 800e9f6:	f7fa ff0b 	bl	8009810 <snprintf>
 800e9fa:	4583      	cmp	fp, r0
 800e9fc:	bfa2      	ittt	ge
 800e9fe:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800ea02:	18c0      	addge	r0, r0, r3
 800ea04:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800ea08:	f8b4 301d 	ldrh.w	r3, [r4, #29]
 800ea0c:	fa23 f30a 	lsr.w	r3, r3, sl
 800ea10:	f013 0303 	ands.w	r3, r3, #3
 800ea14:	d013      	beq.n	800ea3e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x172>
 800ea16:	4a56      	ldr	r2, [pc, #344]	; (800eb70 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 800ea18:	4956      	ldr	r1, [pc, #344]	; (800eb74 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a8>)
 800ea1a:	2b02      	cmp	r3, #2
 800ea1c:	bf08      	it	eq
 800ea1e:	460a      	moveq	r2, r1
 800ea20:	3b01      	subs	r3, #1
 800ea22:	4639      	mov	r1, r7
 800ea24:	bf18      	it	ne
 800ea26:	2301      	movne	r3, #1
 800ea28:	a803      	add	r0, sp, #12
 800ea2a:	f7ff fd97 	bl	800e55c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800ea2e:	3501      	adds	r5, #1
 800ea30:	3712      	adds	r7, #18
 800ea32:	3610      	adds	r6, #16
 800ea34:	e763      	b.n	800e8fe <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x32>
 800ea36:	9200      	str	r2, [sp, #0]
 800ea38:	4633      	mov	r3, r6
 800ea3a:	4a49      	ldr	r2, [pc, #292]	; (800eb60 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800ea3c:	e7da      	b.n	800e9f4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x128>
 800ea3e:	4a4e      	ldr	r2, [pc, #312]	; (800eb78 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2ac>)
 800ea40:	e7ee      	b.n	800ea20 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x154>
 800ea42:	6861      	ldr	r1, [r4, #4]
 800ea44:	fa0b f305 	lsl.w	r3, fp, r5
 800ea48:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800ea4c:	438b      	bics	r3, r1
 800ea4e:	bf0c      	ite	eq
 800ea50:	2301      	moveq	r3, #1
 800ea52:	2300      	movne	r3, #0
 800ea54:	4631      	mov	r1, r6
 800ea56:	2a00      	cmp	r2, #0
 800ea58:	bf0c      	ite	eq
 800ea5a:	464a      	moveq	r2, r9
 800ea5c:	4652      	movne	r2, sl
 800ea5e:	a803      	add	r0, sp, #12
 800ea60:	f7ff fd7c 	bl	800e55c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800ea64:	3501      	adds	r5, #1
 800ea66:	3612      	adds	r6, #18
 800ea68:	e767      	b.n	800e93a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x6e>
 800ea6a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800ea6e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800ea72:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 800ea76:	42a9      	cmp	r1, r5
 800ea78:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800ea7c:	d21e      	bcs.n	800eabc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f0>
 800ea7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ea82:	9803      	ldr	r0, [sp, #12]
 800ea84:	40ba      	lsls	r2, r7
 800ea86:	ea32 0c0c 	bics.w	ip, r2, ip
 800ea8a:	4408      	add	r0, r1
 800ea8c:	eba5 0501 	sub.w	r5, r5, r1
 800ea90:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800ea94:	d004      	beq.n	800eaa0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d4>
 800ea96:	b921      	cbnz	r1, 800eaa2 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d6>
 800ea98:	9300      	str	r3, [sp, #0]
 800ea9a:	465a      	mov	r2, fp
 800ea9c:	4633      	mov	r3, r6
 800ea9e:	e003      	b.n	800eaa8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
 800eaa0:	b179      	cbz	r1, 800eac2 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f6>
 800eaa2:	9300      	str	r3, [sp, #0]
 800eaa4:	4633      	mov	r3, r6
 800eaa6:	4a25      	ldr	r2, [pc, #148]	; (800eb3c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800eaa8:	4629      	mov	r1, r5
 800eaaa:	f7fa feb1 	bl	8009810 <snprintf>
 800eaae:	4285      	cmp	r5, r0
 800eab0:	bfa2      	ittt	ge
 800eab2:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800eab6:	18c0      	addge	r0, r0, r3
 800eab8:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800eabc:	3701      	adds	r7, #1
 800eabe:	3612      	adds	r6, #18
 800eac0:	e74b      	b.n	800e95a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 800eac2:	9300      	str	r3, [sp, #0]
 800eac4:	4652      	mov	r2, sl
 800eac6:	4633      	mov	r3, r6
 800eac8:	e7ee      	b.n	800eaa8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
 800eaca:	b34a      	cbz	r2, 800eb20 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x254>
 800eacc:	3b00      	subs	r3, #0
 800eace:	bf18      	it	ne
 800ead0:	2301      	movne	r3, #1
 800ead2:	4a1a      	ldr	r2, [pc, #104]	; (800eb3c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800ead4:	9300      	str	r3, [sp, #0]
 800ead6:	4b25      	ldr	r3, [pc, #148]	; (800eb6c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800ead8:	4621      	mov	r1, r4
 800eada:	f7fa fe99 	bl	8009810 <snprintf>
 800eade:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800eae2:	4284      	cmp	r4, r0
 800eae4:	bfa4      	itt	ge
 800eae6:	181b      	addge	r3, r3, r0
 800eae8:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800eaec:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800eaf0:	b17b      	cbz	r3, 800eb12 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x246>
 800eaf2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800eaf6:	9b03      	ldr	r3, [sp, #12]
 800eaf8:	4413      	add	r3, r2
 800eafa:	227d      	movs	r2, #125	; 0x7d
 800eafc:	f803 2c01 	strb.w	r2, [r3, #-1]
 800eb00:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800eb04:	9903      	ldr	r1, [sp, #12]
 800eb06:	54ca      	strb	r2, [r1, r3]
 800eb08:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	f8ad 3012 	strh.w	r3, [sp, #18]
 800eb12:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800eb16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb18:	601a      	str	r2, [r3, #0]
 800eb1a:	b007      	add	sp, #28
 800eb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb20:	2301      	movs	r3, #1
 800eb22:	4a0f      	ldr	r2, [pc, #60]	; (800eb60 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800eb24:	9300      	str	r3, [sp, #0]
 800eb26:	4b11      	ldr	r3, [pc, #68]	; (800eb6c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800eb28:	e7d6      	b.n	800ead8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20c>
 800eb2a:	bf00      	nop
 800eb2c:	0801a360 	stmdaeq	r1, {r5, r6, r8, r9, sp, pc}
 800eb30:	0801bb4b 	stmdaeq	r1, {r0, r1, r3, r6, r8, r9, fp, ip, sp, pc}
 800eb34:	0801b9e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, fp, ip, sp, pc}
 800eb38:	2000c758 	andcs	ip, r0, r8, asr r7
 800eb3c:	08019178 	stmdaeq	r1, {r3, r4, r5, r6, r8, ip, pc}
 800eb40:	0801a308 	stmdaeq	r1, {r3, r8, r9, sp, pc}
 800eb44:	0801bb39 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, fp, ip, sp, pc}
 800eb48:	0801a2f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, sp, pc}
 800eb4c:	0801bac9 	stmdaeq	r1, {r0, r3, r6, r7, r9, fp, ip, sp, pc}
 800eb50:	0801a0d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, sp, pc}
 800eb54:	0801a0d2 	stmdaeq	r1, {r1, r4, r6, r7, sp, pc}
 800eb58:	0801a2fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r9, sp, pc}
 800eb5c:	0801a318 	stmdaeq	r1, {r3, r4, r8, r9, sp, pc}
 800eb60:	08019182 	stmdaeq	r1, {r1, r7, r8, ip, pc}
 800eb64:	08019181 	stmdaeq	r1, {r0, r7, r8, ip, pc}
 800eb68:	08018f41 	stmdaeq	r1, {r0, r6, r8, r9, sl, fp, pc}
 800eb6c:	0801bb23 	stmdaeq	r1, {r0, r1, r5, r8, r9, fp, ip, sp, pc}
 800eb70:	0801a0c3 	stmdaeq	r1, {r0, r1, r6, r7, sp, pc}
 800eb74:	0801a0ca 	stmdaeq	r1, {r1, r3, r6, r7, sp, pc}
 800eb78:	0801a0bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, sp, pc}

0800eb7c <E131Params::Save(char*, unsigned int, unsigned int&)>:
 800eb7c:	b513      	push	{r0, r1, r4, lr}
 800eb7e:	6804      	ldr	r4, [r0, #0]
 800eb80:	b914      	cbnz	r4, 800eb88 <E131Params::Save(char*, unsigned int, unsigned int&)+0xc>
 800eb82:	601c      	str	r4, [r3, #0]
 800eb84:	b002      	add	sp, #8
 800eb86:	bd10      	pop	{r4, pc}
 800eb88:	9300      	str	r3, [sp, #0]
 800eb8a:	4613      	mov	r3, r2
 800eb8c:	460a      	mov	r2, r1
 800eb8e:	2100      	movs	r1, #0
 800eb90:	f7ff fe9c 	bl	800e8cc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>
 800eb94:	e7f6      	b.n	800eb84 <E131Params::Save(char*, unsigned int, unsigned int&)+0x8>

0800eb96 <LLRPDevice::~LLRPDevice()>:
 800eb96:	4770      	bx	lr

0800eb98 <LLRPDevice::CopyUID(unsigned char*)>:
 800eb98:	4770      	bx	lr

0800eb9a <LLRPDevice::CopyCID(unsigned char*)>:
 800eb9a:	4770      	bx	lr

0800eb9c <LLRPDevice::LLRPHandleRdmCommand(unsigned char const*)>:
 800eb9c:	2000      	movs	r0, #0
 800eb9e:	4770      	bx	lr

0800eba0 <LLRPDevice::~LLRPDevice()>:
 800eba0:	b510      	push	{r4, lr}
 800eba2:	4604      	mov	r4, r0
 800eba4:	f007 fd50 	bl	8016648 <operator delete(void*)>
 800eba8:	4620      	mov	r0, r4
 800ebaa:	bd10      	pop	{r4, pc}

0800ebac <memcpy.isra.0>:
 800ebac:	3801      	subs	r0, #1
 800ebae:	440a      	add	r2, r1
 800ebb0:	4291      	cmp	r1, r2
 800ebb2:	d100      	bne.n	800ebb6 <memcpy.isra.0+0xa>
 800ebb4:	4770      	bx	lr
 800ebb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebba:	f800 3f01 	strb.w	r3, [r0, #1]!
 800ebbe:	e7f7      	b.n	800ebb0 <memcpy.isra.0+0x4>

0800ebc0 <LLRPDevice::LLRPDevice()>:
 800ebc0:	b513      	push	{r0, r1, r4, lr}
 800ebc2:	4604      	mov	r4, r0
 800ebc4:	4b09      	ldr	r3, [pc, #36]	; (800ebec <LLRPDevice::LLRPDevice()+0x2c>)
 800ebc6:	a901      	add	r1, sp, #4
 800ebc8:	6003      	str	r3, [r0, #0]
 800ebca:	4809      	ldr	r0, [pc, #36]	; (800ebf0 <LLRPDevice::LLRPDevice()+0x30>)
 800ebcc:	f007 fd44 	bl	8016658 <inet_aton>
 800ebd0:	9a01      	ldr	r2, [sp, #4]
 800ebd2:	4b08      	ldr	r3, [pc, #32]	; (800ebf4 <LLRPDevice::LLRPDevice()+0x34>)
 800ebd4:	a901      	add	r1, sp, #4
 800ebd6:	4808      	ldr	r0, [pc, #32]	; (800ebf8 <LLRPDevice::LLRPDevice()+0x38>)
 800ebd8:	601a      	str	r2, [r3, #0]
 800ebda:	f007 fd3d 	bl	8016658 <inet_aton>
 800ebde:	4620      	mov	r0, r4
 800ebe0:	4b06      	ldr	r3, [pc, #24]	; (800ebfc <LLRPDevice::LLRPDevice()+0x3c>)
 800ebe2:	9a01      	ldr	r2, [sp, #4]
 800ebe4:	601a      	str	r2, [r3, #0]
 800ebe6:	b002      	add	sp, #8
 800ebe8:	bd10      	pop	{r4, pc}
 800ebea:	bf00      	nop
 800ebec:	0801a428 	stmdaeq	r1, {r3, r5, sl, sp, pc}
 800ebf0:	0801a377 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, r9, sp, pc}
 800ebf4:	2000c760 	andcs	ip, r0, r0, ror #14
 800ebf8:	0801a387 	stmdaeq	r1, {r0, r1, r2, r7, r8, r9, sp, pc}
 800ebfc:	2000c764 	andcs	ip, r0, r4, ror #14

0800ec00 <LLRPDevice::HandleRequestMessage()>:
 800ec00:	b570      	push	{r4, r5, r6, lr}
 800ec02:	4b23      	ldr	r3, [pc, #140]	; (800ec90 <LLRPDevice::HandleRequestMessage()+0x90>)
 800ec04:	b086      	sub	sp, #24
 800ec06:	681c      	ldr	r4, [r3, #0]
 800ec08:	4605      	mov	r5, r0
 800ec0a:	f104 0617 	add.w	r6, r4, #23
 800ec0e:	2210      	movs	r2, #16
 800ec10:	4631      	mov	r1, r6
 800ec12:	a802      	add	r0, sp, #8
 800ec14:	f7ff ffca 	bl	800ebac <memcpy.isra.0>
 800ec18:	2343      	movs	r3, #67	; 0x43
 800ec1a:	74a3      	strb	r3, [r4, #18]
 800ec1c:	682b      	ldr	r3, [r5, #0]
 800ec1e:	4631      	mov	r1, r6
 800ec20:	4628      	mov	r0, r5
 800ec22:	68db      	ldr	r3, [r3, #12]
 800ec24:	4798      	blx	r3
 800ec26:	232c      	movs	r3, #44	; 0x2c
 800ec28:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 800ec32:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
 800ec36:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800ec3a:	2302      	movs	r3, #2
 800ec3c:	2210      	movs	r2, #16
 800ec3e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800ec42:	a902      	add	r1, sp, #8
 800ec44:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 800ec48:	f7ff ffb0 	bl	800ebac <memcpy.isra.0>
 800ec4c:	2311      	movs	r3, #17
 800ec4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ec52:	2301      	movs	r3, #1
 800ec54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ec58:	682b      	ldr	r3, [r5, #0]
 800ec5a:	4628      	mov	r0, r5
 800ec5c:	f104 0146 	add.w	r1, r4, #70	; 0x46
 800ec60:	689b      	ldr	r3, [r3, #8]
 800ec62:	4798      	blx	r3
 800ec64:	4b0b      	ldr	r3, [pc, #44]	; (800ec94 <LLRPDevice::HandleRequestMessage()+0x94>)
 800ec66:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800ec6a:	6818      	ldr	r0, [r3, #0]
 800ec6c:	f005 f8ba 	bl	8013de4 <Network::MacAddressCopyTo(unsigned char*)>
 800ec70:	23ff      	movs	r3, #255	; 0xff
 800ec72:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 800ec76:	f241 53c1 	movw	r3, #5569	; 0x15c1
 800ec7a:	4807      	ldr	r0, [pc, #28]	; (800ec98 <LLRPDevice::HandleRequestMessage()+0x98>)
 800ec7c:	9300      	str	r3, [sp, #0]
 800ec7e:	4b07      	ldr	r3, [pc, #28]	; (800ec9c <LLRPDevice::HandleRequestMessage()+0x9c>)
 800ec80:	2253      	movs	r2, #83	; 0x53
 800ec82:	4621      	mov	r1, r4
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	7800      	ldrb	r0, [r0, #0]
 800ec88:	f004 fbde 	bl	8013448 <udp_send>
 800ec8c:	b006      	add	sp, #24
 800ec8e:	bd70      	pop	{r4, r5, r6, pc}
 800ec90:	2000c768 	andcs	ip, r0, r8, ror #14
 800ec94:	2001d2d4 	ldrdcs	sp, [r1], -r4
 800ec98:	20000000 	andcs	r0, r0, r0
 800ec9c:	2000c764 	andcs	ip, r0, r4, ror #14

0800eca0 <LLRPDevice::HandleRdmCommand()>:
 800eca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eca4:	4b22      	ldr	r3, [pc, #136]	; (800ed30 <LLRPDevice::HandleRdmCommand()+0x90>)
 800eca6:	b086      	sub	sp, #24
 800eca8:	681c      	ldr	r4, [r3, #0]
 800ecaa:	6803      	ldr	r3, [r0, #0]
 800ecac:	f104 0946 	add.w	r9, r4, #70	; 0x46
 800ecb0:	4649      	mov	r1, r9
 800ecb2:	691b      	ldr	r3, [r3, #16]
 800ecb4:	4607      	mov	r7, r0
 800ecb6:	4798      	blx	r3
 800ecb8:	4605      	mov	r5, r0
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	d034      	beq.n	800ed28 <LLRPDevice::HandleRdmCommand()+0x88>
 800ecbe:	7803      	ldrb	r3, [r0, #0]
 800ecc0:	2bcc      	cmp	r3, #204	; 0xcc
 800ecc2:	d131      	bne.n	800ed28 <LLRPDevice::HandleRdmCommand()+0x88>
 800ecc4:	f104 0a17 	add.w	sl, r4, #23
 800ecc8:	2210      	movs	r2, #16
 800ecca:	4651      	mov	r1, sl
 800eccc:	a802      	add	r0, sp, #8
 800ecce:	f7ff ff6d 	bl	800ebac <memcpy.isra.0>
 800ecd2:	78ae      	ldrb	r6, [r5, #2]
 800ecd4:	4651      	mov	r1, sl
 800ecd6:	f106 0837 	add.w	r8, r6, #55	; 0x37
 800ecda:	fa5f f888 	uxtb.w	r8, r8
 800ecde:	f884 8012 	strb.w	r8, [r4, #18]
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	4638      	mov	r0, r7
 800ece6:	68db      	ldr	r3, [r3, #12]
 800ece8:	4798      	blx	r3
 800ecea:	f106 0320 	add.w	r3, r6, #32
 800ecee:	2210      	movs	r2, #16
 800ecf0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 800ecf4:	a902      	add	r1, sp, #8
 800ecf6:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 800ecfa:	f7ff ff57 	bl	800ebac <memcpy.isra.0>
 800ecfe:	1d73      	adds	r3, r6, #5
 800ed00:	1c72      	adds	r2, r6, #1
 800ed02:	4648      	mov	r0, r9
 800ed04:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ed08:	b2d2      	uxtb	r2, r2
 800ed0a:	1c69      	adds	r1, r5, #1
 800ed0c:	f7ff ff4e 	bl	800ebac <memcpy.isra.0>
 800ed10:	f241 53c1 	movw	r3, #5569	; 0x15c1
 800ed14:	4807      	ldr	r0, [pc, #28]	; (800ed34 <LLRPDevice::HandleRdmCommand()+0x94>)
 800ed16:	9300      	str	r3, [sp, #0]
 800ed18:	4b07      	ldr	r3, [pc, #28]	; (800ed38 <LLRPDevice::HandleRdmCommand()+0x98>)
 800ed1a:	4621      	mov	r1, r4
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	7800      	ldrb	r0, [r0, #0]
 800ed20:	f108 0210 	add.w	r2, r8, #16
 800ed24:	f004 fb90 	bl	8013448 <udp_send>
 800ed28:	b006      	add	sp, #24
 800ed2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed2e:	bf00      	nop
 800ed30:	2000c768 	andcs	ip, r0, r8, ror #14
 800ed34:	20000000 	andcs	r0, r0, r0
 800ed38:	2000c764 	andcs	ip, r0, r4, ror #14

0800ed3c <LLRPDevice::Run()>:
 800ed3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed3e:	4604      	mov	r4, r0
 800ed40:	4d0e      	ldr	r5, [pc, #56]	; (800ed7c <LLRPDevice::Run()+0x40>)
 800ed42:	480f      	ldr	r0, [pc, #60]	; (800ed80 <LLRPDevice::Run()+0x44>)
 800ed44:	4629      	mov	r1, r5
 800ed46:	4a0f      	ldr	r2, [pc, #60]	; (800ed84 <LLRPDevice::Run()+0x48>)
 800ed48:	7800      	ldrb	r0, [r0, #0]
 800ed4a:	f10d 0306 	add.w	r3, sp, #6
 800ed4e:	f004 fb55 	bl	80133fc <udp_recv2>
 800ed52:	2841      	cmp	r0, #65	; 0x41
 800ed54:	d908      	bls.n	800ed68 <LLRPDevice::Run()+0x2c>
 800ed56:	682b      	ldr	r3, [r5, #0]
 800ed58:	f8d3 302a 	ldr.w	r3, [r3, #42]	; 0x2a
 800ed5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ed60:	ba1a      	rev	r2, r3
 800ed62:	d003      	beq.n	800ed6c <LLRPDevice::Run()+0x30>
 800ed64:	2a03      	cmp	r2, #3
 800ed66:	d005      	beq.n	800ed74 <LLRPDevice::Run()+0x38>
 800ed68:	b003      	add	sp, #12
 800ed6a:	bd30      	pop	{r4, r5, pc}
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	f7ff ff47 	bl	800ec00 <LLRPDevice::HandleRequestMessage()>
 800ed72:	e7f9      	b.n	800ed68 <LLRPDevice::Run()+0x2c>
 800ed74:	4620      	mov	r0, r4
 800ed76:	f7ff ff93 	bl	800eca0 <LLRPDevice::HandleRdmCommand()>
 800ed7a:	e7f5      	b.n	800ed68 <LLRPDevice::Run()+0x2c>
 800ed7c:	2000c768 	andcs	ip, r0, r8, ror #14
 800ed80:	20000000 	andcs	r0, r0, r0
 800ed84:	2000c75c 	andcs	ip, r0, ip, asr r7

0800ed88 <LLRPDevice::Print()>:
 800ed88:	b507      	push	{r0, r1, r2, lr}
 800ed8a:	4811      	ldr	r0, [pc, #68]	; (800edd0 <LLRPDevice::Print()+0x48>)
 800ed8c:	f7fa fd18 	bl	80097c0 <printf>
 800ed90:	f241 51c1 	movw	r1, #5569	; 0x15c1
 800ed94:	480f      	ldr	r0, [pc, #60]	; (800edd4 <LLRPDevice::Print()+0x4c>)
 800ed96:	f7fa fd13 	bl	80097c0 <printf>
 800ed9a:	4b0f      	ldr	r3, [pc, #60]	; (800edd8 <LLRPDevice::Print()+0x50>)
 800ed9c:	480f      	ldr	r0, [pc, #60]	; (800eddc <LLRPDevice::Print()+0x54>)
 800ed9e:	6819      	ldr	r1, [r3, #0]
 800eda0:	0e0b      	lsrs	r3, r1, #24
 800eda2:	9300      	str	r3, [sp, #0]
 800eda4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800eda8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800edac:	b2c9      	uxtb	r1, r1
 800edae:	f7fa fd07 	bl	80097c0 <printf>
 800edb2:	4b0b      	ldr	r3, [pc, #44]	; (800ede0 <LLRPDevice::Print()+0x58>)
 800edb4:	480b      	ldr	r0, [pc, #44]	; (800ede4 <LLRPDevice::Print()+0x5c>)
 800edb6:	6819      	ldr	r1, [r3, #0]
 800edb8:	0e0b      	lsrs	r3, r1, #24
 800edba:	9300      	str	r3, [sp, #0]
 800edbc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800edc0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800edc4:	b2c9      	uxtb	r1, r1
 800edc6:	f7fa fcfb 	bl	80097c0 <printf>
 800edca:	b003      	add	sp, #12
 800edcc:	f85d fb04 	ldr.w	pc, [sp], #4
 800edd0:	0801a397 	stmdaeq	r1, {r0, r1, r2, r4, r7, r8, r9, sp, pc}
 800edd4:	0801a3b2 	stmdaeq	r1, {r1, r4, r5, r7, r8, r9, sp, pc}
 800edd8:	2000c760 	andcs	ip, r0, r0, ror #14
 800eddc:	0801a3d0 	stmdaeq	r1, {r4, r6, r7, r8, r9, sp, pc}
 800ede0:	2000c764 	andcs	ip, r0, r4, ror #14
 800ede4:	0801a3f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sp, pc}

0800ede8 <RDMNetDevice::Print()>:
 800ede8:	2300      	movs	r3, #0
 800edea:	b510      	push	{r4, lr}
 800edec:	4604      	mov	r4, r0
 800edee:	b08a      	sub	sp, #40	; 0x28
 800edf0:	4669      	mov	r1, sp
 800edf2:	480a      	ldr	r0, [pc, #40]	; (800ee1c <RDMNetDevice::Print()+0x34>)
 800edf4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800edf8:	f001 f94a 	bl	8010090 <uuid_unparse>
 800edfc:	4808      	ldr	r0, [pc, #32]	; (800ee20 <RDMNetDevice::Print()+0x38>)
 800edfe:	f7fa fcdf 	bl	80097c0 <printf>
 800ee02:	4669      	mov	r1, sp
 800ee04:	4807      	ldr	r0, [pc, #28]	; (800ee24 <RDMNetDevice::Print()+0x3c>)
 800ee06:	f7fa fcdb 	bl	80097c0 <printf>
 800ee0a:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 800ee0e:	f7ff ffbb 	bl	800ed88 <LLRPDevice::Print()>
 800ee12:	4620      	mov	r0, r4
 800ee14:	f000 fa38 	bl	800f288 <RDMDeviceResponder::Print()>
 800ee18:	b00a      	add	sp, #40	; 0x28
 800ee1a:	bd10      	pop	{r4, pc}
 800ee1c:	2000c86b 	andcs	ip, r0, fp, ror #16
 800ee20:	0801a46e 	stmdaeq	r1, {r1, r2, r3, r5, r6, sl, sp, pc}
 800ee24:	0801a476 	stmdaeq	r1, {r1, r2, r4, r5, r6, sl, sp, pc}

0800ee28 <RDMSensors::RDMSensors()>:
 800ee28:	2200      	movs	r2, #0
 800ee2a:	6002      	str	r2, [r0, #0]
 800ee2c:	7102      	strb	r2, [r0, #4]
 800ee2e:	4a01      	ldr	r2, [pc, #4]	; (800ee34 <RDMSensors::RDMSensors()+0xc>)
 800ee30:	6010      	str	r0, [r2, #0]
 800ee32:	4770      	bx	lr
 800ee34:	2000c87c 	andcs	ip, r0, ip, ror r8

0800ee38 <RDMSensors::~RDMSensors()>:
 800ee38:	b570      	push	{r4, r5, r6, lr}
 800ee3a:	2500      	movs	r5, #0
 800ee3c:	4604      	mov	r4, r0
 800ee3e:	462e      	mov	r6, r5
 800ee40:	7923      	ldrb	r3, [r4, #4]
 800ee42:	6820      	ldr	r0, [r4, #0]
 800ee44:	42ab      	cmp	r3, r5
 800ee46:	d804      	bhi.n	800ee52 <RDMSensors::~RDMSensors()+0x1a>
 800ee48:	b108      	cbz	r0, 800ee4e <RDMSensors::~RDMSensors()+0x16>
 800ee4a:	f007 fbff 	bl	801664c <operator delete[](void*)>
 800ee4e:	4620      	mov	r0, r4
 800ee50:	bd70      	pop	{r4, r5, r6, pc}
 800ee52:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 800ee56:	b128      	cbz	r0, 800ee64 <RDMSensors::~RDMSensors()+0x2c>
 800ee58:	6803      	ldr	r3, [r0, #0]
 800ee5a:	685b      	ldr	r3, [r3, #4]
 800ee5c:	4798      	blx	r3
 800ee5e:	6823      	ldr	r3, [r4, #0]
 800ee60:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 800ee64:	3501      	adds	r5, #1
 800ee66:	e7eb      	b.n	800ee40 <RDMSensors::~RDMSensors()+0x8>

0800ee68 <RDMSubDevices::RDMSubDevices()>:
 800ee68:	2200      	movs	r2, #0
 800ee6a:	6002      	str	r2, [r0, #0]
 800ee6c:	8082      	strh	r2, [r0, #4]
 800ee6e:	4a01      	ldr	r2, [pc, #4]	; (800ee74 <RDMSubDevices::RDMSubDevices()+0xc>)
 800ee70:	6010      	str	r0, [r2, #0]
 800ee72:	4770      	bx	lr
 800ee74:	2000c880 	andcs	ip, r0, r0, lsl #17

0800ee78 <RDMSubDevices::~RDMSubDevices()>:
 800ee78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee7a:	2500      	movs	r5, #0
 800ee7c:	4604      	mov	r4, r0
 800ee7e:	462e      	mov	r6, r5
 800ee80:	88a3      	ldrh	r3, [r4, #4]
 800ee82:	6820      	ldr	r0, [r4, #0]
 800ee84:	42ab      	cmp	r3, r5
 800ee86:	d804      	bhi.n	800ee92 <RDMSubDevices::~RDMSubDevices()+0x1a>
 800ee88:	b108      	cbz	r0, 800ee8e <RDMSubDevices::~RDMSubDevices()+0x16>
 800ee8a:	f007 fbdf 	bl	801664c <operator delete[](void*)>
 800ee8e:	4620      	mov	r0, r4
 800ee90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee92:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 800ee96:	00af      	lsls	r7, r5, #2
 800ee98:	b110      	cbz	r0, 800eea0 <RDMSubDevices::~RDMSubDevices()+0x28>
 800ee9a:	6803      	ldr	r3, [r0, #0]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	4798      	blx	r3
 800eea0:	6823      	ldr	r3, [r4, #0]
 800eea2:	3501      	adds	r5, #1
 800eea4:	51de      	str	r6, [r3, r7]
 800eea6:	e7eb      	b.n	800ee80 <RDMSubDevices::~RDMSubDevices()+0x8>

0800eea8 <RDMSubDevices::GetInfo(unsigned short)>:
 800eea8:	6803      	ldr	r3, [r0, #0]
 800eeaa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800eeae:	3901      	subs	r1, #1
 800eeb0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800eeb4:	3010      	adds	r0, #16
 800eeb6:	4770      	bx	lr

0800eeb8 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>:
 800eeb8:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 800eebc:	6800      	ldr	r0, [r0, #0]
 800eebe:	3b01      	subs	r3, #1
 800eec0:	4611      	mov	r1, r2
 800eec2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800eec6:	f000 b82f 	b.w	800ef28 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>

0800eeca <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>:
 800eeca:	b410      	push	{r4}
 800eecc:	460c      	mov	r4, r1
 800eece:	6800      	ldr	r0, [r0, #0]
 800eed0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800eed4:	3c01      	subs	r4, #1
 800eed6:	4611      	mov	r1, r2
 800eed8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800eedc:	461a      	mov	r2, r3
 800eede:	bc10      	pop	{r4}
 800eee0:	f000 b837 	b.w	800ef52 <RDMSubDevice::SetLabel(char const*, unsigned char)>

0800eee4 <RDMSubDevices::GetFactoryDefaults()>:
 800eee4:	b538      	push	{r3, r4, r5, lr}
 800eee6:	4605      	mov	r5, r0
 800eee8:	2400      	movs	r4, #0
 800eeea:	88ab      	ldrh	r3, [r5, #4]
 800eeec:	42a3      	cmp	r3, r4
 800eeee:	d801      	bhi.n	800eef4 <RDMSubDevices::GetFactoryDefaults()+0x10>
 800eef0:	2001      	movs	r0, #1
 800eef2:	e009      	b.n	800ef08 <RDMSubDevices::GetFactoryDefaults()+0x24>
 800eef4:	682b      	ldr	r3, [r5, #0]
 800eef6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800eefa:	b908      	cbnz	r0, 800ef00 <RDMSubDevices::GetFactoryDefaults()+0x1c>
 800eefc:	3401      	adds	r4, #1
 800eefe:	e7f4      	b.n	800eeea <RDMSubDevices::GetFactoryDefaults()+0x6>
 800ef00:	f000 f85c 	bl	800efbc <RDMSubDevice::GetFactoryDefaults()>
 800ef04:	2800      	cmp	r0, #0
 800ef06:	d1f9      	bne.n	800eefc <RDMSubDevices::GetFactoryDefaults()+0x18>
 800ef08:	bd38      	pop	{r3, r4, r5, pc}

0800ef0a <RDMSubDevices::SetFactoryDefaults()>:
 800ef0a:	b538      	push	{r3, r4, r5, lr}
 800ef0c:	4605      	mov	r5, r0
 800ef0e:	2400      	movs	r4, #0
 800ef10:	88ab      	ldrh	r3, [r5, #4]
 800ef12:	42a3      	cmp	r3, r4
 800ef14:	d800      	bhi.n	800ef18 <RDMSubDevices::SetFactoryDefaults()+0xe>
 800ef16:	bd38      	pop	{r3, r4, r5, pc}
 800ef18:	682b      	ldr	r3, [r5, #0]
 800ef1a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ef1e:	b108      	cbz	r0, 800ef24 <RDMSubDevices::SetFactoryDefaults()+0x1a>
 800ef20:	f000 f826 	bl	800ef70 <RDMSubDevice::SetFactoryDefaults()>
 800ef24:	3401      	adds	r4, #1
 800ef26:	e7f3      	b.n	800ef10 <RDMSubDevices::SetFactoryDefaults()+0x6>

0800ef28 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>:
 800ef28:	f100 0316 	add.w	r3, r0, #22
 800ef2c:	600b      	str	r3, [r1, #0]
 800ef2e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800ef32:	710b      	strb	r3, [r1, #4]
 800ef34:	4770      	bx	lr

0800ef36 <RDMSubDevice::SetLabel(char const*)>:
 800ef36:	2300      	movs	r3, #0
 800ef38:	b510      	push	{r4, lr}
 800ef3a:	f100 0415 	add.w	r4, r0, #21
 800ef3e:	5cca      	ldrb	r2, [r1, r3]
 800ef40:	b122      	cbz	r2, 800ef4c <RDMSubDevice::SetLabel(char const*)+0x16>
 800ef42:	3301      	adds	r3, #1
 800ef44:	2b20      	cmp	r3, #32
 800ef46:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ef4a:	d1f8      	bne.n	800ef3e <RDMSubDevice::SetLabel(char const*)+0x8>
 800ef4c:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 800ef50:	bd10      	pop	{r4, pc}

0800ef52 <RDMSubDevice::SetLabel(char const*, unsigned char)>:
 800ef52:	2300      	movs	r3, #0
 800ef54:	b530      	push	{r4, r5, lr}
 800ef56:	f100 0415 	add.w	r4, r0, #21
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d905      	bls.n	800ef6a <RDMSubDevice::SetLabel(char const*, unsigned char)+0x18>
 800ef5e:	5ccd      	ldrb	r5, [r1, r3]
 800ef60:	3301      	adds	r3, #1
 800ef62:	2b20      	cmp	r3, #32
 800ef64:	f804 5f01 	strb.w	r5, [r4, #1]!
 800ef68:	d1f7      	bne.n	800ef5a <RDMSubDevice::SetLabel(char const*, unsigned char)+0x8>
 800ef6a:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
 800ef6e:	bd30      	pop	{r4, r5, pc}

0800ef70 <RDMSubDevice::SetFactoryDefaults()>:
 800ef70:	7a03      	ldrb	r3, [r0, #8]
 800ef72:	b510      	push	{r4, lr}
 800ef74:	b94b      	cbnz	r3, 800ef8a <RDMSubDevice::SetFactoryDefaults()+0x1a>
 800ef76:	f100 0138 	add.w	r1, r0, #56	; 0x38
 800ef7a:	f7ff ffdc 	bl	800ef36 <RDMSubDevice::SetLabel(char const*)>
 800ef7e:	8983      	ldrh	r3, [r0, #12]
 800ef80:	8243      	strh	r3, [r0, #18]
 800ef82:	7b83      	ldrb	r3, [r0, #14]
 800ef84:	7503      	strb	r3, [r0, #20]
 800ef86:	2301      	movs	r3, #1
 800ef88:	7203      	strb	r3, [r0, #8]
 800ef8a:	bd10      	pop	{r4, pc}

0800ef8c <RDMSubDevice::CalculateChecksum()>:
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	b510      	push	{r4, lr}
 800ef90:	8a43      	ldrh	r3, [r0, #18]
 800ef92:	7d01      	ldrb	r1, [r0, #20]
 800ef94:	f892 4036 	ldrb.w	r4, [r2, #54]	; 0x36
 800ef98:	440b      	add	r3, r1
 800ef9a:	b298      	uxth	r0, r3
 800ef9c:	f102 0315 	add.w	r3, r2, #21
 800efa0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800efa4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800efa8:	32eb      	adds	r2, #235	; 0xeb
 800efaa:	18d1      	adds	r1, r2, r3
 800efac:	428c      	cmp	r4, r1
 800efae:	d800      	bhi.n	800efb2 <RDMSubDevice::CalculateChecksum()+0x26>
 800efb0:	bd10      	pop	{r4, pc}
 800efb2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800efb6:	4408      	add	r0, r1
 800efb8:	b280      	uxth	r0, r0
 800efba:	e7f6      	b.n	800efaa <RDMSubDevice::CalculateChecksum()+0x1e>

0800efbc <RDMSubDevice::GetFactoryDefaults()>:
 800efbc:	7a03      	ldrb	r3, [r0, #8]
 800efbe:	b510      	push	{r4, lr}
 800efc0:	4604      	mov	r4, r0
 800efc2:	b133      	cbz	r3, 800efd2 <RDMSubDevice::GetFactoryDefaults()+0x16>
 800efc4:	f7ff ffe2 	bl	800ef8c <RDMSubDevice::CalculateChecksum()>
 800efc8:	8963      	ldrh	r3, [r4, #10]
 800efca:	4283      	cmp	r3, r0
 800efcc:	bf1c      	itt	ne
 800efce:	2300      	movne	r3, #0
 800efd0:	7223      	strbne	r3, [r4, #8]
 800efd2:	7a20      	ldrb	r0, [r4, #8]
 800efd4:	bd10      	pop	{r4, pc}

0800efd6 <memcpy.isra.0>:
 800efd6:	f007 bbef 	b.w	80167b8 <memcpy>
	...

0800efdc <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 800efdc:	b510      	push	{r4, lr}
 800efde:	6001      	str	r1, [r0, #0]
 800efe0:	2100      	movs	r1, #0
 800efe2:	4604      	mov	r4, r0
 800efe4:	6041      	str	r1, [r0, #4]
 800efe6:	2220      	movs	r2, #32
 800efe8:	3008      	adds	r0, #8
 800efea:	f007 fc07 	bl	80167fc <memset>
 800efee:	4b03      	ldr	r3, [pc, #12]	; (800effc <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x20>)
 800eff0:	4620      	mov	r0, r4
 800eff2:	62a3      	str	r3, [r4, #40]	; 0x28
 800eff4:	237f      	movs	r3, #127	; 0x7f
 800eff6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800effa:	bd10      	pop	{r4, pc}
 800effc:	ff7fff00 			; <UNDEFINED> instruction: 0xff7fff00

0800f000 <RDMDeviceParams::Load()>:
 800f000:	4601      	mov	r1, r0
 800f002:	6800      	ldr	r0, [r0, #0]
 800f004:	b130      	cbz	r0, 800f014 <RDMDeviceParams::Load()+0x14>
 800f006:	b508      	push	{r3, lr}
 800f008:	6803      	ldr	r3, [r0, #0]
 800f00a:	3104      	adds	r1, #4
 800f00c:	68db      	ldr	r3, [r3, #12]
 800f00e:	4798      	blx	r3
 800f010:	2001      	movs	r0, #1
 800f012:	bd08      	pop	{r3, pc}
 800f014:	4770      	bx	lr

0800f016 <RDMDeviceParams::Set(RDMDevice*)>:
 800f016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f018:	6843      	ldr	r3, [r0, #4]
 800f01a:	460c      	mov	r4, r1
 800f01c:	07d9      	lsls	r1, r3, #31
 800f01e:	4605      	mov	r5, r0
 800f020:	d518      	bpl.n	800f054 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 800f022:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 800f026:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800f02a:	2e20      	cmp	r6, #32
 800f02c:	bf28      	it	cs
 800f02e:	2620      	movcs	r6, #32
 800f030:	f100 0108 	add.w	r1, r0, #8
 800f034:	b1e3      	cbz	r3, 800f070 <RDMDeviceParams::Set(RDMDevice*)+0x5a>
 800f036:	f104 070a 	add.w	r7, r4, #10
 800f03a:	4638      	mov	r0, r7
 800f03c:	4632      	mov	r2, r6
 800f03e:	f7ff ffca 	bl	800efd6 <memcpy.isra.0>
 800f042:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800f044:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
 800f048:	b120      	cbz	r0, 800f054 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 800f04a:	6803      	ldr	r3, [r0, #0]
 800f04c:	4632      	mov	r2, r6
 800f04e:	4639      	mov	r1, r7
 800f050:	689b      	ldr	r3, [r3, #8]
 800f052:	4798      	blx	r3
 800f054:	686b      	ldr	r3, [r5, #4]
 800f056:	079a      	lsls	r2, r3, #30
 800f058:	bf44      	itt	mi
 800f05a:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 800f05e:	f8a4 204c 	strhmi.w	r2, [r4, #76]	; 0x4c
 800f062:	075b      	lsls	r3, r3, #29
 800f064:	bf44      	itt	mi
 800f066:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 800f06a:	f8a4 304e 	strhmi.w	r3, [r4, #78]	; 0x4e
 800f06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f070:	4632      	mov	r2, r6
 800f072:	f104 0051 	add.w	r0, r4, #81	; 0x51
 800f076:	f7ff ffae 	bl	800efd6 <memcpy.isra.0>
 800f07a:	f884 6071 	strb.w	r6, [r4, #113]	; 0x71
 800f07e:	e7e9      	b.n	800f054 <RDMDeviceParams::Set(RDMDevice*)+0x3e>

0800f080 <RDMDeviceParams::Dump()>:
 800f080:	4770      	bx	lr

0800f082 <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
 800f082:	4770      	bx	lr

0800f084 <RDMDeviceResponder::DmxStartAddressUpdate()>:
 800f084:	4770      	bx	lr
	...

0800f088 <RDMDeviceResponder::~RDMDeviceResponder()>:
 800f088:	b510      	push	{r4, lr}
 800f08a:	4604      	mov	r4, r0
 800f08c:	4b05      	ldr	r3, [pc, #20]	; (800f0a4 <RDMDeviceResponder::~RDMDeviceResponder()+0x1c>)
 800f08e:	f840 3b88 	str.w	r3, [r0], #136
 800f092:	f7ff fef1 	bl	800ee78 <RDMSubDevices::~RDMSubDevices()>
 800f096:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800f09a:	f7ff fecd 	bl	800ee38 <RDMSensors::~RDMSensors()>
 800f09e:	4620      	mov	r0, r4
 800f0a0:	bd10      	pop	{r4, pc}
 800f0a2:	bf00      	nop
 800f0a4:	0801a540 	stmdaeq	r1, {r6, r8, sl, sp, pc}

0800f0a8 <RDMDeviceResponder::~RDMDeviceResponder()>:
 800f0a8:	b510      	push	{r4, lr}
 800f0aa:	4604      	mov	r4, r0
 800f0ac:	f7ff ffec 	bl	800f088 <RDMDeviceResponder::~RDMDeviceResponder()>
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	f007 fac9 	bl	8016648 <operator delete(void*)>
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	bd10      	pop	{r4, pc}
	...

0800f0bc <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>:
 800f0bc:	b570      	push	{r4, r5, r6, lr}
 800f0be:	4604      	mov	r4, r0
 800f0c0:	3004      	adds	r0, #4
 800f0c2:	460e      	mov	r6, r1
 800f0c4:	4615      	mov	r5, r2
 800f0c6:	f000 feeb 	bl	800fea0 <RDMDevice::RDMDevice()>
 800f0ca:	4620      	mov	r0, r4
 800f0cc:	4b21      	ldr	r3, [pc, #132]	; (800f154 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x98>)
 800f0ce:	f840 3b7c 	str.w	r3, [r0], #124
 800f0d2:	f000 fcf5 	bl	800fac0 <RDMIdentify::RDMIdentify()>
 800f0d6:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800f0da:	f7ff fea5 	bl	800ee28 <RDMSensors::RDMSensors()>
 800f0de:	f104 0088 	add.w	r0, r4, #136	; 0x88
 800f0e2:	f7ff fec1 	bl	800ee68 <RDMSubDevices::RDMSubDevices()>
 800f0e6:	4b1c      	ldr	r3, [pc, #112]	; (800f158 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x9c>)
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	601c      	str	r4, [r3, #0]
 800f0ec:	2365      	movs	r3, #101	; 0x65
 800f0ee:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
 800f0f2:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800f0f6:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
 800f100:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 800f104:	f8c4 20c8 	str.w	r2, [r4, #200]	; 0xc8
 800f108:	f104 0399 	add.w	r3, r4, #153	; 0x99
 800f10c:	f104 01ac 	add.w	r1, r4, #172	; 0xac
 800f110:	428b      	cmp	r3, r1
 800f112:	d119      	bne.n	800f148 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x8c>
 800f114:	2100      	movs	r1, #0
 800f116:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d117      	bne.n	800f14e <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x92>
 800f11e:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 800f122:	f7fa f847 	bl	80091b4 <RDMSoftwareVersion::GetVersion()>
 800f126:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
 800f12a:	f7fa f847 	bl	80091bc <RDMSoftwareVersion::GetVersionLength()>
 800f12e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f132:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	685b      	ldr	r3, [r3, #4]
 800f13a:	b91b      	cbnz	r3, 800f144 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x88>
 800f13c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f140:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 800f144:	4620      	mov	r0, r4
 800f146:	bd70      	pop	{r4, r5, r6, pc}
 800f148:	f803 2b01 	strb.w	r2, [r3], #1
 800f14c:	e7e0      	b.n	800f110 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x54>
 800f14e:	f803 1b01 	strb.w	r1, [r3], #1
 800f152:	e7e2      	b.n	800f11a <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x5e>
 800f154:	0801a540 	stmdaeq	r1, {r6, r8, sl, sp, pc}
 800f158:	2000c884 	andcs	ip, r0, r4, lsl #17

0800f15c <RDMDeviceResponder::Init()>:
 800f15c:	2301      	movs	r3, #1
 800f15e:	b570      	push	{r4, r5, r6, lr}
 800f160:	4604      	mov	r4, r0
 800f162:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
 800f166:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 800f16a:	3055      	adds	r0, #85	; 0x55
 800f16c:	2a20      	cmp	r2, #32
 800f16e:	bf28      	it	cs
 800f170:	2220      	movcs	r2, #32
 800f172:	4613      	mov	r3, r2
 800f174:	f104 010e 	add.w	r1, r4, #14
 800f178:	3b01      	subs	r3, #1
 800f17a:	d25d      	bcs.n	800f238 <RDMDeviceResponder::Init()+0xdc>
 800f17c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800f17e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 800f182:	b110      	cbz	r0, 800f18a <RDMDeviceResponder::Init()+0x2e>
 800f184:	6803      	ldr	r3, [r0, #0]
 800f186:	689b      	ldr	r3, [r3, #8]
 800f188:	4798      	blx	r3
 800f18a:	f06f 050c 	mvn.w	r5, #12
 800f18e:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800f192:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 800f196:	f104 020d 	add.w	r2, r4, #13
 800f19a:	1b2d      	subs	r5, r5, r4
 800f19c:	18a9      	adds	r1, r5, r2
 800f19e:	4288      	cmp	r0, r1
 800f1a0:	d84f      	bhi.n	800f242 <RDMDeviceResponder::Init()+0xe6>
 800f1a2:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
 800f1a6:	f7fa f80b 	bl	80091c0 <RDMSoftwareVersion::GetVersionId()>
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800f1b6:	f8a4 209a 	strh.w	r2, [r4, #154]	; 0x9a
 800f1ba:	f884 209c 	strb.w	r2, [r4, #156]	; 0x9c
 800f1be:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
 800f1c2:	0a1a      	lsrs	r2, r3, #8
 800f1c4:	0e03      	lsrs	r3, r0, #24
 800f1c6:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
 800f1ca:	0c03      	lsrs	r3, r0, #16
 800f1cc:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800f1d0:	0a03      	lsrs	r3, r0, #8
 800f1d2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 800f1d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f1da:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
 800f1de:	f884 00a2 	strb.w	r0, [r4, #162]	; 0xa2
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	f8b4 608c 	ldrh.w	r6, [r4, #140]	; 0x8c
 800f1e8:	685d      	ldr	r5, [r3, #4]
 800f1ea:	bb7d      	cbnz	r5, 800f24c <RDMDeviceResponder::Init()+0xf0>
 800f1ec:	f8b4 00c4 	ldrh.w	r0, [r4, #196]	; 0xc4
 800f1f0:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
 800f1f4:	0a03      	lsrs	r3, r0, #8
 800f1f6:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 800f1fa:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
 800f1fe:	2301      	movs	r3, #1
 800f200:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 800f204:	0a33      	lsrs	r3, r6, #8
 800f206:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 800f20a:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 800f20e:	b2c0      	uxtb	r0, r0
 800f210:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 800f214:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 800f218:	f884 60aa 	strb.w	r6, [r4, #170]	; 0xaa
 800f21c:	f104 0399 	add.w	r3, r4, #153	; 0x99
 800f220:	f104 02ac 	add.w	r2, r4, #172	; 0xac
 800f224:	4293      	cmp	r3, r2
 800f226:	d12a      	bne.n	800f27e <RDMDeviceResponder::Init()+0x122>
 800f228:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800f22c:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 800f230:	4413      	add	r3, r2
 800f232:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 800f236:	bd70      	pop	{r4, r5, r6, pc}
 800f238:	f810 5b01 	ldrb.w	r5, [r0], #1
 800f23c:	f800 5c48 	strb.w	r5, [r0, #-72]
 800f240:	e79a      	b.n	800f178 <RDMDeviceResponder::Init()+0x1c>
 800f242:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800f246:	440b      	add	r3, r1
 800f248:	b29b      	uxth	r3, r3
 800f24a:	e7a7      	b.n	800f19c <RDMDeviceResponder::Init()+0x40>
 800f24c:	682b      	ldr	r3, [r5, #0]
 800f24e:	4628      	mov	r0, r5
 800f250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f252:	4798      	blx	r3
 800f254:	0a00      	lsrs	r0, r0, #8
 800f256:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
 800f25a:	682b      	ldr	r3, [r5, #0]
 800f25c:	4628      	mov	r0, r5
 800f25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f260:	4798      	blx	r3
 800f262:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 800f266:	682b      	ldr	r3, [r5, #0]
 800f268:	4628      	mov	r0, r5
 800f26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f26c:	4798      	blx	r3
 800f26e:	0a00      	lsrs	r0, r0, #8
 800f270:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 800f274:	682b      	ldr	r3, [r5, #0]
 800f276:	4628      	mov	r0, r5
 800f278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27a:	4798      	blx	r3
 800f27c:	e7bf      	b.n	800f1fe <RDMDeviceResponder::Init()+0xa2>
 800f27e:	f813 1b01 	ldrb.w	r1, [r3], #1
 800f282:	7499      	strb	r1, [r3, #18]
 800f284:	e7ce      	b.n	800f224 <RDMDeviceResponder::Init()+0xc8>
	...

0800f288 <RDMDeviceResponder::Print()>:
 800f288:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f28a:	4604      	mov	r4, r0
 800f28c:	3004      	adds	r0, #4
 800f28e:	f000 fe79 	bl	800ff84 <RDMDevice::Print()>
 800f292:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f296:	481c      	ldr	r0, [pc, #112]	; (800f308 <RDMDeviceResponder::Print()+0x80>)
 800f298:	681d      	ldr	r5, [r3, #0]
 800f29a:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800f29c:	f7fa fa90 	bl	80097c0 <printf>
 800f2a0:	f894 209a 	ldrb.w	r2, [r4, #154]	; 0x9a
 800f2a4:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 800f2a8:	4818      	ldr	r0, [pc, #96]	; (800f30c <RDMDeviceResponder::Print()+0x84>)
 800f2aa:	f7fa fa89 	bl	80097c0 <printf>
 800f2ae:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800f2b2:	f894 10a7 	ldrb.w	r1, [r4, #167]	; 0xa7
 800f2b6:	4816      	ldr	r0, [pc, #88]	; (800f310 <RDMDeviceResponder::Print()+0x88>)
 800f2b8:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 800f2bc:	f7fa fa80 	bl	80097c0 <printf>
 800f2c0:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 800f2c4:	f894 10a3 	ldrb.w	r1, [r4, #163]	; 0xa3
 800f2c8:	3508      	adds	r5, #8
 800f2ca:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 800f2ce:	4811      	ldr	r0, [pc, #68]	; (800f314 <RDMDeviceResponder::Print()+0x8c>)
 800f2d0:	f7fa fa76 	bl	80097c0 <printf>
 800f2d4:	f894 20a6 	ldrb.w	r2, [r4, #166]	; 0xa6
 800f2d8:	f894 10a5 	ldrb.w	r1, [r4, #165]	; 0xa5
 800f2dc:	b2f3      	uxtb	r3, r6
 800f2de:	9500      	str	r5, [sp, #0]
 800f2e0:	480d      	ldr	r0, [pc, #52]	; (800f318 <RDMDeviceResponder::Print()+0x90>)
 800f2e2:	f7fa fa6d 	bl	80097c0 <printf>
 800f2e6:	f894 10a9 	ldrb.w	r1, [r4, #169]	; 0xa9
 800f2ea:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
 800f2ee:	480b      	ldr	r0, [pc, #44]	; (800f31c <RDMDeviceResponder::Print()+0x94>)
 800f2f0:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 800f2f4:	f7fa fa64 	bl	80097c0 <printf>
 800f2f8:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
 800f2fc:	4808      	ldr	r0, [pc, #32]	; (800f320 <RDMDeviceResponder::Print()+0x98>)
 800f2fe:	b002      	add	sp, #8
 800f300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f304:	f7fa ba5c 	b.w	80097c0 <printf>
 800f308:	0801a481 	stmdaeq	r1, {r0, r7, sl, sp, pc}
 800f30c:	0801a49e 	stmdaeq	r1, {r1, r2, r3, r4, r7, sl, sp, pc}
 800f310:	0801a4b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, sl, sp, pc}
 800f314:	0801a4cf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, sl, sp, pc}
 800f318:	0801a4e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, sl, sp, pc}
 800f31c:	0801a505 	stmdaeq	r1, {r0, r2, r8, sl, sp, pc}
 800f320:	0801a51d 	stmdaeq	r1, {r0, r2, r3, r4, r8, sl, sp, pc}

0800f324 <memcmp>:
 800f324:	b510      	push	{r4, lr}
 800f326:	3901      	subs	r1, #1
 800f328:	4402      	add	r2, r0
 800f32a:	4290      	cmp	r0, r2
 800f32c:	d101      	bne.n	800f332 <memcmp+0xe>
 800f32e:	2000      	movs	r0, #0
 800f330:	e005      	b.n	800f33e <memcmp+0x1a>
 800f332:	7803      	ldrb	r3, [r0, #0]
 800f334:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f338:	42a3      	cmp	r3, r4
 800f33a:	d001      	beq.n	800f340 <memcmp+0x1c>
 800f33c:	1b18      	subs	r0, r3, r4
 800f33e:	bd10      	pop	{r4, pc}
 800f340:	3001      	adds	r0, #1
 800f342:	e7f2      	b.n	800f32a <memcmp+0x6>

0800f344 <memcpy.isra.0>:
 800f344:	3801      	subs	r0, #1
 800f346:	440a      	add	r2, r1
 800f348:	4291      	cmp	r1, r2
 800f34a:	d100      	bne.n	800f34e <memcpy.isra.0+0xa>
 800f34c:	4770      	bx	lr
 800f34e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f352:	f800 3f01 	strb.w	r3, [r0, #1]!
 800f356:	e7f7      	b.n	800f348 <memcpy.isra.0+0x4>

0800f358 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
 800f358:	b570      	push	{r4, r5, r6, lr}
 800f35a:	790d      	ldrb	r5, [r1, #4]
 800f35c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800f360:	2d20      	cmp	r5, #32
 800f362:	4604      	mov	r4, r0
 800f364:	bf28      	it	cs
 800f366:	2520      	movcs	r5, #32
 800f368:	6809      	ldr	r1, [r1, #0]
 800f36a:	b183      	cbz	r3, 800f38e <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x36>
 800f36c:	f100 060a 	add.w	r6, r0, #10
 800f370:	4630      	mov	r0, r6
 800f372:	462a      	mov	r2, r5
 800f374:	f7ff ffe6 	bl	800f344 <memcpy.isra.0>
 800f378:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800f37a:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
 800f37e:	b160      	cbz	r0, 800f39a <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0x42>
 800f380:	6803      	ldr	r3, [r0, #0]
 800f382:	462a      	mov	r2, r5
 800f384:	4631      	mov	r1, r6
 800f386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f38a:	689b      	ldr	r3, [r3, #8]
 800f38c:	4718      	bx	r3
 800f38e:	462a      	mov	r2, r5
 800f390:	3051      	adds	r0, #81	; 0x51
 800f392:	f7ff ffd7 	bl	800f344 <memcpy.isra.0>
 800f396:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
 800f39a:	bd70      	pop	{r4, r5, r6, pc}

0800f39c <RDMDeviceResponder::SetFactoryDefaults()>:
 800f39c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f39e:	4604      	mov	r4, r0
 800f3a0:	f06f 050c 	mvn.w	r5, #12
 800f3a4:	f100 0355 	add.w	r3, r0, #85	; 0x55
 800f3a8:	9300      	str	r3, [sp, #0]
 800f3aa:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
 800f3ae:	4669      	mov	r1, sp
 800f3b0:	3004      	adds	r0, #4
 800f3b2:	f88d 3004 	strb.w	r3, [sp, #4]
 800f3b6:	f7ff ffcf 	bl	800f358 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 800f3ba:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800f3be:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 800f3c2:	f104 020d 	add.w	r2, r4, #13
 800f3c6:	1b2d      	subs	r5, r5, r4
 800f3c8:	18a9      	adds	r1, r5, r2
 800f3ca:	4288      	cmp	r0, r1
 800f3cc:	d865      	bhi.n	800f49a <RDMDeviceResponder::SetFactoryDefaults()+0xfe>
 800f3ce:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 800f3d8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	685d      	ldr	r5, [r3, #4]
 800f3e0:	b1f5      	cbz	r5, 800f420 <RDMDeviceResponder::SetFactoryDefaults()+0x84>
 800f3e2:	682b      	ldr	r3, [r5, #0]
 800f3e4:	4628      	mov	r0, r5
 800f3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3e8:	4798      	blx	r3
 800f3ea:	0a00      	lsrs	r0, r0, #8
 800f3ec:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
 800f3f0:	682b      	ldr	r3, [r5, #0]
 800f3f2:	4628      	mov	r0, r5
 800f3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3f6:	4798      	blx	r3
 800f3f8:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 800f3fc:	682b      	ldr	r3, [r5, #0]
 800f3fe:	4628      	mov	r0, r5
 800f400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f402:	4798      	blx	r3
 800f404:	0a00      	lsrs	r0, r0, #8
 800f406:	f884 00a7 	strb.w	r0, [r4, #167]	; 0xa7
 800f40a:	682b      	ldr	r3, [r5, #0]
 800f40c:	4628      	mov	r0, r5
 800f40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f410:	4798      	blx	r3
 800f412:	6823      	ldr	r3, [r4, #0]
 800f414:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
 800f418:	4629      	mov	r1, r5
 800f41a:	4620      	mov	r0, r4
 800f41c:	689b      	ldr	r3, [r3, #8]
 800f41e:	4798      	blx	r3
 800f420:	f8b4 50c4 	ldrh.w	r5, [r4, #196]	; 0xc4
 800f424:	1e6b      	subs	r3, r5, #1
 800f426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f42a:	d218      	bcs.n	800f45e <RDMDeviceResponder::SetFactoryDefaults()+0xc2>
 800f42c:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800f430:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800f434:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f438:	3b01      	subs	r3, #1
 800f43a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f43e:	6858      	ldr	r0, [r3, #4]
 800f440:	b168      	cbz	r0, 800f45e <RDMDeviceResponder::SetFactoryDefaults()+0xc2>
 800f442:	6803      	ldr	r3, [r0, #0]
 800f444:	4629      	mov	r1, r5
 800f446:	6a1b      	ldr	r3, [r3, #32]
 800f448:	4798      	blx	r3
 800f44a:	b120      	cbz	r0, 800f456 <RDMDeviceResponder::SetFactoryDefaults()+0xba>
 800f44c:	0a2b      	lsrs	r3, r5, #8
 800f44e:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
 800f452:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
 800f456:	6823      	ldr	r3, [r4, #0]
 800f458:	4620      	mov	r0, r4
 800f45a:	68db      	ldr	r3, [r3, #12]
 800f45c:	4798      	blx	r3
 800f45e:	2213      	movs	r2, #19
 800f460:	f104 0199 	add.w	r1, r4, #153	; 0x99
 800f464:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 800f468:	f7ff ff6c 	bl	800f344 <memcpy.isra.0>
 800f46c:	f104 0088 	add.w	r0, r4, #136	; 0x88
 800f470:	f7ff fd4b 	bl	800ef0a <RDMSubDevices::SetFactoryDefaults()>
 800f474:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800f478:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 800f47c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 800f480:	4413      	add	r3, r2
 800f482:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 800f486:	2301      	movs	r3, #1
 800f488:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
 800f48c:	b150      	cbz	r0, 800f4a4 <RDMDeviceResponder::SetFactoryDefaults()+0x108>
 800f48e:	6803      	ldr	r3, [r0, #0]
 800f490:	689b      	ldr	r3, [r3, #8]
 800f492:	b003      	add	sp, #12
 800f494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f498:	4718      	bx	r3
 800f49a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800f49e:	440b      	add	r3, r1
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	e791      	b.n	800f3c8 <RDMDeviceResponder::SetFactoryDefaults()+0x2c>
 800f4a4:	b003      	add	sp, #12
 800f4a6:	bd30      	pop	{r4, r5, pc}

0800f4a8 <RDMHandler::RDMHandler(bool)>:
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	7001      	strb	r1, [r0, #0]
 800f4ac:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800f4b0:	7042      	strb	r2, [r0, #1]
 800f4b2:	4770      	bx	lr

0800f4b4 <RDMHandler::HandleString(char const*, unsigned int)>:
 800f4b4:	6883      	ldr	r3, [r0, #8]
 800f4b6:	f803 2f17 	strb.w	r2, [r3, #23]!
 800f4ba:	440a      	add	r2, r1
 800f4bc:	4291      	cmp	r1, r2
 800f4be:	d100      	bne.n	800f4c2 <RDMHandler::HandleString(char const*, unsigned int)+0xe>
 800f4c0:	4770      	bx	lr
 800f4c2:	f811 0b01 	ldrb.w	r0, [r1], #1
 800f4c6:	f803 0f01 	strb.w	r0, [r3, #1]!
 800f4ca:	e7f7      	b.n	800f4bc <RDMHandler::HandleString(char const*, unsigned int)+0x8>

0800f4cc <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
 800f4cc:	b570      	push	{r4, r5, r6, lr}
 800f4ce:	e9d0 4301 	ldrd	r4, r3, [r0, #4]
 800f4d2:	25cc      	movs	r5, #204	; 0xcc
 800f4d4:	701d      	strb	r5, [r3, #0]
 800f4d6:	7825      	ldrb	r5, [r4, #0]
 800f4d8:	705d      	strb	r5, [r3, #1]
 800f4da:	7ba5      	ldrb	r5, [r4, #14]
 800f4dc:	73dd      	strb	r5, [r3, #15]
 800f4de:	2500      	movs	r5, #0
 800f4e0:	745d      	strb	r5, [r3, #17]
 800f4e2:	7c65      	ldrb	r5, [r4, #17]
 800f4e4:	749d      	strb	r5, [r3, #18]
 800f4e6:	7ca5      	ldrb	r5, [r4, #18]
 800f4e8:	74dd      	strb	r5, [r3, #19]
 800f4ea:	7ce5      	ldrb	r5, [r4, #19]
 800f4ec:	3501      	adds	r5, #1
 800f4ee:	751d      	strb	r5, [r3, #20]
 800f4f0:	7d25      	ldrb	r5, [r4, #20]
 800f4f2:	755d      	strb	r5, [r3, #21]
 800f4f4:	7d65      	ldrb	r5, [r4, #21]
 800f4f6:	759d      	strb	r5, [r3, #22]
 800f4f8:	b119      	cbz	r1, 800f502 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x36>
 800f4fa:	1e4d      	subs	r5, r1, #1
 800f4fc:	2d01      	cmp	r5, #1
 800f4fe:	d921      	bls.n	800f544 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x78>
 800f500:	bd70      	pop	{r4, r5, r6, pc}
 800f502:	7dda      	ldrb	r2, [r3, #23]
 800f504:	7419      	strb	r1, [r3, #16]
 800f506:	3218      	adds	r2, #24
 800f508:	709a      	strb	r2, [r3, #2]
 800f50a:	4a15      	ldr	r2, [pc, #84]	; (800f560 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x94>)
 800f50c:	1de1      	adds	r1, r4, #7
 800f50e:	6812      	ldr	r2, [r2, #0]
 800f510:	1c9d      	adds	r5, r3, #2
 800f512:	3203      	adds	r2, #3
 800f514:	340d      	adds	r4, #13
 800f516:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 800f51a:	f805 6f01 	strb.w	r6, [r5, #1]!
 800f51e:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800f522:	42a1      	cmp	r1, r4
 800f524:	71ae      	strb	r6, [r5, #6]
 800f526:	d1f6      	bne.n	800f516 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x4a>
 800f528:	2200      	movs	r2, #0
 800f52a:	7899      	ldrb	r1, [r3, #2]
 800f52c:	4613      	mov	r3, r2
 800f52e:	6884      	ldr	r4, [r0, #8]
 800f530:	428a      	cmp	r2, r1
 800f532:	eb04 0502 	add.w	r5, r4, r2
 800f536:	d30e      	bcc.n	800f556 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x8a>
 800f538:	0a1a      	lsrs	r2, r3, #8
 800f53a:	702a      	strb	r2, [r5, #0]
 800f53c:	6882      	ldr	r2, [r0, #8]
 800f53e:	440a      	add	r2, r1
 800f540:	7053      	strb	r3, [r2, #1]
 800f542:	e7dd      	b.n	800f500 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x34>
 800f544:	7419      	strb	r1, [r3, #16]
 800f546:	2102      	movs	r1, #2
 800f548:	251a      	movs	r5, #26
 800f54a:	75d9      	strb	r1, [r3, #23]
 800f54c:	0a11      	lsrs	r1, r2, #8
 800f54e:	709d      	strb	r5, [r3, #2]
 800f550:	7619      	strb	r1, [r3, #24]
 800f552:	765a      	strb	r2, [r3, #25]
 800f554:	e7d9      	b.n	800f50a <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x3e>
 800f556:	5ca5      	ldrb	r5, [r4, r2]
 800f558:	3201      	adds	r2, #1
 800f55a:	442b      	add	r3, r5
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	e7e7      	b.n	800f530 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x64>
 800f560:	2000c884 	andcs	ip, r0, r4, lsl #17

0800f564 <RDMHandler::RespondMessageAck()>:
 800f564:	6843      	ldr	r3, [r0, #4]
 800f566:	7d9a      	ldrb	r2, [r3, #22]
 800f568:	b90a      	cbnz	r2, 800f56e <RDMHandler::RespondMessageAck()+0xa>
 800f56a:	2218      	movs	r2, #24
 800f56c:	705a      	strb	r2, [r3, #1]
 800f56e:	2200      	movs	r2, #0
 800f570:	4611      	mov	r1, r2
 800f572:	f7ff bfab 	b.w	800f4cc <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>
	...

0800f578 <RDMHandler::GetDeviceInfo(unsigned short)>:
 800f578:	b538      	push	{r3, r4, r5, lr}
 800f57a:	4b18      	ldr	r3, [pc, #96]	; (800f5dc <RDMHandler::GetDeviceInfo(unsigned short)+0x64>)
 800f57c:	4605      	mov	r5, r0
 800f57e:	681c      	ldr	r4, [r3, #0]
 800f580:	b349      	cbz	r1, 800f5d6 <RDMHandler::GetDeviceInfo(unsigned short)+0x5e>
 800f582:	f104 0088 	add.w	r0, r4, #136	; 0x88
 800f586:	f7ff fc8f 	bl	800eea8 <RDMSubDevices::GetInfo(unsigned short)>
 800f58a:	b1b8      	cbz	r0, 800f5bc <RDMHandler::GetDeviceInfo(unsigned short)+0x44>
 800f58c:	8803      	ldrh	r3, [r0, #0]
 800f58e:	0a1b      	lsrs	r3, r3, #8
 800f590:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
 800f594:	8803      	ldrh	r3, [r0, #0]
 800f596:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
 800f59a:	7903      	ldrb	r3, [r0, #4]
 800f59c:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
 800f5a0:	7943      	ldrb	r3, [r0, #5]
 800f5a2:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
 800f5a6:	8843      	ldrh	r3, [r0, #2]
 800f5a8:	0a1b      	lsrs	r3, r3, #8
 800f5aa:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
 800f5ae:	8843      	ldrh	r3, [r0, #2]
 800f5b0:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
 800f5b4:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800f5b8:	f884 30be 	strb.w	r3, [r4, #190]	; 0xbe
 800f5bc:	f104 01ac 	add.w	r1, r4, #172	; 0xac
 800f5c0:	2213      	movs	r2, #19
 800f5c2:	68a8      	ldr	r0, [r5, #8]
 800f5c4:	75c2      	strb	r2, [r0, #23]
 800f5c6:	3018      	adds	r0, #24
 800f5c8:	f7ff febc 	bl	800f344 <memcpy.isra.0>
 800f5cc:	4628      	mov	r0, r5
 800f5ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5d2:	f7ff bfc7 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800f5d6:	f104 0199 	add.w	r1, r4, #153	; 0x99
 800f5da:	e7f1      	b.n	800f5c0 <RDMHandler::GetDeviceInfo(unsigned short)+0x48>
 800f5dc:	2000c884 	andcs	ip, r0, r4, lsl #17

0800f5e0 <RDMHandler::GetFactoryDefaults(unsigned short)>:
 800f5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	6886      	ldr	r6, [r0, #8]
 800f5e6:	4605      	mov	r5, r0
 800f5e8:	75f3      	strb	r3, [r6, #23]
 800f5ea:	4b1c      	ldr	r3, [pc, #112]	; (800f65c <RDMHandler::GetFactoryDefaults(unsigned short)+0x7c>)
 800f5ec:	681c      	ldr	r4, [r3, #0]
 800f5ee:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 800f5f2:	b37b      	cbz	r3, 800f654 <RDMHandler::GetFactoryDefaults(unsigned short)+0x74>
 800f5f4:	f06f 0c0c 	mvn.w	ip, #12
 800f5f8:	f8b4 1076 	ldrh.w	r1, [r4, #118]	; 0x76
 800f5fc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800f600:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 800f604:	f104 020d 	add.w	r2, r4, #13
 800f608:	ebac 0c04 	sub.w	ip, ip, r4
 800f60c:	eb0c 0702 	add.w	r7, ip, r2
 800f610:	4287      	cmp	r7, r0
 800f612:	d30a      	bcc.n	800f62a <RDMHandler::GetFactoryDefaults(unsigned short)+0x4a>
 800f614:	4299      	cmp	r1, r3
 800f616:	d00d      	beq.n	800f634 <RDMHandler::GetFactoryDefaults(unsigned short)+0x54>
 800f618:	2300      	movs	r3, #0
 800f61a:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
 800f61e:	7633      	strb	r3, [r6, #24]
 800f620:	4628      	mov	r0, r5
 800f622:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f626:	f7ff bf9d 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800f62a:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800f62e:	443b      	add	r3, r7
 800f630:	b29b      	uxth	r3, r3
 800f632:	e7eb      	b.n	800f60c <RDMHandler::GetFactoryDefaults(unsigned short)+0x2c>
 800f634:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800f638:	f894 10a5 	ldrb.w	r1, [r4, #165]	; 0xa5
 800f63c:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
 800f640:	440b      	add	r3, r1
 800f642:	429a      	cmp	r2, r3
 800f644:	d1e8      	bne.n	800f618 <RDMHandler::GetFactoryDefaults(unsigned short)+0x38>
 800f646:	f104 0088 	add.w	r0, r4, #136	; 0x88
 800f64a:	f7ff fc4b 	bl	800eee4 <RDMSubDevices::GetFactoryDefaults()>
 800f64e:	4603      	mov	r3, r0
 800f650:	2800      	cmp	r0, #0
 800f652:	d0e2      	beq.n	800f61a <RDMHandler::GetFactoryDefaults(unsigned short)+0x3a>
 800f654:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 800f658:	e7e1      	b.n	800f61e <RDMHandler::GetFactoryDefaults(unsigned short)+0x3e>
 800f65a:	bf00      	nop
 800f65c:	2000c884 	andcs	ip, r0, r4, lsl #17

0800f660 <RDMHandler::GetDeviceModelDescription(unsigned short)>:
 800f660:	b510      	push	{r4, lr}
 800f662:	4604      	mov	r4, r0
 800f664:	220a      	movs	r2, #10
 800f666:	4904      	ldr	r1, [pc, #16]	; (800f678 <RDMHandler::GetDeviceModelDescription(unsigned short)+0x18>)
 800f668:	f7ff ff24 	bl	800f4b4 <RDMHandler::HandleString(char const*, unsigned int)>
 800f66c:	4620      	mov	r0, r4
 800f66e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f672:	f7ff bf77 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800f676:	bf00      	nop
 800f678:	08019502 	stmdaeq	r1, {r1, r8, sl, ip, pc}

0800f67c <RDMHandler::GetManufacturerLabel(unsigned short)>:
 800f67c:	b510      	push	{r4, lr}
 800f67e:	4604      	mov	r4, r0
 800f680:	4b05      	ldr	r3, [pc, #20]	; (800f698 <RDMHandler::GetManufacturerLabel(unsigned short)+0x1c>)
 800f682:	6819      	ldr	r1, [r3, #0]
 800f684:	f891 204f 	ldrb.w	r2, [r1, #79]	; 0x4f
 800f688:	312f      	adds	r1, #47	; 0x2f
 800f68a:	f7ff ff13 	bl	800f4b4 <RDMHandler::HandleString(char const*, unsigned int)>
 800f68e:	4620      	mov	r0, r4
 800f690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f694:	f7ff bf66 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800f698:	2000c884 	andcs	ip, r0, r4, lsl #17

0800f69c <RDMHandler::GetDeviceLabel(unsigned short)>:
 800f69c:	4b0d      	ldr	r3, [pc, #52]	; (800f6d4 <RDMHandler::GetDeviceLabel(unsigned short)+0x38>)
 800f69e:	b513      	push	{r0, r1, r4, lr}
 800f6a0:	4604      	mov	r4, r0
 800f6a2:	6818      	ldr	r0, [r3, #0]
 800f6a4:	b171      	cbz	r1, 800f6c4 <RDMHandler::GetDeviceLabel(unsigned short)+0x28>
 800f6a6:	466a      	mov	r2, sp
 800f6a8:	3088      	adds	r0, #136	; 0x88
 800f6aa:	f7ff fc05 	bl	800eeb8 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f6b4:	9900      	ldr	r1, [sp, #0]
 800f6b6:	f7ff fefd 	bl	800f4b4 <RDMHandler::HandleString(char const*, unsigned int)>
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	f7ff ff52 	bl	800f564 <RDMHandler::RespondMessageAck()>
 800f6c0:	b002      	add	sp, #8
 800f6c2:	bd10      	pop	{r4, pc}
 800f6c4:	f100 030e 	add.w	r3, r0, #14
 800f6c8:	9300      	str	r3, [sp, #0]
 800f6ca:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 800f6ce:	f88d 3004 	strb.w	r3, [sp, #4]
 800f6d2:	e7ec      	b.n	800f6ae <RDMHandler::GetDeviceLabel(unsigned short)+0x12>
 800f6d4:	2000c884 	andcs	ip, r0, r4, lsl #17

0800f6d8 <RDMHandler::GetIdentifyDevice(unsigned short)>:
 800f6d8:	2201      	movs	r2, #1
 800f6da:	6883      	ldr	r3, [r0, #8]
 800f6dc:	75da      	strb	r2, [r3, #23]
 800f6de:	4a02      	ldr	r2, [pc, #8]	; (800f6e8 <RDMHandler::GetIdentifyDevice(unsigned short)+0x10>)
 800f6e0:	7812      	ldrb	r2, [r2, #0]
 800f6e2:	761a      	strb	r2, [r3, #24]
 800f6e4:	f7ff bf3e 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800f6e8:	2000c888 	andcs	ip, r0, r8, lsl #17

0800f6ec <RDMHandler::RespondMessageNack(unsigned short)>:
 800f6ec:	460a      	mov	r2, r1
 800f6ee:	2102      	movs	r1, #2
 800f6f0:	f7ff beec 	b.w	800f4cc <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>

0800f6f4 <RDMHandler::SetResetDevice(bool, unsigned short)>:
 800f6f4:	b510      	push	{r4, lr}
 800f6f6:	6843      	ldr	r3, [r0, #4]
 800f6f8:	4604      	mov	r4, r0
 800f6fa:	7d9a      	ldrb	r2, [r3, #22]
 800f6fc:	2a01      	cmp	r2, #1
 800f6fe:	d004      	beq.n	800f70a <RDMHandler::SetResetDevice(bool, unsigned short)+0x16>
 800f700:	2101      	movs	r1, #1
 800f702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f706:	f7ff bff1 	b.w	800f6ec <RDMHandler::RespondMessageNack(unsigned short)>
 800f70a:	7ddb      	ldrb	r3, [r3, #23]
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	d003      	beq.n	800f718 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 800f710:	2bff      	cmp	r3, #255	; 0xff
 800f712:	d001      	beq.n	800f718 <RDMHandler::SetResetDevice(bool, unsigned short)+0x24>
 800f714:	2106      	movs	r1, #6
 800f716:	e7f4      	b.n	800f702 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 800f718:	2100      	movs	r1, #0
 800f71a:	68a2      	ldr	r2, [r4, #8]
 800f71c:	2bff      	cmp	r3, #255	; 0xff
 800f71e:	75d1      	strb	r1, [r2, #23]
 800f720:	d102      	bne.n	800f728 <RDMHandler::SetResetDevice(bool, unsigned short)+0x34>
 800f722:	2104      	movs	r1, #4
 800f724:	4620      	mov	r0, r4
 800f726:	e7ec      	b.n	800f702 <RDMHandler::SetResetDevice(bool, unsigned short)+0xe>
 800f728:	4b03      	ldr	r3, [pc, #12]	; (800f738 <RDMHandler::SetResetDevice(bool, unsigned short)+0x44>)
 800f72a:	6818      	ldr	r0, [r3, #0]
 800f72c:	f006 ff50 	bl	80165d0 <Hardware::Reboot()>
 800f730:	2800      	cmp	r0, #0
 800f732:	d0f6      	beq.n	800f722 <RDMHandler::SetResetDevice(bool, unsigned short)+0x2e>
 800f734:	bd10      	pop	{r4, pc}
 800f736:	bf00      	nop
 800f738:	2001d99c 	mulcs	r1, ip, r9

0800f73c <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
 800f73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f73e:	6843      	ldr	r3, [r0, #4]
 800f740:	460d      	mov	r5, r1
 800f742:	7d99      	ldrb	r1, [r3, #22]
 800f744:	4604      	mov	r4, r0
 800f746:	2901      	cmp	r1, #1
 800f748:	d004      	beq.n	800f754 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x18>
 800f74a:	2101      	movs	r1, #1
 800f74c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f750:	f7ff bfcc 	b.w	800f6ec <RDMHandler::RespondMessageNack(unsigned short)>
 800f754:	7ddb      	ldrb	r3, [r3, #23]
 800f756:	2b01      	cmp	r3, #1
 800f758:	d901      	bls.n	800f75e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x22>
 800f75a:	2106      	movs	r1, #6
 800f75c:	e7f6      	b.n	800f74c <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x10>
 800f75e:	4a12      	ldr	r2, [pc, #72]	; (800f7a8 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x6c>)
 800f760:	4f12      	ldr	r7, [pc, #72]	; (800f7ac <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x70>)
 800f762:	6816      	ldr	r6, [r2, #0]
 800f764:	4a12      	ldr	r2, [pc, #72]	; (800f7b0 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x74>)
 800f766:	6810      	ldr	r0, [r2, #0]
 800f768:	4a12      	ldr	r2, [pc, #72]	; (800f7b4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x78>)
 800f76a:	b983      	cbnz	r3, 800f78e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x52>
 800f76c:	2102      	movs	r1, #2
 800f76e:	7013      	strb	r3, [r2, #0]
 800f770:	f006 fe8c 	bl	801648c <LedBlink::SetMode(ledblink::Mode)>
 800f774:	7839      	ldrb	r1, [r7, #0]
 800f776:	b111      	cbz	r1, 800f77e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 800f778:	4630      	mov	r0, r6
 800f77a:	f000 f9a8 	bl	800face <RDMIdentify::Off(rdm::identify::Mode)>
 800f77e:	b98d      	cbnz	r5, 800f7a4 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x68>
 800f780:	68a3      	ldr	r3, [r4, #8]
 800f782:	4620      	mov	r0, r4
 800f784:	75dd      	strb	r5, [r3, #23]
 800f786:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f78a:	f7ff beeb 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800f78e:	7011      	strb	r1, [r2, #0]
 800f790:	2104      	movs	r1, #4
 800f792:	f006 fe7b 	bl	801648c <LedBlink::SetMode(ledblink::Mode)>
 800f796:	7839      	ldrb	r1, [r7, #0]
 800f798:	2900      	cmp	r1, #0
 800f79a:	d0f0      	beq.n	800f77e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 800f79c:	4630      	mov	r0, r6
 800f79e:	f000 f995 	bl	800facc <RDMIdentify::On(rdm::identify::Mode)>
 800f7a2:	e7ec      	b.n	800f77e <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x42>
 800f7a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	2000c88c 	andcs	ip, r0, ip, lsl #17
 800f7ac:	2000c889 	andcs	ip, r0, r9, lsl #17
 800f7b0:	2001d998 	mulcs	r1, r8, r9
 800f7b4:	2000c888 	andcs	ip, r0, r8, lsl #17

0800f7b8 <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
 800f7b8:	b538      	push	{r3, r4, r5, lr}
 800f7ba:	6843      	ldr	r3, [r0, #4]
 800f7bc:	4604      	mov	r4, r0
 800f7be:	7d9b      	ldrb	r3, [r3, #22]
 800f7c0:	460d      	mov	r5, r1
 800f7c2:	b123      	cbz	r3, 800f7ce <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x16>
 800f7c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7c8:	2101      	movs	r1, #1
 800f7ca:	f7ff bf8f 	b.w	800f6ec <RDMHandler::RespondMessageNack(unsigned short)>
 800f7ce:	4b06      	ldr	r3, [pc, #24]	; (800f7e8 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x30>)
 800f7d0:	6818      	ldr	r0, [r3, #0]
 800f7d2:	f7ff fde3 	bl	800f39c <RDMDeviceResponder::SetFactoryDefaults()>
 800f7d6:	b935      	cbnz	r5, 800f7e6 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x2e>
 800f7d8:	68a3      	ldr	r3, [r4, #8]
 800f7da:	4620      	mov	r0, r4
 800f7dc:	75dd      	strb	r5, [r3, #23]
 800f7de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7e2:	f7ff bebf 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800f7e6:	bd38      	pop	{r3, r4, r5, pc}
 800f7e8:	2000c884 	andcs	ip, r0, r4, lsl #17

0800f7ec <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
 800f7ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f7ee:	6845      	ldr	r5, [r0, #4]
 800f7f0:	460e      	mov	r6, r1
 800f7f2:	7dab      	ldrb	r3, [r5, #22]
 800f7f4:	4604      	mov	r4, r0
 800f7f6:	2b20      	cmp	r3, #32
 800f7f8:	4611      	mov	r1, r2
 800f7fa:	d905      	bls.n	800f808 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x1c>
 800f7fc:	2101      	movs	r1, #1
 800f7fe:	b002      	add	sp, #8
 800f800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f804:	f7ff bf72 	b.w	800f6ec <RDMHandler::RespondMessageNack(unsigned short)>
 800f808:	4a0d      	ldr	r2, [pc, #52]	; (800f840 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x54>)
 800f80a:	6810      	ldr	r0, [r2, #0]
 800f80c:	f105 0217 	add.w	r2, r5, #23
 800f810:	b159      	cbz	r1, 800f82a <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x3e>
 800f812:	3088      	adds	r0, #136	; 0x88
 800f814:	f7ff fb59 	bl	800eeca <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>
 800f818:	b97e      	cbnz	r6, 800f83a <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x4e>
 800f81a:	4620      	mov	r0, r4
 800f81c:	68a3      	ldr	r3, [r4, #8]
 800f81e:	75de      	strb	r6, [r3, #23]
 800f820:	b002      	add	sp, #8
 800f822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f826:	f7ff be9d 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800f82a:	4669      	mov	r1, sp
 800f82c:	3004      	adds	r0, #4
 800f82e:	9200      	str	r2, [sp, #0]
 800f830:	f88d 3004 	strb.w	r3, [sp, #4]
 800f834:	f7ff fd90 	bl	800f358 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
 800f838:	e7ee      	b.n	800f818 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x2c>
 800f83a:	b002      	add	sp, #8
 800f83c:	bd70      	pop	{r4, r5, r6, pc}
 800f83e:	bf00      	nop
 800f840:	2000c884 	andcs	ip, r0, r4, lsl #17

0800f844 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
 800f844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f848:	4616      	mov	r6, r2
 800f84a:	2700      	movs	r7, #0
 800f84c:	f006 04ef 	and.w	r4, r6, #239	; 0xef
 800f850:	2c20      	cmp	r4, #32
 800f852:	46be      	mov	lr, r7
 800f854:	f89d 801c 	ldrb.w	r8, [sp, #28]
 800f858:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800f85c:	d004      	beq.n	800f868 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x24>
 800f85e:	2105      	movs	r1, #5
 800f860:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f864:	f7ff bf42 	b.w	800f6ec <RDMHandler::RespondMessageNack(unsigned short)>
 800f868:	4c2d      	ldr	r4, [pc, #180]	; (800f920 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xdc>)
 800f86a:	6824      	ldr	r4, [r4, #0]
 800f86c:	88a4      	ldrh	r4, [r4, #4]
 800f86e:	4294      	cmp	r4, r2
 800f870:	d205      	bcs.n	800f87e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 800f872:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800f876:	42a2      	cmp	r2, r4
 800f878:	d001      	beq.n	800f87e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x3a>
 800f87a:	2109      	movs	r1, #9
 800f87c:	e7f0      	b.n	800f860 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 800f87e:	f04f 0c14 	mov.w	ip, #20
 800f882:	2400      	movs	r4, #0
 800f884:	4d27      	ldr	r5, [pc, #156]	; (800f924 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xe0>)
 800f886:	f8b5 9000 	ldrh.w	r9, [r5]
 800f88a:	4599      	cmp	r9, r3
 800f88c:	bf02      	ittt	eq
 800f88e:	462c      	moveq	r4, r5
 800f890:	7daf      	ldrbeq	r7, [r5, #22]
 800f892:	f895 e017 	ldrbeq.w	lr, [r5, #23]
 800f896:	f1bc 0c01 	subs.w	ip, ip, #1
 800f89a:	f105 0518 	add.w	r5, r5, #24
 800f89e:	d1f2      	bne.n	800f886 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x42>
 800f8a0:	b90c      	cbnz	r4, 800f8a6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x62>
 800f8a2:	2100      	movs	r1, #0
 800f8a4:	e7dc      	b.n	800f860 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 800f8a6:	7803      	ldrb	r3, [r0, #0]
 800f8a8:	b19b      	cbz	r3, 800f8d2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x8e>
 800f8aa:	2f00      	cmp	r7, #0
 800f8ac:	d0f9      	beq.n	800f8a2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5e>
 800f8ae:	2e20      	cmp	r6, #32
 800f8b0:	d121      	bne.n	800f8f6 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb2>
 800f8b2:	2900      	cmp	r1, #0
 800f8b4:	d131      	bne.n	800f91a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xd6>
 800f8b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d0dd      	beq.n	800f87a <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x36>
 800f8be:	6863      	ldr	r3, [r4, #4]
 800f8c0:	b913      	cbnz	r3, 800f8c8 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x84>
 800f8c2:	68a1      	ldr	r1, [r4, #8]
 800f8c4:	07cd      	lsls	r5, r1, #31
 800f8c6:	d5ca      	bpl.n	800f85e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1a>
 800f8c8:	7d21      	ldrb	r1, [r4, #20]
 800f8ca:	4541      	cmp	r1, r8
 800f8cc:	d005      	beq.n	800f8da <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x96>
 800f8ce:	2101      	movs	r1, #1
 800f8d0:	e7c6      	b.n	800f860 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1c>
 800f8d2:	f1be 0f00 	cmp.w	lr, #0
 800f8d6:	d1ea      	bne.n	800f8ae <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x6a>
 800f8d8:	e7e3      	b.n	800f8a2 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x5e>
 800f8da:	68a1      	ldr	r1, [r4, #8]
 800f8dc:	eb00 0461 	add.w	r4, r0, r1, asr #1
 800f8e0:	104d      	asrs	r5, r1, #1
 800f8e2:	07c9      	lsls	r1, r1, #31
 800f8e4:	bf48      	it	mi
 800f8e6:	5941      	ldrmi	r1, [r0, r5]
 800f8e8:	4620      	mov	r0, r4
 800f8ea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8ee:	bf48      	it	mi
 800f8f0:	58cb      	ldrmi	r3, [r1, r3]
 800f8f2:	4611      	mov	r1, r2
 800f8f4:	4718      	bx	r3
 800f8f6:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 800f8fa:	f003 0401 	and.w	r4, r3, #1
 800f8fe:	b90d      	cbnz	r5, 800f904 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xc0>
 800f900:	2c00      	cmp	r4, #0
 800f902:	d0ac      	beq.n	800f85e <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1a>
 800f904:	105e      	asrs	r6, r3, #1
 800f906:	eb00 0363 	add.w	r3, r0, r3, asr #1
 800f90a:	b10c      	cbz	r4, 800f910 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xcc>
 800f90c:	5980      	ldr	r0, [r0, r6]
 800f90e:	5945      	ldr	r5, [r0, r5]
 800f910:	4618      	mov	r0, r3
 800f912:	462b      	mov	r3, r5
 800f914:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f918:	4718      	bx	r3
 800f91a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f91e:	bf00      	nop
 800f920:	2000c880 	andcs	ip, r0, r0, lsl #17
 800f924:	0801a558 	stmdaeq	r1, {r3, r4, r6, r8, sl, sp, pc}

0800f928 <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
 800f928:	23ff      	movs	r3, #255	; 0xff
 800f92a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f92e:	7013      	strb	r3, [r2, #0]
 800f930:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800f934:	7ccb      	ldrb	r3, [r1, #19]
 800f936:	b085      	sub	sp, #20
 800f938:	7d4f      	ldrb	r7, [r1, #21]
 800f93a:	9303      	str	r3, [sp, #12]
 800f93c:	7d0b      	ldrb	r3, [r1, #20]
 800f93e:	f101 0a02 	add.w	sl, r1, #2
 800f942:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 800f946:	4b5b      	ldr	r3, [pc, #364]	; (800fab4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x18c>)
 800f948:	4606      	mov	r6, r0
 800f94a:	460d      	mov	r5, r1
 800f94c:	4614      	mov	r4, r2
 800f94e:	495a      	ldr	r1, [pc, #360]	; (800fab8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x190>)
 800f950:	2206      	movs	r2, #6
 800f952:	4650      	mov	r0, sl
 800f954:	f8d3 8000 	ldr.w	r8, [r3]
 800f958:	f7ff fce4 	bl	800f324 <memcmp>
 800f95c:	f108 0904 	add.w	r9, r8, #4
 800f960:	4683      	mov	fp, r0
 800f962:	2202      	movs	r2, #2
 800f964:	4649      	mov	r1, r9
 800f966:	4650      	mov	r0, sl
 800f968:	b2bf      	uxth	r7, r7
 800f96a:	f7ff fcdb 	bl	800f324 <memcmp>
 800f96e:	b928      	cbnz	r0, 800f97c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x54>
 800f970:	2204      	movs	r2, #4
 800f972:	4951      	ldr	r1, [pc, #324]	; (800fab8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x190>)
 800f974:	18a8      	adds	r0, r5, r2
 800f976:	f7ff fcd5 	bl	800f324 <memcmp>
 800f97a:	b160      	cbz	r0, 800f996 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x6e>
 800f97c:	4649      	mov	r1, r9
 800f97e:	2206      	movs	r2, #6
 800f980:	4650      	mov	r0, sl
 800f982:	f7ff fccf 	bl	800f324 <memcmp>
 800f986:	4601      	mov	r1, r0
 800f988:	b130      	cbz	r0, 800f998 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x70>
 800f98a:	f1bb 0f00 	cmp.w	fp, #0
 800f98e:	d04a      	beq.n	800fa26 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xfe>
 800f990:	b005      	add	sp, #20
 800f992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f996:	2101      	movs	r1, #1
 800f998:	2301      	movs	r3, #1
 800f99a:	9a03      	ldr	r2, [sp, #12]
 800f99c:	2a10      	cmp	r2, #16
 800f99e:	d176      	bne.n	800fa8e <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x166>
 800f9a0:	2f01      	cmp	r7, #1
 800f9a2:	d143      	bne.n	800fa2c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x104>
 800f9a4:	7873      	ldrb	r3, [r6, #1]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d1f2      	bne.n	800f990 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800f9aa:	2206      	movs	r2, #6
 800f9ac:	4649      	mov	r1, r9
 800f9ae:	f105 0017 	add.w	r0, r5, #23
 800f9b2:	f7ff fcb7 	bl	800f324 <memcmp>
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	dcea      	bgt.n	800f990 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800f9ba:	2206      	movs	r2, #6
 800f9bc:	4648      	mov	r0, r9
 800f9be:	f105 011d 	add.w	r1, r5, #29
 800f9c2:	f7ff fcaf 	bl	800f324 <memcmp>
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	dce2      	bgt.n	800f990 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800f9ca:	23fe      	movs	r3, #254	; 0xfe
 800f9cc:	7023      	strb	r3, [r4, #0]
 800f9ce:	7063      	strb	r3, [r4, #1]
 800f9d0:	70a3      	strb	r3, [r4, #2]
 800f9d2:	70e3      	strb	r3, [r4, #3]
 800f9d4:	7123      	strb	r3, [r4, #4]
 800f9d6:	7163      	strb	r3, [r4, #5]
 800f9d8:	71a3      	strb	r3, [r4, #6]
 800f9da:	23aa      	movs	r3, #170	; 0xaa
 800f9dc:	4621      	mov	r1, r4
 800f9de:	71e3      	strb	r3, [r4, #7]
 800f9e0:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800f9e4:	f108 0203 	add.w	r2, r8, #3
 800f9e8:	f108 0809 	add.w	r8, r8, #9
 800f9ec:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800f9f0:	3102      	adds	r1, #2
 800f9f2:	f060 0055 	orn	r0, r0, #85	; 0x55
 800f9f6:	7188      	strb	r0, [r1, #6]
 800f9f8:	7810      	ldrb	r0, [r2, #0]
 800f9fa:	4542      	cmp	r2, r8
 800f9fc:	f040 0055 	orr.w	r0, r0, #85	; 0x55
 800fa00:	71c8      	strb	r0, [r1, #7]
 800fa02:	7810      	ldrb	r0, [r2, #0]
 800fa04:	4403      	add	r3, r0
 800fa06:	b29b      	uxth	r3, r3
 800fa08:	d1f0      	bne.n	800f9ec <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xc4>
 800fa0a:	0a1a      	lsrs	r2, r3, #8
 800fa0c:	f062 0155 	orn	r1, r2, #85	; 0x55
 800fa10:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 800fa14:	7562      	strb	r2, [r4, #21]
 800fa16:	f063 0255 	orn	r2, r3, #85	; 0x55
 800fa1a:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 800fa1e:	7521      	strb	r1, [r4, #20]
 800fa20:	75a2      	strb	r2, [r4, #22]
 800fa22:	75e3      	strb	r3, [r4, #23]
 800fa24:	e7b4      	b.n	800f990 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800fa26:	4659      	mov	r1, fp
 800fa28:	465b      	mov	r3, fp
 800fa2a:	e7b6      	b.n	800f99a <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x72>
 800fa2c:	2f03      	cmp	r7, #3
 800fa2e:	d11a      	bne.n	800fa66 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x13e>
 800fa30:	7daa      	ldrb	r2, [r5, #22]
 800fa32:	2a00      	cmp	r2, #0
 800fa34:	d1ac      	bne.n	800f990 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800fa36:	7072      	strb	r2, [r6, #1]
 800fa38:	f1bb 0f00 	cmp.w	fp, #0
 800fa3c:	d0a8      	beq.n	800f990 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d0a6      	beq.n	800f990 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800fa42:	2302      	movs	r3, #2
 800fa44:	75e3      	strb	r3, [r4, #23]
 800fa46:	4b1d      	ldr	r3, [pc, #116]	; (800fabc <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>)
 800fa48:	7622      	strb	r2, [r4, #24]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	7662      	strb	r2, [r4, #25]
 800fa4e:	889b      	ldrh	r3, [r3, #4]
 800fa50:	3b00      	subs	r3, #0
 800fa52:	bf18      	it	ne
 800fa54:	2301      	movne	r3, #1
 800fa56:	005b      	lsls	r3, r3, #1
 800fa58:	4630      	mov	r0, r6
 800fa5a:	7663      	strb	r3, [r4, #25]
 800fa5c:	b005      	add	sp, #20
 800fa5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa62:	f7ff bd7f 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800fa66:	2f02      	cmp	r7, #2
 800fa68:	d192      	bne.n	800f990 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800fa6a:	7daa      	ldrb	r2, [r5, #22]
 800fa6c:	2a00      	cmp	r2, #0
 800fa6e:	d18f      	bne.n	800f990 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800fa70:	2101      	movs	r1, #1
 800fa72:	7071      	strb	r1, [r6, #1]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d08b      	beq.n	800f990 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800fa78:	4b10      	ldr	r3, [pc, #64]	; (800fabc <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x194>)
 800fa7a:	75e7      	strb	r7, [r4, #23]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	7622      	strb	r2, [r4, #24]
 800fa80:	7662      	strb	r2, [r4, #25]
 800fa82:	889b      	ldrh	r3, [r3, #4]
 800fa84:	3b00      	subs	r3, #0
 800fa86:	bf18      	it	ne
 800fa88:	2301      	movne	r3, #1
 800fa8a:	408b      	lsls	r3, r1
 800fa8c:	e7e4      	b.n	800fa58 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x130>
 800fa8e:	7c6a      	ldrb	r2, [r5, #17]
 800fa90:	7cab      	ldrb	r3, [r5, #18]
 800fa92:	f1bb 0f00 	cmp.w	fp, #0
 800fa96:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fa9a:	b29b      	uxth	r3, r3
 800fa9c:	9301      	str	r3, [sp, #4]
 800fa9e:	7dab      	ldrb	r3, [r5, #22]
 800faa0:	bf08      	it	eq
 800faa2:	2101      	moveq	r1, #1
 800faa4:	9300      	str	r3, [sp, #0]
 800faa6:	4630      	mov	r0, r6
 800faa8:	463b      	mov	r3, r7
 800faaa:	9a03      	ldr	r2, [sp, #12]
 800faac:	f7ff feca 	bl	800f844 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>
 800fab0:	e76e      	b.n	800f990 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x68>
 800fab2:	bf00      	nop
 800fab4:	2000c884 	andcs	ip, r0, r4, lsl #17
 800fab8:	0801a550 	stmdaeq	r1, {r4, r6, r8, sl, sp, pc}
 800fabc:	2000c880 	andcs	ip, r0, r0, lsl #17

0800fac0 <RDMIdentify::RDMIdentify()>:
 800fac0:	4b01      	ldr	r3, [pc, #4]	; (800fac8 <RDMIdentify::RDMIdentify()+0x8>)
 800fac2:	6018      	str	r0, [r3, #0]
 800fac4:	4770      	bx	lr
 800fac6:	bf00      	nop
 800fac8:	2000c88c 	andcs	ip, r0, ip, lsl #17

0800facc <RDMIdentify::On(rdm::identify::Mode)>:
 800facc:	4770      	bx	lr

0800face <RDMIdentify::Off(rdm::identify::Mode)>:
 800face:	4770      	bx	lr

0800fad0 <memcpy.constprop.0.isra.0>:
 800fad0:	3801      	subs	r0, #1
 800fad2:	1d0b      	adds	r3, r1, #4
 800fad4:	4299      	cmp	r1, r3
 800fad6:	d100      	bne.n	800fada <memcpy.constprop.0.isra.0+0xa>
 800fad8:	4770      	bx	lr
 800fada:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fade:	f800 2f01 	strb.w	r2, [r0, #1]!
 800fae2:	e7f7      	b.n	800fad4 <memcpy.constprop.0.isra.0+0x4>

0800fae4 <RDMHandler::GetInterfaceList(unsigned short)>:
 800fae4:	4a08      	ldr	r2, [pc, #32]	; (800fb08 <RDMHandler::GetInterfaceList(unsigned short)+0x24>)
 800fae6:	6883      	ldr	r3, [r0, #8]
 800fae8:	6812      	ldr	r2, [r2, #0]
 800faea:	6892      	ldr	r2, [r2, #8]
 800faec:	0e11      	lsrs	r1, r2, #24
 800faee:	7619      	strb	r1, [r3, #24]
 800faf0:	0c11      	lsrs	r1, r2, #16
 800faf2:	7659      	strb	r1, [r3, #25]
 800faf4:	76da      	strb	r2, [r3, #27]
 800faf6:	0a11      	lsrs	r1, r2, #8
 800faf8:	2200      	movs	r2, #0
 800fafa:	771a      	strb	r2, [r3, #28]
 800fafc:	2206      	movs	r2, #6
 800fafe:	7699      	strb	r1, [r3, #26]
 800fb00:	775a      	strb	r2, [r3, #29]
 800fb02:	75da      	strb	r2, [r3, #23]
 800fb04:	f7ff bd2e 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800fb08:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800fb0c <RDMHandler::GetInterfaceName(unsigned short)>:
 800fb0c:	b538      	push	{r3, r4, r5, lr}
 800fb0e:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800fb12:	4604      	mov	r4, r0
 800fb14:	3117      	adds	r1, #23
 800fb16:	f105 0018 	add.w	r0, r5, #24
 800fb1a:	f7ff ffd9 	bl	800fad0 <memcpy.constprop.0.isra.0>
 800fb1e:	4a0d      	ldr	r2, [pc, #52]	; (800fb54 <RDMHandler::GetInterfaceName(unsigned short)+0x48>)
 800fb20:	f105 001b 	add.w	r0, r5, #27
 800fb24:	6813      	ldr	r3, [r2, #0]
 800fb26:	33a6      	adds	r3, #166	; 0xa6
 800fb28:	f813 1b01 	ldrb.w	r1, [r3], #1
 800fb2c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800fb30:	2900      	cmp	r1, #0
 800fb32:	d1f9      	bne.n	800fb28 <RDMHandler::GetInterfaceName(unsigned short)+0x1c>
 800fb34:	6812      	ldr	r2, [r2, #0]
 800fb36:	32a6      	adds	r2, #166	; 0xa6
 800fb38:	4611      	mov	r1, r2
 800fb3a:	460b      	mov	r3, r1
 800fb3c:	7818      	ldrb	r0, [r3, #0]
 800fb3e:	3101      	adds	r1, #1
 800fb40:	2800      	cmp	r0, #0
 800fb42:	d1fa      	bne.n	800fb3a <RDMHandler::GetInterfaceName(unsigned short)+0x2e>
 800fb44:	1a9b      	subs	r3, r3, r2
 800fb46:	3304      	adds	r3, #4
 800fb48:	75eb      	strb	r3, [r5, #23]
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb50:	f7ff bd08 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800fb54:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800fb58 <RDMHandler::GetHardwareAddress(unsigned short)>:
 800fb58:	b538      	push	{r3, r4, r5, lr}
 800fb5a:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800fb5e:	4604      	mov	r4, r0
 800fb60:	3117      	adds	r1, #23
 800fb62:	f105 0018 	add.w	r0, r5, #24
 800fb66:	f7ff ffb3 	bl	800fad0 <memcpy.constprop.0.isra.0>
 800fb6a:	4b06      	ldr	r3, [pc, #24]	; (800fb84 <RDMHandler::GetHardwareAddress(unsigned short)+0x2c>)
 800fb6c:	f105 011c 	add.w	r1, r5, #28
 800fb70:	6818      	ldr	r0, [r3, #0]
 800fb72:	f004 f937 	bl	8013de4 <Network::MacAddressCopyTo(unsigned char*)>
 800fb76:	230a      	movs	r3, #10
 800fb78:	75eb      	strb	r3, [r5, #23]
 800fb7a:	4620      	mov	r0, r4
 800fb7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb80:	f7ff bcf0 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800fb84:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800fb88 <RDMHandler::GetDHCPMode(unsigned short)>:
 800fb88:	b538      	push	{r3, r4, r5, lr}
 800fb8a:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800fb8e:	4604      	mov	r4, r0
 800fb90:	3117      	adds	r1, #23
 800fb92:	f105 0018 	add.w	r0, r5, #24
 800fb96:	f7ff ff9b 	bl	800fad0 <memcpy.constprop.0.isra.0>
 800fb9a:	4b05      	ldr	r3, [pc, #20]	; (800fbb0 <RDMHandler::GetDHCPMode(unsigned short)+0x28>)
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	795b      	ldrb	r3, [r3, #5]
 800fba2:	772b      	strb	r3, [r5, #28]
 800fba4:	2305      	movs	r3, #5
 800fba6:	75eb      	strb	r3, [r5, #23]
 800fba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbac:	f7ff bcda 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800fbb0:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800fbb4 <RDMHandler::SetDHCPMode(bool, unsigned short)>:
 800fbb4:	4b10      	ldr	r3, [pc, #64]	; (800fbf8 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x44>)
 800fbb6:	b510      	push	{r4, lr}
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	4604      	mov	r4, r0
 800fbbc:	7919      	ldrb	r1, [r3, #4]
 800fbbe:	6842      	ldr	r2, [r0, #4]
 800fbc0:	b921      	cbnz	r1, 800fbcc <RDMHandler::SetDHCPMode(bool, unsigned short)+0x18>
 800fbc2:	210b      	movs	r1, #11
 800fbc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbc8:	f7ff bd90 	b.w	800f6ec <RDMHandler::RespondMessageNack(unsigned short)>
 800fbcc:	7ed2      	ldrb	r2, [r2, #27]
 800fbce:	2a01      	cmp	r2, #1
 800fbd0:	d109      	bne.n	800fbe6 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x32>
 800fbd2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800fbd6:	f042 0204 	orr.w	r2, r2, #4
 800fbda:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800fbde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbe2:	f7ff bcbf 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800fbe6:	b92a      	cbnz	r2, 800fbf4 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x40>
 800fbe8:	4618      	mov	r0, r3
 800fbea:	4611      	mov	r1, r2
 800fbec:	f004 fb4c 	bl	8014288 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	e7f4      	b.n	800fbde <RDMHandler::SetDHCPMode(bool, unsigned short)+0x2a>
 800fbf4:	2106      	movs	r1, #6
 800fbf6:	e7e5      	b.n	800fbc4 <RDMHandler::SetDHCPMode(bool, unsigned short)+0x10>
 800fbf8:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800fbfc <RDMHandler::GetNameServers(unsigned short)>:
 800fbfc:	6842      	ldr	r2, [r0, #4]
 800fbfe:	7dd2      	ldrb	r2, [r2, #23]
 800fc00:	2a02      	cmp	r2, #2
 800fc02:	d902      	bls.n	800fc0a <RDMHandler::GetNameServers(unsigned short)+0xe>
 800fc04:	2106      	movs	r1, #6
 800fc06:	f7ff bd71 	b.w	800f6ec <RDMHandler::RespondMessageNack(unsigned short)>
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	6883      	ldr	r3, [r0, #8]
 800fc0e:	765a      	strb	r2, [r3, #25]
 800fc10:	769a      	strb	r2, [r3, #26]
 800fc12:	76da      	strb	r2, [r3, #27]
 800fc14:	771a      	strb	r2, [r3, #28]
 800fc16:	2205      	movs	r2, #5
 800fc18:	75da      	strb	r2, [r3, #23]
 800fc1a:	f7ff bca3 	b.w	800f564 <RDMHandler::RespondMessageAck()>
	...

0800fc20 <RDMHandler::GetZeroconf(unsigned short)>:
 800fc20:	b538      	push	{r3, r4, r5, lr}
 800fc22:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800fc26:	4604      	mov	r4, r0
 800fc28:	3117      	adds	r1, #23
 800fc2a:	f105 0018 	add.w	r0, r5, #24
 800fc2e:	f7ff ff4f 	bl	800fad0 <memcpy.constprop.0.isra.0>
 800fc32:	4b06      	ldr	r3, [pc, #24]	; (800fc4c <RDMHandler::GetZeroconf(unsigned short)+0x2c>)
 800fc34:	681a      	ldr	r2, [r3, #0]
 800fc36:	7993      	ldrb	r3, [r2, #6]
 800fc38:	b103      	cbz	r3, 800fc3c <RDMHandler::GetZeroconf(unsigned short)+0x1c>
 800fc3a:	79d3      	ldrb	r3, [r2, #7]
 800fc3c:	772b      	strb	r3, [r5, #28]
 800fc3e:	2305      	movs	r3, #5
 800fc40:	75eb      	strb	r3, [r5, #23]
 800fc42:	4620      	mov	r0, r4
 800fc44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc48:	f7ff bc8c 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800fc4c:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800fc50 <RDMHandler::SetZeroconf(bool, unsigned short)>:
 800fc50:	4b10      	ldr	r3, [pc, #64]	; (800fc94 <RDMHandler::SetZeroconf(bool, unsigned short)+0x44>)
 800fc52:	b510      	push	{r4, lr}
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	4604      	mov	r4, r0
 800fc58:	7999      	ldrb	r1, [r3, #6]
 800fc5a:	6842      	ldr	r2, [r0, #4]
 800fc5c:	b921      	cbnz	r1, 800fc68 <RDMHandler::SetZeroconf(bool, unsigned short)+0x18>
 800fc5e:	210b      	movs	r1, #11
 800fc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc64:	f7ff bd42 	b.w	800f6ec <RDMHandler::RespondMessageNack(unsigned short)>
 800fc68:	7ed2      	ldrb	r2, [r2, #27]
 800fc6a:	2a01      	cmp	r2, #1
 800fc6c:	d109      	bne.n	800fc82 <RDMHandler::SetZeroconf(bool, unsigned short)+0x32>
 800fc6e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800fc72:	f042 0208 	orr.w	r2, r2, #8
 800fc76:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800fc7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc7e:	f7ff bc71 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800fc82:	b92a      	cbnz	r2, 800fc90 <RDMHandler::SetZeroconf(bool, unsigned short)+0x40>
 800fc84:	4618      	mov	r0, r3
 800fc86:	4611      	mov	r1, r2
 800fc88:	f004 fafe 	bl	8014288 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>
 800fc8c:	4620      	mov	r0, r4
 800fc8e:	e7f4      	b.n	800fc7a <RDMHandler::SetZeroconf(bool, unsigned short)+0x2a>
 800fc90:	2106      	movs	r1, #6
 800fc92:	e7e5      	b.n	800fc60 <RDMHandler::SetZeroconf(bool, unsigned short)+0x10>
 800fc94:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800fc98 <RDMHandler::RenewDhcp(bool, unsigned short)>:
 800fc98:	4b09      	ldr	r3, [pc, #36]	; (800fcc0 <RDMHandler::RenewDhcp(bool, unsigned short)+0x28>)
 800fc9a:	b510      	push	{r4, lr}
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	4604      	mov	r4, r0
 800fca0:	795a      	ldrb	r2, [r3, #5]
 800fca2:	b922      	cbnz	r2, 800fcae <RDMHandler::RenewDhcp(bool, unsigned short)+0x16>
 800fca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fca8:	210b      	movs	r1, #11
 800fcaa:	f7ff bd1f 	b.w	800f6ec <RDMHandler::RespondMessageNack(unsigned short)>
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f004 fa9c 	bl	80141ec <Network::EnableDhcp()>
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcba:	f7ff bc53 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800fcbe:	bf00      	nop
 800fcc0:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800fcc4 <RDMHandler::GetAddressNetmask(unsigned short)>:
 800fcc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fcc6:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800fcca:	4e0f      	ldr	r6, [pc, #60]	; (800fd08 <RDMHandler::GetAddressNetmask(unsigned short)+0x44>)
 800fccc:	4604      	mov	r4, r0
 800fcce:	6833      	ldr	r3, [r6, #0]
 800fcd0:	f105 0018 	add.w	r0, r5, #24
 800fcd4:	695b      	ldr	r3, [r3, #20]
 800fcd6:	3117      	adds	r1, #23
 800fcd8:	9301      	str	r3, [sp, #4]
 800fcda:	f7ff fef9 	bl	800fad0 <memcpy.constprop.0.isra.0>
 800fcde:	a901      	add	r1, sp, #4
 800fce0:	f105 001c 	add.w	r0, r5, #28
 800fce4:	f7ff fef4 	bl	800fad0 <memcpy.constprop.0.isra.0>
 800fce8:	6836      	ldr	r6, [r6, #0]
 800fcea:	69f0      	ldr	r0, [r6, #28]
 800fcec:	f008 ff5c 	bl	8018ba8 <__popcountsi2>
 800fcf0:	f885 0020 	strb.w	r0, [r5, #32]
 800fcf4:	7973      	ldrb	r3, [r6, #5]
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 800fcfc:	230a      	movs	r3, #10
 800fcfe:	75eb      	strb	r3, [r5, #23]
 800fd00:	f7ff fc30 	bl	800f564 <RDMHandler::RespondMessageAck()>
 800fd04:	b002      	add	sp, #8
 800fd06:	bd70      	pop	{r4, r5, r6, pc}
 800fd08:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800fd0c <RDMHandler::GetStaticAddress(unsigned short)>:
 800fd0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd0e:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800fd12:	4e0e      	ldr	r6, [pc, #56]	; (800fd4c <RDMHandler::GetStaticAddress(unsigned short)+0x40>)
 800fd14:	4604      	mov	r4, r0
 800fd16:	6833      	ldr	r3, [r6, #0]
 800fd18:	f105 0018 	add.w	r0, r5, #24
 800fd1c:	695b      	ldr	r3, [r3, #20]
 800fd1e:	3117      	adds	r1, #23
 800fd20:	9301      	str	r3, [sp, #4]
 800fd22:	f7ff fed5 	bl	800fad0 <memcpy.constprop.0.isra.0>
 800fd26:	a901      	add	r1, sp, #4
 800fd28:	f105 001c 	add.w	r0, r5, #28
 800fd2c:	f7ff fed0 	bl	800fad0 <memcpy.constprop.0.isra.0>
 800fd30:	6833      	ldr	r3, [r6, #0]
 800fd32:	69d8      	ldr	r0, [r3, #28]
 800fd34:	f008 ff38 	bl	8018ba8 <__popcountsi2>
 800fd38:	2309      	movs	r3, #9
 800fd3a:	f885 0020 	strb.w	r0, [r5, #32]
 800fd3e:	75eb      	strb	r3, [r5, #23]
 800fd40:	4620      	mov	r0, r4
 800fd42:	f7ff fc0f 	bl	800f564 <RDMHandler::RespondMessageAck()>
 800fd46:	b002      	add	sp, #8
 800fd48:	bd70      	pop	{r4, r5, r6, pc}
 800fd4a:	bf00      	nop
 800fd4c:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800fd50 <RDMHandler::SetStaticAddress(bool, unsigned short)>:
 800fd50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd52:	6845      	ldr	r5, [r0, #4]
 800fd54:	4604      	mov	r4, r0
 800fd56:	7dab      	ldrb	r3, [r5, #22]
 800fd58:	2b09      	cmp	r3, #9
 800fd5a:	d005      	beq.n	800fd68 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x18>
 800fd5c:	2101      	movs	r1, #1
 800fd5e:	b003      	add	sp, #12
 800fd60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd64:	f7ff bcc2 	b.w	800f6ec <RDMHandler::RespondMessageNack(unsigned short)>
 800fd68:	f105 011b 	add.w	r1, r5, #27
 800fd6c:	a801      	add	r0, sp, #4
 800fd6e:	f7ff feaf 	bl	800fad0 <memcpy.constprop.0.isra.0>
 800fd72:	4b09      	ldr	r3, [pc, #36]	; (800fd98 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x48>)
 800fd74:	7fea      	ldrb	r2, [r5, #31]
 800fd76:	6818      	ldr	r0, [r3, #0]
 800fd78:	9901      	ldr	r1, [sp, #4]
 800fd7a:	b12a      	cbz	r2, 800fd88 <RDMHandler::SetStaticAddress(bool, unsigned short)+0x38>
 800fd7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd80:	f1c2 0220 	rsb	r2, r2, #32
 800fd84:	4093      	lsls	r3, r2
 800fd86:	ba1a      	rev	r2, r3
 800fd88:	f004 fa7e 	bl	8014288 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	f7ff fbe9 	bl	800f564 <RDMHandler::RespondMessageAck()>
 800fd92:	b003      	add	sp, #12
 800fd94:	bd30      	pop	{r4, r5, pc}
 800fd96:	bf00      	nop
 800fd98:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800fd9c <RDMHandler::ApplyConfiguration(bool, unsigned short)>:
 800fd9c:	4b08      	ldr	r3, [pc, #32]	; (800fdc0 <RDMHandler::ApplyConfiguration(bool, unsigned short)+0x24>)
 800fd9e:	b510      	push	{r4, lr}
 800fda0:	4604      	mov	r4, r0
 800fda2:	6818      	ldr	r0, [r3, #0]
 800fda4:	f004 fa7d 	bl	80142a2 <Network::ApplyQueuedConfig()>
 800fda8:	b120      	cbz	r0, 800fdb4 <RDMHandler::ApplyConfiguration(bool, unsigned short)+0x18>
 800fdaa:	4620      	mov	r0, r4
 800fdac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdb0:	f7ff bbd8 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdba:	2101      	movs	r1, #1
 800fdbc:	f7ff bc96 	b.w	800f6ec <RDMHandler::RespondMessageNack(unsigned short)>
 800fdc0:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800fdc4 <RDMHandler::GetDefaultRoute(unsigned short)>:
 800fdc4:	4b0c      	ldr	r3, [pc, #48]	; (800fdf8 <RDMHandler::GetDefaultRoute(unsigned short)+0x34>)
 800fdc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fdc8:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	4604      	mov	r4, r0
 800fdd0:	699b      	ldr	r3, [r3, #24]
 800fdd2:	f105 0018 	add.w	r0, r5, #24
 800fdd6:	3117      	adds	r1, #23
 800fdd8:	9301      	str	r3, [sp, #4]
 800fdda:	f7ff fe79 	bl	800fad0 <memcpy.constprop.0.isra.0>
 800fdde:	a901      	add	r1, sp, #4
 800fde0:	f105 001c 	add.w	r0, r5, #28
 800fde4:	f7ff fe74 	bl	800fad0 <memcpy.constprop.0.isra.0>
 800fde8:	2308      	movs	r3, #8
 800fdea:	4620      	mov	r0, r4
 800fdec:	75eb      	strb	r3, [r5, #23]
 800fdee:	f7ff fbb9 	bl	800f564 <RDMHandler::RespondMessageAck()>
 800fdf2:	b003      	add	sp, #12
 800fdf4:	bd30      	pop	{r4, r5, pc}
 800fdf6:	bf00      	nop
 800fdf8:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800fdfc <RDMHandler::SetDefaultRoute(bool, unsigned short)>:
 800fdfc:	210b      	movs	r1, #11
 800fdfe:	f7ff bc75 	b.w	800f6ec <RDMHandler::RespondMessageNack(unsigned short)>
	...

0800fe04 <RDMHandler::GetHostName(unsigned short)>:
 800fe04:	4b0a      	ldr	r3, [pc, #40]	; (800fe30 <RDMHandler::GetHostName(unsigned short)+0x2c>)
 800fe06:	b510      	push	{r4, lr}
 800fe08:	6819      	ldr	r1, [r3, #0]
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	3120      	adds	r1, #32
 800fe0e:	460b      	mov	r3, r1
 800fe10:	461a      	mov	r2, r3
 800fe12:	7810      	ldrb	r0, [r2, #0]
 800fe14:	3301      	adds	r3, #1
 800fe16:	2800      	cmp	r0, #0
 800fe18:	d1fa      	bne.n	800fe10 <RDMHandler::GetHostName(unsigned short)+0xc>
 800fe1a:	1a52      	subs	r2, r2, r1
 800fe1c:	4620      	mov	r0, r4
 800fe1e:	b292      	uxth	r2, r2
 800fe20:	f7ff fb48 	bl	800f4b4 <RDMHandler::HandleString(char const*, unsigned int)>
 800fe24:	4620      	mov	r0, r4
 800fe26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe2a:	f7ff bb9b 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800fe2e:	bf00      	nop
 800fe30:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800fe34 <RDMHandler::SetHostName(bool, unsigned short)>:
 800fe34:	b510      	push	{r4, lr}
 800fe36:	6841      	ldr	r1, [r0, #4]
 800fe38:	4604      	mov	r4, r0
 800fe3a:	7d8b      	ldrb	r3, [r1, #22]
 800fe3c:	2b3f      	cmp	r3, #63	; 0x3f
 800fe3e:	d904      	bls.n	800fe4a <RDMHandler::SetHostName(bool, unsigned short)+0x16>
 800fe40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe44:	2102      	movs	r1, #2
 800fe46:	f7ff bc51 	b.w	800f6ec <RDMHandler::RespondMessageNack(unsigned short)>
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	440b      	add	r3, r1
 800fe4e:	75da      	strb	r2, [r3, #23]
 800fe50:	4b04      	ldr	r3, [pc, #16]	; (800fe64 <RDMHandler::SetHostName(bool, unsigned short)+0x30>)
 800fe52:	3117      	adds	r1, #23
 800fe54:	6818      	ldr	r0, [r3, #0]
 800fe56:	f004 f988 	bl	801416a <Network::SetHostName(char const*)>
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe60:	f7ff bb80 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800fe64:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800fe68 <RDMHandler::GetDomainName(unsigned short)>:
 800fe68:	4b0a      	ldr	r3, [pc, #40]	; (800fe94 <RDMHandler::GetDomainName(unsigned short)+0x2c>)
 800fe6a:	b510      	push	{r4, lr}
 800fe6c:	6819      	ldr	r1, [r3, #0]
 800fe6e:	4604      	mov	r4, r0
 800fe70:	3160      	adds	r1, #96	; 0x60
 800fe72:	460b      	mov	r3, r1
 800fe74:	461a      	mov	r2, r3
 800fe76:	7810      	ldrb	r0, [r2, #0]
 800fe78:	3301      	adds	r3, #1
 800fe7a:	2800      	cmp	r0, #0
 800fe7c:	d1fa      	bne.n	800fe74 <RDMHandler::GetDomainName(unsigned short)+0xc>
 800fe7e:	1a52      	subs	r2, r2, r1
 800fe80:	4620      	mov	r0, r4
 800fe82:	b292      	uxth	r2, r2
 800fe84:	f7ff fb16 	bl	800f4b4 <RDMHandler::HandleString(char const*, unsigned int)>
 800fe88:	4620      	mov	r0, r4
 800fe8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe8e:	f7ff bb69 	b.w	800f564 <RDMHandler::RespondMessageAck()>
 800fe92:	bf00      	nop
 800fe94:	2001d2d4 	ldrdcs	sp, [r1], -r4

0800fe98 <RDMHandler::SetDomainName(bool, unsigned short)>:
 800fe98:	210b      	movs	r1, #11
 800fe9a:	f7ff bc27 	b.w	800f6ec <RDMHandler::RespondMessageNack(unsigned short)>
	...

0800fea0 <RDMDevice::RDMDevice()>:
 800fea0:	4a33      	ldr	r2, [pc, #204]	; (800ff70 <RDMDevice::RDMDevice()+0xd0>)
 800fea2:	2300      	movs	r3, #0
 800fea4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fea6:	4604      	mov	r4, r0
 800fea8:	4611      	mov	r1, r2
 800feaa:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800feae:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 800feb2:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
 800feb6:	6743      	str	r3, [r0, #116]	; 0x74
 800feb8:	4613      	mov	r3, r2
 800feba:	7818      	ldrb	r0, [r3, #0]
 800febc:	3201      	adds	r2, #1
 800febe:	2800      	cmp	r0, #0
 800fec0:	d1fa      	bne.n	800feb8 <RDMDevice::RDMDevice()+0x18>
 800fec2:	1a5b      	subs	r3, r3, r1
 800fec4:	2b20      	cmp	r3, #32
 800fec6:	bf28      	it	cs
 800fec8:	2320      	movcs	r3, #32
 800feca:	f104 052a 	add.w	r5, r4, #42	; 0x2a
 800fece:	4629      	mov	r1, r5
 800fed0:	461a      	mov	r2, r3
 800fed2:	4827      	ldr	r0, [pc, #156]	; (800ff70 <RDMDevice::RDMDevice()+0xd0>)
 800fed4:	3a01      	subs	r2, #1
 800fed6:	d23b      	bcs.n	800ff50 <RDMDevice::RDMDevice()+0xb0>
 800fed8:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800fedc:	4b25      	ldr	r3, [pc, #148]	; (800ff74 <RDMDevice::RDMDevice()+0xd4>)
 800fede:	4669      	mov	r1, sp
 800fee0:	781a      	ldrb	r2, [r3, #0]
 800fee2:	7022      	strb	r2, [r4, #0]
 800fee4:	785b      	ldrb	r3, [r3, #1]
 800fee6:	7063      	strb	r3, [r4, #1]
 800fee8:	4b23      	ldr	r3, [pc, #140]	; (800ff78 <RDMDevice::RDMDevice()+0xd8>)
 800feea:	6818      	ldr	r0, [r3, #0]
 800feec:	f003 ff7a 	bl	8013de4 <Network::MacAddressCopyTo(unsigned char*)>
 800fef0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fef4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fef8:	70a3      	strb	r3, [r4, #2]
 800fefa:	7263      	strb	r3, [r4, #9]
 800fefc:	4b1f      	ldr	r3, [pc, #124]	; (800ff7c <RDMDevice::RDMDevice()+0xdc>)
 800fefe:	70e2      	strb	r2, [r4, #3]
 800ff00:	7222      	strb	r2, [r4, #8]
 800ff02:	461a      	mov	r2, r3
 800ff04:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ff08:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800ff0c:	7121      	strb	r1, [r4, #4]
 800ff0e:	7160      	strb	r0, [r4, #5]
 800ff10:	71a0      	strb	r0, [r4, #6]
 800ff12:	71e1      	strb	r1, [r4, #7]
 800ff14:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800ff18:	2900      	cmp	r1, #0
 800ff1a:	d1fb      	bne.n	800ff14 <RDMDevice::RDMDevice()+0x74>
 800ff1c:	1a9b      	subs	r3, r3, r2
 800ff1e:	2b20      	cmp	r3, #32
 800ff20:	bf28      	it	cs
 800ff22:	2320      	movcs	r3, #32
 800ff24:	461a      	mov	r2, r3
 800ff26:	4915      	ldr	r1, [pc, #84]	; (800ff7c <RDMDevice::RDMDevice()+0xdc>)
 800ff28:	3a01      	subs	r2, #1
 800ff2a:	d216      	bcs.n	800ff5a <RDMDevice::RDMDevice()+0xba>
 800ff2c:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800ff30:	f06f 2380 	mvn.w	r3, #2147516416	; 0x80008000
 800ff34:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ff36:	2315      	movs	r3, #21
 800ff38:	4a11      	ldr	r2, [pc, #68]	; (800ff80 <RDMDevice::RDMDevice()+0xe0>)
 800ff3a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 800ff3e:	f104 0165 	add.w	r1, r4, #101	; 0x65
 800ff42:	f104 0350 	add.w	r3, r4, #80	; 0x50
 800ff46:	4299      	cmp	r1, r3
 800ff48:	d10c      	bne.n	800ff64 <RDMDevice::RDMDevice()+0xc4>
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	b002      	add	sp, #8
 800ff4e:	bd70      	pop	{r4, r5, r6, pc}
 800ff50:	f810 6b01 	ldrb.w	r6, [r0], #1
 800ff54:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ff58:	e7bc      	b.n	800fed4 <RDMDevice::RDMDevice()+0x34>
 800ff5a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800ff5e:	f805 0f01 	strb.w	r0, [r5, #1]!
 800ff62:	e7e1      	b.n	800ff28 <RDMDevice::RDMDevice()+0x88>
 800ff64:	f812 0b01 	ldrb.w	r0, [r2], #1
 800ff68:	f803 0f01 	strb.w	r0, [r3, #1]!
 800ff6c:	e7eb      	b.n	800ff46 <RDMDevice::RDMDevice()+0xa6>
 800ff6e:	bf00      	nop
 800ff70:	0801a824 	stmdaeq	r1, {r2, r5, fp, sp, pc}
 800ff74:	0801a822 	stmdaeq	r1, {r1, r5, fp, sp, pc}
 800ff78:	2001d2d4 	ldrdcs	sp, [r1], -r4
 800ff7c:	08019fad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r8, r9, sl, fp, ip, pc}
 800ff80:	0801a80c 	stmdaeq	r1, {r2, r3, fp, sp, pc}

0800ff84 <RDMDevice::Print()>:
 800ff84:	b513      	push	{r0, r1, r4, lr}
 800ff86:	4604      	mov	r4, r0
 800ff88:	4818      	ldr	r0, [pc, #96]	; (800ffec <RDMDevice::Print()+0x68>)
 800ff8a:	f7f9 fc19 	bl	80097c0 <printf>
 800ff8e:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800ff92:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 800ff96:	4816      	ldr	r0, [pc, #88]	; (800fff0 <RDMDevice::Print()+0x6c>)
 800ff98:	f7f9 fc12 	bl	80097c0 <printf>
 800ff9c:	7862      	ldrb	r2, [r4, #1]
 800ff9e:	7821      	ldrb	r1, [r4, #0]
 800ffa0:	4814      	ldr	r0, [pc, #80]	; (800fff4 <RDMDevice::Print()+0x70>)
 800ffa2:	f7f9 fc0d 	bl	80097c0 <printf>
 800ffa6:	79a3      	ldrb	r3, [r4, #6]
 800ffa8:	7a22      	ldrb	r2, [r4, #8]
 800ffaa:	7a61      	ldrb	r1, [r4, #9]
 800ffac:	9300      	str	r3, [sp, #0]
 800ffae:	4812      	ldr	r0, [pc, #72]	; (800fff8 <RDMDevice::Print()+0x74>)
 800ffb0:	79e3      	ldrb	r3, [r4, #7]
 800ffb2:	f7f9 fc05 	bl	80097c0 <printf>
 800ffb6:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 800ffba:	f104 020a 	add.w	r2, r4, #10
 800ffbe:	480f      	ldr	r0, [pc, #60]	; (800fffc <RDMDevice::Print()+0x78>)
 800ffc0:	f7f9 fbfe 	bl	80097c0 <printf>
 800ffc4:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 800ffc8:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 800ffcc:	0a09      	lsrs	r1, r1, #8
 800ffce:	480c      	ldr	r0, [pc, #48]	; (8010000 <RDMDevice::Print()+0x7c>)
 800ffd0:	f7f9 fbf6 	bl	80097c0 <printf>
 800ffd4:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 800ffd8:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 800ffdc:	4809      	ldr	r0, [pc, #36]	; (8010004 <RDMDevice::Print()+0x80>)
 800ffde:	0a09      	lsrs	r1, r1, #8
 800ffe0:	b002      	add	sp, #8
 800ffe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffe6:	f7f9 bbeb 	b.w	80097c0 <printf>
 800ffea:	bf00      	nop
 800ffec:	0801a738 	stmdaeq	r1, {r3, r4, r5, r8, r9, sl, sp, pc}
 800fff0:	0801a752 	stmdaeq	r1, {r1, r4, r6, r8, r9, sl, sp, pc}
 800fff4:	0801a76d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, r9, sl, sp, pc}
 800fff8:	0801a78c 	stmdaeq	r1, {r2, r3, r7, r8, r9, sl, sp, pc}
 800fffc:	0801a7b3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r8, r9, sl, sp, pc}
 8010000:	0801a7ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, r9, sl, sp, pc}
 8010004:	0801a7ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, r9, sl, sp, pc}

08010008 <uuid_unparse_x>:
 8010008:	4603      	mov	r3, r0
 801000a:	b530      	push	{r4, r5, lr}
 801000c:	4608      	mov	r0, r1
 801000e:	4611      	mov	r1, r2
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	b08f      	sub	sp, #60	; 0x3c
 8010014:	ba12      	rev	r2, r2
 8010016:	920a      	str	r2, [sp, #40]	; 0x28
 8010018:	889a      	ldrh	r2, [r3, #4]
 801001a:	891c      	ldrh	r4, [r3, #8]
 801001c:	ba52      	rev16	r2, r2
 801001e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8010022:	88da      	ldrh	r2, [r3, #6]
 8010024:	ba64      	rev16	r4, r4
 8010026:	ba52      	rev16	r2, r2
 8010028:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801002c:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 8010030:	f103 020a 	add.w	r2, r3, #10
 8010034:	f10d 0431 	add.w	r4, sp, #49	; 0x31
 8010038:	3310      	adds	r3, #16
 801003a:	4293      	cmp	r3, r2
 801003c:	d122      	bne.n	8010084 <uuid_unparse_x+0x7c>
 801003e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8010042:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8010046:	9208      	str	r2, [sp, #32]
 8010048:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 801004c:	0a1b      	lsrs	r3, r3, #8
 801004e:	9207      	str	r2, [sp, #28]
 8010050:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8010054:	9301      	str	r3, [sp, #4]
 8010056:	9206      	str	r2, [sp, #24]
 8010058:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 801005c:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8010060:	9205      	str	r2, [sp, #20]
 8010062:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8010066:	9300      	str	r3, [sp, #0]
 8010068:	9204      	str	r2, [sp, #16]
 801006a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 801006e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8010072:	9203      	str	r2, [sp, #12]
 8010074:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8010078:	9202      	str	r2, [sp, #8]
 801007a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801007c:	f7f9 fbb0 	bl	80097e0 <sprintf>
 8010080:	b00f      	add	sp, #60	; 0x3c
 8010082:	bd30      	pop	{r4, r5, pc}
 8010084:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010088:	f804 5f01 	strb.w	r5, [r4, #1]!
 801008c:	e7d5      	b.n	801003a <uuid_unparse_x+0x32>
	...

08010090 <uuid_unparse>:
 8010090:	4a01      	ldr	r2, [pc, #4]	; (8010098 <uuid_unparse+0x8>)
 8010092:	f7ff bfb9 	b.w	8010008 <uuid_unparse_x>
 8010096:	bf00      	nop
 8010098:	0801a840 	stmdaeq	r1, {r6, fp, sp, pc}

0801009c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>:
 801009c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801009e:	4604      	mov	r4, r0
 80100a0:	460e      	mov	r6, r1
 80100a2:	4611      	mov	r1, r2
 80100a4:	4617      	mov	r7, r2
 80100a6:	461d      	mov	r5, r3
 80100a8:	f000 fdaa 	bl	8010c00 <PixelConfiguration::Validate(unsigned int&)>
 80100ac:	7d62      	ldrb	r2, [r4, #21]
 80100ae:	b94a      	cbnz	r2, 80100c4 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x28>
 80100b0:	6823      	ldr	r3, [r4, #0]
 80100b2:	b11b      	cbz	r3, 80100bc <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x20>
 80100b4:	3b0b      	subs	r3, #11
 80100b6:	2b01      	cmp	r3, #1
 80100b8:	bf88      	it	hi
 80100ba:	6022      	strhi	r2, [r4, #0]
 80100bc:	4639      	mov	r1, r7
 80100be:	4620      	mov	r0, r4
 80100c0:	f000 fd9e 	bl	8010c00 <PixelConfiguration::Validate(unsigned int&)>
 80100c4:	6823      	ldr	r3, [r4, #0]
 80100c6:	2b07      	cmp	r3, #7
 80100c8:	bf15      	itete	ne
 80100ca:	f44f 71aa 	movne.w	r1, #340	; 0x154
 80100ce:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80100d2:	23aa      	movne	r3, #170	; 0xaa
 80100d4:	2380      	moveq	r3, #128	; 0x80
 80100d6:	bf14      	ite	ne
 80100d8:	f44f 72ff 	movne.w	r2, #510	; 0x1fe
 80100dc:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 80100e0:	e9c5 3100 	strd	r3, r1, [r5]
 80100e4:	6a21      	ldr	r1, [r4, #32]
 80100e6:	60aa      	str	r2, [r5, #8]
 80100e8:	6862      	ldr	r2, [r4, #4]
 80100ea:	b109      	cbz	r1, 80100f0 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x54>
 80100ec:	4291      	cmp	r1, r2
 80100ee:	d900      	bls.n	80100f2 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)+0x56>
 80100f0:	6222      	str	r2, [r4, #32]
 80100f2:	6a21      	ldr	r1, [r4, #32]
 80100f4:	69e0      	ldr	r0, [r4, #28]
 80100f6:	fbb2 f2f1 	udiv	r2, r2, r1
 80100fa:	3301      	adds	r3, #1
 80100fc:	6262      	str	r2, [r4, #36]	; 0x24
 80100fe:	42b0      	cmp	r0, r6
 8010100:	fbb2 f2f3 	udiv	r2, r2, r3
 8010104:	bf28      	it	cs
 8010106:	4630      	movcs	r0, r6
 8010108:	1c53      	adds	r3, r2, #1
 801010a:	2e01      	cmp	r6, #1
 801010c:	62a3      	str	r3, [r4, #40]	; 0x28
 801010e:	bf1c      	itt	ne
 8010110:	eb03 0380 	addne.w	r3, r3, r0, lsl #2
 8010114:	1f5a      	subne	r2, r3, #5
 8010116:	61e0      	str	r0, [r4, #28]
 8010118:	60ea      	str	r2, [r5, #12]
 801011a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801011c <PixelDmxConfiguration::Print()>:
 801011c:	b510      	push	{r4, lr}
 801011e:	4604      	mov	r4, r0
 8010120:	f000 fe04 	bl	8010d2c <PixelConfiguration::Print()>
 8010124:	4806      	ldr	r0, [pc, #24]	; (8010140 <PixelDmxConfiguration::Print()+0x24>)
 8010126:	f7f9 fb4b 	bl	80097c0 <printf>
 801012a:	69e1      	ldr	r1, [r4, #28]
 801012c:	4805      	ldr	r0, [pc, #20]	; (8010144 <PixelDmxConfiguration::Print()+0x28>)
 801012e:	f7f9 fb47 	bl	80097c0 <printf>
 8010132:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
 8010136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801013a:	4803      	ldr	r0, [pc, #12]	; (8010148 <PixelDmxConfiguration::Print()+0x2c>)
 801013c:	f7f9 bb40 	b.w	80097c0 <printf>
 8010140:	0801a871 	stmdaeq	r1, {r0, r4, r5, r6, fp, sp, pc}
 8010144:	0801a88a 	stmdaeq	r1, {r1, r3, r7, fp, sp, pc}
 8010148:	0801a899 	stmdaeq	r1, {r0, r3, r4, r7, fp, sp, pc}

0801014c <WS28xxDmxMulti::SetDmxStartAddress(unsigned short)>:
 801014c:	2000      	movs	r0, #0
 801014e:	4770      	bx	lr

08010150 <WS28xxDmxMulti::GetDmxStartAddress()>:
 8010150:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010154:	4770      	bx	lr

08010156 <WS28xxDmxMulti::GetDmxFootprint()>:
 8010156:	2000      	movs	r0, #0
 8010158:	4770      	bx	lr

0801015a <WS28xxDmxMulti::Start(unsigned int)>:
 801015a:	b538      	push	{r3, r4, r5, lr}
 801015c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801015e:	4604      	mov	r4, r0
 8010160:	460d      	mov	r5, r1
 8010162:	b923      	cbnz	r3, 801016e <WS28xxDmxMulti::Start(unsigned int)+0x14>
 8010164:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8010166:	b110      	cbz	r0, 801016e <WS28xxDmxMulti::Start(unsigned int)+0x14>
 8010168:	6803      	ldr	r3, [r0, #0]
 801016a:	689b      	ldr	r3, [r3, #8]
 801016c:	4798      	blx	r3
 801016e:	2301      	movs	r3, #1
 8010170:	fa03 f105 	lsl.w	r1, r3, r5
 8010174:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010176:	430b      	orrs	r3, r1
 8010178:	6523      	str	r3, [r4, #80]	; 0x50
 801017a:	bd38      	pop	{r3, r4, r5, pc}

0801017c <WS28xxDmxMulti::~WS28xxDmxMulti()>:
 801017c:	b538      	push	{r3, r4, r5, lr}
 801017e:	4b06      	ldr	r3, [pc, #24]	; (8010198 <WS28xxDmxMulti::~WS28xxDmxMulti()+0x1c>)
 8010180:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8010182:	4604      	mov	r4, r0
 8010184:	6003      	str	r3, [r0, #0]
 8010186:	b12d      	cbz	r5, 8010194 <WS28xxDmxMulti::~WS28xxDmxMulti()+0x18>
 8010188:	4628      	mov	r0, r5
 801018a:	f001 fa43 	bl	8011614 <WS28xxMulti::~WS28xxMulti()>
 801018e:	4628      	mov	r0, r5
 8010190:	f006 fa5a 	bl	8016648 <operator delete(void*)>
 8010194:	4620      	mov	r0, r4
 8010196:	bd38      	pop	{r3, r4, r5, pc}
 8010198:	0801a8c8 	stmdaeq	r1, {r3, r6, r7, fp, sp, pc}

0801019c <WS28xxDmxMulti::~WS28xxDmxMulti()>:
 801019c:	b510      	push	{r4, lr}
 801019e:	4604      	mov	r4, r0
 80101a0:	f7ff ffec 	bl	801017c <WS28xxDmxMulti::~WS28xxDmxMulti()>
 80101a4:	4620      	mov	r0, r4
 80101a6:	f006 fa4f 	bl	8016648 <operator delete(void*)>
 80101aa:	4620      	mov	r0, r4
 80101ac:	bd10      	pop	{r4, pc}

080101ae <WS28xxDmxMulti::Blackout(bool)>:
 80101ae:	b538      	push	{r3, r4, r5, lr}
 80101b0:	4604      	mov	r4, r0
 80101b2:	460d      	mov	r5, r1
 80101b4:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 80101b8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80101ba:	f001 fdeb 	bl	8011d94 <WS28xxMulti::IsUpdating()>
 80101be:	2800      	cmp	r0, #0
 80101c0:	d1fa      	bne.n	80101b8 <WS28xxDmxMulti::Blackout(bool)+0xa>
 80101c2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80101c4:	b11d      	cbz	r5, 80101ce <WS28xxDmxMulti::Blackout(bool)+0x20>
 80101c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101ca:	f001 bd1f 	b.w	8011c0c <WS28xxMulti::Blackout()>
 80101ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101d2:	f001 bc9f 	b.w	8011b14 <WS28xxMulti::Update()>

080101d6 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)>:
 80101d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101da:	b089      	sub	sp, #36	; 0x24
 80101dc:	9306      	str	r3, [sp, #24]
 80101de:	088b      	lsrs	r3, r1, #2
 80101e0:	4691      	mov	r9, r2
 80101e2:	9105      	str	r1, [sp, #20]
 80101e4:	f001 0203 	and.w	r2, r1, #3
 80101e8:	9307      	str	r3, [sp, #28]
 80101ea:	9906      	ldr	r1, [sp, #24]
 80101ec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80101ee:	2a02      	cmp	r2, #2
 80101f0:	4604      	mov	r4, r0
 80101f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80101f6:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80101f8:	d030      	beq.n	801025c <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x86>
 80101fa:	2a03      	cmp	r2, #3
 80101fc:	d030      	beq.n	8010260 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x8a>
 80101fe:	2a01      	cmp	r2, #1
 8010200:	d026      	beq.n	8010250 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x7a>
 8010202:	429e      	cmp	r6, r3
 8010204:	bf28      	it	cs
 8010206:	461e      	movcs	r6, r3
 8010208:	2500      	movs	r5, #0
 801020a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801020c:	f001 fdc2 	bl	8011d94 <WS28xxMulti::IsUpdating()>
 8010210:	2800      	cmp	r0, #0
 8010212:	d1fa      	bne.n	801020a <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x34>
 8010214:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010216:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
 801021a:	2b03      	cmp	r3, #3
 801021c:	46c8      	mov	r8, r9
 801021e:	fb0a f705 	mul.w	r7, sl, r5
 8010222:	d040      	beq.n	80102a6 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xd0>
 8010224:	42b5      	cmp	r5, r6
 8010226:	d240      	bcs.n	80102aa <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xd4>
 8010228:	9a06      	ldr	r2, [sp, #24]
 801022a:	eba8 0309 	sub.w	r3, r8, r9
 801022e:	429a      	cmp	r2, r3
 8010230:	d93b      	bls.n	80102aa <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xd4>
 8010232:	f04f 0b00 	mov.w	fp, #0
 8010236:	f898 f000 	pld	[r8]
 801023a:	fa1f f28b 	uxth.w	r2, fp
 801023e:	4552      	cmp	r2, sl
 8010240:	f10b 0b01 	add.w	fp, fp, #1
 8010244:	d33b      	bcc.n	80102be <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xe8>
 8010246:	3501      	adds	r5, #1
 8010248:	f108 0804 	add.w	r8, r8, #4
 801024c:	4457      	add	r7, sl
 801024e:	e7e9      	b.n	8010224 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x4e>
 8010250:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8010252:	442b      	add	r3, r5
 8010254:	429e      	cmp	r6, r3
 8010256:	bf28      	it	cs
 8010258:	461e      	movcs	r6, r3
 801025a:	e7d6      	b.n	801020a <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x34>
 801025c:	6b85      	ldr	r5, [r0, #56]	; 0x38
 801025e:	e7f8      	b.n	8010252 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x7c>
 8010260:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8010262:	e7f6      	b.n	8010252 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x7c>
 8010264:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010268:	9907      	ldr	r1, [sp, #28]
 801026a:	9301      	str	r3, [sp, #4]
 801026c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010270:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8010272:	9300      	str	r3, [sp, #0]
 8010274:	f898 3000 	ldrb.w	r3, [r8]
 8010278:	443a      	add	r2, r7
 801027a:	f001 fe0d 	bl	8011e98 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 801027e:	e008      	b.n	8010292 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xbc>
 8010280:	9a06      	ldr	r2, [sp, #24]
 8010282:	eba8 0309 	sub.w	r3, r8, r9
 8010286:	429a      	cmp	r2, r3
 8010288:	d90f      	bls.n	80102aa <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xd4>
 801028a:	f04f 0b00 	mov.w	fp, #0
 801028e:	f898 f000 	pld	[r8]
 8010292:	fa1f f28b 	uxth.w	r2, fp
 8010296:	4552      	cmp	r2, sl
 8010298:	f10b 0b01 	add.w	fp, fp, #1
 801029c:	d3e2      	bcc.n	8010264 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x8e>
 801029e:	3501      	adds	r5, #1
 80102a0:	f108 0803 	add.w	r8, r8, #3
 80102a4:	4457      	add	r7, sl
 80102a6:	42b5      	cmp	r5, r6
 80102a8:	d3ea      	bcc.n	8010280 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0xaa>
 80102aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80102ac:	9a05      	ldr	r2, [sp, #20]
 80102ae:	4293      	cmp	r3, r2
 80102b0:	d116      	bne.n	80102e0 <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x10a>
 80102b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80102b4:	b009      	add	sp, #36	; 0x24
 80102b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ba:	f001 bc2b 	b.w	8011b14 <WS28xxMulti::Update()>
 80102be:	f898 3003 	ldrb.w	r3, [r8, #3]
 80102c2:	9907      	ldr	r1, [sp, #28]
 80102c4:	9302      	str	r3, [sp, #8]
 80102c6:	f898 3002 	ldrb.w	r3, [r8, #2]
 80102ca:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80102cc:	9301      	str	r3, [sp, #4]
 80102ce:	f898 3001 	ldrb.w	r3, [r8, #1]
 80102d2:	443a      	add	r2, r7
 80102d4:	9300      	str	r3, [sp, #0]
 80102d6:	f898 3000 	ldrb.w	r3, [r8]
 80102da:	f001 fe65 	bl	8011fa8 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 80102de:	e7ac      	b.n	801023a <WS28xxDmxMulti::SetData(unsigned int, unsigned char const*, unsigned int)+0x64>
 80102e0:	b009      	add	sp, #36	; 0x24
 80102e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080102e6 <WS28xxDmxMulti::FullOn()>:
 80102e6:	b510      	push	{r4, lr}
 80102e8:	4604      	mov	r4, r0
 80102ea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80102ec:	f001 fd52 	bl	8011d94 <WS28xxMulti::IsUpdating()>
 80102f0:	2800      	cmp	r0, #0
 80102f2:	d1fa      	bne.n	80102ea <WS28xxDmxMulti::FullOn()+0x4>
 80102f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80102f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102fa:	f001 bceb 	b.w	8011cd4 <WS28xxMulti::FullOn()>

080102fe <WS28xxDmxMulti::Print()>:
 80102fe:	3004      	adds	r0, #4
 8010300:	f7ff bf0c 	b.w	801011c <PixelDmxConfiguration::Print()>

08010304 <WS28xxDmxMulti::Stop(unsigned int)>:
 8010304:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010306:	fa23 f201 	lsr.w	r2, r3, r1
 801030a:	07d2      	lsls	r2, r2, #31
 801030c:	bf41      	itttt	mi
 801030e:	2201      	movmi	r2, #1
 8010310:	408a      	lslmi	r2, r1
 8010312:	4393      	bicmi	r3, r2
 8010314:	6503      	strmi	r3, [r0, #80]	; 0x50
 8010316:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010318:	b923      	cbnz	r3, 8010324 <WS28xxDmxMulti::Stop(unsigned int)+0x20>
 801031a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801031c:	b110      	cbz	r0, 8010324 <WS28xxDmxMulti::Stop(unsigned int)+0x20>
 801031e:	6803      	ldr	r3, [r0, #0]
 8010320:	68db      	ldr	r3, [r3, #12]
 8010322:	4718      	bx	r3
 8010324:	4770      	bx	lr
	...

08010328 <WS28xxDmxMulti::WS28xxDmxMulti(PixelDmxConfiguration&)>:
 8010328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801032a:	4604      	mov	r4, r0
 801032c:	460d      	mov	r5, r1
 801032e:	4b14      	ldr	r3, [pc, #80]	; (8010380 <WS28xxDmxMulti::WS28xxDmxMulti(PixelDmxConfiguration&)+0x58>)
 8010330:	4606      	mov	r6, r0
 8010332:	f844 3b04 	str.w	r3, [r4], #4
 8010336:	460f      	mov	r7, r1
 8010338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801033a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801033c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801033e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010340:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010344:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010348:	2300      	movs	r3, #0
 801034a:	f106 0244 	add.w	r2, r6, #68	; 0x44
 801034e:	2108      	movs	r1, #8
 8010350:	e9c6 3312 	strd	r3, r3, [r6, #72]	; 0x48
 8010354:	6533      	str	r3, [r6, #80]	; 0x50
 8010356:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
 801035a:	1d30      	adds	r0, r6, #4
 801035c:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8010360:	f7ff fe9c 	bl	801009c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&)>
 8010364:	2020      	movs	r0, #32
 8010366:	f006 f973 	bl	8016650 <operator new(unsigned int)>
 801036a:	4604      	mov	r4, r0
 801036c:	4639      	mov	r1, r7
 801036e:	f001 fb7f 	bl	8011a70 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)>
 8010372:	4620      	mov	r0, r4
 8010374:	64b4      	str	r4, [r6, #72]	; 0x48
 8010376:	f001 fc49 	bl	8011c0c <WS28xxMulti::Blackout()>
 801037a:	4630      	mov	r0, r6
 801037c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801037e:	bf00      	nop
 8010380:	0801a8c8 	stmdaeq	r1, {r3, r6, r7, fp, sp, pc}

08010384 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 8010384:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010386:	88c6      	ldrh	r6, [r0, #6]
 8010388:	8885      	ldrh	r5, [r0, #4]
 801038a:	42ae      	cmp	r6, r5
 801038c:	d216      	bcs.n	80103bc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 801038e:	4604      	mov	r4, r0
 8010390:	6800      	ldr	r0, [r0, #0]
 8010392:	1bad      	subs	r5, r5, r6
 8010394:	4430      	add	r0, r6
 8010396:	7a26      	ldrb	r6, [r4, #8]
 8010398:	b923      	cbnz	r3, 80103a4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 801039a:	b926      	cbnz	r6, 80103a6 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 801039c:	9200      	str	r2, [sp, #0]
 801039e:	460b      	mov	r3, r1
 80103a0:	4a09      	ldr	r2, [pc, #36]	; (80103c8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 80103a2:	e003      	b.n	80103ac <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 80103a4:	b166      	cbz	r6, 80103c0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 80103a6:	460b      	mov	r3, r1
 80103a8:	9200      	str	r2, [sp, #0]
 80103aa:	4a08      	ldr	r2, [pc, #32]	; (80103cc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 80103ac:	4629      	mov	r1, r5
 80103ae:	f7f9 fa2f 	bl	8009810 <snprintf>
 80103b2:	4285      	cmp	r5, r0
 80103b4:	bfa2      	ittt	ge
 80103b6:	88e3      	ldrhge	r3, [r4, #6]
 80103b8:	181b      	addge	r3, r3, r0
 80103ba:	80e3      	strhge	r3, [r4, #6]
 80103bc:	b002      	add	sp, #8
 80103be:	bd70      	pop	{r4, r5, r6, pc}
 80103c0:	9200      	str	r2, [sp, #0]
 80103c2:	460b      	mov	r3, r1
 80103c4:	4a02      	ldr	r2, [pc, #8]	; (80103d0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 80103c6:	e7f1      	b.n	80103ac <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 80103c8:	08019181 	stmdaeq	r1, {r0, r7, r8, ip, pc}
 80103cc:	08019178 	stmdaeq	r1, {r3, r4, r5, r6, r8, ip, pc}
 80103d0:	08019182 	stmdaeq	r1, {r1, r7, r8, ip, pc}

080103d4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 80103d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103d6:	88c6      	ldrh	r6, [r0, #6]
 80103d8:	8885      	ldrh	r5, [r0, #4]
 80103da:	42ae      	cmp	r6, r5
 80103dc:	d216      	bcs.n	801040c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 80103de:	4604      	mov	r4, r0
 80103e0:	6800      	ldr	r0, [r0, #0]
 80103e2:	1bad      	subs	r5, r5, r6
 80103e4:	4430      	add	r0, r6
 80103e6:	7a26      	ldrb	r6, [r4, #8]
 80103e8:	b923      	cbnz	r3, 80103f4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 80103ea:	b926      	cbnz	r6, 80103f6 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 80103ec:	9200      	str	r2, [sp, #0]
 80103ee:	460b      	mov	r3, r1
 80103f0:	4a09      	ldr	r2, [pc, #36]	; (8010418 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 80103f2:	e003      	b.n	80103fc <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 80103f4:	b166      	cbz	r6, 8010410 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 80103f6:	460b      	mov	r3, r1
 80103f8:	9200      	str	r2, [sp, #0]
 80103fa:	4a08      	ldr	r2, [pc, #32]	; (801041c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 80103fc:	4629      	mov	r1, r5
 80103fe:	f7f9 fa07 	bl	8009810 <snprintf>
 8010402:	4285      	cmp	r5, r0
 8010404:	bfa2      	ittt	ge
 8010406:	88e3      	ldrhge	r3, [r4, #6]
 8010408:	181b      	addge	r3, r3, r0
 801040a:	80e3      	strhge	r3, [r4, #6]
 801040c:	b002      	add	sp, #8
 801040e:	bd70      	pop	{r4, r5, r6, pc}
 8010410:	9200      	str	r2, [sp, #0]
 8010412:	460b      	mov	r3, r1
 8010414:	4a02      	ldr	r2, [pc, #8]	; (8010420 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 8010416:	e7f1      	b.n	80103fc <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 8010418:	08019181 	stmdaeq	r1, {r0, r7, r8, ip, pc}
 801041c:	08019178 	stmdaeq	r1, {r3, r4, r5, r6, r8, ip, pc}
 8010420:	08019182 	stmdaeq	r1, {r1, r7, r8, ip, pc}

08010424 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 8010424:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010426:	88c6      	ldrh	r6, [r0, #6]
 8010428:	8885      	ldrh	r5, [r0, #4]
 801042a:	42ae      	cmp	r6, r5
 801042c:	d216      	bcs.n	801045c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 801042e:	4604      	mov	r4, r0
 8010430:	6800      	ldr	r0, [r0, #0]
 8010432:	1bad      	subs	r5, r5, r6
 8010434:	4430      	add	r0, r6
 8010436:	7a26      	ldrb	r6, [r4, #8]
 8010438:	b923      	cbnz	r3, 8010444 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 801043a:	b926      	cbnz	r6, 8010446 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 801043c:	9200      	str	r2, [sp, #0]
 801043e:	460b      	mov	r3, r1
 8010440:	4a09      	ldr	r2, [pc, #36]	; (8010468 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 8010442:	e003      	b.n	801044c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 8010444:	b166      	cbz	r6, 8010460 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 8010446:	460b      	mov	r3, r1
 8010448:	9200      	str	r2, [sp, #0]
 801044a:	4a08      	ldr	r2, [pc, #32]	; (801046c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 801044c:	4629      	mov	r1, r5
 801044e:	f7f9 f9df 	bl	8009810 <snprintf>
 8010452:	4285      	cmp	r5, r0
 8010454:	bfa2      	ittt	ge
 8010456:	88e3      	ldrhge	r3, [r4, #6]
 8010458:	181b      	addge	r3, r3, r0
 801045a:	80e3      	strhge	r3, [r4, #6]
 801045c:	b002      	add	sp, #8
 801045e:	bd70      	pop	{r4, r5, r6, pc}
 8010460:	9200      	str	r2, [sp, #0]
 8010462:	460b      	mov	r3, r1
 8010464:	4a02      	ldr	r2, [pc, #8]	; (8010470 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 8010466:	e7f1      	b.n	801044c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 8010468:	08019194 	stmdaeq	r1, {r2, r4, r7, r8, ip, pc}
 801046c:	08019189 	stmdaeq	r1, {r0, r3, r7, r8, ip, pc}
 8010470:	08019195 	stmdaeq	r1, {r0, r2, r4, r7, r8, ip, pc}

08010474 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>:
 8010474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010478:	4699      	mov	r9, r3
 801047a:	8885      	ldrh	r5, [r0, #4]
 801047c:	88c3      	ldrh	r3, [r0, #6]
 801047e:	4604      	mov	r4, r0
 8010480:	42ab      	cmp	r3, r5
 8010482:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8010486:	d227      	bcs.n	80104d8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x64>
 8010488:	6826      	ldr	r6, [r4, #0]
 801048a:	4610      	mov	r0, r2
 801048c:	460f      	mov	r7, r1
 801048e:	f894 a008 	ldrb.w	sl, [r4, #8]
 8010492:	441e      	add	r6, r3
 8010494:	1aed      	subs	r5, r5, r3
 8010496:	f7f7 fec9 	bl	800822c <__aeabi_f2d>
 801049a:	f1b9 0f00 	cmp.w	r9, #0
 801049e:	d109      	bne.n	80104b4 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x40>
 80104a0:	f1ba 0f00 	cmp.w	sl, #0
 80104a4:	d109      	bne.n	80104ba <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x46>
 80104a6:	463b      	mov	r3, r7
 80104a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104ac:	4a0f      	ldr	r2, [pc, #60]	; (80104ec <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x78>)
 80104ae:	f8cd 8000 	str.w	r8, [sp]
 80104b2:	e008      	b.n	80104c6 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 80104b4:	f1ba 0f00 	cmp.w	sl, #0
 80104b8:	d011      	beq.n	80104de <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x6a>
 80104ba:	463b      	mov	r3, r7
 80104bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104c0:	4a0b      	ldr	r2, [pc, #44]	; (80104f0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x7c>)
 80104c2:	f8cd 8000 	str.w	r8, [sp]
 80104c6:	4629      	mov	r1, r5
 80104c8:	4630      	mov	r0, r6
 80104ca:	f7f9 f9a1 	bl	8009810 <snprintf>
 80104ce:	4285      	cmp	r5, r0
 80104d0:	bfa2      	ittt	ge
 80104d2:	88e3      	ldrhge	r3, [r4, #6]
 80104d4:	181b      	addge	r3, r3, r0
 80104d6:	80e3      	strhge	r3, [r4, #6]
 80104d8:	b004      	add	sp, #16
 80104da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104de:	463b      	mov	r3, r7
 80104e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104e4:	4a03      	ldr	r2, [pc, #12]	; (80104f4 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x80>)
 80104e6:	f8cd 8000 	str.w	r8, [sp]
 80104ea:	e7ec      	b.n	80104c6 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 80104ec:	0801a903 	stmdaeq	r1, {r0, r1, r8, fp, sp, pc}
 80104f0:	0801a8f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, fp, sp, pc}
 80104f4:	0801a904 	stmdaeq	r1, {r2, r8, fp, sp, pc}

080104f8 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)>:
 80104f8:	6001      	str	r1, [r0, #0]
 80104fa:	2100      	movs	r1, #0
 80104fc:	f04f 6c10 	mov.w	ip, #150994944	; 0x9000000
 8010500:	4a0a      	ldr	r2, [pc, #40]	; (801052c <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x34>)
 8010502:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8010506:	4a0a      	ldr	r2, [pc, #40]	; (8010530 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x38>)
 8010508:	490a      	ldr	r1, [pc, #40]	; (8010534 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x3c>)
 801050a:	e9c0 c203 	strd	ip, r2, [r0, #12]
 801050e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010512:	e9c0 1205 	strd	r1, r2, [r0, #20]
 8010516:	4a08      	ldr	r2, [pc, #32]	; (8010538 <PixelDmxParams::PixelDmxParams(PixelDmxParamsStore*)+0x40>)
 8010518:	61c2      	str	r2, [r0, #28]
 801051a:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
 801051e:	6202      	str	r2, [r0, #32]
 8010520:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
 8010524:	6242      	str	r2, [r0, #36]	; 0x24
 8010526:	221d      	movs	r2, #29
 8010528:	8502      	strh	r2, [r0, #40]	; 0x28
 801052a:	4770      	bx	lr
 801052c:	0100aa03 	tsteq	r0, r3, lsl #20
 8010530:	01ff003d 	mvnseq	r0, sp, lsr r0
 8010534:	06000100 	streq	r0, [r0], -r0, lsl #2
 8010538:	00090005 	andeq	r0, r9, r5

0801053c <PixelDmxParams::Load()>:
 801053c:	b508      	push	{r3, lr}
 801053e:	2300      	movs	r3, #0
 8010540:	4601      	mov	r1, r0
 8010542:	6043      	str	r3, [r0, #4]
 8010544:	6800      	ldr	r0, [r0, #0]
 8010546:	b120      	cbz	r0, 8010552 <PixelDmxParams::Load()+0x16>
 8010548:	6803      	ldr	r3, [r0, #0]
 801054a:	3104      	adds	r1, #4
 801054c:	68db      	ldr	r3, [r3, #12]
 801054e:	4798      	blx	r3
 8010550:	2001      	movs	r0, #1
 8010552:	bd08      	pop	{r3, pc}

08010554 <PixelDmxParams::Load(char const*, unsigned int)>:
 8010554:	6803      	ldr	r3, [r0, #0]
 8010556:	b1d3      	cbz	r3, 801058e <PixelDmxParams::Load(char const*, unsigned int)+0x3a>
 8010558:	2300      	movs	r3, #0
 801055a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801055c:	460d      	mov	r5, r1
 801055e:	4616      	mov	r6, r2
 8010560:	4604      	mov	r4, r0
 8010562:	6043      	str	r3, [r0, #4]
 8010564:	4602      	mov	r2, r0
 8010566:	490a      	ldr	r1, [pc, #40]	; (8010590 <PixelDmxParams::Load(char const*, unsigned int)+0x3c>)
 8010568:	4668      	mov	r0, sp
 801056a:	f005 fac1 	bl	8015af0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 801056e:	4632      	mov	r2, r6
 8010570:	4629      	mov	r1, r5
 8010572:	4668      	mov	r0, sp
 8010574:	f005 fac0 	bl	8015af8 <ReadConfigFile::Read(char const*, unsigned int)>
 8010578:	4621      	mov	r1, r4
 801057a:	f851 0b04 	ldr.w	r0, [r1], #4
 801057e:	6803      	ldr	r3, [r0, #0]
 8010580:	689b      	ldr	r3, [r3, #8]
 8010582:	4798      	blx	r3
 8010584:	4668      	mov	r0, sp
 8010586:	f005 fab6 	bl	8015af6 <ReadConfigFile::~ReadConfigFile()>
 801058a:	b002      	add	sp, #8
 801058c:	bd70      	pop	{r4, r5, r6, pc}
 801058e:	4770      	bx	lr
 8010590:	0801084d 	stmdaeq	r1, {r0, r2, r3, r6, fp}

08010594 <PixelDmxParams::callbackFunction(char const*)>:
 8010594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010598:	2308      	movs	r3, #8
 801059a:	460d      	mov	r5, r1
 801059c:	b088      	sub	sp, #32
 801059e:	4604      	mov	r4, r0
 80105a0:	9302      	str	r3, [sp, #8]
 80105a2:	4628      	mov	r0, r5
 80105a4:	499a      	ldr	r1, [pc, #616]	; (8010810 <PixelDmxParams::callbackFunction(char const*)+0x27c>)
 80105a6:	446b      	add	r3, sp
 80105a8:	aa04      	add	r2, sp, #16
 80105aa:	f005 fad9 	bl	8015b60 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 80105ae:	b9a0      	cbnz	r0, 80105da <PixelDmxParams::callbackFunction(char const*)+0x46>
 80105b0:	9b02      	ldr	r3, [sp, #8]
 80105b2:	3320      	adds	r3, #32
 80105b4:	446b      	add	r3, sp
 80105b6:	f803 0c10 	strb.w	r0, [r3, #-16]
 80105ba:	a804      	add	r0, sp, #16
 80105bc:	f000 fc26 	bl	8010e0c <PixelType::GetType(char const*)>
 80105c0:	280e      	cmp	r0, #14
 80105c2:	bf08      	it	eq
 80105c4:	2203      	moveq	r2, #3
 80105c6:	6863      	ldr	r3, [r4, #4]
 80105c8:	bf19      	ittee	ne
 80105ca:	7220      	strbne	r0, [r4, #8]
 80105cc:	f043 0301 	orrne.w	r3, r3, #1
 80105d0:	7222      	strbeq	r2, [r4, #8]
 80105d2:	f023 0301 	biceq.w	r3, r3, #1
 80105d6:	6063      	str	r3, [r4, #4]
 80105d8:	e033      	b.n	8010642 <PixelDmxParams::callbackFunction(char const*)+0xae>
 80105da:	4628      	mov	r0, r5
 80105dc:	498d      	ldr	r1, [pc, #564]	; (8010814 <PixelDmxParams::callbackFunction(char const*)+0x280>)
 80105de:	f10d 0202 	add.w	r2, sp, #2
 80105e2:	f005 fb7a 	bl	8015cda <Sscan::Uint16(char const*, char const*, unsigned short&)>
 80105e6:	b990      	cbnz	r0, 801060e <PixelDmxParams::callbackFunction(char const*)+0x7a>
 80105e8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80105ec:	6863      	ldr	r3, [r4, #4]
 80105ee:	1e51      	subs	r1, r2, #1
 80105f0:	f5b1 7f2a 	cmp.w	r1, #680	; 0x2a8
 80105f4:	bf2d      	iteet	cs
 80105f6:	f06f 0255 	mvncs.w	r2, #85	; 0x55
 80105fa:	f8a4 2009 	strhcc.w	r2, [r4, #9]
 80105fe:	f043 0302 	orrcc.w	r3, r3, #2
 8010602:	7262      	strbcs	r2, [r4, #9]
 8010604:	bf24      	itt	cs
 8010606:	72a0      	strbcs	r0, [r4, #10]
 8010608:	f023 0302 	biccs.w	r3, r3, #2
 801060c:	e7e3      	b.n	80105d6 <PixelDmxParams::callbackFunction(char const*)+0x42>
 801060e:	2303      	movs	r3, #3
 8010610:	4628      	mov	r0, r5
 8010612:	9302      	str	r3, [sp, #8]
 8010614:	4980      	ldr	r1, [pc, #512]	; (8010818 <PixelDmxParams::callbackFunction(char const*)+0x284>)
 8010616:	ab02      	add	r3, sp, #8
 8010618:	aa04      	add	r2, sp, #16
 801061a:	f005 faa1 	bl	8015b60 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 801061e:	b998      	cbnz	r0, 8010648 <PixelDmxParams::callbackFunction(char const*)+0xb4>
 8010620:	9b02      	ldr	r3, [sp, #8]
 8010622:	3320      	adds	r3, #32
 8010624:	446b      	add	r3, sp
 8010626:	f803 0c10 	strb.w	r0, [r3, #-16]
 801062a:	a804      	add	r0, sp, #16
 801062c:	f000 fc12 	bl	8010e54 <PixelType::GetMap(char const*)>
 8010630:	6863      	ldr	r3, [r4, #4]
 8010632:	2806      	cmp	r0, #6
 8010634:	bf14      	ite	ne
 8010636:	f443 7300 	orrne.w	r3, r3, #512	; 0x200
 801063a:	f423 7300 	biceq.w	r3, r3, #512	; 0x200
 801063e:	6063      	str	r3, [r4, #4]
 8010640:	75e0      	strb	r0, [r4, #23]
 8010642:	b008      	add	sp, #32
 8010644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010648:	4628      	mov	r0, r5
 801064a:	4974      	ldr	r1, [pc, #464]	; (801081c <PixelDmxParams::callbackFunction(char const*)+0x288>)
 801064c:	aa01      	add	r2, sp, #4
 801064e:	f005 faa0 	bl	8015b92 <Sscan::Float(char const*, char const*, float&)>
 8010652:	b960      	cbnz	r0, 801066e <PixelDmxParams::callbackFunction(char const*)+0xda>
 8010654:	9801      	ldr	r0, [sp, #4]
 8010656:	f000 fc69 	bl	8010f2c <PixelType::ConvertTxH(float)>
 801065a:	6863      	ldr	r3, [r4, #4]
 801065c:	b120      	cbz	r0, 8010668 <PixelDmxParams::callbackFunction(char const*)+0xd4>
 801065e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010662:	6063      	str	r3, [r4, #4]
 8010664:	7620      	strb	r0, [r4, #24]
 8010666:	e7ec      	b.n	8010642 <PixelDmxParams::callbackFunction(char const*)+0xae>
 8010668:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801066c:	e7f9      	b.n	8010662 <PixelDmxParams::callbackFunction(char const*)+0xce>
 801066e:	4628      	mov	r0, r5
 8010670:	496b      	ldr	r1, [pc, #428]	; (8010820 <PixelDmxParams::callbackFunction(char const*)+0x28c>)
 8010672:	aa01      	add	r2, sp, #4
 8010674:	f005 fa8d 	bl	8015b92 <Sscan::Float(char const*, char const*, float&)>
 8010678:	b960      	cbnz	r0, 8010694 <PixelDmxParams::callbackFunction(char const*)+0x100>
 801067a:	9801      	ldr	r0, [sp, #4]
 801067c:	f000 fc56 	bl	8010f2c <PixelType::ConvertTxH(float)>
 8010680:	6863      	ldr	r3, [r4, #4]
 8010682:	b120      	cbz	r0, 801068e <PixelDmxParams::callbackFunction(char const*)+0xfa>
 8010684:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010688:	6063      	str	r3, [r4, #4]
 801068a:	7660      	strb	r0, [r4, #25]
 801068c:	e7d9      	b.n	8010642 <PixelDmxParams::callbackFunction(char const*)+0xae>
 801068e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010692:	e7f9      	b.n	8010688 <PixelDmxParams::callbackFunction(char const*)+0xf4>
 8010694:	4628      	mov	r0, r5
 8010696:	4963      	ldr	r1, [pc, #396]	; (8010824 <PixelDmxParams::callbackFunction(char const*)+0x290>)
 8010698:	f10d 0202 	add.w	r2, sp, #2
 801069c:	f005 fb1d 	bl	8015cda <Sscan::Uint16(char const*, char const*, unsigned short&)>
 80106a0:	b998      	cbnz	r0, 80106ca <PixelDmxParams::callbackFunction(char const*)+0x136>
 80106a2:	f240 25a6 	movw	r5, #678	; 0x2a6
 80106a6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80106aa:	6863      	ldr	r3, [r4, #4]
 80106ac:	1e8a      	subs	r2, r1, #2
 80106ae:	b292      	uxth	r2, r2
 80106b0:	42aa      	cmp	r2, r5
 80106b2:	bf81      	itttt	hi
 80106b4:	2201      	movhi	r2, #1
 80106b6:	75a0      	strbhi	r0, [r4, #22]
 80106b8:	7562      	strbhi	r2, [r4, #21]
 80106ba:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 80106be:	bf9c      	itt	ls
 80106c0:	f8a4 1015 	strhls.w	r1, [r4, #21]
 80106c4:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 80106c8:	e785      	b.n	80105d6 <PixelDmxParams::callbackFunction(char const*)+0x42>
 80106ca:	4628      	mov	r0, r5
 80106cc:	4956      	ldr	r1, [pc, #344]	; (8010828 <PixelDmxParams::callbackFunction(char const*)+0x294>)
 80106ce:	aa03      	add	r2, sp, #12
 80106d0:	f005 fb21 	bl	8015d16 <Sscan::Uint32(char const*, char const*, unsigned int&)>
 80106d4:	b960      	cbnz	r0, 80106f0 <PixelDmxParams::callbackFunction(char const*)+0x15c>
 80106d6:	9a03      	ldr	r2, [sp, #12]
 80106d8:	4954      	ldr	r1, [pc, #336]	; (801082c <PixelDmxParams::callbackFunction(char const*)+0x298>)
 80106da:	6863      	ldr	r3, [r4, #4]
 80106dc:	428a      	cmp	r2, r1
 80106de:	bf14      	ite	ne
 80106e0:	f043 0310 	orrne.w	r3, r3, #16
 80106e4:	f023 0310 	biceq.w	r3, r3, #16
 80106e8:	6063      	str	r3, [r4, #4]
 80106ea:	f8c4 200e 	str.w	r2, [r4, #14]
 80106ee:	e7a8      	b.n	8010642 <PixelDmxParams::callbackFunction(char const*)+0xae>
 80106f0:	4628      	mov	r0, r5
 80106f2:	494f      	ldr	r1, [pc, #316]	; (8010830 <PixelDmxParams::callbackFunction(char const*)+0x29c>)
 80106f4:	f10d 0201 	add.w	r2, sp, #1
 80106f8:	f005 fb36 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80106fc:	b988      	cbnz	r0, 8010722 <PixelDmxParams::callbackFunction(char const*)+0x18e>
 80106fe:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8010702:	6863      	ldr	r3, [r4, #4]
 8010704:	1e4a      	subs	r2, r1, #1
 8010706:	b2d2      	uxtb	r2, r2
 8010708:	2afd      	cmp	r2, #253	; 0xfd
 801070a:	bf83      	ittte	hi
 801070c:	f023 0320 	bichi.w	r3, r3, #32
 8010710:	6063      	strhi	r3, [r4, #4]
 8010712:	23ff      	movhi	r3, #255	; 0xff
 8010714:	f043 0320 	orrls.w	r3, r3, #32
 8010718:	bf9a      	itte	ls
 801071a:	6063      	strls	r3, [r4, #4]
 801071c:	74a1      	strbls	r1, [r4, #18]
 801071e:	74a3      	strbhi	r3, [r4, #18]
 8010720:	e78f      	b.n	8010642 <PixelDmxParams::callbackFunction(char const*)+0xae>
 8010722:	2600      	movs	r6, #0
 8010724:	f04f 0814 	mov.w	r8, #20
 8010728:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
 801072c:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8010834 <PixelDmxParams::callbackFunction(char const*)+0x2a0>
 8010730:	f104 071a 	add.w	r7, r4, #26
 8010734:	4628      	mov	r0, r5
 8010736:	fb08 9106 	mla	r1, r8, r6, r9
 801073a:	f10d 0202 	add.w	r2, sp, #2
 801073e:	f005 facc 	bl	8015cda <Sscan::Uint16(char const*, char const*, unsigned short&)>
 8010742:	b940      	cbnz	r0, 8010756 <PixelDmxParams::callbackFunction(char const*)+0x1c2>
 8010744:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010748:	6863      	ldr	r3, [r4, #4]
 801074a:	fa0a f106 	lsl.w	r1, sl, r6
 801074e:	b1ea      	cbz	r2, 801078c <PixelDmxParams::callbackFunction(char const*)+0x1f8>
 8010750:	803a      	strh	r2, [r7, #0]
 8010752:	430b      	orrs	r3, r1
 8010754:	6063      	str	r3, [r4, #4]
 8010756:	3601      	adds	r6, #1
 8010758:	2e08      	cmp	r6, #8
 801075a:	f107 0702 	add.w	r7, r7, #2
 801075e:	d1e9      	bne.n	8010734 <PixelDmxParams::callbackFunction(char const*)+0x1a0>
 8010760:	4628      	mov	r0, r5
 8010762:	4935      	ldr	r1, [pc, #212]	; (8010838 <PixelDmxParams::callbackFunction(char const*)+0x2a4>)
 8010764:	f10d 0201 	add.w	r2, sp, #1
 8010768:	f005 fafe 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801076c:	b9a0      	cbnz	r0, 8010798 <PixelDmxParams::callbackFunction(char const*)+0x204>
 801076e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010772:	6863      	ldr	r3, [r4, #4]
 8010774:	1e91      	subs	r1, r2, #2
 8010776:	2906      	cmp	r1, #6
 8010778:	bf8d      	iteet	hi
 801077a:	2201      	movhi	r2, #1
 801077c:	74e2      	strbls	r2, [r4, #19]
 801077e:	f043 0340 	orrls.w	r3, r3, #64	; 0x40
 8010782:	74e2      	strbhi	r2, [r4, #19]
 8010784:	bf88      	it	hi
 8010786:	f023 0340 	bichi.w	r3, r3, #64	; 0x40
 801078a:	e724      	b.n	80105d6 <PixelDmxParams::callbackFunction(char const*)+0x42>
 801078c:	00b2      	lsls	r2, r6, #2
 801078e:	3201      	adds	r2, #1
 8010790:	803a      	strh	r2, [r7, #0]
 8010792:	ea23 0301 	bic.w	r3, r3, r1
 8010796:	e7dd      	b.n	8010754 <PixelDmxParams::callbackFunction(char const*)+0x1c0>
 8010798:	4628      	mov	r0, r5
 801079a:	4928      	ldr	r1, [pc, #160]	; (801083c <PixelDmxParams::callbackFunction(char const*)+0x2a8>)
 801079c:	f10d 0201 	add.w	r2, sp, #1
 80107a0:	f005 fae2 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80107a4:	b960      	cbnz	r0, 80107c0 <PixelDmxParams::callbackFunction(char const*)+0x22c>
 80107a6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80107aa:	6863      	ldr	r3, [r4, #4]
 80107ac:	1e51      	subs	r1, r2, #1
 80107ae:	2904      	cmp	r1, #4
 80107b0:	bf99      	ittee	ls
 80107b2:	7522      	strbls	r2, [r4, #20]
 80107b4:	f043 0308 	orrls.w	r3, r3, #8
 80107b8:	7520      	strbhi	r0, [r4, #20]
 80107ba:	f023 0308 	bichi.w	r3, r3, #8
 80107be:	e70a      	b.n	80105d6 <PixelDmxParams::callbackFunction(char const*)+0x42>
 80107c0:	4628      	mov	r0, r5
 80107c2:	491f      	ldr	r1, [pc, #124]	; (8010840 <PixelDmxParams::callbackFunction(char const*)+0x2ac>)
 80107c4:	f10d 0201 	add.w	r2, sp, #1
 80107c8:	f005 face 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80107cc:	b948      	cbnz	r0, 80107e2 <PixelDmxParams::callbackFunction(char const*)+0x24e>
 80107ce:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80107d2:	6863      	ldr	r3, [r4, #4]
 80107d4:	b112      	cbz	r2, 80107dc <PixelDmxParams::callbackFunction(char const*)+0x248>
 80107d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107da:	e6fc      	b.n	80105d6 <PixelDmxParams::callbackFunction(char const*)+0x42>
 80107dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80107e0:	e6f9      	b.n	80105d6 <PixelDmxParams::callbackFunction(char const*)+0x42>
 80107e2:	4628      	mov	r0, r5
 80107e4:	4917      	ldr	r1, [pc, #92]	; (8010844 <PixelDmxParams::callbackFunction(char const*)+0x2b0>)
 80107e6:	aa01      	add	r2, sp, #4
 80107e8:	f005 f9d3 	bl	8015b92 <Sscan::Float(char const*, char const*, float&)>
 80107ec:	4605      	mov	r5, r0
 80107ee:	2800      	cmp	r0, #0
 80107f0:	f47f af27 	bne.w	8010642 <PixelDmxParams::callbackFunction(char const*)+0xae>
 80107f4:	4914      	ldr	r1, [pc, #80]	; (8010848 <PixelDmxParams::callbackFunction(char const*)+0x2b4>)
 80107f6:	9801      	ldr	r0, [sp, #4]
 80107f8:	f7f7 fd70 	bl	80082dc <__aeabi_fmul>
 80107fc:	f7f7 febe 	bl	800857c <__aeabi_f2uiz>
 8010800:	b2c3      	uxtb	r3, r0
 8010802:	f1a3 0214 	sub.w	r2, r3, #20
 8010806:	2a05      	cmp	r2, #5
 8010808:	bf8c      	ite	hi
 801080a:	7365      	strbhi	r5, [r4, #13]
 801080c:	7363      	strbls	r3, [r4, #13]
 801080e:	e718      	b.n	8010642 <PixelDmxParams::callbackFunction(char const*)+0xae>
 8010810:	0801b98d 	stmdaeq	r1, {r0, r2, r3, r7, r8, fp, ip, sp, pc}
 8010814:	0801b996 	stmdaeq	r1, {r1, r2, r4, r7, r8, fp, ip, sp, pc}
 8010818:	0801b97d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, fp, ip, sp, pc}
 801081c:	0801b9a0 	stmdaeq	r1, {r5, r7, r8, fp, ip, sp, pc}
 8010820:	0801b9a8 	stmdaeq	r1, {r3, r5, r7, r8, fp, ip, sp, pc}
 8010824:	0801b94a 	stmdaeq	r1, {r1, r3, r6, r8, fp, ip, sp, pc}
 8010828:	0801b92e 	stmdaeq	r1, {r1, r2, r3, r5, r8, fp, ip, sp, pc}
 801082c:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8010830:	0801b96b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r8, fp, ip, sp, pc}
 8010834:	0801ba29 	stmdaeq	r1, {r0, r3, r5, r9, fp, ip, sp, pc}
 8010838:	0801b917 	stmdaeq	r1, {r0, r1, r2, r4, r8, fp, ip, sp, pc}
 801083c:	0801b93d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r8, fp, ip, sp, pc}
 8010840:	0801b95a 	stmdaeq	r1, {r1, r3, r4, r6, r8, fp, ip, sp, pc}
 8010844:	0801b922 	stmdaeq	r1, {r1, r5, r8, fp, ip, sp, pc}
 8010848:	41200000 			; <UNDEFINED> instruction: 0x41200000

0801084c <PixelDmxParams::staticCallbackFunction(void*, char const*)>:
 801084c:	f7ff bea2 	b.w	8010594 <PixelDmxParams::callbackFunction(char const*)>

08010850 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)>:
 8010850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010854:	4604      	mov	r4, r0
 8010856:	4615      	mov	r5, r2
 8010858:	461e      	mov	r6, r3
 801085a:	b086      	sub	sp, #24
 801085c:	3004      	adds	r0, #4
 801085e:	b389      	cbz	r1, 80108c4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x74>
 8010860:	2226      	movs	r2, #38	; 0x26
 8010862:	f005 ffb4 	bl	80167ce <memmove>
 8010866:	462a      	mov	r2, r5
 8010868:	4633      	mov	r3, r6
 801086a:	499c      	ldr	r1, [pc, #624]	; (8010adc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 801086c:	a803      	add	r0, sp, #12
 801086e:	f005 f89f 	bl	80159b0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8010872:	7a20      	ldrb	r0, [r4, #8]
 8010874:	f000 fabe 	bl	8010df4 <PixelType::GetType(pixel::Type)>
 8010878:	6863      	ldr	r3, [r4, #4]
 801087a:	4602      	mov	r2, r0
 801087c:	4998      	ldr	r1, [pc, #608]	; (8010ae0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 801087e:	f003 0301 	and.w	r3, r3, #1
 8010882:	a803      	add	r0, sp, #12
 8010884:	f7ff fdce 	bl	8010424 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 8010888:	6863      	ldr	r3, [r4, #4]
 801088a:	f8b4 2009 	ldrh.w	r2, [r4, #9]
 801088e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8010892:	4994      	ldr	r1, [pc, #592]	; (8010ae4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 8010894:	a803      	add	r0, sp, #12
 8010896:	f7ff fd9d 	bl	80103d4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 801089a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801089e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80108a2:	6863      	ldr	r3, [r4, #4]
 80108a4:	42aa      	cmp	r2, r5
 80108a6:	d227      	bcs.n	80108f8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0xa8>
 80108a8:	9803      	ldr	r0, [sp, #12]
 80108aa:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 80108ae:	4410      	add	r0, r2
 80108b0:	eba5 0502 	sub.w	r5, r5, r2
 80108b4:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80108b8:	d10b      	bne.n	80108d2 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 80108ba:	b96a      	cbnz	r2, 80108d8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x88>
 80108bc:	9200      	str	r2, [sp, #0]
 80108be:	4b8a      	ldr	r3, [pc, #552]	; (8010ae8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 80108c0:	4a8a      	ldr	r2, [pc, #552]	; (8010aec <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 80108c2:	e00f      	b.n	80108e4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x94>
 80108c4:	6823      	ldr	r3, [r4, #0]
 80108c6:	4601      	mov	r1, r0
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	4618      	mov	r0, r3
 80108cc:	68d2      	ldr	r2, [r2, #12]
 80108ce:	4790      	blx	r2
 80108d0:	e7c9      	b.n	8010866 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 80108d2:	2a00      	cmp	r2, #0
 80108d4:	f000 808a 	beq.w	80109ec <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x19c>
 80108d8:	3b00      	subs	r3, #0
 80108da:	bf18      	it	ne
 80108dc:	2301      	movne	r3, #1
 80108de:	4a84      	ldr	r2, [pc, #528]	; (8010af0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 80108e0:	9300      	str	r3, [sp, #0]
 80108e2:	4b81      	ldr	r3, [pc, #516]	; (8010ae8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 80108e4:	4629      	mov	r1, r5
 80108e6:	f7f8 ff93 	bl	8009810 <snprintf>
 80108ea:	4285      	cmp	r5, r0
 80108ec:	bfa2      	ittt	ge
 80108ee:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80108f2:	18c0      	addge	r0, r0, r3
 80108f4:	f8ad 0012 	strhge.w	r0, [sp, #18]
 80108f8:	7b63      	ldrb	r3, [r4, #13]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d17b      	bne.n	80109f6 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1a6>
 80108fe:	4a7d      	ldr	r2, [pc, #500]	; (8010af4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 8010900:	497d      	ldr	r1, [pc, #500]	; (8010af8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a8>)
 8010902:	a803      	add	r0, sp, #12
 8010904:	f7ff fd8e 	bl	8010424 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 8010908:	497c      	ldr	r1, [pc, #496]	; (8010afc <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2ac>)
 801090a:	a803      	add	r0, sp, #12
 801090c:	f005 f8d6 	bl	8015abc <PropertiesBuilder::AddComment(char const*)>
 8010910:	6863      	ldr	r3, [r4, #4]
 8010912:	059e      	lsls	r6, r3, #22
 8010914:	d403      	bmi.n	801091e <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0xce>
 8010916:	7a20      	ldrb	r0, [r4, #8]
 8010918:	f000 fad0 	bl	8010ebc <PixelType::GetMap(pixel::Type)>
 801091c:	75e0      	strb	r0, [r4, #23]
 801091e:	7de0      	ldrb	r0, [r4, #23]
 8010920:	f000 fac0 	bl	8010ea4 <PixelType::GetMap(pixel::Map)>
 8010924:	6863      	ldr	r3, [r4, #4]
 8010926:	4602      	mov	r2, r0
 8010928:	f3c3 2340 	ubfx	r3, r3, #9, #1
 801092c:	4974      	ldr	r1, [pc, #464]	; (8010b00 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b0>)
 801092e:	a803      	add	r0, sp, #12
 8010930:	f7ff fd78 	bl	8010424 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 8010934:	6863      	ldr	r3, [r4, #4]
 8010936:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801093a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801093e:	d011      	beq.n	8010964 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x114>
 8010940:	f10d 020b 	add.w	r2, sp, #11
 8010944:	7a20      	ldrb	r0, [r4, #8]
 8010946:	f10d 010a 	add.w	r1, sp, #10
 801094a:	f000 f94c 	bl	8010be6 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 801094e:	6863      	ldr	r3, [r4, #4]
 8010950:	055d      	lsls	r5, r3, #21
 8010952:	bf5c      	itt	pl
 8010954:	f89d 200a 	ldrbpl.w	r2, [sp, #10]
 8010958:	7622      	strbpl	r2, [r4, #24]
 801095a:	0518      	lsls	r0, r3, #20
 801095c:	bf5c      	itt	pl
 801095e:	f89d 300b 	ldrbpl.w	r3, [sp, #11]
 8010962:	7663      	strbpl	r3, [r4, #25]
 8010964:	4967      	ldr	r1, [pc, #412]	; (8010b04 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 8010966:	a803      	add	r0, sp, #12
 8010968:	f005 f8a8 	bl	8015abc <PropertiesBuilder::AddComment(char const*)>
 801096c:	7e20      	ldrb	r0, [r4, #24]
 801096e:	f000 faaf 	bl	8010ed0 <PixelType::ConvertTxH(unsigned char)>
 8010972:	2502      	movs	r5, #2
 8010974:	6863      	ldr	r3, [r4, #4]
 8010976:	4602      	mov	r2, r0
 8010978:	4963      	ldr	r1, [pc, #396]	; (8010b08 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 801097a:	f3c3 2380 	ubfx	r3, r3, #10, #1
 801097e:	9500      	str	r5, [sp, #0]
 8010980:	a803      	add	r0, sp, #12
 8010982:	f7ff fd77 	bl	8010474 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 8010986:	7e60      	ldrb	r0, [r4, #25]
 8010988:	f000 faa2 	bl	8010ed0 <PixelType::ConvertTxH(unsigned char)>
 801098c:	6863      	ldr	r3, [r4, #4]
 801098e:	4602      	mov	r2, r0
 8010990:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 8010994:	495d      	ldr	r1, [pc, #372]	; (8010b0c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 8010996:	9500      	str	r5, [sp, #0]
 8010998:	a803      	add	r0, sp, #12
 801099a:	f7ff fd6b 	bl	8010474 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 801099e:	495c      	ldr	r1, [pc, #368]	; (8010b10 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>)
 80109a0:	a803      	add	r0, sp, #12
 80109a2:	f005 f88b 	bl	8015abc <PropertiesBuilder::AddComment(char const*)>
 80109a6:	6863      	ldr	r3, [r4, #4]
 80109a8:	f8b4 2015 	ldrh.w	r2, [r4, #21]
 80109ac:	f3c3 2300 	ubfx	r3, r3, #8, #1
 80109b0:	4958      	ldr	r1, [pc, #352]	; (8010b14 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 80109b2:	a803      	add	r0, sp, #12
 80109b4:	f7ff fd0e 	bl	80103d4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 80109b8:	4957      	ldr	r1, [pc, #348]	; (8010b18 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 80109ba:	a803      	add	r0, sp, #12
 80109bc:	f005 f87e 	bl	8015abc <PropertiesBuilder::AddComment(char const*)>
 80109c0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80109c4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80109c8:	f8d4 300e 	ldr.w	r3, [r4, #14]
 80109cc:	42aa      	cmp	r2, r5
 80109ce:	6861      	ldr	r1, [r4, #4]
 80109d0:	d22e      	bcs.n	8010a30 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>
 80109d2:	9803      	ldr	r0, [sp, #12]
 80109d4:	06c9      	lsls	r1, r1, #27
 80109d6:	4410      	add	r0, r2
 80109d8:	eba5 0502 	sub.w	r5, r5, r2
 80109dc:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80109e0:	d417      	bmi.n	8010a12 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1c2>
 80109e2:	b9c2      	cbnz	r2, 8010a16 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1c6>
 80109e4:	9300      	str	r3, [sp, #0]
 80109e6:	4a41      	ldr	r2, [pc, #260]	; (8010aec <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 80109e8:	4b4c      	ldr	r3, [pc, #304]	; (8010b1c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 80109ea:	e017      	b.n	8010a1c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1cc>
 80109ec:	2301      	movs	r3, #1
 80109ee:	4a4c      	ldr	r2, [pc, #304]	; (8010b20 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 80109f0:	9300      	str	r3, [sp, #0]
 80109f2:	4b3d      	ldr	r3, [pc, #244]	; (8010ae8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 80109f4:	e776      	b.n	80108e4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x94>
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7f7 f9a6 	bl	8007d48 <__aeabi_ui2f>
 80109fc:	4949      	ldr	r1, [pc, #292]	; (8010b24 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 80109fe:	f7f7 fd21 	bl	8008444 <__aeabi_fdiv>
 8010a02:	2301      	movs	r3, #1
 8010a04:	4602      	mov	r2, r0
 8010a06:	493c      	ldr	r1, [pc, #240]	; (8010af8 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a8>)
 8010a08:	9300      	str	r3, [sp, #0]
 8010a0a:	a803      	add	r0, sp, #12
 8010a0c:	f7ff fd32 	bl	8010474 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 8010a10:	e77a      	b.n	8010908 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0xb8>
 8010a12:	2a00      	cmp	r2, #0
 8010a14:	d05e      	beq.n	8010ad4 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x284>
 8010a16:	9300      	str	r3, [sp, #0]
 8010a18:	4a35      	ldr	r2, [pc, #212]	; (8010af0 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 8010a1a:	4b40      	ldr	r3, [pc, #256]	; (8010b1c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 8010a1c:	4629      	mov	r1, r5
 8010a1e:	f7f8 fef7 	bl	8009810 <snprintf>
 8010a22:	4285      	cmp	r5, r0
 8010a24:	bfa2      	ittt	ge
 8010a26:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8010a2a:	18c0      	addge	r0, r0, r3
 8010a2c:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8010a30:	493d      	ldr	r1, [pc, #244]	; (8010b28 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>)
 8010a32:	a803      	add	r0, sp, #12
 8010a34:	f005 f842 	bl	8015abc <PropertiesBuilder::AddComment(char const*)>
 8010a38:	6863      	ldr	r3, [r4, #4]
 8010a3a:	7ca2      	ldrb	r2, [r4, #18]
 8010a3c:	493b      	ldr	r1, [pc, #236]	; (8010b2c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 8010a3e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010a42:	a803      	add	r0, sp, #12
 8010a44:	f7ff fc9e 	bl	8010384 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8010a48:	2500      	movs	r5, #0
 8010a4a:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 8010a4e:	4e38      	ldr	r6, [pc, #224]	; (8010b30 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2e0>)
 8010a50:	f104 0718 	add.w	r7, r4, #24
 8010a54:	6862      	ldr	r2, [r4, #4]
 8010a56:	fa08 f305 	lsl.w	r3, r8, r5
 8010a5a:	4393      	bics	r3, r2
 8010a5c:	bf0c      	ite	eq
 8010a5e:	2301      	moveq	r3, #1
 8010a60:	2300      	movne	r3, #0
 8010a62:	4631      	mov	r1, r6
 8010a64:	f837 2f02 	ldrh.w	r2, [r7, #2]!
 8010a68:	a803      	add	r0, sp, #12
 8010a6a:	3501      	adds	r5, #1
 8010a6c:	f7ff fcb2 	bl	80103d4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 8010a70:	2d08      	cmp	r5, #8
 8010a72:	f106 0614 	add.w	r6, r6, #20
 8010a76:	d1ed      	bne.n	8010a54 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x204>
 8010a78:	6863      	ldr	r3, [r4, #4]
 8010a7a:	7ce2      	ldrb	r2, [r4, #19]
 8010a7c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8010a80:	492c      	ldr	r1, [pc, #176]	; (8010b34 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2e4>)
 8010a82:	a803      	add	r0, sp, #12
 8010a84:	f7ff fc7e 	bl	8010384 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8010a88:	492b      	ldr	r1, [pc, #172]	; (8010b38 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2e8>)
 8010a8a:	a803      	add	r0, sp, #12
 8010a8c:	f005 f816 	bl	8015abc <PropertiesBuilder::AddComment(char const*)>
 8010a90:	6863      	ldr	r3, [r4, #4]
 8010a92:	7d22      	ldrb	r2, [r4, #20]
 8010a94:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010a98:	4928      	ldr	r1, [pc, #160]	; (8010b3c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2ec>)
 8010a9a:	a803      	add	r0, sp, #12
 8010a9c:	f7ff fc72 	bl	8010384 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8010aa0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8010aa4:	b17b      	cbz	r3, 8010ac6 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x276>
 8010aa6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010aaa:	9b03      	ldr	r3, [sp, #12]
 8010aac:	4413      	add	r3, r2
 8010aae:	227d      	movs	r2, #125	; 0x7d
 8010ab0:	f803 2c01 	strb.w	r2, [r3, #-1]
 8010ab4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010ab8:	9903      	ldr	r1, [sp, #12]
 8010aba:	54ca      	strb	r2, [r1, r3]
 8010abc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010ac0:	3301      	adds	r3, #1
 8010ac2:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010ac6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010acc:	601a      	str	r2, [r3, #0]
 8010ace:	b006      	add	sp, #24
 8010ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ad4:	9300      	str	r3, [sp, #0]
 8010ad6:	4a12      	ldr	r2, [pc, #72]	; (8010b20 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 8010ad8:	4b10      	ldr	r3, [pc, #64]	; (8010b1c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 8010ada:	e79f      	b.n	8010a1c <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)+0x1cc>
 8010adc:	0801b9b0 	stmdaeq	r1, {r4, r5, r7, r8, fp, ip, sp, pc}
 8010ae0:	0801b98d 	stmdaeq	r1, {r0, r2, r3, r7, r8, fp, ip, sp, pc}
 8010ae4:	0801b996 	stmdaeq	r1, {r1, r2, r4, r7, r8, fp, ip, sp, pc}
 8010ae8:	0801b95a 	stmdaeq	r1, {r1, r3, r4, r6, r8, fp, ip, sp, pc}
 8010aec:	08019181 	stmdaeq	r1, {r0, r7, r8, ip, pc}
 8010af0:	08019178 	stmdaeq	r1, {r3, r4, r5, r6, r8, ip, pc}
 8010af4:	0801a90d 	stmdaeq	r1, {r0, r2, r3, r8, fp, sp, pc}
 8010af8:	0801b922 	stmdaeq	r1, {r1, r5, r8, fp, ip, sp, pc}
 8010afc:	0801a917 	stmdaeq	r1, {r0, r1, r2, r4, r8, fp, sp, pc}
 8010b00:	0801b97d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, fp, ip, sp, pc}
 8010b04:	0801a92b 	stmdaeq	r1, {r0, r1, r3, r5, r8, fp, sp, pc}
 8010b08:	0801b9a0 	stmdaeq	r1, {r5, r7, r8, fp, ip, sp, pc}
 8010b0c:	0801b9a8 	stmdaeq	r1, {r3, r5, r7, r8, fp, ip, sp, pc}
 8010b10:	0801a941 	stmdaeq	r1, {r0, r6, r8, fp, sp, pc}
 8010b14:	0801b94a 	stmdaeq	r1, {r1, r3, r6, r8, fp, ip, sp, pc}
 8010b18:	0801a94a 	stmdaeq	r1, {r1, r3, r6, r8, fp, sp, pc}
 8010b1c:	0801b92e 	stmdaeq	r1, {r1, r2, r3, r5, r8, fp, ip, sp, pc}
 8010b20:	08019182 	stmdaeq	r1, {r1, r7, r8, ip, pc}
 8010b24:	41200000 			; <UNDEFINED> instruction: 0x41200000
 8010b28:	0801a95c 	stmdaeq	r1, {r2, r3, r4, r6, r8, fp, sp, pc}
 8010b2c:	0801b96b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r8, fp, ip, sp, pc}
 8010b30:	0801ba29 	stmdaeq	r1, {r0, r3, r5, r9, fp, ip, sp, pc}
 8010b34:	0801b917 	stmdaeq	r1, {r0, r1, r2, r4, r8, fp, ip, sp, pc}
 8010b38:	0801a96a 	stmdaeq	r1, {r1, r3, r5, r6, r8, fp, sp, pc}
 8010b3c:	0801b93d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r8, fp, ip, sp, pc}

08010b40 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)>:
 8010b40:	b513      	push	{r0, r1, r4, lr}
 8010b42:	6804      	ldr	r4, [r0, #0]
 8010b44:	b914      	cbnz	r4, 8010b4c <PixelDmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8010b46:	601c      	str	r4, [r3, #0]
 8010b48:	b002      	add	sp, #8
 8010b4a:	bd10      	pop	{r4, pc}
 8010b4c:	9300      	str	r3, [sp, #0]
 8010b4e:	4613      	mov	r3, r2
 8010b50:	460a      	mov	r2, r1
 8010b52:	2100      	movs	r1, #0
 8010b54:	f7ff fe7c 	bl	8010850 <PixelDmxParams::Builder(pixeldmxparams::Params const*, char*, unsigned int, unsigned int&)>
 8010b58:	e7f6      	b.n	8010b48 <PixelDmxParams::Save(char*, unsigned int, unsigned int&)+0x8>

08010b5a <PixelDmxParams::Set(PixelDmxConfiguration*)>:
 8010b5a:	6843      	ldr	r3, [r0, #4]
 8010b5c:	07da      	lsls	r2, r3, #31
 8010b5e:	bf44      	itt	mi
 8010b60:	7a02      	ldrbmi	r2, [r0, #8]
 8010b62:	600a      	strmi	r2, [r1, #0]
 8010b64:	079a      	lsls	r2, r3, #30
 8010b66:	d505      	bpl.n	8010b74 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 8010b68:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 8010b6c:	2a00      	cmp	r2, #0
 8010b6e:	bf08      	it	eq
 8010b70:	22aa      	moveq	r2, #170	; 0xaa
 8010b72:	604a      	str	r2, [r1, #4]
 8010b74:	059a      	lsls	r2, r3, #22
 8010b76:	bf44      	itt	mi
 8010b78:	7dc2      	ldrbmi	r2, [r0, #23]
 8010b7a:	608a      	strmi	r2, [r1, #8]
 8010b7c:	055a      	lsls	r2, r3, #21
 8010b7e:	bf44      	itt	mi
 8010b80:	7e02      	ldrbmi	r2, [r0, #24]
 8010b82:	740a      	strbmi	r2, [r1, #16]
 8010b84:	051a      	lsls	r2, r3, #20
 8010b86:	bf44      	itt	mi
 8010b88:	7e42      	ldrbmi	r2, [r0, #25]
 8010b8a:	744a      	strbmi	r2, [r1, #17]
 8010b8c:	06da      	lsls	r2, r3, #27
 8010b8e:	bf44      	itt	mi
 8010b90:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 8010b94:	60ca      	strmi	r2, [r1, #12]
 8010b96:	069a      	lsls	r2, r3, #26
 8010b98:	bf44      	itt	mi
 8010b9a:	7c82      	ldrbmi	r2, [r0, #18]
 8010b9c:	748a      	strbmi	r2, [r1, #18]
 8010b9e:	061a      	lsls	r2, r3, #24
 8010ba0:	d504      	bpl.n	8010bac <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 8010ba2:	2201      	movs	r2, #1
 8010ba4:	750a      	strb	r2, [r1, #20]
 8010ba6:	7b42      	ldrb	r2, [r0, #13]
 8010ba8:	b102      	cbz	r2, 8010bac <PixelDmxParams::Set(PixelDmxConfiguration*)+0x52>
 8010baa:	74ca      	strb	r2, [r1, #19]
 8010bac:	075a      	lsls	r2, r3, #29
 8010bae:	d50f      	bpl.n	8010bd0 <PixelDmxParams::Set(PixelDmxConfiguration*)+0x76>
 8010bb0:	7ac2      	ldrb	r2, [r0, #11]
 8010bb2:	b510      	push	{r4, lr}
 8010bb4:	7b04      	ldrb	r4, [r0, #12]
 8010bb6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8010bba:	858a      	strh	r2, [r1, #44]	; 0x2c
 8010bbc:	05da      	lsls	r2, r3, #23
 8010bbe:	bf44      	itt	mi
 8010bc0:	f8b0 2015 	ldrhmi.w	r2, [r0, #21]
 8010bc4:	620a      	strmi	r2, [r1, #32]
 8010bc6:	065c      	lsls	r4, r3, #25
 8010bc8:	bf44      	itt	mi
 8010bca:	7cc3      	ldrbmi	r3, [r0, #19]
 8010bcc:	61cb      	strmi	r3, [r1, #28]
 8010bce:	bd10      	pop	{r4, pc}
 8010bd0:	05da      	lsls	r2, r3, #23
 8010bd2:	bf44      	itt	mi
 8010bd4:	f8b0 2015 	ldrhmi.w	r2, [r0, #21]
 8010bd8:	620a      	strmi	r2, [r1, #32]
 8010bda:	065b      	lsls	r3, r3, #25
 8010bdc:	bf44      	itt	mi
 8010bde:	7cc3      	ldrbmi	r3, [r0, #19]
 8010be0:	61cb      	strmi	r3, [r1, #28]
 8010be2:	4770      	bx	lr

08010be4 <PixelDmxParams::Dump()>:
 8010be4:	4770      	bx	lr

08010be6 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 8010be6:	23c0      	movs	r3, #192	; 0xc0
 8010be8:	2803      	cmp	r0, #3
 8010bea:	700b      	strb	r3, [r1, #0]
 8010bec:	d006      	beq.n	8010bfc <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 8010bee:	3808      	subs	r0, #8
 8010bf0:	2803      	cmp	r0, #3
 8010bf2:	bf34      	ite	cc
 8010bf4:	23fc      	movcc	r3, #252	; 0xfc
 8010bf6:	23f0      	movcs	r3, #240	; 0xf0
 8010bf8:	7013      	strb	r3, [r2, #0]
 8010bfa:	4770      	bx	lr
 8010bfc:	23f8      	movs	r3, #248	; 0xf8
 8010bfe:	e7fb      	b.n	8010bf8 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>

08010c00 <PixelConfiguration::Validate(unsigned int&)>:
 8010c00:	b513      	push	{r0, r1, r4, lr}
 8010c02:	4604      	mov	r4, r0
 8010c04:	6800      	ldr	r0, [r0, #0]
 8010c06:	6863      	ldr	r3, [r4, #4]
 8010c08:	2807      	cmp	r0, #7
 8010c0a:	68a2      	ldr	r2, [r4, #8]
 8010c0c:	d128      	bne.n	8010c60 <PixelConfiguration::Validate(unsigned int&)+0x60>
 8010c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c12:	bf28      	it	cs
 8010c14:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8010c18:	6063      	str	r3, [r4, #4]
 8010c1a:	2304      	movs	r3, #4
 8010c1c:	600b      	str	r3, [r1, #0]
 8010c1e:	2301      	movs	r3, #1
 8010c20:	2a06      	cmp	r2, #6
 8010c22:	7563      	strb	r3, [r4, #21]
 8010c24:	d102      	bne.n	8010c2c <PixelConfiguration::Validate(unsigned int&)+0x2c>
 8010c26:	f000 f949 	bl	8010ebc <PixelType::GetMap(pixel::Type)>
 8010c2a:	60a0      	str	r0, [r4, #8]
 8010c2c:	7c63      	ldrb	r3, [r4, #17]
 8010c2e:	7c22      	ldrb	r2, [r4, #16]
 8010c30:	6820      	ldr	r0, [r4, #0]
 8010c32:	429a      	cmp	r2, r3
 8010c34:	bf28      	it	cs
 8010c36:	2300      	movcs	r3, #0
 8010c38:	f10d 0207 	add.w	r2, sp, #7
 8010c3c:	bf28      	it	cs
 8010c3e:	8223      	strhcs	r3, [r4, #16]
 8010c40:	f10d 0106 	add.w	r1, sp, #6
 8010c44:	f7ff ffcf 	bl	8010be6 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 8010c48:	7c23      	ldrb	r3, [r4, #16]
 8010c4a:	b913      	cbnz	r3, 8010c52 <PixelConfiguration::Validate(unsigned int&)+0x52>
 8010c4c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010c50:	7423      	strb	r3, [r4, #16]
 8010c52:	7c63      	ldrb	r3, [r4, #17]
 8010c54:	b913      	cbnz	r3, 8010c5c <PixelConfiguration::Validate(unsigned int&)+0x5c>
 8010c56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010c5a:	7463      	strb	r3, [r4, #17]
 8010c5c:	4b29      	ldr	r3, [pc, #164]	; (8010d04 <PixelConfiguration::Validate(unsigned int&)+0x104>)
 8010c5e:	e01e      	b.n	8010c9e <PixelConfiguration::Validate(unsigned int&)+0x9e>
 8010c60:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8010c64:	bf28      	it	cs
 8010c66:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 8010c6a:	6063      	str	r3, [r4, #4]
 8010c6c:	2303      	movs	r3, #3
 8010c6e:	600b      	str	r3, [r1, #0]
 8010c70:	f1a0 030b 	sub.w	r3, r0, #11
 8010c74:	2b01      	cmp	r3, #1
 8010c76:	d806      	bhi.n	8010c86 <PixelConfiguration::Validate(unsigned int&)+0x86>
 8010c78:	7ca3      	ldrb	r3, [r4, #18]
 8010c7a:	2b1f      	cmp	r3, #31
 8010c7c:	d83d      	bhi.n	8010cfa <PixelConfiguration::Validate(unsigned int&)+0xfa>
 8010c7e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8010c82:	74a3      	strb	r3, [r4, #18]
 8010c84:	e001      	b.n	8010c8a <PixelConfiguration::Validate(unsigned int&)+0x8a>
 8010c86:	2800      	cmp	r0, #0
 8010c88:	d139      	bne.n	8010cfe <PixelConfiguration::Validate(unsigned int&)+0xfe>
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	2a06      	cmp	r2, #6
 8010c8e:	bf08      	it	eq
 8010c90:	60a3      	streq	r3, [r4, #8]
 8010c92:	280d      	cmp	r0, #13
 8010c94:	7563      	strb	r3, [r4, #21]
 8010c96:	68e3      	ldr	r3, [r4, #12]
 8010c98:	d119      	bne.n	8010cce <PixelConfiguration::Validate(unsigned int&)+0xce>
 8010c9a:	b913      	cbnz	r3, 8010ca2 <PixelConfiguration::Validate(unsigned int&)+0xa2>
 8010c9c:	4b1a      	ldr	r3, [pc, #104]	; (8010d08 <PixelConfiguration::Validate(unsigned int&)+0x108>)
 8010c9e:	60e3      	str	r3, [r4, #12]
 8010ca0:	e003      	b.n	8010caa <PixelConfiguration::Validate(unsigned int&)+0xaa>
 8010ca2:	4a1a      	ldr	r2, [pc, #104]	; (8010d0c <PixelConfiguration::Validate(unsigned int&)+0x10c>)
 8010ca4:	4293      	cmp	r3, r2
 8010ca6:	d900      	bls.n	8010caa <PixelConfiguration::Validate(unsigned int&)+0xaa>
 8010ca8:	60e2      	str	r2, [r4, #12]
 8010caa:	7d23      	ldrb	r3, [r4, #20]
 8010cac:	b31b      	cbz	r3, 8010cf6 <PixelConfiguration::Validate(unsigned int&)+0xf6>
 8010cae:	7ce3      	ldrb	r3, [r4, #19]
 8010cb0:	b9ab      	cbnz	r3, 8010cde <PixelConfiguration::Validate(unsigned int&)+0xde>
 8010cb2:	6822      	ldr	r2, [r4, #0]
 8010cb4:	b17a      	cbz	r2, 8010cd6 <PixelConfiguration::Validate(unsigned int&)+0xd6>
 8010cb6:	f1a2 030b 	sub.w	r3, r2, #11
 8010cba:	2b01      	cmp	r3, #1
 8010cbc:	d90d      	bls.n	8010cda <PixelConfiguration::Validate(unsigned int&)+0xda>
 8010cbe:	4b14      	ldr	r3, [pc, #80]	; (8010d10 <PixelConfiguration::Validate(unsigned int&)+0x110>)
 8010cc0:	4914      	ldr	r1, [pc, #80]	; (8010d14 <PixelConfiguration::Validate(unsigned int&)+0x114>)
 8010cc2:	2a0d      	cmp	r2, #13
 8010cc4:	bf08      	it	eq
 8010cc6:	460b      	moveq	r3, r1
 8010cc8:	61a3      	str	r3, [r4, #24]
 8010cca:	b002      	add	sp, #8
 8010ccc:	bd10      	pop	{r4, pc}
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d0e4      	beq.n	8010c9c <PixelConfiguration::Validate(unsigned int&)+0x9c>
 8010cd2:	4a11      	ldr	r2, [pc, #68]	; (8010d18 <PixelConfiguration::Validate(unsigned int&)+0x118>)
 8010cd4:	e7e6      	b.n	8010ca4 <PixelConfiguration::Validate(unsigned int&)+0xa4>
 8010cd6:	4b11      	ldr	r3, [pc, #68]	; (8010d1c <PixelConfiguration::Validate(unsigned int&)+0x11c>)
 8010cd8:	e7f6      	b.n	8010cc8 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 8010cda:	4b11      	ldr	r3, [pc, #68]	; (8010d20 <PixelConfiguration::Validate(unsigned int&)+0x120>)
 8010cdc:	e7f4      	b.n	8010cc8 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 8010cde:	f1a3 0214 	sub.w	r2, r3, #20
 8010ce2:	2a05      	cmp	r2, #5
 8010ce4:	d807      	bhi.n	8010cf6 <PixelConfiguration::Validate(unsigned int&)+0xf6>
 8010ce6:	3b15      	subs	r3, #21
 8010ce8:	2b04      	cmp	r3, #4
 8010cea:	bf96      	itet	ls
 8010cec:	4a0d      	ldrls	r2, [pc, #52]	; (8010d24 <PixelConfiguration::Validate(unsigned int&)+0x124>)
 8010cee:	4b0e      	ldrhi	r3, [pc, #56]	; (8010d28 <PixelConfiguration::Validate(unsigned int&)+0x128>)
 8010cf0:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 8010cf4:	e7e8      	b.n	8010cc8 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 8010cf6:	4b07      	ldr	r3, [pc, #28]	; (8010d14 <PixelConfiguration::Validate(unsigned int&)+0x114>)
 8010cf8:	e7e6      	b.n	8010cc8 <PixelConfiguration::Validate(unsigned int&)+0xc8>
 8010cfa:	23ff      	movs	r3, #255	; 0xff
 8010cfc:	e7c1      	b.n	8010c82 <PixelConfiguration::Validate(unsigned int&)+0x82>
 8010cfe:	280d      	cmp	r0, #13
 8010d00:	d18d      	bne.n	8010c1e <PixelConfiguration::Validate(unsigned int&)+0x1e>
 8010d02:	e7c2      	b.n	8010c8a <PixelConfiguration::Validate(unsigned int&)+0x8a>
 8010d04:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 8010d08:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8010d0c:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8010d10:	0801ad4c 	stmdaeq	r1, {r2, r3, r6, r8, sl, fp, sp, pc}
 8010d14:	0801aa4c 	stmdaeq	r1, {r2, r3, r6, r9, fp, sp, pc}
 8010d18:	017d7840 	cmneq	sp, r0, asr #16
 8010d1c:	0801b04c 	stmdaeq	r1, {r2, r3, r6, ip, sp, pc}
 8010d20:	0801b14c 	stmdaeq	r1, {r2, r3, r6, r8, ip, sp, pc}
 8010d24:	0801aa38 	stmdaeq	r1, {r3, r4, r5, r9, fp, sp, pc}
 8010d28:	0801ab4c 	stmdaeq	r1, {r2, r3, r6, r8, r9, fp, sp, pc}

08010d2c <PixelConfiguration::Print()>:
 8010d2c:	b513      	push	{r0, r1, r4, lr}
 8010d2e:	4604      	mov	r4, r0
 8010d30:	4825      	ldr	r0, [pc, #148]	; (8010dc8 <PixelConfiguration::Print()+0x9c>)
 8010d32:	f7f8 fd45 	bl	80097c0 <printf>
 8010d36:	6820      	ldr	r0, [r4, #0]
 8010d38:	f000 f85c 	bl	8010df4 <PixelType::GetType(pixel::Type)>
 8010d3c:	6822      	ldr	r2, [r4, #0]
 8010d3e:	4601      	mov	r1, r0
 8010d40:	4822      	ldr	r0, [pc, #136]	; (8010dcc <PixelConfiguration::Print()+0xa0>)
 8010d42:	f7f8 fd3d 	bl	80097c0 <printf>
 8010d46:	6861      	ldr	r1, [r4, #4]
 8010d48:	4821      	ldr	r0, [pc, #132]	; (8010dd0 <PixelConfiguration::Print()+0xa4>)
 8010d4a:	f7f8 fd39 	bl	80097c0 <printf>
 8010d4e:	7d63      	ldrb	r3, [r4, #21]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d030      	beq.n	8010db6 <PixelConfiguration::Print()+0x8a>
 8010d54:	68a0      	ldr	r0, [r4, #8]
 8010d56:	f000 f8a5 	bl	8010ea4 <PixelType::GetMap(pixel::Map)>
 8010d5a:	68a2      	ldr	r2, [r4, #8]
 8010d5c:	4601      	mov	r1, r0
 8010d5e:	481d      	ldr	r0, [pc, #116]	; (8010dd4 <PixelConfiguration::Print()+0xa8>)
 8010d60:	f7f8 fd2e 	bl	80097c0 <printf>
 8010d64:	7c20      	ldrb	r0, [r4, #16]
 8010d66:	f000 f8b3 	bl	8010ed0 <PixelType::ConvertTxH(unsigned char)>
 8010d6a:	f7f7 fa5f 	bl	800822c <__aeabi_f2d>
 8010d6e:	460b      	mov	r3, r1
 8010d70:	7c21      	ldrb	r1, [r4, #16]
 8010d72:	4602      	mov	r2, r0
 8010d74:	9100      	str	r1, [sp, #0]
 8010d76:	4818      	ldr	r0, [pc, #96]	; (8010dd8 <PixelConfiguration::Print()+0xac>)
 8010d78:	f7f8 fd22 	bl	80097c0 <printf>
 8010d7c:	7c60      	ldrb	r0, [r4, #17]
 8010d7e:	f000 f8a7 	bl	8010ed0 <PixelType::ConvertTxH(unsigned char)>
 8010d82:	f7f7 fa53 	bl	800822c <__aeabi_f2d>
 8010d86:	460b      	mov	r3, r1
 8010d88:	7c61      	ldrb	r1, [r4, #17]
 8010d8a:	4602      	mov	r2, r0
 8010d8c:	9100      	str	r1, [sp, #0]
 8010d8e:	4813      	ldr	r0, [pc, #76]	; (8010ddc <PixelConfiguration::Print()+0xb0>)
 8010d90:	f7f8 fd16 	bl	80097c0 <printf>
 8010d94:	7d21      	ldrb	r1, [r4, #20]
 8010d96:	4a12      	ldr	r2, [pc, #72]	; (8010de0 <PixelConfiguration::Print()+0xb4>)
 8010d98:	4b12      	ldr	r3, [pc, #72]	; (8010de4 <PixelConfiguration::Print()+0xb8>)
 8010d9a:	4813      	ldr	r0, [pc, #76]	; (8010de8 <PixelConfiguration::Print()+0xbc>)
 8010d9c:	2900      	cmp	r1, #0
 8010d9e:	bf14      	ite	ne
 8010da0:	4611      	movne	r1, r2
 8010da2:	4619      	moveq	r1, r3
 8010da4:	f7f8 fd0c 	bl	80097c0 <printf>
 8010da8:	68e1      	ldr	r1, [r4, #12]
 8010daa:	4810      	ldr	r0, [pc, #64]	; (8010dec <PixelConfiguration::Print()+0xc0>)
 8010dac:	b002      	add	sp, #8
 8010dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010db2:	f7f8 bd05 	b.w	80097c0 <printf>
 8010db6:	6823      	ldr	r3, [r4, #0]
 8010db8:	3b0b      	subs	r3, #11
 8010dba:	2b01      	cmp	r3, #1
 8010dbc:	d8ea      	bhi.n	8010d94 <PixelConfiguration::Print()+0x68>
 8010dbe:	7ca1      	ldrb	r1, [r4, #18]
 8010dc0:	480b      	ldr	r0, [pc, #44]	; (8010df0 <PixelConfiguration::Print()+0xc4>)
 8010dc2:	f7f8 fcfd 	bl	80097c0 <printf>
 8010dc6:	e7e5      	b.n	8010d94 <PixelConfiguration::Print()+0x68>
 8010dc8:	0801a97e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r8, fp, sp, pc}
 8010dcc:	0801a993 	stmdaeq	r1, {r0, r1, r4, r7, r8, fp, sp, pc}
 8010dd0:	0801a9a7 	stmdaeq	r1, {r0, r1, r2, r5, r7, r8, fp, sp, pc}
 8010dd4:	0801a9b6 	stmdaeq	r1, {r1, r2, r4, r5, r7, r8, fp, sp, pc}
 8010dd8:	0801a9ca 	stmdaeq	r1, {r1, r3, r6, r7, r8, fp, sp, pc}
 8010ddc:	0801a9e2 	stmdaeq	r1, {r1, r5, r6, r7, r8, fp, sp, pc}
 8010de0:	0801a977 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, fp, sp, pc}
 8010de4:	0801a97b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, fp, sp, pc}
 8010de8:	0801aa11 	stmdaeq	r1, {r0, r4, r9, fp, sp, pc}
 8010dec:	0801aa27 	stmdaeq	r1, {r0, r1, r2, r5, r9, fp, sp, pc}
 8010df0:	0801a9fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, fp, sp, pc}

08010df4 <PixelType::GetType(pixel::Type)>:
 8010df4:	280d      	cmp	r0, #13
 8010df6:	bfda      	itte	le
 8010df8:	4b02      	ldrle	r3, [pc, #8]	; (8010e04 <PixelType::GetType(pixel::Type)+0x10>)
 8010dfa:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 8010dfe:	4802      	ldrgt	r0, [pc, #8]	; (8010e08 <PixelType::GetType(pixel::Type)+0x14>)
 8010e00:	4770      	bx	lr
 8010e02:	bf00      	nop
 8010e04:	0801b280 	stmdaeq	r1, {r7, r9, ip, sp, pc}
 8010e08:	0801b24c 	stmdaeq	r1, {r2, r3, r6, r9, ip, sp, pc}

08010e0c <PixelType::GetType(char const*)>:
 8010e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e0e:	4604      	mov	r4, r0
 8010e10:	2000      	movs	r0, #0
 8010e12:	490f      	ldr	r1, [pc, #60]	; (8010e50 <PixelType::GetType(char const*)+0x44>)
 8010e14:	1e67      	subs	r7, r4, #1
 8010e16:	1e4e      	subs	r6, r1, #1
 8010e18:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 8010e1c:	4615      	mov	r5, r2
 8010e1e:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 8010e22:	2b19      	cmp	r3, #25
 8010e24:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8010e28:	bf98      	it	ls
 8010e2a:	f102 0520 	addls.w	r5, r2, #32
 8010e2e:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 8010e32:	f1bc 0f19 	cmp.w	ip, #25
 8010e36:	bf98      	it	ls
 8010e38:	3320      	addls	r3, #32
 8010e3a:	42ab      	cmp	r3, r5
 8010e3c:	d005      	beq.n	8010e4a <PixelType::GetType(char const*)+0x3e>
 8010e3e:	3001      	adds	r0, #1
 8010e40:	280e      	cmp	r0, #14
 8010e42:	f101 0108 	add.w	r1, r1, #8
 8010e46:	d1e5      	bne.n	8010e14 <PixelType::GetType(char const*)+0x8>
 8010e48:	e001      	b.n	8010e4e <PixelType::GetType(char const*)+0x42>
 8010e4a:	2a00      	cmp	r2, #0
 8010e4c:	d1e4      	bne.n	8010e18 <PixelType::GetType(char const*)+0xc>
 8010e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e50:	0801b280 	stmdaeq	r1, {r7, r9, ip, sp, pc}

08010e54 <PixelType::GetMap(char const*)>:
 8010e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e56:	4605      	mov	r5, r0
 8010e58:	2000      	movs	r0, #0
 8010e5a:	4b11      	ldr	r3, [pc, #68]	; (8010ea0 <PixelType::GetMap(char const*)+0x4c>)
 8010e5c:	1e5c      	subs	r4, r3, #1
 8010e5e:	1e6e      	subs	r6, r5, #1
 8010e60:	f103 0c02 	add.w	ip, r3, #2
 8010e64:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8010e68:	4617      	mov	r7, r2
 8010e6a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8010e6e:	2919      	cmp	r1, #25
 8010e70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010e74:	bf98      	it	ls
 8010e76:	f102 0720 	addls.w	r7, r2, #32
 8010e7a:	f1a1 0e41 	sub.w	lr, r1, #65	; 0x41
 8010e7e:	f1be 0f19 	cmp.w	lr, #25
 8010e82:	bf98      	it	ls
 8010e84:	3120      	addls	r1, #32
 8010e86:	42b9      	cmp	r1, r7
 8010e88:	d005      	beq.n	8010e96 <PixelType::GetMap(char const*)+0x42>
 8010e8a:	3001      	adds	r0, #1
 8010e8c:	2806      	cmp	r0, #6
 8010e8e:	f103 0304 	add.w	r3, r3, #4
 8010e92:	d1e3      	bne.n	8010e5c <PixelType::GetMap(char const*)+0x8>
 8010e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e96:	2a00      	cmp	r2, #0
 8010e98:	d0fc      	beq.n	8010e94 <PixelType::GetMap(char const*)+0x40>
 8010e9a:	4564      	cmp	r4, ip
 8010e9c:	d1e2      	bne.n	8010e64 <PixelType::GetMap(char const*)+0x10>
 8010e9e:	e7f9      	b.n	8010e94 <PixelType::GetMap(char const*)+0x40>
 8010ea0:	0801b268 	stmdaeq	r1, {r3, r5, r6, r9, ip, sp, pc}

08010ea4 <PixelType::GetMap(pixel::Map)>:
 8010ea4:	2805      	cmp	r0, #5
 8010ea6:	bfda      	itte	le
 8010ea8:	4b02      	ldrle	r3, [pc, #8]	; (8010eb4 <PixelType::GetMap(pixel::Map)+0x10>)
 8010eaa:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 8010eae:	4802      	ldrgt	r0, [pc, #8]	; (8010eb8 <PixelType::GetMap(pixel::Map)+0x14>)
 8010eb0:	4770      	bx	lr
 8010eb2:	bf00      	nop
 8010eb4:	0801b268 	stmdaeq	r1, {r3, r5, r6, r9, ip, sp, pc}
 8010eb8:	0801b254 	stmdaeq	r1, {r2, r4, r6, r9, ip, sp, pc}

08010ebc <PixelType::GetMap(pixel::Type)>:
 8010ebc:	3801      	subs	r0, #1
 8010ebe:	2809      	cmp	r0, #9
 8010ec0:	bf9a      	itte	ls
 8010ec2:	4b02      	ldrls	r3, [pc, #8]	; (8010ecc <PixelType::GetMap(pixel::Type)+0x10>)
 8010ec4:	5618      	ldrsbls	r0, [r3, r0]
 8010ec6:	2002      	movhi	r0, #2
 8010ec8:	4770      	bx	lr
 8010eca:	bf00      	nop
 8010ecc:	0801b25e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r9, ip, sp, pc}

08010ed0 <PixelType::ConvertTxH(unsigned char)>:
 8010ed0:	28f0      	cmp	r0, #240	; 0xf0
 8010ed2:	d010      	beq.n	8010ef6 <PixelType::ConvertTxH(unsigned char)+0x26>
 8010ed4:	d807      	bhi.n	8010ee6 <PixelType::ConvertTxH(unsigned char)+0x16>
 8010ed6:	28c0      	cmp	r0, #192	; 0xc0
 8010ed8:	d00f      	beq.n	8010efa <PixelType::ConvertTxH(unsigned char)+0x2a>
 8010eda:	28e0      	cmp	r0, #224	; 0xe0
 8010edc:	d00f      	beq.n	8010efe <PixelType::ConvertTxH(unsigned char)+0x2e>
 8010ede:	2880      	cmp	r0, #128	; 0x80
 8010ee0:	d113      	bne.n	8010f0a <PixelType::ConvertTxH(unsigned char)+0x3a>
 8010ee2:	480b      	ldr	r0, [pc, #44]	; (8010f10 <PixelType::ConvertTxH(unsigned char)+0x40>)
 8010ee4:	4770      	bx	lr
 8010ee6:	28fc      	cmp	r0, #252	; 0xfc
 8010ee8:	d00b      	beq.n	8010f02 <PixelType::ConvertTxH(unsigned char)+0x32>
 8010eea:	28fe      	cmp	r0, #254	; 0xfe
 8010eec:	d00b      	beq.n	8010f06 <PixelType::ConvertTxH(unsigned char)+0x36>
 8010eee:	28f8      	cmp	r0, #248	; 0xf8
 8010ef0:	d10b      	bne.n	8010f0a <PixelType::ConvertTxH(unsigned char)+0x3a>
 8010ef2:	4808      	ldr	r0, [pc, #32]	; (8010f14 <PixelType::ConvertTxH(unsigned char)+0x44>)
 8010ef4:	4770      	bx	lr
 8010ef6:	4808      	ldr	r0, [pc, #32]	; (8010f18 <PixelType::ConvertTxH(unsigned char)+0x48>)
 8010ef8:	4770      	bx	lr
 8010efa:	4808      	ldr	r0, [pc, #32]	; (8010f1c <PixelType::ConvertTxH(unsigned char)+0x4c>)
 8010efc:	4770      	bx	lr
 8010efe:	4808      	ldr	r0, [pc, #32]	; (8010f20 <PixelType::ConvertTxH(unsigned char)+0x50>)
 8010f00:	4770      	bx	lr
 8010f02:	4808      	ldr	r0, [pc, #32]	; (8010f24 <PixelType::ConvertTxH(unsigned char)+0x54>)
 8010f04:	4770      	bx	lr
 8010f06:	4808      	ldr	r0, [pc, #32]	; (8010f28 <PixelType::ConvertTxH(unsigned char)+0x58>)
 8010f08:	4770      	bx	lr
 8010f0a:	2000      	movs	r0, #0
 8010f0c:	4770      	bx	lr
 8010f0e:	bf00      	nop
 8010f10:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
 8010f14:	3f480000 	svccc	0x00480000
 8010f18:	3f200000 	svccc	0x00200000
 8010f1c:	3ea00000 	cdpcc	0, 10, cr0, cr0, cr0, {0}
 8010f20:	3ef00000 	cdpcc	0, 15, cr0, cr0, cr0, {0}
 8010f24:	3f700000 	svccc	0x00700000
 8010f28:	3f8c0000 	svccc	0x008c0000

08010f2c <PixelType::ConvertTxH(float)>:
 8010f2c:	b510      	push	{r4, lr}
 8010f2e:	491d      	ldr	r1, [pc, #116]	; (8010fa4 <PixelType::ConvertTxH(float)+0x78>)
 8010f30:	4604      	mov	r4, r0
 8010f32:	f7f6 ffaf 	bl	8007e94 <__aeabi_fcmplt>
 8010f36:	bb30      	cbnz	r0, 8010f86 <PixelType::ConvertTxH(float)+0x5a>
 8010f38:	4620      	mov	r0, r4
 8010f3a:	491b      	ldr	r1, [pc, #108]	; (8010fa8 <PixelType::ConvertTxH(float)+0x7c>)
 8010f3c:	f7f6 ffaa 	bl	8007e94 <__aeabi_fcmplt>
 8010f40:	bb18      	cbnz	r0, 8010f8a <PixelType::ConvertTxH(float)+0x5e>
 8010f42:	4620      	mov	r0, r4
 8010f44:	4919      	ldr	r1, [pc, #100]	; (8010fac <PixelType::ConvertTxH(float)+0x80>)
 8010f46:	f7f6 ffa5 	bl	8007e94 <__aeabi_fcmplt>
 8010f4a:	bb00      	cbnz	r0, 8010f8e <PixelType::ConvertTxH(float)+0x62>
 8010f4c:	4620      	mov	r0, r4
 8010f4e:	4918      	ldr	r1, [pc, #96]	; (8010fb0 <PixelType::ConvertTxH(float)+0x84>)
 8010f50:	f7f6 ffa0 	bl	8007e94 <__aeabi_fcmplt>
 8010f54:	b9e8      	cbnz	r0, 8010f92 <PixelType::ConvertTxH(float)+0x66>
 8010f56:	4620      	mov	r0, r4
 8010f58:	4916      	ldr	r1, [pc, #88]	; (8010fb4 <PixelType::ConvertTxH(float)+0x88>)
 8010f5a:	f7f6 ff9b 	bl	8007e94 <__aeabi_fcmplt>
 8010f5e:	b9d0      	cbnz	r0, 8010f96 <PixelType::ConvertTxH(float)+0x6a>
 8010f60:	4620      	mov	r0, r4
 8010f62:	4915      	ldr	r1, [pc, #84]	; (8010fb8 <PixelType::ConvertTxH(float)+0x8c>)
 8010f64:	f7f6 ff96 	bl	8007e94 <__aeabi_fcmplt>
 8010f68:	b9b8      	cbnz	r0, 8010f9a <PixelType::ConvertTxH(float)+0x6e>
 8010f6a:	4620      	mov	r0, r4
 8010f6c:	4913      	ldr	r1, [pc, #76]	; (8010fbc <PixelType::ConvertTxH(float)+0x90>)
 8010f6e:	f7f6 ff91 	bl	8007e94 <__aeabi_fcmplt>
 8010f72:	b9a0      	cbnz	r0, 8010f9e <PixelType::ConvertTxH(float)+0x72>
 8010f74:	4620      	mov	r0, r4
 8010f76:	4912      	ldr	r1, [pc, #72]	; (8010fc0 <PixelType::ConvertTxH(float)+0x94>)
 8010f78:	f7f6 ff8c 	bl	8007e94 <__aeabi_fcmplt>
 8010f7c:	2800      	cmp	r0, #0
 8010f7e:	bf14      	ite	ne
 8010f80:	20fe      	movne	r0, #254	; 0xfe
 8010f82:	2000      	moveq	r0, #0
 8010f84:	bd10      	pop	{r4, pc}
 8010f86:	2000      	movs	r0, #0
 8010f88:	e7fc      	b.n	8010f84 <PixelType::ConvertTxH(float)+0x58>
 8010f8a:	2080      	movs	r0, #128	; 0x80
 8010f8c:	e7fa      	b.n	8010f84 <PixelType::ConvertTxH(float)+0x58>
 8010f8e:	20c0      	movs	r0, #192	; 0xc0
 8010f90:	e7f8      	b.n	8010f84 <PixelType::ConvertTxH(float)+0x58>
 8010f92:	20e0      	movs	r0, #224	; 0xe0
 8010f94:	e7f6      	b.n	8010f84 <PixelType::ConvertTxH(float)+0x58>
 8010f96:	20f0      	movs	r0, #240	; 0xf0
 8010f98:	e7f4      	b.n	8010f84 <PixelType::ConvertTxH(float)+0x58>
 8010f9a:	20f8      	movs	r0, #248	; 0xf8
 8010f9c:	e7f2      	b.n	8010f84 <PixelType::ConvertTxH(float)+0x58>
 8010f9e:	20fc      	movs	r0, #252	; 0xfc
 8010fa0:	e7f0      	b.n	8010f84 <PixelType::ConvertTxH(float)+0x58>
 8010fa2:	bf00      	nop
 8010fa4:	3da00000 	stccc	0, cr0, [r0]
 8010fa8:	3e700000 	cdpcc	0, 7, cr0, cr0, cr0, {0}
 8010fac:	3ec80000 	cdpcc	0, 12, cr0, cr8, cr0, {0}
 8010fb0:	3f0c0000 	svccc	0x000c0000
 8010fb4:	3f340000 	svccc	0x00340000
 8010fb8:	3f5c0000 	svccc	0x005c0000
 8010fbc:	3f820000 	svccc	0x00820000
 8010fc0:	3f960000 	svccc	0x00960000

08010fc4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>:
 8010fc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010fc6:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8010fca:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8010fce:	b2d4      	uxtb	r4, r2
 8010fd0:	4a10      	ldr	r2, [pc, #64]	; (8011014 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x50>)
 8010fd2:	4605      	mov	r5, r0
 8010fd4:	6810      	ldr	r0, [r2, #0]
 8010fd6:	6802      	ldr	r2, [r0, #0]
 8010fd8:	2a07      	cmp	r2, #7
 8010fda:	d007      	beq.n	8010fec <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x28>
 8010fdc:	460a      	mov	r2, r1
 8010fde:	e9cd 6400 	strd	r6, r4, [sp]
 8010fe2:	4629      	mov	r1, r5
 8010fe4:	f000 ff58 	bl	8011e98 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8010fe8:	b004      	add	sp, #16
 8010fea:	bd70      	pop	{r4, r5, r6, pc}
 8010fec:	42b3      	cmp	r3, r6
 8010fee:	f04f 0200 	mov.w	r2, #0
 8010ff2:	d10a      	bne.n	801100a <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x46>
 8010ff4:	42a3      	cmp	r3, r4
 8010ff6:	d108      	bne.n	801100a <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x46>
 8010ff8:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8010ffc:	4613      	mov	r3, r2
 8010ffe:	9200      	str	r2, [sp, #0]
 8011000:	460a      	mov	r2, r1
 8011002:	4629      	mov	r1, r5
 8011004:	f000 ffd0 	bl	8011fa8 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8011008:	e7ee      	b.n	8010fe8 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x24>
 801100a:	e9cd 4201 	strd	r4, r2, [sp, #4]
 801100e:	9600      	str	r6, [sp, #0]
 8011010:	e7f6      	b.n	8011000 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]+0x3c>
 8011012:	bf00      	nop
 8011014:	2000c99c 	mulcs	r0, ip, r9

08011018 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 8011018:	b570      	push	{r4, r5, r6, lr}
 801101a:	4605      	mov	r5, r0
 801101c:	2400      	movs	r4, #0
 801101e:	4e06      	ldr	r6, [pc, #24]	; (8011038 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x20>)
 8011020:	6833      	ldr	r3, [r6, #0]
 8011022:	429c      	cmp	r4, r3
 8011024:	d300      	bcc.n	8011028 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x10>
 8011026:	bd70      	pop	{r4, r5, r6, pc}
 8011028:	4621      	mov	r1, r4
 801102a:	2200      	movs	r2, #0
 801102c:	4628      	mov	r0, r5
 801102e:	f7ff ffc9 	bl	8010fc4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8011032:	3401      	adds	r4, #1
 8011034:	e7f4      	b.n	8011020 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x8>
 8011036:	bf00      	nop
 8011038:	2000c998 	mulcs	r0, r8, r9

0801103c <PixelPatterns::PixelPatterns(unsigned int)>:
 801103c:	2908      	cmp	r1, #8
 801103e:	bf28      	it	cs
 8011040:	2108      	movcs	r1, #8
 8011042:	4b0b      	ldr	r3, [pc, #44]	; (8011070 <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 8011044:	4a0b      	ldr	r2, [pc, #44]	; (8011074 <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	b510      	push	{r4, lr}
 801104a:	6013      	str	r3, [r2, #0]
 801104c:	4a0a      	ldr	r2, [pc, #40]	; (8011078 <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 801104e:	6011      	str	r1, [r2, #0]
 8011050:	685a      	ldr	r2, [r3, #4]
 8011052:	4b0a      	ldr	r3, [pc, #40]	; (801107c <PixelPatterns::PixelPatterns(unsigned int)+0x40>)
 8011054:	2100      	movs	r1, #0
 8011056:	601a      	str	r2, [r3, #0]
 8011058:	2208      	movs	r2, #8
 801105a:	4b09      	ldr	r3, [pc, #36]	; (8011080 <PixelPatterns::PixelPatterns(unsigned int)+0x44>)
 801105c:	681c      	ldr	r4, [r3, #0]
 801105e:	4b09      	ldr	r3, [pc, #36]	; (8011084 <PixelPatterns::PixelPatterns(unsigned int)+0x48>)
 8011060:	3a01      	subs	r2, #1
 8011062:	61d9      	str	r1, [r3, #28]
 8011064:	601c      	str	r4, [r3, #0]
 8011066:	6199      	str	r1, [r3, #24]
 8011068:	f103 0320 	add.w	r3, r3, #32
 801106c:	d1f8      	bne.n	8011060 <PixelPatterns::PixelPatterns(unsigned int)+0x24>
 801106e:	bd10      	pop	{r4, pc}
 8011070:	2000c9ac 	andcs	ip, r0, ip, lsr #19
 8011074:	2000c99c 	mulcs	r0, ip, r9
 8011078:	2000c990 	mulcs	r0, r0, r9
 801107c:	2000c998 	mulcs	r0, r8, r9
 8011080:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4
 8011084:	2000c890 	mulcs	r0, r0, r8

08011088 <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 8011088:	2805      	cmp	r0, #5
 801108a:	bfdd      	ittte	le
 801108c:	220e      	movle	r2, #14
 801108e:	4b02      	ldrle	r3, [pc, #8]	; (8011098 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 8011090:	fb02 3000 	mlale	r0, r2, r0, r3
 8011094:	4801      	ldrgt	r0, [pc, #4]	; (801109c <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 8011096:	4770      	bx	lr
 8011098:	0801b2f0 	stmdaeq	r1, {r4, r5, r6, r7, r9, ip, sp, pc}
 801109c:	0801b24c 	stmdaeq	r1, {r2, r3, r6, r9, ip, sp, pc}

080110a0 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 80110a0:	b5e0      	push	{r5, r6, r7, lr}
 80110a2:	4608      	mov	r0, r1
 80110a4:	460d      	mov	r5, r1
 80110a6:	4617      	mov	r7, r2
 80110a8:	461e      	mov	r6, r3
 80110aa:	f7ff ffb5 	bl	8011018 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 80110ae:	2301      	movs	r3, #1
 80110b0:	4905      	ldr	r1, [pc, #20]	; (80110c8 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x28>)
 80110b2:	22ff      	movs	r2, #255	; 0xff
 80110b4:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 80110b8:	61cb      	str	r3, [r1, #28]
 80110ba:	2300      	movs	r3, #0
 80110bc:	604f      	str	r7, [r1, #4]
 80110be:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80110c2:	618e      	str	r6, [r1, #24]
 80110c4:	bde0      	pop	{r5, r6, r7, pc}
 80110c6:	bf00      	nop
 80110c8:	2000c890 	mulcs	r0, r0, r8

080110cc <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 80110cc:	b5e0      	push	{r5, r6, r7, lr}
 80110ce:	4608      	mov	r0, r1
 80110d0:	460d      	mov	r5, r1
 80110d2:	461e      	mov	r6, r3
 80110d4:	4617      	mov	r7, r2
 80110d6:	f7ff ff9f 	bl	8011018 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 80110da:	2302      	movs	r3, #2
 80110dc:	4907      	ldr	r1, [pc, #28]	; (80110fc <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 80110de:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 80110e2:	61cb      	str	r3, [r1, #28]
 80110e4:	9b04      	ldr	r3, [sp, #16]
 80110e6:	e9c1 7602 	strd	r7, r6, [r1, #8]
 80110ea:	604b      	str	r3, [r1, #4]
 80110ec:	4b04      	ldr	r3, [pc, #16]	; (8011100 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	610b      	str	r3, [r1, #16]
 80110f2:	2300      	movs	r3, #0
 80110f4:	614b      	str	r3, [r1, #20]
 80110f6:	9b05      	ldr	r3, [sp, #20]
 80110f8:	618b      	str	r3, [r1, #24]
 80110fa:	bde0      	pop	{r5, r6, r7, pc}
 80110fc:	2000c890 	mulcs	r0, r0, r8
 8011100:	2000c998 	mulcs	r0, r8, r9

08011104 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 8011104:	b5e0      	push	{r5, r6, r7, lr}
 8011106:	4608      	mov	r0, r1
 8011108:	460d      	mov	r5, r1
 801110a:	461f      	mov	r7, r3
 801110c:	4616      	mov	r6, r2
 801110e:	f7ff ff83 	bl	8011018 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8011112:	2303      	movs	r3, #3
 8011114:	4906      	ldr	r1, [pc, #24]	; (8011130 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 8011116:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 801111a:	61cb      	str	r3, [r1, #28]
 801111c:	4b05      	ldr	r3, [pc, #20]	; (8011134 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 801111e:	604f      	str	r7, [r1, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	608e      	str	r6, [r1, #8]
 8011124:	610b      	str	r3, [r1, #16]
 8011126:	2300      	movs	r3, #0
 8011128:	614b      	str	r3, [r1, #20]
 801112a:	9b04      	ldr	r3, [sp, #16]
 801112c:	618b      	str	r3, [r1, #24]
 801112e:	bde0      	pop	{r5, r6, r7, pc}
 8011130:	2000c890 	mulcs	r0, r0, r8
 8011134:	2000c998 	mulcs	r0, r8, r9

08011138 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 8011138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801113a:	4608      	mov	r0, r1
 801113c:	460d      	mov	r5, r1
 801113e:	461f      	mov	r7, r3
 8011140:	4616      	mov	r6, r2
 8011142:	f7ff ff69 	bl	8011018 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 8011146:	2304      	movs	r3, #4
 8011148:	4c12      	ldr	r4, [pc, #72]	; (8011194 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 801114a:	4913      	ldr	r1, [pc, #76]	; (8011198 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 801114c:	6820      	ldr	r0, [r4, #0]
 801114e:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 8011152:	61cb      	str	r3, [r1, #28]
 8011154:	1e43      	subs	r3, r0, #1
 8011156:	005b      	lsls	r3, r3, #1
 8011158:	b29b      	uxth	r3, r3
 801115a:	610b      	str	r3, [r1, #16]
 801115c:	2300      	movs	r3, #0
 801115e:	4d0f      	ldr	r5, [pc, #60]	; (801119c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x64>)
 8011160:	614b      	str	r3, [r1, #20]
 8011162:	682b      	ldr	r3, [r5, #0]
 8011164:	604f      	str	r7, [r1, #4]
 8011166:	608e      	str	r6, [r1, #8]
 8011168:	b97b      	cbnz	r3, 801118a <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x52>
 801116a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801116e:	4298      	cmp	r0, r3
 8011170:	bf2c      	ite	cs
 8011172:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 8011176:	0080      	lslcc	r0, r0, #2
 8011178:	f005 fa6c 	bl	8016654 <operator new[](unsigned int)>
 801117c:	2200      	movs	r2, #0
 801117e:	6823      	ldr	r3, [r4, #0]
 8011180:	6028      	str	r0, [r5, #0]
 8011182:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8011186:	4298      	cmp	r0, r3
 8011188:	d100      	bne.n	801118c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x54>
 801118a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801118c:	f840 2b04 	str.w	r2, [r0], #4
 8011190:	e7f9      	b.n	8011186 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4e>
 8011192:	bf00      	nop
 8011194:	2000c998 	mulcs	r0, r8, r9
 8011198:	2000c890 	mulcs	r0, r0, r8
 801119c:	2000c994 	mulcs	r0, r4, r9

080111a0 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 80111a0:	b5e0      	push	{r5, r6, r7, lr}
 80111a2:	4608      	mov	r0, r1
 80111a4:	460d      	mov	r5, r1
 80111a6:	461e      	mov	r6, r3
 80111a8:	4617      	mov	r7, r2
 80111aa:	f7ff ff35 	bl	8011018 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 80111ae:	2305      	movs	r3, #5
 80111b0:	4907      	ldr	r1, [pc, #28]	; (80111d0 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 80111b2:	eb01 1145 	add.w	r1, r1, r5, lsl #5
 80111b6:	61cb      	str	r3, [r1, #28]
 80111b8:	9b05      	ldr	r3, [sp, #20]
 80111ba:	e9c1 7602 	strd	r7, r6, [r1, #8]
 80111be:	604b      	str	r3, [r1, #4]
 80111c0:	9b04      	ldr	r3, [sp, #16]
 80111c2:	610b      	str	r3, [r1, #16]
 80111c4:	2300      	movs	r3, #0
 80111c6:	614b      	str	r3, [r1, #20]
 80111c8:	9b06      	ldr	r3, [sp, #24]
 80111ca:	618b      	str	r3, [r1, #24]
 80111cc:	bde0      	pop	{r5, r6, r7, pc}
 80111ce:	bf00      	nop
 80111d0:	2000c890 	mulcs	r0, r0, r8

080111d4 <PixelPatterns::Wheel(unsigned char)>:
 80111d4:	43cb      	mvns	r3, r1
 80111d6:	b2db      	uxtb	r3, r3
 80111d8:	2b54      	cmp	r3, #84	; 0x54
 80111da:	d809      	bhi.n	80111f0 <PixelPatterns::Wheel(unsigned char)+0x1c>
 80111dc:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	1e5a      	subs	r2, r3, #1
 80111e4:	4258      	negs	r0, r3
 80111e6:	b2d2      	uxtb	r2, r2
 80111e8:	b2c0      	uxtb	r0, r0
 80111ea:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80111ee:	4770      	bx	lr
 80111f0:	2ba9      	cmp	r3, #169	; 0xa9
 80111f2:	d809      	bhi.n	8011208 <PixelPatterns::Wheel(unsigned char)+0x34>
 80111f4:	f1c1 01aa 	rsb	r1, r1, #170	; 0xaa
 80111f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80111fc:	b2c9      	uxtb	r1, r1
 80111fe:	43c8      	mvns	r0, r1
 8011200:	b2c0      	uxtb	r0, r0
 8011202:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8011206:	4770      	bx	lr
 8011208:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
 801120c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011210:	b2c9      	uxtb	r1, r1
 8011212:	0208      	lsls	r0, r1, #8
 8011214:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 8011218:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801121c:	4770      	bx	lr
	...

08011220 <PixelPatterns::Increment(unsigned int)>:
 8011220:	4a0d      	ldr	r2, [pc, #52]	; (8011258 <PixelPatterns::Increment(unsigned int)+0x38>)
 8011222:	b510      	push	{r4, lr}
 8011224:	014c      	lsls	r4, r1, #5
 8011226:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 801122a:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 801122e:	b930      	cbnz	r0, 801123e <PixelPatterns::Increment(unsigned int)+0x1e>
 8011230:	690a      	ldr	r2, [r1, #16]
 8011232:	3301      	adds	r3, #1
 8011234:	4293      	cmp	r3, r2
 8011236:	bf18      	it	ne
 8011238:	4618      	movne	r0, r3
 801123a:	6148      	str	r0, [r1, #20]
 801123c:	bd10      	pop	{r4, pc}
 801123e:	b92b      	cbnz	r3, 801124c <PixelPatterns::Increment(unsigned int)+0x2c>
 8011240:	4422      	add	r2, r4
 8011242:	6913      	ldr	r3, [r2, #16]
 8011244:	3b01      	subs	r3, #1
 8011246:	b29b      	uxth	r3, r3
 8011248:	6153      	str	r3, [r2, #20]
 801124a:	e7f7      	b.n	801123c <PixelPatterns::Increment(unsigned int)+0x1c>
 801124c:	3b01      	subs	r3, #1
 801124e:	614b      	str	r3, [r1, #20]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d1f3      	bne.n	801123c <PixelPatterns::Increment(unsigned int)+0x1c>
 8011254:	e7f4      	b.n	8011240 <PixelPatterns::Increment(unsigned int)+0x20>
 8011256:	bf00      	nop
 8011258:	2000c890 	mulcs	r0, r0, r8

0801125c <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 801125c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011260:	4605      	mov	r5, r0
 8011262:	460c      	mov	r4, r1
 8011264:	2700      	movs	r7, #0
 8011266:	4b11      	ldr	r3, [pc, #68]	; (80112ac <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>)
 8011268:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80112b0 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x54>
 801126c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011270:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8011274:	f8d8 3000 	ldr.w	r3, [r8]
 8011278:	b2be      	uxth	r6, r7
 801127a:	42b3      	cmp	r3, r6
 801127c:	f107 0701 	add.w	r7, r7, #1
 8011280:	d805      	bhi.n	801128e <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x32>
 8011282:	4621      	mov	r1, r4
 8011284:	4628      	mov	r0, r5
 8011286:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801128a:	f7ff bfc9 	b.w	8011220 <PixelPatterns::Increment(unsigned int)>
 801128e:	0231      	lsls	r1, r6, #8
 8011290:	fbb1 f1f3 	udiv	r1, r1, r3
 8011294:	4449      	add	r1, r9
 8011296:	4628      	mov	r0, r5
 8011298:	b2c9      	uxtb	r1, r1
 801129a:	f7ff ff9b 	bl	80111d4 <PixelPatterns::Wheel(unsigned char)>
 801129e:	4631      	mov	r1, r6
 80112a0:	4602      	mov	r2, r0
 80112a2:	4620      	mov	r0, r4
 80112a4:	f7ff fe8e 	bl	8010fc4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 80112a8:	e7e4      	b.n	8011274 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x18>
 80112aa:	bf00      	nop
 80112ac:	2000c890 	mulcs	r0, r0, r8
 80112b0:	2000c998 	mulcs	r0, r8, r9

080112b4 <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 80112b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112b8:	4605      	mov	r5, r0
 80112ba:	460c      	mov	r4, r1
 80112bc:	f04f 0b00 	mov.w	fp, #0
 80112c0:	4b11      	ldr	r3, [pc, #68]	; (8011308 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x54>)
 80112c2:	4e12      	ldr	r6, [pc, #72]	; (801130c <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 80112c4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80112c8:	f8d3 9014 	ldr.w	r9, [r3, #20]
 80112cc:	f8df a040 	ldr.w	sl, [pc, #64]	; 8011310 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 80112d0:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 80112d4:	6833      	ldr	r3, [r6, #0]
 80112d6:	fa1f f18b 	uxth.w	r1, fp
 80112da:	428b      	cmp	r3, r1
 80112dc:	d805      	bhi.n	80112ea <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x36>
 80112de:	4621      	mov	r1, r4
 80112e0:	4628      	mov	r0, r5
 80112e2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112e6:	f7ff bf9b 	b.w	8011220 <PixelPatterns::Increment(unsigned int)>
 80112ea:	eb09 0301 	add.w	r3, r9, r1
 80112ee:	fb0a f303 	mul.w	r3, sl, r3
 80112f2:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 80112f6:	bf94      	ite	ls
 80112f8:	463a      	movls	r2, r7
 80112fa:	4642      	movhi	r2, r8
 80112fc:	4620      	mov	r0, r4
 80112fe:	f7ff fe61 	bl	8010fc4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8011302:	f10b 0b01 	add.w	fp, fp, #1
 8011306:	e7e5      	b.n	80112d4 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x20>
 8011308:	2000c890 	mulcs	r0, r0, r8
 801130c:	2000c998 	mulcs	r0, r8, r9
 8011310:	aaaaaaab 	bge	6abbdc4 <__stack_size+0x6ab95c4>

08011314 <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 8011314:	b538      	push	{r3, r4, r5, lr}
 8011316:	460c      	mov	r4, r1
 8011318:	4605      	mov	r5, r0
 801131a:	4b07      	ldr	r3, [pc, #28]	; (8011338 <PixelPatterns::ColourWipeUpdate(unsigned int)+0x24>)
 801131c:	4620      	mov	r0, r4
 801131e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011322:	6959      	ldr	r1, [r3, #20]
 8011324:	689a      	ldr	r2, [r3, #8]
 8011326:	f7ff fe4d 	bl	8010fc4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 801132a:	4621      	mov	r1, r4
 801132c:	4628      	mov	r0, r5
 801132e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011332:	f7ff bf75 	b.w	8011220 <PixelPatterns::Increment(unsigned int)>
 8011336:	bf00      	nop
 8011338:	2000c890 	mulcs	r0, r0, r8

0801133c <PixelPatterns::ScannerUpdate(unsigned int)>:
 801133c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011340:	468b      	mov	fp, r1
 8011342:	f04f 0900 	mov.w	r9, #0
 8011346:	4b27      	ldr	r3, [pc, #156]	; (80113e4 <PixelPatterns::ScannerUpdate(unsigned int)+0xa8>)
 8011348:	b085      	sub	sp, #20
 801134a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801134e:	e9d3 7604 	ldrd	r7, r6, [r3, #16]
 8011352:	689d      	ldr	r5, [r3, #8]
 8011354:	f8df a090 	ldr.w	sl, [pc, #144]	; 80113e8 <PixelPatterns::ScannerUpdate(unsigned int)+0xac>
 8011358:	00b3      	lsls	r3, r6, #2
 801135a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80113ec <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 801135e:	9002      	str	r0, [sp, #8]
 8011360:	9301      	str	r3, [sp, #4]
 8011362:	1bbf      	subs	r7, r7, r6
 8011364:	f8da 2000 	ldr.w	r2, [sl]
 8011368:	fa1f f489 	uxth.w	r4, r9
 801136c:	42a2      	cmp	r2, r4
 801136e:	d806      	bhi.n	801137e <PixelPatterns::ScannerUpdate(unsigned int)+0x42>
 8011370:	4659      	mov	r1, fp
 8011372:	9802      	ldr	r0, [sp, #8]
 8011374:	b005      	add	sp, #20
 8011376:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801137a:	f7ff bf51 	b.w	8011220 <PixelPatterns::Increment(unsigned int)>
 801137e:	42a6      	cmp	r6, r4
 8011380:	d10b      	bne.n	801139a <PixelPatterns::ScannerUpdate(unsigned int)+0x5e>
 8011382:	462a      	mov	r2, r5
 8011384:	4631      	mov	r1, r6
 8011386:	4658      	mov	r0, fp
 8011388:	f7ff fe1c 	bl	8010fc4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 801138c:	f8d8 2000 	ldr.w	r2, [r8]
 8011390:	9b01      	ldr	r3, [sp, #4]
 8011392:	50d5      	str	r5, [r2, r3]
 8011394:	f109 0901 	add.w	r9, r9, #1
 8011398:	e7e4      	b.n	8011364 <PixelPatterns::ScannerUpdate(unsigned int)+0x28>
 801139a:	42a7      	cmp	r7, r4
 801139c:	d109      	bne.n	80113b2 <PixelPatterns::ScannerUpdate(unsigned int)+0x76>
 801139e:	462a      	mov	r2, r5
 80113a0:	4639      	mov	r1, r7
 80113a2:	4658      	mov	r0, fp
 80113a4:	f7ff fe0e 	bl	8010fc4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 80113a8:	f8d8 2000 	ldr.w	r2, [r8]
 80113ac:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 80113b0:	e7f0      	b.n	8011394 <PixelPatterns::ScannerUpdate(unsigned int)+0x58>
 80113b2:	f8d8 2000 	ldr.w	r2, [r8]
 80113b6:	4658      	mov	r0, fp
 80113b8:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 80113bc:	f3c1 2246 	ubfx	r2, r1, #9, #7
 80113c0:	f3c1 4c46 	ubfx	ip, r1, #17, #7
 80113c4:	0212      	lsls	r2, r2, #8
 80113c6:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80113ca:	f3c1 0146 	ubfx	r1, r1, #1, #7
 80113ce:	430a      	orrs	r2, r1
 80113d0:	4621      	mov	r1, r4
 80113d2:	9203      	str	r2, [sp, #12]
 80113d4:	f7ff fdf6 	bl	8010fc4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 80113d8:	f8d8 1000 	ldr.w	r1, [r8]
 80113dc:	9a03      	ldr	r2, [sp, #12]
 80113de:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
 80113e2:	e7d7      	b.n	8011394 <PixelPatterns::ScannerUpdate(unsigned int)+0x58>
 80113e4:	2000c890 	mulcs	r0, r0, r8
 80113e8:	2000c998 	mulcs	r0, r8, r9
 80113ec:	2000c994 	mulcs	r0, r4, r9

080113f0 <PixelPatterns::FadeUpdate(unsigned int)>:
 80113f0:	4a20      	ldr	r2, [pc, #128]	; (8011474 <PixelPatterns::FadeUpdate(unsigned int)+0x84>)
 80113f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113f6:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 80113fa:	e9d2 c302 	ldrd	ip, r3, [r2, #8]
 80113fe:	460e      	mov	r6, r1
 8011400:	e9d2 1704 	ldrd	r1, r7, [r2, #16]
 8011404:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011408:	437a      	muls	r2, r7
 801140a:	f3cc 2407 	ubfx	r4, ip, #8, #8
 801140e:	4605      	mov	r5, r0
 8011410:	1bc8      	subs	r0, r1, r7
 8011412:	fb00 2204 	mla	r2, r0, r4, r2
 8011416:	f3c3 4407 	ubfx	r4, r3, #16, #8
 801141a:	437c      	muls	r4, r7
 801141c:	b2db      	uxtb	r3, r3
 801141e:	437b      	muls	r3, r7
 8011420:	f3cc 4e07 	ubfx	lr, ip, #16, #8
 8011424:	fb00 440e 	mla	r4, r0, lr, r4
 8011428:	fa5f fc8c 	uxtb.w	ip, ip
 801142c:	fb00 330c 	mla	r3, r0, ip, r3
 8011430:	fbb2 f2f1 	udiv	r2, r2, r1
 8011434:	fbb4 f4f1 	udiv	r4, r4, r1
 8011438:	fbb3 f3f1 	udiv	r3, r3, r1
 801143c:	2700      	movs	r7, #0
 801143e:	0212      	lsls	r2, r2, #8
 8011440:	0424      	lsls	r4, r4, #16
 8011442:	b292      	uxth	r2, r2
 8011444:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8011448:	4314      	orrs	r4, r2
 801144a:	b2db      	uxtb	r3, r3
 801144c:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8011478 <PixelPatterns::FadeUpdate(unsigned int)+0x88>
 8011450:	431c      	orrs	r4, r3
 8011452:	f8d8 3000 	ldr.w	r3, [r8]
 8011456:	429f      	cmp	r7, r3
 8011458:	d305      	bcc.n	8011466 <PixelPatterns::FadeUpdate(unsigned int)+0x76>
 801145a:	4631      	mov	r1, r6
 801145c:	4628      	mov	r0, r5
 801145e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011462:	f7ff bedd 	b.w	8011220 <PixelPatterns::Increment(unsigned int)>
 8011466:	4639      	mov	r1, r7
 8011468:	4622      	mov	r2, r4
 801146a:	4630      	mov	r0, r6
 801146c:	f7ff fdaa 	bl	8010fc4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .isra.0]>
 8011470:	3701      	adds	r7, #1
 8011472:	e7ee      	b.n	8011452 <PixelPatterns::FadeUpdate(unsigned int)+0x62>
 8011474:	2000c890 	mulcs	r0, r0, r8
 8011478:	2000c998 	mulcs	r0, r8, r9

0801147c <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 801147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801147e:	4b12      	ldr	r3, [pc, #72]	; (80114c8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 8011480:	014e      	lsls	r6, r1, #5
 8011482:	599c      	ldr	r4, [r3, r6]
 8011484:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 8011488:	686f      	ldr	r7, [r5, #4]
 801148a:	1b14      	subs	r4, r2, r4
 801148c:	42bc      	cmp	r4, r7
 801148e:	d319      	bcc.n	80114c4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 8011490:	519a      	str	r2, [r3, r6]
 8011492:	69eb      	ldr	r3, [r5, #28]
 8011494:	3b01      	subs	r3, #1
 8011496:	2b04      	cmp	r3, #4
 8011498:	d814      	bhi.n	80114c4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 801149a:	e8df f003 	tbb	[pc, r3]
 801149e:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 80114a2:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 80114a6:	feda 2001 	cdp2	0, 13, cr2, cr10, cr1, {0}
 80114aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114ac:	f7ff ff02 	bl	80112b4 <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 80114b0:	e7fa      	b.n	80114a8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 80114b2:	f7ff ff2f 	bl	8011314 <PixelPatterns::ColourWipeUpdate(unsigned int)>
 80114b6:	e7f7      	b.n	80114a8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 80114b8:	f7ff ff40 	bl	801133c <PixelPatterns::ScannerUpdate(unsigned int)>
 80114bc:	e7f4      	b.n	80114a8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 80114be:	f7ff ff97 	bl	80113f0 <PixelPatterns::FadeUpdate(unsigned int)>
 80114c2:	e7f1      	b.n	80114a8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 80114c4:	2000      	movs	r0, #0
 80114c6:	e7f0      	b.n	80114aa <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 80114c8:	2000c890 	mulcs	r0, r0, r8

080114cc <PixelPatterns::Run()>:
 80114cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114d0:	4f11      	ldr	r7, [pc, #68]	; (8011518 <PixelPatterns::Run()+0x4c>)
 80114d2:	4606      	mov	r6, r0
 80114d4:	6838      	ldr	r0, [r7, #0]
 80114d6:	f000 fc5d 	bl	8011d94 <WS28xxMulti::IsUpdating()>
 80114da:	4604      	mov	r4, r0
 80114dc:	b9c8      	cbnz	r0, 8011512 <PixelPatterns::Run()+0x46>
 80114de:	4605      	mov	r5, r0
 80114e0:	4b0e      	ldr	r3, [pc, #56]	; (801151c <PixelPatterns::Run()+0x50>)
 80114e2:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8011520 <PixelPatterns::Run()+0x54>
 80114e6:	f8d3 9000 	ldr.w	r9, [r3]
 80114ea:	f8d8 3000 	ldr.w	r3, [r8]
 80114ee:	b2e9      	uxtb	r1, r5
 80114f0:	428b      	cmp	r3, r1
 80114f2:	f105 0501 	add.w	r5, r5, #1
 80114f6:	d805      	bhi.n	8011504 <PixelPatterns::Run()+0x38>
 80114f8:	b15c      	cbz	r4, 8011512 <PixelPatterns::Run()+0x46>
 80114fa:	6838      	ldr	r0, [r7, #0]
 80114fc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011500:	f000 bb08 	b.w	8011b14 <WS28xxMulti::Update()>
 8011504:	464a      	mov	r2, r9
 8011506:	4630      	mov	r0, r6
 8011508:	f7ff ffb8 	bl	801147c <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 801150c:	4320      	orrs	r0, r4
 801150e:	b2c4      	uxtb	r4, r0
 8011510:	e7eb      	b.n	80114ea <PixelPatterns::Run()+0x1e>
 8011512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011516:	bf00      	nop
 8011518:	2000c99c 	mulcs	r0, ip, r9
 801151c:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4
 8011520:	2000c990 	mulcs	r0, r0, r9

08011524 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>:
 8011524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011526:	f04f 0c80 	mov.w	ip, #128	; 0x80
 801152a:	2501      	movs	r5, #1
 801152c:	4c1d      	ldr	r4, [pc, #116]	; (80115a4 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]+0x80>)
 801152e:	f89d e014 	ldrb.w	lr, [sp, #20]
 8011532:	eb04 1481 	add.w	r4, r4, r1, lsl #6
 8011536:	1d81      	adds	r1, r0, #6
 8011538:	481b      	ldr	r0, [pc, #108]	; (80115a8 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]+0x84>)
 801153a:	b2c9      	uxtb	r1, r1
 801153c:	4420      	add	r0, r4
 801153e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8011542:	f101 6108 	add.w	r1, r1, #142606336	; 0x8800000
 8011546:	f501 7100 	add.w	r1, r1, #512	; 0x200
 801154a:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801154e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8011552:	0080      	lsls	r0, r0, #2
 8011554:	0089      	lsls	r1, r1, #2
 8011556:	ea12 060c 	ands.w	r6, r2, ip
 801155a:	bf0b      	itete	eq
 801155c:	f5a0 67c0 	subeq.w	r7, r0, #1536	; 0x600
 8011560:	f5a0 66c0 	subne.w	r6, r0, #1536	; 0x600
 8011564:	603e      	streq	r6, [r7, #0]
 8011566:	6035      	strne	r5, [r6, #0]
 8011568:	ea13 060c 	ands.w	r6, r3, ip
 801156c:	bf0b      	itete	eq
 801156e:	f5a0 6780 	subeq.w	r7, r0, #1024	; 0x400
 8011572:	f5a0 6680 	subne.w	r6, r0, #1024	; 0x400
 8011576:	603e      	streq	r6, [r7, #0]
 8011578:	6035      	strne	r5, [r6, #0]
 801157a:	ea1e 060c 	ands.w	r6, lr, ip
 801157e:	bf15      	itete	ne
 8011580:	f5a0 7600 	subne.w	r6, r0, #512	; 0x200
 8011584:	f5a0 7700 	subeq.w	r7, r0, #512	; 0x200
 8011588:	6035      	strne	r5, [r6, #0]
 801158a:	603e      	streq	r6, [r7, #0]
 801158c:	ea14 060c 	ands.w	r6, r4, ip
 8011590:	bf14      	ite	ne
 8011592:	6005      	strne	r5, [r0, #0]
 8011594:	6006      	streq	r6, [r0, #0]
 8011596:	3040      	adds	r0, #64	; 0x40
 8011598:	4281      	cmp	r1, r0
 801159a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801159e:	d1da      	bne.n	8011556 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]+0x32>
 80115a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115a2:	bf00      	nop
 80115a4:	2000c9b0 			; <UNDEFINED> instruction: 0x2000c9b0
 80115a8:	e1100030 	tst	r0, r0, lsr r0

080115ac <TIMER3_IRQHandler>:
 80115ac:	f3bf 8f5f 	dmb	sy
 80115b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80115b4:	f8d3 2810 	ldr.w	r2, [r3, #2064]	; 0x810
 80115b8:	0791      	lsls	r1, r2, #30
 80115ba:	d51e      	bpl.n	80115fa <TIMER3_IRQHandler+0x4e>
 80115bc:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80115c0:	f021 0101 	bic.w	r1, r1, #1
 80115c4:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
 80115c8:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
 80115cc:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80115d0:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
 80115d4:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
 80115d8:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80115dc:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
 80115e0:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
 80115e4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80115e8:	f8c3 140c 	str.w	r1, [r3, #1036]	; 0x40c
 80115ec:	2100      	movs	r1, #0
 80115ee:	4b07      	ldr	r3, [pc, #28]	; (801160c <TIMER3_IRQHandler+0x60>)
 80115f0:	7019      	strb	r1, [r3, #0]
 80115f2:	f44f 517f 	mov.w	r1, #16320	; 0x3fc0
 80115f6:	4b06      	ldr	r3, [pc, #24]	; (8011610 <TIMER3_IRQHandler+0x64>)
 80115f8:	6159      	str	r1, [r3, #20]
 80115fa:	43d2      	mvns	r2, r2
 80115fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011600:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
 8011604:	f3bf 8f5f 	dmb	sy
 8011608:	4770      	bx	lr
 801160a:	bf00      	nop
 801160c:	2000c9a8 	andcs	ip, r0, r8, lsr #19
 8011610:	40011000 	andmi	r1, r1, r0

08011614 <WS28xxMulti::~WS28xxMulti()>:
 8011614:	2200      	movs	r2, #0
 8011616:	4b01      	ldr	r3, [pc, #4]	; (801161c <WS28xxMulti::~WS28xxMulti()+0x8>)
 8011618:	601a      	str	r2, [r3, #0]
 801161a:	4770      	bx	lr
 801161c:	2000c9ac 	andcs	ip, r0, ip, lsr #19

08011620 <WS28xxMulti::Setup(unsigned char, unsigned char)>:
 8011620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011624:	4680      	mov	r8, r0
 8011626:	b08d      	sub	sp, #52	; 0x34
 8011628:	4608      	mov	r0, r1
 801162a:	4614      	mov	r4, r2
 801162c:	f007 fabc 	bl	8018ba8 <__popcountsi2>
 8011630:	4607      	mov	r7, r0
 8011632:	4620      	mov	r0, r4
 8011634:	f007 fab8 	bl	8018ba8 <__popcountsi2>
 8011638:	4d76      	ldr	r5, [pc, #472]	; (8011814 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1f4>)
 801163a:	4606      	mov	r6, r0
 801163c:	f240 7001 	movw	r0, #1793	; 0x701
 8011640:	f005 fc8e 	bl	8016f60 <rcu_periph_clock_enable>
 8011644:	4628      	mov	r0, r5
 8011646:	2400      	movs	r4, #0
 8011648:	f005 fdee 	bl	8017228 <timer_deinit>
 801164c:	2395      	movs	r3, #149	; 0x95
 801164e:	f04f 0996 	mov.w	r9, #150	; 0x96
 8011652:	4628      	mov	r0, r5
 8011654:	a901      	add	r1, sp, #4
 8011656:	9303      	str	r3, [sp, #12]
 8011658:	9401      	str	r4, [sp, #4]
 801165a:	f8ad 4008 	strh.w	r4, [sp, #8]
 801165e:	f8ad 4010 	strh.w	r4, [sp, #16]
 8011662:	f005 fe87 	bl	8017374 <timer_init>
 8011666:	4621      	mov	r1, r4
 8011668:	4628      	mov	r0, r5
 801166a:	f006 f847 	bl	80176fc <timer_master_slave_mode_config>
 801166e:	4628      	mov	r0, r5
 8011670:	2130      	movs	r1, #48	; 0x30
 8011672:	f006 f833 	bl	80176dc <timer_master_output_trigger_source_select>
 8011676:	4621      	mov	r1, r4
 8011678:	4628      	mov	r0, r5
 801167a:	2210      	movs	r2, #16
 801167c:	f005 ffcc 	bl	8017618 <timer_channel_output_mode_config>
 8011680:	4628      	mov	r0, r5
 8011682:	2210      	movs	r2, #16
 8011684:	2102      	movs	r1, #2
 8011686:	f005 ffc7 	bl	8017618 <timer_channel_output_mode_config>
 801168a:	4628      	mov	r0, r5
 801168c:	2210      	movs	r2, #16
 801168e:	2103      	movs	r1, #3
 8011690:	f005 ffc2 	bl	8017618 <timer_channel_output_mode_config>
 8011694:	4621      	mov	r1, r4
 8011696:	4628      	mov	r0, r5
 8011698:	2201      	movs	r2, #1
 801169a:	f005 ffe3 	bl	8017664 <timer_channel_output_pulse_value_config>
 801169e:	fb09 f207 	mul.w	r2, r9, r7
 80116a2:	4628      	mov	r0, r5
 80116a4:	2102      	movs	r1, #2
 80116a6:	f3c2 02cf 	ubfx	r2, r2, #3, #16
 80116aa:	f005 ffdb 	bl	8017664 <timer_channel_output_pulse_value_config>
 80116ae:	fb09 f206 	mul.w	r2, r9, r6
 80116b2:	2103      	movs	r1, #3
 80116b4:	f3c2 02cf 	ubfx	r2, r2, #3, #16
 80116b8:	4628      	mov	r0, r5
 80116ba:	f005 ffd3 	bl	8017664 <timer_channel_output_pulse_value_config>
 80116be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80116c2:	f240 7002 	movw	r0, #1794	; 0x702
 80116c6:	f005 fc4b 	bl	8016f60 <rcu_periph_clock_enable>
 80116ca:	4628      	mov	r0, r5
 80116cc:	f005 fdac 	bl	8017228 <timer_deinit>
 80116d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80116d4:	4628      	mov	r0, r5
 80116d6:	a901      	add	r1, sp, #4
 80116d8:	9303      	str	r3, [sp, #12]
 80116da:	9401      	str	r4, [sp, #4]
 80116dc:	f8ad 4008 	strh.w	r4, [sp, #8]
 80116e0:	f8ad 4010 	strh.w	r4, [sp, #16]
 80116e4:	f005 fe46 	bl	8017374 <timer_init>
 80116e8:	4621      	mov	r1, r4
 80116ea:	4628      	mov	r0, r5
 80116ec:	f006 f806 	bl	80176fc <timer_master_slave_mode_config>
 80116f0:	4628      	mov	r0, r5
 80116f2:	2107      	movs	r1, #7
 80116f4:	f005 fffa 	bl	80176ec <timer_slave_mode_select>
 80116f8:	4628      	mov	r0, r5
 80116fa:	2120      	movs	r1, #32
 80116fc:	f005 ffe6 	bl	80176cc <timer_input_trigger_source_select>
 8011700:	4621      	mov	r1, r4
 8011702:	4628      	mov	r0, r5
 8011704:	2210      	movs	r2, #16
 8011706:	f005 ff87 	bl	8017618 <timer_channel_output_mode_config>
 801170a:	f8d8 201c 	ldr.w	r2, [r8, #28]
 801170e:	4621      	mov	r1, r4
 8011710:	3201      	adds	r2, #1
 8011712:	4628      	mov	r0, r5
 8011714:	b292      	uxth	r2, r2
 8011716:	f005 ffa5 	bl	8017664 <timer_channel_output_pulse_value_config>
 801171a:	2102      	movs	r1, #2
 801171c:	4628      	mov	r0, r5
 801171e:	f005 fffa 	bl	8017716 <timer_interrupt_enable>
 8011722:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011726:	2601      	movs	r6, #1
 8011728:	f44f 7780 	mov.w	r7, #256	; 0x100
 801172c:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8011730:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 8011734:	4b38      	ldr	r3, [pc, #224]	; (8011818 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1f8>)
 8011736:	f505 35fc 	add.w	r5, r5, #129024	; 0x1f800
 801173a:	f883 431e 	strb.w	r4, [r3, #798]	; 0x31e
 801173e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8011742:	601a      	str	r2, [r3, #0]
 8011744:	f005 fc0c 	bl	8016f60 <rcu_periph_clock_enable>
 8011748:	2105      	movs	r1, #5
 801174a:	4628      	mov	r0, r5
 801174c:	f005 fa7c 	bl	8016c48 <dma_deinit>
 8011750:	a805      	add	r0, sp, #20
 8011752:	f005 fa97 	bl	8016c84 <dma_struct_para_init>
 8011756:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 801181c <WS28xxMulti::Setup(unsigned char, unsigned char)+0x1fc>
 801175a:	4b31      	ldr	r3, [pc, #196]	; (8011820 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x200>)
 801175c:	aa05      	add	r2, sp, #20
 801175e:	4628      	mov	r0, r5
 8011760:	2105      	movs	r1, #5
 8011762:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8011766:	f8cd b01c 	str.w	fp, [sp, #28]
 801176a:	f8cd 9020 	str.w	r9, [sp, #32]
 801176e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8011772:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 8011776:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801177a:	f005 fa8d 	bl	8016c98 <dma_init>
 801177e:	4628      	mov	r0, r5
 8011780:	2105      	movs	r1, #5
 8011782:	f005 faba 	bl	8016cfa <dma_circulation_disable>
 8011786:	4628      	mov	r0, r5
 8011788:	2105      	movs	r1, #5
 801178a:	f005 fabe 	bl	8016d0a <dma_memory_to_memory_disable>
 801178e:	4631      	mov	r1, r6
 8011790:	4628      	mov	r0, r5
 8011792:	f005 fa59 	bl	8016c48 <dma_deinit>
 8011796:	a805      	add	r0, sp, #20
 8011798:	f005 fa74 	bl	8016c84 <dma_struct_para_init>
 801179c:	f8df a084 	ldr.w	sl, [pc, #132]	; 8011824 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x204>
 80117a0:	4b21      	ldr	r3, [pc, #132]	; (8011828 <WS28xxMulti::Setup(unsigned char, unsigned char)+0x208>)
 80117a2:	aa05      	add	r2, sp, #20
 80117a4:	4631      	mov	r1, r6
 80117a6:	4628      	mov	r0, r5
 80117a8:	e9cd 3907 	strd	r3, r9, [sp, #28]
 80117ac:	e9cd a705 	strd	sl, r7, [sp, #20]
 80117b0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80117b4:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 80117b8:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 80117bc:	f005 fa6c 	bl	8016c98 <dma_init>
 80117c0:	4631      	mov	r1, r6
 80117c2:	4628      	mov	r0, r5
 80117c4:	f005 fa99 	bl	8016cfa <dma_circulation_disable>
 80117c8:	4631      	mov	r1, r6
 80117ca:	4628      	mov	r0, r5
 80117cc:	f005 fa9d 	bl	8016d0a <dma_memory_to_memory_disable>
 80117d0:	2102      	movs	r1, #2
 80117d2:	4628      	mov	r0, r5
 80117d4:	f005 fa38 	bl	8016c48 <dma_deinit>
 80117d8:	a805      	add	r0, sp, #20
 80117da:	f005 fa53 	bl	8016c84 <dma_struct_para_init>
 80117de:	aa05      	add	r2, sp, #20
 80117e0:	4628      	mov	r0, r5
 80117e2:	2102      	movs	r1, #2
 80117e4:	e9cd b907 	strd	fp, r9, [sp, #28]
 80117e8:	e9cd a705 	strd	sl, r7, [sp, #20]
 80117ec:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80117f0:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
 80117f4:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 80117f8:	f005 fa4e 	bl	8016c98 <dma_init>
 80117fc:	4628      	mov	r0, r5
 80117fe:	2102      	movs	r1, #2
 8011800:	f005 fa7b 	bl	8016cfa <dma_circulation_disable>
 8011804:	2102      	movs	r1, #2
 8011806:	4628      	mov	r0, r5
 8011808:	f005 fa7f 	bl	8016d0a <dma_memory_to_memory_disable>
 801180c:	b00d      	add	sp, #52	; 0x34
 801180e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011812:	bf00      	nop
 8011814:	40000400 	andmi	r0, r0, r0, lsl #8
 8011818:	e000e100 	and	lr, r0, r0, lsl #2
 801181c:	0801b344 	stmdaeq	r1, {r2, r6, r8, r9, ip, sp, pc}
 8011820:	40011010 	andmi	r1, r1, r0, lsl r0
 8011824:	40011014 	andmi	r1, r1, r4, lsl r0
 8011828:	2000c9b0 			; <UNDEFINED> instruction: 0x2000c9b0

0801182c <WS28xxMulti::Setup(unsigned int)>:
 801182c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011830:	460c      	mov	r4, r1
 8011832:	b090      	sub	sp, #64	; 0x40
 8011834:	4680      	mov	r8, r0
 8011836:	f240 6002 	movw	r0, #1538	; 0x602
 801183a:	f005 fb91 	bl	8016f60 <rcu_periph_clock_enable>
 801183e:	4d82      	ldr	r5, [pc, #520]	; (8011a48 <WS28xxMulti::Setup(unsigned int)+0x21c>)
 8011840:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8011844:	f005 fb8c 	bl	8016f60 <rcu_periph_clock_enable>
 8011848:	2203      	movs	r2, #3
 801184a:	2340      	movs	r3, #64	; 0x40
 801184c:	2118      	movs	r1, #24
 801184e:	487f      	ldr	r0, [pc, #508]	; (8011a4c <WS28xxMulti::Setup(unsigned int)+0x220>)
 8011850:	f005 faee 	bl	8016e30 <gpio_init>
 8011854:	fbb5 f5f4 	udiv	r5, r5, r4
 8011858:	2d0c      	cmp	r5, #12
 801185a:	bf38      	it	cc
 801185c:	250c      	movcc	r5, #12
 801185e:	2400      	movs	r4, #0
 8011860:	2602      	movs	r6, #2
 8011862:	2701      	movs	r7, #1
 8011864:	f44f 7980 	mov.w	r9, #256	; 0x100
 8011868:	f240 7001 	movw	r0, #1793	; 0x701
 801186c:	f005 fb78 	bl	8016f60 <rcu_periph_clock_enable>
 8011870:	4877      	ldr	r0, [pc, #476]	; (8011a50 <WS28xxMulti::Setup(unsigned int)+0x224>)
 8011872:	f005 fcd9 	bl	8017228 <timer_deinit>
 8011876:	1e6b      	subs	r3, r5, #1
 8011878:	4875      	ldr	r0, [pc, #468]	; (8011a50 <WS28xxMulti::Setup(unsigned int)+0x224>)
 801187a:	a905      	add	r1, sp, #20
 801187c:	9307      	str	r3, [sp, #28]
 801187e:	9405      	str	r4, [sp, #20]
 8011880:	f8ad 4018 	strh.w	r4, [sp, #24]
 8011884:	f8ad 4020 	strh.w	r4, [sp, #32]
 8011888:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801188c:	f005 fd72 	bl	8017374 <timer_init>
 8011890:	4621      	mov	r1, r4
 8011892:	486f      	ldr	r0, [pc, #444]	; (8011a50 <WS28xxMulti::Setup(unsigned int)+0x224>)
 8011894:	aa02      	add	r2, sp, #8
 8011896:	e9cd 7602 	strd	r7, r6, [sp, #8]
 801189a:	f8cd 9010 	str.w	r9, [sp, #16]
 801189e:	f005 fdcb 	bl	8017438 <timer_channel_output_config>
 80118a2:	fa25 f207 	lsr.w	r2, r5, r7
 80118a6:	3a01      	subs	r2, #1
 80118a8:	4621      	mov	r1, r4
 80118aa:	4869      	ldr	r0, [pc, #420]	; (8011a50 <WS28xxMulti::Setup(unsigned int)+0x224>)
 80118ac:	b292      	uxth	r2, r2
 80118ae:	f005 fed9 	bl	8017664 <timer_channel_output_pulse_value_config>
 80118b2:	2260      	movs	r2, #96	; 0x60
 80118b4:	4621      	mov	r1, r4
 80118b6:	4866      	ldr	r0, [pc, #408]	; (8011a50 <WS28xxMulti::Setup(unsigned int)+0x224>)
 80118b8:	f005 feae 	bl	8017618 <timer_channel_output_mode_config>
 80118bc:	4622      	mov	r2, r4
 80118be:	4621      	mov	r1, r4
 80118c0:	4863      	ldr	r0, [pc, #396]	; (8011a50 <WS28xxMulti::Setup(unsigned int)+0x224>)
 80118c2:	f005 fedd 	bl	8017680 <timer_channel_output_shadow_config>
 80118c6:	2210      	movs	r2, #16
 80118c8:	4631      	mov	r1, r6
 80118ca:	4861      	ldr	r0, [pc, #388]	; (8011a50 <WS28xxMulti::Setup(unsigned int)+0x224>)
 80118cc:	f005 fea4 	bl	8017618 <timer_channel_output_mode_config>
 80118d0:	2210      	movs	r2, #16
 80118d2:	2103      	movs	r1, #3
 80118d4:	485e      	ldr	r0, [pc, #376]	; (8011a50 <WS28xxMulti::Setup(unsigned int)+0x224>)
 80118d6:	f005 fe9f 	bl	8017618 <timer_channel_output_mode_config>
 80118da:	463a      	mov	r2, r7
 80118dc:	4631      	mov	r1, r6
 80118de:	485c      	ldr	r0, [pc, #368]	; (8011a50 <WS28xxMulti::Setup(unsigned int)+0x224>)
 80118e0:	f005 fec0 	bl	8017664 <timer_channel_output_pulse_value_config>
 80118e4:	fa25 f206 	lsr.w	r2, r5, r6
 80118e8:	3a01      	subs	r2, #1
 80118ea:	b292      	uxth	r2, r2
 80118ec:	2103      	movs	r1, #3
 80118ee:	4858      	ldr	r0, [pc, #352]	; (8011a50 <WS28xxMulti::Setup(unsigned int)+0x224>)
 80118f0:	f005 feb8 	bl	8017664 <timer_channel_output_pulse_value_config>
 80118f4:	4621      	mov	r1, r4
 80118f6:	4856      	ldr	r0, [pc, #344]	; (8011a50 <WS28xxMulti::Setup(unsigned int)+0x224>)
 80118f8:	f005 ff00 	bl	80176fc <timer_master_slave_mode_config>
 80118fc:	2130      	movs	r1, #48	; 0x30
 80118fe:	4854      	ldr	r0, [pc, #336]	; (8011a50 <WS28xxMulti::Setup(unsigned int)+0x224>)
 8011900:	f005 feec 	bl	80176dc <timer_master_output_trigger_source_select>
 8011904:	f240 7002 	movw	r0, #1794	; 0x702
 8011908:	f005 fb2a 	bl	8016f60 <rcu_periph_clock_enable>
 801190c:	4851      	ldr	r0, [pc, #324]	; (8011a54 <WS28xxMulti::Setup(unsigned int)+0x228>)
 801190e:	f005 fc8b 	bl	8017228 <timer_deinit>
 8011912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011916:	484f      	ldr	r0, [pc, #316]	; (8011a54 <WS28xxMulti::Setup(unsigned int)+0x228>)
 8011918:	a905      	add	r1, sp, #20
 801191a:	9307      	str	r3, [sp, #28]
 801191c:	9405      	str	r4, [sp, #20]
 801191e:	f8ad 4018 	strh.w	r4, [sp, #24]
 8011922:	f8ad 4020 	strh.w	r4, [sp, #32]
 8011926:	f005 fd25 	bl	8017374 <timer_init>
 801192a:	4621      	mov	r1, r4
 801192c:	4849      	ldr	r0, [pc, #292]	; (8011a54 <WS28xxMulti::Setup(unsigned int)+0x228>)
 801192e:	f005 fee5 	bl	80176fc <timer_master_slave_mode_config>
 8011932:	2107      	movs	r1, #7
 8011934:	4847      	ldr	r0, [pc, #284]	; (8011a54 <WS28xxMulti::Setup(unsigned int)+0x228>)
 8011936:	f005 fed9 	bl	80176ec <timer_slave_mode_select>
 801193a:	2120      	movs	r1, #32
 801193c:	4845      	ldr	r0, [pc, #276]	; (8011a54 <WS28xxMulti::Setup(unsigned int)+0x228>)
 801193e:	f005 fec5 	bl	80176cc <timer_input_trigger_source_select>
 8011942:	2210      	movs	r2, #16
 8011944:	4621      	mov	r1, r4
 8011946:	4843      	ldr	r0, [pc, #268]	; (8011a54 <WS28xxMulti::Setup(unsigned int)+0x228>)
 8011948:	f005 fe66 	bl	8017618 <timer_channel_output_mode_config>
 801194c:	f8b8 201c 	ldrh.w	r2, [r8, #28]
 8011950:	4621      	mov	r1, r4
 8011952:	4840      	ldr	r0, [pc, #256]	; (8011a54 <WS28xxMulti::Setup(unsigned int)+0x228>)
 8011954:	f005 fe86 	bl	8017664 <timer_channel_output_pulse_value_config>
 8011958:	4631      	mov	r1, r6
 801195a:	483e      	ldr	r0, [pc, #248]	; (8011a54 <WS28xxMulti::Setup(unsigned int)+0x228>)
 801195c:	f005 fedb 	bl	8017716 <timer_interrupt_enable>
 8011960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011964:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8011968:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 801196c:	4b3a      	ldr	r3, [pc, #232]	; (8011a58 <WS28xxMulti::Setup(unsigned int)+0x22c>)
 801196e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8011972:	f883 431e 	strb.w	r4, [r3, #798]	; 0x31e
 8011976:	601a      	str	r2, [r3, #0]
 8011978:	f005 faf2 	bl	8016f60 <rcu_periph_clock_enable>
 801197c:	4639      	mov	r1, r7
 801197e:	4837      	ldr	r0, [pc, #220]	; (8011a5c <WS28xxMulti::Setup(unsigned int)+0x230>)
 8011980:	f005 f962 	bl	8016c48 <dma_deinit>
 8011984:	a809      	add	r0, sp, #36	; 0x24
 8011986:	f005 f97d 	bl	8016c84 <dma_struct_para_init>
 801198a:	4b35      	ldr	r3, [pc, #212]	; (8011a60 <WS28xxMulti::Setup(unsigned int)+0x234>)
 801198c:	aa09      	add	r2, sp, #36	; 0x24
 801198e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011990:	4b34      	ldr	r3, [pc, #208]	; (8011a64 <WS28xxMulti::Setup(unsigned int)+0x238>)
 8011992:	4639      	mov	r1, r7
 8011994:	4831      	ldr	r0, [pc, #196]	; (8011a5c <WS28xxMulti::Setup(unsigned int)+0x230>)
 8011996:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
 801199a:	950e      	str	r5, [sp, #56]	; 0x38
 801199c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80119a0:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
 80119a4:	f88d 703e 	strb.w	r7, [sp, #62]	; 0x3e
 80119a8:	f005 f976 	bl	8016c98 <dma_init>
 80119ac:	4639      	mov	r1, r7
 80119ae:	482b      	ldr	r0, [pc, #172]	; (8011a5c <WS28xxMulti::Setup(unsigned int)+0x230>)
 80119b0:	f005 f9a3 	bl	8016cfa <dma_circulation_disable>
 80119b4:	4639      	mov	r1, r7
 80119b6:	4829      	ldr	r0, [pc, #164]	; (8011a5c <WS28xxMulti::Setup(unsigned int)+0x230>)
 80119b8:	f005 f9a7 	bl	8016d0a <dma_memory_to_memory_disable>
 80119bc:	4631      	mov	r1, r6
 80119be:	4827      	ldr	r0, [pc, #156]	; (8011a5c <WS28xxMulti::Setup(unsigned int)+0x230>)
 80119c0:	f005 f942 	bl	8016c48 <dma_deinit>
 80119c4:	a809      	add	r0, sp, #36	; 0x24
 80119c6:	f005 f95d 	bl	8016c84 <dma_struct_para_init>
 80119ca:	4b27      	ldr	r3, [pc, #156]	; (8011a68 <WS28xxMulti::Setup(unsigned int)+0x23c>)
 80119cc:	aa09      	add	r2, sp, #36	; 0x24
 80119ce:	e9cd 3a0b 	strd	r3, sl, [sp, #44]	; 0x2c
 80119d2:	4b26      	ldr	r3, [pc, #152]	; (8011a6c <WS28xxMulti::Setup(unsigned int)+0x240>)
 80119d4:	4631      	mov	r1, r6
 80119d6:	4821      	ldr	r0, [pc, #132]	; (8011a5c <WS28xxMulti::Setup(unsigned int)+0x230>)
 80119d8:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
 80119dc:	950e      	str	r5, [sp, #56]	; 0x38
 80119de:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 80119e2:	f88d 703e 	strb.w	r7, [sp, #62]	; 0x3e
 80119e6:	f005 f957 	bl	8016c98 <dma_init>
 80119ea:	4631      	mov	r1, r6
 80119ec:	481b      	ldr	r0, [pc, #108]	; (8011a5c <WS28xxMulti::Setup(unsigned int)+0x230>)
 80119ee:	f005 f984 	bl	8016cfa <dma_circulation_disable>
 80119f2:	4631      	mov	r1, r6
 80119f4:	4819      	ldr	r0, [pc, #100]	; (8011a5c <WS28xxMulti::Setup(unsigned int)+0x230>)
 80119f6:	f005 f988 	bl	8016d0a <dma_memory_to_memory_disable>
 80119fa:	f8d8 5000 	ldr.w	r5, [r8]
 80119fe:	3d0b      	subs	r5, #11
 8011a00:	42b5      	cmp	r5, r6
 8011a02:	d81d      	bhi.n	8011a40 <WS28xxMulti::Setup(unsigned int)+0x214>
 8011a04:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8011a08:	4627      	mov	r7, r4
 8011a0a:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8011a0e:	3601      	adds	r6, #1
 8011a10:	2300      	movs	r3, #0
 8011a12:	4620      	mov	r0, r4
 8011a14:	461a      	mov	r2, r3
 8011a16:	4619      	mov	r1, r3
 8011a18:	e9cd 7700 	strd	r7, r7, [sp]
 8011a1c:	f7ff fd82 	bl	8011524 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8011a20:	2d02      	cmp	r5, #2
 8011a22:	bf18      	it	ne
 8011a24:	23ff      	movne	r3, #255	; 0xff
 8011a26:	4620      	mov	r0, r4
 8011a28:	bf1a      	itte	ne
 8011a2a:	461a      	movne	r2, r3
 8011a2c:	e9cd 8800 	strdne	r8, r8, [sp]
 8011a30:	e9cd 7700 	strdeq	r7, r7, [sp]
 8011a34:	4631      	mov	r1, r6
 8011a36:	3401      	adds	r4, #1
 8011a38:	f7ff fd74 	bl	8011524 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8011a3c:	2c08      	cmp	r4, #8
 8011a3e:	d1e7      	bne.n	8011a10 <WS28xxMulti::Setup(unsigned int)+0x1e4>
 8011a40:	b010      	add	sp, #64	; 0x40
 8011a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a46:	bf00      	nop
 8011a48:	07270e00 	streq	r0, [r7, -r0, lsl #28]!
 8011a4c:	40010800 	andmi	r0, r1, r0, lsl #16
 8011a50:	40000400 	andmi	r0, r0, r0, lsl #8
 8011a54:	40000800 	andmi	r0, r0, r0, lsl #16
 8011a58:	e000e100 	and	lr, r0, r0, lsl #2
 8011a5c:	40020000 	andmi	r0, r2, r0
 8011a60:	0801b344 	stmdaeq	r1, {r2, r6, r8, r9, ip, sp, pc}
 8011a64:	40011014 	andmi	r1, r1, r4, lsl r0
 8011a68:	2000c9b0 			; <UNDEFINED> instruction: 0x2000c9b0
 8011a6c:	40011010 	andmi	r1, r1, r0, lsl r0

08011a70 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)>:
 8011a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011a72:	4606      	mov	r6, r0
 8011a74:	460f      	mov	r7, r1
 8011a76:	4604      	mov	r4, r0
 8011a78:	460d      	mov	r5, r1
 8011a7a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011a7c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011a7e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8011a82:	2300      	movs	r3, #0
 8011a84:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8011a88:	61e3      	str	r3, [r4, #28]
 8011a8a:	4b20      	ldr	r3, [pc, #128]	; (8011b0c <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x9c>)
 8011a8c:	4628      	mov	r0, r5
 8011a8e:	a901      	add	r1, sp, #4
 8011a90:	601c      	str	r4, [r3, #0]
 8011a92:	f7ff f8b5 	bl	8010c00 <PixelConfiguration::Validate(unsigned int&)>
 8011a96:	6826      	ldr	r6, [r4, #0]
 8011a98:	3e0b      	subs	r6, #11
 8011a9a:	2e02      	cmp	r6, #2
 8011a9c:	d80a      	bhi.n	8011ab4 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x44>
 8011a9e:	686b      	ldr	r3, [r5, #4]
 8011aa0:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8011aa4:	d906      	bls.n	8011ab4 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x44>
 8011aa6:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8011aaa:	4628      	mov	r0, r5
 8011aac:	606b      	str	r3, [r5, #4]
 8011aae:	a901      	add	r1, sp, #4
 8011ab0:	f7ff f8a6 	bl	8010c00 <PixelConfiguration::Validate(unsigned int&)>
 8011ab4:	6863      	ldr	r3, [r4, #4]
 8011ab6:	9a01      	ldr	r2, [sp, #4]
 8011ab8:	2e02      	cmp	r6, #2
 8011aba:	fb03 f202 	mul.w	r2, r3, r2
 8011abe:	bf9b      	ittet	ls
 8011ac0:	3308      	addls	r3, #8
 8011ac2:	189b      	addls	r3, r3, r2
 8011ac4:	61e2      	strhi	r2, [r4, #28]
 8011ac6:	61e3      	strls	r3, [r4, #28]
 8011ac8:	69e3      	ldr	r3, [r4, #28]
 8011aca:	4e11      	ldr	r6, [pc, #68]	; (8011b10 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0xa0>)
 8011acc:	00db      	lsls	r3, r3, #3
 8011ace:	f240 6004 	movw	r0, #1540	; 0x604
 8011ad2:	61e3      	str	r3, [r4, #28]
 8011ad4:	f005 fa44 	bl	8016f60 <rcu_periph_clock_enable>
 8011ad8:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 8011adc:	2203      	movs	r2, #3
 8011ade:	2110      	movs	r1, #16
 8011ae0:	4630      	mov	r0, r6
 8011ae2:	f005 f9a5 	bl	8016e30 <gpio_init>
 8011ae6:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 8011aea:	6173      	str	r3, [r6, #20]
 8011aec:	7d6b      	ldrb	r3, [r5, #21]
 8011aee:	b13b      	cbz	r3, 8011b00 <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x90>
 8011af0:	4620      	mov	r0, r4
 8011af2:	7c6a      	ldrb	r2, [r5, #17]
 8011af4:	7c29      	ldrb	r1, [r5, #16]
 8011af6:	f7ff fd93 	bl	8011620 <WS28xxMulti::Setup(unsigned char, unsigned char)>
 8011afa:	4620      	mov	r0, r4
 8011afc:	b003      	add	sp, #12
 8011afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b00:	4620      	mov	r0, r4
 8011b02:	68e9      	ldr	r1, [r5, #12]
 8011b04:	f7ff fe92 	bl	801182c <WS28xxMulti::Setup(unsigned int)>
 8011b08:	e7f7      	b.n	8011afa <WS28xxMulti::WS28xxMulti(PixelConfiguration&)+0x8a>
 8011b0a:	bf00      	nop
 8011b0c:	2000c9ac 	andcs	ip, r0, ip, lsr #19
 8011b10:	40011000 	andmi	r1, r1, r0

08011b14 <WS28xxMulti::Update()>:
 8011b14:	2201      	movs	r2, #1
 8011b16:	4b39      	ldr	r3, [pc, #228]	; (8011bfc <WS28xxMulti::Update()+0xe8>)
 8011b18:	b510      	push	{r4, lr}
 8011b1a:	701a      	strb	r2, [r3, #0]
 8011b1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011b20:	2100      	movs	r1, #0
 8011b22:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8011b26:	4c36      	ldr	r4, [pc, #216]	; (8011c00 <WS28xxMulti::Update()+0xec>)
 8011b28:	f022 0201 	bic.w	r2, r2, #1
 8011b2c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8011b30:	f8c3 1824 	str.w	r1, [r3, #2084]	; 0x824
 8011b34:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8011b38:	f022 0201 	bic.w	r2, r2, #1
 8011b3c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8011b40:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
 8011b44:	7d41      	ldrb	r1, [r0, #21]
 8011b46:	4a2f      	ldr	r2, [pc, #188]	; (8011c04 <WS28xxMulti::Update()+0xf0>)
 8011b48:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8011b4c:	2900      	cmp	r1, #0
 8011b4e:	d03e      	beq.n	8011bce <WS28xxMulti::Update()+0xba>
 8011b50:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011b52:	f021 0101 	bic.w	r1, r1, #1
 8011b56:	66d9      	str	r1, [r3, #108]	; 0x6c
 8011b58:	679a      	str	r2, [r3, #120]	; 0x78
 8011b5a:	8b81      	ldrh	r1, [r0, #28]
 8011b5c:	6719      	str	r1, [r3, #112]	; 0x70
 8011b5e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011b60:	f041 0101 	orr.w	r1, r1, #1
 8011b64:	66d9      	str	r1, [r3, #108]	; 0x6c
 8011b66:	69d9      	ldr	r1, [r3, #28]
 8011b68:	f021 0101 	bic.w	r1, r1, #1
 8011b6c:	61d9      	str	r1, [r3, #28]
 8011b6e:	629c      	str	r4, [r3, #40]	; 0x28
 8011b70:	8b81      	ldrh	r1, [r0, #28]
 8011b72:	6219      	str	r1, [r3, #32]
 8011b74:	69d9      	ldr	r1, [r3, #28]
 8011b76:	f041 0101 	orr.w	r1, r1, #1
 8011b7a:	61d9      	str	r1, [r3, #28]
 8011b7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011b7e:	f021 0101 	bic.w	r1, r1, #1
 8011b82:	6319      	str	r1, [r3, #48]	; 0x30
 8011b84:	63da      	str	r2, [r3, #60]	; 0x3c
 8011b86:	8b82      	ldrh	r2, [r0, #28]
 8011b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8011b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011b90:	481d      	ldr	r0, [pc, #116]	; (8011c08 <WS28xxMulti::Update()+0xf4>)
 8011b92:	f042 0201 	orr.w	r2, r2, #1
 8011b96:	631a      	str	r2, [r3, #48]	; 0x30
 8011b98:	f005 fc49 	bl	801742e <timer_dma_enable>
 8011b9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011ba0:	4819      	ldr	r0, [pc, #100]	; (8011c08 <WS28xxMulti::Update()+0xf4>)
 8011ba2:	f005 fc44 	bl	801742e <timer_dma_enable>
 8011ba6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8011baa:	4817      	ldr	r0, [pc, #92]	; (8011c08 <WS28xxMulti::Update()+0xf4>)
 8011bac:	f005 fc3f 	bl	801742e <timer_dma_enable>
 8011bb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011bb4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8011bb8:	f042 0201 	orr.w	r2, r2, #1
 8011bbc:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8011bc0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8011bc4:	f042 0201 	orr.w	r2, r2, #1
 8011bc8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8011bcc:	bd10      	pop	{r4, pc}
 8011bce:	69d9      	ldr	r1, [r3, #28]
 8011bd0:	f021 0101 	bic.w	r1, r1, #1
 8011bd4:	61d9      	str	r1, [r3, #28]
 8011bd6:	629a      	str	r2, [r3, #40]	; 0x28
 8011bd8:	8b82      	ldrh	r2, [r0, #28]
 8011bda:	621a      	str	r2, [r3, #32]
 8011bdc:	69da      	ldr	r2, [r3, #28]
 8011bde:	f042 0201 	orr.w	r2, r2, #1
 8011be2:	61da      	str	r2, [r3, #28]
 8011be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011be6:	f022 0201 	bic.w	r2, r2, #1
 8011bea:	631a      	str	r2, [r3, #48]	; 0x30
 8011bec:	63dc      	str	r4, [r3, #60]	; 0x3c
 8011bee:	8b82      	ldrh	r2, [r0, #28]
 8011bf0:	635a      	str	r2, [r3, #52]	; 0x34
 8011bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011bf4:	f042 0201 	orr.w	r2, r2, #1
 8011bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8011bfa:	e7cf      	b.n	8011b9c <WS28xxMulti::Update()+0x88>
 8011bfc:	2000c9a8 	andcs	ip, r0, r8, lsr #19
 8011c00:	2000c9b0 			; <UNDEFINED> instruction: 0x2000c9b0
 8011c04:	0801b344 	stmdaeq	r1, {r2, r6, r8, r9, ip, sp, pc}
 8011c08:	40000400 	andmi	r0, r0, r0, lsl #8

08011c0c <WS28xxMulti::Blackout()>:
 8011c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c10:	4605      	mov	r5, r0
 8011c12:	4f2d      	ldr	r7, [pc, #180]	; (8011cc8 <WS28xxMulti::Blackout()+0xbc>)
 8011c14:	f3bf 8f5f 	dmb	sy
 8011c18:	783a      	ldrb	r2, [r7, #0]
 8011c1a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8011c1e:	2a00      	cmp	r2, #0
 8011c20:	d1f8      	bne.n	8011c14 <WS28xxMulti::Blackout()+0x8>
 8011c22:	7d6c      	ldrb	r4, [r5, #21]
 8011c24:	b194      	cbz	r4, 8011c4c <WS28xxMulti::Blackout()+0x40>
 8011c26:	4a29      	ldr	r2, [pc, #164]	; (8011ccc <WS28xxMulti::Blackout()+0xc0>)
 8011c28:	4929      	ldr	r1, [pc, #164]	; (8011cd0 <WS28xxMulti::Blackout()+0xc4>)
 8011c2a:	3301      	adds	r3, #1
 8011c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011c30:	f842 1b04 	str.w	r1, [r2], #4
 8011c34:	d1f9      	bne.n	8011c2a <WS28xxMulti::Blackout()+0x1e>
 8011c36:	4628      	mov	r0, r5
 8011c38:	f7ff ff6c 	bl	8011b14 <WS28xxMulti::Update()>
 8011c3c:	f3bf 8f5f 	dmb	sy
 8011c40:	783b      	ldrb	r3, [r7, #0]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d1fa      	bne.n	8011c3c <WS28xxMulti::Blackout()+0x30>
 8011c46:	b003      	add	sp, #12
 8011c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c4c:	682b      	ldr	r3, [r5, #0]
 8011c4e:	f1a3 080b 	sub.w	r8, r3, #11
 8011c52:	f1b8 0f02 	cmp.w	r8, #2
 8011c56:	d908      	bls.n	8011c6a <WS28xxMulti::Blackout()+0x5e>
 8011c58:	4622      	mov	r2, r4
 8011c5a:	4b1c      	ldr	r3, [pc, #112]	; (8011ccc <WS28xxMulti::Blackout()+0xc0>)
 8011c5c:	3401      	adds	r4, #1
 8011c5e:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8011c62:	f843 2b04 	str.w	r2, [r3], #4
 8011c66:	d1f9      	bne.n	8011c5c <WS28xxMulti::Blackout()+0x50>
 8011c68:	e7e5      	b.n	8011c36 <WS28xxMulti::Blackout()+0x2a>
 8011c6a:	4626      	mov	r6, r4
 8011c6c:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8011c70:	f10a 0b01 	add.w	fp, sl, #1
 8011c74:	2300      	movs	r3, #0
 8011c76:	4620      	mov	r0, r4
 8011c78:	461a      	mov	r2, r3
 8011c7a:	4619      	mov	r1, r3
 8011c7c:	e9cd 6600 	strd	r6, r6, [sp]
 8011c80:	f7ff fc50 	bl	8011524 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8011c84:	f04f 0901 	mov.w	r9, #1
 8011c88:	45ca      	cmp	sl, r9
 8011c8a:	d212      	bcs.n	8011cb2 <WS28xxMulti::Blackout()+0xa6>
 8011c8c:	f1b8 0f02 	cmp.w	r8, #2
 8011c90:	bf14      	ite	ne
 8011c92:	23ff      	movne	r3, #255	; 0xff
 8011c94:	2300      	moveq	r3, #0
 8011c96:	4620      	mov	r0, r4
 8011c98:	bf14      	ite	ne
 8011c9a:	e9cd 3300 	strdne	r3, r3, [sp]
 8011c9e:	e9cd 6600 	strdeq	r6, r6, [sp]
 8011ca2:	461a      	mov	r2, r3
 8011ca4:	4659      	mov	r1, fp
 8011ca6:	3401      	adds	r4, #1
 8011ca8:	f7ff fc3c 	bl	8011524 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8011cac:	2c08      	cmp	r4, #8
 8011cae:	d1e1      	bne.n	8011c74 <WS28xxMulti::Blackout()+0x68>
 8011cb0:	e7c1      	b.n	8011c36 <WS28xxMulti::Blackout()+0x2a>
 8011cb2:	4649      	mov	r1, r9
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	22e0      	movs	r2, #224	; 0xe0
 8011cb8:	4620      	mov	r0, r4
 8011cba:	e9cd 6600 	strd	r6, r6, [sp]
 8011cbe:	f7ff fc31 	bl	8011524 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8011cc2:	f109 0901 	add.w	r9, r9, #1
 8011cc6:	e7df      	b.n	8011c88 <WS28xxMulti::Blackout()+0x7c>
 8011cc8:	2000c9a8 	andcs	ip, r0, r8, lsr #19
 8011ccc:	2000c9b0 			; <UNDEFINED> instruction: 0x2000c9b0
 8011cd0:	3fc03fc0 	svccc	0x00c03fc0

08011cd4 <WS28xxMulti::FullOn()>:
 8011cd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd8:	4605      	mov	r5, r0
 8011cda:	4f2c      	ldr	r7, [pc, #176]	; (8011d8c <WS28xxMulti::FullOn()+0xb8>)
 8011cdc:	f3bf 8f5f 	dmb	sy
 8011ce0:	783a      	ldrb	r2, [r7, #0]
 8011ce2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8011ce6:	2a00      	cmp	r2, #0
 8011ce8:	d1f8      	bne.n	8011cdc <WS28xxMulti::FullOn()+0x8>
 8011cea:	7d6c      	ldrb	r4, [r5, #21]
 8011cec:	b194      	cbz	r4, 8011d14 <WS28xxMulti::FullOn()+0x40>
 8011cee:	4619      	mov	r1, r3
 8011cf0:	4a27      	ldr	r2, [pc, #156]	; (8011d90 <WS28xxMulti::FullOn()+0xbc>)
 8011cf2:	3301      	adds	r3, #1
 8011cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011cf8:	f842 1b04 	str.w	r1, [r2], #4
 8011cfc:	d1f9      	bne.n	8011cf2 <WS28xxMulti::FullOn()+0x1e>
 8011cfe:	4628      	mov	r0, r5
 8011d00:	f7ff ff08 	bl	8011b14 <WS28xxMulti::Update()>
 8011d04:	f3bf 8f5f 	dmb	sy
 8011d08:	783b      	ldrb	r3, [r7, #0]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d1fa      	bne.n	8011d04 <WS28xxMulti::FullOn()+0x30>
 8011d0e:	b003      	add	sp, #12
 8011d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d14:	682e      	ldr	r6, [r5, #0]
 8011d16:	3e0b      	subs	r6, #11
 8011d18:	2e02      	cmp	r6, #2
 8011d1a:	d908      	bls.n	8011d2e <WS28xxMulti::FullOn()+0x5a>
 8011d1c:	22ff      	movs	r2, #255	; 0xff
 8011d1e:	4b1c      	ldr	r3, [pc, #112]	; (8011d90 <WS28xxMulti::FullOn()+0xbc>)
 8011d20:	3401      	adds	r4, #1
 8011d22:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8011d26:	f843 2b04 	str.w	r2, [r3], #4
 8011d2a:	d1f9      	bne.n	8011d20 <WS28xxMulti::FullOn()+0x4c>
 8011d2c:	e7e7      	b.n	8011cfe <WS28xxMulti::FullOn()+0x2a>
 8011d2e:	46a0      	mov	r8, r4
 8011d30:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8011d34:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8011d38:	2300      	movs	r3, #0
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	461a      	mov	r2, r3
 8011d3e:	4619      	mov	r1, r3
 8011d40:	e9cd 8800 	strd	r8, r8, [sp]
 8011d44:	f7ff fbee 	bl	8011524 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8011d48:	f04f 0b01 	mov.w	fp, #1
 8011d4c:	45da      	cmp	sl, fp
 8011d4e:	d212      	bcs.n	8011d76 <WS28xxMulti::FullOn()+0xa2>
 8011d50:	2e02      	cmp	r6, #2
 8011d52:	bf14      	ite	ne
 8011d54:	23ff      	movne	r3, #255	; 0xff
 8011d56:	2300      	moveq	r3, #0
 8011d58:	4620      	mov	r0, r4
 8011d5a:	bf14      	ite	ne
 8011d5c:	e9cd 9900 	strdne	r9, r9, [sp]
 8011d60:	e9cd 8800 	strdeq	r8, r8, [sp]
 8011d64:	461a      	mov	r2, r3
 8011d66:	f10a 0101 	add.w	r1, sl, #1
 8011d6a:	3401      	adds	r4, #1
 8011d6c:	f7ff fbda 	bl	8011524 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8011d70:	2c08      	cmp	r4, #8
 8011d72:	d1e1      	bne.n	8011d38 <WS28xxMulti::FullOn()+0x64>
 8011d74:	e7c3      	b.n	8011cfe <WS28xxMulti::FullOn()+0x2a>
 8011d76:	4659      	mov	r1, fp
 8011d78:	23ff      	movs	r3, #255	; 0xff
 8011d7a:	22e0      	movs	r2, #224	; 0xe0
 8011d7c:	4620      	mov	r0, r4
 8011d7e:	e9cd 9900 	strd	r9, r9, [sp]
 8011d82:	f7ff fbcf 	bl	8011524 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8011d86:	f10b 0b01 	add.w	fp, fp, #1
 8011d8a:	e7df      	b.n	8011d4c <WS28xxMulti::FullOn()+0x78>
 8011d8c:	2000c9a8 	andcs	ip, r0, r8, lsr #19
 8011d90:	2000c9b0 			; <UNDEFINED> instruction: 0x2000c9b0

08011d94 <WS28xxMulti::IsUpdating()>:
 8011d94:	f3bf 8f5f 	dmb	sy
 8011d98:	4b01      	ldr	r3, [pc, #4]	; (8011da0 <WS28xxMulti::IsUpdating()+0xc>)
 8011d9a:	7818      	ldrb	r0, [r3, #0]
 8011d9c:	4770      	bx	lr
 8011d9e:	bf00      	nop
 8011da0:	2000c9a8 	andcs	ip, r0, r8, lsr #19

08011da4 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>:
 8011da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011da6:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8011daa:	2400      	movs	r4, #0
 8011dac:	2501      	movs	r5, #1
 8011dae:	4f1a      	ldr	r7, [pc, #104]	; (8011e18 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x74>)
 8011db0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011db4:	4819      	ldr	r0, [pc, #100]	; (8011e1c <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x78>)
 8011db6:	eb07 1702 	add.w	r7, r7, r2, lsl #4
 8011dba:	3106      	adds	r1, #6
 8011dbc:	b2c9      	uxtb	r1, r1
 8011dbe:	4438      	add	r0, r7
 8011dc0:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
 8011dc4:	f101 6108 	add.w	r1, r1, #142606336	; 0x8800000
 8011dc8:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8011dcc:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8011dd0:	f89d e014 	ldrb.w	lr, [sp, #20]
 8011dd4:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8011dd8:	0092      	lsls	r2, r2, #2
 8011dda:	0089      	lsls	r1, r1, #2
 8011ddc:	ea13 0f0c 	tst.w	r3, ip
 8011de0:	f5a2 6080 	sub.w	r0, r2, #1024	; 0x400
 8011de4:	bf16      	itet	ne
 8011de6:	f5a2 6080 	subne.w	r0, r2, #1024	; 0x400
 8011dea:	6005      	streq	r5, [r0, #0]
 8011dec:	6004      	strne	r4, [r0, #0]
 8011dee:	ea1e 0f0c 	tst.w	lr, ip
 8011df2:	f5a2 7000 	sub.w	r0, r2, #512	; 0x200
 8011df6:	bf16      	itet	ne
 8011df8:	f5a2 7000 	subne.w	r0, r2, #512	; 0x200
 8011dfc:	6005      	streq	r5, [r0, #0]
 8011dfe:	6004      	strne	r4, [r0, #0]
 8011e00:	ea16 0f0c 	tst.w	r6, ip
 8011e04:	bf0c      	ite	eq
 8011e06:	6015      	streq	r5, [r2, #0]
 8011e08:	6014      	strne	r4, [r2, #0]
 8011e0a:	3240      	adds	r2, #64	; 0x40
 8011e0c:	4291      	cmp	r1, r2
 8011e0e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8011e12:	d1e3      	bne.n	8011ddc <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x38>
 8011e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e16:	bf00      	nop
 8011e18:	2000c9b0 			; <UNDEFINED> instruction: 0x2000c9b0
 8011e1c:	e1100020 	tst	r0, r0, lsr #32

08011e20 <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>:
 8011e20:	b570      	push	{r4, r5, r6, lr}
 8011e22:	2080      	movs	r0, #128	; 0x80
 8011e24:	2401      	movs	r4, #1
 8011e26:	4e1a      	ldr	r6, [pc, #104]	; (8011e90 <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x70>)
 8011e28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011e2c:	4d19      	ldr	r5, [pc, #100]	; (8011e94 <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x74>)
 8011e2e:	eb06 1602 	add.w	r6, r6, r2, lsl #4
 8011e32:	3106      	adds	r1, #6
 8011e34:	b2c9      	uxtb	r1, r1
 8011e36:	4435      	add	r5, r6
 8011e38:	eb01 02c5 	add.w	r2, r1, r5, lsl #3
 8011e3c:	f101 6108 	add.w	r1, r1, #142606336	; 0x8800000
 8011e40:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8011e44:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011e48:	f89d c010 	ldrb.w	ip, [sp, #16]
 8011e4c:	f89d e014 	ldrb.w	lr, [sp, #20]
 8011e50:	0092      	lsls	r2, r2, #2
 8011e52:	0089      	lsls	r1, r1, #2
 8011e54:	ea13 0500 	ands.w	r5, r3, r0
 8011e58:	f5a2 6680 	sub.w	r6, r2, #1024	; 0x400
 8011e5c:	bf0a      	itet	eq
 8011e5e:	f5a2 6680 	subeq.w	r6, r2, #1024	; 0x400
 8011e62:	6034      	strne	r4, [r6, #0]
 8011e64:	6035      	streq	r5, [r6, #0]
 8011e66:	ea1c 0500 	ands.w	r5, ip, r0
 8011e6a:	f5a2 7600 	sub.w	r6, r2, #512	; 0x200
 8011e6e:	bf0a      	itet	eq
 8011e70:	f5a2 7600 	subeq.w	r6, r2, #512	; 0x200
 8011e74:	6034      	strne	r4, [r6, #0]
 8011e76:	6035      	streq	r5, [r6, #0]
 8011e78:	ea1e 0500 	ands.w	r5, lr, r0
 8011e7c:	bf14      	ite	ne
 8011e7e:	6014      	strne	r4, [r2, #0]
 8011e80:	6015      	streq	r5, [r2, #0]
 8011e82:	3240      	adds	r2, #64	; 0x40
 8011e84:	4291      	cmp	r1, r2
 8011e86:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8011e8a:	d1e3      	bne.n	8011e54 <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x34>
 8011e8c:	bd70      	pop	{r4, r5, r6, pc}
 8011e8e:	bf00      	nop
 8011e90:	2000c9b0 			; <UNDEFINED> instruction: 0x2000c9b0
 8011e94:	e1100020 	tst	r0, r0, lsr #32

08011e98 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>:
 8011e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e9a:	6984      	ldr	r4, [r0, #24]
 8011e9c:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8011ea0:	5ce6      	ldrb	r6, [r4, r3]
 8011ea2:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8011ea6:	7d43      	ldrb	r3, [r0, #21]
 8011ea8:	5d65      	ldrb	r5, [r4, r5]
 8011eaa:	4684      	mov	ip, r0
 8011eac:	4696      	mov	lr, r2
 8011eae:	5de4      	ldrb	r4, [r4, r7]
 8011eb0:	bb23      	cbnz	r3, 8011efc <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x64>
 8011eb2:	6803      	ldr	r3, [r0, #0]
 8011eb4:	b1d3      	cbz	r3, 8011eec <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x54>
 8011eb6:	3b0b      	subs	r3, #11
 8011eb8:	2b01      	cmp	r3, #1
 8011eba:	d94b      	bls.n	8011f54 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xbc>
 8011ebc:	4608      	mov	r0, r1
 8011ebe:	1c51      	adds	r1, r2, #1
 8011ec0:	ea6f 0294 	mvn.w	r2, r4, lsr #2
 8011ec4:	9505      	str	r5, [sp, #20]
 8011ec6:	ea6f 1515 	mvn.w	r5, r5, lsr #4
 8011eca:	9606      	str	r6, [sp, #24]
 8011ecc:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8011ed0:	f086 06c0 	eor.w	r6, r6, #192	; 0xc0
 8011ed4:	f005 050c 	and.w	r5, r5, #12
 8011ed8:	ea42 1296 	orr.w	r2, r2, r6, lsr #6
 8011edc:	432a      	orrs	r2, r5
 8011ede:	4623      	mov	r3, r4
 8011ee0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011ee4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8011ee8:	f7ff bb1c 	b.w	8011524 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8011eec:	6883      	ldr	r3, [r0, #8]
 8011eee:	2b05      	cmp	r3, #5
 8011ef0:	d85a      	bhi.n	8011fa8 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 8011ef2:	e8df f003 	tbb	[pc, r3]
 8011ef6:	534d4744 	movtpl	r4, #55108	; 0xd744
 8011efa:	68833b56 	stmvs	r3, {r1, r2, r4, r6, r8, r9, fp, ip, sp}
 8011efe:	2b05      	cmp	r3, #5
 8011f00:	d825      	bhi.n	8011f4e <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xb6>
 8011f02:	e8df f003 	tbb	[pc, r3]
 8011f06:	0c15181b 	ldceq	8, cr1, [r5], {27}
 8011f0a:	46232403 	strtmi	r2, [r3], -r3, lsl #8
 8011f0e:	9506      	str	r5, [sp, #24]
 8011f10:	4672      	mov	r2, lr
 8011f12:	9605      	str	r6, [sp, #20]
 8011f14:	4660      	mov	r0, ip
 8011f16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011f1a:	f7ff bf43 	b.w	8011da4 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8011f1e:	462b      	mov	r3, r5
 8011f20:	9606      	str	r6, [sp, #24]
 8011f22:	4672      	mov	r2, lr
 8011f24:	9405      	str	r4, [sp, #20]
 8011f26:	4660      	mov	r0, ip
 8011f28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011f2c:	f7ff bf3a 	b.w	8011da4 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8011f30:	462b      	mov	r3, r5
 8011f32:	9406      	str	r4, [sp, #24]
 8011f34:	e7ec      	b.n	8011f10 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x78>
 8011f36:	4633      	mov	r3, r6
 8011f38:	9506      	str	r5, [sp, #24]
 8011f3a:	e7f2      	b.n	8011f22 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0x8a>
 8011f3c:	4633      	mov	r3, r6
 8011f3e:	9406      	str	r4, [sp, #24]
 8011f40:	4672      	mov	r2, lr
 8011f42:	9505      	str	r5, [sp, #20]
 8011f44:	4660      	mov	r0, ip
 8011f46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011f4a:	f7ff bf2b 	b.w	8011da4 <WS28xxMulti::SetColourRTZ(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8011f4e:	4623      	mov	r3, r4
 8011f50:	9606      	str	r6, [sp, #24]
 8011f52:	e7f5      	b.n	8011f40 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xa8>
 8011f54:	9606      	str	r6, [sp, #24]
 8011f56:	4623      	mov	r3, r4
 8011f58:	4608      	mov	r0, r1
 8011f5a:	f89c 2012 	ldrb.w	r2, [ip, #18]
 8011f5e:	f10e 0101 	add.w	r1, lr, #1
 8011f62:	9505      	str	r5, [sp, #20]
 8011f64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011f68:	f7ff badc 	b.w	8011524 <WS28xxMulti::SetPixel4Bytes(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char) [clone .constprop.0]>
 8011f6c:	4623      	mov	r3, r4
 8011f6e:	9606      	str	r6, [sp, #24]
 8011f70:	4672      	mov	r2, lr
 8011f72:	4660      	mov	r0, ip
 8011f74:	9505      	str	r5, [sp, #20]
 8011f76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011f7a:	f7ff bf51 	b.w	8011e20 <WS28xxMulti::SetColourWS2801(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)>
 8011f7e:	4633      	mov	r3, r6
 8011f80:	9406      	str	r4, [sp, #24]
 8011f82:	e7f5      	b.n	8011f70 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xd8>
 8011f84:	4633      	mov	r3, r6
 8011f86:	9506      	str	r5, [sp, #24]
 8011f88:	4672      	mov	r2, lr
 8011f8a:	4660      	mov	r0, ip
 8011f8c:	9405      	str	r4, [sp, #20]
 8011f8e:	e7f2      	b.n	8011f76 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xde>
 8011f90:	462b      	mov	r3, r5
 8011f92:	9406      	str	r4, [sp, #24]
 8011f94:	4672      	mov	r2, lr
 8011f96:	4660      	mov	r0, ip
 8011f98:	9605      	str	r6, [sp, #20]
 8011f9a:	e7ec      	b.n	8011f76 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xde>
 8011f9c:	462b      	mov	r3, r5
 8011f9e:	9606      	str	r6, [sp, #24]
 8011fa0:	e7f2      	b.n	8011f88 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xf0>
 8011fa2:	4623      	mov	r3, r4
 8011fa4:	9506      	str	r5, [sp, #24]
 8011fa6:	e7f5      	b.n	8011f94 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)+0xfc>

08011fa8 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 8011fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011faa:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8011fae:	2400      	movs	r4, #0
 8011fb0:	2501      	movs	r5, #1
 8011fb2:	6986      	ldr	r6, [r0, #24]
 8011fb4:	4f1e      	ldr	r7, [pc, #120]	; (8012030 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x88>)
 8011fb6:	f89d e014 	ldrb.w	lr, [sp, #20]
 8011fba:	eb07 1782 	add.w	r7, r7, r2, lsl #6
 8011fbe:	1d8a      	adds	r2, r1, #6
 8011fc0:	5cf1      	ldrb	r1, [r6, r3]
 8011fc2:	4b1c      	ldr	r3, [pc, #112]	; (8012034 <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x8c>)
 8011fc4:	b2d2      	uxtb	r2, r2
 8011fc6:	443b      	add	r3, r7
 8011fc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011fcc:	f102 6208 	add.w	r2, r2, #142606336	; 0x8800000
 8011fd0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8011fd4:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
 8011fd8:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8011fdc:	f816 000e 	ldrb.w	r0, [r6, lr]
 8011fe0:	f816 e007 	ldrb.w	lr, [r6, r7]
 8011fe4:	f89d 701c 	ldrb.w	r7, [sp, #28]
 8011fe8:	009b      	lsls	r3, r3, #2
 8011fea:	5df6      	ldrb	r6, [r6, r7]
 8011fec:	0092      	lsls	r2, r2, #2
 8011fee:	f5a3 67c0 	sub.w	r7, r3, #1536	; 0x600
 8011ff2:	ea10 0f0c 	tst.w	r0, ip
 8011ff6:	bf0c      	ite	eq
 8011ff8:	603d      	streq	r5, [r7, #0]
 8011ffa:	603c      	strne	r4, [r7, #0]
 8011ffc:	f5a3 6780 	sub.w	r7, r3, #1024	; 0x400
 8012000:	ea11 0f0c 	tst.w	r1, ip
 8012004:	bf0c      	ite	eq
 8012006:	603d      	streq	r5, [r7, #0]
 8012008:	603c      	strne	r4, [r7, #0]
 801200a:	ea1e 0f0c 	tst.w	lr, ip
 801200e:	f5a3 7700 	sub.w	r7, r3, #512	; 0x200
 8012012:	bf0c      	ite	eq
 8012014:	603d      	streq	r5, [r7, #0]
 8012016:	603c      	strne	r4, [r7, #0]
 8012018:	ea16 0f0c 	tst.w	r6, ip
 801201c:	bf0c      	ite	eq
 801201e:	601d      	streq	r5, [r3, #0]
 8012020:	601c      	strne	r4, [r3, #0]
 8012022:	3340      	adds	r3, #64	; 0x40
 8012024:	429a      	cmp	r2, r3
 8012026:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801202a:	d1e0      	bne.n	8011fee <WS28xxMulti::SetPixel(unsigned int, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x46>
 801202c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801202e:	bf00      	nop
 8012030:	2000c9b0 			; <UNDEFINED> instruction: 0x2000c9b0
 8012034:	e1100030 	tst	r0, r0, lsr r0

08012038 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 8012038:	2300      	movs	r3, #0
 801203a:	2020      	movs	r0, #32
 801203c:	b510      	push	{r4, lr}
 801203e:	4a04      	ldr	r2, [pc, #16]	; (8012050 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 8012040:	428b      	cmp	r3, r1
 8012042:	d100      	bne.n	8012046 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0xe>
 8012044:	bd10      	pop	{r4, pc}
 8012046:	f852 4b04 	ldr.w	r4, [r2], #4
 801204a:	3301      	adds	r3, #1
 801204c:	4420      	add	r0, r4
 801204e:	e7f7      	b.n	8012040 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 8012050:	0801b348 	stmdaeq	r1, {r3, r6, r8, r9, ip, sp, pc}

08012054 <SpiFlashStore::Init()>:
 8012054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012058:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8012170 <SpiFlashStore::Init()+0x11c>
 801205c:	4607      	mov	r7, r0
 801205e:	b085      	sub	sp, #20
 8012060:	f8d8 0000 	ldr.w	r0, [r8]
 8012064:	f000 fd5c 	bl	8012b20 <FlashRom::GetSectorSize() const>
 8012068:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 801206c:	4605      	mov	r5, r0
 801206e:	d17d      	bne.n	801216c <SpiFlashStore::Init()+0x118>
 8012070:	f8d8 0000 	ldr.w	r0, [r8]
 8012074:	f000 fd4c 	bl	8012b10 <FlashRom::GetSize() const>
 8012078:	4b3e      	ldr	r3, [pc, #248]	; (8012174 <SpiFlashStore::Init()+0x120>)
 801207a:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 801207e:	f3c1 060b 	ubfx	r6, r1, #0, #12
 8012082:	6019      	str	r1, [r3, #0]
 8012084:	2e00      	cmp	r6, #0
 8012086:	d171      	bne.n	801216c <SpiFlashStore::Init()+0x118>
 8012088:	4c3b      	ldr	r4, [pc, #236]	; (8012178 <SpiFlashStore::Init()+0x124>)
 801208a:	ab03      	add	r3, sp, #12
 801208c:	9300      	str	r3, [sp, #0]
 801208e:	462a      	mov	r2, r5
 8012090:	4623      	mov	r3, r4
 8012092:	f8d8 0000 	ldr.w	r0, [r8]
 8012096:	f000 fd46 	bl	8012b26 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 801209a:	7823      	ldrb	r3, [r4, #0]
 801209c:	2b41      	cmp	r3, #65	; 0x41
 801209e:	bf1c      	itt	ne
 80120a0:	2341      	movne	r3, #65	; 0x41
 80120a2:	7023      	strbne	r3, [r4, #0]
 80120a4:	7863      	ldrb	r3, [r4, #1]
 80120a6:	bf14      	ite	ne
 80120a8:	4635      	movne	r5, r6
 80120aa:	2501      	moveq	r5, #1
 80120ac:	2b76      	cmp	r3, #118	; 0x76
 80120ae:	bf1c      	itt	ne
 80120b0:	2376      	movne	r3, #118	; 0x76
 80120b2:	7063      	strbne	r3, [r4, #1]
 80120b4:	78a3      	ldrb	r3, [r4, #2]
 80120b6:	bf18      	it	ne
 80120b8:	2500      	movne	r5, #0
 80120ba:	2b56      	cmp	r3, #86	; 0x56
 80120bc:	bf1c      	itt	ne
 80120be:	2356      	movne	r3, #86	; 0x56
 80120c0:	70a3      	strbne	r3, [r4, #2]
 80120c2:	78e3      	ldrb	r3, [r4, #3]
 80120c4:	bf18      	it	ne
 80120c6:	2500      	movne	r5, #0
 80120c8:	2b10      	cmp	r3, #16
 80120ca:	d022      	beq.n	8012112 <SpiFlashStore::Init()+0xbe>
 80120cc:	2310      	movs	r3, #16
 80120ce:	70e3      	strb	r3, [r4, #3]
 80120d0:	2201      	movs	r2, #1
 80120d2:	2500      	movs	r5, #0
 80120d4:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80120d8:	4b28      	ldr	r3, [pc, #160]	; (801217c <SpiFlashStore::Init()+0x128>)
 80120da:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8012180 <SpiFlashStore::Init()+0x12c>
 80120de:	701a      	strb	r2, [r3, #0]
 80120e0:	4631      	mov	r1, r6
 80120e2:	4638      	mov	r0, r7
 80120e4:	f7ff ffa8 	bl	8012038 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 80120e8:	1823      	adds	r3, r4, r0
 80120ea:	5425      	strb	r5, [r4, r0]
 80120ec:	705d      	strb	r5, [r3, #1]
 80120ee:	709d      	strb	r5, [r3, #2]
 80120f0:	70dd      	strb	r5, [r3, #3]
 80120f2:	f858 3b04 	ldr.w	r3, [r8], #4
 80120f6:	1d02      	adds	r2, r0, #4
 80120f8:	4403      	add	r3, r0
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d332      	bcc.n	8012164 <SpiFlashStore::Init()+0x110>
 80120fe:	3601      	adds	r6, #1
 8012100:	2e1c      	cmp	r6, #28
 8012102:	d1ed      	bne.n	80120e0 <SpiFlashStore::Init()+0x8c>
 8012104:	2501      	movs	r5, #1
 8012106:	4b1f      	ldr	r3, [pc, #124]	; (8012184 <SpiFlashStore::Init()+0x130>)
 8012108:	601d      	str	r5, [r3, #0]
 801210a:	4628      	mov	r0, r5
 801210c:	b005      	add	sp, #20
 801210e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012112:	2d00      	cmp	r5, #0
 8012114:	d0dc      	beq.n	80120d0 <SpiFlashStore::Init()+0x7c>
 8012116:	f04f 0900 	mov.w	r9, #0
 801211a:	46c8      	mov	r8, r9
 801211c:	4631      	mov	r1, r6
 801211e:	4638      	mov	r0, r7
 8012120:	f7ff ff8a 	bl	8012038 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8012124:	5c23      	ldrb	r3, [r4, r0]
 8012126:	2bff      	cmp	r3, #255	; 0xff
 8012128:	d112      	bne.n	8012150 <SpiFlashStore::Init()+0xfc>
 801212a:	1823      	adds	r3, r4, r0
 801212c:	785a      	ldrb	r2, [r3, #1]
 801212e:	2aff      	cmp	r2, #255	; 0xff
 8012130:	d10e      	bne.n	8012150 <SpiFlashStore::Init()+0xfc>
 8012132:	789a      	ldrb	r2, [r3, #2]
 8012134:	2aff      	cmp	r2, #255	; 0xff
 8012136:	d10b      	bne.n	8012150 <SpiFlashStore::Init()+0xfc>
 8012138:	78da      	ldrb	r2, [r3, #3]
 801213a:	2aff      	cmp	r2, #255	; 0xff
 801213c:	d108      	bne.n	8012150 <SpiFlashStore::Init()+0xfc>
 801213e:	46a9      	mov	r9, r5
 8012140:	f804 8000 	strb.w	r8, [r4, r0]
 8012144:	f883 8001 	strb.w	r8, [r3, #1]
 8012148:	f883 8002 	strb.w	r8, [r3, #2]
 801214c:	f883 8003 	strb.w	r8, [r3, #3]
 8012150:	3601      	adds	r6, #1
 8012152:	2e1c      	cmp	r6, #28
 8012154:	d1e2      	bne.n	801211c <SpiFlashStore::Init()+0xc8>
 8012156:	f1b9 0f00 	cmp.w	r9, #0
 801215a:	d0d6      	beq.n	801210a <SpiFlashStore::Init()+0xb6>
 801215c:	2201      	movs	r2, #1
 801215e:	4b09      	ldr	r3, [pc, #36]	; (8012184 <SpiFlashStore::Init()+0x130>)
 8012160:	601a      	str	r2, [r3, #0]
 8012162:	e7d2      	b.n	801210a <SpiFlashStore::Init()+0xb6>
 8012164:	f804 9002 	strb.w	r9, [r4, r2]
 8012168:	3201      	adds	r2, #1
 801216a:	e7c6      	b.n	80120fa <SpiFlashStore::Init()+0xa6>
 801216c:	2500      	movs	r5, #0
 801216e:	e7cc      	b.n	801210a <SpiFlashStore::Init()+0xb6>
 8012170:	200159ec 	andcs	r5, r1, ip, ror #19
 8012174:	200159b4 			; <UNDEFINED> instruction: 0x200159b4
 8012178:	200149b4 			; <UNDEFINED> instruction: 0x200149b4
 801217c:	200159c8 	andcs	r5, r1, r8, asr #19
 8012180:	0801b348 	stmdaeq	r1, {r3, r6, r8, r9, ip, sp, pc}
 8012184:	200159c0 	andcs	r5, r1, r0, asr #19

08012188 <SpiFlashStore::SpiFlashStore()>:
 8012188:	b538      	push	{r3, r4, r5, lr}
 801218a:	4b0d      	ldr	r3, [pc, #52]	; (80121c0 <SpiFlashStore::SpiFlashStore()+0x38>)
 801218c:	4604      	mov	r4, r0
 801218e:	6018      	str	r0, [r3, #0]
 8012190:	4b0c      	ldr	r3, [pc, #48]	; (80121c4 <SpiFlashStore::SpiFlashStore()+0x3c>)
 8012192:	4d0d      	ldr	r5, [pc, #52]	; (80121c8 <SpiFlashStore::SpiFlashStore()+0x40>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	781b      	ldrb	r3, [r3, #0]
 8012198:	b113      	cbz	r3, 80121a0 <SpiFlashStore::SpiFlashStore()+0x18>
 801219a:	f7ff ff5b 	bl	8012054 <SpiFlashStore::Init()>
 801219e:	7028      	strb	r0, [r5, #0]
 80121a0:	782b      	ldrb	r3, [r5, #0]
 80121a2:	b153      	cbz	r3, 80121ba <SpiFlashStore::SpiFlashStore()+0x32>
 80121a4:	2320      	movs	r3, #32
 80121a6:	2200      	movs	r2, #0
 80121a8:	4908      	ldr	r1, [pc, #32]	; (80121cc <SpiFlashStore::SpiFlashStore()+0x44>)
 80121aa:	f851 0b04 	ldr.w	r0, [r1], #4
 80121ae:	3201      	adds	r2, #1
 80121b0:	2a1c      	cmp	r2, #28
 80121b2:	4403      	add	r3, r0
 80121b4:	d1f9      	bne.n	80121aa <SpiFlashStore::SpiFlashStore()+0x22>
 80121b6:	4a06      	ldr	r2, [pc, #24]	; (80121d0 <SpiFlashStore::SpiFlashStore()+0x48>)
 80121b8:	6013      	str	r3, [r2, #0]
 80121ba:	4620      	mov	r0, r4
 80121bc:	bd38      	pop	{r3, r4, r5, pc}
 80121be:	bf00      	nop
 80121c0:	200159c4 	andcs	r5, r1, r4, asr #19
 80121c4:	200159ec 	andcs	r5, r1, ip, ror #19
 80121c8:	200159b8 			; <UNDEFINED> instruction: 0x200159b8
 80121cc:	0801b348 	stmdaeq	r1, {r3, r6, r8, r9, ip, sp, pc}
 80121d0:	200159bc 			; <UNDEFINED> instruction: 0x200159bc

080121d4 <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 80121d4:	b508      	push	{r3, lr}
 80121d6:	f7ff ff2f 	bl	8012038 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 80121da:	2300      	movs	r3, #0
 80121dc:	4904      	ldr	r1, [pc, #16]	; (80121f0 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 80121de:	1842      	adds	r2, r0, r1
 80121e0:	540b      	strb	r3, [r1, r0]
 80121e2:	7053      	strb	r3, [r2, #1]
 80121e4:	7093      	strb	r3, [r2, #2]
 80121e6:	70d3      	strb	r3, [r2, #3]
 80121e8:	2201      	movs	r2, #1
 80121ea:	4b02      	ldr	r3, [pc, #8]	; (80121f4 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 80121ec:	601a      	str	r2, [r3, #0]
 80121ee:	bd08      	pop	{r3, pc}
 80121f0:	200149b4 			; <UNDEFINED> instruction: 0x200149b4
 80121f4:	200159c0 	andcs	r5, r1, r0, asr #19

080121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 80121f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121fc:	461c      	mov	r4, r3
 80121fe:	4b19      	ldr	r3, [pc, #100]	; (8012264 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 8012200:	4616      	mov	r6, r2
 8012202:	781f      	ldrb	r7, [r3, #0]
 8012204:	9d07      	ldr	r5, [sp, #28]
 8012206:	b307      	cbz	r7, 801224a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8012208:	f7ff ff16 	bl	8012038 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 801220c:	f04f 0c00 	mov.w	ip, #0
 8012210:	4a15      	ldr	r2, [pc, #84]	; (8012268 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 8012212:	1831      	adds	r1, r6, r0
 8012214:	1e63      	subs	r3, r4, #1
 8012216:	9c06      	ldr	r4, [sp, #24]
 8012218:	4411      	add	r1, r2
 801221a:	440c      	add	r4, r1
 801221c:	42a1      	cmp	r1, r4
 801221e:	d116      	bne.n	801224e <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 8012220:	f1bc 0f00 	cmp.w	ip, #0
 8012224:	d011      	beq.n	801224a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8012226:	4b11      	ldr	r3, [pc, #68]	; (801226c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 8012228:	6819      	ldr	r1, [r3, #0]
 801222a:	b109      	cbz	r1, 8012230 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 801222c:	2906      	cmp	r1, #6
 801222e:	d101      	bne.n	8012234 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 8012230:	2101      	movs	r1, #1
 8012232:	6019      	str	r1, [r3, #0]
 8012234:	4b0e      	ldr	r3, [pc, #56]	; (8012270 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 8012236:	6819      	ldr	r1, [r3, #0]
 8012238:	4b0e      	ldr	r3, [pc, #56]	; (8012274 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 801223a:	6019      	str	r1, [r3, #0]
 801223c:	b12e      	cbz	r6, 801224a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 801223e:	b125      	cbz	r5, 801224a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8012240:	9b08      	ldr	r3, [sp, #32]
 8012242:	4418      	add	r0, r3
 8012244:	5813      	ldr	r3, [r2, r0]
 8012246:	432b      	orrs	r3, r5
 8012248:	5013      	str	r3, [r2, r0]
 801224a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801224e:	f891 8000 	ldrb.w	r8, [r1]
 8012252:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8012256:	3101      	adds	r1, #1
 8012258:	45f0      	cmp	r8, lr
 801225a:	bf1c      	itt	ne
 801225c:	f801 ec01 	strbne.w	lr, [r1, #-1]
 8012260:	46bc      	movne	ip, r7
 8012262:	e7db      	b.n	801221c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 8012264:	200159b8 			; <UNDEFINED> instruction: 0x200159b8
 8012268:	200149b4 			; <UNDEFINED> instruction: 0x200149b4
 801226c:	200159c0 	andcs	r5, r1, r0, asr #19
 8012270:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4
 8012274:	200149b0 			; <UNDEFINED> instruction: 0x200149b0

08012278 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>:
 8012278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801227c:	461d      	mov	r5, r3
 801227e:	4b15      	ldr	r3, [pc, #84]	; (80122d4 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x5c>)
 8012280:	b085      	sub	sp, #20
 8012282:	781b      	ldrb	r3, [r3, #0]
 8012284:	4607      	mov	r7, r0
 8012286:	4614      	mov	r4, r2
 8012288:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 801228c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8012290:	b193      	cbz	r3, 80122b8 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 8012292:	f7ff fed1 	bl	8012038 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 8012296:	4a10      	ldr	r2, [pc, #64]	; (80122d8 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x60>)
 8012298:	eb08 0600 	add.w	r6, r8, r0
 801229c:	18b3      	adds	r3, r6, r2
 801229e:	f1b9 0f00 	cmp.w	r9, #0
 80122a2:	d013      	beq.n	80122cc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 80122a4:	5990      	ldr	r0, [r2, r6]
 80122a6:	b988      	cbnz	r0, 80122cc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 80122a8:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80122ac:	4623      	mov	r3, r4
 80122ae:	4642      	mov	r2, r8
 80122b0:	4638      	mov	r0, r7
 80122b2:	9500      	str	r5, [sp, #0]
 80122b4:	f7ff ffa0 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80122b8:	b005      	add	sp, #20
 80122ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80122c6:	429d      	cmp	r5, r3
 80122c8:	d1f9      	bne.n	80122be <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x46>
 80122ca:	e7f5      	b.n	80122b8 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 80122cc:	3c01      	subs	r4, #1
 80122ce:	441d      	add	r5, r3
 80122d0:	e7f9      	b.n	80122c6 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x4e>
 80122d2:	bf00      	nop
 80122d4:	200159b8 			; <UNDEFINED> instruction: 0x200159b8
 80122d8:	200149b4 			; <UNDEFINED> instruction: 0x200149b4

080122dc <SpiFlashStore::Flash()>:
 80122dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80122de:	4c25      	ldr	r4, [pc, #148]	; (8012374 <SpiFlashStore::Flash()+0x98>)
 80122e0:	6820      	ldr	r0, [r4, #0]
 80122e2:	2800      	cmp	r0, #0
 80122e4:	d043      	beq.n	801236e <SpiFlashStore::Flash()+0x92>
 80122e6:	3801      	subs	r0, #1
 80122e8:	2805      	cmp	r0, #5
 80122ea:	d831      	bhi.n	8012350 <SpiFlashStore::Flash()+0x74>
 80122ec:	e8df f000 	tbb	[pc, r0]
 80122f0:	2e140b03 	vnmlscs.f64	d0, d4, d3
 80122f4:	4b203025 	blmi	881e390 <__exidx_end+0x8023bc>
 80122f8:	681a      	ldr	r2, [r3, #0]
 80122fa:	4b20      	ldr	r3, [pc, #128]	; (801237c <SpiFlashStore::Flash()+0xa0>)
 80122fc:	601a      	str	r2, [r3, #0]
 80122fe:	2302      	movs	r3, #2
 8012300:	6023      	str	r3, [r4, #0]
 8012302:	2001      	movs	r0, #1
 8012304:	e033      	b.n	801236e <SpiFlashStore::Flash()+0x92>
 8012306:	4b1c      	ldr	r3, [pc, #112]	; (8012378 <SpiFlashStore::Flash()+0x9c>)
 8012308:	4a1c      	ldr	r2, [pc, #112]	; (801237c <SpiFlashStore::Flash()+0xa0>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	6812      	ldr	r2, [r2, #0]
 801230e:	1a9b      	subs	r3, r3, r2
 8012310:	2b63      	cmp	r3, #99	; 0x63
 8012312:	d9f6      	bls.n	8012302 <SpiFlashStore::Flash()+0x26>
 8012314:	2303      	movs	r3, #3
 8012316:	e7f3      	b.n	8012300 <SpiFlashStore::Flash()+0x24>
 8012318:	4919      	ldr	r1, [pc, #100]	; (8012380 <SpiFlashStore::Flash()+0xa4>)
 801231a:	481a      	ldr	r0, [pc, #104]	; (8012384 <SpiFlashStore::Flash()+0xa8>)
 801231c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012320:	6809      	ldr	r1, [r1, #0]
 8012322:	6800      	ldr	r0, [r0, #0]
 8012324:	ab03      	add	r3, sp, #12
 8012326:	f000 fc0d 	bl	8012b44 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 801232a:	2800      	cmp	r0, #0
 801232c:	d0e9      	beq.n	8012302 <SpiFlashStore::Flash()+0x26>
 801232e:	4b12      	ldr	r3, [pc, #72]	; (8012378 <SpiFlashStore::Flash()+0x9c>)
 8012330:	681a      	ldr	r2, [r3, #0]
 8012332:	4b12      	ldr	r3, [pc, #72]	; (801237c <SpiFlashStore::Flash()+0xa0>)
 8012334:	601a      	str	r2, [r3, #0]
 8012336:	2305      	movs	r3, #5
 8012338:	e7e2      	b.n	8012300 <SpiFlashStore::Flash()+0x24>
 801233a:	4b0f      	ldr	r3, [pc, #60]	; (8012378 <SpiFlashStore::Flash()+0x9c>)
 801233c:	4a0f      	ldr	r2, [pc, #60]	; (801237c <SpiFlashStore::Flash()+0xa0>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	6812      	ldr	r2, [r2, #0]
 8012342:	1a9b      	subs	r3, r3, r2
 8012344:	2b63      	cmp	r3, #99	; 0x63
 8012346:	d9dc      	bls.n	8012302 <SpiFlashStore::Flash()+0x26>
 8012348:	2304      	movs	r3, #4
 801234a:	e7d9      	b.n	8012300 <SpiFlashStore::Flash()+0x24>
 801234c:	2306      	movs	r3, #6
 801234e:	e7d7      	b.n	8012300 <SpiFlashStore::Flash()+0x24>
 8012350:	ab03      	add	r3, sp, #12
 8012352:	4a0d      	ldr	r2, [pc, #52]	; (8012388 <SpiFlashStore::Flash()+0xac>)
 8012354:	490a      	ldr	r1, [pc, #40]	; (8012380 <SpiFlashStore::Flash()+0xa4>)
 8012356:	480b      	ldr	r0, [pc, #44]	; (8012384 <SpiFlashStore::Flash()+0xa8>)
 8012358:	9300      	str	r3, [sp, #0]
 801235a:	6812      	ldr	r2, [r2, #0]
 801235c:	4b0b      	ldr	r3, [pc, #44]	; (801238c <SpiFlashStore::Flash()+0xb0>)
 801235e:	6809      	ldr	r1, [r1, #0]
 8012360:	6800      	ldr	r0, [r0, #0]
 8012362:	f000 fc8f 	bl	8012c84 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 8012366:	2800      	cmp	r0, #0
 8012368:	d0cb      	beq.n	8012302 <SpiFlashStore::Flash()+0x26>
 801236a:	2000      	movs	r0, #0
 801236c:	6020      	str	r0, [r4, #0]
 801236e:	b004      	add	sp, #16
 8012370:	bd10      	pop	{r4, pc}
 8012372:	bf00      	nop
 8012374:	200159c0 	andcs	r5, r1, r0, asr #19
 8012378:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4
 801237c:	200149b0 			; <UNDEFINED> instruction: 0x200149b0
 8012380:	200159b4 			; <UNDEFINED> instruction: 0x200159b4
 8012384:	200159ec 	andcs	r5, r1, ip, ror #19
 8012388:	200159bc 			; <UNDEFINED> instruction: 0x200159bc
 801238c:	200149b4 			; <UNDEFINED> instruction: 0x200149b4

08012390 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8012390:	4770      	bx	lr
	...

08012394 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 8012394:	b507      	push	{r0, r1, r2, lr}
 8012396:	2300      	movs	r3, #0
 8012398:	460a      	mov	r2, r1
 801239a:	2101      	movs	r1, #1
 801239c:	e9cd 3100 	strd	r3, r1, [sp]
 80123a0:	4804      	ldr	r0, [pc, #16]	; (80123b4 <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x20>)
 80123a2:	2322      	movs	r3, #34	; 0x22
 80123a4:	210f      	movs	r1, #15
 80123a6:	6800      	ldr	r0, [r0, #0]
 80123a8:	f7ff ff66 	bl	8012278 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 80123ac:	b003      	add	sp, #12
 80123ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80123b2:	bf00      	nop
 80123b4:	200159c4 	andcs	r5, r1, r4, asr #19

080123b8 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 80123b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123ba:	2200      	movs	r2, #0
 80123bc:	460b      	mov	r3, r1
 80123be:	2122      	movs	r1, #34	; 0x22
 80123c0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80123c4:	4804      	ldr	r0, [pc, #16]	; (80123d8 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 80123c6:	9100      	str	r1, [sp, #0]
 80123c8:	6800      	ldr	r0, [r0, #0]
 80123ca:	210f      	movs	r1, #15
 80123cc:	f7ff ff14 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80123d0:	b005      	add	sp, #20
 80123d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80123d6:	bf00      	nop
 80123d8:	200159c4 	andcs	r5, r1, r4, asr #19

080123dc <StoreDisplayUdf::~StoreDisplayUdf()>:
 80123dc:	b510      	push	{r4, lr}
 80123de:	4604      	mov	r4, r0
 80123e0:	f004 f932 	bl	8016648 <operator delete(void*)>
 80123e4:	4620      	mov	r0, r4
 80123e6:	bd10      	pop	{r4, pc}

080123e8 <StoreDisplayUdf::StoreDisplayUdf()>:
 80123e8:	4a02      	ldr	r2, [pc, #8]	; (80123f4 <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 80123ea:	6002      	str	r2, [r0, #0]
 80123ec:	4a02      	ldr	r2, [pc, #8]	; (80123f8 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 80123ee:	6010      	str	r0, [r2, #0]
 80123f0:	4770      	bx	lr
 80123f2:	bf00      	nop
 80123f4:	0801b3c0 	stmdaeq	r1, {r6, r7, r8, r9, ip, sp, pc}
 80123f8:	200159cc 	andcs	r5, r1, ip, asr #19

080123fc <StoreNetwork::~StoreNetwork()>:
 80123fc:	4770      	bx	lr

080123fe <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 80123fe:	3804      	subs	r0, #4
 8012400:	4770      	bx	lr
	...

08012404 <StoreNetwork::Update(networkparams::Params const*)>:
 8012404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012406:	2200      	movs	r2, #0
 8012408:	460b      	mov	r3, r1
 801240a:	215e      	movs	r1, #94	; 0x5e
 801240c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8012410:	4804      	ldr	r0, [pc, #16]	; (8012424 <StoreNetwork::Update(networkparams::Params const*)+0x20>)
 8012412:	9100      	str	r1, [sp, #0]
 8012414:	6800      	ldr	r0, [r0, #0]
 8012416:	4611      	mov	r1, r2
 8012418:	f7ff feee 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801241c:	b005      	add	sp, #20
 801241e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012422:	bf00      	nop
 8012424:	200159c4 	andcs	r5, r1, r4, asr #19

08012428 <StoreNetwork::SaveGatewayIp(unsigned int)>:
 8012428:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801242a:	2308      	movs	r3, #8
 801242c:	9105      	str	r1, [sp, #20]
 801242e:	2100      	movs	r1, #0
 8012430:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012434:	2304      	movs	r3, #4
 8012436:	4805      	ldr	r0, [pc, #20]	; (801244c <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 8012438:	9300      	str	r3, [sp, #0]
 801243a:	220c      	movs	r2, #12
 801243c:	6800      	ldr	r0, [r0, #0]
 801243e:	ab05      	add	r3, sp, #20
 8012440:	f7ff feda 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012444:	b007      	add	sp, #28
 8012446:	f85d fb04 	ldr.w	pc, [sp], #4
 801244a:	bf00      	nop
 801244c:	200159c4 	andcs	r5, r1, r4, asr #19

08012450 <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 8012450:	f1a0 0004 	sub.w	r0, r0, #4
 8012454:	e7e8      	b.n	8012428 <StoreNetwork::SaveGatewayIp(unsigned int)>
 8012456:	bf00      	nop

08012458 <StoreNetwork::SaveNetMask(unsigned int)>:
 8012458:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801245a:	2304      	movs	r3, #4
 801245c:	9105      	str	r1, [sp, #20]
 801245e:	2100      	movs	r1, #0
 8012460:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012464:	4804      	ldr	r0, [pc, #16]	; (8012478 <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 8012466:	9300      	str	r3, [sp, #0]
 8012468:	2208      	movs	r2, #8
 801246a:	6800      	ldr	r0, [r0, #0]
 801246c:	ab05      	add	r3, sp, #20
 801246e:	f7ff fec3 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012472:	b007      	add	sp, #28
 8012474:	f85d fb04 	ldr.w	pc, [sp], #4
 8012478:	200159c4 	andcs	r5, r1, r4, asr #19

0801247c <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 801247c:	f1a0 0004 	sub.w	r0, r0, #4
 8012480:	e7ea      	b.n	8012458 <StoreNetwork::SaveNetMask(unsigned int)>
 8012482:	bf00      	nop

08012484 <StoreNetwork::SaveIp(unsigned int)>:
 8012484:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012486:	2302      	movs	r3, #2
 8012488:	9105      	str	r1, [sp, #20]
 801248a:	2100      	movs	r1, #0
 801248c:	2204      	movs	r2, #4
 801248e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012492:	4804      	ldr	r0, [pc, #16]	; (80124a4 <StoreNetwork::SaveIp(unsigned int)+0x20>)
 8012494:	9200      	str	r2, [sp, #0]
 8012496:	6800      	ldr	r0, [r0, #0]
 8012498:	ab05      	add	r3, sp, #20
 801249a:	f7ff fead 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801249e:	b007      	add	sp, #28
 80124a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80124a4:	200159c4 	andcs	r5, r1, r4, asr #19

080124a8 <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 80124a8:	f1a0 0004 	sub.w	r0, r0, #4
 80124ac:	e7ea      	b.n	8012484 <StoreNetwork::SaveIp(unsigned int)>
 80124ae:	bf00      	nop

080124b0 <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 80124b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80124b2:	460b      	mov	r3, r1
 80124b4:	2020      	movs	r0, #32
 80124b6:	2100      	movs	r1, #0
 80124b8:	2a40      	cmp	r2, #64	; 0x40
 80124ba:	bf28      	it	cs
 80124bc:	2240      	movcs	r2, #64	; 0x40
 80124be:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80124c2:	4804      	ldr	r0, [pc, #16]	; (80124d4 <StoreNetwork::SaveHostName(char const*, unsigned int)+0x24>)
 80124c4:	9200      	str	r2, [sp, #0]
 80124c6:	6800      	ldr	r0, [r0, #0]
 80124c8:	2215      	movs	r2, #21
 80124ca:	f7ff fe95 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80124ce:	b005      	add	sp, #20
 80124d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80124d4:	200159c4 	andcs	r5, r1, r4, asr #19

080124d8 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 80124d8:	f1a0 0004 	sub.w	r0, r0, #4
 80124dc:	e7e8      	b.n	80124b0 <StoreNetwork::SaveHostName(char const*, unsigned int)>
 80124de:	bf00      	nop

080124e0 <StoreNetwork::~StoreNetwork()>:
 80124e0:	b510      	push	{r4, lr}
 80124e2:	4604      	mov	r4, r0
 80124e4:	f004 f8b0 	bl	8016648 <operator delete(void*)>
 80124e8:	4620      	mov	r0, r4
 80124ea:	bd10      	pop	{r4, pc}

080124ec <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 80124ec:	f1a0 0004 	sub.w	r0, r0, #4
 80124f0:	e7f6      	b.n	80124e0 <StoreNetwork::~StoreNetwork()>
	...

080124f4 <StoreNetwork::Copy(networkparams::Params*)>:
 80124f4:	b507      	push	{r0, r1, r2, lr}
 80124f6:	2301      	movs	r3, #1
 80124f8:	460a      	mov	r2, r1
 80124fa:	2100      	movs	r1, #0
 80124fc:	e9cd 1300 	strd	r1, r3, [sp]
 8012500:	4803      	ldr	r0, [pc, #12]	; (8012510 <StoreNetwork::Copy(networkparams::Params*)+0x1c>)
 8012502:	235e      	movs	r3, #94	; 0x5e
 8012504:	6800      	ldr	r0, [r0, #0]
 8012506:	f7ff feb7 	bl	8012278 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 801250a:	b003      	add	sp, #12
 801250c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012510:	200159c4 	andcs	r5, r1, r4, asr #19

08012514 <StoreNetwork::StoreNetwork()>:
 8012514:	4a03      	ldr	r2, [pc, #12]	; (8012524 <StoreNetwork::StoreNetwork()+0x10>)
 8012516:	6002      	str	r2, [r0, #0]
 8012518:	322c      	adds	r2, #44	; 0x2c
 801251a:	6042      	str	r2, [r0, #4]
 801251c:	4a02      	ldr	r2, [pc, #8]	; (8012528 <StoreNetwork::StoreNetwork()+0x14>)
 801251e:	6010      	str	r0, [r2, #0]
 8012520:	4770      	bx	lr
 8012522:	bf00      	nop
 8012524:	0801b3d8 	stmdaeq	r1, {r3, r4, r6, r7, r8, r9, ip, sp, pc}
 8012528:	200159d0 	ldrdcs	r5, [r1], -r0

0801252c <StoreRDMDevice::~StoreRDMDevice()>:
 801252c:	4770      	bx	lr

0801252e <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 801252e:	3804      	subs	r0, #4
 8012530:	4770      	bx	lr
	...

08012534 <StoreRDMDevice::Update(TRDMDeviceParams const*)>:
 8012534:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012536:	2200      	movs	r2, #0
 8012538:	460b      	mov	r3, r1
 801253a:	2129      	movs	r1, #41	; 0x29
 801253c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8012540:	4804      	ldr	r0, [pc, #16]	; (8012554 <StoreRDMDevice::Update(TRDMDeviceParams const*)+0x20>)
 8012542:	9100      	str	r1, [sp, #0]
 8012544:	6800      	ldr	r0, [r0, #0]
 8012546:	210b      	movs	r1, #11
 8012548:	f7ff fe56 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801254c:	b005      	add	sp, #20
 801254e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012552:	bf00      	nop
 8012554:	200159c4 	andcs	r5, r1, r4, asr #19

08012558 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 8012558:	b570      	push	{r4, r5, r6, lr}
 801255a:	2401      	movs	r4, #1
 801255c:	2600      	movs	r6, #0
 801255e:	4d0c      	ldr	r5, [pc, #48]	; (8012590 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 8012560:	b086      	sub	sp, #24
 8012562:	460b      	mov	r3, r1
 8012564:	6828      	ldr	r0, [r5, #0]
 8012566:	f88d 2017 	strb.w	r2, [sp, #23]
 801256a:	9200      	str	r2, [sp, #0]
 801256c:	210b      	movs	r1, #11
 801256e:	2204      	movs	r2, #4
 8012570:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8012574:	f7ff fe40 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012578:	2224      	movs	r2, #36	; 0x24
 801257a:	210b      	movs	r1, #11
 801257c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8012580:	6828      	ldr	r0, [r5, #0]
 8012582:	9400      	str	r4, [sp, #0]
 8012584:	f10d 0317 	add.w	r3, sp, #23
 8012588:	f7ff fe36 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801258c:	b006      	add	sp, #24
 801258e:	bd70      	pop	{r4, r5, r6, pc}
 8012590:	200159c4 	andcs	r5, r1, r4, asr #19

08012594 <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 8012594:	f1a0 0004 	sub.w	r0, r0, #4
 8012598:	e7de      	b.n	8012558 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 801259a:	bf00      	nop

0801259c <StoreRDMDevice::~StoreRDMDevice()>:
 801259c:	b510      	push	{r4, lr}
 801259e:	4604      	mov	r4, r0
 80125a0:	f004 f852 	bl	8016648 <operator delete(void*)>
 80125a4:	4620      	mov	r0, r4
 80125a6:	bd10      	pop	{r4, pc}

080125a8 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 80125a8:	f1a0 0004 	sub.w	r0, r0, #4
 80125ac:	e7f6      	b.n	801259c <StoreRDMDevice::~StoreRDMDevice()>
	...

080125b0 <StoreRDMDevice::Copy(TRDMDeviceParams*)>:
 80125b0:	b507      	push	{r0, r1, r2, lr}
 80125b2:	2300      	movs	r3, #0
 80125b4:	460a      	mov	r2, r1
 80125b6:	2101      	movs	r1, #1
 80125b8:	e9cd 3100 	strd	r3, r1, [sp]
 80125bc:	4804      	ldr	r0, [pc, #16]	; (80125d0 <StoreRDMDevice::Copy(TRDMDeviceParams*)+0x20>)
 80125be:	2329      	movs	r3, #41	; 0x29
 80125c0:	210b      	movs	r1, #11
 80125c2:	6800      	ldr	r0, [r0, #0]
 80125c4:	f7ff fe58 	bl	8012278 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 80125c8:	b003      	add	sp, #12
 80125ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80125ce:	bf00      	nop
 80125d0:	200159c4 	andcs	r5, r1, r4, asr #19

080125d4 <StoreRDMDevice::StoreRDMDevice()>:
 80125d4:	4a03      	ldr	r2, [pc, #12]	; (80125e4 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 80125d6:	6002      	str	r2, [r0, #0]
 80125d8:	321c      	adds	r2, #28
 80125da:	6042      	str	r2, [r0, #4]
 80125dc:	4a02      	ldr	r2, [pc, #8]	; (80125e8 <StoreRDMDevice::StoreRDMDevice()+0x14>)
 80125de:	6010      	str	r0, [r2, #0]
 80125e0:	4770      	bx	lr
 80125e2:	bf00      	nop
 80125e4:	0801b428 	stmdaeq	r1, {r3, r5, sl, ip, sp, pc}
 80125e8:	200159d4 	ldrdcs	r5, [r1], -r4

080125ec <StoreRemoteConfig::~StoreRemoteConfig()>:
 80125ec:	4770      	bx	lr
	...

080125f0 <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 80125f0:	b507      	push	{r0, r1, r2, lr}
 80125f2:	2300      	movs	r3, #0
 80125f4:	460a      	mov	r2, r1
 80125f6:	2101      	movs	r1, #1
 80125f8:	e9cd 3100 	strd	r3, r1, [sp]
 80125fc:	4804      	ldr	r0, [pc, #16]	; (8012610 <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x20>)
 80125fe:	2320      	movs	r3, #32
 8012600:	210c      	movs	r1, #12
 8012602:	6800      	ldr	r0, [r0, #0]
 8012604:	f7ff fe38 	bl	8012278 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 8012608:	b003      	add	sp, #12
 801260a:	f85d fb04 	ldr.w	pc, [sp], #4
 801260e:	bf00      	nop
 8012610:	200159c4 	andcs	r5, r1, r4, asr #19

08012614 <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 8012614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012616:	2200      	movs	r2, #0
 8012618:	460b      	mov	r3, r1
 801261a:	2120      	movs	r1, #32
 801261c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8012620:	4804      	ldr	r0, [pc, #16]	; (8012634 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 8012622:	9100      	str	r1, [sp, #0]
 8012624:	6800      	ldr	r0, [r0, #0]
 8012626:	210c      	movs	r1, #12
 8012628:	f7ff fde6 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801262c:	b005      	add	sp, #20
 801262e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012632:	bf00      	nop
 8012634:	200159c4 	andcs	r5, r1, r4, asr #19

08012638 <StoreRemoteConfig::~StoreRemoteConfig()>:
 8012638:	b510      	push	{r4, lr}
 801263a:	4604      	mov	r4, r0
 801263c:	f004 f804 	bl	8016648 <operator delete(void*)>
 8012640:	4620      	mov	r0, r4
 8012642:	bd10      	pop	{r4, pc}

08012644 <StoreRemoteConfig::StoreRemoteConfig()>:
 8012644:	4a02      	ldr	r2, [pc, #8]	; (8012650 <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 8012646:	6002      	str	r2, [r0, #0]
 8012648:	4a02      	ldr	r2, [pc, #8]	; (8012654 <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 801264a:	6010      	str	r0, [r2, #0]
 801264c:	4770      	bx	lr
 801264e:	bf00      	nop
 8012650:	0801b458 	stmdaeq	r1, {r3, r4, r6, sl, ip, sp, pc}
 8012654:	200159d8 	ldrdcs	r5, [r1], -r8

08012658 <StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
 8012658:	4770      	bx	lr

0801265a <non-virtual thunk to StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
 801265a:	4770      	bx	lr

0801265c <StoreArtNet::~StoreArtNet()>:
 801265c:	4770      	bx	lr

0801265e <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 801265e:	3804      	subs	r0, #4
 8012660:	4770      	bx	lr
	...

08012664 <StoreArtNet::Update(artnetparams::Params const*)>:
 8012664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012666:	2200      	movs	r2, #0
 8012668:	460b      	mov	r3, r1
 801266a:	2187      	movs	r1, #135	; 0x87
 801266c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8012670:	4804      	ldr	r0, [pc, #16]	; (8012684 <StoreArtNet::Update(artnetparams::Params const*)+0x20>)
 8012672:	9100      	str	r1, [sp, #0]
 8012674:	6800      	ldr	r0, [r0, #0]
 8012676:	2101      	movs	r1, #1
 8012678:	f7ff fdbe 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 801267c:	b005      	add	sp, #20
 801267e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012682:	bf00      	nop
 8012684:	200159c4 	andcs	r5, r1, r4, asr #19

08012688 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 8012688:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801268a:	4b0d      	ldr	r3, [pc, #52]	; (80126c0 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x38>)
 801268c:	f88d 2017 	strb.w	r2, [sp, #23]
 8012690:	681a      	ldr	r2, [r3, #0]
 8012692:	428a      	cmp	r2, r1
 8012694:	d811      	bhi.n	80126ba <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x32>
 8012696:	1a8a      	subs	r2, r1, r2
 8012698:	2a03      	cmp	r2, #3
 801269a:	d80e      	bhi.n	80126ba <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x32>
 801269c:	2300      	movs	r3, #0
 801269e:	9302      	str	r3, [sp, #8]
 80126a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80126a4:	2101      	movs	r1, #1
 80126a6:	4093      	lsls	r3, r2
 80126a8:	4806      	ldr	r0, [pc, #24]	; (80126c4 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x3c>)
 80126aa:	9301      	str	r3, [sp, #4]
 80126ac:	9100      	str	r1, [sp, #0]
 80126ae:	6800      	ldr	r0, [r0, #0]
 80126b0:	f10d 0317 	add.w	r3, sp, #23
 80126b4:	3267      	adds	r2, #103	; 0x67
 80126b6:	f7ff fd9f 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80126ba:	b007      	add	sp, #28
 80126bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80126c0:	200159dc 	ldrdcs	r5, [r1], -ip
 80126c4:	200159c4 	andcs	r5, r1, r4, asr #19

080126c8 <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 80126c8:	f1a0 0004 	sub.w	r0, r0, #4
 80126cc:	f7ff bfdc 	b.w	8012688 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

080126d0 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
 80126d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80126d2:	f88d 2017 	strb.w	r2, [sp, #23]
 80126d6:	b951      	cbnz	r1, 80126ee <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x1e>
 80126d8:	9102      	str	r1, [sp, #8]
 80126da:	2204      	movs	r2, #4
 80126dc:	2101      	movs	r1, #1
 80126de:	e9cd 1200 	strd	r1, r2, [sp]
 80126e2:	4804      	ldr	r0, [pc, #16]	; (80126f4 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x24>)
 80126e4:	f10d 0317 	add.w	r3, sp, #23
 80126e8:	6800      	ldr	r0, [r0, #0]
 80126ea:	f7ff fd85 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80126ee:	b007      	add	sp, #28
 80126f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80126f4:	200159c4 	andcs	r5, r1, r4, asr #19

080126f8 <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
 80126f8:	f1a0 0004 	sub.w	r0, r0, #4
 80126fc:	f7ff bfe8 	b.w	80126d0 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>

08012700 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
 8012700:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012702:	f88d 2017 	strb.w	r2, [sp, #23]
 8012706:	b959      	cbnz	r1, 8012720 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x20>
 8012708:	2308      	movs	r3, #8
 801270a:	9102      	str	r1, [sp, #8]
 801270c:	2101      	movs	r1, #1
 801270e:	e9cd 1300 	strd	r1, r3, [sp]
 8012712:	4805      	ldr	r0, [pc, #20]	; (8012728 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x28>)
 8012714:	2205      	movs	r2, #5
 8012716:	6800      	ldr	r0, [r0, #0]
 8012718:	f10d 0317 	add.w	r3, sp, #23
 801271c:	f7ff fd6c 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012720:	b007      	add	sp, #28
 8012722:	f85d fb04 	ldr.w	pc, [sp], #4
 8012726:	bf00      	nop
 8012728:	200159c4 	andcs	r5, r1, r4, asr #19

0801272c <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
 801272c:	f1a0 0004 	sub.w	r0, r0, #4
 8012730:	f7ff bfe6 	b.w	8012700 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>

08012734 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 8012734:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012736:	4b0c      	ldr	r3, [pc, #48]	; (8012768 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x34>)
 8012738:	9205      	str	r2, [sp, #20]
 801273a:	681a      	ldr	r2, [r3, #0]
 801273c:	428a      	cmp	r2, r1
 801273e:	d810      	bhi.n	8012762 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x2e>
 8012740:	1a8a      	subs	r2, r1, r2
 8012742:	2a03      	cmp	r2, #3
 8012744:	d80d      	bhi.n	8012762 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x2e>
 8012746:	2300      	movs	r3, #0
 8012748:	9302      	str	r3, [sp, #8]
 801274a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801274e:	2101      	movs	r1, #1
 8012750:	4093      	lsls	r3, r2
 8012752:	4806      	ldr	r0, [pc, #24]	; (801276c <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x38>)
 8012754:	9301      	str	r3, [sp, #4]
 8012756:	9100      	str	r1, [sp, #0]
 8012758:	6800      	ldr	r0, [r0, #0]
 801275a:	ab05      	add	r3, sp, #20
 801275c:	326c      	adds	r2, #108	; 0x6c
 801275e:	f7ff fd4b 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012762:	b007      	add	sp, #28
 8012764:	f85d fb04 	ldr.w	pc, [sp], #4
 8012768:	200159dc 	ldrdcs	r5, [r1], -ip
 801276c:	200159c4 	andcs	r5, r1, r4, asr #19

08012770 <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 8012770:	f1a0 0004 	sub.w	r0, r0, #4
 8012774:	f7ff bfde 	b.w	8012734 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

08012778 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 8012778:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801277a:	4b0c      	ldr	r3, [pc, #48]	; (80127ac <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x34>)
 801277c:	9205      	str	r2, [sp, #20]
 801277e:	681a      	ldr	r2, [r3, #0]
 8012780:	428a      	cmp	r2, r1
 8012782:	d810      	bhi.n	80127a6 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x2e>
 8012784:	1a8a      	subs	r2, r1, r2
 8012786:	2a03      	cmp	r2, #3
 8012788:	d80d      	bhi.n	80127a6 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x2e>
 801278a:	2300      	movs	r3, #0
 801278c:	9302      	str	r3, [sp, #8]
 801278e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012792:	2101      	movs	r1, #1
 8012794:	4093      	lsls	r3, r2
 8012796:	4806      	ldr	r0, [pc, #24]	; (80127b0 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x38>)
 8012798:	9301      	str	r3, [sp, #4]
 801279a:	9100      	str	r1, [sp, #0]
 801279c:	6800      	ldr	r0, [r0, #0]
 801279e:	ab05      	add	r3, sp, #20
 80127a0:	3271      	adds	r2, #113	; 0x71
 80127a2:	f7ff fd29 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80127a6:	b007      	add	sp, #28
 80127a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80127ac:	200159dc 	ldrdcs	r5, [r1], -ip
 80127b0:	200159c4 	andcs	r5, r1, r4, asr #19

080127b4 <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 80127b4:	f1a0 0004 	sub.w	r0, r0, #4
 80127b8:	f7ff bfde 	b.w	8012778 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

080127bc <StoreArtNet::SaveLongName(char const*)>:
 80127bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80127be:	460b      	mov	r3, r1
 80127c0:	2200      	movs	r2, #0
 80127c2:	2101      	movs	r1, #1
 80127c4:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80127c8:	2240      	movs	r2, #64	; 0x40
 80127ca:	4804      	ldr	r0, [pc, #16]	; (80127dc <StoreArtNet::SaveLongName(char const*)+0x20>)
 80127cc:	9200      	str	r2, [sp, #0]
 80127ce:	6800      	ldr	r0, [r0, #0]
 80127d0:	221e      	movs	r2, #30
 80127d2:	f7ff fd11 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80127d6:	b005      	add	sp, #20
 80127d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80127dc:	200159c4 	andcs	r5, r1, r4, asr #19

080127e0 <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
 80127e0:	f1a0 0004 	sub.w	r0, r0, #4
 80127e4:	e7ea      	b.n	80127bc <StoreArtNet::SaveLongName(char const*)>
 80127e6:	bf00      	nop

080127e8 <StoreArtNet::SaveShortName(char const*)>:
 80127e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80127ea:	460b      	mov	r3, r1
 80127ec:	2202      	movs	r2, #2
 80127ee:	2100      	movs	r1, #0
 80127f0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80127f4:	2212      	movs	r2, #18
 80127f6:	4805      	ldr	r0, [pc, #20]	; (801280c <StoreArtNet::SaveShortName(char const*)+0x24>)
 80127f8:	9200      	str	r2, [sp, #0]
 80127fa:	2101      	movs	r1, #1
 80127fc:	220c      	movs	r2, #12
 80127fe:	6800      	ldr	r0, [r0, #0]
 8012800:	f7ff fcfa 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012804:	b005      	add	sp, #20
 8012806:	f85d fb04 	ldr.w	pc, [sp], #4
 801280a:	bf00      	nop
 801280c:	200159c4 	andcs	r5, r1, r4, asr #19

08012810 <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
 8012810:	f1a0 0004 	sub.w	r0, r0, #4
 8012814:	e7e8      	b.n	80127e8 <StoreArtNet::SaveShortName(char const*)>
 8012816:	bf00      	nop

08012818 <StoreArtNet::SaveFailSafe(unsigned char)>:
 8012818:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801281a:	2310      	movs	r3, #16
 801281c:	2200      	movs	r2, #0
 801281e:	f88d 1017 	strb.w	r1, [sp, #23]
 8012822:	2101      	movs	r1, #1
 8012824:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012828:	4805      	ldr	r0, [pc, #20]	; (8012840 <StoreArtNet::SaveFailSafe(unsigned char)+0x28>)
 801282a:	9100      	str	r1, [sp, #0]
 801282c:	2206      	movs	r2, #6
 801282e:	6800      	ldr	r0, [r0, #0]
 8012830:	f10d 0317 	add.w	r3, sp, #23
 8012834:	f7ff fce0 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012838:	b007      	add	sp, #28
 801283a:	f85d fb04 	ldr.w	pc, [sp], #4
 801283e:	bf00      	nop
 8012840:	200159c4 	andcs	r5, r1, r4, asr #19

08012844 <non-virtual thunk to StoreArtNet::SaveFailSafe(unsigned char)>:
 8012844:	f1a0 0004 	sub.w	r0, r0, #4
 8012848:	e7e6      	b.n	8012818 <StoreArtNet::SaveFailSafe(unsigned char)>
 801284a:	bf00      	nop

0801284c <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
 801284c:	b570      	push	{r4, r5, r6, lr}
 801284e:	4b1b      	ldr	r3, [pc, #108]	; (80128bc <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x70>)
 8012850:	4615      	mov	r5, r2
 8012852:	681c      	ldr	r4, [r3, #0]
 8012854:	b086      	sub	sp, #24
 8012856:	428c      	cmp	r4, r1
 8012858:	d829      	bhi.n	80128ae <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x62>
 801285a:	1b0c      	subs	r4, r1, r4
 801285c:	2c03      	cmp	r4, #3
 801285e:	d826      	bhi.n	80128ae <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x62>
 8012860:	2308      	movs	r3, #8
 8012862:	2200      	movs	r2, #0
 8012864:	4e16      	ldr	r6, [pc, #88]	; (80128c0 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x74>)
 8012866:	e9cd 3200 	strd	r3, r2, [sp]
 801286a:	2101      	movs	r1, #1
 801286c:	2302      	movs	r3, #2
 801286e:	f10d 0216 	add.w	r2, sp, #22
 8012872:	6830      	ldr	r0, [r6, #0]
 8012874:	f7ff fd00 	bl	8012278 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 8012878:	2201      	movs	r2, #1
 801287a:	f104 0308 	add.w	r3, r4, #8
 801287e:	fa02 f303 	lsl.w	r3, r2, r3
 8012882:	40a2      	lsls	r2, r4
 8012884:	4313      	orrs	r3, r2
 8012886:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801288a:	b29b      	uxth	r3, r3
 801288c:	ea21 0203 	bic.w	r2, r1, r3
 8012890:	b97d      	cbnz	r5, 80128b2 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x66>
 8012892:	f8ad 2016 	strh.w	r2, [sp, #22]
 8012896:	2300      	movs	r3, #0
 8012898:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801289c:	2302      	movs	r3, #2
 801289e:	2208      	movs	r2, #8
 80128a0:	9300      	str	r3, [sp, #0]
 80128a2:	2101      	movs	r1, #1
 80128a4:	6830      	ldr	r0, [r6, #0]
 80128a6:	f10d 0316 	add.w	r3, sp, #22
 80128aa:	f7ff fca5 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80128ae:	b006      	add	sp, #24
 80128b0:	bd70      	pop	{r4, r5, r6, pc}
 80128b2:	4319      	orrs	r1, r3
 80128b4:	f8ad 1016 	strh.w	r1, [sp, #22]
 80128b8:	e7ed      	b.n	8012896 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x4a>
 80128ba:	bf00      	nop
 80128bc:	200159dc 	ldrdcs	r5, [r1], -ip
 80128c0:	200159c4 	andcs	r5, r1, r4, asr #19

080128c4 <non-virtual thunk to StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
 80128c4:	f1a0 0004 	sub.w	r0, r0, #4
 80128c8:	f7ff bfc0 	b.w	801284c <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>

080128cc <StoreArtNet::Copy(artnetparams::Params*)>:
 80128cc:	b507      	push	{r0, r1, r2, lr}
 80128ce:	2300      	movs	r3, #0
 80128d0:	460a      	mov	r2, r1
 80128d2:	2101      	movs	r1, #1
 80128d4:	e9cd 3100 	strd	r3, r1, [sp]
 80128d8:	4803      	ldr	r0, [pc, #12]	; (80128e8 <StoreArtNet::Copy(artnetparams::Params*)+0x1c>)
 80128da:	2387      	movs	r3, #135	; 0x87
 80128dc:	6800      	ldr	r0, [r0, #0]
 80128de:	f7ff fccb 	bl	8012278 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 80128e2:	b003      	add	sp, #12
 80128e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80128e8:	200159c4 	andcs	r5, r1, r4, asr #19

080128ec <StoreArtNet::~StoreArtNet()>:
 80128ec:	b510      	push	{r4, lr}
 80128ee:	4604      	mov	r4, r0
 80128f0:	f003 feaa 	bl	8016648 <operator delete(void*)>
 80128f4:	4620      	mov	r0, r4
 80128f6:	bd10      	pop	{r4, pc}

080128f8 <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 80128f8:	f1a0 0004 	sub.w	r0, r0, #4
 80128fc:	e7f6      	b.n	80128ec <StoreArtNet::~StoreArtNet()>
	...

08012900 <StoreArtNet::StoreArtNet(unsigned int)>:
 8012900:	b510      	push	{r4, lr}
 8012902:	4a05      	ldr	r2, [pc, #20]	; (8012918 <StoreArtNet::StoreArtNet(unsigned int)+0x18>)
 8012904:	4b05      	ldr	r3, [pc, #20]	; (801291c <StoreArtNet::StoreArtNet(unsigned int)+0x1c>)
 8012906:	f102 0408 	add.w	r4, r2, #8
 801290a:	3248      	adds	r2, #72	; 0x48
 801290c:	6042      	str	r2, [r0, #4]
 801290e:	4a04      	ldr	r2, [pc, #16]	; (8012920 <StoreArtNet::StoreArtNet(unsigned int)+0x20>)
 8012910:	6004      	str	r4, [r0, #0]
 8012912:	6010      	str	r0, [r2, #0]
 8012914:	6019      	str	r1, [r3, #0]
 8012916:	bd10      	pop	{r4, pc}
 8012918:	0801b468 	stmdaeq	r1, {r3, r5, r6, sl, ip, sp, pc}
 801291c:	200159dc 	ldrdcs	r5, [r1], -ip
 8012920:	200159e0 	andcs	r5, r1, r0, ror #19

08012924 <StorePixelDmx::~StorePixelDmx()>:
 8012924:	4770      	bx	lr

08012926 <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 8012926:	3804      	subs	r0, #4
 8012928:	4770      	bx	lr
	...

0801292c <StorePixelDmx::Update(pixeldmxparams::Params const*)>:
 801292c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801292e:	2200      	movs	r2, #0
 8012930:	460b      	mov	r3, r1
 8012932:	2126      	movs	r1, #38	; 0x26
 8012934:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8012938:	4804      	ldr	r0, [pc, #16]	; (801294c <StorePixelDmx::Update(pixeldmxparams::Params const*)+0x20>)
 801293a:	9100      	str	r1, [sp, #0]
 801293c:	6800      	ldr	r0, [r0, #0]
 801293e:	2103      	movs	r1, #3
 8012940:	f7ff fc5a 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012944:	b005      	add	sp, #20
 8012946:	f85d fb04 	ldr.w	pc, [sp], #4
 801294a:	bf00      	nop
 801294c:	200159c4 	andcs	r5, r1, r4, asr #19

08012950 <StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 8012950:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012952:	2304      	movs	r3, #4
 8012954:	2200      	movs	r2, #0
 8012956:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801295a:	2302      	movs	r3, #2
 801295c:	4806      	ldr	r0, [pc, #24]	; (8012978 <StorePixelDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 801295e:	9300      	str	r3, [sp, #0]
 8012960:	f8ad 1016 	strh.w	r1, [sp, #22]
 8012964:	2207      	movs	r2, #7
 8012966:	2103      	movs	r1, #3
 8012968:	6800      	ldr	r0, [r0, #0]
 801296a:	f10d 0316 	add.w	r3, sp, #22
 801296e:	f7ff fc43 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012972:	b007      	add	sp, #28
 8012974:	f85d fb04 	ldr.w	pc, [sp], #4
 8012978:	200159c4 	andcs	r5, r1, r4, asr #19

0801297c <non-virtual thunk to StorePixelDmx::SaveDmxStartAddress(unsigned short)>:
 801297c:	f1a0 0004 	sub.w	r0, r0, #4
 8012980:	e7e6      	b.n	8012950 <StorePixelDmx::SaveDmxStartAddress(unsigned short)>
 8012982:	bf00      	nop

08012984 <StorePixelDmx::SaveTestPattern(unsigned char)>:
 8012984:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012986:	2308      	movs	r3, #8
 8012988:	2200      	movs	r2, #0
 801298a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801298e:	2301      	movs	r3, #1
 8012990:	4806      	ldr	r0, [pc, #24]	; (80129ac <StorePixelDmx::SaveTestPattern(unsigned char)+0x28>)
 8012992:	9300      	str	r3, [sp, #0]
 8012994:	f88d 1017 	strb.w	r1, [sp, #23]
 8012998:	2210      	movs	r2, #16
 801299a:	2103      	movs	r1, #3
 801299c:	6800      	ldr	r0, [r0, #0]
 801299e:	f10d 0317 	add.w	r3, sp, #23
 80129a2:	f7ff fc29 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80129a6:	b007      	add	sp, #28
 80129a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80129ac:	200159c4 	andcs	r5, r1, r4, asr #19

080129b0 <non-virtual thunk to StorePixelDmx::SaveTestPattern(unsigned char)>:
 80129b0:	f1a0 0004 	sub.w	r0, r0, #4
 80129b4:	e7e6      	b.n	8012984 <StorePixelDmx::SaveTestPattern(unsigned char)>
 80129b6:	bf00      	nop

080129b8 <StorePixelDmx::SaveMap(unsigned char)>:
 80129b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80129ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80129be:	2200      	movs	r2, #0
 80129c0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80129c4:	2301      	movs	r3, #1
 80129c6:	4807      	ldr	r0, [pc, #28]	; (80129e4 <StorePixelDmx::SaveMap(unsigned char)+0x2c>)
 80129c8:	9300      	str	r3, [sp, #0]
 80129ca:	f88d 1017 	strb.w	r1, [sp, #23]
 80129ce:	2213      	movs	r2, #19
 80129d0:	2103      	movs	r1, #3
 80129d2:	6800      	ldr	r0, [r0, #0]
 80129d4:	f10d 0317 	add.w	r3, sp, #23
 80129d8:	f7ff fc0e 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 80129dc:	b007      	add	sp, #28
 80129de:	f85d fb04 	ldr.w	pc, [sp], #4
 80129e2:	bf00      	nop
 80129e4:	200159c4 	andcs	r5, r1, r4, asr #19

080129e8 <non-virtual thunk to StorePixelDmx::SaveMap(unsigned char)>:
 80129e8:	f1a0 0004 	sub.w	r0, r0, #4
 80129ec:	e7e4      	b.n	80129b8 <StorePixelDmx::SaveMap(unsigned char)>
 80129ee:	bf00      	nop

080129f0 <StorePixelDmx::SaveGroupingCount(unsigned short)>:
 80129f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80129f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129f6:	2200      	movs	r2, #0
 80129f8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80129fc:	2302      	movs	r3, #2
 80129fe:	4807      	ldr	r0, [pc, #28]	; (8012a1c <StorePixelDmx::SaveGroupingCount(unsigned short)+0x2c>)
 8012a00:	9300      	str	r3, [sp, #0]
 8012a02:	f8ad 1016 	strh.w	r1, [sp, #22]
 8012a06:	2211      	movs	r2, #17
 8012a08:	2103      	movs	r1, #3
 8012a0a:	6800      	ldr	r0, [r0, #0]
 8012a0c:	f10d 0316 	add.w	r3, sp, #22
 8012a10:	f7ff fbf2 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012a14:	b007      	add	sp, #28
 8012a16:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a1a:	bf00      	nop
 8012a1c:	200159c4 	andcs	r5, r1, r4, asr #19

08012a20 <non-virtual thunk to StorePixelDmx::SaveGroupingCount(unsigned short)>:
 8012a20:	f1a0 0004 	sub.w	r0, r0, #4
 8012a24:	e7e4      	b.n	80129f0 <StorePixelDmx::SaveGroupingCount(unsigned short)>
 8012a26:	bf00      	nop

08012a28 <StorePixelDmx::SaveCount(unsigned short)>:
 8012a28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012a2a:	2302      	movs	r3, #2
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012a32:	4807      	ldr	r0, [pc, #28]	; (8012a50 <StorePixelDmx::SaveCount(unsigned short)+0x28>)
 8012a34:	9300      	str	r3, [sp, #0]
 8012a36:	f8ad 1016 	strh.w	r1, [sp, #22]
 8012a3a:	2205      	movs	r2, #5
 8012a3c:	2103      	movs	r1, #3
 8012a3e:	6800      	ldr	r0, [r0, #0]
 8012a40:	f10d 0316 	add.w	r3, sp, #22
 8012a44:	f7ff fbd8 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012a48:	b007      	add	sp, #28
 8012a4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a4e:	bf00      	nop
 8012a50:	200159c4 	andcs	r5, r1, r4, asr #19

08012a54 <non-virtual thunk to StorePixelDmx::SaveCount(unsigned short)>:
 8012a54:	f1a0 0004 	sub.w	r0, r0, #4
 8012a58:	e7e6      	b.n	8012a28 <StorePixelDmx::SaveCount(unsigned short)>
 8012a5a:	bf00      	nop

08012a5c <StorePixelDmx::SaveType(unsigned char)>:
 8012a5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012a5e:	2301      	movs	r3, #1
 8012a60:	2200      	movs	r2, #0
 8012a62:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012a66:	4807      	ldr	r0, [pc, #28]	; (8012a84 <StorePixelDmx::SaveType(unsigned char)+0x28>)
 8012a68:	9300      	str	r3, [sp, #0]
 8012a6a:	f88d 1017 	strb.w	r1, [sp, #23]
 8012a6e:	2204      	movs	r2, #4
 8012a70:	2103      	movs	r1, #3
 8012a72:	6800      	ldr	r0, [r0, #0]
 8012a74:	f10d 0317 	add.w	r3, sp, #23
 8012a78:	f7ff fbbe 	bl	80121f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012a7c:	b007      	add	sp, #28
 8012a7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a82:	bf00      	nop
 8012a84:	200159c4 	andcs	r5, r1, r4, asr #19

08012a88 <non-virtual thunk to StorePixelDmx::SaveType(unsigned char)>:
 8012a88:	f1a0 0004 	sub.w	r0, r0, #4
 8012a8c:	e7e6      	b.n	8012a5c <StorePixelDmx::SaveType(unsigned char)>
 8012a8e:	bf00      	nop

08012a90 <StorePixelDmx::~StorePixelDmx()>:
 8012a90:	b510      	push	{r4, lr}
 8012a92:	4604      	mov	r4, r0
 8012a94:	f003 fdd8 	bl	8016648 <operator delete(void*)>
 8012a98:	4620      	mov	r0, r4
 8012a9a:	bd10      	pop	{r4, pc}

08012a9c <non-virtual thunk to StorePixelDmx::~StorePixelDmx()>:
 8012a9c:	f1a0 0004 	sub.w	r0, r0, #4
 8012aa0:	e7f6      	b.n	8012a90 <StorePixelDmx::~StorePixelDmx()>
	...

08012aa4 <StorePixelDmx::Copy(pixeldmxparams::Params*)>:
 8012aa4:	b507      	push	{r0, r1, r2, lr}
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	460a      	mov	r2, r1
 8012aaa:	2101      	movs	r1, #1
 8012aac:	e9cd 3100 	strd	r3, r1, [sp]
 8012ab0:	4804      	ldr	r0, [pc, #16]	; (8012ac4 <StorePixelDmx::Copy(pixeldmxparams::Params*)+0x20>)
 8012ab2:	2326      	movs	r3, #38	; 0x26
 8012ab4:	2103      	movs	r1, #3
 8012ab6:	6800      	ldr	r0, [r0, #0]
 8012ab8:	f7ff fbde 	bl	8012278 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 8012abc:	b003      	add	sp, #12
 8012abe:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ac2:	bf00      	nop
 8012ac4:	200159c4 	andcs	r5, r1, r4, asr #19

08012ac8 <StorePixelDmx::StorePixelDmx()>:
 8012ac8:	4a03      	ldr	r2, [pc, #12]	; (8012ad8 <StorePixelDmx::StorePixelDmx()+0x10>)
 8012aca:	6002      	str	r2, [r0, #0]
 8012acc:	3230      	adds	r2, #48	; 0x30
 8012ace:	6042      	str	r2, [r0, #4]
 8012ad0:	4a02      	ldr	r2, [pc, #8]	; (8012adc <StorePixelDmx::StorePixelDmx()+0x14>)
 8012ad2:	6010      	str	r0, [r2, #0]
 8012ad4:	4770      	bx	lr
 8012ad6:	bf00      	nop
 8012ad8:	0801b4e8 	stmdaeq	r1, {r3, r5, r6, r7, sl, ip, sp, pc}
 8012adc:	200159e8 	andcs	r5, r1, r8, ror #19

08012ae0 <FlashRom::FlashRom()>:
 8012ae0:	4b07      	ldr	r3, [pc, #28]	; (8012b00 <FlashRom::FlashRom()+0x20>)
 8012ae2:	b510      	push	{r4, lr}
 8012ae4:	6018      	str	r0, [r3, #0]
 8012ae6:	2301      	movs	r3, #1
 8012ae8:	4604      	mov	r4, r0
 8012aea:	7003      	strb	r3, [r0, #0]
 8012aec:	4b05      	ldr	r3, [pc, #20]	; (8012b04 <FlashRom::FlashRom()+0x24>)
 8012aee:	4906      	ldr	r1, [pc, #24]	; (8012b08 <FlashRom::FlashRom()+0x28>)
 8012af0:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8012af4:	4805      	ldr	r0, [pc, #20]	; (8012b0c <FlashRom::FlashRom()+0x2c>)
 8012af6:	029a      	lsls	r2, r3, #10
 8012af8:	f7f6 fe62 	bl	80097c0 <printf>
 8012afc:	4620      	mov	r0, r4
 8012afe:	bd10      	pop	{r4, pc}
 8012b00:	200159ec 	andcs	r5, r1, ip, ror #19
 8012b04:	1ffff700 	svcne	0x00fff700
 8012b08:	08019502 	stmdaeq	r1, {r1, r8, sl, ip, pc}
 8012b0c:	0801b538 	stmdaeq	r1, {r3, r4, r5, r8, sl, ip, sp, pc}

08012b10 <FlashRom::GetSize() const>:
 8012b10:	4b02      	ldr	r3, [pc, #8]	; (8012b1c <FlashRom::GetSize() const+0xc>)
 8012b12:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 8012b16:	0280      	lsls	r0, r0, #10
 8012b18:	4770      	bx	lr
 8012b1a:	bf00      	nop
 8012b1c:	1ffff700 	svcne	0x00fff700

08012b20 <FlashRom::GetSectorSize() const>:
 8012b20:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8012b24:	4770      	bx	lr

08012b26 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 8012b26:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8012b2a:	441a      	add	r2, r3
 8012b2c:	4293      	cmp	r3, r2
 8012b2e:	d104      	bne.n	8012b3a <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 8012b30:	2200      	movs	r2, #0
 8012b32:	9b00      	ldr	r3, [sp, #0]
 8012b34:	2001      	movs	r0, #1
 8012b36:	601a      	str	r2, [r3, #0]
 8012b38:	4770      	bx	lr
 8012b3a:	f851 0b04 	ldr.w	r0, [r1], #4
 8012b3e:	f843 0b04 	str.w	r0, [r3], #4
 8012b42:	e7f3      	b.n	8012b2c <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>

08012b44 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 8012b44:	2000      	movs	r0, #0
 8012b46:	b538      	push	{r3, r4, r5, lr}
 8012b48:	4c47      	ldr	r4, [pc, #284]	; (8012c68 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 8012b4a:	6018      	str	r0, [r3, #0]
 8012b4c:	6823      	ldr	r3, [r4, #0]
 8012b4e:	2b04      	cmp	r3, #4
 8012b50:	f200 8082 	bhi.w	8012c58 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8012b54:	e8df f003 	tbb	[pc, r3]
 8012b58:	78452003 	stmdavc	r5, {r0, r1, sp}^
 8012b5c:	4b430080 	blmi	90d2d64 <__exidx_end+0x10b6d90>
 8012b60:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8012b64:	6019      	str	r1, [r3, #0]
 8012b66:	4b42      	ldr	r3, [pc, #264]	; (8012c70 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8012b68:	601a      	str	r2, [r3, #0]
 8012b6a:	4b42      	ldr	r3, [pc, #264]	; (8012c74 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 8012b6c:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8012b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b74:	4b40      	ldr	r3, [pc, #256]	; (8012c78 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8012b76:	d807      	bhi.n	8012b88 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 8012b78:	2201      	movs	r2, #1
 8012b7a:	701a      	strb	r2, [r3, #0]
 8012b7c:	f004 f8ce 	bl	8016d1c <fmc_bank0_unlock>
 8012b80:	2301      	movs	r3, #1
 8012b82:	6023      	str	r3, [r4, #0]
 8012b84:	2000      	movs	r0, #0
 8012b86:	e026      	b.n	8012bd6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 8012b88:	4a3c      	ldr	r2, [pc, #240]	; (8012c7c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 8012b8a:	4291      	cmp	r1, r2
 8012b8c:	d3f4      	bcc.n	8012b78 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 8012b8e:	2200      	movs	r2, #0
 8012b90:	701a      	strb	r2, [r3, #0]
 8012b92:	f004 f8d1 	bl	8016d38 <fmc_bank1_unlock>
 8012b96:	e7f3      	b.n	8012b80 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8012b98:	4d37      	ldr	r5, [pc, #220]	; (8012c78 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8012b9a:	782b      	ldrb	r3, [r5, #0]
 8012b9c:	b15b      	cbz	r3, 8012bb6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 8012b9e:	f004 f8e9 	bl	8016d74 <fmc_bank0_state_get>
 8012ba2:	2801      	cmp	r0, #1
 8012ba4:	d0ee      	beq.n	8012b84 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 8012ba6:	7829      	ldrb	r1, [r5, #0]
 8012ba8:	4b35      	ldr	r3, [pc, #212]	; (8012c80 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8012baa:	b939      	cbnz	r1, 8012bbc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 8012bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012bae:	f022 0202 	bic.w	r2, r2, #2
 8012bb2:	651a      	str	r2, [r3, #80]	; 0x50
 8012bb4:	e006      	b.n	8012bc4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 8012bb6:	f004 f8ef 	bl	8016d98 <fmc_bank1_state_get>
 8012bba:	e7f2      	b.n	8012ba2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 8012bbc:	691a      	ldr	r2, [r3, #16]
 8012bbe:	f022 0202 	bic.w	r2, r2, #2
 8012bc2:	611a      	str	r2, [r3, #16]
 8012bc4:	4b2a      	ldr	r3, [pc, #168]	; (8012c70 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	b94b      	cbnz	r3, 8012bde <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 8012bca:	b129      	cbz	r1, 8012bd8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 8012bcc:	f004 f8c2 	bl	8016d54 <fmc_bank0_lock>
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	2001      	movs	r0, #1
 8012bd4:	6023      	str	r3, [r4, #0]
 8012bd6:	bd38      	pop	{r3, r4, r5, pc}
 8012bd8:	f004 f8c4 	bl	8016d64 <fmc_bank1_lock>
 8012bdc:	e7f8      	b.n	8012bd0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 8012bde:	2302      	movs	r3, #2
 8012be0:	e7cf      	b.n	8012b82 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 8012be2:	4923      	ldr	r1, [pc, #140]	; (8012c70 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 8012be4:	680b      	ldr	r3, [r1, #0]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d0ca      	beq.n	8012b80 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8012bea:	4b23      	ldr	r3, [pc, #140]	; (8012c78 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8012bec:	4a1f      	ldr	r2, [pc, #124]	; (8012c6c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 8012bee:	7818      	ldrb	r0, [r3, #0]
 8012bf0:	4b23      	ldr	r3, [pc, #140]	; (8012c80 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8012bf2:	b190      	cbz	r0, 8012c1a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 8012bf4:	6918      	ldr	r0, [r3, #16]
 8012bf6:	f040 0002 	orr.w	r0, r0, #2
 8012bfa:	6118      	str	r0, [r3, #16]
 8012bfc:	6810      	ldr	r0, [r2, #0]
 8012bfe:	6158      	str	r0, [r3, #20]
 8012c00:	6918      	ldr	r0, [r3, #16]
 8012c02:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8012c06:	6118      	str	r0, [r3, #16]
 8012c08:	680b      	ldr	r3, [r1, #0]
 8012c0a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8012c0e:	600b      	str	r3, [r1, #0]
 8012c10:	6813      	ldr	r3, [r2, #0]
 8012c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c16:	6013      	str	r3, [r2, #0]
 8012c18:	e7b2      	b.n	8012b80 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 8012c1a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012c1c:	f040 0002 	orr.w	r0, r0, #2
 8012c20:	6518      	str	r0, [r3, #80]	; 0x50
 8012c22:	6810      	ldr	r0, [r2, #0]
 8012c24:	6558      	str	r0, [r3, #84]	; 0x54
 8012c26:	69dd      	ldr	r5, [r3, #28]
 8012c28:	07ad      	lsls	r5, r5, #30
 8012c2a:	bf48      	it	mi
 8012c2c:	6158      	strmi	r0, [r3, #20]
 8012c2e:	4814      	ldr	r0, [pc, #80]	; (8012c80 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8012c30:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8012c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c36:	6503      	str	r3, [r0, #80]	; 0x50
 8012c38:	680b      	ldr	r3, [r1, #0]
 8012c3a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8012c3e:	600b      	str	r3, [r1, #0]
 8012c40:	6813      	ldr	r3, [r2, #0]
 8012c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012c46:	e7e6      	b.n	8012c16 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 8012c48:	4b0b      	ldr	r3, [pc, #44]	; (8012c78 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 8012c4a:	781a      	ldrb	r2, [r3, #0]
 8012c4c:	4b0c      	ldr	r3, [pc, #48]	; (8012c80 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8012c4e:	b132      	cbz	r2, 8012c5e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 8012c50:	691a      	ldr	r2, [r3, #16]
 8012c52:	f022 0201 	bic.w	r2, r2, #1
 8012c56:	611a      	str	r2, [r3, #16]
 8012c58:	2000      	movs	r0, #0
 8012c5a:	6020      	str	r0, [r4, #0]
 8012c5c:	e7bb      	b.n	8012bd6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 8012c5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012c60:	f022 0201 	bic.w	r2, r2, #1
 8012c64:	651a      	str	r2, [r3, #80]	; 0x50
 8012c66:	e7f7      	b.n	8012c58 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8012c68:	200159f4 	strdcs	r5, [r1], -r4
 8012c6c:	200159f8 	strdcs	r5, [r1], -r8
 8012c70:	20015a04 	andcs	r5, r1, r4, lsl #20
 8012c74:	1ffff700 	svcne	0x00fff700
 8012c78:	20015a00 	andcs	r5, r1, r0, lsl #20
 8012c7c:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8012c80:	40022000 	andmi	r2, r2, r0

08012c84 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 8012c84:	b570      	push	{r4, r5, r6, lr}
 8012c86:	2400      	movs	r4, #0
 8012c88:	9804      	ldr	r0, [sp, #16]
 8012c8a:	6004      	str	r4, [r0, #0]
 8012c8c:	4c48      	ldr	r4, [pc, #288]	; (8012db0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 8012c8e:	6820      	ldr	r0, [r4, #0]
 8012c90:	2804      	cmp	r0, #4
 8012c92:	d848      	bhi.n	8012d26 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 8012c94:	e8df f000 	tbb	[pc, r0]
 8012c98:	22847c03 	addcs	r7, r4, #768	; 0x300
 8012c9c:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 8012ca0:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8012ca4:	6001      	str	r1, [r0, #0]
 8012ca6:	4844      	ldr	r0, [pc, #272]	; (8012db8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8012ca8:	6003      	str	r3, [r0, #0]
 8012caa:	4b44      	ldr	r3, [pc, #272]	; (8012dbc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8012cac:	601a      	str	r2, [r3, #0]
 8012cae:	4b44      	ldr	r3, [pc, #272]	; (8012dc0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 8012cb0:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8012cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012cb8:	4b42      	ldr	r3, [pc, #264]	; (8012dc4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8012cba:	d807      	bhi.n	8012ccc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 8012cbc:	2201      	movs	r2, #1
 8012cbe:	701a      	strb	r2, [r3, #0]
 8012cc0:	f004 f82c 	bl	8016d1c <fmc_bank0_unlock>
 8012cc4:	2303      	movs	r3, #3
 8012cc6:	6023      	str	r3, [r4, #0]
 8012cc8:	2000      	movs	r0, #0
 8012cca:	e026      	b.n	8012d1a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 8012ccc:	4a3e      	ldr	r2, [pc, #248]	; (8012dc8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 8012cce:	4291      	cmp	r1, r2
 8012cd0:	d3f4      	bcc.n	8012cbc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	701a      	strb	r2, [r3, #0]
 8012cd6:	f004 f82f 	bl	8016d38 <fmc_bank1_unlock>
 8012cda:	e7f3      	b.n	8012cc4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8012cdc:	4d39      	ldr	r5, [pc, #228]	; (8012dc4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8012cde:	782b      	ldrb	r3, [r5, #0]
 8012ce0:	b15b      	cbz	r3, 8012cfa <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 8012ce2:	f004 f847 	bl	8016d74 <fmc_bank0_state_get>
 8012ce6:	2801      	cmp	r0, #1
 8012ce8:	d0ee      	beq.n	8012cc8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 8012cea:	7829      	ldrb	r1, [r5, #0]
 8012cec:	4b37      	ldr	r3, [pc, #220]	; (8012dcc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8012cee:	b939      	cbnz	r1, 8012d00 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 8012cf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012cf2:	f022 0201 	bic.w	r2, r2, #1
 8012cf6:	651a      	str	r2, [r3, #80]	; 0x50
 8012cf8:	e006      	b.n	8012d08 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 8012cfa:	f004 f84d 	bl	8016d98 <fmc_bank1_state_get>
 8012cfe:	e7f2      	b.n	8012ce6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 8012d00:	691a      	ldr	r2, [r3, #16]
 8012d02:	f022 0201 	bic.w	r2, r2, #1
 8012d06:	611a      	str	r2, [r3, #16]
 8012d08:	4b2c      	ldr	r3, [pc, #176]	; (8012dbc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	b94b      	cbnz	r3, 8012d22 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 8012d0e:	b129      	cbz	r1, 8012d1c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 8012d10:	f004 f820 	bl	8016d54 <fmc_bank0_lock>
 8012d14:	2300      	movs	r3, #0
 8012d16:	2001      	movs	r0, #1
 8012d18:	6023      	str	r3, [r4, #0]
 8012d1a:	bd70      	pop	{r4, r5, r6, pc}
 8012d1c:	f004 f822 	bl	8016d64 <fmc_bank1_lock>
 8012d20:	e7f8      	b.n	8012d14 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 8012d22:	2304      	movs	r3, #4
 8012d24:	e7cf      	b.n	8012cc6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 8012d26:	4a25      	ldr	r2, [pc, #148]	; (8012dbc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8012d28:	6813      	ldr	r3, [r2, #0]
 8012d2a:	2b03      	cmp	r3, #3
 8012d2c:	d91a      	bls.n	8012d64 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 8012d2e:	4b25      	ldr	r3, [pc, #148]	; (8012dc4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8012d30:	7819      	ldrb	r1, [r3, #0]
 8012d32:	4b26      	ldr	r3, [pc, #152]	; (8012dcc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8012d34:	b189      	cbz	r1, 8012d5a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 8012d36:	6919      	ldr	r1, [r3, #16]
 8012d38:	f041 0101 	orr.w	r1, r1, #1
 8012d3c:	6119      	str	r1, [r3, #16]
 8012d3e:	4d1e      	ldr	r5, [pc, #120]	; (8012db8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8012d40:	481c      	ldr	r0, [pc, #112]	; (8012db4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 8012d42:	6829      	ldr	r1, [r5, #0]
 8012d44:	6803      	ldr	r3, [r0, #0]
 8012d46:	f851 6b04 	ldr.w	r6, [r1], #4
 8012d4a:	f843 6b04 	str.w	r6, [r3], #4
 8012d4e:	6003      	str	r3, [r0, #0]
 8012d50:	6813      	ldr	r3, [r2, #0]
 8012d52:	6029      	str	r1, [r5, #0]
 8012d54:	3b04      	subs	r3, #4
 8012d56:	6013      	str	r3, [r2, #0]
 8012d58:	e7b4      	b.n	8012cc4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8012d5a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8012d5c:	f041 0101 	orr.w	r1, r1, #1
 8012d60:	6519      	str	r1, [r3, #80]	; 0x50
 8012d62:	e7ec      	b.n	8012d3e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d0ad      	beq.n	8012cc4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8012d68:	4b16      	ldr	r3, [pc, #88]	; (8012dc4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8012d6a:	781a      	ldrb	r2, [r3, #0]
 8012d6c:	4b17      	ldr	r3, [pc, #92]	; (8012dcc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8012d6e:	b152      	cbz	r2, 8012d86 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 8012d70:	691a      	ldr	r2, [r3, #16]
 8012d72:	f042 0201 	orr.w	r2, r2, #1
 8012d76:	611a      	str	r2, [r3, #16]
 8012d78:	4a0f      	ldr	r2, [pc, #60]	; (8012db8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8012d7a:	4b0e      	ldr	r3, [pc, #56]	; (8012db4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 8012d7c:	6812      	ldr	r2, [r2, #0]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	6812      	ldr	r2, [r2, #0]
 8012d82:	601a      	str	r2, [r3, #0]
 8012d84:	e79e      	b.n	8012cc4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8012d86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012d88:	f042 0201 	orr.w	r2, r2, #1
 8012d8c:	651a      	str	r2, [r3, #80]	; 0x50
 8012d8e:	e7f3      	b.n	8012d78 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 8012d90:	4b0c      	ldr	r3, [pc, #48]	; (8012dc4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8012d92:	781a      	ldrb	r2, [r3, #0]
 8012d94:	4b0d      	ldr	r3, [pc, #52]	; (8012dcc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8012d96:	b132      	cbz	r2, 8012da6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 8012d98:	691a      	ldr	r2, [r3, #16]
 8012d9a:	f022 0202 	bic.w	r2, r2, #2
 8012d9e:	611a      	str	r2, [r3, #16]
 8012da0:	2000      	movs	r0, #0
 8012da2:	6020      	str	r0, [r4, #0]
 8012da4:	e7b9      	b.n	8012d1a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 8012da6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012da8:	f022 0202 	bic.w	r2, r2, #2
 8012dac:	651a      	str	r2, [r3, #80]	; 0x50
 8012dae:	e7f7      	b.n	8012da0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 8012db0:	200159f4 	strdcs	r5, [r1], -r4
 8012db4:	200159f0 	strdcs	r5, [r1], -r0
 8012db8:	200159fc 	strdcs	r5, [r1], -ip
 8012dbc:	20015a04 	andcs	r5, r1, r4, lsl #20
 8012dc0:	1ffff700 	svcne	0x00fff700
 8012dc4:	20015a00 	andcs	r5, r1, r0, lsl #20
 8012dc8:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8012dcc:	40022000 	andmi	r2, r2, r0

08012dd0 <net_set_ip>:
 8012dd0:	b510      	push	{r4, lr}
 8012dd2:	4c05      	ldr	r4, [pc, #20]	; (8012de8 <net_set_ip+0x18>)
 8012dd4:	6020      	str	r0, [r4, #0]
 8012dd6:	4621      	mov	r1, r4
 8012dd8:	4804      	ldr	r0, [pc, #16]	; (8012dec <net_set_ip+0x1c>)
 8012dda:	f7f4 fa9f 	bl	800731c <arp_init>
 8012dde:	4620      	mov	r0, r4
 8012de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012de4:	f002 b8a8 	b.w	8014f38 <ip_set_ip>
 8012de8:	20015a08 	andcs	r5, r1, r8, lsl #20
 8012dec:	20015a14 	andcs	r5, r1, r4, lsl sl

08012df0 <net_set_gw>:
 8012df0:	4b02      	ldr	r3, [pc, #8]	; (8012dfc <net_set_gw+0xc>)
 8012df2:	6098      	str	r0, [r3, #8]
 8012df4:	4618      	mov	r0, r3
 8012df6:	f002 b89f 	b.w	8014f38 <ip_set_ip>
 8012dfa:	bf00      	nop
 8012dfc:	20015a08 	andcs	r5, r1, r8, lsl #20

08012e00 <net_set_dhcp>:
 8012e00:	b570      	push	{r4, r5, r6, lr}
 8012e02:	2400      	movs	r4, #0
 8012e04:	4605      	mov	r5, r0
 8012e06:	7014      	strb	r4, [r2, #0]
 8012e08:	4616      	mov	r6, r2
 8012e0a:	4810      	ldr	r0, [pc, #64]	; (8012e4c <net_set_dhcp+0x4c>)
 8012e0c:	460a      	mov	r2, r1
 8012e0e:	4910      	ldr	r1, [pc, #64]	; (8012e50 <net_set_dhcp+0x50>)
 8012e10:	f001 fe72 	bl	8014af8 <dhcp_client>
 8012e14:	42a0      	cmp	r0, r4
 8012e16:	da17      	bge.n	8012e48 <net_set_dhcp+0x48>
 8012e18:	480d      	ldr	r0, [pc, #52]	; (8012e50 <net_set_dhcp+0x50>)
 8012e1a:	f000 f859 	bl	8012ed0 <rfc3927>
 8012e1e:	7030      	strb	r0, [r6, #0]
 8012e20:	490b      	ldr	r1, [pc, #44]	; (8012e50 <net_set_dhcp+0x50>)
 8012e22:	480a      	ldr	r0, [pc, #40]	; (8012e4c <net_set_dhcp+0x4c>)
 8012e24:	f7f4 fa7a 	bl	800731c <arp_init>
 8012e28:	4809      	ldr	r0, [pc, #36]	; (8012e50 <net_set_dhcp+0x50>)
 8012e2a:	f002 f885 	bl	8014f38 <ip_set_ip>
 8012e2e:	4a08      	ldr	r2, [pc, #32]	; (8012e50 <net_set_dhcp+0x50>)
 8012e30:	1e6b      	subs	r3, r5, #1
 8012e32:	350b      	adds	r5, #11
 8012e34:	f812 1b01 	ldrb.w	r1, [r2], #1
 8012e38:	f803 1f01 	strb.w	r1, [r3, #1]!
 8012e3c:	42ab      	cmp	r3, r5
 8012e3e:	d1f9      	bne.n	8012e34 <net_set_dhcp+0x34>
 8012e40:	4b04      	ldr	r3, [pc, #16]	; (8012e54 <net_set_dhcp+0x54>)
 8012e42:	4620      	mov	r0, r4
 8012e44:	701c      	strb	r4, [r3, #0]
 8012e46:	bd70      	pop	{r4, r5, r6, pc}
 8012e48:	2401      	movs	r4, #1
 8012e4a:	e7e9      	b.n	8012e20 <net_set_dhcp+0x20>
 8012e4c:	20015a14 	andcs	r5, r1, r4, lsl sl
 8012e50:	20015a08 	andcs	r5, r1, r8, lsl #20
 8012e54:	20015a1a 	andcs	r5, r1, sl, lsl sl

08012e58 <net_dhcp_release>:
 8012e58:	b508      	push	{r3, lr}
 8012e5a:	f001 ff55 	bl	8014d08 <dhcp_client_release>
 8012e5e:	2200      	movs	r2, #0
 8012e60:	4b01      	ldr	r3, [pc, #4]	; (8012e68 <net_dhcp_release+0x10>)
 8012e62:	701a      	strb	r2, [r3, #0]
 8012e64:	bd08      	pop	{r3, pc}
 8012e66:	bf00      	nop
 8012e68:	20015a1a 	andcs	r5, r1, sl, lsl sl

08012e6c <net_set_zeroconf>:
 8012e6c:	b538      	push	{r3, r4, r5, lr}
 8012e6e:	4604      	mov	r4, r0
 8012e70:	480c      	ldr	r0, [pc, #48]	; (8012ea4 <net_set_zeroconf+0x38>)
 8012e72:	f000 f82d 	bl	8012ed0 <rfc3927>
 8012e76:	4605      	mov	r5, r0
 8012e78:	b190      	cbz	r0, 8012ea0 <net_set_zeroconf+0x34>
 8012e7a:	490a      	ldr	r1, [pc, #40]	; (8012ea4 <net_set_zeroconf+0x38>)
 8012e7c:	480a      	ldr	r0, [pc, #40]	; (8012ea8 <net_set_zeroconf+0x3c>)
 8012e7e:	f7f4 fa4d 	bl	800731c <arp_init>
 8012e82:	4808      	ldr	r0, [pc, #32]	; (8012ea4 <net_set_zeroconf+0x38>)
 8012e84:	f002 f858 	bl	8014f38 <ip_set_ip>
 8012e88:	4a06      	ldr	r2, [pc, #24]	; (8012ea4 <net_set_zeroconf+0x38>)
 8012e8a:	1e63      	subs	r3, r4, #1
 8012e8c:	340b      	adds	r4, #11
 8012e8e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8012e92:	f803 1f01 	strb.w	r1, [r3, #1]!
 8012e96:	42a3      	cmp	r3, r4
 8012e98:	d1f9      	bne.n	8012e8e <net_set_zeroconf+0x22>
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	4b03      	ldr	r3, [pc, #12]	; (8012eac <net_set_zeroconf+0x40>)
 8012e9e:	701a      	strb	r2, [r3, #0]
 8012ea0:	4628      	mov	r0, r5
 8012ea2:	bd38      	pop	{r3, r4, r5, pc}
 8012ea4:	20015a08 	andcs	r5, r1, r8, lsl #20
 8012ea8:	20015a14 	andcs	r5, r1, r4, lsl sl
 8012eac:	20015a1a 	andcs	r5, r1, sl, lsl sl

08012eb0 <net_timers_run>:
 8012eb0:	4b05      	ldr	r3, [pc, #20]	; (8012ec8 <net_timers_run+0x18>)
 8012eb2:	4a06      	ldr	r2, [pc, #24]	; (8012ecc <net_timers_run+0x1c>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	6811      	ldr	r1, [r2, #0]
 8012eb8:	4299      	cmp	r1, r3
 8012eba:	d803      	bhi.n	8012ec4 <net_timers_run+0x14>
 8012ebc:	3364      	adds	r3, #100	; 0x64
 8012ebe:	6013      	str	r3, [r2, #0]
 8012ec0:	f001 bfb0 	b.w	8014e24 <igmp_timer>
 8012ec4:	4770      	bx	lr
 8012ec6:	bf00      	nop
 8012ec8:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4
 8012ecc:	20015a20 	andcs	r5, r1, r0, lsr #20

08012ed0 <rfc3927>:
 8012ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ed4:	4606      	mov	r6, r0
 8012ed6:	25ff      	movs	r5, #255	; 0xff
 8012ed8:	4b18      	ldr	r3, [pc, #96]	; (8012f3c <rfc3927+0x6c>)
 8012eda:	4f19      	ldr	r7, [pc, #100]	; (8012f40 <rfc3927+0x70>)
 8012edc:	791a      	ldrb	r2, [r3, #4]
 8012ede:	78dc      	ldrb	r4, [r3, #3]
 8012ee0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8012f44 <rfc3927+0x74>
 8012ee4:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 8012ee8:	f8d7 9000 	ldr.w	r9, [r7]
 8012eec:	f8df b058 	ldr.w	fp, [pc, #88]	; 8012f48 <rfc3927+0x78>
 8012ef0:	f8df a058 	ldr.w	sl, [pc, #88]	; 8012f4c <rfc3927+0x7c>
 8012ef4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8012ef8:	4659      	mov	r1, fp
 8012efa:	4620      	mov	r0, r4
 8012efc:	f001 fcf0 	bl	80148e0 <arp_cache_lookup>
 8012f00:	b190      	cbz	r0, 8012f28 <rfc3927+0x58>
 8012f02:	ba24      	rev	r4, r4
 8012f04:	3401      	adds	r4, #1
 8012f06:	3d01      	subs	r5, #1
 8012f08:	ba24      	rev	r4, r4
 8012f0a:	b2ad      	uxth	r5, r5
 8012f0c:	4554      	cmp	r4, sl
 8012f0e:	bf08      	it	eq
 8012f10:	4644      	moveq	r4, r8
 8012f12:	b18d      	cbz	r5, 8012f38 <rfc3927+0x68>
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	eba3 0309 	sub.w	r3, r3, r9
 8012f1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8012f1e:	d3eb      	bcc.n	8012ef8 <rfc3927+0x28>
 8012f20:	2400      	movs	r4, #0
 8012f22:	4623      	mov	r3, r4
 8012f24:	4620      	mov	r0, r4
 8012f26:	e002      	b.n	8012f2e <rfc3927+0x5e>
 8012f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012f2c:	2001      	movs	r0, #1
 8012f2e:	e9c6 3401 	strd	r3, r4, [r6, #4]
 8012f32:	6034      	str	r4, [r6, #0]
 8012f34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f38:	462c      	mov	r4, r5
 8012f3a:	e7f2      	b.n	8012f22 <rfc3927+0x52>
 8012f3c:	20015a24 	andcs	r5, r1, r4, lsr #20
 8012f40:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4
 8012f44:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 8012f48:	20015a2c 	andcs	r5, r1, ip, lsr #20
 8012f4c:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

08012f50 <_init_tcb>:
 8012f50:	b510      	push	{r4, lr}
 8012f52:	4603      	mov	r3, r0
 8012f54:	2400      	movs	r4, #0
 8012f56:	f100 0244 	add.w	r2, r0, #68	; 0x44
 8012f5a:	4293      	cmp	r3, r2
 8012f5c:	d10d      	bne.n	8012f7a <_init_tcb+0x2a>
 8012f5e:	4b08      	ldr	r3, [pc, #32]	; (8012f80 <_init_tcb+0x30>)
 8012f60:	f640 3268 	movw	r2, #2920	; 0xb68
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	8702      	strh	r2, [r0, #56]	; 0x38
 8012f68:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012f6c:	6283      	str	r3, [r0, #40]	; 0x28
 8012f6e:	6243      	str	r3, [r0, #36]	; 0x24
 8012f70:	2301      	movs	r3, #1
 8012f72:	8001      	strh	r1, [r0, #0]
 8012f74:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8012f78:	bd10      	pop	{r4, pc}
 8012f7a:	f803 4b01 	strb.w	r4, [r3], #1
 8012f7e:	e7ec      	b.n	8012f5a <_init_tcb+0xa>
 8012f80:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4

08012f84 <memcpy.isra.0>:
 8012f84:	3801      	subs	r0, #1
 8012f86:	440a      	add	r2, r1
 8012f88:	4291      	cmp	r1, r2
 8012f8a:	d100      	bne.n	8012f8e <memcpy.isra.0+0xa>
 8012f8c:	4770      	bx	lr
 8012f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f92:	f800 3f01 	strb.w	r3, [r0, #1]!
 8012f96:	e7f7      	b.n	8012f88 <memcpy.isra.0+0x4>

08012f98 <_bswap32>:
 8012f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f9a:	2204      	movs	r2, #4
 8012f9c:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 8012fa0:	4629      	mov	r1, r5
 8012fa2:	4604      	mov	r4, r0
 8012fa4:	eb0d 0002 	add.w	r0, sp, r2
 8012fa8:	f7ff ffec 	bl	8012f84 <memcpy.isra.0>
 8012fac:	2204      	movs	r2, #4
 8012fae:	9b01      	ldr	r3, [sp, #4]
 8012fb0:	eb0d 0102 	add.w	r1, sp, r2
 8012fb4:	ba1b      	rev	r3, r3
 8012fb6:	4628      	mov	r0, r5
 8012fb8:	9301      	str	r3, [sp, #4]
 8012fba:	f7ff ffe3 	bl	8012f84 <memcpy.isra.0>
 8012fbe:	2204      	movs	r2, #4
 8012fc0:	3426      	adds	r4, #38	; 0x26
 8012fc2:	eb0d 0002 	add.w	r0, sp, r2
 8012fc6:	4621      	mov	r1, r4
 8012fc8:	f7ff ffdc 	bl	8012f84 <memcpy.isra.0>
 8012fcc:	2204      	movs	r2, #4
 8012fce:	9b01      	ldr	r3, [sp, #4]
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	ba1b      	rev	r3, r3
 8012fd4:	eb0d 0102 	add.w	r1, sp, r2
 8012fd8:	9301      	str	r3, [sp, #4]
 8012fda:	f7ff ffd3 	bl	8012f84 <memcpy.isra.0>
 8012fde:	b003      	add	sp, #12
 8012fe0:	bd30      	pop	{r4, r5, pc}
	...

08012fe4 <_tcp_send_package>:
 8012fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012fe8:	7a0b      	ldrb	r3, [r1, #8]
 8012fea:	4605      	mov	r5, r0
 8012fec:	f013 0f02 	tst.w	r3, #2
 8012ff0:	bf0c      	ite	eq
 8012ff2:	f04f 0805 	moveq.w	r8, #5
 8012ff6:	f04f 0806 	movne.w	r8, #6
 8012ffa:	f04f 0a00 	mov.w	sl, #0
 8012ffe:	4c47      	ldr	r4, [pc, #284]	; (801311c <_tcp_send_package+0x138>)
 8013000:	460f      	mov	r7, r1
 8013002:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8013004:	f100 0108 	add.w	r1, r0, #8
 8013008:	2206      	movs	r2, #6
 801300a:	4620      	mov	r0, r4
 801300c:	f7ff ffba 	bl	8012f84 <memcpy.isra.0>
 8013010:	4a43      	ldr	r2, [pc, #268]	; (8013120 <_tcp_send_package+0x13c>)
 8013012:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8013016:	8813      	ldrh	r3, [r2, #0]
 8013018:	b2b6      	uxth	r6, r6
 801301a:	1c59      	adds	r1, r3, #1
 801301c:	8263      	strh	r3, [r4, #18]
 801301e:	f105 0904 	add.w	r9, r5, #4
 8013022:	f106 0314 	add.w	r3, r6, #20
 8013026:	ba5b      	rev16	r3, r3
 8013028:	8011      	strh	r1, [r2, #0]
 801302a:	f104 001e 	add.w	r0, r4, #30
 801302e:	2204      	movs	r2, #4
 8013030:	4649      	mov	r1, r9
 8013032:	8223      	strh	r3, [r4, #16]
 8013034:	f7ff ffa6 	bl	8012f84 <memcpy.isra.0>
 8013038:	2114      	movs	r1, #20
 801303a:	f104 000e 	add.w	r0, r4, #14
 801303e:	f8a4 a018 	strh.w	sl, [r4, #24]
 8013042:	f001 ff82 	bl	8014f4a <net_chksum>
 8013046:	882b      	ldrh	r3, [r5, #0]
 8013048:	ea4f 1808 	mov.w	r8, r8, lsl #4
 801304c:	8463      	strh	r3, [r4, #34]	; 0x22
 801304e:	886b      	ldrh	r3, [r5, #2]
 8013050:	8320      	strh	r0, [r4, #24]
 8013052:	84a3      	strh	r3, [r4, #36]	; 0x24
 8013054:	683b      	ldr	r3, [r7, #0]
 8013056:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 8013058:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	f884 802e 	strb.w	r8, [r4, #46]	; 0x2e
 8013062:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 8013066:	7a3b      	ldrb	r3, [r7, #8]
 8013068:	8622      	strh	r2, [r4, #48]	; 0x30
 801306a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 801306e:	079b      	lsls	r3, r3, #30
 8013070:	bf48      	it	mi
 8013072:	f240 4302 	movwmi	r3, #1026	; 0x402
 8013076:	8baa      	ldrh	r2, [r5, #28]
 8013078:	bf48      	it	mi
 801307a:	86e3      	strhmi	r3, [r4, #54]	; 0x36
 801307c:	86a2      	strh	r2, [r4, #52]	; 0x34
 801307e:	bf42      	ittt	mi
 8013080:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 8013084:	4622      	movmi	r2, r4
 8013086:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 801308a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801308c:	f8a4 a032 	strh.w	sl, [r4, #50]	; 0x32
 8013090:	bf58      	it	pl
 8013092:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 8013096:	2b00      	cmp	r3, #0
 8013098:	d13e      	bne.n	8013118 <_tcp_send_package+0x134>
 801309a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 801309c:	481f      	ldr	r0, [pc, #124]	; (801311c <_tcp_send_package+0x138>)
 801309e:	ba5b      	rev16	r3, r3
 80130a0:	8463      	strh	r3, [r4, #34]	; 0x22
 80130a2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80130a4:	ba5b      	rev16	r3, r3
 80130a6:	84a3      	strh	r3, [r4, #36]	; 0x24
 80130a8:	f7ff ff76 	bl	8012f98 <_bswap32>
 80130ac:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80130ae:	a801      	add	r0, sp, #4
 80130b0:	ba5b      	rev16	r3, r3
 80130b2:	8623      	strh	r3, [r4, #48]	; 0x30
 80130b4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80130b6:	220c      	movs	r2, #12
 80130b8:	ba5b      	rev16	r3, r3
 80130ba:	491a      	ldr	r1, [pc, #104]	; (8013124 <_tcp_send_package+0x140>)
 80130bc:	86a3      	strh	r3, [r4, #52]	; 0x34
 80130be:	f7ff ff61 	bl	8012f84 <memcpy.isra.0>
 80130c2:	2204      	movs	r2, #4
 80130c4:	4918      	ldr	r1, [pc, #96]	; (8013128 <_tcp_send_package+0x144>)
 80130c6:	4817      	ldr	r0, [pc, #92]	; (8013124 <_tcp_send_package+0x140>)
 80130c8:	f7ff ff5c 	bl	8012f84 <memcpy.isra.0>
 80130cc:	2204      	movs	r2, #4
 80130ce:	4649      	mov	r1, r9
 80130d0:	4816      	ldr	r0, [pc, #88]	; (801312c <_tcp_send_package+0x148>)
 80130d2:	f7ff ff57 	bl	8012f84 <memcpy.isra.0>
 80130d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80130da:	f106 010c 	add.w	r1, r6, #12
 80130de:	83e3      	strh	r3, [r4, #30]
 80130e0:	4810      	ldr	r0, [pc, #64]	; (8013124 <_tcp_send_package+0x140>)
 80130e2:	ba73      	rev16	r3, r6
 80130e4:	8423      	strh	r3, [r4, #32]
 80130e6:	f001 ff30 	bl	8014f4a <net_chksum>
 80130ea:	a901      	add	r1, sp, #4
 80130ec:	4605      	mov	r5, r0
 80130ee:	220c      	movs	r2, #12
 80130f0:	480c      	ldr	r0, [pc, #48]	; (8013124 <_tcp_send_package+0x140>)
 80130f2:	f7ff ff47 	bl	8012f84 <memcpy.isra.0>
 80130f6:	4809      	ldr	r0, [pc, #36]	; (801311c <_tcp_send_package+0x138>)
 80130f8:	f106 0122 	add.w	r1, r6, #34	; 0x22
 80130fc:	8665      	strh	r5, [r4, #50]	; 0x32
 80130fe:	b004      	add	sp, #16
 8013100:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013104:	f004 bbf6 	b.w	80178f4 <emac_eth_send>
 8013108:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 801310a:	5cc9      	ldrb	r1, [r1, r3]
 801310c:	54d1      	strb	r1, [r2, r3]
 801310e:	3301      	adds	r3, #1
 8013110:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8013112:	4299      	cmp	r1, r3
 8013114:	d8f8      	bhi.n	8013108 <_tcp_send_package+0x124>
 8013116:	e7c0      	b.n	801309a <_tcp_send_package+0xb6>
 8013118:	2300      	movs	r3, #0
 801311a:	e7f9      	b.n	8013110 <_tcp_send_package+0x12c>
 801311c:	200165ec 	andcs	r6, r1, ip, ror #11
 8013120:	20015a34 	andcs	r5, r1, r4, lsr sl
 8013124:	20016602 	andcs	r6, r1, r2, lsl #12
 8013128:	20015a08 	andcs	r5, r1, r8, lsl #20
 801312c:	20016606 	andcs	r6, r1, r6, lsl #12

08013130 <_send_reset>:
 8013130:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013132:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8013136:	4604      	mov	r4, r0
 8013138:	075a      	lsls	r2, r3, #29
 801313a:	460e      	mov	r6, r1
 801313c:	d421      	bmi.n	8013182 <_send_reset+0x52>
 801313e:	2204      	movs	r2, #4
 8013140:	f013 0310 	ands.w	r3, r3, #16
 8013144:	f88d 200c 	strb.w	r2, [sp, #12]
 8013148:	d01d      	beq.n	8013186 <_send_reset+0x56>
 801314a:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 801314e:	4668      	mov	r0, sp
 8013150:	f7ff ff18 	bl	8012f84 <memcpy.isra.0>
 8013154:	9b00      	ldr	r3, [sp, #0]
 8013156:	9301      	str	r3, [sp, #4]
 8013158:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801315c:	4668      	mov	r0, sp
 801315e:	f3c3 0540 	ubfx	r5, r3, #1, #1
 8013162:	f104 0126 	add.w	r1, r4, #38	; 0x26
 8013166:	07db      	lsls	r3, r3, #31
 8013168:	f04f 0204 	mov.w	r2, #4
 801316c:	bf48      	it	mi
 801316e:	3501      	addmi	r5, #1
 8013170:	f7ff ff08 	bl	8012f84 <memcpy.isra.0>
 8013174:	9b00      	ldr	r3, [sp, #0]
 8013176:	4630      	mov	r0, r6
 8013178:	441d      	add	r5, r3
 801317a:	a901      	add	r1, sp, #4
 801317c:	9502      	str	r5, [sp, #8]
 801317e:	f7ff ff31 	bl	8012fe4 <_tcp_send_package>
 8013182:	b004      	add	sp, #16
 8013184:	bd70      	pop	{r4, r5, r6, pc}
 8013186:	9301      	str	r3, [sp, #4]
 8013188:	2314      	movs	r3, #20
 801318a:	f88d 300c 	strb.w	r3, [sp, #12]
 801318e:	e7e3      	b.n	8013158 <_send_reset+0x28>

08013190 <tcp_begin>:
 8013190:	b508      	push	{r3, lr}
 8013192:	4b0a      	ldr	r3, [pc, #40]	; (80131bc <tcp_begin+0x2c>)
 8013194:	4601      	mov	r1, r0
 8013196:	881a      	ldrh	r2, [r3, #0]
 8013198:	4282      	cmp	r2, r0
 801319a:	d102      	bne.n	80131a2 <tcp_begin+0x12>
 801319c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80131a0:	b130      	cbz	r0, 80131b0 <tcp_begin+0x20>
 80131a2:	b12a      	cbz	r2, 80131b0 <tcp_begin+0x20>
 80131a4:	4806      	ldr	r0, [pc, #24]	; (80131c0 <tcp_begin+0x30>)
 80131a6:	f003 f8df 	bl	8016368 <console_error>
 80131aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80131ae:	bd08      	pop	{r3, pc}
 80131b0:	4802      	ldr	r0, [pc, #8]	; (80131bc <tcp_begin+0x2c>)
 80131b2:	8019      	strh	r1, [r3, #0]
 80131b4:	f7ff fecc 	bl	8012f50 <_init_tcb>
 80131b8:	2000      	movs	r0, #0
 80131ba:	e7f8      	b.n	80131ae <tcp_begin+0x1e>
 80131bc:	200165a8 	andcs	r6, r1, r8, lsr #11
 80131c0:	0801b566 	stmdaeq	r1, {r1, r2, r5, r6, r8, sl, ip, sp, pc}

080131c4 <tcp_write>:
 80131c4:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80131c8:	429a      	cmp	r2, r3
 80131ca:	bf28      	it	cs
 80131cc:	461a      	movcs	r2, r3
 80131ce:	2344      	movs	r3, #68	; 0x44
 80131d0:	b530      	push	{r4, r5, lr}
 80131d2:	4c0d      	ldr	r4, [pc, #52]	; (8013208 <tcp_write+0x44>)
 80131d4:	b085      	sub	sp, #20
 80131d6:	fb03 4400 	mla	r4, r3, r0, r4
 80131da:	6963      	ldr	r3, [r4, #20]
 80131dc:	62e1      	str	r1, [r4, #44]	; 0x2c
 80131de:	9301      	str	r3, [sp, #4]
 80131e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80131e2:	4620      	mov	r0, r4
 80131e4:	9302      	str	r3, [sp, #8]
 80131e6:	2318      	movs	r3, #24
 80131e8:	8622      	strh	r2, [r4, #48]	; 0x30
 80131ea:	a901      	add	r1, sp, #4
 80131ec:	4615      	mov	r5, r2
 80131ee:	f88d 300c 	strb.w	r3, [sp, #12]
 80131f2:	f7ff fef7 	bl	8012fe4 <_tcp_send_package>
 80131f6:	2300      	movs	r3, #0
 80131f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80131fa:	8623      	strh	r3, [r4, #48]	; 0x30
 80131fc:	6963      	ldr	r3, [r4, #20]
 80131fe:	442b      	add	r3, r5
 8013200:	6163      	str	r3, [r4, #20]
 8013202:	b005      	add	sp, #20
 8013204:	bd30      	pop	{r4, r5, pc}
 8013206:	bf00      	nop
 8013208:	200165a8 	andcs	r6, r1, r8, lsr #11

0801320c <tcp_read>:
 801320c:	2344      	movs	r3, #68	; 0x44
 801320e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013210:	4c1c      	ldr	r4, [pc, #112]	; (8013284 <tcp_read+0x78>)
 8013212:	b085      	sub	sp, #20
 8013214:	fb03 4400 	mla	r4, r3, r0, r4
 8013218:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801321c:	2b07      	cmp	r3, #7
 801321e:	d112      	bne.n	8013246 <tcp_read+0x3a>
 8013220:	6963      	ldr	r3, [r4, #20]
 8013222:	4620      	mov	r0, r4
 8013224:	9301      	str	r3, [sp, #4]
 8013226:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013228:	a901      	add	r1, sp, #4
 801322a:	9302      	str	r3, [sp, #8]
 801322c:	2311      	movs	r3, #17
 801322e:	f88d 300c 	strb.w	r3, [sp, #12]
 8013232:	f7ff fed7 	bl	8012fe4 <_tcp_send_package>
 8013236:	2309      	movs	r3, #9
 8013238:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 801323c:	6963      	ldr	r3, [r4, #20]
 801323e:	3301      	adds	r3, #1
 8013240:	6163      	str	r3, [r4, #20]
 8013242:	2000      	movs	r0, #0
 8013244:	e01b      	b.n	801327e <tcp_read+0x72>
 8013246:	f44f 6337 	mov.w	r3, #2928	; 0xb70
 801324a:	4358      	muls	r0, r3
 801324c:	4a0e      	ldr	r2, [pc, #56]	; (8013288 <tcp_read+0x7c>)
 801324e:	1817      	adds	r7, r2, r0
 8013250:	887b      	ldrh	r3, [r7, #2]
 8013252:	5a15      	ldrh	r5, [r2, r0]
 8013254:	429d      	cmp	r5, r3
 8013256:	d0f4      	beq.n	8013242 <tcp_read+0x36>
 8013258:	f240 55b6 	movw	r5, #1462	; 0x5b6
 801325c:	435d      	muls	r5, r3
 801325e:	1d06      	adds	r6, r0, #4
 8013260:	442e      	add	r6, r5
 8013262:	4416      	add	r6, r2
 8013264:	4405      	add	r5, r0
 8013266:	600e      	str	r6, [r1, #0]
 8013268:	442a      	add	r2, r5
 801326a:	f8b2 05b8 	ldrh.w	r0, [r2, #1464]	; 0x5b8
 801326e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8013270:	3301      	adds	r3, #1
 8013272:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 8013276:	f003 0301 	and.w	r3, r3, #1
 801327a:	8722      	strh	r2, [r4, #56]	; 0x38
 801327c:	807b      	strh	r3, [r7, #2]
 801327e:	b005      	add	sp, #20
 8013280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013282:	bf00      	nop
 8013284:	200165a8 	andcs	r6, r1, r8, lsr #11
 8013288:	20015a38 	andcs	r5, r1, r8, lsr sl

0801328c <memcpy.isra.0>:
 801328c:	3801      	subs	r0, #1
 801328e:	440a      	add	r2, r1
 8013290:	4291      	cmp	r1, r2
 8013292:	d100      	bne.n	8013296 <memcpy.isra.0+0xa>
 8013294:	4770      	bx	lr
 8013296:	f811 3b01 	ldrb.w	r3, [r1], #1
 801329a:	f800 3f01 	strb.w	r3, [r0, #1]!
 801329e:	e7f7      	b.n	8013290 <memcpy.isra.0+0x4>

080132a0 <net_memcpy>:
 80132a0:	ea40 0301 	orr.w	r3, r0, r1
 80132a4:	079b      	lsls	r3, r3, #30
 80132a6:	b570      	push	{r4, r5, r6, lr}
 80132a8:	d108      	bne.n	80132bc <net_memcpy+0x1c>
 80132aa:	f022 0303 	bic.w	r3, r2, #3
 80132ae:	1f04      	subs	r4, r0, #4
 80132b0:	18cd      	adds	r5, r1, r3
 80132b2:	42a9      	cmp	r1, r5
 80132b4:	d108      	bne.n	80132c8 <net_memcpy+0x28>
 80132b6:	1ad2      	subs	r2, r2, r3
 80132b8:	4403      	add	r3, r0
 80132ba:	e000      	b.n	80132be <net_memcpy+0x1e>
 80132bc:	4603      	mov	r3, r0
 80132be:	3b01      	subs	r3, #1
 80132c0:	440a      	add	r2, r1
 80132c2:	4291      	cmp	r1, r2
 80132c4:	d105      	bne.n	80132d2 <net_memcpy+0x32>
 80132c6:	bd70      	pop	{r4, r5, r6, pc}
 80132c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80132cc:	f844 6f04 	str.w	r6, [r4, #4]!
 80132d0:	e7ef      	b.n	80132b2 <net_memcpy+0x12>
 80132d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80132d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80132da:	e7f2      	b.n	80132c2 <net_memcpy+0x22>

080132dc <udp_set_ip>:
 80132dc:	2204      	movs	r2, #4
 80132de:	b513      	push	{r0, r1, r4, lr}
 80132e0:	4604      	mov	r4, r0
 80132e2:	6803      	ldr	r3, [r0, #0]
 80132e4:	eb0d 0102 	add.w	r1, sp, r2
 80132e8:	4808      	ldr	r0, [pc, #32]	; (801330c <udp_set_ip+0x30>)
 80132ea:	9301      	str	r3, [sp, #4]
 80132ec:	f7ff ffce 	bl	801328c <memcpy.isra.0>
 80132f0:	6862      	ldr	r2, [r4, #4]
 80132f2:	4b07      	ldr	r3, [pc, #28]	; (8013310 <udp_set_ip+0x34>)
 80132f4:	43d1      	mvns	r1, r2
 80132f6:	6019      	str	r1, [r3, #0]
 80132f8:	6823      	ldr	r3, [r4, #0]
 80132fa:	4013      	ands	r3, r2
 80132fc:	4a05      	ldr	r2, [pc, #20]	; (8013314 <udp_set_ip+0x38>)
 80132fe:	6013      	str	r3, [r2, #0]
 8013300:	68a2      	ldr	r2, [r4, #8]
 8013302:	4b05      	ldr	r3, [pc, #20]	; (8013318 <udp_set_ip+0x3c>)
 8013304:	601a      	str	r2, [r3, #0]
 8013306:	b002      	add	sp, #8
 8013308:	bd10      	pop	{r4, pc}
 801330a:	bf00      	nop
 801330c:	2001c8c2 	andcs	ip, r1, r2, asr #17
 8013310:	20016bd8 	ldrdcs	r6, [r1], -r8
 8013314:	20016be0 	andcs	r6, r1, r0, ror #23
 8013318:	20016bdc 	ldrdcs	r6, [r1], -ip

0801331c <udp_bind>:
 801331c:	4a0a      	ldr	r2, [pc, #40]	; (8013348 <udp_bind+0x2c>)
 801331e:	4603      	mov	r3, r0
 8013320:	b510      	push	{r4, lr}
 8013322:	2000      	movs	r0, #0
 8013324:	4614      	mov	r4, r2
 8013326:	f852 1b04 	ldr.w	r1, [r2], #4
 801332a:	4299      	cmp	r1, r3
 801332c:	d008      	beq.n	8013340 <udp_bind+0x24>
 801332e:	b141      	cbz	r1, 8013342 <udp_bind+0x26>
 8013330:	3001      	adds	r0, #1
 8013332:	2808      	cmp	r0, #8
 8013334:	d1f7      	bne.n	8013326 <udp_bind+0xa>
 8013336:	4805      	ldr	r0, [pc, #20]	; (801334c <udp_bind+0x30>)
 8013338:	f003 f816 	bl	8016368 <console_error>
 801333c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013340:	bd10      	pop	{r4, pc}
 8013342:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 8013346:	e7fb      	b.n	8013340 <udp_bind+0x24>
 8013348:	20016be8 	andcs	r6, r1, r8, ror #23
 801334c:	0801b586 	stmdaeq	r1, {r1, r2, r7, r8, sl, ip, sp, pc}

08013350 <udp_unbind>:
 8013350:	4a0c      	ldr	r2, [pc, #48]	; (8013384 <udp_unbind+0x34>)
 8013352:	2300      	movs	r3, #0
 8013354:	4611      	mov	r1, r2
 8013356:	b510      	push	{r4, lr}
 8013358:	f852 4b04 	ldr.w	r4, [r2], #4
 801335c:	4284      	cmp	r4, r0
 801335e:	d108      	bne.n	8013372 <udp_unbind+0x22>
 8013360:	2000      	movs	r0, #0
 8013362:	f640 3294 	movw	r2, #2964	; 0xb94
 8013366:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 801336a:	4353      	muls	r3, r2
 801336c:	4a06      	ldr	r2, [pc, #24]	; (8013388 <udp_unbind+0x38>)
 801336e:	50d0      	str	r0, [r2, r3]
 8013370:	bd10      	pop	{r4, pc}
 8013372:	3301      	adds	r3, #1
 8013374:	2b08      	cmp	r3, #8
 8013376:	d1ef      	bne.n	8013358 <udp_unbind+0x8>
 8013378:	4804      	ldr	r0, [pc, #16]	; (801338c <udp_unbind+0x3c>)
 801337a:	f002 fff5 	bl	8016368 <console_error>
 801337e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013382:	e7f5      	b.n	8013370 <udp_unbind+0x20>
 8013384:	20016be8 	andcs	r6, r1, r8, ror #23
 8013388:	20016c08 	andcs	r6, r1, r8, lsl #24
 801338c:	0801b58b 	stmdaeq	r1, {r0, r1, r3, r7, r8, sl, ip, sp, pc}

08013390 <udp_recv>:
 8013390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013394:	4604      	mov	r4, r0
 8013396:	4698      	mov	r8, r3
 8013398:	f640 3394 	movw	r3, #2964	; 0xb94
 801339c:	435c      	muls	r4, r3
 801339e:	4608      	mov	r0, r1
 80133a0:	4915      	ldr	r1, [pc, #84]	; (80133f8 <udp_recv+0x68>)
 80133a2:	190f      	adds	r7, r1, r4
 80133a4:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 80133a8:	5b0b      	ldrh	r3, [r1, r4]
 80133aa:	4563      	cmp	r3, ip
 80133ac:	d021      	beq.n	80133f2 <udp_recv+0x62>
 80133ae:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 80133b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80133b6:	eb0c 0604 	add.w	r6, ip, r4
 80133ba:	440e      	add	r6, r1
 80133bc:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 80133c0:	3404      	adds	r4, #4
 80133c2:	4295      	cmp	r5, r2
 80133c4:	bf28      	it	cs
 80133c6:	4615      	movcs	r5, r2
 80133c8:	4464      	add	r4, ip
 80133ca:	462a      	mov	r2, r5
 80133cc:	4421      	add	r1, r4
 80133ce:	f7ff ff67 	bl	80132a0 <net_memcpy>
 80133d2:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 80133d6:	f8c8 3000 	str.w	r3, [r8]
 80133da:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 80133de:	9b06      	ldr	r3, [sp, #24]
 80133e0:	801a      	strh	r2, [r3, #0]
 80133e2:	887b      	ldrh	r3, [r7, #2]
 80133e4:	3301      	adds	r3, #1
 80133e6:	f003 0301 	and.w	r3, r3, #1
 80133ea:	807b      	strh	r3, [r7, #2]
 80133ec:	4628      	mov	r0, r5
 80133ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133f2:	2500      	movs	r5, #0
 80133f4:	e7fa      	b.n	80133ec <udp_recv+0x5c>
 80133f6:	bf00      	nop
 80133f8:	20016c08 	andcs	r6, r1, r8, lsl #24

080133fc <udp_recv2>:
 80133fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133fe:	f640 3594 	movw	r5, #2964	; 0xb94
 8013402:	4368      	muls	r0, r5
 8013404:	4c0f      	ldr	r4, [pc, #60]	; (8013444 <udp_recv2+0x48>)
 8013406:	1827      	adds	r7, r4, r0
 8013408:	887d      	ldrh	r5, [r7, #2]
 801340a:	5a26      	ldrh	r6, [r4, r0]
 801340c:	42ae      	cmp	r6, r5
 801340e:	d017      	beq.n	8013440 <udp_recv2+0x44>
 8013410:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 8013414:	fb0c f505 	mul.w	r5, ip, r5
 8013418:	1d06      	adds	r6, r0, #4
 801341a:	442e      	add	r6, r5
 801341c:	4405      	add	r5, r0
 801341e:	4426      	add	r6, r4
 8013420:	442c      	add	r4, r5
 8013422:	600e      	str	r6, [r1, #0]
 8013424:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 8013428:	6011      	str	r1, [r2, #0]
 801342a:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 801342e:	801a      	strh	r2, [r3, #0]
 8013430:	887b      	ldrh	r3, [r7, #2]
 8013432:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 8013436:	3301      	adds	r3, #1
 8013438:	f003 0301 	and.w	r3, r3, #1
 801343c:	807b      	strh	r3, [r7, #2]
 801343e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013440:	2000      	movs	r0, #0
 8013442:	e7fc      	b.n	801343e <udp_recv2+0x42>
 8013444:	20016c08 	andcs	r6, r1, r8, lsl #24

08013448 <udp_send>:
 8013448:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801344c:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8013580 <udp_send+0x138>
 8013450:	461c      	mov	r4, r3
 8013452:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 8013456:	4607      	mov	r7, r0
 8013458:	4688      	mov	r8, r1
 801345a:	4616      	mov	r6, r2
 801345c:	2b00      	cmp	r3, #0
 801345e:	f000 808b 	beq.w	8013578 <udp_send+0x130>
 8013462:	1c63      	adds	r3, r4, #1
 8013464:	d141      	bne.n	80134ea <udp_send+0xa2>
 8013466:	4a47      	ldr	r2, [pc, #284]	; (8013584 <udp_send+0x13c>)
 8013468:	2307      	movs	r3, #7
 801346a:	4611      	mov	r1, r2
 801346c:	20ff      	movs	r0, #255	; 0xff
 801346e:	e001      	b.n	8013474 <udp_send+0x2c>
 8013470:	f802 0b01 	strb.w	r0, [r2], #1
 8013474:	3b01      	subs	r3, #1
 8013476:	d1fb      	bne.n	8013470 <udp_send+0x28>
 8013478:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801347c:	83cb      	strh	r3, [r1, #30]
 801347e:	840b      	strh	r3, [r1, #32]
 8013480:	2500      	movs	r5, #0
 8013482:	f8df a104 	ldr.w	sl, [pc, #260]	; 8013588 <udp_send+0x140>
 8013486:	4c3f      	ldr	r4, [pc, #252]	; (8013584 <udp_send+0x13c>)
 8013488:	f8ba 3000 	ldrh.w	r3, [sl]
 801348c:	2114      	movs	r1, #20
 801348e:	8263      	strh	r3, [r4, #18]
 8013490:	f106 031c 	add.w	r3, r6, #28
 8013494:	ba5b      	rev16	r3, r3
 8013496:	f104 000e 	add.w	r0, r4, #14
 801349a:	8223      	strh	r3, [r4, #16]
 801349c:	8325      	strh	r5, [r4, #24]
 801349e:	f001 fd54 	bl	8014f4a <net_chksum>
 80134a2:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 80134a6:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 80134aa:	ba5b      	rev16	r3, r3
 80134ac:	8463      	strh	r3, [r4, #34]	; 0x22
 80134ae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80134b2:	4632      	mov	r2, r6
 80134b4:	ba5b      	rev16	r3, r3
 80134b6:	84a3      	strh	r3, [r4, #36]	; 0x24
 80134b8:	f106 0308 	add.w	r3, r6, #8
 80134bc:	ba5b      	rev16	r3, r3
 80134be:	bf28      	it	cs
 80134c0:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 80134c4:	4641      	mov	r1, r8
 80134c6:	8320      	strh	r0, [r4, #24]
 80134c8:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 80134cc:	84e3      	strh	r3, [r4, #38]	; 0x26
 80134ce:	f7ff fee7 	bl	80132a0 <net_memcpy>
 80134d2:	4620      	mov	r0, r4
 80134d4:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 80134d8:	f004 fa0c 	bl	80178f4 <emac_eth_send>
 80134dc:	f8ba 3000 	ldrh.w	r3, [sl]
 80134e0:	4628      	mov	r0, r5
 80134e2:	3301      	adds	r3, #1
 80134e4:	f8aa 3000 	strh.w	r3, [sl]
 80134e8:	e037      	b.n	801355a <udp_send+0x112>
 80134ea:	4b28      	ldr	r3, [pc, #160]	; (801358c <udp_send+0x144>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	43a3      	bics	r3, r4
 80134f0:	d10f      	bne.n	8013512 <udp_send+0xca>
 80134f2:	2307      	movs	r3, #7
 80134f4:	21ff      	movs	r1, #255	; 0xff
 80134f6:	4a23      	ldr	r2, [pc, #140]	; (8013584 <udp_send+0x13c>)
 80134f8:	e001      	b.n	80134fe <udp_send+0xb6>
 80134fa:	f802 1b01 	strb.w	r1, [r2], #1
 80134fe:	3b01      	subs	r3, #1
 8013500:	d1fb      	bne.n	80134fa <udp_send+0xb2>
 8013502:	2204      	movs	r2, #4
 8013504:	4822      	ldr	r0, [pc, #136]	; (8013590 <udp_send+0x148>)
 8013506:	eb0d 0102 	add.w	r1, sp, r2
 801350a:	9401      	str	r4, [sp, #4]
 801350c:	f7ff febe 	bl	801328c <memcpy.isra.0>
 8013510:	e7b6      	b.n	8013480 <udp_send+0x38>
 8013512:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 8013516:	2be0      	cmp	r3, #224	; 0xe0
 8013518:	d10e      	bne.n	8013538 <udp_send+0xf0>
 801351a:	491e      	ldr	r1, [pc, #120]	; (8013594 <udp_send+0x14c>)
 801351c:	f3c4 2306 	ubfx	r3, r4, #8, #7
 8013520:	70cb      	strb	r3, [r1, #3]
 8013522:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8013526:	710b      	strb	r3, [r1, #4]
 8013528:	f3c4 6307 	ubfx	r3, r4, #24, #8
 801352c:	2206      	movs	r2, #6
 801352e:	4815      	ldr	r0, [pc, #84]	; (8013584 <udp_send+0x13c>)
 8013530:	714b      	strb	r3, [r1, #5]
 8013532:	f7ff feab 	bl	801328c <memcpy.isra.0>
 8013536:	e7e4      	b.n	8013502 <udp_send+0xba>
 8013538:	4b17      	ldr	r3, [pc, #92]	; (8013598 <udp_send+0x150>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	43a3      	bics	r3, r4
 801353e:	d00f      	beq.n	8013560 <udp_send+0x118>
 8013540:	4d16      	ldr	r5, [pc, #88]	; (801359c <udp_send+0x154>)
 8013542:	4910      	ldr	r1, [pc, #64]	; (8013584 <udp_send+0x13c>)
 8013544:	6828      	ldr	r0, [r5, #0]
 8013546:	f001 f9cb 	bl	80148e0 <arp_cache_lookup>
 801354a:	682b      	ldr	r3, [r5, #0]
 801354c:	4298      	cmp	r0, r3
 801354e:	d0d8      	beq.n	8013502 <udp_send+0xba>
 8013550:	4813      	ldr	r0, [pc, #76]	; (80135a0 <udp_send+0x158>)
 8013552:	f002 ff09 	bl	8016368 <console_error>
 8013556:	f06f 0002 	mvn.w	r0, #2
 801355a:	b002      	add	sp, #8
 801355c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013560:	4620      	mov	r0, r4
 8013562:	4908      	ldr	r1, [pc, #32]	; (8013584 <udp_send+0x13c>)
 8013564:	f001 f9bc 	bl	80148e0 <arp_cache_lookup>
 8013568:	42a0      	cmp	r0, r4
 801356a:	d0ca      	beq.n	8013502 <udp_send+0xba>
 801356c:	480d      	ldr	r0, [pc, #52]	; (80135a4 <udp_send+0x15c>)
 801356e:	f002 fefb 	bl	8016368 <console_error>
 8013572:	f06f 0001 	mvn.w	r0, #1
 8013576:	e7f0      	b.n	801355a <udp_send+0x112>
 8013578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801357c:	e7ed      	b.n	801355a <udp_send+0x112>
 801357e:	bf00      	nop
 8013580:	20016be8 	andcs	r6, r1, r8, ror #23
 8013584:	2001c8a8 	andcs	ip, r1, r8, lsr #17
 8013588:	20016be4 	andcs	r6, r1, r4, ror #23
 801358c:	20016bd8 	ldrdcs	r6, [r1], -r8
 8013590:	2001c8c6 	andcs	ip, r1, r6, asr #17
 8013594:	20000004 	andcs	r0, r0, r4
 8013598:	20016be0 	andcs	r6, r1, r0, ror #23
 801359c:	20016bdc 	ldrdcs	r6, [r1], -ip
 80135a0:	0801b593 	stmdaeq	r1, {r0, r1, r4, r7, r8, sl, ip, sp, pc}
 80135a4:	0801b5b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, sl, ip, sp, pc}

080135a8 <strlen>:
 80135a8:	4603      	mov	r3, r0
 80135aa:	461a      	mov	r2, r3
 80135ac:	7811      	ldrb	r1, [r2, #0]
 80135ae:	3301      	adds	r3, #1
 80135b0:	2900      	cmp	r1, #0
 80135b2:	d1fa      	bne.n	80135aa <strlen+0x2>
 80135b4:	1a10      	subs	r0, r2, r0
 80135b6:	4770      	bx	lr

080135b8 <strcmp>:
 80135b8:	1e43      	subs	r3, r0, #1
 80135ba:	3901      	subs	r1, #1
 80135bc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80135c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80135c4:	4290      	cmp	r0, r2
 80135c6:	d001      	beq.n	80135cc <strcmp+0x14>
 80135c8:	1a80      	subs	r0, r0, r2
 80135ca:	e001      	b.n	80135d0 <strcmp+0x18>
 80135cc:	2800      	cmp	r0, #0
 80135ce:	d1f5      	bne.n	80135bc <strcmp+0x4>
 80135d0:	4770      	bx	lr

080135d2 <strcpy.isra.0>:
 80135d2:	3801      	subs	r0, #1
 80135d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80135d8:	f800 3f01 	strb.w	r3, [r0, #1]!
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d1f9      	bne.n	80135d4 <strcpy.isra.0+0x2>
 80135e0:	4770      	bx	lr

080135e2 <strcat.isra.0>:
 80135e2:	b538      	push	{r3, r4, r5, lr}
 80135e4:	4604      	mov	r4, r0
 80135e6:	460d      	mov	r5, r1
 80135e8:	f7ff ffde 	bl	80135a8 <strlen>
 80135ec:	4629      	mov	r1, r5
 80135ee:	4420      	add	r0, r4
 80135f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80135f4:	f7ff bfed 	b.w	80135d2 <strcpy.isra.0>

080135f8 <MDNS::MDNS()>:
 80135f8:	b513      	push	{r0, r1, r4, lr}
 80135fa:	4604      	mov	r4, r0
 80135fc:	a901      	add	r1, sp, #4
 80135fe:	4804      	ldr	r0, [pc, #16]	; (8013610 <MDNS::MDNS()+0x18>)
 8013600:	f003 f82a 	bl	8016658 <inet_aton>
 8013604:	4620      	mov	r0, r4
 8013606:	4b03      	ldr	r3, [pc, #12]	; (8013614 <MDNS::MDNS()+0x1c>)
 8013608:	9a01      	ldr	r2, [sp, #4]
 801360a:	601a      	str	r2, [r3, #0]
 801360c:	b002      	add	sp, #8
 801360e:	bd10      	pop	{r4, pc}
 8013610:	0801b5ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r8, sl, ip, sp, pc}
 8013614:	2001ce9c 	mulcs	r1, ip, lr

08013618 <MDNS::SetName(char const*)>:
 8013618:	b538      	push	{r3, r4, r5, lr}
 801361a:	4d0b      	ldr	r5, [pc, #44]	; (8013648 <MDNS::SetName(char const*)+0x30>)
 801361c:	460c      	mov	r4, r1
 801361e:	6828      	ldr	r0, [r5, #0]
 8013620:	b108      	cbz	r0, 8013626 <MDNS::SetName(char const*)+0xe>
 8013622:	f003 f813 	bl	801664c <operator delete[](void*)>
 8013626:	4620      	mov	r0, r4
 8013628:	f7ff ffbe 	bl	80135a8 <strlen>
 801362c:	3007      	adds	r0, #7
 801362e:	f003 f811 	bl	8016654 <operator new[](unsigned int)>
 8013632:	4621      	mov	r1, r4
 8013634:	6028      	str	r0, [r5, #0]
 8013636:	f7ff ffcc 	bl	80135d2 <strcpy.isra.0>
 801363a:	6828      	ldr	r0, [r5, #0]
 801363c:	4903      	ldr	r1, [pc, #12]	; (801364c <MDNS::SetName(char const*)+0x34>)
 801363e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013642:	f7ff bfce 	b.w	80135e2 <strcat.isra.0>
 8013646:	bf00      	nop
 8013648:	2001d2cc 	andcs	sp, r1, ip, asr #5
 801364c:	0801b5fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, sl, ip, sp, pc}

08013650 <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 8013650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013654:	f04f 0e00 	mov.w	lr, #0
 8013658:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 801365c:	4675      	mov	r5, lr
 801365e:	4e1b      	ldr	r6, [pc, #108]	; (80136cc <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7c>)
 8013660:	4f1b      	ldr	r7, [pc, #108]	; (80136d0 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x80>)
 8013662:	780b      	ldrb	r3, [r1, #0]
 8013664:	1c68      	adds	r0, r5, #1
 8013666:	b913      	cbnz	r3, 801366e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x1e>
 8013668:	7013      	strb	r3, [r2, #0]
 801366a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801366e:	2b3f      	cmp	r3, #63	; 0x3f
 8013670:	d91c      	bls.n	80136ac <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5c>
 8013672:	7849      	ldrb	r1, [r1, #1]
 8013674:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 8013678:	430b      	orrs	r3, r1
 801367a:	6839      	ldr	r1, [r7, #0]
 801367c:	f1be 0f00 	cmp.w	lr, #0
 8013680:	bf08      	it	eq
 8013682:	4605      	moveq	r5, r0
 8013684:	5ccc      	ldrb	r4, [r1, r3]
 8013686:	3301      	adds	r3, #1
 8013688:	4419      	add	r1, r3
 801368a:	2300      	movs	r3, #0
 801368c:	42a3      	cmp	r3, r4
 801368e:	5cc8      	ldrb	r0, [r1, r3]
 8013690:	d309      	bcc.n	80136a6 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x56>
 8013692:	f04f 0e01 	mov.w	lr, #1
 8013696:	4421      	add	r1, r4
 8013698:	4414      	add	r4, r2
 801369a:	780b      	ldrb	r3, [r1, #0]
 801369c:	b10b      	cbz	r3, 80136a2 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x52>
 801369e:	f804 cb01 	strb.w	ip, [r4], #1
 80136a2:	4622      	mov	r2, r4
 80136a4:	e7dd      	b.n	8013662 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 80136a6:	54d0      	strb	r0, [r2, r3]
 80136a8:	3301      	adds	r3, #1
 80136aa:	e7ef      	b.n	801368c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x3c>
 80136ac:	4688      	mov	r8, r1
 80136ae:	18d4      	adds	r4, r2, r3
 80136b0:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 80136b4:	f802 9b01 	strb.w	r9, [r2], #1
 80136b8:	4294      	cmp	r4, r2
 80136ba:	d1f9      	bne.n	80136b0 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x60>
 80136bc:	1c5a      	adds	r2, r3, #1
 80136be:	4411      	add	r1, r2
 80136c0:	f1be 0f00 	cmp.w	lr, #0
 80136c4:	d1e9      	bne.n	801369a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 80136c6:	181d      	adds	r5, r3, r0
 80136c8:	e7e7      	b.n	801369a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 80136ca:	bf00      	nop
 80136cc:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 80136d0:	2001d2d0 	ldrdcs	sp, [r1], -r0

080136d4 <MDNS::FindFirstDotFromRight(char const*) const>:
 80136d4:	b510      	push	{r4, lr}
 80136d6:	4608      	mov	r0, r1
 80136d8:	460c      	mov	r4, r1
 80136da:	f7ff ff65 	bl	80135a8 <strlen>
 80136de:	4420      	add	r0, r4
 80136e0:	42a0      	cmp	r0, r4
 80136e2:	d903      	bls.n	80136ec <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 80136e4:	f810 3901 	ldrb.w	r3, [r0], #-1
 80136e8:	2b2e      	cmp	r3, #46	; 0x2e
 80136ea:	d1f9      	bne.n	80136e0 <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 80136ec:	3001      	adds	r0, #1
 80136ee:	bd10      	pop	{r4, pc}

080136f0 <MDNS::WriteDnsName(char const*, char*, bool)>:
 80136f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136f2:	4614      	mov	r4, r2
 80136f4:	460f      	mov	r7, r1
 80136f6:	1c60      	adds	r0, r4, #1
 80136f8:	463d      	mov	r5, r7
 80136fa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80136fe:	b946      	cbnz	r6, 8013712 <MDNS::WriteDnsName(char const*, char*, bool)+0x22>
 8013700:	1a69      	subs	r1, r5, r1
 8013702:	7021      	strb	r1, [r4, #0]
 8013704:	7829      	ldrb	r1, [r5, #0]
 8013706:	b949      	cbnz	r1, 801371c <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 8013708:	b10b      	cbz	r3, 801370e <MDNS::WriteDnsName(char const*, char*, bool)+0x1e>
 801370a:	f800 1b01 	strb.w	r1, [r0], #1
 801370e:	1a80      	subs	r0, r0, r2
 8013710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013712:	2e2e      	cmp	r6, #46	; 0x2e
 8013714:	d0f4      	beq.n	8013700 <MDNS::WriteDnsName(char const*, char*, bool)+0x10>
 8013716:	f800 6b01 	strb.w	r6, [r0], #1
 801371a:	e7ed      	b.n	80136f8 <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 801371c:	4604      	mov	r4, r0
 801371e:	1c69      	adds	r1, r5, #1
 8013720:	e7e8      	b.n	80136f4 <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

08013724 <MDNS::CreateAnswerLocalIpAddress()>:
 8013724:	2384      	movs	r3, #132	; 0x84
 8013726:	b510      	push	{r4, lr}
 8013728:	4c0f      	ldr	r4, [pc, #60]	; (8013768 <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 801372a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801372e:	80e3      	strh	r3, [r4, #6]
 8013730:	2300      	movs	r3, #0
 8013732:	490e      	ldr	r1, [pc, #56]	; (801376c <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 8013734:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8013738:	6809      	ldr	r1, [r1, #0]
 801373a:	f104 0210 	add.w	r2, r4, #16
 801373e:	2301      	movs	r3, #1
 8013740:	f7ff ffd6 	bl	80136f0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8013744:	490a      	ldr	r1, [pc, #40]	; (8013770 <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 8013746:	1813      	adds	r3, r2, r0
 8013748:	5011      	str	r1, [r2, r0]
 801374a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 801374e:	605a      	str	r2, [r3, #4]
 8013750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013754:	811a      	strh	r2, [r3, #8]
 8013756:	4a07      	ldr	r2, [pc, #28]	; (8013774 <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 8013758:	6812      	ldr	r2, [r2, #0]
 801375a:	6952      	ldr	r2, [r2, #20]
 801375c:	f8c3 200a 	str.w	r2, [r3, #10]
 8013760:	1b1b      	subs	r3, r3, r4
 8013762:	330a      	adds	r3, #10
 8013764:	6023      	str	r3, [r4, #0]
 8013766:	bd10      	pop	{r4, pc}
 8013768:	2001cea0 	andcs	ip, r1, r0, lsr #29
 801376c:	2001d2cc 	andcs	sp, r1, ip, asr #5
 8013770:	01800100 	orreq	r0, r0, r0, lsl #2
 8013774:	2001d2d4 	ldrdcs	sp, [r1], -r4

08013778 <MDNS::Start()>:
 8013778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801377a:	4c1d      	ldr	r4, [pc, #116]	; (80137f0 <MDNS::Start()+0x78>)
 801377c:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8013780:	4605      	mov	r5, r0
 8013782:	6820      	ldr	r0, [r4, #0]
 8013784:	f000 fb28 	bl	8013dd8 <Network::Begin(unsigned short)>
 8013788:	4e1a      	ldr	r6, [pc, #104]	; (80137f4 <MDNS::Start()+0x7c>)
 801378a:	4f1b      	ldr	r7, [pc, #108]	; (80137f8 <MDNS::Start()+0x80>)
 801378c:	4601      	mov	r1, r0
 801378e:	6030      	str	r0, [r6, #0]
 8013790:	683a      	ldr	r2, [r7, #0]
 8013792:	6820      	ldr	r0, [r4, #0]
 8013794:	f000 fb31 	bl	8013dfa <Network::JoinGroup(int, unsigned int)>
 8013798:	4b18      	ldr	r3, [pc, #96]	; (80137fc <MDNS::Start()+0x84>)
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	b923      	cbnz	r3, 80137a8 <MDNS::Start()+0x30>
 801379e:	6821      	ldr	r1, [r4, #0]
 80137a0:	4628      	mov	r0, r5
 80137a2:	3120      	adds	r1, #32
 80137a4:	f7ff ff38 	bl	8013618 <MDNS::SetName(char const*)>
 80137a8:	4628      	mov	r0, r5
 80137aa:	f7ff ffbb 	bl	8013724 <MDNS::CreateAnswerLocalIpAddress()>
 80137ae:	f241 43e9 	movw	r3, #5353	; 0x14e9
 80137b2:	4913      	ldr	r1, [pc, #76]	; (8013800 <MDNS::Start()+0x88>)
 80137b4:	7830      	ldrb	r0, [r6, #0]
 80137b6:	f831 2b04 	ldrh.w	r2, [r1], #4
 80137ba:	9300      	str	r3, [sp, #0]
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	f7ff fe43 	bl	8013448 <udp_send>
 80137c2:	233f      	movs	r3, #63	; 0x3f
 80137c4:	6820      	ldr	r0, [r4, #0]
 80137c6:	4c0f      	ldr	r4, [pc, #60]	; (8013804 <MDNS::Start()+0x8c>)
 80137c8:	f100 0260 	add.w	r2, r0, #96	; 0x60
 80137cc:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80137d0:	b929      	cbnz	r1, 80137de <MDNS::Start()+0x66>
 80137d2:	4413      	add	r3, r2
 80137d4:	429a      	cmp	r2, r3
 80137d6:	d006      	beq.n	80137e6 <MDNS::Start()+0x6e>
 80137d8:	f802 1b01 	strb.w	r1, [r2], #1
 80137dc:	e7fa      	b.n	80137d4 <MDNS::Start()+0x5c>
 80137de:	3b01      	subs	r3, #1
 80137e0:	f802 1b01 	strb.w	r1, [r2], #1
 80137e4:	d1f2      	bne.n	80137cc <MDNS::Start()+0x54>
 80137e6:	2300      	movs	r3, #0
 80137e8:	f880 309f 	strb.w	r3, [r0, #159]	; 0x9f
 80137ec:	b003      	add	sp, #12
 80137ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137f0:	2001d2d4 	ldrdcs	sp, [r1], -r4
 80137f4:	2000000c 	andcs	r0, r0, ip
 80137f8:	2001ce9c 	mulcs	r1, ip, lr
 80137fc:	2001d2cc 	andcs	sp, r1, ip, asr #5
 8013800:	2001cea0 	andcs	ip, r1, r0, lsr #29
 8013804:	0801b5fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, sl, ip, sp, pc}

08013808 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 8013808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801380c:	4c1b      	ldr	r4, [pc, #108]	; (801387c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 801380e:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8013812:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 8013816:	2300      	movs	r3, #0
 8013818:	f854 100c 	ldr.w	r1, [r4, ip]
 801381c:	4607      	mov	r7, r0
 801381e:	f7ff ff67 	bl	80136f0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8013822:	2301      	movs	r3, #1
 8013824:	7bac      	ldrb	r4, [r5, #14]
 8013826:	4616      	mov	r6, r2
 8013828:	4915      	ldr	r1, [pc, #84]	; (8013880 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 801382a:	4402      	add	r2, r0
 801382c:	4815      	ldr	r0, [pc, #84]	; (8013884 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 801382e:	429c      	cmp	r4, r3
 8013830:	bf18      	it	ne
 8013832:	4601      	movne	r1, r0
 8013834:	4638      	mov	r0, r7
 8013836:	f7ff ff5b 	bl	80136f0 <MDNS::WriteDnsName(char const*, char*, bool)>
 801383a:	4b13      	ldr	r3, [pc, #76]	; (8013888 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 801383c:	1814      	adds	r4, r2, r0
 801383e:	5013      	str	r3, [r2, r0]
 8013840:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8013844:	6063      	str	r3, [r4, #4]
 8013846:	4b11      	ldr	r3, [pc, #68]	; (801388c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 8013848:	f8d3 8000 	ldr.w	r8, [r3]
 801384c:	4640      	mov	r0, r8
 801384e:	f7ff feab 	bl	80135a8 <strlen>
 8013852:	f100 0308 	add.w	r3, r0, #8
 8013856:	ba5b      	rev16	r3, r3
 8013858:	8123      	strh	r3, [r4, #8]
 801385a:	2300      	movs	r3, #0
 801385c:	f8c4 300a 	str.w	r3, [r4, #10]
 8013860:	89ab      	ldrh	r3, [r5, #12]
 8013862:	f104 0210 	add.w	r2, r4, #16
 8013866:	ba5b      	rev16	r3, r3
 8013868:	81e3      	strh	r3, [r4, #14]
 801386a:	4641      	mov	r1, r8
 801386c:	2301      	movs	r3, #1
 801386e:	4638      	mov	r0, r7
 8013870:	f7ff ff3e 	bl	80136f0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8013874:	4410      	add	r0, r2
 8013876:	1b80      	subs	r0, r0, r6
 8013878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801387c:	2001d0a4 	andcs	sp, r1, r4, lsr #1
 8013880:	0801b5f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, sl, ip, sp, pc}
 8013884:	0801b613 	stmdaeq	r1, {r0, r1, r4, r9, sl, ip, sp, pc}
 8013888:	01802100 	orreq	r2, r0, r0, lsl #2
 801388c:	2001d2cc 	andcs	sp, r1, ip, asr #5

08013890 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 8013890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013894:	4e19      	ldr	r6, [pc, #100]	; (80138fc <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 8013896:	010f      	lsls	r7, r1, #4
 8013898:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 801389c:	2300      	movs	r3, #0
 801389e:	59f1      	ldr	r1, [r6, r7]
 80138a0:	4604      	mov	r4, r0
 80138a2:	f7ff ff25 	bl	80136f0 <MDNS::WriteDnsName(char const*, char*, bool)>
 80138a6:	2301      	movs	r3, #1
 80138a8:	7bae      	ldrb	r6, [r5, #14]
 80138aa:	4690      	mov	r8, r2
 80138ac:	4914      	ldr	r1, [pc, #80]	; (8013900 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 80138ae:	4402      	add	r2, r0
 80138b0:	4814      	ldr	r0, [pc, #80]	; (8013904 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 80138b2:	429e      	cmp	r6, r3
 80138b4:	bf18      	it	ne
 80138b6:	4601      	movne	r1, r0
 80138b8:	4620      	mov	r0, r4
 80138ba:	f7ff ff19 	bl	80136f0 <MDNS::WriteDnsName(char const*, char*, bool)>
 80138be:	4b12      	ldr	r3, [pc, #72]	; (8013908 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 80138c0:	1816      	adds	r6, r2, r0
 80138c2:	5013      	str	r3, [r2, r0]
 80138c4:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80138c8:	68a8      	ldr	r0, [r5, #8]
 80138ca:	6073      	str	r3, [r6, #4]
 80138cc:	f106 040b 	add.w	r4, r6, #11
 80138d0:	b938      	cbnz	r0, 80138e2 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 80138d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80138d6:	72b0      	strb	r0, [r6, #10]
 80138d8:	8133      	strh	r3, [r6, #8]
 80138da:	eba4 0008 	sub.w	r0, r4, r8
 80138de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138e2:	f7ff fe61 	bl	80135a8 <strlen>
 80138e6:	4607      	mov	r7, r0
 80138e8:	1c43      	adds	r3, r0, #1
 80138ea:	72b0      	strb	r0, [r6, #10]
 80138ec:	ba5b      	rev16	r3, r3
 80138ee:	4620      	mov	r0, r4
 80138f0:	68a9      	ldr	r1, [r5, #8]
 80138f2:	8133      	strh	r3, [r6, #8]
 80138f4:	f7ff fe6d 	bl	80135d2 <strcpy.isra.0>
 80138f8:	443c      	add	r4, r7
 80138fa:	e7ee      	b.n	80138da <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 80138fc:	2001d0a4 	andcs	sp, r1, r4, lsr #1
 8013900:	0801b5f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, sl, ip, sp, pc}
 8013904:	0801b613 	stmdaeq	r1, {r0, r1, r4, r9, sl, ip, sp, pc}
 8013908:	01801000 	orreq	r1, r0, r0

0801390c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 801390c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013910:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8013974 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x68>
 8013914:	ea4f 1901 	mov.w	r9, r1, lsl #4
 8013918:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 801391c:	6869      	ldr	r1, [r5, #4]
 801391e:	2301      	movs	r3, #1
 8013920:	4607      	mov	r7, r0
 8013922:	f7ff fee5 	bl	80136f0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8013926:	4b14      	ldr	r3, [pc, #80]	; (8013978 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 8013928:	f858 8009 	ldr.w	r8, [r8, r9]
 801392c:	5013      	str	r3, [r2, r0]
 801392e:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8013932:	1816      	adds	r6, r2, r0
 8013934:	6073      	str	r3, [r6, #4]
 8013936:	4640      	mov	r0, r8
 8013938:	4614      	mov	r4, r2
 801393a:	f7ff fe35 	bl	80135a8 <strlen>
 801393e:	f100 030d 	add.w	r3, r0, #13
 8013942:	ba5b      	rev16	r3, r3
 8013944:	4641      	mov	r1, r8
 8013946:	8133      	strh	r3, [r6, #8]
 8013948:	f106 020a 	add.w	r2, r6, #10
 801394c:	2300      	movs	r3, #0
 801394e:	4638      	mov	r0, r7
 8013950:	f7ff fece 	bl	80136f0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8013954:	2301      	movs	r3, #1
 8013956:	4402      	add	r2, r0
 8013958:	7bad      	ldrb	r5, [r5, #14]
 801395a:	4808      	ldr	r0, [pc, #32]	; (801397c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 801395c:	4908      	ldr	r1, [pc, #32]	; (8013980 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 801395e:	429d      	cmp	r5, r3
 8013960:	bf18      	it	ne
 8013962:	4601      	movne	r1, r0
 8013964:	4638      	mov	r0, r7
 8013966:	f7ff fec3 	bl	80136f0 <MDNS::WriteDnsName(char const*, char*, bool)>
 801396a:	4410      	add	r0, r2
 801396c:	1b00      	subs	r0, r0, r4
 801396e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013972:	bf00      	nop
 8013974:	2001d0a4 	andcs	sp, r1, r4, lsr #1
 8013978:	01000c00 	tsteq	r0, r0, lsl #24
 801397c:	0801b613 	stmdaeq	r1, {r0, r1, r4, r9, sl, ip, sp, pc}
 8013980:	0801b5f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, sl, ip, sp, pc}

08013984 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 8013984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013986:	460f      	mov	r7, r1
 8013988:	2301      	movs	r3, #1
 801398a:	490f      	ldr	r1, [pc, #60]	; (80139c8 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x44>)
 801398c:	4606      	mov	r6, r0
 801398e:	f7ff feaf 	bl	80136f0 <MDNS::WriteDnsName(char const*, char*, bool)>
 8013992:	4b0e      	ldr	r3, [pc, #56]	; (80139cc <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 8013994:	490e      	ldr	r1, [pc, #56]	; (80139d0 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 8013996:	5013      	str	r3, [r2, r0]
 8013998:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 801399c:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 80139a0:	684f      	ldr	r7, [r1, #4]
 80139a2:	1815      	adds	r5, r2, r0
 80139a4:	606b      	str	r3, [r5, #4]
 80139a6:	4638      	mov	r0, r7
 80139a8:	4614      	mov	r4, r2
 80139aa:	f7ff fdfd 	bl	80135a8 <strlen>
 80139ae:	1c83      	adds	r3, r0, #2
 80139b0:	ba5b      	rev16	r3, r3
 80139b2:	812b      	strh	r3, [r5, #8]
 80139b4:	f105 020a 	add.w	r2, r5, #10
 80139b8:	2301      	movs	r3, #1
 80139ba:	4639      	mov	r1, r7
 80139bc:	4630      	mov	r0, r6
 80139be:	f7ff fe97 	bl	80136f0 <MDNS::WriteDnsName(char const*, char*, bool)>
 80139c2:	4410      	add	r0, r2
 80139c4:	1b00      	subs	r0, r0, r4
 80139c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139c8:	0801b601 	stmdaeq	r1, {r0, r9, sl, ip, sp, pc}
 80139cc:	01000c00 	tsteq	r0, r0, lsl #24
 80139d0:	2001d0a4 	andcs	sp, r1, r4, lsr #1

080139d4 <MDNS::CreateMDNSMessage(unsigned int)>:
 80139d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139d6:	2384      	movs	r3, #132	; 0x84
 80139d8:	4d19      	ldr	r5, [pc, #100]	; (8013a40 <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 80139da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80139de:	80eb      	strh	r3, [r5, #6]
 80139e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80139e4:	f105 0410 	add.w	r4, r5, #16
 80139e8:	e9c5 2302 	strd	r2, r3, [r5, #8]
 80139ec:	4622      	mov	r2, r4
 80139ee:	4606      	mov	r6, r0
 80139f0:	460f      	mov	r7, r1
 80139f2:	f7ff ff09 	bl	8013808 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 80139f6:	4404      	add	r4, r0
 80139f8:	4622      	mov	r2, r4
 80139fa:	4639      	mov	r1, r7
 80139fc:	4630      	mov	r0, r6
 80139fe:	f7ff ff47 	bl	8013890 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 8013a02:	4404      	add	r4, r0
 8013a04:	4622      	mov	r2, r4
 8013a06:	4639      	mov	r1, r7
 8013a08:	4630      	mov	r0, r6
 8013a0a:	f7ff ffbb 	bl	8013984 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 8013a0e:	4404      	add	r4, r0
 8013a10:	4622      	mov	r2, r4
 8013a12:	4639      	mov	r1, r7
 8013a14:	4630      	mov	r0, r6
 8013a16:	f7ff ff79 	bl	801390c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 8013a1a:	4a0a      	ldr	r2, [pc, #40]	; (8013a44 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 8013a1c:	4404      	add	r4, r0
 8013a1e:	f852 3b10 	ldr.w	r3, [r2], #16
 8013a22:	1e60      	subs	r0, r4, #1
 8013a24:	3b0c      	subs	r3, #12
 8013a26:	4619      	mov	r1, r3
 8013a28:	3901      	subs	r1, #1
 8013a2a:	d204      	bcs.n	8013a36 <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 8013a2c:	441c      	add	r4, r3
 8013a2e:	4b06      	ldr	r3, [pc, #24]	; (8013a48 <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 8013a30:	1ae4      	subs	r4, r4, r3
 8013a32:	602c      	str	r4, [r5, #0]
 8013a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a36:	f812 6b01 	ldrb.w	r6, [r2], #1
 8013a3a:	f800 6f01 	strb.w	r6, [r0, #1]!
 8013a3e:	e7f3      	b.n	8013a28 <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 8013a40:	2001d0c8 	andcs	sp, r1, r8, asr #1
 8013a44:	2001cea0 	andcs	ip, r1, r0, lsr #29
 8013a48:	2001d0cc 	andcs	sp, r1, ip, asr #1

08013a4c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 8013a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a50:	4d40      	ldr	r5, [pc, #256]	; (8013b54 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>)
 8013a52:	b085      	sub	sp, #20
 8013a54:	682c      	ldr	r4, [r5, #0]
 8013a56:	4680      	mov	r8, r0
 8013a58:	460f      	mov	r7, r1
 8013a5a:	4616      	mov	r6, r2
 8013a5c:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8013a60:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8013a64:	b11c      	cbz	r4, 8013a6e <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22>
 8013a66:	692a      	ldr	r2, [r5, #16]
 8013a68:	2a00      	cmp	r2, #0
 8013a6a:	d16e      	bne.n	8013b4a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfe>
 8013a6c:	2401      	movs	r4, #1
 8013a6e:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8013a72:	ea4f 1904 	mov.w	r9, r4, lsl #4
 8013a76:	8193      	strh	r3, [r2, #12]
 8013a78:	f882 b00e 	strb.w	fp, [r2, #14]
 8013a7c:	2f00      	cmp	r7, #0
 8013a7e:	d154      	bne.n	8013b2a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xde>
 8013a80:	4b35      	ldr	r3, [pc, #212]	; (8013b58 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 8013a82:	6818      	ldr	r0, [r3, #0]
 8013a84:	3020      	adds	r0, #32
 8013a86:	f7ff fd8f 	bl	80135a8 <strlen>
 8013a8a:	4607      	mov	r7, r0
 8013a8c:	4630      	mov	r0, r6
 8013a8e:	f7ff fd8b 	bl	80135a8 <strlen>
 8013a92:	4438      	add	r0, r7
 8013a94:	3001      	adds	r0, #1
 8013a96:	f002 fddd 	bl	8016654 <operator new[](unsigned int)>
 8013a9a:	4b2f      	ldr	r3, [pc, #188]	; (8013b58 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 8013a9c:	f845 0009 	str.w	r0, [r5, r9]
 8013aa0:	6819      	ldr	r1, [r3, #0]
 8013aa2:	3120      	adds	r1, #32
 8013aa4:	f7ff fd95 	bl	80135d2 <strcpy.isra.0>
 8013aa8:	f855 0009 	ldr.w	r0, [r5, r9]
 8013aac:	4631      	mov	r1, r6
 8013aae:	f7ff fd98 	bl	80135e2 <strcat.isra.0>
 8013ab2:	4631      	mov	r1, r6
 8013ab4:	4640      	mov	r0, r8
 8013ab6:	f7ff fe0d 	bl	80136d4 <MDNS::FindFirstDotFromRight(char const*) const>
 8013aba:	eb05 0709 	add.w	r7, r5, r9
 8013abe:	4605      	mov	r5, r0
 8013ac0:	f7ff fd72 	bl	80135a8 <strlen>
 8013ac4:	300d      	adds	r0, #13
 8013ac6:	f002 fdc5 	bl	8016654 <operator new[](unsigned int)>
 8013aca:	4629      	mov	r1, r5
 8013acc:	6078      	str	r0, [r7, #4]
 8013ace:	f7ff fd80 	bl	80135d2 <strcpy.isra.0>
 8013ad2:	4922      	ldr	r1, [pc, #136]	; (8013b5c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 8013ad4:	6878      	ldr	r0, [r7, #4]
 8013ad6:	f7ff fd84 	bl	80135e2 <strcat.isra.0>
 8013ada:	4921      	ldr	r1, [pc, #132]	; (8013b60 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 8013adc:	4b21      	ldr	r3, [pc, #132]	; (8013b64 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 8013ade:	6878      	ldr	r0, [r7, #4]
 8013ae0:	f1bb 0f01 	cmp.w	fp, #1
 8013ae4:	bf18      	it	ne
 8013ae6:	4619      	movne	r1, r3
 8013ae8:	f7ff fd7b 	bl	80135e2 <strcat.isra.0>
 8013aec:	f1ba 0f00 	cmp.w	sl, #0
 8013af0:	d009      	beq.n	8013b06 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xba>
 8013af2:	4650      	mov	r0, sl
 8013af4:	f7ff fd58 	bl	80135a8 <strlen>
 8013af8:	3001      	adds	r0, #1
 8013afa:	f002 fdab 	bl	8016654 <operator new[](unsigned int)>
 8013afe:	4651      	mov	r1, sl
 8013b00:	60b8      	str	r0, [r7, #8]
 8013b02:	f7ff fd66 	bl	80135d2 <strcpy.isra.0>
 8013b06:	4621      	mov	r1, r4
 8013b08:	4640      	mov	r0, r8
 8013b0a:	f7ff ff63 	bl	80139d4 <MDNS::CreateMDNSMessage(unsigned int)>
 8013b0e:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8013b12:	4915      	ldr	r1, [pc, #84]	; (8013b68 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 8013b14:	4815      	ldr	r0, [pc, #84]	; (8013b6c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 8013b16:	f831 2b04 	ldrh.w	r2, [r1], #4
 8013b1a:	9300      	str	r3, [sp, #0]
 8013b1c:	4b14      	ldr	r3, [pc, #80]	; (8013b70 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x124>)
 8013b1e:	7800      	ldrb	r0, [r0, #0]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	f7ff fc91 	bl	8013448 <udp_send>
 8013b26:	2001      	movs	r0, #1
 8013b28:	e010      	b.n	8013b4c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x100>
 8013b2a:	4638      	mov	r0, r7
 8013b2c:	f7ff fd3c 	bl	80135a8 <strlen>
 8013b30:	9003      	str	r0, [sp, #12]
 8013b32:	4630      	mov	r0, r6
 8013b34:	f7ff fd38 	bl	80135a8 <strlen>
 8013b38:	9b03      	ldr	r3, [sp, #12]
 8013b3a:	4418      	add	r0, r3
 8013b3c:	3001      	adds	r0, #1
 8013b3e:	f002 fd89 	bl	8016654 <operator new[](unsigned int)>
 8013b42:	4639      	mov	r1, r7
 8013b44:	f845 0009 	str.w	r0, [r5, r9]
 8013b48:	e7ac      	b.n	8013aa4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x58>
 8013b4a:	2000      	movs	r0, #0
 8013b4c:	b005      	add	sp, #20
 8013b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b52:	bf00      	nop
 8013b54:	2001d0a4 	andcs	sp, r1, r4, lsr #1
 8013b58:	2001d2d4 	ldrdcs	sp, [r1], -r4
 8013b5c:	080191b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, ip, pc}
 8013b60:	0801b5f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, sl, ip, sp, pc}
 8013b64:	0801b613 	stmdaeq	r1, {r0, r1, r4, r9, sl, ip, sp, pc}
 8013b68:	2001d0c8 	andcs	sp, r1, r8, asr #1
 8013b6c:	2000000c 	andcs	r0, r0, ip
 8013b70:	2001ce9c 	mulcs	r1, ip, lr

08013b74 <MDNS::HandleRequest(unsigned short)>:
 8013b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b78:	4605      	mov	r5, r0
 8013b7a:	2700      	movs	r7, #0
 8013b7c:	f04f 080c 	mov.w	r8, #12
 8013b80:	b0c5      	sub	sp, #276	; 0x114
 8013b82:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8013c44 <MDNS::HandleRequest(unsigned short)+0xd0>
 8013b86:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8013c48 <MDNS::HandleRequest(unsigned short)+0xd4>
 8013b8a:	9103      	str	r1, [sp, #12]
 8013b8c:	9b03      	ldr	r3, [sp, #12]
 8013b8e:	42bb      	cmp	r3, r7
 8013b90:	d802      	bhi.n	8013b98 <MDNS::HandleRequest(unsigned short)+0x24>
 8013b92:	b045      	add	sp, #276	; 0x114
 8013b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b98:	f8da 1000 	ldr.w	r1, [sl]
 8013b9c:	aa04      	add	r2, sp, #16
 8013b9e:	4441      	add	r1, r8
 8013ba0:	4628      	mov	r0, r5
 8013ba2:	f7ff fd55 	bl	8013650 <MDNS::DecodeDNSNameNotation(char const*, char*)>
 8013ba6:	f8da 2000 	ldr.w	r2, [sl]
 8013baa:	4440      	add	r0, r8
 8013bac:	1813      	adds	r3, r2, r0
 8013bae:	885b      	ldrh	r3, [r3, #2]
 8013bb0:	f100 0804 	add.w	r8, r0, #4
 8013bb4:	ba5b      	rev16	r3, r3
 8013bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013bba:	2b01      	cmp	r3, #1
 8013bbc:	d13d      	bne.n	8013c3a <MDNS::HandleRequest(unsigned short)+0xc6>
 8013bbe:	5a14      	ldrh	r4, [r2, r0]
 8013bc0:	4b22      	ldr	r3, [pc, #136]	; (8013c4c <MDNS::HandleRequest(unsigned short)+0xd8>)
 8013bc2:	ba64      	rev16	r4, r4
 8013bc4:	6818      	ldr	r0, [r3, #0]
 8013bc6:	a904      	add	r1, sp, #16
 8013bc8:	b2a4      	uxth	r4, r4
 8013bca:	f7ff fcf5 	bl	80135b8 <strcmp>
 8013bce:	b968      	cbnz	r0, 8013bec <MDNS::HandleRequest(unsigned short)+0x78>
 8013bd0:	2c01      	cmp	r4, #1
 8013bd2:	d10b      	bne.n	8013bec <MDNS::HandleRequest(unsigned short)+0x78>
 8013bd4:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8013bd8:	491d      	ldr	r1, [pc, #116]	; (8013c50 <MDNS::HandleRequest(unsigned short)+0xdc>)
 8013bda:	481e      	ldr	r0, [pc, #120]	; (8013c54 <MDNS::HandleRequest(unsigned short)+0xe0>)
 8013bdc:	f831 2b04 	ldrh.w	r2, [r1], #4
 8013be0:	9300      	str	r3, [sp, #0]
 8013be2:	4b1d      	ldr	r3, [pc, #116]	; (8013c58 <MDNS::HandleRequest(unsigned short)+0xe4>)
 8013be4:	7800      	ldrb	r0, [r0, #0]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	f7ff fc2e 	bl	8013448 <udp_send>
 8013bec:	481b      	ldr	r0, [pc, #108]	; (8013c5c <MDNS::HandleRequest(unsigned short)+0xe8>)
 8013bee:	a904      	add	r1, sp, #16
 8013bf0:	f7ff fce2 	bl	80135b8 <strcmp>
 8013bf4:	f04f 0900 	mov.w	r9, #0
 8013bf8:	4e19      	ldr	r6, [pc, #100]	; (8013c60 <MDNS::HandleRequest(unsigned short)+0xec>)
 8013bfa:	9002      	str	r0, [sp, #8]
 8013bfc:	6833      	ldr	r3, [r6, #0]
 8013bfe:	b1c3      	cbz	r3, 8013c32 <MDNS::HandleRequest(unsigned short)+0xbe>
 8013c00:	9b02      	ldr	r3, [sp, #8]
 8013c02:	b123      	cbz	r3, 8013c0e <MDNS::HandleRequest(unsigned short)+0x9a>
 8013c04:	6870      	ldr	r0, [r6, #4]
 8013c06:	a904      	add	r1, sp, #16
 8013c08:	f7ff fcd6 	bl	80135b8 <strcmp>
 8013c0c:	b988      	cbnz	r0, 8013c32 <MDNS::HandleRequest(unsigned short)+0xbe>
 8013c0e:	2c0c      	cmp	r4, #12
 8013c10:	d10f      	bne.n	8013c32 <MDNS::HandleRequest(unsigned short)+0xbe>
 8013c12:	4649      	mov	r1, r9
 8013c14:	4628      	mov	r0, r5
 8013c16:	f7ff fedd 	bl	80139d4 <MDNS::CreateMDNSMessage(unsigned int)>
 8013c1a:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8013c1e:	480d      	ldr	r0, [pc, #52]	; (8013c54 <MDNS::HandleRequest(unsigned short)+0xe0>)
 8013c20:	9300      	str	r3, [sp, #0]
 8013c22:	4b0d      	ldr	r3, [pc, #52]	; (8013c58 <MDNS::HandleRequest(unsigned short)+0xe4>)
 8013c24:	f8bb 2000 	ldrh.w	r2, [fp]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	490e      	ldr	r1, [pc, #56]	; (8013c64 <MDNS::HandleRequest(unsigned short)+0xf0>)
 8013c2c:	7800      	ldrb	r0, [r0, #0]
 8013c2e:	f7ff fc0b 	bl	8013448 <udp_send>
 8013c32:	3610      	adds	r6, #16
 8013c34:	f1b9 0f00 	cmp.w	r9, #0
 8013c38:	d001      	beq.n	8013c3e <MDNS::HandleRequest(unsigned short)+0xca>
 8013c3a:	3701      	adds	r7, #1
 8013c3c:	e7a6      	b.n	8013b8c <MDNS::HandleRequest(unsigned short)+0x18>
 8013c3e:	f04f 0901 	mov.w	r9, #1
 8013c42:	e7db      	b.n	8013bfc <MDNS::HandleRequest(unsigned short)+0x88>
 8013c44:	2001d2d0 	ldrdcs	sp, [r1], -r0
 8013c48:	2001d0c8 	andcs	sp, r1, r8, asr #1
 8013c4c:	2001d2cc 	andcs	sp, r1, ip, asr #5
 8013c50:	2001cea0 	andcs	ip, r1, r0, lsr #29
 8013c54:	2000000c 	andcs	r0, r0, ip
 8013c58:	2001ce9c 	mulcs	r1, ip, lr
 8013c5c:	0801b601 	stmdaeq	r1, {r0, r9, sl, ip, sp, pc}
 8013c60:	2001d0a4 	andcs	sp, r1, r4, lsr #1
 8013c64:	2001d0cc 	andcs	sp, r1, ip, asr #1

08013c68 <MDNS::Parse()>:
 8013c68:	4b08      	ldr	r3, [pc, #32]	; (8013c8c <MDNS::Parse()+0x24>)
 8013c6a:	681a      	ldr	r2, [r3, #0]
 8013c6c:	8853      	ldrh	r3, [r2, #2]
 8013c6e:	ba5b      	rev16	r3, r3
 8013c70:	b299      	uxth	r1, r3
 8013c72:	041b      	lsls	r3, r3, #16
 8013c74:	d408      	bmi.n	8013c88 <MDNS::Parse()+0x20>
 8013c76:	0b89      	lsrs	r1, r1, #14
 8013c78:	d106      	bne.n	8013c88 <MDNS::Parse()+0x20>
 8013c7a:	8891      	ldrh	r1, [r2, #4]
 8013c7c:	b28b      	uxth	r3, r1
 8013c7e:	b11b      	cbz	r3, 8013c88 <MDNS::Parse()+0x20>
 8013c80:	ba49      	rev16	r1, r1
 8013c82:	b289      	uxth	r1, r1
 8013c84:	f7ff bf76 	b.w	8013b74 <MDNS::HandleRequest(unsigned short)>
 8013c88:	4770      	bx	lr
 8013c8a:	bf00      	nop
 8013c8c:	2001d2d0 	ldrdcs	sp, [r1], -r0

08013c90 <MDNS::Run()>:
 8013c90:	b538      	push	{r3, r4, r5, lr}
 8013c92:	4d0c      	ldr	r5, [pc, #48]	; (8013cc4 <MDNS::Run()+0x34>)
 8013c94:	4604      	mov	r4, r0
 8013c96:	480c      	ldr	r0, [pc, #48]	; (8013cc8 <MDNS::Run()+0x38>)
 8013c98:	462b      	mov	r3, r5
 8013c9a:	4a0c      	ldr	r2, [pc, #48]	; (8013ccc <MDNS::Run()+0x3c>)
 8013c9c:	490c      	ldr	r1, [pc, #48]	; (8013cd0 <MDNS::Run()+0x40>)
 8013c9e:	7800      	ldrb	r0, [r0, #0]
 8013ca0:	f7ff fbac 	bl	80133fc <udp_recv2>
 8013ca4:	4b0b      	ldr	r3, [pc, #44]	; (8013cd4 <MDNS::Run()+0x44>)
 8013ca6:	882a      	ldrh	r2, [r5, #0]
 8013ca8:	8018      	strh	r0, [r3, #0]
 8013caa:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8013cae:	429a      	cmp	r2, r3
 8013cb0:	d106      	bne.n	8013cc0 <MDNS::Run()+0x30>
 8013cb2:	280c      	cmp	r0, #12
 8013cb4:	d904      	bls.n	8013cc0 <MDNS::Run()+0x30>
 8013cb6:	4620      	mov	r0, r4
 8013cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013cbc:	f7ff bfd4 	b.w	8013c68 <MDNS::Parse()>
 8013cc0:	bd38      	pop	{r3, r4, r5, pc}
 8013cc2:	bf00      	nop
 8013cc4:	2001ce98 	mulcs	r1, r8, lr
 8013cc8:	2000000c 	andcs	r0, r0, ip
 8013ccc:	2001ce94 	mulcs	r1, r4, lr
 8013cd0:	2001d2d0 	ldrdcs	sp, [r1], -r0
 8013cd4:	2001d0c4 	andcs	sp, r1, r4, asr #1

08013cd8 <MDNS::Print()>:
 8013cd8:	b510      	push	{r4, lr}
 8013cda:	4816      	ldr	r0, [pc, #88]	; (8013d34 <MDNS::Print()+0x5c>)
 8013cdc:	f7f5 fd70 	bl	80097c0 <printf>
 8013ce0:	4b15      	ldr	r3, [pc, #84]	; (8013d38 <MDNS::Print()+0x60>)
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	3301      	adds	r3, #1
 8013ce6:	d104      	bne.n	8013cf2 <MDNS::Print()+0x1a>
 8013ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cec:	4813      	ldr	r0, [pc, #76]	; (8013d3c <MDNS::Print()+0x64>)
 8013cee:	f7f5 bd67 	b.w	80097c0 <printf>
 8013cf2:	4b13      	ldr	r3, [pc, #76]	; (8013d40 <MDNS::Print()+0x68>)
 8013cf4:	4c13      	ldr	r4, [pc, #76]	; (8013d44 <MDNS::Print()+0x6c>)
 8013cf6:	6819      	ldr	r1, [r3, #0]
 8013cf8:	4813      	ldr	r0, [pc, #76]	; (8013d48 <MDNS::Print()+0x70>)
 8013cfa:	f7f5 fd61 	bl	80097c0 <printf>
 8013cfe:	6823      	ldr	r3, [r4, #0]
 8013d00:	b14b      	cbz	r3, 8013d16 <MDNS::Print()+0x3e>
 8013d02:	4a12      	ldr	r2, [pc, #72]	; (8013d4c <MDNS::Print()+0x74>)
 8013d04:	68a3      	ldr	r3, [r4, #8]
 8013d06:	6861      	ldr	r1, [r4, #4]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	bf08      	it	eq
 8013d0c:	4613      	moveq	r3, r2
 8013d0e:	4810      	ldr	r0, [pc, #64]	; (8013d50 <MDNS::Print()+0x78>)
 8013d10:	89a2      	ldrh	r2, [r4, #12]
 8013d12:	f7f5 fd55 	bl	80097c0 <printf>
 8013d16:	6923      	ldr	r3, [r4, #16]
 8013d18:	b15b      	cbz	r3, 8013d32 <MDNS::Print()+0x5a>
 8013d1a:	69a3      	ldr	r3, [r4, #24]
 8013d1c:	4a0b      	ldr	r2, [pc, #44]	; (8013d4c <MDNS::Print()+0x74>)
 8013d1e:	6961      	ldr	r1, [r4, #20]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	bf08      	it	eq
 8013d24:	4613      	moveq	r3, r2
 8013d26:	480a      	ldr	r0, [pc, #40]	; (8013d50 <MDNS::Print()+0x78>)
 8013d28:	8ba2      	ldrh	r2, [r4, #28]
 8013d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d2e:	f7f5 bd47 	b.w	80097c0 <printf>
 8013d32:	bd10      	pop	{r4, pc}
 8013d34:	0801b61e 	stmdaeq	r1, {r1, r2, r3, r4, r9, sl, ip, sp, pc}
 8013d38:	2000000c 	andcs	r0, r0, ip
 8013d3c:	0801b624 	stmdaeq	r1, {r2, r5, r9, sl, ip, sp, pc}
 8013d40:	2001d2cc 	andcs	sp, r1, ip, asr #5
 8013d44:	2001d0a4 	andcs	sp, r1, r4, lsr #1
 8013d48:	0801b632 	stmdaeq	r1, {r1, r4, r5, r9, sl, ip, sp, pc}
 8013d4c:	08019501 	stmdaeq	r1, {r0, r8, sl, ip, pc}
 8013d50:	0801b63e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r9, sl, ip, sp, pc}

08013d54 <strncpy.constprop.0.isra.0>:
 8013d54:	233f      	movs	r3, #63	; 0x3f
 8013d56:	3901      	subs	r1, #1
 8013d58:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013d5c:	b92a      	cbnz	r2, 8013d6a <strncpy.constprop.0.isra.0+0x16>
 8013d5e:	4403      	add	r3, r0
 8013d60:	4298      	cmp	r0, r3
 8013d62:	d006      	beq.n	8013d72 <strncpy.constprop.0.isra.0+0x1e>
 8013d64:	f800 2b01 	strb.w	r2, [r0], #1
 8013d68:	e7fa      	b.n	8013d60 <strncpy.constprop.0.isra.0+0xc>
 8013d6a:	3b01      	subs	r3, #1
 8013d6c:	f800 2b01 	strb.w	r2, [r0], #1
 8013d70:	d1f2      	bne.n	8013d58 <strncpy.constprop.0.isra.0+0x4>
 8013d72:	4770      	bx	lr

08013d74 <Network::Network()>:
 8013d74:	4a12      	ldr	r2, [pc, #72]	; (8013dc0 <Network::Network()+0x4c>)
 8013d76:	2300      	movs	r3, #0
 8013d78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013d7c:	6010      	str	r0, [r2, #0]
 8013d7e:	2201      	movs	r2, #1
 8013d80:	e9c0 2100 	strd	r2, r1, [r0]
 8013d84:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013d88:	2200      	movs	r2, #0
 8013d8a:	e9c0 3330 	strd	r3, r3, [r0, #192]	; 0xc0
 8013d8e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8013d92:	490c      	ldr	r1, [pc, #48]	; (8013dc4 <Network::Network()+0x50>)
 8013d94:	6102      	str	r2, [r0, #16]
 8013d96:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 8013d9a:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
 8013d9e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8013da2:	61c3      	str	r3, [r0, #28]
 8013da4:	f880 3020 	strb.w	r3, [r0, #32]
 8013da8:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8013dac:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
 8013db0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013db4:	f802 3f01 	strb.w	r3, [r2, #1]!
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d1f9      	bne.n	8013db0 <Network::Network()+0x3c>
 8013dbc:	4770      	bx	lr
 8013dbe:	bf00      	nop
 8013dc0:	2001d2d4 	ldrdcs	sp, [r1], -r4
 8013dc4:	0801b649 	stmdaeq	r1, {r0, r3, r6, r9, sl, ip, sp, pc}

08013dc8 <Network::Shutdown()>:
 8013dc8:	b508      	push	{r3, lr}
 8013dca:	30bc      	adds	r0, #188	; 0xbc
 8013dcc:	f001 fd32 	bl	8015834 <NetworkDisplay::ShowShutdown()>
 8013dd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013dd4:	f7f3 ba38 	b.w	8007248 <net_shutdown>

08013dd8 <Network::Begin(unsigned short)>:
 8013dd8:	4608      	mov	r0, r1
 8013dda:	f7ff ba9f 	b.w	801331c <udp_bind>

08013dde <Network::End(unsigned short)>:
 8013dde:	4608      	mov	r0, r1
 8013de0:	f7ff bab6 	b.w	8013350 <udp_unbind>

08013de4 <Network::MacAddressCopyTo(unsigned char*)>:
 8013de4:	f100 039f 	add.w	r3, r0, #159	; 0x9f
 8013de8:	3901      	subs	r1, #1
 8013dea:	30a5      	adds	r0, #165	; 0xa5
 8013dec:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8013df0:	4283      	cmp	r3, r0
 8013df2:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013df6:	d1f9      	bne.n	8013dec <Network::MacAddressCopyTo(unsigned char*)+0x8>
 8013df8:	4770      	bx	lr

08013dfa <Network::JoinGroup(int, unsigned int)>:
 8013dfa:	4610      	mov	r0, r2
 8013dfc:	f001 b82c 	b.w	8014e58 <igmp_join>

08013e00 <Network::LeaveGroup(int, unsigned int)>:
 8013e00:	4610      	mov	r0, r2
 8013e02:	f001 b855 	b.w	8014eb0 <igmp_leave>

08013e06 <Network::SetDefaultIp()>:
 8013e06:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8013e0a:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 8013e0e:	041b      	lsls	r3, r3, #16
 8013e10:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013e14:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
 8013e18:	3302      	adds	r3, #2
 8013e1a:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8013e1e:	22ff      	movs	r2, #255	; 0xff
 8013e20:	6143      	str	r3, [r0, #20]
 8013e22:	e9c0 3206 	strd	r3, r2, [r0, #24]
 8013e26:	4770      	bx	lr

08013e28 <Network::Init(NetworkParamsStore*)>:
 8013e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e2c:	b0a5      	sub	sp, #148	; 0x94
 8013e2e:	4604      	mov	r4, r0
 8013e30:	a80b      	add	r0, sp, #44	; 0x2c
 8013e32:	f000 faff 	bl	8014434 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 8013e36:	a80b      	add	r0, sp, #44	; 0x2c
 8013e38:	f000 fb08 	bl	801444c <NetworkParams::Load()>
 8013e3c:	b110      	cbz	r0, 8013e44 <Network::Init(NetworkParamsStore*)+0x1c>
 8013e3e:	a80b      	add	r0, sp, #44	; 0x2c
 8013e40:	f000 fcdb 	bl	80147fa <NetworkParams::Dump()>
 8013e44:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
 8013e48:	4628      	mov	r0, r5
 8013e4a:	f001 fcd5 	bl	80157f8 <NetworkDisplay::ShowEmacStart()>
 8013e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e50:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8013e54:	9308      	str	r3, [sp, #32]
 8013e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e58:	4630      	mov	r0, r6
 8013e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8013e5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e5e:	f104 0720 	add.w	r7, r4, #32
 8013e62:	930a      	str	r3, [sp, #40]	; 0x28
 8013e64:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8013e68:	7163      	strb	r3, [r4, #5]
 8013e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e6c:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8013e70:	bf18      	it	ne
 8013e72:	f8dd 2085 	ldrne.w	r2, [sp, #133]	; 0x85
 8013e76:	061b      	lsls	r3, r3, #24
 8013e78:	bf54      	ite	pl
 8013e7a:	2300      	movpl	r3, #0
 8013e7c:	f8dd 3089 	ldrmi.w	r3, [sp, #137]	; 0x89
 8013e80:	60e2      	str	r2, [r4, #12]
 8013e82:	6123      	str	r3, [r4, #16]
 8013e84:	f004 f870 	bl	8017f68 <emac_start(unsigned char*)>
 8013e88:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	f040 80c7 	bne.w	8014020 <Network::Init(NetworkParamsStore*)+0x1f8>
 8013e92:	4984      	ldr	r1, [pc, #528]	; (80140a4 <Network::Init(NetworkParamsStore*)+0x27c>)
 8013e94:	f104 001f 	add.w	r0, r4, #31
 8013e98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e9c:	f103 0c01 	add.w	ip, r3, #1
 8013ea0:	2a00      	cmp	r2, #0
 8013ea2:	f040 80b9 	bne.w	8014018 <Network::Init(NetworkParamsStore*)+0x1f0>
 8013ea6:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
 8013eaa:	18e1      	adds	r1, r4, r3
 8013eac:	0910      	lsrs	r0, r2, #4
 8013eae:	2a9f      	cmp	r2, #159	; 0x9f
 8013eb0:	f002 020f 	and.w	r2, r2, #15
 8013eb4:	bf94      	ite	ls
 8013eb6:	3030      	addls	r0, #48	; 0x30
 8013eb8:	3037      	addhi	r0, #55	; 0x37
 8013eba:	2a09      	cmp	r2, #9
 8013ebc:	bf94      	ite	ls
 8013ebe:	3230      	addls	r2, #48	; 0x30
 8013ec0:	3237      	addhi	r2, #55	; 0x37
 8013ec2:	44a4      	add	ip, r4
 8013ec4:	f881 0020 	strb.w	r0, [r1, #32]
 8013ec8:	f88c 2020 	strb.w	r2, [ip, #32]
 8013ecc:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
 8013ed0:	f103 0802 	add.w	r8, r3, #2
 8013ed4:	0910      	lsrs	r0, r2, #4
 8013ed6:	2a9f      	cmp	r2, #159	; 0x9f
 8013ed8:	f002 020f 	and.w	r2, r2, #15
 8013edc:	bf94      	ite	ls
 8013ede:	3030      	addls	r0, #48	; 0x30
 8013ee0:	3037      	addhi	r0, #55	; 0x37
 8013ee2:	f103 0e03 	add.w	lr, r3, #3
 8013ee6:	2a09      	cmp	r2, #9
 8013ee8:	eb04 0c08 	add.w	ip, r4, r8
 8013eec:	f88c 0020 	strb.w	r0, [ip, #32]
 8013ef0:	bf94      	ite	ls
 8013ef2:	3230      	addls	r2, #48	; 0x30
 8013ef4:	3237      	addhi	r2, #55	; 0x37
 8013ef6:	eb04 000e 	add.w	r0, r4, lr
 8013efa:	f880 2020 	strb.w	r2, [r0, #32]
 8013efe:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 8013f02:	f103 0c04 	add.w	ip, r3, #4
 8013f06:	0910      	lsrs	r0, r2, #4
 8013f08:	2a9f      	cmp	r2, #159	; 0x9f
 8013f0a:	f002 020f 	and.w	r2, r2, #15
 8013f0e:	bf94      	ite	ls
 8013f10:	3030      	addls	r0, #48	; 0x30
 8013f12:	3037      	addhi	r0, #55	; 0x37
 8013f14:	3305      	adds	r3, #5
 8013f16:	2a09      	cmp	r2, #9
 8013f18:	4423      	add	r3, r4
 8013f1a:	44a4      	add	ip, r4
 8013f1c:	bf94      	ite	ls
 8013f1e:	3230      	addls	r2, #48	; 0x30
 8013f20:	3237      	addhi	r2, #55	; 0x37
 8013f22:	f88c 0020 	strb.w	r0, [ip, #32]
 8013f26:	f883 2020 	strb.w	r2, [r3, #32]
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	f881 3026 	strb.w	r3, [r1, #38]	; 0x26
 8013f30:	f004 f8c4 	bl	80180bc <net::link_register_read()>
 8013f34:	7963      	ldrb	r3, [r4, #5]
 8013f36:	6020      	str	r0, [r4, #0]
 8013f38:	2800      	cmp	r0, #0
 8013f3a:	f040 809c 	bne.w	8014076 <Network::Init(NetworkParamsStore*)+0x24e>
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	f040 80aa 	bne.w	8014098 <Network::Init(NetworkParamsStore*)+0x270>
 8013f44:	9b08      	ldr	r3, [sp, #32]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d173      	bne.n	8014032 <Network::Init(NetworkParamsStore*)+0x20a>
 8013f4a:	4620      	mov	r0, r4
 8013f4c:	f7ff ff5b 	bl	8013e06 <Network::SetDefaultIp()>
 8013f50:	6963      	ldr	r3, [r4, #20]
 8013f52:	69e2      	ldr	r2, [r4, #28]
 8013f54:	9308      	str	r3, [sp, #32]
 8013f56:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
 8013f5a:	1de3      	adds	r3, r4, #7
 8013f5c:	f104 0905 	add.w	r9, r4, #5
 8013f60:	9302      	str	r3, [sp, #8]
 8013f62:	9300      	str	r3, [sp, #0]
 8013f64:	463a      	mov	r2, r7
 8013f66:	464b      	mov	r3, r9
 8013f68:	4630      	mov	r0, r6
 8013f6a:	a908      	add	r1, sp, #32
 8013f6c:	f7f3 f91c 	bl	80071a8 <net_init>
 8013f70:	79e3      	ldrb	r3, [r4, #7]
 8013f72:	b11b      	cbz	r3, 8013f7c <Network::Init(NetworkParamsStore*)+0x154>
 8013f74:	2104      	movs	r1, #4
 8013f76:	4628      	mov	r0, r5
 8013f78:	f001 fc62 	bl	8015840 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8013f7c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8013f80:	f89d a08d 	ldrb.w	sl, [sp, #141]	; 0x8d
 8013f84:	9304      	str	r3, [sp, #16]
 8013f86:	233c      	movs	r3, #60	; 0x3c
 8013f88:	fb03 f30a 	mul.w	r3, r3, sl
 8013f8c:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80140a8 <Network::Init(NetworkParamsStore*)+0x280>
 8013f90:	f8df b118 	ldr.w	fp, [pc, #280]	; 80140ac <Network::Init(NetworkParamsStore*)+0x284>
 8013f94:	9303      	str	r3, [sp, #12]
 8013f96:	79e3      	ldrb	r3, [r4, #7]
 8013f98:	b393      	cbz	r3, 8014000 <Network::Init(NetworkParamsStore*)+0x1d8>
 8013f9a:	f1ba 0f00 	cmp.w	sl, #0
 8013f9e:	d02f      	beq.n	8014000 <Network::Init(NetworkParamsStore*)+0x1d8>
 8013fa0:	9b04      	ldr	r3, [sp, #16]
 8013fa2:	b36b      	cbz	r3, 8014000 <Network::Init(NetworkParamsStore*)+0x1d8>
 8013fa4:	2104      	movs	r1, #4
 8013fa6:	f8d8 0000 	ldr.w	r0, [r8]
 8013faa:	f002 fa6f 	bl	801648c <LedBlink::SetMode(ledblink::Mode)>
 8013fae:	2103      	movs	r1, #3
 8013fb0:	4628      	mov	r0, r5
 8013fb2:	f001 fc45 	bl	8015840 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8013fb6:	2000      	movs	r0, #0
 8013fb8:	f002 fd28 	bl	8016a0c <time>
 8013fbc:	9005      	str	r0, [sp, #20]
 8013fbe:	2000      	movs	r0, #0
 8013fc0:	f002 fd24 	bl	8016a0c <time>
 8013fc4:	9b05      	ldr	r3, [sp, #20]
 8013fc6:	493a      	ldr	r1, [pc, #232]	; (80140b0 <Network::Init(NetworkParamsStore*)+0x288>)
 8013fc8:	1ac0      	subs	r0, r0, r3
 8013fca:	9b03      	ldr	r3, [sp, #12]
 8013fcc:	4298      	cmp	r0, r3
 8013fce:	db38      	blt.n	8014042 <Network::Init(NetworkParamsStore*)+0x21a>
 8013fd0:	2101      	movs	r1, #1
 8013fd2:	4628      	mov	r0, r5
 8013fd4:	f001 fc34 	bl	8015840 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8013fd8:	2101      	movs	r1, #1
 8013fda:	f8d8 0000 	ldr.w	r0, [r8]
 8013fde:	f002 fa55 	bl	801648c <LedBlink::SetMode(ledblink::Mode)>
 8013fe2:	2301      	movs	r3, #1
 8013fe4:	7163      	strb	r3, [r4, #5]
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	71e3      	strb	r3, [r4, #7]
 8013fea:	9b02      	ldr	r3, [sp, #8]
 8013fec:	463a      	mov	r2, r7
 8013fee:	9300      	str	r3, [sp, #0]
 8013ff0:	4630      	mov	r0, r6
 8013ff2:	464b      	mov	r3, r9
 8013ff4:	a908      	add	r1, sp, #32
 8013ff6:	f7f3 f8d7 	bl	80071a8 <net_init>
 8013ffa:	7963      	ldrb	r3, [r4, #5]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d0ca      	beq.n	8013f96 <Network::Init(NetworkParamsStore*)+0x16e>
 8014000:	9b08      	ldr	r3, [sp, #32]
 8014002:	4628      	mov	r0, r5
 8014004:	6163      	str	r3, [r4, #20]
 8014006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014008:	61e3      	str	r3, [r4, #28]
 801400a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801400c:	61a3      	str	r3, [r4, #24]
 801400e:	f001 fbf9 	bl	8015804 <NetworkDisplay::ShowIp()>
 8014012:	b025      	add	sp, #148	; 0x94
 8014014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014018:	4663      	mov	r3, ip
 801401a:	f800 2f01 	strb.w	r2, [r0, #1]!
 801401e:	e73b      	b.n	8013e98 <Network::Init(NetworkParamsStore*)+0x70>
 8014020:	4638      	mov	r0, r7
 8014022:	f10d 0145 	add.w	r1, sp, #69	; 0x45
 8014026:	f7ff fe95 	bl	8013d54 <strncpy.constprop.0.isra.0>
 801402a:	2300      	movs	r3, #0
 801402c:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
 8014030:	e77e      	b.n	8013f30 <Network::Init(NetworkParamsStore*)+0x108>
 8014032:	69e1      	ldr	r1, [r4, #28]
 8014034:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8014038:	4053      	eors	r3, r2
 801403a:	420b      	tst	r3, r1
 801403c:	bf18      	it	ne
 801403e:	920a      	strne	r2, [sp, #40]	; 0x28
 8014040:	e78b      	b.n	8013f5a <Network::Init(NetworkParamsStore*)+0x132>
 8014042:	f8d8 3000 	ldr.w	r3, [r8]
 8014046:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801404a:	f1bc 0f00 	cmp.w	ip, #0
 801404e:	d0b6      	beq.n	8013fbe <Network::Init(NetworkParamsStore*)+0x196>
 8014050:	6808      	ldr	r0, [r1, #0]
 8014052:	695a      	ldr	r2, [r3, #20]
 8014054:	1a80      	subs	r0, r0, r2
 8014056:	4584      	cmp	ip, r0
 8014058:	d8b1      	bhi.n	8013fbe <Network::Init(NetworkParamsStore*)+0x196>
 801405a:	6808      	ldr	r0, [r1, #0]
 801405c:	6158      	str	r0, [r3, #20]
 801405e:	6918      	ldr	r0, [r3, #16]
 8014060:	2801      	cmp	r0, #1
 8014062:	f080 0201 	eor.w	r2, r0, #1
 8014066:	611a      	str	r2, [r3, #16]
 8014068:	bf16      	itet	ne
 801406a:	2301      	movne	r3, #1
 801406c:	f8cb 0014 	streq.w	r0, [fp, #20]
 8014070:	f8cb 3010 	strne.w	r3, [fp, #16]
 8014074:	e7a3      	b.n	8013fbe <Network::Init(NetworkParamsStore*)+0x196>
 8014076:	b11b      	cbz	r3, 8014080 <Network::Init(NetworkParamsStore*)+0x258>
 8014078:	2300      	movs	r3, #0
 801407a:	e9c4 3306 	strd	r3, r3, [r4, #24]
 801407e:	9308      	str	r3, [sp, #32]
 8014080:	2300      	movs	r3, #0
 8014082:	f88d 301f 	strb.w	r3, [sp, #31]
 8014086:	f10d 031f 	add.w	r3, sp, #31
 801408a:	463a      	mov	r2, r7
 801408c:	4630      	mov	r0, r6
 801408e:	9300      	str	r3, [sp, #0]
 8014090:	a908      	add	r1, sp, #32
 8014092:	f7f3 f889 	bl	80071a8 <net_init>
 8014096:	e7b3      	b.n	8014000 <Network::Init(NetworkParamsStore*)+0x1d8>
 8014098:	2101      	movs	r1, #1
 801409a:	4628      	mov	r0, r5
 801409c:	f001 fbd0 	bl	8015840 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80140a0:	e75b      	b.n	8013f5a <Network::Init(NetworkParamsStore*)+0x132>
 80140a2:	bf00      	nop
 80140a4:	0801b64e 	stmdaeq	r1, {r1, r2, r3, r6, r9, sl, ip, sp, pc}
 80140a8:	2001d998 	mulcs	r1, r8, r9
 80140ac:	40011000 	andmi	r1, r1, r0
 80140b0:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4

080140b4 <Network::SetIp(unsigned int)>:
 80140b4:	7943      	ldrb	r3, [r0, #5]
 80140b6:	b570      	push	{r4, r5, r6, lr}
 80140b8:	4604      	mov	r4, r0
 80140ba:	460d      	mov	r5, r1
 80140bc:	2600      	movs	r6, #0
 80140be:	b113      	cbz	r3, 80140c6 <Network::SetIp(unsigned int)+0x12>
 80140c0:	7146      	strb	r6, [r0, #5]
 80140c2:	f7fe fec9 	bl	8012e58 <net_dhcp_release>
 80140c6:	71e6      	strb	r6, [r4, #7]
 80140c8:	b975      	cbnz	r5, 80140e8 <Network::SetIp(unsigned int)+0x34>
 80140ca:	4620      	mov	r0, r4
 80140cc:	f7ff fe9b 	bl	8013e06 <Network::SetDefaultIp()>
 80140d0:	6960      	ldr	r0, [r4, #20]
 80140d2:	f7fe fe7d 	bl	8012dd0 <net_set_ip>
 80140d6:	34bc      	adds	r4, #188	; 0xbc
 80140d8:	4620      	mov	r0, r4
 80140da:	f001 fb93 	bl	8015804 <NetworkDisplay::ShowIp()>
 80140de:	4620      	mov	r0, r4
 80140e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140e4:	f001 bb94 	b.w	8015810 <NetworkDisplay::ShowNetMask()>
 80140e8:	4628      	mov	r0, r5
 80140ea:	f7fe fe71 	bl	8012dd0 <net_set_ip>
 80140ee:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80140f2:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80140f6:	2800      	cmp	r0, #0
 80140f8:	d0ed      	beq.n	80140d6 <Network::SetIp(unsigned int)+0x22>
 80140fa:	6803      	ldr	r3, [r0, #0]
 80140fc:	4629      	mov	r1, r5
 80140fe:	689b      	ldr	r3, [r3, #8]
 8014100:	4798      	blx	r3
 8014102:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8014106:	2100      	movs	r1, #0
 8014108:	6803      	ldr	r3, [r0, #0]
 801410a:	699b      	ldr	r3, [r3, #24]
 801410c:	4798      	blx	r3
 801410e:	e7e2      	b.n	80140d6 <Network::SetIp(unsigned int)+0x22>

08014110 <Network::SetNetmask(unsigned int)>:
 8014110:	69c2      	ldr	r2, [r0, #28]
 8014112:	b510      	push	{r4, lr}
 8014114:	428a      	cmp	r2, r1
 8014116:	4604      	mov	r4, r0
 8014118:	d00f      	beq.n	801413a <Network::SetNetmask(unsigned int)+0x2a>
 801411a:	61c1      	str	r1, [r0, #28]
 801411c:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8014120:	b110      	cbz	r0, 8014128 <Network::SetNetmask(unsigned int)+0x18>
 8014122:	6803      	ldr	r3, [r0, #0]
 8014124:	68db      	ldr	r3, [r3, #12]
 8014126:	4798      	blx	r3
 8014128:	34bc      	adds	r4, #188	; 0xbc
 801412a:	4620      	mov	r0, r4
 801412c:	f001 fb6a 	bl	8015804 <NetworkDisplay::ShowIp()>
 8014130:	4620      	mov	r0, r4
 8014132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014136:	f001 bb6b 	b.w	8015810 <NetworkDisplay::ShowNetMask()>
 801413a:	bd10      	pop	{r4, pc}

0801413c <Network::SetGatewayIp(unsigned int)>:
 801413c:	b538      	push	{r3, r4, r5, lr}
 801413e:	6983      	ldr	r3, [r0, #24]
 8014140:	4604      	mov	r4, r0
 8014142:	428b      	cmp	r3, r1
 8014144:	460d      	mov	r5, r1
 8014146:	d00f      	beq.n	8014168 <Network::SetGatewayIp(unsigned int)+0x2c>
 8014148:	4608      	mov	r0, r1
 801414a:	f7fe fe51 	bl	8012df0 <net_set_gw>
 801414e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8014152:	b118      	cbz	r0, 801415c <Network::SetGatewayIp(unsigned int)+0x20>
 8014154:	6803      	ldr	r3, [r0, #0]
 8014156:	4629      	mov	r1, r5
 8014158:	691b      	ldr	r3, [r3, #16]
 801415a:	4798      	blx	r3
 801415c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8014160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014164:	f001 bb5a 	b.w	801581c <NetworkDisplay::ShowGatewayIp()>
 8014168:	bd38      	pop	{r3, r4, r5, pc}

0801416a <Network::SetHostName(char const*)>:
 801416a:	b570      	push	{r4, r5, r6, lr}
 801416c:	4604      	mov	r4, r0
 801416e:	f100 0520 	add.w	r5, r0, #32
 8014172:	4628      	mov	r0, r5
 8014174:	f7ff fdee 	bl	8013d54 <strncpy.constprop.0.isra.0>
 8014178:	2300      	movs	r3, #0
 801417a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801417e:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
 8014182:	b158      	cbz	r0, 801419c <Network::SetHostName(char const*)+0x32>
 8014184:	6803      	ldr	r3, [r0, #0]
 8014186:	695e      	ldr	r6, [r3, #20]
 8014188:	462b      	mov	r3, r5
 801418a:	461a      	mov	r2, r3
 801418c:	7811      	ldrb	r1, [r2, #0]
 801418e:	3301      	adds	r3, #1
 8014190:	2900      	cmp	r1, #0
 8014192:	d1fa      	bne.n	801418a <Network::SetHostName(char const*)+0x20>
 8014194:	1b52      	subs	r2, r2, r5
 8014196:	4629      	mov	r1, r5
 8014198:	b292      	uxth	r2, r2
 801419a:	47b0      	blx	r6
 801419c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80141a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80141a4:	f001 bb40 	b.w	8015828 <NetworkDisplay::ShowHostName()>

080141a8 <Network::SetZeroconf()>:
 80141a8:	b530      	push	{r4, r5, lr}
 80141aa:	b085      	sub	sp, #20
 80141ac:	4604      	mov	r4, r0
 80141ae:	a801      	add	r0, sp, #4
 80141b0:	f7fe fe5c 	bl	8012e6c <net_set_zeroconf>
 80141b4:	71e0      	strb	r0, [r4, #7]
 80141b6:	b170      	cbz	r0, 80141d6 <Network::SetZeroconf()+0x2e>
 80141b8:	9b01      	ldr	r3, [sp, #4]
 80141ba:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80141be:	6163      	str	r3, [r4, #20]
 80141c0:	9b02      	ldr	r3, [sp, #8]
 80141c2:	61e3      	str	r3, [r4, #28]
 80141c4:	9b03      	ldr	r3, [sp, #12]
 80141c6:	61a3      	str	r3, [r4, #24]
 80141c8:	2300      	movs	r3, #0
 80141ca:	7163      	strb	r3, [r4, #5]
 80141cc:	b118      	cbz	r0, 80141d6 <Network::SetZeroconf()+0x2e>
 80141ce:	6803      	ldr	r3, [r0, #0]
 80141d0:	2101      	movs	r1, #1
 80141d2:	699b      	ldr	r3, [r3, #24]
 80141d4:	4798      	blx	r3
 80141d6:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
 80141da:	4628      	mov	r0, r5
 80141dc:	f001 fb12 	bl	8015804 <NetworkDisplay::ShowIp()>
 80141e0:	4628      	mov	r0, r5
 80141e2:	f001 fb15 	bl	8015810 <NetworkDisplay::ShowNetMask()>
 80141e6:	79e0      	ldrb	r0, [r4, #7]
 80141e8:	b005      	add	sp, #20
 80141ea:	bd30      	pop	{r4, r5, pc}

080141ec <Network::EnableDhcp()>:
 80141ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141ee:	4e25      	ldr	r6, [pc, #148]	; (8014284 <Network::EnableDhcp()+0x98>)
 80141f0:	4604      	mov	r4, r0
 80141f2:	6833      	ldr	r3, [r6, #0]
 80141f4:	b085      	sub	sp, #20
 80141f6:	781f      	ldrb	r7, [r3, #0]
 80141f8:	b137      	cbz	r7, 8014208 <Network::EnableDhcp()+0x1c>
 80141fa:	2200      	movs	r2, #0
 80141fc:	2104      	movs	r1, #4
 80141fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014202:	701a      	strb	r2, [r3, #0]
 8014204:	f002 fdea 	bl	8016ddc <fwdgt_config>
 8014208:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
 801420c:	2101      	movs	r1, #1
 801420e:	4628      	mov	r0, r5
 8014210:	f001 fb16 	bl	8015840 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8014214:	1de2      	adds	r2, r4, #7
 8014216:	f104 0120 	add.w	r1, r4, #32
 801421a:	a801      	add	r0, sp, #4
 801421c:	f7fe fdf0 	bl	8012e00 <net_set_dhcp>
 8014220:	79e3      	ldrb	r3, [r4, #7]
 8014222:	7160      	strb	r0, [r4, #5]
 8014224:	b35b      	cbz	r3, 801427e <Network::EnableDhcp()+0x92>
 8014226:	2104      	movs	r1, #4
 8014228:	4628      	mov	r0, r5
 801422a:	f001 fb09 	bl	8015840 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 801422e:	b16f      	cbz	r7, 801424c <Network::EnableDhcp()+0x60>
 8014230:	2102      	movs	r1, #2
 8014232:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014236:	6836      	ldr	r6, [r6, #0]
 8014238:	f002 fdd0 	bl	8016ddc <fwdgt_config>
 801423c:	2801      	cmp	r0, #1
 801423e:	bf0c      	ite	eq
 8014240:	2301      	moveq	r3, #1
 8014242:	2300      	movne	r3, #0
 8014244:	7033      	strb	r3, [r6, #0]
 8014246:	d101      	bne.n	801424c <Network::EnableDhcp()+0x60>
 8014248:	f002 fdb8 	bl	8016dbc <fwdgt_enable>
 801424c:	9b01      	ldr	r3, [sp, #4]
 801424e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8014252:	6163      	str	r3, [r4, #20]
 8014254:	9b02      	ldr	r3, [sp, #8]
 8014256:	61e3      	str	r3, [r4, #28]
 8014258:	9b03      	ldr	r3, [sp, #12]
 801425a:	61a3      	str	r3, [r4, #24]
 801425c:	b118      	cbz	r0, 8014266 <Network::EnableDhcp()+0x7a>
 801425e:	6803      	ldr	r3, [r0, #0]
 8014260:	7961      	ldrb	r1, [r4, #5]
 8014262:	699b      	ldr	r3, [r3, #24]
 8014264:	4798      	blx	r3
 8014266:	4628      	mov	r0, r5
 8014268:	f001 facc 	bl	8015804 <NetworkDisplay::ShowIp()>
 801426c:	4628      	mov	r0, r5
 801426e:	f001 facf 	bl	8015810 <NetworkDisplay::ShowNetMask()>
 8014272:	4628      	mov	r0, r5
 8014274:	f001 fad2 	bl	801581c <NetworkDisplay::ShowGatewayIp()>
 8014278:	7960      	ldrb	r0, [r4, #5]
 801427a:	b005      	add	sp, #20
 801427c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801427e:	2102      	movs	r1, #2
 8014280:	e7d2      	b.n	8014228 <Network::EnableDhcp()+0x3c>
 8014282:	bf00      	nop
 8014284:	2001d99c 	mulcs	r1, ip, r9

08014288 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>:
 8014288:	b109      	cbz	r1, 801428e <Network::SetQueuedStaticIp(unsigned int, unsigned int)+0x6>
 801428a:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
 801428e:	b10a      	cbz	r2, 8014294 <Network::SetQueuedStaticIp(unsigned int, unsigned int)+0xc>
 8014290:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
 8014294:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8014298:	f043 0303 	orr.w	r3, r3, #3
 801429c:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
 80142a0:	4770      	bx	lr

080142a2 <Network::ApplyQueuedConfig()>:
 80142a2:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 80142a6:	b510      	push	{r4, lr}
 80142a8:	4604      	mov	r4, r0
 80142aa:	b3c3      	cbz	r3, 801431e <Network::ApplyQueuedConfig()+0x7c>
 80142ac:	079a      	lsls	r2, r3, #30
 80142ae:	d01a      	beq.n	80142e6 <Network::ApplyQueuedConfig()+0x44>
 80142b0:	079b      	lsls	r3, r3, #30
 80142b2:	d509      	bpl.n	80142c8 <Network::ApplyQueuedConfig()+0x26>
 80142b4:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
 80142b8:	f7ff ff2a 	bl	8014110 <Network::SetNetmask(unsigned int)>
 80142bc:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 80142c0:	f023 0302 	bic.w	r3, r3, #2
 80142c4:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 80142c8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 80142cc:	07d9      	lsls	r1, r3, #31
 80142ce:	d50a      	bpl.n	80142e6 <Network::ApplyQueuedConfig()+0x44>
 80142d0:	4620      	mov	r0, r4
 80142d2:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 80142d6:	f7ff feed 	bl	80140b4 <Network::SetIp(unsigned int)>
 80142da:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 80142de:	f023 0301 	bic.w	r3, r3, #1
 80142e2:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 80142e6:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 80142ea:	075a      	lsls	r2, r3, #29
 80142ec:	d508      	bpl.n	8014300 <Network::ApplyQueuedConfig()+0x5e>
 80142ee:	4620      	mov	r0, r4
 80142f0:	f7ff ff7c 	bl	80141ec <Network::EnableDhcp()>
 80142f4:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 80142f8:	f023 0304 	bic.w	r3, r3, #4
 80142fc:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8014300:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8014304:	071b      	lsls	r3, r3, #28
 8014306:	d508      	bpl.n	801431a <Network::ApplyQueuedConfig()+0x78>
 8014308:	4620      	mov	r0, r4
 801430a:	f7ff ff4d 	bl	80141a8 <Network::SetZeroconf()>
 801430e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8014312:	f023 0308 	bic.w	r3, r3, #8
 8014316:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 801431a:	2001      	movs	r0, #1
 801431c:	e000      	b.n	8014320 <Network::ApplyQueuedConfig()+0x7e>
 801431e:	4618      	mov	r0, r3
 8014320:	bd10      	pop	{r4, pc}
	...

08014324 <Network::Print()>:
 8014324:	b530      	push	{r4, r5, lr}
 8014326:	4604      	mov	r4, r0
 8014328:	b085      	sub	sp, #20
 801432a:	4832      	ldr	r0, [pc, #200]	; (80143f4 <Network::Print()+0xd0>)
 801432c:	f7f5 fa48 	bl	80097c0 <printf>
 8014330:	f104 0120 	add.w	r1, r4, #32
 8014334:	4830      	ldr	r0, [pc, #192]	; (80143f8 <Network::Print()+0xd4>)
 8014336:	f7f5 fa43 	bl	80097c0 <printf>
 801433a:	68a1      	ldr	r1, [r4, #8]
 801433c:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
 8014340:	482e      	ldr	r0, [pc, #184]	; (80143fc <Network::Print()+0xd8>)
 8014342:	f7f5 fa3d 	bl	80097c0 <printf>
 8014346:	69e0      	ldr	r0, [r4, #28]
 8014348:	f004 fc2e 	bl	8018ba8 <__popcountsi2>
 801434c:	6965      	ldr	r5, [r4, #20]
 801434e:	9001      	str	r0, [sp, #4]
 8014350:	0e2b      	lsrs	r3, r5, #24
 8014352:	9300      	str	r3, [sp, #0]
 8014354:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8014358:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801435c:	b2e9      	uxtb	r1, r5
 801435e:	4828      	ldr	r0, [pc, #160]	; (8014400 <Network::Print()+0xdc>)
 8014360:	f7f5 fa2e 	bl	80097c0 <printf>
 8014364:	69e1      	ldr	r1, [r4, #28]
 8014366:	4827      	ldr	r0, [pc, #156]	; (8014404 <Network::Print()+0xe0>)
 8014368:	0e0b      	lsrs	r3, r1, #24
 801436a:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801436e:	9300      	str	r3, [sp, #0]
 8014370:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8014374:	b2c9      	uxtb	r1, r1
 8014376:	f7f5 fa23 	bl	80097c0 <printf>
 801437a:	69a1      	ldr	r1, [r4, #24]
 801437c:	4822      	ldr	r0, [pc, #136]	; (8014408 <Network::Print()+0xe4>)
 801437e:	0e0b      	lsrs	r3, r1, #24
 8014380:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8014384:	9300      	str	r3, [sp, #0]
 8014386:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801438a:	b2c9      	uxtb	r1, r1
 801438c:	f7f5 fa18 	bl	80097c0 <printf>
 8014390:	69e3      	ldr	r3, [r4, #28]
 8014392:	6961      	ldr	r1, [r4, #20]
 8014394:	481d      	ldr	r0, [pc, #116]	; (801440c <Network::Print()+0xe8>)
 8014396:	ea61 0103 	orn	r1, r1, r3
 801439a:	0e0b      	lsrs	r3, r1, #24
 801439c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80143a0:	9300      	str	r3, [sp, #0]
 80143a2:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80143a6:	b2c9      	uxtb	r1, r1
 80143a8:	f7f5 fa0a 	bl	80097c0 <printf>
 80143ac:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 80143b0:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 80143b4:	9302      	str	r3, [sp, #8]
 80143b6:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 80143ba:	f894 10a0 	ldrb.w	r1, [r4, #160]	; 0xa0
 80143be:	9301      	str	r3, [sp, #4]
 80143c0:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 80143c4:	4812      	ldr	r0, [pc, #72]	; (8014410 <Network::Print()+0xec>)
 80143c6:	9300      	str	r3, [sp, #0]
 80143c8:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 80143cc:	f7f5 f9f8 	bl	80097c0 <printf>
 80143d0:	4b10      	ldr	r3, [pc, #64]	; (8014414 <Network::Print()+0xf0>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	79da      	ldrb	r2, [r3, #7]
 80143d6:	b952      	cbnz	r2, 80143ee <Network::Print()+0xca>
 80143d8:	795b      	ldrb	r3, [r3, #5]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	bf14      	ite	ne
 80143de:	2144      	movne	r1, #68	; 0x44
 80143e0:	2153      	moveq	r1, #83	; 0x53
 80143e2:	480d      	ldr	r0, [pc, #52]	; (8014418 <Network::Print()+0xf4>)
 80143e4:	b005      	add	sp, #20
 80143e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80143ea:	f7f5 b9e9 	b.w	80097c0 <printf>
 80143ee:	215a      	movs	r1, #90	; 0x5a
 80143f0:	e7f7      	b.n	80143e2 <Network::Print()+0xbe>
 80143f2:	bf00      	nop
 80143f4:	0801b65a 	stmdaeq	r1, {r1, r3, r4, r6, r9, sl, ip, sp, pc}
 80143f8:	0801b663 	stmdaeq	r1, {r0, r1, r5, r6, r9, sl, ip, sp, pc}
 80143fc:	0801b674 	stmdaeq	r1, {r2, r4, r5, r6, r9, sl, ip, sp, pc}
 8014400:	0801b689 	stmdaeq	r1, {r0, r3, r7, r9, sl, ip, sp, pc}
 8014404:	0801b6a6 	stmdaeq	r1, {r1, r2, r5, r7, r9, sl, ip, sp, pc}
 8014408:	0801b6c0 	stmdaeq	r1, {r6, r7, r9, sl, ip, sp, pc}
 801440c:	0801b6da 	stmdaeq	r1, {r1, r3, r4, r6, r7, r9, sl, ip, sp, pc}
 8014410:	0801b6f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r9, sl, ip, sp, pc}
 8014414:	2001d2d4 	ldrdcs	sp, [r1], -r4
 8014418:	0801b720 	stmdaeq	r1, {r5, r8, r9, sl, ip, sp, pc}

0801441c <Network::TcpBegin(unsigned short)>:
 801441c:	4608      	mov	r0, r1
 801441e:	f7fe beb7 	b.w	8013190 <tcp_begin>

08014422 <Network::TcpRead(int, unsigned char const**)>:
 8014422:	4608      	mov	r0, r1
 8014424:	4611      	mov	r1, r2
 8014426:	f7fe bef1 	b.w	801320c <tcp_read>

0801442a <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 801442a:	4608      	mov	r0, r1
 801442c:	4611      	mov	r1, r2
 801442e:	461a      	mov	r2, r3
 8014430:	f7fe bec8 	b.w	80131c4 <tcp_write>

08014434 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 8014434:	b510      	push	{r4, lr}
 8014436:	225e      	movs	r2, #94	; 0x5e
 8014438:	4604      	mov	r4, r0
 801443a:	f840 1b04 	str.w	r1, [r0], #4
 801443e:	2100      	movs	r1, #0
 8014440:	f002 f9dc 	bl	80167fc <memset>
 8014444:	2301      	movs	r3, #1
 8014446:	4620      	mov	r0, r4
 8014448:	7623      	strb	r3, [r4, #24]
 801444a:	bd10      	pop	{r4, pc}

0801444c <NetworkParams::Load()>:
 801444c:	b508      	push	{r3, lr}
 801444e:	2300      	movs	r3, #0
 8014450:	4601      	mov	r1, r0
 8014452:	6043      	str	r3, [r0, #4]
 8014454:	6800      	ldr	r0, [r0, #0]
 8014456:	b120      	cbz	r0, 8014462 <NetworkParams::Load()+0x16>
 8014458:	6803      	ldr	r3, [r0, #0]
 801445a:	3104      	adds	r1, #4
 801445c:	68db      	ldr	r3, [r3, #12]
 801445e:	4798      	blx	r3
 8014460:	2001      	movs	r0, #1
 8014462:	bd08      	pop	{r3, pc}

08014464 <NetworkParams::Load(char const*, unsigned int)>:
 8014464:	6803      	ldr	r3, [r0, #0]
 8014466:	b1d3      	cbz	r3, 801449e <NetworkParams::Load(char const*, unsigned int)+0x3a>
 8014468:	2300      	movs	r3, #0
 801446a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801446c:	460d      	mov	r5, r1
 801446e:	4616      	mov	r6, r2
 8014470:	4604      	mov	r4, r0
 8014472:	6043      	str	r3, [r0, #4]
 8014474:	4602      	mov	r2, r0
 8014476:	490a      	ldr	r1, [pc, #40]	; (80144a0 <NetworkParams::Load(char const*, unsigned int)+0x3c>)
 8014478:	4668      	mov	r0, sp
 801447a:	f001 fb39 	bl	8015af0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 801447e:	4632      	mov	r2, r6
 8014480:	4629      	mov	r1, r5
 8014482:	4668      	mov	r0, sp
 8014484:	f001 fb38 	bl	8015af8 <ReadConfigFile::Read(char const*, unsigned int)>
 8014488:	4621      	mov	r1, r4
 801448a:	f851 0b04 	ldr.w	r0, [r1], #4
 801448e:	6803      	ldr	r3, [r0, #0]
 8014490:	689b      	ldr	r3, [r3, #8]
 8014492:	4798      	blx	r3
 8014494:	4668      	mov	r0, sp
 8014496:	f001 fb2e 	bl	8015af6 <ReadConfigFile::~ReadConfigFile()>
 801449a:	b002      	add	sp, #8
 801449c:	bd70      	pop	{r4, r5, r6, pc}
 801449e:	4770      	bx	lr
 80144a0:	080145c5 	stmdaeq	r1, {r0, r2, r6, r7, r8, sl, lr}

080144a4 <NetworkParams::callbackFunction(char const*)>:
 80144a4:	b530      	push	{r4, r5, lr}
 80144a6:	460d      	mov	r5, r1
 80144a8:	b085      	sub	sp, #20
 80144aa:	4604      	mov	r4, r0
 80144ac:	493f      	ldr	r1, [pc, #252]	; (80145ac <NetworkParams::callbackFunction(char const*)+0x108>)
 80144ae:	4628      	mov	r0, r5
 80144b0:	f10d 0207 	add.w	r2, sp, #7
 80144b4:	f001 fc58 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80144b8:	b978      	cbnz	r0, 80144da <NetworkParams::callbackFunction(char const*)+0x36>
 80144ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80144be:	6863      	ldr	r3, [r4, #4]
 80144c0:	b142      	cbz	r2, 80144d4 <NetworkParams::callbackFunction(char const*)+0x30>
 80144c2:	f023 0301 	bic.w	r3, r3, #1
 80144c6:	3a00      	subs	r2, #0
 80144c8:	bf18      	it	ne
 80144ca:	2201      	movne	r2, #1
 80144cc:	6063      	str	r3, [r4, #4]
 80144ce:	7622      	strb	r2, [r4, #24]
 80144d0:	b005      	add	sp, #20
 80144d2:	bd30      	pop	{r4, r5, pc}
 80144d4:	f043 0301 	orr.w	r3, r3, #1
 80144d8:	e7f5      	b.n	80144c6 <NetworkParams::callbackFunction(char const*)+0x22>
 80144da:	4628      	mov	r0, r5
 80144dc:	4934      	ldr	r1, [pc, #208]	; (80145b0 <NetworkParams::callbackFunction(char const*)+0x10c>)
 80144de:	f10d 0207 	add.w	r2, sp, #7
 80144e2:	f001 fc41 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80144e6:	b980      	cbnz	r0, 801450a <NetworkParams::callbackFunction(char const*)+0x66>
 80144e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80144ec:	6863      	ldr	r3, [r4, #4]
 80144ee:	1e51      	subs	r1, r2, #1
 80144f0:	2904      	cmp	r1, #4
 80144f2:	bf97      	itett	ls
 80144f4:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 80144f8:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 80144fc:	6063      	strls	r3, [r4, #4]
 80144fe:	f884 2061 	strbls.w	r2, [r4, #97]	; 0x61
 8014502:	bf84      	itt	hi
 8014504:	6063      	strhi	r3, [r4, #4]
 8014506:	f884 0061 	strbhi.w	r0, [r4, #97]	; 0x61
 801450a:	4628      	mov	r0, r5
 801450c:	4929      	ldr	r1, [pc, #164]	; (80145b4 <NetworkParams::callbackFunction(char const*)+0x110>)
 801450e:	aa02      	add	r2, sp, #8
 8014510:	f001 fba2 	bl	8015c58 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8014514:	b9c8      	cbnz	r0, 801454a <NetworkParams::callbackFunction(char const*)+0xa6>
 8014516:	9b02      	ldr	r3, [sp, #8]
 8014518:	b2d9      	uxtb	r1, r3
 801451a:	29ac      	cmp	r1, #172	; 0xac
 801451c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014520:	d009      	beq.n	8014536 <NetworkParams::callbackFunction(char const*)+0x92>
 8014522:	29c0      	cmp	r1, #192	; 0xc0
 8014524:	d00b      	beq.n	801453e <NetworkParams::callbackFunction(char const*)+0x9a>
 8014526:	290a      	cmp	r1, #10
 8014528:	d10c      	bne.n	8014544 <NetworkParams::callbackFunction(char const*)+0xa0>
 801452a:	60a3      	str	r3, [r4, #8]
 801452c:	6863      	ldr	r3, [r4, #4]
 801452e:	f043 0302 	orr.w	r3, r3, #2
 8014532:	6063      	str	r3, [r4, #4]
 8014534:	e7cc      	b.n	80144d0 <NetworkParams::callbackFunction(char const*)+0x2c>
 8014536:	3a10      	subs	r2, #16
 8014538:	2a0f      	cmp	r2, #15
 801453a:	d8c9      	bhi.n	80144d0 <NetworkParams::callbackFunction(char const*)+0x2c>
 801453c:	e7f5      	b.n	801452a <NetworkParams::callbackFunction(char const*)+0x86>
 801453e:	2aa8      	cmp	r2, #168	; 0xa8
 8014540:	d1c6      	bne.n	80144d0 <NetworkParams::callbackFunction(char const*)+0x2c>
 8014542:	e7f2      	b.n	801452a <NetworkParams::callbackFunction(char const*)+0x86>
 8014544:	2b00      	cmp	r3, #0
 8014546:	d0f0      	beq.n	801452a <NetworkParams::callbackFunction(char const*)+0x86>
 8014548:	e7c2      	b.n	80144d0 <NetworkParams::callbackFunction(char const*)+0x2c>
 801454a:	4628      	mov	r0, r5
 801454c:	491a      	ldr	r1, [pc, #104]	; (80145b8 <NetworkParams::callbackFunction(char const*)+0x114>)
 801454e:	aa02      	add	r2, sp, #8
 8014550:	f001 fb82 	bl	8015c58 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8014554:	b960      	cbnz	r0, 8014570 <NetworkParams::callbackFunction(char const*)+0xcc>
 8014556:	9b02      	ldr	r3, [sp, #8]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d0b9      	beq.n	80144d0 <NetworkParams::callbackFunction(char const*)+0x2c>
 801455c:	ba1a      	rev	r2, r3
 801455e:	43d1      	mvns	r1, r2
 8014560:	ea12 0251 	ands.w	r2, r2, r1, lsr #1
 8014564:	d1b4      	bne.n	80144d0 <NetworkParams::callbackFunction(char const*)+0x2c>
 8014566:	60e3      	str	r3, [r4, #12]
 8014568:	6863      	ldr	r3, [r4, #4]
 801456a:	f043 0304 	orr.w	r3, r3, #4
 801456e:	e7e0      	b.n	8014532 <NetworkParams::callbackFunction(char const*)+0x8e>
 8014570:	4628      	mov	r0, r5
 8014572:	4912      	ldr	r1, [pc, #72]	; (80145bc <NetworkParams::callbackFunction(char const*)+0x118>)
 8014574:	aa02      	add	r2, sp, #8
 8014576:	f001 fb6f 	bl	8015c58 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 801457a:	b928      	cbnz	r0, 8014588 <NetworkParams::callbackFunction(char const*)+0xe4>
 801457c:	9b02      	ldr	r3, [sp, #8]
 801457e:	6123      	str	r3, [r4, #16]
 8014580:	6863      	ldr	r3, [r4, #4]
 8014582:	f043 0308 	orr.w	r3, r3, #8
 8014586:	e7d4      	b.n	8014532 <NetworkParams::callbackFunction(char const*)+0x8e>
 8014588:	233f      	movs	r3, #63	; 0x3f
 801458a:	4628      	mov	r0, r5
 801458c:	9303      	str	r3, [sp, #12]
 801458e:	490c      	ldr	r1, [pc, #48]	; (80145c0 <NetworkParams::callbackFunction(char const*)+0x11c>)
 8014590:	ab03      	add	r3, sp, #12
 8014592:	f104 0219 	add.w	r2, r4, #25
 8014596:	f001 fae3 	bl	8015b60 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 801459a:	2800      	cmp	r0, #0
 801459c:	d198      	bne.n	80144d0 <NetworkParams::callbackFunction(char const*)+0x2c>
 801459e:	9b03      	ldr	r3, [sp, #12]
 80145a0:	4423      	add	r3, r4
 80145a2:	7658      	strb	r0, [r3, #25]
 80145a4:	6863      	ldr	r3, [r4, #4]
 80145a6:	f043 0320 	orr.w	r3, r3, #32
 80145aa:	e7c2      	b.n	8014532 <NetworkParams::callbackFunction(char const*)+0x8e>
 80145ac:	0801b778 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, sl, ip, sp, pc}
 80145b0:	0801b756 	stmdaeq	r1, {r1, r2, r4, r6, r8, r9, sl, ip, sp, pc}
 80145b4:	0801b73b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, r9, sl, ip, sp, pc}
 80145b8:	0801b76f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, pc}
 80145bc:	0801b746 	stmdaeq	r1, {r1, r2, r6, r8, r9, sl, ip, sp, pc}
 80145c0:	0801b766 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, sl, ip, sp, pc}

080145c4 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 80145c4:	f7ff bf6e 	b.w	80144a4 <NetworkParams::callbackFunction(char const*)>

080145c8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>:
 80145c8:	b570      	push	{r4, r5, r6, lr}
 80145ca:	4604      	mov	r4, r0
 80145cc:	4615      	mov	r5, r2
 80145ce:	461e      	mov	r6, r3
 80145d0:	b086      	sub	sp, #24
 80145d2:	3004      	adds	r0, #4
 80145d4:	2900      	cmp	r1, #0
 80145d6:	d02b      	beq.n	8014630 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x68>
 80145d8:	225e      	movs	r2, #94	; 0x5e
 80145da:	f002 f8f8 	bl	80167ce <memmove>
 80145de:	462a      	mov	r2, r5
 80145e0:	4633      	mov	r3, r6
 80145e2:	4970      	ldr	r1, [pc, #448]	; (80147a4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>)
 80145e4:	a803      	add	r0, sp, #12
 80145e6:	f001 f9e3 	bl	80159b0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 80145ea:	6863      	ldr	r3, [r4, #4]
 80145ec:	079a      	lsls	r2, r3, #30
 80145ee:	bf5f      	itttt	pl
 80145f0:	4a6d      	ldrpl	r2, [pc, #436]	; (80147a8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80145f2:	6812      	ldrpl	r2, [r2, #0]
 80145f4:	6952      	ldrpl	r2, [r2, #20]
 80145f6:	60a2      	strpl	r2, [r4, #8]
 80145f8:	075e      	lsls	r6, r3, #29
 80145fa:	bf5f      	itttt	pl
 80145fc:	4a6a      	ldrpl	r2, [pc, #424]	; (80147a8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80145fe:	6812      	ldrpl	r2, [r2, #0]
 8014600:	69d2      	ldrpl	r2, [r2, #28]
 8014602:	60e2      	strpl	r2, [r4, #12]
 8014604:	071d      	lsls	r5, r3, #28
 8014606:	bf58      	it	pl
 8014608:	4a67      	ldrpl	r2, [pc, #412]	; (80147a8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 801460a:	f104 0519 	add.w	r5, r4, #25
 801460e:	bf5e      	ittt	pl
 8014610:	6812      	ldrpl	r2, [r2, #0]
 8014612:	6992      	ldrpl	r2, [r2, #24]
 8014614:	6122      	strpl	r2, [r4, #16]
 8014616:	0698      	lsls	r0, r3, #26
 8014618:	d418      	bmi.n	801464c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x84>
 801461a:	4628      	mov	r0, r5
 801461c:	223f      	movs	r2, #63	; 0x3f
 801461e:	4b62      	ldr	r3, [pc, #392]	; (80147a8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	331f      	adds	r3, #31
 8014624:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8014628:	b949      	cbnz	r1, 801463e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x76>
 801462a:	f002 f8e7 	bl	80167fc <memset>
 801462e:	e00a      	b.n	8014646 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 8014630:	6823      	ldr	r3, [r4, #0]
 8014632:	4601      	mov	r1, r0
 8014634:	681a      	ldr	r2, [r3, #0]
 8014636:	4618      	mov	r0, r3
 8014638:	68d2      	ldr	r2, [r2, #12]
 801463a:	4790      	blx	r2
 801463c:	e7cf      	b.n	80145de <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 801463e:	3a01      	subs	r2, #1
 8014640:	f800 1b01 	strb.w	r1, [r0], #1
 8014644:	d1ee      	bne.n	8014624 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x5c>
 8014646:	2300      	movs	r3, #0
 8014648:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801464c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8014650:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 8014654:	7e23      	ldrb	r3, [r4, #24]
 8014656:	42b2      	cmp	r2, r6
 8014658:	6861      	ldr	r1, [r4, #4]
 801465a:	d21a      	bcs.n	8014692 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xca>
 801465c:	9803      	ldr	r0, [sp, #12]
 801465e:	07c9      	lsls	r1, r1, #31
 8014660:	4410      	add	r0, r2
 8014662:	eba6 0602 	sub.w	r6, r6, r2
 8014666:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801466a:	d404      	bmi.n	8014676 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xae>
 801466c:	b922      	cbnz	r2, 8014678 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb0>
 801466e:	9300      	str	r3, [sp, #0]
 8014670:	4a4e      	ldr	r2, [pc, #312]	; (80147ac <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 8014672:	4b4f      	ldr	r3, [pc, #316]	; (80147b0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8014674:	e003      	b.n	801467e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb6>
 8014676:	b312      	cbz	r2, 80146be <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xf6>
 8014678:	9300      	str	r3, [sp, #0]
 801467a:	4a4e      	ldr	r2, [pc, #312]	; (80147b4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 801467c:	4b4c      	ldr	r3, [pc, #304]	; (80147b0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 801467e:	4631      	mov	r1, r6
 8014680:	f7f5 f8c6 	bl	8009810 <snprintf>
 8014684:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014688:	4286      	cmp	r6, r0
 801468a:	bfa4      	itt	ge
 801468c:	181b      	addge	r3, r3, r0
 801468e:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8014692:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8014696:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 801469a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801469e:	42b2      	cmp	r2, r6
 80146a0:	6861      	ldr	r1, [r4, #4]
 80146a2:	d21f      	bcs.n	80146e4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>
 80146a4:	9803      	ldr	r0, [sp, #12]
 80146a6:	05c9      	lsls	r1, r1, #23
 80146a8:	4410      	add	r0, r2
 80146aa:	eba6 0602 	sub.w	r6, r6, r2
 80146ae:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80146b2:	d408      	bmi.n	80146c6 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xfe>
 80146b4:	b94a      	cbnz	r2, 80146ca <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x102>
 80146b6:	9300      	str	r3, [sp, #0]
 80146b8:	4a3c      	ldr	r2, [pc, #240]	; (80147ac <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 80146ba:	4b3f      	ldr	r3, [pc, #252]	; (80147b8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 80146bc:	e008      	b.n	80146d0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x108>
 80146be:	9300      	str	r3, [sp, #0]
 80146c0:	4a3e      	ldr	r2, [pc, #248]	; (80147bc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f4>)
 80146c2:	4b3b      	ldr	r3, [pc, #236]	; (80147b0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 80146c4:	e7db      	b.n	801467e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb6>
 80146c6:	2a00      	cmp	r2, #0
 80146c8:	d03c      	beq.n	8014744 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x17c>
 80146ca:	9300      	str	r3, [sp, #0]
 80146cc:	4a39      	ldr	r2, [pc, #228]	; (80147b4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 80146ce:	4b3a      	ldr	r3, [pc, #232]	; (80147b8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 80146d0:	4631      	mov	r1, r6
 80146d2:	f7f5 f89d 	bl	8009810 <snprintf>
 80146d6:	4286      	cmp	r6, r0
 80146d8:	bfa2      	ittt	ge
 80146da:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80146de:	18c0      	addge	r0, r0, r3
 80146e0:	f8ad 0012 	strhge.w	r0, [sp, #18]
 80146e4:	4936      	ldr	r1, [pc, #216]	; (80147c0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f8>)
 80146e6:	a803      	add	r0, sp, #12
 80146e8:	f001 f9e8 	bl	8015abc <PropertiesBuilder::AddComment(char const*)>
 80146ec:	6863      	ldr	r3, [r4, #4]
 80146ee:	68a2      	ldr	r2, [r4, #8]
 80146f0:	4934      	ldr	r1, [pc, #208]	; (80147c4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1fc>)
 80146f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80146f6:	a803      	add	r0, sp, #12
 80146f8:	f001 f99c 	bl	8015a34 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80146fc:	6863      	ldr	r3, [r4, #4]
 80146fe:	68e2      	ldr	r2, [r4, #12]
 8014700:	4931      	ldr	r1, [pc, #196]	; (80147c8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x200>)
 8014702:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8014706:	a803      	add	r0, sp, #12
 8014708:	f001 f994 	bl	8015a34 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 801470c:	6863      	ldr	r3, [r4, #4]
 801470e:	6922      	ldr	r2, [r4, #16]
 8014710:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8014714:	492d      	ldr	r1, [pc, #180]	; (80147cc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x204>)
 8014716:	a803      	add	r0, sp, #12
 8014718:	f001 f98c 	bl	8015a34 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 801471c:	6862      	ldr	r2, [r4, #4]
 801471e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014722:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8014726:	42a3      	cmp	r3, r4
 8014728:	d21e      	bcs.n	8014768 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1a0>
 801472a:	9803      	ldr	r0, [sp, #12]
 801472c:	0692      	lsls	r2, r2, #26
 801472e:	4418      	add	r0, r3
 8014730:	eba4 0403 	sub.w	r4, r4, r3
 8014734:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8014738:	d408      	bmi.n	801474c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x184>
 801473a:	b943      	cbnz	r3, 801474e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x186>
 801473c:	4b24      	ldr	r3, [pc, #144]	; (80147d0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 801473e:	4a25      	ldr	r2, [pc, #148]	; (80147d4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x20c>)
 8014740:	9500      	str	r5, [sp, #0]
 8014742:	e007      	b.n	8014754 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18c>
 8014744:	9300      	str	r3, [sp, #0]
 8014746:	4a1d      	ldr	r2, [pc, #116]	; (80147bc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8014748:	4b1b      	ldr	r3, [pc, #108]	; (80147b8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 801474a:	e7c1      	b.n	80146d0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x108>
 801474c:	b32b      	cbz	r3, 801479a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1d2>
 801474e:	4b20      	ldr	r3, [pc, #128]	; (80147d0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 8014750:	4a21      	ldr	r2, [pc, #132]	; (80147d8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x210>)
 8014752:	9500      	str	r5, [sp, #0]
 8014754:	4621      	mov	r1, r4
 8014756:	f7f5 f85b 	bl	8009810 <snprintf>
 801475a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801475e:	4284      	cmp	r4, r0
 8014760:	bfa4      	itt	ge
 8014762:	181b      	addge	r3, r3, r0
 8014764:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8014768:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801476c:	b17b      	cbz	r3, 801478e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1c6>
 801476e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8014772:	9b03      	ldr	r3, [sp, #12]
 8014774:	4413      	add	r3, r2
 8014776:	227d      	movs	r2, #125	; 0x7d
 8014778:	f803 2c01 	strb.w	r2, [r3, #-1]
 801477c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014780:	9903      	ldr	r1, [sp, #12]
 8014782:	54ca      	strb	r2, [r1, r3]
 8014784:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014788:	3301      	adds	r3, #1
 801478a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801478e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8014792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014794:	601a      	str	r2, [r3, #0]
 8014796:	b006      	add	sp, #24
 8014798:	bd70      	pop	{r4, r5, r6, pc}
 801479a:	4b0d      	ldr	r3, [pc, #52]	; (80147d0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 801479c:	4a0f      	ldr	r2, [pc, #60]	; (80147dc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x214>)
 801479e:	9500      	str	r5, [sp, #0]
 80147a0:	e7d8      	b.n	8014754 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18c>
 80147a2:	bf00      	nop
 80147a4:	0801b781 	stmdaeq	r1, {r0, r7, r8, r9, sl, ip, sp, pc}
 80147a8:	2001d2d4 	ldrdcs	sp, [r1], -r4
 80147ac:	08019181 	stmdaeq	r1, {r0, r7, r8, ip, pc}
 80147b0:	0801b778 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, sl, ip, sp, pc}
 80147b4:	08019178 	stmdaeq	r1, {r3, r4, r5, r6, r8, ip, pc}
 80147b8:	0801b756 	stmdaeq	r1, {r1, r2, r4, r6, r8, r9, sl, ip, sp, pc}
 80147bc:	08019182 	stmdaeq	r1, {r1, r7, r8, ip, pc}
 80147c0:	0801b731 	stmdaeq	r1, {r0, r4, r5, r8, r9, sl, ip, sp, pc}
 80147c4:	0801b73b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, r9, sl, ip, sp, pc}
 80147c8:	0801b76f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, pc}
 80147cc:	0801b746 	stmdaeq	r1, {r1, r2, r6, r8, r9, sl, ip, sp, pc}
 80147d0:	0801b766 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, sl, ip, sp, pc}
 80147d4:	08019194 	stmdaeq	r1, {r2, r4, r7, r8, ip, pc}
 80147d8:	08019189 	stmdaeq	r1, {r0, r3, r7, r8, ip, pc}
 80147dc:	08019195 	stmdaeq	r1, {r0, r2, r4, r7, r8, ip, pc}

080147e0 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 80147e0:	b513      	push	{r0, r1, r4, lr}
 80147e2:	6804      	ldr	r4, [r0, #0]
 80147e4:	b914      	cbnz	r4, 80147ec <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 80147e6:	601c      	str	r4, [r3, #0]
 80147e8:	b002      	add	sp, #8
 80147ea:	bd10      	pop	{r4, pc}
 80147ec:	9300      	str	r3, [sp, #0]
 80147ee:	4613      	mov	r3, r2
 80147f0:	460a      	mov	r2, r1
 80147f2:	2100      	movs	r1, #0
 80147f4:	f7ff fee8 	bl	80145c8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>
 80147f8:	e7f6      	b.n	80147e8 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

080147fa <NetworkParams::Dump()>:
 80147fa:	4770      	bx	lr

080147fc <memcpy.isra.0>:
 80147fc:	3801      	subs	r0, #1
 80147fe:	440a      	add	r2, r1
 8014800:	4291      	cmp	r1, r2
 8014802:	d100      	bne.n	8014806 <memcpy.isra.0+0xa>
 8014804:	4770      	bx	lr
 8014806:	f811 3b01 	ldrb.w	r3, [r1], #1
 801480a:	f800 3f01 	strb.w	r3, [r0, #1]!
 801480e:	e7f7      	b.n	8014800 <memcpy.isra.0+0x4>

08014810 <arp_announce>:
 8014810:	4803      	ldr	r0, [pc, #12]	; (8014820 <arp_announce+0x10>)
 8014812:	69c3      	ldr	r3, [r0, #28]
 8014814:	b113      	cbz	r3, 801481c <arp_announce+0xc>
 8014816:	212a      	movs	r1, #42	; 0x2a
 8014818:	f003 b86c 	b.w	80178f4 <emac_eth_send>
 801481c:	4770      	bx	lr
 801481e:	bf00      	nop
 8014820:	2001d2d8 	ldrdcs	sp, [r1], -r8

08014824 <arp_handle_request>:
 8014824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014826:	2204      	movs	r2, #4
 8014828:	f100 0126 	add.w	r1, r0, #38	; 0x26
 801482c:	4604      	mov	r4, r0
 801482e:	eb0d 0002 	add.w	r0, sp, r2
 8014832:	f7ff ffe3 	bl	80147fc <memcpy.isra.0>
 8014836:	4b0d      	ldr	r3, [pc, #52]	; (801486c <arp_handle_request+0x48>)
 8014838:	9a01      	ldr	r2, [sp, #4]
 801483a:	69db      	ldr	r3, [r3, #28]
 801483c:	429a      	cmp	r2, r3
 801483e:	d113      	bne.n	8014868 <arp_handle_request+0x44>
 8014840:	2206      	movs	r2, #6
 8014842:	4d0b      	ldr	r5, [pc, #44]	; (8014870 <arp_handle_request+0x4c>)
 8014844:	18a1      	adds	r1, r4, r2
 8014846:	4628      	mov	r0, r5
 8014848:	f7ff ffd8 	bl	80147fc <memcpy.isra.0>
 801484c:	f104 0116 	add.w	r1, r4, #22
 8014850:	f105 0020 	add.w	r0, r5, #32
 8014854:	2206      	movs	r2, #6
 8014856:	f7ff ffd1 	bl	80147fc <memcpy.isra.0>
 801485a:	69e3      	ldr	r3, [r4, #28]
 801485c:	212a      	movs	r1, #42	; 0x2a
 801485e:	4628      	mov	r0, r5
 8014860:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 8014864:	f003 f846 	bl	80178f4 <emac_eth_send>
 8014868:	b003      	add	sp, #12
 801486a:	bd30      	pop	{r4, r5, pc}
 801486c:	2001d2d8 	ldrdcs	sp, [r1], -r8
 8014870:	2001d304 	andcs	sp, r1, r4, lsl #6

08014874 <arp_handle_reply>:
 8014874:	69c1      	ldr	r1, [r0, #28]
 8014876:	3016      	adds	r0, #22
 8014878:	f000 b80a 	b.w	8014890 <arp_cache_update>

0801487c <arp_send_request>:
 801487c:	4b03      	ldr	r3, [pc, #12]	; (801488c <arp_send_request+0x10>)
 801487e:	212a      	movs	r1, #42	; 0x2a
 8014880:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 8014884:	4618      	mov	r0, r3
 8014886:	f003 b835 	b.w	80178f4 <emac_eth_send>
 801488a:	bf00      	nop
 801488c:	2001d330 	andcs	sp, r1, r0, lsr r3

08014890 <arp_cache_update>:
 8014890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014892:	4e11      	ldr	r6, [pc, #68]	; (80148d8 <arp_cache_update+0x48>)
 8014894:	8833      	ldrh	r3, [r6, #0]
 8014896:	2b20      	cmp	r3, #32
 8014898:	d018      	beq.n	80148cc <arp_cache_update+0x3c>
 801489a:	2400      	movs	r4, #0
 801489c:	220c      	movs	r2, #12
 801489e:	4d0f      	ldr	r5, [pc, #60]	; (80148dc <arp_cache_update+0x4c>)
 80148a0:	b2a7      	uxth	r7, r4
 80148a2:	42bb      	cmp	r3, r7
 80148a4:	d80b      	bhi.n	80148be <arp_cache_update+0x2e>
 80148a6:	fb02 5203 	mla	r2, r2, r3, r5
 80148aa:	1d84      	adds	r4, r0, #6
 80148ac:	3203      	adds	r2, #3
 80148ae:	42a0      	cmp	r0, r4
 80148b0:	d10d      	bne.n	80148ce <arp_cache_update+0x3e>
 80148b2:	220c      	movs	r2, #12
 80148b4:	435a      	muls	r2, r3
 80148b6:	3301      	adds	r3, #1
 80148b8:	50a9      	str	r1, [r5, r2]
 80148ba:	8033      	strh	r3, [r6, #0]
 80148bc:	e006      	b.n	80148cc <arp_cache_update+0x3c>
 80148be:	3401      	adds	r4, #1
 80148c0:	fb02 5704 	mla	r7, r2, r4, r5
 80148c4:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 80148c8:	428f      	cmp	r7, r1
 80148ca:	d1e9      	bne.n	80148a0 <arp_cache_update+0x10>
 80148cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148ce:	f810 7b01 	ldrb.w	r7, [r0], #1
 80148d2:	f802 7f01 	strb.w	r7, [r2, #1]!
 80148d6:	e7ea      	b.n	80148ae <arp_cache_update+0x1e>
 80148d8:	2001d4dc 	ldrdcs	sp, [r1], -ip
 80148dc:	2001d35c 	andcs	sp, r1, ip, asr r3

080148e0 <arp_cache_lookup>:
 80148e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148e4:	2200      	movs	r2, #0
 80148e6:	4606      	mov	r6, r0
 80148e8:	460c      	mov	r4, r1
 80148ea:	200c      	movs	r0, #12
 80148ec:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8014974 <arp_cache_lookup+0x94>
 80148f0:	fb00 f302 	mul.w	r3, r0, r2
 80148f4:	f853 1008 	ldr.w	r1, [r3, r8]
 80148f8:	42b1      	cmp	r1, r6
 80148fa:	d10d      	bne.n	8014918 <arp_cache_lookup+0x38>
 80148fc:	3304      	adds	r3, #4
 80148fe:	4443      	add	r3, r8
 8014900:	3c01      	subs	r4, #1
 8014902:	1d9a      	adds	r2, r3, #6
 8014904:	4293      	cmp	r3, r2
 8014906:	d102      	bne.n	801490e <arp_cache_lookup+0x2e>
 8014908:	4630      	mov	r0, r6
 801490a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801490e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8014912:	f804 1f01 	strb.w	r1, [r4, #1]!
 8014916:	e7f5      	b.n	8014904 <arp_cache_lookup+0x24>
 8014918:	b111      	cbz	r1, 8014920 <arp_cache_lookup+0x40>
 801491a:	3201      	adds	r2, #1
 801491c:	2a20      	cmp	r2, #32
 801491e:	d1e7      	bne.n	80148f0 <arp_cache_lookup+0x10>
 8014920:	2704      	movs	r7, #4
 8014922:	f8df a054 	ldr.w	sl, [pc, #84]	; 8014978 <arp_cache_lookup+0x98>
 8014926:	f8ba 5000 	ldrh.w	r5, [sl]
 801492a:	3f01      	subs	r7, #1
 801492c:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8014930:	d101      	bne.n	8014936 <arp_cache_lookup+0x56>
 8014932:	463e      	mov	r6, r7
 8014934:	e7e8      	b.n	8014908 <arp_cache_lookup+0x28>
 8014936:	4630      	mov	r0, r6
 8014938:	f7ff ffa0 	bl	801487c <arp_send_request>
 801493c:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 8014940:	f1b9 0901 	subs.w	r9, r9, #1
 8014944:	f8ba 3000 	ldrh.w	r3, [sl]
 8014948:	d011      	beq.n	801496e <arp_cache_lookup+0x8e>
 801494a:	429d      	cmp	r5, r3
 801494c:	d00c      	beq.n	8014968 <arp_cache_lookup+0x88>
 801494e:	230c      	movs	r3, #12
 8014950:	fb03 8505 	mla	r5, r3, r5, r8
 8014954:	3c01      	subs	r4, #1
 8014956:	1d2b      	adds	r3, r5, #4
 8014958:	350a      	adds	r5, #10
 801495a:	42ab      	cmp	r3, r5
 801495c:	d0d4      	beq.n	8014908 <arp_cache_lookup+0x28>
 801495e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014962:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014966:	e7f8      	b.n	801495a <arp_cache_lookup+0x7a>
 8014968:	f7f2 fe06 	bl	8007578 <net_handle>
 801496c:	e7e8      	b.n	8014940 <arp_cache_lookup+0x60>
 801496e:	429d      	cmp	r5, r3
 8014970:	d0db      	beq.n	801492a <arp_cache_lookup+0x4a>
 8014972:	e7ec      	b.n	801494e <arp_cache_lookup+0x6e>
 8014974:	2001d35c 	andcs	sp, r1, ip, asr r3
 8014978:	2001d4dc 	ldrdcs	sp, [r1], -ip

0801497c <_parse_response>:
 801497c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014980:	2400      	movs	r4, #0
 8014982:	460d      	mov	r5, r1
 8014984:	46a3      	mov	fp, r4
 8014986:	4627      	mov	r7, r4
 8014988:	46a2      	mov	sl, r4
 801498a:	46a1      	mov	r9, r4
 801498c:	46a0      	mov	r8, r4
 801498e:	4e50      	ldr	r6, [pc, #320]	; (8014ad0 <_parse_response+0x154>)
 8014990:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8014994:	6833      	ldr	r3, [r6, #0]
 8014996:	e9cd 4403 	strd	r4, r4, [sp, #12]
 801499a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 801499e:	9009      	str	r0, [sp, #36]	; 0x24
 80149a0:	9402      	str	r4, [sp, #8]
 80149a2:	9407      	str	r4, [sp, #28]
 80149a4:	9308      	str	r3, [sp, #32]
 80149a6:	f7f2 fde7 	bl	8007578 <net_handle>
 80149aa:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80149ae:	9300      	str	r3, [sp, #0]
 80149b0:	f44f 7209 	mov.w	r2, #548	; 0x224
 80149b4:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 80149b8:	ab0c      	add	r3, sp, #48	; 0x30
 80149ba:	a90d      	add	r1, sp, #52	; 0x34
 80149bc:	f7fe fce8 	bl	8013390 <udp_recv>
 80149c0:	2800      	cmp	r0, #0
 80149c2:	d03f      	beq.n	8014a44 <_parse_response+0xc8>
 80149c4:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80149c8:	2b43      	cmp	r3, #67	; 0x43
 80149ca:	d13b      	bne.n	8014a44 <_parse_response+0xc8>
 80149cc:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 80149d0:	1e6b      	subs	r3, r5, #1
 80149d2:	1d69      	adds	r1, r5, #5
 80149d4:	4299      	cmp	r1, r3
 80149d6:	d12f      	bne.n	8014a38 <_parse_response+0xbc>
 80149d8:	2100      	movs	r1, #0
 80149da:	ab0d      	add	r3, sp, #52	; 0x34
 80149dc:	181d      	adds	r5, r3, r0
 80149de:	468c      	mov	ip, r1
 80149e0:	460e      	mov	r6, r1
 80149e2:	4608      	mov	r0, r1
 80149e4:	ab49      	add	r3, sp, #292	; 0x124
 80149e6:	42ab      	cmp	r3, r5
 80149e8:	d337      	bcc.n	8014a5a <_parse_response+0xde>
 80149ea:	b141      	cbz	r1, 80149fe <_parse_response+0x82>
 80149ec:	4b39      	ldr	r3, [pc, #228]	; (8014ad4 <_parse_response+0x158>)
 80149ee:	9a07      	ldr	r2, [sp, #28]
 80149f0:	f883 8003 	strb.w	r8, [r3, #3]
 80149f4:	709a      	strb	r2, [r3, #2]
 80149f6:	9a06      	ldr	r2, [sp, #24]
 80149f8:	705a      	strb	r2, [r3, #1]
 80149fa:	9a05      	ldr	r2, [sp, #20]
 80149fc:	701a      	strb	r2, [r3, #0]
 80149fe:	f1bc 0f00 	cmp.w	ip, #0
 8014a02:	d007      	beq.n	8014a14 <_parse_response+0x98>
 8014a04:	4b34      	ldr	r3, [pc, #208]	; (8014ad8 <_parse_response+0x15c>)
 8014a06:	9a04      	ldr	r2, [sp, #16]
 8014a08:	705c      	strb	r4, [r3, #1]
 8014a0a:	70da      	strb	r2, [r3, #3]
 8014a0c:	9a03      	ldr	r2, [sp, #12]
 8014a0e:	709a      	strb	r2, [r3, #2]
 8014a10:	9a02      	ldr	r2, [sp, #8]
 8014a12:	701a      	strb	r2, [r3, #0]
 8014a14:	b13e      	cbz	r6, 8014a26 <_parse_response+0xaa>
 8014a16:	4b31      	ldr	r3, [pc, #196]	; (8014adc <_parse_response+0x160>)
 8014a18:	70df      	strb	r7, [r3, #3]
 8014a1a:	f883 a002 	strb.w	sl, [r3, #2]
 8014a1e:	f883 9001 	strb.w	r9, [r3, #1]
 8014a22:	f883 b000 	strb.w	fp, [r3]
 8014a26:	2802      	cmp	r0, #2
 8014a28:	d102      	bne.n	8014a30 <_parse_response+0xb4>
 8014a2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014a2c:	4b2c      	ldr	r3, [pc, #176]	; (8014ae0 <_parse_response+0x164>)
 8014a2e:	601a      	str	r2, [r3, #0]
 8014a30:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8014a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a38:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 8014a3c:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 8014a40:	45e6      	cmp	lr, ip
 8014a42:	d0c7      	beq.n	80149d4 <_parse_response+0x58>
 8014a44:	6833      	ldr	r3, [r6, #0]
 8014a46:	9a08      	ldr	r2, [sp, #32]
 8014a48:	1a9b      	subs	r3, r3, r2
 8014a4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8014a4e:	d3aa      	bcc.n	80149a6 <_parse_response+0x2a>
 8014a50:	2800      	cmp	r0, #0
 8014a52:	d1c1      	bne.n	80149d8 <_parse_response+0x5c>
 8014a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014a58:	e7ea      	b.n	8014a30 <_parse_response+0xb4>
 8014a5a:	781a      	ldrb	r2, [r3, #0]
 8014a5c:	2a35      	cmp	r2, #53	; 0x35
 8014a5e:	d011      	beq.n	8014a84 <_parse_response+0x108>
 8014a60:	d808      	bhi.n	8014a74 <_parse_response+0xf8>
 8014a62:	2a01      	cmp	r2, #1
 8014a64:	d011      	beq.n	8014a8a <_parse_response+0x10e>
 8014a66:	2a03      	cmp	r2, #3
 8014a68:	d019      	beq.n	8014a9e <_parse_response+0x122>
 8014a6a:	b14a      	cbz	r2, 8014a80 <_parse_response+0x104>
 8014a6c:	1c9a      	adds	r2, r3, #2
 8014a6e:	785b      	ldrb	r3, [r3, #1]
 8014a70:	4413      	add	r3, r2
 8014a72:	e7b8      	b.n	80149e6 <_parse_response+0x6a>
 8014a74:	2a36      	cmp	r2, #54	; 0x36
 8014a76:	d01f      	beq.n	8014ab8 <_parse_response+0x13c>
 8014a78:	2aff      	cmp	r2, #255	; 0xff
 8014a7a:	d1f7      	bne.n	8014a6c <_parse_response+0xf0>
 8014a7c:	462b      	mov	r3, r5
 8014a7e:	e7b2      	b.n	80149e6 <_parse_response+0x6a>
 8014a80:	3301      	adds	r3, #1
 8014a82:	e7b0      	b.n	80149e6 <_parse_response+0x6a>
 8014a84:	7898      	ldrb	r0, [r3, #2]
 8014a86:	3303      	adds	r3, #3
 8014a88:	e7ad      	b.n	80149e6 <_parse_response+0x6a>
 8014a8a:	f893 b002 	ldrb.w	fp, [r3, #2]
 8014a8e:	f893 9003 	ldrb.w	r9, [r3, #3]
 8014a92:	f893 a004 	ldrb.w	sl, [r3, #4]
 8014a96:	795f      	ldrb	r7, [r3, #5]
 8014a98:	4616      	mov	r6, r2
 8014a9a:	3306      	adds	r3, #6
 8014a9c:	e7a3      	b.n	80149e6 <_parse_response+0x6a>
 8014a9e:	789a      	ldrb	r2, [r3, #2]
 8014aa0:	78dc      	ldrb	r4, [r3, #3]
 8014aa2:	9202      	str	r2, [sp, #8]
 8014aa4:	791a      	ldrb	r2, [r3, #4]
 8014aa6:	f04f 0c01 	mov.w	ip, #1
 8014aaa:	9203      	str	r2, [sp, #12]
 8014aac:	795a      	ldrb	r2, [r3, #5]
 8014aae:	9204      	str	r2, [sp, #16]
 8014ab0:	785a      	ldrb	r2, [r3, #1]
 8014ab2:	4413      	add	r3, r2
 8014ab4:	3302      	adds	r3, #2
 8014ab6:	e796      	b.n	80149e6 <_parse_response+0x6a>
 8014ab8:	789a      	ldrb	r2, [r3, #2]
 8014aba:	f893 8005 	ldrb.w	r8, [r3, #5]
 8014abe:	9205      	str	r2, [sp, #20]
 8014ac0:	78da      	ldrb	r2, [r3, #3]
 8014ac2:	2101      	movs	r1, #1
 8014ac4:	9206      	str	r2, [sp, #24]
 8014ac6:	791a      	ldrb	r2, [r3, #4]
 8014ac8:	3306      	adds	r3, #6
 8014aca:	9207      	str	r2, [sp, #28]
 8014acc:	e78b      	b.n	80149e6 <_parse_response+0x6a>
 8014ace:	bf00      	nop
 8014ad0:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4
 8014ad4:	2001d710 	andcs	sp, r1, r0, lsl r7
 8014ad8:	2001d4e0 	andcs	sp, r1, r0, ror #9
 8014adc:	2001d4e8 	andcs	sp, r1, r8, ror #9
 8014ae0:	2001d4e4 	andcs	sp, r1, r4, ror #9

08014ae4 <memcpy.isra.0>:
 8014ae4:	3801      	subs	r0, #1
 8014ae6:	440a      	add	r2, r1
 8014ae8:	4291      	cmp	r1, r2
 8014aea:	d100      	bne.n	8014aee <memcpy.isra.0+0xa>
 8014aec:	4770      	bx	lr
 8014aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014af2:	f800 3f01 	strb.w	r3, [r0, #1]!
 8014af6:	e7f7      	b.n	8014ae8 <memcpy.isra.0+0x4>

08014af8 <dhcp_client>:
 8014af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014afc:	b087      	sub	sp, #28
 8014afe:	9203      	str	r2, [sp, #12]
 8014b00:	4a77      	ldr	r2, [pc, #476]	; (8014ce0 <dhcp_client+0x1e8>)
 8014b02:	460f      	mov	r7, r1
 8014b04:	4605      	mov	r5, r0
 8014b06:	f44f 7309 	mov.w	r3, #548	; 0x224
 8014b0a:	4614      	mov	r4, r2
 8014b0c:	2100      	movs	r1, #0
 8014b0e:	3b01      	subs	r3, #1
 8014b10:	f802 1b01 	strb.w	r1, [r2], #1
 8014b14:	d1fb      	bne.n	8014b0e <dhcp_client+0x16>
 8014b16:	f240 1301 	movw	r3, #257	; 0x101
 8014b1a:	2206      	movs	r2, #6
 8014b1c:	4629      	mov	r1, r5
 8014b1e:	4871      	ldr	r0, [pc, #452]	; (8014ce4 <dhcp_client+0x1ec>)
 8014b20:	8023      	strh	r3, [r4, #0]
 8014b22:	70a2      	strb	r2, [r4, #2]
 8014b24:	f7ff ffde 	bl	8014ae4 <memcpy.isra.0>
 8014b28:	4b6f      	ldr	r3, [pc, #444]	; (8014ce8 <dhcp_client+0x1f0>)
 8014b2a:	2044      	movs	r0, #68	; 0x44
 8014b2c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8014b30:	f240 1335 	movw	r3, #309	; 0x135
 8014b34:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 8014b38:	f7fe fbf0 	bl	801331c <udp_bind>
 8014b3c:	1e06      	subs	r6, r0, #0
 8014b3e:	f2c0 80c9 	blt.w	8014cd4 <dhcp_client+0x1dc>
 8014b42:	f04f 0915 	mov.w	r9, #21
 8014b46:	f8df a198 	ldr.w	sl, [pc, #408]	; 8014ce0 <dhcp_client+0x1e8>
 8014b4a:	f1b9 0901 	subs.w	r9, r9, #1
 8014b4e:	d11f      	bne.n	8014b90 <dhcp_client+0x98>
 8014b50:	464c      	mov	r4, r9
 8014b52:	2044      	movs	r0, #68	; 0x44
 8014b54:	f7fe fbfc 	bl	8013350 <udp_unbind>
 8014b58:	2c00      	cmp	r4, #0
 8014b5a:	f000 80be 	beq.w	8014cda <dhcp_client+0x1e2>
 8014b5e:	2204      	movs	r2, #4
 8014b60:	4962      	ldr	r1, [pc, #392]	; (8014cec <dhcp_client+0x1f4>)
 8014b62:	a805      	add	r0, sp, #20
 8014b64:	f7ff ffbe 	bl	8014ae4 <memcpy.isra.0>
 8014b68:	9b05      	ldr	r3, [sp, #20]
 8014b6a:	2204      	movs	r2, #4
 8014b6c:	4960      	ldr	r1, [pc, #384]	; (8014cf0 <dhcp_client+0x1f8>)
 8014b6e:	603b      	str	r3, [r7, #0]
 8014b70:	a805      	add	r0, sp, #20
 8014b72:	f7ff ffb7 	bl	8014ae4 <memcpy.isra.0>
 8014b76:	9b05      	ldr	r3, [sp, #20]
 8014b78:	a805      	add	r0, sp, #20
 8014b7a:	60bb      	str	r3, [r7, #8]
 8014b7c:	2204      	movs	r2, #4
 8014b7e:	495d      	ldr	r1, [pc, #372]	; (8014cf4 <dhcp_client+0x1fc>)
 8014b80:	f7ff ffb0 	bl	8014ae4 <memcpy.isra.0>
 8014b84:	2000      	movs	r0, #0
 8014b86:	9b05      	ldr	r3, [sp, #20]
 8014b88:	607b      	str	r3, [r7, #4]
 8014b8a:	b007      	add	sp, #28
 8014b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b90:	f643 5301 	movw	r3, #15617	; 0x3d01
 8014b94:	f240 1807 	movw	r8, #263	; 0x107
 8014b98:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8014b9c:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8014ba0:	782b      	ldrb	r3, [r5, #0]
 8014ba2:	4a55      	ldr	r2, [pc, #340]	; (8014cf8 <dhcp_client+0x200>)
 8014ba4:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8014ba8:	786b      	ldrb	r3, [r5, #1]
 8014baa:	fa5f fb86 	uxtb.w	fp, r6
 8014bae:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8014bb2:	78ab      	ldrb	r3, [r5, #2]
 8014bb4:	4651      	mov	r1, sl
 8014bb6:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8014bba:	78eb      	ldrb	r3, [r5, #3]
 8014bbc:	4658      	mov	r0, fp
 8014bbe:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8014bc2:	792b      	ldrb	r3, [r5, #4]
 8014bc4:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8014bc8:	796b      	ldrb	r3, [r5, #5]
 8014bca:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8014bce:	4b4b      	ldr	r3, [pc, #300]	; (8014cfc <dhcp_client+0x204>)
 8014bd0:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 8014bd4:	23ff      	movs	r3, #255	; 0xff
 8014bd6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8014bda:	2343      	movs	r3, #67	; 0x43
 8014bdc:	f240 1205 	movw	r2, #261	; 0x105
 8014be0:	9300      	str	r3, [sp, #0]
 8014be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014be6:	f7fe fc2f 	bl	8013448 <udp_send>
 8014bea:	4629      	mov	r1, r5
 8014bec:	4630      	mov	r0, r6
 8014bee:	f7ff fec5 	bl	801497c <_parse_response>
 8014bf2:	2802      	cmp	r0, #2
 8014bf4:	d1a9      	bne.n	8014b4a <dhcp_client+0x52>
 8014bf6:	f643 5303 	movw	r3, #15619	; 0x3d03
 8014bfa:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8014bfe:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8014c02:	782b      	ldrb	r3, [r5, #0]
 8014c04:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8014d00 <dhcp_client+0x208>
 8014c08:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8014c0c:	786b      	ldrb	r3, [r5, #1]
 8014c0e:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8014c12:	78ab      	ldrb	r3, [r5, #2]
 8014c14:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8014c18:	78eb      	ldrb	r3, [r5, #3]
 8014c1a:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8014c1e:	792b      	ldrb	r3, [r5, #4]
 8014c20:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8014c24:	796b      	ldrb	r3, [r5, #5]
 8014c26:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8014c2a:	f240 4332 	movw	r3, #1074	; 0x432
 8014c2e:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 8014c32:	4b2e      	ldr	r3, [pc, #184]	; (8014cec <dhcp_client+0x1f4>)
 8014c34:	881a      	ldrh	r2, [r3, #0]
 8014c36:	885b      	ldrh	r3, [r3, #2]
 8014c38:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 8014c3c:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8014c40:	f240 4336 	movw	r3, #1078	; 0x436
 8014c44:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 8014c48:	4b2e      	ldr	r3, [pc, #184]	; (8014d04 <dhcp_client+0x20c>)
 8014c4a:	221e      	movs	r2, #30
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8014c52:	230c      	movs	r3, #12
 8014c54:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 8014c58:	9b03      	ldr	r3, [sp, #12]
 8014c5a:	1e58      	subs	r0, r3, #1
 8014c5c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8014c60:	f1a2 0e1e 	sub.w	lr, r2, #30
 8014c64:	1c51      	adds	r1, r2, #1
 8014c66:	bb8b      	cbnz	r3, 8014ccc <dhcp_client+0x1d4>
 8014c68:	2037      	movs	r0, #55	; 0x37
 8014c6a:	18a3      	adds	r3, r4, r2
 8014c6c:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 8014c70:	2006      	movs	r0, #6
 8014c72:	4421      	add	r1, r4
 8014c74:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 8014c78:	2103      	movs	r1, #3
 8014c7a:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 8014c7e:	210f      	movs	r1, #15
 8014c80:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 8014c84:	213a      	movs	r1, #58	; 0x3a
 8014c86:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 8014c8a:	213b      	movs	r1, #59	; 0x3b
 8014c8c:	f04f 0801 	mov.w	r8, #1
 8014c90:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8014c94:	21ff      	movs	r1, #255	; 0xff
 8014c96:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8014c9a:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 8014c9e:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 8014ca2:	2343      	movs	r3, #67	; 0x43
 8014ca4:	32f5      	adds	r2, #245	; 0xf5
 8014ca6:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 8014caa:	4651      	mov	r1, sl
 8014cac:	9300      	str	r3, [sp, #0]
 8014cae:	b292      	uxth	r2, r2
 8014cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014cb4:	4658      	mov	r0, fp
 8014cb6:	f7fe fbc7 	bl	8013448 <udp_send>
 8014cba:	4629      	mov	r1, r5
 8014cbc:	4630      	mov	r0, r6
 8014cbe:	f7ff fe5d 	bl	801497c <_parse_response>
 8014cc2:	2805      	cmp	r0, #5
 8014cc4:	f47f af41 	bne.w	8014b4a <dhcp_client+0x52>
 8014cc8:	4644      	mov	r4, r8
 8014cca:	e742      	b.n	8014b52 <dhcp_client+0x5a>
 8014ccc:	460a      	mov	r2, r1
 8014cce:	f80c 3f01 	strb.w	r3, [ip, #1]!
 8014cd2:	e7c3      	b.n	8014c5c <dhcp_client+0x164>
 8014cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014cd8:	e757      	b.n	8014b8a <dhcp_client+0x92>
 8014cda:	f06f 0001 	mvn.w	r0, #1
 8014cde:	e754      	b.n	8014b8a <dhcp_client+0x92>
 8014ce0:	2001d4ec 	andcs	sp, r1, ip, ror #9
 8014ce4:	2001d508 	andcs	sp, r1, r8, lsl #10
 8014ce8:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 8014cec:	2001d4e4 	andcs	sp, r1, r4, ror #9
 8014cf0:	2001d4e0 	andcs	sp, r1, r0, ror #9
 8014cf4:	2001d4e8 	andcs	sp, r1, r8, ror #9
 8014cf8:	03010637 	movweq	r0, #5687	; 0x1637
 8014cfc:	3b3a0f06 	blcc	8e9891c <__exidx_end+0xe7c948>
 8014d00:	2001d5f5 	strdcs	sp, [r1], -r5
 8014d04:	2001d710 	andcs	sp, r1, r0, lsl r7

08014d08 <dhcp_client_release>:
 8014d08:	b507      	push	{r0, r1, r2, lr}
 8014d0a:	2044      	movs	r0, #68	; 0x44
 8014d0c:	f7fe fb06 	bl	801331c <udp_bind>
 8014d10:	f243 6307 	movw	r3, #13831	; 0x3607
 8014d14:	4911      	ldr	r1, [pc, #68]	; (8014d5c <dhcp_client_release+0x54>)
 8014d16:	b2c0      	uxtb	r0, r0
 8014d18:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 8014d1c:	2304      	movs	r3, #4
 8014d1e:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 8014d22:	4b0f      	ldr	r3, [pc, #60]	; (8014d60 <dhcp_client_release+0x58>)
 8014d24:	781a      	ldrb	r2, [r3, #0]
 8014d26:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 8014d2a:	785a      	ldrb	r2, [r3, #1]
 8014d2c:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 8014d30:	789a      	ldrb	r2, [r3, #2]
 8014d32:	78db      	ldrb	r3, [r3, #3]
 8014d34:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 8014d38:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 8014d3c:	23ff      	movs	r3, #255	; 0xff
 8014d3e:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 8014d42:	2343      	movs	r3, #67	; 0x43
 8014d44:	22fa      	movs	r2, #250	; 0xfa
 8014d46:	9300      	str	r3, [sp, #0]
 8014d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d4c:	f7fe fb7c 	bl	8013448 <udp_send>
 8014d50:	2044      	movs	r0, #68	; 0x44
 8014d52:	b003      	add	sp, #12
 8014d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8014d58:	f7fe bafa 	b.w	8013350 <udp_unbind>
 8014d5c:	2001d4ec 	andcs	sp, r1, ip, ror #9
 8014d60:	2001d710 	andcs	sp, r1, r0, lsl r7

08014d64 <memcpy.isra.0>:
 8014d64:	3801      	subs	r0, #1
 8014d66:	440a      	add	r2, r1
 8014d68:	4291      	cmp	r1, r2
 8014d6a:	d100      	bne.n	8014d6e <memcpy.isra.0+0xa>
 8014d6c:	4770      	bx	lr
 8014d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d72:	f800 3f01 	strb.w	r3, [r0, #1]!
 8014d76:	e7f7      	b.n	8014d68 <memcpy.isra.0+0x4>

08014d78 <_send_report>:
 8014d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d7a:	491c      	ldr	r1, [pc, #112]	; (8014dec <_send_report+0x74>)
 8014d7c:	4c1c      	ldr	r4, [pc, #112]	; (8014df0 <_send_report+0x78>)
 8014d7e:	f3c0 2306 	ubfx	r3, r0, #8, #7
 8014d82:	9001      	str	r0, [sp, #4]
 8014d84:	70cb      	strb	r3, [r1, #3]
 8014d86:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8014d8a:	f3c0 6007 	ubfx	r0, r0, #24, #8
 8014d8e:	710b      	strb	r3, [r1, #4]
 8014d90:	7148      	strb	r0, [r1, #5]
 8014d92:	2206      	movs	r2, #6
 8014d94:	4620      	mov	r0, r4
 8014d96:	f7ff ffe5 	bl	8014d64 <memcpy.isra.0>
 8014d9a:	2204      	movs	r2, #4
 8014d9c:	2700      	movs	r7, #0
 8014d9e:	4d15      	ldr	r5, [pc, #84]	; (8014df4 <_send_report+0x7c>)
 8014da0:	eb0d 0102 	add.w	r1, sp, r2
 8014da4:	882b      	ldrh	r3, [r5, #0]
 8014da6:	f104 001e 	add.w	r0, r4, #30
 8014daa:	f104 060e 	add.w	r6, r4, #14
 8014dae:	8263      	strh	r3, [r4, #18]
 8014db0:	f7ff ffd8 	bl	8014d64 <memcpy.isra.0>
 8014db4:	2118      	movs	r1, #24
 8014db6:	4630      	mov	r0, r6
 8014db8:	8327      	strh	r7, [r4, #24]
 8014dba:	f000 f8c6 	bl	8014f4a <net_chksum>
 8014dbe:	2204      	movs	r2, #4
 8014dc0:	8320      	strh	r0, [r4, #24]
 8014dc2:	eb0d 0102 	add.w	r1, sp, r2
 8014dc6:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8014dca:	f7ff ffcb 	bl	8014d64 <memcpy.isra.0>
 8014dce:	2120      	movs	r1, #32
 8014dd0:	4630      	mov	r0, r6
 8014dd2:	8527      	strh	r7, [r4, #40]	; 0x28
 8014dd4:	f000 f8b9 	bl	8014f4a <net_chksum>
 8014dd8:	212e      	movs	r1, #46	; 0x2e
 8014dda:	8520      	strh	r0, [r4, #40]	; 0x28
 8014ddc:	4620      	mov	r0, r4
 8014dde:	f002 fd89 	bl	80178f4 <emac_eth_send>
 8014de2:	882b      	ldrh	r3, [r5, #0]
 8014de4:	3301      	adds	r3, #1
 8014de6:	802b      	strh	r3, [r5, #0]
 8014de8:	b003      	add	sp, #12
 8014dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dec:	2001d86c 	andcs	sp, r1, ip, ror #16
 8014df0:	2001d874 	andcs	sp, r1, r4, ror r8
 8014df4:	2001d834 	andcs	sp, r1, r4, lsr r8

08014df8 <igmp_set_ip>:
 8014df8:	b507      	push	{r0, r1, r2, lr}
 8014dfa:	2204      	movs	r2, #4
 8014dfc:	6803      	ldr	r3, [r0, #0]
 8014dfe:	eb0d 0102 	add.w	r1, sp, r2
 8014e02:	4806      	ldr	r0, [pc, #24]	; (8014e1c <igmp_set_ip+0x24>)
 8014e04:	9301      	str	r3, [sp, #4]
 8014e06:	f7ff ffad 	bl	8014d64 <memcpy.isra.0>
 8014e0a:	2204      	movs	r2, #4
 8014e0c:	4804      	ldr	r0, [pc, #16]	; (8014e20 <igmp_set_ip+0x28>)
 8014e0e:	eb0d 0102 	add.w	r1, sp, r2
 8014e12:	f7ff ffa7 	bl	8014d64 <memcpy.isra.0>
 8014e16:	b003      	add	sp, #12
 8014e18:	f85d fb04 	ldr.w	pc, [sp], #4
 8014e1c:	2001d88e 	andcs	sp, r1, lr, lsl #17
 8014e20:	2001d856 	andcs	sp, r1, r6, asr r8

08014e24 <igmp_timer>:
 8014e24:	b570      	push	{r4, r5, r6, lr}
 8014e26:	2500      	movs	r5, #0
 8014e28:	2602      	movs	r6, #2
 8014e2a:	4c0a      	ldr	r4, [pc, #40]	; (8014e54 <igmp_timer+0x30>)
 8014e2c:	7963      	ldrb	r3, [r4, #5]
 8014e2e:	2b01      	cmp	r3, #1
 8014e30:	d109      	bne.n	8014e46 <igmp_timer+0x22>
 8014e32:	7923      	ldrb	r3, [r4, #4]
 8014e34:	b13b      	cbz	r3, 8014e46 <igmp_timer+0x22>
 8014e36:	3b01      	subs	r3, #1
 8014e38:	b2db      	uxtb	r3, r3
 8014e3a:	7123      	strb	r3, [r4, #4]
 8014e3c:	b91b      	cbnz	r3, 8014e46 <igmp_timer+0x22>
 8014e3e:	6820      	ldr	r0, [r4, #0]
 8014e40:	f7ff ff9a 	bl	8014d78 <_send_report>
 8014e44:	7166      	strb	r6, [r4, #5]
 8014e46:	3501      	adds	r5, #1
 8014e48:	2d24      	cmp	r5, #36	; 0x24
 8014e4a:	f104 0408 	add.w	r4, r4, #8
 8014e4e:	d1ed      	bne.n	8014e2c <igmp_timer+0x8>
 8014e50:	bd70      	pop	{r4, r5, r6, pc}
 8014e52:	bf00      	nop
 8014e54:	2001d714 	andcs	sp, r1, r4, lsl r7

08014e58 <igmp_join>:
 8014e58:	b538      	push	{r3, r4, r5, lr}
 8014e5a:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 8014e5e:	2be0      	cmp	r3, #224	; 0xe0
 8014e60:	d11b      	bne.n	8014e9a <igmp_join+0x42>
 8014e62:	4911      	ldr	r1, [pc, #68]	; (8014ea8 <igmp_join+0x50>)
 8014e64:	680c      	ldr	r4, [r1, #0]
 8014e66:	2c24      	cmp	r4, #36	; 0x24
 8014e68:	d01a      	beq.n	8014ea0 <igmp_join+0x48>
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	4a0f      	ldr	r2, [pc, #60]	; (8014eac <igmp_join+0x54>)
 8014e6e:	429c      	cmp	r4, r3
 8014e70:	dc0d      	bgt.n	8014e8e <igmp_join+0x36>
 8014e72:	f44f 7381 	mov.w	r3, #258	; 0x102
 8014e76:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
 8014e7a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8014e7e:	8093      	strh	r3, [r2, #4]
 8014e80:	1c63      	adds	r3, r4, #1
 8014e82:	600b      	str	r3, [r1, #0]
 8014e84:	f7ff ff78 	bl	8014d78 <_send_report>
 8014e88:	4623      	mov	r3, r4
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	bd38      	pop	{r3, r4, r5, pc}
 8014e8e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8014e92:	4285      	cmp	r5, r0
 8014e94:	d0f9      	beq.n	8014e8a <igmp_join+0x32>
 8014e96:	3301      	adds	r3, #1
 8014e98:	e7e9      	b.n	8014e6e <igmp_join+0x16>
 8014e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e9e:	e7f4      	b.n	8014e8a <igmp_join+0x32>
 8014ea0:	f06f 0301 	mvn.w	r3, #1
 8014ea4:	e7f1      	b.n	8014e8a <igmp_join+0x32>
 8014ea6:	bf00      	nop
 8014ea8:	2001d838 	andcs	sp, r1, r8, lsr r8
 8014eac:	2001d714 	andcs	sp, r1, r4, lsl r7

08014eb0 <igmp_leave>:
 8014eb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014eb4:	2600      	movs	r6, #0
 8014eb6:	4f1c      	ldr	r7, [pc, #112]	; (8014f28 <igmp_leave+0x78>)
 8014eb8:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 8014ebc:	4283      	cmp	r3, r0
 8014ebe:	d007      	beq.n	8014ed0 <igmp_leave+0x20>
 8014ec0:	3601      	adds	r6, #1
 8014ec2:	2e24      	cmp	r6, #36	; 0x24
 8014ec4:	d1f8      	bne.n	8014eb8 <igmp_leave+0x8>
 8014ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014eca:	b002      	add	sp, #8
 8014ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ed0:	2400      	movs	r4, #0
 8014ed2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8014f2c <igmp_leave+0x7c>
 8014ed6:	4d16      	ldr	r5, [pc, #88]	; (8014f30 <igmp_leave+0x80>)
 8014ed8:	f8b8 3000 	ldrh.w	r3, [r8]
 8014edc:	2118      	movs	r1, #24
 8014ede:	9001      	str	r0, [sp, #4]
 8014ee0:	4814      	ldr	r0, [pc, #80]	; (8014f34 <igmp_leave+0x84>)
 8014ee2:	826b      	strh	r3, [r5, #18]
 8014ee4:	832c      	strh	r4, [r5, #24]
 8014ee6:	f000 f830 	bl	8014f4a <net_chksum>
 8014eea:	2204      	movs	r2, #4
 8014eec:	8328      	strh	r0, [r5, #24]
 8014eee:	eb0d 0102 	add.w	r1, sp, r2
 8014ef2:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8014ef6:	f7ff ff35 	bl	8014d64 <memcpy.isra.0>
 8014efa:	2120      	movs	r1, #32
 8014efc:	f105 000e 	add.w	r0, r5, #14
 8014f00:	852c      	strh	r4, [r5, #40]	; 0x28
 8014f02:	f000 f822 	bl	8014f4a <net_chksum>
 8014f06:	212e      	movs	r1, #46	; 0x2e
 8014f08:	8528      	strh	r0, [r5, #40]	; 0x28
 8014f0a:	4628      	mov	r0, r5
 8014f0c:	f002 fcf2 	bl	80178f4 <emac_eth_send>
 8014f10:	f8b8 3000 	ldrh.w	r3, [r8]
 8014f14:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
 8014f18:	3301      	adds	r3, #1
 8014f1a:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8014f1e:	4620      	mov	r0, r4
 8014f20:	f8a8 3000 	strh.w	r3, [r8]
 8014f24:	80bc      	strh	r4, [r7, #4]
 8014f26:	e7d0      	b.n	8014eca <igmp_leave+0x1a>
 8014f28:	2001d714 	andcs	sp, r1, r4, lsl r7
 8014f2c:	2001d834 	andcs	sp, r1, r4, lsr r8
 8014f30:	2001d83c 	andcs	sp, r1, ip, lsr r8
 8014f34:	2001d882 	andcs	sp, r1, r2, lsl #17

08014f38 <ip_set_ip>:
 8014f38:	b510      	push	{r4, lr}
 8014f3a:	4604      	mov	r4, r0
 8014f3c:	f7fe f9ce 	bl	80132dc <udp_set_ip>
 8014f40:	4620      	mov	r0, r4
 8014f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f46:	f7ff bf57 	b.w	8014df8 <igmp_set_ip>

08014f4a <net_chksum>:
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	f021 0201 	bic.w	r2, r1, #1
 8014f50:	b530      	push	{r4, r5, lr}
 8014f52:	1884      	adds	r4, r0, r2
 8014f54:	42a0      	cmp	r0, r4
 8014f56:	d10b      	bne.n	8014f70 <net_chksum+0x26>
 8014f58:	4291      	cmp	r1, r2
 8014f5a:	d004      	beq.n	8014f66 <net_chksum+0x1c>
 8014f5c:	7802      	ldrb	r2, [r0, #0]
 8014f5e:	0212      	lsls	r2, r2, #8
 8014f60:	ba52      	rev16	r2, r2
 8014f62:	b292      	uxth	r2, r2
 8014f64:	4413      	add	r3, r2
 8014f66:	0c1a      	lsrs	r2, r3, #16
 8014f68:	d106      	bne.n	8014f78 <net_chksum+0x2e>
 8014f6a:	43d8      	mvns	r0, r3
 8014f6c:	b280      	uxth	r0, r0
 8014f6e:	bd30      	pop	{r4, r5, pc}
 8014f70:	f830 5b02 	ldrh.w	r5, [r0], #2
 8014f74:	442b      	add	r3, r5
 8014f76:	e7ed      	b.n	8014f54 <net_chksum+0xa>
 8014f78:	b29b      	uxth	r3, r3
 8014f7a:	e7f3      	b.n	8014f64 <net_chksum+0x1a>

08014f7c <memcpy.isra.0>:
 8014f7c:	3801      	subs	r0, #1
 8014f7e:	440a      	add	r2, r1
 8014f80:	4291      	cmp	r1, r2
 8014f82:	d100      	bne.n	8014f86 <memcpy.isra.0+0xa>
 8014f84:	4770      	bx	lr
 8014f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014f8a:	f800 3f01 	strb.w	r3, [r0, #1]!
 8014f8e:	e7f7      	b.n	8014f80 <memcpy.isra.0+0x4>

08014f90 <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 8014f90:	b430      	push	{r4, r5}
 8014f92:	b168      	cbz	r0, 8014fb0 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8014f94:	2300      	movs	r3, #0
 8014f96:	7905      	ldrb	r5, [r0, #4]
 8014f98:	5cd4      	ldrb	r4, [r2, r3]
 8014f9a:	b11c      	cbz	r4, 8014fa4 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 8014f9c:	1c5c      	adds	r4, r3, #1
 8014f9e:	429d      	cmp	r5, r3
 8014fa0:	4623      	mov	r3, r4
 8014fa2:	dcf9      	bgt.n	8014f98 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 8014fa4:	6804      	ldr	r4, [r0, #0]
 8014fa6:	b2db      	uxtb	r3, r3
 8014fa8:	69e4      	ldr	r4, [r4, #28]
 8014faa:	46a4      	mov	ip, r4
 8014fac:	bc30      	pop	{r4, r5}
 8014fae:	4760      	bx	ip
 8014fb0:	bc30      	pop	{r4, r5}
 8014fb2:	4770      	bx	lr

08014fb4 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8014fb4:	b110      	cbz	r0, 8014fbc <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8014fb6:	6803      	ldr	r3, [r0, #0]
 8014fb8:	691b      	ldr	r3, [r3, #16]
 8014fba:	4718      	bx	r3
 8014fbc:	4770      	bx	lr
	...

08014fc0 <DisplayUdf::DisplayUdf()>:
 8014fc0:	b510      	push	{r4, lr}
 8014fc2:	4604      	mov	r4, r0
 8014fc4:	f000 ff88 	bl	8015ed8 <Display::Display()>
 8014fc8:	2202      	movs	r2, #2
 8014fca:	2300      	movs	r3, #0
 8014fcc:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8014fd0:	4b05      	ldr	r3, [pc, #20]	; (8014fe8 <DisplayUdf::DisplayUdf()+0x28>)
 8014fd2:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 8014fd6:	601c      	str	r4, [r3, #0]
 8014fd8:	2301      	movs	r3, #1
 8014fda:	f802 3f01 	strb.w	r3, [r2, #1]!
 8014fde:	3301      	adds	r3, #1
 8014fe0:	2b15      	cmp	r3, #21
 8014fe2:	d1fa      	bne.n	8014fda <DisplayUdf::DisplayUdf()+0x1a>
 8014fe4:	4620      	mov	r0, r4
 8014fe6:	bd10      	pop	{r4, pc}
 8014fe8:	2001d8a4 	andcs	sp, r1, r4, lsr #17

08014fec <DisplayUdf::SetTitle(char const*, ...)>:
 8014fec:	b40e      	push	{r1, r2, r3}
 8014fee:	b517      	push	{r0, r1, r2, r4, lr}
 8014ff0:	ab05      	add	r3, sp, #20
 8014ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ff6:	4604      	mov	r4, r0
 8014ff8:	211f      	movs	r1, #31
 8014ffa:	301c      	adds	r0, #28
 8014ffc:	9301      	str	r3, [sp, #4]
 8014ffe:	f7f4 fc1f 	bl	8009840 <vsnprintf>
 8015002:	2300      	movs	r3, #0
 8015004:	4404      	add	r4, r0
 8015006:	7723      	strb	r3, [r4, #28]
 8015008:	b003      	add	sp, #12
 801500a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801500e:	b003      	add	sp, #12
 8015010:	4770      	bx	lr

08015012 <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 8015012:	1e4b      	subs	r3, r1, #1
 8015014:	2b05      	cmp	r3, #5
 8015016:	b530      	push	{r4, r5, lr}
 8015018:	d80f      	bhi.n	801503a <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 801501a:	2300      	movs	r3, #0
 801501c:	f100 043b 	add.w	r4, r0, #59	; 0x3b
 8015020:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8015024:	428d      	cmp	r5, r1
 8015026:	d109      	bne.n	801503c <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 8015028:	1884      	adds	r4, r0, r2
 801502a:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 801502e:	4403      	add	r3, r0
 8015030:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 8015034:	4410      	add	r0, r2
 8015036:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 801503a:	bd30      	pop	{r4, r5, pc}
 801503c:	3301      	adds	r3, #1
 801503e:	2b14      	cmp	r3, #20
 8015040:	d1ee      	bne.n	8015020 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 8015042:	e7f7      	b.n	8015034 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>

08015044 <DisplayUdf::ShowEmacStart()>:
 8015044:	b510      	push	{r4, lr}
 8015046:	4604      	mov	r4, r0
 8015048:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 801504c:	6980      	ldr	r0, [r0, #24]
 801504e:	f7ff ffb1 	bl	8014fb4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8015052:	4620      	mov	r0, r4
 8015054:	4a02      	ldr	r2, [pc, #8]	; (8015060 <DisplayUdf::ShowEmacStart()+0x1c>)
 8015056:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 801505a:	f7f3 fbc9 	bl	80087f0 <Display::Printf(unsigned char, char const*, ...)>
 801505e:	bd10      	pop	{r4, pc}
 8015060:	0801b78d 	stmdaeq	r1, {r0, r2, r3, r7, r8, r9, sl, ip, sp, pc}

08015064 <DisplayUdf::ShowIpAddress()>:
 8015064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015068:	4604      	mov	r4, r0
 801506a:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 801506e:	b086      	sub	sp, #24
 8015070:	6980      	ldr	r0, [r0, #24]
 8015072:	f7ff ff9f 	bl	8014fb4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8015076:	4b13      	ldr	r3, [pc, #76]	; (80150c4 <DisplayUdf::ShowIpAddress()+0x60>)
 8015078:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
 801507c:	681d      	ldr	r5, [r3, #0]
 801507e:	69e8      	ldr	r0, [r5, #28]
 8015080:	696e      	ldr	r6, [r5, #20]
 8015082:	f003 fd91 	bl	8018ba8 <__popcountsi2>
 8015086:	79eb      	ldrb	r3, [r5, #7]
 8015088:	fa5f f886 	uxtb.w	r8, r6
 801508c:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8015090:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 8015094:	0e36      	lsrs	r6, r6, #24
 8015096:	b99b      	cbnz	r3, 80150c0 <DisplayUdf::ShowIpAddress()+0x5c>
 8015098:	796b      	ldrb	r3, [r5, #5]
 801509a:	2b00      	cmp	r3, #0
 801509c:	bf14      	ite	ne
 801509e:	2244      	movne	r2, #68	; 0x44
 80150a0:	2253      	moveq	r2, #83	; 0x53
 80150a2:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80150a6:	4643      	mov	r3, r8
 80150a8:	4639      	mov	r1, r7
 80150aa:	4620      	mov	r0, r4
 80150ac:	e9cd a601 	strd	sl, r6, [sp, #4]
 80150b0:	4a05      	ldr	r2, [pc, #20]	; (80150c8 <DisplayUdf::ShowIpAddress()+0x64>)
 80150b2:	f8cd 9000 	str.w	r9, [sp]
 80150b6:	f7f3 fb9b 	bl	80087f0 <Display::Printf(unsigned char, char const*, ...)>
 80150ba:	b006      	add	sp, #24
 80150bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150c0:	225a      	movs	r2, #90	; 0x5a
 80150c2:	e7ee      	b.n	80150a2 <DisplayUdf::ShowIpAddress()+0x3e>
 80150c4:	2001d2d4 	ldrdcs	sp, [r1], -r4
 80150c8:	0801b79c 	stmdaeq	r1, {r2, r3, r4, r7, r8, r9, sl, ip, sp, pc}

080150cc <DisplayUdf::ShowNetmask()>:
 80150cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80150ce:	4604      	mov	r4, r0
 80150d0:	4b0b      	ldr	r3, [pc, #44]	; (8015100 <DisplayUdf::ShowNetmask()+0x34>)
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	69db      	ldr	r3, [r3, #28]
 80150d6:	0e1a      	lsrs	r2, r3, #24
 80150d8:	9202      	str	r2, [sp, #8]
 80150da:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80150de:	9201      	str	r2, [sp, #4]
 80150e0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80150e4:	9200      	str	r2, [sp, #0]
 80150e6:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 80150ea:	4a06      	ldr	r2, [pc, #24]	; (8015104 <DisplayUdf::ShowNetmask()+0x38>)
 80150ec:	b2db      	uxtb	r3, r3
 80150ee:	f7f3 fb7f 	bl	80087f0 <Display::Printf(unsigned char, char const*, ...)>
 80150f2:	4620      	mov	r0, r4
 80150f4:	b004      	add	sp, #16
 80150f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150fa:	f7ff bfb3 	b.w	8015064 <DisplayUdf::ShowIpAddress()>
 80150fe:	bf00      	nop
 8015100:	2001d2d4 	ldrdcs	sp, [r1], -r4
 8015104:	0801b7ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, r9, sl, ip, sp, pc}

08015108 <DisplayUdf::ShowGatewayIp()>:
 8015108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801510a:	4604      	mov	r4, r0
 801510c:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8015110:	6980      	ldr	r0, [r0, #24]
 8015112:	f7ff ff4f 	bl	8014fb4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8015116:	4b0a      	ldr	r3, [pc, #40]	; (8015140 <DisplayUdf::ShowGatewayIp()+0x38>)
 8015118:	4620      	mov	r0, r4
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 8015120:	699b      	ldr	r3, [r3, #24]
 8015122:	0e1a      	lsrs	r2, r3, #24
 8015124:	9202      	str	r2, [sp, #8]
 8015126:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801512a:	9201      	str	r2, [sp, #4]
 801512c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015130:	9200      	str	r2, [sp, #0]
 8015132:	b2db      	uxtb	r3, r3
 8015134:	4a03      	ldr	r2, [pc, #12]	; (8015144 <DisplayUdf::ShowGatewayIp()+0x3c>)
 8015136:	f7f3 fb5b 	bl	80087f0 <Display::Printf(unsigned char, char const*, ...)>
 801513a:	b004      	add	sp, #16
 801513c:	bd10      	pop	{r4, pc}
 801513e:	bf00      	nop
 8015140:	2001d2d4 	ldrdcs	sp, [r1], -r4
 8015144:	0801b7bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, r9, sl, ip, sp, pc}

08015148 <DisplayUdf::ShowHostName()>:
 8015148:	b510      	push	{r4, lr}
 801514a:	4604      	mov	r4, r0
 801514c:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 8015150:	6980      	ldr	r0, [r0, #24]
 8015152:	f7ff ff2f 	bl	8014fb4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8015156:	4b05      	ldr	r3, [pc, #20]	; (801516c <DisplayUdf::ShowHostName()+0x24>)
 8015158:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 801515c:	681a      	ldr	r2, [r3, #0]
 801515e:	69a0      	ldr	r0, [r4, #24]
 8015160:	3220      	adds	r2, #32
 8015162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015166:	f7ff bf13 	b.w	8014f90 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 801516a:	bf00      	nop
 801516c:	2001d2d4 	ldrdcs	sp, [r1], -r4

08015170 <DisplayUdf::Show()>:
 8015170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015172:	4604      	mov	r4, r0
 8015174:	21ff      	movs	r1, #255	; 0xff
 8015176:	f100 033b 	add.w	r3, r0, #59	; 0x3b
 801517a:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801517e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8015182:	2806      	cmp	r0, #6
 8015184:	bf88      	it	hi
 8015186:	7019      	strbhi	r1, [r3, #0]
 8015188:	429a      	cmp	r2, r3
 801518a:	d1f8      	bne.n	801517e <DisplayUdf::Show()+0xe>
 801518c:	2501      	movs	r5, #1
 801518e:	4629      	mov	r1, r5
 8015190:	3501      	adds	r5, #1
 8015192:	69a0      	ldr	r0, [r4, #24]
 8015194:	b2ed      	uxtb	r5, r5
 8015196:	f7ff ff0d 	bl	8014fb4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801519a:	2d06      	cmp	r5, #6
 801519c:	d1f7      	bne.n	801518e <DisplayUdf::Show()+0x1e>
 801519e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80151a2:	69a0      	ldr	r0, [r4, #24]
 80151a4:	f104 021c 	add.w	r2, r4, #28
 80151a8:	f7ff fef2 	bl	8014f90 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80151ac:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80151b0:	69a0      	ldr	r0, [r4, #24]
 80151b2:	4a0d      	ldr	r2, [pc, #52]	; (80151e8 <DisplayUdf::Show()+0x78>)
 80151b4:	f7ff feec 	bl	8014f90 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80151b8:	4b0c      	ldr	r3, [pc, #48]	; (80151ec <DisplayUdf::Show()+0x7c>)
 80151ba:	4a0d      	ldr	r2, [pc, #52]	; (80151f0 <DisplayUdf::Show()+0x80>)
 80151bc:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 80151c0:	9300      	str	r3, [sp, #0]
 80151c2:	4620      	mov	r0, r4
 80151c4:	2303      	movs	r3, #3
 80151c6:	f7f3 fb13 	bl	80087f0 <Display::Printf(unsigned char, char const*, ...)>
 80151ca:	4620      	mov	r0, r4
 80151cc:	f7ff ff4a 	bl	8015064 <DisplayUdf::ShowIpAddress()>
 80151d0:	4620      	mov	r0, r4
 80151d2:	f7ff ff99 	bl	8015108 <DisplayUdf::ShowGatewayIp()>
 80151d6:	4620      	mov	r0, r4
 80151d8:	f7ff ff78 	bl	80150cc <DisplayUdf::ShowNetmask()>
 80151dc:	4620      	mov	r0, r4
 80151de:	b003      	add	sp, #12
 80151e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80151e4:	f7ff bfb0 	b.w	8015148 <DisplayUdf::ShowHostName()>
 80151e8:	08019502 	stmdaeq	r1, {r1, r8, sl, ip, pc}
 80151ec:	2001d93c 	andcs	sp, r1, ip, lsr r9
 80151f0:	0801b7cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, sl, ip, sp, pc}

080151f4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 80151f4:	3901      	subs	r1, #1
 80151f6:	b510      	push	{r4, lr}
 80151f8:	4604      	mov	r4, r0
 80151fa:	2903      	cmp	r1, #3
 80151fc:	d814      	bhi.n	8015228 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 80151fe:	e8df f001 	tbb	[pc, r1]
 8015202:	281b1402 	ldmdacs	fp, {r1, sl, ip}
 8015206:	4b14      	ldr	r3, [pc, #80]	; (8015258 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8015208:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 801520c:	6818      	ldr	r0, [r3, #0]
 801520e:	f7f4 fd8d 	bl	8009d2c <Display::Status(Display7SegmentMessage)>
 8015212:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8015216:	69a0      	ldr	r0, [r4, #24]
 8015218:	f7ff fecc 	bl	8014fb4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801521c:	4a0f      	ldr	r2, [pc, #60]	; (801525c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 801521e:	4620      	mov	r0, r4
 8015220:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8015224:	f7f3 fae4 	bl	80087f0 <Display::Printf(unsigned char, char const*, ...)>
 8015228:	bd10      	pop	{r4, pc}
 801522a:	f248 0180 	movw	r1, #32896	; 0x8080
 801522e:	4b0a      	ldr	r3, [pc, #40]	; (8015258 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8015230:	6818      	ldr	r0, [r3, #0]
 8015232:	f7f4 fd7b 	bl	8009d2c <Display::Status(Display7SegmentMessage)>
 8015236:	e7f7      	b.n	8015228 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8015238:	4b07      	ldr	r3, [pc, #28]	; (8015258 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 801523a:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 801523e:	6818      	ldr	r0, [r3, #0]
 8015240:	f7f4 fd74 	bl	8009d2c <Display::Status(Display7SegmentMessage)>
 8015244:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8015248:	69a0      	ldr	r0, [r4, #24]
 801524a:	f7ff feb3 	bl	8014fb4 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801524e:	4a04      	ldr	r2, [pc, #16]	; (8015260 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 8015250:	e7e5      	b.n	801521e <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 8015252:	f645 3179 	movw	r1, #23417	; 0x5b79
 8015256:	e7ea      	b.n	801522e <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3a>
 8015258:	2001d8ac 	andcs	sp, r1, ip, lsr #17
 801525c:	0801b7db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r8, r9, sl, ip, sp, pc}
 8015260:	0801b7e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, sl, ip, sp, pc}

08015264 <DisplayUdf::ShowShutdown()>:
 8015264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015268:	4604      	mov	r4, r0
 801526a:	6980      	ldr	r0, [r0, #24]
 801526c:	b1d0      	cbz	r0, 80152a4 <DisplayUdf::ShowShutdown()+0x40>
 801526e:	f890 8005 	ldrb.w	r8, [r0, #5]
 8015272:	6803      	ldr	r3, [r0, #0]
 8015274:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 8015278:	b2ed      	uxtb	r5, r5
 801527a:	462a      	mov	r2, r5
 801527c:	2100      	movs	r1, #0
 801527e:	6a1b      	ldr	r3, [r3, #32]
 8015280:	7906      	ldrb	r6, [r0, #4]
 8015282:	2700      	movs	r7, #0
 8015284:	4798      	blx	r3
 8015286:	3e01      	subs	r6, #1
 8015288:	42b7      	cmp	r7, r6
 801528a:	69a0      	ldr	r0, [r4, #24]
 801528c:	d311      	bcc.n	80152b2 <DisplayUdf::ShowShutdown()+0x4e>
 801528e:	b120      	cbz	r0, 801529a <DisplayUdf::ShowShutdown()+0x36>
 8015290:	6803      	ldr	r3, [r0, #0]
 8015292:	462a      	mov	r2, r5
 8015294:	2100      	movs	r1, #0
 8015296:	6a1b      	ldr	r3, [r3, #32]
 8015298:	4798      	blx	r3
 801529a:	4641      	mov	r1, r8
 801529c:	4a08      	ldr	r2, [pc, #32]	; (80152c0 <DisplayUdf::ShowShutdown()+0x5c>)
 801529e:	69a0      	ldr	r0, [r4, #24]
 80152a0:	f7ff fe76 	bl	8014f90 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80152a4:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 80152a8:	4620      	mov	r0, r4
 80152aa:	f7f4 fd3f 	bl	8009d2c <Display::Status(Display7SegmentMessage)>
 80152ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152b2:	b118      	cbz	r0, 80152bc <DisplayUdf::ShowShutdown()+0x58>
 80152b4:	6803      	ldr	r3, [r0, #0]
 80152b6:	2120      	movs	r1, #32
 80152b8:	695b      	ldr	r3, [r3, #20]
 80152ba:	4798      	blx	r3
 80152bc:	3701      	adds	r7, #1
 80152be:	e7e3      	b.n	8015288 <DisplayUdf::ShowShutdown()+0x24>
 80152c0:	0801b7f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, ip, sp, pc}

080152c4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 80152c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80152c6:	88c6      	ldrh	r6, [r0, #6]
 80152c8:	8885      	ldrh	r5, [r0, #4]
 80152ca:	42ae      	cmp	r6, r5
 80152cc:	d216      	bcs.n	80152fc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 80152ce:	4604      	mov	r4, r0
 80152d0:	6800      	ldr	r0, [r0, #0]
 80152d2:	1bad      	subs	r5, r5, r6
 80152d4:	4430      	add	r0, r6
 80152d6:	7a26      	ldrb	r6, [r4, #8]
 80152d8:	b923      	cbnz	r3, 80152e4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 80152da:	b926      	cbnz	r6, 80152e6 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 80152dc:	9200      	str	r2, [sp, #0]
 80152de:	460b      	mov	r3, r1
 80152e0:	4a09      	ldr	r2, [pc, #36]	; (8015308 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 80152e2:	e003      	b.n	80152ec <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 80152e4:	b166      	cbz	r6, 8015300 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 80152e6:	460b      	mov	r3, r1
 80152e8:	9200      	str	r2, [sp, #0]
 80152ea:	4a08      	ldr	r2, [pc, #32]	; (801530c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 80152ec:	4629      	mov	r1, r5
 80152ee:	f7f4 fa8f 	bl	8009810 <snprintf>
 80152f2:	4285      	cmp	r5, r0
 80152f4:	bfa2      	ittt	ge
 80152f6:	88e3      	ldrhge	r3, [r4, #6]
 80152f8:	181b      	addge	r3, r3, r0
 80152fa:	80e3      	strhge	r3, [r4, #6]
 80152fc:	b002      	add	sp, #8
 80152fe:	bd70      	pop	{r4, r5, r6, pc}
 8015300:	9200      	str	r2, [sp, #0]
 8015302:	460b      	mov	r3, r1
 8015304:	4a02      	ldr	r2, [pc, #8]	; (8015310 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 8015306:	e7f1      	b.n	80152ec <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8015308:	08019181 	stmdaeq	r1, {r0, r7, r8, ip, pc}
 801530c:	08019178 	stmdaeq	r1, {r3, r4, r5, r6, r8, ip, pc}
 8015310:	08019182 	stmdaeq	r1, {r1, r7, r8, ip, pc}

08015314 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8015314:	b510      	push	{r4, lr}
 8015316:	2220      	movs	r2, #32
 8015318:	4604      	mov	r4, r0
 801531a:	f840 1b04 	str.w	r1, [r0], #4
 801531e:	2100      	movs	r1, #0
 8015320:	f001 fa6c 	bl	80167fc <memset>
 8015324:	f647 7305 	movw	r3, #32517	; 0x7f05
 8015328:	4620      	mov	r0, r4
 801532a:	84a3      	strh	r3, [r4, #36]	; 0x24
 801532c:	bd10      	pop	{r4, pc}

0801532e <DisplayUdfParams::Load()>:
 801532e:	b508      	push	{r3, lr}
 8015330:	2300      	movs	r3, #0
 8015332:	4601      	mov	r1, r0
 8015334:	6043      	str	r3, [r0, #4]
 8015336:	6800      	ldr	r0, [r0, #0]
 8015338:	b120      	cbz	r0, 8015344 <DisplayUdfParams::Load()+0x16>
 801533a:	6803      	ldr	r3, [r0, #0]
 801533c:	3104      	adds	r1, #4
 801533e:	68db      	ldr	r3, [r3, #12]
 8015340:	4798      	blx	r3
 8015342:	2001      	movs	r0, #1
 8015344:	bd08      	pop	{r3, pc}
	...

08015348 <DisplayUdfParams::Load(char const*, unsigned int)>:
 8015348:	6803      	ldr	r3, [r0, #0]
 801534a:	b1d3      	cbz	r3, 8015382 <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 801534c:	2300      	movs	r3, #0
 801534e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015350:	460d      	mov	r5, r1
 8015352:	4616      	mov	r6, r2
 8015354:	4604      	mov	r4, r0
 8015356:	6043      	str	r3, [r0, #4]
 8015358:	4602      	mov	r2, r0
 801535a:	490a      	ldr	r1, [pc, #40]	; (8015384 <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 801535c:	4668      	mov	r0, sp
 801535e:	f000 fbc7 	bl	8015af0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8015362:	4632      	mov	r2, r6
 8015364:	4629      	mov	r1, r5
 8015366:	4668      	mov	r0, sp
 8015368:	f000 fbc6 	bl	8015af8 <ReadConfigFile::Read(char const*, unsigned int)>
 801536c:	4621      	mov	r1, r4
 801536e:	f851 0b04 	ldr.w	r0, [r1], #4
 8015372:	6803      	ldr	r3, [r0, #0]
 8015374:	689b      	ldr	r3, [r3, #8]
 8015376:	4798      	blx	r3
 8015378:	4668      	mov	r0, sp
 801537a:	f000 fbbc 	bl	8015af6 <ReadConfigFile::~ReadConfigFile()>
 801537e:	b002      	add	sp, #8
 8015380:	bd70      	pop	{r4, r5, r6, pc}
 8015382:	4770      	bx	lr
 8015384:	08015451 	stmdaeq	r1, {r0, r4, r6, sl, ip, lr}

08015388 <DisplayUdfParams::callbackFunction(char const*)>:
 8015388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801538a:	460e      	mov	r6, r1
 801538c:	4604      	mov	r4, r0
 801538e:	492c      	ldr	r1, [pc, #176]	; (8015440 <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 8015390:	4630      	mov	r0, r6
 8015392:	f10d 0207 	add.w	r2, sp, #7
 8015396:	f000 fce7 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801539a:	b968      	cbnz	r0, 80153b8 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 801539c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80153a0:	6863      	ldr	r3, [r4, #4]
 80153a2:	2a7f      	cmp	r2, #127	; 0x7f
 80153a4:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 80153a8:	bf14      	ite	ne
 80153aa:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 80153ae:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 80153b2:	6063      	str	r3, [r4, #4]
 80153b4:	b003      	add	sp, #12
 80153b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153b8:	4630      	mov	r0, r6
 80153ba:	4922      	ldr	r1, [pc, #136]	; (8015444 <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 80153bc:	f10d 0207 	add.w	r2, sp, #7
 80153c0:	f000 fcd2 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80153c4:	b958      	cbnz	r0, 80153de <DisplayUdfParams::callbackFunction(char const*)+0x56>
 80153c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80153ca:	6863      	ldr	r3, [r4, #4]
 80153cc:	2a05      	cmp	r2, #5
 80153ce:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80153d2:	bf14      	ite	ne
 80153d4:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80153d8:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 80153dc:	e7e9      	b.n	80153b2 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80153de:	4630      	mov	r0, r6
 80153e0:	4919      	ldr	r1, [pc, #100]	; (8015448 <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 80153e2:	f10d 0207 	add.w	r2, sp, #7
 80153e6:	f000 fcbf 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80153ea:	b948      	cbnz	r0, 8015400 <DisplayUdfParams::callbackFunction(char const*)+0x78>
 80153ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80153f0:	6863      	ldr	r3, [r4, #4]
 80153f2:	b112      	cbz	r2, 80153fa <DisplayUdfParams::callbackFunction(char const*)+0x72>
 80153f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80153f8:	e7db      	b.n	80153b2 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80153fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80153fe:	e7d8      	b.n	80153b2 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8015400:	2500      	movs	r5, #0
 8015402:	4f12      	ldr	r7, [pc, #72]	; (801544c <DisplayUdfParams::callbackFunction(char const*)+0xc4>)
 8015404:	4630      	mov	r0, r6
 8015406:	f857 1b04 	ldr.w	r1, [r7], #4
 801540a:	f10d 0207 	add.w	r2, sp, #7
 801540e:	f000 fcab 	bl	8015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8015412:	b980      	cbnz	r0, 8015436 <DisplayUdfParams::callbackFunction(char const*)+0xae>
 8015414:	2301      	movs	r3, #1
 8015416:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801541a:	40ab      	lsls	r3, r5
 801541c:	1e4e      	subs	r6, r1, #1
 801541e:	2e05      	cmp	r6, #5
 8015420:	6862      	ldr	r2, [r4, #4]
 8015422:	4425      	add	r5, r4
 8015424:	d802      	bhi.n	801542c <DisplayUdfParams::callbackFunction(char const*)+0xa4>
 8015426:	7229      	strb	r1, [r5, #8]
 8015428:	4313      	orrs	r3, r2
 801542a:	e7c2      	b.n	80153b2 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 801542c:	ea22 0203 	bic.w	r2, r2, r3
 8015430:	7228      	strb	r0, [r5, #8]
 8015432:	6062      	str	r2, [r4, #4]
 8015434:	e7be      	b.n	80153b4 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 8015436:	3501      	adds	r5, #1
 8015438:	2d14      	cmp	r5, #20
 801543a:	d1e3      	bne.n	8015404 <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 801543c:	e7ba      	b.n	80153b4 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 801543e:	bf00      	nop
 8015440:	0801b8b6 	stmdaeq	r1, {r1, r2, r4, r5, r7, fp, ip, sp, pc}
 8015444:	0801b87e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, fp, ip, sp, pc}
 8015448:	0801b88c 	stmdaeq	r1, {r2, r3, r7, fp, ip, sp, pc}
 801544c:	0801b808 	stmdaeq	r1, {r3, fp, ip, sp, pc}

08015450 <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 8015450:	f7ff bf9a 	b.w	8015388 <DisplayUdfParams::callbackFunction(char const*)>

08015454 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 8015454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015458:	4604      	mov	r4, r0
 801545a:	4615      	mov	r5, r2
 801545c:	461e      	mov	r6, r3
 801545e:	b086      	sub	sp, #24
 8015460:	3004      	adds	r0, #4
 8015462:	b379      	cbz	r1, 80154c4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 8015464:	2222      	movs	r2, #34	; 0x22
 8015466:	f001 f9b2 	bl	80167ce <memmove>
 801546a:	462a      	mov	r2, r5
 801546c:	4633      	mov	r3, r6
 801546e:	493d      	ldr	r1, [pc, #244]	; (8015564 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x110>)
 8015470:	a803      	add	r0, sp, #12
 8015472:	f000 fa9d 	bl	80159b0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8015476:	6863      	ldr	r3, [r4, #4]
 8015478:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 801547c:	493a      	ldr	r1, [pc, #232]	; (8015568 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 801547e:	f3c3 7340 	ubfx	r3, r3, #29, #1
 8015482:	a803      	add	r0, sp, #12
 8015484:	f7ff ff1e 	bl	80152c4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8015488:	6863      	ldr	r3, [r4, #4]
 801548a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 801548e:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8015492:	4936      	ldr	r1, [pc, #216]	; (801556c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 8015494:	a803      	add	r0, sp, #12
 8015496:	f7ff ff15 	bl	80152c4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 801549a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801549e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80154a2:	6863      	ldr	r3, [r4, #4]
 80154a4:	42aa      	cmp	r2, r5
 80154a6:	d226      	bcs.n	80154f6 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 80154a8:	9803      	ldr	r0, [sp, #12]
 80154aa:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 80154ae:	4410      	add	r0, r2
 80154b0:	eba5 0502 	sub.w	r5, r5, r2
 80154b4:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80154b8:	d10b      	bne.n	80154d2 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 80154ba:	b962      	cbnz	r2, 80154d6 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 80154bc:	9200      	str	r2, [sp, #0]
 80154be:	4b2c      	ldr	r3, [pc, #176]	; (8015570 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 80154c0:	4a2c      	ldr	r2, [pc, #176]	; (8015574 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 80154c2:	e00e      	b.n	80154e2 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 80154c4:	6823      	ldr	r3, [r4, #0]
 80154c6:	4601      	mov	r1, r0
 80154c8:	681a      	ldr	r2, [r3, #0]
 80154ca:	4618      	mov	r0, r3
 80154cc:	68d2      	ldr	r2, [r2, #12]
 80154ce:	4790      	blx	r2
 80154d0:	e7cb      	b.n	801546a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 80154d2:	2a00      	cmp	r2, #0
 80154d4:	d041      	beq.n	801555a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 80154d6:	3b00      	subs	r3, #0
 80154d8:	bf18      	it	ne
 80154da:	2301      	movne	r3, #1
 80154dc:	4a26      	ldr	r2, [pc, #152]	; (8015578 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 80154de:	9300      	str	r3, [sp, #0]
 80154e0:	4b23      	ldr	r3, [pc, #140]	; (8015570 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 80154e2:	4629      	mov	r1, r5
 80154e4:	f7f4 f994 	bl	8009810 <snprintf>
 80154e8:	4285      	cmp	r5, r0
 80154ea:	bfa2      	ittt	ge
 80154ec:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80154f0:	181b      	addge	r3, r3, r0
 80154f2:	f8ad 3012 	strhge.w	r3, [sp, #18]
 80154f6:	2500      	movs	r5, #0
 80154f8:	2701      	movs	r7, #1
 80154fa:	4e20      	ldr	r6, [pc, #128]	; (801557c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 80154fc:	f104 0808 	add.w	r8, r4, #8
 8015500:	f856 1b04 	ldr.w	r1, [r6], #4
 8015504:	780b      	ldrb	r3, [r1, #0]
 8015506:	b15b      	cbz	r3, 8015520 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 8015508:	6862      	ldr	r2, [r4, #4]
 801550a:	fa07 f305 	lsl.w	r3, r7, r5
 801550e:	4393      	bics	r3, r2
 8015510:	bf0c      	ite	eq
 8015512:	2301      	moveq	r3, #1
 8015514:	2300      	movne	r3, #0
 8015516:	f818 2005 	ldrb.w	r2, [r8, r5]
 801551a:	a803      	add	r0, sp, #12
 801551c:	f7ff fed2 	bl	80152c4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8015520:	3501      	adds	r5, #1
 8015522:	2d14      	cmp	r5, #20
 8015524:	d1ec      	bne.n	8015500 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 8015526:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801552a:	b17b      	cbz	r3, 801554c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xf8>
 801552c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8015530:	9b03      	ldr	r3, [sp, #12]
 8015532:	4413      	add	r3, r2
 8015534:	227d      	movs	r2, #125	; 0x7d
 8015536:	f803 2c01 	strb.w	r2, [r3, #-1]
 801553a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801553e:	9903      	ldr	r1, [sp, #12]
 8015540:	54ca      	strb	r2, [r1, r3]
 8015542:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015546:	3301      	adds	r3, #1
 8015548:	f8ad 3012 	strh.w	r3, [sp, #18]
 801554c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8015550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015552:	601a      	str	r2, [r3, #0]
 8015554:	b006      	add	sp, #24
 8015556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801555a:	2301      	movs	r3, #1
 801555c:	4a08      	ldr	r2, [pc, #32]	; (8015580 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 801555e:	9300      	str	r3, [sp, #0]
 8015560:	4b03      	ldr	r3, [pc, #12]	; (8015570 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8015562:	e7be      	b.n	80154e2 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8015564:	0801b8aa 	stmdaeq	r1, {r1, r3, r5, r7, fp, ip, sp, pc}
 8015568:	0801b8b6 	stmdaeq	r1, {r1, r2, r4, r5, r7, fp, ip, sp, pc}
 801556c:	0801b87e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, fp, ip, sp, pc}
 8015570:	0801b88c 	stmdaeq	r1, {r2, r3, r7, fp, ip, sp, pc}
 8015574:	08019181 	stmdaeq	r1, {r0, r7, r8, ip, pc}
 8015578:	08019178 	stmdaeq	r1, {r3, r4, r5, r6, r8, ip, pc}
 801557c:	0801b808 	stmdaeq	r1, {r3, fp, ip, sp, pc}
 8015580:	08019182 	stmdaeq	r1, {r1, r7, r8, ip, pc}

08015584 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 8015584:	b513      	push	{r0, r1, r4, lr}
 8015586:	6804      	ldr	r4, [r0, #0]
 8015588:	b914      	cbnz	r4, 8015590 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 801558a:	601c      	str	r4, [r3, #0]
 801558c:	b002      	add	sp, #8
 801558e:	bd10      	pop	{r4, pc}
 8015590:	9300      	str	r3, [sp, #0]
 8015592:	4613      	mov	r3, r2
 8015594:	460a      	mov	r2, r1
 8015596:	2100      	movs	r1, #0
 8015598:	f7ff ff5c 	bl	8015454 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 801559c:	e7f6      	b.n	801558c <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

0801559e <DisplayUdfParams::Set(DisplayUdf*)>:
 801559e:	6843      	ldr	r3, [r0, #4]
 80155a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155a4:	009a      	lsls	r2, r3, #2
 80155a6:	4604      	mov	r4, r0
 80155a8:	460e      	mov	r6, r1
 80155aa:	d506      	bpl.n	80155ba <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 80155ac:	6988      	ldr	r0, [r1, #24]
 80155ae:	b120      	cbz	r0, 80155ba <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 80155b0:	6803      	ldr	r3, [r0, #0]
 80155b2:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 80155b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155b8:	4798      	blx	r3
 80155ba:	6863      	ldr	r3, [r4, #4]
 80155bc:	69b0      	ldr	r0, [r6, #24]
 80155be:	00db      	lsls	r3, r3, #3
 80155c0:	bf41      	itttt	mi
 80155c2:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 80155c6:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 80155ca:	4353      	mulmi	r3, r2
 80155cc:	6173      	strmi	r3, [r6, #20]
 80155ce:	6861      	ldr	r1, [r4, #4]
 80155d0:	f3c1 7180 	ubfx	r1, r1, #30, #1
 80155d4:	b110      	cbz	r0, 80155dc <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 80155d6:	6803      	ldr	r3, [r0, #0]
 80155d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155da:	4798      	blx	r3
 80155dc:	2500      	movs	r5, #0
 80155de:	2701      	movs	r7, #1
 80155e0:	f104 0808 	add.w	r8, r4, #8
 80155e4:	6862      	ldr	r2, [r4, #4]
 80155e6:	fa07 f305 	lsl.w	r3, r7, r5
 80155ea:	4393      	bics	r3, r2
 80155ec:	d105      	bne.n	80155fa <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 80155ee:	462a      	mov	r2, r5
 80155f0:	4630      	mov	r0, r6
 80155f2:	f818 1005 	ldrb.w	r1, [r8, r5]
 80155f6:	f7ff fd0c 	bl	8015012 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80155fa:	3501      	adds	r5, #1
 80155fc:	2d14      	cmp	r5, #20
 80155fe:	d1f1      	bne.n	80155e4 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 8015600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015604 <DisplayUdfParams::Dump()>:
 8015604:	4770      	bx	lr

08015606 <DisplayUdf::ShowNodeName(ArtNetNode*)>:
 8015606:	b570      	push	{r4, r5, r6, lr}
 8015608:	4605      	mov	r5, r0
 801560a:	6980      	ldr	r0, [r0, #24]
 801560c:	460c      	mov	r4, r1
 801560e:	b120      	cbz	r0, 801561a <DisplayUdf::ShowNodeName(ArtNetNode*)+0x14>
 8015610:	6803      	ldr	r3, [r0, #0]
 8015612:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 8015616:	691b      	ldr	r3, [r3, #16]
 8015618:	4798      	blx	r3
 801561a:	69a8      	ldr	r0, [r5, #24]
 801561c:	f104 024a 	add.w	r2, r4, #74	; 0x4a
 8015620:	b190      	cbz	r0, 8015648 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x42>
 8015622:	2300      	movs	r3, #0
 8015624:	7906      	ldrb	r6, [r0, #4]
 8015626:	3449      	adds	r4, #73	; 0x49
 8015628:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 801562c:	b119      	cbz	r1, 8015636 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x30>
 801562e:	1c59      	adds	r1, r3, #1
 8015630:	429e      	cmp	r6, r3
 8015632:	460b      	mov	r3, r1
 8015634:	dcf8      	bgt.n	8015628 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x22>
 8015636:	6801      	ldr	r1, [r0, #0]
 8015638:	b2db      	uxtb	r3, r3
 801563a:	69cc      	ldr	r4, [r1, #28]
 801563c:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 8015640:	46a4      	mov	ip, r4
 8015642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015646:	4760      	bx	ip
 8015648:	bd70      	pop	{r4, r5, r6, pc}
	...

0801564c <DisplayUdf::ShowUniverse(ArtNetNode*)>:
 801564c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015650:	460c      	mov	r4, r1
 8015652:	b089      	sub	sp, #36	; 0x24
 8015654:	4606      	mov	r6, r0
 8015656:	2301      	movs	r3, #1
 8015658:	2100      	movs	r1, #0
 801565a:	4620      	mov	r0, r4
 801565c:	f10d 021f 	add.w	r2, sp, #31
 8015660:	f7f6 f9e0 	bl	800ba24 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8015664:	b1e8      	cbz	r0, 80156a2 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x56>
 8015666:	f8d4 5914 	ldr.w	r5, [r4, #2324]	; 0x914
 801566a:	4a2b      	ldr	r2, [pc, #172]	; (8015718 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xcc>)
 801566c:	4b2b      	ldr	r3, [pc, #172]	; (801571c <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd0>)
 801566e:	4f2c      	ldr	r7, [pc, #176]	; (8015720 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd4>)
 8015670:	2d00      	cmp	r5, #0
 8015672:	bf18      	it	ne
 8015674:	4613      	movne	r3, r2
 8015676:	f8d4 591c 	ldr.w	r5, [r4, #2332]	; 0x91c
 801567a:	4a2a      	ldr	r2, [pc, #168]	; (8015724 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd8>)
 801567c:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 8015680:	2d00      	cmp	r5, #0
 8015682:	bf18      	it	ne
 8015684:	463a      	movne	r2, r7
 8015686:	f89d 001f 	ldrb.w	r0, [sp, #31]
 801568a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801568e:	e9cd 1000 	strd	r1, r0, [sp]
 8015692:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8015696:	4630      	mov	r0, r6
 8015698:	4a23      	ldr	r2, [pc, #140]	; (8015728 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xdc>)
 801569a:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
 801569e:	f7f3 f8a7 	bl	80087f0 <Display::Printf(unsigned char, char const*, ...)>
 80156a2:	4627      	mov	r7, r4
 80156a4:	2500      	movs	r5, #0
 80156a6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 801571c <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd0>
 80156aa:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8015718 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xcc>
 80156ae:	f8df a074 	ldr.w	sl, [pc, #116]	; 8015724 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd8>
 80156b2:	4629      	mov	r1, r5
 80156b4:	2301      	movs	r3, #1
 80156b6:	4620      	mov	r0, r4
 80156b8:	f10d 021f 	add.w	r2, sp, #31
 80156bc:	f7f6 f9b2 	bl	800ba24 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 80156c0:	3501      	adds	r5, #1
 80156c2:	b308      	cbz	r0, 8015708 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xbc>
 80156c4:	f8d7 c914 	ldr.w	ip, [r7, #2324]	; 0x914
 80156c8:	f8df b054 	ldr.w	fp, [pc, #84]	; 8015720 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd4>
 80156cc:	f1bc 0f00 	cmp.w	ip, #0
 80156d0:	bf0c      	ite	eq
 80156d2:	46c6      	moveq	lr, r8
 80156d4:	46ce      	movne	lr, r9
 80156d6:	f8d7 c91c 	ldr.w	ip, [r7, #2332]	; 0x91c
 80156da:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80156de:	f1bc 0f00 	cmp.w	ip, #0
 80156e2:	bf08      	it	eq
 80156e4:	46d3      	moveq	fp, sl
 80156e6:	f89d 001f 	ldrb.w	r0, [sp, #31]
 80156ea:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80156ee:	e9cd 2001 	strd	r2, r0, [sp, #4]
 80156f2:	e9cd eb03 	strd	lr, fp, [sp, #12]
 80156f6:	9300      	str	r3, [sp, #0]
 80156f8:	f106 0143 	add.w	r1, r6, #67	; 0x43
 80156fc:	462b      	mov	r3, r5
 80156fe:	4630      	mov	r0, r6
 8015700:	4a0a      	ldr	r2, [pc, #40]	; (801572c <DisplayUdf::ShowUniverse(ArtNetNode*)+0xe0>)
 8015702:	5d49      	ldrb	r1, [r1, r5]
 8015704:	f7f3 f874 	bl	80087f0 <Display::Printf(unsigned char, char const*, ...)>
 8015708:	2d04      	cmp	r5, #4
 801570a:	f107 0728 	add.w	r7, r7, #40	; 0x28
 801570e:	d1d0      	bne.n	80156b2 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x66>
 8015710:	b009      	add	sp, #36	; 0x24
 8015712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015716:	bf00      	nop
 8015718:	0801a003 	stmdaeq	r1, {r0, r1, sp, pc}
 801571c:	08019fff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8015720:	0801a00f 	stmdaeq	r1, {r0, r1, r2, r3, sp, pc}
 8015724:	0801b8c0 	stmdaeq	r1, {r6, r7, fp, ip, sp, pc}
 8015728:	0801b8c5 	stmdaeq	r1, {r0, r2, r6, r7, fp, ip, sp, pc}
 801572c:	0801b8d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, fp, ip, sp, pc}

08015730 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
 8015730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015734:	4606      	mov	r6, r0
 8015736:	2541      	movs	r5, #65	; 0x41
 8015738:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8015778 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x48>
 801573c:	b085      	sub	sp, #20
 801573e:	f100 0849 	add.w	r8, r0, #73	; 0x49
 8015742:	f601 17f4 	addw	r7, r1, #2548	; 0x9f4
 8015746:	012b      	lsls	r3, r5, #4
 8015748:	58fc      	ldr	r4, [r7, r3]
 801574a:	464a      	mov	r2, r9
 801574c:	0e23      	lsrs	r3, r4, #24
 801574e:	9303      	str	r3, [sp, #12]
 8015750:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8015754:	9302      	str	r3, [sp, #8]
 8015756:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801575a:	b2e4      	uxtb	r4, r4
 801575c:	9301      	str	r3, [sp, #4]
 801575e:	9400      	str	r4, [sp, #0]
 8015760:	462b      	mov	r3, r5
 8015762:	4630      	mov	r0, r6
 8015764:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8015768:	3501      	adds	r5, #1
 801576a:	f7f3 f841 	bl	80087f0 <Display::Printf(unsigned char, char const*, ...)>
 801576e:	2d45      	cmp	r5, #69	; 0x45
 8015770:	d1e9      	bne.n	8015746 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x16>
 8015772:	b005      	add	sp, #20
 8015774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015778:	0801b8ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, fp, ip, sp, pc}

0801577c <DisplayUdf::Show(ArtNetNode*)>:
 801577c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801577e:	4604      	mov	r4, r0
 8015780:	460d      	mov	r5, r1
 8015782:	f7ff fcf5 	bl	8015170 <DisplayUdf::Show()>
 8015786:	4629      	mov	r1, r5
 8015788:	4620      	mov	r0, r4
 801578a:	f7ff ff3c 	bl	8015606 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 801578e:	4629      	mov	r1, r5
 8015790:	4620      	mov	r0, r4
 8015792:	f7ff ff5b 	bl	801564c <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8015796:	4629      	mov	r1, r5
 8015798:	4620      	mov	r0, r4
 801579a:	f7ff ffc9 	bl	8015730 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>
 801579e:	f895 28f7 	ldrb.w	r2, [r5, #2295]	; 0x8f7
 80157a2:	f895 38f6 	ldrb.w	r3, [r5, #2294]	; 0x8f6
 80157a6:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 80157aa:	4413      	add	r3, r2
 80157ac:	4620      	mov	r0, r4
 80157ae:	4a0d      	ldr	r2, [pc, #52]	; (80157e4 <DisplayUdf::Show(ArtNetNode*)+0x68>)
 80157b0:	f7f3 f81e 	bl	80087f0 <Display::Printf(unsigned char, char const*, ...)>
 80157b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80157b6:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 80157ba:	2a02      	cmp	r2, #2
 80157bc:	d001      	beq.n	80157c2 <DisplayUdf::Show(ArtNetNode*)+0x46>
 80157be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80157c0:	b92b      	cbnz	r3, 80157ce <DisplayUdf::Show(ArtNetNode*)+0x52>
 80157c2:	4620      	mov	r0, r4
 80157c4:	4a08      	ldr	r2, [pc, #32]	; (80157e8 <DisplayUdf::Show(ArtNetNode*)+0x6c>)
 80157c6:	f7f3 f813 	bl	80087f0 <Display::Printf(unsigned char, char const*, ...)>
 80157ca:	b003      	add	sp, #12
 80157cc:	bd30      	pop	{r4, r5, pc}
 80157ce:	4807      	ldr	r0, [pc, #28]	; (80157ec <DisplayUdf::Show(ArtNetNode*)+0x70>)
 80157d0:	9300      	str	r3, [sp, #0]
 80157d2:	4b07      	ldr	r3, [pc, #28]	; (80157f0 <DisplayUdf::Show(ArtNetNode*)+0x74>)
 80157d4:	2a00      	cmp	r2, #0
 80157d6:	bf08      	it	eq
 80157d8:	4603      	moveq	r3, r0
 80157da:	4620      	mov	r0, r4
 80157dc:	4a05      	ldr	r2, [pc, #20]	; (80157f4 <DisplayUdf::Show(ArtNetNode*)+0x78>)
 80157de:	f7f3 f807 	bl	80087f0 <Display::Printf(unsigned char, char const*, ...)>
 80157e2:	e7f2      	b.n	80157ca <DisplayUdf::Show(ArtNetNode*)+0x4e>
 80157e4:	0801b8ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, fp, ip, sp, pc}
 80157e8:	0801b906 	stmdaeq	r1, {r1, r2, r8, fp, ip, sp, pc}
 80157ec:	0801a302 	stmdaeq	r1, {r1, r8, r9, sp, pc}
 80157f0:	0801a2f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r9, sp, pc}
 80157f4:	0801b90d 	stmdaeq	r1, {r0, r2, r3, r8, fp, ip, sp, pc}

080157f8 <NetworkDisplay::ShowEmacStart()>:
 80157f8:	4b01      	ldr	r3, [pc, #4]	; (8015800 <NetworkDisplay::ShowEmacStart()+0x8>)
 80157fa:	6818      	ldr	r0, [r3, #0]
 80157fc:	f7ff bc22 	b.w	8015044 <DisplayUdf::ShowEmacStart()>
 8015800:	2001d8a4 	andcs	sp, r1, r4, lsr #17

08015804 <NetworkDisplay::ShowIp()>:
 8015804:	4b01      	ldr	r3, [pc, #4]	; (801580c <NetworkDisplay::ShowIp()+0x8>)
 8015806:	6818      	ldr	r0, [r3, #0]
 8015808:	f7ff bc2c 	b.w	8015064 <DisplayUdf::ShowIpAddress()>
 801580c:	2001d8a4 	andcs	sp, r1, r4, lsr #17

08015810 <NetworkDisplay::ShowNetMask()>:
 8015810:	4b01      	ldr	r3, [pc, #4]	; (8015818 <NetworkDisplay::ShowNetMask()+0x8>)
 8015812:	6818      	ldr	r0, [r3, #0]
 8015814:	f7ff bc5a 	b.w	80150cc <DisplayUdf::ShowNetmask()>
 8015818:	2001d8a4 	andcs	sp, r1, r4, lsr #17

0801581c <NetworkDisplay::ShowGatewayIp()>:
 801581c:	4b01      	ldr	r3, [pc, #4]	; (8015824 <NetworkDisplay::ShowGatewayIp()+0x8>)
 801581e:	6818      	ldr	r0, [r3, #0]
 8015820:	f7ff bc72 	b.w	8015108 <DisplayUdf::ShowGatewayIp()>
 8015824:	2001d8a4 	andcs	sp, r1, r4, lsr #17

08015828 <NetworkDisplay::ShowHostName()>:
 8015828:	4b01      	ldr	r3, [pc, #4]	; (8015830 <NetworkDisplay::ShowHostName()+0x8>)
 801582a:	6818      	ldr	r0, [r3, #0]
 801582c:	f7ff bc8c 	b.w	8015148 <DisplayUdf::ShowHostName()>
 8015830:	2001d8a4 	andcs	sp, r1, r4, lsr #17

08015834 <NetworkDisplay::ShowShutdown()>:
 8015834:	4b01      	ldr	r3, [pc, #4]	; (801583c <NetworkDisplay::ShowShutdown()+0x8>)
 8015836:	6818      	ldr	r0, [r3, #0]
 8015838:	f7ff bd14 	b.w	8015264 <DisplayUdf::ShowShutdown()>
 801583c:	2001d8a4 	andcs	sp, r1, r4, lsr #17

08015840 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8015840:	4b01      	ldr	r3, [pc, #4]	; (8015848 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)+0x8>)
 8015842:	6818      	ldr	r0, [r3, #0]
 8015844:	f7ff bcd6 	b.w	80151f4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8015848:	2001d8a4 	andcs	sp, r1, r4, lsr #17

0801584c <properties::convert_json_file(char*, unsigned short, bool)>:
 801584c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015850:	4603      	mov	r3, r0
 8015852:	7800      	ldrb	r0, [r0, #0]
 8015854:	287b      	cmp	r0, #123	; 0x7b
 8015856:	f040 80a2 	bne.w	801599e <properties::convert_json_file(char*, unsigned short, bool)+0x152>
 801585a:	b17a      	cbz	r2, 801587c <properties::convert_json_file(char*, unsigned short, bool)+0x30>
 801585c:	2401      	movs	r4, #1
 801585e:	461e      	mov	r6, r3
 8015860:	4620      	mov	r0, r4
 8015862:	2a00      	cmp	r2, #0
 8015864:	bf0c      	ite	eq
 8015866:	f04f 0c0a 	moveq.w	ip, #10
 801586a:	f04f 0c00 	movne.w	ip, #0
 801586e:	273d      	movs	r7, #61	; 0x3d
 8015870:	42a1      	cmp	r1, r4
 8015872:	d850      	bhi.n	8015916 <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 8015874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015878:	463c      	mov	r4, r7
 801587a:	e7f2      	b.n	8015862 <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 801587c:	2023      	movs	r0, #35	; 0x23
 801587e:	f803 0b01 	strb.w	r0, [r3], #1
 8015882:	461c      	mov	r4, r3
 8015884:	2701      	movs	r7, #1
 8015886:	42b9      	cmp	r1, r7
 8015888:	d811      	bhi.n	80158ae <properties::convert_json_file(char*, unsigned short, bool)+0x62>
 801588a:	2001      	movs	r0, #1
 801588c:	461e      	mov	r6, r3
 801588e:	230a      	movs	r3, #10
 8015890:	4625      	mov	r5, r4
 8015892:	f806 3b01 	strb.w	r3, [r6], #1
 8015896:	3001      	adds	r0, #1
 8015898:	462b      	mov	r3, r5
 801589a:	781c      	ldrb	r4, [r3, #0]
 801589c:	3501      	adds	r5, #1
 801589e:	2c7b      	cmp	r4, #123	; 0x7b
 80158a0:	d0ea      	beq.n	8015878 <properties::convert_json_file(char*, unsigned short, bool)+0x2c>
 80158a2:	42b9      	cmp	r1, r7
 80158a4:	f107 0401 	add.w	r4, r7, #1
 80158a8:	d9db      	bls.n	8015862 <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 80158aa:	4627      	mov	r7, r4
 80158ac:	e7f4      	b.n	8015898 <properties::convert_json_file(char*, unsigned short, bool)+0x4c>
 80158ae:	f814 0b01 	ldrb.w	r0, [r4], #1
 80158b2:	2822      	cmp	r0, #34	; 0x22
 80158b4:	d119      	bne.n	80158ea <properties::convert_json_file(char*, unsigned short, bool)+0x9e>
 80158b6:	46a4      	mov	ip, r4
 80158b8:	461d      	mov	r5, r3
 80158ba:	2601      	movs	r6, #1
 80158bc:	f89c e000 	ldrb.w	lr, [ip]
 80158c0:	4664      	mov	r4, ip
 80158c2:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 80158c6:	462b      	mov	r3, r5
 80158c8:	4630      	mov	r0, r6
 80158ca:	f10c 0c01 	add.w	ip, ip, #1
 80158ce:	f105 0501 	add.w	r5, r5, #1
 80158d2:	f106 0601 	add.w	r6, r6, #1
 80158d6:	d0d9      	beq.n	801588c <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 80158d8:	3701      	adds	r7, #1
 80158da:	42b9      	cmp	r1, r7
 80158dc:	4664      	mov	r4, ip
 80158de:	f805 ec01 	strb.w	lr, [r5, #-1]
 80158e2:	d8eb      	bhi.n	80158bc <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 80158e4:	4630      	mov	r0, r6
 80158e6:	462b      	mov	r3, r5
 80158e8:	e7d0      	b.n	801588c <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 80158ea:	3701      	adds	r7, #1
 80158ec:	e7cb      	b.n	8015886 <properties::convert_json_file(char*, unsigned short, bool)+0x3a>
 80158ee:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 80158f2:	d110      	bne.n	8015916 <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 80158f4:	eba0 0803 	sub.w	r8, r0, r3
 80158f8:	461a      	mov	r2, r3
 80158fa:	eb08 0003 	add.w	r0, r8, r3
 80158fe:	f813 eb01 	ldrb.w	lr, [r3], #1
 8015902:	1c65      	adds	r5, r4, #1
 8015904:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8015908:	d04c      	beq.n	80159a4 <properties::convert_json_file(char*, unsigned short, bool)+0x158>
 801590a:	42a1      	cmp	r1, r4
 801590c:	d911      	bls.n	8015932 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
 801590e:	462c      	mov	r4, r5
 8015910:	f806 eb01 	strb.w	lr, [r6], #1
 8015914:	e7f0      	b.n	80158f8 <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 8015916:	42a1      	cmp	r1, r4
 8015918:	461d      	mov	r5, r3
 801591a:	f893 e000 	ldrb.w	lr, [r3]
 801591e:	f104 0401 	add.w	r4, r4, #1
 8015922:	f103 0301 	add.w	r3, r3, #1
 8015926:	d8e2      	bhi.n	80158ee <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8015928:	462b      	mov	r3, r5
 801592a:	e7e3      	b.n	80158f4 <properties::convert_json_file(char*, unsigned short, bool)+0xa8>
 801592c:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
 8015930:	d009      	beq.n	8015946 <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 8015932:	42a9      	cmp	r1, r5
 8015934:	4614      	mov	r4, r2
 8015936:	f892 e000 	ldrb.w	lr, [r2]
 801593a:	f105 0501 	add.w	r5, r5, #1
 801593e:	f102 0201 	add.w	r2, r2, #1
 8015942:	d8f3      	bhi.n	801592c <properties::convert_json_file(char*, unsigned short, bool)+0xe0>
 8015944:	4622      	mov	r2, r4
 8015946:	7814      	ldrb	r4, [r2, #0]
 8015948:	4696      	mov	lr, r2
 801594a:	2c2f      	cmp	r4, #47	; 0x2f
 801594c:	462b      	mov	r3, r5
 801594e:	f102 0201 	add.w	r2, r2, #1
 8015952:	f105 0501 	add.w	r5, r5, #1
 8015956:	d81a      	bhi.n	801598e <properties::convert_json_file(char*, unsigned short, bool)+0x142>
 8015958:	4299      	cmp	r1, r3
 801595a:	d8f4      	bhi.n	8015946 <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 801595c:	2c22      	cmp	r4, #34	; 0x22
 801595e:	bf08      	it	eq
 8015960:	4696      	moveq	lr, r2
 8015962:	4673      	mov	r3, lr
 8015964:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015968:	1c6c      	adds	r4, r5, #1
 801596a:	2a22      	cmp	r2, #34	; 0x22
 801596c:	d011      	beq.n	8015992 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 801596e:	2a2c      	cmp	r2, #44	; 0x2c
 8015970:	d00f      	beq.n	8015992 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8015972:	2a7d      	cmp	r2, #125	; 0x7d
 8015974:	d00d      	beq.n	8015992 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8015976:	42a9      	cmp	r1, r5
 8015978:	d90f      	bls.n	801599a <properties::convert_json_file(char*, unsigned short, bool)+0x14e>
 801597a:	f1a2 0520 	sub.w	r5, r2, #32
 801597e:	2d5a      	cmp	r5, #90	; 0x5a
 8015980:	d803      	bhi.n	801598a <properties::convert_json_file(char*, unsigned short, bool)+0x13e>
 8015982:	469e      	mov	lr, r3
 8015984:	f806 2b01 	strb.w	r2, [r6], #1
 8015988:	3001      	adds	r0, #1
 801598a:	4625      	mov	r5, r4
 801598c:	e7e9      	b.n	8015962 <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 801598e:	461d      	mov	r5, r3
 8015990:	e7e7      	b.n	8015962 <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 8015992:	462c      	mov	r4, r5
 8015994:	f806 cb01 	strb.w	ip, [r6], #1
 8015998:	3001      	adds	r0, #1
 801599a:	3401      	adds	r4, #1
 801599c:	e768      	b.n	8015870 <properties::convert_json_file(char*, unsigned short, bool)+0x24>
 801599e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80159a2:	e767      	b.n	8015874 <properties::convert_json_file(char*, unsigned short, bool)+0x28>
 80159a4:	4625      	mov	r5, r4
 80159a6:	f806 7b01 	strb.w	r7, [r6], #1
 80159aa:	3001      	adds	r0, #1
 80159ac:	e7c1      	b.n	8015932 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
	...

080159b0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 80159b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159b4:	6002      	str	r2, [r0, #0]
 80159b6:	4614      	mov	r4, r2
 80159b8:	2200      	movs	r2, #0
 80159ba:	80c2      	strh	r2, [r0, #6]
 80159bc:	4a1c      	ldr	r2, [pc, #112]	; (8015a30 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 80159be:	4606      	mov	r6, r0
 80159c0:	7812      	ldrb	r2, [r2, #0]
 80159c2:	8083      	strh	r3, [r0, #4]
 80159c4:	f002 0201 	and.w	r2, r2, #1
 80159c8:	7202      	strb	r2, [r0, #8]
 80159ca:	4608      	mov	r0, r1
 80159cc:	4605      	mov	r5, r0
 80159ce:	782f      	ldrb	r7, [r5, #0]
 80159d0:	3001      	adds	r0, #1
 80159d2:	2f00      	cmp	r7, #0
 80159d4:	d1fa      	bne.n	80159cc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 80159d6:	1a6d      	subs	r5, r5, r1
 80159d8:	b29b      	uxth	r3, r3
 80159da:	b1d2      	cbz	r2, 8015a12 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 80159dc:	1d2f      	adds	r7, r5, #4
 80159de:	429f      	cmp	r7, r3
 80159e0:	d814      	bhi.n	8015a0c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 80159e2:	f04f 087b 	mov.w	r8, #123	; 0x7b
 80159e6:	f04f 0922 	mov.w	r9, #34	; 0x22
 80159ea:	462a      	mov	r2, r5
 80159ec:	f884 8000 	strb.w	r8, [r4]
 80159f0:	f884 9001 	strb.w	r9, [r4, #1]
 80159f4:	1ca0      	adds	r0, r4, #2
 80159f6:	f000 feea 	bl	80167ce <memmove>
 80159fa:	223a      	movs	r2, #58	; 0x3a
 80159fc:	1963      	adds	r3, r4, r5
 80159fe:	3505      	adds	r5, #5
 8015a00:	f883 9002 	strb.w	r9, [r3, #2]
 8015a04:	70da      	strb	r2, [r3, #3]
 8015a06:	80f5      	strh	r5, [r6, #6]
 8015a08:	f804 8007 	strb.w	r8, [r4, r7]
 8015a0c:	4630      	mov	r0, r6
 8015a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a12:	1caf      	adds	r7, r5, #2
 8015a14:	429f      	cmp	r7, r3
 8015a16:	d8f9      	bhi.n	8015a0c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8015a18:	4620      	mov	r0, r4
 8015a1a:	2323      	movs	r3, #35	; 0x23
 8015a1c:	462a      	mov	r2, r5
 8015a1e:	f800 3b01 	strb.w	r3, [r0], #1
 8015a22:	f000 fed4 	bl	80167ce <memmove>
 8015a26:	230a      	movs	r3, #10
 8015a28:	442c      	add	r4, r5
 8015a2a:	7063      	strb	r3, [r4, #1]
 8015a2c:	80f7      	strh	r7, [r6, #6]
 8015a2e:	e7ed      	b.n	8015a0c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8015a30:	2001d8a8 	andcs	sp, r1, r8, lsr #17

08015a34 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 8015a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a36:	469c      	mov	ip, r3
 8015a38:	8885      	ldrh	r5, [r0, #4]
 8015a3a:	88c3      	ldrh	r3, [r0, #6]
 8015a3c:	b085      	sub	sp, #20
 8015a3e:	42ab      	cmp	r3, r5
 8015a40:	d302      	bcc.n	8015a48 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 8015a42:	2000      	movs	r0, #0
 8015a44:	b005      	add	sp, #20
 8015a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a48:	4604      	mov	r4, r0
 8015a4a:	6800      	ldr	r0, [r0, #0]
 8015a4c:	1aed      	subs	r5, r5, r3
 8015a4e:	4418      	add	r0, r3
 8015a50:	b2d6      	uxtb	r6, r2
 8015a52:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8015a56:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8015a5a:	f894 e008 	ldrb.w	lr, [r4, #8]
 8015a5e:	0e12      	lsrs	r2, r2, #24
 8015a60:	f1bc 0f00 	cmp.w	ip, #0
 8015a64:	d109      	bne.n	8015a7a <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 8015a66:	f1be 0f00 	cmp.w	lr, #0
 8015a6a:	d109      	bne.n	8015a80 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 8015a6c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015a70:	e9cd 6700 	strd	r6, r7, [sp]
 8015a74:	460b      	mov	r3, r1
 8015a76:	4a0e      	ldr	r2, [pc, #56]	; (8015ab0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 8015a78:	e008      	b.n	8015a8c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8015a7a:	f1be 0f00 	cmp.w	lr, #0
 8015a7e:	d00f      	beq.n	8015aa0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 8015a80:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015a84:	460b      	mov	r3, r1
 8015a86:	e9cd 6700 	strd	r6, r7, [sp]
 8015a8a:	4a0a      	ldr	r2, [pc, #40]	; (8015ab4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 8015a8c:	4629      	mov	r1, r5
 8015a8e:	f7f3 febf 	bl	8009810 <snprintf>
 8015a92:	4285      	cmp	r5, r0
 8015a94:	dbd5      	blt.n	8015a42 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 8015a96:	88e3      	ldrh	r3, [r4, #6]
 8015a98:	4403      	add	r3, r0
 8015a9a:	80e3      	strh	r3, [r4, #6]
 8015a9c:	2001      	movs	r0, #1
 8015a9e:	e7d1      	b.n	8015a44 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 8015aa0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015aa4:	e9cd 6700 	strd	r6, r7, [sp]
 8015aa8:	460b      	mov	r3, r1
 8015aaa:	4a03      	ldr	r2, [pc, #12]	; (8015ab8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 8015aac:	e7ee      	b.n	8015a8c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8015aae:	bf00      	nop
 8015ab0:	0801b9d0 	stmdaeq	r1, {r4, r6, r7, r8, fp, ip, sp, pc}
 8015ab4:	0801b9bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, fp, ip, sp, pc}
 8015ab8:	0801b9d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, fp, ip, sp, pc}

08015abc <PropertiesBuilder::AddComment(char const*)>:
 8015abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015abe:	7a06      	ldrb	r6, [r0, #8]
 8015ac0:	b996      	cbnz	r6, 8015ae8 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8015ac2:	4604      	mov	r4, r0
 8015ac4:	88c0      	ldrh	r0, [r0, #6]
 8015ac6:	88a5      	ldrh	r5, [r4, #4]
 8015ac8:	42a8      	cmp	r0, r5
 8015aca:	d20d      	bcs.n	8015ae8 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8015acc:	6827      	ldr	r7, [r4, #0]
 8015ace:	1a2d      	subs	r5, r5, r0
 8015ad0:	460b      	mov	r3, r1
 8015ad2:	4a06      	ldr	r2, [pc, #24]	; (8015aec <PropertiesBuilder::AddComment(char const*)+0x30>)
 8015ad4:	4629      	mov	r1, r5
 8015ad6:	4438      	add	r0, r7
 8015ad8:	f7f3 fe9a 	bl	8009810 <snprintf>
 8015adc:	4285      	cmp	r5, r0
 8015ade:	bfa1      	itttt	ge
 8015ae0:	2601      	movge	r6, #1
 8015ae2:	88e3      	ldrhge	r3, [r4, #6]
 8015ae4:	18c0      	addge	r0, r0, r3
 8015ae6:	80e0      	strhge	r0, [r4, #6]
 8015ae8:	4630      	mov	r0, r6
 8015aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015aec:	0801b9e1 	stmdaeq	r1, {r0, r5, r6, r7, r8, fp, ip, sp, pc}

08015af0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 8015af0:	e9c0 1200 	strd	r1, r2, [r0]
 8015af4:	4770      	bx	lr

08015af6 <ReadConfigFile::~ReadConfigFile()>:
 8015af6:	4770      	bx	lr

08015af8 <ReadConfigFile::Read(char const*, unsigned int)>:
 8015af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015afc:	4606      	mov	r6, r0
 8015afe:	460d      	mov	r5, r1
 8015b00:	4614      	mov	r4, r2
 8015b02:	f04f 0800 	mov.w	r8, #0
 8015b06:	b0a0      	sub	sp, #128	; 0x80
 8015b08:	b33c      	cbz	r4, 8015b5a <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8015b0a:	466b      	mov	r3, sp
 8015b0c:	462a      	mov	r2, r5
 8015b0e:	4619      	mov	r1, r3
 8015b10:	e007      	b.n	8015b22 <ReadConfigFile::Read(char const*, unsigned int)+0x2a>
 8015b12:	f803 7b01 	strb.w	r7, [r3], #1
 8015b16:	1a58      	subs	r0, r3, r1
 8015b18:	287f      	cmp	r0, #127	; 0x7f
 8015b1a:	4615      	mov	r5, r2
 8015b1c:	dc1d      	bgt.n	8015b5a <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8015b1e:	3c01      	subs	r4, #1
 8015b20:	d00f      	beq.n	8015b42 <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 8015b22:	7817      	ldrb	r7, [r2, #0]
 8015b24:	4610      	mov	r0, r2
 8015b26:	2f0d      	cmp	r7, #13
 8015b28:	f102 0201 	add.w	r2, r2, #1
 8015b2c:	d001      	beq.n	8015b32 <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 8015b2e:	2f0a      	cmp	r7, #10
 8015b30:	d1ef      	bne.n	8015b12 <ReadConfigFile::Read(char const*, unsigned int)+0x1a>
 8015b32:	4605      	mov	r5, r0
 8015b34:	b12c      	cbz	r4, 8015b42 <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 8015b36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015b3a:	2a0d      	cmp	r2, #13
 8015b3c:	d00b      	beq.n	8015b56 <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8015b3e:	2a0a      	cmp	r2, #10
 8015b40:	d009      	beq.n	8015b56 <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8015b42:	f89d 2000 	ldrb.w	r2, [sp]
 8015b46:	2a60      	cmp	r2, #96	; 0x60
 8015b48:	d9de      	bls.n	8015b08 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8015b4a:	f883 8000 	strb.w	r8, [r3]
 8015b4e:	e9d6 3000 	ldrd	r3, r0, [r6]
 8015b52:	4798      	blx	r3
 8015b54:	e7d8      	b.n	8015b08 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8015b56:	3c01      	subs	r4, #1
 8015b58:	e7eb      	b.n	8015b32 <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 8015b5a:	b020      	add	sp, #128	; 0x80
 8015b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015b60 <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 8015b60:	b570      	push	{r4, r5, r6, lr}
 8015b62:	4615      	mov	r5, r2
 8015b64:	461c      	mov	r4, r3
 8015b66:	f000 f91c 	bl	8015da2 <Sscan::checkName(char const*, char const*)>
 8015b6a:	b180      	cbz	r0, 8015b8e <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2e>
 8015b6c:	2100      	movs	r1, #0
 8015b6e:	5c43      	ldrb	r3, [r0, r1]
 8015b70:	6826      	ldr	r6, [r4, #0]
 8015b72:	b28a      	uxth	r2, r1
 8015b74:	b143      	cbz	r3, 8015b88 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 8015b76:	42b2      	cmp	r2, r6
 8015b78:	d303      	bcc.n	8015b82 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x22>
 8015b7a:	2b0a      	cmp	r3, #10
 8015b7c:	d004      	beq.n	8015b88 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 8015b7e:	2002      	movs	r0, #2
 8015b80:	e004      	b.n	8015b8c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>
 8015b82:	546b      	strb	r3, [r5, r1]
 8015b84:	3101      	adds	r1, #1
 8015b86:	e7f2      	b.n	8015b6e <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 8015b88:	2000      	movs	r0, #0
 8015b8a:	6022      	str	r2, [r4, #0]
 8015b8c:	bd70      	pop	{r4, r5, r6, pc}
 8015b8e:	2001      	movs	r0, #1
 8015b90:	e7fc      	b.n	8015b8c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>

08015b92 <Sscan::Float(char const*, char const*, float&)>:
 8015b92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b96:	4616      	mov	r6, r2
 8015b98:	f000 f903 	bl	8015da2 <Sscan::checkName(char const*, char const*)>
 8015b9c:	2800      	cmp	r0, #0
 8015b9e:	d059      	beq.n	8015c54 <Sscan::Float(char const*, char const*, float&)+0xc2>
 8015ba0:	4604      	mov	r4, r0
 8015ba2:	7803      	ldrb	r3, [r0, #0]
 8015ba4:	2b2d      	cmp	r3, #45	; 0x2d
 8015ba6:	bf08      	it	eq
 8015ba8:	3401      	addeq	r4, #1
 8015baa:	7823      	ldrb	r3, [r4, #0]
 8015bac:	bf0c      	ite	eq
 8015bae:	f04f 0801 	moveq.w	r8, #1
 8015bb2:	f04f 0800 	movne.w	r8, #0
 8015bb6:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8015bba:	d103      	bne.n	8015bc4 <Sscan::Float(char const*, char const*, float&)+0x32>
 8015bbc:	2702      	movs	r7, #2
 8015bbe:	4638      	mov	r0, r7
 8015bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bc4:	2000      	movs	r0, #0
 8015bc6:	220a      	movs	r2, #10
 8015bc8:	7823      	ldrb	r3, [r4, #0]
 8015bca:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015bce:	2909      	cmp	r1, #9
 8015bd0:	d8f4      	bhi.n	8015bbc <Sscan::Float(char const*, char const*, float&)+0x2a>
 8015bd2:	fb02 3000 	mla	r0, r2, r0, r3
 8015bd6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015bda:	3830      	subs	r0, #48	; 0x30
 8015bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8015bde:	d002      	beq.n	8015be6 <Sscan::Float(char const*, char const*, float&)+0x54>
 8015be0:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8015be4:	d1f0      	bne.n	8015bc8 <Sscan::Float(char const*, char const*, float&)+0x36>
 8015be6:	f7f2 f8af 	bl	8007d48 <__aeabi_ui2f>
 8015bea:	6030      	str	r0, [r6, #0]
 8015bec:	7823      	ldrb	r3, [r4, #0]
 8015bee:	4605      	mov	r5, r0
 8015bf0:	2b2e      	cmp	r3, #46	; 0x2e
 8015bf2:	d008      	beq.n	8015c06 <Sscan::Float(char const*, char const*, float&)+0x74>
 8015bf4:	f1b8 0f00 	cmp.w	r8, #0
 8015bf8:	d101      	bne.n	8015bfe <Sscan::Float(char const*, char const*, float&)+0x6c>
 8015bfa:	2700      	movs	r7, #0
 8015bfc:	e7df      	b.n	8015bbe <Sscan::Float(char const*, char const*, float&)+0x2c>
 8015bfe:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8015c02:	6035      	str	r5, [r6, #0]
 8015c04:	e7f9      	b.n	8015bfa <Sscan::Float(char const*, char const*, float&)+0x68>
 8015c06:	f04f 0901 	mov.w	r9, #1
 8015c0a:	2000      	movs	r0, #0
 8015c0c:	220a      	movs	r2, #10
 8015c0e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015c12:	f013 07df 	ands.w	r7, r3, #223	; 0xdf
 8015c16:	d111      	bne.n	8015c3c <Sscan::Float(char const*, char const*, float&)+0xaa>
 8015c18:	f7f2 f896 	bl	8007d48 <__aeabi_ui2f>
 8015c1c:	4604      	mov	r4, r0
 8015c1e:	4648      	mov	r0, r9
 8015c20:	f7f2 f892 	bl	8007d48 <__aeabi_ui2f>
 8015c24:	4601      	mov	r1, r0
 8015c26:	4620      	mov	r0, r4
 8015c28:	f7f2 fc0c 	bl	8008444 <__aeabi_fdiv>
 8015c2c:	4629      	mov	r1, r5
 8015c2e:	f7f1 ffdb 	bl	8007be8 <__addsf3>
 8015c32:	f1b8 0f00 	cmp.w	r8, #0
 8015c36:	d109      	bne.n	8015c4c <Sscan::Float(char const*, char const*, float&)+0xba>
 8015c38:	6030      	str	r0, [r6, #0]
 8015c3a:	e7de      	b.n	8015bfa <Sscan::Float(char const*, char const*, float&)+0x68>
 8015c3c:	3b30      	subs	r3, #48	; 0x30
 8015c3e:	2b09      	cmp	r3, #9
 8015c40:	d8bc      	bhi.n	8015bbc <Sscan::Float(char const*, char const*, float&)+0x2a>
 8015c42:	fb02 3000 	mla	r0, r2, r0, r3
 8015c46:	fb02 f909 	mul.w	r9, r2, r9
 8015c4a:	e7e0      	b.n	8015c0e <Sscan::Float(char const*, char const*, float&)+0x7c>
 8015c4c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8015c50:	6030      	str	r0, [r6, #0]
 8015c52:	e7b4      	b.n	8015bbe <Sscan::Float(char const*, char const*, float&)+0x2c>
 8015c54:	2701      	movs	r7, #1
 8015c56:	e7b2      	b.n	8015bbe <Sscan::Float(char const*, char const*, float&)+0x2c>

08015c58 <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 8015c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015c5a:	4615      	mov	r5, r2
 8015c5c:	f000 f8a1 	bl	8015da2 <Sscan::checkName(char const*, char const*)>
 8015c60:	bb58      	cbnz	r0, 8015cba <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x62>
 8015c62:	2001      	movs	r0, #1
 8015c64:	e027      	b.n	8015cb6 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 8015c66:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8015c6a:	2b09      	cmp	r3, #9
 8015c6c:	d822      	bhi.n	8015cb4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8015c6e:	4603      	mov	r3, r0
 8015c70:	fb0c 2101 	mla	r1, ip, r1, r2
 8015c74:	3930      	subs	r1, #48	; 0x30
 8015c76:	4618      	mov	r0, r3
 8015c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015c7c:	2a2e      	cmp	r2, #46	; 0x2e
 8015c7e:	d115      	bne.n	8015cac <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 8015c80:	29ff      	cmp	r1, #255	; 0xff
 8015c82:	d817      	bhi.n	8015cb4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8015c84:	3401      	adds	r4, #1
 8015c86:	2c03      	cmp	r4, #3
 8015c88:	f806 1b01 	strb.w	r1, [r6], #1
 8015c8c:	d119      	bne.n	8015cc2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6a>
 8015c8e:	2400      	movs	r4, #0
 8015c90:	260a      	movs	r6, #10
 8015c92:	1d1a      	adds	r2, r3, #4
 8015c94:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8015c98:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8015c9c:	d115      	bne.n	8015cca <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x72>
 8015c9e:	2cff      	cmp	r4, #255	; 0xff
 8015ca0:	d808      	bhi.n	8015cb4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8015ca2:	f88d 4007 	strb.w	r4, [sp, #7]
 8015ca6:	9b01      	ldr	r3, [sp, #4]
 8015ca8:	602b      	str	r3, [r5, #0]
 8015caa:	e004      	b.n	8015cb6 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 8015cac:	2a00      	cmp	r2, #0
 8015cae:	d0e7      	beq.n	8015c80 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8015cb0:	42b8      	cmp	r0, r7
 8015cb2:	d1d8      	bne.n	8015c66 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xe>
 8015cb4:	2002      	movs	r0, #2
 8015cb6:	b003      	add	sp, #12
 8015cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cba:	2400      	movs	r4, #0
 8015cbc:	f04f 0c0a 	mov.w	ip, #10
 8015cc0:	ae01      	add	r6, sp, #4
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	2100      	movs	r1, #0
 8015cc6:	1d07      	adds	r7, r0, #4
 8015cc8:	e7d5      	b.n	8015c76 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x1e>
 8015cca:	4293      	cmp	r3, r2
 8015ccc:	d0f2      	beq.n	8015cb4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8015cce:	3930      	subs	r1, #48	; 0x30
 8015cd0:	2909      	cmp	r1, #9
 8015cd2:	d8ef      	bhi.n	8015cb4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8015cd4:	fb06 1404 	mla	r4, r6, r4, r1
 8015cd8:	e7dc      	b.n	8015c94 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x3c>

08015cda <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 8015cda:	b538      	push	{r3, r4, r5, lr}
 8015cdc:	4615      	mov	r5, r2
 8015cde:	f000 f860 	bl	8015da2 <Sscan::checkName(char const*, char const*)>
 8015ce2:	b1a0      	cbz	r0, 8015d0e <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 8015ce4:	4604      	mov	r4, r0
 8015ce6:	2100      	movs	r1, #0
 8015ce8:	220a      	movs	r2, #10
 8015cea:	7823      	ldrb	r3, [r4, #0]
 8015cec:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8015cf0:	2809      	cmp	r0, #9
 8015cf2:	d80e      	bhi.n	8015d12 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8015cf4:	fb02 3101 	mla	r1, r2, r1, r3
 8015cf8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015cfc:	3930      	subs	r1, #48	; 0x30
 8015cfe:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8015d02:	d1f2      	bne.n	8015cea <Sscan::Uint16(char const*, char const*, unsigned short&)+0x10>
 8015d04:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8015d08:	d203      	bcs.n	8015d12 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8015d0a:	8029      	strh	r1, [r5, #0]
 8015d0c:	bd38      	pop	{r3, r4, r5, pc}
 8015d0e:	2001      	movs	r0, #1
 8015d10:	e7fc      	b.n	8015d0c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 8015d12:	2002      	movs	r0, #2
 8015d14:	e7fa      	b.n	8015d0c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

08015d16 <Sscan::Uint32(char const*, char const*, unsigned int&)>:
 8015d16:	b570      	push	{r4, r5, r6, lr}
 8015d18:	4615      	mov	r5, r2
 8015d1a:	f000 f842 	bl	8015da2 <Sscan::checkName(char const*, char const*)>
 8015d1e:	b1f8      	cbz	r0, 8015d60 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4a>
 8015d20:	2300      	movs	r3, #0
 8015d22:	4604      	mov	r4, r0
 8015d24:	461a      	mov	r2, r3
 8015d26:	260a      	movs	r6, #10
 8015d28:	7820      	ldrb	r0, [r4, #0]
 8015d2a:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 8015d2e:	2909      	cmp	r1, #9
 8015d30:	d818      	bhi.n	8015d64 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 8015d32:	fba3 3106 	umull	r3, r1, r3, r6
 8015d36:	fb06 1102 	mla	r1, r6, r2, r1
 8015d3a:	3b30      	subs	r3, #48	; 0x30
 8015d3c:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8015d40:	18c3      	adds	r3, r0, r3
 8015d42:	f141 0200 	adc.w	r2, r1, #0
 8015d46:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8015d4a:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8015d4e:	d1eb      	bne.n	8015d28 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x12>
 8015d50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015d54:	4299      	cmp	r1, r3
 8015d56:	eb70 0202 	sbcs.w	r2, r0, r2
 8015d5a:	d303      	bcc.n	8015d64 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 8015d5c:	602b      	str	r3, [r5, #0]
 8015d5e:	bd70      	pop	{r4, r5, r6, pc}
 8015d60:	2001      	movs	r0, #1
 8015d62:	e7fc      	b.n	8015d5e <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>
 8015d64:	2002      	movs	r0, #2
 8015d66:	e7fa      	b.n	8015d5e <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>

08015d68 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 8015d68:	b538      	push	{r3, r4, r5, lr}
 8015d6a:	4615      	mov	r5, r2
 8015d6c:	f000 f819 	bl	8015da2 <Sscan::checkName(char const*, char const*)>
 8015d70:	b198      	cbz	r0, 8015d9a <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 8015d72:	4604      	mov	r4, r0
 8015d74:	2100      	movs	r1, #0
 8015d76:	220a      	movs	r2, #10
 8015d78:	7823      	ldrb	r3, [r4, #0]
 8015d7a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8015d7e:	2809      	cmp	r0, #9
 8015d80:	d80d      	bhi.n	8015d9e <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8015d82:	fb02 3101 	mla	r1, r2, r1, r3
 8015d86:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015d8a:	3930      	subs	r1, #48	; 0x30
 8015d8c:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8015d90:	d1f2      	bne.n	8015d78 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x10>
 8015d92:	29ff      	cmp	r1, #255	; 0xff
 8015d94:	d803      	bhi.n	8015d9e <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8015d96:	7029      	strb	r1, [r5, #0]
 8015d98:	bd38      	pop	{r3, r4, r5, pc}
 8015d9a:	2001      	movs	r0, #1
 8015d9c:	e7fc      	b.n	8015d98 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 8015d9e:	2002      	movs	r0, #2
 8015da0:	e7fa      	b.n	8015d98 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

08015da2 <Sscan::checkName(char const*, char const*)>:
 8015da2:	4603      	mov	r3, r0
 8015da4:	b510      	push	{r4, lr}
 8015da6:	3901      	subs	r1, #1
 8015da8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015dac:	461c      	mov	r4, r3
 8015dae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015db2:	b120      	cbz	r0, 8015dbe <Sscan::checkName(char const*, char const*)+0x1c>
 8015db4:	b10a      	cbz	r2, 8015dba <Sscan::checkName(char const*, char const*)+0x18>
 8015db6:	4290      	cmp	r0, r2
 8015db8:	d0f6      	beq.n	8015da8 <Sscan::checkName(char const*, char const*)+0x6>
 8015dba:	2000      	movs	r0, #0
 8015dbc:	e006      	b.n	8015dcc <Sscan::checkName(char const*, char const*)+0x2a>
 8015dbe:	2a3d      	cmp	r2, #61	; 0x3d
 8015dc0:	d104      	bne.n	8015dcc <Sscan::checkName(char const*, char const*)+0x2a>
 8015dc2:	7860      	ldrb	r0, [r4, #1]
 8015dc4:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 8015dc8:	d000      	beq.n	8015dcc <Sscan::checkName(char const*, char const*)+0x2a>
 8015dca:	1c60      	adds	r0, r4, #1
 8015dcc:	bd10      	pop	{r4, pc}

08015dce <LightSet::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8015dce:	2300      	movs	r3, #0
 8015dd0:	2001      	movs	r0, #1
 8015dd2:	7093      	strb	r3, [r2, #2]
 8015dd4:	8010      	strh	r0, [r2, #0]
 8015dd6:	4770      	bx	lr

08015dd8 <Display::PrintInfo() [clone .isra.0]>:
 8015dd8:	b910      	cbnz	r0, 8015de0 <Display::PrintInfo() [clone .isra.0]+0x8>
 8015dda:	4803      	ldr	r0, [pc, #12]	; (8015de8 <Display::PrintInfo() [clone .isra.0]+0x10>)
 8015ddc:	f000 bd2f 	b.w	801683e <puts>
 8015de0:	6803      	ldr	r3, [r0, #0]
 8015de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015de4:	4718      	bx	r3
 8015de6:	bf00      	nop
 8015de8:	0801bb93 	stmdaeq	r1, {r0, r1, r4, r7, r8, r9, fp, ip, sp, pc}

08015dec <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8015dec:	b513      	push	{r0, r1, r4, lr}
 8015dee:	4604      	mov	r4, r0
 8015df0:	0a13      	lsrs	r3, r2, #8
 8015df2:	7800      	ldrb	r0, [r0, #0]
 8015df4:	f88d 1004 	strb.w	r1, [sp, #4]
 8015df8:	f88d 3005 	strb.w	r3, [sp, #5]
 8015dfc:	f88d 2006 	strb.w	r2, [sp, #6]
 8015e00:	f001 fe10 	bl	8017a24 <gd32_i2c_set_address>
 8015e04:	6860      	ldr	r0, [r4, #4]
 8015e06:	f001 fe05 	bl	8017a14 <gd32_i2c_set_baudrate>
 8015e0a:	2103      	movs	r1, #3
 8015e0c:	a801      	add	r0, sp, #4
 8015e0e:	f001 fe0f 	bl	8017a30 <gd32_i2c_write>
 8015e12:	b002      	add	sp, #8
 8015e14:	bd10      	pop	{r4, pc}

08015e16 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 8015e16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015e18:	460d      	mov	r5, r1
 8015e1a:	4604      	mov	r4, r0
 8015e1c:	f001 fe02 	bl	8017a24 <gd32_i2c_set_address>
 8015e20:	4628      	mov	r0, r5
 8015e22:	f001 fdf7 	bl	8017a14 <gd32_i2c_set_baudrate>
 8015e26:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8015e2a:	2b07      	cmp	r3, #7
 8015e2c:	d902      	bls.n	8015e34 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 8015e2e:	3c50      	subs	r4, #80	; 0x50
 8015e30:	2c0f      	cmp	r4, #15
 8015e32:	d809      	bhi.n	8015e48 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 8015e34:	2101      	movs	r1, #1
 8015e36:	f10d 0007 	add.w	r0, sp, #7
 8015e3a:	f001 fe5f 	bl	8017afc <gd32_i2c_read>
 8015e3e:	fab0 f080 	clz	r0, r0
 8015e42:	0940      	lsrs	r0, r0, #5
 8015e44:	b003      	add	sp, #12
 8015e46:	bd30      	pop	{r4, r5, pc}
 8015e48:	2100      	movs	r1, #0
 8015e4a:	4608      	mov	r0, r1
 8015e4c:	f001 fdf0 	bl	8017a30 <gd32_i2c_write>
 8015e50:	e7f5      	b.n	8015e3e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

08015e52 <Display::Detect7Segment()>:
 8015e52:	b538      	push	{r3, r4, r5, lr}
 8015e54:	68c1      	ldr	r1, [r0, #12]
 8015e56:	4604      	mov	r4, r0
 8015e58:	7a00      	ldrb	r0, [r0, #8]
 8015e5a:	f7ff ffdc 	bl	8015e16 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 8015e5e:	7460      	strb	r0, [r4, #17]
 8015e60:	b170      	cbz	r0, 8015e80 <Display::Detect7Segment()+0x2e>
 8015e62:	2200      	movs	r2, #0
 8015e64:	f104 0508 	add.w	r5, r4, #8
 8015e68:	4611      	mov	r1, r2
 8015e6a:	4628      	mov	r0, r5
 8015e6c:	f7ff ffbe 	bl	8015dec <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8015e70:	7c63      	ldrb	r3, [r4, #17]
 8015e72:	b12b      	cbz	r3, 8015e80 <Display::Detect7Segment()+0x2e>
 8015e74:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8015e78:	2112      	movs	r1, #18
 8015e7a:	4628      	mov	r0, r5
 8015e7c:	f7ff ffb6 	bl	8015dec <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8015e80:	bd38      	pop	{r3, r4, r5, pc}

08015e82 <Display::Detect(display::Type)>:
 8015e82:	2902      	cmp	r1, #2
 8015e84:	b538      	push	{r3, r4, r5, lr}
 8015e86:	4604      	mov	r4, r0
 8015e88:	d014      	beq.n	8015eb4 <Display::Detect(display::Type)+0x32>
 8015e8a:	2904      	cmp	r1, #4
 8015e8c:	d01b      	beq.n	8015ec6 <Display::Detect(display::Type)+0x44>
 8015e8e:	69a0      	ldr	r0, [r4, #24]
 8015e90:	b168      	cbz	r0, 8015eae <Display::Detect(display::Type)+0x2c>
 8015e92:	6803      	ldr	r3, [r0, #0]
 8015e94:	689b      	ldr	r3, [r3, #8]
 8015e96:	4798      	blx	r3
 8015e98:	4603      	mov	r3, r0
 8015e9a:	69a0      	ldr	r0, [r4, #24]
 8015e9c:	b9ab      	cbnz	r3, 8015eca <Display::Detect(display::Type)+0x48>
 8015e9e:	b110      	cbz	r0, 8015ea6 <Display::Detect(display::Type)+0x24>
 8015ea0:	6803      	ldr	r3, [r0, #0]
 8015ea2:	685b      	ldr	r3, [r3, #4]
 8015ea4:	4798      	blx	r3
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	61a3      	str	r3, [r4, #24]
 8015eaa:	2304      	movs	r3, #4
 8015eac:	6023      	str	r3, [r4, #0]
 8015eae:	2300      	movs	r3, #0
 8015eb0:	6163      	str	r3, [r4, #20]
 8015eb2:	e010      	b.n	8015ed6 <Display::Detect(display::Type)+0x54>
 8015eb4:	2018      	movs	r0, #24
 8015eb6:	f000 fbcb 	bl	8016650 <operator new(unsigned int)>
 8015eba:	4605      	mov	r5, r0
 8015ebc:	2100      	movs	r1, #0
 8015ebe:	f000 f89d 	bl	8015ffc <Ssd1306::Ssd1306(TOledPanel)>
 8015ec2:	61a5      	str	r5, [r4, #24]
 8015ec4:	e7e3      	b.n	8015e8e <Display::Detect(display::Type)+0xc>
 8015ec6:	6001      	str	r1, [r0, #0]
 8015ec8:	e7e1      	b.n	8015e8e <Display::Detect(display::Type)+0xc>
 8015eca:	6803      	ldr	r3, [r0, #0]
 8015ecc:	68db      	ldr	r3, [r3, #12]
 8015ece:	4798      	blx	r3
 8015ed0:	69a3      	ldr	r3, [r4, #24]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d0eb      	beq.n	8015eae <Display::Detect(display::Type)+0x2c>
 8015ed6:	bd38      	pop	{r3, r4, r5, pc}

08015ed8 <Display::Display()>:
 8015ed8:	2304      	movs	r3, #4
 8015eda:	b510      	push	{r4, lr}
 8015edc:	6003      	str	r3, [r0, #0]
 8015ede:	4b0f      	ldr	r3, [pc, #60]	; (8015f1c <Display::Display()+0x44>)
 8015ee0:	4604      	mov	r4, r0
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	4a0e      	ldr	r2, [pc, #56]	; (8015f20 <Display::Display()+0x48>)
 8015ee6:	6043      	str	r3, [r0, #4]
 8015ee8:	2321      	movs	r3, #33	; 0x21
 8015eea:	7203      	strb	r3, [r0, #8]
 8015eec:	4b0d      	ldr	r3, [pc, #52]	; (8015f24 <Display::Display()+0x4c>)
 8015eee:	2102      	movs	r1, #2
 8015ef0:	60c3      	str	r3, [r0, #12]
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8015ef8:	8203      	strh	r3, [r0, #16]
 8015efa:	4b0b      	ldr	r3, [pc, #44]	; (8015f28 <Display::Display()+0x50>)
 8015efc:	6018      	str	r0, [r3, #0]
 8015efe:	f7ff ffc0 	bl	8015e82 <Display::Detect(display::Type)>
 8015f02:	4620      	mov	r0, r4
 8015f04:	f7ff ffa5 	bl	8015e52 <Display::Detect7Segment()>
 8015f08:	69a3      	ldr	r3, [r4, #24]
 8015f0a:	b10b      	cbz	r3, 8015f10 <Display::Display()+0x38>
 8015f0c:	f7f2 fcfa 	bl	8008904 <display::timeout::gpio_init()>
 8015f10:	69a0      	ldr	r0, [r4, #24]
 8015f12:	f7ff ff61 	bl	8015dd8 <Display::PrintInfo() [clone .isra.0]>
 8015f16:	4620      	mov	r0, r4
 8015f18:	bd10      	pop	{r4, pc}
 8015f1a:	bf00      	nop
 8015f1c:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4
 8015f20:	000493e0 	andeq	r9, r4, r0, ror #7
 8015f24:	00061a80 	andeq	r1, r6, r0, lsl #21
 8015f28:	2001d8ac 	andcs	sp, r1, ip, lsr #17

08015f2c <Ssd1306::~Ssd1306()>:
 8015f2c:	4770      	bx	lr

08015f2e <Ssd1306::SetCursor(unsigned int)>:
 8015f2e:	4770      	bx	lr

08015f30 <Ssd1306::PrintInfo()>:
 8015f30:	b410      	push	{r4}
 8015f32:	4906      	ldr	r1, [pc, #24]	; (8015f4c <Ssd1306::PrintInfo()+0x1c>)
 8015f34:	7c44      	ldrb	r4, [r0, #17]
 8015f36:	7903      	ldrb	r3, [r0, #4]
 8015f38:	7942      	ldrb	r2, [r0, #5]
 8015f3a:	4805      	ldr	r0, [pc, #20]	; (8015f50 <Ssd1306::PrintInfo()+0x20>)
 8015f3c:	2c00      	cmp	r4, #0
 8015f3e:	bf08      	it	eq
 8015f40:	4601      	moveq	r1, r0
 8015f42:	4804      	ldr	r0, [pc, #16]	; (8015f54 <Ssd1306::PrintInfo()+0x24>)
 8015f44:	bc10      	pop	{r4}
 8015f46:	f7f3 bc3b 	b.w	80097c0 <printf>
 8015f4a:	bf00      	nop
 8015f4c:	0801bba4 	stmdaeq	r1, {r2, r5, r7, r8, r9, fp, ip, sp, pc}
 8015f50:	0801bbab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, r9, fp, ip, sp, pc}
 8015f54:	0801bbb3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r8, r9, fp, ip, sp, pc}

08015f58 <Ssd1306::~Ssd1306()>:
 8015f58:	b510      	push	{r4, lr}
 8015f5a:	4604      	mov	r4, r0
 8015f5c:	f000 fb74 	bl	8016648 <operator delete(void*)>
 8015f60:	4620      	mov	r0, r4
 8015f62:	bd10      	pop	{r4, pc}

08015f64 <HAL_I2C::Setup()>:
 8015f64:	b510      	push	{r4, lr}
 8015f66:	4604      	mov	r4, r0
 8015f68:	7800      	ldrb	r0, [r0, #0]
 8015f6a:	f001 fd5b 	bl	8017a24 <gd32_i2c_set_address>
 8015f6e:	6860      	ldr	r0, [r4, #4]
 8015f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f74:	f001 bd4e 	b.w	8017a14 <gd32_i2c_set_baudrate>

08015f78 <Ssd1306::PutChar(int)>:
 8015f78:	b510      	push	{r4, lr}
 8015f7a:	f1a1 0420 	sub.w	r4, r1, #32
 8015f7e:	2c5f      	cmp	r4, #95	; 0x5f
 8015f80:	bf88      	it	hi
 8015f82:	2400      	movhi	r4, #0
 8015f84:	3008      	adds	r0, #8
 8015f86:	f7ff ffed 	bl	8015f64 <HAL_I2C::Setup()>
 8015f8a:	4804      	ldr	r0, [pc, #16]	; (8015f9c <Ssd1306::PutChar(int)+0x24>)
 8015f8c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8015f90:	4420      	add	r0, r4
 8015f92:	2107      	movs	r1, #7
 8015f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f98:	f001 bd4a 	b.w	8017a30 <gd32_i2c_write>
 8015f9c:	0801bbc8 	stmdaeq	r1, {r3, r6, r7, r8, r9, fp, ip, sp, pc}

08015fa0 <Ssd1306::PutString(char const*)>:
 8015fa0:	b538      	push	{r3, r4, r5, lr}
 8015fa2:	4605      	mov	r5, r0
 8015fa4:	1e4c      	subs	r4, r1, #1
 8015fa6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8015faa:	b901      	cbnz	r1, 8015fae <Ssd1306::PutString(char const*)+0xe>
 8015fac:	bd38      	pop	{r3, r4, r5, pc}
 8015fae:	4628      	mov	r0, r5
 8015fb0:	f7ff ffe2 	bl	8015f78 <Ssd1306::PutChar(int)>
 8015fb4:	e7f7      	b.n	8015fa6 <Ssd1306::PutString(char const*)+0x6>

08015fb6 <Ssd1306::Text(char const*, unsigned int)>:
 8015fb6:	b570      	push	{r4, r5, r6, lr}
 8015fb8:	7903      	ldrb	r3, [r0, #4]
 8015fba:	4605      	mov	r5, r0
 8015fbc:	460c      	mov	r4, r1
 8015fbe:	4293      	cmp	r3, r2
 8015fc0:	bf94      	ite	ls
 8015fc2:	18ce      	addls	r6, r1, r3
 8015fc4:	188e      	addhi	r6, r1, r2
 8015fc6:	42b4      	cmp	r4, r6
 8015fc8:	d100      	bne.n	8015fcc <Ssd1306::Text(char const*, unsigned int)+0x16>
 8015fca:	bd70      	pop	{r4, r5, r6, pc}
 8015fcc:	4628      	mov	r0, r5
 8015fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fd2:	f7ff ffd1 	bl	8015f78 <Ssd1306::PutChar(int)>
 8015fd6:	e7f6      	b.n	8015fc6 <Ssd1306::Text(char const*, unsigned int)+0x10>

08015fd8 <Ssd1306::InitMembers()>:
 8015fd8:	7c03      	ldrb	r3, [r0, #16]
 8015fda:	b14b      	cbz	r3, 8015ff0 <Ssd1306::InitMembers()+0x18>
 8015fdc:	3b01      	subs	r3, #1
 8015fde:	2b01      	cmp	r3, #1
 8015fe0:	d909      	bls.n	8015ff6 <Ssd1306::InitMembers()+0x1e>
 8015fe2:	2308      	movs	r3, #8
 8015fe4:	2204      	movs	r2, #4
 8015fe6:	2115      	movs	r1, #21
 8015fe8:	7143      	strb	r3, [r0, #5]
 8015fea:	7101      	strb	r1, [r0, #4]
 8015fec:	6142      	str	r2, [r0, #20]
 8015fee:	4770      	bx	lr
 8015ff0:	2308      	movs	r3, #8
 8015ff2:	461a      	mov	r2, r3
 8015ff4:	e7f7      	b.n	8015fe6 <Ssd1306::InitMembers()+0xe>
 8015ff6:	2304      	movs	r3, #4
 8015ff8:	e7fb      	b.n	8015ff2 <Ssd1306::InitMembers()+0x1a>
	...

08015ffc <Ssd1306::Ssd1306(TOledPanel)>:
 8015ffc:	4a08      	ldr	r2, [pc, #32]	; (8016020 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8015ffe:	b508      	push	{r3, lr}
 8016000:	6002      	str	r2, [r0, #0]
 8016002:	227f      	movs	r2, #127	; 0x7f
 8016004:	80c2      	strh	r2, [r0, #6]
 8016006:	223c      	movs	r2, #60	; 0x3c
 8016008:	7202      	strb	r2, [r0, #8]
 801600a:	4a06      	ldr	r2, [pc, #24]	; (8016024 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 801600c:	7401      	strb	r1, [r0, #16]
 801600e:	60c2      	str	r2, [r0, #12]
 8016010:	2200      	movs	r2, #0
 8016012:	7442      	strb	r2, [r0, #17]
 8016014:	4a04      	ldr	r2, [pc, #16]	; (8016028 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 8016016:	6010      	str	r0, [r2, #0]
 8016018:	f7ff ffde 	bl	8015fd8 <Ssd1306::InitMembers()>
 801601c:	bd08      	pop	{r3, pc}
 801601e:	bf00      	nop
 8016020:	0801bea0 	stmdaeq	r1, {r5, r7, r9, sl, fp, ip, sp, pc}
 8016024:	00061a80 	andeq	r1, r6, r0, lsl #21
 8016028:	2001d938 	andcs	sp, r1, r8, lsr r9

0801602c <Ssd1306::SendCommand(unsigned char)>:
 801602c:	2300      	movs	r3, #0
 801602e:	b507      	push	{r0, r1, r2, lr}
 8016030:	3008      	adds	r0, #8
 8016032:	f88d 3004 	strb.w	r3, [sp, #4]
 8016036:	f88d 1005 	strb.w	r1, [sp, #5]
 801603a:	f7ff ff93 	bl	8015f64 <HAL_I2C::Setup()>
 801603e:	2102      	movs	r1, #2
 8016040:	a801      	add	r0, sp, #4
 8016042:	f001 fcf5 	bl	8017a30 <gd32_i2c_write>
 8016046:	b003      	add	sp, #12
 8016048:	f85d fb04 	ldr.w	pc, [sp], #4

0801604c <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 801604c:	2914      	cmp	r1, #20
 801604e:	b570      	push	{r4, r5, r6, lr}
 8016050:	4605      	mov	r5, r0
 8016052:	4616      	mov	r6, r2
 8016054:	d81c      	bhi.n	8016090 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8016056:	7943      	ldrb	r3, [r0, #5]
 8016058:	4293      	cmp	r3, r2
 801605a:	d919      	bls.n	8016090 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 801605c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016060:	7c43      	ldrb	r3, [r0, #17]
 8016062:	004c      	lsls	r4, r1, #1
 8016064:	b2e4      	uxtb	r4, r4
 8016066:	b10b      	cbz	r3, 801606c <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 8016068:	3404      	adds	r4, #4
 801606a:	b2e4      	uxtb	r4, r4
 801606c:	4628      	mov	r0, r5
 801606e:	f004 010e 	and.w	r1, r4, #14
 8016072:	f7ff ffdb 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 8016076:	0921      	lsrs	r1, r4, #4
 8016078:	4628      	mov	r0, r5
 801607a:	f041 0110 	orr.w	r1, r1, #16
 801607e:	f7ff ffd5 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 8016082:	4628      	mov	r0, r5
 8016084:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 8016088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801608c:	f7ff bfce 	b.w	801602c <Ssd1306::SendCommand(unsigned char)>
 8016090:	bd70      	pop	{r4, r5, r6, pc}

08016092 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 8016092:	b570      	push	{r4, r5, r6, lr}
 8016094:	461e      	mov	r6, r3
 8016096:	7943      	ldrb	r3, [r0, #5]
 8016098:	4604      	mov	r4, r0
 801609a:	428b      	cmp	r3, r1
 801609c:	4615      	mov	r5, r2
 801609e:	d30b      	bcc.n	80160b8 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x26>
 80160a0:	3901      	subs	r1, #1
 80160a2:	b2ca      	uxtb	r2, r1
 80160a4:	2100      	movs	r1, #0
 80160a6:	f7ff ffd1 	bl	801604c <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80160aa:	4632      	mov	r2, r6
 80160ac:	4629      	mov	r1, r5
 80160ae:	4620      	mov	r0, r4
 80160b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160b4:	f7ff bf7f 	b.w	8015fb6 <Ssd1306::Text(char const*, unsigned int)>
 80160b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080160bc <Ssd1306::ClearLine(unsigned char)>:
 80160bc:	b538      	push	{r3, r4, r5, lr}
 80160be:	7943      	ldrb	r3, [r0, #5]
 80160c0:	4605      	mov	r5, r0
 80160c2:	428b      	cmp	r3, r1
 80160c4:	d314      	bcc.n	80160f0 <Ssd1306::ClearLine(unsigned char)+0x34>
 80160c6:	3901      	subs	r1, #1
 80160c8:	b2cc      	uxtb	r4, r1
 80160ca:	4622      	mov	r2, r4
 80160cc:	2100      	movs	r1, #0
 80160ce:	f7ff ffbd 	bl	801604c <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80160d2:	f105 0008 	add.w	r0, r5, #8
 80160d6:	f7ff ff45 	bl	8015f64 <HAL_I2C::Setup()>
 80160da:	2181      	movs	r1, #129	; 0x81
 80160dc:	4805      	ldr	r0, [pc, #20]	; (80160f4 <Ssd1306::ClearLine(unsigned char)+0x38>)
 80160de:	f001 fca7 	bl	8017a30 <gd32_i2c_write>
 80160e2:	4622      	mov	r2, r4
 80160e4:	4628      	mov	r0, r5
 80160e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80160ea:	2100      	movs	r1, #0
 80160ec:	f7ff bfae 	b.w	801604c <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80160f0:	bd38      	pop	{r3, r4, r5, pc}
 80160f2:	bf00      	nop
 80160f4:	2001d8b0 			; <UNDEFINED> instruction: 0x2001d8b0

080160f8 <Ssd1306::SetSleep(bool)>:
 80160f8:	b111      	cbz	r1, 8016100 <Ssd1306::SetSleep(bool)+0x8>
 80160fa:	21ae      	movs	r1, #174	; 0xae
 80160fc:	f7ff bf96 	b.w	801602c <Ssd1306::SendCommand(unsigned char)>
 8016100:	21af      	movs	r1, #175	; 0xaf
 8016102:	e7fb      	b.n	80160fc <Ssd1306::SetSleep(bool)+0x4>

08016104 <Ssd1306::SetContrast(unsigned char)>:
 8016104:	b538      	push	{r3, r4, r5, lr}
 8016106:	4604      	mov	r4, r0
 8016108:	460d      	mov	r5, r1
 801610a:	7181      	strb	r1, [r0, #6]
 801610c:	2181      	movs	r1, #129	; 0x81
 801610e:	f7ff ff8d 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 8016112:	4629      	mov	r1, r5
 8016114:	4620      	mov	r0, r4
 8016116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801611a:	f7ff bf87 	b.w	801602c <Ssd1306::SendCommand(unsigned char)>

0801611e <Ssd1306::SetFlipVertically(bool)>:
 801611e:	b510      	push	{r4, lr}
 8016120:	4604      	mov	r4, r0
 8016122:	71c1      	strb	r1, [r0, #7]
 8016124:	b141      	cbz	r1, 8016138 <Ssd1306::SetFlipVertically(bool)+0x1a>
 8016126:	21c0      	movs	r1, #192	; 0xc0
 8016128:	f7ff ff80 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 801612c:	21a0      	movs	r1, #160	; 0xa0
 801612e:	4620      	mov	r0, r4
 8016130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016134:	f7ff bf7a 	b.w	801602c <Ssd1306::SendCommand(unsigned char)>
 8016138:	21c8      	movs	r1, #200	; 0xc8
 801613a:	f7ff ff77 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 801613e:	21a1      	movs	r1, #161	; 0xa1
 8016140:	e7f5      	b.n	801612e <Ssd1306::SetFlipVertically(bool)+0x10>
	...

08016144 <Ssd1306::CheckSH1106()>:
 8016144:	b530      	push	{r4, r5, lr}
 8016146:	4604      	mov	r4, r0
 8016148:	b087      	sub	sp, #28
 801614a:	2100      	movs	r1, #0
 801614c:	f7ff ff6e 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 8016150:	2190      	movs	r1, #144	; 0x90
 8016152:	4620      	mov	r0, r4
 8016154:	f7ff ff6a 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 8016158:	21b0      	movs	r1, #176	; 0xb0
 801615a:	4620      	mov	r0, r4
 801615c:	f7ff ff66 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 8016160:	4b22      	ldr	r3, [pc, #136]	; (80161ec <Ssd1306::CheckSH1106()+0xa8>)
 8016162:	f104 0508 	add.w	r5, r4, #8
 8016166:	6818      	ldr	r0, [r3, #0]
 8016168:	791b      	ldrb	r3, [r3, #4]
 801616a:	9002      	str	r0, [sp, #8]
 801616c:	4628      	mov	r0, r5
 801616e:	f88d 300c 	strb.w	r3, [sp, #12]
 8016172:	f7ff fef7 	bl	8015f64 <HAL_I2C::Setup()>
 8016176:	2105      	movs	r1, #5
 8016178:	a802      	add	r0, sp, #8
 801617a:	f001 fc59 	bl	8017a30 <gd32_i2c_write>
 801617e:	2100      	movs	r1, #0
 8016180:	4620      	mov	r0, r4
 8016182:	f7ff ff53 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 8016186:	2190      	movs	r1, #144	; 0x90
 8016188:	4620      	mov	r0, r4
 801618a:	f7ff ff4f 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 801618e:	21b0      	movs	r1, #176	; 0xb0
 8016190:	4620      	mov	r0, r4
 8016192:	f7ff ff4b 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 8016196:	2300      	movs	r3, #0
 8016198:	9304      	str	r3, [sp, #16]
 801619a:	f88d 3014 	strb.w	r3, [sp, #20]
 801619e:	2340      	movs	r3, #64	; 0x40
 80161a0:	4628      	mov	r0, r5
 80161a2:	f88d 3007 	strb.w	r3, [sp, #7]
 80161a6:	f7ff fedd 	bl	8015f64 <HAL_I2C::Setup()>
 80161aa:	2101      	movs	r1, #1
 80161ac:	f10d 0007 	add.w	r0, sp, #7
 80161b0:	f001 fc3e 	bl	8017a30 <gd32_i2c_write>
 80161b4:	4628      	mov	r0, r5
 80161b6:	f7ff fed5 	bl	8015f64 <HAL_I2C::Setup()>
 80161ba:	2105      	movs	r1, #5
 80161bc:	a804      	add	r0, sp, #16
 80161be:	f001 fc9d 	bl	8017afc <gd32_i2c_read>
 80161c2:	2004      	movs	r0, #4
 80161c4:	aa02      	add	r2, sp, #8
 80161c6:	a904      	add	r1, sp, #16
 80161c8:	3801      	subs	r0, #1
 80161ca:	d201      	bcs.n	80161d0 <Ssd1306::CheckSH1106()+0x8c>
 80161cc:	2300      	movs	r3, #0
 80161ce:	e006      	b.n	80161de <Ssd1306::CheckSH1106()+0x9a>
 80161d0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80161d4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80161d8:	42ab      	cmp	r3, r5
 80161da:	d0f5      	beq.n	80161c8 <Ssd1306::CheckSH1106()+0x84>
 80161dc:	1b5b      	subs	r3, r3, r5
 80161de:	fab3 f383 	clz	r3, r3
 80161e2:	095b      	lsrs	r3, r3, #5
 80161e4:	7463      	strb	r3, [r4, #17]
 80161e6:	b007      	add	sp, #28
 80161e8:	bd30      	pop	{r4, r5, pc}
 80161ea:	bf00      	nop
 80161ec:	0801bbbf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, r9, fp, ip, sp, pc}

080161f0 <Ssd1306::Cls()>:
 80161f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161f4:	4604      	mov	r4, r0
 80161f6:	2600      	movs	r6, #0
 80161f8:	7c45      	ldrb	r5, [r0, #17]
 80161fa:	00ad      	lsls	r5, r5, #2
 80161fc:	b2ed      	uxtb	r5, r5
 80161fe:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 8016202:	f045 0810 	orr.w	r8, r5, #16
 8016206:	b2ff      	uxtb	r7, r7
 8016208:	6963      	ldr	r3, [r4, #20]
 801620a:	4629      	mov	r1, r5
 801620c:	42b3      	cmp	r3, r6
 801620e:	4620      	mov	r0, r4
 8016210:	d80b      	bhi.n	801622a <Ssd1306::Cls()+0x3a>
 8016212:	f7ff ff0b 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 8016216:	4641      	mov	r1, r8
 8016218:	4620      	mov	r0, r4
 801621a:	f7ff ff07 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 801621e:	4620      	mov	r0, r4
 8016220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016224:	21b0      	movs	r1, #176	; 0xb0
 8016226:	f7ff bf01 	b.w	801602c <Ssd1306::SendCommand(unsigned char)>
 801622a:	f7ff feff 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 801622e:	4641      	mov	r1, r8
 8016230:	4620      	mov	r0, r4
 8016232:	f7ff fefb 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 8016236:	f066 014f 	orn	r1, r6, #79	; 0x4f
 801623a:	4620      	mov	r0, r4
 801623c:	b2c9      	uxtb	r1, r1
 801623e:	f7ff fef5 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 8016242:	7c23      	ldrb	r3, [r4, #16]
 8016244:	b123      	cbz	r3, 8016250 <Ssd1306::Cls()+0x60>
 8016246:	3b01      	subs	r3, #1
 8016248:	2b01      	cmp	r3, #1
 801624a:	d901      	bls.n	8016250 <Ssd1306::Cls()+0x60>
 801624c:	3601      	adds	r6, #1
 801624e:	e7db      	b.n	8016208 <Ssd1306::Cls()+0x18>
 8016250:	f104 0008 	add.w	r0, r4, #8
 8016254:	f7ff fe86 	bl	8015f64 <HAL_I2C::Setup()>
 8016258:	4639      	mov	r1, r7
 801625a:	4802      	ldr	r0, [pc, #8]	; (8016264 <Ssd1306::Cls()+0x74>)
 801625c:	f001 fbe8 	bl	8017a30 <gd32_i2c_write>
 8016260:	e7f4      	b.n	801624c <Ssd1306::Cls()+0x5c>
 8016262:	bf00      	nop
 8016264:	2001d8b0 			; <UNDEFINED> instruction: 0x2001d8b0

08016268 <Ssd1306::Start()>:
 8016268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801626a:	7a04      	ldrb	r4, [r0, #8]
 801626c:	68c6      	ldr	r6, [r0, #12]
 801626e:	4605      	mov	r5, r0
 8016270:	4620      	mov	r0, r4
 8016272:	f001 fbd7 	bl	8017a24 <gd32_i2c_set_address>
 8016276:	4630      	mov	r0, r6
 8016278:	f001 fbcc 	bl	8017a14 <gd32_i2c_set_baudrate>
 801627c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016280:	2b07      	cmp	r3, #7
 8016282:	d902      	bls.n	801628a <Ssd1306::Start()+0x22>
 8016284:	3c50      	subs	r4, #80	; 0x50
 8016286:	2c0f      	cmp	r4, #15
 8016288:	d80f      	bhi.n	80162aa <Ssd1306::Start()+0x42>
 801628a:	2101      	movs	r1, #1
 801628c:	f10d 0007 	add.w	r0, sp, #7
 8016290:	f001 fc34 	bl	8017afc <gd32_i2c_read>
 8016294:	fab0 f480 	clz	r4, r0
 8016298:	0964      	lsrs	r4, r4, #5
 801629a:	b35c      	cbz	r4, 80162f4 <Ssd1306::Start()+0x8c>
 801629c:	7c2e      	ldrb	r6, [r5, #16]
 801629e:	b14e      	cbz	r6, 80162b4 <Ssd1306::Start()+0x4c>
 80162a0:	3e01      	subs	r6, #1
 80162a2:	2e01      	cmp	r6, #1
 80162a4:	d929      	bls.n	80162fa <Ssd1306::Start()+0x92>
 80162a6:	2400      	movs	r4, #0
 80162a8:	e024      	b.n	80162f4 <Ssd1306::Start()+0x8c>
 80162aa:	2100      	movs	r1, #0
 80162ac:	4608      	mov	r0, r1
 80162ae:	f001 fbbf 	bl	8017a30 <gd32_i2c_write>
 80162b2:	e7ef      	b.n	8016294 <Ssd1306::Start()+0x2c>
 80162b4:	4f16      	ldr	r7, [pc, #88]	; (8016310 <Ssd1306::Start()+0xa8>)
 80162b6:	4628      	mov	r0, r5
 80162b8:	f817 1b01 	ldrb.w	r1, [r7], #1
 80162bc:	3601      	adds	r6, #1
 80162be:	f7ff feb5 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 80162c2:	2e18      	cmp	r6, #24
 80162c4:	d1f7      	bne.n	80162b6 <Ssd1306::Start()+0x4e>
 80162c6:	2300      	movs	r3, #0
 80162c8:	4a12      	ldr	r2, [pc, #72]	; (8016314 <Ssd1306::Start()+0xac>)
 80162ca:	4618      	mov	r0, r3
 80162cc:	4611      	mov	r1, r2
 80162ce:	3301      	adds	r3, #1
 80162d0:	2b86      	cmp	r3, #134	; 0x86
 80162d2:	f802 0b01 	strb.w	r0, [r2], #1
 80162d6:	d1fa      	bne.n	80162ce <Ssd1306::Start()+0x66>
 80162d8:	2340      	movs	r3, #64	; 0x40
 80162da:	4628      	mov	r0, r5
 80162dc:	700b      	strb	r3, [r1, #0]
 80162de:	f7ff ff31 	bl	8016144 <Ssd1306::CheckSH1106()>
 80162e2:	4628      	mov	r0, r5
 80162e4:	f7ff ff84 	bl	80161f0 <Ssd1306::Cls()>
 80162e8:	21af      	movs	r1, #175	; 0xaf
 80162ea:	4628      	mov	r0, r5
 80162ec:	f7ff fe9e 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 80162f0:	2301      	movs	r3, #1
 80162f2:	71eb      	strb	r3, [r5, #7]
 80162f4:	4620      	mov	r0, r4
 80162f6:	b003      	add	sp, #12
 80162f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162fa:	2600      	movs	r6, #0
 80162fc:	4f06      	ldr	r7, [pc, #24]	; (8016318 <Ssd1306::Start()+0xb0>)
 80162fe:	4628      	mov	r0, r5
 8016300:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016304:	3601      	adds	r6, #1
 8016306:	f7ff fe91 	bl	801602c <Ssd1306::SendCommand(unsigned char)>
 801630a:	2e18      	cmp	r6, #24
 801630c:	d1f7      	bne.n	80162fe <Ssd1306::Start()+0x96>
 801630e:	e7da      	b.n	80162c6 <Ssd1306::Start()+0x5e>
 8016310:	0801be80 	stmdaeq	r1, {r7, r9, sl, fp, ip, sp, pc}
 8016314:	2001d8b0 			; <UNDEFINED> instruction: 0x2001d8b0
 8016318:	0801be68 	stmdaeq	r1, {r3, r5, r6, r9, sl, fp, ip, sp, pc}

0801631c <console_putc>:
 801631c:	f000 bb92 	b.w	8016a44 <uart0_putc>

08016320 <console_puts>:
 8016320:	f000 bbb0 	b.w	8016a84 <uart0_puts>

08016324 <console_set_fg_color>:
 8016324:	2807      	cmp	r0, #7
 8016326:	d810      	bhi.n	801634a <console_set_fg_color+0x26>
 8016328:	e8df f000 	tbb	[pc, r0]
 801632c:	0b090704 	bleq	8257f44 <__exidx_end+0x23bf70>
 8016330:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 80162fc <Ssd1306::Start()+0x94>
 8016334:	4806      	ldr	r0, [pc, #24]	; (8016350 <console_set_fg_color+0x2c>)
 8016336:	f000 bba5 	b.w	8016a84 <uart0_puts>
 801633a:	4806      	ldr	r0, [pc, #24]	; (8016354 <console_set_fg_color+0x30>)
 801633c:	e7fb      	b.n	8016336 <console_set_fg_color+0x12>
 801633e:	4806      	ldr	r0, [pc, #24]	; (8016358 <console_set_fg_color+0x34>)
 8016340:	e7f9      	b.n	8016336 <console_set_fg_color+0x12>
 8016342:	4806      	ldr	r0, [pc, #24]	; (801635c <console_set_fg_color+0x38>)
 8016344:	e7f7      	b.n	8016336 <console_set_fg_color+0x12>
 8016346:	4806      	ldr	r0, [pc, #24]	; (8016360 <console_set_fg_color+0x3c>)
 8016348:	e7f5      	b.n	8016336 <console_set_fg_color+0x12>
 801634a:	4806      	ldr	r0, [pc, #24]	; (8016364 <console_set_fg_color+0x40>)
 801634c:	e7f3      	b.n	8016336 <console_set_fg_color+0x12>
 801634e:	bf00      	nop
 8016350:	0801bede 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, pc}
 8016354:	0801bee4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sl, fp, ip, sp, pc}
 8016358:	0801beea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r9, sl, fp, ip, sp, pc}
 801635c:	0801bef0 	stmdaeq	r1, {r4, r5, r6, r7, r9, sl, fp, ip, sp, pc}
 8016360:	08018c3c 	stmdaeq	r1, {r2, r3, r4, r5, sl, fp, pc}
 8016364:	0801bef6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r9, sl, fp, ip, sp, pc}

08016368 <console_error>:
 8016368:	b510      	push	{r4, lr}
 801636a:	4604      	mov	r4, r0
 801636c:	4805      	ldr	r0, [pc, #20]	; (8016384 <console_error+0x1c>)
 801636e:	f000 fb89 	bl	8016a84 <uart0_puts>
 8016372:	4620      	mov	r0, r4
 8016374:	f000 fb86 	bl	8016a84 <uart0_puts>
 8016378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801637c:	4802      	ldr	r0, [pc, #8]	; (8016388 <console_error+0x20>)
 801637e:	f000 bb81 	b.w	8016a84 <uart0_puts>
 8016382:	bf00      	nop
 8016384:	0801bee4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sl, fp, ip, sp, pc}
 8016388:	08018c3c 	stmdaeq	r1, {r2, r3, r4, r5, sl, fp, pc}

0801638c <console_status>:
 801638c:	b510      	push	{r4, lr}
 801638e:	460c      	mov	r4, r1
 8016390:	b280      	uxth	r0, r0
 8016392:	f7ff ffc7 	bl	8016324 <console_set_fg_color>
 8016396:	4807      	ldr	r0, [pc, #28]	; (80163b4 <console_status+0x28>)
 8016398:	f000 fb74 	bl	8016a84 <uart0_puts>
 801639c:	4620      	mov	r0, r4
 801639e:	f000 fb71 	bl	8016a84 <uart0_puts>
 80163a2:	200a      	movs	r0, #10
 80163a4:	f000 fb4e 	bl	8016a44 <uart0_putc>
 80163a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163ac:	4802      	ldr	r0, [pc, #8]	; (80163b8 <console_status+0x2c>)
 80163ae:	f000 bb69 	b.w	8016a84 <uart0_puts>
 80163b2:	bf00      	nop
 80163b4:	0801bed8 	stmdaeq	r1, {r3, r4, r6, r7, r9, sl, fp, ip, sp, pc}
 80163b8:	08018c3c 	stmdaeq	r1, {r2, r3, r4, r5, sl, fp, pc}

080163bc <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 80163bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163c0:	4617      	mov	r7, r2
 80163c2:	461e      	mov	r6, r3
 80163c4:	4d14      	ldr	r5, [pc, #80]	; (8016418 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 80163c6:	4b15      	ldr	r3, [pc, #84]	; (801641c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 80163c8:	b086      	sub	sp, #24
 80163ca:	6018      	str	r0, [r3, #0]
 80163cc:	4604      	mov	r4, r0
 80163ce:	f105 0803 	add.w	r8, r5, #3
 80163d2:	2203      	movs	r2, #3
 80163d4:	4628      	mov	r0, r5
 80163d6:	f000 f9fa 	bl	80167ce <memmove>
 80163da:	4639      	mov	r1, r7
 80163dc:	220b      	movs	r2, #11
 80163de:	4640      	mov	r0, r8
 80163e0:	f000 f9f5 	bl	80167ce <memmove>
 80163e4:	f105 030e 	add.w	r3, r5, #14
 80163e8:	4631      	mov	r1, r6
 80163ea:	2208      	movs	r2, #8
 80163ec:	4618      	mov	r0, r3
 80163ee:	f000 f9ee 	bl	80167ce <memmove>
 80163f2:	2308      	movs	r3, #8
 80163f4:	e9cd 8303 	strd	r8, r3, [sp, #12]
 80163f8:	230b      	movs	r3, #11
 80163fa:	9302      	str	r3, [sp, #8]
 80163fc:	4b08      	ldr	r3, [pc, #32]	; (8016420 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 80163fe:	9005      	str	r0, [sp, #20]
 8016400:	e9cd 5300 	strd	r5, r3, [sp]
 8016404:	213f      	movs	r1, #63	; 0x3f
 8016406:	2303      	movs	r3, #3
 8016408:	4a06      	ldr	r2, [pc, #24]	; (8016424 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 801640a:	4807      	ldr	r0, [pc, #28]	; (8016428 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 801640c:	f7f3 fa00 	bl	8009810 <snprintf>
 8016410:	4620      	mov	r0, r4
 8016412:	b006      	add	sp, #24
 8016414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016418:	2001d93c 	andcs	sp, r1, ip, lsr r9
 801641c:	2001d994 	mulcs	r1, r4, r9
 8016420:	08019502 	stmdaeq	r1, {r1, r8, sl, ip, pc}
 8016424:	0801befc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp, pc}
 8016428:	2001d952 	andcs	sp, r1, r2, asr r9

0801642c <FirmwareVersion::Print(char const*)>:
 801642c:	b510      	push	{r4, lr}
 801642e:	460c      	mov	r4, r1
 8016430:	4804      	ldr	r0, [pc, #16]	; (8016444 <FirmwareVersion::Print(char const*)+0x18>)
 8016432:	f000 fa04 	bl	801683e <puts>
 8016436:	b124      	cbz	r4, 8016442 <FirmwareVersion::Print(char const*)+0x16>
 8016438:	4620      	mov	r0, r4
 801643a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801643e:	f000 b9fe 	b.w	801683e <puts>
 8016442:	bd10      	pop	{r4, pc}
 8016444:	2001d952 	andcs	sp, r1, r2, asr r9

08016448 <LedBlink::LedBlink()>:
 8016448:	b538      	push	{r3, r4, r5, lr}
 801644a:	2205      	movs	r2, #5
 801644c:	2300      	movs	r3, #0
 801644e:	e9c0 3200 	strd	r3, r2, [r0]
 8016452:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8016456:	6083      	str	r3, [r0, #8]
 8016458:	e9c0 2303 	strd	r2, r3, [r0, #12]
 801645c:	6143      	str	r3, [r0, #20]
 801645e:	4b09      	ldr	r3, [pc, #36]	; (8016484 <LedBlink::LedBlink()+0x3c>)
 8016460:	4d09      	ldr	r5, [pc, #36]	; (8016488 <LedBlink::LedBlink()+0x40>)
 8016462:	4604      	mov	r4, r0
 8016464:	6018      	str	r0, [r3, #0]
 8016466:	f240 6004 	movw	r0, #1540	; 0x604
 801646a:	f000 fd79 	bl	8016f60 <rcu_periph_clock_enable>
 801646e:	4628      	mov	r0, r5
 8016470:	2301      	movs	r3, #1
 8016472:	2203      	movs	r2, #3
 8016474:	2110      	movs	r1, #16
 8016476:	f000 fcdb 	bl	8016e30 <gpio_init>
 801647a:	2301      	movs	r3, #1
 801647c:	4620      	mov	r0, r4
 801647e:	616b      	str	r3, [r5, #20]
 8016480:	bd38      	pop	{r3, r4, r5, pc}
 8016482:	bf00      	nop
 8016484:	2001d998 	mulcs	r1, r8, r9
 8016488:	40011000 	andmi	r1, r1, r0

0801648c <LedBlink::SetMode(ledblink::Mode)>:
 801648c:	6843      	ldr	r3, [r0, #4]
 801648e:	428b      	cmp	r3, r1
 8016490:	d02f      	beq.n	80164f2 <LedBlink::SetMode(ledblink::Mode)+0x66>
 8016492:	6041      	str	r1, [r0, #4]
 8016494:	2904      	cmp	r1, #4
 8016496:	d822      	bhi.n	80164de <LedBlink::SetMode(ledblink::Mode)+0x52>
 8016498:	e8df f001 	tbb	[pc, r1]
 801649c:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 80164a0:	23ff001d 	mvnscs	r0, #29
 80164a4:	6003      	str	r3, [r0, #0]
 80164a6:	2300      	movs	r3, #0
 80164a8:	2201      	movs	r2, #1
 80164aa:	60c3      	str	r3, [r0, #12]
 80164ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80164b0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80164b4:	611a      	str	r2, [r3, #16]
 80164b6:	6880      	ldr	r0, [r0, #8]
 80164b8:	b1d8      	cbz	r0, 80164f2 <LedBlink::SetMode(ledblink::Mode)+0x66>
 80164ba:	6803      	ldr	r3, [r0, #0]
 80164bc:	689b      	ldr	r3, [r3, #8]
 80164be:	4718      	bx	r3
 80164c0:	2301      	movs	r3, #1
 80164c2:	6003      	str	r3, [r0, #0]
 80164c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80164c8:	60c3      	str	r3, [r0, #12]
 80164ca:	e7f4      	b.n	80164b6 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 80164cc:	2303      	movs	r3, #3
 80164ce:	6003      	str	r3, [r0, #0]
 80164d0:	f240 134d 	movw	r3, #333	; 0x14d
 80164d4:	e7f8      	b.n	80164c8 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 80164d6:	2305      	movs	r3, #5
 80164d8:	6003      	str	r3, [r0, #0]
 80164da:	23c8      	movs	r3, #200	; 0xc8
 80164dc:	e7f4      	b.n	80164c8 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 80164de:	2300      	movs	r3, #0
 80164e0:	2201      	movs	r2, #1
 80164e2:	6003      	str	r3, [r0, #0]
 80164e4:	60c3      	str	r3, [r0, #12]
 80164e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80164ea:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80164ee:	615a      	str	r2, [r3, #20]
 80164f0:	e7e1      	b.n	80164b6 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 80164f2:	4770      	bx	lr

080164f4 <Hardware::Hardware()>:
 80164f4:	b570      	push	{r4, r5, r6, lr}
 80164f6:	2400      	movs	r4, #0
 80164f8:	4b24      	ldr	r3, [pc, #144]	; (801658c <Hardware::Hardware()+0x98>)
 80164fa:	b090      	sub	sp, #64	; 0x40
 80164fc:	7004      	strb	r4, [r0, #0]
 80164fe:	6018      	str	r0, [r3, #0]
 8016500:	4605      	mov	r5, r0
 8016502:	f7f1 f829 	bl	8007558 <console_init>
 8016506:	f000 facd 	bl	8016aa4 <systick_config>
 801650a:	f001 fd01 	bl	8017f10 <udelay_init()>
 801650e:	f001 fcb1 	bl	8017e74 <micros_init()>
 8016512:	f240 701b 	movw	r0, #1819	; 0x71b
 8016516:	f000 fd23 	bl	8016f60 <rcu_periph_clock_enable>
 801651a:	f240 701c 	movw	r0, #1820	; 0x71c
 801651e:	f000 fd1f 	bl	8016f60 <rcu_periph_clock_enable>
 8016522:	4e1b      	ldr	r6, [pc, #108]	; (8016590 <Hardware::Hardware()+0x9c>)
 8016524:	f000 fd14 	bl	8016f50 <pmu_backup_write_enable>
 8016528:	4621      	mov	r1, r4
 801652a:	2002      	movs	r0, #2
 801652c:	f000 fb5e 	bl	8016bec <bkp_data_write>
 8016530:	f240 7004 	movw	r0, #1796	; 0x704
 8016534:	f000 fd14 	bl	8016f60 <rcu_periph_clock_enable>
 8016538:	4630      	mov	r0, r6
 801653a:	f000 fe75 	bl	8017228 <timer_deinit>
 801653e:	2377      	movs	r3, #119	; 0x77
 8016540:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016548:	a903      	add	r1, sp, #12
 801654a:	4630      	mov	r0, r6
 801654c:	9305      	str	r3, [sp, #20]
 801654e:	f000 ff11 	bl	8017374 <timer_init>
 8016552:	4630      	mov	r0, r6
 8016554:	f000 ff66 	bl	8017424 <timer_enable>
 8016558:	f001 f9ce 	bl	80178f8 <gd32_adc_init()>
 801655c:	220a      	movs	r2, #10
 801655e:	2309      	movs	r3, #9
 8016560:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016564:	237a      	movs	r3, #122	; 0x7a
 8016566:	a807      	add	r0, sp, #28
 8016568:	930c      	str	r3, [sp, #48]	; 0x30
 801656a:	e9cd 4408 	strd	r4, r4, [sp, #32]
 801656e:	9407      	str	r4, [sp, #28]
 8016570:	940f      	str	r4, [sp, #60]	; 0x3c
 8016572:	f000 f9bd 	bl	80168f0 <mktime>
 8016576:	4621      	mov	r1, r4
 8016578:	e9cd 0401 	strd	r0, r4, [sp, #4]
 801657c:	a801      	add	r0, sp, #4
 801657e:	f000 fa2d 	bl	80169dc <settimeofday>
 8016582:	f001 fa13 	bl	80179ac <gd32_i2c_begin>
 8016586:	4628      	mov	r0, r5
 8016588:	b010      	add	sp, #64	; 0x40
 801658a:	bd70      	pop	{r4, r5, r6, pc}
 801658c:	2001d99c 	mulcs	r1, ip, r9
 8016590:	40001000 	andmi	r1, r0, r0

08016594 <Hardware::GetUuid(unsigned char*)>:
 8016594:	4a0c      	ldr	r2, [pc, #48]	; (80165c8 <Hardware::GetUuid(unsigned char*)+0x34>)
 8016596:	b084      	sub	sp, #16
 8016598:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 801659c:	9300      	str	r3, [sp, #0]
 801659e:	f8d2 07ec 	ldr.w	r0, [r2, #2028]	; 0x7ec
 80165a2:	9001      	str	r0, [sp, #4]
 80165a4:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 80165a8:	4403      	add	r3, r0
 80165aa:	4413      	add	r3, r2
 80165ac:	9202      	str	r2, [sp, #8]
 80165ae:	466a      	mov	r2, sp
 80165b0:	9303      	str	r3, [sp, #12]
 80165b2:	1e4b      	subs	r3, r1, #1
 80165b4:	310f      	adds	r1, #15
 80165b6:	428b      	cmp	r3, r1
 80165b8:	d101      	bne.n	80165be <Hardware::GetUuid(unsigned char*)+0x2a>
 80165ba:	b004      	add	sp, #16
 80165bc:	4770      	bx	lr
 80165be:	f812 0b01 	ldrb.w	r0, [r2], #1
 80165c2:	f803 0f01 	strb.w	r0, [r3, #1]!
 80165c6:	e7f6      	b.n	80165b6 <Hardware::GetUuid(unsigned char*)+0x22>
 80165c8:	1ffff000 	svcne	0x00fff000

080165cc <Hardware::SetTime(tm const*)>:
 80165cc:	2000      	movs	r0, #0
 80165ce:	4770      	bx	lr

080165d0 <Hardware::Reboot()>:
 80165d0:	b508      	push	{r3, lr}
 80165d2:	2300      	movs	r3, #0
 80165d4:	4604      	mov	r4, r0
 80165d6:	7003      	strb	r3, [r0, #0]
 80165d8:	2104      	movs	r1, #4
 80165da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80165de:	f000 fbfd 	bl	8016ddc <fwdgt_config>
 80165e2:	4620      	mov	r0, r4
 80165e4:	f7f2 fa9c 	bl	8008b20 <Hardware::RebootHandler()>
 80165e8:	2102      	movs	r1, #2
 80165ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80165ee:	f000 fbf5 	bl	8016ddc <fwdgt_config>
 80165f2:	2801      	cmp	r0, #1
 80165f4:	bf0c      	ite	eq
 80165f6:	2301      	moveq	r3, #1
 80165f8:	2300      	movne	r3, #0
 80165fa:	7023      	strb	r3, [r4, #0]
 80165fc:	d101      	bne.n	8016602 <Hardware::Reboot()+0x32>
 80165fe:	f000 fbdd 	bl	8016dbc <fwdgt_enable>
 8016602:	2208      	movs	r2, #8
 8016604:	4b0d      	ldr	r3, [pc, #52]	; (801663c <Hardware::Reboot()+0x6c>)
 8016606:	2501      	movs	r5, #1
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	480d      	ldr	r0, [pc, #52]	; (8016640 <Hardware::Reboot()+0x70>)
 801660c:	601a      	str	r2, [r3, #0]
 801660e:	227d      	movs	r2, #125	; 0x7d
 8016610:	490c      	ldr	r1, [pc, #48]	; (8016644 <Hardware::Reboot()+0x74>)
 8016612:	60da      	str	r2, [r3, #12]
 8016614:	68dc      	ldr	r4, [r3, #12]
 8016616:	b904      	cbnz	r4, 801661a <Hardware::Reboot()+0x4a>
 8016618:	e7fe      	b.n	8016618 <Hardware::Reboot()+0x48>
 801661a:	6802      	ldr	r2, [r0, #0]
 801661c:	695e      	ldr	r6, [r3, #20]
 801661e:	1b92      	subs	r2, r2, r6
 8016620:	4294      	cmp	r4, r2
 8016622:	d8f8      	bhi.n	8016616 <Hardware::Reboot()+0x46>
 8016624:	6802      	ldr	r2, [r0, #0]
 8016626:	615a      	str	r2, [r3, #20]
 8016628:	691a      	ldr	r2, [r3, #16]
 801662a:	2a01      	cmp	r2, #1
 801662c:	f082 0401 	eor.w	r4, r2, #1
 8016630:	611c      	str	r4, [r3, #16]
 8016632:	bf14      	ite	ne
 8016634:	610d      	strne	r5, [r1, #16]
 8016636:	614a      	streq	r2, [r1, #20]
 8016638:	e7ec      	b.n	8016614 <Hardware::Reboot()+0x44>
 801663a:	bf00      	nop
 801663c:	2001d998 	mulcs	r1, r8, r9
 8016640:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4
 8016644:	40011000 	andmi	r1, r1, r0

08016648 <operator delete(void*)>:
 8016648:	f000 b890 	b.w	801676c <free>

0801664c <operator delete[](void*)>:
 801664c:	f000 b88e 	b.w	801676c <free>

08016650 <operator new(unsigned int)>:
 8016650:	f000 b842 	b.w	80166d8 <malloc>

08016654 <operator new[](unsigned int)>:
 8016654:	f000 b840 	b.w	80166d8 <malloc>

08016658 <inet_aton>:
 8016658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801665a:	f04f 0c0a 	mov.w	ip, #10
 801665e:	2500      	movs	r5, #0
 8016660:	ae01      	add	r6, sp, #4
 8016662:	4603      	mov	r3, r0
 8016664:	2200      	movs	r2, #0
 8016666:	1d07      	adds	r7, r0, #4
 8016668:	e007      	b.n	801667a <inet_aton+0x22>
 801666a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801666e:	2b09      	cmp	r3, #9
 8016670:	d820      	bhi.n	80166b4 <inet_aton+0x5c>
 8016672:	4603      	mov	r3, r0
 8016674:	fb0c 4202 	mla	r2, ip, r2, r4
 8016678:	3a30      	subs	r2, #48	; 0x30
 801667a:	4618      	mov	r0, r3
 801667c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8016680:	2c2e      	cmp	r4, #46	; 0x2e
 8016682:	d111      	bne.n	80166a8 <inet_aton+0x50>
 8016684:	3501      	adds	r5, #1
 8016686:	2d03      	cmp	r5, #3
 8016688:	f806 2b01 	strb.w	r2, [r6], #1
 801668c:	d1e9      	bne.n	8016662 <inet_aton+0xa>
 801668e:	2200      	movs	r2, #0
 8016690:	250a      	movs	r5, #10
 8016692:	1d1c      	adds	r4, r3, #4
 8016694:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8016698:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 801669c:	d10d      	bne.n	80166ba <inet_aton+0x62>
 801669e:	f88d 2007 	strb.w	r2, [sp, #7]
 80166a2:	b9b1      	cbnz	r1, 80166d2 <inet_aton+0x7a>
 80166a4:	2001      	movs	r0, #1
 80166a6:	e006      	b.n	80166b6 <inet_aton+0x5e>
 80166a8:	2c00      	cmp	r4, #0
 80166aa:	d0eb      	beq.n	8016684 <inet_aton+0x2c>
 80166ac:	2c0a      	cmp	r4, #10
 80166ae:	d0e9      	beq.n	8016684 <inet_aton+0x2c>
 80166b0:	42b8      	cmp	r0, r7
 80166b2:	d1da      	bne.n	801666a <inet_aton+0x12>
 80166b4:	2000      	movs	r0, #0
 80166b6:	b003      	add	sp, #12
 80166b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166ba:	280a      	cmp	r0, #10
 80166bc:	d0ef      	beq.n	801669e <inet_aton+0x46>
 80166be:	42a3      	cmp	r3, r4
 80166c0:	d0f8      	beq.n	80166b4 <inet_aton+0x5c>
 80166c2:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 80166c6:	2e09      	cmp	r6, #9
 80166c8:	d8f4      	bhi.n	80166b4 <inet_aton+0x5c>
 80166ca:	fb05 0202 	mla	r2, r5, r2, r0
 80166ce:	3a30      	subs	r2, #48	; 0x30
 80166d0:	e7e0      	b.n	8016694 <inet_aton+0x3c>
 80166d2:	9b01      	ldr	r3, [sp, #4]
 80166d4:	600b      	str	r3, [r1, #0]
 80166d6:	e7e5      	b.n	80166a4 <inet_aton+0x4c>

080166d8 <malloc>:
 80166d8:	b538      	push	{r3, r4, r5, lr}
 80166da:	4604      	mov	r4, r0
 80166dc:	4601      	mov	r1, r0
 80166de:	481c      	ldr	r0, [pc, #112]	; (8016750 <malloc+0x78>)
 80166e0:	f7f3 f86e 	bl	80097c0 <printf>
 80166e4:	b17c      	cbz	r4, 8016706 <malloc+0x2e>
 80166e6:	4b1b      	ldr	r3, [pc, #108]	; (8016754 <malloc+0x7c>)
 80166e8:	6818      	ldr	r0, [r3, #0]
 80166ea:	b978      	cbnz	r0, 801670c <malloc+0x34>
 80166ec:	4a1a      	ldr	r2, [pc, #104]	; (8016758 <malloc+0x80>)
 80166ee:	f104 031b 	add.w	r3, r4, #27
 80166f2:	6811      	ldr	r1, [r2, #0]
 80166f4:	4819      	ldr	r0, [pc, #100]	; (801675c <malloc+0x84>)
 80166f6:	f023 030f 	bic.w	r3, r3, #15
 80166fa:	440b      	add	r3, r1
 80166fc:	4283      	cmp	r3, r0
 80166fe:	d921      	bls.n	8016744 <malloc+0x6c>
 8016700:	4817      	ldr	r0, [pc, #92]	; (8016760 <malloc+0x88>)
 8016702:	f7f3 f85d 	bl	80097c0 <printf>
 8016706:	2500      	movs	r5, #0
 8016708:	4628      	mov	r0, r5
 801670a:	bd38      	pop	{r3, r4, r5, pc}
 801670c:	4284      	cmp	r4, r0
 801670e:	d80a      	bhi.n	8016726 <malloc+0x4e>
 8016710:	685a      	ldr	r2, [r3, #4]
 8016712:	6899      	ldr	r1, [r3, #8]
 8016714:	3201      	adds	r2, #1
 8016716:	428a      	cmp	r2, r1
 8016718:	605a      	str	r2, [r3, #4]
 801671a:	d900      	bls.n	801671e <malloc+0x46>
 801671c:	609a      	str	r2, [r3, #8]
 801671e:	68d9      	ldr	r1, [r3, #12]
 8016720:	b919      	cbnz	r1, 801672a <malloc+0x52>
 8016722:	4604      	mov	r4, r0
 8016724:	e7e2      	b.n	80166ec <malloc+0x14>
 8016726:	3310      	adds	r3, #16
 8016728:	e7de      	b.n	80166e8 <malloc+0x10>
 801672a:	4604      	mov	r4, r0
 801672c:	688a      	ldr	r2, [r1, #8]
 801672e:	60da      	str	r2, [r3, #12]
 8016730:	2300      	movs	r3, #0
 8016732:	f101 050c 	add.w	r5, r1, #12
 8016736:	608b      	str	r3, [r1, #8]
 8016738:	4622      	mov	r2, r4
 801673a:	462b      	mov	r3, r5
 801673c:	4809      	ldr	r0, [pc, #36]	; (8016764 <malloc+0x8c>)
 801673e:	f7f3 f83f 	bl	80097c0 <printf>
 8016742:	e7e1      	b.n	8016708 <malloc+0x30>
 8016744:	6013      	str	r3, [r2, #0]
 8016746:	4b08      	ldr	r3, [pc, #32]	; (8016768 <malloc+0x90>)
 8016748:	e9c1 3400 	strd	r3, r4, [r1]
 801674c:	e7f0      	b.n	8016730 <malloc+0x58>
 801674e:	bf00      	nop
 8016750:	0801bf20 	stmdaeq	r1, {r5, r8, r9, sl, fp, ip, sp, pc}
 8016754:	20000014 	andcs	r0, r0, r4, lsl r0
 8016758:	20000010 	andcs	r0, r0, r0, lsl r0
 801675c:	2003d800 	andcs	sp, r3, r0, lsl #16
 8016760:	0801bf2c 	stmdaeq	r1, {r2, r3, r5, r8, r9, sl, fp, ip, sp, pc}
 8016764:	0801bf48 	stmdaeq	r1, {r3, r6, r8, r9, sl, fp, ip, sp, pc}
 8016768:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

0801676c <free>:
 801676c:	b538      	push	{r3, r4, r5, lr}
 801676e:	4604      	mov	r4, r0
 8016770:	b1c8      	cbz	r0, 80167a6 <free+0x3a>
 8016772:	f1a0 050c 	sub.w	r5, r0, #12
 8016776:	4602      	mov	r2, r0
 8016778:	4629      	mov	r1, r5
 801677a:	480c      	ldr	r0, [pc, #48]	; (80167ac <free+0x40>)
 801677c:	f7f3 f820 	bl	80097c0 <printf>
 8016780:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8016784:	4b0a      	ldr	r3, [pc, #40]	; (80167b0 <free+0x44>)
 8016786:	429a      	cmp	r2, r3
 8016788:	d10d      	bne.n	80167a6 <free+0x3a>
 801678a:	4b0a      	ldr	r3, [pc, #40]	; (80167b4 <free+0x48>)
 801678c:	681a      	ldr	r2, [r3, #0]
 801678e:	b152      	cbz	r2, 80167a6 <free+0x3a>
 8016790:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8016794:	4291      	cmp	r1, r2
 8016796:	d107      	bne.n	80167a8 <free+0x3c>
 8016798:	68da      	ldr	r2, [r3, #12]
 801679a:	f844 2c04 	str.w	r2, [r4, #-4]
 801679e:	685a      	ldr	r2, [r3, #4]
 80167a0:	60dd      	str	r5, [r3, #12]
 80167a2:	3a01      	subs	r2, #1
 80167a4:	605a      	str	r2, [r3, #4]
 80167a6:	bd38      	pop	{r3, r4, r5, pc}
 80167a8:	3310      	adds	r3, #16
 80167aa:	e7ef      	b.n	801678c <free+0x20>
 80167ac:	0801bf73 	stmdaeq	r1, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, sp, pc}
 80167b0:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 80167b4:	20000014 	andcs	r0, r0, r4, lsl r0

080167b8 <memcpy>:
 80167b8:	b510      	push	{r4, lr}
 80167ba:	1e43      	subs	r3, r0, #1
 80167bc:	440a      	add	r2, r1
 80167be:	4291      	cmp	r1, r2
 80167c0:	d100      	bne.n	80167c4 <memcpy+0xc>
 80167c2:	bd10      	pop	{r4, pc}
 80167c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80167c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80167cc:	e7f7      	b.n	80167be <memcpy+0x6>

080167ce <memmove>:
 80167ce:	4288      	cmp	r0, r1
 80167d0:	b510      	push	{r4, lr}
 80167d2:	eb01 0302 	add.w	r3, r1, r2
 80167d6:	d208      	bcs.n	80167ea <memmove+0x1c>
 80167d8:	1e42      	subs	r2, r0, #1
 80167da:	4299      	cmp	r1, r3
 80167dc:	d100      	bne.n	80167e0 <memmove+0x12>
 80167de:	bd10      	pop	{r4, pc}
 80167e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80167e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80167e8:	e7f7      	b.n	80167da <memmove+0xc>
 80167ea:	4601      	mov	r1, r0
 80167ec:	4402      	add	r2, r0
 80167ee:	428a      	cmp	r2, r1
 80167f0:	d0f5      	beq.n	80167de <memmove+0x10>
 80167f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80167f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80167fa:	e7f8      	b.n	80167ee <memmove+0x20>

080167fc <memset>:
 80167fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167fe:	b1c2      	cbz	r2, 8016832 <memset+0x36>
 8016800:	4603      	mov	r3, r0
 8016802:	b2c9      	uxtb	r1, r1
 8016804:	075c      	lsls	r4, r3, #29
 8016806:	d110      	bne.n	801682a <memset+0x2e>
 8016808:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 801680c:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8016810:	463d      	mov	r5, r7
 8016812:	461e      	mov	r6, r3
 8016814:	f022 0407 	bic.w	r4, r2, #7
 8016818:	441c      	add	r4, r3
 801681a:	42a6      	cmp	r6, r4
 801681c:	d10a      	bne.n	8016834 <memset+0x38>
 801681e:	4413      	add	r3, r2
 8016820:	429c      	cmp	r4, r3
 8016822:	d006      	beq.n	8016832 <memset+0x36>
 8016824:	f804 1b01 	strb.w	r1, [r4], #1
 8016828:	e7fa      	b.n	8016820 <memset+0x24>
 801682a:	3a01      	subs	r2, #1
 801682c:	f803 1b01 	strb.w	r1, [r3], #1
 8016830:	d1e8      	bne.n	8016804 <memset+0x8>
 8016832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016834:	f846 7b08 	str.w	r7, [r6], #8
 8016838:	f846 5c04 	str.w	r5, [r6, #-4]
 801683c:	e7ed      	b.n	801681a <memset+0x1e>

0801683e <puts>:
 801683e:	b508      	push	{r3, lr}
 8016840:	f7ff fd6e 	bl	8016320 <console_puts>
 8016844:	200a      	movs	r0, #10
 8016846:	f7ff fd69 	bl	801631c <console_putc>
 801684a:	2001      	movs	r0, #1
 801684c:	bd08      	pop	{r3, pc}
	...

08016850 <strtok>:
 8016850:	b530      	push	{r4, r5, lr}
 8016852:	b910      	cbnz	r0, 801685a <strtok+0xa>
 8016854:	4b12      	ldr	r3, [pc, #72]	; (80168a0 <strtok+0x50>)
 8016856:	6818      	ldr	r0, [r3, #0]
 8016858:	b158      	cbz	r0, 8016872 <strtok+0x22>
 801685a:	4603      	mov	r3, r0
 801685c:	460d      	mov	r5, r1
 801685e:	4618      	mov	r0, r3
 8016860:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016864:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016868:	b924      	cbnz	r4, 8016874 <strtok+0x24>
 801686a:	b94a      	cbnz	r2, 8016880 <strtok+0x30>
 801686c:	4610      	mov	r0, r2
 801686e:	4b0c      	ldr	r3, [pc, #48]	; (80168a0 <strtok+0x50>)
 8016870:	601a      	str	r2, [r3, #0]
 8016872:	bd30      	pop	{r4, r5, pc}
 8016874:	42a2      	cmp	r2, r4
 8016876:	d1f5      	bne.n	8016864 <strtok+0x14>
 8016878:	e7f0      	b.n	801685c <strtok+0xc>
 801687a:	4613      	mov	r3, r2
 801687c:	e00c      	b.n	8016898 <strtok+0x48>
 801687e:	b914      	cbnz	r4, 8016886 <strtok+0x36>
 8016880:	460d      	mov	r5, r1
 8016882:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016886:	f815 4b01 	ldrb.w	r4, [r5], #1
 801688a:	42a2      	cmp	r2, r4
 801688c:	d1f7      	bne.n	801687e <strtok+0x2e>
 801688e:	2a00      	cmp	r2, #0
 8016890:	d0f3      	beq.n	801687a <strtok+0x2a>
 8016892:	2200      	movs	r2, #0
 8016894:	f803 2c01 	strb.w	r2, [r3, #-1]
 8016898:	4a01      	ldr	r2, [pc, #4]	; (80168a0 <strtok+0x50>)
 801689a:	6013      	str	r3, [r2, #0]
 801689c:	e7e9      	b.n	8016872 <strtok+0x22>
 801689e:	bf00      	nop
 80168a0:	2001d9a0 	andcs	sp, r1, r0, lsr #19

080168a4 <isleapyear>:
 80168a4:	2264      	movs	r2, #100	; 0x64
 80168a6:	fb90 f3f2 	sdiv	r3, r0, r2
 80168aa:	fb02 0313 	mls	r3, r2, r3, r0
 80168ae:	b94b      	cbnz	r3, 80168c4 <isleapyear+0x20>
 80168b0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80168b4:	fb90 f2f3 	sdiv	r2, r0, r3
 80168b8:	fb03 0012 	mls	r0, r3, r2, r0
 80168bc:	fab0 f080 	clz	r0, r0
 80168c0:	0940      	lsrs	r0, r0, #5
 80168c2:	4770      	bx	lr
 80168c4:	f010 0f03 	tst.w	r0, #3
 80168c8:	bf0c      	ite	eq
 80168ca:	2001      	moveq	r0, #1
 80168cc:	2000      	movne	r0, #0
 80168ce:	4770      	bx	lr

080168d0 <getdaysofmonth>:
 80168d0:	b510      	push	{r4, lr}
 80168d2:	4604      	mov	r4, r0
 80168d4:	2c01      	cmp	r4, #1
 80168d6:	4608      	mov	r0, r1
 80168d8:	d102      	bne.n	80168e0 <getdaysofmonth+0x10>
 80168da:	f7ff ffe3 	bl	80168a4 <isleapyear>
 80168de:	b918      	cbnz	r0, 80168e8 <getdaysofmonth+0x18>
 80168e0:	4b02      	ldr	r3, [pc, #8]	; (80168ec <getdaysofmonth+0x1c>)
 80168e2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80168e6:	bd10      	pop	{r4, pc}
 80168e8:	201d      	movs	r0, #29
 80168ea:	e7fc      	b.n	80168e6 <getdaysofmonth+0x16>
 80168ec:	0801bf9c 	stmdaeq	r1, {r2, r3, r4, r7, r8, r9, sl, fp, ip, sp, pc}

080168f0 <mktime>:
 80168f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168f4:	4604      	mov	r4, r0
 80168f6:	2800      	cmp	r0, #0
 80168f8:	d043      	beq.n	8016982 <mktime+0x92>
 80168fa:	6941      	ldr	r1, [r0, #20]
 80168fc:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8016900:	2b45      	cmp	r3, #69	; 0x45
 8016902:	d83e      	bhi.n	8016982 <mktime+0x92>
 8016904:	2600      	movs	r6, #0
 8016906:	f240 75b2 	movw	r5, #1970	; 0x7b2
 801690a:	f240 186d 	movw	r8, #365	; 0x16d
 801690e:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 8016912:	42af      	cmp	r7, r5
 8016914:	da24      	bge.n	8016960 <mktime+0x70>
 8016916:	6927      	ldr	r7, [r4, #16]
 8016918:	2f0b      	cmp	r7, #11
 801691a:	d832      	bhi.n	8016982 <mktime+0x92>
 801691c:	2500      	movs	r5, #0
 801691e:	42af      	cmp	r7, r5
 8016920:	d129      	bne.n	8016976 <mktime+0x86>
 8016922:	68e5      	ldr	r5, [r4, #12]
 8016924:	2d00      	cmp	r5, #0
 8016926:	dd2c      	ble.n	8016982 <mktime+0x92>
 8016928:	4638      	mov	r0, r7
 801692a:	f7ff ffd1 	bl	80168d0 <getdaysofmonth>
 801692e:	4285      	cmp	r5, r0
 8016930:	dc27      	bgt.n	8016982 <mktime+0x92>
 8016932:	2318      	movs	r3, #24
 8016934:	3d01      	subs	r5, #1
 8016936:	4435      	add	r5, r6
 8016938:	435d      	muls	r5, r3
 801693a:	68a3      	ldr	r3, [r4, #8]
 801693c:	2b17      	cmp	r3, #23
 801693e:	d820      	bhi.n	8016982 <mktime+0x92>
 8016940:	213c      	movs	r1, #60	; 0x3c
 8016942:	442b      	add	r3, r5
 8016944:	fb01 f203 	mul.w	r2, r1, r3
 8016948:	6863      	ldr	r3, [r4, #4]
 801694a:	2b3b      	cmp	r3, #59	; 0x3b
 801694c:	d819      	bhi.n	8016982 <mktime+0x92>
 801694e:	6820      	ldr	r0, [r4, #0]
 8016950:	4413      	add	r3, r2
 8016952:	283b      	cmp	r0, #59	; 0x3b
 8016954:	fb01 f303 	mul.w	r3, r1, r3
 8016958:	d813      	bhi.n	8016982 <mktime+0x92>
 801695a:	4418      	add	r0, r3
 801695c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016960:	4628      	mov	r0, r5
 8016962:	f7ff ff9f 	bl	80168a4 <isleapyear>
 8016966:	2800      	cmp	r0, #0
 8016968:	bf14      	ite	ne
 801696a:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 801696e:	4643      	moveq	r3, r8
 8016970:	3501      	adds	r5, #1
 8016972:	441e      	add	r6, r3
 8016974:	e7cd      	b.n	8016912 <mktime+0x22>
 8016976:	4628      	mov	r0, r5
 8016978:	f7ff ffaa 	bl	80168d0 <getdaysofmonth>
 801697c:	3501      	adds	r5, #1
 801697e:	4406      	add	r6, r0
 8016980:	e7cd      	b.n	801691e <mktime+0x2e>
 8016982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016986:	e7e9      	b.n	801695c <mktime+0x6c>

08016988 <gettimeofday>:
 8016988:	b538      	push	{r3, r4, r5, lr}
 801698a:	4b10      	ldr	r3, [pc, #64]	; (80169cc <gettimeofday+0x44>)
 801698c:	4a10      	ldr	r2, [pc, #64]	; (80169d0 <gettimeofday+0x48>)
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	6814      	ldr	r4, [r2, #0]
 8016992:	6013      	str	r3, [r2, #0]
 8016994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016998:	429c      	cmp	r4, r3
 801699a:	bf2c      	ite	cs
 801699c:	1ae4      	subcs	r4, r4, r3
 801699e:	1b1c      	subcc	r4, r3, r4
 80169a0:	4354      	muls	r4, r2
 80169a2:	4b0c      	ldr	r3, [pc, #48]	; (80169d4 <gettimeofday+0x4c>)
 80169a4:	4605      	mov	r5, r0
 80169a6:	e9d3 2100 	ldrd	r2, r1, [r3]
 80169aa:	18a4      	adds	r4, r4, r2
 80169ac:	f141 0100 	adc.w	r1, r1, #0
 80169b0:	e9c3 4100 	strd	r4, r1, [r3]
 80169b4:	4620      	mov	r0, r4
 80169b6:	2300      	movs	r3, #0
 80169b8:	4a07      	ldr	r2, [pc, #28]	; (80169d8 <gettimeofday+0x50>)
 80169ba:	f7f1 fab9 	bl	8007f30 <__aeabi_uldivmod>
 80169be:	4b06      	ldr	r3, [pc, #24]	; (80169d8 <gettimeofday+0x50>)
 80169c0:	6028      	str	r0, [r5, #0]
 80169c2:	fb03 4410 	mls	r4, r3, r0, r4
 80169c6:	2000      	movs	r0, #0
 80169c8:	606c      	str	r4, [r5, #4]
 80169ca:	bd38      	pop	{r3, r4, r5, pc}
 80169cc:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4
 80169d0:	2001d9b0 			; <UNDEFINED> instruction: 0x2001d9b0
 80169d4:	2001d9a8 	andcs	sp, r1, r8, lsr #19
 80169d8:	000f4240 	andeq	r4, pc, r0, asr #4

080169dc <settimeofday>:
 80169dc:	4b07      	ldr	r3, [pc, #28]	; (80169fc <settimeofday+0x20>)
 80169de:	b510      	push	{r4, lr}
 80169e0:	681a      	ldr	r2, [r3, #0]
 80169e2:	4b07      	ldr	r3, [pc, #28]	; (8016a00 <settimeofday+0x24>)
 80169e4:	6804      	ldr	r4, [r0, #0]
 80169e6:	601a      	str	r2, [r3, #0]
 80169e8:	6843      	ldr	r3, [r0, #4]
 80169ea:	4806      	ldr	r0, [pc, #24]	; (8016a04 <settimeofday+0x28>)
 80169ec:	17da      	asrs	r2, r3, #31
 80169ee:	fbc4 3200 	smlal	r3, r2, r4, r0
 80169f2:	4905      	ldr	r1, [pc, #20]	; (8016a08 <settimeofday+0x2c>)
 80169f4:	2000      	movs	r0, #0
 80169f6:	e9c1 3200 	strd	r3, r2, [r1]
 80169fa:	bd10      	pop	{r4, pc}
 80169fc:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4
 8016a00:	2001d9b0 			; <UNDEFINED> instruction: 0x2001d9b0
 8016a04:	000f4240 	andeq	r4, pc, r0, asr #4
 8016a08:	2001d9a8 	andcs	sp, r1, r8, lsr #19

08016a0c <time>:
 8016a0c:	b513      	push	{r0, r1, r4, lr}
 8016a0e:	4604      	mov	r4, r0
 8016a10:	2100      	movs	r1, #0
 8016a12:	4668      	mov	r0, sp
 8016a14:	f7ff ffb8 	bl	8016988 <gettimeofday>
 8016a18:	9800      	ldr	r0, [sp, #0]
 8016a1a:	b104      	cbz	r4, 8016a1e <time+0x12>
 8016a1c:	6020      	str	r0, [r4, #0]
 8016a1e:	b002      	add	sp, #8
 8016a20:	bd10      	pop	{r4, pc}
	...

08016a24 <uart0_init>:
 8016a24:	2301      	movs	r3, #1
 8016a26:	b507      	push	{r0, r1, r2, lr}
 8016a28:	2208      	movs	r2, #8
 8016a2a:	9300      	str	r3, [sp, #0]
 8016a2c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8016a30:	2300      	movs	r3, #0
 8016a32:	4803      	ldr	r0, [pc, #12]	; (8016a40 <uart0_init+0x1c>)
 8016a34:	f001 f906 	bl	8017c44 <gd32_uart_begin>
 8016a38:	b003      	add	sp, #12
 8016a3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8016a3e:	bf00      	nop
 8016a40:	40013800 	andmi	r3, r1, r0, lsl #16

08016a44 <uart0_putc>:
 8016a44:	280a      	cmp	r0, #10
 8016a46:	b538      	push	{r3, r4, r5, lr}
 8016a48:	4604      	mov	r4, r0
 8016a4a:	d10a      	bne.n	8016a62 <uart0_putc+0x1e>
 8016a4c:	4d0b      	ldr	r5, [pc, #44]	; (8016a7c <uart0_putc+0x38>)
 8016a4e:	2107      	movs	r1, #7
 8016a50:	4628      	mov	r0, r5
 8016a52:	f000 ff2b 	bl	80178ac <usart_flag_get>
 8016a56:	2800      	cmp	r0, #0
 8016a58:	d0f9      	beq.n	8016a4e <uart0_putc+0xa>
 8016a5a:	220d      	movs	r2, #13
 8016a5c:	4b08      	ldr	r3, [pc, #32]	; (8016a80 <uart0_putc+0x3c>)
 8016a5e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8016a62:	4d06      	ldr	r5, [pc, #24]	; (8016a7c <uart0_putc+0x38>)
 8016a64:	2107      	movs	r1, #7
 8016a66:	4628      	mov	r0, r5
 8016a68:	f000 ff20 	bl	80178ac <usart_flag_get>
 8016a6c:	2800      	cmp	r0, #0
 8016a6e:	d0f9      	beq.n	8016a64 <uart0_putc+0x20>
 8016a70:	4b03      	ldr	r3, [pc, #12]	; (8016a80 <uart0_putc+0x3c>)
 8016a72:	b2e4      	uxtb	r4, r4
 8016a74:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 8016a78:	bd38      	pop	{r3, r4, r5, pc}
 8016a7a:	bf00      	nop
 8016a7c:	40013800 	andmi	r3, r1, r0, lsl #16
 8016a80:	40013000 	andmi	r3, r1, r0

08016a84 <uart0_puts>:
 8016a84:	b510      	push	{r4, lr}
 8016a86:	1e44      	subs	r4, r0, #1
 8016a88:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016a8c:	b903      	cbnz	r3, 8016a90 <uart0_puts+0xc>
 8016a8e:	bd10      	pop	{r4, pc}
 8016a90:	2b0a      	cmp	r3, #10
 8016a92:	d102      	bne.n	8016a9a <uart0_puts+0x16>
 8016a94:	200d      	movs	r0, #13
 8016a96:	f7ff ffd5 	bl	8016a44 <uart0_putc>
 8016a9a:	7820      	ldrb	r0, [r4, #0]
 8016a9c:	f7ff ffd2 	bl	8016a44 <uart0_putc>
 8016aa0:	e7f2      	b.n	8016a88 <uart0_puts+0x4>
	...

08016aa4 <systick_config>:
 8016aa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016aa8:	4b0b      	ldr	r3, [pc, #44]	; (8016ad8 <systick_config+0x34>)
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8016ab0:	3b01      	subs	r3, #1
 8016ab2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016ab6:	d20d      	bcs.n	8016ad4 <systick_config+0x30>
 8016ab8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8016abc:	21f0      	movs	r1, #240	; 0xf0
 8016abe:	6153      	str	r3, [r2, #20]
 8016ac0:	4b06      	ldr	r3, [pc, #24]	; (8016adc <systick_config+0x38>)
 8016ac2:	2007      	movs	r0, #7
 8016ac4:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8016ac8:	2100      	movs	r1, #0
 8016aca:	6191      	str	r1, [r2, #24]
 8016acc:	6110      	str	r0, [r2, #16]
 8016ace:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8016ad2:	4770      	bx	lr
 8016ad4:	e7fe      	b.n	8016ad4 <systick_config+0x30>
 8016ad6:	bf00      	nop
 8016ad8:	200000e4 	andcs	r0, r0, r4, ror #1
 8016adc:	e000ed00 	and	lr, r0, r0, lsl #26

08016ae0 <SysTick_Handler>:
 8016ae0:	4a02      	ldr	r2, [pc, #8]	; (8016aec <SysTick_Handler+0xc>)
 8016ae2:	6813      	ldr	r3, [r2, #0]
 8016ae4:	3301      	adds	r3, #1
 8016ae6:	6013      	str	r3, [r2, #0]
 8016ae8:	4770      	bx	lr
 8016aea:	bf00      	nop
 8016aec:	2001d9b4 			; <UNDEFINED> instruction: 0x2001d9b4

08016af0 <SystemInit>:
 8016af0:	4b3a      	ldr	r3, [pc, #232]	; (8016bdc <SystemInit+0xec>)
 8016af2:	681a      	ldr	r2, [r3, #0]
 8016af4:	f042 0201 	orr.w	r2, r2, #1
 8016af8:	601a      	str	r2, [r3, #0]
 8016afa:	6859      	ldr	r1, [r3, #4]
 8016afc:	4a38      	ldr	r2, [pc, #224]	; (8016be0 <SystemInit+0xf0>)
 8016afe:	400a      	ands	r2, r1
 8016b00:	605a      	str	r2, [r3, #4]
 8016b02:	681a      	ldr	r2, [r3, #0]
 8016b04:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8016b08:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8016b0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8016b10:	601a      	str	r2, [r3, #0]
 8016b12:	681a      	ldr	r2, [r3, #0]
 8016b14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8016b18:	601a      	str	r2, [r3, #0]
 8016b1a:	685a      	ldr	r2, [r3, #4]
 8016b1c:	f022 5203 	bic.w	r2, r2, #549453824	; 0x20c00000
 8016b20:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8016b24:	605a      	str	r2, [r3, #4]
 8016b26:	681a      	ldr	r2, [r3, #0]
 8016b28:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8016b2c:	601a      	str	r2, [r3, #0]
 8016b2e:	2200      	movs	r2, #0
 8016b30:	62da      	str	r2, [r3, #44]	; 0x2c
 8016b32:	6099      	str	r1, [r3, #8]
 8016b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8016b38:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8016b3c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8016b40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8016b44:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8016b48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8016b4c:	4a25      	ldr	r2, [pc, #148]	; (8016be4 <SystemInit+0xf4>)
 8016b4e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8016b52:	681a      	ldr	r2, [r3, #0]
 8016b54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8016b58:	601a      	str	r2, [r3, #0]
 8016b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016b5e:	6819      	ldr	r1, [r3, #0]
 8016b60:	0389      	lsls	r1, r1, #14
 8016b62:	d401      	bmi.n	8016b68 <SystemInit+0x78>
 8016b64:	3a01      	subs	r2, #1
 8016b66:	d1fa      	bne.n	8016b5e <SystemInit+0x6e>
 8016b68:	681a      	ldr	r2, [r3, #0]
 8016b6a:	0392      	lsls	r2, r2, #14
 8016b6c:	d400      	bmi.n	8016b70 <SystemInit+0x80>
 8016b6e:	e7fe      	b.n	8016b6e <SystemInit+0x7e>
 8016b70:	685a      	ldr	r2, [r3, #4]
 8016b72:	605a      	str	r2, [r3, #4]
 8016b74:	685a      	ldr	r2, [r3, #4]
 8016b76:	605a      	str	r2, [r3, #4]
 8016b78:	685a      	ldr	r2, [r3, #4]
 8016b7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8016b7e:	605a      	str	r2, [r3, #4]
 8016b80:	685a      	ldr	r2, [r3, #4]
 8016b82:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8016b86:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8016b8a:	605a      	str	r2, [r3, #4]
 8016b8c:	685a      	ldr	r2, [r3, #4]
 8016b8e:	f442 1204 	orr.w	r2, r2, #2162688	; 0x210000
 8016b92:	605a      	str	r2, [r3, #4]
 8016b94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8016b96:	4a14      	ldr	r2, [pc, #80]	; (8016be8 <SystemInit+0xf8>)
 8016b98:	400a      	ands	r2, r1
 8016b9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8016b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b9e:	f442 3285 	orr.w	r2, r2, #68096	; 0x10a00
 8016ba2:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 8016ba6:	62da      	str	r2, [r3, #44]	; 0x2c
 8016ba8:	681a      	ldr	r2, [r3, #0]
 8016baa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8016bae:	601a      	str	r2, [r3, #0]
 8016bb0:	681a      	ldr	r2, [r3, #0]
 8016bb2:	0110      	lsls	r0, r2, #4
 8016bb4:	d5fc      	bpl.n	8016bb0 <SystemInit+0xc0>
 8016bb6:	681a      	ldr	r2, [r3, #0]
 8016bb8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8016bbc:	601a      	str	r2, [r3, #0]
 8016bbe:	681a      	ldr	r2, [r3, #0]
 8016bc0:	0191      	lsls	r1, r2, #6
 8016bc2:	d5fc      	bpl.n	8016bbe <SystemInit+0xce>
 8016bc4:	685a      	ldr	r2, [r3, #4]
 8016bc6:	f022 0203 	bic.w	r2, r2, #3
 8016bca:	605a      	str	r2, [r3, #4]
 8016bcc:	685a      	ldr	r2, [r3, #4]
 8016bce:	f042 0202 	orr.w	r2, r2, #2
 8016bd2:	605a      	str	r2, [r3, #4]
 8016bd4:	685a      	ldr	r2, [r3, #4]
 8016bd6:	0712      	lsls	r2, r2, #28
 8016bd8:	d5fc      	bpl.n	8016bd4 <SystemInit+0xe4>
 8016bda:	4770      	bx	lr
 8016bdc:	40021000 	andmi	r1, r2, r0
 8016be0:	e0ff000c 	rscs	r0, pc, ip
 8016be4:	20003010 	andcs	r3, r0, r0, lsl r0
 8016be8:	fffef000 			; <UNDEFINED> instruction: 0xfffef000

08016bec <bkp_data_write>:
 8016bec:	f1a0 030b 	sub.w	r3, r0, #11
 8016bf0:	2b1f      	cmp	r3, #31
 8016bf2:	d804      	bhi.n	8016bfe <bkp_data_write+0x12>
 8016bf4:	4b07      	ldr	r3, [pc, #28]	; (8016c14 <bkp_data_write+0x28>)
 8016bf6:	4403      	add	r3, r0
 8016bf8:	009b      	lsls	r3, r3, #2
 8016bfa:	8019      	strh	r1, [r3, #0]
 8016bfc:	4770      	bx	lr
 8016bfe:	1e43      	subs	r3, r0, #1
 8016c00:	2b09      	cmp	r3, #9
 8016c02:	bf9f      	itttt	ls
 8016c04:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 8016c08:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 8016c0c:	0080      	lslls	r0, r0, #2
 8016c0e:	8001      	strhls	r1, [r0, #0]
 8016c10:	4770      	bx	lr
 8016c12:	bf00      	nop
 8016c14:	10001b05 	andne	r1, r0, r5, lsl #22

08016c18 <bkp_data_read>:
 8016c18:	f1a0 030b 	sub.w	r3, r0, #11
 8016c1c:	2b1f      	cmp	r3, #31
 8016c1e:	d805      	bhi.n	8016c2c <bkp_data_read+0x14>
 8016c20:	4b08      	ldr	r3, [pc, #32]	; (8016c44 <bkp_data_read+0x2c>)
 8016c22:	4403      	add	r3, r0
 8016c24:	009b      	lsls	r3, r3, #2
 8016c26:	8818      	ldrh	r0, [r3, #0]
 8016c28:	b280      	uxth	r0, r0
 8016c2a:	4770      	bx	lr
 8016c2c:	1e43      	subs	r3, r0, #1
 8016c2e:	2b09      	cmp	r3, #9
 8016c30:	d806      	bhi.n	8016c40 <bkp_data_read+0x28>
 8016c32:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8016c36:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 8016c3a:	0080      	lsls	r0, r0, #2
 8016c3c:	8800      	ldrh	r0, [r0, #0]
 8016c3e:	e7f3      	b.n	8016c28 <bkp_data_read+0x10>
 8016c40:	2000      	movs	r0, #0
 8016c42:	4770      	bx	lr
 8016c44:	10001b05 	andne	r1, r0, r5, lsl #22

08016c48 <dma_deinit>:
 8016c48:	2314      	movs	r3, #20
 8016c4a:	fb03 0301 	mla	r3, r3, r1, r0
 8016c4e:	689a      	ldr	r2, [r3, #8]
 8016c50:	b530      	push	{r4, r5, lr}
 8016c52:	f022 0201 	bic.w	r2, r2, #1
 8016c56:	609a      	str	r2, [r3, #8]
 8016c58:	2200      	movs	r2, #0
 8016c5a:	609a      	str	r2, [r3, #8]
 8016c5c:	60da      	str	r2, [r3, #12]
 8016c5e:	611a      	str	r2, [r3, #16]
 8016c60:	615a      	str	r2, [r3, #20]
 8016c62:	230f      	movs	r3, #15
 8016c64:	6844      	ldr	r4, [r0, #4]
 8016c66:	008d      	lsls	r5, r1, #2
 8016c68:	40ab      	lsls	r3, r5
 8016c6a:	4323      	orrs	r3, r4
 8016c6c:	6043      	str	r3, [r0, #4]
 8016c6e:	4b04      	ldr	r3, [pc, #16]	; (8016c80 <dma_deinit+0x38>)
 8016c70:	4298      	cmp	r0, r3
 8016c72:	d103      	bne.n	8016c7c <dma_deinit+0x34>
 8016c74:	2905      	cmp	r1, #5
 8016c76:	bf08      	it	eq
 8016c78:	f8c3 2300 	streq.w	r2, [r3, #768]	; 0x300
 8016c7c:	bd30      	pop	{r4, r5, pc}
 8016c7e:	bf00      	nop
 8016c80:	40020400 	andmi	r0, r2, r0, lsl #8

08016c84 <dma_struct_para_init>:
 8016c84:	2300      	movs	r3, #0
 8016c86:	e9c0 3300 	strd	r3, r3, [r0]
 8016c8a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8016c8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016c92:	8303      	strh	r3, [r0, #24]
 8016c94:	7683      	strb	r3, [r0, #26]
 8016c96:	4770      	bx	lr

08016c98 <dma_init>:
 8016c98:	2314      	movs	r3, #20
 8016c9a:	fb03 0101 	mla	r1, r3, r1, r0
 8016c9e:	6813      	ldr	r3, [r2, #0]
 8016ca0:	b510      	push	{r4, lr}
 8016ca2:	610b      	str	r3, [r1, #16]
 8016ca4:	6893      	ldr	r3, [r2, #8]
 8016ca6:	614b      	str	r3, [r1, #20]
 8016ca8:	8a13      	ldrh	r3, [r2, #16]
 8016caa:	60cb      	str	r3, [r1, #12]
 8016cac:	68d4      	ldr	r4, [r2, #12]
 8016cae:	6853      	ldr	r3, [r2, #4]
 8016cb0:	6888      	ldr	r0, [r1, #8]
 8016cb2:	4323      	orrs	r3, r4
 8016cb4:	6954      	ldr	r4, [r2, #20]
 8016cb6:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8016cba:	4323      	orrs	r3, r4
 8016cbc:	4303      	orrs	r3, r0
 8016cbe:	608b      	str	r3, [r1, #8]
 8016cc0:	7e13      	ldrb	r3, [r2, #24]
 8016cc2:	2b01      	cmp	r3, #1
 8016cc4:	688b      	ldr	r3, [r1, #8]
 8016cc6:	bf0c      	ite	eq
 8016cc8:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8016ccc:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8016cd0:	608b      	str	r3, [r1, #8]
 8016cd2:	7e53      	ldrb	r3, [r2, #25]
 8016cd4:	2b01      	cmp	r3, #1
 8016cd6:	688b      	ldr	r3, [r1, #8]
 8016cd8:	bf0c      	ite	eq
 8016cda:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8016cde:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8016ce2:	608b      	str	r3, [r1, #8]
 8016ce4:	7e93      	ldrb	r3, [r2, #26]
 8016ce6:	b923      	cbnz	r3, 8016cf2 <dma_init+0x5a>
 8016ce8:	688b      	ldr	r3, [r1, #8]
 8016cea:	f023 0310 	bic.w	r3, r3, #16
 8016cee:	608b      	str	r3, [r1, #8]
 8016cf0:	bd10      	pop	{r4, pc}
 8016cf2:	688b      	ldr	r3, [r1, #8]
 8016cf4:	f043 0310 	orr.w	r3, r3, #16
 8016cf8:	e7f9      	b.n	8016cee <dma_init+0x56>

08016cfa <dma_circulation_disable>:
 8016cfa:	2314      	movs	r3, #20
 8016cfc:	4359      	muls	r1, r3
 8016cfe:	3008      	adds	r0, #8
 8016d00:	580b      	ldr	r3, [r1, r0]
 8016d02:	f023 0320 	bic.w	r3, r3, #32
 8016d06:	500b      	str	r3, [r1, r0]
 8016d08:	4770      	bx	lr

08016d0a <dma_memory_to_memory_disable>:
 8016d0a:	2314      	movs	r3, #20
 8016d0c:	4359      	muls	r1, r3
 8016d0e:	3008      	adds	r0, #8
 8016d10:	580b      	ldr	r3, [r1, r0]
 8016d12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8016d16:	500b      	str	r3, [r1, r0]
 8016d18:	4770      	bx	lr
	...

08016d1c <fmc_bank0_unlock>:
 8016d1c:	4b04      	ldr	r3, [pc, #16]	; (8016d30 <fmc_bank0_unlock+0x14>)
 8016d1e:	691a      	ldr	r2, [r3, #16]
 8016d20:	0612      	lsls	r2, r2, #24
 8016d22:	bf41      	itttt	mi
 8016d24:	4a03      	ldrmi	r2, [pc, #12]	; (8016d34 <fmc_bank0_unlock+0x18>)
 8016d26:	605a      	strmi	r2, [r3, #4]
 8016d28:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8016d2c:	605a      	strmi	r2, [r3, #4]
 8016d2e:	4770      	bx	lr
 8016d30:	40022000 	andmi	r2, r2, r0
 8016d34:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08016d38 <fmc_bank1_unlock>:
 8016d38:	4b04      	ldr	r3, [pc, #16]	; (8016d4c <fmc_bank1_unlock+0x14>)
 8016d3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016d3c:	0612      	lsls	r2, r2, #24
 8016d3e:	bf41      	itttt	mi
 8016d40:	4a03      	ldrmi	r2, [pc, #12]	; (8016d50 <fmc_bank1_unlock+0x18>)
 8016d42:	645a      	strmi	r2, [r3, #68]	; 0x44
 8016d44:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8016d48:	645a      	strmi	r2, [r3, #68]	; 0x44
 8016d4a:	4770      	bx	lr
 8016d4c:	40022000 	andmi	r2, r2, r0
 8016d50:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08016d54 <fmc_bank0_lock>:
 8016d54:	4a02      	ldr	r2, [pc, #8]	; (8016d60 <fmc_bank0_lock+0xc>)
 8016d56:	6913      	ldr	r3, [r2, #16]
 8016d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d5c:	6113      	str	r3, [r2, #16]
 8016d5e:	4770      	bx	lr
 8016d60:	40022000 	andmi	r2, r2, r0

08016d64 <fmc_bank1_lock>:
 8016d64:	4a02      	ldr	r2, [pc, #8]	; (8016d70 <fmc_bank1_lock+0xc>)
 8016d66:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8016d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d6c:	6513      	str	r3, [r2, #80]	; 0x50
 8016d6e:	4770      	bx	lr
 8016d70:	40022000 	andmi	r2, r2, r0

08016d74 <fmc_bank0_state_get>:
 8016d74:	4b07      	ldr	r3, [pc, #28]	; (8016d94 <fmc_bank0_state_get+0x20>)
 8016d76:	68da      	ldr	r2, [r3, #12]
 8016d78:	07d1      	lsls	r1, r2, #31
 8016d7a:	d407      	bmi.n	8016d8c <fmc_bank0_state_get+0x18>
 8016d7c:	68da      	ldr	r2, [r3, #12]
 8016d7e:	06d2      	lsls	r2, r2, #27
 8016d80:	d406      	bmi.n	8016d90 <fmc_bank0_state_get+0x1c>
 8016d82:	68d8      	ldr	r0, [r3, #12]
 8016d84:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8016d88:	0040      	lsls	r0, r0, #1
 8016d8a:	4770      	bx	lr
 8016d8c:	2001      	movs	r0, #1
 8016d8e:	4770      	bx	lr
 8016d90:	2003      	movs	r0, #3
 8016d92:	4770      	bx	lr
 8016d94:	40022000 	andmi	r2, r2, r0

08016d98 <fmc_bank1_state_get>:
 8016d98:	4b07      	ldr	r3, [pc, #28]	; (8016db8 <fmc_bank1_state_get+0x20>)
 8016d9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016d9c:	07d1      	lsls	r1, r2, #31
 8016d9e:	d407      	bmi.n	8016db0 <fmc_bank1_state_get+0x18>
 8016da0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016da2:	06d2      	lsls	r2, r2, #27
 8016da4:	d406      	bmi.n	8016db4 <fmc_bank1_state_get+0x1c>
 8016da6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016da8:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8016dac:	0040      	lsls	r0, r0, #1
 8016dae:	4770      	bx	lr
 8016db0:	2001      	movs	r0, #1
 8016db2:	4770      	bx	lr
 8016db4:	2003      	movs	r0, #3
 8016db6:	4770      	bx	lr
 8016db8:	40022000 	andmi	r2, r2, r0

08016dbc <fwdgt_enable>:
 8016dbc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8016dc0:	4b01      	ldr	r3, [pc, #4]	; (8016dc8 <fwdgt_enable+0xc>)
 8016dc2:	601a      	str	r2, [r3, #0]
 8016dc4:	4770      	bx	lr
 8016dc6:	bf00      	nop
 8016dc8:	40003000 	andmi	r3, r0, r0

08016dcc <fwdgt_counter_reload>:
 8016dcc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8016dd0:	4b01      	ldr	r3, [pc, #4]	; (8016dd8 <fwdgt_counter_reload+0xc>)
 8016dd2:	601a      	str	r2, [r3, #0]
 8016dd4:	4770      	bx	lr
 8016dd6:	bf00      	nop
 8016dd8:	40003000 	andmi	r3, r0, r0

08016ddc <fwdgt_config>:
 8016ddc:	f245 5355 	movw	r3, #21845	; 0x5555
 8016de0:	4a11      	ldr	r2, [pc, #68]	; (8016e28 <fwdgt_config+0x4c>)
 8016de2:	b510      	push	{r4, lr}
 8016de4:	4c11      	ldr	r4, [pc, #68]	; (8016e2c <fwdgt_config+0x50>)
 8016de6:	6013      	str	r3, [r2, #0]
 8016de8:	68d3      	ldr	r3, [r2, #12]
 8016dea:	3c01      	subs	r4, #1
 8016dec:	f003 0301 	and.w	r3, r3, #1
 8016df0:	d013      	beq.n	8016e1a <fwdgt_config+0x3e>
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d1f8      	bne.n	8016de8 <fwdgt_config+0xc>
 8016df6:	6051      	str	r1, [r2, #4]
 8016df8:	490c      	ldr	r1, [pc, #48]	; (8016e2c <fwdgt_config+0x50>)
 8016dfa:	4a0b      	ldr	r2, [pc, #44]	; (8016e28 <fwdgt_config+0x4c>)
 8016dfc:	68d3      	ldr	r3, [r2, #12]
 8016dfe:	3901      	subs	r1, #1
 8016e00:	f003 0302 	and.w	r3, r3, #2
 8016e04:	d00d      	beq.n	8016e22 <fwdgt_config+0x46>
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d1f8      	bne.n	8016dfc <fwdgt_config+0x20>
 8016e0a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8016e0e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8016e12:	6090      	str	r0, [r2, #8]
 8016e14:	2001      	movs	r0, #1
 8016e16:	6013      	str	r3, [r2, #0]
 8016e18:	e002      	b.n	8016e20 <fwdgt_config+0x44>
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d0eb      	beq.n	8016df6 <fwdgt_config+0x1a>
 8016e1e:	2000      	movs	r0, #0
 8016e20:	bd10      	pop	{r4, pc}
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d1fb      	bne.n	8016e1e <fwdgt_config+0x42>
 8016e26:	e7f0      	b.n	8016e0a <fwdgt_config+0x2e>
 8016e28:	40003000 	andmi	r3, r0, r0
 8016e2c:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08016e30 <gpio_init>:
 8016e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e34:	f04f 0c0f 	mov.w	ip, #15
 8016e38:	06cf      	lsls	r7, r1, #27
 8016e3a:	f04f 0400 	mov.w	r4, #0
 8016e3e:	f04f 0701 	mov.w	r7, #1
 8016e42:	f001 050f 	and.w	r5, r1, #15
 8016e46:	bf48      	it	mi
 8016e48:	4315      	orrmi	r5, r2
 8016e4a:	fa23 f204 	lsr.w	r2, r3, r4
 8016e4e:	07d6      	lsls	r6, r2, #31
 8016e50:	d510      	bpl.n	8016e74 <gpio_init+0x44>
 8016e52:	00a2      	lsls	r2, r4, #2
 8016e54:	6806      	ldr	r6, [r0, #0]
 8016e56:	fa0c fe02 	lsl.w	lr, ip, r2
 8016e5a:	ea26 060e 	bic.w	r6, r6, lr
 8016e5e:	fa05 f202 	lsl.w	r2, r5, r2
 8016e62:	2928      	cmp	r1, #40	; 0x28
 8016e64:	ea42 0206 	orr.w	r2, r2, r6
 8016e68:	d128      	bne.n	8016ebc <gpio_init+0x8c>
 8016e6a:	fa07 f604 	lsl.w	r6, r7, r4
 8016e6e:	401e      	ands	r6, r3
 8016e70:	6146      	str	r6, [r0, #20]
 8016e72:	6002      	str	r2, [r0, #0]
 8016e74:	3401      	adds	r4, #1
 8016e76:	2c08      	cmp	r4, #8
 8016e78:	d1e7      	bne.n	8016e4a <gpio_init+0x1a>
 8016e7a:	2600      	movs	r6, #0
 8016e7c:	f04f 0c0f 	mov.w	ip, #15
 8016e80:	2701      	movs	r7, #1
 8016e82:	f106 0208 	add.w	r2, r6, #8
 8016e86:	fa23 f402 	lsr.w	r4, r3, r2
 8016e8a:	07e4      	lsls	r4, r4, #31
 8016e8c:	d511      	bpl.n	8016eb2 <gpio_init+0x82>
 8016e8e:	00b4      	lsls	r4, r6, #2
 8016e90:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8016e94:	fa0c f804 	lsl.w	r8, ip, r4
 8016e98:	ea2e 0e08 	bic.w	lr, lr, r8
 8016e9c:	fa05 f404 	lsl.w	r4, r5, r4
 8016ea0:	2928      	cmp	r1, #40	; 0x28
 8016ea2:	ea44 040e 	orr.w	r4, r4, lr
 8016ea6:	d110      	bne.n	8016eca <gpio_init+0x9a>
 8016ea8:	fa07 f202 	lsl.w	r2, r7, r2
 8016eac:	401a      	ands	r2, r3
 8016eae:	6142      	str	r2, [r0, #20]
 8016eb0:	6044      	str	r4, [r0, #4]
 8016eb2:	3601      	adds	r6, #1
 8016eb4:	2e08      	cmp	r6, #8
 8016eb6:	d1e4      	bne.n	8016e82 <gpio_init+0x52>
 8016eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ebc:	2948      	cmp	r1, #72	; 0x48
 8016ebe:	bf02      	ittt	eq
 8016ec0:	fa07 f604 	lsleq.w	r6, r7, r4
 8016ec4:	401e      	andeq	r6, r3
 8016ec6:	6106      	streq	r6, [r0, #16]
 8016ec8:	e7d3      	b.n	8016e72 <gpio_init+0x42>
 8016eca:	2948      	cmp	r1, #72	; 0x48
 8016ecc:	bf02      	ittt	eq
 8016ece:	fa07 f202 	lsleq.w	r2, r7, r2
 8016ed2:	401a      	andeq	r2, r3
 8016ed4:	6102      	streq	r2, [r0, #16]
 8016ed6:	e7eb      	b.n	8016eb0 <gpio_init+0x80>

08016ed8 <gpio_pin_remap_config>:
 8016ed8:	2800      	cmp	r0, #0
 8016eda:	4a16      	ldr	r2, [pc, #88]	; (8016f34 <gpio_pin_remap_config+0x5c>)
 8016edc:	b530      	push	{r4, r5, lr}
 8016ede:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8016ee2:	bfb4      	ite	lt
 8016ee4:	69d3      	ldrlt	r3, [r2, #28]
 8016ee6:	6853      	ldrge	r3, [r2, #4]
 8016ee8:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8016eec:	b284      	uxth	r4, r0
 8016eee:	d110      	bne.n	8016f12 <gpio_pin_remap_config+0x3a>
 8016ef0:	6855      	ldr	r5, [r2, #4]
 8016ef2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8016ef6:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8016efa:	6055      	str	r5, [r2, #4]
 8016efc:	b119      	cbz	r1, 8016f06 <gpio_pin_remap_config+0x2e>
 8016efe:	0d42      	lsrs	r2, r0, #21
 8016f00:	0112      	lsls	r2, r2, #4
 8016f02:	4094      	lsls	r4, r2
 8016f04:	4323      	orrs	r3, r4
 8016f06:	4a0b      	ldr	r2, [pc, #44]	; (8016f34 <gpio_pin_remap_config+0x5c>)
 8016f08:	2800      	cmp	r0, #0
 8016f0a:	bfb4      	ite	lt
 8016f0c:	61d3      	strlt	r3, [r2, #28]
 8016f0e:	6053      	strge	r3, [r2, #4]
 8016f10:	bd30      	pop	{r4, r5, pc}
 8016f12:	02c2      	lsls	r2, r0, #11
 8016f14:	bf4d      	iteet	mi
 8016f16:	2203      	movmi	r2, #3
 8016f18:	0d42      	lsrpl	r2, r0, #21
 8016f1a:	0112      	lslpl	r2, r2, #4
 8016f1c:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8016f20:	bf4c      	ite	mi
 8016f22:	40aa      	lslmi	r2, r5
 8016f24:	fa04 f202 	lslpl.w	r2, r4, r2
 8016f28:	ea23 0302 	bic.w	r3, r3, r2
 8016f2c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8016f30:	e7e4      	b.n	8016efc <gpio_pin_remap_config+0x24>
 8016f32:	bf00      	nop
 8016f34:	40010000 	andmi	r0, r1, r0

08016f38 <gpio_ethernet_phy_select>:
 8016f38:	4b04      	ldr	r3, [pc, #16]	; (8016f4c <gpio_ethernet_phy_select+0x14>)
 8016f3a:	685a      	ldr	r2, [r3, #4]
 8016f3c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8016f40:	605a      	str	r2, [r3, #4]
 8016f42:	685a      	ldr	r2, [r3, #4]
 8016f44:	4302      	orrs	r2, r0
 8016f46:	605a      	str	r2, [r3, #4]
 8016f48:	4770      	bx	lr
 8016f4a:	bf00      	nop
 8016f4c:	40010000 	andmi	r0, r1, r0

08016f50 <pmu_backup_write_enable>:
 8016f50:	4a02      	ldr	r2, [pc, #8]	; (8016f5c <pmu_backup_write_enable+0xc>)
 8016f52:	6813      	ldr	r3, [r2, #0]
 8016f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016f58:	6013      	str	r3, [r2, #0]
 8016f5a:	4770      	bx	lr
 8016f5c:	40007000 	andmi	r7, r0, r0

08016f60 <rcu_periph_clock_enable>:
 8016f60:	2201      	movs	r2, #1
 8016f62:	0983      	lsrs	r3, r0, #6
 8016f64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016f68:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8016f6c:	6819      	ldr	r1, [r3, #0]
 8016f6e:	f000 001f 	and.w	r0, r0, #31
 8016f72:	4082      	lsls	r2, r0
 8016f74:	430a      	orrs	r2, r1
 8016f76:	601a      	str	r2, [r3, #0]
 8016f78:	4770      	bx	lr

08016f7a <rcu_periph_clock_disable>:
 8016f7a:	2101      	movs	r1, #1
 8016f7c:	0983      	lsrs	r3, r0, #6
 8016f7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016f82:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8016f86:	681a      	ldr	r2, [r3, #0]
 8016f88:	f000 001f 	and.w	r0, r0, #31
 8016f8c:	4081      	lsls	r1, r0
 8016f8e:	ea22 0201 	bic.w	r2, r2, r1
 8016f92:	601a      	str	r2, [r3, #0]
 8016f94:	4770      	bx	lr

08016f96 <rcu_periph_reset_enable>:
 8016f96:	f7ff bfe3 	b.w	8016f60 <rcu_periph_clock_enable>

08016f9a <rcu_periph_reset_disable>:
 8016f9a:	f7ff bfee 	b.w	8016f7a <rcu_periph_clock_disable>
	...

08016fa0 <rcu_ckout0_config>:
 8016fa0:	4a06      	ldr	r2, [pc, #24]	; (8016fbc <rcu_ckout0_config+0x1c>)
 8016fa2:	6853      	ldr	r3, [r2, #4]
 8016fa4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8016fa8:	4303      	orrs	r3, r0
 8016faa:	6053      	str	r3, [r2, #4]
 8016fac:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8016fb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8016fb4:	430b      	orrs	r3, r1
 8016fb6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8016fba:	4770      	bx	lr
 8016fbc:	40021000 	andmi	r1, r2, r0

08016fc0 <rcu_pll2_config>:
 8016fc0:	4b04      	ldr	r3, [pc, #16]	; (8016fd4 <rcu_pll2_config+0x14>)
 8016fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fc4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8016fc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8016fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fcc:	4302      	orrs	r2, r0
 8016fce:	62da      	str	r2, [r3, #44]	; 0x2c
 8016fd0:	4770      	bx	lr
 8016fd2:	bf00      	nop
 8016fd4:	40021000 	andmi	r1, r2, r0

08016fd8 <rcu_adc_clock_config>:
 8016fd8:	490c      	ldr	r1, [pc, #48]	; (801700c <rcu_adc_clock_config+0x34>)
 8016fda:	2805      	cmp	r0, #5
 8016fdc:	684b      	ldr	r3, [r1, #4]
 8016fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016fe2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8016fe6:	d006      	beq.n	8016ff6 <rcu_adc_clock_config+0x1e>
 8016fe8:	d803      	bhi.n	8016ff2 <rcu_adc_clock_config+0x1a>
 8016fea:	2804      	cmp	r0, #4
 8016fec:	d10a      	bne.n	8017004 <rcu_adc_clock_config+0x2c>
 8016fee:	604b      	str	r3, [r1, #4]
 8016ff0:	4770      	bx	lr
 8016ff2:	2807      	cmp	r0, #7
 8016ff4:	d1fb      	bne.n	8016fee <rcu_adc_clock_config+0x16>
 8016ff6:	4a06      	ldr	r2, [pc, #24]	; (8017010 <rcu_adc_clock_config+0x38>)
 8016ff8:	ea02 3280 	and.w	r2, r2, r0, lsl #14
 8016ffc:	4313      	orrs	r3, r2
 8016ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017002:	e7f4      	b.n	8016fee <rcu_adc_clock_config+0x16>
 8017004:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8017008:	e7f1      	b.n	8016fee <rcu_adc_clock_config+0x16>
 801700a:	bf00      	nop
 801700c:	40021000 	andmi	r1, r2, r0
 8017010:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

08017014 <rcu_flag_get>:
 8017014:	0983      	lsrs	r3, r0, #6
 8017016:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801701a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 801701e:	681a      	ldr	r2, [r3, #0]
 8017020:	2301      	movs	r3, #1
 8017022:	f000 001f 	and.w	r0, r0, #31
 8017026:	4083      	lsls	r3, r0
 8017028:	4213      	tst	r3, r2
 801702a:	bf14      	ite	ne
 801702c:	2001      	movne	r0, #1
 801702e:	2000      	moveq	r0, #0
 8017030:	4770      	bx	lr
	...

08017034 <rcu_osci_stab_wait>:
 8017034:	281c      	cmp	r0, #28
 8017036:	b508      	push	{r3, lr}
 8017038:	d056      	beq.n	80170e8 <rcu_osci_stab_wait+0xb4>
 801703a:	d812      	bhi.n	8017062 <rcu_osci_stab_wait+0x2e>
 801703c:	2818      	cmp	r0, #24
 801703e:	d04a      	beq.n	80170d6 <rcu_osci_stab_wait+0xa2>
 8017040:	d804      	bhi.n	801704c <rcu_osci_stab_wait+0x18>
 8017042:	b398      	cbz	r0, 80170ac <rcu_osci_stab_wait+0x78>
 8017044:	2810      	cmp	r0, #16
 8017046:	d022      	beq.n	801708e <rcu_osci_stab_wait+0x5a>
 8017048:	2000      	movs	r0, #0
 801704a:	bd08      	pop	{r3, pc}
 801704c:	281a      	cmp	r0, #26
 801704e:	d1fb      	bne.n	8017048 <rcu_osci_stab_wait+0x14>
 8017050:	492f      	ldr	r1, [pc, #188]	; (8017110 <rcu_osci_stab_wait+0xdc>)
 8017052:	201b      	movs	r0, #27
 8017054:	f7ff ffde 	bl	8017014 <rcu_flag_get>
 8017058:	b908      	cbnz	r0, 801705e <rcu_osci_stab_wait+0x2a>
 801705a:	3901      	subs	r1, #1
 801705c:	d1f9      	bne.n	8017052 <rcu_osci_stab_wait+0x1e>
 801705e:	201b      	movs	r0, #27
 8017060:	e01e      	b.n	80170a0 <rcu_osci_stab_wait+0x6c>
 8017062:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8017066:	d02b      	beq.n	80170c0 <rcu_osci_stab_wait+0x8c>
 8017068:	f242 431c 	movw	r3, #9244	; 0x241c
 801706c:	4298      	cmp	r0, r3
 801706e:	d044      	beq.n	80170fa <rcu_osci_stab_wait+0xc6>
 8017070:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8017074:	d1e8      	bne.n	8017048 <rcu_osci_stab_wait+0x14>
 8017076:	f06f 417c 	mvn.w	r1, #4227858432	; 0xfc000000
 801707a:	f640 0001 	movw	r0, #2049	; 0x801
 801707e:	f7ff ffc9 	bl	8017014 <rcu_flag_get>
 8017082:	b908      	cbnz	r0, 8017088 <rcu_osci_stab_wait+0x54>
 8017084:	3901      	subs	r1, #1
 8017086:	d1f8      	bne.n	801707a <rcu_osci_stab_wait+0x46>
 8017088:	f640 0001 	movw	r0, #2049	; 0x801
 801708c:	e008      	b.n	80170a0 <rcu_osci_stab_wait+0x6c>
 801708e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017092:	2011      	movs	r0, #17
 8017094:	f7ff ffbe 	bl	8017014 <rcu_flag_get>
 8017098:	b908      	cbnz	r0, 801709e <rcu_osci_stab_wait+0x6a>
 801709a:	3901      	subs	r1, #1
 801709c:	d1f9      	bne.n	8017092 <rcu_osci_stab_wait+0x5e>
 801709e:	2011      	movs	r0, #17
 80170a0:	f7ff ffb8 	bl	8017014 <rcu_flag_get>
 80170a4:	3800      	subs	r0, #0
 80170a6:	bf18      	it	ne
 80170a8:	2001      	movne	r0, #1
 80170aa:	e7ce      	b.n	801704a <rcu_osci_stab_wait+0x16>
 80170ac:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80170b0:	2001      	movs	r0, #1
 80170b2:	f7ff ffaf 	bl	8017014 <rcu_flag_get>
 80170b6:	b908      	cbnz	r0, 80170bc <rcu_osci_stab_wait+0x88>
 80170b8:	3901      	subs	r1, #1
 80170ba:	d1f9      	bne.n	80170b0 <rcu_osci_stab_wait+0x7c>
 80170bc:	2001      	movs	r0, #1
 80170be:	e7ef      	b.n	80170a0 <rcu_osci_stab_wait+0x6c>
 80170c0:	4913      	ldr	r1, [pc, #76]	; (8017110 <rcu_osci_stab_wait+0xdc>)
 80170c2:	f640 1001 	movw	r0, #2305	; 0x901
 80170c6:	f7ff ffa5 	bl	8017014 <rcu_flag_get>
 80170ca:	b908      	cbnz	r0, 80170d0 <rcu_osci_stab_wait+0x9c>
 80170cc:	3901      	subs	r1, #1
 80170ce:	d1f8      	bne.n	80170c2 <rcu_osci_stab_wait+0x8e>
 80170d0:	f640 1001 	movw	r0, #2305	; 0x901
 80170d4:	e7e4      	b.n	80170a0 <rcu_osci_stab_wait+0x6c>
 80170d6:	490e      	ldr	r1, [pc, #56]	; (8017110 <rcu_osci_stab_wait+0xdc>)
 80170d8:	2019      	movs	r0, #25
 80170da:	f7ff ff9b 	bl	8017014 <rcu_flag_get>
 80170de:	b908      	cbnz	r0, 80170e4 <rcu_osci_stab_wait+0xb0>
 80170e0:	3901      	subs	r1, #1
 80170e2:	d1f9      	bne.n	80170d8 <rcu_osci_stab_wait+0xa4>
 80170e4:	2019      	movs	r0, #25
 80170e6:	e7db      	b.n	80170a0 <rcu_osci_stab_wait+0x6c>
 80170e8:	4909      	ldr	r1, [pc, #36]	; (8017110 <rcu_osci_stab_wait+0xdc>)
 80170ea:	201d      	movs	r0, #29
 80170ec:	f7ff ff92 	bl	8017014 <rcu_flag_get>
 80170f0:	b908      	cbnz	r0, 80170f6 <rcu_osci_stab_wait+0xc2>
 80170f2:	3901      	subs	r1, #1
 80170f4:	d1f9      	bne.n	80170ea <rcu_osci_stab_wait+0xb6>
 80170f6:	201d      	movs	r0, #29
 80170f8:	e7d2      	b.n	80170a0 <rcu_osci_stab_wait+0x6c>
 80170fa:	4905      	ldr	r1, [pc, #20]	; (8017110 <rcu_osci_stab_wait+0xdc>)
 80170fc:	f242 401d 	movw	r0, #9245	; 0x241d
 8017100:	f7ff ff88 	bl	8017014 <rcu_flag_get>
 8017104:	b908      	cbnz	r0, 801710a <rcu_osci_stab_wait+0xd6>
 8017106:	3901      	subs	r1, #1
 8017108:	d1f8      	bne.n	80170fc <rcu_osci_stab_wait+0xc8>
 801710a:	f242 401d 	movw	r0, #9245	; 0x241d
 801710e:	e7c7      	b.n	80170a0 <rcu_osci_stab_wait+0x6c>
 8017110:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08017114 <rcu_osci_on>:
 8017114:	f7ff bf24 	b.w	8016f60 <rcu_periph_clock_enable>

08017118 <rcu_clock_freq_get>:
 8017118:	4b3e      	ldr	r3, [pc, #248]	; (8017214 <rcu_clock_freq_get+0xfc>)
 801711a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801711c:	4604      	mov	r4, r0
 801711e:	461f      	mov	r7, r3
 8017120:	b089      	sub	sp, #36	; 0x24
 8017122:	ad04      	add	r5, sp, #16
 8017124:	f103 0610 	add.w	r6, r3, #16
 8017128:	462a      	mov	r2, r5
 801712a:	6818      	ldr	r0, [r3, #0]
 801712c:	6859      	ldr	r1, [r3, #4]
 801712e:	3308      	adds	r3, #8
 8017130:	c203      	stmia	r2!, {r0, r1}
 8017132:	42b3      	cmp	r3, r6
 8017134:	4615      	mov	r5, r2
 8017136:	d1f7      	bne.n	8017128 <rcu_clock_freq_get+0x10>
 8017138:	466b      	mov	r3, sp
 801713a:	6938      	ldr	r0, [r7, #16]
 801713c:	6871      	ldr	r1, [r6, #4]
 801713e:	4a36      	ldr	r2, [pc, #216]	; (8017218 <rcu_clock_freq_get+0x100>)
 8017140:	c303      	stmia	r3!, {r0, r1}
 8017142:	c303      	stmia	r3!, {r0, r1}
 8017144:	6853      	ldr	r3, [r2, #4]
 8017146:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801714a:	2b01      	cmp	r3, #1
 801714c:	d053      	beq.n	80171f6 <rcu_clock_freq_get+0xde>
 801714e:	2b02      	cmp	r3, #2
 8017150:	d153      	bne.n	80171fa <rcu_clock_freq_get+0xe2>
 8017152:	6853      	ldr	r3, [r2, #4]
 8017154:	03dd      	lsls	r5, r3, #15
 8017156:	d523      	bpl.n	80171a0 <rcu_clock_freq_get+0x88>
 8017158:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 801715a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 801715e:	4b2f      	ldr	r3, [pc, #188]	; (801721c <rcu_clock_freq_get+0x104>)
 8017160:	d00e      	beq.n	8017180 <rcu_clock_freq_get+0x68>
 8017162:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8017164:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8017166:	f3c1 1103 	ubfx	r1, r1, #4, #4
 801716a:	f3c0 2003 	ubfx	r0, r0, #8, #4
 801716e:	3101      	adds	r1, #1
 8017170:	280f      	cmp	r0, #15
 8017172:	f100 0502 	add.w	r5, r0, #2
 8017176:	fbb3 f3f1 	udiv	r3, r3, r1
 801717a:	bf08      	it	eq
 801717c:	2514      	moveq	r5, #20
 801717e:	436b      	muls	r3, r5
 8017180:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8017182:	f001 010f 	and.w	r1, r1, #15
 8017186:	3101      	adds	r1, #1
 8017188:	fbb3 f3f1 	udiv	r3, r3, r1
 801718c:	6851      	ldr	r1, [r2, #4]
 801718e:	6850      	ldr	r0, [r2, #4]
 8017190:	f3c1 4183 	ubfx	r1, r1, #18, #4
 8017194:	0080      	lsls	r0, r0, #2
 8017196:	d505      	bpl.n	80171a4 <rcu_clock_freq_get+0x8c>
 8017198:	f041 0110 	orr.w	r1, r1, #16
 801719c:	3101      	adds	r1, #1
 801719e:	e027      	b.n	80171f0 <rcu_clock_freq_get+0xd8>
 80171a0:	4b1f      	ldr	r3, [pc, #124]	; (8017220 <rcu_clock_freq_get+0x108>)
 80171a2:	e7f3      	b.n	801718c <rcu_clock_freq_get+0x74>
 80171a4:	290d      	cmp	r1, #13
 80171a6:	d120      	bne.n	80171ea <rcu_clock_freq_get+0xd2>
 80171a8:	2006      	movs	r0, #6
 80171aa:	0859      	lsrs	r1, r3, #1
 80171ac:	fb00 1003 	mla	r0, r0, r3, r1
 80171b0:	6853      	ldr	r3, [r2, #4]
 80171b2:	6851      	ldr	r1, [r2, #4]
 80171b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80171b8:	6852      	ldr	r2, [r2, #4]
 80171ba:	3320      	adds	r3, #32
 80171bc:	446b      	add	r3, sp
 80171be:	f3c1 2102 	ubfx	r1, r1, #8, #3
 80171c2:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 80171c6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80171ca:	3120      	adds	r1, #32
 80171cc:	3220      	adds	r2, #32
 80171ce:	4469      	add	r1, sp
 80171d0:	446a      	add	r2, sp
 80171d2:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 80171d6:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80171da:	fa20 f303 	lsr.w	r3, r0, r3
 80171de:	2c03      	cmp	r4, #3
 80171e0:	d816      	bhi.n	8017210 <rcu_clock_freq_get+0xf8>
 80171e2:	e8df f004 	tbb	[pc, r4]
 80171e6:	120f0c0d 	andne	r0, pc, #3328	; 0xd00
 80171ea:	290f      	cmp	r1, #15
 80171ec:	d0d6      	beq.n	801719c <rcu_clock_freq_get+0x84>
 80171ee:	3102      	adds	r1, #2
 80171f0:	fb03 f001 	mul.w	r0, r3, r1
 80171f4:	e7dc      	b.n	80171b0 <rcu_clock_freq_get+0x98>
 80171f6:	4809      	ldr	r0, [pc, #36]	; (801721c <rcu_clock_freq_get+0x104>)
 80171f8:	e7da      	b.n	80171b0 <rcu_clock_freq_get+0x98>
 80171fa:	480a      	ldr	r0, [pc, #40]	; (8017224 <rcu_clock_freq_get+0x10c>)
 80171fc:	e7d8      	b.n	80171b0 <rcu_clock_freq_get+0x98>
 80171fe:	4618      	mov	r0, r3
 8017200:	b009      	add	sp, #36	; 0x24
 8017202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017204:	fa23 f001 	lsr.w	r0, r3, r1
 8017208:	e7fa      	b.n	8017200 <rcu_clock_freq_get+0xe8>
 801720a:	fa23 f002 	lsr.w	r0, r3, r2
 801720e:	e7f7      	b.n	8017200 <rcu_clock_freq_get+0xe8>
 8017210:	2000      	movs	r0, #0
 8017212:	e7f5      	b.n	8017200 <rcu_clock_freq_get+0xe8>
 8017214:	08018bd9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, r9, fp, pc}
 8017218:	40021000 	andmi	r1, r2, r0
 801721c:	017d7840 	cmneq	sp, r0, asr #16
 8017220:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8017224:	007a1200 	rsbseq	r1, sl, r0, lsl #4

08017228 <timer_deinit>:
 8017228:	b508      	push	{r3, lr}
 801722a:	4b4e      	ldr	r3, [pc, #312]	; (8017364 <timer_deinit+0x13c>)
 801722c:	4298      	cmp	r0, r3
 801722e:	f000 8092 	beq.w	8017356 <timer_deinit+0x12e>
 8017232:	d822      	bhi.n	801727a <timer_deinit+0x52>
 8017234:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8017238:	4298      	cmp	r0, r3
 801723a:	d062      	beq.n	8017302 <timer_deinit+0xda>
 801723c:	d80b      	bhi.n	8017256 <timer_deinit+0x2e>
 801723e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8017242:	4298      	cmp	r0, r3
 8017244:	d04f      	beq.n	80172e6 <timer_deinit+0xbe>
 8017246:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801724a:	4298      	cmp	r0, r3
 801724c:	d052      	beq.n	80172f4 <timer_deinit+0xcc>
 801724e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8017252:	d041      	beq.n	80172d8 <timer_deinit+0xb0>
 8017254:	bd08      	pop	{r3, pc}
 8017256:	4b44      	ldr	r3, [pc, #272]	; (8017368 <timer_deinit+0x140>)
 8017258:	4298      	cmp	r0, r3
 801725a:	d059      	beq.n	8017310 <timer_deinit+0xe8>
 801725c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8017260:	4298      	cmp	r0, r3
 8017262:	d071      	beq.n	8017348 <timer_deinit+0x120>
 8017264:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8017268:	4298      	cmp	r0, r3
 801726a:	d1f3      	bne.n	8017254 <timer_deinit+0x2c>
 801726c:	f240 4004 	movw	r0, #1028	; 0x404
 8017270:	f7ff fe91 	bl	8016f96 <rcu_periph_reset_enable>
 8017274:	f240 4004 	movw	r0, #1028	; 0x404
 8017278:	e02a      	b.n	80172d0 <timer_deinit+0xa8>
 801727a:	4b3c      	ldr	r3, [pc, #240]	; (801736c <timer_deinit+0x144>)
 801727c:	4298      	cmp	r0, r3
 801727e:	d055      	beq.n	801732c <timer_deinit+0x104>
 8017280:	d812      	bhi.n	80172a8 <timer_deinit+0x80>
 8017282:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8017286:	4298      	cmp	r0, r3
 8017288:	d01c      	beq.n	80172c4 <timer_deinit+0x9c>
 801728a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801728e:	4298      	cmp	r0, r3
 8017290:	d045      	beq.n	801731e <timer_deinit+0xf6>
 8017292:	f5a3 338a 	sub.w	r3, r3, #70656	; 0x11400
 8017296:	4298      	cmp	r0, r3
 8017298:	d1dc      	bne.n	8017254 <timer_deinit+0x2c>
 801729a:	f44f 6081 	mov.w	r0, #1032	; 0x408
 801729e:	f7ff fe7a 	bl	8016f96 <rcu_periph_reset_enable>
 80172a2:	f44f 6081 	mov.w	r0, #1032	; 0x408
 80172a6:	e013      	b.n	80172d0 <timer_deinit+0xa8>
 80172a8:	4b31      	ldr	r3, [pc, #196]	; (8017370 <timer_deinit+0x148>)
 80172aa:	4298      	cmp	r0, r3
 80172ac:	d045      	beq.n	801733a <timer_deinit+0x112>
 80172ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80172b2:	4298      	cmp	r0, r3
 80172b4:	d1ce      	bne.n	8017254 <timer_deinit+0x2c>
 80172b6:	f240 3015 	movw	r0, #789	; 0x315
 80172ba:	f7ff fe6c 	bl	8016f96 <rcu_periph_reset_enable>
 80172be:	f240 3015 	movw	r0, #789	; 0x315
 80172c2:	e005      	b.n	80172d0 <timer_deinit+0xa8>
 80172c4:	f240 300b 	movw	r0, #779	; 0x30b
 80172c8:	f7ff fe65 	bl	8016f96 <rcu_periph_reset_enable>
 80172cc:	f240 300b 	movw	r0, #779	; 0x30b
 80172d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80172d4:	f7ff be61 	b.w	8016f9a <rcu_periph_reset_disable>
 80172d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80172dc:	f7ff fe5b 	bl	8016f96 <rcu_periph_reset_enable>
 80172e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80172e4:	e7f4      	b.n	80172d0 <timer_deinit+0xa8>
 80172e6:	f240 4001 	movw	r0, #1025	; 0x401
 80172ea:	f7ff fe54 	bl	8016f96 <rcu_periph_reset_enable>
 80172ee:	f240 4001 	movw	r0, #1025	; 0x401
 80172f2:	e7ed      	b.n	80172d0 <timer_deinit+0xa8>
 80172f4:	f240 4002 	movw	r0, #1026	; 0x402
 80172f8:	f7ff fe4d 	bl	8016f96 <rcu_periph_reset_enable>
 80172fc:	f240 4002 	movw	r0, #1026	; 0x402
 8017300:	e7e6      	b.n	80172d0 <timer_deinit+0xa8>
 8017302:	f240 4003 	movw	r0, #1027	; 0x403
 8017306:	f7ff fe46 	bl	8016f96 <rcu_periph_reset_enable>
 801730a:	f240 4003 	movw	r0, #1027	; 0x403
 801730e:	e7df      	b.n	80172d0 <timer_deinit+0xa8>
 8017310:	f240 4005 	movw	r0, #1029	; 0x405
 8017314:	f7ff fe3f 	bl	8016f96 <rcu_periph_reset_enable>
 8017318:	f240 4005 	movw	r0, #1029	; 0x405
 801731c:	e7d8      	b.n	80172d0 <timer_deinit+0xa8>
 801731e:	f240 300d 	movw	r0, #781	; 0x30d
 8017322:	f7ff fe38 	bl	8016f96 <rcu_periph_reset_enable>
 8017326:	f240 300d 	movw	r0, #781	; 0x30d
 801732a:	e7d1      	b.n	80172d0 <timer_deinit+0xa8>
 801732c:	f240 3013 	movw	r0, #787	; 0x313
 8017330:	f7ff fe31 	bl	8016f96 <rcu_periph_reset_enable>
 8017334:	f240 3013 	movw	r0, #787	; 0x313
 8017338:	e7ca      	b.n	80172d0 <timer_deinit+0xa8>
 801733a:	f44f 7045 	mov.w	r0, #788	; 0x314
 801733e:	f7ff fe2a 	bl	8016f96 <rcu_periph_reset_enable>
 8017342:	f44f 7045 	mov.w	r0, #788	; 0x314
 8017346:	e7c3      	b.n	80172d0 <timer_deinit+0xa8>
 8017348:	f240 4006 	movw	r0, #1030	; 0x406
 801734c:	f7ff fe23 	bl	8016f96 <rcu_periph_reset_enable>
 8017350:	f240 4006 	movw	r0, #1030	; 0x406
 8017354:	e7bc      	b.n	80172d0 <timer_deinit+0xa8>
 8017356:	f240 4007 	movw	r0, #1031	; 0x407
 801735a:	f7ff fe1c 	bl	8016f96 <rcu_periph_reset_enable>
 801735e:	f240 4007 	movw	r0, #1031	; 0x407
 8017362:	e7b5      	b.n	80172d0 <timer_deinit+0xa8>
 8017364:	40001c00 	andmi	r1, r0, r0, lsl #24
 8017368:	40001400 	andmi	r1, r0, r0, lsl #8
 801736c:	40014c00 	andmi	r4, r1, r0, lsl #24
 8017370:	40015000 	andmi	r5, r1, r0

08017374 <timer_init>:
 8017374:	880b      	ldrh	r3, [r1, #0]
 8017376:	6283      	str	r3, [r0, #40]	; 0x28
 8017378:	4b26      	ldr	r3, [pc, #152]	; (8017414 <timer_init+0xa0>)
 801737a:	4298      	cmp	r0, r3
 801737c:	d018      	beq.n	80173b0 <timer_init+0x3c>
 801737e:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 8017382:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8017386:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 801738a:	d011      	beq.n	80173b0 <timer_init+0x3c>
 801738c:	4a22      	ldr	r2, [pc, #136]	; (8017418 <timer_init+0xa4>)
 801738e:	4290      	cmp	r0, r2
 8017390:	d00e      	beq.n	80173b0 <timer_init+0x3c>
 8017392:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8017396:	4290      	cmp	r0, r2
 8017398:	d00a      	beq.n	80173b0 <timer_init+0x3c>
 801739a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801739e:	4293      	cmp	r3, r2
 80173a0:	d006      	beq.n	80173b0 <timer_init+0x3c>
 80173a2:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 80173a6:	4293      	cmp	r3, r2
 80173a8:	d002      	beq.n	80173b0 <timer_init+0x3c>
 80173aa:	4b1c      	ldr	r3, [pc, #112]	; (801741c <timer_init+0xa8>)
 80173ac:	4298      	cmp	r0, r3
 80173ae:	d10f      	bne.n	80173d0 <timer_init+0x5c>
 80173b0:	6803      	ldr	r3, [r0, #0]
 80173b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80173b6:	6003      	str	r3, [r0, #0]
 80173b8:	884b      	ldrh	r3, [r1, #2]
 80173ba:	6802      	ldr	r2, [r0, #0]
 80173bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80173c0:	4313      	orrs	r3, r2
 80173c2:	6003      	str	r3, [r0, #0]
 80173c4:	888b      	ldrh	r3, [r1, #4]
 80173c6:	6802      	ldr	r2, [r0, #0]
 80173c8:	f003 0310 	and.w	r3, r3, #16
 80173cc:	4313      	orrs	r3, r2
 80173ce:	6003      	str	r3, [r0, #0]
 80173d0:	688b      	ldr	r3, [r1, #8]
 80173d2:	62c3      	str	r3, [r0, #44]	; 0x2c
 80173d4:	4b12      	ldr	r3, [pc, #72]	; (8017420 <timer_init+0xac>)
 80173d6:	4298      	cmp	r0, r3
 80173d8:	d003      	beq.n	80173e2 <timer_init+0x6e>
 80173da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80173de:	4298      	cmp	r0, r3
 80173e0:	d104      	bne.n	80173ec <timer_init+0x78>
 80173e2:	6943      	ldr	r3, [r0, #20]
 80173e4:	f043 0301 	orr.w	r3, r3, #1
 80173e8:	6143      	str	r3, [r0, #20]
 80173ea:	4770      	bx	lr
 80173ec:	6803      	ldr	r3, [r0, #0]
 80173ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80173f2:	6003      	str	r3, [r0, #0]
 80173f4:	898b      	ldrh	r3, [r1, #12]
 80173f6:	6802      	ldr	r2, [r0, #0]
 80173f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80173fc:	4313      	orrs	r3, r2
 80173fe:	6003      	str	r3, [r0, #0]
 8017400:	4b04      	ldr	r3, [pc, #16]	; (8017414 <timer_init+0xa0>)
 8017402:	4298      	cmp	r0, r3
 8017404:	d002      	beq.n	801740c <timer_init+0x98>
 8017406:	4b04      	ldr	r3, [pc, #16]	; (8017418 <timer_init+0xa4>)
 8017408:	4298      	cmp	r0, r3
 801740a:	d1ea      	bne.n	80173e2 <timer_init+0x6e>
 801740c:	7b8b      	ldrb	r3, [r1, #14]
 801740e:	6303      	str	r3, [r0, #48]	; 0x30
 8017410:	e7e7      	b.n	80173e2 <timer_init+0x6e>
 8017412:	bf00      	nop
 8017414:	40012c00 	andmi	r2, r1, r0, lsl #24
 8017418:	40013400 	andmi	r3, r1, r0, lsl #8
 801741c:	40002000 	andmi	r2, r0, r0
 8017420:	40001000 	andmi	r1, r0, r0

08017424 <timer_enable>:
 8017424:	6803      	ldr	r3, [r0, #0]
 8017426:	f043 0301 	orr.w	r3, r3, #1
 801742a:	6003      	str	r3, [r0, #0]
 801742c:	4770      	bx	lr

0801742e <timer_dma_enable>:
 801742e:	68c3      	ldr	r3, [r0, #12]
 8017430:	4319      	orrs	r1, r3
 8017432:	60c1      	str	r1, [r0, #12]
 8017434:	4770      	bx	lr
	...

08017438 <timer_channel_output_config>:
 8017438:	2903      	cmp	r1, #3
 801743a:	d840      	bhi.n	80174be <timer_channel_output_config+0x86>
 801743c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8017440:	00400004 	subeq	r0, r0, r4
 8017444:	00c20081 	sbceq	r0, r2, r1, lsl #1
 8017448:	6a03      	ldr	r3, [r0, #32]
 801744a:	f023 0301 	bic.w	r3, r3, #1
 801744e:	6203      	str	r3, [r0, #32]
 8017450:	6983      	ldr	r3, [r0, #24]
 8017452:	f023 0303 	bic.w	r3, r3, #3
 8017456:	6183      	str	r3, [r0, #24]
 8017458:	6a01      	ldr	r1, [r0, #32]
 801745a:	8813      	ldrh	r3, [r2, #0]
 801745c:	430b      	orrs	r3, r1
 801745e:	6203      	str	r3, [r0, #32]
 8017460:	6a03      	ldr	r3, [r0, #32]
 8017462:	f023 0302 	bic.w	r3, r3, #2
 8017466:	6203      	str	r3, [r0, #32]
 8017468:	6a01      	ldr	r1, [r0, #32]
 801746a:	8893      	ldrh	r3, [r2, #4]
 801746c:	430b      	orrs	r3, r1
 801746e:	6203      	str	r3, [r0, #32]
 8017470:	4b68      	ldr	r3, [pc, #416]	; (8017614 <timer_channel_output_config+0x1dc>)
 8017472:	4298      	cmp	r0, r3
 8017474:	d003      	beq.n	801747e <timer_channel_output_config+0x46>
 8017476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801747a:	4298      	cmp	r0, r3
 801747c:	d11f      	bne.n	80174be <timer_channel_output_config+0x86>
 801747e:	6a03      	ldr	r3, [r0, #32]
 8017480:	f023 0304 	bic.w	r3, r3, #4
 8017484:	6203      	str	r3, [r0, #32]
 8017486:	6a01      	ldr	r1, [r0, #32]
 8017488:	8853      	ldrh	r3, [r2, #2]
 801748a:	430b      	orrs	r3, r1
 801748c:	6203      	str	r3, [r0, #32]
 801748e:	6a03      	ldr	r3, [r0, #32]
 8017490:	f023 0308 	bic.w	r3, r3, #8
 8017494:	6203      	str	r3, [r0, #32]
 8017496:	6a01      	ldr	r1, [r0, #32]
 8017498:	88d3      	ldrh	r3, [r2, #6]
 801749a:	430b      	orrs	r3, r1
 801749c:	6203      	str	r3, [r0, #32]
 801749e:	6843      	ldr	r3, [r0, #4]
 80174a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80174a4:	6043      	str	r3, [r0, #4]
 80174a6:	6841      	ldr	r1, [r0, #4]
 80174a8:	8913      	ldrh	r3, [r2, #8]
 80174aa:	430b      	orrs	r3, r1
 80174ac:	6043      	str	r3, [r0, #4]
 80174ae:	6843      	ldr	r3, [r0, #4]
 80174b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80174b4:	6043      	str	r3, [r0, #4]
 80174b6:	6841      	ldr	r1, [r0, #4]
 80174b8:	8953      	ldrh	r3, [r2, #10]
 80174ba:	430b      	orrs	r3, r1
 80174bc:	6043      	str	r3, [r0, #4]
 80174be:	4770      	bx	lr
 80174c0:	6a03      	ldr	r3, [r0, #32]
 80174c2:	8811      	ldrh	r1, [r2, #0]
 80174c4:	f023 0310 	bic.w	r3, r3, #16
 80174c8:	6203      	str	r3, [r0, #32]
 80174ca:	6983      	ldr	r3, [r0, #24]
 80174cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80174d0:	6183      	str	r3, [r0, #24]
 80174d2:	6a03      	ldr	r3, [r0, #32]
 80174d4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80174d8:	6203      	str	r3, [r0, #32]
 80174da:	6a03      	ldr	r3, [r0, #32]
 80174dc:	8891      	ldrh	r1, [r2, #4]
 80174de:	f023 0320 	bic.w	r3, r3, #32
 80174e2:	6203      	str	r3, [r0, #32]
 80174e4:	6a03      	ldr	r3, [r0, #32]
 80174e6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80174ea:	6203      	str	r3, [r0, #32]
 80174ec:	4b49      	ldr	r3, [pc, #292]	; (8017614 <timer_channel_output_config+0x1dc>)
 80174ee:	4298      	cmp	r0, r3
 80174f0:	d003      	beq.n	80174fa <timer_channel_output_config+0xc2>
 80174f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80174f6:	4298      	cmp	r0, r3
 80174f8:	d1e1      	bne.n	80174be <timer_channel_output_config+0x86>
 80174fa:	6a03      	ldr	r3, [r0, #32]
 80174fc:	8851      	ldrh	r1, [r2, #2]
 80174fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017502:	6203      	str	r3, [r0, #32]
 8017504:	6a03      	ldr	r3, [r0, #32]
 8017506:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 801750a:	6203      	str	r3, [r0, #32]
 801750c:	6a03      	ldr	r3, [r0, #32]
 801750e:	88d1      	ldrh	r1, [r2, #6]
 8017510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017514:	6203      	str	r3, [r0, #32]
 8017516:	6a03      	ldr	r3, [r0, #32]
 8017518:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 801751c:	6203      	str	r3, [r0, #32]
 801751e:	6843      	ldr	r3, [r0, #4]
 8017520:	8911      	ldrh	r1, [r2, #8]
 8017522:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017526:	6043      	str	r3, [r0, #4]
 8017528:	6843      	ldr	r3, [r0, #4]
 801752a:	8952      	ldrh	r2, [r2, #10]
 801752c:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8017530:	6043      	str	r3, [r0, #4]
 8017532:	6843      	ldr	r3, [r0, #4]
 8017534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017538:	6043      	str	r3, [r0, #4]
 801753a:	6843      	ldr	r3, [r0, #4]
 801753c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8017540:	e7bc      	b.n	80174bc <timer_channel_output_config+0x84>
 8017542:	6a03      	ldr	r3, [r0, #32]
 8017544:	8811      	ldrh	r1, [r2, #0]
 8017546:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801754a:	6203      	str	r3, [r0, #32]
 801754c:	69c3      	ldr	r3, [r0, #28]
 801754e:	f023 0303 	bic.w	r3, r3, #3
 8017552:	61c3      	str	r3, [r0, #28]
 8017554:	6a03      	ldr	r3, [r0, #32]
 8017556:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801755a:	6203      	str	r3, [r0, #32]
 801755c:	6a03      	ldr	r3, [r0, #32]
 801755e:	8891      	ldrh	r1, [r2, #4]
 8017560:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8017564:	6203      	str	r3, [r0, #32]
 8017566:	6a03      	ldr	r3, [r0, #32]
 8017568:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801756c:	6203      	str	r3, [r0, #32]
 801756e:	4b29      	ldr	r3, [pc, #164]	; (8017614 <timer_channel_output_config+0x1dc>)
 8017570:	4298      	cmp	r0, r3
 8017572:	d003      	beq.n	801757c <timer_channel_output_config+0x144>
 8017574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017578:	4298      	cmp	r0, r3
 801757a:	d1a0      	bne.n	80174be <timer_channel_output_config+0x86>
 801757c:	6a03      	ldr	r3, [r0, #32]
 801757e:	8851      	ldrh	r1, [r2, #2]
 8017580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017584:	6203      	str	r3, [r0, #32]
 8017586:	6a03      	ldr	r3, [r0, #32]
 8017588:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801758c:	6203      	str	r3, [r0, #32]
 801758e:	6a03      	ldr	r3, [r0, #32]
 8017590:	88d1      	ldrh	r1, [r2, #6]
 8017592:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017596:	6203      	str	r3, [r0, #32]
 8017598:	6a03      	ldr	r3, [r0, #32]
 801759a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801759e:	6203      	str	r3, [r0, #32]
 80175a0:	6843      	ldr	r3, [r0, #4]
 80175a2:	8911      	ldrh	r1, [r2, #8]
 80175a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80175a8:	6043      	str	r3, [r0, #4]
 80175aa:	6843      	ldr	r3, [r0, #4]
 80175ac:	8952      	ldrh	r2, [r2, #10]
 80175ae:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80175b2:	6043      	str	r3, [r0, #4]
 80175b4:	6843      	ldr	r3, [r0, #4]
 80175b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80175ba:	6043      	str	r3, [r0, #4]
 80175bc:	6843      	ldr	r3, [r0, #4]
 80175be:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80175c2:	e77b      	b.n	80174bc <timer_channel_output_config+0x84>
 80175c4:	6a03      	ldr	r3, [r0, #32]
 80175c6:	8811      	ldrh	r1, [r2, #0]
 80175c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80175cc:	6203      	str	r3, [r0, #32]
 80175ce:	69c3      	ldr	r3, [r0, #28]
 80175d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80175d4:	61c3      	str	r3, [r0, #28]
 80175d6:	6a03      	ldr	r3, [r0, #32]
 80175d8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80175dc:	6203      	str	r3, [r0, #32]
 80175de:	6a03      	ldr	r3, [r0, #32]
 80175e0:	8891      	ldrh	r1, [r2, #4]
 80175e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80175e6:	6203      	str	r3, [r0, #32]
 80175e8:	6a03      	ldr	r3, [r0, #32]
 80175ea:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80175ee:	6203      	str	r3, [r0, #32]
 80175f0:	4b08      	ldr	r3, [pc, #32]	; (8017614 <timer_channel_output_config+0x1dc>)
 80175f2:	4298      	cmp	r0, r3
 80175f4:	d004      	beq.n	8017600 <timer_channel_output_config+0x1c8>
 80175f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80175fa:	4298      	cmp	r0, r3
 80175fc:	f47f af5f 	bne.w	80174be <timer_channel_output_config+0x86>
 8017600:	6843      	ldr	r3, [r0, #4]
 8017602:	8912      	ldrh	r2, [r2, #8]
 8017604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017608:	6043      	str	r3, [r0, #4]
 801760a:	6843      	ldr	r3, [r0, #4]
 801760c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8017610:	e754      	b.n	80174bc <timer_channel_output_config+0x84>
 8017612:	bf00      	nop
 8017614:	40012c00 	andmi	r2, r1, r0, lsl #24

08017618 <timer_channel_output_mode_config>:
 8017618:	2903      	cmp	r1, #3
 801761a:	d81a      	bhi.n	8017652 <timer_channel_output_mode_config+0x3a>
 801761c:	e8df f001 	tbb	[pc, r1]
 8017620:	1a120a02 	bne	8499e30 <__exidx_end+0x47de5c>
 8017624:	6983      	ldr	r3, [r0, #24]
 8017626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801762a:	6183      	str	r3, [r0, #24]
 801762c:	6983      	ldr	r3, [r0, #24]
 801762e:	4313      	orrs	r3, r2
 8017630:	6183      	str	r3, [r0, #24]
 8017632:	4770      	bx	lr
 8017634:	6983      	ldr	r3, [r0, #24]
 8017636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801763a:	6183      	str	r3, [r0, #24]
 801763c:	6983      	ldr	r3, [r0, #24]
 801763e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017642:	e7f5      	b.n	8017630 <timer_channel_output_mode_config+0x18>
 8017644:	69c3      	ldr	r3, [r0, #28]
 8017646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801764a:	61c3      	str	r3, [r0, #28]
 801764c:	69c3      	ldr	r3, [r0, #28]
 801764e:	4313      	orrs	r3, r2
 8017650:	61c3      	str	r3, [r0, #28]
 8017652:	4770      	bx	lr
 8017654:	69c3      	ldr	r3, [r0, #28]
 8017656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801765a:	61c3      	str	r3, [r0, #28]
 801765c:	69c3      	ldr	r3, [r0, #28]
 801765e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8017662:	e7f5      	b.n	8017650 <timer_channel_output_mode_config+0x38>

08017664 <timer_channel_output_pulse_value_config>:
 8017664:	2903      	cmp	r1, #3
 8017666:	d80a      	bhi.n	801767e <timer_channel_output_pulse_value_config+0x1a>
 8017668:	e8df f001 	tbb	[pc, r1]
 801766c:	08060402 	stmdaeq	r6, {r1, sl}
 8017670:	6342      	str	r2, [r0, #52]	; 0x34
 8017672:	4770      	bx	lr
 8017674:	6382      	str	r2, [r0, #56]	; 0x38
 8017676:	4770      	bx	lr
 8017678:	63c2      	str	r2, [r0, #60]	; 0x3c
 801767a:	4770      	bx	lr
 801767c:	6402      	str	r2, [r0, #64]	; 0x40
 801767e:	4770      	bx	lr

08017680 <timer_channel_output_shadow_config>:
 8017680:	2903      	cmp	r1, #3
 8017682:	d81a      	bhi.n	80176ba <timer_channel_output_shadow_config+0x3a>
 8017684:	e8df f001 	tbb	[pc, r1]
 8017688:	1a120a02 	bne	8499e98 <__exidx_end+0x47dec4>
 801768c:	6983      	ldr	r3, [r0, #24]
 801768e:	f023 0308 	bic.w	r3, r3, #8
 8017692:	6183      	str	r3, [r0, #24]
 8017694:	6983      	ldr	r3, [r0, #24]
 8017696:	4313      	orrs	r3, r2
 8017698:	6183      	str	r3, [r0, #24]
 801769a:	4770      	bx	lr
 801769c:	6983      	ldr	r3, [r0, #24]
 801769e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80176a2:	6183      	str	r3, [r0, #24]
 80176a4:	6983      	ldr	r3, [r0, #24]
 80176a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80176aa:	e7f5      	b.n	8017698 <timer_channel_output_shadow_config+0x18>
 80176ac:	69c3      	ldr	r3, [r0, #28]
 80176ae:	f023 0308 	bic.w	r3, r3, #8
 80176b2:	61c3      	str	r3, [r0, #28]
 80176b4:	69c3      	ldr	r3, [r0, #28]
 80176b6:	4313      	orrs	r3, r2
 80176b8:	61c3      	str	r3, [r0, #28]
 80176ba:	4770      	bx	lr
 80176bc:	69c3      	ldr	r3, [r0, #28]
 80176be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80176c2:	61c3      	str	r3, [r0, #28]
 80176c4:	69c3      	ldr	r3, [r0, #28]
 80176c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80176ca:	e7f5      	b.n	80176b8 <timer_channel_output_shadow_config+0x38>

080176cc <timer_input_trigger_source_select>:
 80176cc:	6883      	ldr	r3, [r0, #8]
 80176ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80176d2:	6083      	str	r3, [r0, #8]
 80176d4:	6883      	ldr	r3, [r0, #8]
 80176d6:	430b      	orrs	r3, r1
 80176d8:	6083      	str	r3, [r0, #8]
 80176da:	4770      	bx	lr

080176dc <timer_master_output_trigger_source_select>:
 80176dc:	6843      	ldr	r3, [r0, #4]
 80176de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80176e2:	6043      	str	r3, [r0, #4]
 80176e4:	6843      	ldr	r3, [r0, #4]
 80176e6:	430b      	orrs	r3, r1
 80176e8:	6043      	str	r3, [r0, #4]
 80176ea:	4770      	bx	lr

080176ec <timer_slave_mode_select>:
 80176ec:	6883      	ldr	r3, [r0, #8]
 80176ee:	f023 0307 	bic.w	r3, r3, #7
 80176f2:	6083      	str	r3, [r0, #8]
 80176f4:	6883      	ldr	r3, [r0, #8]
 80176f6:	430b      	orrs	r3, r1
 80176f8:	6083      	str	r3, [r0, #8]
 80176fa:	4770      	bx	lr

080176fc <timer_master_slave_mode_config>:
 80176fc:	2980      	cmp	r1, #128	; 0x80
 80176fe:	d104      	bne.n	801770a <timer_master_slave_mode_config+0xe>
 8017700:	6883      	ldr	r3, [r0, #8]
 8017702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017706:	6083      	str	r3, [r0, #8]
 8017708:	4770      	bx	lr
 801770a:	2900      	cmp	r1, #0
 801770c:	d1fc      	bne.n	8017708 <timer_master_slave_mode_config+0xc>
 801770e:	6883      	ldr	r3, [r0, #8]
 8017710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017714:	e7f7      	b.n	8017706 <timer_master_slave_mode_config+0xa>

08017716 <timer_interrupt_enable>:
 8017716:	68c3      	ldr	r3, [r0, #12]
 8017718:	430b      	orrs	r3, r1
 801771a:	60c3      	str	r3, [r0, #12]
 801771c:	4770      	bx	lr
	...

08017720 <usart_deinit>:
 8017720:	b508      	push	{r3, lr}
 8017722:	4b2d      	ldr	r3, [pc, #180]	; (80177d8 <usart_deinit+0xb8>)
 8017724:	4298      	cmp	r0, r3
 8017726:	d050      	beq.n	80177ca <usart_deinit+0xaa>
 8017728:	d817      	bhi.n	801775a <usart_deinit+0x3a>
 801772a:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 801772e:	4298      	cmp	r0, r3
 8017730:	d044      	beq.n	80177bc <usart_deinit+0x9c>
 8017732:	d808      	bhi.n	8017746 <usart_deinit+0x26>
 8017734:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8017738:	4298      	cmp	r0, r3
 801773a:	d02a      	beq.n	8017792 <usart_deinit+0x72>
 801773c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8017740:	4298      	cmp	r0, r3
 8017742:	d02d      	beq.n	80177a0 <usart_deinit+0x80>
 8017744:	bd08      	pop	{r3, pc}
 8017746:	4b25      	ldr	r3, [pc, #148]	; (80177dc <usart_deinit+0xbc>)
 8017748:	4298      	cmp	r0, r3
 801774a:	d1fb      	bne.n	8017744 <usart_deinit+0x24>
 801774c:	f240 4014 	movw	r0, #1044	; 0x414
 8017750:	f7ff fc21 	bl	8016f96 <rcu_periph_reset_enable>
 8017754:	f240 4014 	movw	r0, #1044	; 0x414
 8017758:	e017      	b.n	801778a <usart_deinit+0x6a>
 801775a:	4b21      	ldr	r3, [pc, #132]	; (80177e0 <usart_deinit+0xc0>)
 801775c:	4298      	cmp	r0, r3
 801775e:	d00e      	beq.n	801777e <usart_deinit+0x5e>
 8017760:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8017764:	4298      	cmp	r0, r3
 8017766:	d022      	beq.n	80177ae <usart_deinit+0x8e>
 8017768:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 801776c:	4298      	cmp	r0, r3
 801776e:	d1e9      	bne.n	8017744 <usart_deinit+0x24>
 8017770:	f641 601f 	movw	r0, #7711	; 0x1e1f
 8017774:	f7ff fc0f 	bl	8016f96 <rcu_periph_reset_enable>
 8017778:	f641 601f 	movw	r0, #7711	; 0x1e1f
 801777c:	e005      	b.n	801778a <usart_deinit+0x6a>
 801777e:	f240 300e 	movw	r0, #782	; 0x30e
 8017782:	f7ff fc08 	bl	8016f96 <rcu_periph_reset_enable>
 8017786:	f240 300e 	movw	r0, #782	; 0x30e
 801778a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801778e:	f7ff bc04 	b.w	8016f9a <rcu_periph_reset_disable>
 8017792:	f240 4011 	movw	r0, #1041	; 0x411
 8017796:	f7ff fbfe 	bl	8016f96 <rcu_periph_reset_enable>
 801779a:	f240 4011 	movw	r0, #1041	; 0x411
 801779e:	e7f4      	b.n	801778a <usart_deinit+0x6a>
 80177a0:	f240 4012 	movw	r0, #1042	; 0x412
 80177a4:	f7ff fbf7 	bl	8016f96 <rcu_periph_reset_enable>
 80177a8:	f240 4012 	movw	r0, #1042	; 0x412
 80177ac:	e7ed      	b.n	801778a <usart_deinit+0x6a>
 80177ae:	f641 5018 	movw	r0, #7448	; 0x1d18
 80177b2:	f7ff fbf0 	bl	8016f96 <rcu_periph_reset_enable>
 80177b6:	f641 5018 	movw	r0, #7448	; 0x1d18
 80177ba:	e7e6      	b.n	801778a <usart_deinit+0x6a>
 80177bc:	f240 4013 	movw	r0, #1043	; 0x413
 80177c0:	f7ff fbe9 	bl	8016f96 <rcu_periph_reset_enable>
 80177c4:	f240 4013 	movw	r0, #1043	; 0x413
 80177c8:	e7df      	b.n	801778a <usart_deinit+0x6a>
 80177ca:	f641 601e 	movw	r0, #7710	; 0x1e1e
 80177ce:	f7ff fbe2 	bl	8016f96 <rcu_periph_reset_enable>
 80177d2:	f641 601e 	movw	r0, #7710	; 0x1e1e
 80177d6:	e7d8      	b.n	801778a <usart_deinit+0x6a>
 80177d8:	40007800 	andmi	r7, r0, r0, lsl #16
 80177dc:	40005000 	andmi	r5, r0, r0
 80177e0:	40013800 	andmi	r3, r1, r0, lsl #16

080177e4 <usart_baudrate_set>:
 80177e4:	b538      	push	{r3, r4, r5, lr}
 80177e6:	4b16      	ldr	r3, [pc, #88]	; (8017840 <usart_baudrate_set+0x5c>)
 80177e8:	4604      	mov	r4, r0
 80177ea:	4298      	cmp	r0, r3
 80177ec:	460d      	mov	r5, r1
 80177ee:	d025      	beq.n	801783c <usart_baudrate_set+0x58>
 80177f0:	d816      	bhi.n	8017820 <usart_baudrate_set+0x3c>
 80177f2:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 80177f6:	4298      	cmp	r0, r3
 80177f8:	d020      	beq.n	801783c <usart_baudrate_set+0x58>
 80177fa:	d80f      	bhi.n	801781c <usart_baudrate_set+0x38>
 80177fc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8017800:	4298      	cmp	r0, r3
 8017802:	d01b      	beq.n	801783c <usart_baudrate_set+0x58>
 8017804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8017808:	429c      	cmp	r4, r3
 801780a:	d017      	beq.n	801783c <usart_baudrate_set+0x58>
 801780c:	2000      	movs	r0, #0
 801780e:	eb00 0155 	add.w	r1, r0, r5, lsr #1
 8017812:	fbb1 f1f5 	udiv	r1, r1, r5
 8017816:	b289      	uxth	r1, r1
 8017818:	60a1      	str	r1, [r4, #8]
 801781a:	bd38      	pop	{r3, r4, r5, pc}
 801781c:	4b09      	ldr	r3, [pc, #36]	; (8017844 <usart_baudrate_set+0x60>)
 801781e:	e7f3      	b.n	8017808 <usart_baudrate_set+0x24>
 8017820:	4b09      	ldr	r3, [pc, #36]	; (8017848 <usart_baudrate_set+0x64>)
 8017822:	4298      	cmp	r0, r3
 8017824:	d006      	beq.n	8017834 <usart_baudrate_set+0x50>
 8017826:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 801782a:	4298      	cmp	r0, r3
 801782c:	d002      	beq.n	8017834 <usart_baudrate_set+0x50>
 801782e:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8017832:	e7e9      	b.n	8017808 <usart_baudrate_set+0x24>
 8017834:	2003      	movs	r0, #3
 8017836:	f7ff fc6f 	bl	8017118 <rcu_clock_freq_get>
 801783a:	e7e8      	b.n	801780e <usart_baudrate_set+0x2a>
 801783c:	2002      	movs	r0, #2
 801783e:	e7fa      	b.n	8017836 <usart_baudrate_set+0x52>
 8017840:	40007800 	andmi	r7, r0, r0, lsl #16
 8017844:	40005000 	andmi	r5, r0, r0
 8017848:	40013800 	andmi	r3, r1, r0, lsl #16

0801784c <usart_parity_config>:
 801784c:	68c3      	ldr	r3, [r0, #12]
 801784e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8017852:	60c3      	str	r3, [r0, #12]
 8017854:	68c3      	ldr	r3, [r0, #12]
 8017856:	430b      	orrs	r3, r1
 8017858:	60c3      	str	r3, [r0, #12]
 801785a:	4770      	bx	lr

0801785c <usart_word_length_set>:
 801785c:	68c3      	ldr	r3, [r0, #12]
 801785e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017862:	60c3      	str	r3, [r0, #12]
 8017864:	68c3      	ldr	r3, [r0, #12]
 8017866:	430b      	orrs	r3, r1
 8017868:	60c3      	str	r3, [r0, #12]
 801786a:	4770      	bx	lr

0801786c <usart_stop_bit_set>:
 801786c:	6903      	ldr	r3, [r0, #16]
 801786e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8017872:	6103      	str	r3, [r0, #16]
 8017874:	6903      	ldr	r3, [r0, #16]
 8017876:	430b      	orrs	r3, r1
 8017878:	6103      	str	r3, [r0, #16]
 801787a:	4770      	bx	lr

0801787c <usart_transmit_config>:
 801787c:	68c3      	ldr	r3, [r0, #12]
 801787e:	f023 0308 	bic.w	r3, r3, #8
 8017882:	430b      	orrs	r3, r1
 8017884:	60c3      	str	r3, [r0, #12]
 8017886:	4770      	bx	lr

08017888 <usart_receive_config>:
 8017888:	68c3      	ldr	r3, [r0, #12]
 801788a:	f023 0304 	bic.w	r3, r3, #4
 801788e:	430b      	orrs	r3, r1
 8017890:	60c3      	str	r3, [r0, #12]
 8017892:	4770      	bx	lr

08017894 <usart_hardware_flow_rts_config>:
 8017894:	6943      	ldr	r3, [r0, #20]
 8017896:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801789a:	430b      	orrs	r3, r1
 801789c:	6143      	str	r3, [r0, #20]
 801789e:	4770      	bx	lr

080178a0 <usart_hardware_flow_cts_config>:
 80178a0:	6943      	ldr	r3, [r0, #20]
 80178a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80178a6:	430b      	orrs	r3, r1
 80178a8:	6143      	str	r3, [r0, #20]
 80178aa:	4770      	bx	lr

080178ac <usart_flag_get>:
 80178ac:	098b      	lsrs	r3, r1, #6
 80178ae:	581a      	ldr	r2, [r3, r0]
 80178b0:	2301      	movs	r3, #1
 80178b2:	f001 011f 	and.w	r1, r1, #31
 80178b6:	408b      	lsls	r3, r1
 80178b8:	4213      	tst	r3, r2
 80178ba:	bf14      	ite	ne
 80178bc:	2001      	movne	r0, #1
 80178be:	2000      	moveq	r0, #0
 80178c0:	4770      	bx	lr
	...

080178c4 <emac_eth_recv>:
 80178c4:	b538      	push	{r3, r4, r5, lr}
 80178c6:	4605      	mov	r5, r0
 80178c8:	f001 f870 	bl	80189ac <enet_rxframe_size_get>
 80178cc:	4604      	mov	r4, r0
 80178ce:	b138      	cbz	r0, 80178e0 <emac_eth_recv+0x1c>
 80178d0:	4b05      	ldr	r3, [pc, #20]	; (80178e8 <emac_eth_recv+0x24>)
 80178d2:	2105      	movs	r1, #5
 80178d4:	6818      	ldr	r0, [r3, #0]
 80178d6:	f001 f818 	bl	801890a <enet_desc_information_get>
 80178da:	6028      	str	r0, [r5, #0]
 80178dc:	4620      	mov	r0, r4
 80178de:	bd38      	pop	{r3, r4, r5, pc}
 80178e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80178e4:	e7fb      	b.n	80178de <emac_eth_recv+0x1a>
 80178e6:	bf00      	nop
 80178e8:	2001d9c4 	andcs	sp, r1, r4, asr #19

080178ec <emac_free_pkt>:
 80178ec:	2100      	movs	r1, #0
 80178ee:	4608      	mov	r0, r1
 80178f0:	f000 bd46 	b.w	8018380 <enet_frame_receive>

080178f4 <emac_eth_send>:
 80178f4:	f000 bd84 	b.w	8018400 <enet_frame_transmit>

080178f8 <gd32_adc_init()>:
 80178f8:	b510      	push	{r4, lr}
 80178fa:	f240 6009 	movw	r0, #1545	; 0x609
 80178fe:	4c21      	ldr	r4, [pc, #132]	; (8017984 <gd32_adc_init()+0x8c>)
 8017900:	f7ff fb2e 	bl	8016f60 <rcu_periph_clock_enable>
 8017904:	2005      	movs	r0, #5
 8017906:	f7ff fb67 	bl	8016fd8 <rcu_adc_clock_config>
 801790a:	4620      	mov	r0, r4
 801790c:	2201      	movs	r2, #1
 801790e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017912:	f000 fbf5 	bl	8018100 <adc_special_function_config>
 8017916:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 801791a:	4620      	mov	r0, r4
 801791c:	2102      	movs	r1, #2
 801791e:	f000 fc8e 	bl	801823e <adc_external_trigger_source_config>
 8017922:	2100      	movs	r1, #0
 8017924:	4620      	mov	r0, r4
 8017926:	f000 fc13 	bl	8018150 <adc_data_alignment_config>
 801792a:	2000      	movs	r0, #0
 801792c:	f000 fbd8 	bl	80180e0 <adc_mode_config>
 8017930:	2202      	movs	r2, #2
 8017932:	4620      	mov	r0, r4
 8017934:	4611      	mov	r1, r2
 8017936:	f000 fc37 	bl	80181a8 <adc_channel_length_config>
 801793a:	4620      	mov	r0, r4
 801793c:	2307      	movs	r3, #7
 801793e:	2210      	movs	r2, #16
 8017940:	2100      	movs	r1, #0
 8017942:	f000 fc4e 	bl	80181e2 <adc_inserted_channel_config>
 8017946:	2307      	movs	r3, #7
 8017948:	4620      	mov	r0, r4
 801794a:	2211      	movs	r2, #17
 801794c:	2101      	movs	r1, #1
 801794e:	f000 fc48 	bl	80181e2 <adc_inserted_channel_config>
 8017952:	2201      	movs	r2, #1
 8017954:	2102      	movs	r1, #2
 8017956:	4620      	mov	r0, r4
 8017958:	f000 fc82 	bl	8018260 <adc_external_trigger_config>
 801795c:	f000 fc1a 	bl	8018194 <adc_tempsensor_vrefint_enable>
 8017960:	4620      	mov	r0, r4
 8017962:	f000 fbfe 	bl	8018162 <adc_enable>
 8017966:	2100      	movs	r1, #0
 8017968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801796c:	f000 fae4 	bl	8017f38 <udelay(unsigned int, unsigned int)>
 8017970:	4620      	mov	r0, r4
 8017972:	f000 fbfe 	bl	8018172 <adc_calibration_enable>
 8017976:	4620      	mov	r0, r4
 8017978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801797c:	2102      	movs	r1, #2
 801797e:	f000 bc8a 	b.w	8018296 <adc_software_trigger_enable>
 8017982:	bf00      	nop
 8017984:	40012400 	andmi	r2, r1, r0, lsl #8

08017988 <_stop() [clone .isra.0]>:
 8017988:	b508      	push	{r3, lr}
 801798a:	4806      	ldr	r0, [pc, #24]	; (80179a4 <_stop() [clone .isra.0]+0x1c>)
 801798c:	f001 f8d2 	bl	8018b34 <i2c_stop_on_bus>
 8017990:	f640 73ff 	movw	r3, #4095	; 0xfff
 8017994:	4904      	ldr	r1, [pc, #16]	; (80179a8 <_stop() [clone .isra.0]+0x20>)
 8017996:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 801799a:	0592      	lsls	r2, r2, #22
 801799c:	d501      	bpl.n	80179a2 <_stop() [clone .isra.0]+0x1a>
 801799e:	3b01      	subs	r3, #1
 80179a0:	d1f9      	bne.n	8017996 <_stop() [clone .isra.0]+0xe>
 80179a2:	bd08      	pop	{r3, pc}
 80179a4:	40005400 	andmi	r5, r0, r0, lsl #8
 80179a8:	40005000 	andmi	r5, r0, r0

080179ac <gd32_i2c_begin>:
 80179ac:	b510      	push	{r4, lr}
 80179ae:	f240 7015 	movw	r0, #1813	; 0x715
 80179b2:	f7ff fad5 	bl	8016f60 <rcu_periph_clock_enable>
 80179b6:	4c15      	ldr	r4, [pc, #84]	; (8017a0c <gd32_i2c_begin+0x60>)
 80179b8:	f240 6003 	movw	r0, #1539	; 0x603
 80179bc:	f7ff fad0 	bl	8016f60 <rcu_periph_clock_enable>
 80179c0:	f240 6003 	movw	r0, #1539	; 0x603
 80179c4:	f7ff facc 	bl	8016f60 <rcu_periph_clock_enable>
 80179c8:	4620      	mov	r0, r4
 80179ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80179ce:	2203      	movs	r2, #3
 80179d0:	211c      	movs	r1, #28
 80179d2:	f7ff fa2d 	bl	8016e30 <gpio_init>
 80179d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80179da:	2203      	movs	r2, #3
 80179dc:	4620      	mov	r0, r4
 80179de:	211c      	movs	r1, #28
 80179e0:	f7ff fa26 	bl	8016e30 <gpio_init>
 80179e4:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 80179e8:	2101      	movs	r1, #1
 80179ea:	2002      	movs	r0, #2
 80179ec:	f7ff fa74 	bl	8016ed8 <gpio_pin_remap_config>
 80179f0:	4620      	mov	r0, r4
 80179f2:	4907      	ldr	r1, [pc, #28]	; (8017a10 <gd32_i2c_begin+0x64>)
 80179f4:	2200      	movs	r2, #0
 80179f6:	f001 f817 	bl	8018a28 <i2c_clock_config>
 80179fa:	4620      	mov	r0, r4
 80179fc:	f001 f890 	bl	8018b20 <i2c_enable>
 8017a00:	4620      	mov	r0, r4
 8017a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a06:	2101      	movs	r1, #1
 8017a08:	f001 b870 	b.w	8018aec <i2c_ack_config>
 8017a0c:	40010c00 	andmi	r0, r1, r0, lsl #24
 8017a10:	00061a80 	andeq	r1, r6, r0, lsl #21

08017a14 <gd32_i2c_set_baudrate>:
 8017a14:	4601      	mov	r1, r0
 8017a16:	2200      	movs	r2, #0
 8017a18:	4801      	ldr	r0, [pc, #4]	; (8017a20 <gd32_i2c_set_baudrate+0xc>)
 8017a1a:	f001 b805 	b.w	8018a28 <i2c_clock_config>
 8017a1e:	bf00      	nop
 8017a20:	40005400 	andmi	r5, r0, r0, lsl #8

08017a24 <gd32_i2c_set_address>:
 8017a24:	4b01      	ldr	r3, [pc, #4]	; (8017a2c <gd32_i2c_set_address+0x8>)
 8017a26:	0040      	lsls	r0, r0, #1
 8017a28:	7018      	strb	r0, [r3, #0]
 8017a2a:	4770      	bx	lr
 8017a2c:	2001d9b8 			; <UNDEFINED> instruction: 0x2001d9b8

08017a30 <gd32_i2c_write>:
 8017a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a32:	4604      	mov	r4, r0
 8017a34:	460f      	mov	r7, r1
 8017a36:	f640 75ff 	movw	r5, #4095	; 0xfff
 8017a3a:	4e2e      	ldr	r6, [pc, #184]	; (8017af4 <gd32_i2c_write+0xc4>)
 8017a3c:	f240 6101 	movw	r1, #1537	; 0x601
 8017a40:	4630      	mov	r0, r6
 8017a42:	f001 f881 	bl	8018b48 <i2c_flag_get>
 8017a46:	b9b0      	cbnz	r0, 8017a76 <gd32_i2c_write+0x46>
 8017a48:	482a      	ldr	r0, [pc, #168]	; (8017af4 <gd32_i2c_write+0xc4>)
 8017a4a:	f001 f86e 	bl	8018b2a <i2c_start_on_bus>
 8017a4e:	f640 75ff 	movw	r5, #4095	; 0xfff
 8017a52:	4e28      	ldr	r6, [pc, #160]	; (8017af4 <gd32_i2c_write+0xc4>)
 8017a54:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8017a58:	4630      	mov	r0, r6
 8017a5a:	f001 f875 	bl	8018b48 <i2c_flag_get>
 8017a5e:	b190      	cbz	r0, 8017a86 <gd32_i2c_write+0x56>
 8017a60:	4b25      	ldr	r3, [pc, #148]	; (8017af8 <gd32_i2c_write+0xc8>)
 8017a62:	f06f 0201 	mvn.w	r2, #1
 8017a66:	7819      	ldrb	r1, [r3, #0]
 8017a68:	4822      	ldr	r0, [pc, #136]	; (8017af4 <gd32_i2c_write+0xc4>)
 8017a6a:	f001 f851 	bl	8018b10 <i2c_master_addressing>
 8017a6e:	f640 75ff 	movw	r5, #4095	; 0xfff
 8017a72:	4e20      	ldr	r6, [pc, #128]	; (8017af4 <gd32_i2c_write+0xc4>)
 8017a74:	e00c      	b.n	8017a90 <gd32_i2c_write+0x60>
 8017a76:	3d01      	subs	r5, #1
 8017a78:	d1e0      	bne.n	8017a3c <gd32_i2c_write+0xc>
 8017a7a:	f7ff ff85 	bl	8017988 <_stop() [clone .isra.0]>
 8017a7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017a82:	4240      	negs	r0, r0
 8017a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a86:	3d01      	subs	r5, #1
 8017a88:	d1e4      	bne.n	8017a54 <gd32_i2c_write+0x24>
 8017a8a:	e7f6      	b.n	8017a7a <gd32_i2c_write+0x4a>
 8017a8c:	3d01      	subs	r5, #1
 8017a8e:	d0f4      	beq.n	8017a7a <gd32_i2c_write+0x4a>
 8017a90:	f240 5101 	movw	r1, #1281	; 0x501
 8017a94:	4630      	mov	r0, r6
 8017a96:	f001 f857 	bl	8018b48 <i2c_flag_get>
 8017a9a:	2800      	cmp	r0, #0
 8017a9c:	d0f6      	beq.n	8017a8c <gd32_i2c_write+0x5c>
 8017a9e:	f240 5101 	movw	r1, #1281	; 0x501
 8017aa2:	4814      	ldr	r0, [pc, #80]	; (8017af4 <gd32_i2c_write+0xc4>)
 8017aa4:	f001 f85b 	bl	8018b5e <i2c_flag_clear>
 8017aa8:	f640 75ff 	movw	r5, #4095	; 0xfff
 8017aac:	4e11      	ldr	r6, [pc, #68]	; (8017af4 <gd32_i2c_write+0xc4>)
 8017aae:	f240 5107 	movw	r1, #1287	; 0x507
 8017ab2:	4630      	mov	r0, r6
 8017ab4:	f001 f848 	bl	8018b48 <i2c_flag_get>
 8017ab8:	2801      	cmp	r0, #1
 8017aba:	d107      	bne.n	8017acc <gd32_i2c_write+0x9c>
 8017abc:	4e0d      	ldr	r6, [pc, #52]	; (8017af4 <gd32_i2c_write+0xc4>)
 8017abe:	4427      	add	r7, r4
 8017ac0:	42a7      	cmp	r7, r4
 8017ac2:	d106      	bne.n	8017ad2 <gd32_i2c_write+0xa2>
 8017ac4:	f7ff ff60 	bl	8017988 <_stop() [clone .isra.0]>
 8017ac8:	2000      	movs	r0, #0
 8017aca:	e7da      	b.n	8017a82 <gd32_i2c_write+0x52>
 8017acc:	3d01      	subs	r5, #1
 8017ace:	d1ee      	bne.n	8017aae <gd32_i2c_write+0x7e>
 8017ad0:	e7d3      	b.n	8017a7a <gd32_i2c_write+0x4a>
 8017ad2:	4630      	mov	r0, r6
 8017ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ad8:	f001 f831 	bl	8018b3e <i2c_data_transmit>
 8017adc:	f640 75ff 	movw	r5, #4095	; 0xfff
 8017ae0:	f240 5102 	movw	r1, #1282	; 0x502
 8017ae4:	4630      	mov	r0, r6
 8017ae6:	f001 f82f 	bl	8018b48 <i2c_flag_get>
 8017aea:	2800      	cmp	r0, #0
 8017aec:	d1e8      	bne.n	8017ac0 <gd32_i2c_write+0x90>
 8017aee:	3d01      	subs	r5, #1
 8017af0:	d1f6      	bne.n	8017ae0 <gd32_i2c_write+0xb0>
 8017af2:	e7c2      	b.n	8017a7a <gd32_i2c_write+0x4a>
 8017af4:	40005400 	andmi	r5, r0, r0, lsl #8
 8017af8:	2001d9b8 			; <UNDEFINED> instruction: 0x2001d9b8

08017afc <gd32_i2c_read>:
 8017afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b00:	4680      	mov	r8, r0
 8017b02:	460c      	mov	r4, r1
 8017b04:	f640 76ff 	movw	r6, #4095	; 0xfff
 8017b08:	4f4b      	ldr	r7, [pc, #300]	; (8017c38 <gd32_i2c_read+0x13c>)
 8017b0a:	f240 6101 	movw	r1, #1537	; 0x601
 8017b0e:	4638      	mov	r0, r7
 8017b10:	f001 f81a 	bl	8018b48 <i2c_flag_get>
 8017b14:	4605      	mov	r5, r0
 8017b16:	bb08      	cbnz	r0, 8017b5c <gd32_i2c_read+0x60>
 8017b18:	2c02      	cmp	r4, #2
 8017b1a:	d103      	bne.n	8017b24 <gd32_i2c_read+0x28>
 8017b1c:	4601      	mov	r1, r0
 8017b1e:	4846      	ldr	r0, [pc, #280]	; (8017c38 <gd32_i2c_read+0x13c>)
 8017b20:	f000 ffed 	bl	8018afe <i2c_ackpos_config>
 8017b24:	4844      	ldr	r0, [pc, #272]	; (8017c38 <gd32_i2c_read+0x13c>)
 8017b26:	f001 f800 	bl	8018b2a <i2c_start_on_bus>
 8017b2a:	f640 76ff 	movw	r6, #4095	; 0xfff
 8017b2e:	4f42      	ldr	r7, [pc, #264]	; (8017c38 <gd32_i2c_read+0x13c>)
 8017b30:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8017b34:	4638      	mov	r0, r7
 8017b36:	f001 f807 	bl	8018b48 <i2c_flag_get>
 8017b3a:	b1a8      	cbz	r0, 8017b68 <gd32_i2c_read+0x6c>
 8017b3c:	4b3f      	ldr	r3, [pc, #252]	; (8017c3c <gd32_i2c_read+0x140>)
 8017b3e:	2201      	movs	r2, #1
 8017b40:	7819      	ldrb	r1, [r3, #0]
 8017b42:	483d      	ldr	r0, [pc, #244]	; (8017c38 <gd32_i2c_read+0x13c>)
 8017b44:	f000 ffe4 	bl	8018b10 <i2c_master_addressing>
 8017b48:	2c02      	cmp	r4, #2
 8017b4a:	d803      	bhi.n	8017b54 <gd32_i2c_read+0x58>
 8017b4c:	2100      	movs	r1, #0
 8017b4e:	483a      	ldr	r0, [pc, #232]	; (8017c38 <gd32_i2c_read+0x13c>)
 8017b50:	f000 ffcc 	bl	8018aec <i2c_ack_config>
 8017b54:	f640 76ff 	movw	r6, #4095	; 0xfff
 8017b58:	4f37      	ldr	r7, [pc, #220]	; (8017c38 <gd32_i2c_read+0x13c>)
 8017b5a:	e00a      	b.n	8017b72 <gd32_i2c_read+0x76>
 8017b5c:	3e01      	subs	r6, #1
 8017b5e:	d1d4      	bne.n	8017b0a <gd32_i2c_read+0xe>
 8017b60:	f7ff ff12 	bl	8017988 <_stop() [clone .isra.0]>
 8017b64:	2504      	movs	r5, #4
 8017b66:	e04d      	b.n	8017c04 <gd32_i2c_read+0x108>
 8017b68:	3e01      	subs	r6, #1
 8017b6a:	d1e1      	bne.n	8017b30 <gd32_i2c_read+0x34>
 8017b6c:	e7f8      	b.n	8017b60 <gd32_i2c_read+0x64>
 8017b6e:	3e01      	subs	r6, #1
 8017b70:	d0f6      	beq.n	8017b60 <gd32_i2c_read+0x64>
 8017b72:	f240 5101 	movw	r1, #1281	; 0x501
 8017b76:	4638      	mov	r0, r7
 8017b78:	f000 ffe6 	bl	8018b48 <i2c_flag_get>
 8017b7c:	2800      	cmp	r0, #0
 8017b7e:	d0f6      	beq.n	8017b6e <gd32_i2c_read+0x72>
 8017b80:	f240 5101 	movw	r1, #1281	; 0x501
 8017b84:	482c      	ldr	r0, [pc, #176]	; (8017c38 <gd32_i2c_read+0x13c>)
 8017b86:	f000 ffea 	bl	8018b5e <i2c_flag_clear>
 8017b8a:	2c01      	cmp	r4, #1
 8017b8c:	d102      	bne.n	8017b94 <gd32_i2c_read+0x98>
 8017b8e:	482a      	ldr	r0, [pc, #168]	; (8017c38 <gd32_i2c_read+0x13c>)
 8017b90:	f000 ffd0 	bl	8018b34 <i2c_stop_on_bus>
 8017b94:	f640 77ff 	movw	r7, #4095	; 0xfff
 8017b98:	4e27      	ldr	r6, [pc, #156]	; (8017c38 <gd32_i2c_read+0x13c>)
 8017b9a:	e022      	b.n	8017be2 <gd32_i2c_read+0xe6>
 8017b9c:	2c03      	cmp	r4, #3
 8017b9e:	d134      	bne.n	8017c0a <gd32_i2c_read+0x10e>
 8017ba0:	f640 79ff 	movw	r9, #4095	; 0xfff
 8017ba4:	e002      	b.n	8017bac <gd32_i2c_read+0xb0>
 8017ba6:	f1b9 0901 	subs.w	r9, r9, #1
 8017baa:	d0d9      	beq.n	8017b60 <gd32_i2c_read+0x64>
 8017bac:	f240 5102 	movw	r1, #1282	; 0x502
 8017bb0:	4630      	mov	r0, r6
 8017bb2:	f000 ffc9 	bl	8018b48 <i2c_flag_get>
 8017bb6:	2800      	cmp	r0, #0
 8017bb8:	d0f5      	beq.n	8017ba6 <gd32_i2c_read+0xaa>
 8017bba:	2100      	movs	r1, #0
 8017bbc:	4630      	mov	r0, r6
 8017bbe:	f000 ff95 	bl	8018aec <i2c_ack_config>
 8017bc2:	f240 5106 	movw	r1, #1286	; 0x506
 8017bc6:	4630      	mov	r0, r6
 8017bc8:	f000 ffbe 	bl	8018b48 <i2c_flag_get>
 8017bcc:	b138      	cbz	r0, 8017bde <gd32_i2c_read+0xe2>
 8017bce:	4630      	mov	r0, r6
 8017bd0:	f000 ffb7 	bl	8018b42 <i2c_data_receive>
 8017bd4:	f640 77ff 	movw	r7, #4095	; 0xfff
 8017bd8:	f808 0b01 	strb.w	r0, [r8], #1
 8017bdc:	3c01      	subs	r4, #1
 8017bde:	3f01      	subs	r7, #1
 8017be0:	d0be      	beq.n	8017b60 <gd32_i2c_read+0x64>
 8017be2:	2c00      	cmp	r4, #0
 8017be4:	d1da      	bne.n	8017b9c <gd32_i2c_read+0xa0>
 8017be6:	f640 73ff 	movw	r3, #4095	; 0xfff
 8017bea:	4915      	ldr	r1, [pc, #84]	; (8017c40 <gd32_i2c_read+0x144>)
 8017bec:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8017bf0:	0592      	lsls	r2, r2, #22
 8017bf2:	d41d      	bmi.n	8017c30 <gd32_i2c_read+0x134>
 8017bf4:	2101      	movs	r1, #1
 8017bf6:	4810      	ldr	r0, [pc, #64]	; (8017c38 <gd32_i2c_read+0x13c>)
 8017bf8:	f000 ff78 	bl	8018aec <i2c_ack_config>
 8017bfc:	2101      	movs	r1, #1
 8017bfe:	480e      	ldr	r0, [pc, #56]	; (8017c38 <gd32_i2c_read+0x13c>)
 8017c00:	f000 ff7d 	bl	8018afe <i2c_ackpos_config>
 8017c04:	4628      	mov	r0, r5
 8017c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c0a:	2c02      	cmp	r4, #2
 8017c0c:	d1d9      	bne.n	8017bc2 <gd32_i2c_read+0xc6>
 8017c0e:	f640 79ff 	movw	r9, #4095	; 0xfff
 8017c12:	e002      	b.n	8017c1a <gd32_i2c_read+0x11e>
 8017c14:	f1b9 0901 	subs.w	r9, r9, #1
 8017c18:	d0a2      	beq.n	8017b60 <gd32_i2c_read+0x64>
 8017c1a:	f240 5102 	movw	r1, #1282	; 0x502
 8017c1e:	4630      	mov	r0, r6
 8017c20:	f000 ff92 	bl	8018b48 <i2c_flag_get>
 8017c24:	2800      	cmp	r0, #0
 8017c26:	d0f5      	beq.n	8017c14 <gd32_i2c_read+0x118>
 8017c28:	4630      	mov	r0, r6
 8017c2a:	f000 ff83 	bl	8018b34 <i2c_stop_on_bus>
 8017c2e:	e7c8      	b.n	8017bc2 <gd32_i2c_read+0xc6>
 8017c30:	3b01      	subs	r3, #1
 8017c32:	d1db      	bne.n	8017bec <gd32_i2c_read+0xf0>
 8017c34:	e796      	b.n	8017b64 <gd32_i2c_read+0x68>
 8017c36:	bf00      	nop
 8017c38:	40005400 	andmi	r5, r0, r0, lsl #8
 8017c3c:	2001d9b8 			; <UNDEFINED> instruction: 0x2001d9b8
 8017c40:	40005000 	andmi	r5, r0, r0

08017c44 <gd32_uart_begin>:
 8017c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c46:	461e      	mov	r6, r3
 8017c48:	4b82      	ldr	r3, [pc, #520]	; (8017e54 <gd32_uart_begin+0x210>)
 8017c4a:	4604      	mov	r4, r0
 8017c4c:	4298      	cmp	r0, r3
 8017c4e:	460f      	mov	r7, r1
 8017c50:	4615      	mov	r5, r2
 8017c52:	d060      	beq.n	8017d16 <gd32_uart_begin+0xd2>
 8017c54:	d80f      	bhi.n	8017c76 <gd32_uart_begin+0x32>
 8017c56:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 8017c5a:	4298      	cmp	r0, r3
 8017c5c:	d04a      	beq.n	8017cf4 <gd32_uart_begin+0xb0>
 8017c5e:	d84c      	bhi.n	8017cfa <gd32_uart_begin+0xb6>
 8017c60:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8017c64:	4298      	cmp	r0, r3
 8017c66:	d03e      	beq.n	8017ce6 <gd32_uart_begin+0xa2>
 8017c68:	f240 7012 	movw	r0, #1810	; 0x712
 8017c6c:	f7ff f978 	bl	8016f60 <rcu_periph_clock_enable>
 8017c70:	f240 6004 	movw	r0, #1540	; 0x604
 8017c74:	e00f      	b.n	8017c96 <gd32_uart_begin+0x52>
 8017c76:	4b78      	ldr	r3, [pc, #480]	; (8017e58 <gd32_uart_begin+0x214>)
 8017c78:	4298      	cmp	r0, r3
 8017c7a:	d006      	beq.n	8017c8a <gd32_uart_begin+0x46>
 8017c7c:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8017c80:	4298      	cmp	r0, r3
 8017c82:	d045      	beq.n	8017d10 <gd32_uart_begin+0xcc>
 8017c84:	f641 201f 	movw	r0, #6687	; 0x1a1f
 8017c88:	e047      	b.n	8017d1a <gd32_uart_begin+0xd6>
 8017c8a:	f240 600e 	movw	r0, #1550	; 0x60e
 8017c8e:	f7ff f967 	bl	8016f60 <rcu_periph_clock_enable>
 8017c92:	f240 6003 	movw	r0, #1539	; 0x603
 8017c96:	f7ff f963 	bl	8016f60 <rcu_periph_clock_enable>
 8017c9a:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8017c9e:	f7ff f95f 	bl	8016f60 <rcu_periph_clock_enable>
 8017ca2:	4b6c      	ldr	r3, [pc, #432]	; (8017e54 <gd32_uart_begin+0x210>)
 8017ca4:	429c      	cmp	r4, r3
 8017ca6:	f000 80c3 	beq.w	8017e30 <gd32_uart_begin+0x1ec>
 8017caa:	d83b      	bhi.n	8017d24 <gd32_uart_begin+0xe0>
 8017cac:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 8017cb0:	429c      	cmp	r4, r3
 8017cb2:	f000 809c 	beq.w	8017dee <gd32_uart_begin+0x1aa>
 8017cb6:	f200 80a7 	bhi.w	8017e08 <gd32_uart_begin+0x1c4>
 8017cba:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8017cbe:	429c      	cmp	r4, r3
 8017cc0:	f000 8088 	beq.w	8017dd4 <gd32_uart_begin+0x190>
 8017cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017cc8:	2203      	movs	r2, #3
 8017cca:	2118      	movs	r1, #24
 8017ccc:	4863      	ldr	r0, [pc, #396]	; (8017e5c <gd32_uart_begin+0x218>)
 8017cce:	f7ff f8af 	bl	8016e30 <gpio_init>
 8017cd2:	2104      	movs	r1, #4
 8017cd4:	4861      	ldr	r0, [pc, #388]	; (8017e5c <gd32_uart_begin+0x218>)
 8017cd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017cda:	2203      	movs	r2, #3
 8017cdc:	f7ff f8a8 	bl	8016e30 <gpio_init>
 8017ce0:	2101      	movs	r1, #1
 8017ce2:	485f      	ldr	r0, [pc, #380]	; (8017e60 <gd32_uart_begin+0x21c>)
 8017ce4:	e03b      	b.n	8017d5e <gd32_uart_begin+0x11a>
 8017ce6:	f240 7011 	movw	r0, #1809	; 0x711
 8017cea:	f7ff f939 	bl	8016f60 <rcu_periph_clock_enable>
 8017cee:	f240 6002 	movw	r0, #1538	; 0x602
 8017cf2:	e7d0      	b.n	8017c96 <gd32_uart_begin+0x52>
 8017cf4:	f240 7013 	movw	r0, #1811	; 0x713
 8017cf8:	e7b8      	b.n	8017c6c <gd32_uart_begin+0x28>
 8017cfa:	f240 7014 	movw	r0, #1812	; 0x714
 8017cfe:	f7ff f92f 	bl	8016f60 <rcu_periph_clock_enable>
 8017d02:	f240 6004 	movw	r0, #1540	; 0x604
 8017d06:	f7ff f92b 	bl	8016f60 <rcu_periph_clock_enable>
 8017d0a:	f240 6005 	movw	r0, #1541	; 0x605
 8017d0e:	e7c2      	b.n	8017c96 <gd32_uart_begin+0x52>
 8017d10:	f641 1018 	movw	r0, #6424	; 0x1918
 8017d14:	e7aa      	b.n	8017c6c <gd32_uart_begin+0x28>
 8017d16:	f641 201e 	movw	r0, #6686	; 0x1a1e
 8017d1a:	f7ff f921 	bl	8016f60 <rcu_periph_clock_enable>
 8017d1e:	f240 6006 	movw	r0, #1542	; 0x606
 8017d22:	e7b8      	b.n	8017c96 <gd32_uart_begin+0x52>
 8017d24:	4b4c      	ldr	r3, [pc, #304]	; (8017e58 <gd32_uart_begin+0x214>)
 8017d26:	429c      	cmp	r4, r3
 8017d28:	d00b      	beq.n	8017d42 <gd32_uart_begin+0xfe>
 8017d2a:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8017d2e:	429c      	cmp	r4, r3
 8017d30:	d076      	beq.n	8017e20 <gd32_uart_begin+0x1dc>
 8017d32:	2302      	movs	r3, #2
 8017d34:	2203      	movs	r2, #3
 8017d36:	2118      	movs	r1, #24
 8017d38:	484a      	ldr	r0, [pc, #296]	; (8017e64 <gd32_uart_begin+0x220>)
 8017d3a:	f7ff f879 	bl	8016e30 <gpio_init>
 8017d3e:	2301      	movs	r3, #1
 8017d40:	e07e      	b.n	8017e40 <gd32_uart_begin+0x1fc>
 8017d42:	2340      	movs	r3, #64	; 0x40
 8017d44:	2203      	movs	r2, #3
 8017d46:	2118      	movs	r1, #24
 8017d48:	4847      	ldr	r0, [pc, #284]	; (8017e68 <gd32_uart_begin+0x224>)
 8017d4a:	f7ff f871 	bl	8016e30 <gpio_init>
 8017d4e:	2104      	movs	r1, #4
 8017d50:	4845      	ldr	r0, [pc, #276]	; (8017e68 <gd32_uart_begin+0x224>)
 8017d52:	2380      	movs	r3, #128	; 0x80
 8017d54:	2203      	movs	r2, #3
 8017d56:	f7ff f86b 	bl	8016e30 <gpio_init>
 8017d5a:	2101      	movs	r1, #1
 8017d5c:	2004      	movs	r0, #4
 8017d5e:	f7ff f8bb 	bl	8016ed8 <gpio_pin_remap_config>
 8017d62:	4620      	mov	r0, r4
 8017d64:	f7ff fcdc 	bl	8017720 <usart_deinit>
 8017d68:	68e3      	ldr	r3, [r4, #12]
 8017d6a:	4639      	mov	r1, r7
 8017d6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017d70:	4620      	mov	r0, r4
 8017d72:	60e3      	str	r3, [r4, #12]
 8017d74:	f7ff fd36 	bl	80177e4 <usart_baudrate_set>
 8017d78:	f1a5 0309 	sub.w	r3, r5, #9
 8017d7c:	4259      	negs	r1, r3
 8017d7e:	4159      	adcs	r1, r3
 8017d80:	4620      	mov	r0, r4
 8017d82:	0309      	lsls	r1, r1, #12
 8017d84:	f7ff fd6a 	bl	801785c <usart_word_length_set>
 8017d88:	9906      	ldr	r1, [sp, #24]
 8017d8a:	4620      	mov	r0, r4
 8017d8c:	1e8a      	subs	r2, r1, #2
 8017d8e:	4251      	negs	r1, r2
 8017d90:	4151      	adcs	r1, r2
 8017d92:	0349      	lsls	r1, r1, #13
 8017d94:	f7ff fd6a 	bl	801786c <usart_stop_bit_set>
 8017d98:	2e01      	cmp	r6, #1
 8017d9a:	d055      	beq.n	8017e48 <gd32_uart_begin+0x204>
 8017d9c:	2e02      	cmp	r6, #2
 8017d9e:	d156      	bne.n	8017e4e <gd32_uart_begin+0x20a>
 8017da0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017da4:	4620      	mov	r0, r4
 8017da6:	f7ff fd51 	bl	801784c <usart_parity_config>
 8017daa:	2100      	movs	r1, #0
 8017dac:	4620      	mov	r0, r4
 8017dae:	f7ff fd71 	bl	8017894 <usart_hardware_flow_rts_config>
 8017db2:	2100      	movs	r1, #0
 8017db4:	4620      	mov	r0, r4
 8017db6:	f7ff fd73 	bl	80178a0 <usart_hardware_flow_cts_config>
 8017dba:	2104      	movs	r1, #4
 8017dbc:	4620      	mov	r0, r4
 8017dbe:	f7ff fd63 	bl	8017888 <usart_receive_config>
 8017dc2:	2108      	movs	r1, #8
 8017dc4:	4620      	mov	r0, r4
 8017dc6:	f7ff fd59 	bl	801787c <usart_transmit_config>
 8017dca:	68e3      	ldr	r3, [r4, #12]
 8017dcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017dd0:	60e3      	str	r3, [r4, #12]
 8017dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017dd4:	2304      	movs	r3, #4
 8017dd6:	2203      	movs	r2, #3
 8017dd8:	2118      	movs	r1, #24
 8017dda:	4824      	ldr	r0, [pc, #144]	; (8017e6c <gd32_uart_begin+0x228>)
 8017ddc:	f7ff f828 	bl	8016e30 <gpio_init>
 8017de0:	2308      	movs	r3, #8
 8017de2:	2203      	movs	r2, #3
 8017de4:	2104      	movs	r1, #4
 8017de6:	4821      	ldr	r0, [pc, #132]	; (8017e6c <gd32_uart_begin+0x228>)
 8017de8:	f7ff f822 	bl	8016e30 <gpio_init>
 8017dec:	e7b9      	b.n	8017d62 <gd32_uart_begin+0x11e>
 8017dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017df2:	2203      	movs	r2, #3
 8017df4:	2118      	movs	r1, #24
 8017df6:	4819      	ldr	r0, [pc, #100]	; (8017e5c <gd32_uart_begin+0x218>)
 8017df8:	f7ff f81a 	bl	8016e30 <gpio_init>
 8017dfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017e00:	2203      	movs	r2, #3
 8017e02:	2104      	movs	r1, #4
 8017e04:	4815      	ldr	r0, [pc, #84]	; (8017e5c <gd32_uart_begin+0x218>)
 8017e06:	e7ef      	b.n	8017de8 <gd32_uart_begin+0x1a4>
 8017e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017e0c:	2203      	movs	r2, #3
 8017e0e:	2118      	movs	r1, #24
 8017e10:	4812      	ldr	r0, [pc, #72]	; (8017e5c <gd32_uart_begin+0x218>)
 8017e12:	f7ff f80d 	bl	8016e30 <gpio_init>
 8017e16:	2304      	movs	r3, #4
 8017e18:	2203      	movs	r2, #3
 8017e1a:	4619      	mov	r1, r3
 8017e1c:	4814      	ldr	r0, [pc, #80]	; (8017e70 <gd32_uart_begin+0x22c>)
 8017e1e:	e7e3      	b.n	8017de8 <gd32_uart_begin+0x1a4>
 8017e20:	2340      	movs	r3, #64	; 0x40
 8017e22:	2203      	movs	r2, #3
 8017e24:	2118      	movs	r1, #24
 8017e26:	480d      	ldr	r0, [pc, #52]	; (8017e5c <gd32_uart_begin+0x218>)
 8017e28:	f7ff f802 	bl	8016e30 <gpio_init>
 8017e2c:	2380      	movs	r3, #128	; 0x80
 8017e2e:	e7e7      	b.n	8017e00 <gd32_uart_begin+0x1bc>
 8017e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017e34:	2203      	movs	r2, #3
 8017e36:	2118      	movs	r1, #24
 8017e38:	480a      	ldr	r0, [pc, #40]	; (8017e64 <gd32_uart_begin+0x220>)
 8017e3a:	f7fe fff9 	bl	8016e30 <gpio_init>
 8017e3e:	2380      	movs	r3, #128	; 0x80
 8017e40:	2203      	movs	r2, #3
 8017e42:	2104      	movs	r1, #4
 8017e44:	4807      	ldr	r0, [pc, #28]	; (8017e64 <gd32_uart_begin+0x220>)
 8017e46:	e7cf      	b.n	8017de8 <gd32_uart_begin+0x1a4>
 8017e48:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8017e4c:	e7aa      	b.n	8017da4 <gd32_uart_begin+0x160>
 8017e4e:	2100      	movs	r1, #0
 8017e50:	e7a8      	b.n	8017da4 <gd32_uart_begin+0x160>
 8017e52:	bf00      	nop
 8017e54:	40007800 	andmi	r7, r0, r0, lsl #16
 8017e58:	40013800 	andmi	r3, r1, r0, lsl #16
 8017e5c:	40011000 	andmi	r1, r1, r0
 8017e60:	00140010 	andseq	r0, r4, r0, lsl r0
 8017e64:	40011800 	andmi	r1, r1, r0, lsl #16
 8017e68:	40010c00 	andmi	r0, r1, r0, lsl #24
 8017e6c:	40010800 	andmi	r0, r1, r0, lsl #16
 8017e70:	40011400 	andmi	r1, r1, r0, lsl #8

08017e74 <micros_init()>:
 8017e74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017e76:	2400      	movs	r4, #0
 8017e78:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8017e7c:	4d22      	ldr	r5, [pc, #136]	; (8017f08 <micros_init()+0x94>)
 8017e7e:	f240 6013 	movw	r0, #1555	; 0x613
 8017e82:	f7ff f86d 	bl	8016f60 <rcu_periph_clock_enable>
 8017e86:	4628      	mov	r0, r5
 8017e88:	f7ff f9ce 	bl	8017228 <timer_deinit>
 8017e8c:	4b1f      	ldr	r3, [pc, #124]	; (8017f0c <micros_init()+0x98>)
 8017e8e:	4628      	mov	r0, r5
 8017e90:	f8c3 4c24 	str.w	r4, [r3, #3108]	; 0xc24
 8017e94:	4669      	mov	r1, sp
 8017e96:	9400      	str	r4, [sp, #0]
 8017e98:	f8ad 4004 	strh.w	r4, [sp, #4]
 8017e9c:	9602      	str	r6, [sp, #8]
 8017e9e:	f8ad 400c 	strh.w	r4, [sp, #12]
 8017ea2:	f7ff fa67 	bl	8017374 <timer_init>
 8017ea6:	4628      	mov	r0, r5
 8017ea8:	4621      	mov	r1, r4
 8017eaa:	f7ff fc27 	bl	80176fc <timer_master_slave_mode_config>
 8017eae:	4628      	mov	r0, r5
 8017eb0:	2107      	movs	r1, #7
 8017eb2:	f7ff fc1b 	bl	80176ec <timer_slave_mode_select>
 8017eb6:	2120      	movs	r1, #32
 8017eb8:	4628      	mov	r0, r5
 8017eba:	f7ff fc07 	bl	80176cc <timer_input_trigger_source_select>
 8017ebe:	4628      	mov	r0, r5
 8017ec0:	f7ff fab0 	bl	8017424 <timer_enable>
 8017ec4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8017ec8:	f240 6014 	movw	r0, #1556	; 0x614
 8017ecc:	f7ff f848 	bl	8016f60 <rcu_periph_clock_enable>
 8017ed0:	4628      	mov	r0, r5
 8017ed2:	f7ff f9a9 	bl	8017228 <timer_deinit>
 8017ed6:	2377      	movs	r3, #119	; 0x77
 8017ed8:	626c      	str	r4, [r5, #36]	; 0x24
 8017eda:	4669      	mov	r1, sp
 8017edc:	4628      	mov	r0, r5
 8017ede:	9300      	str	r3, [sp, #0]
 8017ee0:	f8ad 4004 	strh.w	r4, [sp, #4]
 8017ee4:	9602      	str	r6, [sp, #8]
 8017ee6:	f8ad 400c 	strh.w	r4, [sp, #12]
 8017eea:	f7ff fa43 	bl	8017374 <timer_init>
 8017eee:	4621      	mov	r1, r4
 8017ef0:	4628      	mov	r0, r5
 8017ef2:	f7ff fc03 	bl	80176fc <timer_master_slave_mode_config>
 8017ef6:	2120      	movs	r1, #32
 8017ef8:	4628      	mov	r0, r5
 8017efa:	f7ff fbef 	bl	80176dc <timer_master_output_trigger_source_select>
 8017efe:	4628      	mov	r0, r5
 8017f00:	f7ff fa90 	bl	8017424 <timer_enable>
 8017f04:	b004      	add	sp, #16
 8017f06:	bd70      	pop	{r4, r5, r6, pc}
 8017f08:	40014c00 	andmi	r4, r1, r0, lsl #24
 8017f0c:	40014000 	andmi	r4, r1, r0

08017f10 <udelay_init()>:
 8017f10:	4a07      	ldr	r2, [pc, #28]	; (8017f30 <udelay_init()+0x20>)
 8017f12:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8017f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017f1a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8017f1e:	2200      	movs	r2, #0
 8017f20:	4b04      	ldr	r3, [pc, #16]	; (8017f34 <udelay_init()+0x24>)
 8017f22:	605a      	str	r2, [r3, #4]
 8017f24:	681a      	ldr	r2, [r3, #0]
 8017f26:	f042 0201 	orr.w	r2, r2, #1
 8017f2a:	601a      	str	r2, [r3, #0]
 8017f2c:	4770      	bx	lr
 8017f2e:	bf00      	nop
 8017f30:	e000ed00 	and	lr, r0, r0, lsl #26
 8017f34:	e0001000 	and	r1, r0, r0

08017f38 <udelay(unsigned int, unsigned int)>:
 8017f38:	2378      	movs	r3, #120	; 0x78
 8017f3a:	b530      	push	{r4, r5, lr}
 8017f3c:	4358      	muls	r0, r3
 8017f3e:	b909      	cbnz	r1, 8017f44 <udelay(unsigned int, unsigned int)+0xc>
 8017f40:	4b08      	ldr	r3, [pc, #32]	; (8017f64 <udelay(unsigned int, unsigned int)+0x2c>)
 8017f42:	6859      	ldr	r1, [r3, #4]
 8017f44:	2300      	movs	r3, #0
 8017f46:	4c07      	ldr	r4, [pc, #28]	; (8017f64 <udelay(unsigned int, unsigned int)+0x2c>)
 8017f48:	6862      	ldr	r2, [r4, #4]
 8017f4a:	4291      	cmp	r1, r2
 8017f4c:	d0fc      	beq.n	8017f48 <udelay(unsigned int, unsigned int)+0x10>
 8017f4e:	bf2a      	itet	cs
 8017f50:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 8017f54:	189b      	addcc	r3, r3, r2
 8017f56:	195b      	addcs	r3, r3, r5
 8017f58:	1a5b      	subs	r3, r3, r1
 8017f5a:	4283      	cmp	r3, r0
 8017f5c:	d300      	bcc.n	8017f60 <udelay(unsigned int, unsigned int)+0x28>
 8017f5e:	bd30      	pop	{r4, r5, pc}
 8017f60:	4611      	mov	r1, r2
 8017f62:	e7f1      	b.n	8017f48 <udelay(unsigned int, unsigned int)+0x10>
 8017f64:	e0001000 	and	r1, r0, r0

08017f68 <emac_start(unsigned char*)>:
 8017f68:	b538      	push	{r3, r4, r5, lr}
 8017f6a:	4605      	mov	r5, r0
 8017f6c:	f240 6002 	movw	r0, #1538	; 0x602
 8017f70:	f7fe fff6 	bl	8016f60 <rcu_periph_clock_enable>
 8017f74:	f240 6003 	movw	r0, #1539	; 0x603
 8017f78:	f7fe fff2 	bl	8016f60 <rcu_periph_clock_enable>
 8017f7c:	f240 6004 	movw	r0, #1540	; 0x604
 8017f80:	f7fe ffee 	bl	8016f60 <rcu_periph_clock_enable>
 8017f84:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8017f88:	f7fe ffea 	bl	8016f60 <rcu_periph_clock_enable>
 8017f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017f90:	2203      	movs	r2, #3
 8017f92:	2118      	movs	r1, #24
 8017f94:	4844      	ldr	r0, [pc, #272]	; (80180a8 <emac_start(unsigned char*)+0x140>)
 8017f96:	f7fe ff4b 	bl	8016e30 <gpio_init>
 8017f9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8017f9e:	f7ff f80f 	bl	8016fc0 <rcu_pll2_config>
 8017fa2:	201c      	movs	r0, #28
 8017fa4:	f7ff f8b6 	bl	8017114 <rcu_osci_on>
 8017fa8:	201c      	movs	r0, #28
 8017faa:	f7ff f843 	bl	8017034 <rcu_osci_stab_wait>
 8017fae:	2100      	movs	r1, #0
 8017fb0:	f04f 6030 	mov.w	r0, #184549376	; 0xb000000
 8017fb4:	f7fe fff4 	bl	8016fa0 <rcu_ckout0_config>
 8017fb8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8017fbc:	f7fe ffbc 	bl	8016f38 <gpio_ethernet_phy_select>
 8017fc0:	2302      	movs	r3, #2
 8017fc2:	2203      	movs	r2, #3
 8017fc4:	2104      	movs	r1, #4
 8017fc6:	4838      	ldr	r0, [pc, #224]	; (80180a8 <emac_start(unsigned char*)+0x140>)
 8017fc8:	f7fe ff32 	bl	8016e30 <gpio_init>
 8017fcc:	2304      	movs	r3, #4
 8017fce:	2203      	movs	r2, #3
 8017fd0:	2118      	movs	r1, #24
 8017fd2:	4835      	ldr	r0, [pc, #212]	; (80180a8 <emac_start(unsigned char*)+0x140>)
 8017fd4:	f7fe ff2c 	bl	8016e30 <gpio_init>
 8017fd8:	2380      	movs	r3, #128	; 0x80
 8017fda:	2203      	movs	r2, #3
 8017fdc:	2104      	movs	r1, #4
 8017fde:	4832      	ldr	r0, [pc, #200]	; (80180a8 <emac_start(unsigned char*)+0x140>)
 8017fe0:	f7fe ff26 	bl	8016e30 <gpio_init>
 8017fe4:	2302      	movs	r3, #2
 8017fe6:	2203      	movs	r2, #3
 8017fe8:	2118      	movs	r1, #24
 8017fea:	4830      	ldr	r0, [pc, #192]	; (80180ac <emac_start(unsigned char*)+0x144>)
 8017fec:	f7fe ff20 	bl	8016e30 <gpio_init>
 8017ff0:	2310      	movs	r3, #16
 8017ff2:	2203      	movs	r2, #3
 8017ff4:	2104      	movs	r1, #4
 8017ff6:	482d      	ldr	r0, [pc, #180]	; (80180ac <emac_start(unsigned char*)+0x144>)
 8017ff8:	f7fe ff1a 	bl	8016e30 <gpio_init>
 8017ffc:	2320      	movs	r3, #32
 8017ffe:	2203      	movs	r2, #3
 8018000:	2104      	movs	r1, #4
 8018002:	482a      	ldr	r0, [pc, #168]	; (80180ac <emac_start(unsigned char*)+0x144>)
 8018004:	f7fe ff14 	bl	8016e30 <gpio_init>
 8018008:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801800c:	2203      	movs	r2, #3
 801800e:	2118      	movs	r1, #24
 8018010:	4827      	ldr	r0, [pc, #156]	; (80180b0 <emac_start(unsigned char*)+0x148>)
 8018012:	f7fe ff0d 	bl	8016e30 <gpio_init>
 8018016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801801a:	2203      	movs	r2, #3
 801801c:	2118      	movs	r1, #24
 801801e:	4824      	ldr	r0, [pc, #144]	; (80180b0 <emac_start(unsigned char*)+0x148>)
 8018020:	f7fe ff06 	bl	8016e30 <gpio_init>
 8018024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018028:	2203      	movs	r2, #3
 801802a:	2118      	movs	r1, #24
 801802c:	4820      	ldr	r0, [pc, #128]	; (80180b0 <emac_start(unsigned char*)+0x148>)
 801802e:	f7fe feff 	bl	8016e30 <gpio_init>
 8018032:	f240 500e 	movw	r0, #1294	; 0x50e
 8018036:	f7fe ff93 	bl	8016f60 <rcu_periph_clock_enable>
 801803a:	f240 500f 	movw	r0, #1295	; 0x50f
 801803e:	f7fe ff8f 	bl	8016f60 <rcu_periph_clock_enable>
 8018042:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 8018046:	f7fe ff8b 	bl	8016f60 <rcu_periph_clock_enable>
 801804a:	f000 fcdf 	bl	8018a0c <enet_deinit>
 801804e:	f000 f93b 	bl	80182c8 <enet_software_reset>
 8018052:	4604      	mov	r4, r0
 8018054:	b138      	cbz	r0, 8018066 <emac_start(unsigned char*)+0xfe>
 8018056:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801805a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801805e:	2001      	movs	r0, #1
 8018060:	f000 fab6 	bl	80185d0 <enet_init>
 8018064:	4604      	mov	r4, r0
 8018066:	4628      	mov	r0, r5
 8018068:	f000 fd8c 	bl	8018b84 <mac_address_get(unsigned char*)>
 801806c:	4629      	mov	r1, r5
 801806e:	2000      	movs	r0, #0
 8018070:	f000 fa0e 	bl	8018490 <enet_mac_address_set>
 8018074:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 8018078:	f000 f93a 	bl	80182f0 <enet_descriptors_chain_init>
 801807c:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8018080:	f000 f936 	bl	80182f0 <enet_descriptors_chain_init>
 8018084:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8018088:	480a      	ldr	r0, [pc, #40]	; (80180b4 <emac_start(unsigned char*)+0x14c>)
 801808a:	f000 f9fb 	bl	8018484 <enet_transmit_checksum_config>
 801808e:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8018092:	4809      	ldr	r0, [pc, #36]	; (80180b8 <emac_start(unsigned char*)+0x150>)
 8018094:	f000 f9f6 	bl	8018484 <enet_transmit_checksum_config>
 8018098:	f000 fc30 	bl	80188fc <enet_enable>
 801809c:	fab4 f084 	clz	r0, r4
 80180a0:	0940      	lsrs	r0, r0, #5
 80180a2:	4240      	negs	r0, r0
 80180a4:	bd38      	pop	{r3, r4, r5, pc}
 80180a6:	bf00      	nop
 80180a8:	40010800 	andmi	r0, r1, r0, lsl #16
 80180ac:	40011000 	andmi	r1, r1, r0
 80180b0:	40010c00 	andmi	r0, r1, r0, lsl #24
 80180b4:	2002b278 	andcs	fp, r2, r8, ror r2
 80180b8:	2002b288 	andcs	fp, r2, r8, lsl #5

080180bc <net::link_register_read()>:
 80180bc:	b507      	push	{r0, r1, r2, lr}
 80180be:	2201      	movs	r2, #1
 80180c0:	f10d 0306 	add.w	r3, sp, #6
 80180c4:	4611      	mov	r1, r2
 80180c6:	2000      	movs	r0, #0
 80180c8:	f000 f9fa 	bl	80184c0 <enet_phy_write_read>
 80180cc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80180d0:	f080 0004 	eor.w	r0, r0, #4
 80180d4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80180d8:	b003      	add	sp, #12
 80180da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080180e0 <adc_mode_config>:
 80180e0:	4b06      	ldr	r3, [pc, #24]	; (80180fc <adc_mode_config+0x1c>)
 80180e2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80180e6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80180ea:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80180ee:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80180f2:	4302      	orrs	r2, r0
 80180f4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80180f8:	4770      	bx	lr
 80180fa:	bf00      	nop
 80180fc:	40012000 	andmi	r2, r1, r0

08018100 <adc_special_function_config>:
 8018100:	b510      	push	{r4, lr}
 8018102:	f401 7380 	and.w	r3, r1, #256	; 0x100
 8018106:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 801810a:	f001 0102 	and.w	r1, r1, #2
 801810e:	b17a      	cbz	r2, 8018130 <adc_special_function_config+0x30>
 8018110:	b11b      	cbz	r3, 801811a <adc_special_function_config+0x1a>
 8018112:	6843      	ldr	r3, [r0, #4]
 8018114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018118:	6043      	str	r3, [r0, #4]
 801811a:	b11c      	cbz	r4, 8018124 <adc_special_function_config+0x24>
 801811c:	6843      	ldr	r3, [r0, #4]
 801811e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8018122:	6043      	str	r3, [r0, #4]
 8018124:	b119      	cbz	r1, 801812e <adc_special_function_config+0x2e>
 8018126:	6883      	ldr	r3, [r0, #8]
 8018128:	f043 0302 	orr.w	r3, r3, #2
 801812c:	6083      	str	r3, [r0, #8]
 801812e:	bd10      	pop	{r4, pc}
 8018130:	b11b      	cbz	r3, 801813a <adc_special_function_config+0x3a>
 8018132:	6843      	ldr	r3, [r0, #4]
 8018134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018138:	6043      	str	r3, [r0, #4]
 801813a:	b11c      	cbz	r4, 8018144 <adc_special_function_config+0x44>
 801813c:	6843      	ldr	r3, [r0, #4]
 801813e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8018142:	6043      	str	r3, [r0, #4]
 8018144:	2900      	cmp	r1, #0
 8018146:	d0f2      	beq.n	801812e <adc_special_function_config+0x2e>
 8018148:	6883      	ldr	r3, [r0, #8]
 801814a:	f023 0302 	bic.w	r3, r3, #2
 801814e:	e7ed      	b.n	801812c <adc_special_function_config+0x2c>

08018150 <adc_data_alignment_config>:
 8018150:	6883      	ldr	r3, [r0, #8]
 8018152:	b119      	cbz	r1, 801815c <adc_data_alignment_config+0xc>
 8018154:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018158:	6083      	str	r3, [r0, #8]
 801815a:	4770      	bx	lr
 801815c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018160:	e7fa      	b.n	8018158 <adc_data_alignment_config+0x8>

08018162 <adc_enable>:
 8018162:	6883      	ldr	r3, [r0, #8]
 8018164:	07db      	lsls	r3, r3, #31
 8018166:	bf5e      	ittt	pl
 8018168:	6883      	ldrpl	r3, [r0, #8]
 801816a:	f043 0301 	orrpl.w	r3, r3, #1
 801816e:	6083      	strpl	r3, [r0, #8]
 8018170:	4770      	bx	lr

08018172 <adc_calibration_enable>:
 8018172:	6883      	ldr	r3, [r0, #8]
 8018174:	f100 0208 	add.w	r2, r0, #8
 8018178:	f043 0308 	orr.w	r3, r3, #8
 801817c:	6083      	str	r3, [r0, #8]
 801817e:	6813      	ldr	r3, [r2, #0]
 8018180:	0719      	lsls	r1, r3, #28
 8018182:	d4fc      	bmi.n	801817e <adc_calibration_enable+0xc>
 8018184:	6883      	ldr	r3, [r0, #8]
 8018186:	f043 0304 	orr.w	r3, r3, #4
 801818a:	6083      	str	r3, [r0, #8]
 801818c:	6813      	ldr	r3, [r2, #0]
 801818e:	075b      	lsls	r3, r3, #29
 8018190:	d4fc      	bmi.n	801818c <adc_calibration_enable+0x1a>
 8018192:	4770      	bx	lr

08018194 <adc_tempsensor_vrefint_enable>:
 8018194:	4a03      	ldr	r2, [pc, #12]	; (80181a4 <adc_tempsensor_vrefint_enable+0x10>)
 8018196:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 801819a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801819e:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 80181a2:	4770      	bx	lr
 80181a4:	40012000 	andmi	r2, r1, r0

080181a8 <adc_channel_length_config>:
 80181a8:	2901      	cmp	r1, #1
 80181aa:	d002      	beq.n	80181b2 <adc_channel_length_config+0xa>
 80181ac:	2902      	cmp	r1, #2
 80181ae:	d00c      	beq.n	80181ca <adc_channel_length_config+0x22>
 80181b0:	4770      	bx	lr
 80181b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80181b4:	3a01      	subs	r2, #1
 80181b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80181ba:	62c3      	str	r3, [r0, #44]	; 0x2c
 80181bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80181be:	0512      	lsls	r2, r2, #20
 80181c0:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 80181c4:	431a      	orrs	r2, r3
 80181c6:	62c2      	str	r2, [r0, #44]	; 0x2c
 80181c8:	4770      	bx	lr
 80181ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80181cc:	3a01      	subs	r2, #1
 80181ce:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80181d2:	6383      	str	r3, [r0, #56]	; 0x38
 80181d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80181d6:	0512      	lsls	r2, r2, #20
 80181d8:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80181dc:	431a      	orrs	r2, r3
 80181de:	6382      	str	r2, [r0, #56]	; 0x38
 80181e0:	4770      	bx	lr

080181e2 <adc_inserted_channel_config>:
 80181e2:	b530      	push	{r4, r5, lr}
 80181e4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80181e6:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80181e8:	f3c4 5401 	ubfx	r4, r4, #20, #2
 80181ec:	1a61      	subs	r1, r4, r1
 80181ee:	f06f 0404 	mvn.w	r4, #4
 80181f2:	4361      	muls	r1, r4
 80181f4:	241f      	movs	r4, #31
 80181f6:	310f      	adds	r1, #15
 80181f8:	408c      	lsls	r4, r1
 80181fa:	ea25 0504 	bic.w	r5, r5, r4
 80181fe:	fa02 f101 	lsl.w	r1, r2, r1
 8018202:	4329      	orrs	r1, r5
 8018204:	2a09      	cmp	r2, #9
 8018206:	6381      	str	r1, [r0, #56]	; 0x38
 8018208:	d80b      	bhi.n	8018222 <adc_inserted_channel_config+0x40>
 801820a:	2407      	movs	r4, #7
 801820c:	6901      	ldr	r1, [r0, #16]
 801820e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018212:	4094      	lsls	r4, r2
 8018214:	ea21 0104 	bic.w	r1, r1, r4
 8018218:	fa03 f202 	lsl.w	r2, r3, r2
 801821c:	430a      	orrs	r2, r1
 801821e:	6102      	str	r2, [r0, #16]
 8018220:	bd30      	pop	{r4, r5, pc}
 8018222:	2a11      	cmp	r2, #17
 8018224:	d8fc      	bhi.n	8018220 <adc_inserted_channel_config+0x3e>
 8018226:	2407      	movs	r4, #7
 8018228:	3a0a      	subs	r2, #10
 801822a:	68c1      	ldr	r1, [r0, #12]
 801822c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018230:	4094      	lsls	r4, r2
 8018232:	ea21 0104 	bic.w	r1, r1, r4
 8018236:	4093      	lsls	r3, r2
 8018238:	430b      	orrs	r3, r1
 801823a:	60c3      	str	r3, [r0, #12]
 801823c:	e7f0      	b.n	8018220 <adc_inserted_channel_config+0x3e>

0801823e <adc_external_trigger_source_config>:
 801823e:	2901      	cmp	r1, #1
 8018240:	d002      	beq.n	8018248 <adc_external_trigger_source_config+0xa>
 8018242:	2902      	cmp	r1, #2
 8018244:	d008      	beq.n	8018258 <adc_external_trigger_source_config+0x1a>
 8018246:	4770      	bx	lr
 8018248:	6883      	ldr	r3, [r0, #8]
 801824a:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 801824e:	6083      	str	r3, [r0, #8]
 8018250:	6883      	ldr	r3, [r0, #8]
 8018252:	4313      	orrs	r3, r2
 8018254:	6083      	str	r3, [r0, #8]
 8018256:	4770      	bx	lr
 8018258:	6883      	ldr	r3, [r0, #8]
 801825a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801825e:	e7f6      	b.n	801824e <adc_external_trigger_source_config+0x10>

08018260 <adc_external_trigger_config>:
 8018260:	f001 0301 	and.w	r3, r1, #1
 8018264:	f001 0102 	and.w	r1, r1, #2
 8018268:	b152      	cbz	r2, 8018280 <adc_external_trigger_config+0x20>
 801826a:	b11b      	cbz	r3, 8018274 <adc_external_trigger_config+0x14>
 801826c:	6883      	ldr	r3, [r0, #8]
 801826e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018272:	6083      	str	r3, [r0, #8]
 8018274:	b119      	cbz	r1, 801827e <adc_external_trigger_config+0x1e>
 8018276:	6883      	ldr	r3, [r0, #8]
 8018278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801827c:	6083      	str	r3, [r0, #8]
 801827e:	4770      	bx	lr
 8018280:	b11b      	cbz	r3, 801828a <adc_external_trigger_config+0x2a>
 8018282:	6883      	ldr	r3, [r0, #8]
 8018284:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8018288:	6083      	str	r3, [r0, #8]
 801828a:	2900      	cmp	r1, #0
 801828c:	d0f7      	beq.n	801827e <adc_external_trigger_config+0x1e>
 801828e:	6883      	ldr	r3, [r0, #8]
 8018290:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8018294:	e7f2      	b.n	801827c <adc_external_trigger_config+0x1c>

08018296 <adc_software_trigger_enable>:
 8018296:	07ca      	lsls	r2, r1, #31
 8018298:	bf42      	ittt	mi
 801829a:	6883      	ldrmi	r3, [r0, #8]
 801829c:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 80182a0:	6083      	strmi	r3, [r0, #8]
 80182a2:	078b      	lsls	r3, r1, #30
 80182a4:	bf42      	ittt	mi
 80182a6:	6883      	ldrmi	r3, [r0, #8]
 80182a8:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 80182ac:	6083      	strmi	r3, [r0, #8]
 80182ae:	4770      	bx	lr

080182b0 <enet_delay>:
 80182b0:	2300      	movs	r3, #0
 80182b2:	b082      	sub	sp, #8
 80182b4:	9301      	str	r3, [sp, #4]
 80182b6:	9001      	str	r0, [sp, #4]
 80182b8:	9b01      	ldr	r3, [sp, #4]
 80182ba:	b90b      	cbnz	r3, 80182c0 <enet_delay+0x10>
 80182bc:	b002      	add	sp, #8
 80182be:	4770      	bx	lr
 80182c0:	9b01      	ldr	r3, [sp, #4]
 80182c2:	3b01      	subs	r3, #1
 80182c4:	9301      	str	r3, [sp, #4]
 80182c6:	e7f7      	b.n	80182b8 <enet_delay+0x8>

080182c8 <enet_software_reset>:
 80182c8:	4b07      	ldr	r3, [pc, #28]	; (80182e8 <enet_software_reset+0x20>)
 80182ca:	681a      	ldr	r2, [r3, #0]
 80182cc:	f042 0201 	orr.w	r2, r2, #1
 80182d0:	601a      	str	r2, [r3, #0]
 80182d2:	4a06      	ldr	r2, [pc, #24]	; (80182ec <enet_software_reset+0x24>)
 80182d4:	6819      	ldr	r1, [r3, #0]
 80182d6:	07c9      	lsls	r1, r1, #31
 80182d8:	d501      	bpl.n	80182de <enet_software_reset+0x16>
 80182da:	3a01      	subs	r2, #1
 80182dc:	d1fa      	bne.n	80182d4 <enet_software_reset+0xc>
 80182de:	6818      	ldr	r0, [r3, #0]
 80182e0:	43c0      	mvns	r0, r0
 80182e2:	f000 0001 	and.w	r0, r0, #1
 80182e6:	4770      	bx	lr
 80182e8:	40029000 	andmi	r9, r2, r0
 80182ec:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

080182f0 <enet_descriptors_chain_init>:
 80182f0:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 80182f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182f6:	4a19      	ldr	r2, [pc, #100]	; (801835c <enet_descriptors_chain_init+0x6c>)
 80182f8:	d125      	bne.n	8018346 <enet_descriptors_chain_init+0x56>
 80182fa:	2500      	movs	r5, #0
 80182fc:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8018300:	2002      	movs	r0, #2
 8018302:	4b17      	ldr	r3, [pc, #92]	; (8018360 <enet_descriptors_chain_init+0x70>)
 8018304:	4c17      	ldr	r4, [pc, #92]	; (8018364 <enet_descriptors_chain_init+0x74>)
 8018306:	6113      	str	r3, [r2, #16]
 8018308:	4a17      	ldr	r2, [pc, #92]	; (8018368 <enet_descriptors_chain_init+0x78>)
 801830a:	6013      	str	r3, [r2, #0]
 801830c:	2200      	movs	r2, #0
 801830e:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 8018312:	4916      	ldr	r1, [pc, #88]	; (801836c <enet_descriptors_chain_init+0x7c>)
 8018314:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8018318:	600a      	str	r2, [r1, #0]
 801831a:	4915      	ldr	r1, [pc, #84]	; (8018370 <enet_descriptors_chain_init+0x80>)
 801831c:	600a      	str	r2, [r1, #0]
 801831e:	f103 0110 	add.w	r1, r3, #16
 8018322:	fb0e 4702 	mla	r7, lr, r2, r4
 8018326:	f841 7c08 	str.w	r7, [r1, #-8]
 801832a:	4594      	cmp	ip, r2
 801832c:	bf94      	ite	ls
 801832e:	461f      	movls	r7, r3
 8018330:	460f      	movhi	r7, r1
 8018332:	3201      	adds	r2, #1
 8018334:	4290      	cmp	r0, r2
 8018336:	e941 6504 	strd	r6, r5, [r1, #-16]
 801833a:	f841 7c04 	str.w	r7, [r1, #-4]
 801833e:	f101 0110 	add.w	r1, r1, #16
 8018342:	d1ee      	bne.n	8018322 <enet_descriptors_chain_init+0x32>
 8018344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018346:	4b0b      	ldr	r3, [pc, #44]	; (8018374 <enet_descriptors_chain_init+0x84>)
 8018348:	f244 55f4 	movw	r5, #17908	; 0x45f4
 801834c:	60d3      	str	r3, [r2, #12]
 801834e:	4a0a      	ldr	r2, [pc, #40]	; (8018378 <enet_descriptors_chain_init+0x88>)
 8018350:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018354:	2022      	movs	r0, #34	; 0x22
 8018356:	4c09      	ldr	r4, [pc, #36]	; (801837c <enet_descriptors_chain_init+0x8c>)
 8018358:	6013      	str	r3, [r2, #0]
 801835a:	e7d7      	b.n	801830c <enet_descriptors_chain_init+0x1c>
 801835c:	40029000 	andmi	r9, r2, r0
 8018360:	2002b278 	andcs	fp, r2, r8, ror r2
 8018364:	2002a690 	mulcs	r2, r0, r6
 8018368:	2001d9c8 	andcs	sp, r1, r8, asr #19
 801836c:	2001d9bc 			; <UNDEFINED> instruction: 0x2001d9bc
 8018370:	2001d9c0 	andcs	sp, r1, r0, asr #19
 8018374:	2002a470 	andcs	sl, r2, r0, ror r4
 8018378:	2001d9c4 	andcs	sp, r1, r4, asr #19
 801837c:	2001da08 	andcs	sp, r1, r8, lsl #20

08018380 <enet_frame_receive>:
 8018380:	4a1d      	ldr	r2, [pc, #116]	; (80183f8 <enet_frame_receive+0x78>)
 8018382:	b510      	push	{r4, lr}
 8018384:	6813      	ldr	r3, [r2, #0]
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	2b00      	cmp	r3, #0
 801838a:	db33      	blt.n	80183f4 <enet_frame_receive+0x74>
 801838c:	b970      	cbnz	r0, 80183ac <enet_frame_receive+0x2c>
 801838e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8018392:	6813      	ldr	r3, [r2, #0]
 8018394:	6019      	str	r1, [r3, #0]
 8018396:	4919      	ldr	r1, [pc, #100]	; (80183fc <enet_frame_receive+0x7c>)
 8018398:	6948      	ldr	r0, [r1, #20]
 801839a:	0604      	lsls	r4, r0, #24
 801839c:	d419      	bmi.n	80183d2 <enet_frame_receive+0x52>
 801839e:	6859      	ldr	r1, [r3, #4]
 80183a0:	0448      	lsls	r0, r1, #17
 80183a2:	d51b      	bpl.n	80183dc <enet_frame_receive+0x5c>
 80183a4:	68db      	ldr	r3, [r3, #12]
 80183a6:	2001      	movs	r0, #1
 80183a8:	6013      	str	r3, [r2, #0]
 80183aa:	bd10      	pop	{r4, pc}
 80183ac:	f403 4403 	and.w	r4, r3, #33536	; 0x8300
 80183b0:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 80183b4:	d11e      	bne.n	80183f4 <enet_frame_receive+0x74>
 80183b6:	f3c3 430d 	ubfx	r3, r3, #16, #14
 80183ba:	3b04      	subs	r3, #4
 80183bc:	428b      	cmp	r3, r1
 80183be:	d819      	bhi.n	80183f4 <enet_frame_receive+0x74>
 80183c0:	2100      	movs	r1, #0
 80183c2:	4299      	cmp	r1, r3
 80183c4:	6814      	ldr	r4, [r2, #0]
 80183c6:	d2e2      	bcs.n	801838e <enet_frame_receive+0xe>
 80183c8:	68a4      	ldr	r4, [r4, #8]
 80183ca:	5d0c      	ldrb	r4, [r1, r4]
 80183cc:	5444      	strb	r4, [r0, r1]
 80183ce:	3101      	adds	r1, #1
 80183d0:	e7f7      	b.n	80183c2 <enet_frame_receive+0x42>
 80183d2:	2080      	movs	r0, #128	; 0x80
 80183d4:	6148      	str	r0, [r1, #20]
 80183d6:	2000      	movs	r0, #0
 80183d8:	6088      	str	r0, [r1, #8]
 80183da:	e7e0      	b.n	801839e <enet_frame_receive+0x1e>
 80183dc:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80183e0:	4906      	ldr	r1, [pc, #24]	; (80183fc <enet_frame_receive+0x7c>)
 80183e2:	bf05      	ittet	eq
 80183e4:	3310      	addeq	r3, #16
 80183e6:	6809      	ldreq	r1, [r1, #0]
 80183e8:	68cb      	ldrne	r3, [r1, #12]
 80183ea:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 80183ee:	bf08      	it	eq
 80183f0:	185b      	addeq	r3, r3, r1
 80183f2:	e7d8      	b.n	80183a6 <enet_frame_receive+0x26>
 80183f4:	2000      	movs	r0, #0
 80183f6:	e7d8      	b.n	80183aa <enet_frame_receive+0x2a>
 80183f8:	2001d9c4 	andcs	sp, r1, r4, asr #19
 80183fc:	40029000 	andmi	r9, r2, r0

08018400 <enet_frame_transmit>:
 8018400:	4a1e      	ldr	r2, [pc, #120]	; (801847c <enet_frame_transmit+0x7c>)
 8018402:	b530      	push	{r4, r5, lr}
 8018404:	6813      	ldr	r3, [r2, #0]
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	2b00      	cmp	r3, #0
 801840a:	db34      	blt.n	8018476 <enet_frame_transmit+0x76>
 801840c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8018410:	4299      	cmp	r1, r3
 8018412:	d830      	bhi.n	8018476 <enet_frame_transmit+0x76>
 8018414:	b9e8      	cbnz	r0, 8018452 <enet_frame_transmit+0x52>
 8018416:	6813      	ldr	r3, [r2, #0]
 8018418:	4819      	ldr	r0, [pc, #100]	; (8018480 <enet_frame_transmit+0x80>)
 801841a:	6059      	str	r1, [r3, #4]
 801841c:	6819      	ldr	r1, [r3, #0]
 801841e:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 8018422:	6019      	str	r1, [r3, #0]
 8018424:	6941      	ldr	r1, [r0, #20]
 8018426:	6944      	ldr	r4, [r0, #20]
 8018428:	f001 0104 	and.w	r1, r1, #4
 801842c:	f004 0420 	and.w	r4, r4, #32
 8018430:	4321      	orrs	r1, r4
 8018432:	d110      	bne.n	8018456 <enet_frame_transmit+0x56>
 8018434:	6819      	ldr	r1, [r3, #0]
 8018436:	02c8      	lsls	r0, r1, #11
 8018438:	d511      	bpl.n	801845e <enet_frame_transmit+0x5e>
 801843a:	68db      	ldr	r3, [r3, #12]
 801843c:	2001      	movs	r0, #1
 801843e:	6013      	str	r3, [r2, #0]
 8018440:	bd30      	pop	{r4, r5, pc}
 8018442:	5cc5      	ldrb	r5, [r0, r3]
 8018444:	68a4      	ldr	r4, [r4, #8]
 8018446:	551d      	strb	r5, [r3, r4]
 8018448:	3301      	adds	r3, #1
 801844a:	428b      	cmp	r3, r1
 801844c:	6814      	ldr	r4, [r2, #0]
 801844e:	d1f8      	bne.n	8018442 <enet_frame_transmit+0x42>
 8018450:	e7e1      	b.n	8018416 <enet_frame_transmit+0x16>
 8018452:	2300      	movs	r3, #0
 8018454:	e7f9      	b.n	801844a <enet_frame_transmit+0x4a>
 8018456:	6141      	str	r1, [r0, #20]
 8018458:	2100      	movs	r1, #0
 801845a:	6041      	str	r1, [r0, #4]
 801845c:	e7ea      	b.n	8018434 <enet_frame_transmit+0x34>
 801845e:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8018462:	4907      	ldr	r1, [pc, #28]	; (8018480 <enet_frame_transmit+0x80>)
 8018464:	bf05      	ittet	eq
 8018466:	3310      	addeq	r3, #16
 8018468:	6809      	ldreq	r1, [r1, #0]
 801846a:	690b      	ldrne	r3, [r1, #16]
 801846c:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8018470:	bf08      	it	eq
 8018472:	185b      	addeq	r3, r3, r1
 8018474:	e7e2      	b.n	801843c <enet_frame_transmit+0x3c>
 8018476:	2000      	movs	r0, #0
 8018478:	e7e2      	b.n	8018440 <enet_frame_transmit+0x40>
 801847a:	bf00      	nop
 801847c:	2001d9c8 	andcs	sp, r1, r8, asr #19
 8018480:	40029000 	andmi	r9, r2, r0

08018484 <enet_transmit_checksum_config>:
 8018484:	6803      	ldr	r3, [r0, #0]
 8018486:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 801848a:	430b      	orrs	r3, r1
 801848c:	6003      	str	r3, [r0, #0]
 801848e:	4770      	bx	lr

08018490 <enet_mac_address_set>:
 8018490:	888a      	ldrh	r2, [r1, #4]
 8018492:	4b03      	ldr	r3, [pc, #12]	; (80184a0 <enet_mac_address_set+0x10>)
 8018494:	50c2      	str	r2, [r0, r3]
 8018496:	680a      	ldr	r2, [r1, #0]
 8018498:	3304      	adds	r3, #4
 801849a:	50c2      	str	r2, [r0, r3]
 801849c:	4770      	bx	lr
 801849e:	bf00      	nop
 80184a0:	40028040 	andmi	r8, r2, r0, asr #32

080184a4 <enet_rx_enable>:
 80184a4:	4a05      	ldr	r2, [pc, #20]	; (80184bc <enet_rx_enable+0x18>)
 80184a6:	6813      	ldr	r3, [r2, #0]
 80184a8:	f043 0304 	orr.w	r3, r3, #4
 80184ac:	6013      	str	r3, [r2, #0]
 80184ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80184b2:	6993      	ldr	r3, [r2, #24]
 80184b4:	f043 0302 	orr.w	r3, r3, #2
 80184b8:	6193      	str	r3, [r2, #24]
 80184ba:	4770      	bx	lr
 80184bc:	40028000 	andmi	r8, r2, r0

080184c0 <enet_phy_write_read>:
 80184c0:	b530      	push	{r4, r5, lr}
 80184c2:	4604      	mov	r4, r0
 80184c4:	4d13      	ldr	r5, [pc, #76]	; (8018514 <enet_phy_write_read+0x54>)
 80184c6:	0192      	lsls	r2, r2, #6
 80184c8:	6928      	ldr	r0, [r5, #16]
 80184ca:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 80184ce:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 80184d2:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 80184d6:	4302      	orrs	r2, r0
 80184d8:	02c9      	lsls	r1, r1, #11
 80184da:	b289      	uxth	r1, r1
 80184dc:	2c02      	cmp	r4, #2
 80184de:	ea42 0204 	orr.w	r2, r2, r4
 80184e2:	ea42 0201 	orr.w	r2, r2, r1
 80184e6:	bf08      	it	eq
 80184e8:	8819      	ldrheq	r1, [r3, #0]
 80184ea:	f042 0201 	orr.w	r2, r2, #1
 80184ee:	bf08      	it	eq
 80184f0:	6169      	streq	r1, [r5, #20]
 80184f2:	612a      	str	r2, [r5, #16]
 80184f4:	4907      	ldr	r1, [pc, #28]	; (8018514 <enet_phy_write_read+0x54>)
 80184f6:	4a08      	ldr	r2, [pc, #32]	; (8018518 <enet_phy_write_read+0x58>)
 80184f8:	6908      	ldr	r0, [r1, #16]
 80184fa:	07c0      	lsls	r0, r0, #31
 80184fc:	d501      	bpl.n	8018502 <enet_phy_write_read+0x42>
 80184fe:	3a01      	subs	r2, #1
 8018500:	d1fa      	bne.n	80184f8 <enet_phy_write_read+0x38>
 8018502:	690a      	ldr	r2, [r1, #16]
 8018504:	43d2      	mvns	r2, r2
 8018506:	f002 0001 	and.w	r0, r2, #1
 801850a:	b90c      	cbnz	r4, 8018510 <enet_phy_write_read+0x50>
 801850c:	694a      	ldr	r2, [r1, #20]
 801850e:	801a      	strh	r2, [r3, #0]
 8018510:	bd30      	pop	{r4, r5, pc}
 8018512:	bf00      	nop
 8018514:	40028000 	andmi	r8, r2, r0
 8018518:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

0801851c <enet_phy_config>:
 801851c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801851e:	4d22      	ldr	r5, [pc, #136]	; (80185a8 <enet_phy_config+0x8c>)
 8018520:	2001      	movs	r0, #1
 8018522:	692c      	ldr	r4, [r5, #16]
 8018524:	f7fe fdf8 	bl	8017118 <rcu_clock_freq_get>
 8018528:	4b20      	ldr	r3, [pc, #128]	; (80185ac <enet_phy_config+0x90>)
 801852a:	4a21      	ldr	r2, [pc, #132]	; (80185b0 <enet_phy_config+0x94>)
 801852c:	4403      	add	r3, r0
 801852e:	4293      	cmp	r3, r2
 8018530:	f024 041c 	bic.w	r4, r4, #28
 8018534:	d21f      	bcs.n	8018576 <enet_phy_config+0x5a>
 8018536:	f044 0408 	orr.w	r4, r4, #8
 801853a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801853e:	612c      	str	r4, [r5, #16]
 8018540:	2200      	movs	r2, #0
 8018542:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018546:	2101      	movs	r1, #1
 8018548:	2002      	movs	r0, #2
 801854a:	f10d 0306 	add.w	r3, sp, #6
 801854e:	f7ff ffb7 	bl	80184c0 <enet_phy_write_read>
 8018552:	b310      	cbz	r0, 801859a <enet_phy_config+0x7e>
 8018554:	2200      	movs	r2, #0
 8018556:	4817      	ldr	r0, [pc, #92]	; (80185b4 <enet_phy_config+0x98>)
 8018558:	f7ff feaa 	bl	80182b0 <enet_delay>
 801855c:	2101      	movs	r1, #1
 801855e:	4610      	mov	r0, r2
 8018560:	f10d 0306 	add.w	r3, sp, #6
 8018564:	f7ff ffac 	bl	80184c0 <enet_phy_write_read>
 8018568:	b1b8      	cbz	r0, 801859a <enet_phy_config+0x7e>
 801856a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801856e:	43c0      	mvns	r0, r0
 8018570:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8018574:	e012      	b.n	801859c <enet_phy_config+0x80>
 8018576:	4b10      	ldr	r3, [pc, #64]	; (80185b8 <enet_phy_config+0x9c>)
 8018578:	4a10      	ldr	r2, [pc, #64]	; (80185bc <enet_phy_config+0xa0>)
 801857a:	4403      	add	r3, r0
 801857c:	4293      	cmp	r3, r2
 801857e:	d802      	bhi.n	8018586 <enet_phy_config+0x6a>
 8018580:	f044 040c 	orr.w	r4, r4, #12
 8018584:	e7d9      	b.n	801853a <enet_phy_config+0x1e>
 8018586:	4b0e      	ldr	r3, [pc, #56]	; (80185c0 <enet_phy_config+0xa4>)
 8018588:	4a0e      	ldr	r2, [pc, #56]	; (80185c4 <enet_phy_config+0xa8>)
 801858a:	4403      	add	r3, r0
 801858c:	4293      	cmp	r3, r2
 801858e:	d3d4      	bcc.n	801853a <enet_phy_config+0x1e>
 8018590:	4b0d      	ldr	r3, [pc, #52]	; (80185c8 <enet_phy_config+0xac>)
 8018592:	4a0e      	ldr	r2, [pc, #56]	; (80185cc <enet_phy_config+0xb0>)
 8018594:	4403      	add	r3, r0
 8018596:	4293      	cmp	r3, r2
 8018598:	d902      	bls.n	80185a0 <enet_phy_config+0x84>
 801859a:	2000      	movs	r0, #0
 801859c:	b003      	add	sp, #12
 801859e:	bd30      	pop	{r4, r5, pc}
 80185a0:	f044 0404 	orr.w	r4, r4, #4
 80185a4:	e7c9      	b.n	801853a <enet_phy_config+0x1e>
 80185a6:	bf00      	nop
 80185a8:	40028000 	andmi	r8, r2, r0
 80185ac:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 80185b0:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 80185b4:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 80185b8:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 80185bc:	017d783f 	cmneq	sp, pc, lsr r8
 80185c0:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 80185c4:	02625a00 	rsbeq	r5, r2, #0, 20
 80185c8:	fa0a1f00 	blx	82a01d0 <__exidx_end+0x2841fc>
 80185cc:	01312d00 	teqeq	r1, r0, lsl #26

080185d0 <enet_init>:
 80185d0:	2300      	movs	r3, #0
 80185d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80185d4:	4604      	mov	r4, r0
 80185d6:	460d      	mov	r5, r1
 80185d8:	4616      	mov	r6, r2
 80185da:	f8ad 3006 	strh.w	r3, [sp, #6]
 80185de:	f7ff ff9d 	bl	801851c <enet_phy_config>
 80185e2:	2800      	cmp	r0, #0
 80185e4:	d039      	beq.n	801865a <enet_init+0x8a>
 80185e6:	4b3c      	ldr	r3, [pc, #240]	; (80186d8 <enet_init+0x108>)
 80185e8:	4a3c      	ldr	r2, [pc, #240]	; (80186dc <enet_init+0x10c>)
 80185ea:	6819      	ldr	r1, [r3, #0]
 80185ec:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80185f0:	400a      	ands	r2, r1
 80185f2:	601a      	str	r2, [r3, #0]
 80185f4:	2200      	movs	r2, #0
 80185f6:	605a      	str	r2, [r3, #4]
 80185f8:	609a      	str	r2, [r3, #8]
 80185fa:	60da      	str	r2, [r3, #12]
 80185fc:	6999      	ldr	r1, [r3, #24]
 80185fe:	2c01      	cmp	r4, #1
 8018600:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 8018604:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8018608:	ea4f 4111 	mov.w	r1, r1, lsr #16
 801860c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8018610:	6199      	str	r1, [r3, #24]
 8018612:	4933      	ldr	r1, [pc, #204]	; (80186e0 <enet_init+0x110>)
 8018614:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
 8018618:	61da      	str	r2, [r3, #28]
 801861a:	6988      	ldr	r0, [r1, #24]
 801861c:	4b31      	ldr	r3, [pc, #196]	; (80186e4 <enet_init+0x114>)
 801861e:	ea03 0300 	and.w	r3, r3, r0
 8018622:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8018626:	618b      	str	r3, [r1, #24]
 8018628:	680b      	ldr	r3, [r1, #0]
 801862a:	4b2f      	ldr	r3, [pc, #188]	; (80186e8 <enet_init+0x118>)
 801862c:	600b      	str	r3, [r1, #0]
 801862e:	d01e      	beq.n	801866e <enet_init+0x9e>
 8018630:	08e3      	lsrs	r3, r4, #3
 8018632:	0861      	lsrs	r1, r4, #1
 8018634:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8018638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801863c:	430b      	orrs	r3, r1
 801863e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018642:	2101      	movs	r1, #1
 8018644:	2002      	movs	r0, #2
 8018646:	f10d 0306 	add.w	r3, sp, #6
 801864a:	f7ff ff39 	bl	80184c0 <enet_phy_write_read>
 801864e:	b158      	cbz	r0, 8018668 <enet_init+0x98>
 8018650:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018654:	f7ff fe2c 	bl	80182b0 <enet_delay>
 8018658:	e05d      	b.n	8018716 <enet_init+0x146>
 801865a:	4824      	ldr	r0, [pc, #144]	; (80186ec <enet_init+0x11c>)
 801865c:	f7ff fe28 	bl	80182b0 <enet_delay>
 8018660:	f7ff ff5c 	bl	801851c <enet_phy_config>
 8018664:	2800      	cmp	r0, #0
 8018666:	d1be      	bne.n	80185e6 <enet_init+0x16>
 8018668:	2000      	movs	r0, #0
 801866a:	b003      	add	sp, #12
 801866c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801866e:	4614      	mov	r4, r2
 8018670:	4f1f      	ldr	r7, [pc, #124]	; (80186f0 <enet_init+0x120>)
 8018672:	2201      	movs	r2, #1
 8018674:	2000      	movs	r0, #0
 8018676:	4611      	mov	r1, r2
 8018678:	f10d 0306 	add.w	r3, sp, #6
 801867c:	f7ff ff20 	bl	80184c0 <enet_phy_write_read>
 8018680:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018684:	3401      	adds	r4, #1
 8018686:	f002 0204 	and.w	r2, r2, #4
 801868a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801868e:	b912      	cbnz	r2, 8018696 <enet_init+0xc6>
 8018690:	42bc      	cmp	r4, r7
 8018692:	d1ee      	bne.n	8018672 <enet_init+0xa2>
 8018694:	e7e8      	b.n	8018668 <enet_init+0x98>
 8018696:	42bc      	cmp	r4, r7
 8018698:	d0e6      	beq.n	8018668 <enet_init+0x98>
 801869a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801869e:	2101      	movs	r1, #1
 80186a0:	f8ad 2006 	strh.w	r2, [sp, #6]
 80186a4:	2002      	movs	r0, #2
 80186a6:	2200      	movs	r2, #0
 80186a8:	f7ff ff0a 	bl	80184c0 <enet_phy_write_read>
 80186ac:	2800      	cmp	r0, #0
 80186ae:	d0db      	beq.n	8018668 <enet_init+0x98>
 80186b0:	2400      	movs	r4, #0
 80186b2:	4f0f      	ldr	r7, [pc, #60]	; (80186f0 <enet_init+0x120>)
 80186b4:	2201      	movs	r2, #1
 80186b6:	2000      	movs	r0, #0
 80186b8:	4611      	mov	r1, r2
 80186ba:	f10d 0306 	add.w	r3, sp, #6
 80186be:	f7ff feff 	bl	80184c0 <enet_phy_write_read>
 80186c2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80186c6:	3401      	adds	r4, #1
 80186c8:	f002 0220 	and.w	r2, r2, #32
 80186cc:	f8ad 2006 	strh.w	r2, [sp, #6]
 80186d0:	b982      	cbnz	r2, 80186f4 <enet_init+0x124>
 80186d2:	42bc      	cmp	r4, r7
 80186d4:	d1ee      	bne.n	80186b4 <enet_init+0xe4>
 80186d6:	e7c7      	b.n	8018668 <enet_init+0x98>
 80186d8:	40028000 	andmi	r8, r2, r0
 80186dc:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 80186e0:	40029000 	andmi	r9, r2, r0
 80186e4:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 80186e8:	02c16000 	sbceq	r6, r1, #0
 80186ec:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 80186f0:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 80186f4:	42bc      	cmp	r4, r7
 80186f6:	d0b7      	beq.n	8018668 <enet_init+0x98>
 80186f8:	2101      	movs	r1, #1
 80186fa:	2210      	movs	r2, #16
 80186fc:	2000      	movs	r0, #0
 80186fe:	f7ff fedf 	bl	80184c0 <enet_phy_write_read>
 8018702:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018706:	f3c3 0480 	ubfx	r4, r3, #2, #1
 801870a:	0799      	lsls	r1, r3, #30
 801870c:	ea4f 24c4 	mov.w	r4, r4, lsl #11
 8018710:	d401      	bmi.n	8018716 <enet_init+0x146>
 8018712:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8018716:	4b63      	ldr	r3, [pc, #396]	; (80188a4 <enet_init+0x2d4>)
 8018718:	681a      	ldr	r2, [r3, #0]
 801871a:	f422 42b0 	bic.w	r2, r2, #22528	; 0x5800
 801871e:	4314      	orrs	r4, r2
 8018720:	056a      	lsls	r2, r5, #21
 8018722:	601c      	str	r4, [r3, #0]
 8018724:	d50b      	bpl.n	801873e <enet_init+0x16e>
 8018726:	681a      	ldr	r2, [r3, #0]
 8018728:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 801872c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018730:	601a      	str	r2, [r3, #0]
 8018732:	4a5d      	ldr	r2, [pc, #372]	; (80188a8 <enet_init+0x2d8>)
 8018734:	6993      	ldr	r3, [r2, #24]
 8018736:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801873a:	431d      	orrs	r5, r3
 801873c:	6195      	str	r5, [r2, #24]
 801873e:	4959      	ldr	r1, [pc, #356]	; (80188a4 <enet_init+0x2d4>)
 8018740:	684b      	ldr	r3, [r1, #4]
 8018742:	431e      	orrs	r6, r3
 8018744:	4b59      	ldr	r3, [pc, #356]	; (80188ac <enet_init+0x2dc>)
 8018746:	604e      	str	r6, [r1, #4]
 8018748:	681a      	ldr	r2, [r3, #0]
 801874a:	07d7      	lsls	r7, r2, #31
 801874c:	d510      	bpl.n	8018770 <enet_init+0x1a0>
 801874e:	685a      	ldr	r2, [r3, #4]
 8018750:	680c      	ldr	r4, [r1, #0]
 8018752:	f002 0080 	and.w	r0, r2, #128	; 0x80
 8018756:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 801875a:	4320      	orrs	r0, r4
 801875c:	6008      	str	r0, [r1, #0]
 801875e:	4852      	ldr	r0, [pc, #328]	; (80188a8 <enet_init+0x2d8>)
 8018760:	0892      	lsrs	r2, r2, #2
 8018762:	6981      	ldr	r1, [r0, #24]
 8018764:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8018768:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 801876c:	430a      	orrs	r2, r1
 801876e:	6182      	str	r2, [r0, #24]
 8018770:	681a      	ldr	r2, [r3, #0]
 8018772:	0796      	lsls	r6, r2, #30
 8018774:	d508      	bpl.n	8018788 <enet_init+0x1b8>
 8018776:	494c      	ldr	r1, [pc, #304]	; (80188a8 <enet_init+0x2d8>)
 8018778:	6898      	ldr	r0, [r3, #8]
 801877a:	680a      	ldr	r2, [r1, #0]
 801877c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8018780:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8018784:	4302      	orrs	r2, r0
 8018786:	600a      	str	r2, [r1, #0]
 8018788:	681a      	ldr	r2, [r3, #0]
 801878a:	0755      	lsls	r5, r2, #29
 801878c:	d508      	bpl.n	80187a0 <enet_init+0x1d0>
 801878e:	4946      	ldr	r1, [pc, #280]	; (80188a8 <enet_init+0x2d8>)
 8018790:	68d8      	ldr	r0, [r3, #12]
 8018792:	680a      	ldr	r2, [r1, #0]
 8018794:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 8018798:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 801879c:	4302      	orrs	r2, r0
 801879e:	600a      	str	r2, [r1, #0]
 80187a0:	681a      	ldr	r2, [r3, #0]
 80187a2:	0714      	lsls	r4, r2, #28
 80187a4:	d508      	bpl.n	80187b8 <enet_init+0x1e8>
 80187a6:	4940      	ldr	r1, [pc, #256]	; (80188a8 <enet_init+0x2d8>)
 80187a8:	6918      	ldr	r0, [r3, #16]
 80187aa:	680a      	ldr	r2, [r1, #0]
 80187ac:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80187b0:	f022 0202 	bic.w	r2, r2, #2
 80187b4:	4302      	orrs	r2, r0
 80187b6:	600a      	str	r2, [r1, #0]
 80187b8:	681a      	ldr	r2, [r3, #0]
 80187ba:	06d0      	lsls	r0, r2, #27
 80187bc:	d506      	bpl.n	80187cc <enet_init+0x1fc>
 80187be:	493a      	ldr	r1, [pc, #232]	; (80188a8 <enet_init+0x2d8>)
 80187c0:	4a3b      	ldr	r2, [pc, #236]	; (80188b0 <enet_init+0x2e0>)
 80187c2:	6988      	ldr	r0, [r1, #24]
 80187c4:	4002      	ands	r2, r0
 80187c6:	6958      	ldr	r0, [r3, #20]
 80187c8:	4302      	orrs	r2, r0
 80187ca:	618a      	str	r2, [r1, #24]
 80187cc:	681a      	ldr	r2, [r3, #0]
 80187ce:	0691      	lsls	r1, r2, #26
 80187d0:	d508      	bpl.n	80187e4 <enet_init+0x214>
 80187d2:	4935      	ldr	r1, [pc, #212]	; (80188a8 <enet_init+0x2d8>)
 80187d4:	6998      	ldr	r0, [r3, #24]
 80187d6:	698a      	ldr	r2, [r1, #24]
 80187d8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80187dc:	f022 0204 	bic.w	r2, r2, #4
 80187e0:	4302      	orrs	r2, r0
 80187e2:	618a      	str	r2, [r1, #24]
 80187e4:	681a      	ldr	r2, [r3, #0]
 80187e6:	0652      	lsls	r2, r2, #25
 80187e8:	d506      	bpl.n	80187f8 <enet_init+0x228>
 80187ea:	492e      	ldr	r1, [pc, #184]	; (80188a4 <enet_init+0x2d4>)
 80187ec:	69d8      	ldr	r0, [r3, #28]
 80187ee:	69ca      	ldr	r2, [r1, #28]
 80187f0:	0c52      	lsrs	r2, r2, #17
 80187f2:	0452      	lsls	r2, r2, #17
 80187f4:	4302      	orrs	r2, r0
 80187f6:	61ca      	str	r2, [r1, #28]
 80187f8:	681a      	ldr	r2, [r3, #0]
 80187fa:	0617      	lsls	r7, r2, #24
 80187fc:	d517      	bpl.n	801882e <enet_init+0x25e>
 80187fe:	4c29      	ldr	r4, [pc, #164]	; (80188a4 <enet_init+0x2d4>)
 8018800:	6a1a      	ldr	r2, [r3, #32]
 8018802:	69a0      	ldr	r0, [r4, #24]
 8018804:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 8018808:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 801880c:	0400      	lsls	r0, r0, #16
 801880e:	0c00      	lsrs	r0, r0, #16
 8018810:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8018814:	4301      	orrs	r1, r0
 8018816:	4824      	ldr	r0, [pc, #144]	; (80188a8 <enet_init+0x2d8>)
 8018818:	61a1      	str	r1, [r4, #24]
 801881a:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 801881e:	0a12      	lsrs	r2, r2, #8
 8018820:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 8018824:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8018828:	430a      	orrs	r2, r1
 801882a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 801882e:	681a      	ldr	r2, [r3, #0]
 8018830:	05d6      	lsls	r6, r2, #23
 8018832:	bf42      	ittt	mi
 8018834:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 8018836:	4a1b      	ldrmi	r2, [pc, #108]	; (80188a4 <enet_init+0x2d4>)
 8018838:	6091      	strmi	r1, [r2, #8]
 801883a:	681a      	ldr	r2, [r3, #0]
 801883c:	0595      	lsls	r5, r2, #22
 801883e:	bf42      	ittt	mi
 8018840:	4a18      	ldrmi	r2, [pc, #96]	; (80188a4 <enet_init+0x2d4>)
 8018842:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 8018844:	60d1      	strmi	r1, [r2, #12]
 8018846:	681a      	ldr	r2, [r3, #0]
 8018848:	0554      	lsls	r4, r2, #21
 801884a:	d508      	bpl.n	801885e <enet_init+0x28e>
 801884c:	4915      	ldr	r1, [pc, #84]	; (80188a4 <enet_init+0x2d4>)
 801884e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8018850:	684a      	ldr	r2, [r1, #4]
 8018852:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8018856:	f022 0206 	bic.w	r2, r2, #6
 801885a:	4302      	orrs	r2, r0
 801885c:	604a      	str	r2, [r1, #4]
 801885e:	681a      	ldr	r2, [r3, #0]
 8018860:	0510      	lsls	r0, r2, #20
 8018862:	d508      	bpl.n	8018876 <enet_init+0x2a6>
 8018864:	490f      	ldr	r1, [pc, #60]	; (80188a4 <enet_init+0x2d4>)
 8018866:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018868:	680a      	ldr	r2, [r1, #0]
 801886a:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 801886e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8018872:	4302      	orrs	r2, r0
 8018874:	600a      	str	r2, [r1, #0]
 8018876:	681a      	ldr	r2, [r3, #0]
 8018878:	04d1      	lsls	r1, r2, #19
 801887a:	d506      	bpl.n	801888a <enet_init+0x2ba>
 801887c:	4909      	ldr	r1, [pc, #36]	; (80188a4 <enet_init+0x2d4>)
 801887e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8018880:	680a      	ldr	r2, [r1, #0]
 8018882:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8018886:	4302      	orrs	r2, r0
 8018888:	600a      	str	r2, [r1, #0]
 801888a:	681a      	ldr	r2, [r3, #0]
 801888c:	0492      	lsls	r2, r2, #18
 801888e:	d506      	bpl.n	801889e <enet_init+0x2ce>
 8018890:	4904      	ldr	r1, [pc, #16]	; (80188a4 <enet_init+0x2d4>)
 8018892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018894:	680a      	ldr	r2, [r1, #0]
 8018896:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 801889a:	4313      	orrs	r3, r2
 801889c:	600b      	str	r3, [r1, #0]
 801889e:	2001      	movs	r0, #1
 80188a0:	e6e3      	b.n	801866a <enet_init+0x9a>
 80188a2:	bf00      	nop
 80188a4:	40028000 	andmi	r8, r2, r0
 80188a8:	40029000 	andmi	r9, r2, r0
 80188ac:	2001d9cc 	andcs	sp, r1, ip, asr #19
 80188b0:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c

080188b4 <enet_txfifo_flush>:
 80188b4:	4b06      	ldr	r3, [pc, #24]	; (80188d0 <enet_txfifo_flush+0x1c>)
 80188b6:	4807      	ldr	r0, [pc, #28]	; (80188d4 <enet_txfifo_flush+0x20>)
 80188b8:	699a      	ldr	r2, [r3, #24]
 80188ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80188be:	619a      	str	r2, [r3, #24]
 80188c0:	699a      	ldr	r2, [r3, #24]
 80188c2:	02d2      	lsls	r2, r2, #11
 80188c4:	d502      	bpl.n	80188cc <enet_txfifo_flush+0x18>
 80188c6:	3801      	subs	r0, #1
 80188c8:	d1fa      	bne.n	80188c0 <enet_txfifo_flush+0xc>
 80188ca:	4770      	bx	lr
 80188cc:	2001      	movs	r0, #1
 80188ce:	4770      	bx	lr
 80188d0:	40029000 	andmi	r9, r2, r0
 80188d4:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

080188d8 <enet_tx_enable>:
 80188d8:	4a06      	ldr	r2, [pc, #24]	; (80188f4 <enet_tx_enable+0x1c>)
 80188da:	b508      	push	{r3, lr}
 80188dc:	6813      	ldr	r3, [r2, #0]
 80188de:	f043 0308 	orr.w	r3, r3, #8
 80188e2:	6013      	str	r3, [r2, #0]
 80188e4:	f7ff ffe6 	bl	80188b4 <enet_txfifo_flush>
 80188e8:	4a03      	ldr	r2, [pc, #12]	; (80188f8 <enet_tx_enable+0x20>)
 80188ea:	6993      	ldr	r3, [r2, #24]
 80188ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80188f0:	6193      	str	r3, [r2, #24]
 80188f2:	bd08      	pop	{r3, pc}
 80188f4:	40028000 	andmi	r8, r2, r0
 80188f8:	40029000 	andmi	r9, r2, r0

080188fc <enet_enable>:
 80188fc:	b508      	push	{r3, lr}
 80188fe:	f7ff ffeb 	bl	80188d8 <enet_tx_enable>
 8018902:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018906:	f7ff bdcd 	b.w	80184a4 <enet_rx_enable>

0801890a <enet_desc_information_get>:
 801890a:	2905      	cmp	r1, #5
 801890c:	d817      	bhi.n	801893e <enet_desc_information_get+0x34>
 801890e:	e8df f001 	tbb	[pc, r1]
 8018912:	03091012 	movweq	r1, #36882	; 0x9012
 8018916:	68401007 	stmdavs	r0, {r0, r1, r2, ip}^
 801891a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801891e:	4770      	bx	lr
 8018920:	88c0      	ldrh	r0, [r0, #6]
 8018922:	e7fa      	b.n	801891a <enet_desc_information_get+0x10>
 8018924:	8840      	ldrh	r0, [r0, #2]
 8018926:	f3c0 000d 	ubfx	r0, r0, #0, #14
 801892a:	2804      	cmp	r0, #4
 801892c:	d90a      	bls.n	8018944 <enet_desc_information_get+0x3a>
 801892e:	3804      	subs	r0, #4
 8018930:	4770      	bx	lr
 8018932:	6880      	ldr	r0, [r0, #8]
 8018934:	4770      	bx	lr
 8018936:	6800      	ldr	r0, [r0, #0]
 8018938:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 801893c:	4770      	bx	lr
 801893e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018942:	4770      	bx	lr
 8018944:	2000      	movs	r0, #0
 8018946:	4770      	bx	lr

08018948 <enet_rxframe_drop>:
 8018948:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801894c:	4814      	ldr	r0, [pc, #80]	; (80189a0 <enet_rxframe_drop+0x58>)
 801894e:	b510      	push	{r4, lr}
 8018950:	6802      	ldr	r2, [r0, #0]
 8018952:	4914      	ldr	r1, [pc, #80]	; (80189a4 <enet_rxframe_drop+0x5c>)
 8018954:	6854      	ldr	r4, [r2, #4]
 8018956:	6013      	str	r3, [r2, #0]
 8018958:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 801895c:	680b      	ldr	r3, [r1, #0]
 801895e:	d009      	beq.n	8018974 <enet_rxframe_drop+0x2c>
 8018960:	b12b      	cbz	r3, 801896e <enet_rxframe_drop+0x26>
 8018962:	68da      	ldr	r2, [r3, #12]
 8018964:	6002      	str	r2, [r0, #0]
 8018966:	681a      	ldr	r2, [r3, #0]
 8018968:	b1ba      	cbz	r2, 801899a <enet_rxframe_drop+0x52>
 801896a:	600a      	str	r2, [r1, #0]
 801896c:	bd10      	pop	{r4, pc}
 801896e:	68d3      	ldr	r3, [r2, #12]
 8018970:	6003      	str	r3, [r0, #0]
 8018972:	e7fb      	b.n	801896c <enet_rxframe_drop+0x24>
 8018974:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8018978:	4c0b      	ldr	r4, [pc, #44]	; (80189a8 <enet_rxframe_drop+0x60>)
 801897a:	d006      	beq.n	801898a <enet_rxframe_drop+0x42>
 801897c:	68e2      	ldr	r2, [r4, #12]
 801897e:	6002      	str	r2, [r0, #0]
 8018980:	2b00      	cmp	r3, #0
 8018982:	d0f3      	beq.n	801896c <enet_rxframe_drop+0x24>
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	600b      	str	r3, [r1, #0]
 8018988:	e7f0      	b.n	801896c <enet_rxframe_drop+0x24>
 801898a:	6824      	ldr	r4, [r4, #0]
 801898c:	3210      	adds	r2, #16
 801898e:	f3c4 0484 	ubfx	r4, r4, #2, #5
 8018992:	4422      	add	r2, r4
 8018994:	6002      	str	r2, [r0, #0]
 8018996:	2b00      	cmp	r3, #0
 8018998:	d0e8      	beq.n	801896c <enet_rxframe_drop+0x24>
 801899a:	3310      	adds	r3, #16
 801899c:	e7f3      	b.n	8018986 <enet_rxframe_drop+0x3e>
 801899e:	bf00      	nop
 80189a0:	2001d9c4 	andcs	sp, r1, r4, asr #19
 80189a4:	2001d9bc 			; <UNDEFINED> instruction: 0x2001d9bc
 80189a8:	40029000 	andmi	r9, r2, r0

080189ac <enet_rxframe_size_get>:
 80189ac:	b508      	push	{r3, lr}
 80189ae:	4b0c      	ldr	r3, [pc, #48]	; (80189e0 <enet_rxframe_size_get+0x34>)
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	6818      	ldr	r0, [r3, #0]
 80189b4:	2800      	cmp	r0, #0
 80189b6:	db10      	blt.n	80189da <enet_rxframe_size_get+0x2e>
 80189b8:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
 80189bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80189c0:	d003      	beq.n	80189ca <enet_rxframe_size_get+0x1e>
 80189c2:	f7ff ffc1 	bl	8018948 <enet_rxframe_drop>
 80189c6:	2001      	movs	r0, #1
 80189c8:	bd08      	pop	{r3, pc}
 80189ca:	f000 0321 	and.w	r3, r0, #33	; 0x21
 80189ce:	2b21      	cmp	r3, #33	; 0x21
 80189d0:	d0f7      	beq.n	80189c2 <enet_rxframe_size_get+0x16>
 80189d2:	f3c0 400d 	ubfx	r0, r0, #16, #14
 80189d6:	3804      	subs	r0, #4
 80189d8:	e7f6      	b.n	80189c8 <enet_rxframe_size_get+0x1c>
 80189da:	2000      	movs	r0, #0
 80189dc:	e7f4      	b.n	80189c8 <enet_rxframe_size_get+0x1c>
 80189de:	bf00      	nop
 80189e0:	2001d9c4 	andcs	sp, r1, r4, asr #19

080189e4 <enet_initpara_reset>:
 80189e4:	2200      	movs	r2, #0
 80189e6:	4b08      	ldr	r3, [pc, #32]	; (8018a08 <enet_initpara_reset+0x24>)
 80189e8:	e9c3 2200 	strd	r2, r2, [r3]
 80189ec:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80189f0:	e9c3 2204 	strd	r2, r2, [r3, #16]
 80189f4:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80189f8:	e9c3 2208 	strd	r2, r2, [r3, #32]
 80189fc:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8018a00:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 8018a04:	639a      	str	r2, [r3, #56]	; 0x38
 8018a06:	4770      	bx	lr
 8018a08:	2001d9cc 	andcs	sp, r1, ip, asr #19

08018a0c <enet_deinit>:
 8018a0c:	b508      	push	{r3, lr}
 8018a0e:	f640 200e 	movw	r0, #2574	; 0xa0e
 8018a12:	f7fe fac0 	bl	8016f96 <rcu_periph_reset_enable>
 8018a16:	f640 200e 	movw	r0, #2574	; 0xa0e
 8018a1a:	f7fe fabe 	bl	8016f9a <rcu_periph_reset_disable>
 8018a1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018a22:	f7ff bfdf 	b.w	80189e4 <enet_initpara_reset>
	...

08018a28 <i2c_clock_config>:
 8018a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a2a:	4605      	mov	r5, r0
 8018a2c:	2002      	movs	r0, #2
 8018a2e:	460c      	mov	r4, r1
 8018a30:	4617      	mov	r7, r2
 8018a32:	f7fe fb71 	bl	8017118 <rcu_clock_freq_get>
 8018a36:	4603      	mov	r3, r0
 8018a38:	4828      	ldr	r0, [pc, #160]	; (8018adc <i2c_clock_config+0xb4>)
 8018a3a:	4a29      	ldr	r2, [pc, #164]	; (8018ae0 <i2c_clock_config+0xb8>)
 8018a3c:	fbb3 f0f0 	udiv	r0, r3, r0
 8018a40:	4293      	cmp	r3, r2
 8018a42:	bf94      	ite	ls
 8018a44:	4601      	movls	r1, r0
 8018a46:	213f      	movhi	r1, #63	; 0x3f
 8018a48:	686e      	ldr	r6, [r5, #4]
 8018a4a:	4a26      	ldr	r2, [pc, #152]	; (8018ae4 <i2c_clock_config+0xbc>)
 8018a4c:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8018a50:	430e      	orrs	r6, r1
 8018a52:	4294      	cmp	r4, r2
 8018a54:	606e      	str	r6, [r5, #4]
 8018a56:	d816      	bhi.n	8018a86 <i2c_clock_config+0x5e>
 8018a58:	3001      	adds	r0, #1
 8018a5a:	283e      	cmp	r0, #62	; 0x3e
 8018a5c:	d90d      	bls.n	8018a7a <i2c_clock_config+0x52>
 8018a5e:	223f      	movs	r2, #63	; 0x3f
 8018a60:	622a      	str	r2, [r5, #32]
 8018a62:	0064      	lsls	r4, r4, #1
 8018a64:	fbb3 f4f4 	udiv	r4, r3, r4
 8018a68:	2c04      	cmp	r4, #4
 8018a6a:	bf38      	it	cc
 8018a6c:	2404      	movcc	r4, #4
 8018a6e:	69ea      	ldr	r2, [r5, #28]
 8018a70:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8018a74:	4314      	orrs	r4, r2
 8018a76:	61ec      	str	r4, [r5, #28]
 8018a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a7a:	2802      	cmp	r0, #2
 8018a7c:	d801      	bhi.n	8018a82 <i2c_clock_config+0x5a>
 8018a7e:	2202      	movs	r2, #2
 8018a80:	e7ee      	b.n	8018a60 <i2c_clock_config+0x38>
 8018a82:	6228      	str	r0, [r5, #32]
 8018a84:	e7ed      	b.n	8018a62 <i2c_clock_config+0x3a>
 8018a86:	4a18      	ldr	r2, [pc, #96]	; (8018ae8 <i2c_clock_config+0xc0>)
 8018a88:	4294      	cmp	r4, r2
 8018a8a:	d8f5      	bhi.n	8018a78 <i2c_clock_config+0x50>
 8018a8c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8018a90:	4351      	muls	r1, r2
 8018a92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018a96:	fbb1 f1f2 	udiv	r1, r1, r2
 8018a9a:	3101      	adds	r1, #1
 8018a9c:	6229      	str	r1, [r5, #32]
 8018a9e:	b9a7      	cbnz	r7, 8018aca <i2c_clock_config+0xa2>
 8018aa0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018aa4:	fbb3 f4f4 	udiv	r4, r3, r4
 8018aa8:	69eb      	ldr	r3, [r5, #28]
 8018aaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8018aae:	61eb      	str	r3, [r5, #28]
 8018ab0:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8018ab4:	b90b      	cbnz	r3, 8018aba <i2c_clock_config+0x92>
 8018ab6:	f044 0401 	orr.w	r4, r4, #1
 8018aba:	69eb      	ldr	r3, [r5, #28]
 8018abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018ac0:	61eb      	str	r3, [r5, #28]
 8018ac2:	69eb      	ldr	r3, [r5, #28]
 8018ac4:	4323      	orrs	r3, r4
 8018ac6:	61eb      	str	r3, [r5, #28]
 8018ac8:	e7d6      	b.n	8018a78 <i2c_clock_config+0x50>
 8018aca:	2219      	movs	r2, #25
 8018acc:	4354      	muls	r4, r2
 8018ace:	fbb3 f4f4 	udiv	r4, r3, r4
 8018ad2:	69eb      	ldr	r3, [r5, #28]
 8018ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018ad8:	e7e9      	b.n	8018aae <i2c_clock_config+0x86>
 8018ada:	bf00      	nop
 8018adc:	000f4240 	andeq	r4, pc, r0, asr #4
 8018ae0:	03c14dbf 	biceq	r4, r1, #12224	; 0x2fc0
 8018ae4:	000186a0 	andeq	r8, r1, r0, lsr #13
 8018ae8:	00061a80 	andeq	r1, r6, r0, lsl #21

08018aec <i2c_ack_config>:
 8018aec:	6803      	ldr	r3, [r0, #0]
 8018aee:	2901      	cmp	r1, #1
 8018af0:	bf0c      	ite	eq
 8018af2:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 8018af6:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8018afa:	6003      	str	r3, [r0, #0]
 8018afc:	4770      	bx	lr

08018afe <i2c_ackpos_config>:
 8018afe:	6803      	ldr	r3, [r0, #0]
 8018b00:	b919      	cbnz	r1, 8018b0a <i2c_ackpos_config+0xc>
 8018b02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018b06:	6003      	str	r3, [r0, #0]
 8018b08:	4770      	bx	lr
 8018b0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018b0e:	e7fa      	b.n	8018b06 <i2c_ackpos_config+0x8>

08018b10 <i2c_master_addressing>:
 8018b10:	3202      	adds	r2, #2
 8018b12:	bf0c      	ite	eq
 8018b14:	f021 0101 	biceq.w	r1, r1, #1
 8018b18:	f041 0101 	orrne.w	r1, r1, #1
 8018b1c:	6101      	str	r1, [r0, #16]
 8018b1e:	4770      	bx	lr

08018b20 <i2c_enable>:
 8018b20:	6803      	ldr	r3, [r0, #0]
 8018b22:	f043 0301 	orr.w	r3, r3, #1
 8018b26:	6003      	str	r3, [r0, #0]
 8018b28:	4770      	bx	lr

08018b2a <i2c_start_on_bus>:
 8018b2a:	6803      	ldr	r3, [r0, #0]
 8018b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018b30:	6003      	str	r3, [r0, #0]
 8018b32:	4770      	bx	lr

08018b34 <i2c_stop_on_bus>:
 8018b34:	6803      	ldr	r3, [r0, #0]
 8018b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8018b3a:	6003      	str	r3, [r0, #0]
 8018b3c:	4770      	bx	lr

08018b3e <i2c_data_transmit>:
 8018b3e:	6101      	str	r1, [r0, #16]
 8018b40:	4770      	bx	lr

08018b42 <i2c_data_receive>:
 8018b42:	6900      	ldr	r0, [r0, #16]
 8018b44:	b2c0      	uxtb	r0, r0
 8018b46:	4770      	bx	lr

08018b48 <i2c_flag_get>:
 8018b48:	098b      	lsrs	r3, r1, #6
 8018b4a:	581a      	ldr	r2, [r3, r0]
 8018b4c:	2301      	movs	r3, #1
 8018b4e:	f001 011f 	and.w	r1, r1, #31
 8018b52:	408b      	lsls	r3, r1
 8018b54:	4213      	tst	r3, r2
 8018b56:	bf14      	ite	ne
 8018b58:	2001      	movne	r0, #1
 8018b5a:	2000      	moveq	r0, #0
 8018b5c:	4770      	bx	lr

08018b5e <i2c_flag_clear>:
 8018b5e:	f240 5301 	movw	r3, #1281	; 0x501
 8018b62:	4299      	cmp	r1, r3
 8018b64:	b510      	push	{r4, lr}
 8018b66:	d102      	bne.n	8018b6e <i2c_flag_clear+0x10>
 8018b68:	6943      	ldr	r3, [r0, #20]
 8018b6a:	6983      	ldr	r3, [r0, #24]
 8018b6c:	bd10      	pop	{r4, pc}
 8018b6e:	2201      	movs	r2, #1
 8018b70:	098c      	lsrs	r4, r1, #6
 8018b72:	5823      	ldr	r3, [r4, r0]
 8018b74:	f001 011f 	and.w	r1, r1, #31
 8018b78:	408a      	lsls	r2, r1
 8018b7a:	ea23 0302 	bic.w	r3, r3, r2
 8018b7e:	5023      	str	r3, [r4, r0]
 8018b80:	e7f4      	b.n	8018b6c <i2c_flag_clear+0xe>
	...

08018b84 <mac_address_get(unsigned char*)>:
 8018b84:	2102      	movs	r1, #2
 8018b86:	4a07      	ldr	r2, [pc, #28]	; (8018ba4 <mac_address_get(unsigned char*)+0x20>)
 8018b88:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8018b8c:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 8018b90:	7001      	strb	r1, [r0, #0]
 8018b92:	7042      	strb	r2, [r0, #1]
 8018b94:	0e1a      	lsrs	r2, r3, #24
 8018b96:	7082      	strb	r2, [r0, #2]
 8018b98:	0c1a      	lsrs	r2, r3, #16
 8018b9a:	70c2      	strb	r2, [r0, #3]
 8018b9c:	0a1a      	lsrs	r2, r3, #8
 8018b9e:	7102      	strb	r2, [r0, #4]
 8018ba0:	7143      	strb	r3, [r0, #5]
 8018ba2:	4770      	bx	lr
 8018ba4:	1ffff000 	svcne	0x00fff000

08018ba8 <__popcountsi2>:
 8018ba8:	0843      	lsrs	r3, r0, #1
 8018baa:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8018bae:	1ac0      	subs	r0, r0, r3
 8018bb0:	0883      	lsrs	r3, r0, #2
 8018bb2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8018bb6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8018bba:	4418      	add	r0, r3
 8018bbc:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8018bc0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8018bc4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8018bc8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8018bcc:	0e00      	lsrs	r0, r0, #24
 8018bce:	4770      	bx	lr

Disassembly of section .rodata:

08018bd0 <vtable for DisplayHandler-0xe0>:
 8018bd0:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8018bd4:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8018be0:	03020100 	movweq	r0, #8448	; 0x2100
 8018be4:	08070604 	stmdaeq	r7, {r2, r9, sl}
 8018be8:	00000009 	andeq	r0, r0, r9
 8018bec:	03020100 	movweq	r0, #8448	; 0x2100
 8018bf0:	3a732504 	bcc	9ce2008 <__exidx_end+0x1cc6034>
 8018bf4:	31007525 	tstcc	r0, r5, lsr #10
 8018bf8:	35353a39 	ldrcc	r3, [r5, #-2617]!	; 0xfffff5c7
 8018bfc:	0030303a 	eorseq	r3, r0, sl, lsr r0
 8018c00:	2074634f 	rsbscs	r6, r4, pc, asr #6
 8018c04:	32203031 	eorcc	r3, r0, #49	; 0x31
 8018c08:	00323230 	eorseq	r3, r2, r0, lsr r2
 8018c0c:	32335b1b 	eorscc	r5, r3, #27648	; 0x6c00
 8018c10:	7472416d 	ldrbtvc	r4, [r2], #-365	; 0xfffffe93
 8018c14:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 8018c18:	50203420 	eorpl	r3, r0, r0, lsr #8
 8018c1c:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 8018c20:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8018c24:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 8018a5c <i2c_clock_config+0x34>
 8018c28:	2072656c 	rsbscs	r6, r2, ip, ror #10
 8018c2c:	2078387b 	rsbscs	r3, r8, fp, ror r8
 8018c30:	6e552034 	mrcvs	0, 2, r2, cr5, cr4, {1}
 8018c34:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8018c38:	7d736573 	cfldr64vc	mvdx6, [r3, #-460]!	; 0xfffffe34
 8018c3c:	37335b1b 			; <UNDEFINED> instruction: 0x37335b1b
 8018c40:	5f2e006d 	svcpl	0x002e006d
 8018c44:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 8018c48:	2e006769 	cdpcs	7, 0, cr6, cr0, cr9, {3}
 8018c4c:	7474685f 	ldrbtvc	r6, [r4], #-2143	; 0xfffff7a1
 8018c50:	6f6e0070 	svcvs	0x006e0070
 8018c54:	413d6564 	teqmi	sp, r4, ror #10
 8018c58:	4e2d7472 	mcrmi	4, 1, r7, cr13, cr2, {3}
 8018c5c:	50207465 	eorpl	r7, r0, r5, ror #8
 8018c60:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 8018c64:	74724100 	ldrbtvc	r4, [r2], #-256	; 0xffffff00
 8018c68:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 8018c6c:	78695020 	stmdavc	r9!, {r5, ip, lr}^
 8018c70:	25206c65 	strcs	r6, [r0, #-3173]!	; 0xfffff39b
 8018c74:	73252d64 			; <UNDEFINED> instruction: 0x73252d64
 8018c78:	0064253a 	rsbeq	r2, r4, sl, lsr r5
 8018c7c:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8018c80:	37303246 	ldrcc	r3, [r0, -r6, asr #4]!
 8018c84:	50204752 	eorpl	r4, r0, r2, asr r7
 8018c88:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 8018c8c:	74724100 	ldrbtvc	r4, [r2], #-256	; 0xffffff00
 8018c90:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8018c94:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8018c98:	6425206c 	strtvs	r2, [r5], #-108	; 0xffffff94
 8018c9c:	00642578 	rsbeq	r2, r4, r8, ror r5
 8018ca0:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 8018ca4:	25472064 	strbcs	r2, [r7, #-100]	; 0xffffff9c
 8018ca8:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8018cac:	00000000 	andeq	r0, r0, r0

08018cb0 <vtable for DisplayHandler>:
	...
 8018cb8:	08008619 	stmdaeq	r0, {r0, r3, r4, r9, sl, pc}
 8018cbc:	0800866f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r9, sl, pc}
 8018cc0:	08008755 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, sl, pc}

08018cc4 <vtable for DisplayUdfHandler>:
	...
 8018ccc:	0800861b 	stmdaeq	r0, {r0, r1, r3, r4, r9, sl, pc}
 8018cd0:	0800867b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r9, sl, pc}
 8018cd4:	08008711 	stmdaeq	r0, {r0, r4, r8, r9, sl, pc}
 8018cd8:	0800861d 	stmdaeq	r0, {r0, r2, r3, r4, r9, sl, pc}
 8018cdc:	080086fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sl, pc}
 8018ce0:	080086e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, sl, pc}
 8018ce4:	080086d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r9, sl, pc}
 8018ce8:	080086c1 	stmdaeq	r0, {r0, r6, r7, r9, sl, pc}
 8018cec:	080086ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r9, sl, pc}
 8018cf0:	0800861f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r9, sl, pc}
 8018cf4:	08008621 	stmdaeq	r0, {r0, r5, r9, sl, pc}

08018cf8 <vtable for ArtNetTriggerHandler>:
	...
 8018d00:	08008623 	stmdaeq	r0, {r0, r1, r5, r9, sl, pc}
 8018d04:	08008687 	stmdaeq	r0, {r0, r1, r2, r7, r9, sl, pc}
 8018d08:	08008a3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, fp, pc}

08018d0c <vtable for PixelDmxStartStop>:
	...
 8018d14:	08008625 	stmdaeq	r0, {r0, r2, r5, r9, sl, pc}
 8018d18:	08008693 	stmdaeq	r0, {r0, r1, r4, r7, r9, sl, pc}
 8018d1c:	08008629 	stmdaeq	r0, {r0, r3, r5, r9, sl, pc}
 8018d20:	08008635 	stmdaeq	r0, {r0, r2, r4, r5, r9, sl, pc}

08018d24 <vtable for RDMNetDevice>:
	...
 8018d2c:	080087a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, r9, sl, pc}
 8018d30:	080087cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, sl, pc}
 8018d34:	0800f083 	stmdaeq	r0, {r0, r1, r7, ip, sp, lr, pc}
 8018d38:	0800f085 	stmdaeq	r0, {r0, r2, r7, ip, sp, lr, pc}
 8018d3c:	08008641 	stmdaeq	r0, {r0, r6, r9, sl, pc}
 8018d40:	08008655 	stmdaeq	r0, {r0, r2, r4, r6, r9, sl, pc}
 8018d44:	08008725 	stmdaeq	r0, {r0, r2, r5, r8, r9, sl, pc}
 8018d48:	ffffff34 			; <UNDEFINED> instruction: 0xffffff34
 8018d4c:	00000000 	andeq	r0, r0, r0
 8018d50:	080087c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, r9, sl, pc}
 8018d54:	080087df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r8, r9, sl, pc}
 8018d58:	0800864d 	stmdaeq	r0, {r0, r2, r3, r6, r9, sl, pc}
 8018d5c:	08008665 	stmdaeq	r0, {r0, r2, r5, r6, r9, sl, pc}
 8018d60:	08008739 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, sl, pc}

08018d64 <vtable for FactoryDefaults>:
	...
 8018d6c:	0800866d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, pc}
 8018d70:	0800869f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, r9, sl, pc}
 8018d74:	08008af1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r9, fp, pc}

08018d78 <CSWTCH.88>:
 8018d78:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 8018d7c:	 	eorcc	r3, lr, #-2147483631	; 0x80000011

08018d7d <SOFTWARE_VERSION>:
 8018d7d:	00322e31 	eorseq	r2, r2, r1, lsr lr

08018d81 <gamma10_0>:
 8018d81:	03020100 	movweq	r0, #8448	; 0x2100
 8018d85:	07060504 	streq	r0, [r6, -r4, lsl #10]
 8018d89:	0b0a0908 	bleq	829b1b1 <__exidx_end+0x27f1dd>
 8018d8d:	0f0e0d0c 	svceq	0x000e0d0c
 8018d91:	13121110 	tstne	r2, #16, 2
 8018d95:	17161514 			; <UNDEFINED> instruction: 0x17161514
 8018d99:	1b1a1918 	blne	869f201 <__exidx_end+0x68322d>
 8018d9d:	1f1e1d1c 	svcne	0x001e1d1c
 8018da1:	23222120 			; <UNDEFINED> instruction: 0x23222120
 8018da5:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 8018da9:	2b2a2928 	blcs	8aa3251 <__exidx_end+0xa8727d>
 8018dad:	2f2e2d2c 	svccs	0x002e2d2c
 8018db1:	33323130 	teqcc	r2, #48, 2
 8018db5:	37363534 			; <UNDEFINED> instruction: 0x37363534
 8018db9:	3b3a3938 	blcc	8ea72a1 <__exidx_end+0xe8b2cd>
 8018dbd:	3f3e3d3c 	svccc	0x003e3d3c
 8018dc1:	43424140 	movtmi	r4, #8512	; 0x2140
 8018dc5:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 8018dc9:	4b4a4948 	blmi	92ab2f1 <__exidx_end+0x128f31d>
 8018dcd:	4f4e4d4c 	svcmi	0x004e4d4c
 8018dd1:	53525150 	cmppl	r2, #80, 2
 8018dd5:	57565554 			; <UNDEFINED> instruction: 0x57565554
 8018dd9:	5b5a5958 	blpl	96af341 <__exidx_end+0x169336d>
 8018ddd:	5f5e5d5c 	svcpl	0x005e5d5c
 8018de1:	63626160 	cmnvs	r2, #96, 2
 8018de5:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 8018de9:	6b6a6968 	blvs	9ab3391 <__exidx_end+0x1a973bd>
 8018ded:	6f6e6d6c 	svcvs	0x006e6d6c
 8018df1:	73727170 	cmnvc	r2, #112, 2
 8018df5:	77767574 			; <UNDEFINED> instruction: 0x77767574
 8018df9:	7b7a7978 	blvc	9eb73e1 <__exidx_end+0x1e9b40d>
 8018dfd:	7f7e7d7c 	svcvc	0x007e7d7c
 8018e01:	83828180 	orrhi	r8, r2, #128, 2
 8018e05:	87868584 	strhi	r8, [r6, r4, lsl #11]
 8018e09:	8b8a8988 	blhi	62bb431 <__stack_size+0x62b8c31>
 8018e0d:	8f8e8d8c 	svchi	0x008e8d8c
 8018e11:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 8018e15:	97969594 			; <UNDEFINED> instruction: 0x97969594
 8018e19:	9b9a9998 	blls	66bf481 <__stack_size+0x66bcc81>
 8018e1d:	9f9e9d9c 	svcls	0x009e9d9c
 8018e21:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 8018e25:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 8018e29:	abaaa9a8 	blge	6ac34d1 <__stack_size+0x6ac0cd1>
 8018e2d:	afaeadac 	svcge	0x00aeadac
 8018e31:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 8018e35:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 8018e39:	bbbab9b8 	bllt	6ec7521 <__stack_size+0x6ec4d21>
 8018e3d:	bfbebdbc 	svclt	0x00bebdbc
 8018e41:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 8018e45:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 8018e49:	cbcac9c8 	blgt	72cb571 <__stack_size+0x72c8d71>
 8018e4d:	cfcecdcc 	svcgt	0x00cecdcc
 8018e51:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 8018e55:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 8018e59:	dbdad9d8 	blle	76cf5c1 <__stack_size+0x76ccdc1>
 8018e5d:	dfdedddc 	svcle	0x00dedddc
 8018e61:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 8018e65:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 8018e69:	ebeae9e8 	bl	7ad3611 <__stack_size+0x7ad0e11>
 8018e6d:	efeeedec 	svc	0x00eeedec
 8018e71:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 8018e75:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 8018e79:	fbfaf9f8 	blx	7ed7663 <__stack_size+0x7ed4e63>
 8018e7d:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc

08018e81 <SOFTWARE_VERSION>:
 8018e81:	00322e31 	eorseq	r2, r2, r1, lsr lr
 8018e85:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8018e89:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8018e8d:	2c64252e 	cfstr64cs	mvdx2, [r4], #-184	; 0xffffff48
 8018e91:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 8018e95:	64252c73 	strtvs	r2, [r5], #-3187	; 0xfffff38d
 8018e99:	0a73252c 	beq	9ce2351 <__exidx_end+0x1cc637d>
 8018e9d:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 8018ea1:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8018ea5:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8018ea9:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 8018ead:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 8018eb1:	4f000a64 	svcmi	0x00000a64
 8018eb5:	664f006e 	strbvs	r0, [pc], -lr, rrx
 8018eb9:	69640066 	stmdbvs	r4!, {r1, r2, r5, r6}^
 8018ebd:	616c7073 	smcvs	50947	; 0xc703
 8018ec1:	73253a79 			; <UNDEFINED> instruction: 0x73253a79
 8018ec5:	6674000a 	ldrbtvs	r0, [r4], -sl
 8018ec9:	253a7074 	ldrcs	r7, [sl, #-116]!	; 0xffffff8c
 8018ecd:	76000a73 			; <UNDEFINED> instruction: 0x76000a73
 8018ed1:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8018ed5:	253a6e6f 	ldrcs	r6, [sl, #-3695]!	; 0xfffff191
 8018ed9:	70750073 	rsbsvc	r0, r5, r3, ror r0
 8018edd:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8018ee1:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 8018ee5:	54000a73 	strpl	r0, [r0], #-2675	; 0xfffff58d
 8018ee9:	20505446 	subscs	r5, r0, r6, asr #8
 8018eed:	20206e4f 	eorcs	r6, r0, pc, asr #28
 8018ef1:	6265525b 	rsbvs	r5, r5, #-1342177275	; 0xb0000005
 8018ef5:	5d746f6f 	ldclpl	15, cr6, [r4, #-444]!	; 0xfffffe44
 8018ef9:	54465400 	strbpl	r5, [r6], #-1024	; 0xfffffc00
 8018efd:	664f2050 			; <UNDEFINED> instruction: 0x664f2050
 8018f01:	525b2066 	subspl	r2, fp, #102	; 0x66
 8018f05:	6f6f6265 	svcvs	0x006f6265
 8018f09:	00205d74 	eoreq	r5, r0, r4, ror sp
 8018f0d:	4f525245 	svcmi	0x00525245
 8018f11:	673f2352 			; <UNDEFINED> instruction: 0x673f2352
 8018f15:	000a7465 	andeq	r7, sl, r5, ror #8
 8018f19:	70746674 	rsbsvc	r6, r4, r4, ror r6
 8018f1d:	69640023 	stmdbvs	r4!, {r0, r1, r5}^
 8018f21:	616c7073 	smcvs	50947	; 0xc703
 8018f25:	45002379 	strmi	r2, [r0, #-889]	; 0xfffffc87
 8018f29:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 8018f2d:	000a2123 	andeq	r2, sl, r3, lsr #2
 8018f31:	4f525245 	svcmi	0x00525245
 8018f35:	0a3f2352 	beq	8fe1c85 <__exidx_end+0xfc5cb1>
 8018f39:	62657200 	rsbvs	r7, r5, #0, 4
 8018f3d:	23746f6f 	cmncs	r4, #444	; 0x1bc
 8018f41:	696c0023 	stmdbvs	ip!, {r0, r1, r5}^
 8018f45:	00237473 	eoreq	r7, r3, r3, ror r4
 8018f49:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8018f4d:	75002a23 	strvc	r2, [r0, #-2595]	; 0xfffff5dd
 8018f51:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8018f55:	76002365 	strvc	r2, [r0], -r5, ror #6
 8018f59:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8018f5d:	00236e6f 	eoreq	r6, r3, pc, ror #28
 8018f61:	23746567 	cmncs	r4, #432013312	; 0x19c00000
 8018f65:	63616600 	cmnvs	r1, #0, 12
 8018f69:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8018f6d:	 	tstmi	r0, r3, lsr #6

08018f70 <s_Node>:
 8018f70:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8018f74:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8018f80:	41730000 	cmnmi	r3, r0
 8018f84:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 8018f88:	31332e31 	teqcc	r3, r1, lsr lr
	...
 8018f94:	2043534f 	subcs	r5, r3, pc, asr #6
 8018f98:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8018f9c:	00007265 	andeq	r7, r0, r5, ror #4
 8018fa0:	00000000 	andeq	r0, r0, r0
 8018fa4:	544c0000 	strbpl	r0, [ip], #-0
 8018fa8:	00000043 	andeq	r0, r0, r3, asr #32
	...
 8018fb8:	2043534f 	subcs	r5, r3, pc, asr #6
 8018fbc:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 8018fc0:	0000746e 	andeq	r7, r0, lr, ror #8
 8018fc4:	00000000 	andeq	r0, r0, r0
 8018fc8:	44520000 	ldrbmi	r0, [r2], #-0
 8018fcc:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 8018fd0:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 8018fd4:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 8018fd8:	0000796c 	andeq	r7, r0, ip, ror #18
 8018fdc:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 8018fe0:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 8018fec:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 8018ff0:	00004944 	andeq	r4, r0, r4, asr #18
	...
 8019000:	00504444 	subseq	r4, r0, r4, asr #8
	...
 8019010:	69500000 	ldmdbvs	r0, {}^	; <UNPREDICTABLE>
 8019014:	506c6578 	rsbpl	r6, ip, r8, ror r5
 8019018:	65687375 	strbvs	r7, [r8, #-885]!	; 0xfffffc8b
 801901c:	00000072 	andeq	r0, r0, r2, ror r0
 8019020:	00000000 	andeq	r0, r0, r0
 8019024:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
	...

08019036 <s_Output>:
 8019036:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 8019042:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 801904e:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 8019052:	00726f74 	rsbseq	r6, r2, r4, ror pc
 8019056:	00000000 	andeq	r0, r0, r0
 801905a:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 801905e:	0000006c 	andeq	r0, r0, ip, rrx
 8019062:	00000000 	andeq	r0, r0, r0
 8019066:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 801906a:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 801906e:	00000000 	andeq	r0, r0, r0
 8019072:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 801907e:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8019082:	00006769 	andeq	r6, r0, r9, ror #14
 8019086:	00000000 	andeq	r0, r0, r0
 801908a:	70657453 	rsbvc	r7, r5, r3, asr r4
 801908e:	00726570 	rsbseq	r6, r2, r0, ror r5
 8019092:	00000000 	andeq	r0, r0, r0
 8019096:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 801909a:	00007265 	andeq	r7, r0, r5, ror #4
 801909e:	00000000 	andeq	r0, r0, r0
 80190a2:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80190a6:	0074654e 	rsbseq	r6, r4, lr, asr #10
 80190aa:	00000000 	andeq	r0, r0, r0
 80190ae:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 80190b2:	00006c61 	andeq	r6, r0, r1, ror #24
 80190b6:	00000000 	andeq	r0, r0, r0
 80190ba:	20424752 	subcs	r4, r2, r2, asr r7
 80190be:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 80190c2:	0000006c 	andeq	r0, r0, ip, rrx
	...

080190c8 <RemoteConfig::s_GET>:
 80190c8:	0800a68d 	stmdaeq	r0, {r0, r2, r3, r7, r9, sl, sp, pc}
 80190cc:	00000000 	andeq	r0, r0, r0
 80190d0:	08018f3a 	stmdaeq	r1, {r1, r3, r4, r5, r8, r9, sl, fp, pc}
 80190d4:	00000008 	andeq	r0, r0, r8
 80190d8:	08009b2d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9, fp, ip, pc}
 80190dc:	00000000 	andeq	r0, r0, r0
 80190e0:	08018f43 	stmdaeq	r1, {r0, r1, r6, r8, r9, sl, fp, pc}
 80190e4:	00000005 	andeq	r0, r0, r5
 80190e8:	08009b2d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9, fp, ip, pc}
 80190ec:	00000000 	andeq	r0, r0, r0
 80190f0:	08018f49 	stmdaeq	r1, {r0, r3, r6, r8, r9, sl, fp, pc}
 80190f4:	00000006 	andeq	r0, r0, r6
 80190f8:	08009ce1 	stmdaeq	r0, {r0, r5, r6, r7, sl, fp, ip, pc}
 80190fc:	00000000 	andeq	r0, r0, r0
 8019100:	08018f50 	stmdaeq	r1, {r4, r6, r8, r9, sl, fp, pc}
 8019104:	00000007 	andeq	r0, r0, r7
 8019108:	08009ca1 	stmdaeq	r0, {r0, r5, r7, sl, fp, ip, pc}
 801910c:	00000000 	andeq	r0, r0, r0
 8019110:	08018f58 	stmdaeq	r1, {r3, r4, r6, r8, r9, sl, fp, pc}
 8019114:	00000008 	andeq	r0, r0, r8
 8019118:	08009bfd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, pc}
 801911c:	00000000 	andeq	r0, r0, r0
 8019120:	08018f1f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, r9, sl, fp, pc}
 8019124:	00000008 	andeq	r0, r0, r8
 8019128:	08009fb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, sl, fp, ip, pc}
 801912c:	00000000 	andeq	r0, r0, r0
 8019130:	08018f61 	stmdaeq	r1, {r0, r5, r6, r8, r9, sl, fp, pc}
 8019134:	00010004 	andeq	r0, r1, r4
 8019138:	08009c51 	stmdaeq	r0, {r0, r4, r6, sl, fp, ip, pc}
 801913c:	00000000 	andeq	r0, r0, r0
 8019140:	08018f19 	stmdaeq	r1, {r0, r3, r4, r8, r9, sl, fp, pc}
 8019144:	00000005 	andeq	r0, r0, r5
 8019148:	0800a37d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sp, pc}
 801914c:	00000000 	andeq	r0, r0, r0
 8019150:	08018f66 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, sl, fp, pc}
 8019154:	00000009 	andeq	r0, r0, r9

08019158 <RemoteConfig::s_SET>:
 8019158:	08009d8d 	stmdaeq	r0, {r0, r2, r3, r7, r8, sl, fp, ip, pc}
 801915c:	00000000 	andeq	r0, r0, r0
 8019160:	08018f19 	stmdaeq	r1, {r0, r3, r4, r8, r9, sl, fp, pc}
 8019164:	00010005 	andeq	r0, r1, r5
 8019168:	08009d65 	stmdaeq	r0, {r0, r2, r5, r6, r8, sl, fp, ip, pc}
 801916c:	00000000 	andeq	r0, r0, r0
 8019170:	08018f1f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, r9, sl, fp, pc}
 8019174:	00010008 	andeq	r0, r1, r8
 8019178:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801917c:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	; 0xffffff18
 8019180:	73252300 			; <UNDEFINED> instruction: 0x73252300
 8019184:	0a64253d 	beq	9922680 <__exidx_end+0x19066ac>
 8019188:	73252200 			; <UNDEFINED> instruction: 0x73252200
 801918c:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8019190:	002c2273 	eoreq	r2, ip, r3, ror r2
 8019194:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 8019198:	000a7325 	andeq	r7, sl, r5, lsr #6
 801919c:	6f626552 	svcvs	0x00626552
 80191a0:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 80191a4:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 80191a8:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 80191ac:	6f6f6265 	svcvs	0x006f6265
 80191b0:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 80191b4:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 80191b8:	6f637200 	svcvs	0x00637200
 80191bc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 80191c0:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 80191c4:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 80191c8:	6b726f77 	blvs	9cb4fac <__exidx_end+0x1c98fd8>
 80191cc:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 80191d0:	73696400 	cmnvc	r9, #0, 8
 80191d4:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80191d8:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 80191dc:	74726100 	ldrbtvc	r6, [r2], #-256	; 0xffffff00
 80191e0:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 80191e4:	00747874 	rsbseq	r7, r4, r4, ror r8
 80191e8:	31333165 	teqcc	r3, r5, ror #2
 80191ec:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 80191f0:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
 80191f4:	73656369 	cmnvc	r5, #-1543503871	; 0xa4000001
 80191f8:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 80191fc:	00000000 	andeq	r0, r0, r0

08019200 <RemoteConfig::s_TXT>:
 8019200:	08009fbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, r9, sl, fp, ip, pc}
 8019204:	00000000 	andeq	r0, r0, r0
 8019208:	0800a285 	stmdaeq	r0, {r0, r2, r7, r9, sp, pc}
 801920c:	00000000 	andeq	r0, r0, r0
 8019210:	080191b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, ip, pc}
 8019214:	0000000b 	andeq	r0, r0, fp
 8019218:	0000000c 	andeq	r0, r0, ip
 801921c:	08009fe9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8019220:	00000000 	andeq	r0, r0, r0
 8019224:	0800a2b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r9, sp, pc}
 8019228:	00000000 	andeq	r0, r0, r0
 801922c:	080191c5 	stmdaeq	r1, {r0, r2, r6, r7, r8, ip, pc}
 8019230:	0000000b 	andeq	r0, r0, fp
 8019234:	00000000 	andeq	r0, r0, r0
 8019238:	0800a099 	stmdaeq	r0, {r0, r3, r4, r7, sp, pc}
 801923c:	00000000 	andeq	r0, r0, r0
 8019240:	0800a355 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, sp, pc}
 8019244:	00000000 	andeq	r0, r0, r0
 8019248:	080191d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, ip, pc}
 801924c:	0000000b 	andeq	r0, r0, fp
 8019250:	0000000f 	andeq	r0, r0, pc
 8019254:	0800a015 	stmdaeq	r0, {r0, r2, r4, sp, pc}
 8019258:	00000000 	andeq	r0, r0, r0
 801925c:	0800a2dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, sp, pc}
 8019260:	00000000 	andeq	r0, r0, r0
 8019264:	080191dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, ip, pc}
 8019268:	0000000a 	andeq	r0, r0, sl
 801926c:	00000001 	andeq	r0, r0, r1
 8019270:	0800a041 	stmdaeq	r0, {r0, r6, sp, pc}
 8019274:	00000000 	andeq	r0, r0, r0
 8019278:	0800a305 	stmdaeq	r0, {r0, r2, r8, r9, sp, pc}
 801927c:	00000000 	andeq	r0, r0, r0
 8019280:	080191e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, ip, pc}
 8019284:	00000008 	andeq	r0, r0, r8
 8019288:	00000004 	andeq	r0, r0, r4
 801928c:	0800a06d 	stmdaeq	r0, {r0, r2, r3, r5, r6, sp, pc}
 8019290:	00000000 	andeq	r0, r0, r0
 8019294:	0800a32d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9, sp, pc}
 8019298:	00000000 	andeq	r0, r0, r0
 801929c:	080191f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, ip, pc}
 80192a0:	0000000b 	andeq	r0, r0, fp
 80192a4:	00000003 	andeq	r0, r0, r3
 80192a8:	00544547 	subseq	r4, r4, r7, asr #10
 80192ac:	54534f50 	ldrbpl	r4, [r3], #-3920	; 0xfffff0b0
 80192b0:	54544800 	ldrbpl	r4, [r4], #-2048	; 0xfffff800
 80192b4:	0a200050 	beq	88193fc <__exidx_end+0x7fd428>
 80192b8:	312e3100 			; <UNDEFINED> instruction: 0x312e3100
 80192bc:	43003a00 	movwmi	r3, #2560	; 0xa00
 80192c0:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 80192c4:	542d746e 	strtpl	r7, [sp], #-1134	; 0xfffffb92
 80192c8:	00657079 	rsbeq	r7, r5, r9, ror r0
 80192cc:	61003b20 	tstvs	r0, r0, lsr #22
 80192d0:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 80192d4:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 80192d8:	6a2f6e6f 	bvs	8bf4c9c <__exidx_end+0xbd8cc8>
 80192dc:	006e6f73 	rsbeq	r6, lr, r3, ror pc
 80192e0:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 80192e4:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 80192e8:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 80192ec:	2f006874 	svccs	0x00006874
 80192f0:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 80192f4:	74682e78 	strbtvc	r2, [r8], #-3704	; 0xfffff188
 80192f8:	2f006c6d 	svccs	0x00006c6d
 80192fc:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8019300:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8019304:	2f007373 	svccs	0x00007373
 8019308:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 801930c:	736a2e78 	cmnvc	sl, #120, 28	; 0x780
 8019310:	736a2f00 	cmnvc	sl, #0, 30
 8019314:	002f6e6f 	eoreq	r6, pc, pc, ror #28
 8019318:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801931c:	72657600 	rsbvc	r7, r5, #0, 12
 8019320:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8019324:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 8019328:	00656d69 	rsbeq	r6, r5, r9, ror #26
 801932c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8019330:	0079616c 	rsbseq	r6, r9, ip, ror #2
 8019334:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8019338:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 801933c:	6a2f0079 	bvs	8bd9528 <__exidx_end+0xbbd554>
 8019340:	2f6e6f73 	svccs	0x006e6f73
 8019344:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8019348:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
 801934c:	6f6f6265 	svcvs	0x006f6265
 8019350:	64690074 	strbtvs	r0, [r9], #-116	; 0xffffff8c
 8019354:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 8019358:	3c007966 			; <UNDEFINED> instruction: 0x3c007966
 801935c:	434f4421 	movtmi	r4, #62497	; 0xf421
 8019360:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8019364:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8019368:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 801936c:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8019370:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 8019374:	3e646165 	powccsz	f6, f4, f5
 8019378:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 801937c:	533e656c 	teqpl	lr, #108, 10	; 0x1b000000
 8019380:	696d6275 	stmdbvs	sp!, {r0, r2, r4, r5, r6, r9, sp, lr}^
 8019384:	742f3c74 	strtvc	r3, [pc], #-3188	; 801938c <RemoteConfig::s_TXT+0x18c>
 8019388:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 801938c:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8019390:	3e646165 	powccsz	f6, f4, f5
 8019394:	6f623c0a 	svcvs	0x00623c0a
 8019398:	3c3e7964 			; <UNDEFINED> instruction: 0x3c3e7964
 801939c:	4f3e3168 	svcmi	0x003e3168
 80193a0:	682f3c4b 	stmdavs	pc!, {r0, r1, r3, r6, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80193a4:	2f3c3e31 	svccs	0x003c3e31
 80193a8:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 80193ac:	2f3c0a3e 	svccs	0x003c0a3e
 80193b0:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80193b4:	42000a3e 	andmi	r0, r0, #253952	; 0x3e000
 80193b8:	52206461 	eorpl	r6, r0, #1627389952	; 0x61000000
 80193bc:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 80193c0:	4e007473 	mcrmi	4, 0, r7, cr0, cr3, {3}
 80193c4:	4620746f 	strtmi	r7, [r0], -pc, ror #8
 80193c8:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 80193cc:	71655200 	cmnvc	r5, r0, lsl #4
 80193d0:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
 80193d4:	746e4520 	strbtvc	r4, [lr], #-1312	; 0xfffffae0
 80193d8:	20797469 	rsbscs	r7, r9, r9, ror #8
 80193dc:	206f6f54 	rsbcs	r6, pc, r4, asr pc	; <UNPREDICTABLE>
 80193e0:	6772614c 	ldrbvs	r6, [r2, -ip, asr #2]!
 80193e4:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
 80193e8:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
 80193ec:	52552d74 	subspl	r2, r5, #116, 26	; 0x1d00
 80193f0:	6f542049 	svcvs	0x00542049
 80193f4:	6f4c206f 	svcvs	0x004c206f
 80193f8:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 80193fc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 8019400:	206c616e 	rsbcs	r6, ip, lr, ror #2
 8019404:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8019408:	45207265 	strmi	r7, [r0, #-613]!	; 0xfffffd9b
 801940c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 8019410:	74654d00 	strbtvc	r4, [r5], #-3328	; 0xfffff300
 8019414:	20646f68 	rsbcs	r6, r4, r8, ror #30
 8019418:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801941c:	6c706d49 	ldclvs	13, cr6, [r0], #-292	; 0xfffffedc
 8019420:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8019424:	00646574 	rsbeq	r6, r4, r4, ror r5
 8019428:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 801942c:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 8019430:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8019434:	70707553 	rsbsvc	r7, r0, r3, asr r5
 8019438:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
 801943c:	6e550064 	cdpvs	0, 5, cr0, cr5, cr4, {3}
 8019440:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 8019444:	7245206e 	subvc	r2, r5, #110	; 0x6e
 8019448:	00726f72 	rsbseq	r6, r2, r2, ror pc
 801944c:	3c004b4f 			; <UNDEFINED> instruction: 0x3c004b4f
 8019450:	434f4421 	movtmi	r4, #62497	; 0xf421
 8019454:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8019458:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 801945c:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8019460:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8019464:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 8019468:	3e646165 	powccsz	f6, f4, f5
 801946c:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8019470:	253e656c 	ldrcs	r6, [lr, #-1388]!	; 0xfffffa94
 8019474:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8019478:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801947c:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 8019480:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 8019484:	0a3e6461 	beq	8fb2610 <__exidx_end+0xf9663c>
 8019488:	646f623c 	strbtvs	r6, [pc], #-572	; 8019490 <RemoteConfig::s_TXT+0x290>
 801948c:	683c3e79 	ldmdavs	ip!, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8019490:	73253e31 			; <UNDEFINED> instruction: 0x73253e31
 8019494:	31682f3c 	cmncc	r8, ip, lsr pc
 8019498:	622f3c3e 	eorvs	r3, pc, #15872	; 0x3e00
 801949c:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 80194a0:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80194a4:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 80194a8:	5448000a 	strbpl	r0, [r8], #-10
 80194ac:	312f5054 	qsubcc	r5, r4, pc	; <UNPREDICTABLE>
 80194b0:	2520312e 	strcs	r3, [r0, #-302]!	; 0xfffffed2
 80194b4:	73252075 			; <UNDEFINED> instruction: 0x73252075
 80194b8:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
 80194bc:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
 80194c0:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 80194c4:	6f430a0d 	svcvs	0x00430a0d
 80194c8:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 80194cc:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 80194d0:	203a6570 	eorscs	r6, sl, r0, ror r5
 80194d4:	0a0d7325 	beq	8376170 <__exidx_end+0x35a19c>
 80194d8:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 80194dc:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 80194e0:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 80194e4:	203a6874 	eorscs	r6, sl, r4, ror r8
 80194e8:	0a0d7525 	beq	8376984 <__exidx_end+0x35a9b0>
 80194ec:	6e6e6f43 	cdpvs	15, 6, cr6, cr14, cr3, {2}
 80194f0:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 80194f4:	203a6e6f 	eorscs	r6, sl, pc, ror #28
 80194f8:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 80194fc:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
 8019500:	4447000a 	strbmi	r0, [r7], #-10
 8019504:	32463233 	subcc	r3, r6, #805306371	; 0x30000003
 8019508:	47523730 	smmlarmi	r2, r0, r7, r3
	...

0801950d <contentType>:
 801950d:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8019511:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 8019515:	0000006c 	andeq	r0, r0, ip, rrx
	...
 801952d:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8019531:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 801954d:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8019551:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 8019555:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 8019559:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 801956d:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 8019571:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 8019575:	2f6e6f69 	svccs	0x006e6f69
 8019579:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

0801958d <RemoteConfigConst::PARAMS_DISABLE>:
 801958d:	61736964 	cmnvs	r3, r4, ror #18
 8019591:	00656c62 	rsbeq	r6, r5, r2, ror #24

08019595 <RemoteConfigConst::PARAMS_FILE_NAME>:
 8019595:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 8019599:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 801959d:	00747874 	rsbseq	r7, r4, r4, ror r8

080195a1 <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 80195a1:	70736964 	rsbsvc	r6, r3, r4, ror #18
 80195a5:	5f79616c 	svcpl	0x0079616c
 80195a9:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

080195ae <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 80195ae:	61736964 	cmnvs	r3, r4, ror #18
 80195b2:	5f656c62 	svcpl	0x00656c62
 80195b6:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 80195ba:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

080195bc <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 80195bc:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80195c0:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 80195c4:	6f6f6265 	svcvs	0x006f6265
 80195c8:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

080195ca <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 80195ca:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80195ce:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 801906a <s_Output+0x34>
 80195d2:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 80195d6:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

080195d8 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 80195d8:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80195dc:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 80195e0:	6f746361 	svcvs	0x00746361
 80195e4:	7b007972 	blvc	8037bb4 <__exidx_end+0x1bbe0>
 80195e8:	73696c22 	cmnvc	r9, #8704	; 0x2200
 80195ec:	7b3a2274 	blvc	8ea1fc4 <__exidx_end+0xe85ff0>
 80195f0:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 80195f4:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 80195f8:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80195fc:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8019600:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 8019604:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8019608:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801960c:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8019610:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8019614:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8019618:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 801961c:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8019620:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8019624:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8019628:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 801962c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8019630:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8019634:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8019638:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 801963c:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 8019640:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 8019644:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8019648:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801964c:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8019650:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8019654:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8019658:	616f6222 	cmnvs	pc, r2, lsr #4
 801965c:	3a226472 	bcc	88b282c <__exidx_end+0x896858>
 8019660:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8019664:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 8019668:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 801966c:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 8019670:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 8019674:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8019678:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 801967c:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 8019680:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 8019684:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 8019688:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 801968c:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 8019690:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8019694:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 8019698:	7b000a7d 	blvc	801c094 <__exidx_end+0xc0>
 801969c:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 80196a0:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80196a4:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 80196a8:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 80196ac:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 80196b0:	7b3a2273 	blvc	8ea2084 <__exidx_end+0xe860b0>
 80196b4:	74726122 	ldrbtvc	r6, [r2], #-290	; 0xfffffede
 80196b8:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 80196bc:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 80196c0:	7241223a 	subvc	r2, r1, #-1610612733	; 0xa0000003
 80196c4:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 80196c8:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 80196cc:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 80196d0:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 80196d4:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 80196d8:	4d44223a 	sfmmi	f2, 2, [r4, #-232]	; 0xffffff18
 80196dc:	69502058 	ldmdbvs	r0, {r3, r4, r6, sp}^
 80196e0:	226c6578 	rsbcs	r6, ip, #120, 10	; 0x1e000000
 80196e4:	6964222c 	stmdbvs	r4!, {r2, r3, r5, r9, sp}^
 80196e8:	616c7073 	smcvs	50947	; 0xc703
 80196ec:	78742e79 	ldmdavc	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp}^
 80196f0:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 80196f4:	70736944 	rsbsvc	r6, r3, r4, asr #18
 80196f8:	2079616c 	rsbscs	r6, r9, ip, ror #2
 80196fc:	22464455 	subcs	r4, r6, #1426063360	; 0x55000000
 8019700:	656e222c 	strbvs	r2, [lr, #-556]!	; 0xfffffdd4
 8019704:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8019708:	78742e6b 	ldmdavc	r4!, {r0, r1, r3, r5, r6, r9, sl, fp, sp}^
 801970c:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 8019710:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8019714:	226b726f 	rsbcs	r7, fp, #-268435450	; 0xf0000006
 8019718:	6372222c 	cmnvs	r2, #44, 4	; 0xc0000002
 801971c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8019720:	78742e67 	ldmdavc	r4!, {r0, r1, r2, r5, r6, r9, sl, fp, sp}^
 8019724:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 8019728:	6f6d6552 	svcvs	0x006d6552
 801972c:	63206574 			; <UNDEFINED> instruction: 0x63206574
 8019730:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8019734:	61727567 	cmnvs	r2, r7, ror #10
 8019738:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801973c:	007d7d22 	rsbseq	r7, sp, r2, lsr #26

08019740 <index_html>:
 8019740:	4f44213c 	svcmi	0x0044213c
 8019744:	50595443 	subspl	r5, r9, r3, asr #8
 8019748:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 801974c:	0a3e6c6d 	beq	8fb4908 <__exidx_end+0xf98934>
 8019750:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 8019754:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8019758:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 801975c:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 8019760:	6b6e696c 	blvs	9bb3d18 <__exidx_end+0x1b97d44>
 8019764:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 8019768:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 801976c:	73656c79 	cmnvc	r5, #30976	; 0x7900
 8019770:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8019774:	72682022 	rsbvc	r2, r8, #34	; 0x22
 8019778:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 801977c:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8019780:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8019784:	20227373 	eorcs	r7, r2, r3, ror r3
 8019788:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 801978c:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8019790:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 8019794:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 8019798:	0a3e656c 	beq	8fb2d50 <__exidx_end+0xf96d7c>
 801979c:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 80197a0:	0a3e6461 	beq	8fb292c <__exidx_end+0xf96958>
 80197a4:	646f623c 	strbtvs	r6, [pc], #-572	; 80197ac <index_html+0x6c>
 80197a8:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 80197ac:	6165683c 	cmnvs	r5, ip, lsr r8
 80197b0:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 80197b4:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 80197b8:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 80197bc:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 80197c0:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 80197c4:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 80197c8:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80197cc:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 80197d0:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 80197d4:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 80197d8:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 80197dc:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 80197e0:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 80197e4:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 80197e8:	6f746365 	svcvs	0x00746365
 80197ec:	20227972 	eorcs	r7, r2, r2, ror r9
 80197f0:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 80197f4:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 80197f8:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 80197fc:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8019800:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 8019804:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 8019808:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 801980c:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 8019810:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 8019814:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 8019818:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 801981c:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 8019820:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8019824:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8019828:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 801982c:	20227478 	eorcs	r7, r2, r8, ror r4
 8019830:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8019834:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 8019838:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 801983c:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 8019840:	0a3e656c 	beq	8fb2df8 <__exidx_end+0xf96e24>
 8019844:	6f663c09 	svcvs	0x00663c09
 8019848:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 801984c:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 8019850:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8019854:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 8019858:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801985c:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 8019860:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8019864:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 8019868:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 801986c:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8019870:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 8019874:	20747069 	rsbscs	r7, r4, r9, rrx
 8019878:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 801987c:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 8019880:	6a2e7865 	bvs	8bb7a1c <__exidx_end+0xb9ba48>
 8019884:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 8019888:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 801988c:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 8019890:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 8019894:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8019898:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 801989c:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 80198a0:	 	strbtvs	r6, [pc], #-522	; 80198a8 <styles_css+0x7>

080198a1 <styles_css>:
 80198a1:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 80198a5:	200a7b20 	andcs	r7, sl, r0, lsr #22
 80198a9:	63616220 	cmnvs	r1, #32, 4
 80198ad:	6f72676b 	svcvs	0x0072676b
 80198b1:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 80198b5:	6f6c6f63 	svcvs	0x006c6f63
 80198b9:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 80198bd:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 80198c1:	30322c30 	eorscc	r2, r2, r0, lsr ip
 80198c5:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 80198c9:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 80198cd:	6f6c6f63 	svcvs	0x006c6f63
 80198d1:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 80198d5:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 80198d9:	202c3535 	eorcs	r3, ip, r5, lsr r5
 80198dd:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 80198e1:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 80198e5:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 80198e9:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 80198ed:	200a7b20 	andcs	r7, sl, r0, lsr #22
 80198f1:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 80198f5:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80198f9:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 80198fd:	0a3b7865 	beq	8ef7a99 <__exidx_end+0xedbac5>
 8019901:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 8019905:	0a7b2069 	beq	9ee1ab1 <__exidx_end+0x1ec5add>
 8019909:	696c2020 	stmdbvs	ip!, {r5, sp}^
 801990d:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 8019911:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 8019915:	6f6e203a 	svcvs	0x006e203a
 8019919:	0a3b656e 	beq	8ef2ed9 <__exidx_end+0xed6f05>
 801991d:	616d2020 	cmnvs	sp, r0, lsr #32
 8019921:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 8019925:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 8019929:	70352078 	eorsvc	r2, r5, r8, ror r0
 801992d:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 8019931:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 8019935:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 8019939:	200a7b20 	andcs	r7, sl, r0, lsr #22
 801993d:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8019941:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8019945:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8019949:	0a3b7865 	beq	8ef7ae5 <__exidx_end+0xedbb11>
 801994d:	6f622020 	svcvs	0x00622020
 8019951:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 8019955:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 8019959:	3a737569 	bcc	9cf6f05 <__exidx_end+0x1cdaf31>
 801995d:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8019961:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8019965:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8019969:	203a7265 	eorscs	r7, sl, r5, ror #4
 801996d:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8019971:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8019975:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8019979:	0a3b7870 	beq	8ef7b41 <__exidx_end+0xedbb6d>
 801997d:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 8019981:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 8019985:	0a7b2072 	beq	9ee1b55 <__exidx_end+0x1ec5b81>
 8019989:	69642020 	stmdbvs	r4!, {r5, sp}^
 801998d:	616c7073 	smcvs	50947	; 0xc703
 8019991:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 8019995:	3b78656c 	blcc	9e32f4d <__exidx_end+0x1e16f79>
 8019999:	6a20200a 	bvs	88219c9 <__exidx_end+0x8059f5>
 801999d:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 80199a1:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 80199a5:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 80199a9:	203a746e 	eorscs	r7, sl, lr, ror #8
 80199ad:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 80199b1:	0a3b7265 	beq	8ef634d <__exidx_end+0xeda379>
 80199b5:	6f622020 	svcvs	0x00622020
 80199b9:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 80199bd:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 80199c1:	3a737569 	bcc	9cf6f6d <__exidx_end+0x1cdaf99>
 80199c5:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 80199c9:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 80199cd:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 80199d1:	203a7265 	eorscs	r7, sl, r5, ror #4
 80199d5:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80199d9:	72672064 	rsbvc	r2, r7, #100	; 0x64
 80199dd:	31207965 			; <UNDEFINED> instruction: 0x31207965
 80199e1:	0a3b7870 	beq	8ef7ba9 <__exidx_end+0xedbbd5>
 80199e5:	 	stc2	10, cr0, [r0], {125}	; 0x7d	; <UNPREDICTABLE>

080199e8 <HttpContent>:
 80199e8:	080192fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, ip, pc}
 80199ec:	080198a1 	stmdaeq	r1, {r0, r5, r7, fp, ip, pc}
 80199f0:	08019308 	stmdaeq	r1, {r3, r8, r9, ip, pc}
 80199f4:	08019a00 	stmdaeq	r1, {r9, fp, ip, pc}
 80199f8:	080192f0 	stmdaeq	r1, {r4, r5, r6, r7, r9, ip, pc}
 80199fc:	08019740 	stmdaeq	r1, {r6, r8, r9, sl, ip, pc}

08019a00 <index_js>:
 8019a00:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8019a04:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8019a08:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8019a0c:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8019a10:	534a7465 	movtpl	r7, #42085	; 0xa465
 8019a14:	6a284e4f 	bvs	8a2d358 <__exidx_end+0xa11384>
 8019a18:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8019a1c:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8019a20:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8019a24:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 8019a28:	6a2f273d 	bvs	8be3724 <__exidx_end+0xbc7750>
 8019a2c:	2f6e6f73 	svccs	0x006e6f73
 8019a30:	202b2027 	eorcs	r2, fp, r7, lsr #32
 8019a34:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 8019a38:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 8019a3c:	20797274 	rsbscs	r7, r9, r4, ror r2
 8019a40:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8019a44:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 8019a48:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 8019a4c:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 8019a50:	20746961 	rsbscs	r6, r4, r1, ror #18
 8019a54:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 8019a58:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 8019a5c:	0a3b296c 	beq	8ee4014 <__exidx_end+0xec8040>
 8019a60:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8019a64:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 8019a68:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 8019a6c:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 8019a70:	73657220 	cmnvc	r5, #32, 4
 8019a74:	6f736a2e 	svcvs	0x00736a2e
 8019a78:	3b29286e 	blcc	8a63c38 <__exidx_end+0xa47c64>
 8019a7c:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 8019a80:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 8019a84:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 8019a88:	6f727265 	svcvs	0x00727265
 8019a8c:	7b202972 	blvc	882405c <__exidx_end+0x808088>
 8019a90:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8019a94:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 8019a98:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 8019a9c:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 8019aa0:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 8019aa4:	3b29726f 	blcc	8a76468 <__exidx_end+0xa5a494>
 8019aa8:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 8019aac:	0a0a7d0a 	beq	82b8edc <__exidx_end+0x29cf08>
 8019ab0:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8019ab4:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8019ab8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8019abc:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 8019ac0:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8019ac4:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8019ac8:	20292874 	eorcs	r2, r9, r4, ror r8
 8019acc:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8019ad0:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8019ad4:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8019ad8:	6177613d 	cmnvs	r7, sp, lsr r1
 8019adc:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8019ae0:	534a7465 	movtpl	r7, #42085	; 0xa465
 8019ae4:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8019ae8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8019aec:	0a3b2927 	beq	8ee3f90 <__exidx_end+0xec7fbc>
 8019af0:	6f640909 	svcvs	0x00640909
 8019af4:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8019af8:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8019afc:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8019b00:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8019b04:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 8019b08:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 8019b0c:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 8019b10:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8019b14:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8019b18:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8019b1c:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 8019b20:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8019b24:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 8019b28:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 8019b2c:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 8019b30:	2b656d61 	blcs	99750bc <__exidx_end+0x19590e8>
 8019b34:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8019ab4 <index_js+0xb4>
 8019b38:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8019b3c:	2b223e69 	blcs	88a94e8 <__exidx_end+0x88d514>
 8019b40:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8019b44:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8019b48:	6f6e2e74 	svcvs	0x006e2e74
 8019b4c:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 8019b50:	2b657079 	blcs	9975d3c <__exidx_end+0x1959d68>
 8019b54:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8019ad4 <index_js+0xd4>
 8019b58:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8019b5c:	2b223e69 	blcs	88a9508 <__exidx_end+0x88d534>
 8019b60:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8019b64:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8019b68:	6f6e2e74 	svcvs	0x006e2e74
 8019b6c:	702e6564 	eorvc	r6, lr, r4, ror #10
 8019b70:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 8019b74:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8019b78:	2f3c222b 	svccs	0x003c222b
 8019b7c:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8019b80:	0a7d0a3b 	beq	9f5c474 <__exidx_end+0x1f404a0>
 8019b84:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 8019b88:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 8019b8c:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8019b90:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 8019b94:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 8019b98:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8019b9c:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8019ba0:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 8019ba4:	0a7b2029 	beq	9ee1c50 <__exidx_end+0x1ec5c7c>
 8019ba8:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8019bac:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 8019bb0:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8019bb4:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8019bb8:	6177613d 	cmnvs	r7, sp, lsr r1
 8019bbc:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8019bc0:	534a7465 	movtpl	r7, #42085	; 0xa465
 8019bc4:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8019bc8:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8019bcc:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8019bd0:	3b292779 	blcc	8a639bc <__exidx_end+0xa479e8>
 8019bd4:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8019bd8:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8019bdc:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8019be0:	0a22223d 	beq	88a24dc <__exidx_end+0x886508>
 8019be4:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8019be8:	66207465 	strtvs	r7, [r0], -r5, ror #8
 8019bec:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 8019bf0:	73656d61 	cmnvc	r5, #6208	; 0x1840
 8019bf4:	6a624f3d 	bvs	98ad8f0 <__exidx_end+0x189191c>
 8019bf8:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 8019bfc:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 8019c00:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 8019c04:	6f746365 	svcvs	0x00746365
 8019c08:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 8019c0c:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8019c10:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 8019c14:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 8019c18:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 8019c1c:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 8019c20:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 8019c24:	6145726f 	cmpvs	r5, pc, ror #4
 8019c28:	66286863 	strtvs	r6, [r8], -r3, ror #16
 8019c2c:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8019c30:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 8019c34:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 8019c38:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8019c3c:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8019c40:	20726176 	rsbscs	r6, r2, r6, ror r1
 8019c44:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 8019c48:	203d2065 	eorscs	r2, sp, r5, rrx
 8019c4c:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8019c50:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8019c54:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 8019c58:	73656c69 	cmnvc	r5, #26880	; 0x6900
 8019c5c:	6b5b5d22 	blvs	96f10ec <__exidx_end+0x16d5118>
 8019c60:	3b5d7965 	blcc	97781fc <__exidx_end+0x175c228>
 8019c64:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8019c68:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 8019c6c:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 8019c70:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 8019c74:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8019c78:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 8019c7c:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 8019c80:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 8019c84:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 8019c88:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 8019c8c:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 8019c90:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 8019c94:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8019c98:	0a3b223e 	beq	8ee2598 <__exidx_end+0xec65c4>
 8019c9c:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 8019ca0:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8019ca4:	6f640909 	svcvs	0x00640909
 8019ca8:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8019cac:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8019cb0:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8019cb4:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8019cb8:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 8019cbc:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 8019cc0:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8019cc4:	6f746365 	svcvs	0x00746365
 8019cc8:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 8019ccc:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 8019cd0:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 8019cd4:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 8019cd8:	3b6c6d74 	blcc	9b352b0 <__exidx_end+0x1b192dc>
 8019cdc:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8019ce0:	5f746567 	svcpl	0x00746567
 8019ce4:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 8019ce8:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8019cec:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8019cf0:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 8019cf4:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8019cf8:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 8019cfc:	20636e79 	rsbcs	r6, r3, r9, ror lr
 8019d00:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8019d04:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8019d08:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 8019d0c:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 8019d10:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8019d14:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 8019d18:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8019d1c:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8019d20:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 8019d24:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8019d28:	6177613d 	cmnvs	r7, sp, lsr r1
 8019d2c:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8019d30:	534a7465 	movtpl	r7, #42085	; 0xa465
 8019d34:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8019d38:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8019d3c:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 8019d40:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8019d44:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 8019d48:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 8019d4c:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 8019d50:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 8019d54:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 8019d58:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 8019d5c:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 8019d60:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 8019d64:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8019d68:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 8019d6c:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 8019d70:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 8019d74:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 8019d78:	2b22563e 	blcs	88af678 <__exidx_end+0x8936a4>
 8019d7c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8019d80:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 8019d84:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8019d88:	2b6e6f69 	blcs	9bb5b34 <__exidx_end+0x1b99b60>
 8019d8c:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8019d0c <index_js+0x30c>
 8019d90:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8019d94:	2b223e69 	blcs	88a9740 <__exidx_end+0x88d76c>
 8019d98:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8019d9c:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 8019da0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 8019da4:	61642e64 	cmnvs	r4, r4, ror #28
 8019da8:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 8019dac:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8019db0:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 8019db4:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 8019db8:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8019dbc:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 8019dc0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 8019dc4:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 8019dc8:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 8019dcc:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 8019dd0:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 8019dd4:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 8019dd8:	6f697372 	svcvs	0x00697372
 8019ddc:	6f622e6e 	svcvs	0x00622e6e
 8019de0:	2b647261 	blcs	993676c <__exidx_end+0x191a798>
 8019de4:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8019d64 <index_js+0x364>
 8019de8:	3b223e69 	blcc	88a9794 <__exidx_end+0x88d7c0>
 8019dec:	0a0a7d0a 	beq	82b921c <__exidx_end+0x29d248>
 8019df0:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8019df4:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8019df8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8019dfc:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8019e00:	745f7465 	ldrbvc	r7, [pc], #-1125	; 8019e08 <index_js+0x408>
 8019e04:	73287478 			; <UNDEFINED> instruction: 0x73287478
 8019e08:	20296c65 	eorcs	r6, r9, r5, ror #24
 8019e0c:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 8019e10:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 8019e14:	613d7478 	teqvs	sp, r8, ror r4
 8019e18:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 8019e1c:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 8019e20:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 8019e24:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 8019e28:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8019e2c:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8019e30:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8019e34:	3b22223d 	blcc	88a2730 <__exidx_end+0x88675c>
 8019e38:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 8019e3c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 8019e40:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 8019e44:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 8019e48:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 8019e4c:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 8019e50:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 8019e54:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 8019e58:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8019e5c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8019e60:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 8019e64:	0a7b2029 	beq	9ee1f10 <__exidx_end+0x1ec5f3c>
 8019e68:	61760909 	cmnvs	r6, r9, lsl #18
 8019e6c:	61762072 	cmnvs	r6, r2, ror r0
 8019e70:	2065756c 	rsbcs	r7, r5, ip, ror #10
 8019e74:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 8019e78:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 8019e7c:	6b5b5d6c 	blvs	96f1434 <__exidx_end+0x16d5460>
 8019e80:	3b5d7965 	blcc	977841c <__exidx_end+0x175c448>
 8019e84:	2009090a 	andcs	r0, r9, sl, lsl #18
 8019e88:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8019e8c:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 8019e90:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 8019e94:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8019e98:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 8019e9c:	2f3c222b 	svccs	0x003c222b
 8019ea0:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 8019ea4:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8019ea8:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 8019eac:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 8019eb0:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 8019eb4:	742f3c3e 	strtvc	r3, [pc], #-3134	; 8019ebc <index_js+0x4bc>
 8019eb8:	3b223e72 	blcc	88a9888 <__exidx_end+0x88d8b4>
 8019ebc:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 8019ec0:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 8019ec4:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 8019ec8:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 8019ecc:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 8019ed0:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 8019ed4:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 8019ed8:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 8019edc:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 8019ee0:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8019ee4:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8019ee8:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8019eec:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 8019ef0:	0a3b6c6d 	beq	8ef50ac <__exidx_end+0xed90d8>
 8019ef4:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 8019ef8:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8019efc:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8019f00:	3b292874 	blcc	8a640d8 <__exidx_end+0xa48104>
 8019f04:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 8019f08:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 8019f0c:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8019f10:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8019f14:	0a3b2928 	beq	8ee43bc <__exidx_end+0xec83e8>
 8019f18:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 8019f1c:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 8019f20:	6f697372 	svcvs	0x00697372
 8019f24:	3b29286e 	blcc	8a640e4 <__exidx_end+0xa48110>
 8019f28:	5520200a 	strpl	r2, [r0, #-10]!
 8019f2c:	6576696e 	ldrbvs	r6, [r6, #-2414]!	; 0xfffff692
 8019f30:	73657372 	cmnvc	r5, #-939524095	; 0xc8000001
 8019f34:	65726120 	ldrbvs	r6, [r2, #-288]!	; 0xfffffee0
 8019f38:	70616d20 	rsbvc	r6, r1, r0, lsr #26
 8019f3c:	64657070 	strbtvs	r7, [r5], #-112	; 0xffffff90
 8019f40:	0a312b20 	beq	8c64bc8 <__exidx_end+0xc48bf4>
 8019f44:	00000000 	andeq	r0, r0, r0

08019f48 <vtable for ArtNet4Node>:
	...
 8019f50:	0800b031 	stmdaeq	r0, {r0, r4, r5, ip, sp, pc}
 8019f54:	0800b051 	stmdaeq	r0, {r0, r4, r6, ip, sp, pc}
 8019f58:	0800afbb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, r8, r9, sl, fp, sp, pc}
 8019f5c:	0800b099 	stmdaeq	r0, {r0, r3, r4, r7, ip, sp, pc}
 8019f60:	0800b063 	stmdaeq	r0, {r0, r1, r5, r6, ip, sp, pc}
 8019f64:	0800afa9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, sl, fp, sp, pc}
 8019f68:	0800b019 	stmdaeq	r0, {r0, r3, r4, ip, sp, pc}

08019f6c <ArtNetMsgConst::START>:
 8019f6c:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 8019f70:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8019f74:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 8019f78:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
	...

08019f7d <ArtNetMsgConst::PARAMS>:
 8019f7d:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8019f81:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8019f85:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8019f89:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8019f8d:	0074654e 	rsbseq	r6, r4, lr, asr #10

08019f91 <ArtNetMsgConst::STARTED>:
 8019f91:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8019f95:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8019f99:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8019f9d:	00646574 	rsbeq	r6, r4, r4, ror r5
 8019fa1:	25207325 	strcs	r7, [r0, #-805]!	; 0xfffffcdb
 8019fa5:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
 8019fa9:	00732520 	rsbseq	r2, r3, r0, lsr #10
 8019fad:	70747468 	rsbsvc	r7, r4, r8, ror #8
 8019fb1:	2f2f3a73 	svccs	0x002f3a73
 8019fb5:	32336467 	eorscc	r6, r3, #1728053248	; 0x67000000
 8019fb9:	786d642d 	stmdavc	sp!, {r0, r2, r3, r5, sl, sp, lr}^
 8019fbd:	67726f2e 	ldrbvs	r6, [r2, -lr, lsr #30]!
 8019fc1:	626d4500 	rsbvs	r4, sp, #0, 10
 8019fc5:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
 8019fc9:	 	subvc	r0, r1, #100	; 0x64

08019fcb <artnet::NODE_ID>:
 8019fcb:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8019fcf:	0074654e 	rsbseq	r6, r4, lr, asr #10

08019fd3 <defaults::SHORT_NAME>:
 8019fd3:	20567641 	subscs	r7, r6, r1, asr #12
 8019fd7:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8019fdb:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8019fdf:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
 8019fe3:	34302500 	ldrtcc	r2, [r0], #-1280	; 0xfffffb00
 8019fe7:	255b2078 	ldrbcs	r2, [fp, #-120]	; 0xffffff88
 8019feb:	5d643430 	cfstrdpl	mvd3, [r4, #-192]!	; 0xffffff40
 8019fef:	20732520 	rsbscs	r2, r3, r0, lsr #10
 8019ff3:	00567641 	subseq	r7, r6, r1, asr #12

08019ff7 <artnet::NODE_ID>:
 8019ff7:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8019ffb:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8019fff:	00505448 	subseq	r5, r0, r8, asr #8
 801a003:	0050544c 	subseq	r5, r0, ip, asr #8
 801a007:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801a00b:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801a00f:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 801a013:	646f4e00 	strbtvs	r4, [pc], #-3584	; 801a01b <artnet::NODE_ID+0x24>
 801a017:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
 801a01b:	75255b20 	strvc	r5, [r5, #-2848]!	; 0xfffff4e0
 801a01f:	20000a5d 	andcs	r0, r0, sp, asr sl
 801a023:	6d726946 			; <UNDEFINED> instruction: 0x6d726946
 801a027:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0xfffffe89
 801a02b:	3a202020 	bcc	88220b3 <__exidx_end+0x8060df>
 801a02f:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801a033:	000a6425 	andeq	r6, sl, r5, lsr #8
 801a037:	6f685320 	svcvs	0x00685320
 801a03b:	6e207472 	mcrvs	4, 1, r7, cr0, cr2, {3}
 801a03f:	20656d61 	rsbcs	r6, r5, r1, ror #26
 801a043:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 801a047:	4c20000a 	stcmi	0, cr0, [r0], #-40	; 0xffffffd8
 801a04b:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 801a04f:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 801a053:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801a057:	000a7325 	andeq	r7, sl, r5, lsr #6
 801a05b:	74754f20 	ldrbtvc	r4, [r5], #-3872	; 0xfffff0e0
 801a05f:	0a747570 	beq	9d37627 <__exidx_end+0x1d1b653>
 801a063:	50202000 	eorpl	r2, r0, r0
 801a067:	2074726f 	rsbscs	r7, r4, pc, ror #4
 801a06b:	20643225 	rsbcs	r3, r4, r5, lsr #4
 801a06f:	20753425 	rsbscs	r3, r5, r5, lsr #8
 801a073:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 801a077:	257b2000 	ldrbcs	r2, [fp, #-0]!
 801a07b:	000a7d73 	andeq	r7, sl, r3, ror sp
 801a07f:	706e4920 	rsbvc	r4, lr, r0, lsr #18
 801a083:	000a7475 	andeq	r7, sl, r5, ror r4
 801a087:	6f502020 	svcvs	0x00502020
 801a08b:	25207472 	strcs	r7, [r0, #-1138]!	; 0xfffffb8e
 801a08f:	25206432 	strcs	r6, [r0, #-1074]!	; 0xfffffbce
 801a093:	2d207534 	cfstr32cs	mvfx7, [r0, #-208]!	; 0xffffff30
 801a097:	6425203e 	strtvs	r2, [r5], #-62	; 0xffffffc2
 801a09b:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801a09f:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801a0a3:	68000a64 	stmdavs	r0, {r2, r5, r6, r9, fp}
 801a0a7:	00646c6f 	rsbeq	r6, r4, pc, ror #24
 801a0ab:	0066666f 	rsbeq	r6, r6, pc, ror #12
 801a0af:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801a0b3:	6b636162 	blvs	98f2643 <__exidx_end+0x18d666f>
 801a0b7:	63617300 	cmnvs	r1, #0, 6
 801a0bb:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
 801a0bf:	00747570 	rsbseq	r7, r4, r0, ror r5
 801a0c3:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 801a0c7:	64007475 	strvs	r7, [r0], #-1141	; 0xfffffb8b
 801a0cb:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
 801a0cf:	6c00656c 	cfstr32vs	mvfx6, [r0], {108}	; 0x6c
 801a0d3:	68007074 	stmdavs	r0, {r2, r4, r5, r6, ip, sp, lr}
 801a0d7:	61007074 	tstvs	r0, r4, ror r0
 801a0db:	656e7472 	strbvs	r7, [lr, #-1138]!	; 0xfffffb8e
 801a0df:	72410074 	subvc	r0, r1, #116	; 0x74
 801a0e3:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 801a0e7:	00342074 	eorseq	r2, r4, r4, ror r0
	...

0801a0ec <CSWTCH.93>:
 801a0ec:	0801a0a6 	stmdaeq	r1, {r1, r2, r5, r7, sp, pc}
 801a0f0:	0801a0ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, sp, pc}
 801a0f4:	08019322 	stmdaeq	r1, {r1, r5, r8, r9, ip, pc}
 801a0f8:	0801a0af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, sp, pc}

0801a0fc <ArtNetParamsConst::ENABLE_RDM>:
 801a0fc:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801a100:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 801a104:	 	stcvs	13, cr6, [r0, #-400]	; 0xfffffe70

0801a107 <ArtNetParamsConst::MAP_UNIVERSE0>:
 801a107:	5f70616d 	svcpl	0x0070616d
 801a10b:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801a10f:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801a113:	 	rsbsvc	r0, r0, #48	; 0x30

0801a115 <ArtNetParamsConst::PROTOCOL_PORT>:
 801a115:	746f7270 	strbtvc	r7, [pc], #-624	; 801a11d <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 801a119:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8019f64 <vtable for ArtNet4Node+0x1c>
 801a11d:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801a121:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801a125:	746f7270 	strbtvc	r7, [pc], #-624	; 801a12d <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 801a129:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8019f74 <ArtNetMsgConst::START+0x8>
 801a12d:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801a131:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801a135:	746f7270 	strbtvc	r7, [pc], #-624	; 801a13d <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 801a139:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8019f84 <ArtNetMsgConst::PARAMS+0x7>
 801a13d:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801a141:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801a145:	746f7270 	strbtvc	r7, [pc], #-624	; 801a14d <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 801a149:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8019f94 <ArtNetMsgConst::STARTED+0x3>
 801a14d:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801a151:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801a155 <ArtNetParamsConst::NODE_LONG_NAME>:
 801a155:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 801a159:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	; 0xfffffe84
 801a15d:	 	ldmdavs	r3!, {r0, r2, r5, r6}^

0801a15f <ArtNetParamsConst::NODE_SHORT_NAME>:
 801a15f:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 801a163:	616e5f74 	smcvs	58868	; 0xe5f4
 801a167:	 	andvc	r6, r0, #457179136	; 0x1b400000

0801a16a <ArtNetParamsConst::RDM_ENABLE_PORT>:
 801a16a:	5f6d6472 	svcpl	0x006d6472
 801a16e:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801a172:	705f656c 	subsvc	r6, pc, ip, ror #10
 801a176:	5f74726f 	svcpl	0x0074726f
 801a17a:	64720061 	ldrbtvs	r0, [r2], #-97	; 0xffffff9f
 801a17e:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
 801a182:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801a186:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801a18a:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801a18e:	5f6d6472 	svcpl	0x006d6472
 801a192:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801a196:	705f656c 	subsvc	r6, pc, ip, ror #10
 801a19a:	5f74726f 	svcpl	0x0074726f
 801a19e:	64720063 	ldrbtvs	r0, [r2], #-99	; 0xffffff9d
 801a1a2:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
 801a1a6:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801a1aa:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801a1ae:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801a1b2 <ArtNetParamsConst::DESTINATION_IP_PORT>:
 801a1b2:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801a1b6:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801a1ba:	5f6e6f69 	svcpl	0x006e6f69
 801a1be:	705f7069 	subsvc	r7, pc, r9, rrx
 801a1c2:	5f74726f 	svcpl	0x0074726f
 801a1c6:	00000061 	andeq	r0, r0, r1, rrx
 801a1ca:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801a1ce:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801a1d2:	5f6e6f69 	svcpl	0x006e6f69
 801a1d6:	705f7069 	subsvc	r7, pc, r9, rrx
 801a1da:	5f74726f 	svcpl	0x0074726f
 801a1de:	00000062 	andeq	r0, r0, r2, rrx
 801a1e2:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801a1e6:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801a1ea:	5f6e6f69 	svcpl	0x006e6f69
 801a1ee:	705f7069 	subsvc	r7, pc, r9, rrx
 801a1f2:	5f74726f 	svcpl	0x0074726f
 801a1f6:	00000063 	andeq	r0, r0, r3, rrx
 801a1fa:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801a1fe:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801a202:	5f6e6f69 	svcpl	0x006e6f69
 801a206:	705f7069 	subsvc	r7, pc, r9, rrx
 801a20a:	5f74726f 	svcpl	0x0074726f
 801a20e:	00000064 	andeq	r0, r0, r4, rrx

0801a212 <ArtNetParamsConst::NET>:
 801a212:	0074656e 	rsbseq	r6, r4, lr, ror #10

0801a216 <ArtNetParamsConst::SUBNET>:
 801a216:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
 801a21a:	 	tstvs	r0, r5, ror #8

0801a21d <ArtNetParamsConst::FILE_NAME>:
 801a21d:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 801a221:	742e7465 	strtvc	r7, [lr], #-1125	; 0xfffffb9b
 801a225:	 			; <UNDEFINED> instruction: 0xff007478

0801a228 <ArtNetConst::OEM_ID>:
 801a228:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

0801a22a <ArtNetConst::ESTA_ID>:
 801a22a:	 	smlsdcc	r1, r0, r0, r0

0801a22c <ArtNetConst::VERSION>:
 801a22c:	33323701 	teqcc	r2, #262144	; 0x40000
 801a230:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 801a234:	2e302e35 	mrccs	14, 1, r2, cr0, cr5, {1}
 801a238:	2e250030 	mcrcs	0, 1, r0, cr5, cr0, {1}
 801a23c:	20733834 	rsbscs	r3, r3, r4, lsr r8
 801a240:	30007325 	andcc	r7, r0, r5, lsr #6
 801a244:	6f4e202e 	svcvs	0x004e202e
 801a248:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 801a24c:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 801a250:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 801a254:	202c6465 	eorcs	r6, ip, r5, ror #8
 801a258:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 801a25c:	6f687320 	svcvs	0x00687320
 801a260:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 801a264:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 801a268:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 801a26c:	000a216e 	andeq	r2, sl, lr, ror #2
 801a270:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 801a274:	000a6567 	andeq	r6, sl, r7, ror #10
 801a278:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 801a27c:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 801a280:	203a2065 	eorscs	r2, sl, r5, rrx
 801a284:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801a288:	20000a64 	andcs	r0, r0, r4, ror #20
 801a28c:	20444943 	subcs	r4, r4, r3, asr #18
 801a290:	20202020 	eorcs	r2, r0, r0, lsr #32
 801a294:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801a298:	20000a73 	andcs	r0, r0, r3, ror sl
 801a29c:	726f5020 	rsbvc	r5, pc, #32
 801a2a0:	32252074 	eorcc	r2, r5, #116	; 0x74
 801a2a4:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 801a2a8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 801a2ac:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 801a2b0:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 801a2b4:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 801a2b8:	2020000a 	eorcs	r0, r0, sl
 801a2bc:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 801a2c0:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 801a2c4:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 801a2c8:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801a2cc:	2d252065 	stccs	0, cr2, [r5, #-404]!	; 0xfffffe6c
 801a2d0:	5b206433 	blpl	88333a4 <__exidx_end+0x8173d0>
 801a2d4:	0a5d6425 	beq	9773370 <__exidx_end+0x175739c>
 801a2d8:	79532000 	ldmdbvc	r3, {sp}^
 801a2dc:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
 801a2e0:	7a696e6f 	bvc	9a75ca4 <__exidx_end+0x1a59cd0>
 801a2e4:	73692065 	cmnvc	r9, #101	; 0x65
 801a2e8:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 801a2ec:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801a2f0:	44000a64 	strmi	r0, [r0], #-2660	; 0xfffff59c
 801a2f4:	4f20584d 	svcmi	0x0020584d
 801a2f8:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 801a2fc:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
 801a300:	6e492058 	mcrvs	0, 2, r2, cr9, cr8, {2}
 801a304:	00747570 	rsbseq	r7, r4, r0, ror r5

0801a308 <CSWTCH.56>:
 801a308:	0801a0a6 	stmdaeq	r1, {r1, r2, r5, r7, sp, pc}
 801a30c:	0801a0ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, sp, pc}
 801a310:	08019322 	stmdaeq	r1, {r1, r5, r8, r9, ip, pc}
 801a314:	0801a0af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, sp, pc}

0801a318 <E131ParamsConst::PRIORITY>:
 801a318:	6f697270 	svcvs	0x00697270
 801a31c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801a320:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801a324:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801a328:	72700000 	rsbsvc	r0, r0, #0
 801a32c:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801a330:	705f7974 	subsvc	r7, pc, r4, ror r9	; <UNPREDICTABLE>
 801a334:	5f74726f 	svcpl	0x0074726f
 801a338:	00000062 	andeq	r0, r0, r2, rrx
 801a33c:	6f697270 	svcvs	0x00697270
 801a340:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801a344:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801a348:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801a34c:	72700000 	rsbsvc	r0, r0, #0
 801a350:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801a354:	705f7974 	subsvc	r7, pc, r4, ror r9	; <UNPREDICTABLE>
 801a358:	5f74726f 	svcpl	0x0074726f
 801a35c:	00000064 	andeq	r0, r0, r4, rrx

0801a360 <E131ParamsConst::FILE_NAME>:
 801a360:	31333165 	teqcc	r3, r5, ror #2
 801a364:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
	...

0801a369 <E117Const::ACN_PACKET_IDENTIFIER>:
 801a369:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 801a36d:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 801a371:	00000037 	andeq	r0, r0, r7, lsr r0

0801a375 <E131BridgeConst::VERSION>:
 801a375:	33321901 	teqcc	r2, #16384	; 0x4000
 801a379:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 801a37d:	35322e35 	ldrcc	r2, [r2, #-3637]!	; 0xfffff1cb
 801a381:	33312e30 	teqcc	r1, #48, 28	; 0x300
 801a385:	33320033 	teqcc	r2, #51	; 0x33
 801a389:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 801a38d:	35322e35 	ldrcc	r2, [r2, #-3637]!	; 0xfffff1cb
 801a391:	33312e30 	teqcc	r1, #48, 28	; 0x300
 801a395:	4c4c0034 	mcrrmi	0, 3, r0, ip, cr4
 801a399:	44205052 	strtmi	r5, [r0], #-82	; 0xffffffae
 801a39d:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 801a3a1:	6f632065 	svcvs	0x00632065
 801a3a5:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801a3a9:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
 801a3ad:	0a6e6f69 	beq	9bb6159 <__exidx_end+0x1b9a185>
 801a3b1:	6f502000 	svcvs	0x00502000
 801a3b5:	55207472 	strpl	r7, [r0, #-1138]!	; 0xfffffb8e
 801a3b9:	20205044 	eorcs	r5, r0, r4, asr #32
 801a3bd:	20202020 	eorcs	r2, r0, r0, lsr #32
 801a3c1:	20202020 	eorcs	r2, r0, r0, lsr #32
 801a3c5:	20202020 	eorcs	r2, r0, r0, lsr #32
 801a3c9:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801a3cd:	20000a64 	andcs	r0, r0, r4, ror #20
 801a3d1:	746c754d 	strbtvc	r7, [ip], #-1357	; 0xfffffab3
 801a3d5:	73616369 	cmnvc	r1, #-1543503871	; 0xa4000001
 801a3d9:	6f6a2074 	svcvs	0x006a2074
 801a3dd:	52206e69 	eorpl	r6, r0, #1680	; 0x690
 801a3e1:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 801a3e5:	3a207473 	bcc	88375b9 <__exidx_end+0x81b5e5>
 801a3e9:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801a3ed:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801a3f1:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801a3f5:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 801a3f9:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
 801a3fd:	74736163 	ldrbtvc	r6, [r3], #-355	; 0xfffffe9d
 801a401:	73655220 	cmnvc	r5, #32, 4
 801a405:	736e6f70 	cmnvc	lr, #112, 30	; 0x1c0
 801a409:	20202065 	eorcs	r2, r0, r5, rrx
 801a40d:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801a411:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801a415:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801a419:	0a64252e 	beq	99238d9 <__exidx_end+0x1907905>
 801a41d:	 	andeq	r0, r0, r0

0801a420 <vtable for LLRPDevice>:
	...
 801a428:	0800eb97 	stmdaeq	r0, {r0, r1, r2, r4, r7, r8, r9, fp, sp, lr, pc}
 801a42c:	0800eba1 	stmdaeq	r0, {r0, r5, r7, r8, r9, fp, sp, lr, pc}
 801a430:	0800eb99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp, sp, lr, pc}
 801a434:	0800eb9b 	stmdaeq	r0, {r0, r1, r3, r4, r7, r8, r9, fp, sp, lr, pc}
 801a438:	0800eb9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, fp, sp, lr, pc}

0801a43c <RDMNetConst::MSG_CONFIG>:
 801a43c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801a440:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801a444:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801a448:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 801a44c:	 	andpl	r7, r0, #1694498816	; 0x65000000

0801a44f <RDMNetConst::MSG_STARTED>:
 801a44f:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 801a453:	73207465 			; <UNDEFINED> instruction: 0x73207465
 801a457:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 801a45b:	 	movwpl	r6, #1125	; 0x465

0801a45e <RDMNetConst::MSG_START>:
 801a45e:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 801a462:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 801a466:	4d445220 	sfmmi	f5, 2, [r4, #-128]	; 0xffffff80
 801a46a:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801a46e:	4e4d4452 	mcrmi	4, 2, r4, cr13, cr2, {2}
 801a472:	000a7465 	andeq	r7, sl, r5, ror #8
 801a476:	44494320 	strbmi	r4, [r9], #-800	; 0xfffffce0
 801a47a:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801a47e:	52000a73 	andpl	r0, r0, #471040	; 0x73000
 801a482:	52204d44 	eorpl	r4, r0, #68, 26	; 0x1100
 801a486:	6f707365 	svcvs	0x00707365
 801a48a:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
 801a48e:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 801a492:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 801a496:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801a49a:	000a6e6f 	andeq	r6, sl, pc, ror #28
 801a49e:	6f725020 	svcvs	0x00725020
 801a4a2:	6f636f74 	svcvs	0x00636f74
 801a4a6:	6556206c 	ldrbvs	r2, [r6, #-108]	; 0xffffff94
 801a4aa:	6f697372 	svcvs	0x00697372
 801a4ae:	6425206e 	strtvs	r2, [r5], #-110	; 0xffffff92
 801a4b2:	0a64252e 	beq	9923972 <__exidx_end+0x190799e>
 801a4b6:	4d442000 	stclmi	0, cr2, [r4, #-0]
 801a4ba:	64412058 	strbvs	r2, [r1], #-88	; 0xffffffa8
 801a4be:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 801a4c2:	20202073 	eorcs	r2, r0, r3, ror r0
 801a4c6:	3a202020 	bcc	882254e <__exidx_end+0x80657a>
 801a4ca:	0a642520 	beq	9923952 <__exidx_end+0x190797e>
 801a4ce:	4d442000 	stclmi	0, cr2, [r4, #-0]
 801a4d2:	6f462058 	svcvs	0x00462058
 801a4d6:	7270746f 	rsbsvc	r7, r0, #1862270976	; 0x6f000000
 801a4da:	20746e69 	rsbscs	r6, r4, r9, ror #28
 801a4de:	3a202020 	bcc	8822566 <__exidx_end+0x806592>
 801a4e2:	0a642520 	beq	992396a <__exidx_end+0x1907996>
 801a4e6:	65502000 	ldrbvs	r2, [r0, #-0]
 801a4ea:	6e6f7372 	mcrvs	3, 3, r7, cr15, cr2, {3}
 801a4ee:	74696c61 	strbtvc	r6, [r9], #-3169	; 0xfffff39f
 801a4f2:	64252079 	strtvs	r2, [r5], #-121	; 0xffffff87
 801a4f6:	20666f20 	rsbcs	r6, r6, r0, lsr #30
 801a4fa:	5b206425 	blpl	8833596 <__exidx_end+0x8175c2>
 801a4fe:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 801a502:	20000a5d 	andcs	r0, r0, sp, asr sl
 801a506:	20627553 	rsbcs	r7, r2, r3, asr r5
 801a50a:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 801a50e:	20736563 	rsbscs	r6, r3, r3, ror #10
 801a512:	20202020 	eorcs	r2, r0, r0, lsr #32
 801a516:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801a51a:	20000a64 	andcs	r0, r0, r4, ror #20
 801a51e:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
 801a522:	2073726f 	rsbscs	r7, r3, pc, ror #4
 801a526:	20202020 	eorcs	r2, r0, r0, lsr #32
 801a52a:	20202020 	eorcs	r2, r0, r0, lsr #32
 801a52e:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801a532:	00000a64 	andeq	r0, r0, r4, ror #20
	...

0801a538 <vtable for RDMDeviceResponder>:
	...
 801a540:	0800f089 	stmdaeq	r0, {r0, r3, r7, ip, sp, lr, pc}
 801a544:	0800f0a9 	stmdaeq	r0, {r0, r3, r5, r7, ip, sp, lr, pc}
 801a548:	0800f083 	stmdaeq	r0, {r0, r1, r7, ip, sp, lr, pc}
 801a54c:	0800f085 	stmdaeq	r0, {r0, r2, r7, ip, sp, lr, pc}

0801a550 <UID_ALL>:
 801a550:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 801a554:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

0801a558 <RDMHandler::PID_DEFINITIONS>:
 801a558:	00000060 	andeq	r0, r0, r0, rrx
 801a55c:	0800f579 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sl, ip, sp, lr, pc}
	...
 801a56c:	01010000 	mrseq	r0, (UNDEF: 1)
 801a570:	00000080 	andeq	r0, r0, r0, lsl #1
 801a574:	0800f661 	stmdaeq	r0, {r0, r5, r6, r9, sl, ip, sp, lr, pc}
	...
 801a584:	01010100 	mrseq	r0, (UNDEF: 17)
 801a588:	00000081 	andeq	r0, r0, r1, lsl #1
 801a58c:	0800f67d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r9, sl, ip, sp, lr, pc}
	...
 801a59c:	01010100 	mrseq	r0, (UNDEF: 17)
 801a5a0:	00000082 	andeq	r0, r0, r2, lsl #1
 801a5a4:	0800f69d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, sl, ip, sp, lr, pc}
 801a5a8:	00000000 	andeq	r0, r0, r0
 801a5ac:	0800f7ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, sl, ip, sp, lr, pc}
 801a5b0:	00000000 	andeq	r0, r0, r0
 801a5b4:	01010100 	mrseq	r0, (UNDEF: 17)
 801a5b8:	00000090 	muleq	r0, r0, r0
 801a5bc:	0800f5e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, sl, ip, sp, lr, pc}
 801a5c0:	00000000 	andeq	r0, r0, r0
 801a5c4:	0800f7b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, r9, sl, ip, sp, lr, pc}
 801a5c8:	00000000 	andeq	r0, r0, r0
 801a5cc:	01010100 	mrseq	r0, (UNDEF: 17)
 801a5d0:	00001000 	andeq	r1, r0, r0
 801a5d4:	0800f6d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, ip, sp, lr, pc}
 801a5d8:	00000000 	andeq	r0, r0, r0
 801a5dc:	0800f73d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, sl, ip, sp, lr, pc}
 801a5e0:	00000000 	andeq	r0, r0, r0
 801a5e4:	01010000 	mrseq	r0, (UNDEF: 1)
 801a5e8:	00001001 	andeq	r1, r0, r1
	...
 801a5f4:	0800f6f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, sl, ip, sp, lr, pc}
 801a5f8:	00000000 	andeq	r0, r0, r0
 801a5fc:	01010100 	mrseq	r0, (UNDEF: 17)
 801a600:	00000700 	andeq	r0, r0, r0, lsl #14
 801a604:	0800fae5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, fp, ip, sp, lr, pc}
	...
 801a614:	01000000 	mrseq	r0, (UNDEF: 0)
 801a618:	00000701 	andeq	r0, r0, r1, lsl #14
 801a61c:	0800fb0d 	stmdaeq	r0, {r0, r2, r3, r8, r9, fp, ip, sp, lr, pc}
	...
 801a62c:	01000004 	tsteq	r0, r4
 801a630:	00000702 	andeq	r0, r0, r2, lsl #14
 801a634:	0800fb59 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, fp, ip, sp, lr, pc}
	...
 801a644:	01000004 	tsteq	r0, r4
 801a648:	00000703 	andeq	r0, r0, r3, lsl #14
 801a64c:	0800fb89 	stmdaeq	r0, {r0, r3, r7, r8, r9, fp, ip, sp, lr, pc}
 801a650:	00000000 	andeq	r0, r0, r0
 801a654:	0800fbb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, fp, ip, sp, lr, pc}
 801a658:	00000000 	andeq	r0, r0, r0
 801a65c:	01000004 	tsteq	r0, r4
 801a660:	00000704 	andeq	r0, r0, r4, lsl #14
 801a664:	0800fc21 	stmdaeq	r0, {r0, r5, sl, fp, ip, sp, lr, pc}
 801a668:	00000000 	andeq	r0, r0, r0
 801a66c:	0800fc51 	stmdaeq	r0, {r0, r4, r6, sl, fp, ip, sp, lr, pc}
 801a670:	00000000 	andeq	r0, r0, r0
 801a674:	01000004 	tsteq	r0, r4
 801a678:	00000705 	andeq	r0, r0, r5, lsl #14
 801a67c:	0800fcc5 	stmdaeq	r0, {r0, r2, r6, r7, sl, fp, ip, sp, lr, pc}
	...
 801a68c:	01000004 	tsteq	r0, r4
 801a690:	00000707 	andeq	r0, r0, r7, lsl #14
	...
 801a69c:	0800fc99 	stmdaeq	r0, {r0, r3, r4, r7, sl, fp, ip, sp, lr, pc}
 801a6a0:	00000000 	andeq	r0, r0, r0
 801a6a4:	01000004 	tsteq	r0, r4
 801a6a8:	00000706 	andeq	r0, r0, r6, lsl #14
 801a6ac:	0800fd0d 	stmdaeq	r0, {r0, r2, r3, r8, sl, fp, ip, sp, lr, pc}
 801a6b0:	00000000 	andeq	r0, r0, r0
 801a6b4:	0800fd51 	stmdaeq	r0, {r0, r4, r6, r8, sl, fp, ip, sp, lr, pc}
 801a6b8:	00000000 	andeq	r0, r0, r0
 801a6bc:	01000004 	tsteq	r0, r4
 801a6c0:	00000709 	andeq	r0, r0, r9, lsl #14
	...
 801a6cc:	0800fd9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, sl, fp, ip, sp, lr, pc}
 801a6d0:	00000000 	andeq	r0, r0, r0
 801a6d4:	01000004 	tsteq	r0, r4
 801a6d8:	0000070b 	andeq	r0, r0, fp, lsl #14
 801a6dc:	0800fbfd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp, lr, pc}
	...
 801a6ec:	01000001 	tsteq	r0, r1
 801a6f0:	0000070a 	andeq	r0, r0, sl, lsl #14
 801a6f4:	0800fdc5 	stmdaeq	r0, {r0, r2, r6, r7, r8, sl, fp, ip, sp, lr, pc}
 801a6f8:	00000000 	andeq	r0, r0, r0
 801a6fc:	0800fdfd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp, lr, pc}
 801a700:	00000000 	andeq	r0, r0, r0
 801a704:	01000004 	tsteq	r0, r4
 801a708:	0000070c 	andeq	r0, r0, ip, lsl #14
 801a70c:	0800fe05 	stmdaeq	r0, {r0, r2, r9, sl, fp, ip, sp, lr, pc}
 801a710:	00000000 	andeq	r0, r0, r0
 801a714:	0800fe35 	stmdaeq	r0, {r0, r2, r4, r5, r9, sl, fp, ip, sp, lr, pc}
 801a718:	00000000 	andeq	r0, r0, r0
 801a71c:	01000000 	mrseq	r0, (UNDEF: 0)
 801a720:	0000070d 	andeq	r0, r0, sp, lsl #14
 801a724:	0800fe69 	stmdaeq	r0, {r0, r3, r5, r6, r9, sl, fp, ip, sp, lr, pc}
 801a728:	00000000 	andeq	r0, r0, r0
 801a72c:	0800fe99 	stmdaeq	r0, {r0, r3, r4, r7, r9, sl, fp, ip, sp, lr, pc}
 801a730:	00000000 	andeq	r0, r0, r0
 801a734:	01000000 	mrseq	r0, (UNDEF: 0)
 801a738:	204d4452 	subcs	r4, sp, r2, asr r4
 801a73c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 801a740:	63206563 			; <UNDEFINED> instruction: 0x63206563
 801a744:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801a748:	61727567 	cmnvs	r2, r7, ror #10
 801a74c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801a750:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 801a754:	66756e61 	ldrbtvs	r6, [r5], -r1, ror #28
 801a758:	75746361 	ldrbvc	r6, [r4, #-865]!	; 0xfffffc9f
 801a75c:	20726572 	rsbscs	r6, r2, r2, ror r5
 801a760:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 801a764:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801a768:	0a732a2e 	beq	9ce5028 <__exidx_end+0x1cc9054>
 801a76c:	614d2000 	mrsvs	r2, (UNDEF: 77)
 801a770:	6166756e 	cmnvs	r6, lr, ror #10
 801a774:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
 801a778:	49207265 	stmdbmi	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
 801a77c:	20202044 	eorcs	r2, r0, r4, asr #32
 801a780:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801a784:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 801a788:	000a5832 	andeq	r5, sl, r2, lsr r8
 801a78c:	72655320 	rsbvc	r5, r5, #32, 6	; 0x80000000
 801a790:	206c6169 	rsbcs	r6, ip, r9, ror #2
 801a794:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
 801a798:	20207265 	eorcs	r7, r0, r5, ror #4
 801a79c:	3a202020 	bcc	8822824 <__exidx_end+0x806850>
 801a7a0:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 801a7a4:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 801a7a8:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 801a7ac:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 801a7b0:	20000a58 	andcs	r0, r0, r8, asr sl
 801a7b4:	746f6f52 	strbtvc	r6, [pc], #-3922	; 801a7bc <RDMHandler::PID_DEFINITIONS+0x264>
 801a7b8:	62616c20 	rsbvs	r6, r1, #32, 24	; 0x2000
 801a7bc:	20206c65 	eorcs	r6, r0, r5, ror #24
 801a7c0:	20202020 	eorcs	r2, r0, r0, lsr #32
 801a7c4:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801a7c8:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 801a7cc:	5020000a 	eorpl	r0, r0, sl
 801a7d0:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xfffff08e
 801a7d4:	43207463 			; <UNDEFINED> instruction: 0x43207463
 801a7d8:	67657461 	strbvs	r7, [r5, -r1, ror #8]!
 801a7dc:	2079726f 	rsbscs	r7, r9, pc, ror #4
 801a7e0:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801a7e4:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 801a7e8:	0a58322e 	beq	96270a8 <__exidx_end+0x160b0d4>
 801a7ec:	72502000 	subsvc	r2, r0, #0
 801a7f0:	6375646f 	cmnvs	r5, #1862270976	; 0x6f000000
 801a7f4:	65442074 	strbvs	r2, [r4, #-116]	; 0xffffff8c
 801a7f8:	6c696174 	stfvse	f6, [r9], #-464	; 0xfffffe30
 801a7fc:	20202020 	eorcs	r2, r0, r0, lsr #32
 801a800:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801a804:	2e255832 	mcrcs	8, 1, r5, cr5, cr2, {1}
 801a808:	000a5832 	andeq	r5, sl, r2, lsr r8

0801a80c <DEVICE_LABEL>:
 801a80c:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 801a810:	37303246 	ldrcc	r3, [r0, -r6, asr #4]!
 801a814:	52204752 	eorpl	r4, r0, #21495808	; 0x1480000
 801a818:	44204d44 	strtmi	r4, [r0], #-3396	; 0xfffff2bc
 801a81c:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 801a820:	 	subseq	r0, r0, r5, rrx

0801a822 <RDMConst::MANUFACTURER_ID>:
 801a822:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

0801a824 <RDMConst::MANUFACTURER_NAME>:
 801a824:	70747468 	rsbsvc	r7, r4, r8, ror #8
 801a828:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 801a82c:	6f2e7777 	svcvs	0x002e7777
 801a830:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 801a834:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 801a838:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 801a83c:	0067726f 	rsbeq	r7, r7, pc, ror #4
 801a840:	78383025 	ldmdavc	r8!, {r0, r2, r5, ip, sp}
 801a844:	3430252d 	ldrtcc	r2, [r0], #-1325	; 0xfffffad3
 801a848:	30252d78 	eorcc	r2, r5, r8, ror sp
 801a84c:	252d7834 	strcs	r7, [sp, #-2100]!	; 0xfffff7cc
 801a850:	25783230 	ldrbcs	r3, [r8, #-560]!	; 0xfffffdd0
 801a854:	2d783230 	lfmcs	f3, 2, [r8, #-192]!	; 0xffffff40
 801a858:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801a85c:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801a860:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801a864:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801a868:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801a86c:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801a870:	78695000 	stmdavc	r9!, {ip, lr}^
 801a874:	44206c65 	strtmi	r6, [r0], #-3173	; 0xfffff39b
 801a878:	6320584d 			; <UNDEFINED> instruction: 0x6320584d
 801a87c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801a880:	61727567 	cmnvs	r2, r7, ror #10
 801a884:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801a888:	4f20000a 	svcmi	0x0020000a
 801a88c:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 801a890:	3a207374 	bcc	8837668 <__exidx_end+0x81b694>
 801a894:	0a642520 	beq	9923d1c <__exidx_end+0x1907d48>
 801a898:	72472000 	subvc	r2, r7, #0
 801a89c:	6970756f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
 801a8a0:	6320676e 			; <UNDEFINED> instruction: 0x6320676e
 801a8a4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 801a8a8:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801a8ac:	475b2064 	ldrbmi	r2, [fp, -r4, rrx]
 801a8b0:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 801a8b4:	203a2073 	eorscs	r2, sl, r3, ror r0
 801a8b8:	0a5d6425 	beq	9773954 <__exidx_end+0x1757980>
 801a8bc:	00000000 	andeq	r0, r0, r0

0801a8c0 <vtable for WS28xxDmxMulti>:
	...
 801a8c8:	0801017d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8}
 801a8cc:	0801019d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8}
 801a8d0:	0801015b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8}
 801a8d4:	08010305 	stmdaeq	r1, {r0, r2, r8, r9}
 801a8d8:	080101d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r8}
 801a8dc:	080101af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8}
 801a8e0:	080102e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9}
 801a8e4:	080102ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r9}
 801a8e8:	0801014d 	stmdaeq	r1, {r0, r2, r3, r6, r8}
 801a8ec:	08010151 	stmdaeq	r1, {r0, r4, r6, r8}
 801a8f0:	08010157 	stmdaeq	r1, {r0, r1, r2, r4, r6, r8}
 801a8f4:	08015dcf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r8, sl, fp, ip, lr}
 801a8f8:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801a8fc:	2a2e253a 	bcs	8ba3dec <__exidx_end+0xb87e18>
 801a900:	23002c66 	movwcs	r2, #3174	; 0xc66
 801a904:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 801a908:	0a662a2e 	beq	99a51c8 <__exidx_end+0x19891f4>
 801a90c:	65643c00 	strbvs	r3, [r4, #-3072]!	; 0xfffff400
 801a910:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 801a914:	4f003e74 	svcmi	0x00003e74
 801a918:	77726576 			; <UNDEFINED> instruction: 0x77726576
 801a91c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 801a920:	74616420 	strbtvc	r6, [r1], #-1056	; 0xfffffbe0
 801a924:	65687361 	strbvs	r7, [r8, #-865]!	; 0xfffffc9f
 801a928:	4f007465 	svcmi	0x00007465
 801a92c:	77726576 			; <UNDEFINED> instruction: 0x77726576
 801a930:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 801a934:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 801a938:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801a93c:	29737528 	ldmdbcs	r3!, {r3, r5, r8, sl, ip, sp, lr}^
 801a940:	6f724700 	svcvs	0x00724700
 801a944:	6e697075 	mcrvs	0, 3, r7, cr9, cr5, {3}
 801a948:	6c430067 	mcrrvs	0, 6, r0, r3, cr7
 801a94c:	206b636f 	rsbcs	r6, fp, pc, ror #6
 801a950:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
 801a954:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 801a958:	00737069 	rsbseq	r7, r3, r9, rrx
 801a95c:	31415041 	cmpcc	r1, r1, asr #32
 801a960:	532f3230 			; <UNDEFINED> instruction: 0x532f3230
 801a964:	3238394b 	eorscc	r3, r8, #1228800	; 0x12c000
 801a968:	65540032 	ldrbvs	r0, [r4, #-50]	; 0xffffffce
 801a96c:	70207473 	eorvc	r7, r0, r3, ror r4
 801a970:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
 801a974:	59006e72 	stmdbpl	r0, {r1, r4, r5, r6, r9, sl, fp, sp, lr}
 801a978:	4e007365 	cdpmi	3, 0, cr7, cr0, cr5, {3}
 801a97c:	6950006f 	ldmdbvs	r0, {r0, r1, r2, r3, r5, r6}^
 801a980:	206c6578 	rsbcs	r6, ip, r8, ror r5
 801a984:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801a988:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801a98c:	6f697461 	svcvs	0x00697461
 801a990:	20000a6e 	andcs	r0, r0, lr, ror #20
 801a994:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 801a998:	20202020 	eorcs	r2, r0, r0, lsr #32
 801a99c:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 801a9a0:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 801a9a4:	20000a5d 	andcs	r0, r0, sp, asr sl
 801a9a8:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
 801a9ac:	20202074 	eorcs	r2, r0, r4, ror r0
 801a9b0:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801a9b4:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 801a9b8:	69707061 	ldmdbvs	r0!, {r0, r5, r6, ip, sp, lr}^
 801a9bc:	3a20676e 	bcc	883477c <__exidx_end+0x8187a8>
 801a9c0:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801a9c4:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 801a9c8:	5420000a 	strtpl	r0, [r0], #-10
 801a9cc:	20204830 	eorcs	r4, r0, r0, lsr r8
 801a9d0:	3a202020 	bcc	8822a58 <__exidx_end+0x806a84>
 801a9d4:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 801a9d8:	305b2066 	subscc	r2, fp, r6, rrx
 801a9dc:	5d582578 	cfldr64pl	mvdx2, [r8, #-480]	; 0xfffffe20
 801a9e0:	5420000a 	strtpl	r0, [r0], #-10
 801a9e4:	20204831 	eorcs	r4, r0, r1, lsr r8
 801a9e8:	3a202020 	bcc	8822a70 <__exidx_end+0x806a9c>
 801a9ec:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 801a9f0:	305b2066 	subscc	r2, fp, r6, rrx
 801a9f4:	5d582578 	cfldr64pl	mvdx2, [r8, #-480]	; 0xfffffe20
 801a9f8:	4720000a 	strmi	r0, [r0, -sl]!
 801a9fc:	61626f6c 	cmnvs	r2, ip, ror #30
 801aa00:	6972426c 	ldmdbvs	r2!, {r2, r3, r5, r6, r9, lr}^
 801aa04:	6e746867 	cdpvs	8, 7, cr6, cr4, cr7, {3}
 801aa08:	3a737365 	bcc	9cf77a4 <__exidx_end+0x1cdb7d0>
 801aa0c:	0a752520 	beq	9d63e94 <__exidx_end+0x1d47ec0>
 801aa10:	61472000 	mrsvs	r2, (UNDEF: 71)
 801aa14:	20616d6d 	rsbcs	r6, r1, sp, ror #26
 801aa18:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
 801aa1c:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 801aa20:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 801aa24:	20000a73 	andcs	r0, r0, r3, ror sl
 801aa28:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 801aa2c:	25203a6b 	strcs	r3, [r0, #-2667]!	; 0xfffff595
 801aa30:	7a482075 	bvc	9222c0c <__exidx_end+0x1206c38>
 801aa34:	0000000a 	andeq	r0, r0, sl

0801aa38 <CSWTCH.9>:
 801aa38:	0801ac4c 	stmdaeq	r1, {r2, r3, r6, sl, fp, sp, pc}
 801aa3c:	0801ad4c 	stmdaeq	r1, {r2, r3, r6, r8, sl, fp, sp, pc}
 801aa40:	0801ae4c 	stmdaeq	r1, {r2, r3, r6, r9, sl, fp, sp, pc}
 801aa44:	0801af4c 	stmdaeq	r1, {r2, r3, r6, r8, r9, sl, fp, sp, pc}
 801aa48:	0801b04c 	stmdaeq	r1, {r2, r3, r6, ip, sp, pc}

0801aa4c <gamma10_0>:
 801aa4c:	03020100 	movweq	r0, #8448	; 0x2100
 801aa50:	07060504 	streq	r0, [r6, -r4, lsl #10]
 801aa54:	0b0a0908 	bleq	829ce7c <__exidx_end+0x280ea8>
 801aa58:	0f0e0d0c 	svceq	0x000e0d0c
 801aa5c:	13121110 	tstne	r2, #16, 2
 801aa60:	17161514 			; <UNDEFINED> instruction: 0x17161514
 801aa64:	1b1a1918 	blne	86a0ecc <__exidx_end+0x684ef8>
 801aa68:	1f1e1d1c 	svcne	0x001e1d1c
 801aa6c:	23222120 			; <UNDEFINED> instruction: 0x23222120
 801aa70:	27262524 	strcs	r2, [r6, -r4, lsr #10]!
 801aa74:	2b2a2928 	blcs	8aa4f1c <__exidx_end+0xa88f48>
 801aa78:	2f2e2d2c 	svccs	0x002e2d2c
 801aa7c:	33323130 	teqcc	r2, #48, 2
 801aa80:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801aa84:	3b3a3938 	blcc	8ea8f6c <__exidx_end+0xe8cf98>
 801aa88:	3f3e3d3c 	svccc	0x003e3d3c
 801aa8c:	43424140 	movtmi	r4, #8512	; 0x2140
 801aa90:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801aa94:	4b4a4948 	blmi	92acfbc <__exidx_end+0x1290fe8>
 801aa98:	4f4e4d4c 	svcmi	0x004e4d4c
 801aa9c:	53525150 	cmppl	r2, #80, 2
 801aaa0:	57565554 			; <UNDEFINED> instruction: 0x57565554
 801aaa4:	5b5a5958 	blpl	96b100c <__exidx_end+0x1695038>
 801aaa8:	5f5e5d5c 	svcpl	0x005e5d5c
 801aaac:	63626160 	cmnvs	r2, #96, 2
 801aab0:	67666564 	strbvs	r6, [r6, -r4, ror #10]!
 801aab4:	6b6a6968 	blvs	9ab505c <__exidx_end+0x1a99088>
 801aab8:	6f6e6d6c 	svcvs	0x006e6d6c
 801aabc:	73727170 	cmnvc	r2, #112, 2
 801aac0:	77767574 			; <UNDEFINED> instruction: 0x77767574
 801aac4:	7b7a7978 	blvc	9eb90ac <__exidx_end+0x1e9d0d8>
 801aac8:	7f7e7d7c 	svcvc	0x007e7d7c
 801aacc:	83828180 	orrhi	r8, r2, #128, 2
 801aad0:	87868584 	strhi	r8, [r6, r4, lsl #11]
 801aad4:	8b8a8988 	blhi	62bd0fc <__stack_size+0x62ba8fc>
 801aad8:	8f8e8d8c 	svchi	0x008e8d8c
 801aadc:	93929190 	orrsls	r9, r2, #144, 2	; 0x24
 801aae0:	97969594 			; <UNDEFINED> instruction: 0x97969594
 801aae4:	9b9a9998 	blls	66c114c <__stack_size+0x66be94c>
 801aae8:	9f9e9d9c 	svcls	0x009e9d9c
 801aaec:	a3a2a1a0 			; <UNDEFINED> instruction: 0xa3a2a1a0
 801aaf0:	a7a6a5a4 	strge	sl, [r6, r4, lsr #11]!
 801aaf4:	abaaa9a8 	blge	6ac519c <__stack_size+0x6ac299c>
 801aaf8:	afaeadac 	svcge	0x00aeadac
 801aafc:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
 801ab00:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
 801ab04:	bbbab9b8 	bllt	6ec91ec <__stack_size+0x6ec69ec>
 801ab08:	bfbebdbc 	svclt	0x00bebdbc
 801ab0c:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
 801ab10:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
 801ab14:	cbcac9c8 	blgt	72cd23c <__stack_size+0x72caa3c>
 801ab18:	cfcecdcc 	svcgt	0x00cecdcc
 801ab1c:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
 801ab20:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
 801ab24:	dbdad9d8 	blle	76d128c <__stack_size+0x76cea8c>
 801ab28:	dfdedddc 	svcle	0x00dedddc
 801ab2c:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
 801ab30:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
 801ab34:	ebeae9e8 	bl	7ad52dc <__stack_size+0x7ad2adc>
 801ab38:	efeeedec 	svc	0x00eeedec
 801ab3c:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
 801ab40:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
 801ab44:	fbfaf9f8 	blx	7ed932e <__stack_size+0x7ed6b2e>
 801ab48:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc

0801ab4c <gamma20_0>:
	...
 801ab58:	01010101 	tsteq	r1, r1, lsl #2
 801ab5c:	01010101 	tsteq	r1, r1, lsl #2
 801ab60:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801ab64:	03030202 	movweq	r0, #12802	; 0x3202
 801ab68:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 801ab6c:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 801ab70:	06060505 	streq	r0, [r6], -r5, lsl #10
 801ab74:	07070706 	streq	r0, [r7, -r6, lsl #14]
 801ab78:	09080808 	stmdbeq	r8, {r3, fp}
 801ab7c:	0a0a0909 	beq	829cfa8 <__exidx_end+0x280fd4>
 801ab80:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801ab84:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 801ab88:	100f0f0e 	andne	r0, pc, lr, lsl #30
 801ab8c:	12111110 	andsne	r1, r1, #16, 2
 801ab90:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 801ab94:	16151514 			; <UNDEFINED> instruction: 0x16151514
 801ab98:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 801ab9c:	1b1a1a19 	blne	86a1408 <__exidx_end+0x685434>
 801aba0:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 801aba4:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 801aba8:	23232221 			; <UNDEFINED> instruction: 0x23232221
 801abac:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 801abb0:	2a292827 	bcs	8a64c54 <__exidx_end+0xa48c80>
 801abb4:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 801abb8:	302f2f2e 	eorcc	r2, pc, lr, lsr #30
 801abbc:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 801abc0:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 801abc4:	3b3a3938 	blcc	8ea90ac <__exidx_end+0xe8d0d8>
 801abc8:	3f3e3d3c 	svccc	0x003e3d3c
 801abcc:	43424140 	movtmi	r4, #8512	; 0x2140
 801abd0:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801abd4:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 801abd8:	504f4e4d 	subpl	r4, pc, sp, asr #28
 801abdc:	55545251 	ldrbpl	r5, [r4, #-593]	; 0xfffffdaf
 801abe0:	59585756 	ldmdbpl	r8, {r1, r2, r4, r6, r8, r9, sl, ip, lr}^
 801abe4:	5e5d5c5b 	mrcpl	12, 2, r5, cr13, cr11, {2}
 801abe8:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 801abec:	68676664 	stmdavs	r7!, {r2, r5, r6, r9, sl, sp, lr}^
 801abf0:	6d6c6b69 	fstmdbxvs	ip!, {d22-d73}	;@ Deprecated
 801abf4:	7371706f 	cmnvc	r1, #111	; 0x6f
 801abf8:	78777574 	ldmdavc	r7!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
 801abfc:	7e7c7b79 	vmovvc.s8	r7, d12[7]
 801ac00:	8382807f 	orrhi	r8, r2, #127	; 0x7f
 801ac04:	89888685 	stmibhi	r8, {r0, r2, r7, r9, sl, pc}
 801ac08:	8f8e8c8b 	svchi	0x008e8c8b
 801ac0c:	95949291 	ldrls	r9, [r4, #657]	; 0x291
 801ac10:	9b9a9897 	blls	66c0e74 <__stack_size+0x66be674>
 801ac14:	a2a09e9d 	adcge	r9, r0, #2512	; 0x9d0
 801ac18:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 801ac1c:	afadabaa 	svcge	0x00adabaa
 801ac20:	b5b4b2b0 	ldrlt	fp, [r4, #688]!	; 0x2b0
 801ac24:	bcbab9b7 			; <UNDEFINED> instruction: 0xbcbab9b7
 801ac28:	c3c1c0be 	bicgt	ip, r1, #190	; 0xbe
 801ac2c:	cac8c7c5 	bgt	724cb48 <__stack_size+0x724a348>
 801ac30:	d1cfcecc 	bicle	ip, pc, ip, asr #29
 801ac34:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 801ac38:	e0dedcda 	ldrsb	sp, [lr], #202	; 0xca
 801ac3c:	e8e6e4e2 	stmia	r6!, {r1, r5, r6, r7, sl, sp, lr, pc}^
 801ac40:	efedebe9 	svc	0x00edebe9
 801ac44:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 801ac48:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0801ac4c <gamma21_0>:
	...
 801ac58:	01010000 	mrseq	r0, (UNDEF: 1)
 801ac5c:	01010101 	tsteq	r1, r1, lsl #2
 801ac60:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 801ac64:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801ac68:	03030302 	movweq	r0, #13058	; 0x3302
 801ac6c:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 801ac70:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
 801ac74:	06060505 	streq	r0, [r6], -r5, lsl #10
 801ac78:	07070706 	streq	r0, [r7, -r6, lsl #14]
 801ac7c:	09080808 	stmdbeq	r8, {r3, fp}
 801ac80:	0a0a0909 	beq	829d0ac <__exidx_end+0x2810d8>
 801ac84:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801ac88:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 801ac8c:	0f0f0e0e 	svceq	0x000f0e0e
 801ac90:	11111010 	tstne	r1, r0, lsl r0
 801ac94:	14131212 	ldrne	r1, [r3], #-530	; 0xfffffdee
 801ac98:	16151514 			; <UNDEFINED> instruction: 0x16151514
 801ac9c:	18181716 	ldmdane	r8, {r1, r2, r4, r8, r9, sl, ip}
 801aca0:	1b1a1919 	blne	86a110c <__exidx_end+0x685138>
 801aca4:	1d1d1c1b 	ldcne	12, cr1, [sp, #-108]	; 0xffffff94
 801aca8:	201f1f1e 	andscs	r1, pc, lr, lsl pc	; <UNPREDICTABLE>
 801acac:	23222121 			; <UNDEFINED> instruction: 0x23222121
 801acb0:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 801acb4:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 801acb8:	2c2c2b2a 			; <UNDEFINED> instruction: 0x2c2c2b2a
 801acbc:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 801acc0:	33333231 	teqcc	r3, #268435459	; 0x10000003
 801acc4:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801acc8:	3b3a3938 	blcc	8ea91b0 <__exidx_end+0xe8d1dc>
 801accc:	3f3e3d3c 	svccc	0x003e3d3c
 801acd0:	43424140 	movtmi	r4, #8512	; 0x2140
 801acd4:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801acd8:	4c4b4948 	mcrrmi	9, 4, r4, fp, cr8	; <UNPREDICTABLE>
 801acdc:	504f4e4d 	subpl	r4, pc, sp, asr #28
 801ace0:	55545351 	ldrbpl	r5, [r4, #-849]	; 0xfffffcaf
 801ace4:	5a585756 	bpl	9630a44 <__exidx_end+0x1614a70>
 801ace8:	5f5d5c5b 	svcpl	0x005d5c5b
 801acec:	64626160 	strbtvs	r6, [r2], #-352	; 0xfffffea0
 801acf0:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 801acf4:	6e6d6b6a 	vnmulvs.f64	d22, d13, d26
 801acf8:	74727170 	ldrbtvc	r7, [r2], #-368	; 0xfffffe90
 801acfc:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 801ad00:	7f7e7c7b 	svcvc	0x007e7c7b
 801ad04:	85838281 	strhi	r8, [r3, #641]	; 0x281
 801ad08:	8b898886 	blhi	627cf28 <__stack_size+0x627a728>
 801ad0c:	91908e8d 	orrsls	r8, r0, sp, lsl #29
 801ad10:	97969493 			; <UNDEFINED> instruction: 0x97969493
 801ad14:	9e9c9b99 	vmovls.32	r9, d28[0]
 801ad18:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 801ad1c:	abaaa8a6 	blge	6ac4fbc <__stack_size+0x6ac27bc>
 801ad20:	b2b0afad 	adcslt	sl, r0, #692	; 0x2b4
 801ad24:	b9b7b6b4 	ldmiblt	r7!, {r2, r4, r5, r7, r9, sl, ip, sp, pc}
 801ad28:	c0bfbdbb 	ldrhtgt	fp, [pc], fp
 801ad2c:	c8c6c4c2 	stmiagt	r6, {r1, r6, r7, sl, lr, pc}^
 801ad30:	cfcdcbca 	svcgt	0x00cdcbca
 801ad34:	d7d5d3d1 			; <UNDEFINED> instruction: 0xd7d5d3d1
 801ad38:	dfdddbd9 	svcle	0x00dddbd9
 801ad3c:	e6e4e2e1 	strbt	lr, [r4], r1, ror #5
 801ad40:	eeeceae8 	vfms.f32	s29, s25, s17
 801ad44:	f7f5f3f1 			; <UNDEFINED> instruction: 0xf7f5f3f1
 801ad48:	fffdfbf9 			; <UNDEFINED> instruction: 0xfffdfbf9

0801ad4c <gamma22_0>:
	...
 801ad58:	01000000 	mrseq	r0, (UNDEF: 0)
 801ad5c:	01010101 	tsteq	r1, r1, lsl #2
 801ad60:	01010101 	tsteq	r1, r1, lsl #2
 801ad64:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 801ad68:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801ad6c:	03030303 	movweq	r0, #13059	; 0x3303
 801ad70:	04040403 	streq	r0, [r4], #-1027	; 0xfffffbfd
 801ad74:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 801ad78:	06060605 	streq	r0, [r6], -r5, lsl #12
 801ad7c:	07070706 	streq	r0, [r7, -r6, lsl #14]
 801ad80:	09080808 	stmdbeq	r8, {r3, fp}
 801ad84:	0a0a0909 	beq	829d1b0 <__exidx_end+0x2811dc>
 801ad88:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801ad8c:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 801ad90:	0f0f0e0e 	svceq	0x000f0e0e
 801ad94:	11111010 	tstne	r1, r0, lsl r0
 801ad98:	13131212 	tstne	r3, #536870913	; 0x20000001
 801ad9c:	16151414 			; <UNDEFINED> instruction: 0x16151414
 801ada0:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 801ada4:	1a1a1919 	bne	86a1210 <__exidx_end+0x68523c>
 801ada8:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 801adac:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 801adb0:	23222121 			; <UNDEFINED> instruction: 0x23222121
 801adb4:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 801adb8:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 801adbc:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 801adc0:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 801adc4:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 801adc8:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801adcc:	3b3a3938 	blcc	8ea92b4 <__exidx_end+0xe8d2e0>
 801add0:	3f3e3d3c 	svccc	0x003e3d3c
 801add4:	43424140 	movtmi	r4, #8512	; 0x2140
 801add8:	47464544 	strbmi	r4, [r6, -r4, asr #10]
 801addc:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 801ade0:	514f4e4d 	cmppl	pc, sp, asr #28
 801ade4:	55545352 	ldrbpl	r5, [r4, #-850]	; 0xfffffcae
 801ade8:	5a595857 	bpl	9670f4c <__exidx_end+0x1654f78>
 801adec:	5f5e5d5b 	svcpl	0x005e5d5b
 801adf0:	64636261 	strbtvs	r6, [r3], #-609	; 0xfffffd9f
 801adf4:	6a696766 	bvs	9a74b94 <__exidx_end+0x1a58bc0>
 801adf8:	6f6e6d6b 	svcvs	0x006e6d6b
 801adfc:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 801ae00:	7b797877 	blvc	9e78fe4 <__exidx_end+0x1e5d010>
 801ae04:	817f7e7c 	cmnhi	pc, ip, ror lr	; <UNPREDICTABLE>
 801ae08:	87858482 	strhi	r8, [r5, r2, lsl #9]
 801ae0c:	8d8c8a89 	vstrhi	s16, [ip, #548]	; 0x224
 801ae10:	9492918f 	ldrls	r9, [r2], #399	; 0x18f
 801ae14:	9a999795 	bls	6680c70 <__stack_size+0x667e470>
 801ae18:	a19f9e9c 			; <UNDEFINED> instruction: 0xa19f9e9c
 801ae1c:	a8a6a5a3 	stmiage	r6!, {r0, r1, r5, r7, r8, sl, sp, pc}
 801ae20:	afadacaa 	svcge	0x00adacaa
 801ae24:	b6b5b3b1 			; <UNDEFINED> instruction: 0xb6b5b3b1
 801ae28:	bebcbab8 			; <UNDEFINED> instruction: 0xbebcbab8
 801ae2c:	c5c4c2c0 	strbgt	ip, [r4, #704]	; 0x2c0
 801ae30:	cdcbc9c7 	vstrgt.16	s25, [fp, #398]	; 0x18e	; <UNPREDICTABLE>
 801ae34:	d5d3d1cf 	ldrble	sp, [r3, #463]	; 0x1cf
 801ae38:	dddbd9d7 	vldrle.16	s27, [fp, #430]	; 0x1ae	; <UNPREDICTABLE>
 801ae3c:	e5e3e1df 	strb	lr, [r3, #479]!	; 0x1df
 801ae40:	eeeceae7 	vfms.f32	s29, s25, s15
 801ae44:	f6f4f2f0 			; <UNDEFINED> instruction: 0xf6f4f2f0
 801ae48:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8

0801ae4c <gamma23_0>:
	...
 801ae5c:	01010100 	mrseq	r0, (UNDEF: 17)
 801ae60:	01010101 	tsteq	r1, r1, lsl #2
 801ae64:	01010101 	tsteq	r1, r1, lsl #2
 801ae68:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801ae6c:	03020202 	movweq	r0, #8706	; 0x2202
 801ae70:	03030303 	movweq	r0, #13059	; 0x3303
 801ae74:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 801ae78:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 801ae7c:	06060605 	streq	r0, [r6], -r5, lsl #12
 801ae80:	07070707 	streq	r0, [r7, -r7, lsl #14]
 801ae84:	09080808 	stmdbeq	r8, {r3, fp}
 801ae88:	0a0a0a09 	beq	829d6b4 <__exidx_end+0x2816e0>
 801ae8c:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801ae90:	0d0d0d0c 	stceq	13, cr0, [sp, #-48]	; 0xffffffd0
 801ae94:	0f0f0e0e 	svceq	0x000f0e0e
 801ae98:	11111010 	tstne	r1, r0, lsl r0
 801ae9c:	13131212 	tstne	r3, #536870913	; 0x20000001
 801aea0:	15151414 	ldrne	r1, [r5, #-1044]	; 0xfffffbec
 801aea4:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 801aea8:	1a1a1918 	bne	86a1310 <__exidx_end+0x68533c>
 801aeac:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 801aeb0:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 801aeb4:	23222120 			; <UNDEFINED> instruction: 0x23222120
 801aeb8:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 801aebc:	29282726 	stmdbcs	r8!, {r1, r2, r5, r8, r9, sl, sp}
 801aec0:	2c2b2a2a 			; <UNDEFINED> instruction: 0x2c2b2a2a
 801aec4:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 801aec8:	33323131 	teqcc	r2, #1073741836	; 0x4000000c
 801aecc:	37363534 			; <UNDEFINED> instruction: 0x37363534
 801aed0:	3b3a3938 	blcc	8ea93b8 <__exidx_end+0xe8d3e4>
 801aed4:	3f3e3d3c 	svccc	0x003e3d3c
 801aed8:	43424140 	movtmi	r4, #8512	; 0x2140
 801aedc:	48474645 	stmdami	r7, {r0, r2, r6, r9, sl, lr}^
 801aee0:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 801aee4:	51504f4e 	cmppl	r0, lr, asr #30
 801aee8:	56555452 			; <UNDEFINED> instruction: 0x56555452
 801aeec:	5b5a5957 	blpl	96b1450 <__exidx_end+0x169547c>
 801aef0:	605f5e5c 	subsvs	r5, pc, ip, asr lr	; <UNPREDICTABLE>
 801aef4:	66646362 	strbtvs	r6, [r4], -r2, ror #6
 801aef8:	6b6a6867 	blvs	9ab509c <__exidx_end+0x1a990c8>
 801aefc:	71706e6d 	cmnvc	r0, sp, ror #28
 801af00:	77757472 			; <UNDEFINED> instruction: 0x77757472
 801af04:	7d7b7a78 	vldmdbvc	fp!, {s15-s134}
 801af08:	8382807e 	orrhi	r8, r2, #126	; 0x7e
 801af0c:	8a888685 	bhi	623c928 <__stack_size+0x623a128>
 801af10:	908f8d8b 	addls	r8, pc, fp, lsl #27
 801af14:	97959492 			; <UNDEFINED> instruction: 0x97959492
 801af18:	9e9c9a99 			; <UNDEFINED> instruction: 0x9e9c9a99
 801af1c:	a5a3a1a0 	strge	sl, [r3, #416]!	; 0x1a0
 801af20:	acaaa9a7 			; <UNDEFINED> instruction: 0xacaaa9a7
 801af24:	b4b2b0ae 	ldrtlt	fp, [r2], #174	; 0xae
 801af28:	bbb9b7b6 	bllt	6e88e08 <__stack_size+0x6e86608>
 801af2c:	c3c1bfbd 	bicgt	fp, r1, #756	; 0x2f4
 801af30:	cbc9c7c5 	blgt	728ce4c <__stack_size+0x728a64c>
 801af34:	d3d1cfcd 	bicsle	ip, r1, #820	; 0x334
 801af38:	dcdad7d5 	ldclle	7, cr13, [sl], {213}	; 0xd5
 801af3c:	e4e2e0de 	strbt	lr, [r2], #222	; 0xde
 801af40:	edebe9e6 			; <UNDEFINED> instruction: 0xedebe9e6
 801af44:	f6f4f1ef 			; <UNDEFINED> instruction: 0xf6f4f1ef
 801af48:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0801af4c <gamma24_0>:
	...
 801af5c:	01000000 	mrseq	r0, (UNDEF: 0)
 801af60:	01010101 	tsteq	r1, r1, lsl #2
 801af64:	01010101 	tsteq	r1, r1, lsl #2
 801af68:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
 801af6c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801af70:	03030202 	movweq	r0, #12802	; 0x3202
 801af74:	04030303 	streq	r0, [r3], #-771	; 0xfffffcfd
 801af78:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 801af7c:	05050505 	streq	r0, [r5, #-1285]	; 0xfffffafb
 801af80:	06060606 	streq	r0, [r6], -r6, lsl #12
 801af84:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 801af88:	09090808 	stmdbeq	r9, {r3, fp}
 801af8c:	0a0a0a09 	beq	829d7b8 <__exidx_end+0x2817e4>
 801af90:	0c0b0b0b 			; <UNDEFINED> instruction: 0x0c0b0b0b
 801af94:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 801af98:	0f0f0e0e 	svceq	0x000f0e0e
 801af9c:	11111010 	tstne	r1, r0, lsl r0
 801afa0:	13131212 	tstne	r3, #536870913	; 0x20000001
 801afa4:	16151414 			; <UNDEFINED> instruction: 0x16151414
 801afa8:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 801afac:	1a1a1918 	bne	86a1414 <__exidx_end+0x685440>
 801afb0:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 801afb4:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 801afb8:	23222120 			; <UNDEFINED> instruction: 0x23222120
 801afbc:	26252423 	strtcs	r2, [r5], -r3, lsr #8
 801afc0:	29282727 	stmdbcs	r8!, {r0, r1, r2, r5, r8, r9, sl, sp}
 801afc4:	2c2b2b2a 			; <UNDEFINED> instruction: 0x2c2b2b2a
 801afc8:	302f2e2d 	eorcc	r2, pc, sp, lsr #28
 801afcc:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 801afd0:	37363535 			; <UNDEFINED> instruction: 0x37363535
 801afd4:	3b3a3938 	blcc	8ea94bc <__exidx_end+0xe8d4e8>
 801afd8:	403f3e3c 	eorsmi	r3, pc, ip, lsr lr	; <UNPREDICTABLE>
 801afdc:	44434241 	strbmi	r4, [r3], #-577	; 0xfffffdbf
 801afe0:	49474645 	stmdbmi	r7, {r0, r2, r6, r9, sl, lr}^
 801afe4:	4d4c4b4a 	vstrmi	d20, [ip, #-296]	; 0xfffffed8
 801afe8:	5251504e 	subspl	r5, r1, #78	; 0x4e
 801afec:	57565553 			; <UNDEFINED> instruction: 0x57565553
 801aff0:	5c5b5a58 	mrrcpl	10, 5, r5, fp, cr8
 801aff4:	62605f5e 	rsbvs	r5, r0, #376	; 0x178
 801aff8:	67666463 	strbvs	r6, [r6, -r3, ror #8]!
 801affc:	6d6c6a69 	vstmdbvs	ip!, {s13-s117}
 801b000:	7372706f 	cmnvc	r2, #111	; 0x6f
 801b004:	79787675 	ldmdbvc	r8!, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 801b008:	7f7e7c7b 	svcvc	0x007e7c7b
 801b00c:	86848381 	strhi	r8, [r4], r1, lsl #7
 801b010:	8d8b8988 	vstrhi.16	s16, [fp, #272]	; 0x110	; <UNPREDICTABLE>
 801b014:	9492908e 	ldrls	r9, [r2], #142	; 0x8e
 801b018:	9b999795 	blls	6680e74 <__stack_size+0x667e674>
 801b01c:	a2a09e9c 	adcge	r9, r0, #156, 28	; 0x9c0
 801b020:	a9a7a6a4 	stmibge	r7!, {r2, r5, r7, r9, sl, sp, pc}
 801b024:	b1afadab 			; <UNDEFINED> instruction: 0xb1afadab
 801b028:	b9b7b5b3 	ldmiblt	r7!, {r0, r1, r4, r5, r7, r8, sl, ip, sp, pc}
 801b02c:	c1bfbdbb 			; <UNDEFINED> instruction: 0xc1bfbdbb
 801b030:	c9c7c5c3 	stmibgt	r7, {r0, r1, r6, r7, r8, sl, lr, pc}^
 801b034:	d2cfcdcb 	sbcle	ip, pc, #12992	; 0x32c0
 801b038:	dad8d6d4 	ble	7650b90 <__stack_size+0x764e390>
 801b03c:	e3e1dfdc 	mvn	sp, #220, 30	; 0x370
 801b040:	eceae8e5 	stcl	8, cr14, [sl], #916	; 0x394
 801b044:	f6f3f1ef 			; <UNDEFINED> instruction: 0xf6f3f1ef
 801b048:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0801b04c <gamma25_0>:
	...
 801b060:	01010000 	mrseq	r0, (UNDEF: 1)
 801b064:	01010101 	tsteq	r1, r1, lsl #2
 801b068:	01010101 	tsteq	r1, r1, lsl #2
 801b06c:	02020201 	andeq	r0, r2, #268435456	; 0x10000000
 801b070:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801b074:	03030302 	movweq	r0, #13058	; 0x3302
 801b078:	04040303 	streq	r0, [r4], #-771	; 0xfffffcfd
 801b07c:	05040404 	streq	r0, [r4, #-1028]	; 0xfffffbfc
 801b080:	06050505 	streq	r0, [r5], -r5, lsl #10
 801b084:	07060606 	streq	r0, [r6, -r6, lsl #12]
 801b088:	08070707 	stmdaeq	r7, {r0, r1, r2, r8, r9, sl}
 801b08c:	09090808 	stmdbeq	r9, {r3, fp}
 801b090:	0a0a0a09 	beq	829d8bc <__exidx_end+0x2818e8>
 801b094:	0c0c0b0b 			; <UNDEFINED> instruction: 0x0c0c0b0b
 801b098:	0e0d0d0c 	cdpeq	13, 0, cr0, cr13, cr12, {0}
 801b09c:	0f0f0f0e 	svceq	0x000f0f0e
 801b0a0:	11111010 	tstne	r1, r0, lsl r0
 801b0a4:	13131212 	tstne	r3, #536870913	; 0x20000001
 801b0a8:	16151414 			; <UNDEFINED> instruction: 0x16151414
 801b0ac:	18171716 	ldmdane	r7, {r1, r2, r4, r8, r9, sl, ip}
 801b0b0:	1a1a1919 	bne	86a151c <__exidx_end+0x685548>
 801b0b4:	1d1c1c1b 	ldcne	12, cr1, [ip, #-108]	; 0xffffff94
 801b0b8:	201f1e1e 	andscs	r1, pc, lr, lsl lr	; <UNPREDICTABLE>
 801b0bc:	23222121 			; <UNDEFINED> instruction: 0x23222121
 801b0c0:	26252424 	strtcs	r2, [r5], -r4, lsr #8
 801b0c4:	29282827 	stmdbcs	r8!, {r0, r1, r2, r5, fp, sp}
 801b0c8:	2d2c2b2a 	vstmdbcs	ip!, {d2-d22}
 801b0cc:	302f2e2e 	eorcc	r2, pc, lr, lsr #28
 801b0d0:	34333231 	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
 801b0d4:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 801b0d8:	3c3b3a39 			; <UNDEFINED> instruction: 0x3c3b3a39
 801b0dc:	403f3e3d 	eorsmi	r3, pc, sp, lsr lr	; <UNPREDICTABLE>
 801b0e0:	45444341 	strbmi	r4, [r4, #-833]	; 0xfffffcbf
 801b0e4:	49484746 	stmdbmi	r8, {r1, r2, r6, r8, r9, sl, lr}^
 801b0e8:	4e4d4c4b 	cdpmi	12, 4, cr4, cr13, cr11, {2}
 801b0ec:	53525150 	cmppl	r2, #80, 2
 801b0f0:	59575655 	ldmdbpl	r7, {r0, r2, r4, r6, r9, sl, ip, lr}^
 801b0f4:	5e5d5b5a 	vmovpl.s8	r5, d13[2]
 801b0f8:	6362615f 	cmnvs	r2, #-1073741801	; 0xc0000017
 801b0fc:	69686665 	stmdbvs	r8!, {r0, r2, r5, r6, r9, sl, sp, lr}^
 801b100:	6f6e6c6b 	svcvs	0x006e6c6b
 801b104:	75747271 	ldrbvc	r7, [r4, #-625]!	; 0xfffffd8f
 801b108:	7c7a7977 			; <UNDEFINED> instruction: 0x7c7a7977
 801b10c:	82817f7d 	addhi	r7, r1, #500	; 0x1f4
 801b110:	89878684 	stmibhi	r7, {r2, r7, r9, sl, pc}
 801b114:	908e8d8b 	addls	r8, lr, fp, lsl #27
 801b118:	97969492 			; <UNDEFINED> instruction: 0x97969492
 801b11c:	9f9d9b99 	svcls	0x009d9b99
 801b120:	a6a5a3a1 	strtge	sl, [r5], r1, lsr #7
 801b124:	aeacaaa8 	vfmage.f32	s20, s25, s17
 801b128:	b6b4b2b0 			; <UNDEFINED> instruction: 0xb6b4b2b0
 801b12c:	bfbdbab8 	svclt	0x00bdbab8
 801b130:	c7c5c3c1 	strbgt	ip, [r5, r1, asr #7]
 801b134:	d0ceccc9 	sbcle	ip, lr, r9, asr #25
 801b138:	d9d7d4d2 	ldmible	r7, {r1, r4, r6, r7, sl, ip, lr, pc}^
 801b13c:	e2e0dddb 	rsc	sp, r0, #14016	; 0x36c0
 801b140:	ebe9e7e4 	bl	7a950d8 <__stack_size+0x7a928d8>
 801b144:	f5f3f0ee 			; <UNDEFINED> instruction: 0xf5f3f0ee
 801b148:	fffdfaf8 			; <UNDEFINED> instruction: 0xfffdfaf8

0801b14c <gamma25_5>:
 801b14c:	01010100 	mrseq	r0, (UNDEF: 17)
 801b150:	01010101 	tsteq	r1, r1, lsl #2
 801b154:	01010101 	tsteq	r1, r1, lsl #2
 801b158:	01010101 	tsteq	r1, r1, lsl #2
 801b15c:	01010101 	tsteq	r1, r1, lsl #2
 801b160:	01010101 	tsteq	r1, r1, lsl #2
 801b164:	01010101 	tsteq	r1, r1, lsl #2
 801b168:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801b16c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
 801b170:	03030302 	movweq	r0, #13058	; 0x3302
 801b174:	03030303 	movweq	r0, #13059	; 0x3303
 801b178:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
 801b17c:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
 801b180:	06060605 	streq	r0, [r6], -r5, lsl #12
 801b184:	07070706 	streq	r0, [r7, -r6, lsl #14]
 801b188:	08080807 	stmdaeq	r8, {r0, r1, r2, fp}
 801b18c:	0a090909 	beq	825d5b8 <__exidx_end+0x2415e4>
 801b190:	0b0b0a0a 	bleq	82dd9c0 <__exidx_end+0x2c19ec>
 801b194:	0c0c0c0b 	stceq	12, cr0, [ip], {11}
 801b198:	0e0e0d0d 	cdpeq	13, 0, cr0, cr14, cr13, {0}
 801b19c:	100f0f0f 	andne	r0, pc, pc, lsl #30
 801b1a0:	12111110 	andsne	r1, r1, #16, 2
 801b1a4:	14131312 	ldrne	r1, [r3], #-786	; 0xfffffcee
 801b1a8:	16161514 			; <UNDEFINED> instruction: 0x16161514
 801b1ac:	18181717 	ldmdane	r8, {r0, r1, r2, r4, r8, r9, sl, ip}
 801b1b0:	1b1a1a19 	blne	86a1a1c <__exidx_end+0x685a48>
 801b1b4:	1e1d1c1c 	mrcne	12, 0, r1, cr13, cr12, {0}
 801b1b8:	20201f1e 	eorcs	r1, r0, lr, lsl pc
 801b1bc:	23232221 			; <UNDEFINED> instruction: 0x23232221
 801b1c0:	26262524 	strtcs	r2, [r6], -r4, lsr #10
 801b1c4:	2a292827 	bcs	8a65268 <__exidx_end+0xa49294>
 801b1c8:	2d2c2b2b 	fstmdbxcs	ip!, {d2-d22}	;@ Deprecated
 801b1cc:	31302f2e 	teqcc	r0, lr, lsr #30
 801b1d0:	35343332 	ldrcc	r3, [r4, #-818]!	; 0xfffffcce
 801b1d4:	38373635 	ldmdacc	r7!, {r0, r2, r4, r5, r9, sl, ip, sp}
 801b1d8:	3d3c3a39 	vldmdbcc	ip!, {s6-s62}
 801b1dc:	41403f3e 	cmpmi	r0, lr, lsr pc
 801b1e0:	45444342 	strbmi	r4, [r4, #-834]	; 0xfffffcbe
 801b1e4:	4a494846 	bmi	926d304 <__exidx_end+0x1251330>
 801b1e8:	4f4e4c4b 	svcmi	0x004e4c4b
 801b1ec:	54535150 	ldrbpl	r5, [r3], #-336	; 0xfffffeb0
 801b1f0:	59585655 	ldmdbpl	r8, {r0, r2, r4, r6, r9, sl, ip, lr}^
 801b1f4:	5e5d5c5a 	mrcpl	12, 2, r5, cr13, cr10, {2}
 801b1f8:	64636160 	strbtvs	r6, [r3], #-352	; 0xfffffea0
 801b1fc:	6a686765 	bvs	9a34f98 <__exidx_end+0x1a18fc4>
 801b200:	706e6d6b 	rsbvc	r6, lr, fp, ror #26
 801b204:	76747371 			; <UNDEFINED> instruction: 0x76747371
 801b208:	7c7b7978 			; <UNDEFINED> instruction: 0x7c7b7978
 801b20c:	8381807e 	orrhi	r8, r1, #126	; 0x7e
 801b210:	8a888685 	bhi	623cc2c <__stack_size+0x623a42c>
 801b214:	918f8d8b 	orrls	r8, pc, fp, lsl #27
 801b218:	98969492 	ldmls	r6, {r1, r4, r7, sl, ip, pc}
 801b21c:	9f9d9c9a 	svcls	0x009d9c9a
 801b220:	a7a5a3a1 	strge	sl, [r5, r1, lsr #7]!
 801b224:	afadaba9 	svcge	0x00adaba9
 801b228:	b7b5b3b1 			; <UNDEFINED> instruction: 0xb7b5b3b1
 801b22c:	bfbdbbb9 	svclt	0x00bdbbb9
 801b230:	c8c6c3c1 	stmiagt	r6, {r0, r6, r7, r8, r9, lr, pc}^
 801b234:	d0ceccca 	sbcle	ip, lr, sl, asr #25
 801b238:	d9d7d5d3 	ldmible	r7, {r0, r1, r4, r6, r7, r8, sl, ip, lr, pc}^
 801b23c:	e3e0dedc 	mvn	sp, #220, 28	; 0xdc0
 801b240:	eceae7e5 	stcl	7, cr14, [sl], #916	; 0x394
 801b244:	f6f3f1ee 			; <UNDEFINED> instruction: 0xf6f3f1ee
 801b248:	fffdfbf8 			; <UNDEFINED> instruction: 0xfffdfbf8
 801b24c:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 801b250:	006e776f 	rsbeq	r7, lr, pc, ror #14
 801b254:	65646e55 	strbvs	r6, [r4, #-3669]!	; 0xfffff1ab
 801b258:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0xfffff69a
 801b25c:	 	andeq	r0, r0, #100	; 0x64

0801b25e <CSWTCH.18>:
 801b25e:	02020200 	andeq	r0, r2, #0, 4
 801b262:	04020202 	streq	r0, [r2], #-514	; 0xfffffdfe
 801b266:	 	ldrbmi	r0, [r2, -r0, lsl #10]

0801b268 <PixelType::MAPS>:
 801b268:	00424752 	subeq	r4, r2, r2, asr r7
 801b26c:	00474252 	subeq	r4, r7, r2, asr r2
 801b270:	00425247 	subeq	r5, r2, r7, asr #4
 801b274:	00524247 	subseq	r4, r2, r7, asr #4
 801b278:	00475242 	subeq	r5, r7, r2, asr #4
 801b27c:	00524742 	subseq	r4, r2, r2, asr #14

0801b280 <PixelType::TYPES>:
 801b280:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801b284:	00003130 	andeq	r3, r0, r0, lsr r1
 801b288:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801b28c:	00003131 	andeq	r3, r0, r1, lsr r1
 801b290:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801b294:	00003231 	andeq	r3, r0, r1, lsr r2
 801b298:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801b29c:	00423231 	subeq	r3, r2, r1, lsr r2
 801b2a0:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801b2a4:	00003331 	andeq	r3, r0, r1, lsr r3
 801b2a8:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801b2ac:	00003531 	andeq	r3, r0, r1, lsr r5
 801b2b0:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801b2b4:	00003231 	andeq	r3, r0, r1, lsr r2
 801b2b8:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801b2bc:	00573231 	subseq	r3, r7, r1, lsr r2
 801b2c0:	31534355 	cmpcc	r3, r5, asr r3
 801b2c4:	00333039 	eorseq	r3, r3, r9, lsr r0
 801b2c8:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 801b2cc:	00333039 	eorseq	r3, r3, r9, lsr r0
 801b2d0:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 801b2d4:	00003231 	andeq	r3, r0, r1, lsr r2
 801b2d8:	31415041 	cmpcc	r1, r1, asr #32
 801b2dc:	00003230 	andeq	r3, r0, r0, lsr r2
 801b2e0:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801b2e4:	00003232 	andeq	r3, r0, r2, lsr r2
 801b2e8:	31383950 	teqcc	r8, r0, asr r9
 801b2ec:	00000033 	andeq	r0, r0, r3, lsr r0

0801b2f0 <s_patternName>:
 801b2f0:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 801b2fc:	61520000 	cmpvs	r2, r0
 801b300:	6f626e69 	svcvs	0x00626e69
 801b304:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 801b308:	00656c63 	rsbeq	r6, r5, r3, ror #24
 801b30c:	61656854 	cmnvs	r5, r4, asr r8
 801b310:	20726574 	rsbscs	r6, r2, r4, ror r5
 801b314:	73616863 	cmnvc	r1, #6488064	; 0x630000
 801b318:	6f430065 	svcvs	0x00430065
 801b31c:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 801b320:	70697720 	rsbvc	r7, r9, r0, lsr #14
 801b324:	00000065 	andeq	r0, r0, r5, rrx
 801b328:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 801b32c:	0072656e 	rsbseq	r6, r2, lr, ror #10
 801b330:	00000000 	andeq	r0, r0, r0
 801b334:	61460000 	mrsvs	r0, (UNDEF: 70)
 801b338:	00006564 	andeq	r6, r0, r4, ror #10
	...

0801b344 <pixel::s_GPIO_PINs>:
 801b344:	00003fc0 	andeq	r3, r0, r0, asr #31

0801b348 <s_aStorSize>:
 801b348:	00000060 	andeq	r0, r0, r0, rrx
 801b34c:	00000090 	muleq	r0, r0, r0
 801b350:	00000020 	andeq	r0, r0, r0, lsr #32
 801b354:	00000040 	andeq	r0, r0, r0, asr #32
 801b358:	00000060 	andeq	r0, r0, r0, rrx
 801b35c:	00000040 	andeq	r0, r0, r0, asr #32
 801b360:	00000020 	andeq	r0, r0, r0, lsr #32
 801b364:	00000020 	andeq	r0, r0, r0, lsr #32
 801b368:	000001e0 	andeq	r0, r0, r0, ror #3
 801b36c:	00000040 	andeq	r0, r0, r0, asr #32
 801b370:	00000020 	andeq	r0, r0, r0, lsr #32
 801b374:	00000060 	andeq	r0, r0, r0, rrx
 801b378:	00000030 	andeq	r0, r0, r0, lsr r0
 801b37c:	00000020 	andeq	r0, r0, r0, lsr #32
 801b380:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 801b384:	00000030 	andeq	r0, r0, r0, lsr r0
 801b388:	00000040 	andeq	r0, r0, r0, asr #32
 801b38c:	00000020 	andeq	r0, r0, r0, lsr #32
 801b390:	00000060 	andeq	r0, r0, r0, rrx
 801b394:	00000020 	andeq	r0, r0, r0, lsr #32
 801b398:	00000400 	andeq	r0, r0, r0, lsl #8
 801b39c:	00000020 	andeq	r0, r0, r0, lsr #32
 801b3a0:	00000020 	andeq	r0, r0, r0, lsr #32
 801b3a4:	00000040 	andeq	r0, r0, r0, asr #32
 801b3a8:	00000060 	andeq	r0, r0, r0, rrx
 801b3ac:	00000020 	andeq	r0, r0, r0, lsr #32
 801b3b0:	00000020 	andeq	r0, r0, r0, lsr #32
 801b3b4:	000000c0 	andeq	r0, r0, r0, asr #1

0801b3b8 <vtable for StoreDisplayUdf>:
	...
 801b3c0:	08012391 	stmdaeq	r1, {r0, r4, r7, r8, r9, sp}
 801b3c4:	080123dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, r9, sp}
 801b3c8:	080123b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, r9, sp}
 801b3cc:	08012395 	stmdaeq	r1, {r0, r2, r4, r7, r8, r9, sp}

0801b3d0 <vtable for StoreNetwork>:
	...
 801b3d8:	080123fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sp}
 801b3dc:	080124e1 	stmdaeq	r1, {r0, r5, r6, r7, sl, sp}
 801b3e0:	08012405 	stmdaeq	r1, {r0, r2, sl, sp}
 801b3e4:	080124f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, sl, sp}
 801b3e8:	08012485 	stmdaeq	r1, {r0, r2, r7, sl, sp}
 801b3ec:	08012459 	stmdaeq	r1, {r0, r3, r4, r6, sl, sp}
 801b3f0:	08012429 	stmdaeq	r1, {r0, r3, r5, sl, sp}
 801b3f4:	080124b1 	stmdaeq	r1, {r0, r4, r5, r7, sl, sp}
 801b3f8:	08008ac1 	stmdaeq	r0, {r0, r6, r7, r9, fp, pc}
 801b3fc:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801b400:	00000000 	andeq	r0, r0, r0
 801b404:	080123ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sp}
 801b408:	080124ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, sl, sp}
 801b40c:	080124a9 	stmdaeq	r1, {r0, r3, r5, r7, sl, sp}
 801b410:	0801247d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, sl, sp}
 801b414:	08012451 	stmdaeq	r1, {r0, r4, r6, sl, sp}
 801b418:	080124d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, sl, sp}
 801b41c:	08008ae9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, fp, pc}

0801b420 <vtable for StoreRDMDevice>:
	...
 801b428:	0801252d 	stmdaeq	r1, {r0, r2, r3, r5, r8, sl, sp}
 801b42c:	0801259d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, sl, sp}
 801b430:	08012535 	stmdaeq	r1, {r0, r2, r4, r5, r8, sl, sp}
 801b434:	080125b1 	stmdaeq	r1, {r0, r4, r5, r7, r8, sl, sp}
 801b438:	08012559 	stmdaeq	r1, {r0, r3, r4, r6, r8, sl, sp}
 801b43c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801b440:	00000000 	andeq	r0, r0, r0
 801b444:	0801252f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r8, sl, sp}
 801b448:	080125a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, sl, sp}
 801b44c:	08012595 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl, sp}

0801b450 <vtable for StoreRemoteConfig>:
	...
 801b458:	080125ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, sl, sp}
 801b45c:	08012639 	stmdaeq	r1, {r0, r3, r4, r5, r9, sl, sp}
 801b460:	08012615 	stmdaeq	r1, {r0, r2, r4, r9, sl, sp}
 801b464:	080125f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, sl, sp}

0801b468 <vtable for StoreArtNet>:
	...
 801b470:	0801265d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r9, sl, sp}
 801b474:	080128ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, sp}
 801b478:	08012665 	stmdaeq	r1, {r0, r2, r5, r6, r9, sl, sp}
 801b47c:	080128cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, fp, sp}
 801b480:	08012819 	stmdaeq	r1, {r0, r3, r4, fp, sp}
 801b484:	080127e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, sl, sp}
 801b488:	080127bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, r9, sl, sp}
 801b48c:	08012689 	stmdaeq	r1, {r0, r3, r7, r9, sl, sp}
 801b490:	080126d1 	stmdaeq	r1, {r0, r4, r6, r7, r9, sl, sp}
 801b494:	08012701 	stmdaeq	r1, {r0, r8, r9, sl, sp}
 801b498:	08012735 	stmdaeq	r1, {r0, r2, r4, r5, r8, r9, sl, sp}
 801b49c:	08012779 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, sl, sp}
 801b4a0:	0801284d 	stmdaeq	r1, {r0, r2, r3, r6, fp, sp}
 801b4a4:	08012659 	stmdaeq	r1, {r0, r3, r4, r6, r9, sl, sp}
 801b4a8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801b4ac:	00000000 	andeq	r0, r0, r0
 801b4b0:	0801265f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r9, sl, sp}
 801b4b4:	080128f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, fp, sp}
 801b4b8:	08012845 	stmdaeq	r1, {r0, r2, r6, fp, sp}
 801b4bc:	08012811 	stmdaeq	r1, {r0, r4, fp, sp}
 801b4c0:	080127e1 	stmdaeq	r1, {r0, r5, r6, r7, r8, r9, sl, sp}
 801b4c4:	080126c9 	stmdaeq	r1, {r0, r3, r6, r7, r9, sl, sp}
 801b4c8:	080126f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, sl, sp}
 801b4cc:	0801272d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, sl, sp}
 801b4d0:	0801265b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r9, sl, sp}
 801b4d4:	08012771 	stmdaeq	r1, {r0, r4, r5, r6, r8, r9, sl, sp}
 801b4d8:	080127b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, sl, sp}
 801b4dc:	080128c5 	stmdaeq	r1, {r0, r2, r6, r7, fp, sp}

0801b4e0 <vtable for StorePixelDmx>:
	...
 801b4e8:	08012925 	stmdaeq	r1, {r0, r2, r5, r8, fp, sp}
 801b4ec:	08012a91 	stmdaeq	r1, {r0, r4, r7, r9, fp, sp}
 801b4f0:	0801292d 	stmdaeq	r1, {r0, r2, r3, r5, r8, fp, sp}
 801b4f4:	08012aa5 	stmdaeq	r1, {r0, r2, r5, r7, r9, fp, sp}
 801b4f8:	08012a5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r9, fp, sp}
 801b4fc:	08012a29 	stmdaeq	r1, {r0, r3, r5, r9, fp, sp}
 801b500:	080129f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, fp, sp}
 801b504:	080129b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, fp, sp}
 801b508:	08012985 	stmdaeq	r1, {r0, r2, r7, r8, fp, sp}
 801b50c:	08012951 	stmdaeq	r1, {r0, r4, r6, r8, fp, sp}
 801b510:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 801b514:	00000000 	andeq	r0, r0, r0
 801b518:	08012927 	stmdaeq	r1, {r0, r1, r2, r5, r8, fp, sp}
 801b51c:	08012a9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r9, fp, sp}
 801b520:	08012a89 	stmdaeq	r1, {r0, r3, r7, r9, fp, sp}
 801b524:	08012a55 	stmdaeq	r1, {r0, r2, r4, r6, r9, fp, sp}
 801b528:	08012a21 	stmdaeq	r1, {r0, r5, r9, fp, sp}
 801b52c:	080129e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, fp, sp}
 801b530:	080129b1 	stmdaeq	r1, {r0, r4, r5, r7, r8, fp, sp}
 801b534:	0801297d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, fp, sp}
 801b538:	3a434d46 	bcc	90eea58 <__exidx_end+0x10d2a84>
 801b53c:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 801b540:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 801b544:	73252064 			; <UNDEFINED> instruction: 0x73252064
 801b548:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 801b54c:	6f742068 	svcvs	0x00742068
 801b550:	206c6174 	rsbcs	r6, ip, r4, ror r1
 801b554:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 801b558:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 801b55c:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 801b560:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 801b564:	6374000a 	cmnvs	r4, #10
 801b568:	65625f70 	strbvs	r5, [r2, #-3952]!	; 0xfffff090
 801b56c:	3a6e6967 	bcc	9bb5b10 <__exidx_end+0x1b99b3c>
 801b570:	6f6f7420 	svcvs	0x006f7420
 801b574:	6e616d20 	cdpvs	13, 6, cr6, cr1, cr0, {1}
 801b578:	6f632079 	svcvs	0x00632079
 801b57c:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
 801b580:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801b584:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
 801b588:	7500646e 	strvc	r6, [r0, #-1134]	; 0xfffffb92
 801b58c:	6e69626e 	cdpvs	2, 6, cr6, cr9, cr14, {3}
 801b590:	41000a64 	tstmi	r0, r4, ror #20
 801b594:	6c205052 	stcvs	0, cr5, [r0], #-328	; 0xfffffeb8
 801b598:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
 801b59c:	61662070 	smcvs	25088	; 0x6200
 801b5a0:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
 801b5a4:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 801b5a8:	61666564 	cmnvs	r6, r4, ror #10
 801b5ac:	20746c75 	rsbscs	r6, r4, r5, ror ip
 801b5b0:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 801b5b4:	0a796177 	beq	9e73b98 <__exidx_end+0x1e57bc4>
 801b5b8:	50524100 	subspl	r4, r2, r0, lsl #2
 801b5bc:	6f6f6c20 	svcvs	0x006f6c20
 801b5c0:	2070756b 	rsbscs	r7, r0, fp, ror #10
 801b5c4:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 801b5c8:	000a6465 	andeq	r6, sl, r5, ror #8

0801b5cc <NetworkConst::MSG_MDNS_CONFIG>:
 801b5cc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801b5d0:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801b5d4:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801b5d8:	534e444d 	movtpl	r4, #58445	; 0xe44d
	...

0801b5dd <NetworkConst::MSG_NETWORK_INIT>:
 801b5dd:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 801b5e1:	206b726f 	rsbcs	r7, fp, pc, ror #4
 801b5e5:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 801b5e9:	34323200 	ldrtcc	r3, [r2], #-512	; 0xfffffe00
 801b5ed:	302e302e 	eorcc	r3, lr, lr, lsr #32
 801b5f1:	3135322e 	teqcc	r5, lr, lsr #4
 801b5f5:	63745f00 	cmnvs	r4, #0, 30
 801b5f9:	6f6c2e70 	svcvs	0x006c2e70
 801b5fd:	006c6163 	rsbeq	r6, ip, r3, ror #2
 801b601:	7265735f 	rsbvc	r7, r5, #2080374785	; 0x7c000001
 801b605:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 801b609:	645f2e73 	ldrbvs	r2, [pc], #-3699	; 801b611 <NetworkConst::MSG_NETWORK_INIT+0x34>
 801b60d:	732d736e 			; <UNDEFINED> instruction: 0x732d736e
 801b611:	755f2e64 	ldrbvc	r2, [pc, #-3684]	; 801a7b5 <RDMHandler::PID_DEFINITIONS+0x25d>
 801b615:	6c2e7064 	stcvs	0, cr7, [lr], #-400	; 0xfffffe70
 801b619:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 801b61d:	4e446d00 	cdpmi	13, 4, cr6, cr4, cr0, {0}
 801b621:	20000a53 	andcs	r0, r0, r3, asr sl
 801b625:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 801b629:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
 801b62d:	0a676e69 	beq	99f6fd9 <__exidx_end+0x19db005>
 801b631:	614e2000 	mrsvs	r2, (UNDEF: 78)
 801b635:	3a20656d 	bcc	8834bf1 <__exidx_end+0x818c1d>
 801b639:	0a732520 	beq	9ce4ac1 <__exidx_end+0x1cc8aed>
 801b63d:	73252000 			; <UNDEFINED> instruction: 0x73252000
 801b641:	20642520 	rsbcs	r2, r4, r0, lsr #10
 801b645:	000a7325 	andeq	r7, sl, r5, lsr #6
 801b649:	30687465 	rsbcc	r7, r8, r5, ror #8
 801b64d:	67696700 	strbvs	r6, [r9, -r0, lsl #14]!
 801b651:	76656461 	strbtvc	r6, [r5], -r1, ror #8
 801b655:	5f656369 	svcpl	0x00656369
 801b659:	74654e00 	strbtvc	r4, [r5], #-3584	; 0xfffff200
 801b65d:	6b726f77 	blvs	9cb7441 <__exidx_end+0x1c9b46d>
 801b661:	4820000a 	stmdami	r0!, {r1, r3}
 801b665:	6e74736f 	cdpvs	3, 7, cr7, cr4, cr15, {3}
 801b669:	20656d61 	rsbcs	r6, r5, r1, ror #26
 801b66d:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801b671:	20000a73 	andcs	r0, r0, r3, ror sl
 801b675:	614e6649 	cmpvs	lr, r9, asr #12
 801b679:	2020656d 	eorcs	r6, r0, sp, ror #10
 801b67d:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801b681:	203a6425 	eorscs	r6, sl, r5, lsr #8
 801b685:	000a7325 	andeq	r7, sl, r5, lsr #6
 801b689:	656e4920 	strbvs	r4, [lr, #-2336]!	; 0xfffff6e0
 801b68d:	20202074 	eorcs	r2, r0, r4, ror r0
 801b691:	3a202020 	bcc	8823719 <__exidx_end+0x807745>
 801b695:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801b699:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801b69d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801b6a1:	0a64252f 	beq	9924b65 <__exidx_end+0x1908b91>
 801b6a5:	654e2000 	strbvs	r2, [lr, #-0]
 801b6a9:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 801b6ad:	2020206b 	eorcs	r2, r0, fp, rrx
 801b6b1:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801b6b5:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801b6b9:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801b6bd:	20000a64 	andcs	r0, r0, r4, ror #20
 801b6c1:	65746147 	ldrbvs	r6, [r4, #-327]!	; 0xfffffeb9
 801b6c5:	20796177 	rsbscs	r6, r9, r7, ror r1
 801b6c9:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801b6cd:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801b6d1:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801b6d5:	0a64252e 	beq	9924b95 <__exidx_end+0x1908bc1>
 801b6d9:	72422000 	subvc	r2, r2, #0
 801b6dd:	6364616f 	cmnvs	r4, #-1073741797	; 0xc000001b
 801b6e1:	20747361 	rsbscs	r7, r4, r1, ror #6
 801b6e5:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801b6e9:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801b6ed:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801b6f1:	20000a64 	andcs	r0, r0, r4, ror #20
 801b6f5:	2063614d 	rsbcs	r6, r3, sp, asr #2
 801b6f9:	20202020 	eorcs	r2, r0, r0, lsr #32
 801b6fd:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801b701:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801b705:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 801b709:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 801b70d:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 801b711:	3a78322e 	bcc	9e27fd1 <__exidx_end+0x1e0bffd>
 801b715:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801b719:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 801b71d:	20000a78 	andcs	r0, r0, r8, ror sl
 801b721:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 801b725:	20202020 	eorcs	r2, r0, r0, lsr #32
 801b729:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801b72d:	000a6325 	andeq	r6, sl, r5, lsr #6
 801b731:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 801b735:	49206369 	stmdbmi	r0!, {r0, r3, r5, r6, r8, r9, sp, lr}
 801b739:	 	rsbvc	r0, r9, r0, asr r0

0801b73b <NetworkParamsConst::IP_ADDRESS>:
 801b73b:	615f7069 	cmpvs	pc, r9, rrx
 801b73f:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 801b743:	 	strvs	r7, [r0], #-883	; 0xfffffc8d

0801b746 <NetworkParamsConst::DEFAULT_GATEWAY>:
 801b746:	61666564 	cmnvs	r6, r4, ror #10
 801b74a:	5f746c75 	svcpl	0x00746c75
 801b74e:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 801b752:	00796177 	rsbseq	r6, r9, r7, ror r1

0801b756 <NetworkParamsConst::DHCP_RETRY_TIME>:
 801b756:	70636864 	rsbvc	r6, r3, r4, ror #16
 801b75a:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 801b75e:	745f7972 	ldrbvc	r7, [pc], #-2418	; 801b766 <NetworkParamsConst::HOSTNAME>
 801b762:	00656d69 	rsbeq	r6, r5, r9, ror #26

0801b766 <NetworkParamsConst::HOSTNAME>:
 801b766:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 801b76a:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

0801b76f <NetworkParamsConst::NET_MASK>:
 801b76f:	5f74656e 	svcpl	0x0074656e
 801b773:	6b73616d 	blvs	9cf3d2f <__exidx_end+0x1cd7d5b>
	...

0801b778 <NetworkParamsConst::USE_DHCP>:
 801b778:	5f657375 	svcpl	0x00657375
 801b77c:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

0801b781 <NetworkParamsConst::FILE_NAME>:
 801b781:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 801b785:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 801b789:	00747874 	rsbseq	r7, r4, r4, ror r8
 801b78d:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 801b791:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 801b795:	61747320 	cmnvs	r4, r0, lsr #6
 801b799:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 801b79d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801b7a1:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801b7a5:	252f6425 	strcs	r6, [pc, #-1061]!	; 801b388 <s_aStorSize+0x40>
 801b7a9:	63252064 			; <UNDEFINED> instruction: 0x63252064
 801b7ad:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 801b7b1:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801b7b5:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801b7b9:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 801b7bd:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 801b7c1:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801b7c5:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801b7c9:	46006425 	strmi	r6, [r0], -r5, lsr #8
 801b7cd:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 801b7d1:	20657261 	rsbcs	r7, r5, r1, ror #4
 801b7d5:	2a2e2556 	bcs	8ba4d35 <__exidx_end+0xb88d61>
 801b7d9:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 801b7dd:	72205043 	eorvc	r5, r0, #67	; 0x43
 801b7e1:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 801b7e5:	00676e69 	rsbeq	r6, r7, r9, ror #28
 801b7e9:	50434844 	subpl	r4, r3, r4, asr #16
 801b7ed:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 801b7f1:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 801b7f5:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 801b7f9:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 801b7fd:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 801b801:	6f647475 	svcvs	0x00647475
 801b805:	 	stcls	14, cr6, [r0], {119}	; 0x77

0801b808 <pArray>:
 801b808:	0801b89c 	stmdaeq	r1, {r2, r3, r4, r7, fp, ip, sp, pc}
 801b80c:	0801b858 	stmdaeq	r1, {r3, r4, r6, fp, ip, sp, pc}
 801b810:	0801b73b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, r9, sl, ip, sp, pc}
 801b814:	0801b8a2 	stmdaeq	r1, {r1, r5, r7, fp, ip, sp, pc}
 801b818:	0801bb42 	stmdaeq	r1, {r1, r6, r8, r9, fp, ip, sp, pc}
 801b81c:	0801b863 	stmdaeq	r1, {r0, r1, r5, r6, fp, ip, sp, pc}
 801b820:	0801a15f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r8, sp, pc}
 801b824:	0801b766 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, sl, ip, sp, pc}
 801b828:	0801b9e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, fp, ip, sp, pc}
 801b82c:	0801b9f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, fp, ip, sp, pc}
 801b830:	0801ba09 	stmdaeq	r1, {r0, r3, r9, fp, ip, sp, pc}
 801b834:	0801ba19 	stmdaeq	r1, {r0, r3, r4, r9, fp, ip, sp, pc}
 801b838:	0801b76f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, pc}
 801b83c:	0801bb11 	stmdaeq	r1, {r0, r4, r8, r9, fp, ip, sp, pc}
 801b840:	0801a1b2 	stmdaeq	r1, {r1, r4, r5, r7, r8, sp, pc}
 801b844:	0801a1ca 	stmdaeq	r1, {r1, r3, r6, r7, r8, sp, pc}
 801b848:	0801a1e2 	stmdaeq	r1, {r1, r5, r6, r7, r8, sp, pc}
 801b84c:	0801a1fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, sp, pc}
 801b850:	0801b746 	stmdaeq	r1, {r1, r2, r6, r8, r9, sl, ip, sp, pc}
 801b854:	0801b870 	stmdaeq	r1, {r4, r5, r6, fp, ip, sp, pc}

0801b858 <DisplayUdfParamsConst::BOARD_NAME>:
 801b858:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 801b85c:	616e5f64 	cmnvs	lr, r4, ror #30
 801b860:	 	tstvs	r0, sp, ror #10

0801b863 <DisplayUdfParamsConst::ACTIVE_PORTS>:
 801b863:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801b867:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 801b86b:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

0801b870 <DisplayUdfParamsConst::DMX_DIRECTION>:
 801b870:	5f786d64 	svcpl	0x00786d64
 801b874:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801b878:	6f697463 	svcvs	0x00697463
 801b87c:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

0801b87e <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 801b87e:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 801b882:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801b886:	756f656d 	strbvc	r6, [pc, #-1389]!	; 801b321 <s_patternName+0x31>
 801b88a:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

0801b88c <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 801b88c:	70696c66 	rsbvc	r6, r9, r6, ror #24
 801b890:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 801b894:	61636974 	smcvs	13972	; 0x3694
 801b898:	00796c6c 	rsbseq	r6, r9, ip, ror #24

0801b89c <DisplayUdfParamsConst::TITLE>:
 801b89c:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 801b8a0:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

0801b8a2 <DisplayUdfParamsConst::VERSION>:
 801b8a2:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801b8a6:	006e6f69 	rsbeq	r6, lr, r9, ror #30

0801b8aa <DisplayUdfParamsConst::FILE_NAME>:
 801b8aa:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801b8ae:	2e79616c 	rpwcsez	f6, f1, #4.0
 801b8b2:	00747874 	rsbseq	r7, r4, r4, ror r8

0801b8b6 <DisplayUdfParamsConst::INTENSITY>:
 801b8b6:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 801b8ba:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 801b8be:	20200079 	eorcs	r0, r0, r9, ror r0
 801b8c2:	4f002020 	svcmi	0x00002020
 801b8c6:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801b8ca:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 801b8ce:	64253a64 	strtvs	r3, [r5], #-2660	; 0xfffff59c
 801b8d2:	20632520 	rsbcs	r2, r3, r0, lsr #10
 801b8d6:	4f007325 	svcmi	0x00007325
 801b8da:	203a6425 	eorscs	r6, sl, r5, lsr #8
 801b8de:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 801b8e2:	3a64253a 	bcc	9924dd2 <__exidx_end+0x1908dfe>
 801b8e6:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 801b8ea:	73252063 			; <UNDEFINED> instruction: 0x73252063
 801b8ee:	3a632500 	bcc	98e4cf6 <__exidx_end+0x18c8d22>
 801b8f2:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801b8f6:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801b8fa:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801b8fe:	3a504100 	bcc	942bd06 <__exidx_end+0x140fd32>
 801b902:	00642520 	rsbeq	r2, r4, r0, lsr #10
 801b906:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 801b90a:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 801b90e:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 801b912:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
	...

0801b917 <DevicesParamsConst::ACTIVE_OUT>:
 801b917:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801b91b:	6f5f6576 	svcvs	0x005f6576
 801b91f:	 	smlsdxvs	r0, r5, r4, r7

0801b922 <DevicesParamsConst::GAMMA_VALUE>:
 801b922:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
 801b926:	61765f61 	cmnvs	r6, r1, ror #30
 801b92a:	0065756c 	rsbeq	r7, r5, ip, ror #10

0801b92e <DevicesParamsConst::SPI_SPEED_HZ>:
 801b92e:	636f6c63 	cmnvs	pc, #25344	; 0x6300
 801b932:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
 801b936:	5f646565 	svcpl	0x00646565
 801b93a:	 	strvc	r7, [r0], #-2664	; 0xfffff598

0801b93d <DevicesParamsConst::TEST_PATTERN>:
 801b93d:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 801b941:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
 801b945:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	...

0801b94a <DevicesParamsConst::GROUPING_COUNT>:
 801b94a:	5f64656c 	svcpl	0x0064656c
 801b94e:	756f7267 	strbvc	r7, [pc, #-615]!	; 801b6ef <NetworkConst::MSG_NETWORK_INIT+0x112>
 801b952:	6f635f70 	svcvs	0x00635f70
 801b956:	00746e75 	rsbseq	r6, r4, r5, ror lr

0801b95a <DevicesParamsConst::GAMMA_CORRECTION>:
 801b95a:	6d6d6167 	stfvse	f6, [sp, #-412]!	; 0xfffffe64
 801b95e:	6f635f61 	svcvs	0x00635f61
 801b962:	63657272 	cmnvs	r5, #536870919	; 0x20000007
 801b966:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
	...

0801b96b <DevicesParamsConst::GLOBAL_BRIGHTNESS>:
 801b96b:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
 801b96f:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
 801b973:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801b977:	73656e74 	cmnvc	r5, #116, 28	; 0x740
 801b97b:	 	strbvs	r0, [ip, #-115]!	; 0xffffff8d

0801b97d <DevicesParamsConst::MAP>:
 801b97d:	5f64656c 	svcpl	0x0064656c
 801b981:	5f626772 	svcpl	0x00626772
 801b985:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 801b989:	00676e69 	rsbeq	r6, r7, r9, ror #28

0801b98d <DevicesParamsConst::TYPE>:
 801b98d:	5f64656c 	svcpl	0x0064656c
 801b991:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
	...

0801b996 <DevicesParamsConst::COUNT>:
 801b996:	5f64656c 	svcpl	0x0064656c
 801b99a:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 801b99e:	 	strbvs	r0, [ip, #-116]!	; 0xffffff8c

0801b9a0 <DevicesParamsConst::LED_T0H>:
 801b9a0:	5f64656c 	svcpl	0x0064656c
 801b9a4:	00683074 	rsbeq	r3, r8, r4, ror r0

0801b9a8 <DevicesParamsConst::LED_T1H>:
 801b9a8:	5f64656c 	svcpl	0x0064656c
 801b9ac:	00683174 	rsbeq	r3, r8, r4, ror r1

0801b9b0 <DevicesParamsConst::FILE_NAME>:
 801b9b0:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 801b9b4:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 801b9b8:	00747874 	rsbseq	r7, r4, r4, ror r8
 801b9bc:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801b9c0:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 801b9c4:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801b9c8:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801b9cc:	002c2264 	eoreq	r2, ip, r4, ror #4
 801b9d0:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 801b9d4:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801b9d8:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801b9dc:	0a64252e 	beq	9924e9c <__exidx_end+0x1908ec8>
 801b9e0:	25202300 	strcs	r2, [r0, #-768]!	; 0xfffffd00
 801b9e4:	0a232073 	beq	88e3bb8 <__exidx_end+0x8c7be4>
	...

0801b9e9 <LightSetParamsConst::UNIVERSE_PORT>:
 801b9e9:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801b9ed:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801b9f1:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801b9f5:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801b9f9:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801b9fd:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801ba01:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801ba05:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801ba09:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801ba0d:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801ba11:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801ba15:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801ba19:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801ba1d:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801ba21:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801ba25:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801ba29 <LightSetParamsConst::START_UNI_PORT>:
 801ba29:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801ba2d:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801ba31:	6f705f69 	svcvs	0x00705f69
 801ba35:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 801ba39:	00000000 	andeq	r0, r0, r0
 801ba3d:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801ba41:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801ba45:	6f705f69 	svcvs	0x00705f69
 801ba49:	325f7472 	subscc	r7, pc, #1912602624	; 0x72000000
 801ba4d:	00000000 	andeq	r0, r0, r0
 801ba51:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801ba55:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801ba59:	6f705f69 	svcvs	0x00705f69
 801ba5d:	335f7472 	cmpcc	pc, #1912602624	; 0x72000000
 801ba61:	00000000 	andeq	r0, r0, r0
 801ba65:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801ba69:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801ba6d:	6f705f69 	svcvs	0x00705f69
 801ba71:	345f7472 	ldrbcc	r7, [pc], #-1138	; 801ba79 <LightSetParamsConst::START_UNI_PORT+0x50>
 801ba75:	00000000 	andeq	r0, r0, r0
 801ba79:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801ba7d:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801ba81:	6f705f69 	svcvs	0x00705f69
 801ba85:	355f7472 	ldrbcc	r7, [pc, #-1138]	; 801b61b <NetworkConst::MSG_NETWORK_INIT+0x3e>
 801ba89:	00000000 	andeq	r0, r0, r0
 801ba8d:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801ba91:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801ba95:	6f705f69 	svcvs	0x00705f69
 801ba99:	365f7472 			; <UNDEFINED> instruction: 0x365f7472
 801ba9d:	00000000 	andeq	r0, r0, r0
 801baa1:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801baa5:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801baa9:	6f705f69 	svcvs	0x00705f69
 801baad:	375f7472 			; <UNDEFINED> instruction: 0x375f7472
 801bab1:	00000000 	andeq	r0, r0, r0
 801bab5:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801bab9:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 801babd:	6f705f69 	svcvs	0x00705f69
 801bac1:	385f7472 	ldmdacc	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 801bac5:	00000000 	andeq	r0, r0, r0

0801bac9 <LightSetParamsConst::MERGE_MODE_PORT>:
 801bac9:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801bacd:	6f6d5f65 	svcvs	0x006d5f65
 801bad1:	705f6564 	subsvc	r6, pc, r4, ror #10
 801bad5:	5f74726f 	svcpl	0x0074726f
 801bad9:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 801badd:	5f656772 	svcpl	0x00656772
 801bae1:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 801bae5:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801bae9:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801baed:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801baf1:	6f6d5f65 	svcvs	0x006d5f65
 801baf5:	705f6564 	subsvc	r6, pc, r4, ror #10
 801baf9:	5f74726f 	svcpl	0x0074726f
 801bafd:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 801bb01:	5f656772 	svcpl	0x00656772
 801bb05:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 801bb09:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801bb0d:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801bb11 <LightSetParamsConst::DMX_START_ADDRESS>:
 801bb11:	5f786d64 	svcpl	0x00786d64
 801bb15:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801bb19:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 801bb1d:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 801bb21:	 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^

0801bb23 <LightSetParamsConst::DISABLE_MERGE_TIMEOUT>:
 801bb23:	61736964 	cmnvs	r3, r4, ror #18
 801bb27:	5f656c62 	svcpl	0x00656c62
 801bb2b:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801bb2f:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 801bb33:	756f656d 	strbvc	r6, [pc, #-1389]!	; 801b5ce <NetworkConst::MSG_MDNS_CONFIG+0x2>
 801bb37:	 	smcvs	24580	; 0x6004

0801bb39 <LightSetParamsConst::FAILSAFE>:
 801bb39:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 801bb3d:	65666173 	strbvs	r6, [r6, #-371]!	; 0xfffffe8d
	...

0801bb42 <LightSetParamsConst::UNIVERSE>:
 801bb42:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801bb46:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

0801bb4b <LightSetParamsConst::DIRECTION>:
 801bb4b:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801bb4f:	6f697463 	svcvs	0x00697463
 801bb53:	6f705f6e 	svcvs	0x00705f6e
 801bb57:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 801bb5b:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 801bb5f:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801bb63:	5f6e6f69 	svcpl	0x006e6f69
 801bb67:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801bb6b:	0000625f 	andeq	r6, r0, pc, asr r2
 801bb6f:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801bb73:	6f697463 	svcvs	0x00697463
 801bb77:	6f705f6e 	svcvs	0x00705f6e
 801bb7b:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 801bb7f:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 801bb83:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801bb87:	5f6e6f69 	svcpl	0x006e6f69
 801bb8b:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801bb8f:	0000645f 	andeq	r6, r0, pc, asr r4
 801bb93:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 801bb97:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 801bb9b:	66207961 	strtvs	r7, [r0], -r1, ror #18
 801bb9f:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 801bba3:	31485300 	mrscc	r5, (UNDEF: 120)
 801bba7:	00363031 	eorseq	r3, r6, r1, lsr r0
 801bbab:	31445353 	cmpcc	r4, r3, asr r3
 801bbaf:	00363033 	eorseq	r3, r6, r3, lsr r0
 801bbb3:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801bbb7:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 801bbbb:	000a2964 	andeq	r2, sl, r4, ror #18
 801bbbf:	aaeeaa40 	bge	7bc64c7 <__stack_size+0x7bc3cc7>
 801bbc3:	000000ee 	andeq	r0, r0, lr, ror #1
	...

0801bbc8 <_OledFont8x6>:
 801bbc8:	00000040 	andeq	r0, r0, r0, asr #32
 801bbcc:	40000000 	andmi	r0, r0, r0
 801bbd0:	005f0000 	subseq	r0, pc, r0
 801bbd4:	00400000 	subeq	r0, r0, r0
 801bbd8:	00070007 	andeq	r0, r7, r7
 801bbdc:	7f144000 	svcvc	0x00144000
 801bbe0:	00147f14 	andseq	r7, r4, r4, lsl pc
 801bbe4:	7f2a2440 	svcvc	0x002a2440
 801bbe8:	4000122a 	andmi	r1, r0, sl, lsr #4
 801bbec:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 801bbf0:	36400062 	strbcc	r0, [r0], -r2, rrx
 801bbf4:	50205649 	eorpl	r5, r0, r9, asr #12
 801bbf8:	08004000 	stmdaeq	r0, {lr}
 801bbfc:	00000307 	andeq	r0, r0, r7, lsl #6
 801bc00:	221c0040 	andscs	r0, ip, #64	; 0x40
 801bc04:	40000041 	andmi	r0, r0, r1, asr #32
 801bc08:	1c224100 	stfnes	f4, [r2], #-0
 801bc0c:	2a400000 	bcs	901bc14 <__exidx_end+0xfffc40>
 801bc10:	2a1c7f1c 	bcs	873b888 <__exidx_end+0x71f8b4>
 801bc14:	08084000 	stmdaeq	r8, {lr}
 801bc18:	0008083e 	andeq	r0, r8, lr, lsr r8
 801bc1c:	70800040 	addvc	r0, r0, r0, asr #32
 801bc20:	40000030 	andmi	r0, r0, r0, lsr r0
 801bc24:	08080808 	stmdaeq	r8, {r3, fp}
 801bc28:	00400008 	subeq	r0, r0, r8
 801bc2c:	00606000 	rsbeq	r6, r0, r0
 801bc30:	10204000 	eorne	r4, r0, r0
 801bc34:	00020408 	andeq	r0, r2, r8, lsl #8
 801bc38:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 801bc3c:	40003e45 	andmi	r3, r0, r5, asr #28
 801bc40:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 801bc44:	72400000 	subvc	r0, r0, #0
 801bc48:	46494949 	strbmi	r4, [r9], -r9, asr #18
 801bc4c:	41214000 			; <UNDEFINED> instruction: 0x41214000
 801bc50:	00334d49 	eorseq	r4, r3, r9, asr #26
 801bc54:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 801bc58:	4000107f 	andmi	r1, r0, pc, ror r0
 801bc5c:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 801bc60:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 801bc64:	3149494a 	cmpcc	r9, sl, asr #18
 801bc68:	21414000 	mrscs	r4, (UNDEF: 65)
 801bc6c:	00070911 	andeq	r0, r7, r1, lsl r9
 801bc70:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 801bc74:	40003649 	andmi	r3, r0, r9, asr #12
 801bc78:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 801bc7c:	0040001e 	subeq	r0, r0, lr, lsl r0
 801bc80:	00001400 	andeq	r1, r0, r0, lsl #8
 801bc84:	40004000 	andmi	r4, r0, r0
 801bc88:	00000034 	andeq	r0, r0, r4, lsr r0
 801bc8c:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 801bc90:	40004122 	andmi	r4, r0, r2, lsr #2
 801bc94:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 801bc98:	00400014 	subeq	r0, r0, r4, lsl r0
 801bc9c:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 801bca0:	01024000 	mrseq	r4, (UNDEF: 2)
 801bca4:	00060959 	andeq	r0, r6, r9, asr r9
 801bca8:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 801bcac:	40004e59 	andmi	r4, r0, r9, asr lr
 801bcb0:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 801bcb4:	7f40007c 	svcvc	0x0040007c
 801bcb8:	36494949 	strbcc	r4, [r9], -r9, asr #18
 801bcbc:	413e4000 	teqmi	lr, r0
 801bcc0:	00224141 	eoreq	r4, r2, r1, asr #2
 801bcc4:	41417f40 	cmpmi	r1, r0, asr #30
 801bcc8:	40003e41 	andmi	r3, r0, r1, asr #28
 801bccc:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 801bcd0:	7f400041 	svcvc	0x00400041
 801bcd4:	01090909 	tsteq	r9, r9, lsl #18
 801bcd8:	413e4000 	teqmi	lr, r0
 801bcdc:	00735141 	rsbseq	r5, r3, r1, asr #2
 801bce0:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 801bce4:	40007f08 	andmi	r7, r0, r8, lsl #30
 801bce8:	417f4100 	cmnmi	pc, r0, lsl #2
 801bcec:	20400000 	subcs	r0, r0, r0
 801bcf0:	013f4140 	teqeq	pc, r0, asr #2
 801bcf4:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 801bcf8:	00412214 	subeq	r2, r1, r4, lsl r2
 801bcfc:	40407f40 	submi	r7, r0, r0, asr #30
 801bd00:	40004040 	andmi	r4, r0, r0, asr #32
 801bd04:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 801bd08:	7f40007f 	svcvc	0x0040007f
 801bd0c:	7f100804 	svcvc	0x00100804
 801bd10:	413e4000 	teqmi	lr, r0
 801bd14:	003e4141 	eorseq	r4, lr, r1, asr #2
 801bd18:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 801bd1c:	40000609 	andmi	r0, r0, r9, lsl #12
 801bd20:	2151413e 	cmpcs	r1, lr, lsr r1
 801bd24:	7f40005e 	svcvc	0x0040005e
 801bd28:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 801bd2c:	49264000 	stmdbmi	r6!, {lr}
 801bd30:	00324949 	eorseq	r4, r2, r9, asr #18
 801bd34:	7f010340 	svcvc	0x00010340
 801bd38:	40000301 	andmi	r0, r0, r1, lsl #6
 801bd3c:	4040403f 	submi	r4, r0, pc, lsr r0
 801bd40:	1f40003f 	svcne	0x0040003f
 801bd44:	1f204020 	svcne	0x00204020
 801bd48:	403f4000 	eorsmi	r4, pc, r0
 801bd4c:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 801bd50:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 801bd54:	40006314 	andmi	r6, r0, r4, lsl r3
 801bd58:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 801bd5c:	61400003 	cmpvs	r0, r3
 801bd60:	434d4959 	movtmi	r4, #55641	; 0xd959
 801bd64:	7f004000 	svcvc	0x00004000
 801bd68:	00414141 	subeq	r4, r1, r1, asr #2
 801bd6c:	08040240 	stmdaeq	r4, {r6, r9}
 801bd70:	40002010 	andmi	r2, r0, r0, lsl r0
 801bd74:	41414100 	mrsmi	r4, (UNDEF: 81)
 801bd78:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 801bd7c:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 801bd80:	40404000 	submi	r4, r0, r0
 801bd84:	00404040 	subeq	r4, r0, r0, asr #32
 801bd88:	07030040 	streq	r0, [r3, -r0, asr #32]
 801bd8c:	40000008 	andmi	r0, r0, r8
 801bd90:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 801bd94:	7f400040 	svcvc	0x00400040
 801bd98:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 801bd9c:	44384000 	ldrtmi	r4, [r8], #-0
 801bda0:	00284444 	eoreq	r4, r8, r4, asr #8
 801bda4:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 801bda8:	40007f28 	andmi	r7, r0, r8, lsr #30
 801bdac:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 801bdb0:	00400018 	subeq	r0, r0, r8, lsl r0
 801bdb4:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 801bdb8:	a4184000 	ldrge	r4, [r8], #-0
 801bdbc:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 801bdc0:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 801bdc4:	40007804 	andmi	r7, r0, r4, lsl #16
 801bdc8:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 801bdcc:	20400000 	subcs	r0, r0, r0
 801bdd0:	003d4040 	eorseq	r4, sp, r0, asr #32
 801bdd4:	107f4000 	rsbsne	r4, pc, r0
 801bdd8:	00004428 	andeq	r4, r0, r8, lsr #8
 801bddc:	7f410040 	svcvc	0x00410040
 801bde0:	40000040 	andmi	r0, r0, r0, asr #32
 801bde4:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 801bde8:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 801bdec:	78040408 	stmdavc	r4, {r3, sl}
 801bdf0:	44384000 	ldrtmi	r4, [r8], #-0
 801bdf4:	00384444 	eorseq	r4, r8, r4, asr #8
 801bdf8:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 801bdfc:	40001824 	andmi	r1, r0, r4, lsr #16
 801be00:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 801be04:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 801be08:	08040408 	stmdaeq	r4, {r3, sl}
 801be0c:	54484000 	strbpl	r4, [r8], #-0
 801be10:	00245454 	eoreq	r5, r4, r4, asr r4
 801be14:	3f040440 	svccc	0x00040440
 801be18:	40002444 	andmi	r2, r0, r4, asr #8
 801be1c:	2040403c 	subcs	r4, r0, ip, lsr r0
 801be20:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 801be24:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 801be28:	403c4000 	eorsmi	r4, ip, r0
 801be2c:	003c4030 	eorseq	r4, ip, r0, lsr r0
 801be30:	10284440 	eorne	r4, r8, r0, asr #8
 801be34:	40004428 	andmi	r4, r0, r8, lsr #8
 801be38:	9090904c 	addsls	r9, r0, ip, asr #32
 801be3c:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 801be40:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 801be44:	08004000 	stmdaeq	r0, {lr}
 801be48:	00004136 	andeq	r4, r0, r6, lsr r1
 801be4c:	77000040 	strvc	r0, [r0, -r0, asr #32]
 801be50:	40000000 	andmi	r0, r0, r0
 801be54:	08364100 	ldmdaeq	r6!, {r8, lr}
 801be58:	02400000 	subeq	r0, r0, #0
 801be5c:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 801be60:	263c4000 	ldrtcs	r4, [ip], -r0
 801be64:	003c2623 	eorseq	r2, ip, r3, lsr #12

0801be68 <oled_128x32_init>:
 801be68:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 801be6c:	4000d31f 	andmi	sp, r0, pc, lsl r3
 801be70:	0020148d 	eoreq	r1, r0, sp, lsl #9
 801be74:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 801be78:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 801be7c:	a6a440db 	ssatge	r4, #5, fp, asr #1

0801be80 <oled_128x64_init>:
 801be80:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 801be84:	4000d33f 	andmi	sp, r0, pc, lsr r3
 801be88:	0020148d 	eoreq	r1, r0, sp, lsl #9
 801be8c:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 801be90:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 801be94:	a6a440db 	ssatge	r4, #5, fp, asr #1

0801be98 <vtable for Ssd1306>:
	...
 801bea0:	08015f2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, sl, fp, ip, lr}
 801bea4:	08015f59 	stmdaeq	r1, {r0, r3, r4, r6, r8, r9, sl, fp, ip, lr}
 801bea8:	08016269 	stmdaeq	r1, {r0, r3, r5, r6, r9, sp, lr}
 801beac:	080161f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, sp, lr}
 801beb0:	080160bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, sp, lr}
 801beb4:	08015f79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
 801beb8:	08015fa1 	stmdaeq	r1, {r0, r5, r7, r8, r9, sl, fp, ip, lr}
 801bebc:	08016093 	stmdaeq	r1, {r0, r1, r4, r7, sp, lr}
 801bec0:	0801604d 	stmdaeq	r1, {r0, r2, r3, r6, sp, lr}
 801bec4:	08015f2f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r8, r9, sl, fp, ip, lr}
 801bec8:	080160f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, sp, lr}
 801becc:	08016105 	stmdaeq	r1, {r0, r2, r8, sp, lr}
 801bed0:	0801611f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, sp, lr}
 801bed4:	08015f31 	stmdaeq	r1, {r0, r4, r5, r8, r9, sl, fp, ip, lr}
 801bed8:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 801bedc:	5b1b006d 	blpl	86dc098 <__exidx_end+0x6c00c4>
 801bee0:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 801bee4:	31335b1b 	teqcc	r3, fp, lsl fp
 801bee8:	5b1b006d 	blpl	86dc0a4 <__exidx_end+0x6c00d0>
 801beec:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 801bef0:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 801bef4:	5b1b006d 	blpl	86dc0b0 <__exidx_end+0x6c00dc>
 801bef8:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 801befc:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 801bf00:	205d732a 	subscs	r7, sp, sl, lsr #6
 801bf04:	43207325 			; <UNDEFINED> instruction: 0x43207325
 801bf08:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 801bf0c:	2064656c 	rsbcs	r6, r4, ip, ror #10
 801bf10:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 801bf14:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 801bf18:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 801bf1c:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 801bf20:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 801bf24:	203a636f 	eorscs	r6, sl, pc, ror #6
 801bf28:	000a7525 	andeq	r7, sl, r5, lsr #10
 801bf2c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 801bf30:	203a636f 	eorscs	r6, sl, pc, ror #6
 801bf34:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 801bf38:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 801bf3c:	6b636f6c 	blvs	98f7cf4 <__exidx_end+0x18dbd20>
 801bf40:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 801bf44:	000a7469 	andeq	r7, sl, r9, ror #8
 801bf48:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 801bf4c:	203a636f 	eorscs	r6, sl, pc, ror #6
 801bf50:	6f6c4270 	svcvs	0x006c4270
 801bf54:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 801bf58:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 801bf5c:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 801bf60:	7a697320 	bvc	9a78be8 <__exidx_end+0x1a5cc14>
 801bf64:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 801bf68:	6164202c 	cmnvs	r4, ip, lsr #32
 801bf6c:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 801bf70:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 801bf74:	3a656572 	bcc	9975544 <__exidx_end+0x1959570>
 801bf78:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 801bf7c:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801bf80:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 801bf84:	203d2072 	eorscs	r2, sp, r2, ror r0
 801bf88:	202c7025 	eorcs	r7, ip, r5, lsr #32
 801bf8c:	6f6c4270 	svcvs	0x006c4270
 801bf90:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 801bf94:	0a702520 	beq	9c2541c <__exidx_end+0x1c09448>
 801bf98:	00000000 	andeq	r0, r0, r0

0801bf9c <days_of_month>:
 801bf9c:	0000001f 	andeq	r0, r0, pc, lsl r0
 801bfa0:	0000001c 	andeq	r0, r0, ip, lsl r0
 801bfa4:	0000001f 	andeq	r0, r0, pc, lsl r0
 801bfa8:	0000001e 	andeq	r0, r0, lr, lsl r0
 801bfac:	0000001f 	andeq	r0, r0, pc, lsl r0
 801bfb0:	0000001e 	andeq	r0, r0, lr, lsl r0
 801bfb4:	0000001f 	andeq	r0, r0, pc, lsl r0
 801bfb8:	0000001f 	andeq	r0, r0, pc, lsl r0
 801bfbc:	0000001e 	andeq	r0, r0, lr, lsl r0
 801bfc0:	0000001f 	andeq	r0, r0, pc, lsl r0
 801bfc4:	0000001e 	andeq	r0, r0, lr, lsl r0
 801bfc8:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

0801bfcc <__exidx_start>:
 801bfcc:	7ffed894 	svcvc	0x00fed894
 801bfd0:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

0801bfd4 <.ARM.attributes>:
 801bfd4:	00002e41 	andeq	r2, r0, r1, asr #28
 801bfd8:	61656100 	cmnvs	r5, r0, lsl #2
 801bfdc:	01006962 	tsteq	r0, r2, ror #18
 801bfe0:	00000024 	andeq	r0, r0, r4, lsr #32
 801bfe4:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 801bfe8:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 801bfec:	0600334d 	streq	r3, [r0], -sp, asr #6
 801bff0:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 801bff4:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 801bff8:	17011501 	strne	r1, [r1, -r1, lsl #10]
 801bffc:	1a011803 	bne	8062010 <__exidx_end+0x4603c>
 801c000:	Address 0x000000000801c000 is out of bounds.


Disassembly of section .data:

20000000 <LLRPDevice::m_nHandleLLRP>:
20000000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000004 <s_multicast_mac>:
20000004:	005e0001 	subseq	r0, lr, r1
20000008:	00000000 	andeq	r0, r0, r0

2000000c <MDNS::s_nHandle>:
2000000c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000010 <next_block>:
20000010:	2003c000 	andcs	ip, r3, r0

20000014 <s_block_bucket>:
20000014:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000024:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000034:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000044:	00000060 	andeq	r0, r0, r0, rrx
	...
20000054:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000064:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000074:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000084:	00000180 	andeq	r0, r0, r0, lsl #3
	...
20000094:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000a4:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000b4:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000c4:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000e4 <SystemCoreClock>:
200000e4:	07270e00 	streq	r0, [r7, -r0, lsl #28]!

Disassembly of section .bss:

200000e8 <outptr>:
200000e8:	00000000 	andeq	r0, r0, r0

200000ec <RemoteConfig::s_pUdpBuffer>:
200000ec:	00000000 	andeq	r0, r0, r0

200000f0 <RemoteConfig::s_RemoteConfigListBin>:
	...

20000114 <RemoteConfig::s_pThis>:
20000114:	00000000 	andeq	r0, r0, r0

20000118 <HttpDaemon::m_Content>:
	...

200006b8 <guard variable for lightset::Data::Get()::instance>:
200006b8:	00000000 	andeq	r0, r0, r0

200006bc <lightset::Data::Get()::instance>:
	...

2000c73c <ArtNetNode::s_pThis>:
2000c73c:	00000000 	andeq	r0, r0, r0

2000c740 <s_ReceivingMask>:
2000c740:	00000000 	andeq	r0, r0, r0

2000c744 <ip>:
2000c744:	00000000 	andeq	r0, r0, r0

2000c748 <ip>:
2000c748:	00000000 	andeq	r0, r0, r0

2000c74c <s_nPortsMax>:
2000c74c:	00000000 	andeq	r0, r0, r0

2000c750 <E131Bridge::s_pThis>:
2000c750:	00000000 	andeq	r0, r0, r0

2000c754 <s_ReceivingMask>:
2000c754:	00000000 	andeq	r0, r0, r0

2000c758 <s_nPortsMax>:
2000c758:	00000000 	andeq	r0, r0, r0

2000c75c <LLRPDevice::s_nIpAddressFrom>:
2000c75c:	00000000 	andeq	r0, r0, r0

2000c760 <LLRPDevice::m_nIpAddresLLRPRequest>:
2000c760:	00000000 	andeq	r0, r0, r0

2000c764 <LLRPDevice::m_nIpAddressLLRPResponse>:
2000c764:	00000000 	andeq	r0, r0, r0

2000c768 <LLRPDevice::m_pLLRP>:
2000c768:	00000000 	andeq	r0, r0, r0

2000c76c <RDMNetDevice::s_RdmCommand>:
	...

2000c86b <RDMNetDevice::s_Cid>:
	...

2000c87c <RDMSensors::s_pThis>:
2000c87c:	00000000 	andeq	r0, r0, r0

2000c880 <RDMSubDevices::s_pThis>:
2000c880:	00000000 	andeq	r0, r0, r0

2000c884 <RDMDeviceResponder::s_pThis>:
2000c884:	00000000 	andeq	r0, r0, r0

2000c888 <RDMIdentify::m_bIsEnabled>:
	...

2000c889 <RDMIdentify::m_nMode>:
2000c889:	 	andeq	r0, r0, r0

2000c88c <RDMIdentify::s_pThis>:
2000c88c:	00000000 	andeq	r0, r0, r0

2000c890 <PixelPatterns::m_PortConfig>:
	...

2000c990 <PixelPatterns::m_nActivePorts>:
2000c990:	00000000 	andeq	r0, r0, r0

2000c994 <PixelPatterns::m_pScannerColours>:
2000c994:	00000000 	andeq	r0, r0, r0

2000c998 <PixelPatterns::m_nCount>:
2000c998:	00000000 	andeq	r0, r0, r0

2000c99c <PixelPatterns::m_pOutput>:
2000c99c:	00000000 	andeq	r0, r0, r0

2000c9a0 <PixelTestPattern::s_pThis>:
2000c9a0:	00000000 	andeq	r0, r0, r0

2000c9a4 <PixelTestPattern::s_Pattern>:
2000c9a4:	00000000 	andeq	r0, r0, r0

2000c9a8 <sv_isRunning>:
2000c9a8:	00000000 	andeq	r0, r0, r0

2000c9ac <WS28xxMulti::s_pThis>:
2000c9ac:	00000000 	andeq	r0, r0, r0

2000c9b0 <pixel::s_DmaBuffer>:
	...

200149b0 <SpiFlashStore::s_nWaitMillis>:
200149b0:	00000000 	andeq	r0, r0, r0

200149b4 <SpiFlashStore::s_SpiFlashData>:
	...

200159b4 <SpiFlashStore::s_nStartAddress>:
200159b4:	00000000 	andeq	r0, r0, r0

200159b8 <SpiFlashStore::s_bHaveFlashChip>:
200159b8:	00000000 	andeq	r0, r0, r0

200159bc <SpiFlashStore::s_nSpiFlashStoreSize>:
200159bc:	00000000 	andeq	r0, r0, r0

200159c0 <SpiFlashStore::s_State>:
200159c0:	00000000 	andeq	r0, r0, r0

200159c4 <SpiFlashStore::s_pThis>:
200159c4:	00000000 	andeq	r0, r0, r0

200159c8 <SpiFlashStore::s_bIsNew>:
200159c8:	00000000 	andeq	r0, r0, r0

200159cc <StoreDisplayUdf::s_pThis>:
200159cc:	00000000 	andeq	r0, r0, r0

200159d0 <StoreNetwork::s_pThis>:
200159d0:	00000000 	andeq	r0, r0, r0

200159d4 <StoreRDMDevice::s_pThis>:
200159d4:	00000000 	andeq	r0, r0, r0

200159d8 <StoreRemoteConfig::s_pThis>:
200159d8:	00000000 	andeq	r0, r0, r0

200159dc <StoreArtNet::s_nPortIndexOffset>:
200159dc:	00000000 	andeq	r0, r0, r0

200159e0 <StoreArtNet::s_pThis>:
200159e0:	00000000 	andeq	r0, r0, r0

200159e4 <StoreE131::s_pThis>:
200159e4:	00000000 	andeq	r0, r0, r0

200159e8 <StorePixelDmx::s_pThis>:
200159e8:	00000000 	andeq	r0, r0, r0

200159ec <FlashRom::s_pThis>:
200159ec:	00000000 	andeq	r0, r0, r0

200159f0 <flashrom::s_nAddress>:
200159f0:	00000000 	andeq	r0, r0, r0

200159f4 <flashrom::s_State>:
200159f4:	00000000 	andeq	r0, r0, r0

200159f8 <flashrom::s_nPage>:
200159f8:	00000000 	andeq	r0, r0, r0

200159fc <flashrom::s_pData>:
200159fc:	00000000 	andeq	r0, r0, r0

20015a00 <flashrom::s_isBank0>:
20015a00:	00000000 	andeq	r0, r0, r0

20015a04 <flashrom::s_nLength>:
20015a04:	00000000 	andeq	r0, r0, r0

20015a08 <g_ip_info>:
	...

20015a14 <g_mac_address>:
20015a14:	00000000 	andeq	r0, r0, r0
	...

20015a1a <s_is_dhcp>:
	...

20015a1c <s_p>:
20015a1c:	00000000 	andeq	r0, r0, r0

20015a20 <s_ticker>:
20015a20:	00000000 	andeq	r0, r0, r0

20015a24 <s_mac_address>:
	...

20015a2c <s_mac_address_arp_reply>:
	...

20015a34 <s_id>:
20015a34:	00000000 	andeq	r0, r0, r0

20015a38 <s_recv_queue>:
	...

200165a8 <s_tcb>:
	...

200165ec <s_tcp>:
	...

20016bd8 <broadcast_mask>:
20016bd8:	00000000 	andeq	r0, r0, r0

20016bdc <gw_ip>:
20016bdc:	00000000 	andeq	r0, r0, r0

20016be0 <on_network_mask>:
20016be0:	00000000 	andeq	r0, r0, r0

20016be4 <s_id>:
20016be4:	00000000 	andeq	r0, r0, r0

20016be8 <s_ports_allowed>:
	...

20016c08 <s_recv_queue>:
	...

2001c8a8 <s_send_packet>:
	...

2001ce94 <MDNS::s_nRemoteIp>:
2001ce94:	00000000 	andeq	r0, r0, r0

2001ce98 <MDNS::s_nRemotePort>:
2001ce98:	00000000 	andeq	r0, r0, r0

2001ce9c <MDNS::s_nMulticastIp>:
2001ce9c:	00000000 	andeq	r0, r0, r0

2001cea0 <MDNS::s_AnswerLocalIp>:
	...

2001d0a4 <MDNS::s_ServiceRecords>:
	...

2001d0c4 <MDNS::s_nBytesReceived>:
2001d0c4:	00000000 	andeq	r0, r0, r0

2001d0c8 <MDNS::s_ServiceRecordsData>:
	...

2001d2cc <MDNS::s_pName>:
2001d2cc:	00000000 	andeq	r0, r0, r0

2001d2d0 <MDNS::s_pBuffer>:
2001d2d0:	00000000 	andeq	r0, r0, r0

2001d2d4 <Network::s_pThis>:
2001d2d4:	00000000 	andeq	r0, r0, r0

2001d2d8 <s_arp_announce>:
	...

2001d304 <s_arp_reply>:
	...

2001d330 <s_arp_request>:
	...

2001d35c <s_arp_records>:
	...

2001d4dc <s_entry_current>:
2001d4dc:	00000000 	andeq	r0, r0, r0

2001d4e0 <s_dhcp_allocated_gw>:
2001d4e0:	00000000 	andeq	r0, r0, r0

2001d4e4 <s_dhcp_allocated_ip>:
2001d4e4:	00000000 	andeq	r0, r0, r0

2001d4e8 <s_dhcp_allocated_netmask>:
2001d4e8:	00000000 	andeq	r0, r0, r0

2001d4ec <s_dhcp_message>:
	...

2001d710 <s_dhcp_server_ip>:
2001d710:	00000000 	andeq	r0, r0, r0

2001d714 <s_groups>:
	...

2001d834 <s_id>:
2001d834:	00000000 	andeq	r0, r0, r0

2001d838 <s_joins_allowed_index>:
2001d838:	00000000 	andeq	r0, r0, r0

2001d83c <s_leave>:
	...

2001d86c <s_multicast_mac>:
	...

2001d874 <s_report>:
	...

2001d8a4 <DisplayUdf::s_pThis>:
2001d8a4:	00000000 	andeq	r0, r0, r0

2001d8a8 <PropertiesConfig::s_Config>:
2001d8a8:	00000000 	andeq	r0, r0, r0

2001d8ac <Display::s_pThis>:
2001d8ac:	00000000 	andeq	r0, r0, r0

2001d8b0 <_ClearBuffer>:
	...

2001d938 <Ssd1306::s_pThis>:
2001d938:	00000000 	andeq	r0, r0, r0

2001d93c <FirmwareVersion::s_FirmwareVersion>:
	...

2001d952 <FirmwareVersion::s_Print>:
	...

2001d994 <FirmwareVersion::s_pThis>:
2001d994:	00000000 	andeq	r0, r0, r0

2001d998 <LedBlink::s_pThis>:
2001d998:	00000000 	andeq	r0, r0, r0

2001d99c <Hardware::s_pThis>:
2001d99c:	00000000 	andeq	r0, r0, r0

2001d9a0 <last.0>:
	...

2001d9a8 <s_micros>:
	...

2001d9b0 <set_timer>:
2001d9b0:	00000000 	andeq	r0, r0, r0

2001d9b4 <s_nSysTickMillis>:
2001d9b4:	00000000 	andeq	r0, r0, r0

2001d9b8 <s_nAddress>:
2001d9b8:	00000000 	andeq	r0, r0, r0

2001d9bc <dma_current_ptp_rxdesc>:
2001d9bc:	00000000 	andeq	r0, r0, r0

2001d9c0 <dma_current_ptp_txdesc>:
2001d9c0:	00000000 	andeq	r0, r0, r0

2001d9c4 <dma_current_rxdesc>:
2001d9c4:	00000000 	andeq	r0, r0, r0

2001d9c8 <dma_current_txdesc>:
2001d9c8:	00000000 	andeq	r0, r0, r0

2001d9cc <enet_initpara>:
	...

2001da08 <rx_buff>:
	...

2002a470 <rxdesc_tab>:
	...

2002a690 <tx_buff>:
	...

2002b278 <txdesc_tab>:
	...

Disassembly of section .heap:

2003c000 <heap_low>:
	...

Disassembly of section .stack:

2003d800 <_sp-0x2800>:
	...
