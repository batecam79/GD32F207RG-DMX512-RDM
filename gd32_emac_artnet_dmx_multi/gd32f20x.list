
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08007000 <__gVectors>:
 8007000:	20040000 	andcs	r0, r4, r0
 8007004:	0800857d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, sl, pc}
 8007008:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800700c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007010:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007014:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007018:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
	...
 800702c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007030:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007034:	00000000 	andeq	r0, r0, r0
 8007038:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800703c:	08014289 	stmdaeq	r1, {r0, r3, r7, r9, lr}
 8007040:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007044:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007048:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800704c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007050:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007054:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007058:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800705c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007060:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007064:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007068:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800706c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007070:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007074:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007078:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800707c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007080:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007084:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007088:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800708c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007090:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007094:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007098:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800709c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070a0:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070a4:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070a8:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070ac:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070b0:	0800d495 	stmdaeq	r0, {r0, r2, r4, r7, sl, ip, lr, pc}
 80070b4:	0800d5b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, sl, ip, lr, pc}
 80070b8:	0800d625 	stmdaeq	r0, {r0, r2, r5, r9, sl, ip, lr, pc}
 80070bc:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070c0:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070c4:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070c8:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070cc:	00000000 	andeq	r0, r0, r0
 80070d0:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070d4:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070d8:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070dc:	0800d47d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, sl, ip, lr, pc}
 80070e0:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070e4:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070e8:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070ec:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070f0:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070f4:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070f8:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80070fc:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007100:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007104:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007108:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800710c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007110:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007114:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007118:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800711c:	0800d645 	stmdaeq	r0, {r0, r2, r6, r9, sl, ip, lr, pc}
 8007120:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007124:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007128:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800712c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007130:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007134:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007138:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800713c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007140:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007144:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007148:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800714c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007150:	00000000 	andeq	r0, r0, r0
 8007154:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007158:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800715c:	0800d489 	stmdaeq	r0, {r0, r3, r7, sl, ip, lr, pc}
 8007160:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007164:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
	...
 8007178:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800717c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007180:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 8007184:	00000000 	andeq	r0, r0, r0
 8007188:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 800718c:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
	...
 80071a0:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}
 80071a4:	080085c1 	stmdaeq	r0, {r0, r6, r7, r8, sl, pc}

Disassembly of section .text:

080071a8 <net_init>:
 80071a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ac:	460c      	mov	r4, r1
 80071ae:	4616      	mov	r6, r2
 80071b0:	9f06      	ldr	r7, [sp, #24]
 80071b2:	4a22      	ldr	r2, [pc, #136]	; (800723c <net_init+0x94>)
 80071b4:	461d      	mov	r5, r3
 80071b6:	1e43      	subs	r3, r0, #1
 80071b8:	3005      	adds	r0, #5
 80071ba:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80071be:	4283      	cmp	r3, r0
 80071c0:	f802 1b01 	strb.w	r1, [r2], #1
 80071c4:	d1f9      	bne.n	80071ba <net_init+0x12>
 80071c6:	4623      	mov	r3, r4
 80071c8:	4a1d      	ldr	r2, [pc, #116]	; (8007240 <net_init+0x98>)
 80071ca:	f104 010c 	add.w	r1, r4, #12
 80071ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80071d2:	428b      	cmp	r3, r1
 80071d4:	f802 0b01 	strb.w	r0, [r2], #1
 80071d8:	d1f9      	bne.n	80071ce <net_init+0x26>
 80071da:	f04f 0800 	mov.w	r8, #0
 80071de:	4918      	ldr	r1, [pc, #96]	; (8007240 <net_init+0x98>)
 80071e0:	4816      	ldr	r0, [pc, #88]	; (800723c <net_init+0x94>)
 80071e2:	f000 f9a7 	bl	8007534 <ip_init>
 80071e6:	4815      	ldr	r0, [pc, #84]	; (800723c <net_init+0x94>)
 80071e8:	f000 f83c 	bl	8007264 <rfc3927_init>
 80071ec:	f887 8000 	strb.w	r8, [r7]
 80071f0:	782b      	ldrb	r3, [r5, #0]
 80071f2:	b163      	cbz	r3, 800720e <net_init+0x66>
 80071f4:	4632      	mov	r2, r6
 80071f6:	4912      	ldr	r1, [pc, #72]	; (8007240 <net_init+0x98>)
 80071f8:	4810      	ldr	r0, [pc, #64]	; (800723c <net_init+0x94>)
 80071fa:	f00a fc7f 	bl	8011afc <dhcp_client>
 80071fe:	4540      	cmp	r0, r8
 8007200:	da05      	bge.n	800720e <net_init+0x66>
 8007202:	480f      	ldr	r0, [pc, #60]	; (8007240 <net_init+0x98>)
 8007204:	f885 8000 	strb.w	r8, [r5]
 8007208:	f008 fe72 	bl	800fef0 <rfc3927>
 800720c:	7038      	strb	r0, [r7, #0]
 800720e:	490c      	ldr	r1, [pc, #48]	; (8007240 <net_init+0x98>)
 8007210:	480a      	ldr	r0, [pc, #40]	; (800723c <net_init+0x94>)
 8007212:	f000 f883 	bl	800731c <arp_init>
 8007216:	480a      	ldr	r0, [pc, #40]	; (8007240 <net_init+0x98>)
 8007218:	f00a fe90 	bl	8011f3c <ip_set_ip>
 800721c:	f000 f82e 	bl	800727c <tcp_init>
 8007220:	4a07      	ldr	r2, [pc, #28]	; (8007240 <net_init+0x98>)
 8007222:	1e63      	subs	r3, r4, #1
 8007224:	340b      	adds	r4, #11
 8007226:	f812 1b01 	ldrb.w	r1, [r2], #1
 800722a:	f803 1f01 	strb.w	r1, [r3, #1]!
 800722e:	429c      	cmp	r4, r3
 8007230:	d1f9      	bne.n	8007226 <net_init+0x7e>
 8007232:	782a      	ldrb	r2, [r5, #0]
 8007234:	4b03      	ldr	r3, [pc, #12]	; (8007244 <net_init+0x9c>)
 8007236:	701a      	strb	r2, [r3, #0]
 8007238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800723c:	20002734 	andcs	r2, r0, r4, lsr r7
 8007240:	20002728 	andcs	r2, r0, r8, lsr #14
 8007244:	2000273a 	andcs	r2, r0, sl, lsr r7

08007248 <net_shutdown>:
 8007248:	b508      	push	{r3, lr}
 800724a:	f000 f97e 	bl	800754a <ip_shutdown>
 800724e:	4b04      	ldr	r3, [pc, #16]	; (8007260 <net_shutdown+0x18>)
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	b11b      	cbz	r3, 800725c <net_shutdown+0x14>
 8007254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007258:	f00a bd58 	b.w	8011d0c <dhcp_client_release>
 800725c:	bd08      	pop	{r3, pc}
 800725e:	bf00      	nop
 8007260:	2000273a 	andcs	r2, r0, sl, lsr r7

08007264 <rfc3927_init>:
 8007264:	4b04      	ldr	r3, [pc, #16]	; (8007278 <rfc3927_init+0x14>)
 8007266:	1d82      	adds	r2, r0, #6
 8007268:	4290      	cmp	r0, r2
 800726a:	d100      	bne.n	800726e <rfc3927_init+0xa>
 800726c:	4770      	bx	lr
 800726e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007272:	f803 1b01 	strb.w	r1, [r3], #1
 8007276:	e7f7      	b.n	8007268 <rfc3927_init+0x4>
 8007278:	20002744 	andcs	r2, r0, r4, asr #14

0800727c <tcp_init>:
 800727c:	2206      	movs	r2, #6
 800727e:	b513      	push	{r0, r1, r4, lr}
 8007280:	4c0b      	ldr	r4, [pc, #44]	; (80072b0 <tcp_init+0x34>)
 8007282:	490c      	ldr	r1, [pc, #48]	; (80072b4 <tcp_init+0x38>)
 8007284:	18a0      	adds	r0, r4, r2
 8007286:	f008 fe8d 	bl	800ffa4 <memcpy.isra.0>
 800728a:	2308      	movs	r3, #8
 800728c:	2204      	movs	r2, #4
 800728e:	81a3      	strh	r3, [r4, #12]
 8007290:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <tcp_init+0x3c>)
 8007292:	eb0d 0102 	add.w	r1, sp, r2
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f104 001a 	add.w	r0, r4, #26
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	f008 fe81 	bl	800ffa4 <memcpy.isra.0>
 80072a2:	2345      	movs	r3, #69	; 0x45
 80072a4:	81e3      	strh	r3, [r4, #14]
 80072a6:	4b05      	ldr	r3, [pc, #20]	; (80072bc <tcp_init+0x40>)
 80072a8:	6163      	str	r3, [r4, #20]
 80072aa:	b002      	add	sp, #8
 80072ac:	bd10      	pop	{r4, pc}
 80072ae:	bf00      	nop
 80072b0:	2000330c 	andcs	r3, r0, ip, lsl #6
 80072b4:	20002734 	andcs	r2, r0, r4, lsr r7
 80072b8:	20002728 	andcs	r2, r0, r8, lsr #14
 80072bc:	06400040 	strbeq	r0, [r0], -r0, asr #32

080072c0 <udp_init>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	2200      	movs	r2, #0
 80072c4:	2408      	movs	r4, #8
 80072c6:	460e      	mov	r6, r1
 80072c8:	4b0d      	ldr	r3, [pc, #52]	; (8007300 <udp_init+0x40>)
 80072ca:	490e      	ldr	r1, [pc, #56]	; (8007304 <udp_init+0x44>)
 80072cc:	3c01      	subs	r4, #1
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	805a      	strh	r2, [r3, #2]
 80072d2:	f841 2b04 	str.w	r2, [r1], #4
 80072d6:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 80072da:	d1f7      	bne.n	80072cc <udp_init+0xc>
 80072dc:	2206      	movs	r2, #6
 80072de:	4d0a      	ldr	r5, [pc, #40]	; (8007308 <udp_init+0x48>)
 80072e0:	4b0a      	ldr	r3, [pc, #40]	; (800730c <udp_init+0x4c>)
 80072e2:	4601      	mov	r1, r0
 80072e4:	18a8      	adds	r0, r5, r2
 80072e6:	801c      	strh	r4, [r3, #0]
 80072e8:	f008 ffe0 	bl	80102ac <memcpy.isra.0>
 80072ec:	4b08      	ldr	r3, [pc, #32]	; (8007310 <udp_init+0x50>)
 80072ee:	4630      	mov	r0, r6
 80072f0:	60eb      	str	r3, [r5, #12]
 80072f2:	4b08      	ldr	r3, [pc, #32]	; (8007314 <udp_init+0x54>)
 80072f4:	616b      	str	r3, [r5, #20]
 80072f6:	f009 f801 	bl	80102fc <udp_set_ip>
 80072fa:	852c      	strh	r4, [r5, #40]	; 0x28
 80072fc:	bd70      	pop	{r4, r5, r6, pc}
 80072fe:	bf00      	nop
 8007300:	20003928 	andcs	r3, r0, r8, lsr #18
 8007304:	20003908 	andcs	r3, r0, r8, lsl #18
 8007308:	200095c8 	andcs	r9, r0, r8, asr #11
 800730c:	20003904 	andcs	r3, r0, r4, lsl #18
 8007310:	00450008 	subeq	r0, r5, r8
 8007314:	11400040 	cmpne	r0, r0, asr #32

08007318 <udp_shutdown>:
 8007318:	4770      	bx	lr
	...

0800731c <arp_init>:
 800731c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007320:	4604      	mov	r4, r0
 8007322:	460d      	mov	r5, r1
 8007324:	f000 f876 	bl	8007414 <arp_cache_init>
 8007328:	2206      	movs	r2, #6
 800732a:	4621      	mov	r1, r4
 800732c:	482e      	ldr	r0, [pc, #184]	; (80073e8 <arp_init+0xcc>)
 800732e:	682f      	ldr	r7, [r5, #0]
 8007330:	f00a fa68 	bl	8011804 <memcpy.isra.0>
 8007334:	4b2d      	ldr	r3, [pc, #180]	; (80073ec <arp_init+0xd0>)
 8007336:	2507      	movs	r5, #7
 8007338:	461e      	mov	r6, r3
 800733a:	22ff      	movs	r2, #255	; 0xff
 800733c:	3d01      	subs	r5, #1
 800733e:	d146      	bne.n	80073ce <arp_init+0xb2>
 8007340:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <arp_init+0xd4>)
 8007342:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80073f4 <arp_init+0xd8>
 8007346:	2206      	movs	r2, #6
 8007348:	e9c6 3803 	strd	r3, r8, [r6, #12]
 800734c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007350:	4621      	mov	r1, r4
 8007352:	4829      	ldr	r0, [pc, #164]	; (80073f8 <arp_init+0xdc>)
 8007354:	82b3      	strh	r3, [r6, #20]
 8007356:	f00a fa55 	bl	8011804 <memcpy.isra.0>
 800735a:	2307      	movs	r3, #7
 800735c:	4a27      	ldr	r2, [pc, #156]	; (80073fc <arp_init+0xe0>)
 800735e:	61f7      	str	r7, [r6, #28]
 8007360:	3b01      	subs	r3, #1
 8007362:	d137      	bne.n	80073d4 <arp_init+0xb8>
 8007364:	2206      	movs	r2, #6
 8007366:	4621      	mov	r1, r4
 8007368:	4825      	ldr	r0, [pc, #148]	; (8007400 <arp_init+0xe4>)
 800736a:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 800736e:	f00a fa49 	bl	8011804 <memcpy.isra.0>
 8007372:	4a24      	ldr	r2, [pc, #144]	; (8007404 <arp_init+0xe8>)
 8007374:	2306      	movs	r3, #6
 8007376:	4615      	mov	r5, r2
 8007378:	21ff      	movs	r1, #255	; 0xff
 800737a:	3b01      	subs	r3, #1
 800737c:	d22d      	bcs.n	80073da <arp_init+0xbe>
 800737e:	4b1c      	ldr	r3, [pc, #112]	; (80073f0 <arp_init+0xd4>)
 8007380:	2206      	movs	r2, #6
 8007382:	e9c5 3803 	strd	r3, r8, [r5, #12]
 8007386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800738a:	4621      	mov	r1, r4
 800738c:	481e      	ldr	r0, [pc, #120]	; (8007408 <arp_init+0xec>)
 800738e:	82ab      	strh	r3, [r5, #20]
 8007390:	f00a fa38 	bl	8011804 <memcpy.isra.0>
 8007394:	2307      	movs	r3, #7
 8007396:	2100      	movs	r1, #0
 8007398:	4a1c      	ldr	r2, [pc, #112]	; (800740c <arp_init+0xf0>)
 800739a:	61ef      	str	r7, [r5, #28]
 800739c:	3b01      	subs	r3, #1
 800739e:	d11f      	bne.n	80073e0 <arp_init+0xc4>
 80073a0:	2206      	movs	r2, #6
 80073a2:	4d1b      	ldr	r5, [pc, #108]	; (8007410 <arp_init+0xf4>)
 80073a4:	4621      	mov	r1, r4
 80073a6:	18a8      	adds	r0, r5, r2
 80073a8:	f00a fa2c 	bl	8011804 <memcpy.isra.0>
 80073ac:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <arp_init+0xd4>)
 80073ae:	4621      	mov	r1, r4
 80073b0:	e9c5 3803 	strd	r3, r8, [r5, #12]
 80073b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073b8:	f105 0016 	add.w	r0, r5, #22
 80073bc:	2206      	movs	r2, #6
 80073be:	82ab      	strh	r3, [r5, #20]
 80073c0:	f00a fa20 	bl	8011804 <memcpy.isra.0>
 80073c4:	61ef      	str	r7, [r5, #28]
 80073c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073ca:	f00a ba25 	b.w	8011818 <arp_announce>
 80073ce:	f803 2b01 	strb.w	r2, [r3], #1
 80073d2:	e7b3      	b.n	800733c <arp_init+0x20>
 80073d4:	f802 5b01 	strb.w	r5, [r2], #1
 80073d8:	e7c2      	b.n	8007360 <arp_init+0x44>
 80073da:	f802 1b01 	strb.w	r1, [r2], #1
 80073de:	e7cc      	b.n	800737a <arp_init+0x5e>
 80073e0:	f802 1b01 	strb.w	r1, [r2], #1
 80073e4:	e7da      	b.n	800739c <arp_init+0x80>
 80073e6:	bf00      	nop
 80073e8:	2000a05e 	andcs	sl, r0, lr, asr r0
 80073ec:	2000a058 	andcs	sl, r0, r8, asr r0
 80073f0:	01000608 	tsteq	r0, r8, lsl #12
 80073f4:	04060008 	streq	r0, [r6], #-8
 80073f8:	2000a06e 	andcs	sl, r0, lr, rrx
 80073fc:	2000a078 	andcs	sl, r0, r8, ror r0
 8007400:	2000a0b6 	strhcs	sl, [r0], -r6
 8007404:	2000a0b0 	strhcs	sl, [r0], -r0
 8007408:	2000a0c6 	andcs	sl, r0, r6, asr #1
 800740c:	2000a0d0 	ldrdcs	sl, [r0], -r0
 8007410:	2000a084 	andcs	sl, r0, r4, lsl #1

08007414 <arp_cache_init>:
 8007414:	2300      	movs	r3, #0
 8007416:	4618      	mov	r0, r3
 8007418:	4a09      	ldr	r2, [pc, #36]	; (8007440 <arp_cache_init+0x2c>)
 800741a:	b510      	push	{r4, lr}
 800741c:	8013      	strh	r3, [r2, #0]
 800741e:	4a09      	ldr	r2, [pc, #36]	; (8007444 <arp_cache_init+0x30>)
 8007420:	4611      	mov	r1, r2
 8007422:	f842 0c04 	str.w	r0, [r2, #-4]
 8007426:	1d94      	adds	r4, r2, #6
 8007428:	42a1      	cmp	r1, r4
 800742a:	d105      	bne.n	8007438 <arp_cache_init+0x24>
 800742c:	3303      	adds	r3, #3
 800742e:	2b60      	cmp	r3, #96	; 0x60
 8007430:	f102 020c 	add.w	r2, r2, #12
 8007434:	d1f4      	bne.n	8007420 <arp_cache_init+0xc>
 8007436:	bd10      	pop	{r4, pc}
 8007438:	f801 0b01 	strb.w	r0, [r1], #1
 800743c:	e7f4      	b.n	8007428 <arp_cache_init+0x14>
 800743e:	bf00      	nop
 8007440:	2000a25c 	andcs	sl, r0, ip, asr r2
 8007444:	2000a0e0 	andcs	sl, r0, r0, ror #1

08007448 <igmp_init>:
 8007448:	2200      	movs	r2, #0
 800744a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800744e:	4605      	mov	r5, r0
 8007450:	4608      	mov	r0, r1
 8007452:	4611      	mov	r1, r2
 8007454:	4b23      	ldr	r3, [pc, #140]	; (80074e4 <igmp_init+0x9c>)
 8007456:	f103 0408 	add.w	r4, r3, #8
 800745a:	42a3      	cmp	r3, r4
 800745c:	d13e      	bne.n	80074dc <igmp_init+0x94>
 800745e:	3201      	adds	r2, #1
 8007460:	2a24      	cmp	r2, #36	; 0x24
 8007462:	d1f8      	bne.n	8007456 <igmp_init+0xe>
 8007464:	2600      	movs	r6, #0
 8007466:	4b20      	ldr	r3, [pc, #128]	; (80074e8 <igmp_init+0xa0>)
 8007468:	4c20      	ldr	r4, [pc, #128]	; (80074ec <igmp_init+0xa4>)
 800746a:	601e      	str	r6, [r3, #0]
 800746c:	4b20      	ldr	r3, [pc, #128]	; (80074f0 <igmp_init+0xa8>)
 800746e:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8007472:	801e      	strh	r6, [r3, #0]
 8007474:	f00a fcc2 	bl	8011dfc <igmp_set_ip>
 8007478:	2201      	movs	r2, #1
 800747a:	4b1e      	ldr	r3, [pc, #120]	; (80074f4 <igmp_init+0xac>)
 800747c:	4629      	mov	r1, r5
 800747e:	801a      	strh	r2, [r3, #0]
 8007480:	225e      	movs	r2, #94	; 0x5e
 8007482:	709a      	strb	r2, [r3, #2]
 8007484:	2206      	movs	r2, #6
 8007486:	18a0      	adds	r0, r4, r2
 8007488:	f00a fc6e 	bl	8011d68 <memcpy.isra.0>
 800748c:	f240 4394 	movw	r3, #1172	; 0x494
 8007490:	8463      	strh	r3, [r4, #34]	; 0x22
 8007492:	2316      	movs	r3, #22
 8007494:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80074f8 <igmp_init+0xb0>
 8007498:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80074fc <igmp_init+0xb4>
 800749c:	84e3      	strh	r3, [r4, #38]	; 0x26
 800749e:	f8c4 9014 	str.w	r9, [r4, #20]
 80074a2:	4b17      	ldr	r3, [pc, #92]	; (8007500 <igmp_init+0xb8>)
 80074a4:	f8c4 800c 	str.w	r8, [r4, #12]
 80074a8:	8227      	strh	r7, [r4, #16]
 80074aa:	84a6      	strh	r6, [r4, #36]	; 0x24
 80074ac:	4c15      	ldr	r4, [pc, #84]	; (8007504 <igmp_init+0xbc>)
 80074ae:	2206      	movs	r2, #6
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074b6:	18a0      	adds	r0, r4, r2
 80074b8:	80a3      	strh	r3, [r4, #4]
 80074ba:	4629      	mov	r1, r5
 80074bc:	f00a fc54 	bl	8011d68 <memcpy.isra.0>
 80074c0:	23e0      	movs	r3, #224	; 0xe0
 80074c2:	83e3      	strh	r3, [r4, #30]
 80074c4:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 80074c8:	4a0f      	ldr	r2, [pc, #60]	; (8007508 <igmp_init+0xc0>)
 80074ca:	f8c4 9014 	str.w	r9, [r4, #20]
 80074ce:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80074d2:	f8c4 800c 	str.w	r8, [r4, #12]
 80074d6:	8227      	strh	r7, [r4, #16]
 80074d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074dc:	f803 1b01 	strb.w	r1, [r3], #1
 80074e0:	e7bb      	b.n	800745a <igmp_init+0x12>
 80074e2:	bf00      	nop
 80074e4:	2000a494 	mulcs	r0, r4, r4
 80074e8:	2000a5b8 			; <UNDEFINED> instruction: 0x2000a5b8
 80074ec:	2000a5f4 	strdcs	sl, [r0], -r4
 80074f0:	2000a5b4 			; <UNDEFINED> instruction: 0x2000a5b4
 80074f4:	2000a5ec 	andcs	sl, r0, ip, ror #11
 80074f8:	02010040 	andeq	r0, r1, #64	; 0x40
 80074fc:	00460008 	subeq	r0, r6, r8
 8007500:	005e0001 	subseq	r0, lr, r1
 8007504:	2000a5bc 			; <UNDEFINED> instruction: 0x2000a5bc
 8007508:	04940200 	ldreq	r0, [r4], #512	; 0x200

0800750c <igmp_shutdown>:
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	2500      	movs	r5, #0
 8007510:	462e      	mov	r6, r5
 8007512:	4c07      	ldr	r4, [pc, #28]	; (8007530 <igmp_shutdown+0x24>)
 8007514:	6820      	ldr	r0, [r4, #0]
 8007516:	b120      	cbz	r0, 8007522 <igmp_shutdown+0x16>
 8007518:	f00a fccc 	bl	8011eb4 <igmp_leave>
 800751c:	6026      	str	r6, [r4, #0]
 800751e:	7166      	strb	r6, [r4, #5]
 8007520:	7126      	strb	r6, [r4, #4]
 8007522:	3501      	adds	r5, #1
 8007524:	2d24      	cmp	r5, #36	; 0x24
 8007526:	f104 0408 	add.w	r4, r4, #8
 800752a:	d1f3      	bne.n	8007514 <igmp_shutdown+0x8>
 800752c:	bd70      	pop	{r4, r5, r6, pc}
 800752e:	bf00      	nop
 8007530:	2000a494 	mulcs	r0, r4, r4

08007534 <ip_init>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4604      	mov	r4, r0
 8007538:	460d      	mov	r5, r1
 800753a:	f7ff fec1 	bl	80072c0 <udp_init>
 800753e:	4629      	mov	r1, r5
 8007540:	4620      	mov	r0, r4
 8007542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007546:	f7ff bf7f 	b.w	8007448 <igmp_init>

0800754a <ip_shutdown>:
 800754a:	b508      	push	{r3, lr}
 800754c:	f7ff ffde 	bl	800750c <igmp_shutdown>
 8007550:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007554:	f7ff bee0 	b.w	8007318 <udp_shutdown>

08007558 <console_init>:
 8007558:	b508      	push	{r3, lr}
 800755a:	f00c fe37 	bl	80141cc <uart0_init>
 800755e:	4804      	ldr	r0, [pc, #16]	; (8007570 <console_init+0x18>)
 8007560:	f00c fe64 	bl	801422c <uart0_puts>
 8007564:	4803      	ldr	r0, [pc, #12]	; (8007574 <console_init+0x1c>)
 8007566:	f00c fe61 	bl	801422c <uart0_puts>
 800756a:	2000      	movs	r0, #0
 800756c:	bd08      	pop	{r3, pc}
 800756e:	bf00      	nop
 8007570:	080164ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, sl, sp, lr}
 8007574:	08018700 	stmdaeq	r1, {r8, r9, sl, pc}

08007578 <net_handle>:
 8007578:	b510      	push	{r4, lr}
 800757a:	4c0c      	ldr	r4, [pc, #48]	; (80075ac <net_handle+0x34>)
 800757c:	4620      	mov	r0, r4
 800757e:	f00d fd41 	bl	8015004 <emac_eth_recv>
 8007582:	2800      	cmp	r0, #0
 8007584:	dd07      	ble.n	8007596 <net_handle+0x1e>
 8007586:	6820      	ldr	r0, [r4, #0]
 8007588:	8983      	ldrh	r3, [r0, #12]
 800758a:	2b08      	cmp	r3, #8
 800758c:	d107      	bne.n	800759e <net_handle+0x26>
 800758e:	f000 fa6f 	bl	8007a70 <ip_handle>
 8007592:	f00d fd4b 	bl	801502c <emac_free_pkt>
 8007596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800759a:	f008 bc99 	b.w	800fed0 <net_timers_run>
 800759e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80075a2:	d1f6      	bne.n	8007592 <net_handle+0x1a>
 80075a4:	f000 fa08 	bl	80079b8 <arp_handle>
 80075a8:	e7f3      	b.n	8007592 <net_handle+0x1a>
 80075aa:	bf00      	nop
 80075ac:	2000273c 	andcs	r2, r0, ip, lsr r7

080075b0 <tcp_handle>:
 80075b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075b4:	4605      	mov	r5, r0
 80075b6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80075b8:	f8b0 8010 	ldrh.w	r8, [r0, #16]
 80075bc:	ba5b      	rev16	r3, r3
 80075be:	8443      	strh	r3, [r0, #34]	; 0x22
 80075c0:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80075c2:	f890 902e 	ldrb.w	r9, [r0, #46]	; 0x2e
 80075c6:	ba5b      	rev16	r3, r3
 80075c8:	8483      	strh	r3, [r0, #36]	; 0x24
 80075ca:	f008 fcf5 	bl	800ffb8 <_bswap32>
 80075ce:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 80075d0:	4ca5      	ldr	r4, [pc, #660]	; (8007868 <tcp_handle+0x2b8>)
 80075d2:	ba5b      	rev16	r3, r3
 80075d4:	862b      	strh	r3, [r5, #48]	; 0x30
 80075d6:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80075d8:	8822      	ldrh	r2, [r4, #0]
 80075da:	ba5b      	rev16	r3, r3
 80075dc:	86ab      	strh	r3, [r5, #52]	; 0x34
 80075de:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d14d      	bne.n	8007680 <tcp_handle+0xd0>
 80075e4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d00d      	beq.n	8007608 <tcp_handle+0x58>
 80075ec:	2204      	movs	r2, #4
 80075ee:	4668      	mov	r0, sp
 80075f0:	f105 011a 	add.w	r1, r5, #26
 80075f4:	f008 fcd6 	bl	800ffa4 <memcpy.isra.0>
 80075f8:	8862      	ldrh	r2, [r4, #2]
 80075fa:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d13f      	bne.n	8007680 <tcp_handle+0xd0>
 8007600:	6862      	ldr	r2, [r4, #4]
 8007602:	9b00      	ldr	r3, [sp, #0]
 8007604:	429a      	cmp	r2, r3
 8007606:	d13b      	bne.n	8007680 <tcp_handle+0xd0>
 8007608:	2204      	movs	r2, #4
 800760a:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 800760e:	eb0d 0002 	add.w	r0, sp, r2
 8007612:	f008 fcc7 	bl	800ffa4 <memcpy.isra.0>
 8007616:	2204      	movs	r2, #4
 8007618:	f105 0126 	add.w	r1, r5, #38	; 0x26
 800761c:	eb0d 0002 	add.w	r0, sp, r2
 8007620:	9e01      	ldr	r6, [sp, #4]
 8007622:	f008 fcbf 	bl	800ffa4 <memcpy.isra.0>
 8007626:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800762a:	9f01      	ldr	r7, [sp, #4]
 800762c:	2a01      	cmp	r2, #1
 800762e:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 8007632:	d01b      	beq.n	800766c <tcp_handle+0xbc>
 8007634:	1ed3      	subs	r3, r2, #3
 8007636:	2b07      	cmp	r3, #7
 8007638:	d822      	bhi.n	8007680 <tcp_handle+0xd0>
 800763a:	fa98 f198 	rev16.w	r1, r8
 800763e:	f64f 78ec 	movw	r8, #65516	; 0xffec
 8007642:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8007646:	eba8 0883 	sub.w	r8, r8, r3, lsl #2
 800764a:	4488      	add	r8, r1
 800764c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800764e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 8007652:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8007656:	fa1f f888 	uxth.w	r8, r8
 800765a:	2900      	cmp	r1, #0
 800765c:	d142      	bne.n	80076e4 <tcp_handle+0x134>
 800765e:	f1b8 0f00 	cmp.w	r8, #0
 8007662:	d16b      	bne.n	800773c <tcp_handle+0x18c>
 8007664:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007666:	42bb      	cmp	r3, r7
 8007668:	d168      	bne.n	800773c <tcp_handle+0x18c>
 800766a:	e048      	b.n	80076fe <tcp_handle+0x14e>
 800766c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007670:	075a      	lsls	r2, r3, #29
 8007672:	d405      	bmi.n	8007680 <tcp_handle+0xd0>
 8007674:	06d8      	lsls	r0, r3, #27
 8007676:	d506      	bpl.n	8007686 <tcp_handle+0xd6>
 8007678:	4628      	mov	r0, r5
 800767a:	497b      	ldr	r1, [pc, #492]	; (8007868 <tcp_handle+0x2b8>)
 800767c:	f008 fd68 	bl	8010150 <_send_reset>
 8007680:	b004      	add	sp, #16
 8007682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007686:	0799      	lsls	r1, r3, #30
 8007688:	d5fa      	bpl.n	8007680 <tcp_handle+0xd0>
 800768a:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 800768e:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8007692:	4668      	mov	r0, sp
 8007694:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007698:	f105 011a 	add.w	r1, r5, #26
 800769c:	2204      	movs	r2, #4
 800769e:	8063      	strh	r3, [r4, #2]
 80076a0:	f008 fc80 	bl	800ffa4 <memcpy.isra.0>
 80076a4:	2206      	movs	r2, #6
 80076a6:	9b00      	ldr	r3, [sp, #0]
 80076a8:	18a9      	adds	r1, r5, r2
 80076aa:	4870      	ldr	r0, [pc, #448]	; (800786c <tcp_handle+0x2bc>)
 80076ac:	6063      	str	r3, [r4, #4]
 80076ae:	f008 fc79 	bl	800ffa4 <memcpy.isra.0>
 80076b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80076b4:	1c7b      	adds	r3, r7, #1
 80076b6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80076ba:	6363      	str	r3, [r4, #52]	; 0x34
 80076bc:	2312      	movs	r3, #18
 80076be:	486a      	ldr	r0, [pc, #424]	; (8007868 <tcp_handle+0x2b8>)
 80076c0:	a901      	add	r1, sp, #4
 80076c2:	f88d 300c 	strb.w	r3, [sp, #12]
 80076c6:	e9c4 7608 	strd	r7, r6, [r4, #32]
 80076ca:	63e7      	str	r7, [r4, #60]	; 0x3c
 80076cc:	f8c4 a018 	str.w	sl, [r4, #24]
 80076d0:	f008 fc98 	bl	8010004 <_tcp_send_package>
 80076d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	e9c4 3204 	strd	r3, r2, [r4, #16]
 80076dc:	2303      	movs	r3, #3
 80076de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80076e2:	e7cd      	b.n	8007680 <tcp_handle+0xd0>
 80076e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076e6:	eba3 0c07 	sub.w	ip, r3, r7
 80076ea:	f1b8 0f00 	cmp.w	r8, #0
 80076ee:	d10d      	bne.n	800770c <tcp_handle+0x15c>
 80076f0:	f1bc 0f00 	cmp.w	ip, #0
 80076f4:	dc22      	bgt.n	800773c <tcp_handle+0x18c>
 80076f6:	1afb      	subs	r3, r7, r3
 80076f8:	1a5b      	subs	r3, r3, r1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	da1e      	bge.n	800773c <tcp_handle+0x18c>
 80076fe:	0743      	lsls	r3, r0, #29
 8007700:	d530      	bpl.n	8007764 <tcp_handle+0x1b4>
 8007702:	8821      	ldrh	r1, [r4, #0]
 8007704:	4858      	ldr	r0, [pc, #352]	; (8007868 <tcp_handle+0x2b8>)
 8007706:	f008 fc33 	bl	800ff70 <_init_tcb>
 800770a:	e7b9      	b.n	8007680 <tcp_handle+0xd0>
 800770c:	f1bc 0f00 	cmp.w	ip, #0
 8007710:	dc06      	bgt.n	8007720 <tcp_handle+0x170>
 8007712:	eba7 0c03 	sub.w	ip, r7, r3
 8007716:	ebac 0c01 	sub.w	ip, ip, r1
 800771a:	f1bc 0f00 	cmp.w	ip, #0
 800771e:	dbee      	blt.n	80076fe <tcp_handle+0x14e>
 8007720:	eb08 0c07 	add.w	ip, r8, r7
 8007724:	f103 0e01 	add.w	lr, r3, #1
 8007728:	ebae 0e0c 	sub.w	lr, lr, ip
 800772c:	f1be 0f00 	cmp.w	lr, #0
 8007730:	dc04      	bgt.n	800773c <tcp_handle+0x18c>
 8007732:	43db      	mvns	r3, r3
 8007734:	1a5b      	subs	r3, r3, r1
 8007736:	eb13 0f0c 	cmn.w	r3, ip
 800773a:	d4e0      	bmi.n	80076fe <tcp_handle+0x14e>
 800773c:	0742      	lsls	r2, r0, #29
 800773e:	d505      	bpl.n	800774c <tcp_handle+0x19c>
 8007740:	8821      	ldrh	r1, [r4, #0]
 8007742:	4849      	ldr	r0, [pc, #292]	; (8007868 <tcp_handle+0x2b8>)
 8007744:	f008 fc14 	bl	800ff70 <_init_tcb>
 8007748:	2301      	movs	r3, #1
 800774a:	e7c8      	b.n	80076de <tcp_handle+0x12e>
 800774c:	6963      	ldr	r3, [r4, #20]
 800774e:	9301      	str	r3, [sp, #4]
 8007750:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007752:	9302      	str	r3, [sp, #8]
 8007754:	2310      	movs	r3, #16
 8007756:	4844      	ldr	r0, [pc, #272]	; (8007868 <tcp_handle+0x2b8>)
 8007758:	a901      	add	r1, sp, #4
 800775a:	f88d 300c 	strb.w	r3, [sp, #12]
 800775e:	f008 fc51 	bl	8010004 <_tcp_send_package>
 8007762:	e78d      	b.n	8007680 <tcp_handle+0xd0>
 8007764:	0781      	lsls	r1, r0, #30
 8007766:	d505      	bpl.n	8007774 <tcp_handle+0x1c4>
 8007768:	2a03      	cmp	r2, #3
 800776a:	d0ed      	beq.n	8007748 <tcp_handle+0x198>
 800776c:	4628      	mov	r0, r5
 800776e:	493e      	ldr	r1, [pc, #248]	; (8007868 <tcp_handle+0x2b8>)
 8007770:	f008 fcee 	bl	8010150 <_send_reset>
 8007774:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007778:	06da      	lsls	r2, r3, #27
 800777a:	d581      	bpl.n	8007680 <tcp_handle+0xd0>
 800777c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007780:	3b03      	subs	r3, #3
 8007782:	2b07      	cmp	r3, #7
 8007784:	d818      	bhi.n	80077b8 <tcp_handle+0x208>
 8007786:	e8df f003 	tbb	[pc, r3]
 800778a:	75757504 	ldrbvc	r7, [r5, #-1284]!	; 0xfffffafc
 800778e:	a59c7575 	ldrge	r7, [ip, #1397]	; 0x575
 8007792:	6923      	ldr	r3, [r4, #16]
 8007794:	1b9b      	subs	r3, r3, r6
 8007796:	2b00      	cmp	r3, #0
 8007798:	dc0a      	bgt.n	80077b0 <tcp_handle+0x200>
 800779a:	6963      	ldr	r3, [r4, #20]
 800779c:	1af3      	subs	r3, r6, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	dc06      	bgt.n	80077b0 <tcp_handle+0x200>
 80077a2:	2304      	movs	r3, #4
 80077a4:	e9c4 7608 	strd	r7, r6, [r4, #32]
 80077a8:	f8c4 a018 	str.w	sl, [r4, #24]
 80077ac:	6126      	str	r6, [r4, #16]
 80077ae:	e796      	b.n	80076de <tcp_handle+0x12e>
 80077b0:	4628      	mov	r0, r5
 80077b2:	492d      	ldr	r1, [pc, #180]	; (8007868 <tcp_handle+0x2b8>)
 80077b4:	f008 fccc 	bl	8010150 <_send_reset>
 80077b8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80077bc:	3b04      	subs	r3, #4
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d830      	bhi.n	8007824 <tcp_handle+0x274>
 80077c2:	f1b8 0f00 	cmp.w	r8, #0
 80077c6:	d02d      	beq.n	8007824 <tcp_handle+0x274>
 80077c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077ca:	42bb      	cmp	r3, r7
 80077cc:	f040 8091 	bne.w	80078f2 <tcp_handle+0x342>
 80077d0:	f240 53b6 	movw	r3, #1462	; 0x5b6
 80077d4:	f8df a098 	ldr.w	sl, [pc, #152]	; 8007870 <tcp_handle+0x2c0>
 80077d8:	f105 0122 	add.w	r1, r5, #34	; 0x22
 80077dc:	f8ba 7000 	ldrh.w	r7, [sl]
 80077e0:	4642      	mov	r2, r8
 80077e2:	435f      	muls	r7, r3
 80077e4:	1d38      	adds	r0, r7, #4
 80077e6:	4449      	add	r1, r9
 80077e8:	4450      	add	r0, sl
 80077ea:	f008 fbdb 	bl	800ffa4 <memcpy.isra.0>
 80077ee:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80077f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077f2:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 80077f6:	8722      	strh	r2, [r4, #56]	; 0x38
 80077f8:	6962      	ldr	r2, [r4, #20]
 80077fa:	4443      	add	r3, r8
 80077fc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007800:	6363      	str	r3, [r4, #52]	; 0x34
 8007802:	2310      	movs	r3, #16
 8007804:	4457      	add	r7, sl
 8007806:	4818      	ldr	r0, [pc, #96]	; (8007868 <tcp_handle+0x2b8>)
 8007808:	f8a7 85b8 	strh.w	r8, [r7, #1464]	; 0x5b8
 800780c:	a901      	add	r1, sp, #4
 800780e:	f88d 300c 	strb.w	r3, [sp, #12]
 8007812:	f008 fbf7 	bl	8010004 <_tcp_send_package>
 8007816:	f8ba 3000 	ldrh.w	r3, [sl]
 800781a:	3301      	adds	r3, #1
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	f8aa 3000 	strh.w	r3, [sl]
 8007824:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007828:	2b02      	cmp	r3, #2
 800782a:	f67f af29 	bls.w	8007680 <tcp_handle+0xd0>
 800782e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007832:	07db      	lsls	r3, r3, #31
 8007834:	f57f af24 	bpl.w	8007680 <tcp_handle+0xd0>
 8007838:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800783a:	6962      	ldr	r2, [r4, #20]
 800783c:	3301      	adds	r3, #1
 800783e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007842:	6363      	str	r3, [r4, #52]	; 0x34
 8007844:	2310      	movs	r3, #16
 8007846:	4808      	ldr	r0, [pc, #32]	; (8007868 <tcp_handle+0x2b8>)
 8007848:	a901      	add	r1, sp, #4
 800784a:	f88d 300c 	strb.w	r3, [sp, #12]
 800784e:	f008 fbd9 	bl	8010004 <_tcp_send_package>
 8007852:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007856:	2b05      	cmp	r3, #5
 8007858:	d053      	beq.n	8007902 <tcp_handle+0x352>
 800785a:	d84d      	bhi.n	80078f8 <tcp_handle+0x348>
 800785c:	3b03      	subs	r3, #3
 800785e:	2b01      	cmp	r3, #1
 8007860:	f63f af0e 	bhi.w	8007680 <tcp_handle+0xd0>
 8007864:	2307      	movs	r3, #7
 8007866:	e73a      	b.n	80076de <tcp_handle+0x12e>
 8007868:	200032c8 	andcs	r3, r0, r8, asr #5
 800786c:	200032d0 	ldrdcs	r3, [r0], -r0
 8007870:	20002758 	andcs	r2, r0, r8, asr r7
 8007874:	6923      	ldr	r3, [r4, #16]
 8007876:	1b99      	subs	r1, r3, r6
 8007878:	d513      	bpl.n	80078a2 <tcp_handle+0x2f2>
 800787a:	6962      	ldr	r2, [r4, #20]
 800787c:	1ab2      	subs	r2, r6, r2
 800787e:	2a00      	cmp	r2, #0
 8007880:	dc0f      	bgt.n	80078a2 <tcp_handle+0x2f2>
 8007882:	6126      	str	r6, [r4, #16]
 8007884:	6a23      	ldr	r3, [r4, #32]
 8007886:	1bda      	subs	r2, r3, r7
 8007888:	2a00      	cmp	r2, #0
 800788a:	db05      	blt.n	8007898 <tcp_handle+0x2e8>
 800788c:	42bb      	cmp	r3, r7
 800788e:	d193      	bne.n	80077b8 <tcp_handle+0x208>
 8007890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007892:	1b9b      	subs	r3, r3, r6
 8007894:	2b00      	cmp	r3, #0
 8007896:	dc8f      	bgt.n	80077b8 <tcp_handle+0x208>
 8007898:	e9c4 7608 	strd	r7, r6, [r4, #32]
 800789c:	f8c4 a018 	str.w	sl, [r4, #24]
 80078a0:	e78a      	b.n	80077b8 <tcp_handle+0x208>
 80078a2:	1af3      	subs	r3, r6, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	dc06      	bgt.n	80078b6 <tcp_handle+0x306>
 80078a8:	2900      	cmp	r1, #0
 80078aa:	dc85      	bgt.n	80077b8 <tcp_handle+0x208>
 80078ac:	6963      	ldr	r3, [r4, #20]
 80078ae:	1af3      	subs	r3, r6, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dc81      	bgt.n	80077b8 <tcp_handle+0x208>
 80078b4:	e7e6      	b.n	8007884 <tcp_handle+0x2d4>
 80078b6:	6963      	ldr	r3, [r4, #20]
 80078b8:	1b9a      	subs	r2, r3, r6
 80078ba:	2a00      	cmp	r2, #0
 80078bc:	f6bf af7c 	bge.w	80077b8 <tcp_handle+0x208>
 80078c0:	e745      	b.n	800774e <tcp_handle+0x19e>
 80078c2:	6963      	ldr	r3, [r4, #20]
 80078c4:	42b3      	cmp	r3, r6
 80078c6:	f47f af77 	bne.w	80077b8 <tcp_handle+0x208>
 80078ca:	8821      	ldrh	r1, [r4, #0]
 80078cc:	480f      	ldr	r0, [pc, #60]	; (800790c <tcp_handle+0x35c>)
 80078ce:	f008 fb4f 	bl	800ff70 <_init_tcb>
 80078d2:	e771      	b.n	80077b8 <tcp_handle+0x208>
 80078d4:	6963      	ldr	r3, [r4, #20]
 80078d6:	42b3      	cmp	r3, r6
 80078d8:	f47f af6e 	bne.w	80077b8 <tcp_handle+0x208>
 80078dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078de:	480b      	ldr	r0, [pc, #44]	; (800790c <tcp_handle+0x35c>)
 80078e0:	9302      	str	r3, [sp, #8]
 80078e2:	2310      	movs	r3, #16
 80078e4:	a901      	add	r1, sp, #4
 80078e6:	9601      	str	r6, [sp, #4]
 80078e8:	f88d 300c 	strb.w	r3, [sp, #12]
 80078ec:	f008 fb8a 	bl	8010004 <_tcp_send_package>
 80078f0:	e762      	b.n	80077b8 <tcp_handle+0x208>
 80078f2:	6962      	ldr	r2, [r4, #20]
 80078f4:	9201      	str	r2, [sp, #4]
 80078f6:	e72c      	b.n	8007752 <tcp_handle+0x1a2>
 80078f8:	2b06      	cmp	r3, #6
 80078fa:	f47f aec1 	bne.w	8007680 <tcp_handle+0xd0>
 80078fe:	230a      	movs	r3, #10
 8007900:	e6ed      	b.n	80076de <tcp_handle+0x12e>
 8007902:	6963      	ldr	r3, [r4, #20]
 8007904:	42b3      	cmp	r3, r6
 8007906:	d0fa      	beq.n	80078fe <tcp_handle+0x34e>
 8007908:	2308      	movs	r3, #8
 800790a:	e6e8      	b.n	80076de <tcp_handle+0x12e>
 800790c:	200032c8 	andcs	r3, r0, r8, asr #5

08007910 <udp_handle>:
 8007910:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007914:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8007916:	4607      	mov	r7, r0
 8007918:	ba5b      	rev16	r3, r3
 800791a:	b29b      	uxth	r3, r3
 800791c:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 8007920:	2a01      	cmp	r2, #1
 8007922:	d904      	bls.n	800792e <udp_handle+0x1e>
 8007924:	2b7b      	cmp	r3, #123	; 0x7b
 8007926:	d002      	beq.n	800792e <udp_handle+0x1e>
 8007928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800792c:	d308      	bcc.n	8007940 <udp_handle+0x30>
 800792e:	2400      	movs	r4, #0
 8007930:	4a1f      	ldr	r2, [pc, #124]	; (80079b0 <udp_handle+0xa0>)
 8007932:	f852 1b04 	ldr.w	r1, [r2], #4
 8007936:	4299      	cmp	r1, r3
 8007938:	d005      	beq.n	8007946 <udp_handle+0x36>
 800793a:	3401      	adds	r4, #1
 800793c:	2c08      	cmp	r4, #8
 800793e:	d1f8      	bne.n	8007932 <udp_handle+0x22>
 8007940:	b002      	add	sp, #8
 8007942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007946:	f640 3394 	movw	r3, #2964	; 0xb94
 800794a:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 800794c:	435c      	muls	r4, r3
 800794e:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 8007952:	ba76      	rev16	r6, r6
 8007954:	3e08      	subs	r6, #8
 8007956:	b2b6      	uxth	r6, r6
 8007958:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 800795c:	bf28      	it	cs
 800795e:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 8007962:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80079b4 <udp_handle+0xa4>
 8007966:	1d20      	adds	r0, r4, #4
 8007968:	f838 5004 	ldrh.w	r5, [r8, r4]
 800796c:	4632      	mov	r2, r6
 800796e:	435d      	muls	r5, r3
 8007970:	4428      	add	r0, r5
 8007972:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8007976:	4440      	add	r0, r8
 8007978:	f008 fc98 	bl	80102ac <memcpy.isra.0>
 800797c:	2204      	movs	r2, #4
 800797e:	f107 011a 	add.w	r1, r7, #26
 8007982:	eb0d 0002 	add.w	r0, sp, r2
 8007986:	f008 fc91 	bl	80102ac <memcpy.isra.0>
 800798a:	9a01      	ldr	r2, [sp, #4]
 800798c:	192b      	adds	r3, r5, r4
 800798e:	4443      	add	r3, r8
 8007990:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 8007994:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007996:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 800799a:	ba52      	rev16	r2, r2
 800799c:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 80079a0:	f838 3004 	ldrh.w	r3, [r8, r4]
 80079a4:	3301      	adds	r3, #1
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	f828 3004 	strh.w	r3, [r8, r4]
 80079ae:	e7c7      	b.n	8007940 <udp_handle+0x30>
 80079b0:	20003908 	andcs	r3, r0, r8, lsl #18
 80079b4:	20003928 	andcs	r3, r0, r8, lsr #18

080079b8 <arp_handle>:
 80079b8:	8a83      	ldrh	r3, [r0, #20]
 80079ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079be:	d003      	beq.n	80079c8 <arp_handle+0x10>
 80079c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c4:	d002      	beq.n	80079cc <arp_handle+0x14>
 80079c6:	4770      	bx	lr
 80079c8:	f009 bf30 	b.w	801182c <arp_handle_request>
 80079cc:	f009 bf56 	b.w	801187c <arp_handle_reply>

080079d0 <igmp_handle>:
 80079d0:	7b83      	ldrb	r3, [r0, #14]
 80079d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079d6:	2b45      	cmp	r3, #69	; 0x45
 80079d8:	d116      	bne.n	8007a08 <igmp_handle+0x38>
 80079da:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80079de:	2b11      	cmp	r3, #17
 80079e0:	d112      	bne.n	8007a08 <igmp_handle+0x38>
 80079e2:	4b20      	ldr	r3, [pc, #128]	; (8007a64 <igmp_handle+0x94>)
 80079e4:	f100 051e 	add.w	r5, r0, #30
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	466a      	mov	r2, sp
 80079ec:	462b      	mov	r3, r5
 80079ee:	f100 0622 	add.w	r6, r0, #34	; 0x22
 80079f2:	42b3      	cmp	r3, r6
 80079f4:	d10b      	bne.n	8007a0e <igmp_handle+0x3e>
 80079f6:	2401      	movs	r4, #1
 80079f8:	2100      	movs	r1, #0
 80079fa:	f04f 0c01 	mov.w	ip, #1
 80079fe:	4b1a      	ldr	r3, [pc, #104]	; (8007a68 <igmp_handle+0x98>)
 8007a00:	4a1a      	ldr	r2, [pc, #104]	; (8007a6c <igmp_handle+0x9c>)
 8007a02:	681f      	ldr	r7, [r3, #0]
 8007a04:	428f      	cmp	r7, r1
 8007a06:	d10a      	bne.n	8007a1e <igmp_handle+0x4e>
 8007a08:	b003      	add	sp, #12
 8007a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a0e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8007a12:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007a16:	428c      	cmp	r4, r1
 8007a18:	d0eb      	beq.n	80079f2 <igmp_handle+0x22>
 8007a1a:	2400      	movs	r4, #0
 8007a1c:	e7ec      	b.n	80079f8 <igmp_handle+0x28>
 8007a1e:	6813      	ldr	r3, [r2, #0]
 8007a20:	9301      	str	r3, [sp, #4]
 8007a22:	b924      	cbnz	r4, 8007a2e <igmp_handle+0x5e>
 8007a24:	462b      	mov	r3, r5
 8007a26:	f10d 0e04 	add.w	lr, sp, #4
 8007a2a:	42b3      	cmp	r3, r6
 8007a2c:	d10e      	bne.n	8007a4c <igmp_handle+0x7c>
 8007a2e:	f892 e005 	ldrb.w	lr, [r2, #5]
 8007a32:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8007a36:	f1be 0f01 	cmp.w	lr, #1
 8007a3a:	d110      	bne.n	8007a5e <igmp_handle+0x8e>
 8007a3c:	f892 e004 	ldrb.w	lr, [r2, #4]
 8007a40:	459e      	cmp	lr, r3
 8007a42:	d909      	bls.n	8007a58 <igmp_handle+0x88>
 8007a44:	085b      	lsrs	r3, r3, #1
 8007a46:	3301      	adds	r3, #1
 8007a48:	7113      	strb	r3, [r2, #4]
 8007a4a:	e005      	b.n	8007a58 <igmp_handle+0x88>
 8007a4c:	f813 9b01 	ldrb.w	r9, [r3], #1
 8007a50:	f81e 8b01 	ldrb.w	r8, [lr], #1
 8007a54:	45c1      	cmp	r9, r8
 8007a56:	d0e8      	beq.n	8007a2a <igmp_handle+0x5a>
 8007a58:	3101      	adds	r1, #1
 8007a5a:	3208      	adds	r2, #8
 8007a5c:	e7d2      	b.n	8007a04 <igmp_handle+0x34>
 8007a5e:	f882 c005 	strb.w	ip, [r2, #5]
 8007a62:	e7ef      	b.n	8007a44 <igmp_handle+0x74>
 8007a64:	010000e0 	smlatteq	r0, r0, r0, r0
 8007a68:	2000a5b8 			; <UNDEFINED> instruction: 0x2000a5b8
 8007a6c:	2000a494 	mulcs	r0, r4, r4

08007a70 <ip_handle>:
 8007a70:	7b82      	ldrb	r2, [r0, #14]
 8007a72:	7dc3      	ldrb	r3, [r0, #23]
 8007a74:	2a45      	cmp	r2, #69	; 0x45
 8007a76:	d003      	beq.n	8007a80 <ip_handle+0x10>
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d111      	bne.n	8007aa0 <ip_handle+0x30>
 8007a7c:	f7ff bfa8 	b.w	80079d0 <igmp_handle>
 8007a80:	2b06      	cmp	r3, #6
 8007a82:	d00b      	beq.n	8007a9c <ip_handle+0x2c>
 8007a84:	d804      	bhi.n	8007a90 <ip_handle+0x20>
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d006      	beq.n	8007a98 <ip_handle+0x28>
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d0f6      	beq.n	8007a7c <ip_handle+0xc>
 8007a8e:	4770      	bx	lr
 8007a90:	2b11      	cmp	r3, #17
 8007a92:	d105      	bne.n	8007aa0 <ip_handle+0x30>
 8007a94:	f7ff bf3c 	b.w	8007910 <udp_handle>
 8007a98:	f000 b804 	b.w	8007aa4 <icmp_handle>
 8007a9c:	f7ff bd88 	b.w	80075b0 <tcp_handle>
 8007aa0:	4770      	bx	lr
	...

08007aa4 <icmp_handle>:
 8007aa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007aa6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007aaa:	4604      	mov	r4, r0
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d13e      	bne.n	8007b2e <icmp_handle+0x8a>
 8007ab0:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8007ab4:	2d00      	cmp	r5, #0
 8007ab6:	d13a      	bne.n	8007b2e <icmp_handle+0x8a>
 8007ab8:	1d86      	adds	r6, r0, #6
 8007aba:	4631      	mov	r1, r6
 8007abc:	2206      	movs	r2, #6
 8007abe:	f00a fa5f 	bl	8011f80 <memcpy.isra.0>
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	2206      	movs	r2, #6
 8007ac6:	491b      	ldr	r1, [pc, #108]	; (8007b34 <icmp_handle+0x90>)
 8007ac8:	f00a fa5a 	bl	8011f80 <memcpy.isra.0>
 8007acc:	8a63      	ldrh	r3, [r4, #18]
 8007ace:	f104 061a 	add.w	r6, r4, #26
 8007ad2:	43db      	mvns	r3, r3
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	2204      	movs	r2, #4
 8007ad8:	8263      	strh	r3, [r4, #18]
 8007ada:	f104 001e 	add.w	r0, r4, #30
 8007ade:	f00a fa4f 	bl	8011f80 <memcpy.isra.0>
 8007ae2:	2204      	movs	r2, #4
 8007ae4:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <icmp_handle+0x94>)
 8007ae6:	eb0d 0102 	add.w	r1, sp, r2
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4630      	mov	r0, r6
 8007aee:	f104 060e 	add.w	r6, r4, #14
 8007af2:	9301      	str	r3, [sp, #4]
 8007af4:	f00a fa44 	bl	8011f80 <memcpy.isra.0>
 8007af8:	2114      	movs	r1, #20
 8007afa:	4630      	mov	r0, r6
 8007afc:	7625      	strb	r5, [r4, #24]
 8007afe:	7665      	strb	r5, [r4, #25]
 8007b00:	f00a fa25 	bl	8011f4e <net_chksum>
 8007b04:	8a21      	ldrh	r1, [r4, #16]
 8007b06:	8320      	strh	r0, [r4, #24]
 8007b08:	ba49      	rev16	r1, r1
 8007b0a:	b289      	uxth	r1, r1
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8007b12:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8007b16:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8007b1a:	f00a fa18 	bl	8011f4e <net_chksum>
 8007b1e:	8a21      	ldrh	r1, [r4, #16]
 8007b20:	84a0      	strh	r0, [r4, #36]	; 0x24
 8007b22:	ba49      	rev16	r1, r1
 8007b24:	b289      	uxth	r1, r1
 8007b26:	4620      	mov	r0, r4
 8007b28:	310e      	adds	r1, #14
 8007b2a:	f00d fa83 	bl	8015034 <emac_eth_send>
 8007b2e:	b002      	add	sp, #8
 8007b30:	bd70      	pop	{r4, r5, r6, pc}
 8007b32:	bf00      	nop
 8007b34:	20002734 	andcs	r2, r0, r4, lsr r7
 8007b38:	20002728 	andcs	r2, r0, r8, lsr #14

08007b3c <__aeabi_drsub>:
 8007b3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007b40:	e002      	b.n	8007b48 <__adddf3>
 8007b42:	bf00      	nop

08007b44 <__aeabi_dsub>:
 8007b44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007b48 <__adddf3>:
 8007b48:	b530      	push	{r4, r5, lr}
 8007b4a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007b4e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007b52:	ea94 0f05 	teq	r4, r5
 8007b56:	bf08      	it	eq
 8007b58:	ea90 0f02 	teqeq	r0, r2
 8007b5c:	bf1f      	itttt	ne
 8007b5e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007b62:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007b66:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007b6a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007b6e:	f000 80e2 	beq.w	8007d36 <__adddf3+0x1ee>
 8007b72:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007b76:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007b7a:	bfb8      	it	lt
 8007b7c:	426d      	neglt	r5, r5
 8007b7e:	dd0c      	ble.n	8007b9a <__adddf3+0x52>
 8007b80:	442c      	add	r4, r5
 8007b82:	ea80 0202 	eor.w	r2, r0, r2
 8007b86:	ea81 0303 	eor.w	r3, r1, r3
 8007b8a:	ea82 0000 	eor.w	r0, r2, r0
 8007b8e:	ea83 0101 	eor.w	r1, r3, r1
 8007b92:	ea80 0202 	eor.w	r2, r0, r2
 8007b96:	ea81 0303 	eor.w	r3, r1, r3
 8007b9a:	2d36      	cmp	r5, #54	; 0x36
 8007b9c:	bf88      	it	hi
 8007b9e:	bd30      	pophi	{r4, r5, pc}
 8007ba0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007ba4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007ba8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007bac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007bb0:	d002      	beq.n	8007bb8 <__adddf3+0x70>
 8007bb2:	4240      	negs	r0, r0
 8007bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007bb8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007bbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007bc0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007bc4:	d002      	beq.n	8007bcc <__adddf3+0x84>
 8007bc6:	4252      	negs	r2, r2
 8007bc8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007bcc:	ea94 0f05 	teq	r4, r5
 8007bd0:	f000 80a7 	beq.w	8007d22 <__adddf3+0x1da>
 8007bd4:	f1a4 0401 	sub.w	r4, r4, #1
 8007bd8:	f1d5 0e20 	rsbs	lr, r5, #32
 8007bdc:	db0d      	blt.n	8007bfa <__adddf3+0xb2>
 8007bde:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007be2:	fa22 f205 	lsr.w	r2, r2, r5
 8007be6:	1880      	adds	r0, r0, r2
 8007be8:	f141 0100 	adc.w	r1, r1, #0
 8007bec:	fa03 f20e 	lsl.w	r2, r3, lr
 8007bf0:	1880      	adds	r0, r0, r2
 8007bf2:	fa43 f305 	asr.w	r3, r3, r5
 8007bf6:	4159      	adcs	r1, r3
 8007bf8:	e00e      	b.n	8007c18 <__adddf3+0xd0>
 8007bfa:	f1a5 0520 	sub.w	r5, r5, #32
 8007bfe:	f10e 0e20 	add.w	lr, lr, #32
 8007c02:	2a01      	cmp	r2, #1
 8007c04:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007c08:	bf28      	it	cs
 8007c0a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007c0e:	fa43 f305 	asr.w	r3, r3, r5
 8007c12:	18c0      	adds	r0, r0, r3
 8007c14:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007c18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007c1c:	d507      	bpl.n	8007c2e <__adddf3+0xe6>
 8007c1e:	f04f 0e00 	mov.w	lr, #0
 8007c22:	f1dc 0c00 	rsbs	ip, ip, #0
 8007c26:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007c2a:	eb6e 0101 	sbc.w	r1, lr, r1
 8007c2e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007c32:	d31b      	bcc.n	8007c6c <__adddf3+0x124>
 8007c34:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007c38:	d30c      	bcc.n	8007c54 <__adddf3+0x10c>
 8007c3a:	0849      	lsrs	r1, r1, #1
 8007c3c:	ea5f 0030 	movs.w	r0, r0, rrx
 8007c40:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007c44:	f104 0401 	add.w	r4, r4, #1
 8007c48:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007c4c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007c50:	f080 809a 	bcs.w	8007d88 <__adddf3+0x240>
 8007c54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007c58:	bf08      	it	eq
 8007c5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007c5e:	f150 0000 	adcs.w	r0, r0, #0
 8007c62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007c66:	ea41 0105 	orr.w	r1, r1, r5
 8007c6a:	bd30      	pop	{r4, r5, pc}
 8007c6c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007c70:	4140      	adcs	r0, r0
 8007c72:	eb41 0101 	adc.w	r1, r1, r1
 8007c76:	3c01      	subs	r4, #1
 8007c78:	bf28      	it	cs
 8007c7a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8007c7e:	d2e9      	bcs.n	8007c54 <__adddf3+0x10c>
 8007c80:	f091 0f00 	teq	r1, #0
 8007c84:	bf04      	itt	eq
 8007c86:	4601      	moveq	r1, r0
 8007c88:	2000      	moveq	r0, #0
 8007c8a:	fab1 f381 	clz	r3, r1
 8007c8e:	bf08      	it	eq
 8007c90:	3320      	addeq	r3, #32
 8007c92:	f1a3 030b 	sub.w	r3, r3, #11
 8007c96:	f1b3 0220 	subs.w	r2, r3, #32
 8007c9a:	da0c      	bge.n	8007cb6 <__adddf3+0x16e>
 8007c9c:	320c      	adds	r2, #12
 8007c9e:	dd08      	ble.n	8007cb2 <__adddf3+0x16a>
 8007ca0:	f102 0c14 	add.w	ip, r2, #20
 8007ca4:	f1c2 020c 	rsb	r2, r2, #12
 8007ca8:	fa01 f00c 	lsl.w	r0, r1, ip
 8007cac:	fa21 f102 	lsr.w	r1, r1, r2
 8007cb0:	e00c      	b.n	8007ccc <__adddf3+0x184>
 8007cb2:	f102 0214 	add.w	r2, r2, #20
 8007cb6:	bfd8      	it	le
 8007cb8:	f1c2 0c20 	rsble	ip, r2, #32
 8007cbc:	fa01 f102 	lsl.w	r1, r1, r2
 8007cc0:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007cc4:	bfdc      	itt	le
 8007cc6:	ea41 010c 	orrle.w	r1, r1, ip
 8007cca:	4090      	lslle	r0, r2
 8007ccc:	1ae4      	subs	r4, r4, r3
 8007cce:	bfa2      	ittt	ge
 8007cd0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8007cd4:	4329      	orrge	r1, r5
 8007cd6:	bd30      	popge	{r4, r5, pc}
 8007cd8:	ea6f 0404 	mvn.w	r4, r4
 8007cdc:	3c1f      	subs	r4, #31
 8007cde:	da1c      	bge.n	8007d1a <__adddf3+0x1d2>
 8007ce0:	340c      	adds	r4, #12
 8007ce2:	dc0e      	bgt.n	8007d02 <__adddf3+0x1ba>
 8007ce4:	f104 0414 	add.w	r4, r4, #20
 8007ce8:	f1c4 0220 	rsb	r2, r4, #32
 8007cec:	fa20 f004 	lsr.w	r0, r0, r4
 8007cf0:	fa01 f302 	lsl.w	r3, r1, r2
 8007cf4:	ea40 0003 	orr.w	r0, r0, r3
 8007cf8:	fa21 f304 	lsr.w	r3, r1, r4
 8007cfc:	ea45 0103 	orr.w	r1, r5, r3
 8007d00:	bd30      	pop	{r4, r5, pc}
 8007d02:	f1c4 040c 	rsb	r4, r4, #12
 8007d06:	f1c4 0220 	rsb	r2, r4, #32
 8007d0a:	fa20 f002 	lsr.w	r0, r0, r2
 8007d0e:	fa01 f304 	lsl.w	r3, r1, r4
 8007d12:	ea40 0003 	orr.w	r0, r0, r3
 8007d16:	4629      	mov	r1, r5
 8007d18:	bd30      	pop	{r4, r5, pc}
 8007d1a:	fa21 f004 	lsr.w	r0, r1, r4
 8007d1e:	4629      	mov	r1, r5
 8007d20:	bd30      	pop	{r4, r5, pc}
 8007d22:	f094 0f00 	teq	r4, #0
 8007d26:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8007d2a:	bf06      	itte	eq
 8007d2c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007d30:	3401      	addeq	r4, #1
 8007d32:	3d01      	subne	r5, #1
 8007d34:	e74e      	b.n	8007bd4 <__adddf3+0x8c>
 8007d36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007d3a:	bf18      	it	ne
 8007d3c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007d40:	d029      	beq.n	8007d96 <__adddf3+0x24e>
 8007d42:	ea94 0f05 	teq	r4, r5
 8007d46:	bf08      	it	eq
 8007d48:	ea90 0f02 	teqeq	r0, r2
 8007d4c:	d005      	beq.n	8007d5a <__adddf3+0x212>
 8007d4e:	ea54 0c00 	orrs.w	ip, r4, r0
 8007d52:	bf04      	itt	eq
 8007d54:	4619      	moveq	r1, r3
 8007d56:	4610      	moveq	r0, r2
 8007d58:	bd30      	pop	{r4, r5, pc}
 8007d5a:	ea91 0f03 	teq	r1, r3
 8007d5e:	bf1e      	ittt	ne
 8007d60:	2100      	movne	r1, #0
 8007d62:	2000      	movne	r0, #0
 8007d64:	bd30      	popne	{r4, r5, pc}
 8007d66:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8007d6a:	d105      	bne.n	8007d78 <__adddf3+0x230>
 8007d6c:	0040      	lsls	r0, r0, #1
 8007d6e:	4149      	adcs	r1, r1
 8007d70:	bf28      	it	cs
 8007d72:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8007d76:	bd30      	pop	{r4, r5, pc}
 8007d78:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007d7c:	bf3c      	itt	cc
 8007d7e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007d82:	bd30      	popcc	{r4, r5, pc}
 8007d84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007d88:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007d8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d90:	f04f 0000 	mov.w	r0, #0
 8007d94:	bd30      	pop	{r4, r5, pc}
 8007d96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007d9a:	bf1a      	itte	ne
 8007d9c:	4619      	movne	r1, r3
 8007d9e:	4610      	movne	r0, r2
 8007da0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007da4:	bf1c      	itt	ne
 8007da6:	460b      	movne	r3, r1
 8007da8:	4602      	movne	r2, r0
 8007daa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007dae:	bf06      	itte	eq
 8007db0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007db4:	ea91 0f03 	teqeq	r1, r3
 8007db8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007dbc:	bd30      	pop	{r4, r5, pc}
 8007dbe:	bf00      	nop

08007dc0 <__aeabi_ui2d>:
 8007dc0:	f090 0f00 	teq	r0, #0
 8007dc4:	bf04      	itt	eq
 8007dc6:	2100      	moveq	r1, #0
 8007dc8:	4770      	bxeq	lr
 8007dca:	b530      	push	{r4, r5, lr}
 8007dcc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007dd0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007dd4:	f04f 0500 	mov.w	r5, #0
 8007dd8:	f04f 0100 	mov.w	r1, #0
 8007ddc:	e750      	b.n	8007c80 <__adddf3+0x138>
 8007dde:	bf00      	nop

08007de0 <__aeabi_i2d>:
 8007de0:	f090 0f00 	teq	r0, #0
 8007de4:	bf04      	itt	eq
 8007de6:	2100      	moveq	r1, #0
 8007de8:	4770      	bxeq	lr
 8007dea:	b530      	push	{r4, r5, lr}
 8007dec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007df0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007df4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007df8:	bf48      	it	mi
 8007dfa:	4240      	negmi	r0, r0
 8007dfc:	f04f 0100 	mov.w	r1, #0
 8007e00:	e73e      	b.n	8007c80 <__adddf3+0x138>
 8007e02:	bf00      	nop

08007e04 <__aeabi_f2d>:
 8007e04:	0042      	lsls	r2, r0, #1
 8007e06:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007e0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8007e0e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007e12:	bf1f      	itttt	ne
 8007e14:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007e18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007e1c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007e20:	4770      	bxne	lr
 8007e22:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8007e26:	bf08      	it	eq
 8007e28:	4770      	bxeq	lr
 8007e2a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8007e2e:	bf04      	itt	eq
 8007e30:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8007e34:	4770      	bxeq	lr
 8007e36:	b530      	push	{r4, r5, lr}
 8007e38:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007e3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007e40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007e44:	e71c      	b.n	8007c80 <__adddf3+0x138>
 8007e46:	bf00      	nop

08007e48 <__aeabi_ul2d>:
 8007e48:	ea50 0201 	orrs.w	r2, r0, r1
 8007e4c:	bf08      	it	eq
 8007e4e:	4770      	bxeq	lr
 8007e50:	b530      	push	{r4, r5, lr}
 8007e52:	f04f 0500 	mov.w	r5, #0
 8007e56:	e00a      	b.n	8007e6e <__aeabi_l2d+0x16>

08007e58 <__aeabi_l2d>:
 8007e58:	ea50 0201 	orrs.w	r2, r0, r1
 8007e5c:	bf08      	it	eq
 8007e5e:	4770      	bxeq	lr
 8007e60:	b530      	push	{r4, r5, lr}
 8007e62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8007e66:	d502      	bpl.n	8007e6e <__aeabi_l2d+0x16>
 8007e68:	4240      	negs	r0, r0
 8007e6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007e6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007e72:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007e76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8007e7a:	f43f aed8 	beq.w	8007c2e <__adddf3+0xe6>
 8007e7e:	f04f 0203 	mov.w	r2, #3
 8007e82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007e86:	bf18      	it	ne
 8007e88:	3203      	addne	r2, #3
 8007e8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007e8e:	bf18      	it	ne
 8007e90:	3203      	addne	r2, #3
 8007e92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8007e96:	f1c2 0320 	rsb	r3, r2, #32
 8007e9a:	fa00 fc03 	lsl.w	ip, r0, r3
 8007e9e:	fa20 f002 	lsr.w	r0, r0, r2
 8007ea2:	fa01 fe03 	lsl.w	lr, r1, r3
 8007ea6:	ea40 000e 	orr.w	r0, r0, lr
 8007eaa:	fa21 f102 	lsr.w	r1, r1, r2
 8007eae:	4414      	add	r4, r2
 8007eb0:	e6bd      	b.n	8007c2e <__adddf3+0xe6>
 8007eb2:	bf00      	nop

08007eb4 <__aeabi_d2f>:
 8007eb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007eb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8007ebc:	bf24      	itt	cs
 8007ebe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8007ec2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8007ec6:	d90d      	bls.n	8007ee4 <__aeabi_d2f+0x30>
 8007ec8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007ecc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007ed0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007ed4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007ed8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8007edc:	bf08      	it	eq
 8007ede:	f020 0001 	biceq.w	r0, r0, #1
 8007ee2:	4770      	bx	lr
 8007ee4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007ee8:	d121      	bne.n	8007f2e <__aeabi_d2f+0x7a>
 8007eea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8007eee:	bfbc      	itt	lt
 8007ef0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8007ef4:	4770      	bxlt	lr
 8007ef6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007efa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8007efe:	f1c2 0218 	rsb	r2, r2, #24
 8007f02:	f1c2 0c20 	rsb	ip, r2, #32
 8007f06:	fa10 f30c 	lsls.w	r3, r0, ip
 8007f0a:	fa20 f002 	lsr.w	r0, r0, r2
 8007f0e:	bf18      	it	ne
 8007f10:	f040 0001 	orrne.w	r0, r0, #1
 8007f14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007f18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8007f1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8007f20:	ea40 000c 	orr.w	r0, r0, ip
 8007f24:	fa23 f302 	lsr.w	r3, r3, r2
 8007f28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007f2c:	e7cc      	b.n	8007ec8 <__aeabi_d2f+0x14>
 8007f2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8007f32:	d107      	bne.n	8007f44 <__aeabi_d2f+0x90>
 8007f34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8007f38:	bf1e      	ittt	ne
 8007f3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8007f3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8007f42:	4770      	bxne	lr
 8007f44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8007f48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007f4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop

08007f54 <__aeabi_frsub>:
 8007f54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8007f58:	e002      	b.n	8007f60 <__addsf3>
 8007f5a:	bf00      	nop

08007f5c <__aeabi_fsub>:
 8007f5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08007f60 <__addsf3>:
 8007f60:	0042      	lsls	r2, r0, #1
 8007f62:	bf1f      	itttt	ne
 8007f64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8007f68:	ea92 0f03 	teqne	r2, r3
 8007f6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8007f70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007f74:	d06a      	beq.n	800804c <__addsf3+0xec>
 8007f76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8007f7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8007f7e:	bfc1      	itttt	gt
 8007f80:	18d2      	addgt	r2, r2, r3
 8007f82:	4041      	eorgt	r1, r0
 8007f84:	4048      	eorgt	r0, r1
 8007f86:	4041      	eorgt	r1, r0
 8007f88:	bfb8      	it	lt
 8007f8a:	425b      	neglt	r3, r3
 8007f8c:	2b19      	cmp	r3, #25
 8007f8e:	bf88      	it	hi
 8007f90:	4770      	bxhi	lr
 8007f92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007f96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007f9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8007f9e:	bf18      	it	ne
 8007fa0:	4240      	negne	r0, r0
 8007fa2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007fa6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007faa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007fae:	bf18      	it	ne
 8007fb0:	4249      	negne	r1, r1
 8007fb2:	ea92 0f03 	teq	r2, r3
 8007fb6:	d03f      	beq.n	8008038 <__addsf3+0xd8>
 8007fb8:	f1a2 0201 	sub.w	r2, r2, #1
 8007fbc:	fa41 fc03 	asr.w	ip, r1, r3
 8007fc0:	eb10 000c 	adds.w	r0, r0, ip
 8007fc4:	f1c3 0320 	rsb	r3, r3, #32
 8007fc8:	fa01 f103 	lsl.w	r1, r1, r3
 8007fcc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007fd0:	d502      	bpl.n	8007fd8 <__addsf3+0x78>
 8007fd2:	4249      	negs	r1, r1
 8007fd4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8007fd8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007fdc:	d313      	bcc.n	8008006 <__addsf3+0xa6>
 8007fde:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007fe2:	d306      	bcc.n	8007ff2 <__addsf3+0x92>
 8007fe4:	0840      	lsrs	r0, r0, #1
 8007fe6:	ea4f 0131 	mov.w	r1, r1, rrx
 8007fea:	f102 0201 	add.w	r2, r2, #1
 8007fee:	2afe      	cmp	r2, #254	; 0xfe
 8007ff0:	d251      	bcs.n	8008096 <__addsf3+0x136>
 8007ff2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8007ff6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007ffa:	bf08      	it	eq
 8007ffc:	f020 0001 	biceq.w	r0, r0, #1
 8008000:	ea40 0003 	orr.w	r0, r0, r3
 8008004:	4770      	bx	lr
 8008006:	0049      	lsls	r1, r1, #1
 8008008:	eb40 0000 	adc.w	r0, r0, r0
 800800c:	3a01      	subs	r2, #1
 800800e:	bf28      	it	cs
 8008010:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8008014:	d2ed      	bcs.n	8007ff2 <__addsf3+0x92>
 8008016:	fab0 fc80 	clz	ip, r0
 800801a:	f1ac 0c08 	sub.w	ip, ip, #8
 800801e:	ebb2 020c 	subs.w	r2, r2, ip
 8008022:	fa00 f00c 	lsl.w	r0, r0, ip
 8008026:	bfaa      	itet	ge
 8008028:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800802c:	4252      	neglt	r2, r2
 800802e:	4318      	orrge	r0, r3
 8008030:	bfbc      	itt	lt
 8008032:	40d0      	lsrlt	r0, r2
 8008034:	4318      	orrlt	r0, r3
 8008036:	4770      	bx	lr
 8008038:	f092 0f00 	teq	r2, #0
 800803c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8008040:	bf06      	itte	eq
 8008042:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8008046:	3201      	addeq	r2, #1
 8008048:	3b01      	subne	r3, #1
 800804a:	e7b5      	b.n	8007fb8 <__addsf3+0x58>
 800804c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8008050:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8008054:	bf18      	it	ne
 8008056:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800805a:	d021      	beq.n	80080a0 <__addsf3+0x140>
 800805c:	ea92 0f03 	teq	r2, r3
 8008060:	d004      	beq.n	800806c <__addsf3+0x10c>
 8008062:	f092 0f00 	teq	r2, #0
 8008066:	bf08      	it	eq
 8008068:	4608      	moveq	r0, r1
 800806a:	4770      	bx	lr
 800806c:	ea90 0f01 	teq	r0, r1
 8008070:	bf1c      	itt	ne
 8008072:	2000      	movne	r0, #0
 8008074:	4770      	bxne	lr
 8008076:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800807a:	d104      	bne.n	8008086 <__addsf3+0x126>
 800807c:	0040      	lsls	r0, r0, #1
 800807e:	bf28      	it	cs
 8008080:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8008084:	4770      	bx	lr
 8008086:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800808a:	bf3c      	itt	cc
 800808c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8008090:	4770      	bxcc	lr
 8008092:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8008096:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800809a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800809e:	4770      	bx	lr
 80080a0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80080a4:	bf16      	itet	ne
 80080a6:	4608      	movne	r0, r1
 80080a8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80080ac:	4601      	movne	r1, r0
 80080ae:	0242      	lsls	r2, r0, #9
 80080b0:	bf06      	itte	eq
 80080b2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80080b6:	ea90 0f01 	teqeq	r0, r1
 80080ba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80080be:	4770      	bx	lr

080080c0 <__aeabi_ui2f>:
 80080c0:	f04f 0300 	mov.w	r3, #0
 80080c4:	e004      	b.n	80080d0 <__aeabi_i2f+0x8>
 80080c6:	bf00      	nop

080080c8 <__aeabi_i2f>:
 80080c8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80080cc:	bf48      	it	mi
 80080ce:	4240      	negmi	r0, r0
 80080d0:	ea5f 0c00 	movs.w	ip, r0
 80080d4:	bf08      	it	eq
 80080d6:	4770      	bxeq	lr
 80080d8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80080dc:	4601      	mov	r1, r0
 80080de:	f04f 0000 	mov.w	r0, #0
 80080e2:	e01c      	b.n	800811e <__aeabi_l2f+0x2a>

080080e4 <__aeabi_ul2f>:
 80080e4:	ea50 0201 	orrs.w	r2, r0, r1
 80080e8:	bf08      	it	eq
 80080ea:	4770      	bxeq	lr
 80080ec:	f04f 0300 	mov.w	r3, #0
 80080f0:	e00a      	b.n	8008108 <__aeabi_l2f+0x14>
 80080f2:	bf00      	nop

080080f4 <__aeabi_l2f>:
 80080f4:	ea50 0201 	orrs.w	r2, r0, r1
 80080f8:	bf08      	it	eq
 80080fa:	4770      	bxeq	lr
 80080fc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8008100:	d502      	bpl.n	8008108 <__aeabi_l2f+0x14>
 8008102:	4240      	negs	r0, r0
 8008104:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008108:	ea5f 0c01 	movs.w	ip, r1
 800810c:	bf02      	ittt	eq
 800810e:	4684      	moveq	ip, r0
 8008110:	4601      	moveq	r1, r0
 8008112:	2000      	moveq	r0, #0
 8008114:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8008118:	bf08      	it	eq
 800811a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800811e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8008122:	fabc f28c 	clz	r2, ip
 8008126:	3a08      	subs	r2, #8
 8008128:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800812c:	db10      	blt.n	8008150 <__aeabi_l2f+0x5c>
 800812e:	fa01 fc02 	lsl.w	ip, r1, r2
 8008132:	4463      	add	r3, ip
 8008134:	fa00 fc02 	lsl.w	ip, r0, r2
 8008138:	f1c2 0220 	rsb	r2, r2, #32
 800813c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008140:	fa20 f202 	lsr.w	r2, r0, r2
 8008144:	eb43 0002 	adc.w	r0, r3, r2
 8008148:	bf08      	it	eq
 800814a:	f020 0001 	biceq.w	r0, r0, #1
 800814e:	4770      	bx	lr
 8008150:	f102 0220 	add.w	r2, r2, #32
 8008154:	fa01 fc02 	lsl.w	ip, r1, r2
 8008158:	f1c2 0220 	rsb	r2, r2, #32
 800815c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8008160:	fa21 f202 	lsr.w	r2, r1, r2
 8008164:	eb43 0002 	adc.w	r0, r3, r2
 8008168:	bf08      	it	eq
 800816a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800816e:	4770      	bx	lr

08008170 <__aeabi_fmul>:
 8008170:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8008178:	bf1e      	ittt	ne
 800817a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800817e:	ea92 0f0c 	teqne	r2, ip
 8008182:	ea93 0f0c 	teqne	r3, ip
 8008186:	d06f      	beq.n	8008268 <__aeabi_fmul+0xf8>
 8008188:	441a      	add	r2, r3
 800818a:	ea80 0c01 	eor.w	ip, r0, r1
 800818e:	0240      	lsls	r0, r0, #9
 8008190:	bf18      	it	ne
 8008192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8008196:	d01e      	beq.n	80081d6 <__aeabi_fmul+0x66>
 8008198:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800819c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80081a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80081a4:	fba0 3101 	umull	r3, r1, r0, r1
 80081a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80081ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80081b0:	bf3e      	ittt	cc
 80081b2:	0049      	lslcc	r1, r1, #1
 80081b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80081b8:	005b      	lslcc	r3, r3, #1
 80081ba:	ea40 0001 	orr.w	r0, r0, r1
 80081be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80081c2:	2afd      	cmp	r2, #253	; 0xfd
 80081c4:	d81d      	bhi.n	8008202 <__aeabi_fmul+0x92>
 80081c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80081ce:	bf08      	it	eq
 80081d0:	f020 0001 	biceq.w	r0, r0, #1
 80081d4:	4770      	bx	lr
 80081d6:	f090 0f00 	teq	r0, #0
 80081da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80081de:	bf08      	it	eq
 80081e0:	0249      	lsleq	r1, r1, #9
 80081e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80081e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80081ea:	3a7f      	subs	r2, #127	; 0x7f
 80081ec:	bfc2      	ittt	gt
 80081ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80081f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80081f6:	4770      	bxgt	lr
 80081f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80081fc:	f04f 0300 	mov.w	r3, #0
 8008200:	3a01      	subs	r2, #1
 8008202:	dc5d      	bgt.n	80082c0 <__aeabi_fmul+0x150>
 8008204:	f112 0f19 	cmn.w	r2, #25
 8008208:	bfdc      	itt	le
 800820a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800820e:	4770      	bxle	lr
 8008210:	f1c2 0200 	rsb	r2, r2, #0
 8008214:	0041      	lsls	r1, r0, #1
 8008216:	fa21 f102 	lsr.w	r1, r1, r2
 800821a:	f1c2 0220 	rsb	r2, r2, #32
 800821e:	fa00 fc02 	lsl.w	ip, r0, r2
 8008222:	ea5f 0031 	movs.w	r0, r1, rrx
 8008226:	f140 0000 	adc.w	r0, r0, #0
 800822a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800822e:	bf08      	it	eq
 8008230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8008234:	4770      	bx	lr
 8008236:	f092 0f00 	teq	r2, #0
 800823a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800823e:	bf02      	ittt	eq
 8008240:	0040      	lsleq	r0, r0, #1
 8008242:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8008246:	3a01      	subeq	r2, #1
 8008248:	d0f9      	beq.n	800823e <__aeabi_fmul+0xce>
 800824a:	ea40 000c 	orr.w	r0, r0, ip
 800824e:	f093 0f00 	teq	r3, #0
 8008252:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008256:	bf02      	ittt	eq
 8008258:	0049      	lsleq	r1, r1, #1
 800825a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800825e:	3b01      	subeq	r3, #1
 8008260:	d0f9      	beq.n	8008256 <__aeabi_fmul+0xe6>
 8008262:	ea41 010c 	orr.w	r1, r1, ip
 8008266:	e78f      	b.n	8008188 <__aeabi_fmul+0x18>
 8008268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800826c:	ea92 0f0c 	teq	r2, ip
 8008270:	bf18      	it	ne
 8008272:	ea93 0f0c 	teqne	r3, ip
 8008276:	d00a      	beq.n	800828e <__aeabi_fmul+0x11e>
 8008278:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800827c:	bf18      	it	ne
 800827e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8008282:	d1d8      	bne.n	8008236 <__aeabi_fmul+0xc6>
 8008284:	ea80 0001 	eor.w	r0, r0, r1
 8008288:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800828c:	4770      	bx	lr
 800828e:	f090 0f00 	teq	r0, #0
 8008292:	bf17      	itett	ne
 8008294:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8008298:	4608      	moveq	r0, r1
 800829a:	f091 0f00 	teqne	r1, #0
 800829e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80082a2:	d014      	beq.n	80082ce <__aeabi_fmul+0x15e>
 80082a4:	ea92 0f0c 	teq	r2, ip
 80082a8:	d101      	bne.n	80082ae <__aeabi_fmul+0x13e>
 80082aa:	0242      	lsls	r2, r0, #9
 80082ac:	d10f      	bne.n	80082ce <__aeabi_fmul+0x15e>
 80082ae:	ea93 0f0c 	teq	r3, ip
 80082b2:	d103      	bne.n	80082bc <__aeabi_fmul+0x14c>
 80082b4:	024b      	lsls	r3, r1, #9
 80082b6:	bf18      	it	ne
 80082b8:	4608      	movne	r0, r1
 80082ba:	d108      	bne.n	80082ce <__aeabi_fmul+0x15e>
 80082bc:	ea80 0001 	eor.w	r0, r0, r1
 80082c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80082c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80082c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80082cc:	4770      	bx	lr
 80082ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80082d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80082d6:	4770      	bx	lr

080082d8 <__aeabi_fdiv>:
 80082d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80082dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80082e0:	bf1e      	ittt	ne
 80082e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80082e6:	ea92 0f0c 	teqne	r2, ip
 80082ea:	ea93 0f0c 	teqne	r3, ip
 80082ee:	d069      	beq.n	80083c4 <__aeabi_fdiv+0xec>
 80082f0:	eba2 0203 	sub.w	r2, r2, r3
 80082f4:	ea80 0c01 	eor.w	ip, r0, r1
 80082f8:	0249      	lsls	r1, r1, #9
 80082fa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80082fe:	d037      	beq.n	8008370 <__aeabi_fdiv+0x98>
 8008300:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008304:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8008308:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800830c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8008310:	428b      	cmp	r3, r1
 8008312:	bf38      	it	cc
 8008314:	005b      	lslcc	r3, r3, #1
 8008316:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800831a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800831e:	428b      	cmp	r3, r1
 8008320:	bf24      	itt	cs
 8008322:	1a5b      	subcs	r3, r3, r1
 8008324:	ea40 000c 	orrcs.w	r0, r0, ip
 8008328:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800832c:	bf24      	itt	cs
 800832e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8008332:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008336:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800833a:	bf24      	itt	cs
 800833c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8008340:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008344:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8008348:	bf24      	itt	cs
 800834a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800834e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008352:	011b      	lsls	r3, r3, #4
 8008354:	bf18      	it	ne
 8008356:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800835a:	d1e0      	bne.n	800831e <__aeabi_fdiv+0x46>
 800835c:	2afd      	cmp	r2, #253	; 0xfd
 800835e:	f63f af50 	bhi.w	8008202 <__aeabi_fmul+0x92>
 8008362:	428b      	cmp	r3, r1
 8008364:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8008368:	bf08      	it	eq
 800836a:	f020 0001 	biceq.w	r0, r0, #1
 800836e:	4770      	bx	lr
 8008370:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8008374:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8008378:	327f      	adds	r2, #127	; 0x7f
 800837a:	bfc2      	ittt	gt
 800837c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008380:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8008384:	4770      	bxgt	lr
 8008386:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800838a:	f04f 0300 	mov.w	r3, #0
 800838e:	3a01      	subs	r2, #1
 8008390:	e737      	b.n	8008202 <__aeabi_fmul+0x92>
 8008392:	f092 0f00 	teq	r2, #0
 8008396:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800839a:	bf02      	ittt	eq
 800839c:	0040      	lsleq	r0, r0, #1
 800839e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80083a2:	3a01      	subeq	r2, #1
 80083a4:	d0f9      	beq.n	800839a <__aeabi_fdiv+0xc2>
 80083a6:	ea40 000c 	orr.w	r0, r0, ip
 80083aa:	f093 0f00 	teq	r3, #0
 80083ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80083b2:	bf02      	ittt	eq
 80083b4:	0049      	lsleq	r1, r1, #1
 80083b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80083ba:	3b01      	subeq	r3, #1
 80083bc:	d0f9      	beq.n	80083b2 <__aeabi_fdiv+0xda>
 80083be:	ea41 010c 	orr.w	r1, r1, ip
 80083c2:	e795      	b.n	80082f0 <__aeabi_fdiv+0x18>
 80083c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80083c8:	ea92 0f0c 	teq	r2, ip
 80083cc:	d108      	bne.n	80083e0 <__aeabi_fdiv+0x108>
 80083ce:	0242      	lsls	r2, r0, #9
 80083d0:	f47f af7d 	bne.w	80082ce <__aeabi_fmul+0x15e>
 80083d4:	ea93 0f0c 	teq	r3, ip
 80083d8:	f47f af70 	bne.w	80082bc <__aeabi_fmul+0x14c>
 80083dc:	4608      	mov	r0, r1
 80083de:	e776      	b.n	80082ce <__aeabi_fmul+0x15e>
 80083e0:	ea93 0f0c 	teq	r3, ip
 80083e4:	d104      	bne.n	80083f0 <__aeabi_fdiv+0x118>
 80083e6:	024b      	lsls	r3, r1, #9
 80083e8:	f43f af4c 	beq.w	8008284 <__aeabi_fmul+0x114>
 80083ec:	4608      	mov	r0, r1
 80083ee:	e76e      	b.n	80082ce <__aeabi_fmul+0x15e>
 80083f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80083f4:	bf18      	it	ne
 80083f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80083fa:	d1ca      	bne.n	8008392 <__aeabi_fdiv+0xba>
 80083fc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8008400:	f47f af5c 	bne.w	80082bc <__aeabi_fmul+0x14c>
 8008404:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8008408:	f47f af3c 	bne.w	8008284 <__aeabi_fmul+0x114>
 800840c:	e75f      	b.n	80082ce <__aeabi_fmul+0x15e>
 800840e:	bf00      	nop

08008410 <__gesf2>:
 8008410:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008414:	e006      	b.n	8008424 <__cmpsf2+0x4>
 8008416:	bf00      	nop

08008418 <__lesf2>:
 8008418:	f04f 0c01 	mov.w	ip, #1
 800841c:	e002      	b.n	8008424 <__cmpsf2+0x4>
 800841e:	bf00      	nop

08008420 <__cmpsf2>:
 8008420:	f04f 0c01 	mov.w	ip, #1
 8008424:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008428:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800842c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8008430:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8008434:	bf18      	it	ne
 8008436:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800843a:	d011      	beq.n	8008460 <__cmpsf2+0x40>
 800843c:	b001      	add	sp, #4
 800843e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8008442:	bf18      	it	ne
 8008444:	ea90 0f01 	teqne	r0, r1
 8008448:	bf58      	it	pl
 800844a:	ebb2 0003 	subspl.w	r0, r2, r3
 800844e:	bf88      	it	hi
 8008450:	17c8      	asrhi	r0, r1, #31
 8008452:	bf38      	it	cc
 8008454:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8008458:	bf18      	it	ne
 800845a:	f040 0001 	orrne.w	r0, r0, #1
 800845e:	4770      	bx	lr
 8008460:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8008464:	d102      	bne.n	800846c <__cmpsf2+0x4c>
 8008466:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800846a:	d105      	bne.n	8008478 <__cmpsf2+0x58>
 800846c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8008470:	d1e4      	bne.n	800843c <__cmpsf2+0x1c>
 8008472:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8008476:	d0e1      	beq.n	800843c <__cmpsf2+0x1c>
 8008478:	f85d 0b04 	ldr.w	r0, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop

08008480 <__aeabi_cfrcmple>:
 8008480:	4684      	mov	ip, r0
 8008482:	4608      	mov	r0, r1
 8008484:	4661      	mov	r1, ip
 8008486:	e7ff      	b.n	8008488 <__aeabi_cfcmpeq>

08008488 <__aeabi_cfcmpeq>:
 8008488:	b50f      	push	{r0, r1, r2, r3, lr}
 800848a:	f7ff ffc9 	bl	8008420 <__cmpsf2>
 800848e:	2800      	cmp	r0, #0
 8008490:	bf48      	it	mi
 8008492:	f110 0f00 	cmnmi.w	r0, #0
 8008496:	bd0f      	pop	{r0, r1, r2, r3, pc}

08008498 <__aeabi_fcmpeq>:
 8008498:	f84d ed08 	str.w	lr, [sp, #-8]!
 800849c:	f7ff fff4 	bl	8008488 <__aeabi_cfcmpeq>
 80084a0:	bf0c      	ite	eq
 80084a2:	2001      	moveq	r0, #1
 80084a4:	2000      	movne	r0, #0
 80084a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80084aa:	bf00      	nop

080084ac <__aeabi_fcmplt>:
 80084ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80084b0:	f7ff ffea 	bl	8008488 <__aeabi_cfcmpeq>
 80084b4:	bf34      	ite	cc
 80084b6:	2001      	movcc	r0, #1
 80084b8:	2000      	movcs	r0, #0
 80084ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80084be:	bf00      	nop

080084c0 <__aeabi_fcmple>:
 80084c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80084c4:	f7ff ffe0 	bl	8008488 <__aeabi_cfcmpeq>
 80084c8:	bf94      	ite	ls
 80084ca:	2001      	movls	r0, #1
 80084cc:	2000      	movhi	r0, #0
 80084ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80084d2:	bf00      	nop

080084d4 <__aeabi_fcmpge>:
 80084d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80084d8:	f7ff ffd2 	bl	8008480 <__aeabi_cfrcmple>
 80084dc:	bf94      	ite	ls
 80084de:	2001      	movls	r0, #1
 80084e0:	2000      	movhi	r0, #0
 80084e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80084e6:	bf00      	nop

080084e8 <__aeabi_fcmpgt>:
 80084e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80084ec:	f7ff ffc8 	bl	8008480 <__aeabi_cfrcmple>
 80084f0:	bf34      	ite	cc
 80084f2:	2001      	movcc	r0, #1
 80084f4:	2000      	movcs	r0, #0
 80084f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80084fa:	bf00      	nop

080084fc <__aeabi_f2iz>:
 80084fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8008500:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8008504:	d30f      	bcc.n	8008526 <__aeabi_f2iz+0x2a>
 8008506:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800850a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800850e:	d90d      	bls.n	800852c <__aeabi_f2iz+0x30>
 8008510:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8008514:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008518:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800851c:	fa23 f002 	lsr.w	r0, r3, r2
 8008520:	bf18      	it	ne
 8008522:	4240      	negne	r0, r0
 8008524:	4770      	bx	lr
 8008526:	f04f 0000 	mov.w	r0, #0
 800852a:	4770      	bx	lr
 800852c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8008530:	d101      	bne.n	8008536 <__aeabi_f2iz+0x3a>
 8008532:	0242      	lsls	r2, r0, #9
 8008534:	d105      	bne.n	8008542 <__aeabi_f2iz+0x46>
 8008536:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800853a:	bf08      	it	eq
 800853c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008540:	4770      	bx	lr
 8008542:	f04f 0000 	mov.w	r0, #0
 8008546:	4770      	bx	lr

08008548 <__aeabi_uldivmod>:
 8008548:	b953      	cbnz	r3, 8008560 <__aeabi_uldivmod+0x18>
 800854a:	b94a      	cbnz	r2, 8008560 <__aeabi_uldivmod+0x18>
 800854c:	2900      	cmp	r1, #0
 800854e:	bf08      	it	eq
 8008550:	2800      	cmpeq	r0, #0
 8008552:	bf1c      	itt	ne
 8008554:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008558:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800855c:	f000 b80c 	b.w	8008578 <__aeabi_idiv0>
 8008560:	f1ad 0c08 	sub.w	ip, sp, #8
 8008564:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008568:	f00d fe16 	bl	8016198 <__udivmoddi4>
 800856c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008574:	b004      	add	sp, #16
 8008576:	4770      	bx	lr

08008578 <__aeabi_idiv0>:
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop

0800857c <Reset_Handler>:
 800857c:	2100      	movs	r1, #0
 800857e:	e003      	b.n	8008588 <DataInit>

08008580 <CopyData>:
 8008580:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <Zerobss+0x10>)
 8008582:	585b      	ldr	r3, [r3, r1]
 8008584:	5043      	str	r3, [r0, r1]
 8008586:	3104      	adds	r1, #4

08008588 <DataInit>:
 8008588:	4809      	ldr	r0, [pc, #36]	; (80085b0 <Zerobss+0x14>)
 800858a:	4b0a      	ldr	r3, [pc, #40]	; (80085b4 <Zerobss+0x18>)
 800858c:	1842      	adds	r2, r0, r1
 800858e:	429a      	cmp	r2, r3
 8008590:	d3f6      	bcc.n	8008580 <CopyData>
 8008592:	4a09      	ldr	r2, [pc, #36]	; (80085b8 <Zerobss+0x1c>)
 8008594:	e002      	b.n	800859c <Zerobss>

08008596 <FillZerobss>:
 8008596:	2300      	movs	r3, #0
 8008598:	f842 3b04 	str.w	r3, [r2], #4

0800859c <Zerobss>:
 800859c:	4b07      	ldr	r3, [pc, #28]	; (80085bc <Zerobss+0x20>)
 800859e:	429a      	cmp	r2, r3
 80085a0:	d3f9      	bcc.n	8008596 <FillZerobss>
 80085a2:	f00b fe79 	bl	8014298 <SystemInit>
 80085a6:	f000 f97d 	bl	80088a4 <main>
 80085aa:	4770      	bx	lr
 80085ac:	080187fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 80085b0:	20000000 	andcs	r0, r0, r0
 80085b4:	200000f8 	strdcs	r0, [r0], -r8
 80085b8:	200000f8 	strdcs	r0, [r0], -r8
 80085bc:	2000e3b4 			; <UNDEFINED> instruction: 0x2000e3b4

080085c0 <ADC0_1_IRQHandler>:
 80085c0:	e7fe      	b.n	80085c0 <ADC0_1_IRQHandler>

080085c2 <memcmp>:
 80085c2:	b510      	push	{r4, lr}
 80085c4:	3901      	subs	r1, #1
 80085c6:	4402      	add	r2, r0
 80085c8:	4290      	cmp	r0, r2
 80085ca:	d101      	bne.n	80085d0 <memcmp+0xe>
 80085cc:	2000      	movs	r0, #0
 80085ce:	e005      	b.n	80085dc <memcmp+0x1a>
 80085d0:	7803      	ldrb	r3, [r0, #0]
 80085d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80085d6:	42a3      	cmp	r3, r4
 80085d8:	d001      	beq.n	80085de <memcmp+0x1c>
 80085da:	1b18      	subs	r0, r3, r4
 80085dc:	bd10      	pop	{r4, pc}
 80085de:	3001      	adds	r0, #1
 80085e0:	e7f2      	b.n	80085c8 <memcmp+0x6>

080085e2 <DisplayHandler::~DisplayHandler()>:
 80085e2:	4770      	bx	lr

080085e4 <ArtNetReboot::~ArtNetReboot()>:
 80085e4:	4770      	bx	lr

080085e6 <DisplayUdfHandler::~DisplayUdfHandler()>:
 80085e6:	4770      	bx	lr

080085e8 <DisplayUdfHandler::ShowLongName(char const*)>:
 80085e8:	4770      	bx	lr

080085ea <dmxconfigudp::atoi(char const*, unsigned char)>:
 80085ea:	b530      	push	{r4, r5, lr}
 80085ec:	1e42      	subs	r2, r0, #1
 80085ee:	250a      	movs	r5, #10
 80085f0:	2000      	movs	r0, #0
 80085f2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80085f6:	3b30      	subs	r3, #48	; 0x30
 80085f8:	b2dc      	uxtb	r4, r3
 80085fa:	2c09      	cmp	r4, #9
 80085fc:	d805      	bhi.n	800860a <dmxconfigudp::atoi(char const*, unsigned char)+0x20>
 80085fe:	3901      	subs	r1, #1
 8008600:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8008604:	fb05 3000 	mla	r0, r5, r0, r3
 8008608:	d1f3      	bne.n	80085f2 <dmxconfigudp::atoi(char const*, unsigned char)+0x8>
 800860a:	bd30      	pop	{r4, r5, pc}

0800860c <ArtNetReboot::Run()>:
 800860c:	b510      	push	{r4, lr}
 800860e:	4c07      	ldr	r4, [pc, #28]	; (800862c <ArtNetReboot::Run()+0x20>)
 8008610:	6820      	ldr	r0, [r4, #0]
 8008612:	f000 fe03 	bl	800921c <ArtNetNode::Stop()>
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	6898      	ldr	r0, [r3, #8]
 800861a:	b128      	cbz	r0, 8008628 <ArtNetReboot::Run()+0x1c>
 800861c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008620:	6803      	ldr	r3, [r0, #0]
 8008622:	2101      	movs	r1, #1
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	4718      	bx	r3
 8008628:	bd10      	pop	{r4, pc}
 800862a:	bf00      	nop
 800862c:	20000d08 	andcs	r0, r0, r8, lsl #26

08008630 <ArtNetReboot::~ArtNetReboot()>:
 8008630:	b510      	push	{r4, lr}
 8008632:	4604      	mov	r4, r0
 8008634:	f00b f890 	bl	8013758 <operator delete(void*)>
 8008638:	4620      	mov	r0, r4
 800863a:	bd10      	pop	{r4, pc}

0800863c <DisplayHandler::~DisplayHandler()>:
 800863c:	b510      	push	{r4, lr}
 800863e:	4604      	mov	r4, r0
 8008640:	f00b f88a 	bl	8013758 <operator delete(void*)>
 8008644:	4620      	mov	r0, r4
 8008646:	bd10      	pop	{r4, pc}

08008648 <DisplayUdfHandler::~DisplayUdfHandler()>:
 8008648:	b510      	push	{r4, lr}
 800864a:	4604      	mov	r4, r0
 800864c:	f00b f884 	bl	8013758 <operator delete(void*)>
 8008650:	4620      	mov	r0, r4
 8008652:	bd10      	pop	{r4, pc}

08008654 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)>:
 8008654:	4b02      	ldr	r3, [pc, #8]	; (8008660 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0xc>)
 8008656:	6819      	ldr	r1, [r3, #0]
 8008658:	4b02      	ldr	r3, [pc, #8]	; (8008664 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0x10>)
 800865a:	6818      	ldr	r0, [r3, #0]
 800865c:	f00a b832 	b.w	80126c4 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8008660:	20000d08 	andcs	r0, r0, r8, lsl #26
 8008664:	2000a624 	andcs	sl, r0, r4, lsr #12

08008668 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)>:
 8008668:	4b02      	ldr	r3, [pc, #8]	; (8008674 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0xc>)
 800866a:	6819      	ldr	r1, [r3, #0]
 800866c:	4b02      	ldr	r3, [pc, #8]	; (8008678 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0x10>)
 800866e:	6818      	ldr	r0, [r3, #0]
 8008670:	f00a b828 	b.w	80126c4 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8008674:	20000d08 	andcs	r0, r0, r8, lsl #26
 8008678:	2000a624 	andcs	sl, r0, r4, lsr #12

0800867c <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)>:
 800867c:	4b02      	ldr	r3, [pc, #8]	; (8008688 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0xc>)
 800867e:	6819      	ldr	r1, [r3, #0]
 8008680:	4b02      	ldr	r3, [pc, #8]	; (800868c <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0x10>)
 8008682:	6818      	ldr	r0, [r3, #0]
 8008684:	f00a b81e 	b.w	80126c4 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8008688:	20000d08 	andcs	r0, r0, r8, lsl #26
 800868c:	2000a624 	andcs	sl, r0, r4, lsr #12

08008690 <DisplayUdfHandler::ShowNetSwitch(unsigned char)>:
 8008690:	4b02      	ldr	r3, [pc, #8]	; (800869c <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0xc>)
 8008692:	6819      	ldr	r1, [r3, #0]
 8008694:	4b02      	ldr	r3, [pc, #8]	; (80086a0 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0x10>)
 8008696:	6818      	ldr	r0, [r3, #0]
 8008698:	f00a b814 	b.w	80126c4 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 800869c:	20000d08 	andcs	r0, r0, r8, lsl #26
 80086a0:	2000a624 	andcs	sl, r0, r4, lsr #12

080086a4 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)>:
 80086a4:	4b02      	ldr	r3, [pc, #8]	; (80086b0 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0xc>)
 80086a6:	6819      	ldr	r1, [r3, #0]
 80086a8:	4b02      	ldr	r3, [pc, #8]	; (80086b4 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0x10>)
 80086aa:	6818      	ldr	r0, [r3, #0]
 80086ac:	f00a b80a 	b.w	80126c4 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80086b0:	20000d08 	andcs	r0, r0, r8, lsl #26
 80086b4:	2000a624 	andcs	sl, r0, r4, lsr #12

080086b8 <DisplayUdfHandler::ShowShortName(char const*)>:
 80086b8:	4b02      	ldr	r3, [pc, #8]	; (80086c4 <DisplayUdfHandler::ShowShortName(char const*)+0xc>)
 80086ba:	6819      	ldr	r1, [r3, #0]
 80086bc:	4b02      	ldr	r3, [pc, #8]	; (80086c8 <DisplayUdfHandler::ShowShortName(char const*)+0x10>)
 80086be:	6818      	ldr	r0, [r3, #0]
 80086c0:	f009 bfdd 	b.w	801267e <DisplayUdf::ShowNodeName(ArtNetNode*)>
 80086c4:	20000d08 	andcs	r0, r0, r8, lsl #26
 80086c8:	2000a624 	andcs	sl, r0, r4, lsr #12

080086cc <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 80086cc:	b110      	cbz	r0, 80086d4 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 80086ce:	6803      	ldr	r3, [r0, #0]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	4718      	bx	r3
 80086d4:	4770      	bx	lr

080086d6 <Display::PutChar(int) [clone .isra.0]>:
 80086d6:	b110      	cbz	r0, 80086de <Display::PutChar(int) [clone .isra.0]+0x8>
 80086d8:	6803      	ldr	r3, [r0, #0]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	4718      	bx	r3
 80086de:	4770      	bx	lr

080086e0 <DisplayHandler::Print(unsigned int)>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	7903      	ldrb	r3, [r0, #4]
 80086e4:	b1f3      	cbz	r3, 8008724 <DisplayHandler::Print(unsigned int)+0x44>
 80086e6:	2904      	cmp	r1, #4
 80086e8:	bf98      	it	ls
 80086ea:	4b0f      	ldrls	r3, [pc, #60]	; (8008728 <DisplayHandler::Print(unsigned int)+0x48>)
 80086ec:	4d0f      	ldr	r5, [pc, #60]	; (800872c <DisplayHandler::Print(unsigned int)+0x4c>)
 80086ee:	bf98      	it	ls
 80086f0:	5c5c      	ldrbls	r4, [r3, r1]
 80086f2:	682b      	ldr	r3, [r5, #0]
 80086f4:	bf88      	it	hi
 80086f6:	2455      	movhi	r4, #85	; 0x55
 80086f8:	6998      	ldr	r0, [r3, #24]
 80086fa:	b178      	cbz	r0, 800871c <DisplayHandler::Print(unsigned int)+0x3c>
 80086fc:	7901      	ldrb	r1, [r0, #4]
 80086fe:	3901      	subs	r1, #1
 8008700:	b2c9      	uxtb	r1, r1
 8008702:	b168      	cbz	r0, 8008720 <DisplayHandler::Print(unsigned int)+0x40>
 8008704:	7942      	ldrb	r2, [r0, #5]
 8008706:	3a01      	subs	r2, #1
 8008708:	b2d2      	uxtb	r2, r2
 800870a:	f7ff ffdf 	bl	80086cc <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 800870e:	682b      	ldr	r3, [r5, #0]
 8008710:	4621      	mov	r1, r4
 8008712:	6998      	ldr	r0, [r3, #24]
 8008714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008718:	f7ff bfdd 	b.w	80086d6 <Display::PutChar(int) [clone .isra.0]>
 800871c:	4601      	mov	r1, r0
 800871e:	e7ee      	b.n	80086fe <DisplayHandler::Print(unsigned int)+0x1e>
 8008720:	4602      	mov	r2, r0
 8008722:	e7f0      	b.n	8008706 <DisplayHandler::Print(unsigned int)+0x26>
 8008724:	bd38      	pop	{r3, r4, r5, pc}
 8008726:	bf00      	nop
 8008728:	08016580 	stmdaeq	r1, {r7, r8, sl, sp, lr}
 800872c:	2000a62c 	andcs	sl, r0, ip, lsr #12

08008730 <Display::SetSleep(bool)>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4604      	mov	r4, r0
 8008734:	6980      	ldr	r0, [r0, #24]
 8008736:	460d      	mov	r5, r1
 8008738:	b138      	cbz	r0, 800874a <Display::SetSleep(bool)+0x1a>
 800873a:	6803      	ldr	r3, [r0, #0]
 800873c:	7421      	strb	r1, [r4, #16]
 800873e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008740:	4798      	blx	r3
 8008742:	b915      	cbnz	r5, 800874a <Display::SetSleep(bool)+0x1a>
 8008744:	4b01      	ldr	r3, [pc, #4]	; (800874c <Display::SetSleep(bool)+0x1c>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6063      	str	r3, [r4, #4]
 800874a:	bd38      	pop	{r3, r4, r5, pc}
 800874c:	2000a734 	andcs	sl, r0, r4, lsr r7

08008750 <Display::TextStatus(char const*)>:
 8008750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008754:	4604      	mov	r4, r0
 8008756:	6980      	ldr	r0, [r0, #24]
 8008758:	460d      	mov	r5, r1
 800875a:	b360      	cbz	r0, 80087b6 <Display::TextStatus(char const*)+0x66>
 800875c:	7947      	ldrb	r7, [r0, #5]
 800875e:	2100      	movs	r1, #0
 8008760:	1e7e      	subs	r6, r7, #1
 8008762:	b2f6      	uxtb	r6, r6
 8008764:	4632      	mov	r2, r6
 8008766:	f890 9004 	ldrb.w	r9, [r0, #4]
 800876a:	f04f 0800 	mov.w	r8, #0
 800876e:	f7ff ffad 	bl	80086cc <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8008772:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008776:	45c1      	cmp	r9, r8
 8008778:	69a0      	ldr	r0, [r4, #24]
 800877a:	d816      	bhi.n	80087aa <Display::TextStatus(char const*)+0x5a>
 800877c:	4632      	mov	r2, r6
 800877e:	2100      	movs	r1, #0
 8008780:	f7ff ffa4 	bl	80086cc <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8008784:	69a0      	ldr	r0, [r4, #24]
 8008786:	b1b0      	cbz	r0, 80087b6 <Display::TextStatus(char const*)+0x66>
 8008788:	2300      	movs	r3, #0
 800878a:	7901      	ldrb	r1, [r0, #4]
 800878c:	5cea      	ldrb	r2, [r5, r3]
 800878e:	b11a      	cbz	r2, 8008798 <Display::TextStatus(char const*)+0x48>
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	4299      	cmp	r1, r3
 8008794:	4613      	mov	r3, r2
 8008796:	dcf9      	bgt.n	800878c <Display::TextStatus(char const*)+0x3c>
 8008798:	6802      	ldr	r2, [r0, #0]
 800879a:	4639      	mov	r1, r7
 800879c:	69d4      	ldr	r4, [r2, #28]
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	462a      	mov	r2, r5
 80087a2:	46a4      	mov	ip, r4
 80087a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a8:	4760      	bx	ip
 80087aa:	2120      	movs	r1, #32
 80087ac:	f7ff ff93 	bl	80086d6 <Display::PutChar(int) [clone .isra.0]>
 80087b0:	f108 0801 	add.w	r8, r8, #1
 80087b4:	e7df      	b.n	8008776 <Display::TextStatus(char const*)+0x26>
 80087b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080087ba <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 80087ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087bc:	4605      	mov	r5, r0
 80087be:	461e      	mov	r6, r3
 80087c0:	460f      	mov	r7, r1
 80087c2:	4614      	mov	r4, r2
 80087c4:	f7ff ffc4 	bl	8008750 <Display::TextStatus(char const*)>
 80087c8:	7c6b      	ldrb	r3, [r5, #17]
 80087ca:	b19b      	cbz	r3, 80087f4 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3a>
 80087cc:	43e2      	mvns	r2, r4
 80087ce:	2312      	movs	r3, #18
 80087d0:	7a28      	ldrb	r0, [r5, #8]
 80087d2:	f88d 3004 	strb.w	r3, [sp, #4]
 80087d6:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80087da:	f88d 3005 	strb.w	r3, [sp, #5]
 80087de:	f88d 2006 	strb.w	r2, [sp, #6]
 80087e2:	f00c fcbf 	bl	8015164 <gd32_i2c_set_address(unsigned char)>
 80087e6:	68e8      	ldr	r0, [r5, #12]
 80087e8:	f00c fcb4 	bl	8015154 <gd32_i2c_set_baudrate(unsigned int)>
 80087ec:	2103      	movs	r1, #3
 80087ee:	a801      	add	r0, sp, #4
 80087f0:	f00c fcbe 	bl	8015170 <gd32_i2c_write(char const*, unsigned int)>
 80087f4:	1c73      	adds	r3, r6, #1
 80087f6:	d006      	beq.n	8008806 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4c>
 80087f8:	4639      	mov	r1, r7
 80087fa:	4630      	mov	r0, r6
 80087fc:	b003      	add	sp, #12
 80087fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008802:	f00a be45 	b.w	8013490 <console_status>
 8008806:	b003      	add	sp, #12
 8008808:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800880c <display::timeout::gpio_init()>:
 800880c:	b510      	push	{r4, lr}
 800880e:	f240 6003 	movw	r0, #1539	; 0x603
 8008812:	f00b ff77 	bl	8014704 <rcu_periph_clock_enable>
 8008816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800881a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800881e:	2203      	movs	r2, #3
 8008820:	2148      	movs	r1, #72	; 0x48
 8008822:	4801      	ldr	r0, [pc, #4]	; (8008828 <display::timeout::gpio_init()+0x1c>)
 8008824:	f00b bed6 	b.w	80145d4 <gpio_init>
 8008828:	40010c00 	andmi	r0, r1, r0, lsl #24

0800882c <display::timeout::gpio_renew()>:
 800882c:	4b03      	ldr	r3, [pc, #12]	; (800883c <display::timeout::gpio_renew()+0x10>)
 800882e:	f8d3 0c08 	ldr.w	r0, [r3, #3080]	; 0xc08
 8008832:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 8008836:	f3c0 3080 	ubfx	r0, r0, #14, #1
 800883a:	4770      	bx	lr
 800883c:	40010000 	andmi	r0, r1, r0

08008840 <RDMDevice::Init()>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	f890 2071 	ldrb.w	r2, [r0, #113]	; 0x71
 8008846:	2301      	movs	r3, #1
 8008848:	2a20      	cmp	r2, #32
 800884a:	bf28      	it	cs
 800884c:	2220      	movcs	r2, #32
 800884e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8008852:	4604      	mov	r4, r0
 8008854:	4613      	mov	r3, r2
 8008856:	f100 0151 	add.w	r1, r0, #81	; 0x51
 800885a:	f100 050a 	add.w	r5, r0, #10
 800885e:	3b01      	subs	r3, #1
 8008860:	d215      	bcs.n	800888e <RDMDevice::Init()+0x4e>
 8008862:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008864:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
 8008868:	b118      	cbz	r0, 8008872 <RDMDevice::Init()+0x32>
 800886a:	6803      	ldr	r3, [r0, #0]
 800886c:	4629      	mov	r1, r5
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	4798      	blx	r3
 8008872:	4629      	mov	r1, r5
 8008874:	f06f 0509 	mvn.w	r5, #9
 8008878:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
 800887c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8008880:	1b2d      	subs	r5, r5, r4
 8008882:	186a      	adds	r2, r5, r1
 8008884:	4290      	cmp	r0, r2
 8008886:	d807      	bhi.n	8008898 <RDMDevice::Init()+0x58>
 8008888:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 800888c:	bd38      	pop	{r3, r4, r5, pc}
 800888e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8008892:	f801 0c48 	strb.w	r0, [r1, #-72]
 8008896:	e7e2      	b.n	800885e <RDMDevice::Init()+0x1e>
 8008898:	f811 2b01 	ldrb.w	r2, [r1], #1
 800889c:	4413      	add	r3, r2
 800889e:	b29b      	uxth	r3, r3
 80088a0:	e7ef      	b.n	8008882 <RDMDevice::Init()+0x42>
	...

080088a4 <main>:
 80088a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088a8:	2501      	movs	r5, #1
 80088aa:	f5ad 5daf 	sub.w	sp, sp, #5600	; 0x15e0
 80088ae:	b087      	sub	sp, #28
 80088b0:	a80f      	add	r0, sp, #60	; 0x3c
 80088b2:	f00a fea1 	bl	80135f8 <Hardware::Hardware()>
 80088b6:	a876      	add	r0, sp, #472	; 0x1d8
 80088b8:	f008 fa6c 	bl	8010d94 <Network::Network()>
 80088bc:	a81b      	add	r0, sp, #108	; 0x6c
 80088be:	f00a fe45 	bl	801354c <LedBlink::LedBlink()>
 80088c2:	a83d      	add	r0, sp, #244	; 0xf4
 80088c4:	f009 fbb4 	bl	8012030 <DisplayUdf::DisplayUdf()>
 80088c8:	4ab2      	ldr	r2, [pc, #712]	; (8008b94 <main+0x2f0>)
 80088ca:	4bb3      	ldr	r3, [pc, #716]	; (8008b98 <main+0x2f4>)
 80088cc:	49b3      	ldr	r1, [pc, #716]	; (8008b9c <main+0x2f8>)
 80088ce:	a804      	add	r0, sp, #16
 80088d0:	f00a fdf6 	bl	80134c0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 80088d4:	a805      	add	r0, sp, #20
 80088d6:	f007 f935 	bl	800fb44 <FlashRom::FlashRom()>
 80088da:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8008ba0 <main+0x2fc>
 80088de:	a806      	add	r0, sp, #24
 80088e0:	f006 fd80 	bl	800f3e4 <SpiFlashStore::SpiFlashStore()>
 80088e4:	49af      	ldr	r1, [pc, #700]	; (8008ba4 <main+0x300>)
 80088e6:	a804      	add	r0, sp, #16
 80088e8:	f00a fe22 	bl	8013530 <FirmwareVersion::Print(char const*)>
 80088ec:	2004      	movs	r0, #4
 80088ee:	f8c8 5010 	str.w	r5, [r8, #16]
 80088f2:	f00a ff35 	bl	8013760 <operator new(unsigned int)>
 80088f6:	4bac      	ldr	r3, [pc, #688]	; (8008ba8 <main+0x304>)
 80088f8:	2400      	movs	r4, #0
 80088fa:	6003      	str	r3, [r0, #0]
 80088fc:	900f      	str	r0, [sp, #60]	; 0x3c
 80088fe:	2008      	movs	r0, #8
 8008900:	ab0f      	add	r3, sp, #60	; 0x3c
 8008902:	f00a ff2d 	bl	8013760 <operator new(unsigned int)>
 8008906:	4ba9      	ldr	r3, [pc, #676]	; (8008bac <main+0x308>)
 8008908:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800890c:	6003      	str	r3, [r0, #0]
 800890e:	4ba8      	ldr	r3, [pc, #672]	; (8008bb0 <main+0x30c>)
 8008910:	49a8      	ldr	r1, [pc, #672]	; (8008bb4 <main+0x310>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3b00      	subs	r3, #0
 8008916:	bf18      	it	ne
 8008918:	2301      	movne	r3, #1
 800891a:	7103      	strb	r3, [r0, #4]
 800891c:	901d      	str	r0, [sp, #116]	; 0x74
 800891e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008920:	a83d      	add	r0, sp, #244	; 0xf4
 8008922:	2303      	movs	r3, #3
 8008924:	f7ff ff49 	bl	80087ba <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008928:	a811      	add	r0, sp, #68	; 0x44
 800892a:	f007 f86d 	bl	800fa08 <StoreNetwork::StoreNetwork()>
 800892e:	ab12      	add	r3, sp, #72	; 0x48
 8008930:	a911      	add	r1, sp, #68	; 0x44
 8008932:	a876      	add	r0, sp, #472	; 0x1d8
 8008934:	93a3      	str	r3, [sp, #652]	; 0x28c
 8008936:	f008 fa85 	bl	8010e44 <Network::Init(NetworkParamsStore*)>
 800893a:	a876      	add	r0, sp, #472	; 0x1d8
 800893c:	f008 fc5c 	bl	80111f8 <Network::Print()>
 8008940:	2303      	movs	r3, #3
 8008942:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008946:	499c      	ldr	r1, [pc, #624]	; (8008bb8 <main+0x314>)
 8008948:	a83d      	add	r0, sp, #244	; 0xf4
 800894a:	f7ff ff36 	bl	80087ba <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 800894e:	a807      	add	r0, sp, #28
 8008950:	f007 fe62 	bl	8010618 <MDNS::MDNS()>
 8008954:	a807      	add	r0, sp, #28
 8008956:	f007 ff1f 	bl	8010798 <MDNS::Start()>
 800895a:	f642 1305 	movw	r3, #10501	; 0x2905
 800895e:	4621      	mov	r1, r4
 8008960:	4a96      	ldr	r2, [pc, #600]	; (8008bbc <main+0x318>)
 8008962:	e9cd 4400 	strd	r4, r4, [sp]
 8008966:	a807      	add	r0, sp, #28
 8008968:	f008 f880 	bl	8010a6c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 800896c:	4b94      	ldr	r3, [pc, #592]	; (8008bc0 <main+0x31c>)
 800896e:	4621      	mov	r1, r4
 8008970:	4a94      	ldr	r2, [pc, #592]	; (8008bc4 <main+0x320>)
 8008972:	e9cd 5300 	strd	r5, r3, [sp]
 8008976:	a807      	add	r0, sp, #28
 8008978:	2350      	movs	r3, #80	; 0x50
 800897a:	f008 f877 	bl	8010a6c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 800897e:	a807      	add	r0, sp, #28
 8008980:	f008 f9ba 	bl	8010cf8 <MDNS::Print()>
 8008984:	2303      	movs	r3, #3
 8008986:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 800898a:	498f      	ldr	r1, [pc, #572]	; (8008bc8 <main+0x324>)
 800898c:	a83d      	add	r0, sp, #244	; 0xf4
 800898e:	f7ff ff14 	bl	80087ba <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008992:	a813      	add	r0, sp, #76	; 0x4c
 8008994:	f006 ff20 	bl	800f7d8 <StoreArtNet::StoreArtNet()>
 8008998:	a913      	add	r1, sp, #76	; 0x4c
 800899a:	a853      	add	r0, sp, #332	; 0x14c
 800899c:	f002 f922 	bl	800abe4 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 80089a0:	4629      	mov	r1, r5
 80089a2:	f50d 6009 	add.w	r0, sp, #2192	; 0x890
 80089a6:	f000 fb71 	bl	800908c <ArtNet4Node::ArtNet4Node(unsigned char)>
 80089aa:	a853      	add	r0, sp, #332	; 0x14c
 80089ac:	f002 f93e 	bl	800ac2c <ArtNetParams::Load()>
 80089b0:	b138      	cbz	r0, 80089c2 <main+0x11e>
 80089b2:	a853      	add	r0, sp, #332	; 0x14c
 80089b4:	f60d 0194 	addw	r1, sp, #2196	; 0x894
 80089b8:	f002 fceb 	bl	800b392 <ArtNetParams::Set(ArtNetNode*)>
 80089bc:	a853      	add	r0, sp, #332	; 0x14c
 80089be:	f002 fd68 	bl	800b492 <ArtNetParams::Dump()>
 80089c2:	4a82      	ldr	r2, [pc, #520]	; (8008bcc <main+0x328>)
 80089c4:	ab08      	add	r3, sp, #32
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	ab08      	add	r3, sp, #32
 80089ca:	f8cd 38b8 	str.w	r3, [sp, #2232]	; 0x8b8
 80089ce:	ab14      	add	r3, sp, #80	; 0x50
 80089d0:	f8cd 38b4 	str.w	r3, [sp, #2228]	; 0x8b4
 80089d4:	9a54      	ldr	r2, [sp, #336]	; 0x150
 80089d6:	ab53      	add	r3, sp, #332	; 0x14c
 80089d8:	0491      	lsls	r1, r2, #18
 80089da:	d50a      	bpl.n	80089f2 <main+0x14e>
 80089dc:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 80089e0:	2100      	movs	r1, #0
 80089e2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80089e6:	f002 0201 	and.w	r2, r2, #1
 80089ea:	f60d 0094 	addw	r0, sp, #2196	; 0x894
 80089ee:	f000 fee5 	bl	80097bc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 80089f2:	9a54      	ldr	r2, [sp, #336]	; 0x150
 80089f4:	ab53      	add	r3, sp, #332	; 0x14c
 80089f6:	0452      	lsls	r2, r2, #17
 80089f8:	d50a      	bpl.n	8008a10 <main+0x16c>
 80089fa:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 80089fe:	2101      	movs	r1, #1
 8008a00:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8008a04:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8008a08:	f60d 0094 	addw	r0, sp, #2196	; 0x894
 8008a0c:	f000 fed6 	bl	80097bc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8008a10:	a809      	add	r0, sp, #36	; 0x24
 8008a12:	f006 ff4d 	bl	800f8b0 <StoreDmxSend::StoreDmxSend()>
 8008a16:	ab17      	add	r3, sp, #92	; 0x5c
 8008a18:	4618      	mov	r0, r3
 8008a1a:	a909      	add	r1, sp, #36	; 0x24
 8008a1c:	9303      	str	r3, [sp, #12]
 8008a1e:	f004 fa3d 	bl	800ce9c <DmxParams::DmxParams(DmxParamsStore*)>
 8008a22:	a821      	add	r0, sp, #132	; 0x84
 8008a24:	f004 ff68 	bl	800d8f8 <Dmx::Dmx()>
 8008a28:	9803      	ldr	r0, [sp, #12]
 8008a2a:	f004 fa43 	bl	800ceb4 <DmxParams::Load()>
 8008a2e:	b130      	cbz	r0, 8008a3e <main+0x19a>
 8008a30:	9803      	ldr	r0, [sp, #12]
 8008a32:	f004 fb8d 	bl	800d150 <DmxParams::Dump()>
 8008a36:	9803      	ldr	r0, [sp, #12]
 8008a38:	a921      	add	r1, sp, #132	; 0x84
 8008a3a:	f004 fb5f 	bl	800d0fc <DmxParams::Set(Dmx*)>
 8008a3e:	4a64      	ldr	r2, [pc, #400]	; (8008bd0 <main+0x32c>)
 8008a40:	ac0a      	add	r4, sp, #40	; 0x28
 8008a42:	4620      	mov	r0, r4
 8008a44:	920a      	str	r2, [sp, #40]	; 0x28
 8008a46:	ab0a      	add	r3, sp, #40	; 0x28
 8008a48:	f004 f9ce 	bl	800cde8 <DmxSend::Print()>
 8008a4c:	f89d 5f72 	ldrb.w	r5, [sp, #3954]	; 0xf72
 8008a50:	b16d      	cbz	r5, 8008a6e <main+0x1ca>
 8008a52:	2001      	movs	r0, #1
 8008a54:	f8cd 489c 	str.w	r4, [sp, #2204]	; 0x89c
 8008a58:	f00a fe82 	bl	8013760 <operator new(unsigned int)>
 8008a5c:	4b5d      	ldr	r3, [pc, #372]	; (8008bd4 <main+0x330>)
 8008a5e:	4605      	mov	r5, r0
 8008a60:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8008a64:	6818      	ldr	r0, [r3, #0]
 8008a66:	f008 f9c5 	bl	8010df4 <Network::Begin(unsigned short)>
 8008a6a:	4b5b      	ldr	r3, [pc, #364]	; (8008bd8 <main+0x334>)
 8008a6c:	6018      	str	r0, [r3, #0]
 8008a6e:	ac0b      	add	r4, sp, #44	; 0x2c
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 fa33 	bl	8008edc <DmxInput::DmxInput()>
 8008a76:	f89d 3f73 	ldrb.w	r3, [sp, #3955]	; 0xf73
 8008a7a:	b10b      	cbz	r3, 8008a80 <main+0x1dc>
 8008a7c:	f8cd 48a8 	str.w	r4, [sp, #2216]	; 0x8a8
 8008a80:	ab15      	add	r3, sp, #84	; 0x54
 8008a82:	4618      	mov	r0, r3
 8008a84:	9303      	str	r3, [sp, #12]
 8008a86:	f007 f81d 	bl	800fac4 <StoreRDMDevice::StoreRDMDevice()>
 8008a8a:	f89d 6f72 	ldrb.w	r6, [sp, #3954]	; 0xf72
 8008a8e:	2e00      	cmp	r6, #0
 8008a90:	d046      	beq.n	8008b20 <main+0x27c>
 8008a92:	ab53      	add	r3, sp, #332	; 0x14c
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	069b      	lsls	r3, r3, #26
 8008a98:	d542      	bpl.n	8008b20 <main+0x27c>
 8008a9a:	208c      	movs	r0, #140	; 0x8c
 8008a9c:	f00a fe60 	bl	8013760 <operator new(unsigned int)>
 8008aa0:	4631      	mov	r1, r6
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	f003 fd7a 	bl	800c59c <ArtNetRdmController::ArtNetRdmController(unsigned int)>
 8008aa8:	9903      	ldr	r1, [sp, #12]
 8008aaa:	a8a8      	add	r0, sp, #672	; 0x2a0
 8008aac:	f004 f8be 	bl	800cc2c <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 8008ab0:	a8a8      	add	r0, sp, #672	; 0x2a0
 8008ab2:	f004 f8cd 	bl	800cc50 <RDMDeviceParams::Load()>
 8008ab6:	1d26      	adds	r6, r4, #4
 8008ab8:	b130      	cbz	r0, 8008ac8 <main+0x224>
 8008aba:	a8a8      	add	r0, sp, #672	; 0x2a0
 8008abc:	4631      	mov	r1, r6
 8008abe:	f004 f8d2 	bl	800cc66 <RDMDeviceParams::Set(RDMDevice*)>
 8008ac2:	a8a8      	add	r0, sp, #672	; 0x2a0
 8008ac4:	f004 f904 	bl	800ccd0 <RDMDeviceParams::Dump()>
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f7ff feb9 	bl	8008840 <RDMDevice::Init()>
 8008ace:	4630      	mov	r0, r6
 8008ad0:	f004 f838 	bl	800cb44 <RDMDevice::Print()>
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	f44f 42da 	mov.w	r2, #27904	; 0x6d00
 8008ada:	4940      	ldr	r1, [pc, #256]	; (8008bdc <main+0x338>)
 8008adc:	a83d      	add	r0, sp, #244	; 0xf4
 8008ade:	f7ff fe6c 	bl	80087ba <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	aa33      	add	r2, sp, #204	; 0xcc
 8008ae8:	f60d 0094 	addw	r0, sp, #2196	; 0x894
 8008aec:	f000 fe38 	bl	8009760 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8008af0:	b118      	cbz	r0, 8008afa <main+0x256>
 8008af2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008af4:	b108      	cbz	r0, 8008afa <main+0x256>
 8008af6:	f003 ff57 	bl	800c9a8 <RDMDiscovery::Full()>
 8008afa:	2301      	movs	r3, #1
 8008afc:	aa33      	add	r2, sp, #204	; 0xcc
 8008afe:	4619      	mov	r1, r3
 8008b00:	f60d 0094 	addw	r0, sp, #2196	; 0x894
 8008b04:	f000 fe2c 	bl	8009760 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8008b08:	b120      	cbz	r0, 8008b14 <main+0x270>
 8008b0a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8008b0e:	b108      	cbz	r0, 8008b14 <main+0x270>
 8008b10:	f003 ff4a 	bl	800c9a8 <RDMDiscovery::Full()>
 8008b14:	2200      	movs	r2, #0
 8008b16:	4621      	mov	r1, r4
 8008b18:	f60d 0094 	addw	r0, sp, #2196	; 0x894
 8008b1c:	f001 fe22 	bl	800a764 <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)>
 8008b20:	f50d 6009 	add.w	r0, sp, #2192	; 0x890
 8008b24:	f000 fb10 	bl	8009148 <ArtNet4Node::Print()>
 8008b28:	f89d 3f72 	ldrb.w	r3, [sp, #3954]	; 0xf72
 8008b2c:	f89d 4f73 	ldrb.w	r4, [sp, #3955]	; 0xf73
 8008b30:	492b      	ldr	r1, [pc, #172]	; (8008be0 <main+0x33c>)
 8008b32:	441c      	add	r4, r3
 8008b34:	4622      	mov	r2, r4
 8008b36:	a83d      	add	r0, sp, #244	; 0xf4
 8008b38:	f009 fa90 	bl	801205c <DisplayUdf::SetTitle(char const*, ...)>
 8008b3c:	2206      	movs	r2, #6
 8008b3e:	2102      	movs	r1, #2
 8008b40:	a83d      	add	r0, sp, #244	; 0xf4
 8008b42:	f009 fbe1 	bl	8012308 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008b46:	2202      	movs	r2, #2
 8008b48:	2103      	movs	r1, #3
 8008b4a:	a83d      	add	r0, sp, #244	; 0xf4
 8008b4c:	f009 fbdc 	bl	8012308 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008b50:	2203      	movs	r2, #3
 8008b52:	2104      	movs	r1, #4
 8008b54:	a83d      	add	r0, sp, #244	; 0xf4
 8008b56:	f009 fbd7 	bl	8012308 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008b5a:	2208      	movs	r2, #8
 8008b5c:	2105      	movs	r1, #5
 8008b5e:	a83d      	add	r0, sp, #244	; 0xf4
 8008b60:	f009 fbd2 	bl	8012308 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008b64:	2209      	movs	r2, #9
 8008b66:	2106      	movs	r1, #6
 8008b68:	a83d      	add	r0, sp, #244	; 0xf4
 8008b6a:	f009 fbcd 	bl	8012308 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008b6e:	a80c      	add	r0, sp, #48	; 0x30
 8008b70:	f006 fe6a 	bl	800f848 <StoreDisplayUdf::StoreDisplayUdf()>
 8008b74:	a90c      	add	r1, sp, #48	; 0x30
 8008b76:	a833      	add	r0, sp, #204	; 0xcc
 8008b78:	f009 fc08 	bl	801238c <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8008b7c:	a833      	add	r0, sp, #204	; 0xcc
 8008b7e:	f009 fc12 	bl	80123a6 <DisplayUdfParams::Load()>
 8008b82:	b378      	cbz	r0, 8008be4 <main+0x340>
 8008b84:	a833      	add	r0, sp, #204	; 0xcc
 8008b86:	a93d      	add	r1, sp, #244	; 0xf4
 8008b88:	f009 fd45 	bl	8012616 <DisplayUdfParams::Set(DisplayUdf*)>
 8008b8c:	a833      	add	r0, sp, #204	; 0xcc
 8008b8e:	f009 fd75 	bl	801267c <DisplayUdfParams::Dump()>
 8008b92:	e027      	b.n	8008be4 <main+0x340>
 8008b94:	0801648e 	stmdaeq	r1, {r1, r2, r3, r7, sl, sp, lr}
 8008b98:	08016485 	stmdaeq	r1, {r0, r2, r7, sl, sp, lr}
 8008b9c:	08016585 	stmdaeq	r1, {r0, r2, r7, r8, sl, sp, lr}
 8008ba0:	40011000 	andmi	r1, r1, r0
 8008ba4:	0801649a 	stmdaeq	r1, {r1, r3, r4, r7, sl, sp, lr}
 8008ba8:	08016548 	stmdaeq	r1, {r3, r6, r8, sl, sp, lr}
 8008bac:	08016534 	stmdaeq	r1, {r2, r4, r5, r8, sl, sp, lr}
 8008bb0:	2000a62c 	andcs	sl, r0, ip, lsr #12
 8008bb4:	08017f05 	stmdaeq	r1, {r0, r2, r8, r9, sl, fp, ip, sp, lr}
 8008bb8:	08017ef4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 8008bbc:	080164d4 	stmdaeq	r1, {r2, r4, r6, r7, sl, sp, lr}
 8008bc0:	080164e4 	stmdaeq	r1, {r2, r5, r6, r7, sl, sp, lr}
 8008bc4:	080164dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, sl, sp, lr}
 8008bc8:	080165f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, sl, sp, lr}
 8008bcc:	0801655c 	stmdaeq	r1, {r2, r3, r4, r6, r8, sl, sp, lr}
 8008bd0:	08016bf4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, r9, fp, sp, lr}
 8008bd4:	20009ff4 	strdcs	r9, [r0], -r4
 8008bd8:	20000004 	andcs	r0, r0, r4
 8008bdc:	08016609 	stmdaeq	r1, {r0, r3, r9, sl, sp, lr}
 8008be0:	080164fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, sl, sp, lr}
 8008be4:	f60d 0194 	addw	r1, sp, #2196	; 0x894
 8008be8:	a83d      	add	r0, sp, #244	; 0xf4
 8008bea:	f009 fe17 	bl	801281c <DisplayUdf::Show(ArtNetNode*)>
 8008bee:	9a54      	ldr	r2, [sp, #336]	; 0x150
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8008bf6:	ab53      	add	r3, sp, #332	; 0x14c
 8008bf8:	a8a8      	add	r0, sp, #672	; 0x2a0
 8008bfa:	4623      	mov	r3, r4
 8008bfc:	f005 fa36 	bl	800e06c <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 8008c00:	a80d      	add	r0, sp, #52	; 0x34
 8008c02:	f006 ff95 	bl	800fb30 <StoreRemoteConfig::StoreRemoteConfig()>
 8008c06:	a90d      	add	r1, sp, #52	; 0x34
 8008c08:	a82a      	add	r0, sp, #168	; 0xa8
 8008c0a:	f005 fd2d 	bl	800e668 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8008c0e:	a82a      	add	r0, sp, #168	; 0xa8
 8008c10:	f005 fd34 	bl	800e67c <RemoteConfigParams::Load()>
 8008c14:	b130      	cbz	r0, 8008c24 <main+0x380>
 8008c16:	a82a      	add	r0, sp, #168	; 0xa8
 8008c18:	a9a8      	add	r1, sp, #672	; 0x2a0
 8008c1a:	f005 fe56 	bl	800e8ca <RemoteConfigParams::Set(RemoteConfig*)>
 8008c1e:	a82a      	add	r0, sp, #168	; 0xa8
 8008c20:	f005 fe77 	bl	800e912 <RemoteConfigParams::Dump()>
 8008c24:	a806      	add	r0, sp, #24
 8008c26:	f006 fc7f 	bl	800f528 <SpiFlashStore::Flash()>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d1fa      	bne.n	8008c24 <main+0x380>
 8008c2e:	2303      	movs	r3, #3
 8008c30:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8008c34:	496d      	ldr	r1, [pc, #436]	; (8008dec <main+0x548>)
 8008c36:	a83d      	add	r0, sp, #244	; 0xf4
 8008c38:	f7ff fdbf 	bl	80087ba <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008c3c:	f50d 6009 	add.w	r0, sp, #2192	; 0x890
 8008c40:	f000 fa38 	bl	80090b4 <ArtNet4Node::Start()>
 8008c44:	f248 0280 	movw	r2, #32896	; 0x8080
 8008c48:	2302      	movs	r3, #2
 8008c4a:	4969      	ldr	r1, [pc, #420]	; (8008df0 <main+0x54c>)
 8008c4c:	a83d      	add	r0, sp, #244	; 0xf4
 8008c4e:	f7ff fdb4 	bl	80087ba <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008c52:	2102      	movs	r1, #2
 8008c54:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008c58:	f00b fc92 	bl	8014580 <fwdgt_config>
 8008c5c:	2801      	cmp	r0, #1
 8008c5e:	bf0c      	ite	eq
 8008c60:	2201      	moveq	r2, #1
 8008c62:	2200      	movne	r2, #0
 8008c64:	ab0f      	add	r3, sp, #60	; 0x3c
 8008c66:	711a      	strb	r2, [r3, #4]
 8008c68:	d101      	bne.n	8008c6e <main+0x3ca>
 8008c6a:	f00b fc79 	bl	8014560 <fwdgt_enable>
 8008c6e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8008df4 <main+0x550>
 8008c72:	4f61      	ldr	r7, [pc, #388]	; (8008df8 <main+0x554>)
 8008c74:	f00b fc7c 	bl	8014570 <fwdgt_counter_reload>
 8008c78:	f7fe fc7e 	bl	8007578 <net_handle>
 8008c7c:	f50d 6009 	add.w	r0, sp, #2192	; 0x890
 8008c80:	f000 fa53 	bl	800912a <ArtNet4Node::Run()>
 8008c84:	a8a8      	add	r0, sp, #672	; 0x2a0
 8008c86:	f005 fba1 	bl	800e3cc <RemoteConfig::Run()>
 8008c8a:	a806      	add	r0, sp, #24
 8008c8c:	f006 fc4c 	bl	800f528 <SpiFlashStore::Flash()>
 8008c90:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008c92:	ab1b      	add	r3, sp, #108	; 0x6c
 8008c94:	b199      	cbz	r1, 8008cbe <main+0x41a>
 8008c96:	f8d9 2000 	ldr.w	r2, [r9]
 8008c9a:	6958      	ldr	r0, [r3, #20]
 8008c9c:	1a12      	subs	r2, r2, r0
 8008c9e:	4291      	cmp	r1, r2
 8008ca0:	d80d      	bhi.n	8008cbe <main+0x41a>
 8008ca2:	f8d9 2000 	ldr.w	r2, [r9]
 8008ca6:	615a      	str	r2, [r3, #20]
 8008ca8:	691a      	ldr	r2, [r3, #16]
 8008caa:	2a01      	cmp	r2, #1
 8008cac:	f082 0101 	eor.w	r1, r2, #1
 8008cb0:	6119      	str	r1, [r3, #16]
 8008cb2:	bf16      	itet	ne
 8008cb4:	2301      	movne	r3, #1
 8008cb6:	f8c8 2014 	streq.w	r2, [r8, #20]
 8008cba:	f8c8 3010 	strne.w	r3, [r8, #16]
 8008cbe:	9942      	ldr	r1, [sp, #264]	; 0x108
 8008cc0:	aa3d      	add	r2, sp, #244	; 0xf4
 8008cc2:	b161      	cbz	r1, 8008cde <main+0x43a>
 8008cc4:	7c13      	ldrb	r3, [r2, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d13f      	bne.n	8008d4a <main+0x4a6>
 8008cca:	f8d9 3000 	ldr.w	r3, [r9]
 8008cce:	6852      	ldr	r2, [r2, #4]
 8008cd0:	1a9b      	subs	r3, r3, r2
 8008cd2:	4299      	cmp	r1, r3
 8008cd4:	d203      	bcs.n	8008cde <main+0x43a>
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	a83d      	add	r0, sp, #244	; 0xf4
 8008cda:	f7ff fd29 	bl	8008730 <Display::SetSleep(bool)>
 8008cde:	b385      	cbz	r5, 8008d42 <main+0x49e>
 8008ce0:	f10d 031e 	add.w	r3, sp, #30
 8008ce4:	4e45      	ldr	r6, [pc, #276]	; (8008dfc <main+0x558>)
 8008ce6:	4846      	ldr	r0, [pc, #280]	; (8008e00 <main+0x55c>)
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	2210      	movs	r2, #16
 8008cec:	4631      	mov	r1, r6
 8008cee:	7800      	ldrb	r0, [r0, #0]
 8008cf0:	ab0e      	add	r3, sp, #56	; 0x38
 8008cf2:	f007 fb5d 	bl	80103b0 <udp_recv>
 8008cf6:	280a      	cmp	r0, #10
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	d922      	bls.n	8008d42 <main+0x49e>
 8008cfc:	2204      	movs	r2, #4
 8008cfe:	4631      	mov	r1, r6
 8008d00:	4840      	ldr	r0, [pc, #256]	; (8008e04 <main+0x560>)
 8008d02:	f7ff fc5e 	bl	80085c2 <memcmp>
 8008d06:	b9e0      	cbnz	r0, 8008d42 <main+0x49e>
 8008d08:	4426      	add	r6, r4
 8008d0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d0e:	2b0a      	cmp	r3, #10
 8008d10:	d103      	bne.n	8008d1a <main+0x476>
 8008d12:	3c01      	subs	r4, #1
 8008d14:	b2a4      	uxth	r4, r4
 8008d16:	2c0a      	cmp	r4, #10
 8008d18:	d051      	beq.n	8008dbe <main+0x51a>
 8008d1a:	2c0e      	cmp	r4, #14
 8008d1c:	d84d      	bhi.n	8008dba <main+0x516>
 8008d1e:	2206      	movs	r2, #6
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	4839      	ldr	r0, [pc, #228]	; (8008e08 <main+0x564>)
 8008d24:	f7ff fc4d 	bl	80085c2 <memcmp>
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d148      	bne.n	8008dbe <main+0x51a>
 8008d2c:	2104      	movs	r1, #4
 8008d2e:	4837      	ldr	r0, [pc, #220]	; (8008e0c <main+0x568>)
 8008d30:	f7ff fc5b 	bl	80085ea <dmxconfigudp::atoi(char const*, unsigned char)>
 8008d34:	285b      	cmp	r0, #91	; 0x5b
 8008d36:	4601      	mov	r1, r0
 8008d38:	d903      	bls.n	8008d42 <main+0x49e>
 8008d3a:	4b35      	ldr	r3, [pc, #212]	; (8008e10 <main+0x56c>)
 8008d3c:	6818      	ldr	r0, [r3, #0]
 8008d3e:	f004 ff21 	bl	800db84 <Dmx::SetDmxBreakTime(unsigned int)>
 8008d42:	a807      	add	r0, sp, #28
 8008d44:	f007 ffb4 	bl	8010cb0 <MDNS::Run()>
 8008d48:	e794      	b.n	8008c74 <main+0x3d0>
 8008d4a:	f7ff fd6f 	bl	800882c <display::timeout::gpio_renew()>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d0c5      	beq.n	8008cde <main+0x43a>
 8008d52:	2100      	movs	r1, #0
 8008d54:	e7c0      	b.n	8008cd8 <main+0x434>
 8008d56:	2c0c      	cmp	r4, #12
 8008d58:	d915      	bls.n	8008d86 <main+0x4e2>
 8008d5a:	2c0e      	cmp	r4, #14
 8008d5c:	d82a      	bhi.n	8008db4 <main+0x510>
 8008d5e:	2208      	movs	r2, #8
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	482c      	ldr	r0, [pc, #176]	; (8008e14 <main+0x570>)
 8008d64:	f7ff fc2d 	bl	80085c2 <memcmp>
 8008d68:	bb20      	cbnz	r0, 8008db4 <main+0x510>
 8008d6a:	2102      	movs	r1, #2
 8008d6c:	482a      	ldr	r0, [pc, #168]	; (8008e18 <main+0x574>)
 8008d6e:	f7ff fc3c 	bl	80085ea <dmxconfigudp::atoi(char const*, unsigned char)>
 8008d72:	4601      	mov	r1, r0
 8008d74:	b110      	cbz	r0, 8008d7c <main+0x4d8>
 8008d76:	4b29      	ldr	r3, [pc, #164]	; (8008e1c <main+0x578>)
 8008d78:	fbb3 f1f0 	udiv	r1, r3, r0
 8008d7c:	4b24      	ldr	r3, [pc, #144]	; (8008e10 <main+0x56c>)
 8008d7e:	6818      	ldr	r0, [r3, #0]
 8008d80:	f004 fecc 	bl	800db1c <Dmx::SetDmxPeriodTime(unsigned int)>
 8008d84:	e7dd      	b.n	8008d42 <main+0x49e>
 8008d86:	2c0a      	cmp	r4, #10
 8008d88:	d0db      	beq.n	8008d42 <main+0x49e>
 8008d8a:	2206      	movs	r2, #6
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	4824      	ldr	r0, [pc, #144]	; (8008e20 <main+0x57c>)
 8008d90:	f7ff fc17 	bl	80085c2 <memcmp>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	d1d4      	bne.n	8008d42 <main+0x49e>
 8008d98:	2103      	movs	r1, #3
 8008d9a:	481c      	ldr	r0, [pc, #112]	; (8008e0c <main+0x568>)
 8008d9c:	f7ff fc25 	bl	80085ea <dmxconfigudp::atoi(char const*, unsigned char)>
 8008da0:	1e83      	subs	r3, r0, #2
 8008da2:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8008da6:	d8cc      	bhi.n	8008d42 <main+0x49e>
 8008da8:	4b19      	ldr	r3, [pc, #100]	; (8008e10 <main+0x56c>)
 8008daa:	b281      	uxth	r1, r0
 8008dac:	6818      	ldr	r0, [r3, #0]
 8008dae:	f004 fefd 	bl	800dbac <Dmx::SetDmxSlots(unsigned short)>
 8008db2:	e7c6      	b.n	8008d42 <main+0x49e>
 8008db4:	2c0d      	cmp	r4, #13
 8008db6:	d0e8      	beq.n	8008d8a <main+0x4e6>
 8008db8:	e7c3      	b.n	8008d42 <main+0x49e>
 8008dba:	2c10      	cmp	r4, #16
 8008dbc:	d8c1      	bhi.n	8008d42 <main+0x49e>
 8008dbe:	2204      	movs	r2, #4
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	4818      	ldr	r0, [pc, #96]	; (8008e24 <main+0x580>)
 8008dc4:	f7ff fbfd 	bl	80085c2 <memcmp>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	d1c4      	bne.n	8008d56 <main+0x4b2>
 8008dcc:	2107      	movs	r1, #7
 8008dce:	4816      	ldr	r0, [pc, #88]	; (8008e28 <main+0x584>)
 8008dd0:	f7ff fc0b 	bl	80085ea <dmxconfigudp::atoi(char const*, unsigned char)>
 8008dd4:	4b15      	ldr	r3, [pc, #84]	; (8008e2c <main+0x588>)
 8008dd6:	f1a0 020c 	sub.w	r2, r0, #12
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	4601      	mov	r1, r0
 8008dde:	d8b0      	bhi.n	8008d42 <main+0x49e>
 8008de0:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <main+0x56c>)
 8008de2:	6818      	ldr	r0, [r3, #0]
 8008de4:	f004 fed8 	bl	800db98 <Dmx::SetDmxMabTime(unsigned int)>
 8008de8:	e7ab      	b.n	8008d42 <main+0x49e>
 8008dea:	bf00      	nop
 8008dec:	080165e4 	stmdaeq	r1, {r2, r5, r6, r7, r8, sl, sp, lr}
 8008df0:	0801661f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r9, sl, sp, lr}
 8008df4:	2000a734 	andcs	sl, r0, r4, lsr r7
 8008df8:	20000000 	andcs	r0, r0, r0
 8008dfc:	20000e31 	andcs	r0, r0, r1, lsr lr
 8008e00:	20000004 	andcs	r0, r0, r4
 8008e04:	08016508 	stmdaeq	r1, {r3, r8, sl, sp, lr}
 8008e08:	0801650d 	stmdaeq	r1, {r0, r2, r3, r8, sl, sp, lr}
 8008e0c:	20000e3b 	andcs	r0, r0, fp, lsr lr
 8008e10:	20001698 	mulcs	r0, r8, r6
 8008e14:	08016519 	stmdaeq	r1, {r0, r3, r4, r8, sl, sp, lr}
 8008e18:	20000e3d 	andcs	r0, r0, sp, lsr lr
 8008e1c:	000f4240 	andeq	r4, pc, r0, asr #4
 8008e20:	08016522 	stmdaeq	r1, {r1, r5, r8, sl, sp, lr}
 8008e24:	08016514 	stmdaeq	r1, {r2, r4, r8, sl, sp, lr}
 8008e28:	20000e39 	andcs	r0, r0, r9, lsr lr
 8008e2c:	000f4234 	andeq	r4, pc, r4, lsr r2	; <UNPREDICTABLE>

08008e30 <DmxInput::~DmxInput()>:
 8008e30:	4770      	bx	lr
	...

08008e34 <DmxInput::Start(unsigned int)>:
 8008e34:	2301      	movs	r3, #1
 8008e36:	b430      	push	{r4, r5}
 8008e38:	4c08      	ldr	r4, [pc, #32]	; (8008e5c <DmxInput::Start(unsigned int)+0x28>)
 8008e3a:	fa03 f001 	lsl.w	r0, r3, r1
 8008e3e:	7822      	ldrb	r2, [r4, #0]
 8008e40:	ea30 0502 	bics.w	r5, r0, r2
 8008e44:	d007      	beq.n	8008e56 <DmxInput::Start(unsigned int)+0x22>
 8008e46:	4302      	orrs	r2, r0
 8008e48:	4805      	ldr	r0, [pc, #20]	; (8008e60 <DmxInput::Start(unsigned int)+0x2c>)
 8008e4a:	7022      	strb	r2, [r4, #0]
 8008e4c:	6800      	ldr	r0, [r0, #0]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	bc30      	pop	{r4, r5}
 8008e52:	f004 bd13 	b.w	800d87c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8008e56:	bc30      	pop	{r4, r5}
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	200000f8 	strdcs	r0, [r0], -r8
 8008e60:	20001698 	mulcs	r0, r8, r6

08008e64 <DmxInput::Stop(unsigned int)>:
 8008e64:	2201      	movs	r2, #1
 8008e66:	b430      	push	{r4, r5}
 8008e68:	4c08      	ldr	r4, [pc, #32]	; (8008e8c <DmxInput::Stop(unsigned int)+0x28>)
 8008e6a:	fa02 f001 	lsl.w	r0, r2, r1
 8008e6e:	7823      	ldrb	r3, [r4, #0]
 8008e70:	ea30 0503 	bics.w	r5, r0, r3
 8008e74:	d108      	bne.n	8008e88 <DmxInput::Stop(unsigned int)+0x24>
 8008e76:	ea23 0300 	bic.w	r3, r3, r0
 8008e7a:	4805      	ldr	r0, [pc, #20]	; (8008e90 <DmxInput::Stop(unsigned int)+0x2c>)
 8008e7c:	7023      	strb	r3, [r4, #0]
 8008e7e:	6800      	ldr	r0, [r0, #0]
 8008e80:	2300      	movs	r3, #0
 8008e82:	bc30      	pop	{r4, r5}
 8008e84:	f004 bcfa 	b.w	800d87c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8008e88:	bc30      	pop	{r4, r5}
 8008e8a:	4770      	bx	lr
 8008e8c:	200000f8 	strdcs	r0, [r0], -r8
 8008e90:	20001698 	mulcs	r0, r8, r6

08008e94 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)>:
 8008e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e98:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8008ecc <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x38>
 8008e9c:	461e      	mov	r6, r3
 8008e9e:	f8d8 0000 	ldr.w	r0, [r8]
 8008ea2:	460f      	mov	r7, r1
 8008ea4:	4615      	mov	r5, r2
 8008ea6:	f004 febf 	bl	800dc28 <Dmx::GetDmxAvailable(unsigned int)>
 8008eaa:	4639      	mov	r1, r7
 8008eac:	4604      	mov	r4, r0
 8008eae:	f8d8 0000 	ldr.w	r0, [r8]
 8008eb2:	f004 fecd 	bl	800dc50 <Dmx::GetUpdatesPerSecond(unsigned int)>
 8008eb6:	6030      	str	r0, [r6, #0]
 8008eb8:	b134      	cbz	r4, 8008ec8 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x34>
 8008eba:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 8008ebe:	3401      	adds	r4, #1
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	602b      	str	r3, [r5, #0]
 8008ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ec8:	4623      	mov	r3, r4
 8008eca:	e7f9      	b.n	8008ec0 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x2c>
 8008ecc:	20001698 	mulcs	r0, r8, r6

08008ed0 <DmxInput::~DmxInput()>:
 8008ed0:	b510      	push	{r4, lr}
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	f00a fc40 	bl	8013758 <operator delete(void*)>
 8008ed8:	4620      	mov	r0, r4
 8008eda:	bd10      	pop	{r4, pc}

08008edc <DmxInput::DmxInput()>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4604      	mov	r4, r0
 8008ee0:	2500      	movs	r5, #0
 8008ee2:	4b05      	ldr	r3, [pc, #20]	; (8008ef8 <DmxInput::DmxInput()+0x1c>)
 8008ee4:	6003      	str	r3, [r0, #0]
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	4620      	mov	r0, r4
 8008eea:	3501      	adds	r5, #1
 8008eec:	f7ff ffba 	bl	8008e64 <DmxInput::Stop(unsigned int)>
 8008ef0:	2d08      	cmp	r5, #8
 8008ef2:	d1f8      	bne.n	8008ee6 <DmxInput::DmxInput()+0xa>
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	08016594 	stmdaeq	r1, {r2, r4, r7, r8, sl, sp, lr}

08008efc <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
 8008efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008efe:	4616      	mov	r6, r2
 8008f00:	1d07      	adds	r7, r0, #4
 8008f02:	4604      	mov	r4, r0
 8008f04:	4613      	mov	r3, r2
 8008f06:	4638      	mov	r0, r7
 8008f08:	f10d 0206 	add.w	r2, sp, #6
 8008f0c:	460d      	mov	r5, r1
 8008f0e:	f000 fc11 	bl	8009734 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8008f12:	b1b6      	cbz	r6, 8008f42 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8008f14:	b1a8      	cbz	r0, 8008f42 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8008f16:	4629      	mov	r1, r5
 8008f18:	4638      	mov	r0, r7
 8008f1a:	f000 fd85 	bl	8009a28 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8008f1e:	2801      	cmp	r0, #1
 8008f20:	d10f      	bne.n	8008f42 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8008f22:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 8008f26:	b123      	cbz	r3, 8008f32 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x36>
 8008f28:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008f32:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008f36:	b933      	cbnz	r3, 8008f46 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x4a>
 8008f38:	2202      	movs	r2, #2
 8008f3a:	4629      	mov	r1, r5
 8008f3c:	4638      	mov	r0, r7
 8008f3e:	f000 fc3d 	bl	80097bc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8008f42:	b003      	add	sp, #12
 8008f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f46:	1e71      	subs	r1, r6, #1
 8008f48:	424a      	negs	r2, r1
 8008f4a:	414a      	adcs	r2, r1
 8008f4c:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 8008f50:	4629      	mov	r1, r5
 8008f52:	f002 fc17 	bl	800b784 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8008f56:	e7f4      	b.n	8008f42 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>

08008f58 <ArtNet4Node::~ArtNet4Node()>:
 8008f58:	b510      	push	{r4, lr}
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	4b05      	ldr	r3, [pc, #20]	; (8008f74 <ArtNet4Node::~ArtNet4Node()+0x1c>)
 8008f5e:	6003      	str	r3, [r0, #0]
 8008f60:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8008f64:	f002 fb22 	bl	800b5ac <E131Bridge::Stop()>
 8008f68:	1d20      	adds	r0, r4, #4
 8008f6a:	f000 f957 	bl	800921c <ArtNetNode::Stop()>
 8008f6e:	4620      	mov	r0, r4
 8008f70:	bd10      	pop	{r4, pc}
 8008f72:	bf00      	nop
 8008f74:	080165cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sl, sp, lr}

08008f78 <ArtNet4Node::HandleAddress(unsigned char)>:
 8008f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f7a:	4605      	mov	r5, r0
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	2600      	movs	r6, #0
 8008f80:	1d07      	adds	r7, r0, #4
 8008f82:	792b      	ldrb	r3, [r5, #4]
 8008f84:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 8008f88:	d30e      	bcc.n	8008fa8 <ArtNet4Node::HandleAddress(unsigned char)+0x30>
 8008f8a:	2c13      	cmp	r4, #19
 8008f8c:	f004 0603 	and.w	r6, r4, #3
 8008f90:	d82f      	bhi.n	8008ff2 <ArtNet4Node::HandleAddress(unsigned char)+0x7a>
 8008f92:	2c0f      	cmp	r4, #15
 8008f94:	d83e      	bhi.n	8009014 <ArtNet4Node::HandleAddress(unsigned char)+0x9c>
 8008f96:	2c02      	cmp	r4, #2
 8008f98:	d03a      	beq.n	8009010 <ArtNet4Node::HandleAddress(unsigned char)+0x98>
 8008f9a:	3c03      	subs	r4, #3
 8008f9c:	2c01      	cmp	r4, #1
 8008f9e:	d835      	bhi.n	800900c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f885 37c0 	strb.w	r3, [r5, #1984]	; 0x7c0
 8008fa6:	e031      	b.n	800900c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8008fa8:	2301      	movs	r3, #1
 8008faa:	4631      	mov	r1, r6
 8008fac:	4638      	mov	r0, r7
 8008fae:	f10d 0206 	add.w	r2, sp, #6
 8008fb2:	f000 fbbf 	bl	8009734 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8008fb6:	b150      	cbz	r0, 8008fce <ArtNet4Node::HandleAddress(unsigned char)+0x56>
 8008fb8:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
 8008fbc:	b123      	cbz	r3, 8008fc8 <ArtNet4Node::HandleAddress(unsigned char)+0x50>
 8008fbe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008fc8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008fcc:	b90b      	cbnz	r3, 8008fd2 <ArtNet4Node::HandleAddress(unsigned char)+0x5a>
 8008fce:	3601      	adds	r6, #1
 8008fd0:	e7d7      	b.n	8008f82 <ArtNet4Node::HandleAddress(unsigned char)+0xa>
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	4638      	mov	r0, r7
 8008fd6:	f000 fd27 	bl	8009a28 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	2a01      	cmp	r2, #1
 8008fde:	bf18      	it	ne
 8008fe0:	2202      	movne	r2, #2
 8008fe2:	4631      	mov	r1, r6
 8008fe4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008fe8:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
 8008fec:	f002 fbca 	bl	800b784 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8008ff0:	e7ed      	b.n	8008fce <ArtNet4Node::HandleAddress(unsigned char)+0x56>
 8008ff2:	2c53      	cmp	r4, #83	; 0x53
 8008ff4:	d806      	bhi.n	8009004 <ArtNet4Node::HandleAddress(unsigned char)+0x8c>
 8008ff6:	2c4f      	cmp	r4, #79	; 0x4f
 8008ff8:	d908      	bls.n	800900c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8008ffa:	2344      	movs	r3, #68	; 0x44
 8008ffc:	fb03 5606 	mla	r6, r3, r6, r5
 8009000:	2300      	movs	r3, #0
 8009002:	e00b      	b.n	800901c <ArtNet4Node::HandleAddress(unsigned char)+0xa4>
 8009004:	3470      	adds	r4, #112	; 0x70
 8009006:	b2e4      	uxtb	r4, r4
 8009008:	2c03      	cmp	r4, #3
 800900a:	d90a      	bls.n	8009022 <ArtNet4Node::HandleAddress(unsigned char)+0xaa>
 800900c:	b003      	add	sp, #12
 800900e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009010:	2301      	movs	r3, #1
 8009012:	e7c6      	b.n	8008fa2 <ArtNet4Node::HandleAddress(unsigned char)+0x2a>
 8009014:	2344      	movs	r3, #68	; 0x44
 8009016:	fb03 5606 	mla	r6, r3, r6, r5
 800901a:	2301      	movs	r3, #1
 800901c:	f8c6 3d04 	str.w	r3, [r6, #3332]	; 0xd04
 8009020:	e7f4      	b.n	800900c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8009022:	4631      	mov	r1, r6
 8009024:	1d28      	adds	r0, r5, #4
 8009026:	f000 fcff 	bl	8009a28 <ArtNetNode::GetPortProtocol(unsigned int) const>
 800902a:	2801      	cmp	r0, #1
 800902c:	d1ee      	bne.n	800900c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800902e:	4631      	mov	r1, r6
 8009030:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
 8009034:	b003      	add	sp, #12
 8009036:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800903a:	f002 beb5 	b.w	800bda8 <E131Bridge::Clear(unsigned int)>

0800903e <ArtNet4Node::IsStatusChanged()>:
 800903e:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8009042:	f002 bea9 	b.w	800bd98 <E131Bridge::IsStatusChanged()>

08009046 <ArtNet4Node::~ArtNet4Node()>:
 8009046:	b510      	push	{r4, lr}
 8009048:	4604      	mov	r4, r0
 800904a:	f7ff ff85 	bl	8008f58 <ArtNet4Node::~ArtNet4Node()>
 800904e:	4620      	mov	r0, r4
 8009050:	f00a fb82 	bl	8013758 <operator delete(void*)>
 8009054:	4620      	mov	r0, r4
 8009056:	bd10      	pop	{r4, pc}

08009058 <ArtNet4Node::GetStatus(unsigned int)>:
 8009058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800905a:	2301      	movs	r3, #1
 800905c:	4604      	mov	r4, r0
 800905e:	f10d 0206 	add.w	r2, sp, #6
 8009062:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8009066:	460d      	mov	r5, r1
 8009068:	f002 fc04 	bl	800b874 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800906c:	b160      	cbz	r0, 8009088 <ArtNet4Node::GetStatus(unsigned int)+0x30>
 800906e:	2344      	movs	r3, #68	; 0x44
 8009070:	fb03 4405 	mla	r4, r3, r5, r4
 8009074:	f894 0d0a 	ldrb.w	r0, [r4, #3338]	; 0xd0a
 8009078:	f894 3d09 	ldrb.w	r3, [r4, #3337]	; 0xd09
 800907c:	01c0      	lsls	r0, r0, #7
 800907e:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8009082:	f040 0001 	orr.w	r0, r0, #1
 8009086:	b2c0      	uxtb	r0, r0
 8009088:	b003      	add	sp, #12
 800908a:	bd30      	pop	{r4, r5, pc}

0800908c <ArtNet4Node::ArtNet4Node(unsigned char)>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4604      	mov	r4, r0
 8009090:	1d05      	adds	r5, r0, #4
 8009092:	4628      	mov	r0, r5
 8009094:	f000 f960 	bl	8009358 <ArtNetNode::ArtNetNode(unsigned char)>
 8009098:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <ArtNet4Node::ArtNet4Node(unsigned char)+0x24>)
 800909a:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 800909e:	6023      	str	r3, [r4, #0]
 80090a0:	f002 fad2 	bl	800b648 <E131Bridge::E131Bridge()>
 80090a4:	4628      	mov	r0, r5
 80090a6:	4621      	mov	r1, r4
 80090a8:	f000 f866 	bl	8009178 <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>
 80090ac:	4620      	mov	r0, r4
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	080165cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sl, sp, lr}

080090b4 <ArtNet4Node::Start()>:
 80090b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090b6:	4604      	mov	r4, r0
 80090b8:	2500      	movs	r5, #0
 80090ba:	1d06      	adds	r6, r0, #4
 80090bc:	7923      	ldrb	r3, [r4, #4]
 80090be:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 80090c2:	d319      	bcc.n	80090f8 <ArtNet4Node::Start()+0x44>
 80090c4:	f8d4 36d0 	ldr.w	r3, [r4, #1744]	; 0x6d0
 80090c8:	4630      	mov	r0, r6
 80090ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090ce:	bf2c      	ite	cs
 80090d0:	2300      	movcs	r3, #0
 80090d2:	2301      	movcc	r3, #1
 80090d4:	f884 3cb1 	strb.w	r3, [r4, #3249]	; 0xcb1
 80090d8:	f894 36e0 	ldrb.w	r3, [r4, #1760]	; 0x6e0
 80090dc:	f884 3cb2 	strb.w	r3, [r4, #3250]	; 0xcb2
 80090e0:	68e3      	ldr	r3, [r4, #12]
 80090e2:	f8c4 37bc 	str.w	r3, [r4, #1980]	; 0x7bc
 80090e6:	f000 f859 	bl	800919c <ArtNetNode::Start()>
 80090ea:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 80090ee:	b002      	add	sp, #8
 80090f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80090f4:	f002 ba1e 	b.w	800b534 <E131Bridge::Start()>
 80090f8:	2301      	movs	r3, #1
 80090fa:	4629      	mov	r1, r5
 80090fc:	4630      	mov	r0, r6
 80090fe:	f10d 0206 	add.w	r2, sp, #6
 8009102:	f000 fb17 	bl	8009734 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8009106:	b170      	cbz	r0, 8009126 <ArtNet4Node::Start()+0x72>
 8009108:	4629      	mov	r1, r5
 800910a:	4630      	mov	r0, r6
 800910c:	f000 fc8c 	bl	8009a28 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8009110:	2801      	cmp	r0, #1
 8009112:	d108      	bne.n	8009126 <ArtNet4Node::Start()+0x72>
 8009114:	4629      	mov	r1, r5
 8009116:	4630      	mov	r0, r6
 8009118:	f000 fcb7 	bl	8009a8a <ArtNetNode::GetMergeMode(unsigned int) const>
 800911c:	2344      	movs	r3, #68	; 0x44
 800911e:	436b      	muls	r3, r5
 8009120:	f604 5204 	addw	r2, r4, #3332	; 0xd04
 8009124:	50d0      	str	r0, [r2, r3]
 8009126:	3501      	adds	r5, #1
 8009128:	e7c8      	b.n	80090bc <ArtNet4Node::Start()+0x8>

0800912a <ArtNet4Node::Run()>:
 800912a:	b510      	push	{r4, lr}
 800912c:	4604      	mov	r4, r0
 800912e:	3004      	adds	r0, #4
 8009130:	f000 fa24 	bl	800957c <ArtNetNode::Run()>
 8009134:	f894 3cc3 	ldrb.w	r3, [r4, #3267]	; 0xcc3
 8009138:	b12b      	cbz	r3, 8009146 <ArtNet4Node::Run()+0x1c>
 800913a:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 800913e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009142:	f002 be93 	b.w	800be6c <E131Bridge::Run()>
 8009146:	bd10      	pop	{r4, pc}

08009148 <ArtNet4Node::Print()>:
 8009148:	b510      	push	{r4, lr}
 800914a:	4604      	mov	r4, r0
 800914c:	3004      	adds	r0, #4
 800914e:	f001 fbf9 	bl	800a944 <ArtNetNode::Print()>
 8009152:	f894 36e2 	ldrb.w	r3, [r4, #1762]	; 0x6e2
 8009156:	b15b      	cbz	r3, 8009170 <ArtNet4Node::Print()+0x28>
 8009158:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 800915c:	b113      	cbz	r3, 8009164 <ArtNet4Node::Print()+0x1c>
 800915e:	4805      	ldr	r0, [pc, #20]	; (8009174 <ArtNet4Node::Print()+0x2c>)
 8009160:	f00a fef2 	bl	8013f48 <printf>
 8009164:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 8009168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800916c:	f003 b8da 	b.w	800c324 <E131Bridge::Print()>
 8009170:	bd10      	pop	{r4, pc}
 8009172:	bf00      	nop
 8009174:	080165a8 	stmdaeq	r1, {r3, r5, r7, r8, sl, sp, lr}

08009178 <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>:
 8009178:	61c1      	str	r1, [r0, #28]
 800917a:	4770      	bx	lr

0800917c <strncpy.isra.0>:
 800917c:	3901      	subs	r1, #1
 800917e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009182:	b92b      	cbnz	r3, 8009190 <strncpy.isra.0+0x14>
 8009184:	4402      	add	r2, r0
 8009186:	4290      	cmp	r0, r2
 8009188:	d006      	beq.n	8009198 <strncpy.isra.0+0x1c>
 800918a:	f800 3b01 	strb.w	r3, [r0], #1
 800918e:	e7fa      	b.n	8009186 <strncpy.isra.0+0xa>
 8009190:	3a01      	subs	r2, #1
 8009192:	f800 3b01 	strb.w	r3, [r0], #1
 8009196:	d1f2      	bne.n	800917e <strncpy.isra.0+0x2>
 8009198:	4770      	bx	lr
	...

0800919c <ArtNetNode::Start()>:
 800919c:	b570      	push	{r4, r5, r6, lr}
 800919e:	4d1d      	ldr	r5, [pc, #116]	; (8009214 <ArtNetNode::Start()+0x78>)
 80091a0:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
 80091a4:	682a      	ldr	r2, [r5, #0]
 80091a6:	f023 0302 	bic.w	r3, r3, #2
 80091aa:	7851      	ldrb	r1, [r2, #1]
 80091ac:	4604      	mov	r4, r0
 80091ae:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80091b2:	b25b      	sxtb	r3, r3
 80091b4:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 80091b8:	7812      	ldrb	r2, [r2, #0]
 80091ba:	f023 0304 	bic.w	r3, r3, #4
 80091be:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80091c2:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 80091c6:	f001 f8d5 	bl	800a374 <ArtNetNode::FillPollReply()>
 80091ca:	f641 1136 	movw	r1, #6454	; 0x1936
 80091ce:	6828      	ldr	r0, [r5, #0]
 80091d0:	f007 fe10 	bl	8010df4 <Network::Begin(unsigned short)>
 80091d4:	2302      	movs	r3, #2
 80091d6:	f884 36d5 	strb.w	r3, [r4, #1749]	; 0x6d5
 80091da:	6963      	ldr	r3, [r4, #20]
 80091dc:	6060      	str	r0, [r4, #4]
 80091de:	b16b      	cbz	r3, 80091fc <ArtNetNode::Start()+0x60>
 80091e0:	2500      	movs	r5, #0
 80091e2:	f504 66ef 	add.w	r6, r4, #1912	; 0x778
 80091e6:	012b      	lsls	r3, r5, #4
 80091e8:	5cf3      	ldrb	r3, [r6, r3]
 80091ea:	b123      	cbz	r3, 80091f6 <ArtNetNode::Start()+0x5a>
 80091ec:	6960      	ldr	r0, [r4, #20]
 80091ee:	4629      	mov	r1, r5
 80091f0:	6803      	ldr	r3, [r0, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	4798      	blx	r3
 80091f6:	3501      	adds	r5, #1
 80091f8:	2d04      	cmp	r5, #4
 80091fa:	d1f4      	bne.n	80091e6 <ArtNetNode::Start()+0x4a>
 80091fc:	4b06      	ldr	r3, [pc, #24]	; (8009218 <ArtNetNode::Start()+0x7c>)
 80091fe:	2102      	movs	r1, #2
 8009200:	6818      	ldr	r0, [r3, #0]
 8009202:	f00a f9c5 	bl	8013590 <LedBlink::SetMode(ledblink::Mode)>
 8009206:	4620      	mov	r0, r4
 8009208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800920c:	2100      	movs	r1, #0
 800920e:	f001 b923 	b.w	800a458 <ArtNetNode::SendPollRelply(bool)>
 8009212:	bf00      	nop
 8009214:	20009ff4 	strdcs	r9, [r0], -r4
 8009218:	2000a718 	andcs	sl, r0, r8, lsl r7

0800921c <ArtNetNode::Stop()>:
 800921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009220:	2500      	movs	r5, #0
 8009222:	4604      	mov	r4, r0
 8009224:	4606      	mov	r6, r0
 8009226:	46a9      	mov	r9, r5
 8009228:	f04f 0a01 	mov.w	sl, #1
 800922c:	4f1f      	ldr	r7, [pc, #124]	; (80092ac <ArtNetNode::Stop()+0x90>)
 800922e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80092b0 <ArtNetNode::Stop()+0x94>
 8009232:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 8009236:	b97b      	cbnz	r3, 8009258 <ArtNetNode::Stop()+0x3c>
 8009238:	68a0      	ldr	r0, [r4, #8]
 800923a:	b118      	cbz	r0, 8009244 <ArtNetNode::Stop()+0x28>
 800923c:	6803      	ldr	r3, [r0, #0]
 800923e:	4629      	mov	r1, r5
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	4798      	blx	r3
 8009244:	f8d8 3000 	ldr.w	r3, [r8]
 8009248:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800924c:	07db      	lsls	r3, r3, #31
 800924e:	bf58      	it	pl
 8009250:	f8c8 a000 	strpl.w	sl, [r8]
 8009254:	f886 9705 	strb.w	r9, [r6, #1797]	; 0x705
 8009258:	3501      	adds	r5, #1
 800925a:	2d04      	cmp	r5, #4
 800925c:	f106 0624 	add.w	r6, r6, #36	; 0x24
 8009260:	f207 6704 	addw	r7, r7, #1540	; 0x604
 8009264:	d1e5      	bne.n	8009232 <ArtNetNode::Stop()+0x16>
 8009266:	6963      	ldr	r3, [r4, #20]
 8009268:	b16b      	cbz	r3, 8009286 <ArtNetNode::Stop()+0x6a>
 800926a:	2500      	movs	r5, #0
 800926c:	f504 66ef 	add.w	r6, r4, #1912	; 0x778
 8009270:	012b      	lsls	r3, r5, #4
 8009272:	5cf3      	ldrb	r3, [r6, r3]
 8009274:	b123      	cbz	r3, 8009280 <ArtNetNode::Stop()+0x64>
 8009276:	6960      	ldr	r0, [r4, #20]
 8009278:	4629      	mov	r1, r5
 800927a:	6803      	ldr	r3, [r0, #0]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	4798      	blx	r3
 8009280:	3501      	adds	r5, #1
 8009282:	2d04      	cmp	r5, #4
 8009284:	d1f4      	bne.n	8009270 <ArtNetNode::Stop()+0x54>
 8009286:	4b0b      	ldr	r3, [pc, #44]	; (80092b4 <ArtNetNode::Stop()+0x98>)
 8009288:	2100      	movs	r1, #0
 800928a:	6818      	ldr	r0, [r3, #0]
 800928c:	f00a f980 	bl	8013590 <LedBlink::SetMode(ledblink::Mode)>
 8009290:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009298:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800929c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80092a0:	2300      	movs	r3, #0
 80092a2:	f884 36d5 	strb.w	r3, [r4, #1749]	; 0x6d5
 80092a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092aa:	bf00      	nop
 80092ac:	20000100 	andcs	r0, r0, r0, lsl #2
 80092b0:	200000fc 	strdcs	r0, [r0], -ip
 80092b4:	2000a718 	andcs	sl, r0, r8, lsl r7

080092b8 <ArtNetNode::SetShortName(char const*)>:
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	f100 0542 	add.w	r5, r0, #66	; 0x42
 80092be:	4604      	mov	r4, r0
 80092c0:	2211      	movs	r2, #17
 80092c2:	4628      	mov	r0, r5
 80092c4:	f7ff ff5a 	bl	800917c <strncpy.isra.0>
 80092c8:	2300      	movs	r3, #0
 80092ca:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 80092ce:	462b      	mov	r3, r5
 80092d0:	f104 0254 	add.w	r2, r4, #84	; 0x54
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d111      	bne.n	80092fc <ArtNetNode::SetShortName(char const*)+0x44>
 80092d8:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d112      	bne.n	8009306 <ArtNetNode::SetShortName(char const*)+0x4e>
 80092e0:	6a20      	ldr	r0, [r4, #32]
 80092e2:	b118      	cbz	r0, 80092ec <ArtNetNode::SetShortName(char const*)+0x34>
 80092e4:	6803      	ldr	r3, [r0, #0]
 80092e6:	4629      	mov	r1, r5
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	4798      	blx	r3
 80092ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80092ee:	b150      	cbz	r0, 8009306 <ArtNetNode::SetShortName(char const*)+0x4e>
 80092f0:	6803      	ldr	r3, [r0, #0]
 80092f2:	4629      	mov	r1, r5
 80092f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	4718      	bx	r3
 80092fc:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009300:	f883 154b 	strb.w	r1, [r3, #1355]	; 0x54b
 8009304:	e7e6      	b.n	80092d4 <ArtNetNode::SetShortName(char const*)+0x1c>
 8009306:	bd70      	pop	{r4, r5, r6, pc}

08009308 <ArtNetNode::SetLongName(char const*)>:
 8009308:	b570      	push	{r4, r5, r6, lr}
 800930a:	f100 0554 	add.w	r5, r0, #84	; 0x54
 800930e:	4604      	mov	r4, r0
 8009310:	223f      	movs	r2, #63	; 0x3f
 8009312:	4628      	mov	r0, r5
 8009314:	f7ff ff32 	bl	800917c <strncpy.isra.0>
 8009318:	2300      	movs	r3, #0
 800931a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
 800931e:	462b      	mov	r3, r5
 8009320:	f104 0294 	add.w	r2, r4, #148	; 0x94
 8009324:	4293      	cmp	r3, r2
 8009326:	d111      	bne.n	800934c <ArtNetNode::SetLongName(char const*)+0x44>
 8009328:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 800932c:	2b02      	cmp	r3, #2
 800932e:	d112      	bne.n	8009356 <ArtNetNode::SetLongName(char const*)+0x4e>
 8009330:	6a20      	ldr	r0, [r4, #32]
 8009332:	b118      	cbz	r0, 800933c <ArtNetNode::SetLongName(char const*)+0x34>
 8009334:	6803      	ldr	r3, [r0, #0]
 8009336:	4629      	mov	r1, r5
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	4798      	blx	r3
 800933c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800933e:	b150      	cbz	r0, 8009356 <ArtNetNode::SetLongName(char const*)+0x4e>
 8009340:	6803      	ldr	r3, [r0, #0]
 8009342:	4629      	mov	r1, r5
 8009344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	4718      	bx	r3
 800934c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009350:	f883 154b 	strb.w	r1, [r3, #1355]	; 0x54b
 8009354:	e7e6      	b.n	8009324 <ArtNetNode::SetLongName(char const*)+0x1c>
 8009356:	bd70      	pop	{r4, r5, r6, pc}

08009358 <ArtNetNode::ArtNetNode(unsigned char)>:
 8009358:	2300      	movs	r3, #0
 800935a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800935e:	2901      	cmp	r1, #1
 8009360:	bf28      	it	cs
 8009362:	2101      	movcs	r1, #1
 8009364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009366:	4604      	mov	r4, r0
 8009368:	e9c0 2301 	strd	r2, r3, [r0, #4]
 800936c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009370:	4a41      	ldr	r2, [pc, #260]	; (8009478 <ArtNetNode::ArtNetNode(unsigned char)+0x120>)
 8009372:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8009376:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800937a:	7001      	strb	r1, [r0, #0]
 800937c:	6010      	str	r0, [r2, #0]
 800937e:	b085      	sub	sp, #20
 8009380:	6243      	str	r3, [r0, #36]	; 0x24
 8009382:	f8c0 3664 	str.w	r3, [r0, #1636]	; 0x664
 8009386:	f8c0 3668 	str.w	r3, [r0, #1640]	; 0x668
 800938a:	f880 366e 	strb.w	r3, [r0, #1646]	; 0x66e
 800938e:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8009392:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
 8009396:	428a      	cmp	r2, r1
 8009398:	d15f      	bne.n	800945a <ArtNetNode::ArtNetNode(unsigned char)+0x102>
 800939a:	4b38      	ldr	r3, [pc, #224]	; (800947c <ArtNetNode::ArtNetNode(unsigned char)+0x124>)
 800939c:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80093a0:	6818      	ldr	r0, [r3, #0]
 80093a2:	6903      	ldr	r3, [r0, #16]
 80093a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80093a6:	6982      	ldr	r2, [r0, #24]
 80093a8:	ea63 0302 	orn	r3, r3, r2
 80093ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093ae:	6363      	str	r3, [r4, #52]	; 0x34
 80093b0:	f007 fd26 	bl	8010e00 <Network::MacAddressCopyTo(unsigned char*)>
 80093b4:	23d0      	movs	r3, #208	; 0xd0
 80093b6:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80093ba:	f244 0318 	movw	r3, #16408	; 0x4018
 80093be:	2100      	movs	r1, #0
 80093c0:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 80093c4:	f204 62e4 	addw	r2, r4, #1764	; 0x6e4
 80093c8:	f504 63d8 	add.w	r3, r4, #1728	; 0x6c0
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d147      	bne.n	8009460 <ArtNetNode::ArtNetNode(unsigned char)+0x108>
 80093d0:	f240 1201 	movw	r2, #257	; 0x101
 80093d4:	f8a4 26d4 	strh.w	r2, [r4, #1748]	; 0x6d4
 80093d8:	f242 7210 	movw	r2, #10000	; 0x2710
 80093dc:	2500      	movs	r5, #0
 80093de:	2708      	movs	r7, #8
 80093e0:	f8c4 26cc 	str.w	r2, [r4, #1740]	; 0x6cc
 80093e4:	f204 7174 	addw	r1, r4, #1908	; 0x774
 80093e8:	f204 76b4 	addw	r6, r4, #1972	; 0x7b4
 80093ec:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80093f0:	4283      	cmp	r3, r0
 80093f2:	d13b      	bne.n	800946c <ArtNetNode::ArtNetNode(unsigned char)+0x114>
 80093f4:	460a      	mov	r2, r1
 80093f6:	f101 0310 	add.w	r3, r1, #16
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d139      	bne.n	8009472 <ArtNetNode::ArtNetNode(unsigned char)+0x11a>
 80093fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009400:	4296      	cmp	r6, r2
 8009402:	608b      	str	r3, [r1, #8]
 8009404:	70cf      	strb	r7, [r1, #3]
 8009406:	d12e      	bne.n	8009466 <ArtNetNode::ArtNetNode(unsigned char)+0x10e>
 8009408:	4620      	mov	r0, r4
 800940a:	491d      	ldr	r1, [pc, #116]	; (8009480 <ArtNetNode::ArtNetNode(unsigned char)+0x128>)
 800940c:	f7ff ff54 	bl	80092b8 <ArtNetNode::SetShortName(char const*)>
 8009410:	4b1c      	ldr	r3, [pc, #112]	; (8009484 <ArtNetNode::ArtNetNode(unsigned char)+0x12c>)
 8009412:	f204 657f 	addw	r5, r4, #1663	; 0x67f
 8009416:	9302      	str	r3, [sp, #8]
 8009418:	2304      	movs	r3, #4
 800941a:	9301      	str	r3, [sp, #4]
 800941c:	4b1a      	ldr	r3, [pc, #104]	; (8009488 <ArtNetNode::ArtNetNode(unsigned char)+0x130>)
 800941e:	4a1b      	ldr	r2, [pc, #108]	; (800948c <ArtNetNode::ArtNetNode(unsigned char)+0x134>)
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	2140      	movs	r1, #64	; 0x40
 8009424:	4b1a      	ldr	r3, [pc, #104]	; (8009490 <ArtNetNode::ArtNetNode(unsigned char)+0x138>)
 8009426:	4628      	mov	r0, r5
 8009428:	f00a fdb6 	bl	8013f98 <snprintf>
 800942c:	4629      	mov	r1, r5
 800942e:	4620      	mov	r0, r4
 8009430:	f7ff ff6a 	bl	8009308 <ArtNetNode::SetLongName(char const*)>
 8009434:	4b17      	ldr	r3, [pc, #92]	; (8009494 <ArtNetNode::ArtNetNode(unsigned char)+0x13c>)
 8009436:	f204 606f 	addw	r0, r4, #1647	; 0x66f
 800943a:	781a      	ldrb	r2, [r3, #0]
 800943c:	4916      	ldr	r1, [pc, #88]	; (8009498 <ArtNetNode::ArtNetNode(unsigned char)+0x140>)
 800943e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8009442:	785b      	ldrb	r3, [r3, #1]
 8009444:	220f      	movs	r2, #15
 8009446:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800944a:	f7ff fe97 	bl	800917c <strncpy.isra.0>
 800944e:	2300      	movs	r3, #0
 8009450:	4620      	mov	r0, r4
 8009452:	f884 367e 	strb.w	r3, [r4, #1662]	; 0x67e
 8009456:	b005      	add	sp, #20
 8009458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800945a:	f802 3b01 	strb.w	r3, [r2], #1
 800945e:	e79a      	b.n	8009396 <ArtNetNode::ArtNetNode(unsigned char)+0x3e>
 8009460:	f803 1b01 	strb.w	r1, [r3], #1
 8009464:	e7b2      	b.n	80093cc <ArtNetNode::ArtNetNode(unsigned char)+0x74>
 8009466:	4603      	mov	r3, r0
 8009468:	4611      	mov	r1, r2
 800946a:	e7bf      	b.n	80093ec <ArtNetNode::ArtNetNode(unsigned char)+0x94>
 800946c:	f803 5b01 	strb.w	r5, [r3], #1
 8009470:	e7be      	b.n	80093f0 <ArtNetNode::ArtNetNode(unsigned char)+0x98>
 8009472:	f802 5b01 	strb.w	r5, [r2], #1
 8009476:	e7c0      	b.n	80093fa <ArtNetNode::ArtNetNode(unsigned char)+0xa2>
 8009478:	20000d08 	andcs	r0, r0, r8, lsl #26
 800947c:	20009ff4 	strdcs	r9, [r0], -r4
 8009480:	0801666a 	stmdaeq	r1, {r1, r3, r5, r6, r9, sl, sp, lr}
 8009484:	08016645 	stmdaeq	r1, {r0, r2, r6, r9, sl, sp, lr}
 8009488:	08016662 	stmdaeq	r1, {r1, r5, r6, r9, sl, sp, lr}
 800948c:	08016639 	stmdaeq	r1, {r0, r3, r4, r5, r9, sl, sp, lr}
 8009490:	0801662f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, sl, sp, lr}
 8009494:	0801692b 	stmdaeq	r1, {r0, r1, r3, r5, r8, fp, sp, lr}
 8009498:	08016659 	stmdaeq	r1, {r0, r3, r4, r6, r9, sl, sp, lr}

0800949c <ArtNetNode::SetOemValue(unsigned char const*)>:
 800949c:	780b      	ldrb	r3, [r1, #0]
 800949e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80094a2:	784b      	ldrb	r3, [r1, #1]
 80094a4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80094a8:	4770      	bx	lr
	...

080094ac <ArtNetNode::SetNetworkDataLossCondition()>:
 80094ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094b0:	2400      	movs	r4, #0
 80094b2:	4606      	mov	r6, r0
 80094b4:	4605      	mov	r5, r0
 80094b6:	46a0      	mov	r8, r4
 80094b8:	46a2      	mov	sl, r4
 80094ba:	4f1a      	ldr	r7, [pc, #104]	; (8009524 <ArtNetNode::SetNetworkDataLossCondition()+0x78>)
 80094bc:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8009528 <ArtNetNode::SetNetworkDataLossCondition()+0x7c>
 80094c0:	f880 46da 	strb.w	r4, [r0, #1754]	; 0x6da
 80094c4:	f880 46d9 	strb.w	r4, [r0, #1753]	; 0x6d9
 80094c8:	7833      	ldrb	r3, [r6, #0]
 80094ca:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 80094ce:	d301      	bcc.n	80094d4 <ArtNetNode::SetNetworkDataLossCondition()+0x28>
 80094d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d4:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 80094d8:	b953      	cbnz	r3, 80094f0 <ArtNetNode::SetNetworkDataLossCondition()+0x44>
 80094da:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 80094de:	b13b      	cbz	r3, 80094f0 <ArtNetNode::SetNetworkDataLossCondition()+0x44>
 80094e0:	68b0      	ldr	r0, [r6, #8]
 80094e2:	b118      	cbz	r0, 80094ec <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 80094e4:	6803      	ldr	r3, [r0, #0]
 80094e6:	4621      	mov	r1, r4
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	4798      	blx	r3
 80094ec:	f885 8705 	strb.w	r8, [r5, #1797]	; 0x705
 80094f0:	f895 36e7 	ldrb.w	r3, [r5, #1767]	; 0x6e7
 80094f4:	f8c5 86f0 	str.w	r8, [r5, #1776]	; 0x6f0
 80094f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094fc:	f885 36e7 	strb.w	r3, [r5, #1767]	; 0x6e7
 8009500:	f8c5 86f8 	str.w	r8, [r5, #1784]	; 0x6f8
 8009504:	f8d9 3000 	ldr.w	r3, [r9]
 8009508:	f8c7 a600 	str.w	sl, [r7, #1536]	; 0x600
 800950c:	07db      	lsls	r3, r3, #31
 800950e:	bf58      	it	pl
 8009510:	2301      	movpl	r3, #1
 8009512:	f104 0401 	add.w	r4, r4, #1
 8009516:	bf58      	it	pl
 8009518:	f8c9 3000 	strpl.w	r3, [r9]
 800951c:	f207 6704 	addw	r7, r7, #1540	; 0x604
 8009520:	3524      	adds	r5, #36	; 0x24
 8009522:	e7d1      	b.n	80094c8 <ArtNetNode::SetNetworkDataLossCondition()+0x1c>
 8009524:	20000100 	andcs	r0, r0, r0, lsl #2
 8009528:	200000fc 	strdcs	r0, [r0], -ip

0800952c <ArtNetNode::GetType()>:
 800952c:	f8b0 3570 	ldrh.w	r3, [r0, #1392]	; 0x570
 8009530:	b530      	push	{r4, r5, lr}
 8009532:	2b0b      	cmp	r3, #11
 8009534:	d91d      	bls.n	8009572 <ArtNetNode::GetType()+0x46>
 8009536:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 800953a:	b9d3      	cbnz	r3, 8009572 <ArtNetNode::GetType()+0x46>
 800953c:	f890 20ab 	ldrb.w	r2, [r0, #171]	; 0xab
 8009540:	2a0e      	cmp	r2, #14
 8009542:	d10d      	bne.n	8009560 <ArtNetNode::GetType()+0x34>
 8009544:	4a0c      	ldr	r2, [pc, #48]	; (8009578 <ArtNetNode::GetType()+0x4c>)
 8009546:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 800954a:	f100 01a8 	add.w	r1, r0, #168	; 0xa8
 800954e:	428b      	cmp	r3, r1
 8009550:	d109      	bne.n	8009566 <ArtNetNode::GetType()+0x3a>
 8009552:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
 8009556:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
 800955a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800955e:	b29b      	uxth	r3, r3
 8009560:	f8a0 3572 	strh.w	r3, [r0, #1394]	; 0x572
 8009564:	bd30      	pop	{r4, r5, pc}
 8009566:	f813 5b01 	ldrb.w	r5, [r3], #1
 800956a:	f812 4b01 	ldrb.w	r4, [r2], #1
 800956e:	42a5      	cmp	r5, r4
 8009570:	d0ed      	beq.n	800954e <ArtNetNode::GetType()+0x22>
 8009572:	2300      	movs	r3, #0
 8009574:	e7f4      	b.n	8009560 <ArtNetNode::GetType()+0x34>
 8009576:	bf00      	nop
 8009578:	08016464 	stmdaeq	r1, {r2, r5, r6, sl, sp, lr}

0800957c <ArtNetNode::Run()>:
 800957c:	b530      	push	{r4, r5, lr}
 800957e:	b085      	sub	sp, #20
 8009580:	f10d 030e 	add.w	r3, sp, #14
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	4604      	mov	r4, r0
 8009588:	f200 536c 	addw	r3, r0, #1388	; 0x56c
 800958c:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
 8009590:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8009594:	7900      	ldrb	r0, [r0, #4]
 8009596:	f006 ff0b 	bl	80103b0 <udp_recv>
 800959a:	4b64      	ldr	r3, [pc, #400]	; (800972c <ArtNetNode::Run()+0x1b0>)
 800959c:	681d      	ldr	r5, [r3, #0]
 800959e:	f8c4 5664 	str.w	r5, [r4, #1636]	; 0x664
 80095a2:	2800      	cmp	r0, #0
 80095a4:	d143      	bne.n	800962e <ArtNetNode::Run()+0xb2>
 80095a6:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
 80095aa:	b13b      	cbz	r3, 80095bc <ArtNetNode::Run()+0x40>
 80095ac:	f8d4 2668 	ldr.w	r2, [r4, #1640]	; 0x668
 80095b0:	1aad      	subs	r5, r5, r2
 80095b2:	42ab      	cmp	r3, r5
 80095b4:	d802      	bhi.n	80095bc <ArtNetNode::Run()+0x40>
 80095b6:	4620      	mov	r0, r4
 80095b8:	f7ff ff78 	bl	80094ac <ArtNetNode::SetNetworkDataLossCondition()>
 80095bc:	f894 36d6 	ldrb.w	r3, [r4, #1750]	; 0x6d6
 80095c0:	b16b      	cbz	r3, 80095de <ArtNetNode::Run()+0x62>
 80095c2:	69e0      	ldr	r0, [r4, #28]
 80095c4:	f894 56db 	ldrb.w	r5, [r4, #1755]	; 0x6db
 80095c8:	b120      	cbz	r0, 80095d4 <ArtNetNode::Run()+0x58>
 80095ca:	6803      	ldr	r3, [r0, #0]
 80095cc:	695b      	ldr	r3, [r3, #20]
 80095ce:	4798      	blx	r3
 80095d0:	4305      	orrs	r5, r0
 80095d2:	b2ed      	uxtb	r5, r5
 80095d4:	b11d      	cbz	r5, 80095de <ArtNetNode::Run()+0x62>
 80095d6:	2100      	movs	r1, #0
 80095d8:	4620      	mov	r0, r4
 80095da:	f000 ff3d 	bl	800a458 <ArtNetNode::SendPollRelply(bool)>
 80095de:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 80095e2:	f8d4 2668 	ldr.w	r2, [r4, #1640]	; 0x668
 80095e6:	1a9b      	subs	r3, r3, r2
 80095e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095ec:	d305      	bcc.n	80095fa <ArtNetNode::Run()+0x7e>
 80095ee:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 80095f2:	f023 0302 	bic.w	r3, r3, #2
 80095f6:	f884 36dd 	strb.w	r3, [r4, #1757]	; 0x6dd
 80095fa:	6963      	ldr	r3, [r4, #20]
 80095fc:	b113      	cbz	r3, 8009604 <ArtNetNode::Run()+0x88>
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 fd48 	bl	800a094 <ArtNetNode::HandleDmxIn()>
 8009604:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009608:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800960c:	2bc0      	cmp	r3, #192	; 0xc0
 800960e:	d10c      	bne.n	800962a <ArtNetNode::Run()+0xae>
 8009610:	4b47      	ldr	r3, [pc, #284]	; (8009730 <ArtNetNode::Run()+0x1b4>)
 8009612:	6818      	ldr	r0, [r3, #0]
 8009614:	6843      	ldr	r3, [r0, #4]
 8009616:	2b04      	cmp	r3, #4
 8009618:	d007      	beq.n	800962a <ArtNetNode::Run()+0xae>
 800961a:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 800961e:	2b00      	cmp	r3, #0
 8009620:	f000 8082 	beq.w	8009728 <ArtNetNode::Run()+0x1ac>
 8009624:	2103      	movs	r1, #3
 8009626:	f009 ffb3 	bl	8013590 <LedBlink::SetMode(ledblink::Mode)>
 800962a:	b005      	add	sp, #20
 800962c:	bd30      	pop	{r4, r5, pc}
 800962e:	f8a4 0570 	strh.w	r0, [r4, #1392]	; 0x570
 8009632:	f8c4 5668 	str.w	r5, [r4, #1640]	; 0x668
 8009636:	4620      	mov	r0, r4
 8009638:	f7ff ff78 	bl	800952c <ArtNetNode::GetType()>
 800963c:	f894 36d9 	ldrb.w	r3, [r4, #1753]	; 0x6d9
 8009640:	b143      	cbz	r3, 8009654 <ArtNetNode::Run()+0xd8>
 8009642:	f8d4 36d0 	ldr.w	r3, [r4, #1744]	; 0x6d0
 8009646:	1aed      	subs	r5, r5, r3
 8009648:	f5b5 6f7a 	cmp.w	r5, #4000	; 0xfa0
 800964c:	bf24      	itt	cs
 800964e:	2300      	movcs	r3, #0
 8009650:	f884 36d9 	strbcs.w	r3, [r4, #1753]	; 0x6d9
 8009654:	f8b4 3572 	ldrh.w	r3, [r4, #1394]	; 0x572
 8009658:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 800965c:	d04c      	beq.n	80096f8 <ArtNetNode::Run()+0x17c>
 800965e:	d81d      	bhi.n	800969c <ArtNetNode::Run()+0x120>
 8009660:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 8009664:	d039      	beq.n	80096da <ArtNetNode::Run()+0x15e>
 8009666:	d80c      	bhi.n	8009682 <ArtNetNode::Run()+0x106>
 8009668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800966c:	d031      	beq.n	80096d2 <ArtNetNode::Run()+0x156>
 800966e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009672:	d1c2      	bne.n	80095fa <ArtNetNode::Run()+0x7e>
 8009674:	68a3      	ldr	r3, [r4, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d0bf      	beq.n	80095fa <ArtNetNode::Run()+0x7e>
 800967a:	4620      	mov	r0, r4
 800967c:	f000 fc20 	bl	8009ec0 <ArtNetNode::HandleDmx()>
 8009680:	e7bb      	b.n	80095fa <ArtNetNode::Run()+0x7e>
 8009682:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009686:	d02f      	beq.n	80096e8 <ArtNetNode::Run()+0x16c>
 8009688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800968c:	d1b5      	bne.n	80095fa <ArtNetNode::Run()+0x7e>
 800968e:	6923      	ldr	r3, [r4, #16]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d0b2      	beq.n	80095fa <ArtNetNode::Run()+0x7e>
 8009694:	4620      	mov	r0, r4
 8009696:	f001 f84a 	bl	800a72e <ArtNetNode::HandleTodRequest()>
 800969a:	e7ae      	b.n	80095fa <ArtNetNode::Run()+0x7e>
 800969c:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 80096a0:	d026      	beq.n	80096f0 <ArtNetNode::Run()+0x174>
 80096a2:	d80c      	bhi.n	80096be <ArtNetNode::Run()+0x142>
 80096a4:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 80096a8:	d02e      	beq.n	8009708 <ArtNetNode::Run()+0x18c>
 80096aa:	f5b3 4f17 	cmp.w	r3, #38656	; 0x9700
 80096ae:	d1a4      	bne.n	80095fa <ArtNetNode::Run()+0x7e>
 80096b0:	68e3      	ldr	r3, [r4, #12]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d0a1      	beq.n	80095fa <ArtNetNode::Run()+0x7e>
 80096b6:	4620      	mov	r0, r4
 80096b8:	f001 f91c 	bl	800a8f4 <ArtNetNode::HandleTimeCode()>
 80096bc:	e79d      	b.n	80095fa <ArtNetNode::Run()+0x7e>
 80096be:	f5b3 4f19 	cmp.w	r3, #39168	; 0x9900
 80096c2:	d029      	beq.n	8009718 <ArtNetNode::Run()+0x19c>
 80096c4:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 80096c8:	d197      	bne.n	80095fa <ArtNetNode::Run()+0x7e>
 80096ca:	4620      	mov	r0, r4
 80096cc:	f000 fd8c 	bl	800a1e8 <ArtNetNode::HandleIpProg()>
 80096d0:	e793      	b.n	80095fa <ArtNetNode::Run()+0x7e>
 80096d2:	4620      	mov	r0, r4
 80096d4:	f000 ff5e 	bl	800a594 <ArtNetNode::HandlePoll()>
 80096d8:	e78f      	b.n	80095fa <ArtNetNode::Run()+0x7e>
 80096da:	68a3      	ldr	r3, [r4, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d08c      	beq.n	80095fa <ArtNetNode::Run()+0x7e>
 80096e0:	4620      	mov	r0, r4
 80096e2:	f001 f8bb 	bl	800a85c <ArtNetNode::HandleSync()>
 80096e6:	e788      	b.n	80095fa <ArtNetNode::Run()+0x7e>
 80096e8:	4620      	mov	r0, r4
 80096ea:	f000 f9d5 	bl	8009a98 <ArtNetNode::HandleAddress()>
 80096ee:	e784      	b.n	80095fa <ArtNetNode::Run()+0x7e>
 80096f0:	4620      	mov	r0, r4
 80096f2:	f001 f905 	bl	800a900 <ArtNetNode::HandleTimeSync()>
 80096f6:	e780      	b.n	80095fa <ArtNetNode::Run()+0x7e>
 80096f8:	6923      	ldr	r3, [r4, #16]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f43f af7d 	beq.w	80095fa <ArtNetNode::Run()+0x7e>
 8009700:	4620      	mov	r0, r4
 8009702:	f000 ffda 	bl	800a6ba <ArtNetNode::HandleTodControl()>
 8009706:	e778      	b.n	80095fa <ArtNetNode::Run()+0x7e>
 8009708:	6923      	ldr	r3, [r4, #16]
 800970a:	2b00      	cmp	r3, #0
 800970c:	f43f af75 	beq.w	80095fa <ArtNetNode::Run()+0x7e>
 8009710:	4620      	mov	r0, r4
 8009712:	f001 f833 	bl	800a77c <ArtNetNode::HandleRdm()>
 8009716:	e770      	b.n	80095fa <ArtNetNode::Run()+0x7e>
 8009718:	69a3      	ldr	r3, [r4, #24]
 800971a:	2b00      	cmp	r3, #0
 800971c:	f43f af6d 	beq.w	80095fa <ArtNetNode::Run()+0x7e>
 8009720:	4620      	mov	r0, r4
 8009722:	f001 feb7 	bl	800b494 <ArtNetNode::HandleTrigger()>
 8009726:	e768      	b.n	80095fa <ArtNetNode::Run()+0x7e>
 8009728:	2102      	movs	r1, #2
 800972a:	e77c      	b.n	8009626 <ArtNetNode::Run()+0xaa>
 800972c:	2000a734 	andcs	sl, r0, r4, lsr r7
 8009730:	2000a718 	andcs	sl, r0, r8, lsl r7

08009734 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
 8009734:	b93b      	cbnz	r3, 8009746 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x12>
 8009736:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800973a:	f8b0 3774 	ldrh.w	r3, [r0, #1908]	; 0x774
 800973e:	8013      	strh	r3, [r2, #0]
 8009740:	f890 0778 	ldrb.w	r0, [r0, #1912]	; 0x778
 8009744:	4770      	bx	lr
 8009746:	2b01      	cmp	r3, #1
 8009748:	bf01      	itttt	eq
 800974a:	2324      	moveq	r3, #36	; 0x24
 800974c:	fb03 0001 	mlaeq	r0, r3, r1, r0
 8009750:	f8b0 36e4 	ldrheq.w	r3, [r0, #1764]	; 0x6e4
 8009754:	f890 06e8 	ldrbeq.w	r0, [r0, #1768]	; 0x6e8
 8009758:	bf0c      	ite	eq
 800975a:	8013      	strheq	r3, [r2, #0]
 800975c:	2000      	movne	r0, #0
 800975e:	4770      	bx	lr

08009760 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
 8009760:	b94b      	cbnz	r3, 8009776 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x16>
 8009762:	2903      	cmp	r1, #3
 8009764:	d810      	bhi.n	8009788 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x28>
 8009766:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800976a:	f890 3776 	ldrb.w	r3, [r0, #1910]	; 0x776
 800976e:	7013      	strb	r3, [r2, #0]
 8009770:	f890 0778 	ldrb.w	r0, [r0, #1912]	; 0x778
 8009774:	4770      	bx	lr
 8009776:	2324      	movs	r3, #36	; 0x24
 8009778:	fb03 0001 	mla	r0, r3, r1, r0
 800977c:	f890 36e6 	ldrb.w	r3, [r0, #1766]	; 0x6e6
 8009780:	7013      	strb	r3, [r2, #0]
 8009782:	f890 06e8 	ldrb.w	r0, [r0, #1768]	; 0x6e8
 8009786:	4770      	bx	lr
 8009788:	4618      	mov	r0, r3
 800978a:	4770      	bx	lr

0800978c <ArtNetNode::GetSubnetSwitch(unsigned int) const>:
 800978c:	4408      	add	r0, r1
 800978e:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8009792:	4770      	bx	lr

08009794 <ArtNetNode::GetNetSwitch(unsigned int) const>:
 8009794:	4408      	add	r0, r1
 8009796:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 800979a:	4770      	bx	lr

0800979c <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
 800979c:	4402      	add	r2, r0
 800979e:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 80097a2:	f892 203f 	ldrb.w	r2, [r2, #63]	; 0x3f
 80097a6:	021b      	lsls	r3, r3, #8
 80097a8:	0112      	lsls	r2, r2, #4
 80097aa:	b2d2      	uxtb	r2, r2
 80097ac:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80097b0:	4313      	orrs	r3, r2
 80097b2:	f001 010f 	and.w	r1, r1, #15
 80097b6:	ea43 0001 	orr.w	r0, r3, r1
 80097ba:	4770      	bx	lr

080097bc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
 80097bc:	2903      	cmp	r1, #3
 80097be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097c2:	4604      	mov	r4, r0
 80097c4:	460d      	mov	r5, r1
 80097c6:	4617      	mov	r7, r2
 80097c8:	461e      	mov	r6, r3
 80097ca:	f200 80a3 	bhi.w	8009914 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x158>
 80097ce:	2a02      	cmp	r2, #2
 80097d0:	d121      	bne.n	8009816 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x5a>
 80097d2:	2324      	movs	r3, #36	; 0x24
 80097d4:	fb03 0301 	mla	r3, r3, r1, r0
 80097d8:	f893 26e8 	ldrb.w	r2, [r3, #1768]	; 0x6e8
 80097dc:	b13a      	cbz	r2, 80097ee <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x32>
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
 80097e4:	f890 36de 	ldrb.w	r3, [r0, #1758]	; 0x6de
 80097e8:	3b01      	subs	r3, #1
 80097ea:	f880 36de 	strb.w	r3, [r0, #1758]	; 0x6de
 80097ee:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 80097f2:	f895 3778 	ldrb.w	r3, [r5, #1912]	; 0x778
 80097f6:	b90b      	cbnz	r3, 80097fc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x40>
 80097f8:	2000      	movs	r0, #0
 80097fa:	e00a      	b.n	8009812 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>
 80097fc:	2308      	movs	r3, #8
 80097fe:	2000      	movs	r0, #0
 8009800:	f885 3777 	strb.w	r3, [r5, #1911]	; 0x777
 8009804:	f885 0778 	strb.w	r0, [r5, #1912]	; 0x778
 8009808:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 800980c:	3b01      	subs	r3, #1
 800980e:	f884 36df 	strb.w	r3, [r4, #1759]	; 0x6df
 8009812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009816:	2a00      	cmp	r2, #0
 8009818:	d13b      	bne.n	8009892 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xd6>
 800981a:	eb00 1801 	add.w	r8, r0, r1, lsl #4
 800981e:	f898 3778 	ldrb.w	r3, [r8, #1912]	; 0x778
 8009822:	b923      	cbnz	r3, 800982e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x72>
 8009824:	f890 36df 	ldrb.w	r3, [r0, #1759]	; 0x6df
 8009828:	3301      	adds	r3, #1
 800982a:	f880 36df 	strb.w	r3, [r0, #1759]	; 0x6df
 800982e:	2301      	movs	r3, #1
 8009830:	f04f 0900 	mov.w	r9, #0
 8009834:	f888 3778 	strb.w	r3, [r8, #1912]	; 0x778
 8009838:	f006 030f 	and.w	r3, r6, #15
 800983c:	464a      	mov	r2, r9
 800983e:	f888 3776 	strb.w	r3, [r8, #1910]	; 0x776
 8009842:	4631      	mov	r1, r6
 8009844:	4620      	mov	r0, r4
 8009846:	f888 9777 	strb.w	r9, [r8, #1911]	; 0x777
 800984a:	f7ff ffa7 	bl	800979c <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800984e:	2324      	movs	r3, #36	; 0x24
 8009850:	fb03 4305 	mla	r3, r3, r5, r4
 8009854:	f8a8 0774 	strh.w	r0, [r8, #1908]	; 0x774
 8009858:	f893 26e8 	ldrb.w	r2, [r3, #1768]	; 0x6e8
 800985c:	b132      	cbz	r2, 800986c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800985e:	f883 96e8 	strb.w	r9, [r3, #1768]	; 0x6e8
 8009862:	f894 36de 	ldrb.w	r3, [r4, #1758]	; 0x6de
 8009866:	3b01      	subs	r3, #1
 8009868:	f884 36de 	strb.w	r3, [r4, #1758]	; 0x6de
 800986c:	69e0      	ldr	r0, [r4, #28]
 800986e:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8009872:	2800      	cmp	r0, #0
 8009874:	d042      	beq.n	80098fc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x140>
 8009876:	2b02      	cmp	r3, #2
 8009878:	d13b      	bne.n	80098f2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x136>
 800987a:	6a20      	ldr	r0, [r4, #32]
 800987c:	2800      	cmp	r0, #0
 800987e:	d143      	bne.n	8009908 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x14c>
 8009880:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009882:	2800      	cmp	r0, #0
 8009884:	d0b8      	beq.n	80097f8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 8009886:	6803      	ldr	r3, [r0, #0]
 8009888:	4632      	mov	r2, r6
 800988a:	4629      	mov	r1, r5
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	4798      	blx	r3
 8009890:	e7b2      	b.n	80097f8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 8009892:	2a01      	cmp	r2, #1
 8009894:	d1ea      	bne.n	800986c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 8009896:	f04f 0824 	mov.w	r8, #36	; 0x24
 800989a:	fb08 0301 	mla	r3, r8, r1, r0
 800989e:	f893 36e8 	ldrb.w	r3, [r3, #1768]	; 0x6e8
 80098a2:	b923      	cbnz	r3, 80098ae <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xf2>
 80098a4:	f890 36de 	ldrb.w	r3, [r0, #1758]	; 0x6de
 80098a8:	3301      	adds	r3, #1
 80098aa:	f880 36de 	strb.w	r3, [r0, #1758]	; 0x6de
 80098ae:	2301      	movs	r3, #1
 80098b0:	fb08 4805 	mla	r8, r8, r5, r4
 80098b4:	f888 36e8 	strb.w	r3, [r8, #1768]	; 0x6e8
 80098b8:	f006 030f 	and.w	r3, r6, #15
 80098bc:	2200      	movs	r2, #0
 80098be:	f888 36e6 	strb.w	r3, [r8, #1766]	; 0x6e6
 80098c2:	4631      	mov	r1, r6
 80098c4:	4620      	mov	r0, r4
 80098c6:	f7ff ff69 	bl	800979c <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 80098ca:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 80098ce:	f8a8 06e4 	strh.w	r0, [r8, #1764]	; 0x6e4
 80098d2:	f893 2778 	ldrb.w	r2, [r3, #1912]	; 0x778
 80098d6:	2a00      	cmp	r2, #0
 80098d8:	d0c8      	beq.n	800986c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
 80098e0:	2208      	movs	r2, #8
 80098e2:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
 80098e6:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 80098ea:	3b01      	subs	r3, #1
 80098ec:	f884 36df 	strb.w	r3, [r4, #1759]	; 0x6df
 80098f0:	e7bc      	b.n	800986c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 80098f2:	6803      	ldr	r3, [r0, #0]
 80098f4:	463a      	mov	r2, r7
 80098f6:	4629      	mov	r1, r5
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	4798      	blx	r3
 80098fc:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8009900:	2b02      	cmp	r3, #2
 8009902:	f47f af79 	bne.w	80097f8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 8009906:	e7b8      	b.n	800987a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 8009908:	6803      	ldr	r3, [r0, #0]
 800990a:	4632      	mov	r2, r6
 800990c:	4629      	mov	r1, r5
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	4798      	blx	r3
 8009912:	e7b5      	b.n	8009880 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xc4>
 8009914:	f06f 0004 	mvn.w	r0, #4
 8009918:	e77b      	b.n	8009812 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>

0800991a <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
 800991a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800991e:	2524      	movs	r5, #36	; 0x24
 8009920:	4604      	mov	r4, r0
 8009922:	460f      	mov	r7, r1
 8009924:	4616      	mov	r6, r2
 8009926:	1883      	adds	r3, r0, r2
 8009928:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
 800992c:	0093      	lsls	r3, r2, #2
 800992e:	b2db      	uxtb	r3, r3
 8009930:	fb05 0503 	mla	r5, r5, r3, r0
 8009934:	f103 0905 	add.w	r9, r3, #5
 8009938:	f103 0801 	add.w	r8, r3, #1
 800993c:	45c8      	cmp	r8, r9
 800993e:	f105 0524 	add.w	r5, r5, #36	; 0x24
 8009942:	d10c      	bne.n	800995e <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x44>
 8009944:	6a20      	ldr	r0, [r4, #32]
 8009946:	b1a0      	cbz	r0, 8009972 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 8009948:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 800994c:	2b02      	cmp	r3, #2
 800994e:	d110      	bne.n	8009972 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 8009950:	b97e      	cbnz	r6, 8009972 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 8009952:	6803      	ldr	r3, [r0, #0]
 8009954:	4639      	mov	r1, r7
 8009956:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	4718      	bx	r3
 800995e:	f8b5 16c0 	ldrh.w	r1, [r5, #1728]	; 0x6c0
 8009962:	089a      	lsrs	r2, r3, #2
 8009964:	4620      	mov	r0, r4
 8009966:	f7ff ff19 	bl	800979c <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800996a:	4643      	mov	r3, r8
 800996c:	f8a5 06c0 	strh.w	r0, [r5, #1728]	; 0x6c0
 8009970:	e7e2      	b.n	8009938 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x1e>
 8009972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009976 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
 8009976:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800997a:	2524      	movs	r5, #36	; 0x24
 800997c:	4604      	mov	r4, r0
 800997e:	460f      	mov	r7, r1
 8009980:	4616      	mov	r6, r2
 8009982:	1883      	adds	r3, r0, r2
 8009984:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
 8009988:	0093      	lsls	r3, r2, #2
 800998a:	b2db      	uxtb	r3, r3
 800998c:	fb05 0503 	mla	r5, r5, r3, r0
 8009990:	f103 0905 	add.w	r9, r3, #5
 8009994:	f103 0801 	add.w	r8, r3, #1
 8009998:	45c8      	cmp	r8, r9
 800999a:	f105 0524 	add.w	r5, r5, #36	; 0x24
 800999e:	d10c      	bne.n	80099ba <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x44>
 80099a0:	6a20      	ldr	r0, [r4, #32]
 80099a2:	b1a0      	cbz	r0, 80099ce <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 80099a4:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	d110      	bne.n	80099ce <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 80099ac:	b97e      	cbnz	r6, 80099ce <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 80099ae:	6803      	ldr	r3, [r0, #0]
 80099b0:	4639      	mov	r1, r7
 80099b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b6:	695b      	ldr	r3, [r3, #20]
 80099b8:	4718      	bx	r3
 80099ba:	f8b5 16c0 	ldrh.w	r1, [r5, #1728]	; 0x6c0
 80099be:	089a      	lsrs	r2, r3, #2
 80099c0:	4620      	mov	r0, r4
 80099c2:	f7ff feeb 	bl	800979c <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 80099c6:	4643      	mov	r3, r8
 80099c8:	f8a5 06c0 	strh.w	r0, [r5, #1728]	; 0x6c0
 80099cc:	e7e2      	b.n	8009994 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x1e>
 80099ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080099d2 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
 80099d2:	b570      	push	{r4, r5, r6, lr}
 80099d4:	4616      	mov	r6, r2
 80099d6:	2224      	movs	r2, #36	; 0x24
 80099d8:	fb02 0301 	mla	r3, r2, r1, r0
 80099dc:	fb02 0201 	mla	r2, r2, r1, r0
 80099e0:	f8c3 6700 	str.w	r6, [r3, #1792]	; 0x700
 80099e4:	f893 36e7 	ldrb.w	r3, [r3, #1767]	; 0x6e7
 80099e8:	2e01      	cmp	r6, #1
 80099ea:	bf0c      	ite	eq
 80099ec:	f043 0301 	orreq.w	r3, r3, #1
 80099f0:	f003 03fe 	andne.w	r3, r3, #254	; 0xfe
 80099f4:	f882 36e7 	strb.w	r3, [r2, #1767]	; 0x6e7
 80099f8:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 80099fc:	4605      	mov	r5, r0
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	460c      	mov	r4, r1
 8009a02:	d110      	bne.n	8009a26 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 8009a04:	2903      	cmp	r1, #3
 8009a06:	d80e      	bhi.n	8009a26 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 8009a08:	6a00      	ldr	r0, [r0, #32]
 8009a0a:	b118      	cbz	r0, 8009a14 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x42>
 8009a0c:	6803      	ldr	r3, [r0, #0]
 8009a0e:	4632      	mov	r2, r6
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	4798      	blx	r3
 8009a14:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009a16:	b130      	cbz	r0, 8009a26 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 8009a18:	6803      	ldr	r3, [r0, #0]
 8009a1a:	4632      	mov	r2, r6
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a22:	6a1b      	ldr	r3, [r3, #32]
 8009a24:	4718      	bx	r3
 8009a26:	bd70      	pop	{r4, r5, r6, pc}

08009a28 <ArtNetNode::GetPortProtocol(unsigned int) const>:
 8009a28:	2324      	movs	r3, #36	; 0x24
 8009a2a:	fb03 0001 	mla	r0, r3, r1, r0
 8009a2e:	f8d0 0700 	ldr.w	r0, [r0, #1792]	; 0x700
 8009a32:	4770      	bx	lr

08009a34 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
 8009a34:	b570      	push	{r4, r5, r6, lr}
 8009a36:	4616      	mov	r6, r2
 8009a38:	2224      	movs	r2, #36	; 0x24
 8009a3a:	fb02 0301 	mla	r3, r2, r1, r0
 8009a3e:	fb02 0201 	mla	r2, r2, r1, r0
 8009a42:	f8c3 66fc 	str.w	r6, [r3, #1788]	; 0x6fc
 8009a46:	f893 36e7 	ldrb.w	r3, [r3, #1767]	; 0x6e7
 8009a4a:	2e01      	cmp	r6, #1
 8009a4c:	bf0c      	ite	eq
 8009a4e:	f043 0302 	orreq.w	r3, r3, #2
 8009a52:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 8009a56:	f882 36e7 	strb.w	r3, [r2, #1767]	; 0x6e7
 8009a5a:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 8009a5e:	4605      	mov	r5, r0
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	460c      	mov	r4, r1
 8009a64:	d110      	bne.n	8009a88 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 8009a66:	2903      	cmp	r1, #3
 8009a68:	d80e      	bhi.n	8009a88 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 8009a6a:	6a00      	ldr	r0, [r0, #32]
 8009a6c:	b118      	cbz	r0, 8009a76 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x42>
 8009a6e:	6803      	ldr	r3, [r0, #0]
 8009a70:	4632      	mov	r2, r6
 8009a72:	69db      	ldr	r3, [r3, #28]
 8009a74:	4798      	blx	r3
 8009a76:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009a78:	b130      	cbz	r0, 8009a88 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 8009a7a:	6803      	ldr	r3, [r0, #0]
 8009a7c:	4632      	mov	r2, r6
 8009a7e:	4621      	mov	r1, r4
 8009a80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a84:	69db      	ldr	r3, [r3, #28]
 8009a86:	4718      	bx	r3
 8009a88:	bd70      	pop	{r4, r5, r6, pc}

08009a8a <ArtNetNode::GetMergeMode(unsigned int) const>:
 8009a8a:	2324      	movs	r3, #36	; 0x24
 8009a8c:	fb03 0001 	mla	r0, r3, r1, r0
 8009a90:	f8d0 06fc 	ldr.w	r0, [r0, #1788]	; 0x6fc
 8009a94:	4770      	bx	lr
	...

08009a98 <ArtNetNode::HandleAddress()>:
 8009a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	f880 36d4 	strb.w	r3, [r0, #1748]	; 0x6d4
 8009aa2:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	b133      	cbz	r3, 8009ab8 <ArtNetNode::HandleAddress()+0x20>
 8009aaa:	f100 01ae 	add.w	r1, r0, #174	; 0xae
 8009aae:	f7ff fc03 	bl	80092b8 <ArtNetNode::SetShortName(char const*)>
 8009ab2:	2306      	movs	r3, #6
 8009ab4:	f884 36d4 	strb.w	r3, [r4, #1748]	; 0x6d4
 8009ab8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8009abc:	b13b      	cbz	r3, 8009ace <ArtNetNode::HandleAddress()+0x36>
 8009abe:	4620      	mov	r0, r4
 8009ac0:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
 8009ac4:	f7ff fc20 	bl	8009308 <ArtNetNode::SetLongName(char const*)>
 8009ac8:	2307      	movs	r3, #7
 8009aca:	f884 36d4 	strb.w	r3, [r4, #1748]	; 0x6d4
 8009ace:	f894 50ad 	ldrb.w	r5, [r4, #173]	; 0xad
 8009ad2:	b105      	cbz	r5, 8009ad6 <ArtNetNode::HandleAddress()+0x3e>
 8009ad4:	3d01      	subs	r5, #1
 8009ad6:	f894 1108 	ldrb.w	r1, [r4, #264]	; 0x108
 8009ada:	2900      	cmp	r1, #0
 8009adc:	d13d      	bne.n	8009b5a <ArtNetNode::HandleAddress()+0xc2>
 8009ade:	462a      	mov	r2, r5
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f7ff ff1a 	bl	800991a <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 8009ae6:	f894 10ac 	ldrb.w	r1, [r4, #172]	; 0xac
 8009aea:	2900      	cmp	r1, #0
 8009aec:	d13b      	bne.n	8009b66 <ArtNetNode::HandleAddress()+0xce>
 8009aee:	462a      	mov	r2, r5
 8009af0:	4620      	mov	r0, r4
 8009af2:	f7ff ff40 	bl	8009976 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 8009af6:	00ad      	lsls	r5, r5, #2
 8009af8:	b2ed      	uxtb	r5, r5
 8009afa:	4627      	mov	r7, r4
 8009afc:	462e      	mov	r6, r5
 8009afe:	f504 7882 	add.w	r8, r4, #260	; 0x104
 8009b02:	f504 7984 	add.w	r9, r4, #264	; 0x108
 8009b06:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8009b0c:	d006      	beq.n	8009b1c <ArtNetNode::HandleAddress()+0x84>
 8009b0e:	bb83      	cbnz	r3, 8009b72 <ArtNetNode::HandleAddress()+0xda>
 8009b10:	2301      	movs	r3, #1
 8009b12:	2201      	movs	r2, #1
 8009b14:	4631      	mov	r1, r6
 8009b16:	4620      	mov	r0, r4
 8009b18:	f7ff fe50 	bl	80097bc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8009b1c:	f818 2c05 	ldrb.w	r2, [r8, #-5]
 8009b20:	2a7f      	cmp	r2, #127	; 0x7f
 8009b22:	d005      	beq.n	8009b30 <ArtNetNode::HandleAddress()+0x98>
 8009b24:	bb52      	cbnz	r2, 8009b7c <ArtNetNode::HandleAddress()+0xe4>
 8009b26:	2301      	movs	r3, #1
 8009b28:	4631      	mov	r1, r6
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f7ff fe46 	bl	80097bc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8009b30:	3601      	adds	r6, #1
 8009b32:	45c1      	cmp	r9, r8
 8009b34:	b2f6      	uxtb	r6, r6
 8009b36:	d1e6      	bne.n	8009b06 <ArtNetNode::HandleAddress()+0x6e>
 8009b38:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
 8009b3c:	2913      	cmp	r1, #19
 8009b3e:	d823      	bhi.n	8009b88 <ArtNetNode::HandleAddress()+0xf0>
 8009b40:	290f      	cmp	r1, #15
 8009b42:	f200 80b9 	bhi.w	8009cb8 <ArtNetNode::HandleAddress()+0x220>
 8009b46:	1e4b      	subs	r3, r1, #1
 8009b48:	2b03      	cmp	r3, #3
 8009b4a:	d82d      	bhi.n	8009ba8 <ArtNetNode::HandleAddress()+0x110>
 8009b4c:	3902      	subs	r1, #2
 8009b4e:	2902      	cmp	r1, #2
 8009b50:	d87c      	bhi.n	8009c4c <ArtNetNode::HandleAddress()+0x1b4>
 8009b52:	e8df f001 	tbb	[pc, r1]
 8009b56:	00a5998d 	adceq	r9, r5, sp, lsl #19
 8009b5a:	060f      	lsls	r7, r1, #24
 8009b5c:	d5c3      	bpl.n	8009ae6 <ArtNetNode::HandleAddress()+0x4e>
 8009b5e:	462a      	mov	r2, r5
 8009b60:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8009b64:	e7bc      	b.n	8009ae0 <ArtNetNode::HandleAddress()+0x48>
 8009b66:	060e      	lsls	r6, r1, #24
 8009b68:	d5c5      	bpl.n	8009af6 <ArtNetNode::HandleAddress()+0x5e>
 8009b6a:	462a      	mov	r2, r5
 8009b6c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8009b70:	e7be      	b.n	8009af0 <ArtNetNode::HandleAddress()+0x58>
 8009b72:	0618      	lsls	r0, r3, #24
 8009b74:	d5d2      	bpl.n	8009b1c <ArtNetNode::HandleAddress()+0x84>
 8009b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b7a:	e7ca      	b.n	8009b12 <ArtNetNode::HandleAddress()+0x7a>
 8009b7c:	0611      	lsls	r1, r2, #24
 8009b7e:	d5d7      	bpl.n	8009b30 <ArtNetNode::HandleAddress()+0x98>
 8009b80:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8009b84:	2200      	movs	r2, #0
 8009b86:	e7cf      	b.n	8009b28 <ArtNetNode::HandleAddress()+0x90>
 8009b88:	2973      	cmp	r1, #115	; 0x73
 8009b8a:	d81a      	bhi.n	8009bc2 <ArtNetNode::HandleAddress()+0x12a>
 8009b8c:	296f      	cmp	r1, #111	; 0x6f
 8009b8e:	f200 80a1 	bhi.w	8009cd4 <ArtNetNode::HandleAddress()+0x23c>
 8009b92:	2953      	cmp	r1, #83	; 0x53
 8009b94:	d803      	bhi.n	8009b9e <ArtNetNode::HandleAddress()+0x106>
 8009b96:	294f      	cmp	r1, #79	; 0x4f
 8009b98:	d906      	bls.n	8009ba8 <ArtNetNode::HandleAddress()+0x110>
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	e08d      	b.n	8009cba <ArtNetNode::HandleAddress()+0x222>
 8009b9e:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
 8009ba2:	2b03      	cmp	r3, #3
 8009ba4:	f240 808f 	bls.w	8009cc6 <ArtNetNode::HandleAddress()+0x22e>
 8009ba8:	69e0      	ldr	r0, [r4, #28]
 8009baa:	b120      	cbz	r0, 8009bb6 <ArtNetNode::HandleAddress()+0x11e>
 8009bac:	6803      	ldr	r3, [r0, #0]
 8009bae:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	4798      	blx	r3
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bbc:	2101      	movs	r1, #1
 8009bbe:	f000 bc4b 	b.w	800a458 <ArtNetNode::SendPollRelply(bool)>
 8009bc2:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	2b03      	cmp	r3, #3
 8009bca:	d8ed      	bhi.n	8009ba8 <ArtNetNode::HandleAddress()+0x110>
 8009bcc:	4b44      	ldr	r3, [pc, #272]	; (8009ce0 <ArtNetNode::HandleAddress()+0x248>)
 8009bce:	f001 0103 	and.w	r1, r1, #3
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	440d      	add	r5, r1
 8009bd6:	07d2      	lsls	r2, r2, #31
 8009bd8:	bf5c      	itt	pl
 8009bda:	2201      	movpl	r2, #1
 8009bdc:	601a      	strpl	r2, [r3, #0]
 8009bde:	f240 6204 	movw	r2, #1540	; 0x604
 8009be2:	b2ed      	uxtb	r5, r5
 8009be4:	436a      	muls	r2, r5
 8009be6:	4b3f      	ldr	r3, [pc, #252]	; (8009ce4 <ArtNetNode::HandleAddress()+0x24c>)
 8009be8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009bec:	441a      	add	r2, r3
 8009bee:	4611      	mov	r1, r2
 8009bf0:	2700      	movs	r7, #0
 8009bf2:	68a0      	ldr	r0, [r4, #8]
 8009bf4:	f502 7600 	add.w	r6, r2, #512	; 0x200
 8009bf8:	42b1      	cmp	r1, r6
 8009bfa:	d16d      	bne.n	8009cd8 <ArtNetNode::HandleAddress()+0x240>
 8009bfc:	f240 6104 	movw	r1, #1540	; 0x604
 8009c00:	fb01 3105 	mla	r1, r1, r5, r3
 8009c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c08:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 8009c0c:	6801      	ldr	r1, [r0, #0]
 8009c0e:	690e      	ldr	r6, [r1, #16]
 8009c10:	4629      	mov	r1, r5
 8009c12:	47b0      	blx	r6
 8009c14:	2d03      	cmp	r5, #3
 8009c16:	d8c7      	bhi.n	8009ba8 <ArtNetNode::HandleAddress()+0x110>
 8009c18:	2624      	movs	r6, #36	; 0x24
 8009c1a:	fb06 4605 	mla	r6, r6, r5, r4
 8009c1e:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1c0      	bne.n	8009ba8 <ArtNetNode::HandleAddress()+0x110>
 8009c26:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1bc      	bne.n	8009ba8 <ArtNetNode::HandleAddress()+0x110>
 8009c2e:	68a0      	ldr	r0, [r4, #8]
 8009c30:	4629      	mov	r1, r5
 8009c32:	6803      	ldr	r3, [r0, #0]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	4798      	blx	r3
 8009c38:	2301      	movs	r3, #1
 8009c3a:	f886 3705 	strb.w	r3, [r6, #1797]	; 0x705
 8009c3e:	f896 36e7 	ldrb.w	r3, [r6, #1767]	; 0x6e7
 8009c42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c46:	f886 36e7 	strb.w	r3, [r6, #1767]	; 0x6e7
 8009c4a:	e7ad      	b.n	8009ba8 <ArtNetNode::HandleAddress()+0x110>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	2224      	movs	r2, #36	; 0x24
 8009c50:	f884 36da 	strb.w	r3, [r4, #1754]	; 0x6da
 8009c54:	7823      	ldrb	r3, [r4, #0]
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	fb02 4303 	mla	r3, r2, r3, r4
 8009c5c:	429f      	cmp	r7, r3
 8009c5e:	d0a3      	beq.n	8009ba8 <ArtNetNode::HandleAddress()+0x110>
 8009c60:	f897 26e7 	ldrb.w	r2, [r7, #1767]	; 0x6e7
 8009c64:	3724      	adds	r7, #36	; 0x24
 8009c66:	f022 0208 	bic.w	r2, r2, #8
 8009c6a:	f887 26c3 	strb.w	r2, [r7, #1731]	; 0x6c3
 8009c6e:	e7f5      	b.n	8009c5c <ArtNetNode::HandleAddress()+0x1c4>
 8009c70:	4b1d      	ldr	r3, [pc, #116]	; (8009ce8 <ArtNetNode::HandleAddress()+0x250>)
 8009c72:	2102      	movs	r1, #2
 8009c74:	6818      	ldr	r0, [r3, #0]
 8009c76:	f009 fc8b 	bl	8013590 <LedBlink::SetMode(ledblink::Mode)>
 8009c7a:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009c7e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8009c82:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8009c86:	e78f      	b.n	8009ba8 <ArtNetNode::HandleAddress()+0x110>
 8009c88:	4b17      	ldr	r3, [pc, #92]	; (8009ce8 <ArtNetNode::HandleAddress()+0x250>)
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	6818      	ldr	r0, [r3, #0]
 8009c8e:	f009 fc7f 	bl	8013590 <LedBlink::SetMode(ledblink::Mode)>
 8009c92:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009c96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c9e:	e7f0      	b.n	8009c82 <ArtNetNode::HandleAddress()+0x1ea>
 8009ca0:	4b11      	ldr	r3, [pc, #68]	; (8009ce8 <ArtNetNode::HandleAddress()+0x250>)
 8009ca2:	2104      	movs	r1, #4
 8009ca4:	6818      	ldr	r0, [r3, #0]
 8009ca6:	f009 fc73 	bl	8013590 <LedBlink::SetMode(ledblink::Mode)>
 8009caa:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009cae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cb6:	e7e4      	b.n	8009c82 <ArtNetNode::HandleAddress()+0x1ea>
 8009cb8:	2201      	movs	r2, #1
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f001 0103 	and.w	r1, r1, #3
 8009cc0:	f7ff feb8 	bl	8009a34 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 8009cc4:	e770      	b.n	8009ba8 <ArtNetNode::HandleAddress()+0x110>
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f001 0103 	and.w	r1, r1, #3
 8009cce:	f7ff fe80 	bl	80099d2 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 8009cd2:	e769      	b.n	8009ba8 <ArtNetNode::HandleAddress()+0x110>
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	e7f7      	b.n	8009cc8 <ArtNetNode::HandleAddress()+0x230>
 8009cd8:	f801 7b01 	strb.w	r7, [r1], #1
 8009cdc:	e78c      	b.n	8009bf8 <ArtNetNode::HandleAddress()+0x160>
 8009cde:	bf00      	nop
 8009ce0:	200000fc 	strdcs	r0, [r0], -ip
 8009ce4:	20000100 	andcs	r0, r0, r0, lsl #2
 8009ce8:	2000a718 	andcs	sl, r0, r8, lsl r7

08009cec <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 8009cec:	f240 6304 	movw	r3, #1540	; 0x604
 8009cf0:	fb03 0001 	mla	r0, r3, r1, r0
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	b510      	push	{r4, lr}
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d100      	bne.n	8009cfe <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x12>
 8009cfc:	bd10      	pop	{r4, pc}
 8009cfe:	f810 4b01 	ldrb.w	r4, [r0], #1
 8009d02:	3301      	adds	r3, #1
 8009d04:	f890 11ff 	ldrb.w	r1, [r0, #511]	; 0x1ff
 8009d08:	42a1      	cmp	r1, r4
 8009d0a:	bf38      	it	cc
 8009d0c:	4621      	movcc	r1, r4
 8009d0e:	f880 13ff 	strb.w	r1, [r0, #1023]	; 0x3ff
 8009d12:	e7f1      	b.n	8009cf8 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>

08009d14 <memcpy.isra.0>:
 8009d14:	3801      	subs	r0, #1
 8009d16:	440a      	add	r2, r1
 8009d18:	4291      	cmp	r1, r2
 8009d1a:	d100      	bne.n	8009d1e <memcpy.isra.0+0xa>
 8009d1c:	4770      	bx	lr
 8009d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d22:	f800 3f01 	strb.w	r3, [r0, #1]!
 8009d26:	e7f7      	b.n	8009d18 <memcpy.isra.0+0x4>

08009d28 <lightset::Data::Get()>:
 8009d28:	4b03      	ldr	r3, [pc, #12]	; (8009d38 <lightset::Data::Get()+0x10>)
 8009d2a:	4804      	ldr	r0, [pc, #16]	; (8009d3c <lightset::Data::Get()+0x14>)
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	07d2      	lsls	r2, r2, #31
 8009d30:	bf5c      	itt	pl
 8009d32:	2201      	movpl	r2, #1
 8009d34:	601a      	strpl	r2, [r3, #0]
 8009d36:	4770      	bx	lr
 8009d38:	200000fc 	strdcs	r0, [r0], -ip
 8009d3c:	20000100 	andcs	r0, r0, r0, lsl #2

08009d40 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 8009d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d44:	4615      	mov	r5, r2
 8009d46:	460f      	mov	r7, r1
 8009d48:	4604      	mov	r4, r0
 8009d4a:	f7ff ffed 	bl	8009d28 <lightset::Data::Get()>
 8009d4e:	f240 6304 	movw	r3, #1540	; 0x604
 8009d52:	4606      	mov	r6, r0
 8009d54:	435c      	muls	r4, r3
 8009d56:	eb00 0804 	add.w	r8, r0, r4
 8009d5a:	462a      	mov	r2, r5
 8009d5c:	4639      	mov	r1, r7
 8009d5e:	4640      	mov	r0, r8
 8009d60:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009d64:	f7ff ffd6 	bl	8009d14 <memcpy.isra.0>
 8009d68:	462a      	mov	r2, r5
 8009d6a:	4639      	mov	r1, r7
 8009d6c:	f8c8 5600 	str.w	r5, [r8, #1536]	; 0x600
 8009d70:	1930      	adds	r0, r6, r4
 8009d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d76:	f7ff bfcd 	b.w	8009d14 <memcpy.isra.0>

08009d7a <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 8009d7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d7e:	4680      	mov	r8, r0
 8009d80:	f240 6404 	movw	r4, #1540	; 0x604
 8009d84:	4615      	mov	r5, r2
 8009d86:	460f      	mov	r7, r1
 8009d88:	4699      	mov	r9, r3
 8009d8a:	f7ff ffcd 	bl	8009d28 <lightset::Data::Get()>
 8009d8e:	fb04 f408 	mul.w	r4, r4, r8
 8009d92:	eb00 0a04 	add.w	sl, r0, r4
 8009d96:	4606      	mov	r6, r0
 8009d98:	462a      	mov	r2, r5
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	4650      	mov	r0, sl
 8009d9e:	f7ff ffb9 	bl	8009d14 <memcpy.isra.0>
 8009da2:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
 8009da6:	f1b9 0f00 	cmp.w	r9, #0
 8009daa:	d106      	bne.n	8009dba <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x40>
 8009dac:	462a      	mov	r2, r5
 8009dae:	4641      	mov	r1, r8
 8009db0:	4630      	mov	r0, r6
 8009db2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009db6:	f7ff bf99 	b.w	8009cec <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 8009dba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009dbe:	462a      	mov	r2, r5
 8009dc0:	4639      	mov	r1, r7
 8009dc2:	1930      	adds	r0, r6, r4
 8009dc4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc8:	f7ff bfa4 	b.w	8009d14 <memcpy.isra.0>

08009dcc <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 8009dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dd0:	4616      	mov	r6, r2
 8009dd2:	4699      	mov	r9, r3
 8009dd4:	4680      	mov	r8, r0
 8009dd6:	460f      	mov	r7, r1
 8009dd8:	f7ff ffa6 	bl	8009d28 <lightset::Data::Get()>
 8009ddc:	f240 6404 	movw	r4, #1540	; 0x604
 8009de0:	4605      	mov	r5, r0
 8009de2:	fb04 f408 	mul.w	r4, r4, r8
 8009de6:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8009dea:	4632      	mov	r2, r6
 8009dec:	4639      	mov	r1, r7
 8009dee:	4428      	add	r0, r5
 8009df0:	f7ff ff90 	bl	8009d14 <memcpy.isra.0>
 8009df4:	192b      	adds	r3, r5, r4
 8009df6:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
 8009dfa:	f1b9 0f00 	cmp.w	r9, #0
 8009dfe:	d106      	bne.n	8009e0e <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 8009e00:	4632      	mov	r2, r6
 8009e02:	4641      	mov	r1, r8
 8009e04:	4628      	mov	r0, r5
 8009e06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e0a:	f7ff bf6f 	b.w	8009cec <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 8009e0e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009e12:	4632      	mov	r2, r6
 8009e14:	4639      	mov	r1, r7
 8009e16:	1928      	adds	r0, r5, r4
 8009e18:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e1c:	f7ff bf7a 	b.w	8009d14 <memcpy.isra.0>

08009e20 <ArtNetNode::UpdateMergeStatus(unsigned int)>:
 8009e20:	f890 36da 	ldrb.w	r3, [r0, #1754]	; 0x6da
 8009e24:	b91b      	cbnz	r3, 8009e2e <ArtNetNode::UpdateMergeStatus(unsigned int)+0xe>
 8009e26:	f240 1301 	movw	r3, #257	; 0x101
 8009e2a:	f8a0 36da 	strh.w	r3, [r0, #1754]	; 0x6da
 8009e2e:	2324      	movs	r3, #36	; 0x24
 8009e30:	fb03 0001 	mla	r0, r3, r1, r0
 8009e34:	f890 36e7 	ldrb.w	r3, [r0, #1767]	; 0x6e7
 8009e38:	f043 0308 	orr.w	r3, r3, #8
 8009e3c:	f880 36e7 	strb.w	r3, [r0, #1767]	; 0x6e7
 8009e40:	4770      	bx	lr

08009e42 <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
 8009e42:	2324      	movs	r3, #36	; 0x24
 8009e44:	b530      	push	{r4, r5, lr}
 8009e46:	f242 7510 	movw	r5, #10000	; 0x2710
 8009e4a:	fb03 0301 	mla	r3, r3, r1, r0
 8009e4e:	f8d0 2664 	ldr.w	r2, [r0, #1636]	; 0x664
 8009e52:	f8d3 46ec 	ldr.w	r4, [r3, #1772]	; 0x6ec
 8009e56:	1b14      	subs	r4, r2, r4
 8009e58:	42ac      	cmp	r4, r5
 8009e5a:	d908      	bls.n	8009e6e <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x2c>
 8009e5c:	2400      	movs	r4, #0
 8009e5e:	f8c3 46f0 	str.w	r4, [r3, #1776]	; 0x6f0
 8009e62:	f893 46e7 	ldrb.w	r4, [r3, #1767]	; 0x6e7
 8009e66:	f024 0408 	bic.w	r4, r4, #8
 8009e6a:	f883 46e7 	strb.w	r4, [r3, #1767]	; 0x6e7
 8009e6e:	2324      	movs	r3, #36	; 0x24
 8009e70:	fb03 0101 	mla	r1, r3, r1, r0
 8009e74:	f8d1 36f4 	ldr.w	r3, [r1, #1780]	; 0x6f4
 8009e78:	1ad2      	subs	r2, r2, r3
 8009e7a:	f242 7310 	movw	r3, #10000	; 0x2710
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d908      	bls.n	8009e94 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x52>
 8009e82:	2300      	movs	r3, #0
 8009e84:	f8c1 36f8 	str.w	r3, [r1, #1784]	; 0x6f8
 8009e88:	f891 36e7 	ldrb.w	r3, [r1, #1767]	; 0x6e7
 8009e8c:	f023 0308 	bic.w	r3, r3, #8
 8009e90:	f881 36e7 	strb.w	r3, [r1, #1767]	; 0x6e7
 8009e94:	2124      	movs	r1, #36	; 0x24
 8009e96:	7803      	ldrb	r3, [r0, #0]
 8009e98:	4602      	mov	r2, r0
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	fb01 0303 	mla	r3, r1, r3, r0
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d105      	bne.n	8009eb2 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x70>
 8009ea6:	b919      	cbnz	r1, 8009eb0 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x6e>
 8009ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009eac:	f8a0 36da 	strh.w	r3, [r0, #1754]	; 0x6da
 8009eb0:	bd30      	pop	{r4, r5, pc}
 8009eb2:	f892 46e7 	ldrb.w	r4, [r2, #1767]	; 0x6e7
 8009eb6:	3224      	adds	r2, #36	; 0x24
 8009eb8:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8009ebc:	4321      	orrs	r1, r4
 8009ebe:	e7f0      	b.n	8009ea2 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x60>

08009ec0 <ArtNetNode::HandleDmx()>:
 8009ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec4:	f8b0 70b0 	ldrh.w	r7, [r0, #176]	; 0xb0
 8009ec8:	4604      	mov	r4, r0
 8009eca:	ba7f      	rev16	r7, r7
 8009ecc:	b2bf      	uxth	r7, r7
 8009ece:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8009ed2:	bf28      	it	cs
 8009ed4:	f44f 7700 	movcs.w	r7, #512	; 0x200
 8009ed8:	4605      	mov	r5, r0
 8009eda:	2600      	movs	r6, #0
 8009edc:	f04f 0901 	mov.w	r9, #1
 8009ee0:	f100 08b2 	add.w	r8, r0, #178	; 0xb2
 8009ee4:	7823      	ldrb	r3, [r4, #0]
 8009ee6:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 8009eea:	f080 809f 	bcs.w	800a02c <ArtNetNode::HandleDmx()+0x16c>
 8009eee:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d056      	beq.n	8009fa4 <ArtNetNode::HandleDmx()+0xe4>
 8009ef6:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d152      	bne.n	8009fa4 <ArtNetNode::HandleDmx()+0xe4>
 8009efe:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
 8009f02:	f8b5 36e4 	ldrh.w	r3, [r5, #1764]	; 0x6e4
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d14c      	bne.n	8009fa4 <ArtNetNode::HandleDmx()+0xe4>
 8009f0a:	f895 36e7 	ldrb.w	r3, [r5, #1767]	; 0x6e7
 8009f0e:	f8d5 b6f0 	ldr.w	fp, [r5, #1776]	; 0x6f0
 8009f12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f16:	f885 36e7 	strb.w	r3, [r5, #1767]	; 0x6e7
 8009f1a:	f894 36da 	ldrb.w	r3, [r4, #1754]	; 0x6da
 8009f1e:	f8d5 a6f8 	ldr.w	sl, [r5, #1784]	; 0x6f8
 8009f22:	b133      	cbz	r3, 8009f32 <ArtNetNode::HandleDmx()+0x72>
 8009f24:	f894 36dc 	ldrb.w	r3, [r4, #1756]	; 0x6dc
 8009f28:	b91b      	cbnz	r3, 8009f32 <ArtNetNode::HandleDmx()+0x72>
 8009f2a:	4631      	mov	r1, r6
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	f7ff ff88 	bl	8009e42 <ArtNetNode::CheckMergeTimeouts(unsigned int)>
 8009f32:	ea5b 020a 	orrs.w	r2, fp, sl
 8009f36:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 8009f3a:	d136      	bne.n	8009faa <ArtNetNode::HandleDmx()+0xea>
 8009f3c:	f8c5 36f0 	str.w	r3, [r5, #1776]	; 0x6f0
 8009f40:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009f44:	463a      	mov	r2, r7
 8009f46:	4641      	mov	r1, r8
 8009f48:	4630      	mov	r0, r6
 8009f4a:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
 8009f4e:	f7ff fef7 	bl	8009d40 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 8009f52:	f894 36d9 	ldrb.w	r3, [r4, #1753]	; 0x6d9
 8009f56:	b9fb      	cbnz	r3, 8009f98 <ArtNetNode::HandleDmx()+0xd8>
 8009f58:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8009f5c:	f7ff fee4 	bl	8009d28 <lightset::Data::Get()>
 8009f60:	f240 6304 	movw	r3, #1540	; 0x604
 8009f64:	4373      	muls	r3, r6
 8009f66:	18c2      	adds	r2, r0, r3
 8009f68:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 8009f6c:	f8da 3000 	ldr.w	r3, [sl]
 8009f70:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8009f74:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 8009f78:	1842      	adds	r2, r0, r1
 8009f7a:	4631      	mov	r1, r6
 8009f7c:	4650      	mov	r0, sl
 8009f7e:	47d8      	blx	fp
 8009f80:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 8009f84:	b943      	cbnz	r3, 8009f98 <ArtNetNode::HandleDmx()+0xd8>
 8009f86:	68a0      	ldr	r0, [r4, #8]
 8009f88:	4631      	mov	r1, r6
 8009f8a:	6803      	ldr	r3, [r0, #0]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	4798      	blx	r3
 8009f90:	f884 96db 	strb.w	r9, [r4, #1755]	; 0x6db
 8009f94:	f885 9705 	strb.w	r9, [r5, #1797]	; 0x705
 8009f98:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 8009f9c:	f043 0302 	orr.w	r3, r3, #2
 8009fa0:	f884 36dd 	strb.w	r3, [r4, #1757]	; 0x6dd
 8009fa4:	3601      	adds	r6, #1
 8009fa6:	3524      	adds	r5, #36	; 0x24
 8009fa8:	e79c      	b.n	8009ee4 <ArtNetNode::HandleDmx()+0x24>
 8009faa:	459b      	cmp	fp, r3
 8009fac:	d104      	bne.n	8009fb8 <ArtNetNode::HandleDmx()+0xf8>
 8009fae:	f1ba 0f00 	cmp.w	sl, #0
 8009fb2:	d0c5      	beq.n	8009f40 <ArtNetNode::HandleDmx()+0x80>
 8009fb4:	b11b      	cbz	r3, 8009fbe <ArtNetNode::HandleDmx()+0xfe>
 8009fb6:	e037      	b.n	800a028 <ArtNetNode::HandleDmx()+0x168>
 8009fb8:	f1bb 0f00 	cmp.w	fp, #0
 8009fbc:	d132      	bne.n	800a024 <ArtNetNode::HandleDmx()+0x164>
 8009fbe:	459a      	cmp	sl, r3
 8009fc0:	d11d      	bne.n	8009ffe <ArtNetNode::HandleDmx()+0x13e>
 8009fc2:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009fc6:	f8c5 36f4 	str.w	r3, [r5, #1780]	; 0x6f4
 8009fca:	f7ff fead 	bl	8009d28 <lightset::Data::Get()>
 8009fce:	f240 6304 	movw	r3, #1540	; 0x604
 8009fd2:	4683      	mov	fp, r0
 8009fd4:	fb03 fa06 	mul.w	sl, r3, r6
 8009fd8:	f50a 7000 	add.w	r0, sl, #512	; 0x200
 8009fdc:	463a      	mov	r2, r7
 8009fde:	4641      	mov	r1, r8
 8009fe0:	4458      	add	r0, fp
 8009fe2:	f7ff fe97 	bl	8009d14 <memcpy.isra.0>
 8009fe6:	eb0b 030a 	add.w	r3, fp, sl
 8009fea:	f50a 6080 	add.w	r0, sl, #1024	; 0x400
 8009fee:	463a      	mov	r2, r7
 8009ff0:	4641      	mov	r1, r8
 8009ff2:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 8009ff6:	4458      	add	r0, fp
 8009ff8:	f7ff fe8c 	bl	8009d14 <memcpy.isra.0>
 8009ffc:	e7a9      	b.n	8009f52 <ArtNetNode::HandleDmx()+0x92>
 8009ffe:	b9bb      	cbnz	r3, 800a030 <ArtNetNode::HandleDmx()+0x170>
 800a000:	f8c5 36f0 	str.w	r3, [r5, #1776]	; 0x6f0
 800a004:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800a008:	4631      	mov	r1, r6
 800a00a:	4620      	mov	r0, r4
 800a00c:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
 800a010:	f7ff ff06 	bl	8009e20 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800a014:	463a      	mov	r2, r7
 800a016:	4641      	mov	r1, r8
 800a018:	4630      	mov	r0, r6
 800a01a:	f8d5 36fc 	ldr.w	r3, [r5, #1788]	; 0x6fc
 800a01e:	f7ff feac 	bl	8009d7a <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800a022:	e796      	b.n	8009f52 <ArtNetNode::HandleDmx()+0x92>
 800a024:	459b      	cmp	fp, r3
 800a026:	d118      	bne.n	800a05a <ArtNetNode::HandleDmx()+0x19a>
 800a028:	459a      	cmp	sl, r3
 800a02a:	d1eb      	bne.n	800a004 <ArtNetNode::HandleDmx()+0x144>
 800a02c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a030:	f1ba 0f00 	cmp.w	sl, #0
 800a034:	d1e4      	bne.n	800a000 <ArtNetNode::HandleDmx()+0x140>
 800a036:	f8c5 36f8 	str.w	r3, [r5, #1784]	; 0x6f8
 800a03a:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800a03e:	4631      	mov	r1, r6
 800a040:	4620      	mov	r0, r4
 800a042:	f8c5 36f4 	str.w	r3, [r5, #1780]	; 0x6f4
 800a046:	f7ff feeb 	bl	8009e20 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800a04a:	463a      	mov	r2, r7
 800a04c:	4641      	mov	r1, r8
 800a04e:	4630      	mov	r0, r6
 800a050:	f8d5 36fc 	ldr.w	r3, [r5, #1788]	; 0x6fc
 800a054:	f7ff feba 	bl	8009dcc <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800a058:	e77b      	b.n	8009f52 <ArtNetNode::HandleDmx()+0x92>
 800a05a:	f1ba 0f00 	cmp.w	sl, #0
 800a05e:	d0ea      	beq.n	800a036 <ArtNetNode::HandleDmx()+0x176>
 800a060:	459a      	cmp	sl, r3
 800a062:	d0ea      	beq.n	800a03a <ArtNetNode::HandleDmx()+0x17a>
 800a064:	e7e2      	b.n	800a02c <ArtNetNode::HandleDmx()+0x16c>
	...

0800a068 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>:
 800a068:	2903      	cmp	r1, #3
 800a06a:	b510      	push	{r4, lr}
 800a06c:	d80f      	bhi.n	800a08e <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x26>
 800a06e:	4b08      	ldr	r3, [pc, #32]	; (800a090 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x28>)
 800a070:	0109      	lsls	r1, r1, #4
 800a072:	681c      	ldr	r4, [r3, #0]
 800a074:	6923      	ldr	r3, [r4, #16]
 800a076:	69a4      	ldr	r4, [r4, #24]
 800a078:	4053      	eors	r3, r2
 800a07a:	4223      	tst	r3, r4
 800a07c:	bf15      	itete	ne
 800a07e:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
 800a080:	1840      	addeq	r0, r0, r1
 800a082:	1809      	addne	r1, r1, r0
 800a084:	f8c0 277c 	streq.w	r2, [r0, #1916]	; 0x77c
 800a088:	bf18      	it	ne
 800a08a:	f8c1 377c 	strne.w	r3, [r1, #1916]	; 0x77c
 800a08e:	bd10      	pop	{r4, pc}
 800a090:	20009ff4 	strdcs	r9, [r0], -r4

0800a094 <ArtNetNode::HandleDmxIn()>:
 800a094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a098:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800a09c:	aa05      	add	r2, sp, #20
 800a09e:	4605      	mov	r5, r0
 800a0a0:	2308      	movs	r3, #8
 800a0a2:	4617      	mov	r7, r2
 800a0a4:	493f      	ldr	r1, [pc, #252]	; (800a1a4 <ArtNetNode::HandleDmxIn()+0x110>)
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	d256      	bcs.n	800a158 <ArtNetNode::HandleDmxIn()+0xc4>
 800a0aa:	462c      	mov	r4, r5
 800a0ac:	2600      	movs	r6, #0
 800a0ae:	4b3e      	ldr	r3, [pc, #248]	; (800a1a8 <ArtNetNode::HandleDmxIn()+0x114>)
 800a0b0:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800a1ac <ArtNetNode::HandleDmxIn()+0x118>
 800a0b4:	60bb      	str	r3, [r7, #8]
 800a0b6:	f894 3778 	ldrb.w	r3, [r4, #1912]	; 0x778
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d043      	beq.n	800a146 <ArtNetNode::HandleDmxIn()+0xb2>
 800a0be:	6968      	ldr	r0, [r5, #20]
 800a0c0:	4631      	mov	r1, r6
 800a0c2:	6803      	ldr	r3, [r0, #0]
 800a0c4:	aa03      	add	r2, sp, #12
 800a0c6:	f8d3 9010 	ldr.w	r9, [r3, #16]
 800a0ca:	ab04      	add	r3, sp, #16
 800a0cc:	47c8      	blx	r9
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d04c      	beq.n	800a16c <ArtNetNode::HandleDmxIn()+0xd8>
 800a0d2:	f894 3780 	ldrb.w	r3, [r4, #1920]	; 0x780
 800a0d6:	737e      	strb	r6, [r7, #13]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	f884 3780 	strb.w	r3, [r4, #1920]	; 0x780
 800a0e0:	733b      	strb	r3, [r7, #12]
 800a0e2:	f8b4 3774 	ldrh.w	r3, [r4, #1908]	; 0x774
 800a0e6:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800a0ea:	81fb      	strh	r3, [r7, #14]
 800a0ec:	9b03      	ldr	r3, [sp, #12]
 800a0ee:	18c1      	adds	r1, r0, r3
 800a0f0:	4288      	cmp	r0, r1
 800a0f2:	d136      	bne.n	800a162 <ArtNetNode::HandleDmxIn()+0xce>
 800a0f4:	07da      	lsls	r2, r3, #31
 800a0f6:	d504      	bpl.n	800a102 <ArtNetNode::HandleDmxIn()+0x6e>
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	18fa      	adds	r2, r7, r3
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	7491      	strb	r1, [r2, #18]
 800a100:	9303      	str	r3, [sp, #12]
 800a102:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a106:	f240 2212 	movw	r2, #530	; 0x212
 800a10a:	ba5b      	rev16	r3, r3
 800a10c:	823b      	strh	r3, [r7, #16]
 800a10e:	2380      	movs	r3, #128	; 0x80
 800a110:	f884 3777 	strb.w	r3, [r4, #1911]	; 0x777
 800a114:	f641 1336 	movw	r3, #6454	; 0x1936
 800a118:	9300      	str	r3, [sp, #0]
 800a11a:	4639      	mov	r1, r7
 800a11c:	f8d4 377c 	ldr.w	r3, [r4, #1916]	; 0x77c
 800a120:	7928      	ldrb	r0, [r5, #4]
 800a122:	f006 f9a1 	bl	8010468 <udp_send>
 800a126:	2301      	movs	r3, #1
 800a128:	f8d8 2000 	ldr.w	r2, [r8]
 800a12c:	40b3      	lsls	r3, r6
 800a12e:	ea33 0102 	bics.w	r1, r3, r2
 800a132:	d008      	beq.n	800a146 <ArtNetNode::HandleDmxIn()+0xb2>
 800a134:	4313      	orrs	r3, r2
 800a136:	f8c8 3000 	str.w	r3, [r8]
 800a13a:	f895 36dd 	ldrb.w	r3, [r5, #1757]	; 0x6dd
 800a13e:	f043 0301 	orr.w	r3, r3, #1
 800a142:	f885 36dd 	strb.w	r3, [r5, #1757]	; 0x6dd
 800a146:	3601      	adds	r6, #1
 800a148:	2e04      	cmp	r6, #4
 800a14a:	f104 0410 	add.w	r4, r4, #16
 800a14e:	d1b2      	bne.n	800a0b6 <ArtNetNode::HandleDmxIn()+0x22>
 800a150:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
 800a154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a158:	f811 0b01 	ldrb.w	r0, [r1], #1
 800a15c:	f802 0b01 	strb.w	r0, [r2], #1
 800a160:	e7a1      	b.n	800a0a6 <ArtNetNode::HandleDmxIn()+0x12>
 800a162:	f810 cb01 	ldrb.w	ip, [r0], #1
 800a166:	f802 cb01 	strb.w	ip, [r2], #1
 800a16a:	e7c1      	b.n	800a0f0 <ArtNetNode::HandleDmxIn()+0x5c>
 800a16c:	f994 2777 	ldrsb.w	r2, [r4, #1911]	; 0x777
 800a170:	f894 3777 	ldrb.w	r3, [r4, #1911]	; 0x777
 800a174:	2a00      	cmp	r2, #0
 800a176:	dae6      	bge.n	800a146 <ArtNetNode::HandleDmxIn()+0xb2>
 800a178:	9a04      	ldr	r2, [sp, #16]
 800a17a:	2a00      	cmp	r2, #0
 800a17c:	d1e3      	bne.n	800a146 <ArtNetNode::HandleDmxIn()+0xb2>
 800a17e:	2201      	movs	r2, #1
 800a180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a184:	f884 3777 	strb.w	r3, [r4, #1911]	; 0x777
 800a188:	f8d8 3000 	ldr.w	r3, [r8]
 800a18c:	40b2      	lsls	r2, r6
 800a18e:	ea23 0302 	bic.w	r3, r3, r2
 800a192:	f8c8 3000 	str.w	r3, [r8]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1d5      	bne.n	800a146 <ArtNetNode::HandleDmxIn()+0xb2>
 800a19a:	f895 36dd 	ldrb.w	r3, [r5, #1757]	; 0x6dd
 800a19e:	f023 0301 	bic.w	r3, r3, #1
 800a1a2:	e7ce      	b.n	800a142 <ArtNetNode::HandleDmxIn()+0xae>
 800a1a4:	0801667b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r9, sl, sp, lr}
 800a1a8:	0e005000 	cdpeq	0, 0, cr5, cr0, cr0, {0}
 800a1ac:	20000d0c 	andcs	r0, r0, ip, lsl #26

0800a1b0 <memcmp.constprop.0>:
 800a1b0:	b510      	push	{r4, lr}
 800a1b2:	4907      	ldr	r1, [pc, #28]	; (800a1d0 <memcmp.constprop.0+0x20>)
 800a1b4:	1e42      	subs	r2, r0, #1
 800a1b6:	3003      	adds	r0, #3
 800a1b8:	4282      	cmp	r2, r0
 800a1ba:	d101      	bne.n	800a1c0 <memcmp.constprop.0+0x10>
 800a1bc:	2000      	movs	r0, #0
 800a1be:	e006      	b.n	800a1ce <memcmp.constprop.0+0x1e>
 800a1c0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a1c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1c8:	42a3      	cmp	r3, r4
 800a1ca:	d0f5      	beq.n	800a1b8 <memcmp.constprop.0+0x8>
 800a1cc:	1b18      	subs	r0, r3, r4
 800a1ce:	bd10      	pop	{r4, pc}
 800a1d0:	20000d10 	andcs	r0, r0, r0, lsl sp

0800a1d4 <memcpy.constprop.0.isra.0>:
 800a1d4:	3801      	subs	r0, #1
 800a1d6:	1d0b      	adds	r3, r1, #4
 800a1d8:	4299      	cmp	r1, r3
 800a1da:	d100      	bne.n	800a1de <memcpy.constprop.0.isra.0+0xa>
 800a1dc:	4770      	bx	lr
 800a1de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1e2:	f800 2f01 	strb.w	r2, [r0, #1]!
 800a1e6:	e7f7      	b.n	800a1d8 <memcpy.constprop.0.isra.0+0x4>

0800a1e8 <ArtNetNode::HandleIpProg()>:
 800a1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ec:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 800a1f0:	b085      	sub	sp, #20
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	9303      	str	r3, [sp, #12]
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	4d57      	ldr	r5, [pc, #348]	; (800a358 <ArtNetNode::HandleIpProg()+0x170>)
 800a1fa:	f890 70ae 	ldrb.w	r7, [r0, #174]	; 0xae
 800a1fe:	6828      	ldr	r0, [r5, #0]
 800a200:	f890 b001 	ldrb.w	fp, [r0, #1]
 800a204:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
 800a208:	f06f 0306 	mvn.w	r3, #6
 800a20c:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 800a210:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
 800a214:	2bc0      	cmp	r3, #192	; 0xc0
 800a216:	d101      	bne.n	800a21c <ArtNetNode::HandleIpProg()+0x34>
 800a218:	f006 ffa4 	bl	8011164 <Network::EnableDhcp()>
 800a21c:	f007 0388 	and.w	r3, r7, #136	; 0x88
 800a220:	2b88      	cmp	r3, #136	; 0x88
 800a222:	d103      	bne.n	800a22c <ArtNetNode::HandleIpProg()+0x44>
 800a224:	2100      	movs	r1, #0
 800a226:	6828      	ldr	r0, [r5, #0]
 800a228:	f006 ff40 	bl	80110ac <Network::SetIp(unsigned int)>
 800a22c:	f007 0384 	and.w	r3, r7, #132	; 0x84
 800a230:	2b84      	cmp	r3, #132	; 0x84
 800a232:	4e4a      	ldr	r6, [pc, #296]	; (800a35c <ArtNetNode::HandleIpProg()+0x174>)
 800a234:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
 800a238:	d107      	bne.n	800a24a <ArtNetNode::HandleIpProg()+0x62>
 800a23a:	4641      	mov	r1, r8
 800a23c:	4630      	mov	r0, r6
 800a23e:	f7ff ffc9 	bl	800a1d4 <memcpy.constprop.0.isra.0>
 800a242:	6831      	ldr	r1, [r6, #0]
 800a244:	6828      	ldr	r0, [r5, #0]
 800a246:	f006 ff31 	bl	80110ac <Network::SetIp(unsigned int)>
 800a24a:	f007 0382 	and.w	r3, r7, #130	; 0x82
 800a24e:	2b82      	cmp	r3, #130	; 0x82
 800a250:	f104 09b4 	add.w	r9, r4, #180	; 0xb4
 800a254:	d107      	bne.n	800a266 <ArtNetNode::HandleIpProg()+0x7e>
 800a256:	4649      	mov	r1, r9
 800a258:	4840      	ldr	r0, [pc, #256]	; (800a35c <ArtNetNode::HandleIpProg()+0x174>)
 800a25a:	f7ff ffbb 	bl	800a1d4 <memcpy.constprop.0.isra.0>
 800a25e:	6831      	ldr	r1, [r6, #0]
 800a260:	6828      	ldr	r0, [r5, #0]
 800a262:	f006 ff51 	bl	8011108 <Network::SetNetmask(unsigned int)>
 800a266:	f007 0790 	and.w	r7, r7, #144	; 0x90
 800a26a:	2f90      	cmp	r7, #144	; 0x90
 800a26c:	f104 0aba 	add.w	sl, r4, #186	; 0xba
 800a270:	d107      	bne.n	800a282 <ArtNetNode::HandleIpProg()+0x9a>
 800a272:	4651      	mov	r1, sl
 800a274:	4839      	ldr	r0, [pc, #228]	; (800a35c <ArtNetNode::HandleIpProg()+0x174>)
 800a276:	f7ff ffad 	bl	800a1d4 <memcpy.constprop.0.isra.0>
 800a27a:	6831      	ldr	r1, [r6, #0]
 800a27c:	6828      	ldr	r0, [r5, #0]
 800a27e:	f006 ff59 	bl	8011134 <Network::SetGatewayIp(unsigned int)>
 800a282:	6829      	ldr	r1, [r5, #0]
 800a284:	784a      	ldrb	r2, [r1, #1]
 800a286:	0192      	lsls	r2, r2, #6
 800a288:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
 800a28c:	2200      	movs	r2, #0
 800a28e:	f884 20bb 	strb.w	r2, [r4, #187]	; 0xbb
 800a292:	7848      	ldrb	r0, [r1, #1]
 800a294:	6909      	ldr	r1, [r1, #16]
 800a296:	ea8b 0b00 	eor.w	fp, fp, r0
 800a29a:	4640      	mov	r0, r8
 800a29c:	6031      	str	r1, [r6, #0]
 800a29e:	f7ff ff87 	bl	800a1b0 <memcmp.constprop.0>
 800a2a2:	492e      	ldr	r1, [pc, #184]	; (800a35c <ArtNetNode::HandleIpProg()+0x174>)
 800a2a4:	4607      	mov	r7, r0
 800a2a6:	4640      	mov	r0, r8
 800a2a8:	f7ff ff94 	bl	800a1d4 <memcpy.constprop.0.isra.0>
 800a2ac:	6829      	ldr	r1, [r5, #0]
 800a2ae:	4648      	mov	r0, r9
 800a2b0:	6989      	ldr	r1, [r1, #24]
 800a2b2:	6031      	str	r1, [r6, #0]
 800a2b4:	f7ff ff7c 	bl	800a1b0 <memcmp.constprop.0>
 800a2b8:	4928      	ldr	r1, [pc, #160]	; (800a35c <ArtNetNode::HandleIpProg()+0x174>)
 800a2ba:	9003      	str	r0, [sp, #12]
 800a2bc:	4648      	mov	r0, r9
 800a2be:	f7ff ff89 	bl	800a1d4 <memcpy.constprop.0.isra.0>
 800a2c2:	6829      	ldr	r1, [r5, #0]
 800a2c4:	4650      	mov	r0, sl
 800a2c6:	6949      	ldr	r1, [r1, #20]
 800a2c8:	6031      	str	r1, [r6, #0]
 800a2ca:	f7ff ff71 	bl	800a1b0 <memcmp.constprop.0>
 800a2ce:	9b03      	ldr	r3, [sp, #12]
 800a2d0:	4922      	ldr	r1, [pc, #136]	; (800a35c <ArtNetNode::HandleIpProg()+0x174>)
 800a2d2:	431f      	orrs	r7, r3
 800a2d4:	4307      	orrs	r7, r0
 800a2d6:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800a2da:	bf0c      	ite	eq
 800a2dc:	465e      	moveq	r6, fp
 800a2de:	f04b 0601 	orrne.w	r6, fp, #1
 800a2e2:	f7ff ff77 	bl	800a1d4 <memcpy.constprop.0.isra.0>
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f641 1336 	movw	r3, #6454	; 0x1936
 800a2ec:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
 800a2f0:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	2222      	movs	r2, #34	; 0x22
 800a2f8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 800a2fc:	7920      	ldrb	r0, [r4, #4]
 800a2fe:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 800a302:	f006 f8b1 	bl	8010468 <udp_send>
 800a306:	b31e      	cbz	r6, 800a350 <ArtNetNode::HandleIpProg()+0x168>
 800a308:	682a      	ldr	r2, [r5, #0]
 800a30a:	f204 507e 	addw	r0, r4, #1406	; 0x57e
 800a30e:	6913      	ldr	r3, [r2, #16]
 800a310:	62a3      	str	r3, [r4, #40]	; 0x28
 800a312:	6991      	ldr	r1, [r2, #24]
 800a314:	7852      	ldrb	r2, [r2, #1]
 800a316:	ea63 0301 	orn	r3, r3, r1
 800a31a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a31c:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800a320:	4641      	mov	r1, r8
 800a322:	f023 0302 	bic.w	r3, r3, #2
 800a326:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800a32a:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
 800a32e:	f7ff ff51 	bl	800a1d4 <memcpy.constprop.0.isra.0>
 800a332:	4641      	mov	r1, r8
 800a334:	f204 6043 	addw	r0, r4, #1603	; 0x643
 800a338:	f7ff ff4c 	bl	800a1d4 <memcpy.constprop.0.isra.0>
 800a33c:	f894 36d6 	ldrb.w	r3, [r4, #1750]	; 0x6d6
 800a340:	b133      	cbz	r3, 800a350 <ArtNetNode::HandleIpProg()+0x168>
 800a342:	2101      	movs	r1, #1
 800a344:	4620      	mov	r0, r4
 800a346:	b005      	add	sp, #20
 800a348:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34c:	f000 b884 	b.w	800a458 <ArtNetNode::SendPollRelply(bool)>
 800a350:	b005      	add	sp, #20
 800a352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a356:	bf00      	nop
 800a358:	20009ff4 	strdcs	r9, [r0], -r4
 800a35c:	20000d10 	andcs	r0, r0, r0, lsl sp

0800a360 <memcpy.isra.0>:
 800a360:	3801      	subs	r0, #1
 800a362:	440a      	add	r2, r1
 800a364:	4291      	cmp	r1, r2
 800a366:	d100      	bne.n	800a36a <memcpy.isra.0+0xa>
 800a368:	4770      	bx	lr
 800a36a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a36e:	f800 3f01 	strb.w	r3, [r0, #1]!
 800a372:	e7f7      	b.n	800a364 <memcpy.isra.0+0x4>

0800a374 <ArtNetNode::FillPollReply()>:
 800a374:	b538      	push	{r3, r4, r5, lr}
 800a376:	4604      	mov	r4, r0
 800a378:	f200 5074 	addw	r0, r0, #1396	; 0x574
 800a37c:	4603      	mov	r3, r0
 800a37e:	2100      	movs	r1, #0
 800a380:	f204 6263 	addw	r2, r4, #1635	; 0x663
 800a384:	429a      	cmp	r2, r3
 800a386:	d15c      	bne.n	800a442 <ArtNetNode::FillPollReply()+0xce>
 800a388:	2208      	movs	r2, #8
 800a38a:	492f      	ldr	r1, [pc, #188]	; (800a448 <ArtNetNode::FillPollReply()+0xd4>)
 800a38c:	f7ff ffe8 	bl	800a360 <memcpy.isra.0>
 800a390:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800a394:	4d2d      	ldr	r5, [pc, #180]	; (800a44c <ArtNetNode::FillPollReply()+0xd8>)
 800a396:	f8a4 357c 	strh.w	r3, [r4, #1404]	; 0x57c
 800a39a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a39c:	4629      	mov	r1, r5
 800a39e:	f204 507e 	addw	r0, r4, #1406	; 0x57e
 800a3a2:	2204      	movs	r2, #4
 800a3a4:	602b      	str	r3, [r5, #0]
 800a3a6:	f7ff ffdb 	bl	800a360 <memcpy.isra.0>
 800a3aa:	f641 1336 	movw	r3, #6454	; 0x1936
 800a3ae:	f8a4 3582 	strh.w	r3, [r4, #1410]	; 0x582
 800a3b2:	4b27      	ldr	r3, [pc, #156]	; (800a450 <ArtNetNode::FillPollReply()+0xdc>)
 800a3b4:	f104 0142 	add.w	r1, r4, #66	; 0x42
 800a3b8:	781a      	ldrb	r2, [r3, #0]
 800a3ba:	f204 508e 	addw	r0, r4, #1422	; 0x58e
 800a3be:	f884 2584 	strb.w	r2, [r4, #1412]	; 0x584
 800a3c2:	785b      	ldrb	r3, [r3, #1]
 800a3c4:	f884 3585 	strb.w	r3, [r4, #1413]	; 0x585
 800a3c8:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 800a3cc:	f8a4 3588 	strh.w	r3, [r4, #1416]	; 0x588
 800a3d0:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800a3d4:	f884 358b 	strb.w	r3, [r4, #1419]	; 0x58b
 800a3d8:	4b1e      	ldr	r3, [pc, #120]	; (800a454 <ArtNetNode::FillPollReply()+0xe0>)
 800a3da:	785a      	ldrb	r2, [r3, #1]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	f884 258c 	strb.w	r2, [r4, #1420]	; 0x58c
 800a3e2:	f884 358d 	strb.w	r3, [r4, #1421]	; 0x58d
 800a3e6:	2212      	movs	r2, #18
 800a3e8:	f7ff ffba 	bl	800a360 <memcpy.isra.0>
 800a3ec:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800a3f0:	f504 60b4 	add.w	r0, r4, #1440	; 0x5a0
 800a3f4:	2240      	movs	r2, #64	; 0x40
 800a3f6:	f7ff ffb3 	bl	800a360 <memcpy.isra.0>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800a400:	f884 363c 	strb.w	r3, [r4, #1596]	; 0x63c
 800a404:	f204 603d 	addw	r0, r4, #1597	; 0x63d
 800a408:	2206      	movs	r2, #6
 800a40a:	f7ff ffa9 	bl	800a360 <memcpy.isra.0>
 800a40e:	4629      	mov	r1, r5
 800a410:	f204 6043 	addw	r0, r4, #1603	; 0x643
 800a414:	2204      	movs	r2, #4
 800a416:	f7ff ffa3 	bl	800a360 <memcpy.isra.0>
 800a41a:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800a41e:	f104 0198 	add.w	r1, r4, #152	; 0x98
 800a422:	f884 3648 	strb.w	r3, [r4, #1608]	; 0x648
 800a426:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800a42a:	f204 604e 	addw	r0, r4, #1614	; 0x64e
 800a42e:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
 800a432:	2304      	movs	r3, #4
 800a434:	2206      	movs	r2, #6
 800a436:	f884 3621 	strb.w	r3, [r4, #1569]	; 0x621
 800a43a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a43e:	f7ff bf8f 	b.w	800a360 <memcpy.isra.0>
 800a442:	f803 1b01 	strb.w	r1, [r3], #1
 800a446:	e79d      	b.n	800a384 <ArtNetNode::FillPollReply()+0x10>
 800a448:	08016696 	stmdaeq	r1, {r1, r2, r4, r7, r9, sl, sp, lr}
 800a44c:	20000d14 	andcs	r0, r0, r4, lsl sp
 800a450:	0801692f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r8, fp, sp, lr}
 800a454:	0801692d 	stmdaeq	r1, {r0, r2, r3, r5, r8, fp, sp, lr}

0800a458 <ArtNetNode::SendPollRelply(bool)>:
 800a458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a45c:	4604      	mov	r4, r0
 800a45e:	b087      	sub	sp, #28
 800a460:	b941      	cbnz	r1, 800a474 <ArtNetNode::SendPollRelply(bool)+0x1c>
 800a462:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 800a466:	2b02      	cmp	r3, #2
 800a468:	bf02      	ittt	eq
 800a46a:	f8d0 36c0 	ldreq.w	r3, [r0, #1728]	; 0x6c0
 800a46e:	3301      	addeq	r3, #1
 800a470:	f8c0 36c0 	streq.w	r3, [r0, #1728]	; 0x6c0
 800a474:	2600      	movs	r6, #0
 800a476:	f04f 0a24 	mov.w	sl, #36	; 0x24
 800a47a:	4635      	mov	r5, r6
 800a47c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800a480:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800a590 <ArtNetNode::SendPollRelply(bool)+0x138>
 800a484:	f884 358b 	strb.w	r3, [r4, #1419]	; 0x58b
 800a488:	f104 093e 	add.w	r9, r4, #62	; 0x3e
 800a48c:	7823      	ldrb	r3, [r4, #0]
 800a48e:	42ab      	cmp	r3, r5
 800a490:	dc05      	bgt.n	800a49e <ArtNetNode::SendPollRelply(bool)+0x46>
 800a492:	2300      	movs	r3, #0
 800a494:	f884 36db 	strb.w	r3, [r4, #1755]	; 0x6db
 800a498:	b007      	add	sp, #28
 800a49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a49e:	f04f 0800 	mov.w	r8, #0
 800a4a2:	f899 3000 	ldrb.w	r3, [r9]
 800a4a6:	3501      	adds	r5, #1
 800a4a8:	f884 3586 	strb.w	r3, [r4, #1414]	; 0x586
 800a4ac:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 800a4b0:	b2f1      	uxtb	r1, r6
 800a4b2:	f884 3587 	strb.w	r3, [r4, #1415]	; 0x587
 800a4b6:	1cf3      	adds	r3, r6, #3
 800a4b8:	f884 5647 	strb.w	r5, [r4, #1607]	; 0x647
 800a4bc:	9303      	str	r3, [sp, #12]
 800a4be:	9b03      	ldr	r3, [sp, #12]
 800a4c0:	428b      	cmp	r3, r1
 800a4c2:	da1b      	bge.n	800a4fc <ArtNetNode::SendPollRelply(bool)+0xa4>
 800a4c4:	f204 636f 	addw	r3, r4, #1647	; 0x66f
 800a4c8:	9301      	str	r3, [sp, #4]
 800a4ca:	f8d4 36c0 	ldr.w	r3, [r4, #1728]	; 0x6c0
 800a4ce:	465a      	mov	r2, fp
 800a4d0:	2140      	movs	r1, #64	; 0x40
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	f884 8621 	strb.w	r8, [r4, #1569]	; 0x621
 800a4d8:	f894 36d4 	ldrb.w	r3, [r4, #1748]	; 0x6d4
 800a4dc:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 800a4e0:	f009 fd5a 	bl	8013f98 <snprintf>
 800a4e4:	f641 1336 	movw	r3, #6454	; 0x1936
 800a4e8:	22ef      	movs	r2, #239	; 0xef
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	7920      	ldrb	r0, [r4, #4]
 800a4ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a4f0:	f204 5174 	addw	r1, r4, #1396	; 0x574
 800a4f4:	f005 ffb8 	bl	8010468 <udp_send>
 800a4f8:	3604      	adds	r6, #4
 800a4fa:	e7c7      	b.n	800a48c <ArtNetNode::SendPollRelply(bool)+0x34>
 800a4fc:	fb0a 4301 	mla	r3, sl, r1, r4
 800a500:	69e0      	ldr	r0, [r4, #28]
 800a502:	f893 76e7 	ldrb.w	r7, [r3, #1767]	; 0x6e7
 800a506:	b1a8      	cbz	r0, 800a534 <ArtNetNode::SendPollRelply(bool)+0xdc>
 800a508:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
 800a50c:	2a01      	cmp	r2, #1
 800a50e:	d111      	bne.n	800a534 <ArtNetNode::SendPollRelply(bool)+0xdc>
 800a510:	6802      	ldr	r2, [r0, #0]
 800a512:	9305      	str	r3, [sp, #20]
 800a514:	9104      	str	r1, [sp, #16]
 800a516:	6912      	ldr	r2, [r2, #16]
 800a518:	4790      	blx	r2
 800a51a:	f007 0776 	and.w	r7, r7, #118	; 0x76
 800a51e:	f000 0089 	and.w	r0, r0, #137	; 0x89
 800a522:	4307      	orrs	r7, r0
 800a524:	f010 0001 	ands.w	r0, r0, #1
 800a528:	bf08      	it	eq
 800a52a:	9b05      	ldreq	r3, [sp, #20]
 800a52c:	9904      	ldr	r1, [sp, #16]
 800a52e:	bf08      	it	eq
 800a530:	f8c3 0700 	streq.w	r0, [r3, #1792]	; 0x700
 800a534:	fb0a 4201 	mla	r2, sl, r1, r4
 800a538:	f882 76e7 	strb.w	r7, [r2, #1767]	; 0x6e7
 800a53c:	f892 26e8 	ldrb.w	r2, [r2, #1768]	; 0x6e8
 800a540:	1b8b      	subs	r3, r1, r6
 800a542:	b112      	cbz	r2, 800a54a <ArtNetNode::SendPollRelply(bool)+0xf2>
 800a544:	2280      	movs	r2, #128	; 0x80
 800a546:	f108 0801 	add.w	r8, r8, #1
 800a54a:	fb0a 4001 	mla	r0, sl, r1, r4
 800a54e:	4423      	add	r3, r4
 800a550:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 800a554:	f883 762a 	strb.w	r7, [r3, #1578]	; 0x62a
 800a558:	f890 06e6 	ldrb.w	r0, [r0, #1766]	; 0x6e6
 800a55c:	2903      	cmp	r1, #3
 800a55e:	f883 0632 	strb.w	r0, [r3, #1586]	; 0x632
 800a562:	d812      	bhi.n	800a58a <ArtNetNode::SendPollRelply(bool)+0x132>
 800a564:	eb04 1001 	add.w	r0, r4, r1, lsl #4
 800a568:	f890 7778 	ldrb.w	r7, [r0, #1912]	; 0x778
 800a56c:	b12f      	cbz	r7, 800a57a <ArtNetNode::SendPollRelply(bool)+0x122>
 800a56e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a572:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 800a576:	f108 0801 	add.w	r8, r8, #1
 800a57a:	f890 2777 	ldrb.w	r2, [r0, #1911]	; 0x777
 800a57e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
 800a582:	f890 2776 	ldrb.w	r2, [r0, #1910]	; 0x776
 800a586:	f883 262e 	strb.w	r2, [r3, #1582]	; 0x62e
 800a58a:	3101      	adds	r1, #1
 800a58c:	b2c9      	uxtb	r1, r1
 800a58e:	e796      	b.n	800a4be <ArtNetNode::SendPollRelply(bool)+0x66>
 800a590:	08016683 	stmdaeq	r1, {r0, r1, r7, r9, sl, sp, lr}

0800a594 <ArtNetNode::HandlePoll()>:
 800a594:	f890 20ac 	ldrb.w	r2, [r0, #172]	; 0xac
 800a598:	b410      	push	{r4}
 800a59a:	f3c2 0340 	ubfx	r3, r2, #1, #1
 800a59e:	f880 36d6 	strb.w	r3, [r0, #1750]	; 0x6d6
 800a5a2:	f012 0304 	ands.w	r3, r2, #4
 800a5a6:	d02e      	beq.n	800a606 <ArtNetNode::HandlePoll()+0x72>
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	f8d0 16c8 	ldr.w	r1, [r0, #1736]	; 0x6c8
 800a5ae:	f890 46d8 	ldrb.w	r4, [r0, #1752]	; 0x6d8
 800a5b2:	f880 36d7 	strb.w	r3, [r0, #1751]	; 0x6d7
 800a5b6:	b979      	cbnz	r1, 800a5d8 <ArtNetNode::HandlePoll()+0x44>
 800a5b8:	f8d0 356c 	ldr.w	r3, [r0, #1388]	; 0x56c
 800a5bc:	f8c0 36c8 	str.w	r3, [r0, #1736]	; 0x6c8
 800a5c0:	b19c      	cbz	r4, 800a5ea <ArtNetNode::HandlePoll()+0x56>
 800a5c2:	f890 36e0 	ldrb.w	r3, [r0, #1760]	; 0x6e0
 800a5c6:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	bf28      	it	cs
 800a5ce:	4613      	movcs	r3, r2
 800a5d0:	f880 36e0 	strb.w	r3, [r0, #1760]	; 0x6e0
 800a5d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a5d6:	e010      	b.n	800a5fa <ArtNetNode::HandlePoll()+0x66>
 800a5d8:	2c00      	cmp	r4, #0
 800a5da:	d1f2      	bne.n	800a5c2 <ArtNetNode::HandlePoll()+0x2e>
 800a5dc:	f8d0 456c 	ldr.w	r4, [r0, #1388]	; 0x56c
 800a5e0:	42a1      	cmp	r1, r4
 800a5e2:	d002      	beq.n	800a5ea <ArtNetNode::HandlePoll()+0x56>
 800a5e4:	f880 36d8 	strb.w	r3, [r0, #1752]	; 0x6d8
 800a5e8:	e7eb      	b.n	800a5c2 <ArtNetNode::HandlePoll()+0x2e>
 800a5ea:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800a5ee:	f880 36e0 	strb.w	r3, [r0, #1760]	; 0x6e0
 800a5f2:	0713      	lsls	r3, r2, #28
 800a5f4:	d5ee      	bpl.n	800a5d4 <ArtNetNode::HandlePoll()+0x40>
 800a5f6:	f8d0 356c 	ldr.w	r3, [r0, #1388]	; 0x56c
 800a5fa:	2101      	movs	r1, #1
 800a5fc:	bc10      	pop	{r4}
 800a5fe:	f8c0 36c4 	str.w	r3, [r0, #1732]	; 0x6c4
 800a602:	f7ff bf29 	b.w	800a458 <ArtNetNode::SendPollRelply(bool)>
 800a606:	f880 36d7 	strb.w	r3, [r0, #1751]	; 0x6d7
 800a60a:	e7f6      	b.n	800a5fa <ArtNetNode::HandlePoll()+0x66>

0800a60c <ArtNetNode::SendTod(unsigned int)>:
 800a60c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800a610:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a614:	2500      	movs	r5, #0
 800a616:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9
 800a61a:	2301      	movs	r3, #1
 800a61c:	4688      	mov	r8, r1
 800a61e:	4604      	mov	r4, r0
 800a620:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
 800a624:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
 800a628:	6900      	ldr	r0, [r0, #16]
 800a62a:	088f      	lsrs	r7, r1, #2
 800a62c:	6803      	ldr	r3, [r0, #0]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	4798      	blx	r3
 800a632:	f008 0303 	and.w	r3, r8, #3
 800a636:	3301      	adds	r3, #1
 800a638:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 800a63c:	1c7b      	adds	r3, r7, #1
 800a63e:	b2ff      	uxtb	r7, r7
 800a640:	f884 50ae 	strb.w	r5, [r4, #174]	; 0xae
 800a644:	f884 50af 	strb.w	r5, [r4, #175]	; 0xaf
 800a648:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 800a64c:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
 800a650:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
 800a654:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
 800a658:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800a65c:	4427      	add	r7, r4
 800a65e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a662:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 800a666:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
 800a66a:	2324      	movs	r3, #36	; 0x24
 800a66c:	fb03 4308 	mla	r3, r3, r8, r4
 800a670:	f893 36e6 	ldrb.w	r3, [r3, #1766]	; 0x6e6
 800a674:	b2c6      	uxtb	r6, r0
 800a676:	6920      	ldr	r0, [r4, #16]
 800a678:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
 800a67c:	f884 50ba 	strb.w	r5, [r4, #186]	; 0xba
 800a680:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
 800a684:	f884 60b9 	strb.w	r6, [r4, #185]	; 0xb9
 800a688:	f884 60bb 	strb.w	r6, [r4, #187]	; 0xbb
 800a68c:	6803      	ldr	r3, [r0, #0]
 800a68e:	4641      	mov	r1, r8
 800a690:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	4798      	blx	r3
 800a698:	2306      	movs	r3, #6
 800a69a:	fb03 f206 	mul.w	r2, r3, r6
 800a69e:	f641 1336 	movw	r3, #6454	; 0x1936
 800a6a2:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	4629      	mov	r1, r5
 800a6aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a6ac:	7920      	ldrb	r0, [r4, #4]
 800a6ae:	321c      	adds	r2, #28
 800a6b0:	f005 feda 	bl	8010468 <udp_send>
 800a6b4:	b002      	add	sp, #8
 800a6b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a6ba <ArtNetNode::HandleTodControl()>:
 800a6ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6bc:	4604      	mov	r4, r0
 800a6be:	4606      	mov	r6, r0
 800a6c0:	2500      	movs	r5, #0
 800a6c2:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800a6c6:	f890 70b7 	ldrb.w	r7, [r0, #183]	; 0xb7
 800a6ca:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800a6ce:	f8b6 36e4 	ldrh.w	r3, [r6, #1764]	; 0x6e4
 800a6d2:	42bb      	cmp	r3, r7
 800a6d4:	d125      	bne.n	800a722 <ArtNetNode::HandleTodControl()+0x68>
 800a6d6:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 800a6da:	b313      	cbz	r3, 800a722 <ArtNetNode::HandleTodControl()+0x68>
 800a6dc:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 800a6e0:	b13b      	cbz	r3, 800a6f2 <ArtNetNode::HandleTodControl()+0x38>
 800a6e2:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800a6e6:	b923      	cbnz	r3, 800a6f2 <ArtNetNode::HandleTodControl()+0x38>
 800a6e8:	68a0      	ldr	r0, [r4, #8]
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	6803      	ldr	r3, [r0, #0]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	4798      	blx	r3
 800a6f2:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d104      	bne.n	800a704 <ArtNetNode::HandleTodControl()+0x4a>
 800a6fa:	6920      	ldr	r0, [r4, #16]
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	6803      	ldr	r3, [r0, #0]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	4798      	blx	r3
 800a704:	4629      	mov	r1, r5
 800a706:	4620      	mov	r0, r4
 800a708:	f7ff ff80 	bl	800a60c <ArtNetNode::SendTod(unsigned int)>
 800a70c:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 800a710:	b13b      	cbz	r3, 800a722 <ArtNetNode::HandleTodControl()+0x68>
 800a712:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800a716:	b923      	cbnz	r3, 800a722 <ArtNetNode::HandleTodControl()+0x68>
 800a718:	68a0      	ldr	r0, [r4, #8]
 800a71a:	4629      	mov	r1, r5
 800a71c:	6803      	ldr	r3, [r0, #0]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	4798      	blx	r3
 800a722:	3501      	adds	r5, #1
 800a724:	2d04      	cmp	r5, #4
 800a726:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800a72a:	d1d0      	bne.n	800a6ce <ArtNetNode::HandleTodControl()+0x14>
 800a72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a72e <ArtNetNode::HandleTodRequest()>:
 800a72e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a730:	4604      	mov	r4, r0
 800a732:	4606      	mov	r6, r0
 800a734:	2500      	movs	r5, #0
 800a736:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800a73a:	f890 70b8 	ldrb.w	r7, [r0, #184]	; 0xb8
 800a73e:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800a742:	f8b6 36e4 	ldrh.w	r3, [r6, #1764]	; 0x6e4
 800a746:	42bb      	cmp	r3, r7
 800a748:	d106      	bne.n	800a758 <ArtNetNode::HandleTodRequest()+0x2a>
 800a74a:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 800a74e:	b11b      	cbz	r3, 800a758 <ArtNetNode::HandleTodRequest()+0x2a>
 800a750:	4629      	mov	r1, r5
 800a752:	4620      	mov	r0, r4
 800a754:	f7ff ff5a 	bl	800a60c <ArtNetNode::SendTod(unsigned int)>
 800a758:	3501      	adds	r5, #1
 800a75a:	2d04      	cmp	r5, #4
 800a75c:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800a760:	d1ef      	bne.n	800a742 <ArtNetNode::HandleTodRequest()+0x14>
 800a762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a764 <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)>:
 800a764:	b141      	cbz	r1, 800a778 <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)+0x14>
 800a766:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
 800a76a:	6101      	str	r1, [r0, #16]
 800a76c:	f043 0302 	orr.w	r3, r3, #2
 800a770:	f880 266e 	strb.w	r2, [r0, #1646]	; 0x66e
 800a774:	f880 3095 	strb.w	r3, [r0, #149]	; 0x95
 800a778:	4770      	bx	lr
	...

0800a77c <ArtNetNode::HandleRdm()>:
 800a77c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a780:	4604      	mov	r4, r0
 800a782:	4605      	mov	r5, r0
 800a784:	2600      	movs	r6, #0
 800a786:	f04f 0b01 	mov.w	fp, #1
 800a78a:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800a78e:	f890 70b7 	ldrb.w	r7, [r0, #183]	; 0xb7
 800a792:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a858 <ArtNetNode::HandleRdm()+0xdc>
 800a796:	f100 09a0 	add.w	r9, r0, #160	; 0xa0
 800a79a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800a79e:	f100 08b8 	add.w	r8, r0, #184	; 0xb8
 800a7a2:	f8b5 36e4 	ldrh.w	r3, [r5, #1764]	; 0x6e4
 800a7a6:	42bb      	cmp	r3, r7
 800a7a8:	d145      	bne.n	800a836 <ArtNetNode::HandleRdm()+0xba>
 800a7aa:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d041      	beq.n	800a836 <ArtNetNode::HandleRdm()+0xba>
 800a7b2:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800a7b6:	b9c3      	cbnz	r3, 800a7ea <ArtNetNode::HandleRdm()+0x6e>
 800a7b8:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d10c      	bne.n	800a7da <ArtNetNode::HandleRdm()+0x5e>
 800a7c0:	69e0      	ldr	r0, [r4, #28]
 800a7c2:	b150      	cbz	r0, 800a7da <ArtNetNode::HandleRdm()+0x5e>
 800a7c4:	6803      	ldr	r3, [r0, #0]
 800a7c6:	4631      	mov	r1, r6
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	4798      	blx	r3
 800a7cc:	f010 0f89 	tst.w	r0, #137	; 0x89
 800a7d0:	bf14      	ite	ne
 800a7d2:	2301      	movne	r3, #1
 800a7d4:	2300      	moveq	r3, #0
 800a7d6:	f885 3705 	strb.w	r3, [r5, #1797]	; 0x705
 800a7da:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 800a7de:	b123      	cbz	r3, 800a7ea <ArtNetNode::HandleRdm()+0x6e>
 800a7e0:	68a0      	ldr	r0, [r4, #8]
 800a7e2:	4631      	mov	r1, r6
 800a7e4:	6803      	ldr	r3, [r0, #0]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	4798      	blx	r3
 800a7ea:	6920      	ldr	r0, [r4, #16]
 800a7ec:	4642      	mov	r2, r8
 800a7ee:	6803      	ldr	r3, [r0, #0]
 800a7f0:	4631      	mov	r1, r6
 800a7f2:	695b      	ldr	r3, [r3, #20]
 800a7f4:	4798      	blx	r3
 800a7f6:	b358      	cbz	r0, 800a850 <ArtNetNode::HandleRdm()+0xd4>
 800a7f8:	46c4      	mov	ip, r8
 800a7fa:	f884 b0ac 	strb.w	fp, [r4, #172]	; 0xac
 800a7fe:	7881      	ldrb	r1, [r0, #2]
 800a800:	1c43      	adds	r3, r0, #1
 800a802:	460a      	mov	r2, r1
 800a804:	3102      	adds	r1, #2
 800a806:	4408      	add	r0, r1
 800a808:	4298      	cmp	r0, r3
 800a80a:	d11c      	bne.n	800a846 <ArtNetNode::HandleRdm()+0xca>
 800a80c:	f641 1336 	movw	r3, #6454	; 0x1936
 800a810:	4649      	mov	r1, r9
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	7920      	ldrb	r0, [r4, #4]
 800a816:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 800a81a:	3219      	adds	r2, #25
 800a81c:	f005 fe24 	bl	8010468 <udp_send>
 800a820:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 800a824:	b13b      	cbz	r3, 800a836 <ArtNetNode::HandleRdm()+0xba>
 800a826:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800a82a:	b923      	cbnz	r3, 800a836 <ArtNetNode::HandleRdm()+0xba>
 800a82c:	68a0      	ldr	r0, [r4, #8]
 800a82e:	4631      	mov	r1, r6
 800a830:	6803      	ldr	r3, [r0, #0]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	4798      	blx	r3
 800a836:	3601      	adds	r6, #1
 800a838:	2e04      	cmp	r6, #4
 800a83a:	f105 0524 	add.w	r5, r5, #36	; 0x24
 800a83e:	d1b0      	bne.n	800a7a2 <ArtNetNode::HandleRdm()+0x26>
 800a840:	b003      	add	sp, #12
 800a842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a846:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a84a:	f80c 1b01 	strb.w	r1, [ip], #1
 800a84e:	e7db      	b.n	800a808 <ArtNetNode::HandleRdm()+0x8c>
 800a850:	4650      	mov	r0, sl
 800a852:	f009 fb79 	bl	8013f48 <printf>
 800a856:	e7e3      	b.n	800a820 <ArtNetNode::HandleRdm()+0xa4>
 800a858:	0801669e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r9, sl, sp, lr}

0800a85c <ArtNetNode::HandleSync()>:
 800a85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a860:	2500      	movs	r5, #0
 800a862:	2301      	movs	r3, #1
 800a864:	4604      	mov	r4, r0
 800a866:	4606      	mov	r6, r0
 800a868:	46a9      	mov	r9, r5
 800a86a:	f880 36d9 	strb.w	r3, [r0, #1753]	; 0x6d9
 800a86e:	4b1e      	ldr	r3, [pc, #120]	; (800a8e8 <ArtNetNode::HandleSync()+0x8c>)
 800a870:	4f1e      	ldr	r7, [pc, #120]	; (800a8ec <ArtNetNode::HandleSync()+0x90>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800a8f0 <ArtNetNode::HandleSync()+0x94>
 800a878:	f8c0 36d0 	str.w	r3, [r0, #1744]	; 0x6d0
 800a87c:	7823      	ldrb	r3, [r4, #0]
 800a87e:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 800a882:	d301      	bcc.n	800a888 <ArtNetNode::HandleSync()+0x2c>
 800a884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a888:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 800a88c:	bb3b      	cbnz	r3, 800a8de <ArtNetNode::HandleSync()+0x82>
 800a88e:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 800a892:	b323      	cbz	r3, 800a8de <ArtNetNode::HandleSync()+0x82>
 800a894:	f8d8 3000 	ldr.w	r3, [r8]
 800a898:	68a0      	ldr	r0, [r4, #8]
 800a89a:	07da      	lsls	r2, r3, #31
 800a89c:	bf5c      	itt	pl
 800a89e:	2301      	movpl	r3, #1
 800a8a0:	f8c8 3000 	strpl.w	r3, [r8]
 800a8a4:	6803      	ldr	r3, [r0, #0]
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800a8ac:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800a8b0:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800a8b4:	47d0      	blx	sl
 800a8b6:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 800a8ba:	b93b      	cbnz	r3, 800a8cc <ArtNetNode::HandleSync()+0x70>
 800a8bc:	68a0      	ldr	r0, [r4, #8]
 800a8be:	4629      	mov	r1, r5
 800a8c0:	6803      	ldr	r3, [r0, #0]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	4798      	blx	r3
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	f886 3705 	strb.w	r3, [r6, #1797]	; 0x705
 800a8cc:	f8d8 3000 	ldr.w	r3, [r8]
 800a8d0:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800a8d4:	07db      	lsls	r3, r3, #31
 800a8d6:	bf5c      	itt	pl
 800a8d8:	2301      	movpl	r3, #1
 800a8da:	f8c8 3000 	strpl.w	r3, [r8]
 800a8de:	3501      	adds	r5, #1
 800a8e0:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800a8e4:	3624      	adds	r6, #36	; 0x24
 800a8e6:	e7c9      	b.n	800a87c <ArtNetNode::HandleSync()+0x20>
 800a8e8:	2000a734 	andcs	sl, r0, r4, lsr r7
 800a8ec:	20000100 	andcs	r0, r0, r0, lsl #2
 800a8f0:	200000fc 	strdcs	r0, [r0], -ip

0800a8f4 <ArtNetNode::HandleTimeCode()>:
 800a8f4:	4601      	mov	r1, r0
 800a8f6:	68c0      	ldr	r0, [r0, #12]
 800a8f8:	31ae      	adds	r1, #174	; 0xae
 800a8fa:	6803      	ldr	r3, [r0, #0]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	4718      	bx	r3

0800a900 <ArtNetNode::HandleTimeSync()>:
 800a900:	b500      	push	{lr}
 800a902:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 800a906:	b08b      	sub	sp, #44	; 0x2c
 800a908:	9301      	str	r3, [sp, #4]
 800a90a:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 800a90e:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
 800a912:	9302      	str	r3, [sp, #8]
 800a914:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800a918:	a901      	add	r1, sp, #4
 800a91a:	9303      	str	r3, [sp, #12]
 800a91c:	f890 30b2 	ldrb.w	r3, [r0, #178]	; 0xb2
 800a920:	9304      	str	r3, [sp, #16]
 800a922:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
 800a926:	9305      	str	r3, [sp, #20]
 800a928:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800a92c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a930:	9306      	str	r3, [sp, #24]
 800a932:	4b03      	ldr	r3, [pc, #12]	; (800a940 <ArtNetNode::HandleTimeSync()+0x40>)
 800a934:	6818      	ldr	r0, [r3, #0]
 800a936:	f008 fecf 	bl	80136d8 <Hardware::SetTime(tm const*)>
 800a93a:	b00b      	add	sp, #44	; 0x2c
 800a93c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a940:	2000a71c 	andcs	sl, r0, ip, lsl r7

0800a944 <ArtNetNode::Print()>:
 800a944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a948:	4605      	mov	r5, r0
 800a94a:	4604      	mov	r4, r0
 800a94c:	b08b      	sub	sp, #44	; 0x2c
 800a94e:	f815 2b42 	ldrb.w	r2, [r5], #66
 800a952:	2104      	movs	r1, #4
 800a954:	4852      	ldr	r0, [pc, #328]	; (800aaa0 <ArtNetNode::Print()+0x15c>)
 800a956:	f009 faf7 	bl	8013f48 <printf>
 800a95a:	4b52      	ldr	r3, [pc, #328]	; (800aaa4 <ArtNetNode::Print()+0x160>)
 800a95c:	4852      	ldr	r0, [pc, #328]	; (800aaa8 <ArtNetNode::Print()+0x164>)
 800a95e:	7819      	ldrb	r1, [r3, #0]
 800a960:	785a      	ldrb	r2, [r3, #1]
 800a962:	f009 faf1 	bl	8013f48 <printf>
 800a966:	4629      	mov	r1, r5
 800a968:	4850      	ldr	r0, [pc, #320]	; (800aaac <ArtNetNode::Print()+0x168>)
 800a96a:	f009 faed 	bl	8013f48 <printf>
 800a96e:	4850      	ldr	r0, [pc, #320]	; (800aab0 <ArtNetNode::Print()+0x16c>)
 800a970:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800a974:	f009 fae8 	bl	8013f48 <printf>
 800a978:	f894 36de 	ldrb.w	r3, [r4, #1758]	; 0x6de
 800a97c:	b983      	cbnz	r3, 800a9a0 <ArtNetNode::Print()+0x5c>
 800a97e:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 800a982:	b153      	cbz	r3, 800a99a <ArtNetNode::Print()+0x56>
 800a984:	484b      	ldr	r0, [pc, #300]	; (800aab4 <ArtNetNode::Print()+0x170>)
 800a986:	f009 fadf 	bl	8013f48 <printf>
 800a98a:	f04f 0b00 	mov.w	fp, #0
 800a98e:	4e4a      	ldr	r6, [pc, #296]	; (800aab8 <ArtNetNode::Print()+0x174>)
 800a990:	4f4a      	ldr	r7, [pc, #296]	; (800aabc <ArtNetNode::Print()+0x178>)
 800a992:	7823      	ldrb	r3, [r4, #0]
 800a994:	ebbb 0f83 	cmp.w	fp, r3, lsl #2
 800a998:	d347      	bcc.n	800aa2a <ArtNetNode::Print()+0xe6>
 800a99a:	b00b      	add	sp, #44	; 0x2c
 800a99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a0:	4847      	ldr	r0, [pc, #284]	; (800aac0 <ArtNetNode::Print()+0x17c>)
 800a9a2:	f009 fad1 	bl	8013f48 <printf>
 800a9a6:	4626      	mov	r6, r4
 800a9a8:	2500      	movs	r5, #0
 800a9aa:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800aac4 <ArtNetNode::Print()+0x180>
 800a9ae:	f8df 9118 	ldr.w	r9, [pc, #280]	; 800aac8 <ArtNetNode::Print()+0x184>
 800a9b2:	7823      	ldrb	r3, [r4, #0]
 800a9b4:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 800a9b8:	d2e1      	bcs.n	800a97e <ArtNetNode::Print()+0x3a>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	4629      	mov	r1, r5
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 800a9c4:	f7fe fecc 	bl	8009760 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 800a9c8:	b360      	cbz	r0, 800aa24 <ArtNetNode::Print()+0xe0>
 800a9ca:	eb04 0395 	add.w	r3, r4, r5, lsr #2
 800a9ce:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
 800a9d2:	f893 b03f 	ldrb.w	fp, [r3, #63]	; 0x3f
 800a9d6:	4629      	mov	r1, r5
 800a9d8:	2301      	movs	r3, #1
 800a9da:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f7fe fea8 	bl	8009734 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800a9e4:	f8d6 06fc 	ldr.w	r0, [r6, #1788]	; 0x6fc
 800a9e8:	4938      	ldr	r1, [pc, #224]	; (800aacc <ArtNetNode::Print()+0x188>)
 800a9ea:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	bf18      	it	ne
 800a9f2:	4641      	movne	r1, r8
 800a9f4:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800a9f8:	08af      	lsrs	r7, r5, #2
 800a9fa:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800a9fe:	e9cd b300 	strd	fp, r3, [sp]
 800aa02:	463a      	mov	r2, r7
 800aa04:	4653      	mov	r3, sl
 800aa06:	4629      	mov	r1, r5
 800aa08:	4648      	mov	r0, r9
 800aa0a:	f009 fa9d 	bl	8013f48 <printf>
 800aa0e:	f8d6 1700 	ldr.w	r1, [r6, #1792]	; 0x700
 800aa12:	4a2f      	ldr	r2, [pc, #188]	; (800aad0 <ArtNetNode::Print()+0x18c>)
 800aa14:	4b2f      	ldr	r3, [pc, #188]	; (800aad4 <ArtNetNode::Print()+0x190>)
 800aa16:	4830      	ldr	r0, [pc, #192]	; (800aad8 <ArtNetNode::Print()+0x194>)
 800aa18:	2900      	cmp	r1, #0
 800aa1a:	bf0c      	ite	eq
 800aa1c:	4611      	moveq	r1, r2
 800aa1e:	4619      	movne	r1, r3
 800aa20:	f009 fa92 	bl	8013f48 <printf>
 800aa24:	3501      	adds	r5, #1
 800aa26:	3624      	adds	r6, #36	; 0x24
 800aa28:	e7c3      	b.n	800a9b2 <ArtNetNode::Print()+0x6e>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	4659      	mov	r1, fp
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 800aa34:	f7fe fe94 	bl	8009760 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 800aa38:	b378      	cbz	r0, 800aa9a <ArtNetNode::Print()+0x156>
 800aa3a:	eb04 039b 	add.w	r3, r4, fp, lsr #2
 800aa3e:	f893 903e 	ldrb.w	r9, [r3, #62]	; 0x3e
 800aa42:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
 800aa46:	eb04 130b 	add.w	r3, r4, fp, lsl #4
 800aa4a:	f8d3 577c 	ldr.w	r5, [r3, #1916]	; 0x77c
 800aa4e:	ea4f 089b 	mov.w	r8, fp, lsr #2
 800aa52:	b925      	cbnz	r5, 800aa5e <ArtNetNode::Print()+0x11a>
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	699a      	ldr	r2, [r3, #24]
 800aa58:	691d      	ldr	r5, [r3, #16]
 800aa5a:	ea65 0502 	orn	r5, r5, r2
 800aa5e:	2300      	movs	r3, #0
 800aa60:	4659      	mov	r1, fp
 800aa62:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800aa66:	4620      	mov	r0, r4
 800aa68:	f7fe fe64 	bl	8009734 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800aa6c:	0e2b      	lsrs	r3, r5, #24
 800aa6e:	9306      	str	r3, [sp, #24]
 800aa70:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800aa74:	9305      	str	r3, [sp, #20]
 800aa76:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800aa7a:	9304      	str	r3, [sp, #16]
 800aa7c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800aa80:	b2ed      	uxtb	r5, r5
 800aa82:	9302      	str	r3, [sp, #8]
 800aa84:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800aa88:	4642      	mov	r2, r8
 800aa8a:	e9cd a300 	strd	sl, r3, [sp]
 800aa8e:	4659      	mov	r1, fp
 800aa90:	464b      	mov	r3, r9
 800aa92:	4630      	mov	r0, r6
 800aa94:	9503      	str	r5, [sp, #12]
 800aa96:	f009 fa57 	bl	8013f48 <printf>
 800aa9a:	f10b 0b01 	add.w	fp, fp, #1
 800aa9e:	e778      	b.n	800a992 <ArtNetNode::Print()+0x4e>
 800aaa0:	080166c4 	stmdaeq	r1, {r2, r6, r7, r9, sl, sp, lr}
 800aaa4:	0801692f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r8, fp, sp, lr}
 800aaa8:	080166d2 	stmdaeq	r1, {r1, r4, r6, r7, r9, sl, sp, lr}
 800aaac:	080166e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, sl, sp, lr}
 800aab0:	080166f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, sl, sp, lr}
 800aab4:	08016743 	stmdaeq	r1, {r0, r1, r6, r8, r9, sl, sp, lr}
 800aab8:	0801674b 	stmdaeq	r1, {r0, r1, r3, r6, r8, r9, sl, sp, lr}
 800aabc:	20009ff4 	strdcs	r9, [r0], -r4
 800aac0:	0801670b 	stmdaeq	r1, {r0, r1, r3, r8, r9, sl, sp, lr}
 800aac4:	080166b3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r9, sl, sp, lr}
 800aac8:	08016714 	stmdaeq	r1, {r2, r4, r8, r9, sl, sp, lr}
 800aacc:	080166af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r9, sl, sp, lr}
 800aad0:	080166b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r9, sl, sp, lr}
 800aad4:	080166bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r9, sl, sp, lr}
 800aad8:	0801673c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, sl, sp, lr}

0800aadc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800aadc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aade:	88c6      	ldrh	r6, [r0, #6]
 800aae0:	8885      	ldrh	r5, [r0, #4]
 800aae2:	42ae      	cmp	r6, r5
 800aae4:	d216      	bcs.n	800ab14 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800aae6:	4604      	mov	r4, r0
 800aae8:	6800      	ldr	r0, [r0, #0]
 800aaea:	1bad      	subs	r5, r5, r6
 800aaec:	4430      	add	r0, r6
 800aaee:	7a26      	ldrb	r6, [r4, #8]
 800aaf0:	b923      	cbnz	r3, 800aafc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800aaf2:	b926      	cbnz	r6, 800aafe <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800aaf4:	9200      	str	r2, [sp, #0]
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4a09      	ldr	r2, [pc, #36]	; (800ab20 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800aafa:	e003      	b.n	800ab04 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800aafc:	b166      	cbz	r6, 800ab18 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800aafe:	460b      	mov	r3, r1
 800ab00:	9200      	str	r2, [sp, #0]
 800ab02:	4a08      	ldr	r2, [pc, #32]	; (800ab24 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800ab04:	4629      	mov	r1, r5
 800ab06:	f009 fa47 	bl	8013f98 <snprintf>
 800ab0a:	4285      	cmp	r5, r0
 800ab0c:	bfa2      	ittt	ge
 800ab0e:	88e3      	ldrhge	r3, [r4, #6]
 800ab10:	181b      	addge	r3, r3, r0
 800ab12:	80e3      	strhge	r3, [r4, #6]
 800ab14:	b002      	add	sp, #8
 800ab16:	bd70      	pop	{r4, r5, r6, pc}
 800ab18:	9200      	str	r2, [sp, #0]
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	4a02      	ldr	r2, [pc, #8]	; (800ab28 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800ab1e:	e7f1      	b.n	800ab04 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800ab20:	08016787 	stmdaeq	r1, {r0, r1, r2, r7, r8, r9, sl, sp, lr}
 800ab24:	0801677e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r8, r9, sl, sp, lr}
 800ab28:	08016788 	stmdaeq	r1, {r3, r7, r8, r9, sl, sp, lr}

0800ab2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800ab2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab2e:	88c6      	ldrh	r6, [r0, #6]
 800ab30:	8885      	ldrh	r5, [r0, #4]
 800ab32:	42ae      	cmp	r6, r5
 800ab34:	d216      	bcs.n	800ab64 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800ab36:	4604      	mov	r4, r0
 800ab38:	6800      	ldr	r0, [r0, #0]
 800ab3a:	1bad      	subs	r5, r5, r6
 800ab3c:	4430      	add	r0, r6
 800ab3e:	7a26      	ldrb	r6, [r4, #8]
 800ab40:	b923      	cbnz	r3, 800ab4c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800ab42:	b926      	cbnz	r6, 800ab4e <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800ab44:	9200      	str	r2, [sp, #0]
 800ab46:	460b      	mov	r3, r1
 800ab48:	4a09      	ldr	r2, [pc, #36]	; (800ab70 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800ab4a:	e003      	b.n	800ab54 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800ab4c:	b166      	cbz	r6, 800ab68 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800ab4e:	460b      	mov	r3, r1
 800ab50:	9200      	str	r2, [sp, #0]
 800ab52:	4a08      	ldr	r2, [pc, #32]	; (800ab74 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800ab54:	4629      	mov	r1, r5
 800ab56:	f009 fa1f 	bl	8013f98 <snprintf>
 800ab5a:	4285      	cmp	r5, r0
 800ab5c:	bfa2      	ittt	ge
 800ab5e:	88e3      	ldrhge	r3, [r4, #6]
 800ab60:	181b      	addge	r3, r3, r0
 800ab62:	80e3      	strhge	r3, [r4, #6]
 800ab64:	b002      	add	sp, #8
 800ab66:	bd70      	pop	{r4, r5, r6, pc}
 800ab68:	9200      	str	r2, [sp, #0]
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	4a02      	ldr	r2, [pc, #8]	; (800ab78 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800ab6e:	e7f1      	b.n	800ab54 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800ab70:	0801679a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, sl, sp, lr}
 800ab74:	0801678f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, r9, sl, sp, lr}
 800ab78:	0801679b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r8, r9, sl, sp, lr}

0800ab7c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800ab7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab7e:	460b      	mov	r3, r1
 800ab80:	8885      	ldrh	r5, [r0, #4]
 800ab82:	88c1      	ldrh	r1, [r0, #6]
 800ab84:	42a9      	cmp	r1, r5
 800ab86:	d214      	bcs.n	800abb2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800ab88:	4604      	mov	r4, r0
 800ab8a:	6800      	ldr	r0, [r0, #0]
 800ab8c:	1a6d      	subs	r5, r5, r1
 800ab8e:	4408      	add	r0, r1
 800ab90:	7a21      	ldrb	r1, [r4, #8]
 800ab92:	b91a      	cbnz	r2, 800ab9c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800ab94:	b919      	cbnz	r1, 800ab9e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800ab96:	4a0a      	ldr	r2, [pc, #40]	; (800abc0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800ab98:	9100      	str	r1, [sp, #0]
 800ab9a:	e002      	b.n	800aba2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800ab9c:	b159      	cbz	r1, 800abb6 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800ab9e:	9200      	str	r2, [sp, #0]
 800aba0:	4a08      	ldr	r2, [pc, #32]	; (800abc4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800aba2:	4629      	mov	r1, r5
 800aba4:	f009 f9f8 	bl	8013f98 <snprintf>
 800aba8:	4285      	cmp	r5, r0
 800abaa:	bfa2      	ittt	ge
 800abac:	88e3      	ldrhge	r3, [r4, #6]
 800abae:	181b      	addge	r3, r3, r0
 800abb0:	80e3      	strhge	r3, [r4, #6]
 800abb2:	b003      	add	sp, #12
 800abb4:	bd30      	pop	{r4, r5, pc}
 800abb6:	2201      	movs	r2, #1
 800abb8:	9200      	str	r2, [sp, #0]
 800abba:	4a03      	ldr	r2, [pc, #12]	; (800abc8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800abbc:	e7f1      	b.n	800aba2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800abbe:	bf00      	nop
 800abc0:	08016787 	stmdaeq	r1, {r0, r1, r2, r7, r8, r9, sl, sp, lr}
 800abc4:	0801677e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r8, r9, sl, sp, lr}
 800abc8:	08016788 	stmdaeq	r1, {r3, r7, r8, r9, sl, sp, lr}

0800abcc <strncpy.isra.0>:
 800abcc:	1e4b      	subs	r3, r1, #1
 800abce:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800abd2:	b909      	cbnz	r1, 800abd8 <strncpy.isra.0+0xc>
 800abd4:	f008 be9a 	b.w	801390c <memset>
 800abd8:	3a01      	subs	r2, #1
 800abda:	f800 1b01 	strb.w	r1, [r0], #1
 800abde:	d1f6      	bne.n	800abce <strncpy.isra.0+0x2>
 800abe0:	4770      	bx	lr
	...

0800abe4 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
 800abe4:	b510      	push	{r4, lr}
 800abe6:	2287      	movs	r2, #135	; 0x87
 800abe8:	4604      	mov	r4, r0
 800abea:	f840 1b04 	str.w	r1, [r0], #4
 800abee:	2100      	movs	r1, #0
 800abf0:	f008 fe8c 	bl	801390c <memset>
 800abf4:	2301      	movs	r3, #1
 800abf6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800abfa:	f240 3302 	movw	r3, #770	; 0x302
 800abfe:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800ac02:	2304      	movs	r3, #4
 800ac04:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 800ac08:	4b07      	ldr	r3, [pc, #28]	; (800ac28 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x44>)
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	785a      	ldrb	r2, [r3, #1]
 800ac0e:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
 800ac18:	230a      	movs	r3, #10
 800ac1a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 800ac1e:	23ff      	movs	r3, #255	; 0xff
 800ac20:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800ac24:	bd10      	pop	{r4, pc}
 800ac26:	bf00      	nop
 800ac28:	0801692b 	stmdaeq	r1, {r0, r1, r3, r5, r8, fp, sp, lr}

0800ac2c <ArtNetParams::Load()>:
 800ac2c:	b508      	push	{r3, lr}
 800ac2e:	2300      	movs	r3, #0
 800ac30:	4601      	mov	r1, r0
 800ac32:	6043      	str	r3, [r0, #4]
 800ac34:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800ac38:	6800      	ldr	r0, [r0, #0]
 800ac3a:	b120      	cbz	r0, 800ac46 <ArtNetParams::Load()+0x1a>
 800ac3c:	6803      	ldr	r3, [r0, #0]
 800ac3e:	3104      	adds	r1, #4
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	4798      	blx	r3
 800ac44:	2001      	movs	r0, #1
 800ac46:	bd08      	pop	{r3, pc}

0800ac48 <ArtNetParams::Load(char const*, unsigned int)>:
 800ac48:	6803      	ldr	r3, [r0, #0]
 800ac4a:	b1e3      	cbz	r3, 800ac86 <ArtNetParams::Load(char const*, unsigned int)+0x3e>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac50:	460d      	mov	r5, r1
 800ac52:	4616      	mov	r6, r2
 800ac54:	4604      	mov	r4, r0
 800ac56:	6043      	str	r3, [r0, #4]
 800ac58:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	490a      	ldr	r1, [pc, #40]	; (800ac88 <ArtNetParams::Load(char const*, unsigned int)+0x40>)
 800ac60:	4668      	mov	r0, sp
 800ac62:	f007 ffbf 	bl	8012be4 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800ac66:	4632      	mov	r2, r6
 800ac68:	4629      	mov	r1, r5
 800ac6a:	4668      	mov	r0, sp
 800ac6c:	f007 ffbe 	bl	8012bec <ReadConfigFile::Read(char const*, unsigned int)>
 800ac70:	4621      	mov	r1, r4
 800ac72:	f851 0b04 	ldr.w	r0, [r1], #4
 800ac76:	6803      	ldr	r3, [r0, #0]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	4798      	blx	r3
 800ac7c:	4668      	mov	r0, sp
 800ac7e:	f007 ffb4 	bl	8012bea <ReadConfigFile::~ReadConfigFile()>
 800ac82:	b002      	add	sp, #8
 800ac84:	bd70      	pop	{r4, r5, r6, pc}
 800ac86:	4770      	bx	lr
 800ac88:	0800b049 	stmdaeq	r0, {r0, r3, r6, ip, sp, pc}

0800ac8c <ArtNetParams::SetBool(unsigned char, unsigned int)>:
 800ac8c:	6843      	ldr	r3, [r0, #4]
 800ac8e:	b111      	cbz	r1, 800ac96 <ArtNetParams::SetBool(unsigned char, unsigned int)+0xa>
 800ac90:	4313      	orrs	r3, r2
 800ac92:	6043      	str	r3, [r0, #4]
 800ac94:	4770      	bx	lr
 800ac96:	ea23 0302 	bic.w	r3, r3, r2
 800ac9a:	e7fa      	b.n	800ac92 <ArtNetParams::SetBool(unsigned char, unsigned int)+0x6>

0800ac9c <ArtNetParams::callbackFunction(char const*)>:
 800ac9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca0:	460e      	mov	r6, r1
 800aca2:	b0a5      	sub	sp, #148	; 0x94
 800aca4:	4604      	mov	r4, r0
 800aca6:	49a6      	ldr	r1, [pc, #664]	; (800af40 <ArtNetParams::callbackFunction(char const*)+0x2a4>)
 800aca8:	4630      	mov	r0, r6
 800acaa:	f10d 0205 	add.w	r2, sp, #5
 800acae:	f008 f8d6 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800acb2:	b940      	cbnz	r0, 800acc6 <ArtNetParams::callbackFunction(char const*)+0x2a>
 800acb4:	2220      	movs	r2, #32
 800acb6:	4620      	mov	r0, r4
 800acb8:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800acbc:	b025      	add	sp, #148	; 0x94
 800acbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc2:	f7ff bfe3 	b.w	800ac8c <ArtNetParams::SetBool(unsigned char, unsigned int)>
 800acc6:	2311      	movs	r3, #17
 800acc8:	4630      	mov	r0, r6
 800acca:	9303      	str	r3, [sp, #12]
 800accc:	499d      	ldr	r1, [pc, #628]	; (800af44 <ArtNetParams::callbackFunction(char const*)+0x2a8>)
 800acce:	ab03      	add	r3, sp, #12
 800acd0:	f104 0210 	add.w	r2, r4, #16
 800acd4:	f007 ffbe 	bl	8012c54 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800acd8:	b938      	cbnz	r0, 800acea <ArtNetParams::callbackFunction(char const*)+0x4e>
 800acda:	9b03      	ldr	r3, [sp, #12]
 800acdc:	4423      	add	r3, r4
 800acde:	7418      	strb	r0, [r3, #16]
 800ace0:	6863      	ldr	r3, [r4, #4]
 800ace2:	f043 0302 	orr.w	r3, r3, #2
 800ace6:	6063      	str	r3, [r4, #4]
 800ace8:	e0d0      	b.n	800ae8c <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800acea:	233f      	movs	r3, #63	; 0x3f
 800acec:	4630      	mov	r0, r6
 800acee:	9303      	str	r3, [sp, #12]
 800acf0:	4995      	ldr	r1, [pc, #596]	; (800af48 <ArtNetParams::callbackFunction(char const*)+0x2ac>)
 800acf2:	ab03      	add	r3, sp, #12
 800acf4:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800acf8:	f007 ffac 	bl	8012c54 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800acfc:	b938      	cbnz	r0, 800ad0e <ArtNetParams::callbackFunction(char const*)+0x72>
 800acfe:	9b03      	ldr	r3, [sp, #12]
 800ad00:	4423      	add	r3, r4
 800ad02:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800ad06:	6863      	ldr	r3, [r4, #4]
 800ad08:	f043 0301 	orr.w	r3, r3, #1
 800ad0c:	e7eb      	b.n	800ace6 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800ad0e:	4630      	mov	r0, r6
 800ad10:	498e      	ldr	r1, [pc, #568]	; (800af4c <ArtNetParams::callbackFunction(char const*)+0x2b0>)
 800ad12:	f10d 0206 	add.w	r2, sp, #6
 800ad16:	f008 f819 	bl	8012d4c <Sscan::HexUint16(char const*, char const*, unsigned short&)>
 800ad1a:	b940      	cbnz	r0, 800ad2e <ArtNetParams::callbackFunction(char const*)+0x92>
 800ad1c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ad20:	ba5b      	rev16	r3, r3
 800ad22:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 800ad26:	6863      	ldr	r3, [r4, #4]
 800ad28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ad2c:	e7db      	b.n	800ace6 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800ad2e:	4630      	mov	r0, r6
 800ad30:	4987      	ldr	r1, [pc, #540]	; (800af50 <ArtNetParams::callbackFunction(char const*)+0x2b4>)
 800ad32:	f10d 0205 	add.w	r2, sp, #5
 800ad36:	f008 f892 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ad3a:	b958      	cbnz	r0, 800ad54 <ArtNetParams::callbackFunction(char const*)+0xb8>
 800ad3c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ad40:	6863      	ldr	r3, [r4, #4]
 800ad42:	2a0a      	cmp	r2, #10
 800ad44:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 800ad48:	bf14      	ite	ne
 800ad4a:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 800ad4e:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 800ad52:	e7c8      	b.n	800ace6 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800ad54:	4630      	mov	r0, r6
 800ad56:	497f      	ldr	r1, [pc, #508]	; (800af54 <ArtNetParams::callbackFunction(char const*)+0x2b8>)
 800ad58:	f10d 0205 	add.w	r2, sp, #5
 800ad5c:	f008 f87f 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ad60:	b910      	cbnz	r0, 800ad68 <ArtNetParams::callbackFunction(char const*)+0xcc>
 800ad62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ad66:	e7a6      	b.n	800acb6 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800ad68:	4630      	mov	r0, r6
 800ad6a:	497b      	ldr	r1, [pc, #492]	; (800af58 <ArtNetParams::callbackFunction(char const*)+0x2bc>)
 800ad6c:	f10d 0205 	add.w	r2, sp, #5
 800ad70:	f008 f875 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ad74:	b950      	cbnz	r0, 800ad8c <ArtNetParams::callbackFunction(char const*)+0xf0>
 800ad76:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ad7a:	6863      	ldr	r3, [r4, #4]
 800ad7c:	7222      	strb	r2, [r4, #8]
 800ad7e:	b112      	cbz	r2, 800ad86 <ArtNetParams::callbackFunction(char const*)+0xea>
 800ad80:	f043 0304 	orr.w	r3, r3, #4
 800ad84:	e7af      	b.n	800ace6 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800ad86:	f023 0304 	bic.w	r3, r3, #4
 800ad8a:	e7ac      	b.n	800ace6 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	4973      	ldr	r1, [pc, #460]	; (800af5c <ArtNetParams::callbackFunction(char const*)+0x2c0>)
 800ad90:	f10d 0205 	add.w	r2, sp, #5
 800ad94:	f008 f863 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ad98:	b950      	cbnz	r0, 800adb0 <ArtNetParams::callbackFunction(char const*)+0x114>
 800ad9a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ad9e:	6863      	ldr	r3, [r4, #4]
 800ada0:	7262      	strb	r2, [r4, #9]
 800ada2:	b112      	cbz	r2, 800adaa <ArtNetParams::callbackFunction(char const*)+0x10e>
 800ada4:	f043 0308 	orr.w	r3, r3, #8
 800ada8:	e79d      	b.n	800ace6 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800adaa:	f023 0308 	bic.w	r3, r3, #8
 800adae:	e79a      	b.n	800ace6 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800adb0:	2303      	movs	r3, #3
 800adb2:	4630      	mov	r0, r6
 800adb4:	9303      	str	r3, [sp, #12]
 800adb6:	496a      	ldr	r1, [pc, #424]	; (800af60 <ArtNetParams::callbackFunction(char const*)+0x2c4>)
 800adb8:	ab03      	add	r3, sp, #12
 800adba:	aa04      	add	r2, sp, #16
 800adbc:	f007 ff4a 	bl	8012c54 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800adc0:	b9f0      	cbnz	r0, 800ae00 <ArtNetParams::callbackFunction(char const*)+0x164>
 800adc2:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800adc6:	6863      	ldr	r3, [r4, #4]
 800adc8:	f042 0220 	orr.w	r2, r2, #32
 800adcc:	2a6c      	cmp	r2, #108	; 0x6c
 800adce:	d111      	bne.n	800adf4 <ArtNetParams::callbackFunction(char const*)+0x158>
 800add0:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800add4:	f042 0220 	orr.w	r2, r2, #32
 800add8:	2a74      	cmp	r2, #116	; 0x74
 800adda:	d10b      	bne.n	800adf4 <ArtNetParams::callbackFunction(char const*)+0x158>
 800addc:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800ade0:	f042 0220 	orr.w	r2, r2, #32
 800ade4:	2a70      	cmp	r2, #112	; 0x70
 800ade6:	d105      	bne.n	800adf4 <ArtNetParams::callbackFunction(char const*)+0x158>
 800ade8:	2201      	movs	r2, #1
 800adea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adee:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
 800adf2:	e778      	b.n	800ace6 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800adf4:	2200      	movs	r2, #0
 800adf6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800adfa:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
 800adfe:	e772      	b.n	800ace6 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800ae00:	2304      	movs	r3, #4
 800ae02:	4630      	mov	r0, r6
 800ae04:	9303      	str	r3, [sp, #12]
 800ae06:	4957      	ldr	r1, [pc, #348]	; (800af64 <ArtNetParams::callbackFunction(char const*)+0x2c8>)
 800ae08:	ab03      	add	r3, sp, #12
 800ae0a:	aa04      	add	r2, sp, #16
 800ae0c:	f007 ff22 	bl	8012c54 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800ae10:	b9c0      	cbnz	r0, 800ae44 <ArtNetParams::callbackFunction(char const*)+0x1a8>
 800ae12:	2304      	movs	r3, #4
 800ae14:	4954      	ldr	r1, [pc, #336]	; (800af68 <ArtNetParams::callbackFunction(char const*)+0x2cc>)
 800ae16:	aa04      	add	r2, sp, #16
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	d206      	bcs.n	800ae2a <ArtNetParams::callbackFunction(char const*)+0x18e>
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 800ae22:	6863      	ldr	r3, [r4, #4]
 800ae24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ae28:	e75d      	b.n	800ace6 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800ae2a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ae2e:	f811 0b01 	ldrb.w	r0, [r1], #1
 800ae32:	4285      	cmp	r5, r0
 800ae34:	d0f0      	beq.n	800ae18 <ArtNetParams::callbackFunction(char const*)+0x17c>
 800ae36:	2200      	movs	r2, #0
 800ae38:	6863      	ldr	r3, [r4, #4]
 800ae3a:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
 800ae3e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800ae42:	e750      	b.n	800ace6 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800ae44:	2500      	movs	r5, #0
 800ae46:	4f49      	ldr	r7, [pc, #292]	; (800af6c <ArtNetParams::callbackFunction(char const*)+0x2d0>)
 800ae48:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800af70 <ArtNetParams::callbackFunction(char const*)+0x2d4>
 800ae4c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 800af74 <ArtNetParams::callbackFunction(char const*)+0x2d8>
 800ae50:	f8df a124 	ldr.w	sl, [pc, #292]	; 800af78 <ArtNetParams::callbackFunction(char const*)+0x2dc>
 800ae54:	4639      	mov	r1, r7
 800ae56:	4630      	mov	r0, r6
 800ae58:	f10d 0205 	add.w	r2, sp, #5
 800ae5c:	f007 ffff 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ae60:	b9b8      	cbnz	r0, 800ae92 <ArtNetParams::callbackFunction(char const*)+0x1f6>
 800ae62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae66:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800ae6a:	6862      	ldr	r2, [r4, #4]
 800ae6c:	280f      	cmp	r0, #15
 800ae6e:	fa03 f305 	lsl.w	r3, r3, r5
 800ae72:	eb04 0105 	add.w	r1, r4, r5
 800ae76:	d803      	bhi.n	800ae80 <ArtNetParams::callbackFunction(char const*)+0x1e4>
 800ae78:	f881 006b 	strb.w	r0, [r1, #107]	; 0x6b
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	e732      	b.n	800ace6 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800ae80:	3501      	adds	r5, #1
 800ae82:	f881 506b 	strb.w	r5, [r1, #107]	; 0x6b
 800ae86:	ea22 0203 	bic.w	r2, r2, r3
 800ae8a:	6062      	str	r2, [r4, #4]
 800ae8c:	b025      	add	sp, #148	; 0x94
 800ae8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae92:	f04f 0b12 	mov.w	fp, #18
 800ae96:	2303      	movs	r3, #3
 800ae98:	fb0b fb05 	mul.w	fp, fp, r5
 800ae9c:	9303      	str	r3, [sp, #12]
 800ae9e:	4630      	mov	r0, r6
 800aea0:	ab03      	add	r3, sp, #12
 800aea2:	aa04      	add	r2, sp, #16
 800aea4:	eb08 010b 	add.w	r1, r8, fp
 800aea8:	f007 fed4 	bl	8012c54 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800aeac:	b9f0      	cbnz	r0, 800aeec <ArtNetParams::callbackFunction(char const*)+0x250>
 800aeae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aeb2:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800aeb6:	40ab      	lsls	r3, r5
 800aeb8:	f041 0120 	orr.w	r1, r1, #32
 800aebc:	296c      	cmp	r1, #108	; 0x6c
 800aebe:	6862      	ldr	r2, [r4, #4]
 800aec0:	4425      	add	r5, r4
 800aec2:	d10f      	bne.n	800aee4 <ArtNetParams::callbackFunction(char const*)+0x248>
 800aec4:	f89d 1011 	ldrb.w	r1, [sp, #17]
 800aec8:	f041 0120 	orr.w	r1, r1, #32
 800aecc:	2974      	cmp	r1, #116	; 0x74
 800aece:	d109      	bne.n	800aee4 <ArtNetParams::callbackFunction(char const*)+0x248>
 800aed0:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800aed4:	f041 0120 	orr.w	r1, r1, #32
 800aed8:	2970      	cmp	r1, #112	; 0x70
 800aeda:	d103      	bne.n	800aee4 <ArtNetParams::callbackFunction(char const*)+0x248>
 800aedc:	2101      	movs	r1, #1
 800aede:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800aee2:	e7cb      	b.n	800ae7c <ArtNetParams::callbackFunction(char const*)+0x1e0>
 800aee4:	2100      	movs	r1, #0
 800aee6:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800aeea:	e7cc      	b.n	800ae86 <ArtNetParams::callbackFunction(char const*)+0x1ea>
 800aeec:	2304      	movs	r3, #4
 800aeee:	4630      	mov	r0, r6
 800aef0:	9303      	str	r3, [sp, #12]
 800aef2:	aa04      	add	r2, sp, #16
 800aef4:	ab03      	add	r3, sp, #12
 800aef6:	eb09 1105 	add.w	r1, r9, r5, lsl #4
 800aefa:	f007 feab 	bl	8012c54 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800aefe:	2305      	movs	r3, #5
 800af00:	2800      	cmp	r0, #0
 800af02:	d13b      	bne.n	800af7c <ArtNetParams::callbackFunction(char const*)+0x2e0>
 800af04:	4a18      	ldr	r2, [pc, #96]	; (800af68 <ArtNetParams::callbackFunction(char const*)+0x2cc>)
 800af06:	a904      	add	r1, sp, #16
 800af08:	3b01      	subs	r3, #1
 800af0a:	d108      	bne.n	800af1e <ArtNetParams::callbackFunction(char const*)+0x282>
 800af0c:	2201      	movs	r2, #1
 800af0e:	1963      	adds	r3, r4, r5
 800af10:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800af14:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800af18:	6863      	ldr	r3, [r4, #4]
 800af1a:	40aa      	lsls	r2, r5
 800af1c:	e7ae      	b.n	800ae7c <ArtNetParams::callbackFunction(char const*)+0x1e0>
 800af1e:	f811 6b01 	ldrb.w	r6, [r1], #1
 800af22:	f812 0b01 	ldrb.w	r0, [r2], #1
 800af26:	4286      	cmp	r6, r0
 800af28:	d0ee      	beq.n	800af08 <ArtNetParams::callbackFunction(char const*)+0x26c>
 800af2a:	2100      	movs	r1, #0
 800af2c:	1962      	adds	r2, r4, r5
 800af2e:	6863      	ldr	r3, [r4, #4]
 800af30:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
 800af34:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800af38:	40aa      	lsls	r2, r5
 800af3a:	ea23 0302 	bic.w	r3, r3, r2
 800af3e:	e6d2      	b.n	800ace6 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800af40:	08016804 	stmdaeq	r1, {r2, fp, sp, lr}
 800af44:	08016871 	stmdaeq	r1, {r0, r4, r5, r6, fp, sp, lr}
 800af48:	0801685d 	stmdaeq	r1, {r0, r2, r3, r4, r6, fp, sp, lr}
 800af4c:	08016867 	stmdaeq	r1, {r0, r1, r2, r5, r6, fp, sp, lr}
 800af50:	080168f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, fp, sp, lr}
 800af54:	080168dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, fp, sp, lr}
 800af58:	0801690c 	stmdaeq	r1, {r2, r3, r8, fp, sp, lr}
 800af5c:	08016910 	stmdaeq	r1, {r4, r8, fp, sp, lr}
 800af60:	080182c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r9, pc}
 800af64:	08016917 	stmdaeq	r1, {r0, r1, r2, r4, r8, fp, sp, lr}
 800af68:	080167a2 	stmdaeq	r1, {r1, r5, r7, r8, r9, sl, sp, lr}
 800af6c:	080182d2 	stmdaeq	r1, {r1, r4, r6, r7, r9, pc}
 800af70:	08018312 	stmdaeq	r1, {r1, r4, r8, r9, pc}
 800af74:	0801681d 	stmdaeq	r1, {r0, r2, r3, r4, fp, sp, lr}
 800af78:	08018375 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, pc}
 800af7c:	9303      	str	r3, [sp, #12]
 800af7e:	4630      	mov	r0, r6
 800af80:	ab03      	add	r3, sp, #12
 800af82:	aa04      	add	r2, sp, #16
 800af84:	eb0a 010b 	add.w	r1, sl, fp
 800af88:	f007 fe64 	bl	8012c54 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800af8c:	bb60      	cbnz	r0, 800afe8 <ArtNetParams::callbackFunction(char const*)+0x34c>
 800af8e:	2201      	movs	r2, #1
 800af90:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 800af94:	40aa      	lsls	r2, r5
 800af96:	ea23 0302 	bic.w	r3, r3, r2
 800af9a:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800af9e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800afa2:	f042 0220 	orr.w	r2, r2, #32
 800afa6:	2a69      	cmp	r2, #105	; 0x69
 800afa8:	d118      	bne.n	800afdc <ArtNetParams::callbackFunction(char const*)+0x340>
 800afaa:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800afae:	f042 0220 	orr.w	r2, r2, #32
 800afb2:	2a6e      	cmp	r2, #110	; 0x6e
 800afb4:	d112      	bne.n	800afdc <ArtNetParams::callbackFunction(char const*)+0x340>
 800afb6:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800afba:	f042 0220 	orr.w	r2, r2, #32
 800afbe:	2a70      	cmp	r2, #112	; 0x70
 800afc0:	d10c      	bne.n	800afdc <ArtNetParams::callbackFunction(char const*)+0x340>
 800afc2:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800afc6:	f042 0220 	orr.w	r2, r2, #32
 800afca:	2a75      	cmp	r2, #117	; 0x75
 800afcc:	d106      	bne.n	800afdc <ArtNetParams::callbackFunction(char const*)+0x340>
 800afce:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800afd2:	f042 0220 	orr.w	r2, r2, #32
 800afd6:	2a74      	cmp	r2, #116	; 0x74
 800afd8:	f43f af58 	beq.w	800ae8c <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800afdc:	2201      	movs	r2, #1
 800afde:	40aa      	lsls	r2, r5
 800afe0:	4313      	orrs	r3, r2
 800afe2:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800afe6:	e751      	b.n	800ae8c <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800afe8:	2118      	movs	r1, #24
 800afea:	4b15      	ldr	r3, [pc, #84]	; (800b040 <ArtNetParams::callbackFunction(char const*)+0x3a4>)
 800afec:	4630      	mov	r0, r6
 800afee:	fb01 3105 	mla	r1, r1, r5, r3
 800aff2:	aa02      	add	r2, sp, #8
 800aff4:	f007 fed4 	bl	8012da0 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800aff8:	b968      	cbnz	r0, 800b016 <ArtNetParams::callbackFunction(char const*)+0x37a>
 800affa:	2201      	movs	r2, #1
 800affc:	9902      	ldr	r1, [sp, #8]
 800affe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b002:	40aa      	lsls	r2, r5
 800b004:	f8c3 107b 	str.w	r1, [r3, #123]	; 0x7b
 800b008:	b292      	uxth	r2, r2
 800b00a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b00e:	b1a1      	cbz	r1, 800b03a <ArtNetParams::callbackFunction(char const*)+0x39e>
 800b010:	4313      	orrs	r3, r2
 800b012:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800b016:	3501      	adds	r5, #1
 800b018:	2d04      	cmp	r5, #4
 800b01a:	f107 0710 	add.w	r7, r7, #16
 800b01e:	f47f af19 	bne.w	800ae54 <ArtNetParams::callbackFunction(char const*)+0x1b8>
 800b022:	4630      	mov	r0, r6
 800b024:	4907      	ldr	r1, [pc, #28]	; (800b044 <ArtNetParams::callbackFunction(char const*)+0x3a8>)
 800b026:	f10d 0205 	add.w	r2, sp, #5
 800b02a:	f007 ff18 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b02e:	2800      	cmp	r0, #0
 800b030:	f47f af2c 	bne.w	800ae8c <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800b034:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b038:	e63d      	b.n	800acb6 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800b03a:	ea23 0302 	bic.w	r3, r3, r2
 800b03e:	e7e8      	b.n	800b012 <ArtNetParams::callbackFunction(char const*)+0x376>
 800b040:	0801687c 	stmdaeq	r1, {r2, r3, r4, r5, r6, fp, sp, lr}
 800b044:	0801680f 	stmdaeq	r1, {r0, r1, r2, r3, fp, sp, lr}

0800b048 <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800b048:	f7ff be28 	b.w	800ac9c <ArtNetParams::callbackFunction(char const*)>

0800b04c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
 800b04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b050:	4604      	mov	r4, r0
 800b052:	4615      	mov	r5, r2
 800b054:	461e      	mov	r6, r3
 800b056:	b086      	sub	sp, #24
 800b058:	3004      	adds	r0, #4
 800b05a:	2900      	cmp	r1, #0
 800b05c:	f000 814b 	beq.w	800b2f6 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2aa>
 800b060:	2287      	movs	r2, #135	; 0x87
 800b062:	f008 fc3c 	bl	80138de <memmove>
 800b066:	4633      	mov	r3, r6
 800b068:	462a      	mov	r2, r5
 800b06a:	49a6      	ldr	r1, [pc, #664]	; (800b304 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800b06c:	a803      	add	r0, sp, #12
 800b06e:	f007 fce9 	bl	8012a44 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800b072:	2500      	movs	r5, #0
 800b074:	4ea4      	ldr	r6, [pc, #656]	; (800b308 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800b076:	f8df 8294 	ldr.w	r8, [pc, #660]	; 800b30c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>
 800b07a:	4fa5      	ldr	r7, [pc, #660]	; (800b310 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800b07c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 800b080:	4631      	mov	r1, r6
 800b082:	412b      	asrs	r3, r5
 800b084:	f013 0f01 	tst.w	r3, #1
 800b088:	ea6f 0303 	mvn.w	r3, r3
 800b08c:	bf0c      	ite	eq
 800b08e:	4642      	moveq	r2, r8
 800b090:	463a      	movne	r2, r7
 800b092:	f003 0301 	and.w	r3, r3, #1
 800b096:	a803      	add	r0, sp, #12
 800b098:	3501      	adds	r5, #1
 800b09a:	f7ff fd47 	bl	800ab2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b09e:	2d04      	cmp	r5, #4
 800b0a0:	f106 0612 	add.w	r6, r6, #18
 800b0a4:	d1ea      	bne.n	800b07c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30>
 800b0a6:	6863      	ldr	r3, [r4, #4]
 800b0a8:	7a22      	ldrb	r2, [r4, #8]
 800b0aa:	499a      	ldr	r1, [pc, #616]	; (800b314 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800b0ac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b0b0:	a803      	add	r0, sp, #12
 800b0b2:	f7ff fd13 	bl	800aadc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800b0b6:	6863      	ldr	r3, [r4, #4]
 800b0b8:	7a62      	ldrb	r2, [r4, #9]
 800b0ba:	4997      	ldr	r1, [pc, #604]	; (800b318 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800b0bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b0c0:	a803      	add	r0, sp, #12
 800b0c2:	f7ff fd0b 	bl	800aadc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800b0c6:	4995      	ldr	r1, [pc, #596]	; (800b31c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 800b0c8:	a803      	add	r0, sp, #12
 800b0ca:	f007 fd41 	bl	8012b50 <PropertiesBuilder::AddComment(char const*)>
 800b0ce:	2500      	movs	r5, #0
 800b0d0:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 800b0d4:	4e92      	ldr	r6, [pc, #584]	; (800b320 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 800b0d6:	f104 076b 	add.w	r7, r4, #107	; 0x6b
 800b0da:	6862      	ldr	r2, [r4, #4]
 800b0dc:	fa08 f305 	lsl.w	r3, r8, r5
 800b0e0:	4393      	bics	r3, r2
 800b0e2:	bf0c      	ite	eq
 800b0e4:	2301      	moveq	r3, #1
 800b0e6:	2300      	movne	r3, #0
 800b0e8:	4631      	mov	r1, r6
 800b0ea:	f817 2b01 	ldrb.w	r2, [r7], #1
 800b0ee:	a803      	add	r0, sp, #12
 800b0f0:	3501      	adds	r5, #1
 800b0f2:	f7ff fcf3 	bl	800aadc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800b0f6:	2d04      	cmp	r5, #4
 800b0f8:	f106 0610 	add.w	r6, r6, #16
 800b0fc:	d1ed      	bne.n	800b0da <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 800b0fe:	4989      	ldr	r1, [pc, #548]	; (800b324 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>)
 800b100:	a803      	add	r0, sp, #12
 800b102:	f007 fd25 	bl	8012b50 <PropertiesBuilder::AddComment(char const*)>
 800b106:	6863      	ldr	r3, [r4, #4]
 800b108:	f104 0622 	add.w	r6, r4, #34	; 0x22
 800b10c:	f013 0501 	ands.w	r5, r3, #1
 800b110:	d108      	bne.n	800b124 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xd8>
 800b112:	4b85      	ldr	r3, [pc, #532]	; (800b328 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800b114:	223f      	movs	r2, #63	; 0x3f
 800b116:	6819      	ldr	r1, [r3, #0]
 800b118:	4630      	mov	r0, r6
 800b11a:	3154      	adds	r1, #84	; 0x54
 800b11c:	f7ff fd56 	bl	800abcc <strncpy.isra.0>
 800b120:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800b124:	6863      	ldr	r3, [r4, #4]
 800b126:	4632      	mov	r2, r6
 800b128:	f003 0301 	and.w	r3, r3, #1
 800b12c:	497f      	ldr	r1, [pc, #508]	; (800b32c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e0>)
 800b12e:	a803      	add	r0, sp, #12
 800b130:	f7ff fcfc 	bl	800ab2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b134:	6863      	ldr	r3, [r4, #4]
 800b136:	f104 0610 	add.w	r6, r4, #16
 800b13a:	f013 0502 	ands.w	r5, r3, #2
 800b13e:	d108      	bne.n	800b152 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 800b140:	4b79      	ldr	r3, [pc, #484]	; (800b328 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800b142:	2211      	movs	r2, #17
 800b144:	6819      	ldr	r1, [r3, #0]
 800b146:	4630      	mov	r0, r6
 800b148:	3142      	adds	r1, #66	; 0x42
 800b14a:	f7ff fd3f 	bl	800abcc <strncpy.isra.0>
 800b14e:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800b152:	6863      	ldr	r3, [r4, #4]
 800b154:	4632      	mov	r2, r6
 800b156:	4976      	ldr	r1, [pc, #472]	; (800b330 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e4>)
 800b158:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b15c:	a803      	add	r0, sp, #12
 800b15e:	f7ff fce5 	bl	800ab2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b162:	2104      	movs	r1, #4
 800b164:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800b168:	6863      	ldr	r3, [r4, #4]
 800b16a:	ba52      	rev16	r2, r2
 800b16c:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800b170:	b292      	uxth	r2, r2
 800b172:	9100      	str	r1, [sp, #0]
 800b174:	a803      	add	r0, sp, #12
 800b176:	496f      	ldr	r1, [pc, #444]	; (800b334 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e8>)
 800b178:	f007 fd04 	bl	8012b84 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>
 800b17c:	496e      	ldr	r1, [pc, #440]	; (800b338 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ec>)
 800b17e:	a803      	add	r0, sp, #12
 800b180:	f007 fce6 	bl	8012b50 <PropertiesBuilder::AddComment(char const*)>
 800b184:	6862      	ldr	r2, [r4, #4]
 800b186:	496d      	ldr	r1, [pc, #436]	; (800b33c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f0>)
 800b188:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800b18c:	a803      	add	r0, sp, #12
 800b18e:	f7ff fcf5 	bl	800ab7c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b192:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800b340 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f4>
 800b196:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 800b19a:	6863      	ldr	r3, [r4, #4]
 800b19c:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b344 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f8>
 800b1a0:	4969      	ldr	r1, [pc, #420]	; (800b348 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2fc>)
 800b1a2:	2a00      	cmp	r2, #0
 800b1a4:	bf0c      	ite	eq
 800b1a6:	464a      	moveq	r2, r9
 800b1a8:	4642      	movne	r2, r8
 800b1aa:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800b1ae:	a803      	add	r0, sp, #12
 800b1b0:	f7ff fcbc 	bl	800ab2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b1b4:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
 800b1b8:	6863      	ldr	r3, [r4, #4]
 800b1ba:	4964      	ldr	r1, [pc, #400]	; (800b34c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>)
 800b1bc:	4a64      	ldr	r2, [pc, #400]	; (800b350 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>)
 800b1be:	f3c3 5380 	ubfx	r3, r3, #22, #1
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	bf18      	it	ne
 800b1c6:	460a      	movne	r2, r1
 800b1c8:	4962      	ldr	r1, [pc, #392]	; (800b354 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x308>)
 800b1ca:	a803      	add	r0, sp, #12
 800b1cc:	f7ff fcae 	bl	800ab2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b1d0:	2500      	movs	r5, #0
 800b1d2:	4e61      	ldr	r6, [pc, #388]	; (800b358 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30c>)
 800b1d4:	f8df a184 	ldr.w	sl, [pc, #388]	; 800b35c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x310>
 800b1d8:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800b1dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b1e0:	6861      	ldr	r1, [r4, #4]
 800b1e2:	40ab      	lsls	r3, r5
 800b1e4:	438b      	bics	r3, r1
 800b1e6:	f04f 0112 	mov.w	r1, #18
 800b1ea:	f817 2b01 	ldrb.w	r2, [r7], #1
 800b1ee:	bf0c      	ite	eq
 800b1f0:	2301      	moveq	r3, #1
 800b1f2:	2300      	movne	r3, #0
 800b1f4:	fb01 a105 	mla	r1, r1, r5, sl
 800b1f8:	2a00      	cmp	r2, #0
 800b1fa:	bf0c      	ite	eq
 800b1fc:	464a      	moveq	r2, r9
 800b1fe:	4642      	movne	r2, r8
 800b200:	a803      	add	r0, sp, #12
 800b202:	f7ff fc93 	bl	800ab2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b206:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b20a:	6862      	ldr	r2, [r4, #4]
 800b20c:	40ab      	lsls	r3, r5
 800b20e:	4393      	bics	r3, r2
 800b210:	7938      	ldrb	r0, [r7, #4]
 800b212:	494e      	ldr	r1, [pc, #312]	; (800b34c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>)
 800b214:	4a4e      	ldr	r2, [pc, #312]	; (800b350 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>)
 800b216:	bf0c      	ite	eq
 800b218:	2301      	moveq	r3, #1
 800b21a:	2300      	movne	r3, #0
 800b21c:	3501      	adds	r5, #1
 800b21e:	2800      	cmp	r0, #0
 800b220:	bf18      	it	ne
 800b222:	460a      	movne	r2, r1
 800b224:	4631      	mov	r1, r6
 800b226:	a803      	add	r0, sp, #12
 800b228:	f7ff fc80 	bl	800ab2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b22c:	2d04      	cmp	r5, #4
 800b22e:	f106 0610 	add.w	r6, r6, #16
 800b232:	d1d3      	bne.n	800b1dc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x190>
 800b234:	6863      	ldr	r3, [r4, #4]
 800b236:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 800b23a:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800b23e:	4948      	ldr	r1, [pc, #288]	; (800b360 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x314>)
 800b240:	a803      	add	r0, sp, #12
 800b242:	f7ff fc4b 	bl	800aadc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800b246:	6862      	ldr	r2, [r4, #4]
 800b248:	4946      	ldr	r1, [pc, #280]	; (800b364 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x318>)
 800b24a:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800b24e:	a803      	add	r0, sp, #12
 800b250:	f7ff fc94 	bl	800ab7c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b254:	4944      	ldr	r1, [pc, #272]	; (800b368 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x31c>)
 800b256:	a803      	add	r0, sp, #12
 800b258:	f007 fc7a 	bl	8012b50 <PropertiesBuilder::AddComment(char const*)>
 800b25c:	2500      	movs	r5, #0
 800b25e:	2601      	movs	r6, #1
 800b260:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800b36c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x320>
 800b264:	4f30      	ldr	r7, [pc, #192]	; (800b328 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800b266:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800b26a:	fa06 f305 	lsl.w	r3, r6, r5
 800b26e:	b29b      	uxth	r3, r3
 800b270:	401a      	ands	r2, r3
 800b272:	4293      	cmp	r3, r2
 800b274:	bf0c      	ite	eq
 800b276:	2301      	moveq	r3, #1
 800b278:	2300      	movne	r3, #0
 800b27a:	f105 021c 	add.w	r2, r5, #28
 800b27e:	d008      	beq.n	800b292 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x246>
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800b286:	f8d1 077c 	ldr.w	r0, [r1, #1916]	; 0x77c
 800b28a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800b28e:	f8c1 000b 	str.w	r0, [r1, #11]
 800b292:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b296:	4641      	mov	r1, r8
 800b298:	f8d2 200b 	ldr.w	r2, [r2, #11]
 800b29c:	a803      	add	r0, sp, #12
 800b29e:	3501      	adds	r5, #1
 800b2a0:	f007 fc12 	bl	8012ac8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800b2a4:	2d04      	cmp	r5, #4
 800b2a6:	f108 0818 	add.w	r8, r8, #24
 800b2aa:	d1dc      	bne.n	800b266 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x21a>
 800b2ac:	4930      	ldr	r1, [pc, #192]	; (800b370 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x324>)
 800b2ae:	a803      	add	r0, sp, #12
 800b2b0:	f007 fc4e 	bl	8012b50 <PropertiesBuilder::AddComment(char const*)>
 800b2b4:	6862      	ldr	r2, [r4, #4]
 800b2b6:	492f      	ldr	r1, [pc, #188]	; (800b374 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x328>)
 800b2b8:	f3c2 62c0 	ubfx	r2, r2, #27, #1
 800b2bc:	a803      	add	r0, sp, #12
 800b2be:	f7ff fc5d 	bl	800ab7c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b2c2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b2c6:	b17b      	cbz	r3, 800b2e8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>
 800b2c8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b2cc:	9b03      	ldr	r3, [sp, #12]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	227d      	movs	r2, #125	; 0x7d
 800b2d2:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b2d6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b2da:	9903      	ldr	r1, [sp, #12]
 800b2dc:	54ca      	strb	r2, [r1, r3]
 800b2de:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	f8ad 3012 	strh.w	r3, [sp, #18]
 800b2e8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b2ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2ee:	601a      	str	r2, [r3, #0]
 800b2f0:	b006      	add	sp, #24
 800b2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f6:	6823      	ldr	r3, [r4, #0]
 800b2f8:	4601      	mov	r1, r0
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	68d2      	ldr	r2, [r2, #12]
 800b300:	4790      	blx	r2
 800b302:	e6b0      	b.n	800b066 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a>
 800b304:	08016920 	stmdaeq	r1, {r5, r8, fp, sp, lr}
 800b308:	08018375 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, pc}
 800b30c:	080167a7 	stmdaeq	r1, {r0, r1, r2, r5, r7, r8, r9, sl, sp, lr}
 800b310:	080167ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r8, r9, sl, sp, lr}
 800b314:	0801690c 	stmdaeq	r1, {r2, r3, r8, fp, sp, lr}
 800b318:	08016910 	stmdaeq	r1, {r4, r8, fp, sp, lr}
 800b31c:	080167c3 	stmdaeq	r1, {r0, r1, r6, r7, r8, r9, sl, sp, lr}
 800b320:	080182d2 	stmdaeq	r1, {r1, r4, r6, r7, r9, pc}
 800b324:	080167dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, r9, sl, sp, lr}
 800b328:	20000d08 	andcs	r0, r0, r8, lsl #26
 800b32c:	0801685d 	stmdaeq	r1, {r0, r2, r3, r4, r6, fp, sp, lr}
 800b330:	08016871 	stmdaeq	r1, {r0, r4, r5, r6, fp, sp, lr}
 800b334:	08016867 	stmdaeq	r1, {r0, r1, r2, r5, r6, fp, sp, lr}
 800b338:	080167e1 	stmdaeq	r1, {r0, r5, r6, r7, r8, r9, sl, sp, lr}
 800b33c:	08016804 	stmdaeq	r1, {r2, fp, sp, lr}
 800b340:	080167b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, sl, sp, lr}
 800b344:	080167b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, sp, lr}
 800b348:	080182c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r9, pc}
 800b34c:	080167a2 	stmdaeq	r1, {r1, r5, r7, r8, r9, sl, sp, lr}
 800b350:	080167bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, r9, sl, sp, lr}
 800b354:	08016917 	stmdaeq	r1, {r0, r1, r2, r4, r8, fp, sp, lr}
 800b358:	0801681d 	stmdaeq	r1, {r0, r2, r3, r4, fp, sp, lr}
 800b35c:	08018312 	stmdaeq	r1, {r1, r4, r8, r9, pc}
 800b360:	080168f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, fp, sp, lr}
 800b364:	080168dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, fp, sp, lr}
 800b368:	080167f0 	stmdaeq	r1, {r4, r5, r6, r7, r8, r9, sl, sp, lr}
 800b36c:	0801687c 	stmdaeq	r1, {r2, r3, r4, r5, r6, fp, sp, lr}
 800b370:	080167fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 800b374:	0801680f 	stmdaeq	r1, {r0, r1, r2, r3, fp, sp, lr}

0800b378 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
 800b378:	b513      	push	{r0, r1, r4, lr}
 800b37a:	6804      	ldr	r4, [r0, #0]
 800b37c:	b914      	cbnz	r4, 800b384 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800b37e:	601c      	str	r4, [r3, #0]
 800b380:	b002      	add	sp, #8
 800b382:	bd10      	pop	{r4, pc}
 800b384:	9300      	str	r3, [sp, #0]
 800b386:	4613      	mov	r3, r2
 800b388:	460a      	mov	r2, r1
 800b38a:	2100      	movs	r1, #0
 800b38c:	f7ff fe5e 	bl	800b04c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
 800b390:	e7f6      	b.n	800b380 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800b392 <ArtNetParams::Set(ArtNetNode*)>:
 800b392:	6843      	ldr	r3, [r0, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d07b      	beq.n	800b490 <ArtNetParams::Set(ArtNetNode*)+0xfe>
 800b398:	079a      	lsls	r2, r3, #30
 800b39a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b39e:	4604      	mov	r4, r0
 800b3a0:	460d      	mov	r5, r1
 800b3a2:	d504      	bpl.n	800b3ae <ArtNetParams::Set(ArtNetNode*)+0x1c>
 800b3a4:	f100 0110 	add.w	r1, r0, #16
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	f7fd ff85 	bl	80092b8 <ArtNetNode::SetShortName(char const*)>
 800b3ae:	6863      	ldr	r3, [r4, #4]
 800b3b0:	07db      	lsls	r3, r3, #31
 800b3b2:	d504      	bpl.n	800b3be <ArtNetParams::Set(ArtNetNode*)+0x2c>
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800b3ba:	f7fd ffa5 	bl	8009308 <ArtNetNode::SetLongName(char const*)>
 800b3be:	6863      	ldr	r3, [r4, #4]
 800b3c0:	075f      	lsls	r7, r3, #29
 800b3c2:	d504      	bpl.n	800b3ce <ArtNetParams::Set(ArtNetNode*)+0x3c>
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	7a21      	ldrb	r1, [r4, #8]
 800b3ca:	f7fe fad4 	bl	8009976 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800b3ce:	6863      	ldr	r3, [r4, #4]
 800b3d0:	071e      	lsls	r6, r3, #28
 800b3d2:	d504      	bpl.n	800b3de <ArtNetParams::Set(ArtNetNode*)+0x4c>
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	7a61      	ldrb	r1, [r4, #9]
 800b3da:	f7fe fa9e 	bl	800991a <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800b3de:	6863      	ldr	r3, [r4, #4]
 800b3e0:	0558      	lsls	r0, r3, #21
 800b3e2:	d504      	bpl.n	800b3ee <ArtNetParams::Set(ArtNetNode*)+0x5c>
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800b3ea:	f7fe f857 	bl	800949c <ArtNetNode::SetOemValue(unsigned char const*)>
 800b3ee:	6863      	ldr	r3, [r4, #4]
 800b3f0:	2600      	movs	r6, #0
 800b3f2:	0519      	lsls	r1, r3, #20
 800b3f4:	bf44      	itt	mi
 800b3f6:	f44f 727a 	movmi.w	r2, #1000	; 0x3e8
 800b3fa:	f894 3066 	ldrbmi.w	r3, [r4, #102]	; 0x66
 800b3fe:	f44f 2880 	mov.w	r8, #262144	; 0x40000
 800b402:	bf44      	itt	mi
 800b404:	4353      	mulmi	r3, r2
 800b406:	f8c5 36cc 	strmi.w	r3, [r5, #1740]	; 0x6cc
 800b40a:	6863      	ldr	r3, [r4, #4]
 800b40c:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 800b410:	04da      	lsls	r2, r3, #19
 800b412:	bf48      	it	mi
 800b414:	2301      	movmi	r3, #1
 800b416:	f04f 0a01 	mov.w	sl, #1
 800b41a:	bf48      	it	mi
 800b41c:	f885 36dc 	strbmi.w	r3, [r5, #1756]	; 0x6dc
 800b420:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800b424:	6863      	ldr	r3, [r4, #4]
 800b426:	fa08 f206 	lsl.w	r2, r8, r6
 800b42a:	439a      	bics	r2, r3
 800b42c:	bf0c      	ite	eq
 800b42e:	783a      	ldrbeq	r2, [r7, #0]
 800b430:	f894 206f 	ldrbne.w	r2, [r4, #111]	; 0x6f
 800b434:	4631      	mov	r1, r6
 800b436:	4628      	mov	r0, r5
 800b438:	f7fe fafc 	bl	8009a34 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800b43c:	6863      	ldr	r3, [r4, #4]
 800b43e:	fa09 f206 	lsl.w	r2, r9, r6
 800b442:	439a      	bics	r2, r3
 800b444:	bf0c      	ite	eq
 800b446:	797a      	ldrbeq	r2, [r7, #5]
 800b448:	f894 2074 	ldrbne.w	r2, [r4, #116]	; 0x74
 800b44c:	4631      	mov	r1, r6
 800b44e:	4628      	mov	r0, r5
 800b450:	f7fe fabf 	bl	80099d2 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800b454:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800b458:	fa0a f306 	lsl.w	r3, sl, r6
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	4393      	bics	r3, r2
 800b460:	d109      	bne.n	800b476 <ArtNetParams::Set(ArtNetNode*)+0xe4>
 800b462:	f106 031c 	add.w	r3, r6, #28
 800b466:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b46a:	4631      	mov	r1, r6
 800b46c:	4628      	mov	r0, r5
 800b46e:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800b472:	f7fe fdf9 	bl	800a068 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>
 800b476:	3601      	adds	r6, #1
 800b478:	2e04      	cmp	r6, #4
 800b47a:	f107 0701 	add.w	r7, r7, #1
 800b47e:	d1d1      	bne.n	800b424 <ArtNetParams::Set(ArtNetNode*)+0x92>
 800b480:	6863      	ldr	r3, [r4, #4]
 800b482:	011b      	lsls	r3, r3, #4
 800b484:	bf44      	itt	mi
 800b486:	2301      	movmi	r3, #1
 800b488:	f885 309e 	strbmi.w	r3, [r5, #158]	; 0x9e
 800b48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b490:	4770      	bx	lr

0800b492 <ArtNetParams::Dump()>:
 800b492:	4770      	bx	lr

0800b494 <ArtNetNode::HandleTrigger()>:
 800b494:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 800b498:	4601      	mov	r1, r0
 800b49a:	2bff      	cmp	r3, #255	; 0xff
 800b49c:	d103      	bne.n	800b4a6 <ArtNetNode::HandleTrigger()+0x12>
 800b49e:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
 800b4a2:	2aff      	cmp	r2, #255	; 0xff
 800b4a4:	d009      	beq.n	800b4ba <ArtNetNode::HandleTrigger()+0x26>
 800b4a6:	f891 2040 	ldrb.w	r2, [r1, #64]	; 0x40
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d10a      	bne.n	800b4c4 <ArtNetNode::HandleTrigger()+0x30>
 800b4ae:	f891 20af 	ldrb.w	r2, [r1, #175]	; 0xaf
 800b4b2:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d104      	bne.n	800b4c4 <ArtNetNode::HandleTrigger()+0x30>
 800b4ba:	6988      	ldr	r0, [r1, #24]
 800b4bc:	31b0      	adds	r1, #176	; 0xb0
 800b4be:	6803      	ldr	r3, [r0, #0]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	4718      	bx	r3
 800b4c4:	4770      	bx	lr
	...

0800b4c8 <e131::universe_to_multicast_ip(unsigned short)>:
 800b4c8:	b513      	push	{r0, r1, r4, lr}
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	a901      	add	r1, sp, #4
 800b4ce:	4806      	ldr	r0, [pc, #24]	; (800b4e8 <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 800b4d0:	f008 f94a 	bl	8013768 <inet_aton>
 800b4d4:	9801      	ldr	r0, [sp, #4]
 800b4d6:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800b4da:	0224      	lsls	r4, r4, #8
 800b4dc:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800b4e0:	4320      	orrs	r0, r4
 800b4e2:	b002      	add	sp, #8
 800b4e4:	bd10      	pop	{r4, pc}
 800b4e6:	bf00      	nop
 800b4e8:	08016931 	stmdaeq	r1, {r0, r4, r5, r8, fp, sp, lr}

0800b4ec <memset.constprop.0.isra.0>:
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	4401      	add	r1, r0
 800b4f0:	4288      	cmp	r0, r1
 800b4f2:	d100      	bne.n	800b4f6 <memset.constprop.0.isra.0+0xa>
 800b4f4:	4770      	bx	lr
 800b4f6:	f800 3b01 	strb.w	r3, [r0], #1
 800b4fa:	e7f9      	b.n	800b4f0 <memset.constprop.0.isra.0+0x4>

0800b4fc <memcpy.isra.0>:
 800b4fc:	3801      	subs	r0, #1
 800b4fe:	440a      	add	r2, r1
 800b500:	4291      	cmp	r1, r2
 800b502:	d100      	bne.n	800b506 <memcpy.isra.0+0xa>
 800b504:	4770      	bx	lr
 800b506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b50a:	f800 3f01 	strb.w	r3, [r0, #1]!
 800b50e:	e7f7      	b.n	800b500 <memcpy.isra.0+0x4>

0800b510 <lightset::Data::IOutput(LightSet*, unsigned int) const>:
 800b510:	f240 6304 	movw	r3, #1540	; 0x604
 800b514:	b470      	push	{r4, r5, r6}
 800b516:	4605      	mov	r5, r0
 800b518:	4608      	mov	r0, r1
 800b51a:	4353      	muls	r3, r2
 800b51c:	4611      	mov	r1, r2
 800b51e:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800b522:	18ea      	adds	r2, r5, r3
 800b524:	6803      	ldr	r3, [r0, #0]
 800b526:	691e      	ldr	r6, [r3, #16]
 800b528:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800b52c:	46b4      	mov	ip, r6
 800b52e:	192a      	adds	r2, r5, r4
 800b530:	bc70      	pop	{r4, r5, r6}
 800b532:	4760      	bx	ip

0800b534 <E131Bridge::Start()>:
 800b534:	6943      	ldr	r3, [r0, #20]
 800b536:	b513      	push	{r0, r1, r4, lr}
 800b538:	4604      	mov	r4, r0
 800b53a:	b35b      	cbz	r3, 800b594 <E131Bridge::Start()+0x60>
 800b53c:	6983      	ldr	r3, [r0, #24]
 800b53e:	b9cb      	cbnz	r3, 800b574 <E131Bridge::Start()+0x40>
 800b540:	a901      	add	r1, sp, #4
 800b542:	4818      	ldr	r0, [pc, #96]	; (800b5a4 <E131Bridge::Start()+0x70>)
 800b544:	f008 f910 	bl	8013768 <inet_aton>
 800b548:	9b01      	ldr	r3, [sp, #4]
 800b54a:	f240 207e 	movw	r0, #638	; 0x27e
 800b54e:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 800b552:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 800b556:	6223      	str	r3, [r4, #32]
 800b558:	f008 f902 	bl	8013760 <operator new(unsigned int)>
 800b55c:	61a0      	str	r0, [r4, #24]
 800b55e:	4620      	mov	r0, r4
 800b560:	f000 fdc2 	bl	800c0e8 <E131Bridge::FillDataPacket()>
 800b564:	f44f 608f 	mov.w	r0, #1144	; 0x478
 800b568:	f008 f8fa 	bl	8013760 <operator new(unsigned int)>
 800b56c:	61e0      	str	r0, [r4, #28]
 800b56e:	4620      	mov	r0, r4
 800b570:	f000 fd08 	bl	800bf84 <E131Bridge::FillDiscoveryPacket()>
 800b574:	f894 359a 	ldrb.w	r3, [r4, #1434]	; 0x59a
 800b578:	b123      	cbz	r3, 800b584 <E131Bridge::Start()+0x50>
 800b57a:	6960      	ldr	r0, [r4, #20]
 800b57c:	2100      	movs	r1, #0
 800b57e:	6803      	ldr	r3, [r0, #0]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	4798      	blx	r3
 800b584:	f894 35a6 	ldrb.w	r3, [r4, #1446]	; 0x5a6
 800b588:	b123      	cbz	r3, 800b594 <E131Bridge::Start()+0x60>
 800b58a:	6960      	ldr	r0, [r4, #20]
 800b58c:	2101      	movs	r1, #1
 800b58e:	6803      	ldr	r3, [r0, #0]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	4798      	blx	r3
 800b594:	2102      	movs	r1, #2
 800b596:	4b04      	ldr	r3, [pc, #16]	; (800b5a8 <E131Bridge::Start()+0x74>)
 800b598:	6818      	ldr	r0, [r3, #0]
 800b59a:	b002      	add	sp, #8
 800b59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5a0:	f007 bff6 	b.w	8013590 <LedBlink::SetMode(ledblink::Mode)>
 800b5a4:	08016931 	stmdaeq	r1, {r0, r4, r5, r8, fp, sp, lr}
 800b5a8:	2000a718 	andcs	sl, r0, r8, lsl r7

0800b5ac <E131Bridge::Stop()>:
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	b510      	push	{r4, lr}
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	f880 34f4 	strb.w	r3, [r0, #1268]	; 0x4f4
 800b5b6:	6840      	ldr	r0, [r0, #4]
 800b5b8:	b118      	cbz	r0, 800b5c2 <E131Bridge::Stop()+0x16>
 800b5ba:	6803      	ldr	r3, [r0, #0]
 800b5bc:	2100      	movs	r1, #0
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	4798      	blx	r3
 800b5c2:	f7fe fbb1 	bl	8009d28 <lightset::Data::Get()>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
 800b5cc:	6860      	ldr	r0, [r4, #4]
 800b5ce:	f884 3550 	strb.w	r3, [r4, #1360]	; 0x550
 800b5d2:	b118      	cbz	r0, 800b5dc <E131Bridge::Stop()+0x30>
 800b5d4:	6803      	ldr	r3, [r0, #0]
 800b5d6:	2101      	movs	r1, #1
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	4798      	blx	r3
 800b5dc:	f7fe fba4 	bl	8009d28 <lightset::Data::Get()>
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	f8c0 1c04 	str.w	r1, [r0, #3076]	; 0xc04
 800b5e6:	6960      	ldr	r0, [r4, #20]
 800b5e8:	f884 1594 	strb.w	r1, [r4, #1428]	; 0x594
 800b5ec:	b168      	cbz	r0, 800b60a <E131Bridge::Stop()+0x5e>
 800b5ee:	f894 359a 	ldrb.w	r3, [r4, #1434]	; 0x59a
 800b5f2:	b113      	cbz	r3, 800b5fa <E131Bridge::Stop()+0x4e>
 800b5f4:	6803      	ldr	r3, [r0, #0]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	4798      	blx	r3
 800b5fa:	f894 35a6 	ldrb.w	r3, [r4, #1446]	; 0x5a6
 800b5fe:	b123      	cbz	r3, 800b60a <E131Bridge::Stop()+0x5e>
 800b600:	6960      	ldr	r0, [r4, #20]
 800b602:	2101      	movs	r1, #1
 800b604:	6803      	ldr	r3, [r0, #0]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	4798      	blx	r3
 800b60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b60e:	4b02      	ldr	r3, [pc, #8]	; (800b618 <E131Bridge::Stop()+0x6c>)
 800b610:	2100      	movs	r1, #0
 800b612:	6818      	ldr	r0, [r3, #0]
 800b614:	f007 bfbc 	b.w	8013590 <LedBlink::SetMode(ledblink::Mode)>
 800b618:	2000a718 	andcs	sl, r0, r8, lsl r7

0800b61c <E131Bridge::SetSourceName(char const*)>:
 800b61c:	233f      	movs	r3, #63	; 0x3f
 800b61e:	b510      	push	{r4, lr}
 800b620:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800b624:	3901      	subs	r1, #1
 800b626:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b62a:	b92c      	cbnz	r4, 800b638 <E131Bridge::SetSourceName(char const*)+0x1c>
 800b62c:	4413      	add	r3, r2
 800b62e:	429a      	cmp	r2, r3
 800b630:	d006      	beq.n	800b640 <E131Bridge::SetSourceName(char const*)+0x24>
 800b632:	f802 4b01 	strb.w	r4, [r2], #1
 800b636:	e7fa      	b.n	800b62e <E131Bridge::SetSourceName(char const*)+0x12>
 800b638:	3b01      	subs	r3, #1
 800b63a:	f802 4b01 	strb.w	r4, [r2], #1
 800b63e:	d1f2      	bne.n	800b626 <E131Bridge::SetSourceName(char const*)+0xa>
 800b640:	2300      	movs	r3, #0
 800b642:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
 800b646:	bd10      	pop	{r4, pc}

0800b648 <E131Bridge::E131Bridge()>:
 800b648:	2300      	movs	r3, #0
 800b64a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b64e:	b530      	push	{r4, r5, lr}
 800b650:	e9c0 2300 	strd	r2, r3, [r0]
 800b654:	2201      	movs	r2, #1
 800b656:	4604      	mov	r4, r0
 800b658:	2564      	movs	r5, #100	; 0x64
 800b65a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b65e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800b662:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800b666:	6743      	str	r3, [r0, #116]	; 0x74
 800b668:	4b1f      	ldr	r3, [pc, #124]	; (800b6e8 <E131Bridge::E131Bridge()+0xa0>)
 800b66a:	b093      	sub	sp, #76	; 0x4c
 800b66c:	6018      	str	r0, [r3, #0]
 800b66e:	7202      	strb	r2, [r0, #8]
 800b670:	2144      	movs	r1, #68	; 0x44
 800b672:	f500 60a2 	add.w	r0, r0, #1296	; 0x510
 800b676:	f7ff ff39 	bl	800b4ec <memset.constprop.0.isra.0>
 800b67a:	f504 60b3 	add.w	r0, r4, #1432	; 0x598
 800b67e:	210c      	movs	r1, #12
 800b680:	f7ff ff34 	bl	800b4ec <memset.constprop.0.isra.0>
 800b684:	f884 55a1 	strb.w	r5, [r4, #1441]	; 0x5a1
 800b688:	f204 5054 	addw	r0, r4, #1364	; 0x554
 800b68c:	2144      	movs	r1, #68	; 0x44
 800b68e:	f7ff ff2d 	bl	800b4ec <memset.constprop.0.isra.0>
 800b692:	f204 50a4 	addw	r0, r4, #1444	; 0x5a4
 800b696:	210c      	movs	r1, #12
 800b698:	f7ff ff28 	bl	800b4ec <memset.constprop.0.isra.0>
 800b69c:	f884 55ad 	strb.w	r5, [r4, #1453]	; 0x5ad
 800b6a0:	4d12      	ldr	r5, [pc, #72]	; (800b6ec <E131Bridge::E131Bridge()+0xa4>)
 800b6a2:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800b6a6:	211c      	movs	r1, #28
 800b6a8:	f7ff ff20 	bl	800b4ec <memset.constprop.0.isra.0>
 800b6ac:	682b      	ldr	r3, [r5, #0]
 800b6ae:	f884 250c 	strb.w	r2, [r4, #1292]	; 0x50c
 800b6b2:	4a0f      	ldr	r2, [pc, #60]	; (800b6f0 <E131Bridge::E131Bridge()+0xa8>)
 800b6b4:	331c      	adds	r3, #28
 800b6b6:	9200      	str	r2, [sp, #0]
 800b6b8:	2140      	movs	r1, #64	; 0x40
 800b6ba:	4a0e      	ldr	r2, [pc, #56]	; (800b6f4 <E131Bridge::E131Bridge()+0xac>)
 800b6bc:	a802      	add	r0, sp, #8
 800b6be:	f008 fc6b 	bl	8013f98 <snprintf>
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	a902      	add	r1, sp, #8
 800b6c6:	f7ff ffa9 	bl	800b61c <E131Bridge::SetSourceName(char const*)>
 800b6ca:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 800b6ce:	6828      	ldr	r0, [r5, #0]
 800b6d0:	f005 fb90 	bl	8010df4 <Network::Begin(unsigned short)>
 800b6d4:	4621      	mov	r1, r4
 800b6d6:	4b08      	ldr	r3, [pc, #32]	; (800b6f8 <E131Bridge::E131Bridge()+0xb0>)
 800b6d8:	f841 0b24 	str.w	r0, [r1], #36
 800b6dc:	6818      	ldr	r0, [r3, #0]
 800b6de:	f007 ffdf 	bl	80136a0 <Hardware::GetUuid(unsigned char*)>
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	b013      	add	sp, #76	; 0x4c
 800b6e6:	bd30      	pop	{r4, r5, pc}
 800b6e8:	20000d18 	andcs	r0, r0, r8, lsl sp
 800b6ec:	20009ff4 	strdcs	r9, [r0], -r4
 800b6f0:	0801662f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, sl, sp, lr}
 800b6f4:	0801693d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r8, fp, sp, lr}
 800b6f8:	2000a71c 	andcs	sl, r0, ip, lsl r7

0800b6fc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4603      	mov	r3, r0
 800b700:	4610      	mov	r0, r2
 800b702:	b129      	cbz	r1, 800b710 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x14>
 800b704:	f8b3 2510 	ldrh.w	r2, [r3, #1296]	; 0x510
 800b708:	4282      	cmp	r2, r0
 800b70a:	d011      	beq.n	800b730 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x34>
 800b70c:	2901      	cmp	r1, #1
 800b70e:	d003      	beq.n	800b718 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x1c>
 800b710:	f8b3 2554 	ldrh.w	r2, [r3, #1364]	; 0x554
 800b714:	4282      	cmp	r2, r0
 800b716:	d00b      	beq.n	800b730 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x34>
 800b718:	4a06      	ldr	r2, [pc, #24]	; (800b734 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x38>)
 800b71a:	681d      	ldr	r5, [r3, #0]
 800b71c:	6814      	ldr	r4, [r2, #0]
 800b71e:	f7ff fed3 	bl	800b4c8 <e131::universe_to_multicast_ip(unsigned short)>
 800b722:	4629      	mov	r1, r5
 800b724:	4602      	mov	r2, r0
 800b726:	4620      	mov	r0, r4
 800b728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b72c:	f005 bb76 	b.w	8010e1c <Network::LeaveGroup(int, unsigned int)>
 800b730:	bd38      	pop	{r3, r4, r5, pc}
 800b732:	bf00      	nop
 800b734:	20009ff4 	strdcs	r9, [r0], -r4

0800b738 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	4604      	mov	r4, r0
 800b73c:	461d      	mov	r5, r3
 800b73e:	b1c1      	cbz	r1, 800b772 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 800b740:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800b744:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800b748:	b12a      	cbz	r2, 800b756 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x1e>
 800b74a:	42aa      	cmp	r2, r5
 800b74c:	d017      	beq.n	800b77e <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800b74e:	2102      	movs	r1, #2
 800b750:	4620      	mov	r0, r4
 800b752:	f7ff ffd3 	bl	800b6fc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800b756:	4b0a      	ldr	r3, [pc, #40]	; (800b780 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>)
 800b758:	8035      	strh	r5, [r6, #0]
 800b75a:	4628      	mov	r0, r5
 800b75c:	6826      	ldr	r6, [r4, #0]
 800b75e:	681c      	ldr	r4, [r3, #0]
 800b760:	f7ff feb2 	bl	800b4c8 <e131::universe_to_multicast_ip(unsigned short)>
 800b764:	4631      	mov	r1, r6
 800b766:	4602      	mov	r2, r0
 800b768:	4620      	mov	r0, r4
 800b76a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b76e:	f005 bb52 	b.w	8010e16 <Network::JoinGroup(int, unsigned int)>
 800b772:	b122      	cbz	r2, 800b77e <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800b774:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800b778:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 800b77c:	e7e4      	b.n	800b748 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 800b77e:	bd70      	pop	{r4, r5, r6, pc}
 800b780:	20009ff4 	strdcs	r9, [r0], -r4

0800b784 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800b784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b788:	4604      	mov	r4, r0
 800b78a:	460d      	mov	r5, r1
 800b78c:	461e      	mov	r6, r3
 800b78e:	bb02      	cbnz	r2, 800b7d2 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x4e>
 800b790:	2901      	cmp	r1, #1
 800b792:	d843      	bhi.n	800b81c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800b794:	230c      	movs	r3, #12
 800b796:	fb03 0301 	mla	r3, r3, r1, r0
 800b79a:	f893 259a 	ldrb.w	r2, [r3, #1434]	; 0x59a
 800b79e:	b12a      	cbz	r2, 800b7ac <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x28>
 800b7a0:	f8b3 3598 	ldrh.w	r3, [r3, #1432]	; 0x598
 800b7a4:	42b3      	cmp	r3, r6
 800b7a6:	d109      	bne.n	800b7bc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x38>
 800b7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7ac:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800b7b0:	3201      	adds	r2, #1
 800b7b2:	f880 250a 	strb.w	r2, [r0, #1290]	; 0x50a
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f883 259a 	strb.w	r2, [r3, #1434]	; 0x59a
 800b7bc:	230c      	movs	r3, #12
 800b7be:	fb03 4405 	mla	r4, r3, r5, r4
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	f8a4 6598 	strh.w	r6, [r4, #1432]	; 0x598
 800b7c8:	f7ff fe7e 	bl	800b4c8 <e131::universe_to_multicast_ip(unsigned short)>
 800b7cc:	f8c4 059c 	str.w	r0, [r4, #1436]	; 0x59c
 800b7d0:	e7ea      	b.n	800b7a8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800b7d2:	2a02      	cmp	r2, #2
 800b7d4:	d122      	bne.n	800b81c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800b7d6:	2901      	cmp	r1, #1
 800b7d8:	d8e6      	bhi.n	800b7a8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800b7da:	2344      	movs	r3, #68	; 0x44
 800b7dc:	fb03 0301 	mla	r3, r3, r1, r0
 800b7e0:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800b7e4:	b152      	cbz	r2, 800b7fc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x78>
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800b7ec:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800b7f0:	4632      	mov	r2, r6
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800b7f8:	f7ff ff80 	bl	800b6fc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800b7fc:	230c      	movs	r3, #12
 800b7fe:	fb03 4505 	mla	r5, r3, r5, r4
 800b802:	f895 359a 	ldrb.w	r3, [r5, #1434]	; 0x59a
 800b806:	2b00      	cmp	r3, #0
 800b808:	d0ce      	beq.n	800b7a8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800b80a:	2300      	movs	r3, #0
 800b80c:	f885 359a 	strb.w	r3, [r5, #1434]	; 0x59a
 800b810:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800b814:	3b01      	subs	r3, #1
 800b816:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800b81a:	e7c5      	b.n	800b7a8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800b81c:	2344      	movs	r3, #68	; 0x44
 800b81e:	fb03 4305 	mla	r3, r3, r5, r4
 800b822:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800b826:	b1d2      	cbz	r2, 800b85e <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xda>
 800b828:	f8b3 3510 	ldrh.w	r3, [r3, #1296]	; 0x510
 800b82c:	42b3      	cmp	r3, r6
 800b82e:	d0bb      	beq.n	800b7a8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800b830:	4632      	mov	r2, r6
 800b832:	4629      	mov	r1, r5
 800b834:	4620      	mov	r0, r4
 800b836:	f7ff ff61 	bl	800b6fc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800b83a:	4b0d      	ldr	r3, [pc, #52]	; (800b870 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xec>)
 800b83c:	4630      	mov	r0, r6
 800b83e:	681f      	ldr	r7, [r3, #0]
 800b840:	f8d4 8000 	ldr.w	r8, [r4]
 800b844:	f7ff fe40 	bl	800b4c8 <e131::universe_to_multicast_ip(unsigned short)>
 800b848:	4641      	mov	r1, r8
 800b84a:	4602      	mov	r2, r0
 800b84c:	4638      	mov	r0, r7
 800b84e:	f005 fae2 	bl	8010e16 <Network::JoinGroup(int, unsigned int)>
 800b852:	2344      	movs	r3, #68	; 0x44
 800b854:	fb03 4305 	mla	r3, r3, r5, r4
 800b858:	f8a3 6510 	strh.w	r6, [r3, #1296]	; 0x510
 800b85c:	e7a4      	b.n	800b7a8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800b85e:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 800b862:	3201      	adds	r2, #1
 800b864:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 800b868:	2201      	movs	r2, #1
 800b86a:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800b86e:	e7e4      	b.n	800b83a <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xb6>
 800b870:	20009ff4 	strdcs	r9, [r0], -r4

0800b874 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 800b874:	b953      	cbnz	r3, 800b88c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x18>
 800b876:	2901      	cmp	r1, #1
 800b878:	d811      	bhi.n	800b89e <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x2a>
 800b87a:	230c      	movs	r3, #12
 800b87c:	fb03 0001 	mla	r0, r3, r1, r0
 800b880:	f8b0 3598 	ldrh.w	r3, [r0, #1432]	; 0x598
 800b884:	f890 059a 	ldrb.w	r0, [r0, #1434]	; 0x59a
 800b888:	8013      	strh	r3, [r2, #0]
 800b88a:	4770      	bx	lr
 800b88c:	2344      	movs	r3, #68	; 0x44
 800b88e:	fb03 0001 	mla	r0, r3, r1, r0
 800b892:	f8b0 3510 	ldrh.w	r3, [r0, #1296]	; 0x510
 800b896:	f890 0512 	ldrb.w	r0, [r0, #1298]	; 0x512
 800b89a:	8013      	strh	r3, [r2, #0]
 800b89c:	4770      	bx	lr
 800b89e:	4618      	mov	r0, r3
 800b8a0:	4770      	bx	lr

0800b8a2 <E131Bridge::UpdateMergeStatus(unsigned int)>:
 800b8a2:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 800b8a6:	b923      	cbnz	r3, 800b8b2 <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 800b8ae:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800b8b2:	2344      	movs	r3, #68	; 0x44
 800b8b4:	fb03 0001 	mla	r0, r3, r1, r0
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	f880 3551 	strb.w	r3, [r0, #1361]	; 0x551
 800b8be:	4770      	bx	lr

0800b8c0 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	2044      	movs	r0, #68	; 0x44
 800b8c4:	4348      	muls	r0, r1
 800b8c6:	b570      	push	{r4, r5, r6, lr}
 800b8c8:	1815      	adds	r5, r2, r0
 800b8ca:	460c      	mov	r4, r1
 800b8cc:	68d3      	ldr	r3, [r2, #12]
 800b8ce:	f8d5 1514 	ldr.w	r1, [r5, #1300]	; 0x514
 800b8d2:	1a5b      	subs	r3, r3, r1
 800b8d4:	f242 7110 	movw	r1, #10000	; 0x2710
 800b8d8:	428b      	cmp	r3, r1
 800b8da:	d90a      	bls.n	800b8f2 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 800b8dc:	2600      	movs	r6, #0
 800b8de:	f200 501c 	addw	r0, r0, #1308	; 0x51c
 800b8e2:	2110      	movs	r1, #16
 800b8e4:	f8c5 6518 	str.w	r6, [r5, #1304]	; 0x518
 800b8e8:	4410      	add	r0, r2
 800b8ea:	f7ff fdff 	bl	800b4ec <memset.constprop.0.isra.0>
 800b8ee:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 800b8f2:	2344      	movs	r3, #68	; 0x44
 800b8f4:	435c      	muls	r4, r3
 800b8f6:	1915      	adds	r5, r2, r4
 800b8f8:	f8d5 1530 	ldr.w	r1, [r5, #1328]	; 0x530
 800b8fc:	68d3      	ldr	r3, [r2, #12]
 800b8fe:	1a5b      	subs	r3, r3, r1
 800b900:	f242 7110 	movw	r1, #10000	; 0x2710
 800b904:	428b      	cmp	r3, r1
 800b906:	d90a      	bls.n	800b91e <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800b908:	2600      	movs	r6, #0
 800b90a:	f504 64a7 	add.w	r4, r4, #1336	; 0x538
 800b90e:	2110      	movs	r1, #16
 800b910:	f8c5 6534 	str.w	r6, [r5, #1332]	; 0x534
 800b914:	1910      	adds	r0, r2, r4
 800b916:	f7ff fde9 	bl	800b4ec <memset.constprop.0.isra.0>
 800b91a:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 800b91e:	f892 3551 	ldrb.w	r3, [r2, #1361]	; 0x551
 800b922:	b93b      	cbnz	r3, 800b934 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x74>
 800b924:	f892 3595 	ldrb.w	r3, [r2, #1429]	; 0x595
 800b928:	b923      	cbnz	r3, 800b934 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x74>
 800b92a:	2101      	movs	r1, #1
 800b92c:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 800b930:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 800b934:	bd70      	pop	{r4, r5, r6, pc}

0800b936 <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 800b936:	2244      	movs	r2, #68	; 0x44
 800b938:	fb02 0101 	mla	r1, r2, r1, r0
 800b93c:	68c3      	ldr	r3, [r0, #12]
 800b93e:	b510      	push	{r4, lr}
 800b940:	f8d1 2530 	ldr.w	r2, [r1, #1328]	; 0x530
 800b944:	f8d1 4518 	ldr.w	r4, [r1, #1304]	; 0x518
 800b948:	f8d1 0534 	ldr.w	r0, [r1, #1332]	; 0x534
 800b94c:	1a9a      	subs	r2, r3, r2
 800b94e:	b184      	cbz	r4, 800b972 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 800b950:	f8d1 1514 	ldr.w	r1, [r1, #1300]	; 0x514
 800b954:	1a5b      	subs	r3, r3, r1
 800b956:	b128      	cbz	r0, 800b964 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 800b958:	f242 700f 	movw	r0, #9999	; 0x270f
 800b95c:	4283      	cmp	r3, r0
 800b95e:	d90d      	bls.n	800b97c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 800b960:	4282      	cmp	r2, r0
 800b962:	e002      	b.n	800b96a <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 800b964:	f242 7010 	movw	r0, #10000	; 0x2710
 800b968:	4283      	cmp	r3, r0
 800b96a:	bf94      	ite	ls
 800b96c:	2000      	movls	r0, #0
 800b96e:	2001      	movhi	r0, #1
 800b970:	bd10      	pop	{r4, pc}
 800b972:	2800      	cmp	r0, #0
 800b974:	d0fc      	beq.n	800b970 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 800b976:	f242 7010 	movw	r0, #10000	; 0x2710
 800b97a:	e7f1      	b.n	800b960 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 800b97c:	2000      	movs	r0, #0
 800b97e:	e7f7      	b.n	800b970 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

0800b980 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 800b980:	684a      	ldr	r2, [r1, #4]
 800b982:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800b984:	b510      	push	{r4, lr}
 800b986:	429a      	cmp	r2, r3
 800b988:	d10d      	bne.n	800b9a6 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 800b98a:	f100 0392 	add.w	r3, r0, #146	; 0x92
 800b98e:	3108      	adds	r1, #8
 800b990:	30a2      	adds	r0, #162	; 0xa2
 800b992:	4283      	cmp	r3, r0
 800b994:	d101      	bne.n	800b99a <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x1a>
 800b996:	2001      	movs	r0, #1
 800b998:	bd10      	pop	{r4, pc}
 800b99a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b99e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9a2:	4294      	cmp	r4, r2
 800b9a4:	d0f5      	beq.n	800b992 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	e7f6      	b.n	800b998 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x18>
	...

0800b9ac <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800b9ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	4605      	mov	r5, r0
 800b9b4:	4690      	mov	r8, r2
 800b9b6:	460f      	mov	r7, r1
 800b9b8:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800b9bc:	2900      	cmp	r1, #0
 800b9be:	d03c      	beq.n	800ba3a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x8e>
 800b9c0:	2a00      	cmp	r2, #0
 800b9c2:	d03a      	beq.n	800ba3a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x8e>
 800b9c4:	2700      	movs	r7, #0
 800b9c6:	f240 6804 	movw	r8, #1540	; 0x604
 800b9ca:	463e      	mov	r6, r7
 800b9cc:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
 800b9d0:	f880 350c 	strb.w	r3, [r0, #1292]	; 0x50c
 800b9d4:	f200 541c 	addw	r4, r0, #1308	; 0x51c
 800b9d8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800b9dc:	b1e3      	cbz	r3, 800ba18 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6c>
 800b9de:	6868      	ldr	r0, [r5, #4]
 800b9e0:	4639      	mov	r1, r7
 800b9e2:	6803      	ldr	r3, [r0, #0]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	4798      	blx	r3
 800b9e8:	2110      	movs	r1, #16
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f844 6c04 	str.w	r6, [r4, #-4]
 800b9f0:	f7ff fd7c 	bl	800b4ec <memset.constprop.0.isra.0>
 800b9f4:	2110      	movs	r1, #16
 800b9f6:	f104 001c 	add.w	r0, r4, #28
 800b9fa:	61a6      	str	r6, [r4, #24]
 800b9fc:	f7ff fd76 	bl	800b4ec <memset.constprop.0.isra.0>
 800ba00:	f7fe f992 	bl	8009d28 <lightset::Data::Get()>
 800ba04:	fb08 0007 	mla	r0, r8, r7, r0
 800ba08:	f8c0 6600 	str.w	r6, [r0, #1536]	; 0x600
 800ba0c:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
 800ba10:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
 800ba14:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
 800ba18:	3444      	adds	r4, #68	; 0x44
 800ba1a:	b167      	cbz	r7, 800ba36 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x8a>
 800ba1c:	4b25      	ldr	r3, [pc, #148]	; (800bab4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x108>)
 800ba1e:	2102      	movs	r1, #2
 800ba20:	6818      	ldr	r0, [r3, #0]
 800ba22:	f007 fdb5 	bl	8013590 <LedBlink::SetMode(ledblink::Mode)>
 800ba26:	f895 350d 	ldrb.w	r3, [r5, #1293]	; 0x50d
 800ba2a:	f023 0302 	bic.w	r3, r3, #2
 800ba2e:	f885 350d 	strb.w	r3, [r5, #1293]	; 0x50d
 800ba32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba36:	2701      	movs	r7, #1
 800ba38:	e7ce      	b.n	800b9d8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2c>
 800ba3a:	2600      	movs	r6, #0
 800ba3c:	f240 6b04 	movw	fp, #1540	; 0x604
 800ba40:	46b1      	mov	r9, r6
 800ba42:	f505 64a7 	add.w	r4, r5, #1336	; 0x538
 800ba46:	7ea3      	ldrb	r3, [r4, #26]
 800ba48:	b373      	cbz	r3, 800baa8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfc>
 800ba4a:	b15f      	cbz	r7, 800ba64 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xb8>
 800ba4c:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800ba50:	b143      	cbz	r3, 800ba64 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xb8>
 800ba52:	2110      	movs	r1, #16
 800ba54:	f844 9c20 	str.w	r9, [r4, #-32]
 800ba58:	f1a4 001c 	sub.w	r0, r4, #28
 800ba5c:	f7ff fd46 	bl	800b4ec <memset.constprop.0.isra.0>
 800ba60:	f884 9019 	strb.w	r9, [r4, #25]
 800ba64:	f1b8 0f00 	cmp.w	r8, #0
 800ba68:	d00a      	beq.n	800ba80 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd4>
 800ba6a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ba6e:	b13b      	cbz	r3, 800ba80 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd4>
 800ba70:	2110      	movs	r1, #16
 800ba72:	4620      	mov	r0, r4
 800ba74:	f844 9c04 	str.w	r9, [r4, #-4]
 800ba78:	f7ff fd38 	bl	800b4ec <memset.constprop.0.isra.0>
 800ba7c:	f884 9019 	strb.w	r9, [r4, #25]
 800ba80:	f895 a4f5 	ldrb.w	sl, [r5, #1269]	; 0x4f5
 800ba84:	f1ba 0f00 	cmp.w	sl, #0
 800ba88:	d10e      	bne.n	800baa8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfc>
 800ba8a:	6868      	ldr	r0, [r5, #4]
 800ba8c:	4631      	mov	r1, r6
 800ba8e:	6803      	ldr	r3, [r0, #0]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	4798      	blx	r3
 800ba94:	f7fe f948 	bl	8009d28 <lightset::Data::Get()>
 800ba98:	fb0b 0006 	mla	r0, fp, r6, r0
 800ba9c:	f8c0 a600 	str.w	sl, [r0, #1536]	; 0x600
 800baa0:	f884 a018 	strb.w	sl, [r4, #24]
 800baa4:	f884 a01a 	strb.w	sl, [r4, #26]
 800baa8:	3444      	adds	r4, #68	; 0x44
 800baaa:	2e00      	cmp	r6, #0
 800baac:	d1b6      	bne.n	800ba1c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x70>
 800baae:	2601      	movs	r6, #1
 800bab0:	e7c9      	b.n	800ba46 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9a>
 800bab2:	bf00      	nop
 800bab4:	2000a718 	andcs	sl, r0, r8, lsl r7

0800bab8 <E131Bridge::HandleDmx()>:
 800bab8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800babc:	4604      	mov	r4, r0
 800babe:	2600      	movs	r6, #0
 800bac0:	f8b0 70f7 	ldrh.w	r7, [r0, #247]	; 0xf7
 800bac4:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 800bac8:	ba7f      	rev16	r7, r7
 800baca:	b2bf      	uxth	r7, r7
 800bacc:	3f01      	subs	r7, #1
 800bace:	f200 551c 	addw	r5, r0, #1308	; 0x51c
 800bad2:	f815 3c0a 	ldrb.w	r3, [r5, #-10]
 800bad6:	b353      	cbz	r3, 800bb2e <E131Bridge::HandleDmx()+0x76>
 800bad8:	f835 3c0c 	ldrh.w	r3, [r5, #-12]
 800badc:	f8b4 20ed 	ldrh.w	r2, [r4, #237]	; 0xed
 800bae0:	ba5b      	rev16	r3, r3
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d122      	bne.n	800bb2e <E131Bridge::HandleDmx()+0x76>
 800bae8:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800baec:	f1a5 0108 	sub.w	r1, r5, #8
 800baf0:	4620      	mov	r0, r4
 800baf2:	9300      	str	r3, [sp, #0]
 800baf4:	f7ff ff44 	bl	800b980 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800baf8:	f105 0114 	add.w	r1, r5, #20
 800bafc:	4682      	mov	sl, r0
 800bafe:	4620      	mov	r0, r4
 800bb00:	f7ff ff3e 	bl	800b980 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800bb04:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800bb08:	4680      	mov	r8, r0
 800bb0a:	f1ba 0f00 	cmp.w	sl, #0
 800bb0e:	d014      	beq.n	800bb3a <E131Bridge::HandleDmx()+0x82>
 800bb10:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800bb14:	7c2a      	ldrb	r2, [r5, #16]
 800bb16:	742b      	strb	r3, [r5, #16]
 800bb18:	3313      	adds	r3, #19
 800bb1a:	1a9b      	subs	r3, r3, r2
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	2b13      	cmp	r3, #19
 800bb20:	d905      	bls.n	800bb2e <E131Bridge::HandleDmx()+0x76>
 800bb22:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800bb26:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800bb2a:	2a00      	cmp	r2, #0
 800bb2c:	da0e      	bge.n	800bb4c <E131Bridge::HandleDmx()+0x94>
 800bb2e:	3544      	adds	r5, #68	; 0x44
 800bb30:	2e00      	cmp	r6, #0
 800bb32:	f040 812c 	bne.w	800bd8e <E131Bridge::HandleDmx()+0x2d6>
 800bb36:	2601      	movs	r6, #1
 800bb38:	e7cb      	b.n	800bad2 <E131Bridge::HandleDmx()+0x1a>
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	d0f1      	beq.n	800bb22 <E131Bridge::HandleDmx()+0x6a>
 800bb3e:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800bb42:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800bb46:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800bb4a:	e7e5      	b.n	800bb18 <E131Bridge::HandleDmx()+0x60>
 800bb4c:	065a      	lsls	r2, r3, #25
 800bb4e:	d50b      	bpl.n	800bb68 <E131Bridge::HandleDmx()+0xb0>
 800bb50:	f1ba 0f00 	cmp.w	sl, #0
 800bb54:	d102      	bne.n	800bb5c <E131Bridge::HandleDmx()+0xa4>
 800bb56:	f1b8 0f00 	cmp.w	r8, #0
 800bb5a:	d0e8      	beq.n	800bb2e <E131Bridge::HandleDmx()+0x76>
 800bb5c:	4642      	mov	r2, r8
 800bb5e:	4651      	mov	r1, sl
 800bb60:	4620      	mov	r0, r4
 800bb62:	f7ff ff23 	bl	800b9ac <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800bb66:	e7e2      	b.n	800bb2e <E131Bridge::HandleDmx()+0x76>
 800bb68:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800bb6c:	b133      	cbz	r3, 800bb7c <E131Bridge::HandleDmx()+0xc4>
 800bb6e:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800bb72:	b91b      	cbnz	r3, 800bb7c <E131Bridge::HandleDmx()+0xc4>
 800bb74:	4631      	mov	r1, r6
 800bb76:	4620      	mov	r0, r4
 800bb78:	f7ff fea2 	bl	800b8c0 <E131Bridge::CheckMergeTimeouts(unsigned int)>
 800bb7c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 800bb80:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d259      	bcs.n	800bc3c <E131Bridge::HandleDmx()+0x184>
 800bb88:	4631      	mov	r1, r6
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	9301      	str	r3, [sp, #4]
 800bb8e:	f7ff fed2 	bl	800b936 <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	d0cb      	beq.n	800bb2e <E131Bridge::HandleDmx()+0x76>
 800bb96:	9b01      	ldr	r3, [sp, #4]
 800bb98:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800bb9c:	9b00      	ldr	r3, [sp, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d154      	bne.n	800bc4c <E131Bridge::HandleDmx()+0x194>
 800bba2:	f1bb 0f00 	cmp.w	fp, #0
 800bba6:	d15c      	bne.n	800bc62 <E131Bridge::HandleDmx()+0x1aa>
 800bba8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800bbaa:	2210      	movs	r2, #16
 800bbac:	f845 3c04 	str.w	r3, [r5, #-4]
 800bbb0:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	742b      	strb	r3, [r5, #16]
 800bbb8:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800bbbc:	f7ff fc9e 	bl	800b4fc <memcpy.isra.0>
 800bbc0:	68e3      	ldr	r3, [r4, #12]
 800bbc2:	463a      	mov	r2, r7
 800bbc4:	4649      	mov	r1, r9
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	f845 3c08 	str.w	r3, [r5, #-8]
 800bbcc:	f7fe f8b8 	bl	8009d40 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800bbd0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800bbd4:	069b      	lsls	r3, r3, #26
 800bbd6:	f100 80ad 	bmi.w	800bd34 <E131Bridge::HandleDmx()+0x27c>
 800bbda:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 800bbde:	b29a      	uxth	r2, r3
 800bbe0:	2a00      	cmp	r2, #0
 800bbe2:	f000 80ab 	beq.w	800bd3c <E131Bridge::HandleDmx()+0x284>
 800bbe6:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 800bbea:	2a00      	cmp	r2, #0
 800bbec:	f040 80a6 	bne.w	800bd3c <E131Bridge::HandleDmx()+0x284>
 800bbf0:	ba5b      	rev16	r3, r3
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	f1ba 0f00 	cmp.w	sl, #0
 800bbf8:	f040 8099 	bne.w	800bd2e <E131Bridge::HandleDmx()+0x276>
 800bbfc:	f1b8 0f00 	cmp.w	r8, #0
 800bc00:	f040 8095 	bne.w	800bd2e <E131Bridge::HandleDmx()+0x276>
 800bc04:	69aa      	ldr	r2, [r5, #24]
 800bc06:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800bc0a:	3a00      	subs	r2, #0
 800bc0c:	bf18      	it	ne
 800bc0e:	2201      	movne	r2, #1
 800bc10:	3900      	subs	r1, #0
 800bc12:	bf18      	it	ne
 800bc14:	2101      	movne	r1, #1
 800bc16:	4620      	mov	r0, r4
 800bc18:	f7ff fd8e 	bl	800b738 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800bc1c:	f240 1301 	movw	r3, #257	; 0x101
 800bc20:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800bc24:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f040 808c 	bne.w	800bd46 <E131Bridge::HandleDmx()+0x28e>
 800bc2e:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800bc32:	f043 0302 	orr.w	r3, r3, #2
 800bc36:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800bc3a:	e778      	b.n	800bb2e <E131Bridge::HandleDmx()+0x76>
 800bc3c:	d9ae      	bls.n	800bb9c <E131Bridge::HandleDmx()+0xe4>
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f845 2c04 	str.w	r2, [r5, #-4]
 800bc44:	61aa      	str	r2, [r5, #24]
 800bc46:	f884 24f5 	strb.w	r2, [r4, #1269]	; 0x4f5
 800bc4a:	e7a5      	b.n	800bb98 <E131Bridge::HandleDmx()+0xe0>
 800bc4c:	f1ba 0f00 	cmp.w	sl, #0
 800bc50:	f000 8092 	beq.w	800bd78 <E131Bridge::HandleDmx()+0x2c0>
 800bc54:	f1bb 0f00 	cmp.w	fp, #0
 800bc58:	d15c      	bne.n	800bd14 <E131Bridge::HandleDmx()+0x25c>
 800bc5a:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800bc5e:	742b      	strb	r3, [r5, #16]
 800bc60:	e7ae      	b.n	800bbc0 <E131Bridge::HandleDmx()+0x108>
 800bc62:	f1b8 0f00 	cmp.w	r8, #0
 800bc66:	d03b      	beq.n	800bce0 <E131Bridge::HandleDmx()+0x228>
 800bc68:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800bc6c:	f240 6b04 	movw	fp, #1540	; 0x604
 800bc70:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800bc74:	68e3      	ldr	r3, [r4, #12]
 800bc76:	fb0b fb06 	mul.w	fp, fp, r6
 800bc7a:	616b      	str	r3, [r5, #20]
 800bc7c:	f7fe f854 	bl	8009d28 <lightset::Data::Get()>
 800bc80:	4603      	mov	r3, r0
 800bc82:	f50b 7000 	add.w	r0, fp, #512	; 0x200
 800bc86:	463a      	mov	r2, r7
 800bc88:	4649      	mov	r1, r9
 800bc8a:	4418      	add	r0, r3
 800bc8c:	9300      	str	r3, [sp, #0]
 800bc8e:	f7ff fc35 	bl	800b4fc <memcpy.isra.0>
 800bc92:	9b00      	ldr	r3, [sp, #0]
 800bc94:	f50b 6080 	add.w	r0, fp, #1024	; 0x400
 800bc98:	eb03 020b 	add.w	r2, r3, fp
 800bc9c:	f8c2 7600 	str.w	r7, [r2, #1536]	; 0x600
 800bca0:	4649      	mov	r1, r9
 800bca2:	463a      	mov	r2, r7
 800bca4:	4418      	add	r0, r3
 800bca6:	f7ff fc29 	bl	800b4fc <memcpy.isra.0>
 800bcaa:	e791      	b.n	800bbd0 <E131Bridge::HandleDmx()+0x118>
 800bcac:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800bcae:	2210      	movs	r2, #16
 800bcb0:	61ab      	str	r3, [r5, #24]
 800bcb2:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800bcb6:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800bcba:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800bcbe:	f105 001c 	add.w	r0, r5, #28
 800bcc2:	f7ff fc1b 	bl	800b4fc <memcpy.isra.0>
 800bcc6:	68e3      	ldr	r3, [r4, #12]
 800bcc8:	4631      	mov	r1, r6
 800bcca:	4620      	mov	r0, r4
 800bccc:	616b      	str	r3, [r5, #20]
 800bcce:	f7ff fde8 	bl	800b8a2 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800bcd2:	463a      	mov	r2, r7
 800bcd4:	4649      	mov	r1, r9
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800bcda:	f7fe f877 	bl	8009dcc <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800bcde:	e777      	b.n	800bbd0 <E131Bridge::HandleDmx()+0x118>
 800bce0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800bce2:	2210      	movs	r2, #16
 800bce4:	f845 3c04 	str.w	r3, [r5, #-4]
 800bce8:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800bcec:	4628      	mov	r0, r5
 800bcee:	742b      	strb	r3, [r5, #16]
 800bcf0:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800bcf4:	f7ff fc02 	bl	800b4fc <memcpy.isra.0>
 800bcf8:	68e3      	ldr	r3, [r4, #12]
 800bcfa:	4631      	mov	r1, r6
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	f845 3c08 	str.w	r3, [r5, #-8]
 800bd02:	f7ff fdce 	bl	800b8a2 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800bd06:	463a      	mov	r2, r7
 800bd08:	4649      	mov	r1, r9
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800bd0e:	f7fe f834 	bl	8009d7a <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800bd12:	e75d      	b.n	800bbd0 <E131Bridge::HandleDmx()+0x118>
 800bd14:	f1b8 0f00 	cmp.w	r8, #0
 800bd18:	d103      	bne.n	800bd22 <E131Bridge::HandleDmx()+0x26a>
 800bd1a:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800bd1e:	742b      	strb	r3, [r5, #16]
 800bd20:	e7ea      	b.n	800bcf8 <E131Bridge::HandleDmx()+0x240>
 800bd22:	481c      	ldr	r0, [pc, #112]	; (800bd94 <E131Bridge::HandleDmx()+0x2dc>)
 800bd24:	b003      	add	sp, #12
 800bd26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2a:	f008 b90d 	b.w	8013f48 <printf>
 800bd2e:	4642      	mov	r2, r8
 800bd30:	4651      	mov	r1, sl
 800bd32:	e770      	b.n	800bc16 <E131Bridge::HandleDmx()+0x15e>
 800bd34:	f04f 0300 	mov.w	r3, #0
 800bd38:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 800bd3c:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	f47f af6f 	bne.w	800bc24 <E131Bridge::HandleDmx()+0x16c>
 800bd46:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800bd4a:	f7fd ffed 	bl	8009d28 <lightset::Data::Get()>
 800bd4e:	4632      	mov	r2, r6
 800bd50:	4641      	mov	r1, r8
 800bd52:	f7ff fbdd 	bl	800b510 <lightset::Data::IOutput(LightSet*, unsigned int) const>
 800bd56:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	f47f af67 	bne.w	800bc2e <E131Bridge::HandleDmx()+0x176>
 800bd60:	6860      	ldr	r0, [r4, #4]
 800bd62:	4631      	mov	r1, r6
 800bd64:	6803      	ldr	r3, [r0, #0]
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	4798      	blx	r3
 800bd6a:	f04f 0301 	mov.w	r3, #1
 800bd6e:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 800bd72:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 800bd76:	e75a      	b.n	800bc2e <E131Bridge::HandleDmx()+0x176>
 800bd78:	f1bb 0f00 	cmp.w	fp, #0
 800bd7c:	d096      	beq.n	800bcac <E131Bridge::HandleDmx()+0x1f4>
 800bd7e:	f1b8 0f00 	cmp.w	r8, #0
 800bd82:	d0ce      	beq.n	800bd22 <E131Bridge::HandleDmx()+0x26a>
 800bd84:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800bd88:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800bd8c:	e79b      	b.n	800bcc6 <E131Bridge::HandleDmx()+0x20e>
 800bd8e:	b003      	add	sp, #12
 800bd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd94:	08016946 	stmdaeq	r1, {r1, r2, r6, r8, fp, sp, lr}

0800bd98 <E131Bridge::IsStatusChanged()>:
 800bd98:	4603      	mov	r3, r0
 800bd9a:	f890 04f8 	ldrb.w	r0, [r0, #1272]	; 0x4f8
 800bd9e:	b110      	cbz	r0, 800bda6 <E131Bridge::IsStatusChanged()+0xe>
 800bda0:	2200      	movs	r2, #0
 800bda2:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 800bda6:	4770      	bx	lr

0800bda8 <E131Bridge::Clear(unsigned int)>:
 800bda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdaa:	460d      	mov	r5, r1
 800bdac:	4604      	mov	r4, r0
 800bdae:	6847      	ldr	r7, [r0, #4]
 800bdb0:	f7fd ffba 	bl	8009d28 <lightset::Data::Get()>
 800bdb4:	f240 6204 	movw	r2, #1540	; 0x604
 800bdb8:	4606      	mov	r6, r0
 800bdba:	436a      	muls	r2, r5
 800bdbc:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800bdc0:	4430      	add	r0, r6
 800bdc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bdc6:	f7ff fb91 	bl	800b4ec <memset.constprop.0.isra.0>
 800bdca:	4432      	add	r2, r6
 800bdcc:	4630      	mov	r0, r6
 800bdce:	2644      	movs	r6, #68	; 0x44
 800bdd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdd4:	fb06 4605 	mla	r6, r6, r5, r4
 800bdd8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
 800bddc:	4639      	mov	r1, r7
 800bdde:	462a      	mov	r2, r5
 800bde0:	f7ff fb96 	bl	800b510 <lightset::Data::IOutput(LightSet*, unsigned int) const>
 800bde4:	f896 3512 	ldrb.w	r3, [r6, #1298]	; 0x512
 800bde8:	b153      	cbz	r3, 800be00 <E131Bridge::Clear(unsigned int)+0x58>
 800bdea:	f896 3552 	ldrb.w	r3, [r6, #1362]	; 0x552
 800bdee:	b93b      	cbnz	r3, 800be00 <E131Bridge::Clear(unsigned int)+0x58>
 800bdf0:	6860      	ldr	r0, [r4, #4]
 800bdf2:	4629      	mov	r1, r5
 800bdf4:	6803      	ldr	r3, [r0, #0]
 800bdf6:	689b      	ldr	r3, [r3, #8]
 800bdf8:	4798      	blx	r3
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	f886 3552 	strb.w	r3, [r6, #1362]	; 0x552
 800be00:	2300      	movs	r3, #0
 800be02:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800be06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be08 <E131Bridge::IsValidRoot()>:
 800be08:	b530      	push	{r4, r5, lr}
 800be0a:	4a0d      	ldr	r2, [pc, #52]	; (800be40 <E131Bridge::IsValidRoot()+0x38>)
 800be0c:	f100 0380 	add.w	r3, r0, #128	; 0x80
 800be10:	f100 018c 	add.w	r1, r0, #140	; 0x8c
 800be14:	4299      	cmp	r1, r3
 800be16:	d109      	bne.n	800be2c <E131Bridge::IsValidRoot()+0x24>
 800be18:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 800be1c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800be20:	d00c      	beq.n	800be3c <E131Bridge::IsValidRoot()+0x34>
 800be22:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800be26:	4258      	negs	r0, r3
 800be28:	4158      	adcs	r0, r3
 800be2a:	bd30      	pop	{r4, r5, pc}
 800be2c:	f813 5b01 	ldrb.w	r5, [r3], #1
 800be30:	f812 4b01 	ldrb.w	r4, [r2], #1
 800be34:	42a5      	cmp	r5, r4
 800be36:	d0ed      	beq.n	800be14 <E131Bridge::IsValidRoot()+0xc>
 800be38:	2000      	movs	r0, #0
 800be3a:	e7f6      	b.n	800be2a <E131Bridge::IsValidRoot()+0x22>
 800be3c:	2001      	movs	r0, #1
 800be3e:	e7f4      	b.n	800be2a <E131Bridge::IsValidRoot()+0x22>
 800be40:	080169f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, fp, sp, lr}

0800be44 <E131Bridge::IsValidDataPacket()>:
 800be44:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800be48:	2b02      	cmp	r3, #2
 800be4a:	d10d      	bne.n	800be68 <E131Bridge::IsValidDataPacket()+0x24>
 800be4c:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 800be50:	2ba1      	cmp	r3, #161	; 0xa1
 800be52:	d109      	bne.n	800be68 <E131Bridge::IsValidDataPacket()+0x24>
 800be54:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800be58:	b933      	cbnz	r3, 800be68 <E131Bridge::IsValidDataPacket()+0x24>
 800be5a:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 800be5e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800be62:	4258      	negs	r0, r3
 800be64:	4158      	adcs	r0, r3
 800be66:	4770      	bx	lr
 800be68:	2000      	movs	r0, #0
 800be6a:	4770      	bx	lr

0800be6c <E131Bridge::Run()>:
 800be6c:	b530      	push	{r4, r5, lr}
 800be6e:	4601      	mov	r1, r0
 800be70:	4604      	mov	r4, r0
 800be72:	b085      	sub	sp, #20
 800be74:	f10d 030e 	add.w	r3, sp, #14
 800be78:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800be7c:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800be80:	9300      	str	r3, [sp, #0]
 800be82:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800be86:	f004 fa93 	bl	80103b0 <udp_recv>
 800be8a:	4b3c      	ldr	r3, [pc, #240]	; (800bf7c <E131Bridge::Run()+0x110>)
 800be8c:	681d      	ldr	r5, [r3, #0]
 800be8e:	60e5      	str	r5, [r4, #12]
 800be90:	2800      	cmp	r0, #0
 800be92:	d13b      	bne.n	800bf0c <E131Bridge::Run()+0xa0>
 800be94:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800be98:	b183      	cbz	r3, 800bebc <E131Bridge::Run()+0x50>
 800be9a:	f894 24f9 	ldrb.w	r2, [r4, #1273]	; 0x4f9
 800be9e:	6923      	ldr	r3, [r4, #16]
 800bea0:	bb6a      	cbnz	r2, 800befe <E131Bridge::Run()+0x92>
 800bea2:	1aed      	subs	r5, r5, r3
 800bea4:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800bea8:	429d      	cmp	r5, r3
 800beaa:	d928      	bls.n	800befe <E131Bridge::Run()+0x92>
 800beac:	6863      	ldr	r3, [r4, #4]
 800beae:	b9eb      	cbnz	r3, 800beec <E131Bridge::Run()+0x80>
 800beb0:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800beb4:	f023 0302 	bic.w	r3, r3, #2
 800beb8:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800bebc:	6963      	ldr	r3, [r4, #20]
 800bebe:	b12b      	cbz	r3, 800becc <E131Bridge::Run()+0x60>
 800bec0:	4620      	mov	r0, r4
 800bec2:	f000 f957 	bl	800c174 <E131Bridge::HandleDmxIn()>
 800bec6:	4620      	mov	r0, r4
 800bec8:	f000 f8ca 	bl	800c060 <E131Bridge::SendDiscoveryPacket()>
 800becc:	7a23      	ldrb	r3, [r4, #8]
 800bece:	b15b      	cbz	r3, 800bee8 <E131Bridge::Run()+0x7c>
 800bed0:	4b2b      	ldr	r3, [pc, #172]	; (800bf80 <E131Bridge::Run()+0x114>)
 800bed2:	6818      	ldr	r0, [r3, #0]
 800bed4:	6843      	ldr	r3, [r0, #4]
 800bed6:	2b04      	cmp	r3, #4
 800bed8:	d006      	beq.n	800bee8 <E131Bridge::Run()+0x7c>
 800beda:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d049      	beq.n	800bf76 <E131Bridge::Run()+0x10a>
 800bee2:	2103      	movs	r1, #3
 800bee4:	f007 fb54 	bl	8013590 <LedBlink::SetMode(ledblink::Mode)>
 800bee8:	b005      	add	sp, #20
 800beea:	bd30      	pop	{r4, r5, pc}
 800beec:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1dd      	bne.n	800beb0 <E131Bridge::Run()+0x44>
 800bef4:	2201      	movs	r2, #1
 800bef6:	4620      	mov	r0, r4
 800bef8:	4611      	mov	r1, r2
 800befa:	f7ff fd57 	bl	800b9ac <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800befe:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800bf02:	1a9b      	subs	r3, r3, r2
 800bf04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf08:	d3d8      	bcc.n	800bebc <E131Bridge::Run()+0x50>
 800bf0a:	e7d1      	b.n	800beb0 <E131Bridge::Run()+0x44>
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f7ff ff7b 	bl	800be08 <E131Bridge::IsValidRoot()>
 800bf12:	2800      	cmp	r0, #0
 800bf14:	d0e8      	beq.n	800bee8 <E131Bridge::Run()+0x7c>
 800bf16:	2300      	movs	r3, #0
 800bf18:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800bf1c:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800bf20:	6125      	str	r5, [r4, #16]
 800bf22:	b15b      	cbz	r3, 800bf3c <E131Bridge::Run()+0xd0>
 800bf24:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800bf28:	b943      	cbnz	r3, 800bf3c <E131Bridge::Run()+0xd0>
 800bf2a:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800bf2e:	1aad      	subs	r5, r5, r2
 800bf30:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800bf34:	4295      	cmp	r5, r2
 800bf36:	bf88      	it	hi
 800bf38:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800bf3c:	6863      	ldr	r3, [r4, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d0bc      	beq.n	800bebc <E131Bridge::Run()+0x50>
 800bf42:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800bf46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf4a:	ba1a      	rev	r2, r3
 800bf4c:	d108      	bne.n	800bf60 <E131Bridge::Run()+0xf4>
 800bf4e:	4620      	mov	r0, r4
 800bf50:	f7ff ff78 	bl	800be44 <E131Bridge::IsValidDataPacket()>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d0b1      	beq.n	800bebc <E131Bridge::Run()+0x50>
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f7ff fdad 	bl	800bab8 <E131Bridge::HandleDmx()>
 800bf5e:	e7ad      	b.n	800bebc <E131Bridge::Run()+0x50>
 800bf60:	2a08      	cmp	r2, #8
 800bf62:	d1ab      	bne.n	800bebc <E131Bridge::Run()+0x50>
 800bf64:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800bf68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bf6c:	d1a6      	bne.n	800bebc <E131Bridge::Run()+0x50>
 800bf6e:	4620      	mov	r0, r4
 800bf70:	f000 f97c 	bl	800c26c <E131Bridge::HandleSynchronization()>
 800bf74:	e7a2      	b.n	800bebc <E131Bridge::Run()+0x50>
 800bf76:	2102      	movs	r1, #2
 800bf78:	e7b4      	b.n	800bee4 <E131Bridge::Run()+0x78>
 800bf7a:	bf00      	nop
 800bf7c:	2000a734 	andcs	sl, r0, r4, lsr r7
 800bf80:	2000a718 	andcs	sl, r0, r8, lsl r7

0800bf84 <E131Bridge::FillDiscoveryPacket()>:
 800bf84:	2200      	movs	r2, #0
 800bf86:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800bf8a:	b510      	push	{r4, lr}
 800bf8c:	333c      	adds	r3, #60	; 0x3c
 800bf8e:	005b      	lsls	r3, r3, #1
 800bf90:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800bf94:	69c3      	ldr	r3, [r0, #28]
 800bf96:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800bf9a:	428b      	cmp	r3, r1
 800bf9c:	d14b      	bne.n	800c036 <E131Bridge::FillDiscoveryPacket()+0xb2>
 800bf9e:	69c3      	ldr	r3, [r0, #28]
 800bfa0:	492e      	ldr	r1, [pc, #184]	; (800c05c <E131Bridge::FillDiscoveryPacket()+0xd8>)
 800bfa2:	701a      	strb	r2, [r3, #0]
 800bfa4:	2210      	movs	r2, #16
 800bfa6:	705a      	strb	r2, [r3, #1]
 800bfa8:	1d1a      	adds	r2, r3, #4
 800bfaa:	3310      	adds	r3, #16
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d145      	bne.n	800c03c <E131Bridge::FillDiscoveryPacket()+0xb8>
 800bfb0:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800bfb4:	69c3      	ldr	r3, [r0, #28]
 800bfb6:	3234      	adds	r2, #52	; 0x34
 800bfb8:	0052      	lsls	r2, r2, #1
 800bfba:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800bfbe:	ba52      	rev16	r2, r2
 800bfc0:	821a      	strh	r2, [r3, #16]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	749a      	strb	r2, [r3, #18]
 800bfc6:	74da      	strb	r2, [r3, #19]
 800bfc8:	751a      	strb	r2, [r3, #20]
 800bfca:	2208      	movs	r2, #8
 800bfcc:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800bfd0:	755a      	strb	r2, [r3, #21]
 800bfd2:	3316      	adds	r3, #22
 800bfd4:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800bfd8:	4291      	cmp	r1, r2
 800bfda:	d134      	bne.n	800c046 <E131Bridge::FillDiscoveryPacket()+0xc2>
 800bfdc:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800bfe0:	69c3      	ldr	r3, [r0, #28]
 800bfe2:	3229      	adds	r2, #41	; 0x29
 800bfe4:	0052      	lsls	r2, r2, #1
 800bfe6:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800bfea:	ba52      	rev16	r2, r2
 800bfec:	84da      	strh	r2, [r3, #38]	; 0x26
 800bfee:	2200      	movs	r2, #0
 800bff0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800bff4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800bff8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800bffc:	2202      	movs	r2, #2
 800bffe:	332c      	adds	r3, #44	; 0x2c
 800c000:	f803 2c01 	strb.w	r2, [r3, #-1]
 800c004:	f100 0274 	add.w	r2, r0, #116	; 0x74
 800c008:	4291      	cmp	r1, r2
 800c00a:	d121      	bne.n	800c050 <E131Bridge::FillDiscoveryPacket()+0xcc>
 800c00c:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800c010:	69c2      	ldr	r2, [r0, #28]
 800c012:	3304      	adds	r3, #4
 800c014:	005b      	lsls	r3, r3, #1
 800c016:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800c01a:	ba5b      	rev16	r3, r3
 800c01c:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800c020:	2300      	movs	r3, #0
 800c022:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800c026:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800c02a:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800c02e:	2301      	movs	r3, #1
 800c030:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800c034:	bd10      	pop	{r4, pc}
 800c036:	f803 2b01 	strb.w	r2, [r3], #1
 800c03a:	e7ae      	b.n	800bf9a <E131Bridge::FillDiscoveryPacket()+0x16>
 800c03c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c040:	f802 4b01 	strb.w	r4, [r2], #1
 800c044:	e7b2      	b.n	800bfac <E131Bridge::FillDiscoveryPacket()+0x28>
 800c046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c04a:	f803 4b01 	strb.w	r4, [r3], #1
 800c04e:	e7c3      	b.n	800bfd8 <E131Bridge::FillDiscoveryPacket()+0x54>
 800c050:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c054:	f803 4b01 	strb.w	r4, [r3], #1
 800c058:	e7d6      	b.n	800c008 <E131Bridge::FillDiscoveryPacket()+0x84>
 800c05a:	bf00      	nop
 800c05c:	080169f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, fp, sp, lr}

0800c060 <E131Bridge::SendDiscoveryPacket()>:
 800c060:	f242 710f 	movw	r1, #9999	; 0x270f
 800c064:	b530      	push	{r4, r5, lr}
 800c066:	68c2      	ldr	r2, [r0, #12]
 800c068:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800c06c:	4604      	mov	r4, r0
 800c06e:	1ad3      	subs	r3, r2, r3
 800c070:	428b      	cmp	r3, r1
 800c072:	b085      	sub	sp, #20
 800c074:	d92c      	bls.n	800c0d0 <E131Bridge::SendDiscoveryPacket()+0x70>
 800c076:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800c07a:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800c07e:	b1eb      	cbz	r3, 800c0bc <E131Bridge::SendDiscoveryPacket()+0x5c>
 800c080:	2300      	movs	r3, #0
 800c082:	f10d 020e 	add.w	r2, sp, #14
 800c086:	4619      	mov	r1, r3
 800c088:	f7ff fbf4 	bl	800b874 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800c08c:	4605      	mov	r5, r0
 800c08e:	b130      	cbz	r0, 800c09e <E131Bridge::SendDiscoveryPacket()+0x3e>
 800c090:	2501      	movs	r5, #1
 800c092:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800c096:	69e2      	ldr	r2, [r4, #28]
 800c098:	ba5b      	rev16	r3, r3
 800c09a:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
 800c09e:	2300      	movs	r3, #0
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f10d 020e 	add.w	r2, sp, #14
 800c0a8:	f7ff fbe4 	bl	800b874 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800c0ac:	b130      	cbz	r0, 800c0bc <E131Bridge::SendDiscoveryPacket()+0x5c>
 800c0ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800c0b2:	69e2      	ldr	r2, [r4, #28]
 800c0b4:	ba5b      	rev16	r3, r3
 800c0b6:	353c      	adds	r5, #60	; 0x3c
 800c0b8:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
 800c0bc:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800c0c0:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	69e1      	ldr	r1, [r4, #28]
 800c0c8:	6a23      	ldr	r3, [r4, #32]
 800c0ca:	7820      	ldrb	r0, [r4, #0]
 800c0cc:	f004 f9cc 	bl	8010468 <udp_send>
 800c0d0:	b005      	add	sp, #20
 800c0d2:	bd30      	pop	{r4, r5, pc}

0800c0d4 <memcpy.isra.0>:
 800c0d4:	3801      	subs	r0, #1
 800c0d6:	440a      	add	r2, r1
 800c0d8:	4291      	cmp	r1, r2
 800c0da:	d100      	bne.n	800c0de <memcpy.isra.0+0xa>
 800c0dc:	4770      	bx	lr
 800c0de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0e2:	f800 3f01 	strb.w	r3, [r0, #1]!
 800c0e6:	e7f7      	b.n	800c0d8 <memcpy.isra.0+0x4>

0800c0e8 <E131Bridge::FillDataPacket()>:
 800c0e8:	b570      	push	{r4, r5, r6, lr}
 800c0ea:	2400      	movs	r4, #0
 800c0ec:	2610      	movs	r6, #16
 800c0ee:	4605      	mov	r5, r0
 800c0f0:	6980      	ldr	r0, [r0, #24]
 800c0f2:	220c      	movs	r2, #12
 800c0f4:	7046      	strb	r6, [r0, #1]
 800c0f6:	7004      	strb	r4, [r0, #0]
 800c0f8:	7084      	strb	r4, [r0, #2]
 800c0fa:	70c4      	strb	r4, [r0, #3]
 800c0fc:	491c      	ldr	r1, [pc, #112]	; (800c170 <E131Bridge::FillDataPacket()+0x88>)
 800c0fe:	3004      	adds	r0, #4
 800c100:	f7ff ffe8 	bl	800c0d4 <memcpy.isra.0>
 800c104:	2304      	movs	r3, #4
 800c106:	4632      	mov	r2, r6
 800c108:	2602      	movs	r6, #2
 800c10a:	69a8      	ldr	r0, [r5, #24]
 800c10c:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800c110:	7543      	strb	r3, [r0, #21]
 800c112:	7484      	strb	r4, [r0, #18]
 800c114:	74c4      	strb	r4, [r0, #19]
 800c116:	7504      	strb	r4, [r0, #20]
 800c118:	3016      	adds	r0, #22
 800c11a:	f7ff ffdb 	bl	800c0d4 <memcpy.isra.0>
 800c11e:	69a8      	ldr	r0, [r5, #24]
 800c120:	2240      	movs	r2, #64	; 0x40
 800c122:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800c126:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800c12a:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800c12e:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800c132:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800c136:	302c      	adds	r0, #44	; 0x2c
 800c138:	f7ff ffcc 	bl	800c0d4 <memcpy.isra.0>
 800c13c:	22a1      	movs	r2, #161	; 0xa1
 800c13e:	69ab      	ldr	r3, [r5, #24]
 800c140:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800c144:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800c148:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800c14c:	69ab      	ldr	r3, [r5, #24]
 800c14e:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800c152:	69ab      	ldr	r3, [r5, #24]
 800c154:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800c158:	2201      	movs	r2, #1
 800c15a:	69ab      	ldr	r3, [r5, #24]
 800c15c:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800c160:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800c164:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800c168:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800c16c:	bd70      	pop	{r4, r5, r6, pc}
 800c16e:	bf00      	nop
 800c170:	080169f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, fp, sp, lr}

0800c174 <E131Bridge::HandleDmxIn()>:
 800c174:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c178:	4604      	mov	r4, r0
 800c17a:	4605      	mov	r5, r0
 800c17c:	2600      	movs	r6, #0
 800c17e:	4f3a      	ldr	r7, [pc, #232]	; (800c268 <E131Bridge::HandleDmxIn()+0xf4>)
 800c180:	f895 359a 	ldrb.w	r3, [r5, #1434]	; 0x59a
 800c184:	2b00      	cmp	r3, #0
 800c186:	d058      	beq.n	800c23a <E131Bridge::HandleDmxIn()+0xc6>
 800c188:	6960      	ldr	r0, [r4, #20]
 800c18a:	4631      	mov	r1, r6
 800c18c:	6803      	ldr	r3, [r0, #0]
 800c18e:	aa02      	add	r2, sp, #8
 800c190:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800c194:	ab03      	add	r3, sp, #12
 800c196:	47c0      	blx	r8
 800c198:	4601      	mov	r1, r0
 800c19a:	2800      	cmp	r0, #0
 800c19c:	d054      	beq.n	800c248 <E131Bridge::HandleDmxIn()+0xd4>
 800c19e:	9a02      	ldr	r2, [sp, #8]
 800c1a0:	69a0      	ldr	r0, [r4, #24]
 800c1a2:	b293      	uxth	r3, r2
 800c1a4:	f103 0c6d 	add.w	ip, r3, #109	; 0x6d
 800c1a8:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800c1ac:	fa9c fc9c 	rev16.w	ip, ip
 800c1b0:	f8a0 c010 	strh.w	ip, [r0, #16]
 800c1b4:	f103 0c57 	add.w	ip, r3, #87	; 0x57
 800c1b8:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800c1bc:	fa9c fc9c 	rev16.w	ip, ip
 800c1c0:	f8a0 c026 	strh.w	ip, [r0, #38]	; 0x26
 800c1c4:	f895 c5a1 	ldrb.w	ip, [r5, #1441]	; 0x5a1
 800c1c8:	330a      	adds	r3, #10
 800c1ca:	f880 c06c 	strb.w	ip, [r0, #108]	; 0x6c
 800c1ce:	f895 c5a0 	ldrb.w	ip, [r5, #1440]	; 0x5a0
 800c1d2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800c1d6:	f10c 0001 	add.w	r0, ip, #1
 800c1da:	f885 05a0 	strb.w	r0, [r5, #1440]	; 0x5a0
 800c1de:	69a0      	ldr	r0, [r4, #24]
 800c1e0:	ba5b      	rev16	r3, r3
 800c1e2:	f880 c06f 	strb.w	ip, [r0, #111]	; 0x6f
 800c1e6:	f8b5 c598 	ldrh.w	ip, [r5, #1432]	; 0x598
 800c1ea:	69a0      	ldr	r0, [r4, #24]
 800c1ec:	fa9c fc9c 	rev16.w	ip, ip
 800c1f0:	f8a0 c071 	strh.w	ip, [r0, #113]	; 0x71
 800c1f4:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800c1f8:	307d      	adds	r0, #125	; 0x7d
 800c1fa:	f7ff ff6b 	bl	800c0d4 <memcpy.isra.0>
 800c1fe:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800c202:	69a1      	ldr	r1, [r4, #24]
 800c204:	ba53      	rev16	r3, r2
 800c206:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800c20a:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800c20e:	327d      	adds	r2, #125	; 0x7d
 800c210:	9300      	str	r3, [sp, #0]
 800c212:	f8d5 359c 	ldr.w	r3, [r5, #1436]	; 0x59c
 800c216:	b292      	uxth	r2, r2
 800c218:	7820      	ldrb	r0, [r4, #0]
 800c21a:	f004 f925 	bl	8010468 <udp_send>
 800c21e:	2301      	movs	r3, #1
 800c220:	683a      	ldr	r2, [r7, #0]
 800c222:	40b3      	lsls	r3, r6
 800c224:	ea33 0102 	bics.w	r1, r3, r2
 800c228:	d007      	beq.n	800c23a <E131Bridge::HandleDmxIn()+0xc6>
 800c22a:	4313      	orrs	r3, r2
 800c22c:	603b      	str	r3, [r7, #0]
 800c22e:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c232:	f043 0301 	orr.w	r3, r3, #1
 800c236:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800c23a:	350c      	adds	r5, #12
 800c23c:	b116      	cbz	r6, 800c244 <E131Bridge::HandleDmxIn()+0xd0>
 800c23e:	b004      	add	sp, #16
 800c240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c244:	2601      	movs	r6, #1
 800c246:	e79b      	b.n	800c180 <E131Bridge::HandleDmxIn()+0xc>
 800c248:	9b03      	ldr	r3, [sp, #12]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d1f5      	bne.n	800c23a <E131Bridge::HandleDmxIn()+0xc6>
 800c24e:	2201      	movs	r2, #1
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	40b2      	lsls	r2, r6
 800c254:	ea23 0302 	bic.w	r3, r3, r2
 800c258:	603b      	str	r3, [r7, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d1ed      	bne.n	800c23a <E131Bridge::HandleDmxIn()+0xc6>
 800c25e:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c262:	f023 0301 	bic.w	r3, r3, #1
 800c266:	e7e6      	b.n	800c236 <E131Bridge::HandleDmxIn()+0xc2>
 800c268:	20000d1c 	andcs	r0, r0, ip, lsl sp

0800c26c <E131Bridge::HandleSynchronization()>:
 800c26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c270:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800c274:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800c278:	ba5b      	rev16	r3, r3
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	429a      	cmp	r2, r3
 800c27e:	4604      	mov	r4, r0
 800c280:	d00a      	beq.n	800c298 <E131Bridge::HandleSynchronization()+0x2c>
 800c282:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800c286:	429a      	cmp	r2, r3
 800c288:	d006      	beq.n	800c298 <E131Bridge::HandleSynchronization()+0x2c>
 800c28a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c28e:	4b22      	ldr	r3, [pc, #136]	; (800c318 <E131Bridge::HandleSynchronization()+0xac>)
 800c290:	2102      	movs	r1, #2
 800c292:	6818      	ldr	r0, [r3, #0]
 800c294:	f007 b97c 	b.w	8013590 <LedBlink::SetMode(ledblink::Mode)>
 800c298:	2500      	movs	r5, #0
 800c29a:	4627      	mov	r7, r4
 800c29c:	46a9      	mov	r9, r5
 800c29e:	68e3      	ldr	r3, [r4, #12]
 800c2a0:	4e1e      	ldr	r6, [pc, #120]	; (800c31c <E131Bridge::HandleSynchronization()+0xb0>)
 800c2a2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800c320 <E131Bridge::HandleSynchronization()+0xb4>
 800c2a6:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800c2aa:	f897 3512 	ldrb.w	r3, [r7, #1298]	; 0x512
 800c2ae:	b323      	cbz	r3, 800c2fa <E131Bridge::HandleSynchronization()+0x8e>
 800c2b0:	f8d8 3000 	ldr.w	r3, [r8]
 800c2b4:	6860      	ldr	r0, [r4, #4]
 800c2b6:	07da      	lsls	r2, r3, #31
 800c2b8:	bf5c      	itt	pl
 800c2ba:	2301      	movpl	r3, #1
 800c2bc:	f8c8 3000 	strpl.w	r3, [r8]
 800c2c0:	6803      	ldr	r3, [r0, #0]
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800c2c8:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800c2cc:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800c2d0:	47d0      	blx	sl
 800c2d2:	f897 3552 	ldrb.w	r3, [r7, #1362]	; 0x552
 800c2d6:	b93b      	cbnz	r3, 800c2e8 <E131Bridge::HandleSynchronization()+0x7c>
 800c2d8:	6860      	ldr	r0, [r4, #4]
 800c2da:	4629      	mov	r1, r5
 800c2dc:	6803      	ldr	r3, [r0, #0]
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	4798      	blx	r3
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	f887 3552 	strb.w	r3, [r7, #1362]	; 0x552
 800c2e8:	f8d8 3000 	ldr.w	r3, [r8]
 800c2ec:	f8c6 9600 	str.w	r9, [r6, #1536]	; 0x600
 800c2f0:	07db      	lsls	r3, r3, #31
 800c2f2:	bf5c      	itt	pl
 800c2f4:	2301      	movpl	r3, #1
 800c2f6:	f8c8 3000 	strpl.w	r3, [r8]
 800c2fa:	3744      	adds	r7, #68	; 0x44
 800c2fc:	f206 6604 	addw	r6, r6, #1540	; 0x604
 800c300:	b135      	cbz	r5, 800c310 <E131Bridge::HandleSynchronization()+0xa4>
 800c302:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c304:	b130      	cbz	r0, 800c314 <E131Bridge::HandleSynchronization()+0xa8>
 800c306:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c30a:	6803      	ldr	r3, [r0, #0]
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	4718      	bx	r3
 800c310:	2501      	movs	r5, #1
 800c312:	e7ca      	b.n	800c2aa <E131Bridge::HandleSynchronization()+0x3e>
 800c314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c318:	2000a718 	andcs	sl, r0, r8, lsl r7
 800c31c:	20000100 	andcs	r0, r0, r0, lsl #2
 800c320:	200000fc 	strdcs	r0, [r0], -ip

0800c324 <E131Bridge::Print()>:
 800c324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c328:	2500      	movs	r5, #0
 800c32a:	4604      	mov	r4, r0
 800c32c:	b08c      	sub	sp, #48	; 0x30
 800c32e:	a902      	add	r1, sp, #8
 800c330:	3024      	adds	r0, #36	; 0x24
 800c332:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800c336:	f000 f8b3 	bl	800c4a0 <uuid_unparse>
 800c33a:	482c      	ldr	r0, [pc, #176]	; (800c3ec <E131Bridge::Print()+0xc8>)
 800c33c:	f007 fe04 	bl	8013f48 <printf>
 800c340:	4b2b      	ldr	r3, [pc, #172]	; (800c3f0 <E131Bridge::Print()+0xcc>)
 800c342:	482c      	ldr	r0, [pc, #176]	; (800c3f4 <E131Bridge::Print()+0xd0>)
 800c344:	7819      	ldrb	r1, [r3, #0]
 800c346:	785a      	ldrb	r2, [r3, #1]
 800c348:	f007 fdfe 	bl	8013f48 <printf>
 800c34c:	482a      	ldr	r0, [pc, #168]	; (800c3f8 <E131Bridge::Print()+0xd4>)
 800c34e:	a902      	add	r1, sp, #8
 800c350:	f007 fdfa 	bl	8013f48 <printf>
 800c354:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800c358:	b1f3      	cbz	r3, 800c398 <E131Bridge::Print()+0x74>
 800c35a:	4828      	ldr	r0, [pc, #160]	; (800c3fc <E131Bridge::Print()+0xd8>)
 800c35c:	f007 fdf4 	bl	8013f48 <printf>
 800c360:	4e27      	ldr	r6, [pc, #156]	; (800c400 <E131Bridge::Print()+0xdc>)
 800c362:	4f28      	ldr	r7, [pc, #160]	; (800c404 <E131Bridge::Print()+0xe0>)
 800c364:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800c408 <E131Bridge::Print()+0xe4>
 800c368:	2301      	movs	r3, #1
 800c36a:	4629      	mov	r1, r5
 800c36c:	4620      	mov	r0, r4
 800c36e:	f10d 0206 	add.w	r2, sp, #6
 800c372:	f7ff fa7f 	bl	800b874 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800c376:	b170      	cbz	r0, 800c396 <E131Bridge::Print()+0x72>
 800c378:	2344      	movs	r3, #68	; 0x44
 800c37a:	436b      	muls	r3, r5
 800c37c:	f204 524c 	addw	r2, r4, #1356	; 0x54c
 800c380:	58d3      	ldr	r3, [r2, r3]
 800c382:	4629      	mov	r1, r5
 800c384:	2b00      	cmp	r3, #0
 800c386:	bf0c      	ite	eq
 800c388:	4633      	moveq	r3, r6
 800c38a:	463b      	movne	r3, r7
 800c38c:	4640      	mov	r0, r8
 800c38e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c392:	f007 fdd9 	bl	8013f48 <printf>
 800c396:	b325      	cbz	r5, 800c3e2 <E131Bridge::Print()+0xbe>
 800c398:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800c39c:	b1c3      	cbz	r3, 800c3d0 <E131Bridge::Print()+0xac>
 800c39e:	481b      	ldr	r0, [pc, #108]	; (800c40c <E131Bridge::Print()+0xe8>)
 800c3a0:	f007 fdd2 	bl	8013f48 <printf>
 800c3a4:	2500      	movs	r5, #0
 800c3a6:	4e1a      	ldr	r6, [pc, #104]	; (800c410 <E131Bridge::Print()+0xec>)
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	4629      	mov	r1, r5
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	f10d 0206 	add.w	r2, sp, #6
 800c3b2:	f7ff fa5f 	bl	800b874 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800c3b6:	b150      	cbz	r0, 800c3ce <E131Bridge::Print()+0xaa>
 800c3b8:	230c      	movs	r3, #12
 800c3ba:	436b      	muls	r3, r5
 800c3bc:	f204 52a1 	addw	r2, r4, #1441	; 0x5a1
 800c3c0:	5cd3      	ldrb	r3, [r2, r3]
 800c3c2:	4629      	mov	r1, r5
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c3ca:	f007 fdbd 	bl	8013f48 <printf>
 800c3ce:	b155      	cbz	r5, 800c3e6 <E131Bridge::Print()+0xc2>
 800c3d0:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800c3d4:	b113      	cbz	r3, 800c3dc <E131Bridge::Print()+0xb8>
 800c3d6:	480f      	ldr	r0, [pc, #60]	; (800c414 <E131Bridge::Print()+0xf0>)
 800c3d8:	f007 fdb6 	bl	8013f48 <printf>
 800c3dc:	b00c      	add	sp, #48	; 0x30
 800c3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3e2:	2501      	movs	r5, #1
 800c3e4:	e7c0      	b.n	800c368 <E131Bridge::Print()+0x44>
 800c3e6:	2501      	movs	r5, #1
 800c3e8:	e7de      	b.n	800c3a8 <E131Bridge::Print()+0x84>
 800c3ea:	bf00      	nop
 800c3ec:	08016973 	stmdaeq	r1, {r0, r1, r4, r5, r6, r8, fp, sp, lr}
 800c3f0:	08016a02 	stmdaeq	r1, {r1, r9, fp, sp, lr}
 800c3f4:	0801697b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, fp, sp, lr}
 800c3f8:	0801698e 	stmdaeq	r1, {r1, r2, r3, r7, r8, fp, sp, lr}
 800c3fc:	0801670b 	stmdaeq	r1, {r0, r1, r3, r8, r9, sl, sp, lr}
 800c400:	080166af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r9, sl, sp, lr}
 800c404:	080166b3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r9, sl, sp, lr}
 800c408:	0801699e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, fp, sp, lr}
 800c40c:	08016743 	stmdaeq	r1, {r0, r1, r6, r8, r9, sl, sp, lr}
 800c410:	080169bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, fp, sp, lr}
 800c414:	080169dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, fp, sp, lr}

0800c418 <uuid_unparse_x>:
 800c418:	4603      	mov	r3, r0
 800c41a:	b530      	push	{r4, r5, lr}
 800c41c:	4608      	mov	r0, r1
 800c41e:	4611      	mov	r1, r2
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	b08f      	sub	sp, #60	; 0x3c
 800c424:	ba12      	rev	r2, r2
 800c426:	920a      	str	r2, [sp, #40]	; 0x28
 800c428:	889a      	ldrh	r2, [r3, #4]
 800c42a:	891c      	ldrh	r4, [r3, #8]
 800c42c:	ba52      	rev16	r2, r2
 800c42e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800c432:	88da      	ldrh	r2, [r3, #6]
 800c434:	ba64      	rev16	r4, r4
 800c436:	ba52      	rev16	r2, r2
 800c438:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800c43c:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 800c440:	f103 020a 	add.w	r2, r3, #10
 800c444:	f10d 0432 	add.w	r4, sp, #50	; 0x32
 800c448:	3310      	adds	r3, #16
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d122      	bne.n	800c494 <uuid_unparse_x+0x7c>
 800c44e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800c452:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c456:	9208      	str	r2, [sp, #32]
 800c458:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800c45c:	0a1b      	lsrs	r3, r3, #8
 800c45e:	9207      	str	r2, [sp, #28]
 800c460:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800c464:	9301      	str	r3, [sp, #4]
 800c466:	9206      	str	r2, [sp, #24]
 800c468:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800c46c:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800c470:	9205      	str	r2, [sp, #20]
 800c472:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	9204      	str	r2, [sp, #16]
 800c47a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800c47e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800c482:	9203      	str	r2, [sp, #12]
 800c484:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800c488:	9202      	str	r2, [sp, #8]
 800c48a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c48c:	f007 fd6c 	bl	8013f68 <sprintf>
 800c490:	b00f      	add	sp, #60	; 0x3c
 800c492:	bd30      	pop	{r4, r5, pc}
 800c494:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c498:	f804 5b01 	strb.w	r5, [r4], #1
 800c49c:	e7d5      	b.n	800c44a <uuid_unparse_x+0x32>
	...

0800c4a0 <uuid_unparse>:
 800c4a0:	4a01      	ldr	r2, [pc, #4]	; (800c4a8 <uuid_unparse+0x8>)
 800c4a2:	f7ff bfb9 	b.w	800c418 <uuid_unparse_x>
 800c4a6:	bf00      	nop
 800c4a8:	08016a04 	stmdaeq	r1, {r2, r9, fp, sp, lr}

0800c4ac <ArtNetRdmController::GetUidCount(unsigned int)>:
 800c4ac:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800c4b0:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800c4b2:	b100      	cbz	r0, 800c4b6 <ArtNetRdmController::GetUidCount(unsigned int)+0xa>
 800c4b4:	6800      	ldr	r0, [r0, #0]
 800c4b6:	4770      	bx	lr

0800c4b8 <ArtNetRdmController::Copy(unsigned int, unsigned char*)>:
 800c4b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800c4bc:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800c4be:	b530      	push	{r4, r5, lr}
 800c4c0:	b130      	cbz	r0, 800c4d0 <ArtNetRdmController::Copy(unsigned int, unsigned char*)+0x18>
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	2406      	movs	r4, #6
 800c4c6:	6845      	ldr	r5, [r0, #4]
 800c4c8:	6801      	ldr	r1, [r0, #0]
 800c4ca:	4361      	muls	r1, r4
 800c4cc:	428b      	cmp	r3, r1
 800c4ce:	d300      	bcc.n	800c4d2 <ArtNetRdmController::Copy(unsigned int, unsigned char*)+0x1a>
 800c4d0:	bd30      	pop	{r4, r5, pc}
 800c4d2:	5ce9      	ldrb	r1, [r5, r3]
 800c4d4:	54d1      	strb	r1, [r2, r3]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	e7f6      	b.n	800c4c8 <ArtNetRdmController::Copy(unsigned int, unsigned char*)+0x10>
	...

0800c4dc <ArtNetRdmController::~ArtNetRdmController()>:
 800c4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4e0:	2600      	movs	r6, #0
 800c4e2:	4604      	mov	r4, r0
 800c4e4:	4605      	mov	r5, r0
 800c4e6:	46b0      	mov	r8, r6
 800c4e8:	4b0d      	ldr	r3, [pc, #52]	; (800c520 <ArtNetRdmController::~ArtNetRdmController()+0x44>)
 800c4ea:	f8df 9038 	ldr.w	r9, [pc, #56]	; 800c524 <ArtNetRdmController::~ArtNetRdmController()+0x48>
 800c4ee:	f844 3b7c 	str.w	r3, [r4], #124
 800c4f2:	f8d9 3000 	ldr.w	r3, [r9]
 800c4f6:	42b3      	cmp	r3, r6
 800c4f8:	d802      	bhi.n	800c500 <ArtNetRdmController::~ArtNetRdmController()+0x24>
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c500:	6827      	ldr	r7, [r4, #0]
 800c502:	b157      	cbz	r7, 800c51a <ArtNetRdmController::~ArtNetRdmController()+0x3e>
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f8c7 8000 	str.w	r8, [r7]
 800c50a:	b108      	cbz	r0, 800c510 <ArtNetRdmController::~ArtNetRdmController()+0x34>
 800c50c:	f007 f926 	bl	801375c <operator delete[](void*)>
 800c510:	4638      	mov	r0, r7
 800c512:	f007 f921 	bl	8013758 <operator delete(void*)>
 800c516:	f8c4 8000 	str.w	r8, [r4]
 800c51a:	3601      	adds	r6, #1
 800c51c:	3404      	adds	r4, #4
 800c51e:	e7e8      	b.n	800c4f2 <ArtNetRdmController::~ArtNetRdmController()+0x16>
 800c520:	08016a48 	stmdaeq	r1, {r3, r6, r9, fp, sp, lr}
 800c524:	20000e20 	andcs	r0, r0, r0, lsr #28

0800c528 <ArtNetRdmController::~ArtNetRdmController()>:
 800c528:	b510      	push	{r4, lr}
 800c52a:	4604      	mov	r4, r0
 800c52c:	f7ff ffd6 	bl	800c4dc <ArtNetRdmController::~ArtNetRdmController()>
 800c530:	4620      	mov	r0, r4
 800c532:	f007 f911 	bl	8013758 <operator delete(void*)>
 800c536:	4620      	mov	r0, r4
 800c538:	bd10      	pop	{r4, pc}

0800c53a <ArtNetRdmController::Full(unsigned int)>:
 800c53a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800c53e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800c540:	b108      	cbz	r0, 800c546 <ArtNetRdmController::Full(unsigned int)+0xc>
 800c542:	f000 ba31 	b.w	800c9a8 <RDMDiscovery::Full()>
 800c546:	4770      	bx	lr

0800c548 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)>:
 800c548:	b538      	push	{r3, r4, r5, lr}
 800c54a:	460d      	mov	r5, r1
 800c54c:	4614      	mov	r4, r2
 800c54e:	b1f2      	cbz	r2, 800c58e <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x46>
 800c550:	f008 f80e 	bl	8014570 <fwdgt_counter_reload>
 800c554:	4628      	mov	r0, r5
 800c556:	f000 fdfd 	bl	800d154 <Rdm::Receive(unsigned int)>
 800c55a:	2800      	cmp	r0, #0
 800c55c:	d1f8      	bne.n	800c550 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x8>
 800c55e:	4621      	mov	r1, r4
 800c560:	7863      	ldrb	r3, [r4, #1]
 800c562:	4a0c      	ldr	r2, [pc, #48]	; (800c594 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x4c>)
 800c564:	3b01      	subs	r3, #1
 800c566:	1cd8      	adds	r0, r3, #3
 800c568:	d10c      	bne.n	800c584 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x3c>
 800c56a:	7862      	ldrb	r2, [r4, #1]
 800c56c:	4628      	mov	r0, r5
 800c56e:	490a      	ldr	r1, [pc, #40]	; (800c598 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x50>)
 800c570:	3202      	adds	r2, #2
 800c572:	f000 fdff 	bl	800d174 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 800c576:	4628      	mov	r0, r5
 800c578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c57c:	f64e 2160 	movw	r1, #60000	; 0xea60
 800c580:	f000 bdf0 	b.w	800d164 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800c584:	f811 0b01 	ldrb.w	r0, [r1], #1
 800c588:	f802 0b01 	strb.w	r0, [r2], #1
 800c58c:	e7ea      	b.n	800c564 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x1c>
 800c58e:	4610      	mov	r0, r2
 800c590:	bd38      	pop	{r3, r4, r5, pc}
 800c592:	bf00      	nop
 800c594:	20000d21 	andcs	r0, r0, r1, lsr #26
 800c598:	20000d20 	andcs	r0, r0, r0, lsr #26

0800c59c <ArtNetRdmController::ArtNetRdmController(unsigned int)>:
 800c59c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	46b3      	mov	fp, r6
 800c5a4:	f04f 0a00 	mov.w	sl, #0
 800c5a8:	1d07      	adds	r7, r0, #4
 800c5aa:	4638      	mov	r0, r7
 800c5ac:	460d      	mov	r5, r1
 800c5ae:	f000 fb0b 	bl	800cbc8 <RDMDeviceController::RDMDeviceController()>
 800c5b2:	4b21      	ldr	r3, [pc, #132]	; (800c638 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x9c>)
 800c5b4:	46d1      	mov	r9, sl
 800c5b6:	f84b 3b7c 	str.w	r3, [fp], #124
 800c5ba:	46d8      	mov	r8, fp
 800c5bc:	4b1f      	ldr	r3, [pc, #124]	; (800c63c <ArtNetRdmController::ArtNetRdmController(unsigned int)+0xa0>)
 800c5be:	601d      	str	r5, [r3, #0]
 800c5c0:	45aa      	cmp	sl, r5
 800c5c2:	d108      	bne.n	800c5d6 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x3a>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	2d03      	cmp	r5, #3
 800c5c8:	d931      	bls.n	800c62e <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x92>
 800c5ca:	22cc      	movs	r2, #204	; 0xcc
 800c5cc:	4b1c      	ldr	r3, [pc, #112]	; (800c640 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0xa4>)
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	701a      	strb	r2, [r3, #0]
 800c5d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d6:	f44f 7090 	mov.w	r0, #288	; 0x120
 800c5da:	f007 f8c1 	bl	8013760 <operator new(unsigned int)>
 800c5de:	4604      	mov	r4, r0
 800c5e0:	f8c0 9000 	str.w	r9, [r0]
 800c5e4:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800c5e8:	f007 f8bc 	bl	8013764 <operator new[](unsigned int)>
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	6060      	str	r0, [r4, #4]
 800c5f0:	6863      	ldr	r3, [r4, #4]
 800c5f2:	4814      	ldr	r0, [pc, #80]	; (800c644 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0xa8>)
 800c5f4:	4413      	add	r3, r2
 800c5f6:	1e59      	subs	r1, r3, #1
 800c5f8:	3305      	adds	r3, #5
 800c5fa:	428b      	cmp	r3, r1
 800c5fc:	d112      	bne.n	800c624 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x88>
 800c5fe:	3206      	adds	r2, #6
 800c600:	f5b2 6f96 	cmp.w	r2, #1200	; 0x4b0
 800c604:	d1f4      	bne.n	800c5f0 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x54>
 800c606:	f104 000c 	add.w	r0, r4, #12
 800c60a:	f8c4 a008 	str.w	sl, [r4, #8]
 800c60e:	f000 fb6b 	bl	800cce8 <RDMMessage::RDMMessage()>
 800c612:	4639      	mov	r1, r7
 800c614:	4620      	mov	r0, r4
 800c616:	f848 4b04 	str.w	r4, [r8], #4
 800c61a:	f000 f850 	bl	800c6be <RDMDiscovery::SetUid(unsigned char const*)>
 800c61e:	f10a 0a01 	add.w	sl, sl, #1
 800c622:	e7cd      	b.n	800c5c0 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x24>
 800c624:	f810 cb01 	ldrb.w	ip, [r0], #1
 800c628:	f801 cf01 	strb.w	ip, [r1, #1]!
 800c62c:	e7e5      	b.n	800c5fa <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x5e>
 800c62e:	f84b 3025 	str.w	r3, [fp, r5, lsl #2]
 800c632:	3501      	adds	r5, #1
 800c634:	e7c7      	b.n	800c5c6 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x2a>
 800c636:	bf00      	nop
 800c638:	08016a48 	stmdaeq	r1, {r3, r6, r9, fp, sp, lr}
 800c63c:	20000e20 	andcs	r0, r0, r0, lsr #28
 800c640:	20000d20 	andcs	r0, r0, r0, lsr #26
 800c644:	08016a38 	stmdaeq	r1, {r3, r4, r5, r9, fp, sp, lr}

0800c648 <memcmp.constprop.0>:
 800c648:	b510      	push	{r4, lr}
 800c64a:	1e4a      	subs	r2, r1, #1
 800c64c:	1e43      	subs	r3, r0, #1
 800c64e:	3105      	adds	r1, #5
 800c650:	428a      	cmp	r2, r1
 800c652:	d101      	bne.n	800c658 <memcmp.constprop.0+0x10>
 800c654:	2000      	movs	r0, #0
 800c656:	e006      	b.n	800c666 <memcmp.constprop.0+0x1e>
 800c658:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800c65c:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800c660:	42a0      	cmp	r0, r4
 800c662:	d0f5      	beq.n	800c650 <memcmp.constprop.0+0x8>
 800c664:	1b00      	subs	r0, r0, r4
 800c666:	bd10      	pop	{r4, pc}

0800c668 <memcpy.constprop.0.isra.0>:
 800c668:	3801      	subs	r0, #1
 800c66a:	1d8b      	adds	r3, r1, #6
 800c66c:	4299      	cmp	r1, r3
 800c66e:	d100      	bne.n	800c672 <memcpy.constprop.0.isra.0+0xa>
 800c670:	4770      	bx	lr
 800c672:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c676:	f800 2f01 	strb.w	r2, [r0, #1]!
 800c67a:	e7f7      	b.n	800c66c <memcpy.constprop.0.isra.0+0x4>

0800c67c <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>:
 800c67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c680:	6805      	ldr	r5, [r0, #0]
 800c682:	4604      	mov	r4, r0
 800c684:	2dc8      	cmp	r5, #200	; 0xc8
 800c686:	460e      	mov	r6, r1
 800c688:	d017      	beq.n	800c6ba <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x3e>
 800c68a:	2700      	movs	r7, #0
 800c68c:	f04f 0906 	mov.w	r9, #6
 800c690:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800c694:	42bd      	cmp	r5, r7
 800c696:	d108      	bne.n	800c6aa <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x2e>
 800c698:	1c6b      	adds	r3, r5, #1
 800c69a:	4631      	mov	r1, r6
 800c69c:	fb09 8005 	mla	r0, r9, r5, r8
 800c6a0:	6023      	str	r3, [r4, #0]
 800c6a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6a6:	f7ff bfdf 	b.w	800c668 <memcpy.constprop.0.isra.0>
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	fb09 8007 	mla	r0, r9, r7, r8
 800c6b0:	f7ff ffca 	bl	800c648 <memcmp.constprop.0>
 800c6b4:	b108      	cbz	r0, 800c6ba <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x3e>
 800c6b6:	3701      	adds	r7, #1
 800c6b8:	e7ec      	b.n	800c694 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x18>
 800c6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c6be <RDMDiscovery::SetUid(unsigned char const*)>:
 800c6be:	b538      	push	{r3, r4, r5, lr}
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	460d      	mov	r5, r1
 800c6c4:	f200 100b 	addw	r0, r0, #267	; 0x10b
 800c6c8:	f7ff ffce 	bl	800c668 <memcpy.constprop.0.isra.0>
 800c6cc:	4629      	mov	r1, r5
 800c6ce:	f104 000c 	add.w	r0, r4, #12
 800c6d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6d6:	f000 bb25 	b.w	800cd24 <RDMMessage::SetSrcUid(unsigned char const*)>

0800c6da <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>:
 800c6da:	b570      	push	{r4, r5, r6, lr}
 800c6dc:	780b      	ldrb	r3, [r1, #0]
 800c6de:	2bfe      	cmp	r3, #254	; 0xfe
 800c6e0:	d001      	beq.n	800c6e6 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0xc>
 800c6e2:	2000      	movs	r0, #0
 800c6e4:	bd70      	pop	{r4, r5, r6, pc}
 800c6e6:	7a48      	ldrb	r0, [r1, #9]
 800c6e8:	7a0b      	ldrb	r3, [r1, #8]
 800c6ea:	1e54      	subs	r4, r2, #1
 800c6ec:	4003      	ands	r3, r0
 800c6ee:	7013      	strb	r3, [r2, #0]
 800c6f0:	7ac8      	ldrb	r0, [r1, #11]
 800c6f2:	7a8b      	ldrb	r3, [r1, #10]
 800c6f4:	3205      	adds	r2, #5
 800c6f6:	4003      	ands	r3, r0
 800c6f8:	f802 3c04 	strb.w	r3, [r2, #-4]
 800c6fc:	7b48      	ldrb	r0, [r1, #13]
 800c6fe:	7b0b      	ldrb	r3, [r1, #12]
 800c700:	4003      	ands	r3, r0
 800c702:	f802 3c03 	strb.w	r3, [r2, #-3]
 800c706:	7bc8      	ldrb	r0, [r1, #15]
 800c708:	7b8b      	ldrb	r3, [r1, #14]
 800c70a:	4003      	ands	r3, r0
 800c70c:	f802 3c02 	strb.w	r3, [r2, #-2]
 800c710:	7c48      	ldrb	r0, [r1, #17]
 800c712:	7c0b      	ldrb	r3, [r1, #16]
 800c714:	4003      	ands	r3, r0
 800c716:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c71a:	7cc8      	ldrb	r0, [r1, #19]
 800c71c:	7c8b      	ldrb	r3, [r1, #18]
 800c71e:	4003      	ands	r3, r0
 800c720:	7013      	strb	r3, [r2, #0]
 800c722:	7d0b      	ldrb	r3, [r1, #20]
 800c724:	7d88      	ldrb	r0, [r1, #22]
 800c726:	7dcd      	ldrb	r5, [r1, #23]
 800c728:	7d49      	ldrb	r1, [r1, #21]
 800c72a:	4019      	ands	r1, r3
 800c72c:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800c730:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800c734:	4433      	add	r3, r6
 800c736:	4294      	cmp	r4, r2
 800c738:	b29b      	uxth	r3, r3
 800c73a:	d1f9      	bne.n	800c730 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0x56>
 800c73c:	ebb1 2f13 	cmp.w	r1, r3, lsr #8
 800c740:	d1cf      	bne.n	800c6e2 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0x8>
 800c742:	4028      	ands	r0, r5
 800c744:	b2db      	uxtb	r3, r3
 800c746:	1ac3      	subs	r3, r0, r3
 800c748:	4258      	negs	r0, r3
 800c74a:	4158      	adcs	r0, r3
 800c74c:	e7ca      	b.n	800c6e4 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0xa>
	...

0800c750 <RDMDiscovery::QuickFind(unsigned char const*)>:
 800c750:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c752:	4605      	mov	r5, r0
 800c754:	460e      	mov	r6, r1
 800c756:	f105 040c 	add.w	r4, r5, #12
 800c75a:	f007 ff09 	bl	8014570 <fwdgt_counter_reload>
 800c75e:	2110      	movs	r1, #16
 800c760:	4620      	mov	r0, r4
 800c762:	f000 fae7 	bl	800cd34 <RDMMessage::SetCc(unsigned char)>
 800c766:	2102      	movs	r1, #2
 800c768:	4620      	mov	r0, r4
 800c76a:	f000 fae5 	bl	800cd38 <RDMMessage::SetPid(unsigned short)>
 800c76e:	4631      	mov	r1, r6
 800c770:	4620      	mov	r0, r4
 800c772:	f000 fadb 	bl	800cd2c <RDMMessage::SetDstUid(unsigned char const*)>
 800c776:	2200      	movs	r2, #0
 800c778:	4620      	mov	r0, r4
 800c77a:	4611      	mov	r1, r2
 800c77c:	f000 fae0 	bl	800cd40 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800c780:	4620      	mov	r0, r4
 800c782:	68a9      	ldr	r1, [r5, #8]
 800c784:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800c788:	f000 faec 	bl	800cd64 <RDMMessage::Send(unsigned int, unsigned int)>
 800c78c:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800c790:	68a8      	ldr	r0, [r5, #8]
 800c792:	f000 fce7 	bl	800d164 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800c796:	b160      	cbz	r0, 800c7b2 <RDMDiscovery::QuickFind(unsigned char const*)+0x62>
 800c798:	7d03      	ldrb	r3, [r0, #20]
 800c79a:	2b11      	cmp	r3, #17
 800c79c:	d109      	bne.n	800c7b2 <RDMDiscovery::QuickFind(unsigned char const*)+0x62>
 800c79e:	f100 0109 	add.w	r1, r0, #9
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	f7ff ff50 	bl	800c648 <memcmp.constprop.0>
 800c7a8:	b918      	cbnz	r0, 800c7b2 <RDMDiscovery::QuickFind(unsigned char const*)+0x62>
 800c7aa:	4631      	mov	r1, r6
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	f7ff ff65 	bl	800c67c <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>
 800c7b2:	f007 fedd 	bl	8014570 <fwdgt_counter_reload>
 800c7b6:	4620      	mov	r0, r4
 800c7b8:	491a      	ldr	r1, [pc, #104]	; (800c824 <RDMDiscovery::QuickFind(unsigned char const*)+0xd4>)
 800c7ba:	f000 fab7 	bl	800cd2c <RDMMessage::SetDstUid(unsigned char const*)>
 800c7be:	4620      	mov	r0, r4
 800c7c0:	2110      	movs	r1, #16
 800c7c2:	f000 fab7 	bl	800cd34 <RDMMessage::SetCc(unsigned char)>
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	2101      	movs	r1, #1
 800c7ca:	f000 fab5 	bl	800cd38 <RDMMessage::SetPid(unsigned short)>
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	220c      	movs	r2, #12
 800c7d2:	f205 1111 	addw	r1, r5, #273	; 0x111
 800c7d6:	f000 fab3 	bl	800cd40 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800c7da:	4620      	mov	r0, r4
 800c7dc:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800c7e0:	68a9      	ldr	r1, [r5, #8]
 800c7e2:	f000 fabf 	bl	800cd64 <RDMMessage::Send(unsigned int, unsigned int)>
 800c7e6:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800c7ea:	68a8      	ldr	r0, [r5, #8]
 800c7ec:	f000 fcba 	bl	800d164 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	f007 febd 	bl	8014570 <fwdgt_counter_reload>
 800c7f6:	b14c      	cbz	r4, 800c80c <RDMDiscovery::QuickFind(unsigned char const*)+0xbc>
 800c7f8:	466a      	mov	r2, sp
 800c7fa:	4621      	mov	r1, r4
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	f7ff ff6c 	bl	800c6da <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800c802:	b130      	cbz	r0, 800c812 <RDMDiscovery::QuickFind(unsigned char const*)+0xc2>
 800c804:	4669      	mov	r1, sp
 800c806:	4628      	mov	r0, r5
 800c808:	f7ff ffa2 	bl	800c750 <RDMDiscovery::QuickFind(unsigned char const*)>
 800c80c:	2000      	movs	r0, #0
 800c80e:	b002      	add	sp, #8
 800c810:	bd70      	pop	{r4, r5, r6, pc}
 800c812:	466a      	mov	r2, sp
 800c814:	4621      	mov	r1, r4
 800c816:	4628      	mov	r0, r5
 800c818:	f7ff ff5f 	bl	800c6da <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800c81c:	f080 0001 	eor.w	r0, r0, #1
 800c820:	b2c0      	uxtb	r0, r0
 800c822:	e7f4      	b.n	800c80e <RDMDiscovery::QuickFind(unsigned char const*)+0xbe>
 800c824:	08016a60 	stmdaeq	r1, {r5, r6, r9, fp, sp, lr}

0800c828 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>:
 800c828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c82c:	4691      	mov	r9, r2
 800c82e:	469b      	mov	fp, r3
 800c830:	b085      	sub	sp, #20
 800c832:	4605      	mov	r5, r0
 800c834:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 800c838:	f007 fe9a 	bl	8014570 <fwdgt_counter_reload>
 800c83c:	45c3      	cmp	fp, r8
 800c83e:	bf08      	it	eq
 800c840:	45b9      	cmpeq	r9, r7
 800c842:	ea4f 430b 	mov.w	r3, fp, lsl #16
 800c846:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 800c84a:	ea4f 4209 	mov.w	r2, r9, lsl #16
 800c84e:	4c54      	ldr	r4, [pc, #336]	; (800c9a0 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x178>)
 800c850:	f105 060c 	add.w	r6, r5, #12
 800c854:	ba12      	rev	r2, r2
 800c856:	ba1b      	rev	r3, r3
 800c858:	d136      	bne.n	800c8c8 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0xa0>
 800c85a:	4621      	mov	r1, r4
 800c85c:	a802      	add	r0, sp, #8
 800c85e:	e9c4 3200 	strd	r3, r2, [r4]
 800c862:	f7ff ff01 	bl	800c668 <memcpy.constprop.0.isra.0>
 800c866:	2110      	movs	r1, #16
 800c868:	4630      	mov	r0, r6
 800c86a:	f000 fa63 	bl	800cd34 <RDMMessage::SetCc(unsigned char)>
 800c86e:	2102      	movs	r1, #2
 800c870:	4630      	mov	r0, r6
 800c872:	f000 fa61 	bl	800cd38 <RDMMessage::SetPid(unsigned short)>
 800c876:	4630      	mov	r0, r6
 800c878:	a902      	add	r1, sp, #8
 800c87a:	f000 fa57 	bl	800cd2c <RDMMessage::SetDstUid(unsigned char const*)>
 800c87e:	2200      	movs	r2, #0
 800c880:	4630      	mov	r0, r6
 800c882:	4611      	mov	r1, r2
 800c884:	f000 fa5c 	bl	800cd40 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800c888:	4630      	mov	r0, r6
 800c88a:	68a9      	ldr	r1, [r5, #8]
 800c88c:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800c890:	f000 fa68 	bl	800cd64 <RDMMessage::Send(unsigned int, unsigned int)>
 800c894:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800c898:	68a8      	ldr	r0, [r5, #8]
 800c89a:	f000 fc63 	bl	800d164 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	d07c      	beq.n	800c99c <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x174>
 800c8a2:	7d03      	ldrb	r3, [r0, #20]
 800c8a4:	2b11      	cmp	r3, #17
 800c8a6:	d003      	beq.n	800c8b0 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x88>
 800c8a8:	2000      	movs	r0, #0
 800c8aa:	b005      	add	sp, #20
 800c8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b0:	f100 0109 	add.w	r1, r0, #9
 800c8b4:	a802      	add	r0, sp, #8
 800c8b6:	f7ff fec7 	bl	800c648 <memcmp.constprop.0>
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	d1f4      	bne.n	800c8a8 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800c8be:	4628      	mov	r0, r5
 800c8c0:	a902      	add	r1, sp, #8
 800c8c2:	f7ff fedb 	bl	800c67c <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>
 800c8c6:	e7ef      	b.n	800c8a8 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800c8c8:	f205 1a11 	addw	sl, r5, #273	; 0x111
 800c8cc:	4621      	mov	r1, r4
 800c8ce:	4650      	mov	r0, sl
 800c8d0:	e9c4 3200 	strd	r3, r2, [r4]
 800c8d4:	f7ff fec8 	bl	800c668 <memcpy.constprop.0.isra.0>
 800c8d8:	ea4f 4308 	mov.w	r3, r8, lsl #16
 800c8dc:	ea43 4317 	orr.w	r3, r3, r7, lsr #16
 800c8e0:	043a      	lsls	r2, r7, #16
 800c8e2:	ba1b      	rev	r3, r3
 800c8e4:	ba12      	rev	r2, r2
 800c8e6:	4621      	mov	r1, r4
 800c8e8:	f205 1017 	addw	r0, r5, #279	; 0x117
 800c8ec:	e9c4 3200 	strd	r3, r2, [r4]
 800c8f0:	f7ff feba 	bl	800c668 <memcpy.constprop.0.isra.0>
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	492b      	ldr	r1, [pc, #172]	; (800c9a4 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x17c>)
 800c8f8:	f000 fa18 	bl	800cd2c <RDMMessage::SetDstUid(unsigned char const*)>
 800c8fc:	2110      	movs	r1, #16
 800c8fe:	4630      	mov	r0, r6
 800c900:	f000 fa18 	bl	800cd34 <RDMMessage::SetCc(unsigned char)>
 800c904:	2101      	movs	r1, #1
 800c906:	4630      	mov	r0, r6
 800c908:	f000 fa16 	bl	800cd38 <RDMMessage::SetPid(unsigned short)>
 800c90c:	220c      	movs	r2, #12
 800c90e:	4651      	mov	r1, sl
 800c910:	4630      	mov	r0, r6
 800c912:	f000 fa15 	bl	800cd40 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800c916:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800c91a:	4630      	mov	r0, r6
 800c91c:	68a9      	ldr	r1, [r5, #8]
 800c91e:	f000 fa21 	bl	800cd64 <RDMMessage::Send(unsigned int, unsigned int)>
 800c922:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800c926:	68a8      	ldr	r0, [r5, #8]
 800c928:	f000 fc1c 	bl	800d164 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800c92c:	4601      	mov	r1, r0
 800c92e:	2800      	cmp	r0, #0
 800c930:	d0ba      	beq.n	800c8a8 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800c932:	4628      	mov	r0, r5
 800c934:	aa02      	add	r2, sp, #8
 800c936:	f7ff fed0 	bl	800c6da <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800c93a:	bb40      	cbnz	r0, 800c98e <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x166>
 800c93c:	ea4f 0a58 	mov.w	sl, r8, lsr #1
 800c940:	ea4f 035b 	mov.w	r3, fp, lsr #1
 800c944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c948:	f40a 4a80 	and.w	sl, sl, #16384	; 0x4000
 800c94c:	eb19 0607 	adds.w	r6, r9, r7
 800c950:	449a      	add	sl, r3
 800c952:	f3c8 020e 	ubfx	r2, r8, #0, #15
 800c956:	f3cb 030e 	ubfx	r3, fp, #0, #15
 800c95a:	eb43 0302 	adc.w	r3, r3, r2
 800c95e:	0876      	lsrs	r6, r6, #1
 800c960:	ea46 76c3 	orr.w	r6, r6, r3, lsl #31
 800c964:	eb0a 0a53 	add.w	sl, sl, r3, lsr #1
 800c968:	464a      	mov	r2, r9
 800c96a:	465b      	mov	r3, fp
 800c96c:	4628      	mov	r0, r5
 800c96e:	e9cd 6a00 	strd	r6, sl, [sp]
 800c972:	f7ff ff59 	bl	800c828 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800c976:	1c72      	adds	r2, r6, #1
 800c978:	4604      	mov	r4, r0
 800c97a:	e9cd 7800 	strd	r7, r8, [sp]
 800c97e:	4628      	mov	r0, r5
 800c980:	f14a 0300 	adc.w	r3, sl, #0
 800c984:	f7ff ff50 	bl	800c828 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800c988:	4320      	orrs	r0, r4
 800c98a:	b2c0      	uxtb	r0, r0
 800c98c:	e78d      	b.n	800c8aa <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x82>
 800c98e:	4628      	mov	r0, r5
 800c990:	a902      	add	r1, sp, #8
 800c992:	f7ff fedd 	bl	800c750 <RDMDiscovery::QuickFind(unsigned char const*)>
 800c996:	2800      	cmp	r0, #0
 800c998:	d1d0      	bne.n	800c93c <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x114>
 800c99a:	e785      	b.n	800c8a8 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800c99c:	2001      	movs	r0, #1
 800c99e:	e784      	b.n	800c8aa <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x82>
 800c9a0:	20000e28 	andcs	r0, r0, r8, lsr #28
 800c9a4:	08016a60 	stmdaeq	r1, {r5, r6, r9, fp, sp, lr}

0800c9a8 <RDMDiscovery::Full()>:
 800c9a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	2500      	movs	r5, #0
 800c9ae:	2606      	movs	r6, #6
 800c9b0:	4f2a      	ldr	r7, [pc, #168]	; (800ca5c <RDMDiscovery::Full()+0xb4>)
 800c9b2:	6823      	ldr	r3, [r4, #0]
 800c9b4:	429d      	cmp	r5, r3
 800c9b6:	d349      	bcc.n	800ca4c <RDMDiscovery::Full()+0xa4>
 800c9b8:	2600      	movs	r6, #0
 800c9ba:	4625      	mov	r5, r4
 800c9bc:	f845 6b0c 	str.w	r6, [r5], #12
 800c9c0:	f007 fdd6 	bl	8014570 <fwdgt_counter_reload>
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	4925      	ldr	r1, [pc, #148]	; (800ca5c <RDMDiscovery::Full()+0xb4>)
 800c9c8:	f000 f9b0 	bl	800cd2c <RDMMessage::SetDstUid(unsigned char const*)>
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	2110      	movs	r1, #16
 800c9d0:	f000 f9b0 	bl	800cd34 <RDMMessage::SetCc(unsigned char)>
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	2103      	movs	r1, #3
 800c9d8:	f000 f9ae 	bl	800cd38 <RDMMessage::SetPid(unsigned short)>
 800c9dc:	4632      	mov	r2, r6
 800c9de:	4631      	mov	r1, r6
 800c9e0:	4628      	mov	r0, r5
 800c9e2:	f000 f9ad 	bl	800cd40 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800c9e6:	4632      	mov	r2, r6
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	68a1      	ldr	r1, [r4, #8]
 800c9ec:	f000 f9ba 	bl	800cd64 <RDMMessage::Send(unsigned int, unsigned int)>
 800c9f0:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800c9f4:	68a0      	ldr	r0, [r4, #8]
 800c9f6:	f000 fbb5 	bl	800d164 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800c9fa:	f007 fdb9 	bl	8014570 <fwdgt_counter_reload>
 800c9fe:	4631      	mov	r1, r6
 800ca00:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 800ca04:	f008 fe38 	bl	8015678 <udelay(unsigned int, unsigned int)>
 800ca08:	f007 fdb2 	bl	8014570 <fwdgt_counter_reload>
 800ca0c:	4632      	mov	r2, r6
 800ca0e:	4628      	mov	r0, r5
 800ca10:	68a1      	ldr	r1, [r4, #8]
 800ca12:	f000 f9a7 	bl	800cd64 <RDMMessage::Send(unsigned int, unsigned int)>
 800ca16:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800ca1a:	68a0      	ldr	r0, [r4, #8]
 800ca1c:	f000 fba2 	bl	800d164 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800ca20:	f007 fda6 	bl	8014570 <fwdgt_counter_reload>
 800ca24:	4631      	mov	r1, r6
 800ca26:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 800ca2a:	f008 fe25 	bl	8015678 <udelay(unsigned int, unsigned int)>
 800ca2e:	f007 fd9f 	bl	8014570 <fwdgt_counter_reload>
 800ca32:	f06f 0201 	mvn.w	r2, #1
 800ca36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	e9cd 2300 	strd	r2, r3, [sp]
 800ca40:	2200      	movs	r2, #0
 800ca42:	2300      	movs	r3, #0
 800ca44:	f7ff fef0 	bl	800c828 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800ca48:	b003      	add	sp, #12
 800ca4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca4c:	6860      	ldr	r0, [r4, #4]
 800ca4e:	4639      	mov	r1, r7
 800ca50:	fb06 0005 	mla	r0, r6, r5, r0
 800ca54:	f7ff fe08 	bl	800c668 <memcpy.constprop.0.isra.0>
 800ca58:	3501      	adds	r5, #1
 800ca5a:	e7aa      	b.n	800c9b2 <RDMDiscovery::Full()+0xa>
 800ca5c:	08016a60 	stmdaeq	r1, {r5, r6, r9, fp, sp, lr}

0800ca60 <RDMDevice::RDMDevice()>:
 800ca60:	4a33      	ldr	r2, [pc, #204]	; (800cb30 <RDMDevice::RDMDevice()+0xd0>)
 800ca62:	2300      	movs	r3, #0
 800ca64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca66:	4604      	mov	r4, r0
 800ca68:	4611      	mov	r1, r2
 800ca6a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800ca6e:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 800ca72:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
 800ca76:	6743      	str	r3, [r0, #116]	; 0x74
 800ca78:	4613      	mov	r3, r2
 800ca7a:	7818      	ldrb	r0, [r3, #0]
 800ca7c:	3201      	adds	r2, #1
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d1fa      	bne.n	800ca78 <RDMDevice::RDMDevice()+0x18>
 800ca82:	1a5b      	subs	r3, r3, r1
 800ca84:	2b20      	cmp	r3, #32
 800ca86:	bf28      	it	cs
 800ca88:	2320      	movcs	r3, #32
 800ca8a:	f104 052b 	add.w	r5, r4, #43	; 0x2b
 800ca8e:	4629      	mov	r1, r5
 800ca90:	461a      	mov	r2, r3
 800ca92:	4827      	ldr	r0, [pc, #156]	; (800cb30 <RDMDevice::RDMDevice()+0xd0>)
 800ca94:	3a01      	subs	r2, #1
 800ca96:	d23b      	bcs.n	800cb10 <RDMDevice::RDMDevice()+0xb0>
 800ca98:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800ca9c:	4b25      	ldr	r3, [pc, #148]	; (800cb34 <RDMDevice::RDMDevice()+0xd4>)
 800ca9e:	4669      	mov	r1, sp
 800caa0:	781a      	ldrb	r2, [r3, #0]
 800caa2:	7022      	strb	r2, [r4, #0]
 800caa4:	785b      	ldrb	r3, [r3, #1]
 800caa6:	7063      	strb	r3, [r4, #1]
 800caa8:	4b23      	ldr	r3, [pc, #140]	; (800cb38 <RDMDevice::RDMDevice()+0xd8>)
 800caaa:	6818      	ldr	r0, [r3, #0]
 800caac:	f004 f9a8 	bl	8010e00 <Network::MacAddressCopyTo(unsigned char*)>
 800cab0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800cab4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cab8:	70a3      	strb	r3, [r4, #2]
 800caba:	7263      	strb	r3, [r4, #9]
 800cabc:	4b1f      	ldr	r3, [pc, #124]	; (800cb3c <RDMDevice::RDMDevice()+0xdc>)
 800cabe:	70e2      	strb	r2, [r4, #3]
 800cac0:	7222      	strb	r2, [r4, #8]
 800cac2:	461a      	mov	r2, r3
 800cac4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cac8:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800cacc:	7121      	strb	r1, [r4, #4]
 800cace:	7160      	strb	r0, [r4, #5]
 800cad0:	71a0      	strb	r0, [r4, #6]
 800cad2:	71e1      	strb	r1, [r4, #7]
 800cad4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800cad8:	2900      	cmp	r1, #0
 800cada:	d1fb      	bne.n	800cad4 <RDMDevice::RDMDevice()+0x74>
 800cadc:	1a9b      	subs	r3, r3, r2
 800cade:	2b20      	cmp	r3, #32
 800cae0:	bf28      	it	cs
 800cae2:	2320      	movcs	r3, #32
 800cae4:	461a      	mov	r2, r3
 800cae6:	4915      	ldr	r1, [pc, #84]	; (800cb3c <RDMDevice::RDMDevice()+0xdc>)
 800cae8:	3a01      	subs	r2, #1
 800caea:	d216      	bcs.n	800cb1a <RDMDevice::RDMDevice()+0xba>
 800caec:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800caf0:	f06f 2380 	mvn.w	r3, #2147516416	; 0x80008000
 800caf4:	64e3      	str	r3, [r4, #76]	; 0x4c
 800caf6:	2314      	movs	r3, #20
 800caf8:	4a11      	ldr	r2, [pc, #68]	; (800cb40 <RDMDevice::RDMDevice()+0xe0>)
 800cafa:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 800cafe:	f104 0165 	add.w	r1, r4, #101	; 0x65
 800cb02:	f104 0351 	add.w	r3, r4, #81	; 0x51
 800cb06:	4299      	cmp	r1, r3
 800cb08:	d10c      	bne.n	800cb24 <RDMDevice::RDMDevice()+0xc4>
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	b002      	add	sp, #8
 800cb0e:	bd70      	pop	{r4, r5, r6, pc}
 800cb10:	f810 6b01 	ldrb.w	r6, [r0], #1
 800cb14:	f801 6b01 	strb.w	r6, [r1], #1
 800cb18:	e7bc      	b.n	800ca94 <RDMDevice::RDMDevice()+0x34>
 800cb1a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800cb1e:	f805 0b01 	strb.w	r0, [r5], #1
 800cb22:	e7e1      	b.n	800cae8 <RDMDevice::RDMDevice()+0x88>
 800cb24:	f812 0b01 	ldrb.w	r0, [r2], #1
 800cb28:	f803 0b01 	strb.w	r0, [r3], #1
 800cb2c:	e7eb      	b.n	800cb06 <RDMDevice::RDMDevice()+0xa6>
 800cb2e:	bf00      	nop
 800cb30:	08016b74 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, fp, sp, lr}
 800cb34:	08016b72 	stmdaeq	r1, {r1, r4, r5, r6, r8, r9, fp, sp, lr}
 800cb38:	20009ff4 	strdcs	r9, [r0], -r4
 800cb3c:	08016645 	stmdaeq	r1, {r0, r2, r6, r9, sl, sp, lr}
 800cb40:	08016b3a 	stmdaeq	r1, {r1, r3, r4, r5, r8, r9, fp, sp, lr}

0800cb44 <RDMDevice::Print()>:
 800cb44:	b513      	push	{r0, r1, r4, lr}
 800cb46:	4604      	mov	r4, r0
 800cb48:	4818      	ldr	r0, [pc, #96]	; (800cbac <RDMDevice::Print()+0x68>)
 800cb4a:	f007 f9fd 	bl	8013f48 <printf>
 800cb4e:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800cb52:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 800cb56:	4816      	ldr	r0, [pc, #88]	; (800cbb0 <RDMDevice::Print()+0x6c>)
 800cb58:	f007 f9f6 	bl	8013f48 <printf>
 800cb5c:	7862      	ldrb	r2, [r4, #1]
 800cb5e:	7821      	ldrb	r1, [r4, #0]
 800cb60:	4814      	ldr	r0, [pc, #80]	; (800cbb4 <RDMDevice::Print()+0x70>)
 800cb62:	f007 f9f1 	bl	8013f48 <printf>
 800cb66:	79a3      	ldrb	r3, [r4, #6]
 800cb68:	7a22      	ldrb	r2, [r4, #8]
 800cb6a:	7a61      	ldrb	r1, [r4, #9]
 800cb6c:	9300      	str	r3, [sp, #0]
 800cb6e:	4812      	ldr	r0, [pc, #72]	; (800cbb8 <RDMDevice::Print()+0x74>)
 800cb70:	79e3      	ldrb	r3, [r4, #7]
 800cb72:	f007 f9e9 	bl	8013f48 <printf>
 800cb76:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 800cb7a:	f104 020a 	add.w	r2, r4, #10
 800cb7e:	480f      	ldr	r0, [pc, #60]	; (800cbbc <RDMDevice::Print()+0x78>)
 800cb80:	f007 f9e2 	bl	8013f48 <printf>
 800cb84:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 800cb88:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 800cb8c:	0a09      	lsrs	r1, r1, #8
 800cb8e:	480c      	ldr	r0, [pc, #48]	; (800cbc0 <RDMDevice::Print()+0x7c>)
 800cb90:	f007 f9da 	bl	8013f48 <printf>
 800cb94:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 800cb98:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 800cb9c:	4809      	ldr	r0, [pc, #36]	; (800cbc4 <RDMDevice::Print()+0x80>)
 800cb9e:	0a09      	lsrs	r1, r1, #8
 800cba0:	b002      	add	sp, #8
 800cba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cba6:	f007 b9cf 	b.w	8013f48 <printf>
 800cbaa:	bf00      	nop
 800cbac:	08016a66 	stmdaeq	r1, {r1, r2, r5, r6, r9, fp, sp, lr}
 800cbb0:	08016a80 	stmdaeq	r1, {r7, r9, fp, sp, lr}
 800cbb4:	08016a9b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r9, fp, sp, lr}
 800cbb8:	08016aba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, fp, sp, lr}
 800cbbc:	08016ae1 	stmdaeq	r1, {r0, r5, r6, r7, r9, fp, sp, lr}
 800cbc0:	08016afc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 800cbc4:	08016b1b 	stmdaeq	r1, {r0, r1, r3, r4, r8, r9, fp, sp, lr}

0800cbc8 <RDMDeviceController::RDMDeviceController()>:
 800cbc8:	b538      	push	{r3, r4, r5, lr}
 800cbca:	4604      	mov	r4, r0
 800cbcc:	f7ff ff48 	bl	800ca60 <RDMDevice::RDMDevice()>
 800cbd0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800cbd4:	b1b3      	cbz	r3, 800cc04 <RDMDeviceController::RDMDeviceController()+0x3c>
 800cbd6:	f104 010a 	add.w	r1, r4, #10
 800cbda:	460b      	mov	r3, r1
 800cbdc:	4a11      	ldr	r2, [pc, #68]	; (800cc24 <RDMDeviceController::RDMDeviceController()+0x5c>)
 800cbde:	f104 0023 	add.w	r0, r4, #35	; 0x23
 800cbe2:	4298      	cmp	r0, r3
 800cbe4:	d109      	bne.n	800cbfa <RDMDeviceController::RDMDeviceController()+0x32>
 800cbe6:	2219      	movs	r2, #25
 800cbe8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800cbea:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
 800cbee:	b110      	cbz	r0, 800cbf6 <RDMDeviceController::RDMDeviceController()+0x2e>
 800cbf0:	6803      	ldr	r3, [r0, #0]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	4798      	blx	r3
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	bd38      	pop	{r3, r4, r5, pc}
 800cbfa:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cbfe:	f803 5b01 	strb.w	r5, [r3], #1
 800cc02:	e7ee      	b.n	800cbe2 <RDMDeviceController::RDMDeviceController()+0x1a>
 800cc04:	4a07      	ldr	r2, [pc, #28]	; (800cc24 <RDMDeviceController::RDMDeviceController()+0x5c>)
 800cc06:	f104 0351 	add.w	r3, r4, #81	; 0x51
 800cc0a:	f104 016a 	add.w	r1, r4, #106	; 0x6a
 800cc0e:	428b      	cmp	r3, r1
 800cc10:	d103      	bne.n	800cc1a <RDMDeviceController::RDMDeviceController()+0x52>
 800cc12:	2319      	movs	r3, #25
 800cc14:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 800cc18:	e7ed      	b.n	800cbf6 <RDMDeviceController::RDMDeviceController()+0x2e>
 800cc1a:	f812 0b01 	ldrb.w	r0, [r2], #1
 800cc1e:	f803 0b01 	strb.w	r0, [r3], #1
 800cc22:	e7f4      	b.n	800cc0e <RDMDeviceController::RDMDeviceController()+0x46>
 800cc24:	08016b4f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, r9, fp, sp, lr}

0800cc28 <memcpy.isra.0>:
 800cc28:	f006 be4e 	b.w	80138c8 <memcpy>

0800cc2c <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 800cc2c:	b510      	push	{r4, lr}
 800cc2e:	6001      	str	r1, [r0, #0]
 800cc30:	2100      	movs	r1, #0
 800cc32:	4604      	mov	r4, r0
 800cc34:	6041      	str	r1, [r0, #4]
 800cc36:	2220      	movs	r2, #32
 800cc38:	3008      	adds	r0, #8
 800cc3a:	f006 fe67 	bl	801390c <memset>
 800cc3e:	4b03      	ldr	r3, [pc, #12]	; (800cc4c <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x20>)
 800cc40:	4620      	mov	r0, r4
 800cc42:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc44:	237f      	movs	r3, #127	; 0x7f
 800cc46:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800cc4a:	bd10      	pop	{r4, pc}
 800cc4c:	ff7fff00 			; <UNDEFINED> instruction: 0xff7fff00

0800cc50 <RDMDeviceParams::Load()>:
 800cc50:	4601      	mov	r1, r0
 800cc52:	6800      	ldr	r0, [r0, #0]
 800cc54:	b130      	cbz	r0, 800cc64 <RDMDeviceParams::Load()+0x14>
 800cc56:	b508      	push	{r3, lr}
 800cc58:	6803      	ldr	r3, [r0, #0]
 800cc5a:	3104      	adds	r1, #4
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	4798      	blx	r3
 800cc60:	2001      	movs	r0, #1
 800cc62:	bd08      	pop	{r3, pc}
 800cc64:	4770      	bx	lr

0800cc66 <RDMDeviceParams::Set(RDMDevice*)>:
 800cc66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc68:	6843      	ldr	r3, [r0, #4]
 800cc6a:	460c      	mov	r4, r1
 800cc6c:	07d9      	lsls	r1, r3, #31
 800cc6e:	4605      	mov	r5, r0
 800cc70:	d518      	bpl.n	800cca4 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 800cc72:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 800cc76:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800cc7a:	2e20      	cmp	r6, #32
 800cc7c:	bf28      	it	cs
 800cc7e:	2620      	movcs	r6, #32
 800cc80:	f100 0108 	add.w	r1, r0, #8
 800cc84:	b1e3      	cbz	r3, 800ccc0 <RDMDeviceParams::Set(RDMDevice*)+0x5a>
 800cc86:	f104 070a 	add.w	r7, r4, #10
 800cc8a:	4638      	mov	r0, r7
 800cc8c:	4632      	mov	r2, r6
 800cc8e:	f7ff ffcb 	bl	800cc28 <memcpy.isra.0>
 800cc92:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800cc94:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
 800cc98:	b120      	cbz	r0, 800cca4 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 800cc9a:	6803      	ldr	r3, [r0, #0]
 800cc9c:	4632      	mov	r2, r6
 800cc9e:	4639      	mov	r1, r7
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	4798      	blx	r3
 800cca4:	686b      	ldr	r3, [r5, #4]
 800cca6:	079a      	lsls	r2, r3, #30
 800cca8:	bf44      	itt	mi
 800ccaa:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 800ccae:	f8a4 204c 	strhmi.w	r2, [r4, #76]	; 0x4c
 800ccb2:	075b      	lsls	r3, r3, #29
 800ccb4:	bf44      	itt	mi
 800ccb6:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 800ccba:	f8a4 304e 	strhmi.w	r3, [r4, #78]	; 0x4e
 800ccbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccc0:	4632      	mov	r2, r6
 800ccc2:	f104 0051 	add.w	r0, r4, #81	; 0x51
 800ccc6:	f7ff ffaf 	bl	800cc28 <memcpy.isra.0>
 800ccca:	f884 6071 	strb.w	r6, [r4, #113]	; 0x71
 800ccce:	e7e9      	b.n	800cca4 <RDMDeviceParams::Set(RDMDevice*)+0x3e>

0800ccd0 <RDMDeviceParams::Dump()>:
 800ccd0:	4770      	bx	lr

0800ccd2 <memcpy.isra.0>:
 800ccd2:	3801      	subs	r0, #1
 800ccd4:	440a      	add	r2, r1
 800ccd6:	4291      	cmp	r1, r2
 800ccd8:	d100      	bne.n	800ccdc <memcpy.isra.0+0xa>
 800ccda:	4770      	bx	lr
 800ccdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cce0:	f800 3f01 	strb.w	r3, [r0, #1]!
 800cce4:	e7f7      	b.n	800ccd6 <memcpy.isra.0+0x4>
	...

0800cce8 <RDMMessage::RDMMessage()>:
 800cce8:	23cc      	movs	r3, #204	; 0xcc
 800ccea:	b570      	push	{r4, r5, r6, lr}
 800ccec:	7003      	strb	r3, [r0, #0]
 800ccee:	2501      	movs	r5, #1
 800ccf0:	2318      	movs	r3, #24
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	4e0a      	ldr	r6, [pc, #40]	; (800cd20 <RDMMessage::RDMMessage()+0x38>)
 800ccf6:	7083      	strb	r3, [r0, #2]
 800ccf8:	7045      	strb	r5, [r0, #1]
 800ccfa:	4631      	mov	r1, r6
 800ccfc:	2206      	movs	r2, #6
 800ccfe:	3009      	adds	r0, #9
 800cd00:	f7ff ffe7 	bl	800ccd2 <memcpy.isra.0>
 800cd04:	1ce0      	adds	r0, r4, #3
 800cd06:	2206      	movs	r2, #6
 800cd08:	4631      	mov	r1, r6
 800cd0a:	f7ff ffe2 	bl	800ccd2 <memcpy.isra.0>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	4620      	mov	r0, r4
 800cd12:	7425      	strb	r5, [r4, #16]
 800cd14:	7463      	strb	r3, [r4, #17]
 800cd16:	74a3      	strb	r3, [r4, #18]
 800cd18:	74e3      	strb	r3, [r4, #19]
 800cd1a:	75e3      	strb	r3, [r4, #23]
 800cd1c:	bd70      	pop	{r4, r5, r6, pc}
 800cd1e:	bf00      	nop
 800cd20:	08016b6c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, fp, sp, lr}

0800cd24 <RDMMessage::SetSrcUid(unsigned char const*)>:
 800cd24:	2206      	movs	r2, #6
 800cd26:	3009      	adds	r0, #9
 800cd28:	f7ff bfd3 	b.w	800ccd2 <memcpy.isra.0>

0800cd2c <RDMMessage::SetDstUid(unsigned char const*)>:
 800cd2c:	2206      	movs	r2, #6
 800cd2e:	3003      	adds	r0, #3
 800cd30:	f7ff bfcf 	b.w	800ccd2 <memcpy.isra.0>

0800cd34 <RDMMessage::SetCc(unsigned char)>:
 800cd34:	7501      	strb	r1, [r0, #20]
 800cd36:	4770      	bx	lr

0800cd38 <RDMMessage::SetPid(unsigned short)>:
 800cd38:	0a0b      	lsrs	r3, r1, #8
 800cd3a:	7543      	strb	r3, [r0, #21]
 800cd3c:	7581      	strb	r1, [r0, #22]
 800cd3e:	4770      	bx	lr

0800cd40 <RDMMessage::SetPd(unsigned char const*, unsigned char)>:
 800cd40:	b538      	push	{r3, r4, r5, lr}
 800cd42:	4604      	mov	r4, r0
 800cd44:	7883      	ldrb	r3, [r0, #2]
 800cd46:	7dc0      	ldrb	r0, [r0, #23]
 800cd48:	4615      	mov	r5, r2
 800cd4a:	1a1b      	subs	r3, r3, r0
 800cd4c:	70a3      	strb	r3, [r4, #2]
 800cd4e:	75e2      	strb	r2, [r4, #23]
 800cd50:	b121      	cbz	r1, 800cd5c <RDMMessage::SetPd(unsigned char const*, unsigned char)+0x1c>
 800cd52:	b11a      	cbz	r2, 800cd5c <RDMMessage::SetPd(unsigned char const*, unsigned char)+0x1c>
 800cd54:	f104 0018 	add.w	r0, r4, #24
 800cd58:	f7ff ffbb 	bl	800ccd2 <memcpy.isra.0>
 800cd5c:	78a3      	ldrb	r3, [r4, #2]
 800cd5e:	441d      	add	r5, r3
 800cd60:	70a5      	strb	r5, [r4, #2]
 800cd62:	bd38      	pop	{r3, r4, r5, pc}

0800cd64 <RDMMessage::Send(unsigned int, unsigned int)>:
 800cd64:	460b      	mov	r3, r1
 800cd66:	4601      	mov	r1, r0
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f001 b801 	b.w	800dd70 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)>

0800cd6e <LightSet::Blackout(bool)>:
 800cd6e:	4770      	bx	lr

0800cd70 <DmxSend::~DmxSend()>:
 800cd70:	4770      	bx	lr
	...

0800cd74 <DmxSend::Start(unsigned int)>:
 800cd74:	2301      	movs	r3, #1
 800cd76:	b430      	push	{r4, r5}
 800cd78:	4c08      	ldr	r4, [pc, #32]	; (800cd9c <DmxSend::Start(unsigned int)+0x28>)
 800cd7a:	fa03 f001 	lsl.w	r0, r3, r1
 800cd7e:	7822      	ldrb	r2, [r4, #0]
 800cd80:	ea30 0502 	bics.w	r5, r0, r2
 800cd84:	d007      	beq.n	800cd96 <DmxSend::Start(unsigned int)+0x22>
 800cd86:	4302      	orrs	r2, r0
 800cd88:	4805      	ldr	r0, [pc, #20]	; (800cda0 <DmxSend::Start(unsigned int)+0x2c>)
 800cd8a:	7022      	strb	r2, [r4, #0]
 800cd8c:	6800      	ldr	r0, [r0, #0]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	bc30      	pop	{r4, r5}
 800cd92:	f000 bd73 	b.w	800d87c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800cd96:	bc30      	pop	{r4, r5}
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop
 800cd9c:	20000e30 	andcs	r0, r0, r0, lsr lr
 800cda0:	20001698 	mulcs	r0, r8, r6

0800cda4 <DmxSend::Stop(unsigned int)>:
 800cda4:	2201      	movs	r2, #1
 800cda6:	b410      	push	{r4}
 800cda8:	4809      	ldr	r0, [pc, #36]	; (800cdd0 <DmxSend::Stop(unsigned int)+0x2c>)
 800cdaa:	408a      	lsls	r2, r1
 800cdac:	7803      	ldrb	r3, [r0, #0]
 800cdae:	ea03 0402 	and.w	r4, r3, r2
 800cdb2:	439a      	bics	r2, r3
 800cdb4:	d109      	bne.n	800cdca <DmxSend::Stop(unsigned int)+0x26>
 800cdb6:	ea23 0304 	bic.w	r3, r3, r4
 800cdba:	7003      	strb	r3, [r0, #0]
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	4805      	ldr	r0, [pc, #20]	; (800cdd4 <DmxSend::Stop(unsigned int)+0x30>)
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	6800      	ldr	r0, [r0, #0]
 800cdc4:	bc10      	pop	{r4}
 800cdc6:	f000 bd59 	b.w	800d87c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800cdca:	bc10      	pop	{r4}
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	20000e30 	andcs	r0, r0, r0, lsr lr
 800cdd4:	20001698 	mulcs	r0, r8, r6

0800cdd8 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800cdd8:	b11b      	cbz	r3, 800cde2 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xa>
 800cdda:	4802      	ldr	r0, [pc, #8]	; (800cde4 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xc>)
 800cddc:	6800      	ldr	r0, [r0, #0]
 800cdde:	f000 befb 	b.w	800dbd8 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>
 800cde2:	4770      	bx	lr
 800cde4:	20001698 	mulcs	r0, r8, r6

0800cde8 <DmxSend::Print()>:
 800cde8:	b510      	push	{r4, lr}
 800cdea:	4c0e      	ldr	r4, [pc, #56]	; (800ce24 <DmxSend::Print()+0x3c>)
 800cdec:	480e      	ldr	r0, [pc, #56]	; (800ce28 <DmxSend::Print()+0x40>)
 800cdee:	f007 f8ab 	bl	8013f48 <printf>
 800cdf2:	6823      	ldr	r3, [r4, #0]
 800cdf4:	480d      	ldr	r0, [pc, #52]	; (800ce2c <DmxSend::Print()+0x44>)
 800cdf6:	6819      	ldr	r1, [r3, #0]
 800cdf8:	f007 f8a6 	bl	8013f48 <printf>
 800cdfc:	6823      	ldr	r3, [r4, #0]
 800cdfe:	480c      	ldr	r0, [pc, #48]	; (800ce30 <DmxSend::Print()+0x48>)
 800ce00:	6859      	ldr	r1, [r3, #4]
 800ce02:	f007 f8a1 	bl	8013f48 <printf>
 800ce06:	6823      	ldr	r3, [r4, #0]
 800ce08:	490a      	ldr	r1, [pc, #40]	; (800ce34 <DmxSend::Print()+0x4c>)
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	480a      	ldr	r0, [pc, #40]	; (800ce38 <DmxSend::Print()+0x50>)
 800ce0e:	fbb1 f1f3 	udiv	r1, r1, r3
 800ce12:	f007 f899 	bl	8013f48 <printf>
 800ce16:	6823      	ldr	r3, [r4, #0]
 800ce18:	4808      	ldr	r0, [pc, #32]	; (800ce3c <DmxSend::Print()+0x54>)
 800ce1a:	8a19      	ldrh	r1, [r3, #16]
 800ce1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce20:	f007 b892 	b.w	8013f48 <printf>
 800ce24:	20001698 	mulcs	r0, r8, r6
 800ce28:	08016b90 	stmdaeq	r1, {r4, r7, r8, r9, fp, sp, lr}
 800ce2c:	08016b9a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, fp, sp, lr}
 800ce30:	08016bae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, r9, fp, sp, lr}
 800ce34:	000f4240 	andeq	r4, pc, r0, asr #4
 800ce38:	08016bc2 	stmdaeq	r1, {r1, r6, r7, r8, r9, fp, sp, lr}
 800ce3c:	08016bd6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, r9, fp, sp, lr}

0800ce40 <DmxSend::~DmxSend()>:
 800ce40:	b510      	push	{r4, lr}
 800ce42:	4604      	mov	r4, r0
 800ce44:	f006 fc88 	bl	8013758 <operator delete(void*)>
 800ce48:	4620      	mov	r0, r4
 800ce4a:	bd10      	pop	{r4, pc}

0800ce4c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 800ce4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce4e:	88c6      	ldrh	r6, [r0, #6]
 800ce50:	8885      	ldrh	r5, [r0, #4]
 800ce52:	42ae      	cmp	r6, r5
 800ce54:	d216      	bcs.n	800ce84 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 800ce56:	4604      	mov	r4, r0
 800ce58:	6800      	ldr	r0, [r0, #0]
 800ce5a:	1bad      	subs	r5, r5, r6
 800ce5c:	4430      	add	r0, r6
 800ce5e:	7a26      	ldrb	r6, [r4, #8]
 800ce60:	b923      	cbnz	r3, 800ce6c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 800ce62:	b926      	cbnz	r6, 800ce6e <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 800ce64:	9200      	str	r2, [sp, #0]
 800ce66:	460b      	mov	r3, r1
 800ce68:	4a09      	ldr	r2, [pc, #36]	; (800ce90 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 800ce6a:	e003      	b.n	800ce74 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800ce6c:	b166      	cbz	r6, 800ce88 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 800ce6e:	460b      	mov	r3, r1
 800ce70:	9200      	str	r2, [sp, #0]
 800ce72:	4a08      	ldr	r2, [pc, #32]	; (800ce94 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 800ce74:	4629      	mov	r1, r5
 800ce76:	f007 f88f 	bl	8013f98 <snprintf>
 800ce7a:	4285      	cmp	r5, r0
 800ce7c:	bfa2      	ittt	ge
 800ce7e:	88e3      	ldrhge	r3, [r4, #6]
 800ce80:	181b      	addge	r3, r3, r0
 800ce82:	80e3      	strhge	r3, [r4, #6]
 800ce84:	b002      	add	sp, #8
 800ce86:	bd70      	pop	{r4, r5, r6, pc}
 800ce88:	9200      	str	r2, [sp, #0]
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	4a02      	ldr	r2, [pc, #8]	; (800ce98 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 800ce8e:	e7f1      	b.n	800ce74 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800ce90:	08016787 	stmdaeq	r1, {r0, r1, r2, r7, r8, r9, sl, sp, lr}
 800ce94:	0801677e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r8, r9, sl, sp, lr}
 800ce98:	08016788 	stmdaeq	r1, {r3, r7, r8, r9, sl, sp, lr}

0800ce9c <DmxParams::DmxParams(DmxParamsStore*)>:
 800ce9c:	6001      	str	r1, [r0, #0]
 800ce9e:	2100      	movs	r1, #0
 800cea0:	4a03      	ldr	r2, [pc, #12]	; (800ceb0 <DmxParams::DmxParams(DmxParamsStore*)+0x14>)
 800cea2:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800cea6:	f64f 7228 	movw	r2, #65320	; 0xff28
 800ceaa:	8182      	strh	r2, [r0, #12]
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	000c00b0 	strheq	r0, [ip], -r0	; <UNPREDICTABLE>

0800ceb4 <DmxParams::Load()>:
 800ceb4:	b508      	push	{r3, lr}
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	4601      	mov	r1, r0
 800ceba:	6043      	str	r3, [r0, #4]
 800cebc:	6800      	ldr	r0, [r0, #0]
 800cebe:	b120      	cbz	r0, 800ceca <DmxParams::Load()+0x16>
 800cec0:	6803      	ldr	r3, [r0, #0]
 800cec2:	3104      	adds	r1, #4
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	4798      	blx	r3
 800cec8:	2001      	movs	r0, #1
 800ceca:	bd08      	pop	{r3, pc}

0800cecc <DmxParams::Load(char const*, unsigned int)>:
 800cecc:	6803      	ldr	r3, [r0, #0]
 800cece:	b1d3      	cbz	r3, 800cf06 <DmxParams::Load(char const*, unsigned int)+0x3a>
 800ced0:	2300      	movs	r3, #0
 800ced2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ced4:	460d      	mov	r5, r1
 800ced6:	4616      	mov	r6, r2
 800ced8:	4604      	mov	r4, r0
 800ceda:	6043      	str	r3, [r0, #4]
 800cedc:	4602      	mov	r2, r0
 800cede:	490a      	ldr	r1, [pc, #40]	; (800cf08 <DmxParams::Load(char const*, unsigned int)+0x3c>)
 800cee0:	4668      	mov	r0, sp
 800cee2:	f005 fe7f 	bl	8012be4 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800cee6:	4632      	mov	r2, r6
 800cee8:	4629      	mov	r1, r5
 800ceea:	4668      	mov	r0, sp
 800ceec:	f005 fe7e 	bl	8012bec <ReadConfigFile::Read(char const*, unsigned int)>
 800cef0:	4621      	mov	r1, r4
 800cef2:	f851 0b04 	ldr.w	r0, [r1], #4
 800cef6:	6803      	ldr	r3, [r0, #0]
 800cef8:	689b      	ldr	r3, [r3, #8]
 800cefa:	4798      	blx	r3
 800cefc:	4668      	mov	r0, sp
 800cefe:	f005 fe74 	bl	8012bea <ReadConfigFile::~ReadConfigFile()>
 800cf02:	b002      	add	sp, #8
 800cf04:	bd70      	pop	{r4, r5, r6, pc}
 800cf06:	4770      	bx	lr
 800cf08:	0800cfd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl, fp, lr, pc}

0800cf0c <DmxParams::callbackFunction(char const*)>:
 800cf0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf0e:	460d      	mov	r5, r1
 800cf10:	4604      	mov	r4, r0
 800cf12:	492d      	ldr	r1, [pc, #180]	; (800cfc8 <DmxParams::callbackFunction(char const*)+0xbc>)
 800cf14:	4628      	mov	r0, r5
 800cf16:	f10d 0206 	add.w	r2, sp, #6
 800cf1a:	f005 ff82 	bl	8012e22 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800cf1e:	b988      	cbnz	r0, 800cf44 <DmxParams::callbackFunction(char const*)+0x38>
 800cf20:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cf24:	6863      	ldr	r3, [r4, #4]
 800cf26:	2a5b      	cmp	r2, #91	; 0x5b
 800cf28:	d907      	bls.n	800cf3a <DmxParams::callbackFunction(char const*)+0x2e>
 800cf2a:	2ab0      	cmp	r2, #176	; 0xb0
 800cf2c:	d005      	beq.n	800cf3a <DmxParams::callbackFunction(char const*)+0x2e>
 800cf2e:	8122      	strh	r2, [r4, #8]
 800cf30:	f043 0301 	orr.w	r3, r3, #1
 800cf34:	6063      	str	r3, [r4, #4]
 800cf36:	b003      	add	sp, #12
 800cf38:	bd30      	pop	{r4, r5, pc}
 800cf3a:	22b0      	movs	r2, #176	; 0xb0
 800cf3c:	f023 0301 	bic.w	r3, r3, #1
 800cf40:	8122      	strh	r2, [r4, #8]
 800cf42:	e7f7      	b.n	800cf34 <DmxParams::callbackFunction(char const*)+0x28>
 800cf44:	4628      	mov	r0, r5
 800cf46:	4921      	ldr	r1, [pc, #132]	; (800cfcc <DmxParams::callbackFunction(char const*)+0xc0>)
 800cf48:	f10d 0206 	add.w	r2, sp, #6
 800cf4c:	f005 ff69 	bl	8012e22 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800cf50:	b968      	cbnz	r0, 800cf6e <DmxParams::callbackFunction(char const*)+0x62>
 800cf52:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cf56:	6863      	ldr	r3, [r4, #4]
 800cf58:	2a0c      	cmp	r2, #12
 800cf5a:	bf93      	iteet	ls
 800cf5c:	220c      	movls	r2, #12
 800cf5e:	8162      	strhhi	r2, [r4, #10]
 800cf60:	f043 0302 	orrhi.w	r3, r3, #2
 800cf64:	8162      	strhls	r2, [r4, #10]
 800cf66:	bf98      	it	ls
 800cf68:	f023 0302 	bicls.w	r3, r3, #2
 800cf6c:	e7e2      	b.n	800cf34 <DmxParams::callbackFunction(char const*)+0x28>
 800cf6e:	4628      	mov	r0, r5
 800cf70:	4917      	ldr	r1, [pc, #92]	; (800cfd0 <DmxParams::callbackFunction(char const*)+0xc4>)
 800cf72:	f10d 0205 	add.w	r2, sp, #5
 800cf76:	f005 ff72 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800cf7a:	b950      	cbnz	r0, 800cf92 <DmxParams::callbackFunction(char const*)+0x86>
 800cf7c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cf80:	6863      	ldr	r3, [r4, #4]
 800cf82:	2a28      	cmp	r2, #40	; 0x28
 800cf84:	7322      	strb	r2, [r4, #12]
 800cf86:	bf14      	ite	ne
 800cf88:	f043 0304 	orrne.w	r3, r3, #4
 800cf8c:	f023 0304 	biceq.w	r3, r3, #4
 800cf90:	e7d0      	b.n	800cf34 <DmxParams::callbackFunction(char const*)+0x28>
 800cf92:	4628      	mov	r0, r5
 800cf94:	490f      	ldr	r1, [pc, #60]	; (800cfd4 <DmxParams::callbackFunction(char const*)+0xc8>)
 800cf96:	f10d 0206 	add.w	r2, sp, #6
 800cf9a:	f005 ff42 	bl	8012e22 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d1c9      	bne.n	800cf36 <DmxParams::callbackFunction(char const*)+0x2a>
 800cfa2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cfa6:	6863      	ldr	r3, [r4, #4]
 800cfa8:	1e91      	subs	r1, r2, #2
 800cfaa:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 800cfae:	bf2f      	iteee	cs
 800cfb0:	22ff      	movcs	r2, #255	; 0xff
 800cfb2:	0852      	lsrcc	r2, r2, #1
 800cfb4:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 800cfb8:	7362      	strbcc	r2, [r4, #13]
 800cfba:	bf32      	itee	cc
 800cfbc:	f043 0308 	orrcc.w	r3, r3, #8
 800cfc0:	7362      	strbcs	r2, [r4, #13]
 800cfc2:	f023 0308 	biccs.w	r3, r3, #8
 800cfc6:	e7b5      	b.n	800cf34 <DmxParams::callbackFunction(char const*)+0x28>
 800cfc8:	08016c20 	stmdaeq	r1, {r5, sl, fp, sp, lr}
 800cfcc:	08016c44 	stmdaeq	r1, {r2, r6, sl, fp, sp, lr}
 800cfd0:	08016c37 	stmdaeq	r1, {r0, r1, r2, r4, r5, sl, fp, sp, lr}
 800cfd4:	08016c2b 	stmdaeq	r1, {r0, r1, r3, r5, sl, fp, sp, lr}

0800cfd8 <DmxParams::staticCallbackFunction(void*, char const*)>:
 800cfd8:	f7ff bf98 	b.w	800cf0c <DmxParams::callbackFunction(char const*)>

0800cfdc <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>:
 800cfdc:	b570      	push	{r4, r5, r6, lr}
 800cfde:	4604      	mov	r4, r0
 800cfe0:	4615      	mov	r5, r2
 800cfe2:	461e      	mov	r6, r3
 800cfe4:	b086      	sub	sp, #24
 800cfe6:	3004      	adds	r0, #4
 800cfe8:	b369      	cbz	r1, 800d046 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x6a>
 800cfea:	220a      	movs	r2, #10
 800cfec:	f006 fc77 	bl	80138de <memmove>
 800cff0:	462a      	mov	r2, r5
 800cff2:	4633      	mov	r3, r6
 800cff4:	4932      	ldr	r1, [pc, #200]	; (800d0c0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe4>)
 800cff6:	a803      	add	r0, sp, #12
 800cff8:	f005 fd24 	bl	8012a44 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800cffc:	6863      	ldr	r3, [r4, #4]
 800cffe:	8922      	ldrh	r2, [r4, #8]
 800d000:	4930      	ldr	r1, [pc, #192]	; (800d0c4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe8>)
 800d002:	f003 0301 	and.w	r3, r3, #1
 800d006:	a803      	add	r0, sp, #12
 800d008:	f7ff ff20 	bl	800ce4c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800d00c:	6863      	ldr	r3, [r4, #4]
 800d00e:	8962      	ldrh	r2, [r4, #10]
 800d010:	492d      	ldr	r1, [pc, #180]	; (800d0c8 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xec>)
 800d012:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d016:	a803      	add	r0, sp, #12
 800d018:	f7ff ff18 	bl	800ce4c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800d01c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d020:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800d024:	7b23      	ldrb	r3, [r4, #12]
 800d026:	42aa      	cmp	r2, r5
 800d028:	6861      	ldr	r1, [r4, #4]
 800d02a:	d221      	bcs.n	800d070 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x94>
 800d02c:	9803      	ldr	r0, [sp, #12]
 800d02e:	0749      	lsls	r1, r1, #29
 800d030:	4410      	add	r0, r2
 800d032:	eba5 0502 	sub.w	r5, r5, r2
 800d036:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800d03a:	d40b      	bmi.n	800d054 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x78>
 800d03c:	b95a      	cbnz	r2, 800d056 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x7a>
 800d03e:	9300      	str	r3, [sp, #0]
 800d040:	4a22      	ldr	r2, [pc, #136]	; (800d0cc <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf0>)
 800d042:	4b23      	ldr	r3, [pc, #140]	; (800d0d0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 800d044:	e00a      	b.n	800d05c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x80>
 800d046:	6823      	ldr	r3, [r4, #0]
 800d048:	4601      	mov	r1, r0
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	4618      	mov	r0, r3
 800d04e:	68d2      	ldr	r2, [r2, #12]
 800d050:	4790      	blx	r2
 800d052:	e7cd      	b.n	800cff0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x14>
 800d054:	b37a      	cbz	r2, 800d0b6 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xda>
 800d056:	9300      	str	r3, [sp, #0]
 800d058:	4a1e      	ldr	r2, [pc, #120]	; (800d0d4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800d05a:	4b1d      	ldr	r3, [pc, #116]	; (800d0d0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 800d05c:	4629      	mov	r1, r5
 800d05e:	f006 ff9b 	bl	8013f98 <snprintf>
 800d062:	4285      	cmp	r5, r0
 800d064:	bfa2      	ittt	ge
 800d066:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800d06a:	18c0      	addge	r0, r0, r3
 800d06c:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800d070:	7b62      	ldrb	r2, [r4, #13]
 800d072:	6863      	ldr	r3, [r4, #4]
 800d074:	3201      	adds	r2, #1
 800d076:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d07a:	4917      	ldr	r1, [pc, #92]	; (800d0d8 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800d07c:	0052      	lsls	r2, r2, #1
 800d07e:	a803      	add	r0, sp, #12
 800d080:	f7ff fee4 	bl	800ce4c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800d084:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800d088:	b17b      	cbz	r3, 800d0aa <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xce>
 800d08a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d08e:	9b03      	ldr	r3, [sp, #12]
 800d090:	4413      	add	r3, r2
 800d092:	227d      	movs	r2, #125	; 0x7d
 800d094:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d098:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d09c:	9903      	ldr	r1, [sp, #12]
 800d09e:	54ca      	strb	r2, [r1, r3]
 800d0a0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	f8ad 3012 	strh.w	r3, [sp, #18]
 800d0aa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d0ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0b0:	601a      	str	r2, [r3, #0]
 800d0b2:	b006      	add	sp, #24
 800d0b4:	bd70      	pop	{r4, r5, r6, pc}
 800d0b6:	9300      	str	r3, [sp, #0]
 800d0b8:	4a08      	ldr	r2, [pc, #32]	; (800d0dc <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800d0ba:	4b05      	ldr	r3, [pc, #20]	; (800d0d0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 800d0bc:	e7ce      	b.n	800d05c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x80>
 800d0be:	bf00      	nop
 800d0c0:	08016c4d 	stmdaeq	r1, {r0, r2, r3, r6, sl, fp, sp, lr}
 800d0c4:	08016c20 	stmdaeq	r1, {r5, sl, fp, sp, lr}
 800d0c8:	08016c44 	stmdaeq	r1, {r2, r6, sl, fp, sp, lr}
 800d0cc:	08016787 	stmdaeq	r1, {r0, r1, r2, r7, r8, r9, sl, sp, lr}
 800d0d0:	08016c37 	stmdaeq	r1, {r0, r1, r2, r4, r5, sl, fp, sp, lr}
 800d0d4:	0801677e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r8, r9, sl, sp, lr}
 800d0d8:	08016c2b 	stmdaeq	r1, {r0, r1, r3, r5, sl, fp, sp, lr}
 800d0dc:	08016788 	stmdaeq	r1, {r3, r7, r8, r9, sl, sp, lr}

0800d0e0 <DmxParams::Save(char*, unsigned int, unsigned int&)>:
 800d0e0:	b513      	push	{r0, r1, r4, lr}
 800d0e2:	6804      	ldr	r4, [r0, #0]
 800d0e4:	b914      	cbnz	r4, 800d0ec <DmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800d0e6:	601c      	str	r4, [r3, #0]
 800d0e8:	b002      	add	sp, #8
 800d0ea:	bd10      	pop	{r4, pc}
 800d0ec:	9300      	str	r3, [sp, #0]
 800d0ee:	4613      	mov	r3, r2
 800d0f0:	460a      	mov	r2, r1
 800d0f2:	2100      	movs	r1, #0
 800d0f4:	f7ff ff72 	bl	800cfdc <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>
 800d0f8:	e7f6      	b.n	800d0e8 <DmxParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

0800d0fc <DmxParams::Set(Dmx*)>:
 800d0fc:	b538      	push	{r3, r4, r5, lr}
 800d0fe:	6843      	ldr	r3, [r0, #4]
 800d100:	4604      	mov	r4, r0
 800d102:	07d8      	lsls	r0, r3, #31
 800d104:	460d      	mov	r5, r1
 800d106:	d503      	bpl.n	800d110 <DmxParams::Set(Dmx*)+0x14>
 800d108:	4628      	mov	r0, r5
 800d10a:	8921      	ldrh	r1, [r4, #8]
 800d10c:	f000 fd3a 	bl	800db84 <Dmx::SetDmxBreakTime(unsigned int)>
 800d110:	6863      	ldr	r3, [r4, #4]
 800d112:	0799      	lsls	r1, r3, #30
 800d114:	d503      	bpl.n	800d11e <DmxParams::Set(Dmx*)+0x22>
 800d116:	4628      	mov	r0, r5
 800d118:	8961      	ldrh	r1, [r4, #10]
 800d11a:	f000 fd3d 	bl	800db98 <Dmx::SetDmxMabTime(unsigned int)>
 800d11e:	6863      	ldr	r3, [r4, #4]
 800d120:	075a      	lsls	r2, r3, #29
 800d122:	d507      	bpl.n	800d134 <DmxParams::Set(Dmx*)+0x38>
 800d124:	7b21      	ldrb	r1, [r4, #12]
 800d126:	b111      	cbz	r1, 800d12e <DmxParams::Set(Dmx*)+0x32>
 800d128:	4b08      	ldr	r3, [pc, #32]	; (800d14c <DmxParams::Set(Dmx*)+0x50>)
 800d12a:	fbb3 f1f1 	udiv	r1, r3, r1
 800d12e:	4628      	mov	r0, r5
 800d130:	f000 fcf4 	bl	800db1c <Dmx::SetDmxPeriodTime(unsigned int)>
 800d134:	6863      	ldr	r3, [r4, #4]
 800d136:	071b      	lsls	r3, r3, #28
 800d138:	d507      	bpl.n	800d14a <DmxParams::Set(Dmx*)+0x4e>
 800d13a:	7b61      	ldrb	r1, [r4, #13]
 800d13c:	4628      	mov	r0, r5
 800d13e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d142:	3101      	adds	r1, #1
 800d144:	0049      	lsls	r1, r1, #1
 800d146:	f000 bd31 	b.w	800dbac <Dmx::SetDmxSlots(unsigned short)>
 800d14a:	bd38      	pop	{r3, r4, r5, pc}
 800d14c:	000f4240 	andeq	r4, pc, r0, asr #4

0800d150 <DmxParams::Dump()>:
 800d150:	4770      	bx	lr
	...

0800d154 <Rdm::Receive(unsigned int)>:
 800d154:	4b02      	ldr	r3, [pc, #8]	; (800d160 <Rdm::Receive(unsigned int)+0xc>)
 800d156:	4601      	mov	r1, r0
 800d158:	6818      	ldr	r0, [r3, #0]
 800d15a:	f000 bdd5 	b.w	800dd08 <Dmx::RdmReceive(unsigned int)>
 800d15e:	bf00      	nop
 800d160:	20001698 	mulcs	r0, r8, r6

0800d164 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>:
 800d164:	4b02      	ldr	r3, [pc, #8]	; (800d170 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)+0xc>)
 800d166:	460a      	mov	r2, r1
 800d168:	4601      	mov	r1, r0
 800d16a:	6818      	ldr	r0, [r3, #0]
 800d16c:	f000 bdde 	b.w	800dd2c <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)>
 800d170:	20001698 	mulcs	r0, r8, r6

0800d174 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>:
 800d174:	2300      	movs	r3, #0
 800d176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d17a:	4604      	mov	r4, r0
 800d17c:	460e      	mov	r6, r1
 800d17e:	4617      	mov	r7, r2
 800d180:	4d0b      	ldr	r5, [pc, #44]	; (800d1b0 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)+0x3c>)
 800d182:	461a      	mov	r2, r3
 800d184:	4601      	mov	r1, r0
 800d186:	6828      	ldr	r0, [r5, #0]
 800d188:	f000 fb78 	bl	800d87c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800d18c:	463b      	mov	r3, r7
 800d18e:	4632      	mov	r2, r6
 800d190:	4621      	mov	r1, r4
 800d192:	6828      	ldr	r0, [r5, #0]
 800d194:	f000 fd64 	bl	800dc60 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>
 800d198:	2100      	movs	r1, #0
 800d19a:	2004      	movs	r0, #4
 800d19c:	f008 fa6c 	bl	8015678 <udelay(unsigned int, unsigned int)>
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	4621      	mov	r1, r4
 800d1a4:	6828      	ldr	r0, [r5, #0]
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ac:	f000 bb66 	b.w	800d87c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800d1b0:	20001698 	mulcs	r0, r8, r6

0800d1b4 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)>:
 800d1b4:	b570      	push	{r4, r5, r6, lr}
 800d1b6:	f3bf 8f5f 	dmb	sy
 800d1ba:	2508      	movs	r5, #8
 800d1bc:	4ba9      	ldr	r3, [pc, #676]	; (800d464 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2b0>)
 800d1be:	f8c3 5c10 	str.w	r5, [r3, #3088]	; 0xc10
 800d1c2:	6802      	ldr	r2, [r0, #0]
 800d1c4:	f012 0f02 	tst.w	r2, #2
 800d1c8:	4aa7      	ldr	r2, [pc, #668]	; (800d468 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2b4>)
 800d1ca:	d017      	beq.n	800d1fc <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x48>
 800d1cc:	6804      	ldr	r4, [r0, #0]
 800d1ce:	f024 0402 	bic.w	r4, r4, #2
 800d1d2:	6004      	str	r4, [r0, #0]
 800d1d4:	6840      	ldr	r0, [r0, #4]
 800d1d6:	f44f 7004 	mov.w	r0, #528	; 0x210
 800d1da:	fb00 2201 	mla	r2, r0, r1, r2
 800d1de:	2100      	movs	r1, #0
 800d1e0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 800d1e4:	2102      	movs	r1, #2
 800d1e6:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
 800d1ea:	2210      	movs	r2, #16
 800d1ec:	f8c3 5c14 	str.w	r5, [r3, #3092]	; 0xc14
 800d1f0:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800d1f4:	2220      	movs	r2, #32
 800d1f6:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800d1fa:	bd70      	pop	{r4, r5, r6, pc}
 800d1fc:	f44f 7304 	mov.w	r3, #528	; 0x210
 800d200:	fb03 2401 	mla	r4, r3, r1, r2
 800d204:	6840      	ldr	r0, [r0, #4]
 800d206:	f8d4 420c 	ldr.w	r4, [r4, #524]	; 0x20c
 800d20a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800d20e:	2c0a      	cmp	r4, #10
 800d210:	f200 811f 	bhi.w	800d452 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x29e>
 800d214:	e8df f014 	tbh	[pc, r4, lsl #1]
 800d218:	011d000b 	tsteq	sp, fp
 800d21c:	011d001b 	tsteq	sp, fp, lsl r0
 800d220:	00750049 	rsbseq	r0, r5, r9, asr #32
 800d224:	00a40094 	umlaleq	r0, r4, r4, r0
 800d228:	00e900d1 	ldrdeq	r0, [r9], #1	; <UNPREDICTABLE>
 800d22c:	434b00ff 	movtmi	r0, #45311	; 0xb0ff
 800d230:	2408      	movs	r4, #8
 800d232:	18d1      	adds	r1, r2, r3
 800d234:	54d0      	strb	r0, [r2, r3]
 800d236:	2301      	movs	r3, #1
 800d238:	f8c1 420c 	str.w	r4, [r1, #524]	; 0x20c
 800d23c:	f8a1 3204 	strh.w	r3, [r1, #516]	; 0x204
 800d240:	2208      	movs	r2, #8
 800d242:	4b88      	ldr	r3, [pc, #544]	; (800d464 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2b0>)
 800d244:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800d248:	f3bf 8f5f 	dmb	sy
 800d24c:	e7d5      	b.n	800d1fa <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x46>
 800d24e:	b148      	cbz	r0, 800d264 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xb0>
 800d250:	28cc      	cmp	r0, #204	; 0xcc
 800d252:	f44f 7304 	mov.w	r3, #528	; 0x210
 800d256:	d01e      	beq.n	800d296 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xe2>
 800d258:	fb03 2301 	mla	r3, r3, r1, r2
 800d25c:	2200      	movs	r2, #0
 800d25e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800d262:	e7ed      	b.n	800d240 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800d264:	434b      	muls	r3, r1
 800d266:	18d4      	adds	r4, r2, r3
 800d268:	54d0      	strb	r0, [r2, r3]
 800d26a:	2301      	movs	r3, #1
 800d26c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
 800d270:	4b7e      	ldr	r3, [pc, #504]	; (800d46c <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2b8>)
 800d272:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d276:	685a      	ldr	r2, [r3, #4]
 800d278:	3201      	adds	r2, #1
 800d27a:	605a      	str	r2, [r3, #4]
 800d27c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d280:	f8d2 2424 	ldr.w	r2, [r2, #1060]	; 0x424
 800d284:	60da      	str	r2, [r3, #12]
 800d286:	2304      	movs	r3, #4
 800d288:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 800d28c:	2210      	movs	r2, #16
 800d28e:	4b75      	ldr	r3, [pc, #468]	; (800d464 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2b0>)
 800d290:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 800d294:	e7d4      	b.n	800d240 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800d296:	434b      	muls	r3, r1
 800d298:	18d1      	adds	r1, r2, r3
 800d29a:	54d0      	strb	r0, [r2, r3]
 800d29c:	4b74      	ldr	r3, [pc, #464]	; (800d470 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2bc>)
 800d29e:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 800d2a2:	2305      	movs	r3, #5
 800d2a4:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
 800d2a8:	e7f0      	b.n	800d28c <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xd8>
 800d2aa:	fb03 2301 	mla	r3, r3, r1, r2
 800d2ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d2b2:	b294      	uxth	r4, r2
 800d2b4:	3201      	adds	r2, #1
 800d2b6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800d2ba:	5518      	strb	r0, [r3, r4]
 800d2bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800d2c0:	d90b      	bls.n	800d2da <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x126>
 800d2c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d2c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800d2d0:	2210      	movs	r2, #16
 800d2d2:	4b64      	ldr	r3, [pc, #400]	; (800d464 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2b0>)
 800d2d4:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800d2d8:	e7b2      	b.n	800d240 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800d2da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d2de:	4a63      	ldr	r2, [pc, #396]	; (800d46c <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2b8>)
 800d2e0:	f8d0 4424 	ldr.w	r4, [r0, #1060]	; 0x424
 800d2e4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800d2e8:	68d3      	ldr	r3, [r2, #12]
 800d2ea:	2901      	cmp	r1, #1
 800d2ec:	ebc3 0344 	rsb	r3, r3, r4, lsl #1
 800d2f0:	f103 0304 	add.w	r3, r3, #4
 800d2f4:	60d4      	str	r4, [r2, #12]
 800d2f6:	bf14      	ite	ne
 800d2f8:	f8c0 3434 	strne.w	r3, [r0, #1076]	; 0x434
 800d2fc:	f8c0 3438 	streq.w	r3, [r0, #1080]	; 0x438
 800d300:	e79e      	b.n	800d240 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800d302:	fb03 2301 	mla	r3, r3, r1, r2
 800d306:	f8b3 5204 	ldrh.w	r5, [r3, #516]	; 0x204
 800d30a:	f8b3 6206 	ldrh.w	r6, [r3, #518]	; 0x206
 800d30e:	5558      	strb	r0, [r3, r5]
 800d310:	1c6c      	adds	r4, r5, #1
 800d312:	3d17      	subs	r5, #23
 800d314:	b2a4      	uxth	r4, r4
 800d316:	4430      	add	r0, r6
 800d318:	2de7      	cmp	r5, #231	; 0xe7
 800d31a:	f8a3 4204 	strh.w	r4, [r3, #516]	; 0x204
 800d31e:	f8a3 0206 	strh.w	r0, [r3, #518]	; 0x206
 800d322:	d808      	bhi.n	800d336 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x182>
 800d324:	7898      	ldrb	r0, [r3, #2]
 800d326:	42a0      	cmp	r0, r4
 800d328:	d105      	bne.n	800d336 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x182>
 800d32a:	2206      	movs	r2, #6
 800d32c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800d330:	2220      	movs	r2, #32
 800d332:	4b4c      	ldr	r3, [pc, #304]	; (800d464 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2b0>)
 800d334:	e7ac      	b.n	800d290 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xdc>
 800d336:	2cff      	cmp	r4, #255	; 0xff
 800d338:	d982      	bls.n	800d240 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800d33a:	f44f 7304 	mov.w	r3, #528	; 0x210
 800d33e:	e78b      	b.n	800d258 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xa4>
 800d340:	fb03 2301 	mla	r3, r3, r1, r2
 800d344:	f8b3 2204 	ldrh.w	r2, [r3, #516]	; 0x204
 800d348:	5498      	strb	r0, [r3, r2]
 800d34a:	3201      	adds	r2, #1
 800d34c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800d350:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800d354:	eba2 2200 	sub.w	r2, r2, r0, lsl #8
 800d358:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800d35c:	2207      	movs	r2, #7
 800d35e:	e77e      	b.n	800d25e <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xaa>
 800d360:	2320      	movs	r3, #32
 800d362:	4e40      	ldr	r6, [pc, #256]	; (800d464 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2b0>)
 800d364:	f8c6 3c14 	str.w	r3, [r6, #3092]	; 0xc14
 800d368:	f44f 7304 	mov.w	r3, #528	; 0x210
 800d36c:	fb03 2301 	mla	r3, r3, r1, r2
 800d370:	f8b3 4204 	ldrh.w	r4, [r3, #516]	; 0x204
 800d374:	f8b3 5206 	ldrh.w	r5, [r3, #518]	; 0x206
 800d378:	5518      	strb	r0, [r3, r4]
 800d37a:	3401      	adds	r4, #1
 800d37c:	1a28      	subs	r0, r5, r0
 800d37e:	b2a4      	uxth	r4, r4
 800d380:	b280      	uxth	r0, r0
 800d382:	f8a3 4204 	strh.w	r4, [r3, #516]	; 0x204
 800d386:	f8a3 0206 	strh.w	r0, [r3, #518]	; 0x206
 800d38a:	b910      	cbnz	r0, 800d392 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x1de>
 800d38c:	7858      	ldrb	r0, [r3, #1]
 800d38e:	2801      	cmp	r0, #1
 800d390:	d007      	beq.n	800d3a2 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x1ee>
 800d392:	f44f 7304 	mov.w	r3, #528	; 0x210
 800d396:	2000      	movs	r0, #0
 800d398:	fb03 2301 	mla	r3, r3, r1, r2
 800d39c:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 800d3a0:	e7cb      	b.n	800d33a <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x186>
 800d3a2:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800d3a6:	f8a3 4204 	strh.w	r4, [r3, #516]	; 0x204
 800d3aa:	4b32      	ldr	r3, [pc, #200]	; (800d474 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2c0>)
 800d3ac:	6858      	ldr	r0, [r3, #4]
 800d3ae:	4b32      	ldr	r3, [pc, #200]	; (800d478 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2c4>)
 800d3b0:	6018      	str	r0, [r3, #0]
 800d3b2:	2310      	movs	r3, #16
 800d3b4:	f8c6 3c14 	str.w	r3, [r6, #3092]	; 0xc14
 800d3b8:	e7bf      	b.n	800d33a <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x186>
 800d3ba:	fb03 2301 	mla	r3, r3, r1, r2
 800d3be:	f8b3 4204 	ldrh.w	r4, [r3, #516]	; 0x204
 800d3c2:	28aa      	cmp	r0, #170	; 0xaa
 800d3c4:	5518      	strb	r0, [r3, r4]
 800d3c6:	f104 0401 	add.w	r4, r4, #1
 800d3ca:	b2a4      	uxth	r4, r4
 800d3cc:	f8a3 4204 	strh.w	r4, [r3, #516]	; 0x204
 800d3d0:	d002      	beq.n	800d3d8 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x224>
 800d3d2:	2c09      	cmp	r4, #9
 800d3d4:	f47f af34 	bne.w	800d240 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800d3d8:	f44f 7304 	mov.w	r3, #528	; 0x210
 800d3dc:	fb03 2301 	mla	r3, r3, r1, r2
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800d3e6:	2209      	movs	r2, #9
 800d3e8:	e739      	b.n	800d25e <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xaa>
 800d3ea:	fb03 2301 	mla	r3, r3, r1, r2
 800d3ee:	f8b3 2204 	ldrh.w	r2, [r3, #516]	; 0x204
 800d3f2:	5498      	strb	r0, [r3, r2]
 800d3f4:	3201      	adds	r2, #1
 800d3f6:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800d3fa:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
 800d3fe:	3201      	adds	r2, #1
 800d400:	b292      	uxth	r2, r2
 800d402:	2a0c      	cmp	r2, #12
 800d404:	d002      	beq.n	800d40c <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x258>
 800d406:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800d40a:	e719      	b.n	800d240 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800d40c:	2200      	movs	r2, #0
 800d40e:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800d412:	220a      	movs	r2, #10
 800d414:	e723      	b.n	800d25e <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xaa>
 800d416:	fb03 2301 	mla	r3, r3, r1, r2
 800d41a:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 800d41e:	f8b3 2204 	ldrh.w	r2, [r3, #516]	; 0x204
 800d422:	3101      	adds	r1, #1
 800d424:	b289      	uxth	r1, r1
 800d426:	5498      	strb	r0, [r3, r2]
 800d428:	3201      	adds	r2, #1
 800d42a:	b292      	uxth	r2, r2
 800d42c:	2904      	cmp	r1, #4
 800d42e:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800d432:	f8a3 1208 	strh.w	r1, [r3, #520]	; 0x208
 800d436:	f47f af03 	bne.w	800d240 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800d43a:	2100      	movs	r1, #0
 800d43c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d440:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 800d444:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800d448:	4b0a      	ldr	r3, [pc, #40]	; (800d474 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2c0>)
 800d44a:	685a      	ldr	r2, [r3, #4]
 800d44c:	4b0a      	ldr	r3, [pc, #40]	; (800d478 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2c4>)
 800d44e:	601a      	str	r2, [r3, #0]
 800d450:	e6f6      	b.n	800d240 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800d452:	fb03 2201 	mla	r2, r3, r1, r2
 800d456:	2300      	movs	r3, #0
 800d458:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 800d45c:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
 800d460:	e6ee      	b.n	800d240 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800d462:	bf00      	nop
 800d464:	40010000 	andmi	r0, r1, r0
 800d468:	20000e44 	andcs	r0, r0, r4, asr #28
 800d46c:	20001678 	andcs	r1, r0, r8, ror r6
 800d470:	00cc0001 	sbceq	r0, ip, r1
 800d474:	e0001000 	and	r1, r0, r0
 800d478:	2000169c 	mulcs	r0, ip, r6

0800d47c <USART2_IRQHandler>:
 800d47c:	2100      	movs	r1, #0
 800d47e:	4801      	ldr	r0, [pc, #4]	; (800d484 <USART2_IRQHandler+0x8>)
 800d480:	f7ff be98 	b.w	800d1b4 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)>
 800d484:	40004800 	andmi	r4, r0, r0, lsl #16

0800d488 <USART5_IRQHandler>:
 800d488:	2101      	movs	r1, #1
 800d48a:	4801      	ldr	r0, [pc, #4]	; (800d490 <USART5_IRQHandler+0x8>)
 800d48c:	f7ff be92 	b.w	800d1b4 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)>
 800d490:	40017000 	andmi	r7, r1, r0

0800d494 <TIMER1_IRQHandler>:
 800d494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d496:	f3bf 8f5f 	dmb	sy
 800d49a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d49e:	2208      	movs	r2, #8
 800d4a0:	691d      	ldr	r5, [r3, #16]
 800d4a2:	4e3d      	ldr	r6, [pc, #244]	; (800d598 <TIMER1_IRQHandler+0x104>)
 800d4a4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d4a8:	07a9      	lsls	r1, r5, #30
 800d4aa:	8834      	ldrh	r4, [r6, #0]
 800d4ac:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 800d4b0:	d52a      	bpl.n	800d508 <TIMER1_IRQHandler+0x74>
 800d4b2:	07e2      	lsls	r2, r4, #31
 800d4b4:	d50d      	bpl.n	800d4d2 <TIMER1_IRQHandler+0x3e>
 800d4b6:	4f39      	ldr	r7, [pc, #228]	; (800d59c <TIMER1_IRQHandler+0x108>)
 800d4b8:	f444 7380 	orr.w	r3, r4, #256	; 0x100
 800d4bc:	8033      	strh	r3, [r6, #0]
 800d4be:	2203      	movs	r2, #3
 800d4c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4c4:	2110      	movs	r1, #16
 800d4c6:	4638      	mov	r0, r7
 800d4c8:	f007 f884 	bl	80145d4 <gpio_init>
 800d4cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4d0:	617b      	str	r3, [r7, #20]
 800d4d2:	07a3      	lsls	r3, r4, #30
 800d4d4:	d50c      	bpl.n	800d4f0 <TIMER1_IRQHandler+0x5c>
 800d4d6:	8833      	ldrh	r3, [r6, #0]
 800d4d8:	4c30      	ldr	r4, [pc, #192]	; (800d59c <TIMER1_IRQHandler+0x108>)
 800d4da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d4de:	8033      	strh	r3, [r6, #0]
 800d4e0:	2203      	movs	r2, #3
 800d4e2:	2340      	movs	r3, #64	; 0x40
 800d4e4:	2110      	movs	r1, #16
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	f007 f874 	bl	80145d4 <gpio_init>
 800d4ec:	2340      	movs	r3, #64	; 0x40
 800d4ee:	6163      	str	r3, [r4, #20]
 800d4f0:	4629      	mov	r1, r5
 800d4f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d4f6:	f007 fbd9 	bl	8014cac <timer_interrupt_flag_clear>
 800d4fa:	2208      	movs	r2, #8
 800d4fc:	4b28      	ldr	r3, [pc, #160]	; (800d5a0 <TIMER1_IRQHandler+0x10c>)
 800d4fe:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800d502:	f3bf 8f5f 	dmb	sy
 800d506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d508:	076f      	lsls	r7, r5, #29
 800d50a:	d511      	bpl.n	800d530 <TIMER1_IRQHandler+0x9c>
 800d50c:	05e6      	lsls	r6, r4, #23
 800d50e:	d506      	bpl.n	800d51e <TIMER1_IRQHandler+0x8a>
 800d510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d514:	2203      	movs	r2, #3
 800d516:	2118      	movs	r1, #24
 800d518:	4820      	ldr	r0, [pc, #128]	; (800d59c <TIMER1_IRQHandler+0x108>)
 800d51a:	f007 f85b 	bl	80145d4 <gpio_init>
 800d51e:	05a0      	lsls	r0, r4, #22
 800d520:	d5e6      	bpl.n	800d4f0 <TIMER1_IRQHandler+0x5c>
 800d522:	2340      	movs	r3, #64	; 0x40
 800d524:	2203      	movs	r2, #3
 800d526:	2118      	movs	r1, #24
 800d528:	481c      	ldr	r0, [pc, #112]	; (800d59c <TIMER1_IRQHandler+0x108>)
 800d52a:	f007 f853 	bl	80145d4 <gpio_init>
 800d52e:	e7df      	b.n	800d4f0 <TIMER1_IRQHandler+0x5c>
 800d530:	0729      	lsls	r1, r5, #28
 800d532:	d5dd      	bpl.n	800d4f0 <TIMER1_IRQHandler+0x5c>
 800d534:	05e2      	lsls	r2, r4, #23
 800d536:	d511      	bpl.n	800d55c <TIMER1_IRQHandler+0xc8>
 800d538:	4b1a      	ldr	r3, [pc, #104]	; (800d5a4 <TIMER1_IRQHandler+0x110>)
 800d53a:	2180      	movs	r1, #128	; 0x80
 800d53c:	69da      	ldr	r2, [r3, #28]
 800d53e:	481a      	ldr	r0, [pc, #104]	; (800d5a8 <TIMER1_IRQHandler+0x114>)
 800d540:	f022 0201 	bic.w	r2, r2, #1
 800d544:	61da      	str	r2, [r3, #28]
 800d546:	4a19      	ldr	r2, [pc, #100]	; (800d5ac <TIMER1_IRQHandler+0x118>)
 800d548:	629a      	str	r2, [r3, #40]	; 0x28
 800d54a:	f8b2 2202 	ldrh.w	r2, [r2, #514]	; 0x202
 800d54e:	621a      	str	r2, [r3, #32]
 800d550:	69da      	ldr	r2, [r3, #28]
 800d552:	f042 0201 	orr.w	r2, r2, #1
 800d556:	61da      	str	r2, [r3, #28]
 800d558:	f007 fc74 	bl	8014e44 <usart_dma_transmit_config>
 800d55c:	05a3      	lsls	r3, r4, #22
 800d55e:	d5c7      	bpl.n	800d4f0 <TIMER1_IRQHandler+0x5c>
 800d560:	4b10      	ldr	r3, [pc, #64]	; (800d5a4 <TIMER1_IRQHandler+0x110>)
 800d562:	4813      	ldr	r0, [pc, #76]	; (800d5b0 <TIMER1_IRQHandler+0x11c>)
 800d564:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
 800d568:	f022 0201 	bic.w	r2, r2, #1
 800d56c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
 800d570:	4a0e      	ldr	r2, [pc, #56]	; (800d5ac <TIMER1_IRQHandler+0x118>)
 800d572:	f502 7101 	add.w	r1, r2, #516	; 0x204
 800d576:	f8b2 2406 	ldrh.w	r2, [r2, #1030]	; 0x406
 800d57a:	f8c3 148c 	str.w	r1, [r3, #1164]	; 0x48c
 800d57e:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
 800d582:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
 800d586:	2180      	movs	r1, #128	; 0x80
 800d588:	f042 0201 	orr.w	r2, r2, #1
 800d58c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
 800d590:	f007 fc58 	bl	8014e44 <usart_dma_transmit_config>
 800d594:	e7ac      	b.n	800d4f0 <TIMER1_IRQHandler+0x5c>
 800d596:	bf00      	nop
 800d598:	20001674 	andcs	r1, r0, r4, ror r6
 800d59c:	40011000 	andmi	r1, r1, r0
 800d5a0:	40010000 	andmi	r0, r1, r0
 800d5a4:	40020000 	andmi	r0, r2, r0
 800d5a8:	40004800 	andmi	r4, r0, r0, lsl #16
 800d5ac:	20001264 	andcs	r1, r0, r4, ror #4
 800d5b0:	40017000 	andmi	r7, r1, r0

0800d5b4 <TIMER2_IRQHandler>:
 800d5b4:	b508      	push	{r3, lr}
 800d5b6:	f3bf 8f5f 	dmb	sy
 800d5ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d5be:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 800d5c2:	f011 0202 	ands.w	r2, r1, #2
 800d5c6:	d017      	beq.n	800d5f8 <TIMER2_IRQHandler+0x44>
 800d5c8:	4b13      	ldr	r3, [pc, #76]	; (800d618 <TIMER2_IRQHandler+0x64>)
 800d5ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800d5ce:	2a04      	cmp	r2, #4
 800d5d0:	d10c      	bne.n	800d5ec <TIMER2_IRQHandler+0x38>
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800d5d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d5dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d5e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800d5e4:	2210      	movs	r2, #16
 800d5e6:	4b0d      	ldr	r3, [pc, #52]	; (800d61c <TIMER2_IRQHandler+0x68>)
 800d5e8:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800d5ec:	480c      	ldr	r0, [pc, #48]	; (800d620 <TIMER2_IRQHandler+0x6c>)
 800d5ee:	f007 fb5d 	bl	8014cac <timer_interrupt_flag_clear>
 800d5f2:	f3bf 8f5f 	dmb	sy
 800d5f6:	bd08      	pop	{r3, pc}
 800d5f8:	074b      	lsls	r3, r1, #29
 800d5fa:	d5f7      	bpl.n	800d5ec <TIMER2_IRQHandler+0x38>
 800d5fc:	4b06      	ldr	r3, [pc, #24]	; (800d618 <TIMER2_IRQHandler+0x64>)
 800d5fe:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
 800d602:	2804      	cmp	r0, #4
 800d604:	bf01      	itttt	eq
 800d606:	f8c3 241c 	streq.w	r2, [r3, #1052]	; 0x41c
 800d60a:	f8d3 2414 	ldreq.w	r2, [r3, #1044]	; 0x414
 800d60e:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 800d612:	f8c3 2414 	streq.w	r2, [r3, #1044]	; 0x414
 800d616:	e7e9      	b.n	800d5ec <TIMER2_IRQHandler+0x38>
 800d618:	20000e44 	andcs	r0, r0, r4, asr #28
 800d61c:	40010000 	andmi	r0, r1, r0
 800d620:	40000400 	andmi	r0, r0, r0, lsl #8

0800d624 <TIMER3_IRQHandler>:
 800d624:	b508      	push	{r3, lr}
 800d626:	f3bf 8f5f 	dmb	sy
 800d62a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d62e:	4804      	ldr	r0, [pc, #16]	; (800d640 <TIMER3_IRQHandler+0x1c>)
 800d630:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 800d634:	f007 fb3a 	bl	8014cac <timer_interrupt_flag_clear>
 800d638:	f3bf 8f5f 	dmb	sy
 800d63c:	bd08      	pop	{r3, pc}
 800d63e:	bf00      	nop
 800d640:	40000800 	andmi	r0, r0, r0, lsl #16

0800d644 <TIMER6_IRQHandler>:
 800d644:	b508      	push	{r3, lr}
 800d646:	f3bf 8f5f 	dmb	sy
 800d64a:	4b0a      	ldr	r3, [pc, #40]	; (800d674 <TIMER6_IRQHandler+0x30>)
 800d64c:	480a      	ldr	r0, [pc, #40]	; (800d678 <TIMER6_IRQHandler+0x34>)
 800d64e:	685a      	ldr	r2, [r3, #4]
 800d650:	6899      	ldr	r1, [r3, #8]
 800d652:	1a52      	subs	r2, r2, r1
 800d654:	601a      	str	r2, [r3, #0]
 800d656:	685a      	ldr	r2, [r3, #4]
 800d658:	609a      	str	r2, [r3, #8]
 800d65a:	695a      	ldr	r2, [r3, #20]
 800d65c:	6999      	ldr	r1, [r3, #24]
 800d65e:	1a52      	subs	r2, r2, r1
 800d660:	611a      	str	r2, [r3, #16]
 800d662:	695a      	ldr	r2, [r3, #20]
 800d664:	2101      	movs	r1, #1
 800d666:	619a      	str	r2, [r3, #24]
 800d668:	f007 fb20 	bl	8014cac <timer_interrupt_flag_clear>
 800d66c:	f3bf 8f5f 	dmb	sy
 800d670:	bd08      	pop	{r3, pc}
 800d672:	bf00      	nop
 800d674:	20001678 	andcs	r1, r0, r8, ror r6
 800d678:	40001400 	andmi	r1, r0, r0, lsl #8

0800d67c <Dmx::ClearData(unsigned int)>:
 800d67c:	f44f 7301 	mov.w	r3, #516	; 0x204
 800d680:	b510      	push	{r4, lr}
 800d682:	2400      	movs	r4, #0
 800d684:	4a08      	ldr	r2, [pc, #32]	; (800d6a8 <Dmx::ClearData(unsigned int)+0x2c>)
 800d686:	fb03 2301 	mla	r3, r3, r1, r2
 800d68a:	f203 2002 	addw	r0, r3, #514	; 0x202
 800d68e:	f823 4b02 	strh.w	r4, [r3], #2
 800d692:	4283      	cmp	r3, r0
 800d694:	d1fb      	bne.n	800d68e <Dmx::ClearData(unsigned int)+0x12>
 800d696:	f44f 7301 	mov.w	r3, #516	; 0x204
 800d69a:	fb03 2201 	mla	r2, r3, r1, r2
 800d69e:	f240 2301 	movw	r3, #513	; 0x201
 800d6a2:	f8a2 3202 	strh.w	r3, [r2, #514]	; 0x202
 800d6a6:	bd10      	pop	{r4, pc}
 800d6a8:	20001264 	andcs	r1, r0, r4, ror #4

0800d6ac <Dmx::StartData(unsigned int, unsigned int)>:
 800d6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ae:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800d6b2:	6943      	ldr	r3, [r0, #20]
 800d6b4:	460d      	mov	r5, r1
 800d6b6:	4614      	mov	r4, r2
 800d6b8:	b085      	sub	sp, #20
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d16a      	bne.n	800d794 <Dmx::StartData(unsigned int, unsigned int)+0xe8>
 800d6be:	4e49      	ldr	r6, [pc, #292]	; (800d7e4 <Dmx::StartData(unsigned int, unsigned int)+0x138>)
 800d6c0:	8835      	ldrh	r5, [r6, #0]
 800d6c2:	2d00      	cmp	r5, #0
 800d6c4:	d15b      	bne.n	800d77e <Dmx::StartData(unsigned int, unsigned int)+0xd2>
 800d6c6:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800d6ca:	f007 f81b 	bl	8014704 <rcu_periph_clock_enable>
 800d6ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d6d2:	f007 f98b 	bl	80149ec <timer_deinit>
 800d6d6:	2377      	movs	r3, #119	; 0x77
 800d6d8:	9300      	str	r3, [sp, #0]
 800d6da:	4b43      	ldr	r3, [pc, #268]	; (800d7e8 <Dmx::StartData(unsigned int, unsigned int)+0x13c>)
 800d6dc:	4669      	mov	r1, sp
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d6e4:	9302      	str	r3, [sp, #8]
 800d6e6:	f8ad 5004 	strh.w	r5, [sp, #4]
 800d6ea:	f8ad 500c 	strh.w	r5, [sp, #12]
 800d6ee:	f88d 500e 	strb.w	r5, [sp, #14]
 800d6f2:	f007 fa21 	bl	8014b38 <timer_init>
 800d6f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d6fa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d6fe:	f007 fad8 	bl	8014cb2 <timer_flag_clear>
 800d702:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d706:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d70a:	f007 facf 	bl	8014cac <timer_interrupt_flag_clear>
 800d70e:	2210      	movs	r2, #16
 800d710:	4629      	mov	r1, r5
 800d712:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d716:	f007 fa6c 	bl	8014bf2 <timer_channel_output_mode_config>
 800d71a:	2210      	movs	r2, #16
 800d71c:	2101      	movs	r1, #1
 800d71e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d722:	f007 fa66 	bl	8014bf2 <timer_channel_output_mode_config>
 800d726:	4f31      	ldr	r7, [pc, #196]	; (800d7ec <Dmx::StartData(unsigned int, unsigned int)+0x140>)
 800d728:	2210      	movs	r2, #16
 800d72a:	2102      	movs	r1, #2
 800d72c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d730:	f007 fa5f 	bl	8014bf2 <timer_channel_output_mode_config>
 800d734:	462a      	mov	r2, r5
 800d736:	4629      	mov	r1, r5
 800d738:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d73c:	f007 fa7f 	bl	8014c3e <timer_channel_output_pulse_value_config>
 800d740:	2101      	movs	r1, #1
 800d742:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d746:	883a      	ldrh	r2, [r7, #0]
 800d748:	f007 fa79 	bl	8014c3e <timer_channel_output_pulse_value_config>
 800d74c:	4b28      	ldr	r3, [pc, #160]	; (800d7f0 <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 800d74e:	683a      	ldr	r2, [r7, #0]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	2102      	movs	r1, #2
 800d754:	441a      	add	r2, r3
 800d756:	b292      	uxth	r2, r2
 800d758:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d75c:	f007 fa6f 	bl	8014c3e <timer_channel_output_pulse_value_config>
 800d760:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d764:	210e      	movs	r1, #14
 800d766:	f007 fa9d 	bl	8014ca4 <timer_interrupt_enable>
 800d76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d76e:	4b21      	ldr	r3, [pc, #132]	; (800d7f4 <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 800d770:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800d774:	f883 531c 	strb.w	r5, [r3, #796]	; 0x31c
 800d778:	601a      	str	r2, [r3, #0]
 800d77a:	f007 fa35 	bl	8014be8 <timer_enable>
 800d77e:	2201      	movs	r2, #1
 800d780:	8831      	ldrh	r1, [r6, #0]
 800d782:	fa02 f304 	lsl.w	r3, r2, r4
 800d786:	430b      	orrs	r3, r1
 800d788:	8033      	strh	r3, [r6, #0]
 800d78a:	4b1b      	ldr	r3, [pc, #108]	; (800d7f8 <Dmx::StartData(unsigned int, unsigned int)+0x14c>)
 800d78c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800d790:	b005      	add	sp, #20
 800d792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d794:	f44f 7204 	mov.w	r2, #528	; 0x210
 800d798:	4b18      	ldr	r3, [pc, #96]	; (800d7fc <Dmx::StartData(unsigned int, unsigned int)+0x150>)
 800d79a:	fb02 3304 	mla	r3, r2, r4, r3
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800d7a4:	2107      	movs	r1, #7
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	f007 fb52 	bl	8014e50 <usart_flag_get>
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	d0f9      	beq.n	800d7a4 <Dmx::StartData(unsigned int, unsigned int)+0xf8>
 800d7b0:	4628      	mov	r0, r5
 800d7b2:	4913      	ldr	r1, [pc, #76]	; (800d800 <Dmx::StartData(unsigned int, unsigned int)+0x154>)
 800d7b4:	f007 fb6e 	bl	8014e94 <usart_interrupt_flag_clear>
 800d7b8:	f240 3105 	movw	r1, #773	; 0x305
 800d7bc:	4628      	mov	r0, r5
 800d7be:	f007 fb52 	bl	8014e66 <usart_interrupt_enable>
 800d7c2:	2202      	movs	r2, #2
 800d7c4:	4b0c      	ldr	r3, [pc, #48]	; (800d7f8 <Dmx::StartData(unsigned int, unsigned int)+0x14c>)
 800d7c6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800d7ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d7ce:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800d7d2:	b924      	cbnz	r4, 800d7de <Dmx::StartData(unsigned int, unsigned int)+0x132>
 800d7d4:	f042 0202 	orr.w	r2, r2, #2
 800d7d8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 800d7dc:	e7d8      	b.n	800d790 <Dmx::StartData(unsigned int, unsigned int)+0xe4>
 800d7de:	f042 0204 	orr.w	r2, r2, #4
 800d7e2:	e7f9      	b.n	800d7d8 <Dmx::StartData(unsigned int, unsigned int)+0x12c>
 800d7e4:	20001674 	andcs	r1, r0, r4, ror r6
 800d7e8:	20000008 	andcs	r0, r0, r8
 800d7ec:	20000010 	andcs	r0, r0, r0, lsl r0
 800d7f0:	2000000c 	andcs	r0, r0, ip
 800d7f4:	e000e100 	and	lr, r0, r0, lsl #2
 800d7f8:	2000166c 	andcs	r1, r0, ip, ror #12
 800d7fc:	20000e44 	andcs	r0, r0, r4, asr #28
 800d800:	00050305 	andeq	r0, r5, r5, lsl #6

0800d804 <Dmx::StopData(unsigned int, unsigned int)>:
 800d804:	b538      	push	{r3, r4, r5, lr}
 800d806:	4d1a      	ldr	r5, [pc, #104]	; (800d870 <Dmx::StopData(unsigned int, unsigned int)+0x6c>)
 800d808:	4614      	mov	r4, r2
 800d80a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800d80e:	4603      	mov	r3, r0
 800d810:	4608      	mov	r0, r1
 800d812:	b192      	cbz	r2, 800d83a <Dmx::StopData(unsigned int, unsigned int)+0x36>
 800d814:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d818:	695b      	ldr	r3, [r3, #20]
 800d81a:	b97b      	cbnz	r3, 800d83c <Dmx::StopData(unsigned int, unsigned int)+0x38>
 800d81c:	2201      	movs	r2, #1
 800d81e:	4915      	ldr	r1, [pc, #84]	; (800d874 <Dmx::StopData(unsigned int, unsigned int)+0x70>)
 800d820:	f104 0308 	add.w	r3, r4, #8
 800d824:	fa02 f303 	lsl.w	r3, r2, r3
 800d828:	40a2      	lsls	r2, r4
 800d82a:	4313      	orrs	r3, r2
 800d82c:	880a      	ldrh	r2, [r1, #0]
 800d82e:	ea22 0303 	bic.w	r3, r2, r3
 800d832:	800b      	strh	r3, [r1, #0]
 800d834:	2300      	movs	r3, #0
 800d836:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800d83a:	bd38      	pop	{r3, r4, r5, pc}
 800d83c:	f240 3105 	movw	r1, #773	; 0x305
 800d840:	f007 fb1c 	bl	8014e7c <usart_interrupt_disable>
 800d844:	f44f 7204 	mov.w	r2, #528	; 0x210
 800d848:	4b0b      	ldr	r3, [pc, #44]	; (800d878 <Dmx::StopData(unsigned int, unsigned int)+0x74>)
 800d84a:	fb02 3304 	mla	r3, r2, r4, r3
 800d84e:	2200      	movs	r2, #0
 800d850:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800d854:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d858:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800d85c:	b924      	cbnz	r4, 800d868 <Dmx::StopData(unsigned int, unsigned int)+0x64>
 800d85e:	f022 0202 	bic.w	r2, r2, #2
 800d862:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 800d866:	e7e5      	b.n	800d834 <Dmx::StopData(unsigned int, unsigned int)+0x30>
 800d868:	f022 0204 	bic.w	r2, r2, #4
 800d86c:	e7f9      	b.n	800d862 <Dmx::StopData(unsigned int, unsigned int)+0x5e>
 800d86e:	bf00      	nop
 800d870:	2000166c 	andcs	r1, r0, ip, ror #12
 800d874:	20001674 	andcs	r1, r0, r4, ror r6
 800d878:	20000e44 	andcs	r0, r0, r4, asr #28

0800d87c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>:
 800d87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d880:	4615      	mov	r5, r2
 800d882:	461f      	mov	r7, r3
 800d884:	4b19      	ldr	r3, [pc, #100]	; (800d8ec <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x70>)
 800d886:	1e0c      	subs	r4, r1, #0
 800d888:	4e19      	ldr	r6, [pc, #100]	; (800d8f0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x74>)
 800d88a:	bf08      	it	eq
 800d88c:	461e      	moveq	r6, r3
 800d88e:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 800d892:	695a      	ldr	r2, [r3, #20]
 800d894:	4680      	mov	r8, r0
 800d896:	42aa      	cmp	r2, r5
 800d898:	d019      	beq.n	800d8ce <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x52>
 800d89a:	4622      	mov	r2, r4
 800d89c:	4631      	mov	r1, r6
 800d89e:	615d      	str	r5, [r3, #20]
 800d8a0:	f7ff ffb0 	bl	800d804 <Dmx::StopData(unsigned int, unsigned int)>
 800d8a4:	b94d      	cbnz	r5, 800d8ba <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3e>
 800d8a6:	4b13      	ldr	r3, [pc, #76]	; (800d8f4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x78>)
 800d8a8:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 800d8ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	6113      	str	r3, [r2, #16]
 800d8b4:	b967      	cbnz	r7, 800d8d0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>
 800d8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ba:	2d01      	cmp	r5, #1
 800d8bc:	d1fa      	bne.n	800d8b4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x38>
 800d8be:	4b0d      	ldr	r3, [pc, #52]	; (800d8f4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x78>)
 800d8c0:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 800d8c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	6153      	str	r3, [r2, #20]
 800d8cc:	e7f2      	b.n	800d8b4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x38>
 800d8ce:	b137      	cbz	r7, 800d8de <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x62>
 800d8d0:	4622      	mov	r2, r4
 800d8d2:	4631      	mov	r1, r6
 800d8d4:	4640      	mov	r0, r8
 800d8d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8da:	f7ff bee7 	b.w	800d6ac <Dmx::StartData(unsigned int, unsigned int)>
 800d8de:	4622      	mov	r2, r4
 800d8e0:	4631      	mov	r1, r6
 800d8e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e6:	f7ff bf8d 	b.w	800d804 <Dmx::StopData(unsigned int, unsigned int)>
 800d8ea:	bf00      	nop
 800d8ec:	40004800 	andmi	r4, r0, r0, lsl #16
 800d8f0:	40017000 	andmi	r7, r1, r0
 800d8f4:	08016c58 	stmdaeq	r1, {r3, r4, r6, sl, fp, sp, lr}

0800d8f8 <Dmx::Dmx()>:
 800d8f8:	230c      	movs	r3, #12
 800d8fa:	225c      	movs	r2, #92	; 0x5c
 800d8fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d900:	e9c0 2300 	strd	r2, r3, [r0]
 800d904:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800d908:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800d90c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d910:	2400      	movs	r4, #0
 800d912:	4606      	mov	r6, r0
 800d914:	8203      	strh	r3, [r0, #16]
 800d916:	4b73      	ldr	r3, [pc, #460]	; (800dae4 <Dmx::Dmx()+0x1ec>)
 800d918:	4f73      	ldr	r7, [pc, #460]	; (800dae8 <Dmx::Dmx()+0x1f0>)
 800d91a:	6018      	str	r0, [r3, #0]
 800d91c:	4b73      	ldr	r3, [pc, #460]	; (800daec <Dmx::Dmx()+0x1f4>)
 800d91e:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800daf0 <Dmx::Dmx()+0x1f8>
 800d922:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 800daf4 <Dmx::Dmx()+0x1fc>
 800d926:	b08b      	sub	sp, #44	; 0x2c
 800d928:	801c      	strh	r4, [r3, #0]
 800d92a:	2500      	movs	r5, #0
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2203      	movs	r2, #3
 800d930:	2110      	movs	r1, #16
 800d932:	f857 0b08 	ldr.w	r0, [r7], #8
 800d936:	f006 fe4d 	bl	80145d4 <gpio_init>
 800d93a:	4621      	mov	r1, r4
 800d93c:	4630      	mov	r0, r6
 800d93e:	f7ff fe9d 	bl	800d67c <Dmx::ClearData(unsigned int)>
 800d942:	462b      	mov	r3, r5
 800d944:	2201      	movs	r2, #1
 800d946:	4630      	mov	r0, r6
 800d948:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
 800d94c:	f7ff ff96 	bl	800d87c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800d950:	f44f 7304 	mov.w	r3, #528	; 0x210
 800d954:	fb03 8304 	mla	r3, r3, r4, r8
 800d958:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 800d95c:	2c00      	cmp	r4, #0
 800d95e:	f000 80be 	beq.w	800dade <Dmx::Dmx()+0x1e6>
 800d962:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 800d966:	f44f 7780 	mov.w	r7, #256	; 0x100
 800d96a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800d96e:	f006 fec9 	bl	8014704 <rcu_periph_clock_enable>
 800d972:	f240 5001 	movw	r0, #1281	; 0x501
 800d976:	f006 fec5 	bl	8014704 <rcu_periph_clock_enable>
 800d97a:	4621      	mov	r1, r4
 800d97c:	485e      	ldr	r0, [pc, #376]	; (800daf8 <Dmx::Dmx()+0x200>)
 800d97e:	f006 fd3f 	bl	8014400 <dma_deinit>
 800d982:	4b5e      	ldr	r3, [pc, #376]	; (800dafc <Dmx::Dmx()+0x204>)
 800d984:	aa03      	add	r2, sp, #12
 800d986:	4621      	mov	r1, r4
 800d988:	485b      	ldr	r0, [pc, #364]	; (800daf8 <Dmx::Dmx()+0x200>)
 800d98a:	e9cd 3503 	strd	r3, r5, [sp, #12]
 800d98e:	f8cd 8020 	str.w	r8, [sp, #32]
 800d992:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800d996:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
 800d99a:	9506      	str	r5, [sp, #24]
 800d99c:	f006 fd4e 	bl	801443c <dma_init>
 800d9a0:	4621      	mov	r1, r4
 800d9a2:	4855      	ldr	r0, [pc, #340]	; (800daf8 <Dmx::Dmx()+0x200>)
 800d9a4:	f006 fd7b 	bl	801449e <dma_circulation_disable>
 800d9a8:	4621      	mov	r1, r4
 800d9aa:	4853      	ldr	r0, [pc, #332]	; (800daf8 <Dmx::Dmx()+0x200>)
 800d9ac:	f006 fd7f 	bl	80144ae <dma_memory_to_memory_disable>
 800d9b0:	2106      	movs	r1, #6
 800d9b2:	4853      	ldr	r0, [pc, #332]	; (800db00 <Dmx::Dmx()+0x208>)
 800d9b4:	f006 fd24 	bl	8014400 <dma_deinit>
 800d9b8:	4b52      	ldr	r3, [pc, #328]	; (800db04 <Dmx::Dmx()+0x20c>)
 800d9ba:	aa03      	add	r2, sp, #12
 800d9bc:	2106      	movs	r1, #6
 800d9be:	4850      	ldr	r0, [pc, #320]	; (800db00 <Dmx::Dmx()+0x208>)
 800d9c0:	e9cd 3503 	strd	r3, r5, [sp, #12]
 800d9c4:	f8cd 8020 	str.w	r8, [sp, #32]
 800d9c8:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800d9cc:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
 800d9d0:	9506      	str	r5, [sp, #24]
 800d9d2:	f006 fd33 	bl	801443c <dma_init>
 800d9d6:	2106      	movs	r1, #6
 800d9d8:	4849      	ldr	r0, [pc, #292]	; (800db00 <Dmx::Dmx()+0x208>)
 800d9da:	f006 fd60 	bl	801449e <dma_circulation_disable>
 800d9de:	2106      	movs	r1, #6
 800d9e0:	4847      	ldr	r0, [pc, #284]	; (800db00 <Dmx::Dmx()+0x208>)
 800d9e2:	f006 fd64 	bl	80144ae <dma_memory_to_memory_disable>
 800d9e6:	f240 7001 	movw	r0, #1793	; 0x701
 800d9ea:	f006 fe8b 	bl	8014704 <rcu_periph_clock_enable>
 800d9ee:	4846      	ldr	r0, [pc, #280]	; (800db08 <Dmx::Dmx()+0x210>)
 800d9f0:	f006 fffc 	bl	80149ec <timer_deinit>
 800d9f4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800d9f8:	2377      	movs	r3, #119	; 0x77
 800d9fa:	a903      	add	r1, sp, #12
 800d9fc:	4842      	ldr	r0, [pc, #264]	; (800db08 <Dmx::Dmx()+0x210>)
 800d9fe:	9303      	str	r3, [sp, #12]
 800da00:	f8cd 8014 	str.w	r8, [sp, #20]
 800da04:	f8ad 5010 	strh.w	r5, [sp, #16]
 800da08:	f8ad 5018 	strh.w	r5, [sp, #24]
 800da0c:	f88d 501a 	strb.w	r5, [sp, #26]
 800da10:	f007 f892 	bl	8014b38 <timer_init>
 800da14:	4641      	mov	r1, r8
 800da16:	483c      	ldr	r0, [pc, #240]	; (800db08 <Dmx::Dmx()+0x210>)
 800da18:	f007 f94b 	bl	8014cb2 <timer_flag_clear>
 800da1c:	4641      	mov	r1, r8
 800da1e:	483a      	ldr	r0, [pc, #232]	; (800db08 <Dmx::Dmx()+0x210>)
 800da20:	f007 f944 	bl	8014cac <timer_interrupt_flag_clear>
 800da24:	4629      	mov	r1, r5
 800da26:	2210      	movs	r2, #16
 800da28:	4837      	ldr	r0, [pc, #220]	; (800db08 <Dmx::Dmx()+0x210>)
 800da2a:	f007 f8e2 	bl	8014bf2 <timer_channel_output_mode_config>
 800da2e:	4621      	mov	r1, r4
 800da30:	2210      	movs	r2, #16
 800da32:	4835      	ldr	r0, [pc, #212]	; (800db08 <Dmx::Dmx()+0x210>)
 800da34:	f007 f8dd 	bl	8014bf2 <timer_channel_output_mode_config>
 800da38:	2210      	movs	r2, #16
 800da3a:	2102      	movs	r1, #2
 800da3c:	4832      	ldr	r0, [pc, #200]	; (800db08 <Dmx::Dmx()+0x210>)
 800da3e:	f007 f8d8 	bl	8014bf2 <timer_channel_output_mode_config>
 800da42:	2210      	movs	r2, #16
 800da44:	2103      	movs	r1, #3
 800da46:	4830      	ldr	r0, [pc, #192]	; (800db08 <Dmx::Dmx()+0x210>)
 800da48:	f007 f8d3 	bl	8014bf2 <timer_channel_output_mode_config>
 800da4c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800da50:	f107 27e0 	add.w	r7, r7, #3758153728	; 0xe000e000
 800da54:	f887 531d 	strb.w	r5, [r7, #797]	; 0x31d
 800da58:	482b      	ldr	r0, [pc, #172]	; (800db08 <Dmx::Dmx()+0x210>)
 800da5a:	603b      	str	r3, [r7, #0]
 800da5c:	f007 f8c4 	bl	8014be8 <timer_enable>
 800da60:	f240 7005 	movw	r0, #1797	; 0x705
 800da64:	f006 fe4e 	bl	8014704 <rcu_periph_clock_enable>
 800da68:	4828      	ldr	r0, [pc, #160]	; (800db0c <Dmx::Dmx()+0x214>)
 800da6a:	f006 ffbf 	bl	80149ec <timer_deinit>
 800da6e:	f642 63df 	movw	r3, #11999	; 0x2edf
 800da72:	f8ad 300c 	strh.w	r3, [sp, #12]
 800da76:	f242 7310 	movw	r3, #10000	; 0x2710
 800da7a:	a903      	add	r1, sp, #12
 800da7c:	4823      	ldr	r0, [pc, #140]	; (800db0c <Dmx::Dmx()+0x214>)
 800da7e:	9305      	str	r3, [sp, #20]
 800da80:	f007 f85a 	bl	8014b38 <timer_init>
 800da84:	4641      	mov	r1, r8
 800da86:	4821      	ldr	r0, [pc, #132]	; (800db0c <Dmx::Dmx()+0x214>)
 800da88:	f007 f913 	bl	8014cb2 <timer_flag_clear>
 800da8c:	4641      	mov	r1, r8
 800da8e:	481f      	ldr	r0, [pc, #124]	; (800db0c <Dmx::Dmx()+0x214>)
 800da90:	f007 f90c 	bl	8014cac <timer_interrupt_flag_clear>
 800da94:	4621      	mov	r1, r4
 800da96:	481d      	ldr	r0, [pc, #116]	; (800db0c <Dmx::Dmx()+0x214>)
 800da98:	f007 f904 	bl	8014ca4 <timer_interrupt_enable>
 800da9c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800daa0:	f04f 0802 	mov.w	r8, #2
 800daa4:	2480      	movs	r4, #128	; 0x80
 800daa6:	f887 5337 	strb.w	r5, [r7, #823]	; 0x337
 800daaa:	4818      	ldr	r0, [pc, #96]	; (800db0c <Dmx::Dmx()+0x214>)
 800daac:	607b      	str	r3, [r7, #4]
 800daae:	f007 f89b 	bl	8014be8 <timer_enable>
 800dab2:	462b      	mov	r3, r5
 800dab4:	2208      	movs	r2, #8
 800dab6:	4916      	ldr	r1, [pc, #88]	; (800db10 <Dmx::Dmx()+0x218>)
 800dab8:	4816      	ldr	r0, [pc, #88]	; (800db14 <Dmx::Dmx()+0x21c>)
 800daba:	f8cd 8000 	str.w	r8, [sp]
 800dabe:	f007 fc61 	bl	8015384 <gd32_uart_begin>
 800dac2:	607c      	str	r4, [r7, #4]
 800dac4:	462b      	mov	r3, r5
 800dac6:	2208      	movs	r2, #8
 800dac8:	4911      	ldr	r1, [pc, #68]	; (800db10 <Dmx::Dmx()+0x218>)
 800daca:	4813      	ldr	r0, [pc, #76]	; (800db18 <Dmx::Dmx()+0x220>)
 800dacc:	f8cd 8000 	str.w	r8, [sp]
 800dad0:	f007 fc58 	bl	8015384 <gd32_uart_begin>
 800dad4:	4630      	mov	r0, r6
 800dad6:	60bc      	str	r4, [r7, #8]
 800dad8:	b00b      	add	sp, #44	; 0x2c
 800dada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dade:	2401      	movs	r4, #1
 800dae0:	e723      	b.n	800d92a <Dmx::Dmx()+0x32>
 800dae2:	bf00      	nop
 800dae4:	20001698 	mulcs	r0, r8, r6
 800dae8:	08016c58 	stmdaeq	r1, {r3, r4, r6, sl, fp, sp, lr}
 800daec:	20001674 	andcs	r1, r0, r4, ror r6
 800daf0:	2000166c 	andcs	r1, r0, ip, ror #12
 800daf4:	20000e44 	andcs	r0, r0, r4, asr #28
 800daf8:	40020000 	andmi	r0, r2, r0
 800dafc:	40004804 	andmi	r4, r0, r4, lsl #16
 800db00:	40020400 	andmi	r0, r2, r0, lsl #8
 800db04:	40017004 	andmi	r7, r1, r4
 800db08:	40000400 	andmi	r0, r0, r0, lsl #8
 800db0c:	40001400 	andmi	r1, r0, r0, lsl #8
 800db10:	0003d090 	muleq	r3, r0, r0
 800db14:	40004800 	andmi	r4, r0, r0, lsl #16
 800db18:	40017000 	andmi	r7, r1, r0

0800db1c <Dmx::SetDmxPeriodTime(unsigned int)>:
 800db1c:	4b15      	ldr	r3, [pc, #84]	; (800db74 <Dmx::SetDmxPeriodTime(unsigned int)+0x58>)
 800db1e:	b570      	push	{r4, r5, r6, lr}
 800db20:	60c1      	str	r1, [r0, #12]
 800db22:	f8b3 0406 	ldrh.w	r0, [r3, #1030]	; 0x406
 800db26:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800db2a:	f64f 76d3 	movw	r6, #65491	; 0xffd3
 800db2e:	4298      	cmp	r0, r3
 800db30:	bf38      	it	cc
 800db32:	4618      	movcc	r0, r3
 800db34:	232c      	movs	r3, #44	; 0x2c
 800db36:	4d10      	ldr	r5, [pc, #64]	; (800db78 <Dmx::SetDmxPeriodTime(unsigned int)+0x5c>)
 800db38:	4c10      	ldr	r4, [pc, #64]	; (800db7c <Dmx::SetDmxPeriodTime(unsigned int)+0x60>)
 800db3a:	4358      	muls	r0, r3
 800db3c:	682a      	ldr	r2, [r5, #0]
 800db3e:	6823      	ldr	r3, [r4, #0]
 800db40:	4413      	add	r3, r2
 800db42:	4403      	add	r3, r0
 800db44:	42b3      	cmp	r3, r6
 800db46:	d908      	bls.n	800db5a <Dmx::SetDmxPeriodTime(unsigned int)+0x3e>
 800db48:	2ab0      	cmp	r2, #176	; 0xb0
 800db4a:	4613      	mov	r3, r2
 800db4c:	bf28      	it	cs
 800db4e:	23b0      	movcs	r3, #176	; 0xb0
 800db50:	220c      	movs	r2, #12
 800db52:	602b      	str	r3, [r5, #0]
 800db54:	4413      	add	r3, r2
 800db56:	6022      	str	r2, [r4, #0]
 800db58:	4403      	add	r3, r0
 800db5a:	b109      	cbz	r1, 800db60 <Dmx::SetDmxPeriodTime(unsigned int)+0x44>
 800db5c:	428b      	cmp	r3, r1
 800db5e:	d906      	bls.n	800db6e <Dmx::SetDmxPeriodTime(unsigned int)+0x52>
 800db60:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800db64:	f240 43b4 	movw	r3, #1204	; 0x4b4
 800db68:	4299      	cmp	r1, r3
 800db6a:	bf38      	it	cc
 800db6c:	4619      	movcc	r1, r3
 800db6e:	4b04      	ldr	r3, [pc, #16]	; (800db80 <Dmx::SetDmxPeriodTime(unsigned int)+0x64>)
 800db70:	6019      	str	r1, [r3, #0]
 800db72:	bd70      	pop	{r4, r5, r6, pc}
 800db74:	20001264 	andcs	r1, r0, r4, ror #4
 800db78:	20000010 	andcs	r0, r0, r0, lsl r0
 800db7c:	2000000c 	andcs	r0, r0, ip
 800db80:	20000008 	andcs	r0, r0, r8

0800db84 <Dmx::SetDmxBreakTime(unsigned int)>:
 800db84:	295c      	cmp	r1, #92	; 0x5c
 800db86:	bf38      	it	cc
 800db88:	215c      	movcc	r1, #92	; 0x5c
 800db8a:	4b02      	ldr	r3, [pc, #8]	; (800db94 <Dmx::SetDmxBreakTime(unsigned int)+0x10>)
 800db8c:	6019      	str	r1, [r3, #0]
 800db8e:	68c1      	ldr	r1, [r0, #12]
 800db90:	f7ff bfc4 	b.w	800db1c <Dmx::SetDmxPeriodTime(unsigned int)>
 800db94:	20000010 	andcs	r0, r0, r0, lsl r0

0800db98 <Dmx::SetDmxMabTime(unsigned int)>:
 800db98:	290c      	cmp	r1, #12
 800db9a:	bf38      	it	cc
 800db9c:	210c      	movcc	r1, #12
 800db9e:	4b02      	ldr	r3, [pc, #8]	; (800dba8 <Dmx::SetDmxMabTime(unsigned int)+0x10>)
 800dba0:	6019      	str	r1, [r3, #0]
 800dba2:	68c1      	ldr	r1, [r0, #12]
 800dba4:	f7ff bfba 	b.w	800db1c <Dmx::SetDmxPeriodTime(unsigned int)>
 800dba8:	2000000c 	andcs	r0, r0, ip

0800dbac <Dmx::SetDmxSlots(unsigned short)>:
 800dbac:	1e8b      	subs	r3, r1, #2
 800dbae:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800dbb2:	d80f      	bhi.n	800dbd4 <Dmx::SetDmxSlots(unsigned short)+0x28>
 800dbb4:	69c3      	ldr	r3, [r0, #28]
 800dbb6:	8201      	strh	r1, [r0, #16]
 800dbb8:	b11b      	cbz	r3, 800dbc2 <Dmx::SetDmxSlots(unsigned short)+0x16>
 800dbba:	4299      	cmp	r1, r3
 800dbbc:	bf94      	ite	ls
 800dbbe:	61c1      	strls	r1, [r0, #28]
 800dbc0:	61c3      	strhi	r3, [r0, #28]
 800dbc2:	6a03      	ldr	r3, [r0, #32]
 800dbc4:	b11b      	cbz	r3, 800dbce <Dmx::SetDmxSlots(unsigned short)+0x22>
 800dbc6:	4299      	cmp	r1, r3
 800dbc8:	bf94      	ite	ls
 800dbca:	6201      	strls	r1, [r0, #32]
 800dbcc:	6203      	strhi	r3, [r0, #32]
 800dbce:	68c1      	ldr	r1, [r0, #12]
 800dbd0:	f7ff bfa4 	b.w	800db1c <Dmx::SetDmxPeriodTime(unsigned int)>
 800dbd4:	4770      	bx	lr
	...

0800dbd8 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>:
 800dbd8:	b4f0      	push	{r4, r5, r6, r7}
 800dbda:	8a04      	ldrh	r4, [r0, #16]
 800dbdc:	4d11      	ldr	r5, [pc, #68]	; (800dc24 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x4c>)
 800dbde:	42a3      	cmp	r3, r4
 800dbe0:	bf28      	it	cs
 800dbe2:	4623      	movcs	r3, r4
 800dbe4:	f44f 7401 	mov.w	r4, #516	; 0x204
 800dbe8:	434c      	muls	r4, r1
 800dbea:	1c5f      	adds	r7, r3, #1
 800dbec:	192e      	adds	r6, r5, r4
 800dbee:	f892 f000 	pld	[r2]
 800dbf2:	3401      	adds	r4, #1
 800dbf4:	442c      	add	r4, r5
 800dbf6:	f8a6 7202 	strh.w	r7, [r6, #514]	; 0x202
 800dbfa:	18d5      	adds	r5, r2, r3
 800dbfc:	4295      	cmp	r5, r2
 800dbfe:	d109      	bne.n	800dc14 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x3c>
 800dc00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc04:	69ca      	ldr	r2, [r1, #28]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d009      	beq.n	800dc1e <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x46>
 800dc0a:	bcf0      	pop	{r4, r5, r6, r7}
 800dc0c:	61cb      	str	r3, [r1, #28]
 800dc0e:	68c1      	ldr	r1, [r0, #12]
 800dc10:	f7ff bf84 	b.w	800db1c <Dmx::SetDmxPeriodTime(unsigned int)>
 800dc14:	f812 6b01 	ldrb.w	r6, [r2], #1
 800dc18:	f804 6b01 	strb.w	r6, [r4], #1
 800dc1c:	e7ee      	b.n	800dbfc <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x24>
 800dc1e:	bcf0      	pop	{r4, r5, r6, r7}
 800dc20:	4770      	bx	lr
 800dc22:	bf00      	nop
 800dc24:	20001264 	andcs	r1, r0, r4, ror #4

0800dc28 <Dmx::GetDmxAvailable(unsigned int)>:
 800dc28:	f44f 7204 	mov.w	r2, #528	; 0x210
 800dc2c:	4b07      	ldr	r3, [pc, #28]	; (800dc4c <Dmx::GetDmxAvailable(unsigned int)+0x24>)
 800dc2e:	fb02 3101 	mla	r1, r2, r1, r3
 800dc32:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 800dc36:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800dc3a:	bf1f      	itttt	ne
 800dc3c:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 800dc40:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 800dc44:	4608      	movne	r0, r1
 800dc46:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 800dc4a:	4770      	bx	lr
 800dc4c:	20000e44 	andcs	r0, r0, r4, asr #28

0800dc50 <Dmx::GetUpdatesPerSecond(unsigned int)>:
 800dc50:	f3bf 8f5f 	dmb	sy
 800dc54:	4b01      	ldr	r3, [pc, #4]	; (800dc5c <Dmx::GetUpdatesPerSecond(unsigned int)+0xc>)
 800dc56:	0109      	lsls	r1, r1, #4
 800dc58:	5858      	ldr	r0, [r3, r1]
 800dc5a:	4770      	bx	lr
 800dc5c:	20001678 	andcs	r1, r0, r8, ror r6

0800dc60 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>:
 800dc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc62:	461e      	mov	r6, r3
 800dc64:	4c25      	ldr	r4, [pc, #148]	; (800dcfc <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x9c>)
 800dc66:	4b26      	ldr	r3, [pc, #152]	; (800dd00 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0xa0>)
 800dc68:	4615      	mov	r5, r2
 800dc6a:	2900      	cmp	r1, #0
 800dc6c:	bf08      	it	eq
 800dc6e:	461c      	moveq	r4, r3
 800dc70:	2106      	movs	r1, #6
 800dc72:	4620      	mov	r0, r4
 800dc74:	f007 f8ec 	bl	8014e50 <usart_flag_get>
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	d0f9      	beq.n	800dc70 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x10>
 800dc7c:	4b20      	ldr	r3, [pc, #128]	; (800dd00 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0xa0>)
 800dc7e:	4f21      	ldr	r7, [pc, #132]	; (800dd04 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0xa4>)
 800dc80:	429c      	cmp	r4, r3
 800dc82:	d126      	bne.n	800dcd2 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x72>
 800dc84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc88:	2203      	movs	r2, #3
 800dc8a:	2110      	movs	r1, #16
 800dc8c:	4638      	mov	r0, r7
 800dc8e:	f006 fca1 	bl	80145d4 <gpio_init>
 800dc92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc96:	2100      	movs	r1, #0
 800dc98:	20b0      	movs	r0, #176	; 0xb0
 800dc9a:	617b      	str	r3, [r7, #20]
 800dc9c:	f007 fcec 	bl	8015678 <udelay(unsigned int, unsigned int)>
 800dca0:	4b17      	ldr	r3, [pc, #92]	; (800dd00 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0xa0>)
 800dca2:	2203      	movs	r2, #3
 800dca4:	429c      	cmp	r4, r3
 800dca6:	bf0c      	ite	eq
 800dca8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dcac:	2340      	movne	r3, #64	; 0x40
 800dcae:	2118      	movs	r1, #24
 800dcb0:	4814      	ldr	r0, [pc, #80]	; (800dd04 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0xa4>)
 800dcb2:	f006 fc8f 	bl	80145d4 <gpio_init>
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	200c      	movs	r0, #12
 800dcba:	f007 fcdd 	bl	8015678 <udelay(unsigned int, unsigned int)>
 800dcbe:	442e      	add	r6, r5
 800dcc0:	42ae      	cmp	r6, r5
 800dcc2:	d10e      	bne.n	800dce2 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x82>
 800dcc4:	2106      	movs	r1, #6
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	f007 f8c2 	bl	8014e50 <usart_flag_get>
 800dccc:	2801      	cmp	r0, #1
 800dcce:	d112      	bne.n	800dcf6 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x96>
 800dcd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcd2:	2340      	movs	r3, #64	; 0x40
 800dcd4:	2203      	movs	r2, #3
 800dcd6:	2110      	movs	r1, #16
 800dcd8:	4638      	mov	r0, r7
 800dcda:	f006 fc7b 	bl	80145d4 <gpio_init>
 800dcde:	2340      	movs	r3, #64	; 0x40
 800dce0:	e7d9      	b.n	800dc96 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x36>
 800dce2:	2107      	movs	r1, #7
 800dce4:	4620      	mov	r0, r4
 800dce6:	f007 f8b3 	bl	8014e50 <usart_flag_get>
 800dcea:	2800      	cmp	r0, #0
 800dcec:	d0f9      	beq.n	800dce2 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x82>
 800dcee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dcf2:	6063      	str	r3, [r4, #4]
 800dcf4:	e7e4      	b.n	800dcc0 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x60>
 800dcf6:	6863      	ldr	r3, [r4, #4]
 800dcf8:	e7e4      	b.n	800dcc4 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x64>
 800dcfa:	bf00      	nop
 800dcfc:	40017000 	andmi	r7, r1, r0
 800dd00:	40004800 	andmi	r4, r0, r0, lsl #16
 800dd04:	40011000 	andmi	r1, r1, r0

0800dd08 <Dmx::RdmReceive(unsigned int)>:
 800dd08:	f44f 7204 	mov.w	r2, #528	; 0x210
 800dd0c:	4b06      	ldr	r3, [pc, #24]	; (800dd28 <Dmx::RdmReceive(unsigned int)+0x20>)
 800dd0e:	fb02 3101 	mla	r1, r2, r1, r3
 800dd12:	f8b1 0204 	ldrh.w	r0, [r1, #516]	; 0x204
 800dd16:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 800dd1a:	bf1e      	ittt	ne
 800dd1c:	2300      	movne	r3, #0
 800dd1e:	4608      	movne	r0, r1
 800dd20:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop
 800dd28:	20000e44 	andcs	r0, r0, r4, asr #28

0800dd2c <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)>:
 800dd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2e:	2300      	movs	r3, #0
 800dd30:	4605      	mov	r5, r0
 800dd32:	460e      	mov	r6, r1
 800dd34:	4614      	mov	r4, r2
 800dd36:	4f05      	ldr	r7, [pc, #20]	; (800dd4c <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0x20>)
 800dd38:	627b      	str	r3, [r7, #36]	; 0x24
 800dd3a:	4631      	mov	r1, r6
 800dd3c:	4628      	mov	r0, r5
 800dd3e:	f7ff ffe3 	bl	800dd08 <Dmx::RdmReceive(unsigned int)>
 800dd42:	b910      	cbnz	r0, 800dd4a <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0x1e>
 800dd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd46:	42a3      	cmp	r3, r4
 800dd48:	d3f7      	bcc.n	800dd3a <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0xe>
 800dd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd4c:	40001000 	andmi	r1, r0, r0

0800dd50 <micros()>:
 800dd50:	b510      	push	{r4, lr}
 800dd52:	4a05      	ldr	r2, [pc, #20]	; (800dd68 <micros()+0x18>)
 800dd54:	4c05      	ldr	r4, [pc, #20]	; (800dd6c <micros()+0x1c>)
 800dd56:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800dd58:	f8d4 0c24 	ldr.w	r0, [r4, #3108]	; 0xc24
 800dd5c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800dd5e:	428b      	cmp	r3, r1
 800dd60:	d1f9      	bne.n	800dd56 <micros()+0x6>
 800dd62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800dd66:	bd10      	pop	{r4, pc}
 800dd68:	40015000 	andmi	r5, r1, r0
 800dd6c:	40014000 	andmi	r4, r1, r0

0800dd70 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)>:
 800dd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd72:	4605      	mov	r5, r0
 800dd74:	460c      	mov	r4, r1
 800dd76:	4616      	mov	r6, r2
 800dd78:	b9d2      	cbnz	r2, 800ddb0 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x40>
 800dd7a:	4e18      	ldr	r6, [pc, #96]	; (800dddc <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x6c>)
 800dd7c:	4622      	mov	r2, r4
 800dd7e:	5d73      	ldrb	r3, [r6, r5]
 800dd80:	78a1      	ldrb	r1, [r4, #2]
 800dd82:	73e3      	strb	r3, [r4, #15]
 800dd84:	2300      	movs	r3, #0
 800dd86:	1908      	adds	r0, r1, r4
 800dd88:	4282      	cmp	r2, r0
 800dd8a:	d122      	bne.n	800ddd2 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x62>
 800dd8c:	0a18      	lsrs	r0, r3, #8
 800dd8e:	5460      	strb	r0, [r4, r1]
 800dd90:	7053      	strb	r3, [r2, #1]
 800dd92:	78a2      	ldrb	r2, [r4, #2]
 800dd94:	4621      	mov	r1, r4
 800dd96:	4628      	mov	r0, r5
 800dd98:	3202      	adds	r2, #2
 800dd9a:	f7ff f9eb 	bl	800d174 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 800dd9e:	f7ff ffd7 	bl	800dd50 <micros()>
 800dda2:	4b0f      	ldr	r3, [pc, #60]	; (800dde0 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x70>)
 800dda4:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800dda8:	5d73      	ldrb	r3, [r6, r5]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	5573      	strb	r3, [r6, r5]
 800ddae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddb0:	f7ff ffce 	bl	800dd50 <micros()>
 800ddb4:	4b0a      	ldr	r3, [pc, #40]	; (800dde0 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x70>)
 800ddb6:	4607      	mov	r7, r0
 800ddb8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ddbc:	1ac2      	subs	r2, r0, r3
 800ddbe:	4296      	cmp	r6, r2
 800ddc0:	d9db      	bls.n	800dd7a <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0xa>
 800ddc2:	4433      	add	r3, r6
 800ddc4:	1a1e      	subs	r6, r3, r0
 800ddc6:	f7ff ffc3 	bl	800dd50 <micros()>
 800ddca:	1bc0      	subs	r0, r0, r7
 800ddcc:	42b0      	cmp	r0, r6
 800ddce:	d3fa      	bcc.n	800ddc6 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x56>
 800ddd0:	e7d3      	b.n	800dd7a <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0xa>
 800ddd2:	f812 7b01 	ldrb.w	r7, [r2], #1
 800ddd6:	443b      	add	r3, r7
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	e7d5      	b.n	800dd88 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x18>
 800dddc:	200016a8 	andcs	r1, r0, r8, lsr #13
 800dde0:	200016a0 	andcs	r1, r0, r0, lsr #13

0800dde4 <RemoteConfig::HandleList()>:
 800dde4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dde8:	6801      	ldr	r1, [r0, #0]
 800ddea:	4604      	mov	r4, r0
 800ddec:	2012      	movs	r0, #18
 800ddee:	f04f 080c 	mov.w	r8, #12
 800ddf2:	4a2b      	ldr	r2, [pc, #172]	; (800dea0 <RemoteConfig::HandleList()+0xbc>)
 800ddf4:	4b2b      	ldr	r3, [pc, #172]	; (800dea4 <RemoteConfig::HandleList()+0xc0>)
 800ddf6:	fb00 2201 	mla	r2, r0, r1, r2
 800ddfa:	6860      	ldr	r0, [r4, #4]
 800ddfc:	492a      	ldr	r1, [pc, #168]	; (800dea8 <RemoteConfig::HandleList()+0xc4>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	fb08 1100 	mla	r1, r8, r0, r1
 800de04:	4e29      	ldr	r6, [pc, #164]	; (800deac <RemoteConfig::HandleList()+0xc8>)
 800de06:	482a      	ldr	r0, [pc, #168]	; (800deb0 <RemoteConfig::HandleList()+0xcc>)
 800de08:	691f      	ldr	r7, [r3, #16]
 800de0a:	6835      	ldr	r5, [r6, #0]
 800de0c:	f890 9009 	ldrb.w	r9, [r0, #9]
 800de10:	b2fb      	uxtb	r3, r7
 800de12:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 800de16:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800de1a:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800de1e:	b089      	sub	sp, #36	; 0x24
 800de20:	3507      	adds	r5, #7
 800de22:	0e3f      	lsrs	r7, r7, #24
 800de24:	f1b9 0f00 	cmp.w	r9, #0
 800de28:	d020      	beq.n	800de6c <RemoteConfig::HandleList()+0x88>
 800de2a:	3009      	adds	r0, #9
 800de2c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800de30:	e9cd 8005 	strd	r8, r0, [sp, #20]
 800de34:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800de38:	4628      	mov	r0, r5
 800de3a:	e9cd e701 	strd	lr, r7, [sp, #4]
 800de3e:	4a1d      	ldr	r2, [pc, #116]	; (800deb4 <RemoteConfig::HandleList()+0xd0>)
 800de40:	f8cd c000 	str.w	ip, [sp]
 800de44:	f006 f8a8 	bl	8013f98 <snprintf>
 800de48:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 800de4c:	2b05      	cmp	r3, #5
 800de4e:	d11a      	bne.n	800de86 <RemoteConfig::HandleList()+0xa2>
 800de50:	f642 1305 	movw	r3, #10501	; 0x2905
 800de54:	9300      	str	r3, [sp, #0]
 800de56:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800de5a:	b282      	uxth	r2, r0
 800de5c:	4629      	mov	r1, r5
 800de5e:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800de62:	f002 fb01 	bl	8010468 <udp_send>
 800de66:	b009      	add	sp, #36	; 0x24
 800de68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de6c:	e9cd 1804 	strd	r1, r8, [sp, #16]
 800de70:	e9cd 7202 	strd	r7, r2, [sp, #8]
 800de74:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800de78:	4628      	mov	r0, r5
 800de7a:	e9cd ce00 	strd	ip, lr, [sp]
 800de7e:	4a0e      	ldr	r2, [pc, #56]	; (800deb8 <RemoteConfig::HandleList()+0xd4>)
 800de80:	f006 f88a 	bl	8013f98 <snprintf>
 800de84:	e7e0      	b.n	800de48 <RemoteConfig::HandleList()+0x64>
 800de86:	2b06      	cmp	r3, #6
 800de88:	d1ed      	bne.n	800de66 <RemoteConfig::HandleList()+0x82>
 800de8a:	6833      	ldr	r3, [r6, #0]
 800de8c:	799b      	ldrb	r3, [r3, #6]
 800de8e:	2b2a      	cmp	r3, #42	; 0x2a
 800de90:	d1e9      	bne.n	800de66 <RemoteConfig::HandleList()+0x82>
 800de92:	f642 1305 	movw	r3, #10501	; 0x2905
 800de96:	9300      	str	r3, [sp, #0]
 800de98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de9c:	e7dd      	b.n	800de5a <RemoteConfig::HandleList()+0x76>
 800de9e:	bf00      	nop
 800dea0:	08016d2e 	stmdaeq	r1, {r1, r2, r3, r5, r8, sl, fp, sp, lr}
 800dea4:	20009ff4 	strdcs	r9, [r0], -r4
 800dea8:	08016dd0 	stmdaeq	r1, {r4, r6, r7, r8, sl, fp, sp, lr}
 800deac:	200016ac 	andcs	r1, r0, ip, lsr #13
 800deb0:	200016b0 			; <UNDEFINED> instruction: 0x200016b0
 800deb4:	08016c68 	stmdaeq	r1, {r3, r5, r6, sl, fp, sp, lr}
 800deb8:	08016c81 	stmdaeq	r1, {r0, r7, sl, fp, sp, lr}

0800debc <RemoteConfig::HandleDisplayGet()>:
 800debc:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800dec0:	2b08      	cmp	r3, #8
 800dec2:	d11d      	bne.n	800df00 <RemoteConfig::HandleDisplayGet()+0x44>
 800dec4:	4b0f      	ldr	r3, [pc, #60]	; (800df04 <RemoteConfig::HandleDisplayGet()+0x48>)
 800dec6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	4d0f      	ldr	r5, [pc, #60]	; (800df08 <RemoteConfig::HandleDisplayGet()+0x4c>)
 800decc:	7c19      	ldrb	r1, [r3, #16]
 800dece:	4a0f      	ldr	r2, [pc, #60]	; (800df0c <RemoteConfig::HandleDisplayGet()+0x50>)
 800ded0:	4b0f      	ldr	r3, [pc, #60]	; (800df10 <RemoteConfig::HandleDisplayGet()+0x54>)
 800ded2:	4604      	mov	r4, r0
 800ded4:	2900      	cmp	r1, #0
 800ded6:	bf18      	it	ne
 800ded8:	4613      	movne	r3, r2
 800deda:	6828      	ldr	r0, [r5, #0]
 800dedc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800dee0:	4a0c      	ldr	r2, [pc, #48]	; (800df14 <RemoteConfig::HandleDisplayGet()+0x58>)
 800dee2:	f006 f859 	bl	8013f98 <snprintf>
 800dee6:	f642 1305 	movw	r3, #10501	; 0x2905
 800deea:	9300      	str	r3, [sp, #0]
 800deec:	b282      	uxth	r2, r0
 800deee:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800def2:	6829      	ldr	r1, [r5, #0]
 800def4:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800def8:	f002 fab6 	bl	8010468 <udp_send>
 800defc:	b003      	add	sp, #12
 800defe:	bd30      	pop	{r4, r5, pc}
 800df00:	4770      	bx	lr
 800df02:	bf00      	nop
 800df04:	2000a62c 	andcs	sl, r0, ip, lsr #12
 800df08:	200016ac 	andcs	r1, r0, ip, lsr #13
 800df0c:	08016c9a 	stmdaeq	r1, {r1, r3, r4, r7, sl, fp, sp, lr}
 800df10:	08016c97 	stmdaeq	r1, {r0, r1, r2, r4, r7, sl, fp, sp, lr}
 800df14:	08016c9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, sl, fp, sp, lr}

0800df18 <RemoteConfig::HandleTftpSet()>:
 800df18:	f8d0 25e4 	ldr.w	r2, [r0, #1508]	; 0x5e4
 800df1c:	2a06      	cmp	r2, #6
 800df1e:	d109      	bne.n	800df34 <RemoteConfig::HandleTftpSet()+0x1c>
 800df20:	4a05      	ldr	r2, [pc, #20]	; (800df38 <RemoteConfig::HandleTftpSet()+0x20>)
 800df22:	6812      	ldr	r2, [r2, #0]
 800df24:	7992      	ldrb	r2, [r2, #6]
 800df26:	3a30      	subs	r2, #48	; 0x30
 800df28:	bf18      	it	ne
 800df2a:	2201      	movne	r2, #1
 800df2c:	f880 25ec 	strb.w	r2, [r0, #1516]	; 0x5ec
 800df30:	f000 bd6e 	b.w	800ea10 <RemoteConfig::PlatformHandleTftpSet()>
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	200016ac 	andcs	r1, r0, ip, lsr #13

0800df3c <RemoteConfig::HandleTftpGet()>:
 800df3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df3e:	4604      	mov	r4, r0
 800df40:	f000 fd6e 	bl	800ea20 <RemoteConfig::PlatformHandleTftpGet()>
 800df44:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 800df48:	2b05      	cmp	r3, #5
 800df4a:	d118      	bne.n	800df7e <RemoteConfig::HandleTftpGet()+0x42>
 800df4c:	f894 15ec 	ldrb.w	r1, [r4, #1516]	; 0x5ec
 800df50:	4d0c      	ldr	r5, [pc, #48]	; (800df84 <RemoteConfig::HandleTftpGet()+0x48>)
 800df52:	4a0d      	ldr	r2, [pc, #52]	; (800df88 <RemoteConfig::HandleTftpGet()+0x4c>)
 800df54:	4b0d      	ldr	r3, [pc, #52]	; (800df8c <RemoteConfig::HandleTftpGet()+0x50>)
 800df56:	6828      	ldr	r0, [r5, #0]
 800df58:	2900      	cmp	r1, #0
 800df5a:	bf08      	it	eq
 800df5c:	4613      	moveq	r3, r2
 800df5e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800df62:	4a0b      	ldr	r2, [pc, #44]	; (800df90 <RemoteConfig::HandleTftpGet()+0x54>)
 800df64:	f006 f818 	bl	8013f98 <snprintf>
 800df68:	f642 1305 	movw	r3, #10501	; 0x2905
 800df6c:	b282      	uxth	r2, r0
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	6829      	ldr	r1, [r5, #0]
 800df72:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800df76:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800df7a:	f002 fa75 	bl	8010468 <udp_send>
 800df7e:	b003      	add	sp, #12
 800df80:	bd30      	pop	{r4, r5, pc}
 800df82:	bf00      	nop
 800df84:	200016ac 	andcs	r1, r0, ip, lsr #13
 800df88:	08016c9a 	stmdaeq	r1, {r1, r3, r4, r7, sl, fp, sp, lr}
 800df8c:	08016c97 	stmdaeq	r1, {r0, r1, r2, r4, r7, sl, fp, sp, lr}
 800df90:	08016caa 	stmdaeq	r1, {r1, r3, r5, r7, sl, fp, sp, lr}

0800df94 <RemoteConfig::HandleVersion()>:
 800df94:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800df98:	2b08      	cmp	r3, #8
 800df9a:	d116      	bne.n	800dfca <RemoteConfig::HandleVersion()+0x36>
 800df9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df9e:	4d0b      	ldr	r5, [pc, #44]	; (800dfcc <RemoteConfig::HandleVersion()+0x38>)
 800dfa0:	4604      	mov	r4, r0
 800dfa2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800dfa6:	4b0a      	ldr	r3, [pc, #40]	; (800dfd0 <RemoteConfig::HandleVersion()+0x3c>)
 800dfa8:	4a0a      	ldr	r2, [pc, #40]	; (800dfd4 <RemoteConfig::HandleVersion()+0x40>)
 800dfaa:	6828      	ldr	r0, [r5, #0]
 800dfac:	f005 fff4 	bl	8013f98 <snprintf>
 800dfb0:	f642 1305 	movw	r3, #10501	; 0x2905
 800dfb4:	9300      	str	r3, [sp, #0]
 800dfb6:	b282      	uxth	r2, r0
 800dfb8:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800dfbc:	6829      	ldr	r1, [r5, #0]
 800dfbe:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800dfc2:	f002 fa51 	bl	8010468 <udp_send>
 800dfc6:	b003      	add	sp, #12
 800dfc8:	bd30      	pop	{r4, r5, pc}
 800dfca:	4770      	bx	lr
 800dfcc:	200016ac 	andcs	r1, r0, ip, lsr #13
 800dfd0:	2000a6d2 	ldrdcs	sl, [r0], -r2
 800dfd4:	08016cb3 	stmdaeq	r1, {r0, r1, r4, r5, r7, sl, fp, sp, lr}

0800dfd8 <RemoteConfig::HandleUptime()>:
 800dfd8:	f890 35d7 	ldrb.w	r3, [r0, #1495]	; 0x5d7
 800dfdc:	b1fb      	cbz	r3, 800e01e <RemoteConfig::HandleUptime()+0x46>
 800dfde:	4b10      	ldr	r3, [pc, #64]	; (800e020 <RemoteConfig::HandleUptime()+0x48>)
 800dfe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfe2:	681a      	ldr	r2, [r3, #0]
 800dfe4:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800dfe8:	4604      	mov	r4, r0
 800dfea:	2b07      	cmp	r3, #7
 800dfec:	d115      	bne.n	800e01a <RemoteConfig::HandleUptime()+0x42>
 800dfee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dff2:	4d0c      	ldr	r5, [pc, #48]	; (800e024 <RemoteConfig::HandleUptime()+0x4c>)
 800dff4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dff8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800dffc:	4a0a      	ldr	r2, [pc, #40]	; (800e028 <RemoteConfig::HandleUptime()+0x50>)
 800dffe:	6828      	ldr	r0, [r5, #0]
 800e000:	f005 ffca 	bl	8013f98 <snprintf>
 800e004:	f642 1305 	movw	r3, #10501	; 0x2905
 800e008:	9300      	str	r3, [sp, #0]
 800e00a:	b282      	uxth	r2, r0
 800e00c:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800e010:	6829      	ldr	r1, [r5, #0]
 800e012:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800e016:	f002 fa27 	bl	8010468 <udp_send>
 800e01a:	b003      	add	sp, #12
 800e01c:	bd30      	pop	{r4, r5, pc}
 800e01e:	4770      	bx	lr
 800e020:	2000a734 	andcs	sl, r0, r4, lsr r7
 800e024:	200016ac 	andcs	r1, r0, ip, lsr #13
 800e028:	08016cbe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, sl, fp, sp, lr}

0800e02c <RemoteConfig::HandleDisplaySet()>:
 800e02c:	b538      	push	{r3, r4, r5, lr}
 800e02e:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800e032:	2b09      	cmp	r3, #9
 800e034:	d113      	bne.n	800e05e <RemoteConfig::HandleDisplaySet()+0x32>
 800e036:	4b0a      	ldr	r3, [pc, #40]	; (800e060 <RemoteConfig::HandleDisplaySet()+0x34>)
 800e038:	681c      	ldr	r4, [r3, #0]
 800e03a:	4b0a      	ldr	r3, [pc, #40]	; (800e064 <RemoteConfig::HandleDisplaySet()+0x38>)
 800e03c:	69a0      	ldr	r0, [r4, #24]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	7a5d      	ldrb	r5, [r3, #9]
 800e042:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800e046:	4259      	negs	r1, r3
 800e048:	4159      	adcs	r1, r3
 800e04a:	b140      	cbz	r0, 800e05e <RemoteConfig::HandleDisplaySet()+0x32>
 800e04c:	6803      	ldr	r3, [r0, #0]
 800e04e:	7421      	strb	r1, [r4, #16]
 800e050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e052:	4798      	blx	r3
 800e054:	2d30      	cmp	r5, #48	; 0x30
 800e056:	bf1e      	ittt	ne
 800e058:	4b03      	ldrne	r3, [pc, #12]	; (800e068 <RemoteConfig::HandleDisplaySet()+0x3c>)
 800e05a:	681b      	ldrne	r3, [r3, #0]
 800e05c:	6063      	strne	r3, [r4, #4]
 800e05e:	bd38      	pop	{r3, r4, r5, pc}
 800e060:	2000a62c 	andcs	sl, r0, ip, lsr #12
 800e064:	200016ac 	andcs	r1, r0, ip, lsr #13
 800e068:	2000a734 	andcs	sl, r0, r4, lsr r7

0800e06c <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 800e06c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e070:	f100 0a0c 	add.w	sl, r0, #12
 800e074:	4604      	mov	r4, r0
 800e076:	e9c0 1200 	strd	r1, r2, [r0]
 800e07a:	6083      	str	r3, [r0, #8]
 800e07c:	4650      	mov	r0, sl
 800e07e:	4690      	mov	r8, r2
 800e080:	4689      	mov	r9, r1
 800e082:	461f      	mov	r7, r3
 800e084:	f000 fd0c 	bl	800eaa0 <HttpDaemon::HttpDaemon()>
 800e088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e08c:	2500      	movs	r5, #0
 800e08e:	4e16      	ldr	r6, [pc, #88]	; (800e0e8 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x7c>)
 800e090:	f8df b058 	ldr.w	fp, [pc, #88]	; 800e0ec <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x80>
 800e094:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800e098:	4b15      	ldr	r3, [pc, #84]	; (800e0f0 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x84>)
 800e09a:	4631      	mov	r1, r6
 800e09c:	f8db 0000 	ldr.w	r0, [fp]
 800e0a0:	f8c4 55d4 	str.w	r5, [r4, #1492]	; 0x5d4
 800e0a4:	f8a4 55d8 	strh.w	r5, [r4, #1496]	; 0x5d8
 800e0a8:	f8c4 55e0 	str.w	r5, [r4, #1504]	; 0x5e0
 800e0ac:	f8c4 55e4 	str.w	r5, [r4, #1508]	; 0x5e4
 800e0b0:	f8c4 55e8 	str.w	r5, [r4, #1512]	; 0x5e8
 800e0b4:	f884 55ec 	strb.w	r5, [r4, #1516]	; 0x5ec
 800e0b8:	601c      	str	r4, [r3, #0]
 800e0ba:	f002 fea1 	bl	8010e00 <Network::MacAddressCopyTo(unsigned char*)>
 800e0be:	f642 1105 	movw	r1, #10501	; 0x2905
 800e0c2:	f8db 0000 	ldr.w	r0, [fp]
 800e0c6:	f886 9006 	strb.w	r9, [r6, #6]
 800e0ca:	f886 8007 	strb.w	r8, [r6, #7]
 800e0ce:	7237      	strb	r7, [r6, #8]
 800e0d0:	7275      	strb	r5, [r6, #9]
 800e0d2:	f002 fe8f 	bl	8010df4 <Network::Begin(unsigned short)>
 800e0d6:	f8c4 05dc 	str.w	r0, [r4, #1500]	; 0x5dc
 800e0da:	4650      	mov	r0, sl
 800e0dc:	f000 fcf8 	bl	800ead0 <HttpDaemon::Start()>
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e6:	bf00      	nop
 800e0e8:	200016b0 			; <UNDEFINED> instruction: 0x200016b0
 800e0ec:	20009ff4 	strdcs	r9, [r0], -r4
 800e0f0:	200016d4 	ldrdcs	r1, [r0], -r4

0800e0f4 <RemoteConfig::GetStringNode() const>:
 800e0f4:	2012      	movs	r0, #18
 800e0f6:	4b03      	ldr	r3, [pc, #12]	; (800e104 <RemoteConfig::GetStringNode() const+0x10>)
 800e0f8:	799a      	ldrb	r2, [r3, #6]
 800e0fa:	4b03      	ldr	r3, [pc, #12]	; (800e108 <RemoteConfig::GetStringNode() const+0x14>)
 800e0fc:	fb00 3002 	mla	r0, r0, r2, r3
 800e100:	4770      	bx	lr
 800e102:	bf00      	nop
 800e104:	200016b0 			; <UNDEFINED> instruction: 0x200016b0
 800e108:	08016d2e 	stmdaeq	r1, {r1, r2, r3, r5, r8, sl, fp, sp, lr}

0800e10c <RemoteConfig::GetStringOutput() const>:
 800e10c:	200c      	movs	r0, #12
 800e10e:	4b03      	ldr	r3, [pc, #12]	; (800e11c <RemoteConfig::GetStringOutput() const+0x10>)
 800e110:	79da      	ldrb	r2, [r3, #7]
 800e112:	4b03      	ldr	r3, [pc, #12]	; (800e120 <RemoteConfig::GetStringOutput() const+0x14>)
 800e114:	fb00 3002 	mla	r0, r0, r2, r3
 800e118:	4770      	bx	lr
 800e11a:	bf00      	nop
 800e11c:	200016b0 			; <UNDEFINED> instruction: 0x200016b0
 800e120:	08016dd0 	stmdaeq	r1, {r4, r6, r7, r8, sl, fp, sp, lr}

0800e124 <RemoteConfig::SetDisable(bool)>:
 800e124:	b538      	push	{r3, r4, r5, lr}
 800e126:	4604      	mov	r4, r0
 800e128:	f890 35d4 	ldrb.w	r3, [r0, #1492]	; 0x5d4
 800e12c:	b171      	cbz	r1, 800e14c <RemoteConfig::SetDisable(bool)+0x28>
 800e12e:	b963      	cbnz	r3, 800e14a <RemoteConfig::SetDisable(bool)+0x26>
 800e130:	4b0d      	ldr	r3, [pc, #52]	; (800e168 <RemoteConfig::SetDisable(bool)+0x44>)
 800e132:	f642 1105 	movw	r1, #10501	; 0x2905
 800e136:	6818      	ldr	r0, [r3, #0]
 800e138:	f002 fe5f 	bl	8010dfa <Network::End(unsigned short)>
 800e13c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e140:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800e144:	2301      	movs	r3, #1
 800e146:	f884 35d4 	strb.w	r3, [r4, #1492]	; 0x5d4
 800e14a:	bd38      	pop	{r3, r4, r5, pc}
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d0fc      	beq.n	800e14a <RemoteConfig::SetDisable(bool)+0x26>
 800e150:	4b05      	ldr	r3, [pc, #20]	; (800e168 <RemoteConfig::SetDisable(bool)+0x44>)
 800e152:	460d      	mov	r5, r1
 800e154:	6818      	ldr	r0, [r3, #0]
 800e156:	f642 1105 	movw	r1, #10501	; 0x2905
 800e15a:	f002 fe4b 	bl	8010df4 <Network::Begin(unsigned short)>
 800e15e:	f884 55d4 	strb.w	r5, [r4, #1492]	; 0x5d4
 800e162:	f8c4 05dc 	str.w	r0, [r4, #1500]	; 0x5dc
 800e166:	e7f0      	b.n	800e14a <RemoteConfig::SetDisable(bool)+0x26>
 800e168:	20009ff4 	strdcs	r9, [r0], -r4

0800e16c <RemoteConfig::SetDisplayName(char const*)>:
 800e16c:	2217      	movs	r2, #23
 800e16e:	4809      	ldr	r0, [pc, #36]	; (800e194 <RemoteConfig::SetDisplayName(char const*)+0x28>)
 800e170:	b508      	push	{r3, lr}
 800e172:	1e4b      	subs	r3, r1, #1
 800e174:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e178:	b911      	cbnz	r1, 800e180 <RemoteConfig::SetDisplayName(char const*)+0x14>
 800e17a:	f005 fbc7 	bl	801390c <memset>
 800e17e:	e003      	b.n	800e188 <RemoteConfig::SetDisplayName(char const*)+0x1c>
 800e180:	3a01      	subs	r2, #1
 800e182:	f800 1b01 	strb.w	r1, [r0], #1
 800e186:	d1f5      	bne.n	800e174 <RemoteConfig::SetDisplayName(char const*)+0x8>
 800e188:	2200      	movs	r2, #0
 800e18a:	4b03      	ldr	r3, [pc, #12]	; (800e198 <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 800e18c:	f883 2020 	strb.w	r2, [r3, #32]
 800e190:	bd08      	pop	{r3, pc}
 800e192:	bf00      	nop
 800e194:	200016b9 			; <UNDEFINED> instruction: 0x200016b9
 800e198:	200016b0 			; <UNDEFINED> instruction: 0x200016b0

0800e19c <RemoteConfig::HandleGet(void*, unsigned int)>:
 800e19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e19e:	4604      	mov	r4, r0
 800e1a0:	4616      	mov	r6, r2
 800e1a2:	460d      	mov	r5, r1
 800e1a4:	4f2a      	ldr	r7, [pc, #168]	; (800e250 <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	b9b9      	cbnz	r1, 800e1da <RemoteConfig::HandleGet(void*, unsigned int)+0x3e>
 800e1aa:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800e1ae:	6839      	ldr	r1, [r7, #0]
 800e1b0:	aa03      	add	r2, sp, #12
 800e1b2:	3105      	adds	r1, #5
 800e1b4:	9303      	str	r3, [sp, #12]
 800e1b6:	f000 fc01 	bl	800e9bc <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800e1ba:	1e03      	subs	r3, r0, #0
 800e1bc:	da1d      	bge.n	800e1fa <RemoteConfig::HandleGet(void*, unsigned int)+0x5e>
 800e1be:	f642 1305 	movw	r3, #10501	; 0x2905
 800e1c2:	220b      	movs	r2, #11
 800e1c4:	9300      	str	r3, [sp, #0]
 800e1c6:	4923      	ldr	r1, [pc, #140]	; (800e254 <RemoteConfig::HandleGet(void*, unsigned int)+0xb8>)
 800e1c8:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800e1cc:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800e1d0:	f002 f94a 	bl	8010468 <udp_send>
 800e1d4:	200c      	movs	r0, #12
 800e1d6:	b005      	add	sp, #20
 800e1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1da:	9203      	str	r2, [sp, #12]
 800e1dc:	aa03      	add	r2, sp, #12
 800e1de:	6039      	str	r1, [r7, #0]
 800e1e0:	f000 fbec 	bl	800e9bc <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800e1e4:	1e03      	subs	r3, r0, #0
 800e1e6:	da08      	bge.n	800e1fa <RemoteConfig::HandleGet(void*, unsigned int)+0x5e>
 800e1e8:	2e0b      	cmp	r6, #11
 800e1ea:	4632      	mov	r2, r6
 800e1ec:	4628      	mov	r0, r5
 800e1ee:	bf28      	it	cs
 800e1f0:	220b      	movcs	r2, #11
 800e1f2:	4918      	ldr	r1, [pc, #96]	; (800e254 <RemoteConfig::HandleGet(void*, unsigned int)+0xb8>)
 800e1f4:	f005 fb68 	bl	80138c8 <memcpy>
 800e1f8:	e7ec      	b.n	800e1d4 <RemoteConfig::HandleGet(void*, unsigned int)+0x38>
 800e1fa:	221c      	movs	r2, #28
 800e1fc:	4353      	muls	r3, r2
 800e1fe:	4916      	ldr	r1, [pc, #88]	; (800e258 <RemoteConfig::HandleGet(void*, unsigned int)+0xbc>)
 800e200:	18ca      	adds	r2, r1, r3
 800e202:	6852      	ldr	r2, [r2, #4]
 800e204:	58cb      	ldr	r3, [r1, r3]
 800e206:	ea4f 0c62 	mov.w	ip, r2, asr #1
 800e20a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800e20e:	07d2      	lsls	r2, r2, #31
 800e210:	bf48      	it	mi
 800e212:	f854 200c 	ldrmi.w	r2, [r4, ip]
 800e216:	a903      	add	r1, sp, #12
 800e218:	bf48      	it	mi
 800e21a:	58d3      	ldrmi	r3, [r2, r3]
 800e21c:	4798      	blx	r3
 800e21e:	b96d      	cbnz	r5, 800e23c <RemoteConfig::HandleGet(void*, unsigned int)+0xa0>
 800e220:	f642 1305 	movw	r3, #10501	; 0x2905
 800e224:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	6839      	ldr	r1, [r7, #0]
 800e22c:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800e230:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800e234:	f002 f918 	bl	8010468 <udp_send>
 800e238:	9803      	ldr	r0, [sp, #12]
 800e23a:	e7cc      	b.n	800e1d6 <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 800e23c:	9a03      	ldr	r2, [sp, #12]
 800e23e:	4628      	mov	r0, r5
 800e240:	42b2      	cmp	r2, r6
 800e242:	bf28      	it	cs
 800e244:	4632      	movcs	r2, r6
 800e246:	6839      	ldr	r1, [r7, #0]
 800e248:	f005 fb49 	bl	80138de <memmove>
 800e24c:	e7f4      	b.n	800e238 <RemoteConfig::HandleGet(void*, unsigned int)+0x9c>
 800e24e:	bf00      	nop
 800e250:	200016ac 	andcs	r1, r0, ip, lsr #13
 800e254:	08016ccb 	stmdaeq	r1, {r0, r1, r3, r6, r7, sl, fp, sp, lr}
 800e258:	08016f68 	stmdaeq	r1, {r3, r5, r6, r8, r9, sl, fp, sp, lr}

0800e25c <RemoteConfig::HandleGetNoParams()>:
 800e25c:	2200      	movs	r2, #0
 800e25e:	4611      	mov	r1, r2
 800e260:	f7ff bf9c 	b.w	800e19c <RemoteConfig::HandleGet(void*, unsigned int)>

0800e264 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 800e264:	b510      	push	{r4, lr}
 800e266:	460c      	mov	r4, r1
 800e268:	4b07      	ldr	r3, [pc, #28]	; (800e288 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x24>)
 800e26a:	b08a      	sub	sp, #40	; 0x28
 800e26c:	6819      	ldr	r1, [r3, #0]
 800e26e:	a801      	add	r0, sp, #4
 800e270:	f000 f9fa 	bl	800e668 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800e274:	4905      	ldr	r1, [pc, #20]	; (800e28c <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 800e276:	4623      	mov	r3, r4
 800e278:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e27c:	6809      	ldr	r1, [r1, #0]
 800e27e:	a801      	add	r0, sp, #4
 800e280:	f000 fb16 	bl	800e8b0 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 800e284:	b00a      	add	sp, #40	; 0x28
 800e286:	bd10      	pop	{r4, pc}
 800e288:	20002708 	andcs	r2, r0, r8, lsl #14
 800e28c:	200016ac 	andcs	r1, r0, ip, lsr #13

0800e290 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 800e290:	b513      	push	{r0, r1, r4, lr}
 800e292:	460c      	mov	r4, r1
 800e294:	4b07      	ldr	r3, [pc, #28]	; (800e2b4 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x24>)
 800e296:	a801      	add	r0, sp, #4
 800e298:	6819      	ldr	r1, [r3, #0]
 800e29a:	f003 f835 	bl	8011308 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800e29e:	4906      	ldr	r1, [pc, #24]	; (800e2b8 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 800e2a0:	4623      	mov	r3, r4
 800e2a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e2a6:	6809      	ldr	r1, [r1, #0]
 800e2a8:	a801      	add	r0, sp, #4
 800e2aa:	f003 fa9d 	bl	80117e8 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 800e2ae:	b002      	add	sp, #8
 800e2b0:	bd10      	pop	{r4, pc}
 800e2b2:	bf00      	nop
 800e2b4:	20002700 	andcs	r2, r0, r0, lsl #14
 800e2b8:	200016ac 	andcs	r1, r0, ip, lsr #13

0800e2bc <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
 800e2bc:	b510      	push	{r4, lr}
 800e2be:	460c      	mov	r4, r1
 800e2c0:	4b07      	ldr	r3, [pc, #28]	; (800e2e0 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x24>)
 800e2c2:	b0a4      	sub	sp, #144	; 0x90
 800e2c4:	6819      	ldr	r1, [r3, #0]
 800e2c6:	a801      	add	r0, sp, #4
 800e2c8:	f7fc fc8c 	bl	800abe4 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800e2cc:	4905      	ldr	r1, [pc, #20]	; (800e2e4 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x28>)
 800e2ce:	4623      	mov	r3, r4
 800e2d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e2d4:	6809      	ldr	r1, [r1, #0]
 800e2d6:	a801      	add	r0, sp, #4
 800e2d8:	f7fd f84e 	bl	800b378 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
 800e2dc:	b024      	add	sp, #144	; 0x90
 800e2de:	bd10      	pop	{r4, pc}
 800e2e0:	200026f4 	strdcs	r2, [r0], -r4
 800e2e4:	200016ac 	andcs	r1, r0, ip, lsr #13

0800e2e8 <RemoteConfig::HandleGetParamsTxt(unsigned int&)>:
 800e2e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e2ea:	460c      	mov	r4, r1
 800e2ec:	4b07      	ldr	r3, [pc, #28]	; (800e30c <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x24>)
 800e2ee:	4668      	mov	r0, sp
 800e2f0:	6819      	ldr	r1, [r3, #0]
 800e2f2:	f7fe fdd3 	bl	800ce9c <DmxParams::DmxParams(DmxParamsStore*)>
 800e2f6:	4906      	ldr	r1, [pc, #24]	; (800e310 <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x28>)
 800e2f8:	4623      	mov	r3, r4
 800e2fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e2fe:	4668      	mov	r0, sp
 800e300:	6809      	ldr	r1, [r1, #0]
 800e302:	f7fe feed 	bl	800d0e0 <DmxParams::Save(char*, unsigned int, unsigned int&)>
 800e306:	b004      	add	sp, #16
 800e308:	bd10      	pop	{r4, pc}
 800e30a:	bf00      	nop
 800e30c:	200026fc 	strdcs	r2, [r0], -ip
 800e310:	200016ac 	andcs	r1, r0, ip, lsr #13

0800e314 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 800e314:	b510      	push	{r4, lr}
 800e316:	460c      	mov	r4, r1
 800e318:	4b07      	ldr	r3, [pc, #28]	; (800e338 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x24>)
 800e31a:	b08a      	sub	sp, #40	; 0x28
 800e31c:	6819      	ldr	r1, [r3, #0]
 800e31e:	4668      	mov	r0, sp
 800e320:	f004 f834 	bl	801238c <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800e324:	4905      	ldr	r1, [pc, #20]	; (800e33c <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 800e326:	4623      	mov	r3, r4
 800e328:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e32c:	4668      	mov	r0, sp
 800e32e:	6809      	ldr	r1, [r1, #0]
 800e330:	f004 f964 	bl	80125fc <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 800e334:	b00a      	add	sp, #40	; 0x28
 800e336:	bd10      	pop	{r4, pc}
 800e338:	200026f8 	strdcs	r2, [r0], -r8
 800e33c:	200016ac 	andcs	r1, r0, ip, lsr #13

0800e340 <RemoteConfig::HandleSet(void*, unsigned int)>:
 800e340:	b530      	push	{r4, r5, lr}
 800e342:	b085      	sub	sp, #20
 800e344:	4604      	mov	r4, r0
 800e346:	9201      	str	r2, [sp, #4]
 800e348:	b9d1      	cbnz	r1, 800e380 <RemoteConfig::HandleSet(void*, unsigned int)+0x40>
 800e34a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800e34e:	9303      	str	r3, [sp, #12]
 800e350:	4b1b      	ldr	r3, [pc, #108]	; (800e3c0 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800e352:	aa03      	add	r2, sp, #12
 800e354:	6819      	ldr	r1, [r3, #0]
 800e356:	3101      	adds	r1, #1
 800e358:	f000 fb30 	bl	800e9bc <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800e35c:	2800      	cmp	r0, #0
 800e35e:	db0d      	blt.n	800e37c <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800e360:	221c      	movs	r2, #28
 800e362:	4b18      	ldr	r3, [pc, #96]	; (800e3c4 <RemoteConfig::HandleSet(void*, unsigned int)+0x84>)
 800e364:	fb02 3300 	mla	r3, r2, r0, r3
 800e368:	68da      	ldr	r2, [r3, #12]
 800e36a:	689b      	ldr	r3, [r3, #8]
 800e36c:	1051      	asrs	r1, r2, #1
 800e36e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800e372:	07d2      	lsls	r2, r2, #31
 800e374:	bf44      	itt	mi
 800e376:	5862      	ldrmi	r2, [r4, r1]
 800e378:	58d3      	ldrmi	r3, [r2, r3]
 800e37a:	4798      	blx	r3
 800e37c:	b005      	add	sp, #20
 800e37e:	bd30      	pop	{r4, r5, pc}
 800e380:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e384:	4613      	mov	r3, r2
 800e386:	d8f9      	bhi.n	800e37c <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800e388:	2200      	movs	r2, #0
 800e38a:	460d      	mov	r5, r1
 800e38c:	490e      	ldr	r1, [pc, #56]	; (800e3c8 <RemoteConfig::HandleSet(void*, unsigned int)+0x88>)
 800e38e:	f8c0 25e8 	str.w	r2, [r0, #1512]	; 0x5e8
 800e392:	7809      	ldrb	r1, [r1, #0]
 800e394:	07c9      	lsls	r1, r1, #31
 800e396:	d50a      	bpl.n	800e3ae <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800e398:	7829      	ldrb	r1, [r5, #0]
 800e39a:	297b      	cmp	r1, #123	; 0x7b
 800e39c:	d107      	bne.n	800e3ae <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800e39e:	3b01      	subs	r3, #1
 800e3a0:	b299      	uxth	r1, r3
 800e3a2:	4628      	mov	r0, r5
 800e3a4:	f004 fa9c 	bl	80128e0 <properties::convert_json_file(char*, unsigned short, bool)>
 800e3a8:	1e03      	subs	r3, r0, #0
 800e3aa:	dde7      	ble.n	800e37c <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800e3ac:	b29b      	uxth	r3, r3
 800e3ae:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800e3b2:	4b03      	ldr	r3, [pc, #12]	; (800e3c0 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	601d      	str	r5, [r3, #0]
 800e3b8:	aa01      	add	r2, sp, #4
 800e3ba:	1c69      	adds	r1, r5, #1
 800e3bc:	e7cc      	b.n	800e358 <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 800e3be:	bf00      	nop
 800e3c0:	200016ac 	andcs	r1, r0, ip, lsr #13
 800e3c4:	08016f68 	stmdaeq	r1, {r3, r5, r6, r8, r9, sl, fp, sp, lr}
 800e3c8:	2000a628 	andcs	sl, r0, r8, lsr #12

0800e3cc <RemoteConfig::Run()>:
 800e3cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800e3d0:	f890 55d4 	ldrb.w	r5, [r0, #1492]	; 0x5d4
 800e3d4:	2d00      	cmp	r5, #0
 800e3d6:	d15d      	bne.n	800e494 <RemoteConfig::Run()+0xc8>
 800e3d8:	4604      	mov	r4, r0
 800e3da:	4e4a      	ldr	r6, [pc, #296]	; (800e504 <RemoteConfig::Run()+0x138>)
 800e3dc:	300c      	adds	r0, #12
 800e3de:	f000 fdf1 	bl	800efc4 <HttpDaemon::Run()>
 800e3e2:	4631      	mov	r1, r6
 800e3e4:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800e3e8:	f10d 030e 	add.w	r3, sp, #14
 800e3ec:	f504 62bc 	add.w	r2, r4, #1504	; 0x5e0
 800e3f0:	f002 f814 	bl	801041c <udp_recv2>
 800e3f4:	2803      	cmp	r0, #3
 800e3f6:	f8c4 05e4 	str.w	r0, [r4, #1508]	; 0x5e4
 800e3fa:	d94b      	bls.n	800e494 <RemoteConfig::Run()+0xc8>
 800e3fc:	6831      	ldr	r1, [r6, #0]
 800e3fe:	1e43      	subs	r3, r0, #1
 800e400:	5cca      	ldrb	r2, [r1, r3]
 800e402:	2a0a      	cmp	r2, #10
 800e404:	bf18      	it	ne
 800e406:	4603      	movne	r3, r0
 800e408:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800e40c:	7808      	ldrb	r0, [r1, #0]
 800e40e:	283f      	cmp	r0, #63	; 0x3f
 800e410:	d135      	bne.n	800e47e <RemoteConfig::Run()+0xb2>
 800e412:	483d      	ldr	r0, [pc, #244]	; (800e508 <RemoteConfig::Run()+0x13c>)
 800e414:	462a      	mov	r2, r5
 800e416:	4607      	mov	r7, r0
 800e418:	3b01      	subs	r3, #1
 800e41a:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800e41e:	7b86      	ldrb	r6, [r0, #14]
 800e420:	8985      	ldrh	r5, [r0, #12]
 800e422:	b176      	cbz	r6, 800e442 <RemoteConfig::Run()+0x76>
 800e424:	42ab      	cmp	r3, r5
 800e426:	d80e      	bhi.n	800e446 <RemoteConfig::Run()+0x7a>
 800e428:	3201      	adds	r2, #1
 800e42a:	2a09      	cmp	r2, #9
 800e42c:	f100 0010 	add.w	r0, r0, #16
 800e430:	d1f5      	bne.n	800e41e <RemoteConfig::Run()+0x52>
 800e432:	f642 1305 	movw	r3, #10501	; 0x2905
 800e436:	9300      	str	r3, [sp, #0]
 800e438:	2208      	movs	r2, #8
 800e43a:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800e43e:	4933      	ldr	r1, [pc, #204]	; (800e50c <RemoteConfig::Run()+0x140>)
 800e440:	e052      	b.n	800e4e8 <RemoteConfig::Run()+0x11c>
 800e442:	42ab      	cmp	r3, r5
 800e444:	d1f0      	bne.n	800e428 <RemoteConfig::Run()+0x5c>
 800e446:	6886      	ldr	r6, [r0, #8]
 800e448:	f101 0c01 	add.w	ip, r1, #1
 800e44c:	4435      	add	r5, r6
 800e44e:	42b5      	cmp	r5, r6
 800e450:	d10b      	bne.n	800e46a <RemoteConfig::Run()+0x9e>
 800e452:	0113      	lsls	r3, r2, #4
 800e454:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 800e458:	6852      	ldr	r2, [r2, #4]
 800e45a:	58fb      	ldr	r3, [r7, r3]
 800e45c:	1051      	asrs	r1, r2, #1
 800e45e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800e462:	07d2      	lsls	r2, r2, #31
 800e464:	d408      	bmi.n	800e478 <RemoteConfig::Run()+0xac>
 800e466:	4798      	blx	r3
 800e468:	e014      	b.n	800e494 <RemoteConfig::Run()+0xc8>
 800e46a:	f81c 8b01 	ldrb.w	r8, [ip], #1
 800e46e:	f816 eb01 	ldrb.w	lr, [r6], #1
 800e472:	45f0      	cmp	r8, lr
 800e474:	d0eb      	beq.n	800e44e <RemoteConfig::Run()+0x82>
 800e476:	e7d7      	b.n	800e428 <RemoteConfig::Run()+0x5c>
 800e478:	5862      	ldr	r2, [r4, r1]
 800e47a:	58d3      	ldr	r3, [r2, r3]
 800e47c:	e7f3      	b.n	800e466 <RemoteConfig::Run()+0x9a>
 800e47e:	f894 25d5 	ldrb.w	r2, [r4, #1493]	; 0x5d5
 800e482:	b93a      	cbnz	r2, 800e494 <RemoteConfig::Run()+0xc8>
 800e484:	2823      	cmp	r0, #35	; 0x23
 800e486:	d108      	bne.n	800e49a <RemoteConfig::Run()+0xce>
 800e488:	4611      	mov	r1, r2
 800e48a:	4620      	mov	r0, r4
 800e48c:	f8c4 25e8 	str.w	r2, [r4, #1512]	; 0x5e8
 800e490:	f7ff ff56 	bl	800e340 <RemoteConfig::HandleSet(void*, unsigned int)>
 800e494:	b004      	add	sp, #16
 800e496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e49a:	2821      	cmp	r0, #33	; 0x21
 800e49c:	d1fa      	bne.n	800e494 <RemoteConfig::Run()+0xc8>
 800e49e:	3b01      	subs	r3, #1
 800e4a0:	2b05      	cmp	r3, #5
 800e4a2:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800e4a6:	d918      	bls.n	800e4da <RemoteConfig::Run()+0x10e>
 800e4a8:	1c4a      	adds	r2, r1, #1
 800e4aa:	4610      	mov	r0, r2
 800e4ac:	4d18      	ldr	r5, [pc, #96]	; (800e510 <RemoteConfig::Run()+0x144>)
 800e4ae:	f101 0c06 	add.w	ip, r1, #6
 800e4b2:	4560      	cmp	r0, ip
 800e4b4:	d01d      	beq.n	800e4f2 <RemoteConfig::Run()+0x126>
 800e4b6:	f810 7b01 	ldrb.w	r7, [r0], #1
 800e4ba:	f815 6b01 	ldrb.w	r6, [r5], #1
 800e4be:	42b7      	cmp	r7, r6
 800e4c0:	d0f7      	beq.n	800e4b2 <RemoteConfig::Run()+0xe6>
 800e4c2:	2b08      	cmp	r3, #8
 800e4c4:	d909      	bls.n	800e4da <RemoteConfig::Run()+0x10e>
 800e4c6:	4b13      	ldr	r3, [pc, #76]	; (800e514 <RemoteConfig::Run()+0x148>)
 800e4c8:	3109      	adds	r1, #9
 800e4ca:	428a      	cmp	r2, r1
 800e4cc:	d017      	beq.n	800e4fe <RemoteConfig::Run()+0x132>
 800e4ce:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e4d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e4d6:	4285      	cmp	r5, r0
 800e4d8:	d0f7      	beq.n	800e4ca <RemoteConfig::Run()+0xfe>
 800e4da:	f642 1305 	movw	r3, #10501	; 0x2905
 800e4de:	2208      	movs	r2, #8
 800e4e0:	9300      	str	r3, [sp, #0]
 800e4e2:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800e4e6:	490c      	ldr	r1, [pc, #48]	; (800e518 <RemoteConfig::Run()+0x14c>)
 800e4e8:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800e4ec:	f001 ffbc 	bl	8010468 <udp_send>
 800e4f0:	e7d0      	b.n	800e494 <RemoteConfig::Run()+0xc8>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	4a09      	ldr	r2, [pc, #36]	; (800e51c <RemoteConfig::Run()+0x150>)
 800e4f6:	011b      	lsls	r3, r3, #4
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	58d3      	ldr	r3, [r2, r3]
 800e4fc:	e7b3      	b.n	800e466 <RemoteConfig::Run()+0x9a>
 800e4fe:	2301      	movs	r3, #1
 800e500:	e7f8      	b.n	800e4f4 <RemoteConfig::Run()+0x128>
 800e502:	bf00      	nop
 800e504:	200016ac 	andcs	r1, r0, ip, lsr #13
 800e508:	08016e60 	stmdaeq	r1, {r5, r6, r9, sl, fp, sp, lr}
 800e50c:	08016cef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, sl, fp, sp, lr}
 800e510:	08016cd7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, sl, fp, sp, lr}
 800e514:	08016cdd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, sl, fp, sp, lr}
 800e518:	08016ce6 	stmdaeq	r1, {r1, r2, r5, r6, r7, sl, fp, sp, lr}
 800e51c:	08016ef0 	stmdaeq	r1, {r4, r5, r6, r7, r9, sl, fp, sp, lr}

0800e520 <RemoteConfig::HandleSetRconfig()>:
 800e520:	b510      	push	{r4, lr}
 800e522:	4604      	mov	r4, r0
 800e524:	4b09      	ldr	r3, [pc, #36]	; (800e54c <RemoteConfig::HandleSetRconfig()+0x2c>)
 800e526:	b08a      	sub	sp, #40	; 0x28
 800e528:	6819      	ldr	r1, [r3, #0]
 800e52a:	a801      	add	r0, sp, #4
 800e52c:	f000 f89c 	bl	800e668 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800e530:	4b07      	ldr	r3, [pc, #28]	; (800e550 <RemoteConfig::HandleSetRconfig()+0x30>)
 800e532:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800e536:	6819      	ldr	r1, [r3, #0]
 800e538:	a801      	add	r0, sp, #4
 800e53a:	f000 f8ab 	bl	800e694 <RemoteConfigParams::Load(char const*, unsigned int)>
 800e53e:	4621      	mov	r1, r4
 800e540:	a801      	add	r0, sp, #4
 800e542:	f000 f9c2 	bl	800e8ca <RemoteConfigParams::Set(RemoteConfig*)>
 800e546:	b00a      	add	sp, #40	; 0x28
 800e548:	bd10      	pop	{r4, pc}
 800e54a:	bf00      	nop
 800e54c:	20002708 	andcs	r2, r0, r8, lsl #14
 800e550:	200016ac 	andcs	r1, r0, ip, lsr #13

0800e554 <RemoteConfig::HandleSetNetworkTxt()>:
 800e554:	b513      	push	{r0, r1, r4, lr}
 800e556:	4604      	mov	r4, r0
 800e558:	4b06      	ldr	r3, [pc, #24]	; (800e574 <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 800e55a:	a801      	add	r0, sp, #4
 800e55c:	6819      	ldr	r1, [r3, #0]
 800e55e:	f002 fed3 	bl	8011308 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800e562:	4b05      	ldr	r3, [pc, #20]	; (800e578 <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 800e564:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800e568:	6819      	ldr	r1, [r3, #0]
 800e56a:	a801      	add	r0, sp, #4
 800e56c:	f002 feec 	bl	8011348 <NetworkParams::Load(char const*, unsigned int)>
 800e570:	b002      	add	sp, #8
 800e572:	bd10      	pop	{r4, pc}
 800e574:	20002700 	andcs	r2, r0, r0, lsl #14
 800e578:	200016ac 	andcs	r1, r0, ip, lsr #13

0800e57c <RemoteConfig::HandleSetArtnetTxt()>:
 800e57c:	b510      	push	{r4, lr}
 800e57e:	4604      	mov	r4, r0
 800e580:	4b07      	ldr	r3, [pc, #28]	; (800e5a0 <RemoteConfig::HandleSetArtnetTxt()+0x24>)
 800e582:	b0a4      	sub	sp, #144	; 0x90
 800e584:	6819      	ldr	r1, [r3, #0]
 800e586:	a801      	add	r0, sp, #4
 800e588:	f7fc fb2c 	bl	800abe4 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800e58c:	4b05      	ldr	r3, [pc, #20]	; (800e5a4 <RemoteConfig::HandleSetArtnetTxt()+0x28>)
 800e58e:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800e592:	6819      	ldr	r1, [r3, #0]
 800e594:	a801      	add	r0, sp, #4
 800e596:	f7fc fb57 	bl	800ac48 <ArtNetParams::Load(char const*, unsigned int)>
 800e59a:	b024      	add	sp, #144	; 0x90
 800e59c:	bd10      	pop	{r4, pc}
 800e59e:	bf00      	nop
 800e5a0:	200026f4 	strdcs	r2, [r0], -r4
 800e5a4:	200016ac 	andcs	r1, r0, ip, lsr #13

0800e5a8 <RemoteConfig::HandleSetParamsTxt()>:
 800e5a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5aa:	4604      	mov	r4, r0
 800e5ac:	4b06      	ldr	r3, [pc, #24]	; (800e5c8 <RemoteConfig::HandleSetParamsTxt()+0x20>)
 800e5ae:	4668      	mov	r0, sp
 800e5b0:	6819      	ldr	r1, [r3, #0]
 800e5b2:	f7fe fc73 	bl	800ce9c <DmxParams::DmxParams(DmxParamsStore*)>
 800e5b6:	4b05      	ldr	r3, [pc, #20]	; (800e5cc <RemoteConfig::HandleSetParamsTxt()+0x24>)
 800e5b8:	4668      	mov	r0, sp
 800e5ba:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800e5be:	6819      	ldr	r1, [r3, #0]
 800e5c0:	f7fe fc84 	bl	800cecc <DmxParams::Load(char const*, unsigned int)>
 800e5c4:	b004      	add	sp, #16
 800e5c6:	bd10      	pop	{r4, pc}
 800e5c8:	200026fc 	strdcs	r2, [r0], -ip
 800e5cc:	200016ac 	andcs	r1, r0, ip, lsr #13

0800e5d0 <RemoteConfig::HandleSetDisplayTxt()>:
 800e5d0:	b510      	push	{r4, lr}
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	4b07      	ldr	r3, [pc, #28]	; (800e5f4 <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 800e5d6:	b08a      	sub	sp, #40	; 0x28
 800e5d8:	6819      	ldr	r1, [r3, #0]
 800e5da:	4668      	mov	r0, sp
 800e5dc:	f003 fed6 	bl	801238c <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800e5e0:	4b05      	ldr	r3, [pc, #20]	; (800e5f8 <RemoteConfig::HandleSetDisplayTxt()+0x28>)
 800e5e2:	4668      	mov	r0, sp
 800e5e4:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800e5e8:	6819      	ldr	r1, [r3, #0]
 800e5ea:	f003 fee9 	bl	80123c0 <DisplayUdfParams::Load(char const*, unsigned int)>
 800e5ee:	b00a      	add	sp, #40	; 0x28
 800e5f0:	bd10      	pop	{r4, pc}
 800e5f2:	bf00      	nop
 800e5f4:	200026f8 	strdcs	r2, [r0], -r8
 800e5f8:	200016ac 	andcs	r1, r0, ip, lsr #13

0800e5fc <RemoteConfig::HandleFactory()>:
 800e5fc:	b538      	push	{r3, r4, r5, lr}
 800e5fe:	2400      	movs	r4, #0
 800e600:	4d04      	ldr	r5, [pc, #16]	; (800e614 <RemoteConfig::HandleFactory()+0x18>)
 800e602:	4621      	mov	r1, r4
 800e604:	6828      	ldr	r0, [r5, #0]
 800e606:	3401      	adds	r4, #1
 800e608:	f000 ff12 	bl	800f430 <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 800e60c:	2c1c      	cmp	r4, #28
 800e60e:	d1f8      	bne.n	800e602 <RemoteConfig::HandleFactory()+0x6>
 800e610:	bd38      	pop	{r3, r4, r5, pc}
 800e612:	bf00      	nop
 800e614:	200026ec 	andcs	r2, r0, ip, ror #13

0800e618 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800e618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e61a:	460b      	mov	r3, r1
 800e61c:	8885      	ldrh	r5, [r0, #4]
 800e61e:	88c1      	ldrh	r1, [r0, #6]
 800e620:	42a9      	cmp	r1, r5
 800e622:	d214      	bcs.n	800e64e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800e624:	4604      	mov	r4, r0
 800e626:	6800      	ldr	r0, [r0, #0]
 800e628:	1a6d      	subs	r5, r5, r1
 800e62a:	4408      	add	r0, r1
 800e62c:	7a21      	ldrb	r1, [r4, #8]
 800e62e:	b91a      	cbnz	r2, 800e638 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800e630:	b919      	cbnz	r1, 800e63a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800e632:	4a0a      	ldr	r2, [pc, #40]	; (800e65c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800e634:	9100      	str	r1, [sp, #0]
 800e636:	e002      	b.n	800e63e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800e638:	b159      	cbz	r1, 800e652 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800e63a:	9200      	str	r2, [sp, #0]
 800e63c:	4a08      	ldr	r2, [pc, #32]	; (800e660 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800e63e:	4629      	mov	r1, r5
 800e640:	f005 fcaa 	bl	8013f98 <snprintf>
 800e644:	4285      	cmp	r5, r0
 800e646:	bfa2      	ittt	ge
 800e648:	88e3      	ldrhge	r3, [r4, #6]
 800e64a:	181b      	addge	r3, r3, r0
 800e64c:	80e3      	strhge	r3, [r4, #6]
 800e64e:	b003      	add	sp, #12
 800e650:	bd30      	pop	{r4, r5, pc}
 800e652:	2201      	movs	r2, #1
 800e654:	9200      	str	r2, [sp, #0]
 800e656:	4a03      	ldr	r2, [pc, #12]	; (800e664 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800e658:	e7f1      	b.n	800e63e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800e65a:	bf00      	nop
 800e65c:	08016787 	stmdaeq	r1, {r0, r1, r2, r7, r8, r9, sl, sp, lr}
 800e660:	0801677e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r8, r9, sl, sp, lr}
 800e664:	08016788 	stmdaeq	r1, {r3, r7, r8, r9, sl, sp, lr}

0800e668 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 800e668:	b510      	push	{r4, lr}
 800e66a:	4604      	mov	r4, r0
 800e66c:	2220      	movs	r2, #32
 800e66e:	f840 1b04 	str.w	r1, [r0], #4
 800e672:	2100      	movs	r1, #0
 800e674:	f005 f94a 	bl	801390c <memset>
 800e678:	4620      	mov	r0, r4
 800e67a:	bd10      	pop	{r4, pc}

0800e67c <RemoteConfigParams::Load()>:
 800e67c:	b508      	push	{r3, lr}
 800e67e:	2300      	movs	r3, #0
 800e680:	4601      	mov	r1, r0
 800e682:	6043      	str	r3, [r0, #4]
 800e684:	6800      	ldr	r0, [r0, #0]
 800e686:	b120      	cbz	r0, 800e692 <RemoteConfigParams::Load()+0x16>
 800e688:	6803      	ldr	r3, [r0, #0]
 800e68a:	3104      	adds	r1, #4
 800e68c:	68db      	ldr	r3, [r3, #12]
 800e68e:	4798      	blx	r3
 800e690:	2001      	movs	r0, #1
 800e692:	bd08      	pop	{r3, pc}

0800e694 <RemoteConfigParams::Load(char const*, unsigned int)>:
 800e694:	2300      	movs	r3, #0
 800e696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e698:	460d      	mov	r5, r1
 800e69a:	4616      	mov	r6, r2
 800e69c:	4604      	mov	r4, r0
 800e69e:	6043      	str	r3, [r0, #4]
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	490a      	ldr	r1, [pc, #40]	; (800e6cc <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 800e6a4:	4668      	mov	r0, sp
 800e6a6:	f004 fa9d 	bl	8012be4 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800e6aa:	4632      	mov	r2, r6
 800e6ac:	4629      	mov	r1, r5
 800e6ae:	4668      	mov	r0, sp
 800e6b0:	f004 fa9c 	bl	8012bec <ReadConfigFile::Read(char const*, unsigned int)>
 800e6b4:	4621      	mov	r1, r4
 800e6b6:	f851 0b04 	ldr.w	r0, [r1], #4
 800e6ba:	6803      	ldr	r3, [r0, #0]
 800e6bc:	689b      	ldr	r3, [r3, #8]
 800e6be:	4798      	blx	r3
 800e6c0:	4668      	mov	r0, sp
 800e6c2:	f004 fa92 	bl	8012bea <ReadConfigFile::~ReadConfigFile()>
 800e6c6:	b002      	add	sp, #8
 800e6c8:	bd70      	pop	{r4, r5, r6, pc}
 800e6ca:	bf00      	nop
 800e6cc:	0800e78d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, sl, sp, lr, pc}

0800e6d0 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 800e6d0:	6843      	ldr	r3, [r0, #4]
 800e6d2:	b111      	cbz	r1, 800e6da <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 800e6d4:	4313      	orrs	r3, r2
 800e6d6:	6043      	str	r3, [r0, #4]
 800e6d8:	4770      	bx	lr
 800e6da:	ea23 0302 	bic.w	r3, r3, r2
 800e6de:	e7fa      	b.n	800e6d6 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

0800e6e0 <RemoteConfigParams::callbackFunction(char const*)>:
 800e6e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6e2:	460d      	mov	r5, r1
 800e6e4:	4604      	mov	r4, r0
 800e6e6:	4923      	ldr	r1, [pc, #140]	; (800e774 <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	f10d 0203 	add.w	r2, sp, #3
 800e6ee:	f004 fbb6 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e6f2:	b940      	cbnz	r0, 800e706 <RemoteConfigParams::callbackFunction(char const*)+0x26>
 800e6f4:	2201      	movs	r2, #1
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800e6fc:	b003      	add	sp, #12
 800e6fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e702:	f7ff bfe5 	b.w	800e6d0 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 800e706:	4628      	mov	r0, r5
 800e708:	491b      	ldr	r1, [pc, #108]	; (800e778 <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 800e70a:	f10d 0203 	add.w	r2, sp, #3
 800e70e:	f004 fba6 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e712:	b908      	cbnz	r0, 800e718 <RemoteConfigParams::callbackFunction(char const*)+0x38>
 800e714:	2202      	movs	r2, #2
 800e716:	e7ee      	b.n	800e6f6 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800e718:	4628      	mov	r0, r5
 800e71a:	4918      	ldr	r1, [pc, #96]	; (800e77c <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 800e71c:	f10d 0203 	add.w	r2, sp, #3
 800e720:	f004 fb9d 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e724:	b908      	cbnz	r0, 800e72a <RemoteConfigParams::callbackFunction(char const*)+0x4a>
 800e726:	2204      	movs	r2, #4
 800e728:	e7e5      	b.n	800e6f6 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800e72a:	4628      	mov	r0, r5
 800e72c:	4914      	ldr	r1, [pc, #80]	; (800e780 <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 800e72e:	f10d 0203 	add.w	r2, sp, #3
 800e732:	f004 fb94 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e736:	b908      	cbnz	r0, 800e73c <RemoteConfigParams::callbackFunction(char const*)+0x5c>
 800e738:	2208      	movs	r2, #8
 800e73a:	e7dc      	b.n	800e6f6 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800e73c:	4628      	mov	r0, r5
 800e73e:	4911      	ldr	r1, [pc, #68]	; (800e784 <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 800e740:	f10d 0203 	add.w	r2, sp, #3
 800e744:	f004 fb8b 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e748:	b908      	cbnz	r0, 800e74e <RemoteConfigParams::callbackFunction(char const*)+0x6e>
 800e74a:	2220      	movs	r2, #32
 800e74c:	e7d3      	b.n	800e6f6 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800e74e:	2317      	movs	r3, #23
 800e750:	4628      	mov	r0, r5
 800e752:	9301      	str	r3, [sp, #4]
 800e754:	490c      	ldr	r1, [pc, #48]	; (800e788 <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 800e756:	ab01      	add	r3, sp, #4
 800e758:	f104 020c 	add.w	r2, r4, #12
 800e75c:	f004 fa7a 	bl	8012c54 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800e760:	b930      	cbnz	r0, 800e770 <RemoteConfigParams::callbackFunction(char const*)+0x90>
 800e762:	9b01      	ldr	r3, [sp, #4]
 800e764:	4423      	add	r3, r4
 800e766:	7318      	strb	r0, [r3, #12]
 800e768:	6863      	ldr	r3, [r4, #4]
 800e76a:	f043 0310 	orr.w	r3, r3, #16
 800e76e:	6063      	str	r3, [r4, #4]
 800e770:	b003      	add	sp, #12
 800e772:	bd30      	pop	{r4, r5, pc}
 800e774:	080172ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r9, ip, sp, lr}
 800e778:	080172ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r9, ip, sp, lr}
 800e77c:	080172fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r9, ip, sp, lr}
 800e780:	0801730b 	stmdaeq	r1, {r0, r1, r3, r8, r9, ip, sp, lr}
 800e784:	08017319 	stmdaeq	r1, {r0, r3, r4, r8, r9, ip, sp, lr}
 800e788:	080172e2 	stmdaeq	r1, {r1, r5, r6, r7, r9, ip, sp, lr}

0800e78c <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 800e78c:	f7ff bfa8 	b.w	800e6e0 <RemoteConfigParams::callbackFunction(char const*)>

0800e790 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 800e790:	b570      	push	{r4, r5, r6, lr}
 800e792:	4604      	mov	r4, r0
 800e794:	4615      	mov	r5, r2
 800e796:	461e      	mov	r6, r3
 800e798:	b086      	sub	sp, #24
 800e79a:	3004      	adds	r0, #4
 800e79c:	2900      	cmp	r1, #0
 800e79e:	d041      	beq.n	800e824 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x94>
 800e7a0:	2220      	movs	r2, #32
 800e7a2:	f005 f89c 	bl	80138de <memmove>
 800e7a6:	4633      	mov	r3, r6
 800e7a8:	462a      	mov	r2, r5
 800e7aa:	4937      	ldr	r1, [pc, #220]	; (800e888 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800e7ac:	a803      	add	r0, sp, #12
 800e7ae:	f004 f949 	bl	8012a44 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800e7b2:	6862      	ldr	r2, [r4, #4]
 800e7b4:	4935      	ldr	r1, [pc, #212]	; (800e88c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800e7b6:	f002 0201 	and.w	r2, r2, #1
 800e7ba:	a803      	add	r0, sp, #12
 800e7bc:	f7ff ff2c 	bl	800e618 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800e7c0:	6862      	ldr	r2, [r4, #4]
 800e7c2:	4933      	ldr	r1, [pc, #204]	; (800e890 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800e7c4:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800e7c8:	a803      	add	r0, sp, #12
 800e7ca:	f7ff ff25 	bl	800e618 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800e7ce:	6862      	ldr	r2, [r4, #4]
 800e7d0:	4930      	ldr	r1, [pc, #192]	; (800e894 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 800e7d2:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800e7d6:	a803      	add	r0, sp, #12
 800e7d8:	f7ff ff1e 	bl	800e618 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800e7dc:	6862      	ldr	r2, [r4, #4]
 800e7de:	492e      	ldr	r1, [pc, #184]	; (800e898 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 800e7e0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800e7e4:	a803      	add	r0, sp, #12
 800e7e6:	f7ff ff17 	bl	800e618 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800e7ea:	6862      	ldr	r2, [r4, #4]
 800e7ec:	492b      	ldr	r1, [pc, #172]	; (800e89c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 800e7ee:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800e7f2:	a803      	add	r0, sp, #12
 800e7f4:	f7ff ff10 	bl	800e618 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800e7f8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e7fc:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800e800:	6862      	ldr	r2, [r4, #4]
 800e802:	42ab      	cmp	r3, r5
 800e804:	d223      	bcs.n	800e84e <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbe>
 800e806:	9803      	ldr	r0, [sp, #12]
 800e808:	06d2      	lsls	r2, r2, #27
 800e80a:	4418      	add	r0, r3
 800e80c:	eba5 0503 	sub.w	r5, r5, r3
 800e810:	f104 040c 	add.w	r4, r4, #12
 800e814:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e818:	d40b      	bmi.n	800e832 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 800e81a:	b95b      	cbnz	r3, 800e834 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa4>
 800e81c:	4b20      	ldr	r3, [pc, #128]	; (800e8a0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800e81e:	4a21      	ldr	r2, [pc, #132]	; (800e8a4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800e820:	9400      	str	r4, [sp, #0]
 800e822:	e00a      	b.n	800e83a <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800e824:	6823      	ldr	r3, [r4, #0]
 800e826:	4601      	mov	r1, r0
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	4618      	mov	r0, r3
 800e82c:	68d2      	ldr	r2, [r2, #12]
 800e82e:	4790      	blx	r2
 800e830:	e7b9      	b.n	800e7a6 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 800e832:	b32b      	cbz	r3, 800e880 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf0>
 800e834:	4b1a      	ldr	r3, [pc, #104]	; (800e8a0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800e836:	4a1c      	ldr	r2, [pc, #112]	; (800e8a8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 800e838:	9400      	str	r4, [sp, #0]
 800e83a:	4629      	mov	r1, r5
 800e83c:	f005 fbac 	bl	8013f98 <snprintf>
 800e840:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e844:	4285      	cmp	r5, r0
 800e846:	bfa4      	itt	ge
 800e848:	181b      	addge	r3, r3, r0
 800e84a:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800e84e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e852:	b17b      	cbz	r3, 800e874 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe4>
 800e854:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e858:	9b03      	ldr	r3, [sp, #12]
 800e85a:	4413      	add	r3, r2
 800e85c:	227d      	movs	r2, #125	; 0x7d
 800e85e:	f803 2c01 	strb.w	r2, [r3, #-1]
 800e862:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e866:	9903      	ldr	r1, [sp, #12]
 800e868:	54ca      	strb	r2, [r1, r3]
 800e86a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e86e:	3301      	adds	r3, #1
 800e870:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e874:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e87a:	601a      	str	r2, [r3, #0]
 800e87c:	b006      	add	sp, #24
 800e87e:	bd70      	pop	{r4, r5, r6, pc}
 800e880:	4b07      	ldr	r3, [pc, #28]	; (800e8a0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800e882:	4a0a      	ldr	r2, [pc, #40]	; (800e8ac <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 800e884:	9400      	str	r4, [sp, #0]
 800e886:	e7d8      	b.n	800e83a <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800e888:	080172d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r9, ip, sp, lr}
 800e88c:	080172ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r9, ip, sp, lr}
 800e890:	080172ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r9, ip, sp, lr}
 800e894:	080172fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r9, ip, sp, lr}
 800e898:	0801730b 	stmdaeq	r1, {r0, r1, r3, r8, r9, ip, sp, lr}
 800e89c:	08017319 	stmdaeq	r1, {r0, r3, r4, r8, r9, ip, sp, lr}
 800e8a0:	080172e2 	stmdaeq	r1, {r1, r5, r6, r7, r9, ip, sp, lr}
 800e8a4:	0801679a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, sl, sp, lr}
 800e8a8:	0801678f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, r9, sl, sp, lr}
 800e8ac:	0801679b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r8, r9, sl, sp, lr}

0800e8b0 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 800e8b0:	b513      	push	{r0, r1, r4, lr}
 800e8b2:	6804      	ldr	r4, [r0, #0]
 800e8b4:	b914      	cbnz	r4, 800e8bc <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800e8b6:	601c      	str	r4, [r3, #0]
 800e8b8:	b002      	add	sp, #8
 800e8ba:	bd10      	pop	{r4, pc}
 800e8bc:	9300      	str	r3, [sp, #0]
 800e8be:	4613      	mov	r3, r2
 800e8c0:	460a      	mov	r2, r1
 800e8c2:	2100      	movs	r1, #0
 800e8c4:	f7ff ff64 	bl	800e790 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 800e8c8:	e7f6      	b.n	800e8b8 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800e8ca <RemoteConfigParams::Set(RemoteConfig*)>:
 800e8ca:	b538      	push	{r3, r4, r5, lr}
 800e8cc:	460c      	mov	r4, r1
 800e8ce:	4605      	mov	r5, r0
 800e8d0:	6841      	ldr	r1, [r0, #4]
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	f001 0101 	and.w	r1, r1, #1
 800e8d8:	f7ff fc24 	bl	800e124 <RemoteConfig::SetDisable(bool)>
 800e8dc:	686b      	ldr	r3, [r5, #4]
 800e8de:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800e8e2:	f884 25d5 	strb.w	r2, [r4, #1493]	; 0x5d5
 800e8e6:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800e8ea:	f884 25d6 	strb.w	r2, [r4, #1494]	; 0x5d6
 800e8ee:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800e8f2:	f884 25d7 	strb.w	r2, [r4, #1495]	; 0x5d7
 800e8f6:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800e8fa:	06db      	lsls	r3, r3, #27
 800e8fc:	f884 25d8 	strb.w	r2, [r4, #1496]	; 0x5d8
 800e900:	d506      	bpl.n	800e910 <RemoteConfigParams::Set(RemoteConfig*)+0x46>
 800e902:	4620      	mov	r0, r4
 800e904:	f105 010c 	add.w	r1, r5, #12
 800e908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e90c:	f7ff bc2e 	b.w	800e16c <RemoteConfig::SetDisplayName(char const*)>
 800e910:	bd38      	pop	{r3, r4, r5, pc}

0800e912 <RemoteConfigParams::Dump()>:
 800e912:	4770      	bx	lr

0800e914 <RemoteConfig::HandleReboot()>:
 800e914:	f890 35d6 	ldrb.w	r3, [r0, #1494]	; 0x5d6
 800e918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d03d      	beq.n	800e99a <RemoteConfig::HandleReboot()+0x86>
 800e91e:	2301      	movs	r3, #1
 800e920:	4c1f      	ldr	r4, [pc, #124]	; (800e9a0 <RemoteConfig::HandleReboot()+0x8c>)
 800e922:	f880 35d9 	strb.w	r3, [r0, #1497]	; 0x5d9
 800e926:	6825      	ldr	r5, [r4, #0]
 800e928:	69a8      	ldr	r0, [r5, #24]
 800e92a:	b138      	cbz	r0, 800e93c <RemoteConfig::HandleReboot()+0x28>
 800e92c:	2100      	movs	r1, #0
 800e92e:	6803      	ldr	r3, [r0, #0]
 800e930:	7429      	strb	r1, [r5, #16]
 800e932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e934:	4798      	blx	r3
 800e936:	4b1b      	ldr	r3, [pc, #108]	; (800e9a4 <RemoteConfig::HandleReboot()+0x90>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	606b      	str	r3, [r5, #4]
 800e93c:	4d1a      	ldr	r5, [pc, #104]	; (800e9a8 <RemoteConfig::HandleReboot()+0x94>)
 800e93e:	6828      	ldr	r0, [r5, #0]
 800e940:	f000 fdf2 	bl	800f528 <SpiFlashStore::Flash()>
 800e944:	2800      	cmp	r0, #0
 800e946:	d1fa      	bne.n	800e93e <RemoteConfig::HandleReboot()+0x2a>
 800e948:	4b18      	ldr	r3, [pc, #96]	; (800e9ac <RemoteConfig::HandleReboot()+0x98>)
 800e94a:	6818      	ldr	r0, [r3, #0]
 800e94c:	f002 fa4a 	bl	8010de4 <Network::Shutdown()>
 800e950:	4817      	ldr	r0, [pc, #92]	; (800e9b0 <RemoteConfig::HandleReboot()+0x9c>)
 800e952:	f005 faf9 	bl	8013f48 <printf>
 800e956:	6823      	ldr	r3, [r4, #0]
 800e958:	6998      	ldr	r0, [r3, #24]
 800e95a:	b110      	cbz	r0, 800e962 <RemoteConfig::HandleReboot()+0x4e>
 800e95c:	6803      	ldr	r3, [r0, #0]
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	4798      	blx	r3
 800e962:	6824      	ldr	r4, [r4, #0]
 800e964:	4913      	ldr	r1, [pc, #76]	; (800e9b4 <RemoteConfig::HandleReboot()+0xa0>)
 800e966:	4620      	mov	r0, r4
 800e968:	f7f9 fef2 	bl	8008750 <Display::TextStatus(char const*)>
 800e96c:	7c63      	ldrb	r3, [r4, #17]
 800e96e:	b183      	cbz	r3, 800e992 <RemoteConfig::HandleReboot()+0x7e>
 800e970:	f64b 7312 	movw	r3, #48914	; 0xbf12
 800e974:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e978:	23bf      	movs	r3, #191	; 0xbf
 800e97a:	7a20      	ldrb	r0, [r4, #8]
 800e97c:	f88d 3006 	strb.w	r3, [sp, #6]
 800e980:	f006 fbf0 	bl	8015164 <gd32_i2c_set_address(unsigned char)>
 800e984:	68e0      	ldr	r0, [r4, #12]
 800e986:	f006 fbe5 	bl	8015154 <gd32_i2c_set_baudrate(unsigned int)>
 800e98a:	2103      	movs	r1, #3
 800e98c:	a801      	add	r0, sp, #4
 800e98e:	f006 fbef 	bl	8015170 <gd32_i2c_write(char const*, unsigned int)>
 800e992:	4b09      	ldr	r3, [pc, #36]	; (800e9b8 <RemoteConfig::HandleReboot()+0xa4>)
 800e994:	6818      	ldr	r0, [r3, #0]
 800e996:	f004 fea1 	bl	80136dc <Hardware::Reboot()>
 800e99a:	b003      	add	sp, #12
 800e99c:	bd30      	pop	{r4, r5, pc}
 800e99e:	bf00      	nop
 800e9a0:	2000a62c 	andcs	sl, r0, ip, lsr #12
 800e9a4:	2000a734 	andcs	sl, r0, r4, lsr r7
 800e9a8:	200026ec 	andcs	r2, r0, ip, ror #13
 800e9ac:	20009ff4 	strdcs	r9, [r0], -r4
 800e9b0:	08016f10 	stmdaeq	r1, {r4, r8, r9, sl, fp, sp, lr}
 800e9b4:	08016f1f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, r9, sl, fp, sp, lr}
 800e9b8:	2000a71c 	andcs	sl, r0, ip, lsl r7

0800e9bc <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 800e9bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	4d12      	ldr	r5, [pc, #72]	; (800ea0c <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 800e9c4:	f10d 0c04 	add.w	ip, sp, #4
 800e9c8:	6814      	ldr	r4, [r2, #0]
 800e9ca:	7d2b      	ldrb	r3, [r5, #20]
 800e9cc:	692e      	ldr	r6, [r5, #16]
 800e9ce:	42a3      	cmp	r3, r4
 800e9d0:	bf34      	ite	cc
 800e9d2:	4664      	movcc	r4, ip
 800e9d4:	4614      	movcs	r4, r2
 800e9d6:	9301      	str	r3, [sp, #4]
 800e9d8:	6827      	ldr	r7, [r4, #0]
 800e9da:	460c      	mov	r4, r1
 800e9dc:	3e01      	subs	r6, #1
 800e9de:	440f      	add	r7, r1
 800e9e0:	42bc      	cmp	r4, r7
 800e9e2:	d101      	bne.n	800e9e8 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x2c>
 800e9e4:	6013      	str	r3, [r2, #0]
 800e9e6:	e00c      	b.n	800ea02 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x46>
 800e9e8:	f894 8000 	ldrb.w	r8, [r4]
 800e9ec:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 800e9f0:	45f0      	cmp	r8, lr
 800e9f2:	d009      	beq.n	800ea08 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 800e9f4:	3001      	adds	r0, #1
 800e9f6:	2805      	cmp	r0, #5
 800e9f8:	f105 051c 	add.w	r5, r5, #28
 800e9fc:	d1e4      	bne.n	800e9c8 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 800e9fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea02:	b002      	add	sp, #8
 800ea04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea08:	3401      	adds	r4, #1
 800ea0a:	e7e9      	b.n	800e9e0 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 800ea0c:	08016f68 	stmdaeq	r1, {r3, r5, r6, r8, r9, sl, fp, sp, lr}

0800ea10 <RemoteConfig::PlatformHandleTftpSet()>:
 800ea10:	f890 15ec 	ldrb.w	r1, [r0, #1516]	; 0x5ec
 800ea14:	b109      	cbz	r1, 800ea1a <RemoteConfig::PlatformHandleTftpSet()+0xa>
 800ea16:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 800ea1a:	2002      	movs	r0, #2
 800ea1c:	f005 bcc2 	b.w	80143a4 <bkp_data_write>

0800ea20 <RemoteConfig::PlatformHandleTftpGet()>:
 800ea20:	b510      	push	{r4, lr}
 800ea22:	4604      	mov	r4, r0
 800ea24:	2002      	movs	r0, #2
 800ea26:	f005 fcd3 	bl	80143d0 <bkp_data_read>
 800ea2a:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 800ea2e:	1ac3      	subs	r3, r0, r3
 800ea30:	4258      	negs	r0, r3
 800ea32:	4158      	adcs	r0, r3
 800ea34:	f884 05ec 	strb.w	r0, [r4, #1516]	; 0x5ec
 800ea38:	bd10      	pop	{r4, pc}

0800ea3a <strcmp>:
 800ea3a:	1e43      	subs	r3, r0, #1
 800ea3c:	3901      	subs	r1, #1
 800ea3e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800ea42:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ea46:	4290      	cmp	r0, r2
 800ea48:	d001      	beq.n	800ea4e <strcmp+0x14>
 800ea4a:	1a80      	subs	r0, r0, r2
 800ea4c:	e001      	b.n	800ea52 <strcmp+0x18>
 800ea4e:	2800      	cmp	r0, #0
 800ea50:	d1f5      	bne.n	800ea3e <strcmp+0x4>
 800ea52:	4770      	bx	lr

0800ea54 <strcasecmp>:
 800ea54:	b530      	push	{r4, r5, lr}
 800ea56:	1e42      	subs	r2, r0, #1
 800ea58:	3901      	subs	r1, #1
 800ea5a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800ea5e:	4604      	mov	r4, r0
 800ea60:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ea64:	2b19      	cmp	r3, #25
 800ea66:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ea6a:	bf98      	it	ls
 800ea6c:	f100 0420 	addls.w	r4, r0, #32
 800ea70:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 800ea74:	2d19      	cmp	r5, #25
 800ea76:	bf98      	it	ls
 800ea78:	3320      	addls	r3, #32
 800ea7a:	42a3      	cmp	r3, r4
 800ea7c:	d001      	beq.n	800ea82 <strcasecmp+0x2e>
 800ea7e:	1ae0      	subs	r0, r4, r3
 800ea80:	e001      	b.n	800ea86 <strcasecmp+0x32>
 800ea82:	2800      	cmp	r0, #0
 800ea84:	d1e9      	bne.n	800ea5a <strcasecmp+0x6>
 800ea86:	bd30      	pop	{r4, r5, pc}

0800ea88 <PropertiesConfig::EnableJSON(bool)>:
 800ea88:	4a04      	ldr	r2, [pc, #16]	; (800ea9c <PropertiesConfig::EnableJSON(bool)+0x14>)
 800ea8a:	7813      	ldrb	r3, [r2, #0]
 800ea8c:	b118      	cbz	r0, 800ea96 <PropertiesConfig::EnableJSON(bool)+0xe>
 800ea8e:	f043 0301 	orr.w	r3, r3, #1
 800ea92:	7013      	strb	r3, [r2, #0]
 800ea94:	4770      	bx	lr
 800ea96:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ea9a:	e7fa      	b.n	800ea92 <PropertiesConfig::EnableJSON(bool)+0xa>
 800ea9c:	2000a628 	andcs	sl, r0, r8, lsr #12

0800eaa0 <HttpDaemon::HttpDaemon()>:
 800eaa0:	4a0a      	ldr	r2, [pc, #40]	; (800eacc <HttpDaemon::HttpDaemon()+0x2c>)
 800eaa2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800eaa6:	6002      	str	r2, [r0, #0]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	f44f 7c02 	mov.w	ip, #520	; 0x208
 800eaae:	e9c0 1204 	strd	r1, r2, [r0, #16]
 800eab2:	2102      	movs	r1, #2
 800eab4:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800eab8:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800eabc:	60c2      	str	r2, [r0, #12]
 800eabe:	8402      	strh	r2, [r0, #32]
 800eac0:	f8a0 25c2 	strh.w	r2, [r0, #1474]	; 0x5c2
 800eac4:	f8c0 25c4 	str.w	r2, [r0, #1476]	; 0x5c4
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop
 800eacc:	0801724e 	stmdaeq	r1, {r1, r2, r3, r6, r9, ip, sp, lr}

0800ead0 <HttpDaemon::Start()>:
 800ead0:	4b04      	ldr	r3, [pc, #16]	; (800eae4 <HttpDaemon::Start()+0x14>)
 800ead2:	b510      	push	{r4, lr}
 800ead4:	2150      	movs	r1, #80	; 0x50
 800ead6:	4604      	mov	r4, r0
 800ead8:	6818      	ldr	r0, [r3, #0]
 800eada:	f002 fc09 	bl	80112f0 <Network::TcpBegin(unsigned short)>
 800eade:	6120      	str	r0, [r4, #16]
 800eae0:	bd10      	pop	{r4, pc}
 800eae2:	bf00      	nop
 800eae4:	20009ff4 	strdcs	r9, [r0], -r4

0800eae8 <HttpDaemon::ParseMethod(char*)>:
 800eae8:	b538      	push	{r3, r4, r5, lr}
 800eaea:	4604      	mov	r4, r0
 800eaec:	4608      	mov	r0, r1
 800eaee:	491a      	ldr	r1, [pc, #104]	; (800eb58 <HttpDaemon::ParseMethod(char*)+0x70>)
 800eaf0:	f005 fa82 	bl	8013ff8 <strtok>
 800eaf4:	4605      	mov	r5, r0
 800eaf6:	b360      	cbz	r0, 800eb52 <HttpDaemon::ParseMethod(char*)+0x6a>
 800eaf8:	4918      	ldr	r1, [pc, #96]	; (800eb5c <HttpDaemon::ParseMethod(char*)+0x74>)
 800eafa:	f7ff ff9e 	bl	800ea3a <strcmp>
 800eafe:	b128      	cbz	r0, 800eb0c <HttpDaemon::ParseMethod(char*)+0x24>
 800eb00:	4628      	mov	r0, r5
 800eb02:	4917      	ldr	r1, [pc, #92]	; (800eb60 <HttpDaemon::ParseMethod(char*)+0x78>)
 800eb04:	f7ff ff99 	bl	800ea3a <strcmp>
 800eb08:	bb18      	cbnz	r0, 800eb52 <HttpDaemon::ParseMethod(char*)+0x6a>
 800eb0a:	2001      	movs	r0, #1
 800eb0c:	61e0      	str	r0, [r4, #28]
 800eb0e:	4912      	ldr	r1, [pc, #72]	; (800eb58 <HttpDaemon::ParseMethod(char*)+0x70>)
 800eb10:	2000      	movs	r0, #0
 800eb12:	f005 fa71 	bl	8013ff8 <strtok>
 800eb16:	b910      	cbnz	r0, 800eb1e <HttpDaemon::ParseMethod(char*)+0x36>
 800eb18:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800eb1c:	bd38      	pop	{r3, r4, r5, pc}
 800eb1e:	6060      	str	r0, [r4, #4]
 800eb20:	4910      	ldr	r1, [pc, #64]	; (800eb64 <HttpDaemon::ParseMethod(char*)+0x7c>)
 800eb22:	2000      	movs	r0, #0
 800eb24:	f005 fa68 	bl	8013ff8 <strtok>
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	d0f5      	beq.n	800eb18 <HttpDaemon::ParseMethod(char*)+0x30>
 800eb2c:	490e      	ldr	r1, [pc, #56]	; (800eb68 <HttpDaemon::ParseMethod(char*)+0x80>)
 800eb2e:	f7ff ff84 	bl	800ea3a <strcmp>
 800eb32:	2800      	cmp	r0, #0
 800eb34:	d1f0      	bne.n	800eb18 <HttpDaemon::ParseMethod(char*)+0x30>
 800eb36:	490d      	ldr	r1, [pc, #52]	; (800eb6c <HttpDaemon::ParseMethod(char*)+0x84>)
 800eb38:	f005 fa5e 	bl	8013ff8 <strtok>
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	d0eb      	beq.n	800eb18 <HttpDaemon::ParseMethod(char*)+0x30>
 800eb40:	490b      	ldr	r1, [pc, #44]	; (800eb70 <HttpDaemon::ParseMethod(char*)+0x88>)
 800eb42:	f7ff ff7a 	bl	800ea3a <strcmp>
 800eb46:	2800      	cmp	r0, #0
 800eb48:	f240 10f9 	movw	r0, #505	; 0x1f9
 800eb4c:	bf08      	it	eq
 800eb4e:	20c8      	moveq	r0, #200	; 0xc8
 800eb50:	e7e4      	b.n	800eb1c <HttpDaemon::ParseMethod(char*)+0x34>
 800eb52:	f240 10f5 	movw	r0, #501	; 0x1f5
 800eb56:	e7e1      	b.n	800eb1c <HttpDaemon::ParseMethod(char*)+0x34>
 800eb58:	0801822f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, pc}
 800eb5c:	08016ff4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 800eb60:	08016ff8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 800eb64:	08017062 	stmdaeq	r1, {r1, r5, r6, ip, sp, lr}
 800eb68:	08016ffd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 800eb6c:	08017002 	stmdaeq	r1, {r1, ip, sp, lr}
 800eb70:	08017005 	stmdaeq	r1, {r0, r2, ip, sp, lr}

0800eb74 <HttpDaemon::ParseHeaderField(char*)>:
 800eb74:	b538      	push	{r3, r4, r5, lr}
 800eb76:	4605      	mov	r5, r0
 800eb78:	4608      	mov	r0, r1
 800eb7a:	491d      	ldr	r1, [pc, #116]	; (800ebf0 <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 800eb7c:	f005 fa3c 	bl	8013ff8 <strtok>
 800eb80:	4604      	mov	r4, r0
 800eb82:	b910      	cbnz	r0, 800eb8a <HttpDaemon::ParseHeaderField(char*)+0x16>
 800eb84:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800eb88:	bd38      	pop	{r3, r4, r5, pc}
 800eb8a:	491a      	ldr	r1, [pc, #104]	; (800ebf4 <HttpDaemon::ParseHeaderField(char*)+0x80>)
 800eb8c:	f7ff ff62 	bl	800ea54 <strcasecmp>
 800eb90:	b970      	cbnz	r0, 800ebb0 <HttpDaemon::ParseHeaderField(char*)+0x3c>
 800eb92:	4919      	ldr	r1, [pc, #100]	; (800ebf8 <HttpDaemon::ParseHeaderField(char*)+0x84>)
 800eb94:	f005 fa30 	bl	8013ff8 <strtok>
 800eb98:	2800      	cmp	r0, #0
 800eb9a:	d0f3      	beq.n	800eb84 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800eb9c:	4917      	ldr	r1, [pc, #92]	; (800ebfc <HttpDaemon::ParseHeaderField(char*)+0x88>)
 800eb9e:	f7ff ff4c 	bl	800ea3a <strcmp>
 800eba2:	b108      	cbz	r0, 800eba8 <HttpDaemon::ParseHeaderField(char*)+0x34>
 800eba4:	20c8      	movs	r0, #200	; 0xc8
 800eba6:	e7ef      	b.n	800eb88 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800eba8:	2301      	movs	r3, #1
 800ebaa:	f885 3020 	strb.w	r3, [r5, #32]
 800ebae:	e7f9      	b.n	800eba4 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	4913      	ldr	r1, [pc, #76]	; (800ec00 <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 800ebb4:	f7ff ff4e 	bl	800ea54 <strcasecmp>
 800ebb8:	4604      	mov	r4, r0
 800ebba:	2800      	cmp	r0, #0
 800ebbc:	d1f2      	bne.n	800eba4 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800ebbe:	4911      	ldr	r1, [pc, #68]	; (800ec04 <HttpDaemon::ParseHeaderField(char*)+0x90>)
 800ebc0:	f005 fa1a 	bl	8013ff8 <strtok>
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	d0dd      	beq.n	800eb84 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800ebc8:	1e42      	subs	r2, r0, #1
 800ebca:	4623      	mov	r3, r4
 800ebcc:	200a      	movs	r0, #10
 800ebce:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800ebd2:	b911      	cbnz	r1, 800ebda <HttpDaemon::ParseHeaderField(char*)+0x66>
 800ebd4:	f8a5 35c6 	strh.w	r3, [r5, #1478]	; 0x5c6
 800ebd8:	e7e4      	b.n	800eba4 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800ebda:	3930      	subs	r1, #48	; 0x30
 800ebdc:	2909      	cmp	r1, #9
 800ebde:	d8d1      	bhi.n	800eb84 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800ebe0:	fb00 1303 	mla	r3, r0, r3, r1
 800ebe4:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800ebe8:	d9f1      	bls.n	800ebce <HttpDaemon::ParseHeaderField(char*)+0x5a>
 800ebea:	f240 109d 	movw	r0, #413	; 0x19d
 800ebee:	e7cb      	b.n	800eb88 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800ebf0:	08017009 	stmdaeq	r1, {r0, r3, ip, sp, lr}
 800ebf4:	0801700b 	stmdaeq	r1, {r0, r1, r3, ip, sp, lr}
 800ebf8:	08017018 	stmdaeq	r1, {r3, r4, ip, sp, lr}
 800ebfc:	0801701b 	stmdaeq	r1, {r0, r1, r3, r4, ip, sp, lr}
 800ec00:	0801702c 	stmdaeq	r1, {r2, r3, r5, ip, sp, lr}
 800ec04:	0801822f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, pc}

0800ec08 <HttpDaemon::ParseRequest()>:
 800ec08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec0a:	2400      	movs	r4, #0
 800ec0c:	4605      	mov	r5, r0
 800ec0e:	4622      	mov	r2, r4
 800ec10:	4626      	mov	r6, r4
 800ec12:	68c1      	ldr	r1, [r0, #12]
 800ec14:	f880 4020 	strb.w	r4, [r0, #32]
 800ec18:	f8c0 45c4 	str.w	r4, [r0, #1476]	; 0x5c4
 800ec1c:	8aab      	ldrh	r3, [r5, #20]
 800ec1e:	42a3      	cmp	r3, r4
 800ec20:	d91e      	bls.n	800ec60 <HttpDaemon::ParseRequest()+0x58>
 800ec22:	68eb      	ldr	r3, [r5, #12]
 800ec24:	5d18      	ldrb	r0, [r3, r4]
 800ec26:	280a      	cmp	r0, #10
 800ec28:	d10e      	bne.n	800ec48 <HttpDaemon::ParseRequest()+0x40>
 800ec2a:	4423      	add	r3, r4
 800ec2c:	f803 6c01 	strb.w	r6, [r3, #-1]
 800ec30:	1c57      	adds	r7, r2, #1
 800ec32:	b962      	cbnz	r2, 800ec4e <HttpDaemon::ParseRequest()+0x46>
 800ec34:	4628      	mov	r0, r5
 800ec36:	f7ff ff57 	bl	800eae8 <HttpDaemon::ParseMethod(char*)>
 800ec3a:	28c8      	cmp	r0, #200	; 0xc8
 800ec3c:	d111      	bne.n	800ec62 <HttpDaemon::ParseRequest()+0x5a>
 800ec3e:	463a      	mov	r2, r7
 800ec40:	68e9      	ldr	r1, [r5, #12]
 800ec42:	3401      	adds	r4, #1
 800ec44:	b2a4      	uxth	r4, r4
 800ec46:	4421      	add	r1, r4
 800ec48:	3401      	adds	r4, #1
 800ec4a:	b2a4      	uxth	r4, r4
 800ec4c:	e7e6      	b.n	800ec1c <HttpDaemon::ParseRequest()+0x14>
 800ec4e:	7808      	ldrb	r0, [r1, #0]
 800ec50:	b970      	cbnz	r0, 800ec70 <HttpDaemon::ParseRequest()+0x68>
 800ec52:	696b      	ldr	r3, [r5, #20]
 800ec54:	3b01      	subs	r3, #1
 800ec56:	1b1b      	subs	r3, r3, r4
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	f8a5 35c4 	strh.w	r3, [r5, #1476]	; 0x5c4
 800ec5e:	b90b      	cbnz	r3, 800ec64 <HttpDaemon::ParseRequest()+0x5c>
 800ec60:	20c8      	movs	r0, #200	; 0xc8
 800ec62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec64:	68ea      	ldr	r2, [r5, #12]
 800ec66:	3401      	adds	r4, #1
 800ec68:	4414      	add	r4, r2
 800ec6a:	60ac      	str	r4, [r5, #8]
 800ec6c:	54e0      	strb	r0, [r4, r3]
 800ec6e:	e7f7      	b.n	800ec60 <HttpDaemon::ParseRequest()+0x58>
 800ec70:	4628      	mov	r0, r5
 800ec72:	f7ff ff7f 	bl	800eb74 <HttpDaemon::ParseHeaderField(char*)>
 800ec76:	e7e0      	b.n	800ec3a <HttpDaemon::ParseRequest()+0x32>

0800ec78 <HttpDaemon::HandleGetTxt()>:
 800ec78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec7c:	6847      	ldr	r7, [r0, #4]
 800ec7e:	4604      	mov	r4, r0
 800ec80:	1dbd      	adds	r5, r7, #6
 800ec82:	462b      	mov	r3, r5
 800ec84:	4618      	mov	r0, r3
 800ec86:	7802      	ldrb	r2, [r0, #0]
 800ec88:	3301      	adds	r3, #1
 800ec8a:	2a00      	cmp	r2, #0
 800ec8c:	d1fa      	bne.n	800ec84 <HttpDaemon::HandleGetTxt()+0xc>
 800ec8e:	1b40      	subs	r0, r0, r5
 800ec90:	2804      	cmp	r0, #4
 800ec92:	d803      	bhi.n	800ec9c <HttpDaemon::HandleGetTxt()+0x24>
 800ec94:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800ec98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec9c:	3804      	subs	r0, #4
 800ec9e:	4914      	ldr	r1, [pc, #80]	; (800ecf0 <HttpDaemon::HandleGetTxt()+0x78>)
 800eca0:	4428      	add	r0, r5
 800eca2:	f7ff feca 	bl	800ea3a <strcmp>
 800eca6:	2800      	cmp	r0, #0
 800eca8:	d1f4      	bne.n	800ec94 <HttpDaemon::HandleGetTxt()+0x1c>
 800ecaa:	4b12      	ldr	r3, [pc, #72]	; (800ecf4 <HttpDaemon::HandleGetTxt()+0x7c>)
 800ecac:	2001      	movs	r0, #1
 800ecae:	f893 8000 	ldrb.w	r8, [r3]
 800ecb2:	f7ff fee9 	bl	800ea88 <PropertiesConfig::EnableJSON(bool)>
 800ecb6:	4b10      	ldr	r3, [pc, #64]	; (800ecf8 <HttpDaemon::HandleGetTxt()+0x80>)
 800ecb8:	f240 529b 	movw	r2, #1435	; 0x59b
 800ecbc:	4629      	mov	r1, r5
 800ecbe:	6818      	ldr	r0, [r3, #0]
 800ecc0:	f7ff fa6c 	bl	800e19c <RemoteConfig::HandleGet(void*, unsigned int)>
 800ecc4:	4606      	mov	r6, r0
 800ecc6:	f008 0801 	and.w	r8, r8, #1
 800ecca:	4640      	mov	r0, r8
 800eccc:	f7ff fedc 	bl	800ea88 <PropertiesConfig::EnableJSON(bool)>
 800ecd0:	2e00      	cmp	r6, #0
 800ecd2:	d0df      	beq.n	800ec94 <HttpDaemon::HandleGetTxt()+0x1c>
 800ecd4:	f8a4 65c2 	strh.w	r6, [r4, #1474]	; 0x5c2
 800ecd8:	3606      	adds	r6, #6
 800ecda:	3422      	adds	r4, #34	; 0x22
 800ecdc:	4437      	add	r7, r6
 800ecde:	42bd      	cmp	r5, r7
 800ece0:	d101      	bne.n	800ece6 <HttpDaemon::HandleGetTxt()+0x6e>
 800ece2:	20c8      	movs	r0, #200	; 0xc8
 800ece4:	e7d8      	b.n	800ec98 <HttpDaemon::HandleGetTxt()+0x20>
 800ece6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ecea:	f804 3b01 	strb.w	r3, [r4], #1
 800ecee:	e7f6      	b.n	800ecde <HttpDaemon::HandleGetTxt()+0x66>
 800ecf0:	08016f34 	stmdaeq	r1, {r2, r4, r5, r8, r9, sl, fp, sp, lr}
 800ecf4:	2000a628 	andcs	sl, r0, r8, lsr #12
 800ecf8:	200016d4 	ldrdcs	r1, [r0], -r4

0800ecfc <HttpDaemon::HandleGet()>:
 800ecfc:	b570      	push	{r4, r5, r6, lr}
 800ecfe:	6845      	ldr	r5, [r0, #4]
 800ed00:	4604      	mov	r4, r0
 800ed02:	4943      	ldr	r1, [pc, #268]	; (800ee10 <HttpDaemon::HandleGet()+0x114>)
 800ed04:	4628      	mov	r0, r5
 800ed06:	f7ff fe98 	bl	800ea3a <strcmp>
 800ed0a:	b120      	cbz	r0, 800ed16 <HttpDaemon::HandleGet()+0x1a>
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	4941      	ldr	r1, [pc, #260]	; (800ee14 <HttpDaemon::HandleGet()+0x118>)
 800ed10:	f7ff fe93 	bl	800ea3a <strcmp>
 800ed14:	b960      	cbnz	r0, 800ed30 <HttpDaemon::HandleGet()+0x34>
 800ed16:	4621      	mov	r1, r4
 800ed18:	4b3f      	ldr	r3, [pc, #252]	; (800ee18 <HttpDaemon::HandleGet()+0x11c>)
 800ed1a:	4840      	ldr	r0, [pc, #256]	; (800ee1c <HttpDaemon::HandleGet()+0x120>)
 800ed1c:	f841 3b22 	str.w	r3, [r1], #34
 800ed20:	f000 fa7a 	bl	800f218 <get_file_content(char const*, char*)>
 800ed24:	2800      	cmp	r0, #0
 800ed26:	dd33      	ble.n	800ed90 <HttpDaemon::HandleGet()+0x94>
 800ed28:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800ed2c:	20c8      	movs	r0, #200	; 0xc8
 800ed2e:	bd70      	pop	{r4, r5, r6, pc}
 800ed30:	4628      	mov	r0, r5
 800ed32:	493b      	ldr	r1, [pc, #236]	; (800ee20 <HttpDaemon::HandleGet()+0x124>)
 800ed34:	f7ff fe81 	bl	800ea3a <strcmp>
 800ed38:	b928      	cbnz	r0, 800ed46 <HttpDaemon::HandleGet()+0x4a>
 800ed3a:	4621      	mov	r1, r4
 800ed3c:	4b39      	ldr	r3, [pc, #228]	; (800ee24 <HttpDaemon::HandleGet()+0x128>)
 800ed3e:	483a      	ldr	r0, [pc, #232]	; (800ee28 <HttpDaemon::HandleGet()+0x12c>)
 800ed40:	f841 3b22 	str.w	r3, [r1], #34
 800ed44:	e7ec      	b.n	800ed20 <HttpDaemon::HandleGet()+0x24>
 800ed46:	4628      	mov	r0, r5
 800ed48:	4938      	ldr	r1, [pc, #224]	; (800ee2c <HttpDaemon::HandleGet()+0x130>)
 800ed4a:	f7ff fe76 	bl	800ea3a <strcmp>
 800ed4e:	b198      	cbz	r0, 800ed78 <HttpDaemon::HandleGet()+0x7c>
 800ed50:	4a37      	ldr	r2, [pc, #220]	; (800ee30 <HttpDaemon::HandleGet()+0x134>)
 800ed52:	1e6b      	subs	r3, r5, #1
 800ed54:	1d69      	adds	r1, r5, #5
 800ed56:	428b      	cmp	r3, r1
 800ed58:	d114      	bne.n	800ed84 <HttpDaemon::HandleGet()+0x88>
 800ed5a:	4b36      	ldr	r3, [pc, #216]	; (800ee34 <HttpDaemon::HandleGet()+0x138>)
 800ed5c:	3506      	adds	r5, #6
 800ed5e:	4628      	mov	r0, r5
 800ed60:	4935      	ldr	r1, [pc, #212]	; (800ee38 <HttpDaemon::HandleGet()+0x13c>)
 800ed62:	6023      	str	r3, [r4, #0]
 800ed64:	f7ff fe69 	bl	800ea3a <strcmp>
 800ed68:	b9a8      	cbnz	r0, 800ed96 <HttpDaemon::HandleGet()+0x9a>
 800ed6a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800ed6e:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800ed72:	f000 f9d9 	bl	800f128 <remoteconfig::json_get_list(char*, unsigned short)>
 800ed76:	e7d5      	b.n	800ed24 <HttpDaemon::HandleGet()+0x28>
 800ed78:	4621      	mov	r1, r4
 800ed7a:	4b30      	ldr	r3, [pc, #192]	; (800ee3c <HttpDaemon::HandleGet()+0x140>)
 800ed7c:	4830      	ldr	r0, [pc, #192]	; (800ee40 <HttpDaemon::HandleGet()+0x144>)
 800ed7e:	f841 3b22 	str.w	r3, [r1], #34
 800ed82:	e7cd      	b.n	800ed20 <HttpDaemon::HandleGet()+0x24>
 800ed84:	f812 0b01 	ldrb.w	r0, [r2], #1
 800ed88:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800ed8c:	4286      	cmp	r6, r0
 800ed8e:	d0e2      	beq.n	800ed56 <HttpDaemon::HandleGet()+0x5a>
 800ed90:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800ed94:	e7cb      	b.n	800ed2e <HttpDaemon::HandleGet()+0x32>
 800ed96:	4628      	mov	r0, r5
 800ed98:	492a      	ldr	r1, [pc, #168]	; (800ee44 <HttpDaemon::HandleGet()+0x148>)
 800ed9a:	f7ff fe4e 	bl	800ea3a <strcmp>
 800ed9e:	b930      	cbnz	r0, 800edae <HttpDaemon::HandleGet()+0xb2>
 800eda0:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800eda4:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800eda8:	f000 f9f2 	bl	800f190 <remoteconfig::json_get_version(char*, unsigned short)>
 800edac:	e7ba      	b.n	800ed24 <HttpDaemon::HandleGet()+0x28>
 800edae:	4628      	mov	r0, r5
 800edb0:	4925      	ldr	r1, [pc, #148]	; (800ee48 <HttpDaemon::HandleGet()+0x14c>)
 800edb2:	f7ff fe42 	bl	800ea3a <strcmp>
 800edb6:	b958      	cbnz	r0, 800edd0 <HttpDaemon::HandleGet()+0xd4>
 800edb8:	4b24      	ldr	r3, [pc, #144]	; (800ee4c <HttpDaemon::HandleGet()+0x150>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f893 35d7 	ldrb.w	r3, [r3, #1495]	; 0x5d7
 800edc0:	b31b      	cbz	r3, 800ee0a <HttpDaemon::HandleGet()+0x10e>
 800edc2:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800edc6:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800edca:	f000 f9fd 	bl	800f1c8 <remoteconfig::json_get_uptime(char*, unsigned short)>
 800edce:	e7a9      	b.n	800ed24 <HttpDaemon::HandleGet()+0x28>
 800edd0:	4628      	mov	r0, r5
 800edd2:	491f      	ldr	r1, [pc, #124]	; (800ee50 <HttpDaemon::HandleGet()+0x154>)
 800edd4:	f7ff fe31 	bl	800ea3a <strcmp>
 800edd8:	b930      	cbnz	r0, 800ede8 <HttpDaemon::HandleGet()+0xec>
 800edda:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800edde:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800ede2:	f000 fa01 	bl	800f1e8 <remoteconfig::json_get_display(char*, unsigned short)>
 800ede6:	e79d      	b.n	800ed24 <HttpDaemon::HandleGet()+0x28>
 800ede8:	4628      	mov	r0, r5
 800edea:	491a      	ldr	r1, [pc, #104]	; (800ee54 <HttpDaemon::HandleGet()+0x158>)
 800edec:	f7ff fe25 	bl	800ea3a <strcmp>
 800edf0:	b930      	cbnz	r0, 800ee00 <HttpDaemon::HandleGet()+0x104>
 800edf2:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800edf6:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800edfa:	f000 fa05 	bl	800f208 <remoteconfig::json_get_directory(char*, unsigned short)>
 800edfe:	e791      	b.n	800ed24 <HttpDaemon::HandleGet()+0x28>
 800ee00:	4620      	mov	r0, r4
 800ee02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee06:	f7ff bf37 	b.w	800ec78 <HttpDaemon::HandleGetTxt()>
 800ee0a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800ee0e:	e78e      	b.n	800ed2e <HttpDaemon::HandleGet()+0x32>
 800ee10:	08017062 	stmdaeq	r1, {r1, r5, r6, ip, sp, lr}
 800ee14:	0801703b 	stmdaeq	r1, {r0, r1, r3, r4, r5, ip, sp, lr}
 800ee18:	0801724e 	stmdaeq	r1, {r1, r2, r3, r6, r9, ip, sp, lr}
 800ee1c:	0801703c 	stmdaeq	r1, {r2, r3, r4, r5, ip, sp, lr}
 800ee20:	08017047 	stmdaeq	r1, {r0, r1, r2, r6, ip, sp, lr}
 800ee24:	0801726e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r9, ip, sp, lr}
 800ee28:	08017048 	stmdaeq	r1, {r3, r6, ip, sp, lr}
 800ee2c:	08017053 	stmdaeq	r1, {r0, r1, r4, r6, ip, sp, lr}
 800ee30:	0801705d 	stmdaeq	r1, {r0, r2, r3, r4, r6, ip, sp, lr}
 800ee34:	080172ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r9, ip, sp, lr}
 800ee38:	08017064 	stmdaeq	r1, {r2, r5, r6, ip, sp, lr}
 800ee3c:	0801728e 	stmdaeq	r1, {r1, r2, r3, r7, r9, ip, sp, lr}
 800ee40:	08017054 	stmdaeq	r1, {r2, r4, r6, ip, sp, lr}
 800ee44:	08017069 	stmdaeq	r1, {r0, r3, r5, r6, ip, sp, lr}
 800ee48:	08017071 	stmdaeq	r1, {r0, r4, r5, r6, ip, sp, lr}
 800ee4c:	200016d4 	ldrdcs	r1, [r0], -r4
 800ee50:	08017078 	stmdaeq	r1, {r3, r4, r5, r6, ip, sp, lr}
 800ee54:	08017080 	stmdaeq	r1, {r7, ip, sp, lr}

0800ee58 <HttpDaemon::HandlePost(bool)>:
 800ee58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ee5a:	4604      	mov	r4, r0
 800ee5c:	2900      	cmp	r1, #0
 800ee5e:	f040 8091 	bne.w	800ef84 <HttpDaemon::HandlePost(bool)+0x12c>
 800ee62:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d05d      	beq.n	800ef26 <HttpDaemon::HandlePost(bool)+0xce>
 800ee6a:	6845      	ldr	r5, [r0, #4]
 800ee6c:	4948      	ldr	r1, [pc, #288]	; (800ef90 <HttpDaemon::HandlePost(bool)+0x138>)
 800ee6e:	4628      	mov	r0, r5
 800ee70:	f7ff fde3 	bl	800ea3a <strcmp>
 800ee74:	2800      	cmp	r0, #0
 800ee76:	bf0c      	ite	eq
 800ee78:	2301      	moveq	r3, #1
 800ee7a:	2300      	movne	r3, #0
 800ee7c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 800ee80:	d055      	beq.n	800ef2e <HttpDaemon::HandlePost(bool)+0xd6>
 800ee82:	4628      	mov	r0, r5
 800ee84:	4943      	ldr	r1, [pc, #268]	; (800ef94 <HttpDaemon::HandlePost(bool)+0x13c>)
 800ee86:	f7ff fdd8 	bl	800ea3a <strcmp>
 800ee8a:	2800      	cmp	r0, #0
 800ee8c:	d04f      	beq.n	800ef2e <HttpDaemon::HandlePost(bool)+0xd6>
 800ee8e:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800ee92:	e04a      	b.n	800ef2a <HttpDaemon::HandlePost(bool)+0xd2>
 800ee94:	4940      	ldr	r1, [pc, #256]	; (800ef98 <HttpDaemon::HandlePost(bool)+0x140>)
 800ee96:	68a0      	ldr	r0, [r4, #8]
 800ee98:	f10d 0207 	add.w	r2, sp, #7
 800ee9c:	f003 ffdf 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800eea0:	b9e8      	cbnz	r0, 800eede <HttpDaemon::HandlePost(bool)+0x86>
 800eea2:	f89d 6007 	ldrb.w	r6, [sp, #7]
 800eea6:	4b3d      	ldr	r3, [pc, #244]	; (800ef9c <HttpDaemon::HandlePost(bool)+0x144>)
 800eea8:	fab6 f186 	clz	r1, r6
 800eeac:	681d      	ldr	r5, [r3, #0]
 800eeae:	0949      	lsrs	r1, r1, #5
 800eeb0:	69a8      	ldr	r0, [r5, #24]
 800eeb2:	b138      	cbz	r0, 800eec4 <HttpDaemon::HandlePost(bool)+0x6c>
 800eeb4:	6803      	ldr	r3, [r0, #0]
 800eeb6:	7429      	strb	r1, [r5, #16]
 800eeb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeba:	4798      	blx	r3
 800eebc:	b116      	cbz	r6, 800eec4 <HttpDaemon::HandlePost(bool)+0x6c>
 800eebe:	4b38      	ldr	r3, [pc, #224]	; (800efa0 <HttpDaemon::HandlePost(bool)+0x148>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	606b      	str	r3, [r5, #4]
 800eec4:	4620      	mov	r0, r4
 800eec6:	4b37      	ldr	r3, [pc, #220]	; (800efa4 <HttpDaemon::HandlePost(bool)+0x14c>)
 800eec8:	f240 519f 	movw	r1, #1439	; 0x59f
 800eecc:	4a36      	ldr	r2, [pc, #216]	; (800efa8 <HttpDaemon::HandlePost(bool)+0x150>)
 800eece:	f840 3b22 	str.w	r3, [r0], #34
 800eed2:	f005 f861 	bl	8013f98 <snprintf>
 800eed6:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800eeda:	20c8      	movs	r0, #200	; 0xc8
 800eedc:	e025      	b.n	800ef2a <HttpDaemon::HandlePost(bool)+0xd2>
 800eede:	4933      	ldr	r1, [pc, #204]	; (800efac <HttpDaemon::HandlePost(bool)+0x154>)
 800eee0:	68a0      	ldr	r0, [r4, #8]
 800eee2:	f10d 0207 	add.w	r2, sp, #7
 800eee6:	f003 ffba 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800eeea:	b9e0      	cbnz	r0, 800ef26 <HttpDaemon::HandlePost(bool)+0xce>
 800eeec:	4b30      	ldr	r3, [pc, #192]	; (800efb0 <HttpDaemon::HandlePost(bool)+0x158>)
 800eeee:	6818      	ldr	r0, [r3, #0]
 800eef0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eef4:	b11b      	cbz	r3, 800eefe <HttpDaemon::HandlePost(bool)+0xa6>
 800eef6:	2104      	movs	r1, #4
 800eef8:	f004 fb4a 	bl	8013590 <LedBlink::SetMode(ledblink::Mode)>
 800eefc:	e7e2      	b.n	800eec4 <HttpDaemon::HandlePost(bool)+0x6c>
 800eefe:	2102      	movs	r1, #2
 800ef00:	e7fa      	b.n	800eef8 <HttpDaemon::HandlePost(bool)+0xa0>
 800ef02:	4b2c      	ldr	r3, [pc, #176]	; (800efb4 <HttpDaemon::HandlePost(bool)+0x15c>)
 800ef04:	2001      	movs	r0, #1
 800ef06:	781d      	ldrb	r5, [r3, #0]
 800ef08:	f7ff fdbe 	bl	800ea88 <PropertiesConfig::EnableJSON(bool)>
 800ef0c:	4b2a      	ldr	r3, [pc, #168]	; (800efb8 <HttpDaemon::HandlePost(bool)+0x160>)
 800ef0e:	f8b4 25c4 	ldrh.w	r2, [r4, #1476]	; 0x5c4
 800ef12:	6818      	ldr	r0, [r3, #0]
 800ef14:	68a1      	ldr	r1, [r4, #8]
 800ef16:	f005 0501 	and.w	r5, r5, #1
 800ef1a:	f7ff fa11 	bl	800e340 <RemoteConfig::HandleSet(void*, unsigned int)>
 800ef1e:	4628      	mov	r0, r5
 800ef20:	f7ff fdb2 	bl	800ea88 <PropertiesConfig::EnableJSON(bool)>
 800ef24:	e7ce      	b.n	800eec4 <HttpDaemon::HandlePost(bool)+0x6c>
 800ef26:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800ef2a:	b002      	add	sp, #8
 800ef2c:	bd70      	pop	{r4, r5, r6, pc}
 800ef2e:	f8b4 35c6 	ldrh.w	r3, [r4, #1478]	; 0x5c6
 800ef32:	6962      	ldr	r2, [r4, #20]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	dbd0      	blt.n	800eeda <HttpDaemon::HandlePost(bool)+0x82>
 800ef38:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d0cc      	beq.n	800eeda <HttpDaemon::HandlePost(bool)+0x82>
 800ef40:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d0dc      	beq.n	800ef02 <HttpDaemon::HandlePost(bool)+0xaa>
 800ef48:	2201      	movs	r2, #1
 800ef4a:	f8b4 15c4 	ldrh.w	r1, [r4, #1476]	; 0x5c4
 800ef4e:	68a0      	ldr	r0, [r4, #8]
 800ef50:	f003 fcc6 	bl	80128e0 <properties::convert_json_file(char*, unsigned short, bool)>
 800ef54:	2800      	cmp	r0, #0
 800ef56:	dde6      	ble.n	800ef26 <HttpDaemon::HandlePost(bool)+0xce>
 800ef58:	4918      	ldr	r1, [pc, #96]	; (800efbc <HttpDaemon::HandlePost(bool)+0x164>)
 800ef5a:	68a0      	ldr	r0, [r4, #8]
 800ef5c:	f10d 0207 	add.w	r2, sp, #7
 800ef60:	f003 ff7d 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ef64:	2800      	cmp	r0, #0
 800ef66:	d195      	bne.n	800ee94 <HttpDaemon::HandlePost(bool)+0x3c>
 800ef68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d0a9      	beq.n	800eec4 <HttpDaemon::HandlePost(bool)+0x6c>
 800ef70:	4b11      	ldr	r3, [pc, #68]	; (800efb8 <HttpDaemon::HandlePost(bool)+0x160>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f893 35d6 	ldrb.w	r3, [r3, #1494]	; 0x5d6
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d0d4      	beq.n	800ef26 <HttpDaemon::HandlePost(bool)+0xce>
 800ef7c:	4b10      	ldr	r3, [pc, #64]	; (800efc0 <HttpDaemon::HandlePost(bool)+0x168>)
 800ef7e:	6818      	ldr	r0, [r3, #0]
 800ef80:	f004 fbac 	bl	80136dc <Hardware::Reboot()>
 800ef84:	68c3      	ldr	r3, [r0, #12]
 800ef86:	6083      	str	r3, [r0, #8]
 800ef88:	6943      	ldr	r3, [r0, #20]
 800ef8a:	f8a0 35c4 	strh.w	r3, [r0, #1476]	; 0x5c4
 800ef8e:	e7d7      	b.n	800ef40 <HttpDaemon::HandlePost(bool)+0xe8>
 800ef90:	0801708a 	stmdaeq	r1, {r1, r3, r7, ip, sp, lr}
 800ef94:	08017026 	stmdaeq	r1, {r1, r2, r5, ip, sp, lr}
 800ef98:	08017078 	stmdaeq	r1, {r3, r4, r5, r6, ip, sp, lr}
 800ef9c:	2000a62c 	andcs	sl, r0, ip, lsr #12
 800efa0:	2000a734 	andcs	sl, r0, r4, lsr r7
 800efa4:	0801724e 	stmdaeq	r1, {r1, r2, r3, r6, r9, ip, sp, lr}
 800efa8:	080170a7 	stmdaeq	r1, {r0, r1, r2, r5, r7, ip, sp, lr}
 800efac:	0801709e 	stmdaeq	r1, {r1, r2, r3, r4, r7, ip, sp, lr}
 800efb0:	2000a718 	andcs	sl, r0, r8, lsl r7
 800efb4:	2000a628 	andcs	sl, r0, r8, lsr #12
 800efb8:	200016d4 	ldrdcs	r1, [r0], -r4
 800efbc:	08017097 	stmdaeq	r1, {r0, r1, r2, r4, r7, ip, sp, lr}
 800efc0:	2000a71c 	andcs	sl, r0, ip, lsl r7

0800efc4 <HttpDaemon::Run()>:
 800efc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efc6:	4e4a      	ldr	r6, [pc, #296]	; (800f0f0 <HttpDaemon::Run()+0x12c>)
 800efc8:	4604      	mov	r4, r0
 800efca:	6901      	ldr	r1, [r0, #16]
 800efcc:	f100 020c 	add.w	r2, r0, #12
 800efd0:	b085      	sub	sp, #20
 800efd2:	6830      	ldr	r0, [r6, #0]
 800efd4:	f002 f98f 	bl	80112f6 <Network::TcpRead(int, unsigned char const**)>
 800efd8:	6160      	str	r0, [r4, #20]
 800efda:	2800      	cmp	r0, #0
 800efdc:	d061      	beq.n	800f0a2 <HttpDaemon::Run()+0xde>
 800efde:	69a3      	ldr	r3, [r4, #24]
 800efe0:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800efe4:	d15f      	bne.n	800f0a6 <HttpDaemon::Run()+0xe2>
 800efe6:	4620      	mov	r0, r4
 800efe8:	f7ff fe0e 	bl	800ec08 <HttpDaemon::ParseRequest()>
 800efec:	28c8      	cmp	r0, #200	; 0xc8
 800efee:	61a0      	str	r0, [r4, #24]
 800eff0:	d106      	bne.n	800f000 <HttpDaemon::Run()+0x3c>
 800eff2:	69e3      	ldr	r3, [r4, #28]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d147      	bne.n	800f088 <HttpDaemon::Run()+0xc4>
 800eff8:	4620      	mov	r0, r4
 800effa:	f7ff fe7f 	bl	800ecfc <HttpDaemon::HandleGet()>
 800effe:	61a0      	str	r0, [r4, #24]
 800f000:	69a3      	ldr	r3, [r4, #24]
 800f002:	f104 0722 	add.w	r7, r4, #34	; 0x22
 800f006:	2bc8      	cmp	r3, #200	; 0xc8
 800f008:	d06f      	beq.n	800f0ea <HttpDaemon::Run()+0x126>
 800f00a:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800f00e:	d062      	beq.n	800f0d6 <HttpDaemon::Run()+0x112>
 800f010:	dc52      	bgt.n	800f0b8 <HttpDaemon::Run()+0xf4>
 800f012:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800f016:	d060      	beq.n	800f0da <HttpDaemon::Run()+0x116>
 800f018:	f240 129d 	movw	r2, #413	; 0x19d
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d05e      	beq.n	800f0de <HttpDaemon::Run()+0x11a>
 800f020:	4d34      	ldr	r5, [pc, #208]	; (800f0f4 <HttpDaemon::Run()+0x130>)
 800f022:	4a35      	ldr	r2, [pc, #212]	; (800f0f8 <HttpDaemon::Run()+0x134>)
 800f024:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800f028:	bf18      	it	ne
 800f02a:	4615      	movne	r5, r2
 800f02c:	4a33      	ldr	r2, [pc, #204]	; (800f0fc <HttpDaemon::Run()+0x138>)
 800f02e:	f240 519f 	movw	r1, #1439	; 0x59f
 800f032:	6022      	str	r2, [r4, #0]
 800f034:	4638      	mov	r0, r7
 800f036:	e9cd 5500 	strd	r5, r5, [sp]
 800f03a:	4a31      	ldr	r2, [pc, #196]	; (800f100 <HttpDaemon::Run()+0x13c>)
 800f03c:	f004 ffac 	bl	8013f98 <snprintf>
 800f040:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800f044:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800f048:	f240 519f 	movw	r1, #1439	; 0x59f
 800f04c:	9303      	str	r3, [sp, #12]
 800f04e:	6823      	ldr	r3, [r4, #0]
 800f050:	4a2c      	ldr	r2, [pc, #176]	; (800f104 <HttpDaemon::Run()+0x140>)
 800f052:	9302      	str	r3, [sp, #8]
 800f054:	4b2c      	ldr	r3, [pc, #176]	; (800f108 <HttpDaemon::Run()+0x144>)
 800f056:	68e0      	ldr	r0, [r4, #12]
 800f058:	e9cd 5300 	strd	r5, r3, [sp]
 800f05c:	69a3      	ldr	r3, [r4, #24]
 800f05e:	f004 ff9b 	bl	8013f98 <snprintf>
 800f062:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800f066:	b283      	uxth	r3, r0
 800f068:	6830      	ldr	r0, [r6, #0]
 800f06a:	f002 f948 	bl	80112fe <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800f06e:	463a      	mov	r2, r7
 800f070:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800f074:	6921      	ldr	r1, [r4, #16]
 800f076:	6830      	ldr	r0, [r6, #0]
 800f078:	f002 f941 	bl	80112fe <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800f07c:	f44f 7202 	mov.w	r2, #520	; 0x208
 800f080:	2302      	movs	r3, #2
 800f082:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800f086:	e00c      	b.n	800f0a2 <HttpDaemon::Run()+0xde>
 800f088:	2b01      	cmp	r3, #1
 800f08a:	d1b9      	bne.n	800f000 <HttpDaemon::Run()+0x3c>
 800f08c:	2100      	movs	r1, #0
 800f08e:	4620      	mov	r0, r4
 800f090:	f7ff fee2 	bl	800ee58 <HttpDaemon::HandlePost(bool)>
 800f094:	28c8      	cmp	r0, #200	; 0xc8
 800f096:	61a0      	str	r0, [r4, #24]
 800f098:	d1b2      	bne.n	800f000 <HttpDaemon::Run()+0x3c>
 800f09a:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d1ae      	bne.n	800f000 <HttpDaemon::Run()+0x3c>
 800f0a2:	b005      	add	sp, #20
 800f0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0a6:	2bc8      	cmp	r3, #200	; 0xc8
 800f0a8:	d1aa      	bne.n	800f000 <HttpDaemon::Run()+0x3c>
 800f0aa:	69e1      	ldr	r1, [r4, #28]
 800f0ac:	2901      	cmp	r1, #1
 800f0ae:	d1a7      	bne.n	800f000 <HttpDaemon::Run()+0x3c>
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	f7ff fed1 	bl	800ee58 <HttpDaemon::HandlePost(bool)>
 800f0b6:	e7a2      	b.n	800effe <HttpDaemon::Run()+0x3a>
 800f0b8:	f240 12f5 	movw	r2, #501	; 0x1f5
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	d010      	beq.n	800f0e2 <HttpDaemon::Run()+0x11e>
 800f0c0:	f240 12f9 	movw	r2, #505	; 0x1f9
 800f0c4:	4293      	cmp	r3, r2
 800f0c6:	d00e      	beq.n	800f0e6 <HttpDaemon::Run()+0x122>
 800f0c8:	4d10      	ldr	r5, [pc, #64]	; (800f10c <HttpDaemon::Run()+0x148>)
 800f0ca:	4a0b      	ldr	r2, [pc, #44]	; (800f0f8 <HttpDaemon::Run()+0x134>)
 800f0cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800f0d0:	bf18      	it	ne
 800f0d2:	4615      	movne	r5, r2
 800f0d4:	e7aa      	b.n	800f02c <HttpDaemon::Run()+0x68>
 800f0d6:	4d0e      	ldr	r5, [pc, #56]	; (800f110 <HttpDaemon::Run()+0x14c>)
 800f0d8:	e7a8      	b.n	800f02c <HttpDaemon::Run()+0x68>
 800f0da:	4d0e      	ldr	r5, [pc, #56]	; (800f114 <HttpDaemon::Run()+0x150>)
 800f0dc:	e7a6      	b.n	800f02c <HttpDaemon::Run()+0x68>
 800f0de:	4d0e      	ldr	r5, [pc, #56]	; (800f118 <HttpDaemon::Run()+0x154>)
 800f0e0:	e7a4      	b.n	800f02c <HttpDaemon::Run()+0x68>
 800f0e2:	4d0e      	ldr	r5, [pc, #56]	; (800f11c <HttpDaemon::Run()+0x158>)
 800f0e4:	e7a2      	b.n	800f02c <HttpDaemon::Run()+0x68>
 800f0e6:	4d0e      	ldr	r5, [pc, #56]	; (800f120 <HttpDaemon::Run()+0x15c>)
 800f0e8:	e7a0      	b.n	800f02c <HttpDaemon::Run()+0x68>
 800f0ea:	4d0e      	ldr	r5, [pc, #56]	; (800f124 <HttpDaemon::Run()+0x160>)
 800f0ec:	e7aa      	b.n	800f044 <HttpDaemon::Run()+0x80>
 800f0ee:	bf00      	nop
 800f0f0:	20009ff4 	strdcs	r9, [r0], -r4
 800f0f4:	08017103 	stmdaeq	r1, {r0, r1, r8, ip, sp, lr}
 800f0f8:	0801718a 	stmdaeq	r1, {r1, r3, r7, r8, ip, sp, lr}
 800f0fc:	0801724e 	stmdaeq	r1, {r1, r2, r3, r6, r9, ip, sp, lr}
 800f100:	0801719b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r8, ip, sp, lr}
 800f104:	080171f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, ip, sp, lr}
 800f108:	0801662f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, sl, sp, lr}
 800f10c:	08017147 	stmdaeq	r1, {r0, r1, r2, r6, r8, ip, sp, lr}
 800f110:	08017132 	stmdaeq	r1, {r1, r4, r5, r8, ip, sp, lr}
 800f114:	0801710f 	stmdaeq	r1, {r0, r1, r2, r3, r8, ip, sp, lr}
 800f118:	08017119 	stmdaeq	r1, {r0, r3, r4, r8, ip, sp, lr}
 800f11c:	0801715d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, ip, sp, lr}
 800f120:	08017174 	stmdaeq	r1, {r2, r4, r5, r6, r8, ip, sp, lr}
 800f124:	08017198 	stmdaeq	r1, {r3, r4, r7, r8, ip, sp, lr}

0800f128 <remoteconfig::json_get_list(char*, unsigned short)>:
 800f128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f12c:	4b14      	ldr	r3, [pc, #80]	; (800f180 <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 800f12e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800f184 <remoteconfig::json_get_list(char*, unsigned short)+0x5c>
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	b088      	sub	sp, #32
 800f136:	4605      	mov	r5, r0
 800f138:	f8d8 0000 	ldr.w	r0, [r8]
 800f13c:	691c      	ldr	r4, [r3, #16]
 800f13e:	460e      	mov	r6, r1
 800f140:	f7fe ffd8 	bl	800e0f4 <RemoteConfig::GetStringNode() const>
 800f144:	4607      	mov	r7, r0
 800f146:	f8d8 0000 	ldr.w	r0, [r8]
 800f14a:	f7fe ffdf 	bl	800e10c <RemoteConfig::GetStringOutput() const>
 800f14e:	4b0e      	ldr	r3, [pc, #56]	; (800f188 <remoteconfig::json_get_list(char*, unsigned short)+0x60>)
 800f150:	4631      	mov	r1, r6
 800f152:	7a1a      	ldrb	r2, [r3, #8]
 800f154:	3309      	adds	r3, #9
 800f156:	9303      	str	r3, [sp, #12]
 800f158:	0e23      	lsrs	r3, r4, #24
 800f15a:	9302      	str	r3, [sp, #8]
 800f15c:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800f160:	9301      	str	r3, [sp, #4]
 800f162:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800f166:	e9cd 0205 	strd	r0, r2, [sp, #20]
 800f16a:	9300      	str	r3, [sp, #0]
 800f16c:	4628      	mov	r0, r5
 800f16e:	4a07      	ldr	r2, [pc, #28]	; (800f18c <remoteconfig::json_get_list(char*, unsigned short)+0x64>)
 800f170:	9704      	str	r7, [sp, #16]
 800f172:	b2e3      	uxtb	r3, r4
 800f174:	f004 ff10 	bl	8013f98 <snprintf>
 800f178:	b280      	uxth	r0, r0
 800f17a:	b008      	add	sp, #32
 800f17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f180:	20009ff4 	strdcs	r9, [r0], -r4
 800f184:	200016d4 	ldrdcs	r1, [r0], -r4
 800f188:	200016b0 			; <UNDEFINED> instruction: 0x200016b0
 800f18c:	08017328 	stmdaeq	r1, {r3, r5, r8, r9, ip, sp, lr}

0800f190 <remoteconfig::json_get_version(char*, unsigned short)>:
 800f190:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f192:	2208      	movs	r2, #8
 800f194:	4b09      	ldr	r3, [pc, #36]	; (800f1bc <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 800f196:	9204      	str	r2, [sp, #16]
 800f198:	f1a3 020b 	sub.w	r2, r3, #11
 800f19c:	9203      	str	r2, [sp, #12]
 800f19e:	220b      	movs	r2, #11
 800f1a0:	9202      	str	r2, [sp, #8]
 800f1a2:	4a07      	ldr	r2, [pc, #28]	; (800f1c0 <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 800f1a4:	9305      	str	r3, [sp, #20]
 800f1a6:	3b0e      	subs	r3, #14
 800f1a8:	9201      	str	r2, [sp, #4]
 800f1aa:	9300      	str	r3, [sp, #0]
 800f1ac:	4a05      	ldr	r2, [pc, #20]	; (800f1c4 <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 800f1ae:	2303      	movs	r3, #3
 800f1b0:	f004 fef2 	bl	8013f98 <snprintf>
 800f1b4:	b280      	uxth	r0, r0
 800f1b6:	b007      	add	sp, #28
 800f1b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f1bc:	2000a6ca 	andcs	sl, r0, sl, asr #13
 800f1c0:	0801662f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, sl, sp, lr}
 800f1c4:	08017387 	stmdaeq	r1, {r0, r1, r2, r7, r8, r9, ip, sp, lr}

0800f1c8 <remoteconfig::json_get_uptime(char*, unsigned short)>:
 800f1c8:	b508      	push	{r3, lr}
 800f1ca:	4b05      	ldr	r3, [pc, #20]	; (800f1e0 <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f1d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1d6:	4a03      	ldr	r2, [pc, #12]	; (800f1e4 <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 800f1d8:	f004 fede 	bl	8013f98 <snprintf>
 800f1dc:	b280      	uxth	r0, r0
 800f1de:	bd08      	pop	{r3, pc}
 800f1e0:	2000a734 	andcs	sl, r0, r4, lsr r7
 800f1e4:	080173cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, ip, sp, lr}

0800f1e8 <remoteconfig::json_get_display(char*, unsigned short)>:
 800f1e8:	b508      	push	{r3, lr}
 800f1ea:	4b05      	ldr	r3, [pc, #20]	; (800f200 <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 800f1ec:	4a05      	ldr	r2, [pc, #20]	; (800f204 <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	7c1b      	ldrb	r3, [r3, #16]
 800f1f2:	f083 0301 	eor.w	r3, r3, #1
 800f1f6:	f004 fecf 	bl	8013f98 <snprintf>
 800f1fa:	b280      	uxth	r0, r0
 800f1fc:	bd08      	pop	{r3, pc}
 800f1fe:	bf00      	nop
 800f200:	2000a62c 	andcs	sl, r0, ip, lsr #12
 800f204:	080173dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, r9, ip, sp, lr}

0800f208 <remoteconfig::json_get_directory(char*, unsigned short)>:
 800f208:	b508      	push	{r3, lr}
 800f20a:	4a02      	ldr	r2, [pc, #8]	; (800f214 <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 800f20c:	f004 fec4 	bl	8013f98 <snprintf>
 800f210:	b280      	uxth	r0, r0
 800f212:	bd08      	pop	{r3, pc}
 800f214:	080173eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, r9, ip, sp, lr}

0800f218 <get_file_content(char const*, char*)>:
 800f218:	2300      	movs	r3, #0
 800f21a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f21c:	4a18      	ldr	r2, [pc, #96]	; (800f280 <get_file_content(char const*, char*)+0x68>)
 800f21e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800f222:	1e47      	subs	r7, r0, #1
 800f224:	1e6e      	subs	r6, r5, #1
 800f226:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 800f22a:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 800f22e:	4564      	cmp	r4, ip
 800f230:	d00b      	beq.n	800f24a <get_file_content(char const*, char*)+0x32>
 800f232:	3301      	adds	r3, #1
 800f234:	2b03      	cmp	r3, #3
 800f236:	d1f2      	bne.n	800f21e <get_file_content(char const*, char*)+0x6>
 800f238:	2333      	movs	r3, #51	; 0x33
 800f23a:	4a12      	ldr	r2, [pc, #72]	; (800f284 <get_file_content(char const*, char*)+0x6c>)
 800f23c:	4912      	ldr	r1, [pc, #72]	; (800f288 <get_file_content(char const*, char*)+0x70>)
 800f23e:	4813      	ldr	r0, [pc, #76]	; (800f28c <get_file_content(char const*, char*)+0x74>)
 800f240:	f004 fe82 	bl	8013f48 <printf>
 800f244:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f248:	e016      	b.n	800f278 <get_file_content(char const*, char*)+0x60>
 800f24a:	2c00      	cmp	r4, #0
 800f24c:	d1eb      	bne.n	800f226 <get_file_content(char const*, char*)+0xe>
 800f24e:	460c      	mov	r4, r1
 800f250:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f254:	6853      	ldr	r3, [r2, #4]
 800f256:	3b01      	subs	r3, #1
 800f258:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800f25c:	f804 2b01 	strb.w	r2, [r4], #1
 800f260:	2a00      	cmp	r2, #0
 800f262:	d1f9      	bne.n	800f258 <get_file_content(char const*, char*)+0x40>
 800f264:	1a64      	subs	r4, r4, r1
 800f266:	3c01      	subs	r4, #1
 800f268:	232e      	movs	r3, #46	; 0x2e
 800f26a:	e9cd 5400 	strd	r5, r4, [sp]
 800f26e:	4a06      	ldr	r2, [pc, #24]	; (800f288 <get_file_content(char const*, char*)+0x70>)
 800f270:	4904      	ldr	r1, [pc, #16]	; (800f284 <get_file_content(char const*, char*)+0x6c>)
 800f272:	4807      	ldr	r0, [pc, #28]	; (800f290 <get_file_content(char const*, char*)+0x78>)
 800f274:	f004 fe68 	bl	8013f48 <printf>
 800f278:	4620      	mov	r0, r4
 800f27a:	b003      	add	sp, #12
 800f27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f27e:	bf00      	nop
 800f280:	08017784 	stmdaeq	r1, {r2, r7, r8, r9, sl, ip, sp, lr}
 800f284:	080174a2 	stmdaeq	r1, {r1, r5, r7, sl, ip, sp, lr}
 800f288:	08017483 	stmdaeq	r1, {r0, r1, r7, sl, ip, sp, lr}
 800f28c:	080174cf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, sl, ip, sp, lr}
 800f290:	080174b3 	stmdaeq	r1, {r0, r1, r4, r5, r7, sl, ip, sp, lr}

0800f294 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 800f294:	2300      	movs	r3, #0
 800f296:	2020      	movs	r0, #32
 800f298:	b510      	push	{r4, lr}
 800f29a:	4a04      	ldr	r2, [pc, #16]	; (800f2ac <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 800f29c:	428b      	cmp	r3, r1
 800f29e:	d100      	bne.n	800f2a2 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0xe>
 800f2a0:	bd10      	pop	{r4, pc}
 800f2a2:	f852 4b04 	ldr.w	r4, [r2], #4
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	4420      	add	r0, r4
 800f2aa:	e7f7      	b.n	800f29c <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 800f2ac:	08017cc8 	stmdaeq	r1, {r3, r6, r7, sl, fp, ip, sp, lr}

0800f2b0 <SpiFlashStore::Init()>:
 800f2b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f2b4:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800f3cc <SpiFlashStore::Init()+0x11c>
 800f2b8:	4607      	mov	r7, r0
 800f2ba:	b085      	sub	sp, #20
 800f2bc:	f8d8 0000 	ldr.w	r0, [r8]
 800f2c0:	f000 fc60 	bl	800fb84 <FlashRom::GetSectorSize() const>
 800f2c4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800f2c8:	4605      	mov	r5, r0
 800f2ca:	d17d      	bne.n	800f3c8 <SpiFlashStore::Init()+0x118>
 800f2cc:	f8d8 0000 	ldr.w	r0, [r8]
 800f2d0:	f000 fc50 	bl	800fb74 <FlashRom::GetSize() const>
 800f2d4:	4b3e      	ldr	r3, [pc, #248]	; (800f3d0 <SpiFlashStore::Init()+0x120>)
 800f2d6:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 800f2da:	f3c1 060b 	ubfx	r6, r1, #0, #12
 800f2de:	6019      	str	r1, [r3, #0]
 800f2e0:	2e00      	cmp	r6, #0
 800f2e2:	d171      	bne.n	800f3c8 <SpiFlashStore::Init()+0x118>
 800f2e4:	4c3b      	ldr	r4, [pc, #236]	; (800f3d4 <SpiFlashStore::Init()+0x124>)
 800f2e6:	ab03      	add	r3, sp, #12
 800f2e8:	9300      	str	r3, [sp, #0]
 800f2ea:	462a      	mov	r2, r5
 800f2ec:	4623      	mov	r3, r4
 800f2ee:	f8d8 0000 	ldr.w	r0, [r8]
 800f2f2:	f000 fc4a 	bl	800fb8a <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 800f2f6:	7823      	ldrb	r3, [r4, #0]
 800f2f8:	2b41      	cmp	r3, #65	; 0x41
 800f2fa:	bf1c      	itt	ne
 800f2fc:	2341      	movne	r3, #65	; 0x41
 800f2fe:	7023      	strbne	r3, [r4, #0]
 800f300:	7863      	ldrb	r3, [r4, #1]
 800f302:	bf14      	ite	ne
 800f304:	4635      	movne	r5, r6
 800f306:	2501      	moveq	r5, #1
 800f308:	2b76      	cmp	r3, #118	; 0x76
 800f30a:	bf1c      	itt	ne
 800f30c:	2376      	movne	r3, #118	; 0x76
 800f30e:	7063      	strbne	r3, [r4, #1]
 800f310:	78a3      	ldrb	r3, [r4, #2]
 800f312:	bf18      	it	ne
 800f314:	2500      	movne	r5, #0
 800f316:	2b56      	cmp	r3, #86	; 0x56
 800f318:	bf1c      	itt	ne
 800f31a:	2356      	movne	r3, #86	; 0x56
 800f31c:	70a3      	strbne	r3, [r4, #2]
 800f31e:	78e3      	ldrb	r3, [r4, #3]
 800f320:	bf18      	it	ne
 800f322:	2500      	movne	r5, #0
 800f324:	2b10      	cmp	r3, #16
 800f326:	d022      	beq.n	800f36e <SpiFlashStore::Init()+0xbe>
 800f328:	2310      	movs	r3, #16
 800f32a:	70e3      	strb	r3, [r4, #3]
 800f32c:	2201      	movs	r2, #1
 800f32e:	2500      	movs	r5, #0
 800f330:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800f334:	4b28      	ldr	r3, [pc, #160]	; (800f3d8 <SpiFlashStore::Init()+0x128>)
 800f336:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800f3dc <SpiFlashStore::Init()+0x12c>
 800f33a:	701a      	strb	r2, [r3, #0]
 800f33c:	4631      	mov	r1, r6
 800f33e:	4638      	mov	r0, r7
 800f340:	f7ff ffa8 	bl	800f294 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800f344:	1823      	adds	r3, r4, r0
 800f346:	5425      	strb	r5, [r4, r0]
 800f348:	705d      	strb	r5, [r3, #1]
 800f34a:	709d      	strb	r5, [r3, #2]
 800f34c:	70dd      	strb	r5, [r3, #3]
 800f34e:	f858 3b04 	ldr.w	r3, [r8], #4
 800f352:	1d02      	adds	r2, r0, #4
 800f354:	4403      	add	r3, r0
 800f356:	429a      	cmp	r2, r3
 800f358:	d332      	bcc.n	800f3c0 <SpiFlashStore::Init()+0x110>
 800f35a:	3601      	adds	r6, #1
 800f35c:	2e1c      	cmp	r6, #28
 800f35e:	d1ed      	bne.n	800f33c <SpiFlashStore::Init()+0x8c>
 800f360:	2501      	movs	r5, #1
 800f362:	4b1f      	ldr	r3, [pc, #124]	; (800f3e0 <SpiFlashStore::Init()+0x130>)
 800f364:	601d      	str	r5, [r3, #0]
 800f366:	4628      	mov	r0, r5
 800f368:	b005      	add	sp, #20
 800f36a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f36e:	2d00      	cmp	r5, #0
 800f370:	d0dc      	beq.n	800f32c <SpiFlashStore::Init()+0x7c>
 800f372:	f04f 0900 	mov.w	r9, #0
 800f376:	46c8      	mov	r8, r9
 800f378:	4631      	mov	r1, r6
 800f37a:	4638      	mov	r0, r7
 800f37c:	f7ff ff8a 	bl	800f294 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800f380:	5c23      	ldrb	r3, [r4, r0]
 800f382:	2bff      	cmp	r3, #255	; 0xff
 800f384:	d112      	bne.n	800f3ac <SpiFlashStore::Init()+0xfc>
 800f386:	1823      	adds	r3, r4, r0
 800f388:	785a      	ldrb	r2, [r3, #1]
 800f38a:	2aff      	cmp	r2, #255	; 0xff
 800f38c:	d10e      	bne.n	800f3ac <SpiFlashStore::Init()+0xfc>
 800f38e:	789a      	ldrb	r2, [r3, #2]
 800f390:	2aff      	cmp	r2, #255	; 0xff
 800f392:	d10b      	bne.n	800f3ac <SpiFlashStore::Init()+0xfc>
 800f394:	78da      	ldrb	r2, [r3, #3]
 800f396:	2aff      	cmp	r2, #255	; 0xff
 800f398:	d108      	bne.n	800f3ac <SpiFlashStore::Init()+0xfc>
 800f39a:	46a9      	mov	r9, r5
 800f39c:	f804 8000 	strb.w	r8, [r4, r0]
 800f3a0:	f883 8001 	strb.w	r8, [r3, #1]
 800f3a4:	f883 8002 	strb.w	r8, [r3, #2]
 800f3a8:	f883 8003 	strb.w	r8, [r3, #3]
 800f3ac:	3601      	adds	r6, #1
 800f3ae:	2e1c      	cmp	r6, #28
 800f3b0:	d1e2      	bne.n	800f378 <SpiFlashStore::Init()+0xc8>
 800f3b2:	f1b9 0f00 	cmp.w	r9, #0
 800f3b6:	d0d6      	beq.n	800f366 <SpiFlashStore::Init()+0xb6>
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	4b09      	ldr	r3, [pc, #36]	; (800f3e0 <SpiFlashStore::Init()+0x130>)
 800f3bc:	601a      	str	r2, [r3, #0]
 800f3be:	e7d2      	b.n	800f366 <SpiFlashStore::Init()+0xb6>
 800f3c0:	f804 9002 	strb.w	r9, [r4, r2]
 800f3c4:	3201      	adds	r2, #1
 800f3c6:	e7c6      	b.n	800f356 <SpiFlashStore::Init()+0xa6>
 800f3c8:	2500      	movs	r5, #0
 800f3ca:	e7cc      	b.n	800f366 <SpiFlashStore::Init()+0xb6>
 800f3cc:	2000270c 	andcs	r2, r0, ip, lsl #14
 800f3d0:	200026dc 	ldrdcs	r2, [r0], -ip
 800f3d4:	200016dc 	ldrdcs	r1, [r0], -ip
 800f3d8:	200026f0 	strdcs	r2, [r0], -r0
 800f3dc:	08017cc8 	stmdaeq	r1, {r3, r6, r7, sl, fp, ip, sp, lr}
 800f3e0:	200026e8 	andcs	r2, r0, r8, ror #13

0800f3e4 <SpiFlashStore::SpiFlashStore()>:
 800f3e4:	b538      	push	{r3, r4, r5, lr}
 800f3e6:	4b0d      	ldr	r3, [pc, #52]	; (800f41c <SpiFlashStore::SpiFlashStore()+0x38>)
 800f3e8:	4604      	mov	r4, r0
 800f3ea:	6018      	str	r0, [r3, #0]
 800f3ec:	4b0c      	ldr	r3, [pc, #48]	; (800f420 <SpiFlashStore::SpiFlashStore()+0x3c>)
 800f3ee:	4d0d      	ldr	r5, [pc, #52]	; (800f424 <SpiFlashStore::SpiFlashStore()+0x40>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	b113      	cbz	r3, 800f3fc <SpiFlashStore::SpiFlashStore()+0x18>
 800f3f6:	f7ff ff5b 	bl	800f2b0 <SpiFlashStore::Init()>
 800f3fa:	7028      	strb	r0, [r5, #0]
 800f3fc:	782b      	ldrb	r3, [r5, #0]
 800f3fe:	b153      	cbz	r3, 800f416 <SpiFlashStore::SpiFlashStore()+0x32>
 800f400:	2320      	movs	r3, #32
 800f402:	2200      	movs	r2, #0
 800f404:	4908      	ldr	r1, [pc, #32]	; (800f428 <SpiFlashStore::SpiFlashStore()+0x44>)
 800f406:	f851 0b04 	ldr.w	r0, [r1], #4
 800f40a:	3201      	adds	r2, #1
 800f40c:	2a1c      	cmp	r2, #28
 800f40e:	4403      	add	r3, r0
 800f410:	d1f9      	bne.n	800f406 <SpiFlashStore::SpiFlashStore()+0x22>
 800f412:	4a06      	ldr	r2, [pc, #24]	; (800f42c <SpiFlashStore::SpiFlashStore()+0x48>)
 800f414:	6013      	str	r3, [r2, #0]
 800f416:	4620      	mov	r0, r4
 800f418:	bd38      	pop	{r3, r4, r5, pc}
 800f41a:	bf00      	nop
 800f41c:	200026ec 	andcs	r2, r0, ip, ror #13
 800f420:	2000270c 	andcs	r2, r0, ip, lsl #14
 800f424:	200026e0 	andcs	r2, r0, r0, ror #13
 800f428:	08017cc8 	stmdaeq	r1, {r3, r6, r7, sl, fp, ip, sp, lr}
 800f42c:	200026e4 	andcs	r2, r0, r4, ror #13

0800f430 <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 800f430:	b508      	push	{r3, lr}
 800f432:	f7ff ff2f 	bl	800f294 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800f436:	2300      	movs	r3, #0
 800f438:	4904      	ldr	r1, [pc, #16]	; (800f44c <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 800f43a:	1842      	adds	r2, r0, r1
 800f43c:	540b      	strb	r3, [r1, r0]
 800f43e:	7053      	strb	r3, [r2, #1]
 800f440:	7093      	strb	r3, [r2, #2]
 800f442:	70d3      	strb	r3, [r2, #3]
 800f444:	2201      	movs	r2, #1
 800f446:	4b02      	ldr	r3, [pc, #8]	; (800f450 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 800f448:	601a      	str	r2, [r3, #0]
 800f44a:	bd08      	pop	{r3, pc}
 800f44c:	200016dc 	ldrdcs	r1, [r0], -ip
 800f450:	200026e8 	andcs	r2, r0, r8, ror #13

0800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 800f454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f458:	461c      	mov	r4, r3
 800f45a:	4b19      	ldr	r3, [pc, #100]	; (800f4c0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 800f45c:	4615      	mov	r5, r2
 800f45e:	781f      	ldrb	r7, [r3, #0]
 800f460:	9e07      	ldr	r6, [sp, #28]
 800f462:	b307      	cbz	r7, 800f4a6 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800f464:	f7ff ff16 	bl	800f294 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800f468:	f04f 0c00 	mov.w	ip, #0
 800f46c:	4a15      	ldr	r2, [pc, #84]	; (800f4c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 800f46e:	1941      	adds	r1, r0, r5
 800f470:	1e63      	subs	r3, r4, #1
 800f472:	9c06      	ldr	r4, [sp, #24]
 800f474:	4411      	add	r1, r2
 800f476:	440c      	add	r4, r1
 800f478:	42a1      	cmp	r1, r4
 800f47a:	d116      	bne.n	800f4aa <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 800f47c:	f1bc 0f00 	cmp.w	ip, #0
 800f480:	d011      	beq.n	800f4a6 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800f482:	4b11      	ldr	r3, [pc, #68]	; (800f4c8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 800f484:	6819      	ldr	r1, [r3, #0]
 800f486:	b109      	cbz	r1, 800f48c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 800f488:	2906      	cmp	r1, #6
 800f48a:	d101      	bne.n	800f490 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 800f48c:	2101      	movs	r1, #1
 800f48e:	6019      	str	r1, [r3, #0]
 800f490:	4b0e      	ldr	r3, [pc, #56]	; (800f4cc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 800f492:	6819      	ldr	r1, [r3, #0]
 800f494:	4b0e      	ldr	r3, [pc, #56]	; (800f4d0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 800f496:	6019      	str	r1, [r3, #0]
 800f498:	b12d      	cbz	r5, 800f4a6 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800f49a:	b126      	cbz	r6, 800f4a6 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800f49c:	9b08      	ldr	r3, [sp, #32]
 800f49e:	4418      	add	r0, r3
 800f4a0:	5813      	ldr	r3, [r2, r0]
 800f4a2:	4333      	orrs	r3, r6
 800f4a4:	5013      	str	r3, [r2, r0]
 800f4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4aa:	f891 8000 	ldrb.w	r8, [r1]
 800f4ae:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800f4b2:	3101      	adds	r1, #1
 800f4b4:	45f0      	cmp	r8, lr
 800f4b6:	bf1c      	itt	ne
 800f4b8:	f801 ec01 	strbne.w	lr, [r1, #-1]
 800f4bc:	46bc      	movne	ip, r7
 800f4be:	e7db      	b.n	800f478 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 800f4c0:	200026e0 	andcs	r2, r0, r0, ror #13
 800f4c4:	200016dc 	ldrdcs	r1, [r0], -ip
 800f4c8:	200026e8 	andcs	r2, r0, r8, ror #13
 800f4cc:	2000a734 	andcs	sl, r0, r4, lsr r7
 800f4d0:	200016d8 	ldrdcs	r1, [r0], -r8

0800f4d4 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>:
 800f4d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f4d8:	461d      	mov	r5, r3
 800f4da:	4b11      	ldr	r3, [pc, #68]	; (800f520 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x4c>)
 800f4dc:	4607      	mov	r7, r0
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	4614      	mov	r4, r2
 800f4e2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800f4e6:	b1c3      	cbz	r3, 800f51a <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x46>
 800f4e8:	f7ff fed4 	bl	800f294 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800f4ec:	4a0d      	ldr	r2, [pc, #52]	; (800f524 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x50>)
 800f4ee:	eb00 0608 	add.w	r6, r0, r8
 800f4f2:	5990      	ldr	r0, [r2, r6]
 800f4f4:	18b3      	adds	r3, r6, r2
 800f4f6:	b140      	cbz	r0, 800f50a <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x36>
 800f4f8:	3c01      	subs	r4, #1
 800f4fa:	441d      	add	r5, r3
 800f4fc:	429d      	cmp	r5, r3
 800f4fe:	d00c      	beq.n	800f51a <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x46>
 800f500:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f504:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f508:	e7f8      	b.n	800f4fc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x28>
 800f50a:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800f50e:	4623      	mov	r3, r4
 800f510:	4642      	mov	r2, r8
 800f512:	4638      	mov	r0, r7
 800f514:	9500      	str	r5, [sp, #0]
 800f516:	f7ff ff9d 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f51a:	b004      	add	sp, #16
 800f51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f520:	200026e0 	andcs	r2, r0, r0, ror #13
 800f524:	200016dc 	ldrdcs	r1, [r0], -ip

0800f528 <SpiFlashStore::Flash()>:
 800f528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f52a:	4c25      	ldr	r4, [pc, #148]	; (800f5c0 <SpiFlashStore::Flash()+0x98>)
 800f52c:	6820      	ldr	r0, [r4, #0]
 800f52e:	2800      	cmp	r0, #0
 800f530:	d043      	beq.n	800f5ba <SpiFlashStore::Flash()+0x92>
 800f532:	3801      	subs	r0, #1
 800f534:	2805      	cmp	r0, #5
 800f536:	d831      	bhi.n	800f59c <SpiFlashStore::Flash()+0x74>
 800f538:	e8df f000 	tbb	[pc, r0]
 800f53c:	2e140b03 	vnmlscs.f64	d0, d4, d3
 800f540:	4b203025 	blmi	881b5dc <__exidx_end+0x802de0>
 800f544:	681a      	ldr	r2, [r3, #0]
 800f546:	4b20      	ldr	r3, [pc, #128]	; (800f5c8 <SpiFlashStore::Flash()+0xa0>)
 800f548:	601a      	str	r2, [r3, #0]
 800f54a:	2302      	movs	r3, #2
 800f54c:	6023      	str	r3, [r4, #0]
 800f54e:	2001      	movs	r0, #1
 800f550:	e033      	b.n	800f5ba <SpiFlashStore::Flash()+0x92>
 800f552:	4b1c      	ldr	r3, [pc, #112]	; (800f5c4 <SpiFlashStore::Flash()+0x9c>)
 800f554:	4a1c      	ldr	r2, [pc, #112]	; (800f5c8 <SpiFlashStore::Flash()+0xa0>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	6812      	ldr	r2, [r2, #0]
 800f55a:	1a9b      	subs	r3, r3, r2
 800f55c:	2b63      	cmp	r3, #99	; 0x63
 800f55e:	d9f6      	bls.n	800f54e <SpiFlashStore::Flash()+0x26>
 800f560:	2303      	movs	r3, #3
 800f562:	e7f3      	b.n	800f54c <SpiFlashStore::Flash()+0x24>
 800f564:	4919      	ldr	r1, [pc, #100]	; (800f5cc <SpiFlashStore::Flash()+0xa4>)
 800f566:	481a      	ldr	r0, [pc, #104]	; (800f5d0 <SpiFlashStore::Flash()+0xa8>)
 800f568:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f56c:	6809      	ldr	r1, [r1, #0]
 800f56e:	6800      	ldr	r0, [r0, #0]
 800f570:	ab03      	add	r3, sp, #12
 800f572:	f000 fb19 	bl	800fba8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 800f576:	2800      	cmp	r0, #0
 800f578:	d0e9      	beq.n	800f54e <SpiFlashStore::Flash()+0x26>
 800f57a:	4b12      	ldr	r3, [pc, #72]	; (800f5c4 <SpiFlashStore::Flash()+0x9c>)
 800f57c:	681a      	ldr	r2, [r3, #0]
 800f57e:	4b12      	ldr	r3, [pc, #72]	; (800f5c8 <SpiFlashStore::Flash()+0xa0>)
 800f580:	601a      	str	r2, [r3, #0]
 800f582:	2305      	movs	r3, #5
 800f584:	e7e2      	b.n	800f54c <SpiFlashStore::Flash()+0x24>
 800f586:	4b0f      	ldr	r3, [pc, #60]	; (800f5c4 <SpiFlashStore::Flash()+0x9c>)
 800f588:	4a0f      	ldr	r2, [pc, #60]	; (800f5c8 <SpiFlashStore::Flash()+0xa0>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	6812      	ldr	r2, [r2, #0]
 800f58e:	1a9b      	subs	r3, r3, r2
 800f590:	2b63      	cmp	r3, #99	; 0x63
 800f592:	d9dc      	bls.n	800f54e <SpiFlashStore::Flash()+0x26>
 800f594:	2304      	movs	r3, #4
 800f596:	e7d9      	b.n	800f54c <SpiFlashStore::Flash()+0x24>
 800f598:	2306      	movs	r3, #6
 800f59a:	e7d7      	b.n	800f54c <SpiFlashStore::Flash()+0x24>
 800f59c:	ab03      	add	r3, sp, #12
 800f59e:	4a0d      	ldr	r2, [pc, #52]	; (800f5d4 <SpiFlashStore::Flash()+0xac>)
 800f5a0:	490a      	ldr	r1, [pc, #40]	; (800f5cc <SpiFlashStore::Flash()+0xa4>)
 800f5a2:	480b      	ldr	r0, [pc, #44]	; (800f5d0 <SpiFlashStore::Flash()+0xa8>)
 800f5a4:	9300      	str	r3, [sp, #0]
 800f5a6:	6812      	ldr	r2, [r2, #0]
 800f5a8:	4b0b      	ldr	r3, [pc, #44]	; (800f5d8 <SpiFlashStore::Flash()+0xb0>)
 800f5aa:	6809      	ldr	r1, [r1, #0]
 800f5ac:	6800      	ldr	r0, [r0, #0]
 800f5ae:	f000 fb9b 	bl	800fce8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 800f5b2:	2800      	cmp	r0, #0
 800f5b4:	d0cb      	beq.n	800f54e <SpiFlashStore::Flash()+0x26>
 800f5b6:	2000      	movs	r0, #0
 800f5b8:	6020      	str	r0, [r4, #0]
 800f5ba:	b004      	add	sp, #16
 800f5bc:	bd10      	pop	{r4, pc}
 800f5be:	bf00      	nop
 800f5c0:	200026e8 	andcs	r2, r0, r8, ror #13
 800f5c4:	2000a734 	andcs	sl, r0, r4, lsr r7
 800f5c8:	200016d8 	ldrdcs	r1, [r0], -r8
 800f5cc:	200026dc 	ldrdcs	r2, [r0], -ip
 800f5d0:	2000270c 	andcs	r2, r0, ip, lsl #14
 800f5d4:	200026e4 	andcs	r2, r0, r4, ror #13
 800f5d8:	200016dc 	ldrdcs	r1, [r0], -ip

0800f5dc <StoreArtNet::~StoreArtNet()>:
 800f5dc:	4770      	bx	lr

0800f5de <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 800f5de:	3804      	subs	r0, #4
 800f5e0:	4770      	bx	lr
	...

0800f5e4 <StoreArtNet::Update(artnetparams::Params const*)>:
 800f5e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	2187      	movs	r1, #135	; 0x87
 800f5ec:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800f5f0:	4804      	ldr	r0, [pc, #16]	; (800f604 <StoreArtNet::Update(artnetparams::Params const*)+0x20>)
 800f5f2:	9100      	str	r1, [sp, #0]
 800f5f4:	6800      	ldr	r0, [r0, #0]
 800f5f6:	2101      	movs	r1, #1
 800f5f8:	f7ff ff2c 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f5fc:	b005      	add	sp, #20
 800f5fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800f602:	bf00      	nop
 800f604:	200026ec 	andcs	r2, r0, ip, ror #13

0800f608 <StoreArtNet::SaveShortName(char const*)>:
 800f608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f60a:	460b      	mov	r3, r1
 800f60c:	2202      	movs	r2, #2
 800f60e:	2100      	movs	r1, #0
 800f610:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f614:	2212      	movs	r2, #18
 800f616:	4805      	ldr	r0, [pc, #20]	; (800f62c <StoreArtNet::SaveShortName(char const*)+0x24>)
 800f618:	9200      	str	r2, [sp, #0]
 800f61a:	2101      	movs	r1, #1
 800f61c:	220c      	movs	r2, #12
 800f61e:	6800      	ldr	r0, [r0, #0]
 800f620:	f7ff ff18 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f624:	b005      	add	sp, #20
 800f626:	f85d fb04 	ldr.w	pc, [sp], #4
 800f62a:	bf00      	nop
 800f62c:	200026ec 	andcs	r2, r0, ip, ror #13

0800f630 <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
 800f630:	f1a0 0004 	sub.w	r0, r0, #4
 800f634:	f7ff bfe8 	b.w	800f608 <StoreArtNet::SaveShortName(char const*)>

0800f638 <StoreArtNet::SaveLongName(char const*)>:
 800f638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f63a:	460b      	mov	r3, r1
 800f63c:	2200      	movs	r2, #0
 800f63e:	2101      	movs	r1, #1
 800f640:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800f644:	2240      	movs	r2, #64	; 0x40
 800f646:	4804      	ldr	r0, [pc, #16]	; (800f658 <StoreArtNet::SaveLongName(char const*)+0x20>)
 800f648:	9200      	str	r2, [sp, #0]
 800f64a:	6800      	ldr	r0, [r0, #0]
 800f64c:	221e      	movs	r2, #30
 800f64e:	f7ff ff01 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f652:	b005      	add	sp, #20
 800f654:	f85d fb04 	ldr.w	pc, [sp], #4
 800f658:	200026ec 	andcs	r2, r0, ip, ror #13

0800f65c <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
 800f65c:	f1a0 0004 	sub.w	r0, r0, #4
 800f660:	f7ff bfea 	b.w	800f638 <StoreArtNet::SaveLongName(char const*)>

0800f664 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 800f664:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f666:	2300      	movs	r3, #0
 800f668:	9302      	str	r3, [sp, #8]
 800f66a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f66e:	4608      	mov	r0, r1
 800f670:	408b      	lsls	r3, r1
 800f672:	2101      	movs	r1, #1
 800f674:	f88d 2017 	strb.w	r2, [sp, #23]
 800f678:	f100 0267 	add.w	r2, r0, #103	; 0x67
 800f67c:	4805      	ldr	r0, [pc, #20]	; (800f694 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x30>)
 800f67e:	9301      	str	r3, [sp, #4]
 800f680:	9100      	str	r1, [sp, #0]
 800f682:	6800      	ldr	r0, [r0, #0]
 800f684:	f10d 0317 	add.w	r3, sp, #23
 800f688:	f7ff fee4 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f68c:	b007      	add	sp, #28
 800f68e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f692:	bf00      	nop
 800f694:	200026ec 	andcs	r2, r0, ip, ror #13

0800f698 <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 800f698:	f1a0 0004 	sub.w	r0, r0, #4
 800f69c:	f7ff bfe2 	b.w	800f664 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

0800f6a0 <StoreArtNet::SaveNetSwitch(unsigned char)>:
 800f6a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f6a2:	2204      	movs	r2, #4
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	f88d 1017 	strb.w	r1, [sp, #23]
 800f6aa:	2101      	movs	r1, #1
 800f6ac:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800f6b0:	4804      	ldr	r0, [pc, #16]	; (800f6c4 <StoreArtNet::SaveNetSwitch(unsigned char)+0x24>)
 800f6b2:	9100      	str	r1, [sp, #0]
 800f6b4:	6800      	ldr	r0, [r0, #0]
 800f6b6:	f10d 0317 	add.w	r3, sp, #23
 800f6ba:	f7ff fecb 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f6be:	b007      	add	sp, #28
 800f6c0:	f85d fb04 	ldr.w	pc, [sp], #4
 800f6c4:	200026ec 	andcs	r2, r0, ip, ror #13

0800f6c8 <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned char)>:
 800f6c8:	f1a0 0004 	sub.w	r0, r0, #4
 800f6cc:	f7ff bfe8 	b.w	800f6a0 <StoreArtNet::SaveNetSwitch(unsigned char)>

0800f6d0 <StoreArtNet::SaveSubnetSwitch(unsigned char)>:
 800f6d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f6d2:	2308      	movs	r3, #8
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	f88d 1017 	strb.w	r1, [sp, #23]
 800f6da:	2101      	movs	r1, #1
 800f6dc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f6e0:	4805      	ldr	r0, [pc, #20]	; (800f6f8 <StoreArtNet::SaveSubnetSwitch(unsigned char)+0x28>)
 800f6e2:	9100      	str	r1, [sp, #0]
 800f6e4:	2205      	movs	r2, #5
 800f6e6:	6800      	ldr	r0, [r0, #0]
 800f6e8:	f10d 0317 	add.w	r3, sp, #23
 800f6ec:	f7ff feb2 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f6f0:	b007      	add	sp, #28
 800f6f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f6f6:	bf00      	nop
 800f6f8:	200026ec 	andcs	r2, r0, ip, ror #13

0800f6fc <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned char)>:
 800f6fc:	f1a0 0004 	sub.w	r0, r0, #4
 800f700:	f7ff bfe6 	b.w	800f6d0 <StoreArtNet::SaveSubnetSwitch(unsigned char)>

0800f704 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 800f704:	b530      	push	{r4, r5, lr}
 800f706:	b087      	sub	sp, #28
 800f708:	460c      	mov	r4, r1
 800f70a:	4d0f      	ldr	r5, [pc, #60]	; (800f748 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x44>)
 800f70c:	9205      	str	r2, [sp, #20]
 800f70e:	b951      	cbnz	r1, 800f726 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x22>
 800f710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f714:	9102      	str	r1, [sp, #8]
 800f716:	2101      	movs	r1, #1
 800f718:	226b      	movs	r2, #107	; 0x6b
 800f71a:	e9cd 1300 	strd	r1, r3, [sp]
 800f71e:	6828      	ldr	r0, [r5, #0]
 800f720:	ab05      	add	r3, sp, #20
 800f722:	f7ff fe97 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f726:	2300      	movs	r3, #0
 800f728:	9302      	str	r3, [sp, #8]
 800f72a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f72e:	2101      	movs	r1, #1
 800f730:	40a3      	lsls	r3, r4
 800f732:	9301      	str	r3, [sp, #4]
 800f734:	6828      	ldr	r0, [r5, #0]
 800f736:	9100      	str	r1, [sp, #0]
 800f738:	ab05      	add	r3, sp, #20
 800f73a:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 800f73e:	f7ff fe89 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f742:	b007      	add	sp, #28
 800f744:	bd30      	pop	{r4, r5, pc}
 800f746:	bf00      	nop
 800f748:	200026ec 	andcs	r2, r0, ip, ror #13

0800f74c <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 800f74c:	f1a0 0004 	sub.w	r0, r0, #4
 800f750:	f7ff bfd8 	b.w	800f704 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

0800f754 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 800f754:	b530      	push	{r4, r5, lr}
 800f756:	b087      	sub	sp, #28
 800f758:	460c      	mov	r4, r1
 800f75a:	4d0f      	ldr	r5, [pc, #60]	; (800f798 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x44>)
 800f75c:	9205      	str	r2, [sp, #20]
 800f75e:	b951      	cbnz	r1, 800f776 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x22>
 800f760:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f764:	9102      	str	r1, [sp, #8]
 800f766:	2101      	movs	r1, #1
 800f768:	2270      	movs	r2, #112	; 0x70
 800f76a:	e9cd 1300 	strd	r1, r3, [sp]
 800f76e:	6828      	ldr	r0, [r5, #0]
 800f770:	ab05      	add	r3, sp, #20
 800f772:	f7ff fe6f 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f776:	2300      	movs	r3, #0
 800f778:	9302      	str	r3, [sp, #8]
 800f77a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f77e:	2101      	movs	r1, #1
 800f780:	40a3      	lsls	r3, r4
 800f782:	9301      	str	r3, [sp, #4]
 800f784:	6828      	ldr	r0, [r5, #0]
 800f786:	9100      	str	r1, [sp, #0]
 800f788:	ab05      	add	r3, sp, #20
 800f78a:	f104 0271 	add.w	r2, r4, #113	; 0x71
 800f78e:	f7ff fe61 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f792:	b007      	add	sp, #28
 800f794:	bd30      	pop	{r4, r5, pc}
 800f796:	bf00      	nop
 800f798:	200026ec 	andcs	r2, r0, ip, ror #13

0800f79c <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 800f79c:	f1a0 0004 	sub.w	r0, r0, #4
 800f7a0:	f7ff bfd8 	b.w	800f754 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

0800f7a4 <StoreArtNet::~StoreArtNet()>:
 800f7a4:	b510      	push	{r4, lr}
 800f7a6:	4604      	mov	r4, r0
 800f7a8:	f003 ffd6 	bl	8013758 <operator delete(void*)>
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	bd10      	pop	{r4, pc}

0800f7b0 <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 800f7b0:	f1a0 0004 	sub.w	r0, r0, #4
 800f7b4:	e7f6      	b.n	800f7a4 <StoreArtNet::~StoreArtNet()>
	...

0800f7b8 <StoreArtNet::Copy(artnetparams::Params*)>:
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	b507      	push	{r0, r1, r2, lr}
 800f7bc:	4805      	ldr	r0, [pc, #20]	; (800f7d4 <StoreArtNet::Copy(artnetparams::Params*)+0x1c>)
 800f7be:	9300      	str	r3, [sp, #0]
 800f7c0:	460a      	mov	r2, r1
 800f7c2:	2387      	movs	r3, #135	; 0x87
 800f7c4:	2101      	movs	r1, #1
 800f7c6:	6800      	ldr	r0, [r0, #0]
 800f7c8:	f7ff fe84 	bl	800f4d4 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800f7cc:	b003      	add	sp, #12
 800f7ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800f7d2:	bf00      	nop
 800f7d4:	200026ec 	andcs	r2, r0, ip, ror #13

0800f7d8 <StoreArtNet::StoreArtNet()>:
 800f7d8:	4a04      	ldr	r2, [pc, #16]	; (800f7ec <StoreArtNet::StoreArtNet()+0x14>)
 800f7da:	f102 0108 	add.w	r1, r2, #8
 800f7de:	323c      	adds	r2, #60	; 0x3c
 800f7e0:	6042      	str	r2, [r0, #4]
 800f7e2:	4a03      	ldr	r2, [pc, #12]	; (800f7f0 <StoreArtNet::StoreArtNet()+0x18>)
 800f7e4:	6001      	str	r1, [r0, #0]
 800f7e6:	6010      	str	r0, [r2, #0]
 800f7e8:	4770      	bx	lr
 800f7ea:	bf00      	nop
 800f7ec:	08017d38 	stmdaeq	r1, {r3, r4, r5, r8, sl, fp, ip, sp, lr}
 800f7f0:	200026f4 	strdcs	r2, [r0], -r4

0800f7f4 <StoreDisplayUdf::~StoreDisplayUdf()>:
 800f7f4:	4770      	bx	lr
	...

0800f7f8 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	b507      	push	{r0, r1, r2, lr}
 800f7fc:	4805      	ldr	r0, [pc, #20]	; (800f814 <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x1c>)
 800f7fe:	9300      	str	r3, [sp, #0]
 800f800:	460a      	mov	r2, r1
 800f802:	2322      	movs	r3, #34	; 0x22
 800f804:	210f      	movs	r1, #15
 800f806:	6800      	ldr	r0, [r0, #0]
 800f808:	f7ff fe64 	bl	800f4d4 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800f80c:	b003      	add	sp, #12
 800f80e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f812:	bf00      	nop
 800f814:	200026ec 	andcs	r2, r0, ip, ror #13

0800f818 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 800f818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f81a:	2200      	movs	r2, #0
 800f81c:	460b      	mov	r3, r1
 800f81e:	2122      	movs	r1, #34	; 0x22
 800f820:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800f824:	4804      	ldr	r0, [pc, #16]	; (800f838 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 800f826:	9100      	str	r1, [sp, #0]
 800f828:	6800      	ldr	r0, [r0, #0]
 800f82a:	210f      	movs	r1, #15
 800f82c:	f7ff fe12 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f830:	b005      	add	sp, #20
 800f832:	f85d fb04 	ldr.w	pc, [sp], #4
 800f836:	bf00      	nop
 800f838:	200026ec 	andcs	r2, r0, ip, ror #13

0800f83c <StoreDisplayUdf::~StoreDisplayUdf()>:
 800f83c:	b510      	push	{r4, lr}
 800f83e:	4604      	mov	r4, r0
 800f840:	f003 ff8a 	bl	8013758 <operator delete(void*)>
 800f844:	4620      	mov	r0, r4
 800f846:	bd10      	pop	{r4, pc}

0800f848 <StoreDisplayUdf::StoreDisplayUdf()>:
 800f848:	4a02      	ldr	r2, [pc, #8]	; (800f854 <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 800f84a:	6002      	str	r2, [r0, #0]
 800f84c:	4a02      	ldr	r2, [pc, #8]	; (800f858 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 800f84e:	6010      	str	r0, [r2, #0]
 800f850:	4770      	bx	lr
 800f852:	bf00      	nop
 800f854:	08017da0 	stmdaeq	r1, {r5, r7, r8, sl, fp, ip, sp, lr}
 800f858:	200026f8 	strdcs	r2, [r0], -r8

0800f85c <StoreDmxSend::~StoreDmxSend()>:
 800f85c:	4770      	bx	lr
	...

0800f860 <StoreDmxSend::Copy(TDmxParams*)>:
 800f860:	2300      	movs	r3, #0
 800f862:	b507      	push	{r0, r1, r2, lr}
 800f864:	4805      	ldr	r0, [pc, #20]	; (800f87c <StoreDmxSend::Copy(TDmxParams*)+0x1c>)
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	460a      	mov	r2, r1
 800f86a:	230a      	movs	r3, #10
 800f86c:	2102      	movs	r1, #2
 800f86e:	6800      	ldr	r0, [r0, #0]
 800f870:	f7ff fe30 	bl	800f4d4 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800f874:	b003      	add	sp, #12
 800f876:	f85d fb04 	ldr.w	pc, [sp], #4
 800f87a:	bf00      	nop
 800f87c:	200026ec 	andcs	r2, r0, ip, ror #13

0800f880 <StoreDmxSend::Update(TDmxParams const*)>:
 800f880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f882:	2200      	movs	r2, #0
 800f884:	460b      	mov	r3, r1
 800f886:	210a      	movs	r1, #10
 800f888:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800f88c:	4804      	ldr	r0, [pc, #16]	; (800f8a0 <StoreDmxSend::Update(TDmxParams const*)+0x20>)
 800f88e:	9100      	str	r1, [sp, #0]
 800f890:	6800      	ldr	r0, [r0, #0]
 800f892:	2102      	movs	r1, #2
 800f894:	f7ff fdde 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f898:	b005      	add	sp, #20
 800f89a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f89e:	bf00      	nop
 800f8a0:	200026ec 	andcs	r2, r0, ip, ror #13

0800f8a4 <StoreDmxSend::~StoreDmxSend()>:
 800f8a4:	b510      	push	{r4, lr}
 800f8a6:	4604      	mov	r4, r0
 800f8a8:	f003 ff56 	bl	8013758 <operator delete(void*)>
 800f8ac:	4620      	mov	r0, r4
 800f8ae:	bd10      	pop	{r4, pc}

0800f8b0 <StoreDmxSend::StoreDmxSend()>:
 800f8b0:	4a02      	ldr	r2, [pc, #8]	; (800f8bc <StoreDmxSend::StoreDmxSend()+0xc>)
 800f8b2:	6002      	str	r2, [r0, #0]
 800f8b4:	4a02      	ldr	r2, [pc, #8]	; (800f8c0 <StoreDmxSend::StoreDmxSend()+0x10>)
 800f8b6:	6010      	str	r0, [r2, #0]
 800f8b8:	4770      	bx	lr
 800f8ba:	bf00      	nop
 800f8bc:	08017db8 	stmdaeq	r1, {r3, r4, r5, r7, r8, sl, fp, ip, sp, lr}
 800f8c0:	200026fc 	strdcs	r2, [r0], -ip

0800f8c4 <StoreNetwork::~StoreNetwork()>:
 800f8c4:	4770      	bx	lr

0800f8c6 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800f8c6:	3804      	subs	r0, #4
 800f8c8:	4770      	bx	lr
	...

0800f8cc <StoreNetwork::Update(TNetworkParams const*)>:
 800f8cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	460b      	mov	r3, r1
 800f8d2:	215e      	movs	r1, #94	; 0x5e
 800f8d4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800f8d8:	4804      	ldr	r0, [pc, #16]	; (800f8ec <StoreNetwork::Update(TNetworkParams const*)+0x20>)
 800f8da:	9100      	str	r1, [sp, #0]
 800f8dc:	6800      	ldr	r0, [r0, #0]
 800f8de:	4611      	mov	r1, r2
 800f8e0:	f7ff fdb8 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f8e4:	b005      	add	sp, #20
 800f8e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f8ea:	bf00      	nop
 800f8ec:	200026ec 	andcs	r2, r0, ip, ror #13

0800f8f0 <StoreNetwork::SaveDhcp(bool)>:
 800f8f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	f88d 1017 	strb.w	r1, [sp, #23]
 800f8f8:	2100      	movs	r1, #0
 800f8fa:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f8fe:	4805      	ldr	r0, [pc, #20]	; (800f914 <StoreNetwork::SaveDhcp(bool)+0x24>)
 800f900:	9300      	str	r3, [sp, #0]
 800f902:	2214      	movs	r2, #20
 800f904:	6800      	ldr	r0, [r0, #0]
 800f906:	f10d 0317 	add.w	r3, sp, #23
 800f90a:	f7ff fda3 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f90e:	b007      	add	sp, #28
 800f910:	f85d fb04 	ldr.w	pc, [sp], #4
 800f914:	200026ec 	andcs	r2, r0, ip, ror #13

0800f918 <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 800f918:	f1a0 0004 	sub.w	r0, r0, #4
 800f91c:	e7e8      	b.n	800f8f0 <StoreNetwork::SaveDhcp(bool)>
 800f91e:	bf00      	nop

0800f920 <StoreNetwork::SaveGatewayIp(unsigned int)>:
 800f920:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f922:	2308      	movs	r3, #8
 800f924:	9105      	str	r1, [sp, #20]
 800f926:	2100      	movs	r1, #0
 800f928:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f92c:	2304      	movs	r3, #4
 800f92e:	4805      	ldr	r0, [pc, #20]	; (800f944 <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 800f930:	9300      	str	r3, [sp, #0]
 800f932:	220c      	movs	r2, #12
 800f934:	6800      	ldr	r0, [r0, #0]
 800f936:	ab05      	add	r3, sp, #20
 800f938:	f7ff fd8c 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f93c:	b007      	add	sp, #28
 800f93e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f942:	bf00      	nop
 800f944:	200026ec 	andcs	r2, r0, ip, ror #13

0800f948 <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 800f948:	f1a0 0004 	sub.w	r0, r0, #4
 800f94c:	e7e8      	b.n	800f920 <StoreNetwork::SaveGatewayIp(unsigned int)>
 800f94e:	bf00      	nop

0800f950 <StoreNetwork::SaveNetMask(unsigned int)>:
 800f950:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f952:	2304      	movs	r3, #4
 800f954:	9105      	str	r1, [sp, #20]
 800f956:	2100      	movs	r1, #0
 800f958:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f95c:	4804      	ldr	r0, [pc, #16]	; (800f970 <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 800f95e:	9300      	str	r3, [sp, #0]
 800f960:	2208      	movs	r2, #8
 800f962:	6800      	ldr	r0, [r0, #0]
 800f964:	ab05      	add	r3, sp, #20
 800f966:	f7ff fd75 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f96a:	b007      	add	sp, #28
 800f96c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f970:	200026ec 	andcs	r2, r0, ip, ror #13

0800f974 <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 800f974:	f1a0 0004 	sub.w	r0, r0, #4
 800f978:	e7ea      	b.n	800f950 <StoreNetwork::SaveNetMask(unsigned int)>
 800f97a:	bf00      	nop

0800f97c <StoreNetwork::SaveIp(unsigned int)>:
 800f97c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f97e:	2302      	movs	r3, #2
 800f980:	9105      	str	r1, [sp, #20]
 800f982:	2100      	movs	r1, #0
 800f984:	2204      	movs	r2, #4
 800f986:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f98a:	4804      	ldr	r0, [pc, #16]	; (800f99c <StoreNetwork::SaveIp(unsigned int)+0x20>)
 800f98c:	9200      	str	r2, [sp, #0]
 800f98e:	6800      	ldr	r0, [r0, #0]
 800f990:	ab05      	add	r3, sp, #20
 800f992:	f7ff fd5f 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f996:	b007      	add	sp, #28
 800f998:	f85d fb04 	ldr.w	pc, [sp], #4
 800f99c:	200026ec 	andcs	r2, r0, ip, ror #13

0800f9a0 <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 800f9a0:	f1a0 0004 	sub.w	r0, r0, #4
 800f9a4:	e7ea      	b.n	800f97c <StoreNetwork::SaveIp(unsigned int)>
 800f9a6:	bf00      	nop

0800f9a8 <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800f9a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f9aa:	460b      	mov	r3, r1
 800f9ac:	2020      	movs	r0, #32
 800f9ae:	2100      	movs	r1, #0
 800f9b0:	2a40      	cmp	r2, #64	; 0x40
 800f9b2:	bf28      	it	cs
 800f9b4:	2240      	movcs	r2, #64	; 0x40
 800f9b6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800f9ba:	4804      	ldr	r0, [pc, #16]	; (800f9cc <StoreNetwork::SaveHostName(char const*, unsigned int)+0x24>)
 800f9bc:	9200      	str	r2, [sp, #0]
 800f9be:	6800      	ldr	r0, [r0, #0]
 800f9c0:	2215      	movs	r2, #21
 800f9c2:	f7ff fd47 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f9c6:	b005      	add	sp, #20
 800f9c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9cc:	200026ec 	andcs	r2, r0, ip, ror #13

0800f9d0 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800f9d0:	f1a0 0004 	sub.w	r0, r0, #4
 800f9d4:	e7e8      	b.n	800f9a8 <StoreNetwork::SaveHostName(char const*, unsigned int)>
 800f9d6:	bf00      	nop

0800f9d8 <StoreNetwork::~StoreNetwork()>:
 800f9d8:	b510      	push	{r4, lr}
 800f9da:	4604      	mov	r4, r0
 800f9dc:	f003 febc 	bl	8013758 <operator delete(void*)>
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	bd10      	pop	{r4, pc}

0800f9e4 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800f9e4:	f1a0 0004 	sub.w	r0, r0, #4
 800f9e8:	e7f6      	b.n	800f9d8 <StoreNetwork::~StoreNetwork()>
	...

0800f9ec <StoreNetwork::Copy(TNetworkParams*)>:
 800f9ec:	b507      	push	{r0, r1, r2, lr}
 800f9ee:	460a      	mov	r2, r1
 800f9f0:	2100      	movs	r1, #0
 800f9f2:	4804      	ldr	r0, [pc, #16]	; (800fa04 <StoreNetwork::Copy(TNetworkParams*)+0x18>)
 800f9f4:	9100      	str	r1, [sp, #0]
 800f9f6:	235e      	movs	r3, #94	; 0x5e
 800f9f8:	6800      	ldr	r0, [r0, #0]
 800f9fa:	f7ff fd6b 	bl	800f4d4 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800f9fe:	b003      	add	sp, #12
 800fa00:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa04:	200026ec 	andcs	r2, r0, ip, ror #13

0800fa08 <StoreNetwork::StoreNetwork()>:
 800fa08:	4a03      	ldr	r2, [pc, #12]	; (800fa18 <StoreNetwork::StoreNetwork()+0x10>)
 800fa0a:	6002      	str	r2, [r0, #0]
 800fa0c:	322c      	adds	r2, #44	; 0x2c
 800fa0e:	6042      	str	r2, [r0, #4]
 800fa10:	4a02      	ldr	r2, [pc, #8]	; (800fa1c <StoreNetwork::StoreNetwork()+0x14>)
 800fa12:	6010      	str	r0, [r2, #0]
 800fa14:	4770      	bx	lr
 800fa16:	bf00      	nop
 800fa18:	08017dd0 	stmdaeq	r1, {r4, r6, r7, r8, sl, fp, ip, sp, lr}
 800fa1c:	20002700 	andcs	r2, r0, r0, lsl #14

0800fa20 <StoreRDMDevice::~StoreRDMDevice()>:
 800fa20:	4770      	bx	lr

0800fa22 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 800fa22:	3804      	subs	r0, #4
 800fa24:	4770      	bx	lr
	...

0800fa28 <StoreRDMDevice::Update(TRDMDeviceParams const*)>:
 800fa28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	460b      	mov	r3, r1
 800fa2e:	2129      	movs	r1, #41	; 0x29
 800fa30:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800fa34:	4804      	ldr	r0, [pc, #16]	; (800fa48 <StoreRDMDevice::Update(TRDMDeviceParams const*)+0x20>)
 800fa36:	9100      	str	r1, [sp, #0]
 800fa38:	6800      	ldr	r0, [r0, #0]
 800fa3a:	210b      	movs	r1, #11
 800fa3c:	f7ff fd0a 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fa40:	b005      	add	sp, #20
 800fa42:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa46:	bf00      	nop
 800fa48:	200026ec 	andcs	r2, r0, ip, ror #13

0800fa4c <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 800fa4c:	b570      	push	{r4, r5, r6, lr}
 800fa4e:	2401      	movs	r4, #1
 800fa50:	2600      	movs	r6, #0
 800fa52:	4d0c      	ldr	r5, [pc, #48]	; (800fa84 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 800fa54:	b086      	sub	sp, #24
 800fa56:	460b      	mov	r3, r1
 800fa58:	6828      	ldr	r0, [r5, #0]
 800fa5a:	f88d 2017 	strb.w	r2, [sp, #23]
 800fa5e:	9200      	str	r2, [sp, #0]
 800fa60:	210b      	movs	r1, #11
 800fa62:	2204      	movs	r2, #4
 800fa64:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800fa68:	f7ff fcf4 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fa6c:	2224      	movs	r2, #36	; 0x24
 800fa6e:	210b      	movs	r1, #11
 800fa70:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800fa74:	6828      	ldr	r0, [r5, #0]
 800fa76:	9400      	str	r4, [sp, #0]
 800fa78:	f10d 0317 	add.w	r3, sp, #23
 800fa7c:	f7ff fcea 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fa80:	b006      	add	sp, #24
 800fa82:	bd70      	pop	{r4, r5, r6, pc}
 800fa84:	200026ec 	andcs	r2, r0, ip, ror #13

0800fa88 <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 800fa88:	f1a0 0004 	sub.w	r0, r0, #4
 800fa8c:	e7de      	b.n	800fa4c <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 800fa8e:	bf00      	nop

0800fa90 <StoreRDMDevice::~StoreRDMDevice()>:
 800fa90:	b510      	push	{r4, lr}
 800fa92:	4604      	mov	r4, r0
 800fa94:	f003 fe60 	bl	8013758 <operator delete(void*)>
 800fa98:	4620      	mov	r0, r4
 800fa9a:	bd10      	pop	{r4, pc}

0800fa9c <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 800fa9c:	f1a0 0004 	sub.w	r0, r0, #4
 800faa0:	e7f6      	b.n	800fa90 <StoreRDMDevice::~StoreRDMDevice()>
	...

0800faa4 <StoreRDMDevice::Copy(TRDMDeviceParams*)>:
 800faa4:	2300      	movs	r3, #0
 800faa6:	b507      	push	{r0, r1, r2, lr}
 800faa8:	4805      	ldr	r0, [pc, #20]	; (800fac0 <StoreRDMDevice::Copy(TRDMDeviceParams*)+0x1c>)
 800faaa:	9300      	str	r3, [sp, #0]
 800faac:	460a      	mov	r2, r1
 800faae:	2329      	movs	r3, #41	; 0x29
 800fab0:	210b      	movs	r1, #11
 800fab2:	6800      	ldr	r0, [r0, #0]
 800fab4:	f7ff fd0e 	bl	800f4d4 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800fab8:	b003      	add	sp, #12
 800faba:	f85d fb04 	ldr.w	pc, [sp], #4
 800fabe:	bf00      	nop
 800fac0:	200026ec 	andcs	r2, r0, ip, ror #13

0800fac4 <StoreRDMDevice::StoreRDMDevice()>:
 800fac4:	4a03      	ldr	r2, [pc, #12]	; (800fad4 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 800fac6:	6002      	str	r2, [r0, #0]
 800fac8:	321c      	adds	r2, #28
 800faca:	6042      	str	r2, [r0, #4]
 800facc:	4a02      	ldr	r2, [pc, #8]	; (800fad8 <StoreRDMDevice::StoreRDMDevice()+0x14>)
 800face:	6010      	str	r0, [r2, #0]
 800fad0:	4770      	bx	lr
 800fad2:	bf00      	nop
 800fad4:	08017e20 	stmdaeq	r1, {r5, r9, sl, fp, ip, sp, lr}
 800fad8:	20002704 	andcs	r2, r0, r4, lsl #14

0800fadc <StoreRemoteConfig::~StoreRemoteConfig()>:
 800fadc:	4770      	bx	lr
	...

0800fae0 <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 800fae0:	2300      	movs	r3, #0
 800fae2:	b507      	push	{r0, r1, r2, lr}
 800fae4:	4805      	ldr	r0, [pc, #20]	; (800fafc <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x1c>)
 800fae6:	9300      	str	r3, [sp, #0]
 800fae8:	460a      	mov	r2, r1
 800faea:	2320      	movs	r3, #32
 800faec:	210c      	movs	r1, #12
 800faee:	6800      	ldr	r0, [r0, #0]
 800faf0:	f7ff fcf0 	bl	800f4d4 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800faf4:	b003      	add	sp, #12
 800faf6:	f85d fb04 	ldr.w	pc, [sp], #4
 800fafa:	bf00      	nop
 800fafc:	200026ec 	andcs	r2, r0, ip, ror #13

0800fb00 <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 800fb00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb02:	2200      	movs	r2, #0
 800fb04:	460b      	mov	r3, r1
 800fb06:	2120      	movs	r1, #32
 800fb08:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800fb0c:	4804      	ldr	r0, [pc, #16]	; (800fb20 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 800fb0e:	9100      	str	r1, [sp, #0]
 800fb10:	6800      	ldr	r0, [r0, #0]
 800fb12:	210c      	movs	r1, #12
 800fb14:	f7ff fc9e 	bl	800f454 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fb18:	b005      	add	sp, #20
 800fb1a:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb1e:	bf00      	nop
 800fb20:	200026ec 	andcs	r2, r0, ip, ror #13

0800fb24 <StoreRemoteConfig::~StoreRemoteConfig()>:
 800fb24:	b510      	push	{r4, lr}
 800fb26:	4604      	mov	r4, r0
 800fb28:	f003 fe16 	bl	8013758 <operator delete(void*)>
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	bd10      	pop	{r4, pc}

0800fb30 <StoreRemoteConfig::StoreRemoteConfig()>:
 800fb30:	4a02      	ldr	r2, [pc, #8]	; (800fb3c <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 800fb32:	6002      	str	r2, [r0, #0]
 800fb34:	4a02      	ldr	r2, [pc, #8]	; (800fb40 <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 800fb36:	6010      	str	r0, [r2, #0]
 800fb38:	4770      	bx	lr
 800fb3a:	bf00      	nop
 800fb3c:	08017e50 	stmdaeq	r1, {r4, r6, r9, sl, fp, ip, sp, lr}
 800fb40:	20002708 	andcs	r2, r0, r8, lsl #14

0800fb44 <FlashRom::FlashRom()>:
 800fb44:	4b07      	ldr	r3, [pc, #28]	; (800fb64 <FlashRom::FlashRom()+0x20>)
 800fb46:	b510      	push	{r4, lr}
 800fb48:	6018      	str	r0, [r3, #0]
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	4604      	mov	r4, r0
 800fb4e:	7003      	strb	r3, [r0, #0]
 800fb50:	4b05      	ldr	r3, [pc, #20]	; (800fb68 <FlashRom::FlashRom()+0x24>)
 800fb52:	4906      	ldr	r1, [pc, #24]	; (800fb6c <FlashRom::FlashRom()+0x28>)
 800fb54:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800fb58:	4805      	ldr	r0, [pc, #20]	; (800fb70 <FlashRom::FlashRom()+0x2c>)
 800fb5a:	029a      	lsls	r2, r3, #10
 800fb5c:	f004 f9f4 	bl	8013f48 <printf>
 800fb60:	4620      	mov	r0, r4
 800fb62:	bd10      	pop	{r4, pc}
 800fb64:	2000270c 	andcs	r2, r0, ip, lsl #14
 800fb68:	1ffff700 	svcne	0x00fff700
 800fb6c:	0801662f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, sl, sp, lr}
 800fb70:	08017e60 	stmdaeq	r1, {r5, r6, r9, sl, fp, ip, sp, lr}

0800fb74 <FlashRom::GetSize() const>:
 800fb74:	4b02      	ldr	r3, [pc, #8]	; (800fb80 <FlashRom::GetSize() const+0xc>)
 800fb76:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 800fb7a:	0280      	lsls	r0, r0, #10
 800fb7c:	4770      	bx	lr
 800fb7e:	bf00      	nop
 800fb80:	1ffff700 	svcne	0x00fff700

0800fb84 <FlashRom::GetSectorSize() const>:
 800fb84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800fb88:	4770      	bx	lr

0800fb8a <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 800fb8a:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800fb8e:	441a      	add	r2, r3
 800fb90:	4293      	cmp	r3, r2
 800fb92:	d104      	bne.n	800fb9e <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 800fb94:	2200      	movs	r2, #0
 800fb96:	9b00      	ldr	r3, [sp, #0]
 800fb98:	2001      	movs	r0, #1
 800fb9a:	601a      	str	r2, [r3, #0]
 800fb9c:	4770      	bx	lr
 800fb9e:	f851 0b04 	ldr.w	r0, [r1], #4
 800fba2:	f843 0b04 	str.w	r0, [r3], #4
 800fba6:	e7f3      	b.n	800fb90 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>

0800fba8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 800fba8:	2000      	movs	r0, #0
 800fbaa:	b538      	push	{r3, r4, r5, lr}
 800fbac:	4c47      	ldr	r4, [pc, #284]	; (800fccc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 800fbae:	6018      	str	r0, [r3, #0]
 800fbb0:	6823      	ldr	r3, [r4, #0]
 800fbb2:	2b04      	cmp	r3, #4
 800fbb4:	f200 8082 	bhi.w	800fcbc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800fbb8:	e8df f003 	tbb	[pc, r3]
 800fbbc:	78452003 	stmdavc	r5, {r0, r1, sp}^
 800fbc0:	4b430080 	blmi	90cfdc8 <__exidx_end+0x10b75cc>
 800fbc4:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800fbc8:	6019      	str	r1, [r3, #0]
 800fbca:	4b42      	ldr	r3, [pc, #264]	; (800fcd4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800fbcc:	601a      	str	r2, [r3, #0]
 800fbce:	4b42      	ldr	r3, [pc, #264]	; (800fcd8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 800fbd0:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800fbd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbd8:	4b40      	ldr	r3, [pc, #256]	; (800fcdc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800fbda:	d807      	bhi.n	800fbec <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 800fbdc:	2201      	movs	r2, #1
 800fbde:	701a      	strb	r2, [r3, #0]
 800fbe0:	f004 fc6e 	bl	80144c0 <fmc_bank0_unlock>
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	6023      	str	r3, [r4, #0]
 800fbe8:	2000      	movs	r0, #0
 800fbea:	e026      	b.n	800fc3a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800fbec:	4a3c      	ldr	r2, [pc, #240]	; (800fce0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 800fbee:	4291      	cmp	r1, r2
 800fbf0:	d3f4      	bcc.n	800fbdc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	701a      	strb	r2, [r3, #0]
 800fbf6:	f004 fc71 	bl	80144dc <fmc_bank1_unlock>
 800fbfa:	e7f3      	b.n	800fbe4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800fbfc:	4d37      	ldr	r5, [pc, #220]	; (800fcdc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800fbfe:	782b      	ldrb	r3, [r5, #0]
 800fc00:	b15b      	cbz	r3, 800fc1a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 800fc02:	f004 fc89 	bl	8014518 <fmc_bank0_state_get>
 800fc06:	2801      	cmp	r0, #1
 800fc08:	d0ee      	beq.n	800fbe8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 800fc0a:	7829      	ldrb	r1, [r5, #0]
 800fc0c:	4b35      	ldr	r3, [pc, #212]	; (800fce4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800fc0e:	b939      	cbnz	r1, 800fc20 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 800fc10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fc12:	f022 0202 	bic.w	r2, r2, #2
 800fc16:	651a      	str	r2, [r3, #80]	; 0x50
 800fc18:	e006      	b.n	800fc28 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 800fc1a:	f004 fc8f 	bl	801453c <fmc_bank1_state_get>
 800fc1e:	e7f2      	b.n	800fc06 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 800fc20:	691a      	ldr	r2, [r3, #16]
 800fc22:	f022 0202 	bic.w	r2, r2, #2
 800fc26:	611a      	str	r2, [r3, #16]
 800fc28:	4b2a      	ldr	r3, [pc, #168]	; (800fcd4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	b94b      	cbnz	r3, 800fc42 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 800fc2e:	b129      	cbz	r1, 800fc3c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 800fc30:	f004 fc62 	bl	80144f8 <fmc_bank0_lock>
 800fc34:	2300      	movs	r3, #0
 800fc36:	2001      	movs	r0, #1
 800fc38:	6023      	str	r3, [r4, #0]
 800fc3a:	bd38      	pop	{r3, r4, r5, pc}
 800fc3c:	f004 fc64 	bl	8014508 <fmc_bank1_lock>
 800fc40:	e7f8      	b.n	800fc34 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 800fc42:	2302      	movs	r3, #2
 800fc44:	e7cf      	b.n	800fbe6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 800fc46:	4923      	ldr	r1, [pc, #140]	; (800fcd4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800fc48:	680b      	ldr	r3, [r1, #0]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d0ca      	beq.n	800fbe4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800fc4e:	4b23      	ldr	r3, [pc, #140]	; (800fcdc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800fc50:	4a1f      	ldr	r2, [pc, #124]	; (800fcd0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 800fc52:	7818      	ldrb	r0, [r3, #0]
 800fc54:	4b23      	ldr	r3, [pc, #140]	; (800fce4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800fc56:	b190      	cbz	r0, 800fc7e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 800fc58:	6918      	ldr	r0, [r3, #16]
 800fc5a:	f040 0002 	orr.w	r0, r0, #2
 800fc5e:	6118      	str	r0, [r3, #16]
 800fc60:	6810      	ldr	r0, [r2, #0]
 800fc62:	6158      	str	r0, [r3, #20]
 800fc64:	6918      	ldr	r0, [r3, #16]
 800fc66:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800fc6a:	6118      	str	r0, [r3, #16]
 800fc6c:	680b      	ldr	r3, [r1, #0]
 800fc6e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800fc72:	600b      	str	r3, [r1, #0]
 800fc74:	6813      	ldr	r3, [r2, #0]
 800fc76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc7a:	6013      	str	r3, [r2, #0]
 800fc7c:	e7b2      	b.n	800fbe4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800fc7e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fc80:	f040 0002 	orr.w	r0, r0, #2
 800fc84:	6518      	str	r0, [r3, #80]	; 0x50
 800fc86:	6810      	ldr	r0, [r2, #0]
 800fc88:	6558      	str	r0, [r3, #84]	; 0x54
 800fc8a:	69dd      	ldr	r5, [r3, #28]
 800fc8c:	07ad      	lsls	r5, r5, #30
 800fc8e:	bf48      	it	mi
 800fc90:	6158      	strmi	r0, [r3, #20]
 800fc92:	4814      	ldr	r0, [pc, #80]	; (800fce4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800fc94:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fc96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc9a:	6503      	str	r3, [r0, #80]	; 0x50
 800fc9c:	680b      	ldr	r3, [r1, #0]
 800fc9e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800fca2:	600b      	str	r3, [r1, #0]
 800fca4:	6813      	ldr	r3, [r2, #0]
 800fca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fcaa:	e7e6      	b.n	800fc7a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 800fcac:	4b0b      	ldr	r3, [pc, #44]	; (800fcdc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800fcae:	781a      	ldrb	r2, [r3, #0]
 800fcb0:	4b0c      	ldr	r3, [pc, #48]	; (800fce4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800fcb2:	b132      	cbz	r2, 800fcc2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 800fcb4:	691a      	ldr	r2, [r3, #16]
 800fcb6:	f022 0201 	bic.w	r2, r2, #1
 800fcba:	611a      	str	r2, [r3, #16]
 800fcbc:	2000      	movs	r0, #0
 800fcbe:	6020      	str	r0, [r4, #0]
 800fcc0:	e7bb      	b.n	800fc3a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800fcc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fcc4:	f022 0201 	bic.w	r2, r2, #1
 800fcc8:	651a      	str	r2, [r3, #80]	; 0x50
 800fcca:	e7f7      	b.n	800fcbc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800fccc:	20002714 	andcs	r2, r0, r4, lsl r7
 800fcd0:	20002718 	andcs	r2, r0, r8, lsl r7
 800fcd4:	20002724 	andcs	r2, r0, r4, lsr #14
 800fcd8:	1ffff700 	svcne	0x00fff700
 800fcdc:	20002720 	andcs	r2, r0, r0, lsr #14
 800fce0:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800fce4:	40022000 	andmi	r2, r2, r0

0800fce8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 800fce8:	b570      	push	{r4, r5, r6, lr}
 800fcea:	2400      	movs	r4, #0
 800fcec:	9804      	ldr	r0, [sp, #16]
 800fcee:	6004      	str	r4, [r0, #0]
 800fcf0:	4c48      	ldr	r4, [pc, #288]	; (800fe14 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 800fcf2:	6820      	ldr	r0, [r4, #0]
 800fcf4:	2804      	cmp	r0, #4
 800fcf6:	d848      	bhi.n	800fd8a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 800fcf8:	e8df f000 	tbb	[pc, r0]
 800fcfc:	22847c03 	addcs	r7, r4, #768	; 0x300
 800fd00:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 800fd04:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800fd08:	6001      	str	r1, [r0, #0]
 800fd0a:	4844      	ldr	r0, [pc, #272]	; (800fe1c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800fd0c:	6003      	str	r3, [r0, #0]
 800fd0e:	4b44      	ldr	r3, [pc, #272]	; (800fe20 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800fd10:	601a      	str	r2, [r3, #0]
 800fd12:	4b44      	ldr	r3, [pc, #272]	; (800fe24 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 800fd14:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800fd18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd1c:	4b42      	ldr	r3, [pc, #264]	; (800fe28 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800fd1e:	d807      	bhi.n	800fd30 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 800fd20:	2201      	movs	r2, #1
 800fd22:	701a      	strb	r2, [r3, #0]
 800fd24:	f004 fbcc 	bl	80144c0 <fmc_bank0_unlock>
 800fd28:	2303      	movs	r3, #3
 800fd2a:	6023      	str	r3, [r4, #0]
 800fd2c:	2000      	movs	r0, #0
 800fd2e:	e026      	b.n	800fd7e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800fd30:	4a3e      	ldr	r2, [pc, #248]	; (800fe2c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 800fd32:	4291      	cmp	r1, r2
 800fd34:	d3f4      	bcc.n	800fd20 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 800fd36:	2200      	movs	r2, #0
 800fd38:	701a      	strb	r2, [r3, #0]
 800fd3a:	f004 fbcf 	bl	80144dc <fmc_bank1_unlock>
 800fd3e:	e7f3      	b.n	800fd28 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800fd40:	4d39      	ldr	r5, [pc, #228]	; (800fe28 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800fd42:	782b      	ldrb	r3, [r5, #0]
 800fd44:	b15b      	cbz	r3, 800fd5e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 800fd46:	f004 fbe7 	bl	8014518 <fmc_bank0_state_get>
 800fd4a:	2801      	cmp	r0, #1
 800fd4c:	d0ee      	beq.n	800fd2c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 800fd4e:	7829      	ldrb	r1, [r5, #0]
 800fd50:	4b37      	ldr	r3, [pc, #220]	; (800fe30 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800fd52:	b939      	cbnz	r1, 800fd64 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 800fd54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd56:	f022 0201 	bic.w	r2, r2, #1
 800fd5a:	651a      	str	r2, [r3, #80]	; 0x50
 800fd5c:	e006      	b.n	800fd6c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 800fd5e:	f004 fbed 	bl	801453c <fmc_bank1_state_get>
 800fd62:	e7f2      	b.n	800fd4a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 800fd64:	691a      	ldr	r2, [r3, #16]
 800fd66:	f022 0201 	bic.w	r2, r2, #1
 800fd6a:	611a      	str	r2, [r3, #16]
 800fd6c:	4b2c      	ldr	r3, [pc, #176]	; (800fe20 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	b94b      	cbnz	r3, 800fd86 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 800fd72:	b129      	cbz	r1, 800fd80 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 800fd74:	f004 fbc0 	bl	80144f8 <fmc_bank0_lock>
 800fd78:	2300      	movs	r3, #0
 800fd7a:	2001      	movs	r0, #1
 800fd7c:	6023      	str	r3, [r4, #0]
 800fd7e:	bd70      	pop	{r4, r5, r6, pc}
 800fd80:	f004 fbc2 	bl	8014508 <fmc_bank1_lock>
 800fd84:	e7f8      	b.n	800fd78 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 800fd86:	2304      	movs	r3, #4
 800fd88:	e7cf      	b.n	800fd2a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 800fd8a:	4a25      	ldr	r2, [pc, #148]	; (800fe20 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800fd8c:	6813      	ldr	r3, [r2, #0]
 800fd8e:	2b03      	cmp	r3, #3
 800fd90:	d91a      	bls.n	800fdc8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 800fd92:	4b25      	ldr	r3, [pc, #148]	; (800fe28 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800fd94:	7819      	ldrb	r1, [r3, #0]
 800fd96:	4b26      	ldr	r3, [pc, #152]	; (800fe30 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800fd98:	b189      	cbz	r1, 800fdbe <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 800fd9a:	6919      	ldr	r1, [r3, #16]
 800fd9c:	f041 0101 	orr.w	r1, r1, #1
 800fda0:	6119      	str	r1, [r3, #16]
 800fda2:	4d1e      	ldr	r5, [pc, #120]	; (800fe1c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800fda4:	481c      	ldr	r0, [pc, #112]	; (800fe18 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800fda6:	6829      	ldr	r1, [r5, #0]
 800fda8:	6803      	ldr	r3, [r0, #0]
 800fdaa:	f851 6b04 	ldr.w	r6, [r1], #4
 800fdae:	f843 6b04 	str.w	r6, [r3], #4
 800fdb2:	6003      	str	r3, [r0, #0]
 800fdb4:	6813      	ldr	r3, [r2, #0]
 800fdb6:	6029      	str	r1, [r5, #0]
 800fdb8:	3b04      	subs	r3, #4
 800fdba:	6013      	str	r3, [r2, #0]
 800fdbc:	e7b4      	b.n	800fd28 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800fdbe:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800fdc0:	f041 0101 	orr.w	r1, r1, #1
 800fdc4:	6519      	str	r1, [r3, #80]	; 0x50
 800fdc6:	e7ec      	b.n	800fda2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d0ad      	beq.n	800fd28 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800fdcc:	4b16      	ldr	r3, [pc, #88]	; (800fe28 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800fdce:	781a      	ldrb	r2, [r3, #0]
 800fdd0:	4b17      	ldr	r3, [pc, #92]	; (800fe30 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800fdd2:	b152      	cbz	r2, 800fdea <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 800fdd4:	691a      	ldr	r2, [r3, #16]
 800fdd6:	f042 0201 	orr.w	r2, r2, #1
 800fdda:	611a      	str	r2, [r3, #16]
 800fddc:	4a0f      	ldr	r2, [pc, #60]	; (800fe1c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800fdde:	4b0e      	ldr	r3, [pc, #56]	; (800fe18 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800fde0:	6812      	ldr	r2, [r2, #0]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	6812      	ldr	r2, [r2, #0]
 800fde6:	601a      	str	r2, [r3, #0]
 800fde8:	e79e      	b.n	800fd28 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800fdea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fdec:	f042 0201 	orr.w	r2, r2, #1
 800fdf0:	651a      	str	r2, [r3, #80]	; 0x50
 800fdf2:	e7f3      	b.n	800fddc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 800fdf4:	4b0c      	ldr	r3, [pc, #48]	; (800fe28 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800fdf6:	781a      	ldrb	r2, [r3, #0]
 800fdf8:	4b0d      	ldr	r3, [pc, #52]	; (800fe30 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800fdfa:	b132      	cbz	r2, 800fe0a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 800fdfc:	691a      	ldr	r2, [r3, #16]
 800fdfe:	f022 0202 	bic.w	r2, r2, #2
 800fe02:	611a      	str	r2, [r3, #16]
 800fe04:	2000      	movs	r0, #0
 800fe06:	6020      	str	r0, [r4, #0]
 800fe08:	e7b9      	b.n	800fd7e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800fe0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe0c:	f022 0202 	bic.w	r2, r2, #2
 800fe10:	651a      	str	r2, [r3, #80]	; 0x50
 800fe12:	e7f7      	b.n	800fe04 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 800fe14:	20002714 	andcs	r2, r0, r4, lsl r7
 800fe18:	20002710 	andcs	r2, r0, r0, lsl r7
 800fe1c:	2000271c 	andcs	r2, r0, ip, lsl r7
 800fe20:	20002724 	andcs	r2, r0, r4, lsr #14
 800fe24:	1ffff700 	svcne	0x00fff700
 800fe28:	20002720 	andcs	r2, r0, r0, lsr #14
 800fe2c:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800fe30:	40022000 	andmi	r2, r2, r0

0800fe34 <net_set_ip>:
 800fe34:	b510      	push	{r4, lr}
 800fe36:	4c05      	ldr	r4, [pc, #20]	; (800fe4c <net_set_ip+0x18>)
 800fe38:	6020      	str	r0, [r4, #0]
 800fe3a:	4621      	mov	r1, r4
 800fe3c:	4804      	ldr	r0, [pc, #16]	; (800fe50 <net_set_ip+0x1c>)
 800fe3e:	f7f7 fa6d 	bl	800731c <arp_init>
 800fe42:	4620      	mov	r0, r4
 800fe44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe48:	f002 b878 	b.w	8011f3c <ip_set_ip>
 800fe4c:	20002728 	andcs	r2, r0, r8, lsr #14
 800fe50:	20002734 	andcs	r2, r0, r4, lsr r7

0800fe54 <net_set_gw>:
 800fe54:	4b02      	ldr	r3, [pc, #8]	; (800fe60 <net_set_gw+0xc>)
 800fe56:	6098      	str	r0, [r3, #8]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f002 b86f 	b.w	8011f3c <ip_set_ip>
 800fe5e:	bf00      	nop
 800fe60:	20002728 	andcs	r2, r0, r8, lsr #14

0800fe64 <net_set_dhcp>:
 800fe64:	b570      	push	{r4, r5, r6, lr}
 800fe66:	2400      	movs	r4, #0
 800fe68:	4605      	mov	r5, r0
 800fe6a:	7014      	strb	r4, [r2, #0]
 800fe6c:	4616      	mov	r6, r2
 800fe6e:	4810      	ldr	r0, [pc, #64]	; (800feb0 <net_set_dhcp+0x4c>)
 800fe70:	460a      	mov	r2, r1
 800fe72:	4910      	ldr	r1, [pc, #64]	; (800feb4 <net_set_dhcp+0x50>)
 800fe74:	f001 fe42 	bl	8011afc <dhcp_client>
 800fe78:	42a0      	cmp	r0, r4
 800fe7a:	da17      	bge.n	800feac <net_set_dhcp+0x48>
 800fe7c:	480d      	ldr	r0, [pc, #52]	; (800feb4 <net_set_dhcp+0x50>)
 800fe7e:	f000 f837 	bl	800fef0 <rfc3927>
 800fe82:	7030      	strb	r0, [r6, #0]
 800fe84:	490b      	ldr	r1, [pc, #44]	; (800feb4 <net_set_dhcp+0x50>)
 800fe86:	480a      	ldr	r0, [pc, #40]	; (800feb0 <net_set_dhcp+0x4c>)
 800fe88:	f7f7 fa48 	bl	800731c <arp_init>
 800fe8c:	4809      	ldr	r0, [pc, #36]	; (800feb4 <net_set_dhcp+0x50>)
 800fe8e:	f002 f855 	bl	8011f3c <ip_set_ip>
 800fe92:	4a08      	ldr	r2, [pc, #32]	; (800feb4 <net_set_dhcp+0x50>)
 800fe94:	1e6b      	subs	r3, r5, #1
 800fe96:	350b      	adds	r5, #11
 800fe98:	f812 1b01 	ldrb.w	r1, [r2], #1
 800fe9c:	f803 1f01 	strb.w	r1, [r3, #1]!
 800fea0:	42ab      	cmp	r3, r5
 800fea2:	d1f9      	bne.n	800fe98 <net_set_dhcp+0x34>
 800fea4:	4b04      	ldr	r3, [pc, #16]	; (800feb8 <net_set_dhcp+0x54>)
 800fea6:	4620      	mov	r0, r4
 800fea8:	701c      	strb	r4, [r3, #0]
 800feaa:	bd70      	pop	{r4, r5, r6, pc}
 800feac:	2401      	movs	r4, #1
 800feae:	e7e9      	b.n	800fe84 <net_set_dhcp+0x20>
 800feb0:	20002734 	andcs	r2, r0, r4, lsr r7
 800feb4:	20002728 	andcs	r2, r0, r8, lsr #14
 800feb8:	2000273a 	andcs	r2, r0, sl, lsr r7

0800febc <net_dhcp_release>:
 800febc:	b508      	push	{r3, lr}
 800febe:	f001 ff25 	bl	8011d0c <dhcp_client_release>
 800fec2:	2200      	movs	r2, #0
 800fec4:	4b01      	ldr	r3, [pc, #4]	; (800fecc <net_dhcp_release+0x10>)
 800fec6:	701a      	strb	r2, [r3, #0]
 800fec8:	bd08      	pop	{r3, pc}
 800feca:	bf00      	nop
 800fecc:	2000273a 	andcs	r2, r0, sl, lsr r7

0800fed0 <net_timers_run>:
 800fed0:	4b05      	ldr	r3, [pc, #20]	; (800fee8 <net_timers_run+0x18>)
 800fed2:	4a06      	ldr	r2, [pc, #24]	; (800feec <net_timers_run+0x1c>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	6811      	ldr	r1, [r2, #0]
 800fed8:	4299      	cmp	r1, r3
 800feda:	d803      	bhi.n	800fee4 <net_timers_run+0x14>
 800fedc:	3364      	adds	r3, #100	; 0x64
 800fede:	6013      	str	r3, [r2, #0]
 800fee0:	f001 bfa2 	b.w	8011e28 <igmp_timer>
 800fee4:	4770      	bx	lr
 800fee6:	bf00      	nop
 800fee8:	2000a734 	andcs	sl, r0, r4, lsr r7
 800feec:	20002740 	andcs	r2, r0, r0, asr #14

0800fef0 <rfc3927>:
 800fef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef4:	4606      	mov	r6, r0
 800fef6:	25ff      	movs	r5, #255	; 0xff
 800fef8:	4b18      	ldr	r3, [pc, #96]	; (800ff5c <rfc3927+0x6c>)
 800fefa:	4f19      	ldr	r7, [pc, #100]	; (800ff60 <rfc3927+0x70>)
 800fefc:	791a      	ldrb	r2, [r3, #4]
 800fefe:	78dc      	ldrb	r4, [r3, #3]
 800ff00:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800ff64 <rfc3927+0x74>
 800ff04:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 800ff08:	f8d7 9000 	ldr.w	r9, [r7]
 800ff0c:	f8df b058 	ldr.w	fp, [pc, #88]	; 800ff68 <rfc3927+0x78>
 800ff10:	f8df a058 	ldr.w	sl, [pc, #88]	; 800ff6c <rfc3927+0x7c>
 800ff14:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800ff18:	4659      	mov	r1, fp
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	f001 fce4 	bl	80118e8 <arp_cache_lookup>
 800ff20:	b190      	cbz	r0, 800ff48 <rfc3927+0x58>
 800ff22:	ba24      	rev	r4, r4
 800ff24:	3401      	adds	r4, #1
 800ff26:	3d01      	subs	r5, #1
 800ff28:	ba24      	rev	r4, r4
 800ff2a:	b2ad      	uxth	r5, r5
 800ff2c:	4554      	cmp	r4, sl
 800ff2e:	bf08      	it	eq
 800ff30:	4644      	moveq	r4, r8
 800ff32:	b18d      	cbz	r5, 800ff58 <rfc3927+0x68>
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	eba3 0309 	sub.w	r3, r3, r9
 800ff3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ff3e:	d3eb      	bcc.n	800ff18 <rfc3927+0x28>
 800ff40:	2400      	movs	r4, #0
 800ff42:	4623      	mov	r3, r4
 800ff44:	4620      	mov	r0, r4
 800ff46:	e002      	b.n	800ff4e <rfc3927+0x5e>
 800ff48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ff4c:	2001      	movs	r0, #1
 800ff4e:	e9c6 3401 	strd	r3, r4, [r6, #4]
 800ff52:	6034      	str	r4, [r6, #0]
 800ff54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff58:	462c      	mov	r4, r5
 800ff5a:	e7f2      	b.n	800ff42 <rfc3927+0x52>
 800ff5c:	20002744 	andcs	r2, r0, r4, asr #14
 800ff60:	2000a734 	andcs	sl, r0, r4, lsr r7
 800ff64:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 800ff68:	2000274c 	andcs	r2, r0, ip, asr #14
 800ff6c:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

0800ff70 <_init_tcb>:
 800ff70:	b510      	push	{r4, lr}
 800ff72:	4603      	mov	r3, r0
 800ff74:	2400      	movs	r4, #0
 800ff76:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800ff7a:	4293      	cmp	r3, r2
 800ff7c:	d10d      	bne.n	800ff9a <_init_tcb+0x2a>
 800ff7e:	4b08      	ldr	r3, [pc, #32]	; (800ffa0 <_init_tcb+0x30>)
 800ff80:	f640 3268 	movw	r2, #2920	; 0xb68
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	8702      	strh	r2, [r0, #56]	; 0x38
 800ff88:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff8c:	6283      	str	r3, [r0, #40]	; 0x28
 800ff8e:	6243      	str	r3, [r0, #36]	; 0x24
 800ff90:	2301      	movs	r3, #1
 800ff92:	8001      	strh	r1, [r0, #0]
 800ff94:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800ff98:	bd10      	pop	{r4, pc}
 800ff9a:	f803 4b01 	strb.w	r4, [r3], #1
 800ff9e:	e7ec      	b.n	800ff7a <_init_tcb+0xa>
 800ffa0:	2000a734 	andcs	sl, r0, r4, lsr r7

0800ffa4 <memcpy.isra.0>:
 800ffa4:	3801      	subs	r0, #1
 800ffa6:	440a      	add	r2, r1
 800ffa8:	4291      	cmp	r1, r2
 800ffaa:	d100      	bne.n	800ffae <memcpy.isra.0+0xa>
 800ffac:	4770      	bx	lr
 800ffae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffb2:	f800 3f01 	strb.w	r3, [r0, #1]!
 800ffb6:	e7f7      	b.n	800ffa8 <memcpy.isra.0+0x4>

0800ffb8 <_bswap32>:
 800ffb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffba:	2204      	movs	r2, #4
 800ffbc:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 800ffc0:	4629      	mov	r1, r5
 800ffc2:	4604      	mov	r4, r0
 800ffc4:	eb0d 0002 	add.w	r0, sp, r2
 800ffc8:	f7ff ffec 	bl	800ffa4 <memcpy.isra.0>
 800ffcc:	2204      	movs	r2, #4
 800ffce:	9b01      	ldr	r3, [sp, #4]
 800ffd0:	eb0d 0102 	add.w	r1, sp, r2
 800ffd4:	ba1b      	rev	r3, r3
 800ffd6:	4628      	mov	r0, r5
 800ffd8:	9301      	str	r3, [sp, #4]
 800ffda:	f7ff ffe3 	bl	800ffa4 <memcpy.isra.0>
 800ffde:	2204      	movs	r2, #4
 800ffe0:	3426      	adds	r4, #38	; 0x26
 800ffe2:	eb0d 0002 	add.w	r0, sp, r2
 800ffe6:	4621      	mov	r1, r4
 800ffe8:	f7ff ffdc 	bl	800ffa4 <memcpy.isra.0>
 800ffec:	2204      	movs	r2, #4
 800ffee:	9b01      	ldr	r3, [sp, #4]
 800fff0:	4620      	mov	r0, r4
 800fff2:	ba1b      	rev	r3, r3
 800fff4:	eb0d 0102 	add.w	r1, sp, r2
 800fff8:	9301      	str	r3, [sp, #4]
 800fffa:	f7ff ffd3 	bl	800ffa4 <memcpy.isra.0>
 800fffe:	b003      	add	sp, #12
 8010000:	bd30      	pop	{r4, r5, pc}
	...

08010004 <_tcp_send_package>:
 8010004:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010008:	7a0b      	ldrb	r3, [r1, #8]
 801000a:	4605      	mov	r5, r0
 801000c:	f013 0f02 	tst.w	r3, #2
 8010010:	bf0c      	ite	eq
 8010012:	f04f 0805 	moveq.w	r8, #5
 8010016:	f04f 0806 	movne.w	r8, #6
 801001a:	f04f 0a00 	mov.w	sl, #0
 801001e:	4c47      	ldr	r4, [pc, #284]	; (801013c <_tcp_send_package+0x138>)
 8010020:	460f      	mov	r7, r1
 8010022:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8010024:	f100 0108 	add.w	r1, r0, #8
 8010028:	2206      	movs	r2, #6
 801002a:	4620      	mov	r0, r4
 801002c:	f7ff ffba 	bl	800ffa4 <memcpy.isra.0>
 8010030:	4a43      	ldr	r2, [pc, #268]	; (8010140 <_tcp_send_package+0x13c>)
 8010032:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8010036:	8813      	ldrh	r3, [r2, #0]
 8010038:	b2b6      	uxth	r6, r6
 801003a:	1c59      	adds	r1, r3, #1
 801003c:	8263      	strh	r3, [r4, #18]
 801003e:	f105 0904 	add.w	r9, r5, #4
 8010042:	f106 0314 	add.w	r3, r6, #20
 8010046:	ba5b      	rev16	r3, r3
 8010048:	8011      	strh	r1, [r2, #0]
 801004a:	f104 001e 	add.w	r0, r4, #30
 801004e:	2204      	movs	r2, #4
 8010050:	4649      	mov	r1, r9
 8010052:	8223      	strh	r3, [r4, #16]
 8010054:	f7ff ffa6 	bl	800ffa4 <memcpy.isra.0>
 8010058:	2114      	movs	r1, #20
 801005a:	f104 000e 	add.w	r0, r4, #14
 801005e:	f8a4 a018 	strh.w	sl, [r4, #24]
 8010062:	f001 ff74 	bl	8011f4e <net_chksum>
 8010066:	882b      	ldrh	r3, [r5, #0]
 8010068:	ea4f 1808 	mov.w	r8, r8, lsl #4
 801006c:	8463      	strh	r3, [r4, #34]	; 0x22
 801006e:	886b      	ldrh	r3, [r5, #2]
 8010070:	8320      	strh	r0, [r4, #24]
 8010072:	84a3      	strh	r3, [r4, #36]	; 0x24
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 8010078:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f884 802e 	strb.w	r8, [r4, #46]	; 0x2e
 8010082:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 8010086:	7a3b      	ldrb	r3, [r7, #8]
 8010088:	8622      	strh	r2, [r4, #48]	; 0x30
 801008a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 801008e:	079b      	lsls	r3, r3, #30
 8010090:	bf48      	it	mi
 8010092:	f240 4302 	movwmi	r3, #1026	; 0x402
 8010096:	8baa      	ldrh	r2, [r5, #28]
 8010098:	bf48      	it	mi
 801009a:	86e3      	strhmi	r3, [r4, #54]	; 0x36
 801009c:	86a2      	strh	r2, [r4, #52]	; 0x34
 801009e:	bf42      	ittt	mi
 80100a0:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 80100a4:	4622      	movmi	r2, r4
 80100a6:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 80100aa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80100ac:	f8a4 a032 	strh.w	sl, [r4, #50]	; 0x32
 80100b0:	bf58      	it	pl
 80100b2:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d13e      	bne.n	8010138 <_tcp_send_package+0x134>
 80100ba:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80100bc:	481f      	ldr	r0, [pc, #124]	; (801013c <_tcp_send_package+0x138>)
 80100be:	ba5b      	rev16	r3, r3
 80100c0:	8463      	strh	r3, [r4, #34]	; 0x22
 80100c2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80100c4:	ba5b      	rev16	r3, r3
 80100c6:	84a3      	strh	r3, [r4, #36]	; 0x24
 80100c8:	f7ff ff76 	bl	800ffb8 <_bswap32>
 80100cc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80100ce:	a801      	add	r0, sp, #4
 80100d0:	ba5b      	rev16	r3, r3
 80100d2:	8623      	strh	r3, [r4, #48]	; 0x30
 80100d4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80100d6:	220c      	movs	r2, #12
 80100d8:	ba5b      	rev16	r3, r3
 80100da:	491a      	ldr	r1, [pc, #104]	; (8010144 <_tcp_send_package+0x140>)
 80100dc:	86a3      	strh	r3, [r4, #52]	; 0x34
 80100de:	f7ff ff61 	bl	800ffa4 <memcpy.isra.0>
 80100e2:	2204      	movs	r2, #4
 80100e4:	4918      	ldr	r1, [pc, #96]	; (8010148 <_tcp_send_package+0x144>)
 80100e6:	4817      	ldr	r0, [pc, #92]	; (8010144 <_tcp_send_package+0x140>)
 80100e8:	f7ff ff5c 	bl	800ffa4 <memcpy.isra.0>
 80100ec:	2204      	movs	r2, #4
 80100ee:	4649      	mov	r1, r9
 80100f0:	4816      	ldr	r0, [pc, #88]	; (801014c <_tcp_send_package+0x148>)
 80100f2:	f7ff ff57 	bl	800ffa4 <memcpy.isra.0>
 80100f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80100fa:	f106 010c 	add.w	r1, r6, #12
 80100fe:	83e3      	strh	r3, [r4, #30]
 8010100:	4810      	ldr	r0, [pc, #64]	; (8010144 <_tcp_send_package+0x140>)
 8010102:	ba73      	rev16	r3, r6
 8010104:	8423      	strh	r3, [r4, #32]
 8010106:	f001 ff22 	bl	8011f4e <net_chksum>
 801010a:	a901      	add	r1, sp, #4
 801010c:	4605      	mov	r5, r0
 801010e:	220c      	movs	r2, #12
 8010110:	480c      	ldr	r0, [pc, #48]	; (8010144 <_tcp_send_package+0x140>)
 8010112:	f7ff ff47 	bl	800ffa4 <memcpy.isra.0>
 8010116:	4809      	ldr	r0, [pc, #36]	; (801013c <_tcp_send_package+0x138>)
 8010118:	f106 0122 	add.w	r1, r6, #34	; 0x22
 801011c:	8665      	strh	r5, [r4, #50]	; 0x32
 801011e:	b004      	add	sp, #16
 8010120:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010124:	f004 bf86 	b.w	8015034 <emac_eth_send>
 8010128:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 801012a:	5cc9      	ldrb	r1, [r1, r3]
 801012c:	54d1      	strb	r1, [r2, r3]
 801012e:	3301      	adds	r3, #1
 8010130:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8010132:	4299      	cmp	r1, r3
 8010134:	d8f8      	bhi.n	8010128 <_tcp_send_package+0x124>
 8010136:	e7c0      	b.n	80100ba <_tcp_send_package+0xb6>
 8010138:	2300      	movs	r3, #0
 801013a:	e7f9      	b.n	8010130 <_tcp_send_package+0x12c>
 801013c:	2000330c 	andcs	r3, r0, ip, lsl #6
 8010140:	20002754 	andcs	r2, r0, r4, asr r7
 8010144:	20003322 	andcs	r3, r0, r2, lsr #6
 8010148:	20002728 	andcs	r2, r0, r8, lsr #14
 801014c:	20003326 	andcs	r3, r0, r6, lsr #6

08010150 <_send_reset>:
 8010150:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010152:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8010156:	4604      	mov	r4, r0
 8010158:	075a      	lsls	r2, r3, #29
 801015a:	460e      	mov	r6, r1
 801015c:	d421      	bmi.n	80101a2 <_send_reset+0x52>
 801015e:	2204      	movs	r2, #4
 8010160:	f013 0310 	ands.w	r3, r3, #16
 8010164:	f88d 200c 	strb.w	r2, [sp, #12]
 8010168:	d01d      	beq.n	80101a6 <_send_reset+0x56>
 801016a:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 801016e:	4668      	mov	r0, sp
 8010170:	f7ff ff18 	bl	800ffa4 <memcpy.isra.0>
 8010174:	9b00      	ldr	r3, [sp, #0]
 8010176:	9301      	str	r3, [sp, #4]
 8010178:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801017c:	4668      	mov	r0, sp
 801017e:	f3c3 0540 	ubfx	r5, r3, #1, #1
 8010182:	f104 0126 	add.w	r1, r4, #38	; 0x26
 8010186:	07db      	lsls	r3, r3, #31
 8010188:	f04f 0204 	mov.w	r2, #4
 801018c:	bf48      	it	mi
 801018e:	3501      	addmi	r5, #1
 8010190:	f7ff ff08 	bl	800ffa4 <memcpy.isra.0>
 8010194:	9b00      	ldr	r3, [sp, #0]
 8010196:	4630      	mov	r0, r6
 8010198:	441d      	add	r5, r3
 801019a:	a901      	add	r1, sp, #4
 801019c:	9502      	str	r5, [sp, #8]
 801019e:	f7ff ff31 	bl	8010004 <_tcp_send_package>
 80101a2:	b004      	add	sp, #16
 80101a4:	bd70      	pop	{r4, r5, r6, pc}
 80101a6:	9301      	str	r3, [sp, #4]
 80101a8:	2314      	movs	r3, #20
 80101aa:	f88d 300c 	strb.w	r3, [sp, #12]
 80101ae:	e7e3      	b.n	8010178 <_send_reset+0x28>

080101b0 <tcp_begin>:
 80101b0:	b508      	push	{r3, lr}
 80101b2:	4b0a      	ldr	r3, [pc, #40]	; (80101dc <tcp_begin+0x2c>)
 80101b4:	4601      	mov	r1, r0
 80101b6:	881a      	ldrh	r2, [r3, #0]
 80101b8:	4282      	cmp	r2, r0
 80101ba:	d102      	bne.n	80101c2 <tcp_begin+0x12>
 80101bc:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80101c0:	b130      	cbz	r0, 80101d0 <tcp_begin+0x20>
 80101c2:	b12a      	cbz	r2, 80101d0 <tcp_begin+0x20>
 80101c4:	4806      	ldr	r0, [pc, #24]	; (80101e0 <tcp_begin+0x30>)
 80101c6:	f003 f951 	bl	801346c <console_error>
 80101ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101ce:	bd08      	pop	{r3, pc}
 80101d0:	4802      	ldr	r0, [pc, #8]	; (80101dc <tcp_begin+0x2c>)
 80101d2:	8019      	strh	r1, [r3, #0]
 80101d4:	f7ff fecc 	bl	800ff70 <_init_tcb>
 80101d8:	2000      	movs	r0, #0
 80101da:	e7f8      	b.n	80101ce <tcp_begin+0x1e>
 80101dc:	200032c8 	andcs	r3, r0, r8, asr #5
 80101e0:	08017e8e 	stmdaeq	r1, {r1, r2, r3, r7, r9, sl, fp, ip, sp, lr}

080101e4 <tcp_write>:
 80101e4:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80101e8:	429a      	cmp	r2, r3
 80101ea:	bf28      	it	cs
 80101ec:	461a      	movcs	r2, r3
 80101ee:	2344      	movs	r3, #68	; 0x44
 80101f0:	b530      	push	{r4, r5, lr}
 80101f2:	4c0d      	ldr	r4, [pc, #52]	; (8010228 <tcp_write+0x44>)
 80101f4:	b085      	sub	sp, #20
 80101f6:	fb03 4400 	mla	r4, r3, r0, r4
 80101fa:	6963      	ldr	r3, [r4, #20]
 80101fc:	62e1      	str	r1, [r4, #44]	; 0x2c
 80101fe:	9301      	str	r3, [sp, #4]
 8010200:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010202:	4620      	mov	r0, r4
 8010204:	9302      	str	r3, [sp, #8]
 8010206:	2318      	movs	r3, #24
 8010208:	8622      	strh	r2, [r4, #48]	; 0x30
 801020a:	a901      	add	r1, sp, #4
 801020c:	4615      	mov	r5, r2
 801020e:	f88d 300c 	strb.w	r3, [sp, #12]
 8010212:	f7ff fef7 	bl	8010004 <_tcp_send_package>
 8010216:	2300      	movs	r3, #0
 8010218:	62e3      	str	r3, [r4, #44]	; 0x2c
 801021a:	8623      	strh	r3, [r4, #48]	; 0x30
 801021c:	6963      	ldr	r3, [r4, #20]
 801021e:	442b      	add	r3, r5
 8010220:	6163      	str	r3, [r4, #20]
 8010222:	b005      	add	sp, #20
 8010224:	bd30      	pop	{r4, r5, pc}
 8010226:	bf00      	nop
 8010228:	200032c8 	andcs	r3, r0, r8, asr #5

0801022c <tcp_read>:
 801022c:	2344      	movs	r3, #68	; 0x44
 801022e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010230:	4c1c      	ldr	r4, [pc, #112]	; (80102a4 <tcp_read+0x78>)
 8010232:	b085      	sub	sp, #20
 8010234:	fb03 4400 	mla	r4, r3, r0, r4
 8010238:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801023c:	2b07      	cmp	r3, #7
 801023e:	d112      	bne.n	8010266 <tcp_read+0x3a>
 8010240:	6963      	ldr	r3, [r4, #20]
 8010242:	4620      	mov	r0, r4
 8010244:	9301      	str	r3, [sp, #4]
 8010246:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010248:	a901      	add	r1, sp, #4
 801024a:	9302      	str	r3, [sp, #8]
 801024c:	2311      	movs	r3, #17
 801024e:	f88d 300c 	strb.w	r3, [sp, #12]
 8010252:	f7ff fed7 	bl	8010004 <_tcp_send_package>
 8010256:	2309      	movs	r3, #9
 8010258:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 801025c:	6963      	ldr	r3, [r4, #20]
 801025e:	3301      	adds	r3, #1
 8010260:	6163      	str	r3, [r4, #20]
 8010262:	2000      	movs	r0, #0
 8010264:	e01b      	b.n	801029e <tcp_read+0x72>
 8010266:	f44f 6337 	mov.w	r3, #2928	; 0xb70
 801026a:	4358      	muls	r0, r3
 801026c:	4a0e      	ldr	r2, [pc, #56]	; (80102a8 <tcp_read+0x7c>)
 801026e:	1817      	adds	r7, r2, r0
 8010270:	887b      	ldrh	r3, [r7, #2]
 8010272:	5a15      	ldrh	r5, [r2, r0]
 8010274:	429d      	cmp	r5, r3
 8010276:	d0f4      	beq.n	8010262 <tcp_read+0x36>
 8010278:	f240 55b6 	movw	r5, #1462	; 0x5b6
 801027c:	435d      	muls	r5, r3
 801027e:	1d06      	adds	r6, r0, #4
 8010280:	442e      	add	r6, r5
 8010282:	4416      	add	r6, r2
 8010284:	4405      	add	r5, r0
 8010286:	600e      	str	r6, [r1, #0]
 8010288:	442a      	add	r2, r5
 801028a:	f8b2 05b8 	ldrh.w	r0, [r2, #1464]	; 0x5b8
 801028e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8010290:	3301      	adds	r3, #1
 8010292:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 8010296:	f003 0301 	and.w	r3, r3, #1
 801029a:	8722      	strh	r2, [r4, #56]	; 0x38
 801029c:	807b      	strh	r3, [r7, #2]
 801029e:	b005      	add	sp, #20
 80102a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102a2:	bf00      	nop
 80102a4:	200032c8 	andcs	r3, r0, r8, asr #5
 80102a8:	20002758 	andcs	r2, r0, r8, asr r7

080102ac <memcpy.isra.0>:
 80102ac:	3801      	subs	r0, #1
 80102ae:	440a      	add	r2, r1
 80102b0:	4291      	cmp	r1, r2
 80102b2:	d100      	bne.n	80102b6 <memcpy.isra.0+0xa>
 80102b4:	4770      	bx	lr
 80102b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102ba:	f800 3f01 	strb.w	r3, [r0, #1]!
 80102be:	e7f7      	b.n	80102b0 <memcpy.isra.0+0x4>

080102c0 <net_memcpy>:
 80102c0:	ea40 0301 	orr.w	r3, r0, r1
 80102c4:	079b      	lsls	r3, r3, #30
 80102c6:	b570      	push	{r4, r5, r6, lr}
 80102c8:	d108      	bne.n	80102dc <net_memcpy+0x1c>
 80102ca:	f022 0303 	bic.w	r3, r2, #3
 80102ce:	1f04      	subs	r4, r0, #4
 80102d0:	18cd      	adds	r5, r1, r3
 80102d2:	42a9      	cmp	r1, r5
 80102d4:	d108      	bne.n	80102e8 <net_memcpy+0x28>
 80102d6:	1ad2      	subs	r2, r2, r3
 80102d8:	4403      	add	r3, r0
 80102da:	e000      	b.n	80102de <net_memcpy+0x1e>
 80102dc:	4603      	mov	r3, r0
 80102de:	3b01      	subs	r3, #1
 80102e0:	440a      	add	r2, r1
 80102e2:	4291      	cmp	r1, r2
 80102e4:	d105      	bne.n	80102f2 <net_memcpy+0x32>
 80102e6:	bd70      	pop	{r4, r5, r6, pc}
 80102e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80102ec:	f844 6f04 	str.w	r6, [r4, #4]!
 80102f0:	e7ef      	b.n	80102d2 <net_memcpy+0x12>
 80102f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102fa:	e7f2      	b.n	80102e2 <net_memcpy+0x22>

080102fc <udp_set_ip>:
 80102fc:	2204      	movs	r2, #4
 80102fe:	b513      	push	{r0, r1, r4, lr}
 8010300:	4604      	mov	r4, r0
 8010302:	6803      	ldr	r3, [r0, #0]
 8010304:	eb0d 0102 	add.w	r1, sp, r2
 8010308:	4808      	ldr	r0, [pc, #32]	; (801032c <udp_set_ip+0x30>)
 801030a:	9301      	str	r3, [sp, #4]
 801030c:	f7ff ffce 	bl	80102ac <memcpy.isra.0>
 8010310:	6862      	ldr	r2, [r4, #4]
 8010312:	4b07      	ldr	r3, [pc, #28]	; (8010330 <udp_set_ip+0x34>)
 8010314:	43d1      	mvns	r1, r2
 8010316:	6019      	str	r1, [r3, #0]
 8010318:	6823      	ldr	r3, [r4, #0]
 801031a:	4013      	ands	r3, r2
 801031c:	4a05      	ldr	r2, [pc, #20]	; (8010334 <udp_set_ip+0x38>)
 801031e:	6013      	str	r3, [r2, #0]
 8010320:	68a2      	ldr	r2, [r4, #8]
 8010322:	4b05      	ldr	r3, [pc, #20]	; (8010338 <udp_set_ip+0x3c>)
 8010324:	601a      	str	r2, [r3, #0]
 8010326:	b002      	add	sp, #8
 8010328:	bd10      	pop	{r4, pc}
 801032a:	bf00      	nop
 801032c:	200095e2 	andcs	r9, r0, r2, ror #11
 8010330:	200038f8 	strdcs	r3, [r0], -r8
 8010334:	20003900 	andcs	r3, r0, r0, lsl #18
 8010338:	200038fc 	strdcs	r3, [r0], -ip

0801033c <udp_bind>:
 801033c:	4a0a      	ldr	r2, [pc, #40]	; (8010368 <udp_bind+0x2c>)
 801033e:	4603      	mov	r3, r0
 8010340:	b510      	push	{r4, lr}
 8010342:	2000      	movs	r0, #0
 8010344:	4614      	mov	r4, r2
 8010346:	f852 1b04 	ldr.w	r1, [r2], #4
 801034a:	4299      	cmp	r1, r3
 801034c:	d008      	beq.n	8010360 <udp_bind+0x24>
 801034e:	b141      	cbz	r1, 8010362 <udp_bind+0x26>
 8010350:	3001      	adds	r0, #1
 8010352:	2808      	cmp	r0, #8
 8010354:	d1f7      	bne.n	8010346 <udp_bind+0xa>
 8010356:	4805      	ldr	r0, [pc, #20]	; (801036c <udp_bind+0x30>)
 8010358:	f003 f888 	bl	801346c <console_error>
 801035c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010360:	bd10      	pop	{r4, pc}
 8010362:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 8010366:	e7fb      	b.n	8010360 <udp_bind+0x24>
 8010368:	20003908 	andcs	r3, r0, r8, lsl #18
 801036c:	08017eae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r9, sl, fp, ip, sp, lr}

08010370 <udp_unbind>:
 8010370:	4a0c      	ldr	r2, [pc, #48]	; (80103a4 <udp_unbind+0x34>)
 8010372:	2300      	movs	r3, #0
 8010374:	4611      	mov	r1, r2
 8010376:	b510      	push	{r4, lr}
 8010378:	f852 4b04 	ldr.w	r4, [r2], #4
 801037c:	4284      	cmp	r4, r0
 801037e:	d108      	bne.n	8010392 <udp_unbind+0x22>
 8010380:	2000      	movs	r0, #0
 8010382:	f640 3294 	movw	r2, #2964	; 0xb94
 8010386:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 801038a:	4353      	muls	r3, r2
 801038c:	4a06      	ldr	r2, [pc, #24]	; (80103a8 <udp_unbind+0x38>)
 801038e:	50d0      	str	r0, [r2, r3]
 8010390:	bd10      	pop	{r4, pc}
 8010392:	3301      	adds	r3, #1
 8010394:	2b08      	cmp	r3, #8
 8010396:	d1ef      	bne.n	8010378 <udp_unbind+0x8>
 8010398:	4804      	ldr	r0, [pc, #16]	; (80103ac <udp_unbind+0x3c>)
 801039a:	f003 f867 	bl	801346c <console_error>
 801039e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103a2:	e7f5      	b.n	8010390 <udp_unbind+0x20>
 80103a4:	20003908 	andcs	r3, r0, r8, lsl #18
 80103a8:	20003928 	andcs	r3, r0, r8, lsr #18
 80103ac:	08017eb3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r9, sl, fp, ip, sp, lr}

080103b0 <udp_recv>:
 80103b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103b4:	4604      	mov	r4, r0
 80103b6:	4698      	mov	r8, r3
 80103b8:	f640 3394 	movw	r3, #2964	; 0xb94
 80103bc:	435c      	muls	r4, r3
 80103be:	4608      	mov	r0, r1
 80103c0:	4915      	ldr	r1, [pc, #84]	; (8010418 <udp_recv+0x68>)
 80103c2:	190f      	adds	r7, r1, r4
 80103c4:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 80103c8:	5b0b      	ldrh	r3, [r1, r4]
 80103ca:	4563      	cmp	r3, ip
 80103cc:	d021      	beq.n	8010412 <udp_recv+0x62>
 80103ce:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 80103d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80103d6:	eb0c 0604 	add.w	r6, ip, r4
 80103da:	440e      	add	r6, r1
 80103dc:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 80103e0:	3404      	adds	r4, #4
 80103e2:	4295      	cmp	r5, r2
 80103e4:	bf28      	it	cs
 80103e6:	4615      	movcs	r5, r2
 80103e8:	4464      	add	r4, ip
 80103ea:	462a      	mov	r2, r5
 80103ec:	4421      	add	r1, r4
 80103ee:	f7ff ff67 	bl	80102c0 <net_memcpy>
 80103f2:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 80103f6:	f8c8 3000 	str.w	r3, [r8]
 80103fa:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 80103fe:	9b06      	ldr	r3, [sp, #24]
 8010400:	801a      	strh	r2, [r3, #0]
 8010402:	887b      	ldrh	r3, [r7, #2]
 8010404:	3301      	adds	r3, #1
 8010406:	f003 0301 	and.w	r3, r3, #1
 801040a:	807b      	strh	r3, [r7, #2]
 801040c:	4628      	mov	r0, r5
 801040e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010412:	2500      	movs	r5, #0
 8010414:	e7fa      	b.n	801040c <udp_recv+0x5c>
 8010416:	bf00      	nop
 8010418:	20003928 	andcs	r3, r0, r8, lsr #18

0801041c <udp_recv2>:
 801041c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801041e:	f640 3594 	movw	r5, #2964	; 0xb94
 8010422:	4368      	muls	r0, r5
 8010424:	4c0f      	ldr	r4, [pc, #60]	; (8010464 <udp_recv2+0x48>)
 8010426:	1827      	adds	r7, r4, r0
 8010428:	887d      	ldrh	r5, [r7, #2]
 801042a:	5a26      	ldrh	r6, [r4, r0]
 801042c:	42ae      	cmp	r6, r5
 801042e:	d017      	beq.n	8010460 <udp_recv2+0x44>
 8010430:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 8010434:	fb0c f505 	mul.w	r5, ip, r5
 8010438:	1d06      	adds	r6, r0, #4
 801043a:	442e      	add	r6, r5
 801043c:	4405      	add	r5, r0
 801043e:	4426      	add	r6, r4
 8010440:	442c      	add	r4, r5
 8010442:	600e      	str	r6, [r1, #0]
 8010444:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 8010448:	6011      	str	r1, [r2, #0]
 801044a:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 801044e:	801a      	strh	r2, [r3, #0]
 8010450:	887b      	ldrh	r3, [r7, #2]
 8010452:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 8010456:	3301      	adds	r3, #1
 8010458:	f003 0301 	and.w	r3, r3, #1
 801045c:	807b      	strh	r3, [r7, #2]
 801045e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010460:	2000      	movs	r0, #0
 8010462:	e7fc      	b.n	801045e <udp_recv2+0x42>
 8010464:	20003928 	andcs	r3, r0, r8, lsr #18

08010468 <udp_send>:
 8010468:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801046c:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80105a0 <udp_send+0x138>
 8010470:	461c      	mov	r4, r3
 8010472:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 8010476:	4607      	mov	r7, r0
 8010478:	4688      	mov	r8, r1
 801047a:	4616      	mov	r6, r2
 801047c:	2b00      	cmp	r3, #0
 801047e:	f000 808b 	beq.w	8010598 <udp_send+0x130>
 8010482:	1c63      	adds	r3, r4, #1
 8010484:	d141      	bne.n	801050a <udp_send+0xa2>
 8010486:	4a47      	ldr	r2, [pc, #284]	; (80105a4 <udp_send+0x13c>)
 8010488:	2307      	movs	r3, #7
 801048a:	4611      	mov	r1, r2
 801048c:	20ff      	movs	r0, #255	; 0xff
 801048e:	e001      	b.n	8010494 <udp_send+0x2c>
 8010490:	f802 0b01 	strb.w	r0, [r2], #1
 8010494:	3b01      	subs	r3, #1
 8010496:	d1fb      	bne.n	8010490 <udp_send+0x28>
 8010498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801049c:	83cb      	strh	r3, [r1, #30]
 801049e:	840b      	strh	r3, [r1, #32]
 80104a0:	2500      	movs	r5, #0
 80104a2:	f8df a104 	ldr.w	sl, [pc, #260]	; 80105a8 <udp_send+0x140>
 80104a6:	4c3f      	ldr	r4, [pc, #252]	; (80105a4 <udp_send+0x13c>)
 80104a8:	f8ba 3000 	ldrh.w	r3, [sl]
 80104ac:	2114      	movs	r1, #20
 80104ae:	8263      	strh	r3, [r4, #18]
 80104b0:	f106 031c 	add.w	r3, r6, #28
 80104b4:	ba5b      	rev16	r3, r3
 80104b6:	f104 000e 	add.w	r0, r4, #14
 80104ba:	8223      	strh	r3, [r4, #16]
 80104bc:	8325      	strh	r5, [r4, #24]
 80104be:	f001 fd46 	bl	8011f4e <net_chksum>
 80104c2:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 80104c6:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 80104ca:	ba5b      	rev16	r3, r3
 80104cc:	8463      	strh	r3, [r4, #34]	; 0x22
 80104ce:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80104d2:	4632      	mov	r2, r6
 80104d4:	ba5b      	rev16	r3, r3
 80104d6:	84a3      	strh	r3, [r4, #36]	; 0x24
 80104d8:	f106 0308 	add.w	r3, r6, #8
 80104dc:	ba5b      	rev16	r3, r3
 80104de:	bf28      	it	cs
 80104e0:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 80104e4:	4641      	mov	r1, r8
 80104e6:	8320      	strh	r0, [r4, #24]
 80104e8:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 80104ec:	84e3      	strh	r3, [r4, #38]	; 0x26
 80104ee:	f7ff fee7 	bl	80102c0 <net_memcpy>
 80104f2:	4620      	mov	r0, r4
 80104f4:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 80104f8:	f004 fd9c 	bl	8015034 <emac_eth_send>
 80104fc:	f8ba 3000 	ldrh.w	r3, [sl]
 8010500:	4628      	mov	r0, r5
 8010502:	3301      	adds	r3, #1
 8010504:	f8aa 3000 	strh.w	r3, [sl]
 8010508:	e037      	b.n	801057a <udp_send+0x112>
 801050a:	4b28      	ldr	r3, [pc, #160]	; (80105ac <udp_send+0x144>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	43a3      	bics	r3, r4
 8010510:	d10f      	bne.n	8010532 <udp_send+0xca>
 8010512:	2307      	movs	r3, #7
 8010514:	21ff      	movs	r1, #255	; 0xff
 8010516:	4a23      	ldr	r2, [pc, #140]	; (80105a4 <udp_send+0x13c>)
 8010518:	e001      	b.n	801051e <udp_send+0xb6>
 801051a:	f802 1b01 	strb.w	r1, [r2], #1
 801051e:	3b01      	subs	r3, #1
 8010520:	d1fb      	bne.n	801051a <udp_send+0xb2>
 8010522:	2204      	movs	r2, #4
 8010524:	4822      	ldr	r0, [pc, #136]	; (80105b0 <udp_send+0x148>)
 8010526:	eb0d 0102 	add.w	r1, sp, r2
 801052a:	9401      	str	r4, [sp, #4]
 801052c:	f7ff febe 	bl	80102ac <memcpy.isra.0>
 8010530:	e7b6      	b.n	80104a0 <udp_send+0x38>
 8010532:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 8010536:	2be0      	cmp	r3, #224	; 0xe0
 8010538:	d10e      	bne.n	8010558 <udp_send+0xf0>
 801053a:	491e      	ldr	r1, [pc, #120]	; (80105b4 <udp_send+0x14c>)
 801053c:	f3c4 2306 	ubfx	r3, r4, #8, #7
 8010540:	70cb      	strb	r3, [r1, #3]
 8010542:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8010546:	710b      	strb	r3, [r1, #4]
 8010548:	f3c4 6307 	ubfx	r3, r4, #24, #8
 801054c:	2206      	movs	r2, #6
 801054e:	4815      	ldr	r0, [pc, #84]	; (80105a4 <udp_send+0x13c>)
 8010550:	714b      	strb	r3, [r1, #5]
 8010552:	f7ff feab 	bl	80102ac <memcpy.isra.0>
 8010556:	e7e4      	b.n	8010522 <udp_send+0xba>
 8010558:	4b17      	ldr	r3, [pc, #92]	; (80105b8 <udp_send+0x150>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	43a3      	bics	r3, r4
 801055e:	d00f      	beq.n	8010580 <udp_send+0x118>
 8010560:	4d16      	ldr	r5, [pc, #88]	; (80105bc <udp_send+0x154>)
 8010562:	4910      	ldr	r1, [pc, #64]	; (80105a4 <udp_send+0x13c>)
 8010564:	6828      	ldr	r0, [r5, #0]
 8010566:	f001 f9bf 	bl	80118e8 <arp_cache_lookup>
 801056a:	682b      	ldr	r3, [r5, #0]
 801056c:	4298      	cmp	r0, r3
 801056e:	d0d8      	beq.n	8010522 <udp_send+0xba>
 8010570:	4813      	ldr	r0, [pc, #76]	; (80105c0 <udp_send+0x158>)
 8010572:	f002 ff7b 	bl	801346c <console_error>
 8010576:	f06f 0002 	mvn.w	r0, #2
 801057a:	b002      	add	sp, #8
 801057c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010580:	4620      	mov	r0, r4
 8010582:	4908      	ldr	r1, [pc, #32]	; (80105a4 <udp_send+0x13c>)
 8010584:	f001 f9b0 	bl	80118e8 <arp_cache_lookup>
 8010588:	42a0      	cmp	r0, r4
 801058a:	d0ca      	beq.n	8010522 <udp_send+0xba>
 801058c:	480d      	ldr	r0, [pc, #52]	; (80105c4 <udp_send+0x15c>)
 801058e:	f002 ff6d 	bl	801346c <console_error>
 8010592:	f06f 0001 	mvn.w	r0, #1
 8010596:	e7f0      	b.n	801057a <udp_send+0x112>
 8010598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801059c:	e7ed      	b.n	801057a <udp_send+0x112>
 801059e:	bf00      	nop
 80105a0:	20003908 	andcs	r3, r0, r8, lsl #18
 80105a4:	200095c8 	andcs	r9, r0, r8, asr #11
 80105a8:	20003904 	andcs	r3, r0, r4, lsl #18
 80105ac:	200038f8 	strdcs	r3, [r0], -r8
 80105b0:	200095e6 	andcs	r9, r0, r6, ror #11
 80105b4:	20000014 	andcs	r0, r0, r4, lsl r0
 80105b8:	20003900 	andcs	r3, r0, r0, lsl #18
 80105bc:	200038fc 	strdcs	r3, [r0], -ip
 80105c0:	08017ebb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r9, sl, fp, ip, sp, lr}
 80105c4:	08017ee1 	stmdaeq	r1, {r0, r5, r6, r7, r9, sl, fp, ip, sp, lr}

080105c8 <strlen>:
 80105c8:	4603      	mov	r3, r0
 80105ca:	461a      	mov	r2, r3
 80105cc:	7811      	ldrb	r1, [r2, #0]
 80105ce:	3301      	adds	r3, #1
 80105d0:	2900      	cmp	r1, #0
 80105d2:	d1fa      	bne.n	80105ca <strlen+0x2>
 80105d4:	1a10      	subs	r0, r2, r0
 80105d6:	4770      	bx	lr

080105d8 <strcmp>:
 80105d8:	1e43      	subs	r3, r0, #1
 80105da:	3901      	subs	r1, #1
 80105dc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80105e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80105e4:	4290      	cmp	r0, r2
 80105e6:	d001      	beq.n	80105ec <strcmp+0x14>
 80105e8:	1a80      	subs	r0, r0, r2
 80105ea:	e001      	b.n	80105f0 <strcmp+0x18>
 80105ec:	2800      	cmp	r0, #0
 80105ee:	d1f5      	bne.n	80105dc <strcmp+0x4>
 80105f0:	4770      	bx	lr

080105f2 <strcpy.isra.0>:
 80105f2:	3801      	subs	r0, #1
 80105f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105f8:	f800 3f01 	strb.w	r3, [r0, #1]!
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d1f9      	bne.n	80105f4 <strcpy.isra.0+0x2>
 8010600:	4770      	bx	lr

08010602 <strcat.isra.0>:
 8010602:	b538      	push	{r3, r4, r5, lr}
 8010604:	4604      	mov	r4, r0
 8010606:	460d      	mov	r5, r1
 8010608:	f7ff ffde 	bl	80105c8 <strlen>
 801060c:	4629      	mov	r1, r5
 801060e:	4420      	add	r0, r4
 8010610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010614:	f7ff bfed 	b.w	80105f2 <strcpy.isra.0>

08010618 <MDNS::MDNS()>:
 8010618:	b513      	push	{r0, r1, r4, lr}
 801061a:	4604      	mov	r4, r0
 801061c:	a901      	add	r1, sp, #4
 801061e:	4804      	ldr	r0, [pc, #16]	; (8010630 <MDNS::MDNS()+0x18>)
 8010620:	f003 f8a2 	bl	8013768 <inet_aton>
 8010624:	4620      	mov	r0, r4
 8010626:	4b03      	ldr	r3, [pc, #12]	; (8010634 <MDNS::MDNS()+0x1c>)
 8010628:	9a01      	ldr	r2, [sp, #4]
 801062a:	601a      	str	r2, [r3, #0]
 801062c:	b002      	add	sp, #8
 801062e:	bd10      	pop	{r4, pc}
 8010630:	08017f1c 	stmdaeq	r1, {r2, r3, r4, r8, r9, sl, fp, ip, sp, lr}
 8010634:	20009bbc 			; <UNDEFINED> instruction: 0x20009bbc

08010638 <MDNS::SetName(char const*)>:
 8010638:	b538      	push	{r3, r4, r5, lr}
 801063a:	4d0b      	ldr	r5, [pc, #44]	; (8010668 <MDNS::SetName(char const*)+0x30>)
 801063c:	460c      	mov	r4, r1
 801063e:	6828      	ldr	r0, [r5, #0]
 8010640:	b108      	cbz	r0, 8010646 <MDNS::SetName(char const*)+0xe>
 8010642:	f003 f88b 	bl	801375c <operator delete[](void*)>
 8010646:	4620      	mov	r0, r4
 8010648:	f7ff ffbe 	bl	80105c8 <strlen>
 801064c:	3007      	adds	r0, #7
 801064e:	f003 f889 	bl	8013764 <operator new[](unsigned int)>
 8010652:	4621      	mov	r1, r4
 8010654:	6028      	str	r0, [r5, #0]
 8010656:	f7ff ffcc 	bl	80105f2 <strcpy.isra.0>
 801065a:	6828      	ldr	r0, [r5, #0]
 801065c:	4903      	ldr	r1, [pc, #12]	; (801066c <MDNS::SetName(char const*)+0x34>)
 801065e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010662:	f7ff bfce 	b.w	8010602 <strcat.isra.0>
 8010666:	bf00      	nop
 8010668:	20009fec 	andcs	r9, r0, ip, ror #31
 801066c:	08017f2c 	stmdaeq	r1, {r2, r3, r5, r8, r9, sl, fp, ip, sp, lr}

08010670 <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 8010670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010674:	f04f 0e00 	mov.w	lr, #0
 8010678:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 801067c:	4675      	mov	r5, lr
 801067e:	4e1b      	ldr	r6, [pc, #108]	; (80106ec <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7c>)
 8010680:	4f1b      	ldr	r7, [pc, #108]	; (80106f0 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x80>)
 8010682:	780b      	ldrb	r3, [r1, #0]
 8010684:	1c68      	adds	r0, r5, #1
 8010686:	b913      	cbnz	r3, 801068e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x1e>
 8010688:	7013      	strb	r3, [r2, #0]
 801068a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801068e:	2b3f      	cmp	r3, #63	; 0x3f
 8010690:	d91c      	bls.n	80106cc <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5c>
 8010692:	7849      	ldrb	r1, [r1, #1]
 8010694:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 8010698:	430b      	orrs	r3, r1
 801069a:	6839      	ldr	r1, [r7, #0]
 801069c:	f1be 0f00 	cmp.w	lr, #0
 80106a0:	bf08      	it	eq
 80106a2:	4605      	moveq	r5, r0
 80106a4:	5ccc      	ldrb	r4, [r1, r3]
 80106a6:	3301      	adds	r3, #1
 80106a8:	4419      	add	r1, r3
 80106aa:	2300      	movs	r3, #0
 80106ac:	42a3      	cmp	r3, r4
 80106ae:	5cc8      	ldrb	r0, [r1, r3]
 80106b0:	d309      	bcc.n	80106c6 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x56>
 80106b2:	f04f 0e01 	mov.w	lr, #1
 80106b6:	4421      	add	r1, r4
 80106b8:	4414      	add	r4, r2
 80106ba:	780b      	ldrb	r3, [r1, #0]
 80106bc:	b10b      	cbz	r3, 80106c2 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x52>
 80106be:	f804 cb01 	strb.w	ip, [r4], #1
 80106c2:	4622      	mov	r2, r4
 80106c4:	e7dd      	b.n	8010682 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 80106c6:	54d0      	strb	r0, [r2, r3]
 80106c8:	3301      	adds	r3, #1
 80106ca:	e7ef      	b.n	80106ac <MDNS::DecodeDNSNameNotation(char const*, char*)+0x3c>
 80106cc:	4688      	mov	r8, r1
 80106ce:	18d4      	adds	r4, r2, r3
 80106d0:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 80106d4:	f802 9b01 	strb.w	r9, [r2], #1
 80106d8:	4294      	cmp	r4, r2
 80106da:	d1f9      	bne.n	80106d0 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x60>
 80106dc:	1c5a      	adds	r2, r3, #1
 80106de:	4411      	add	r1, r2
 80106e0:	f1be 0f00 	cmp.w	lr, #0
 80106e4:	d1e9      	bne.n	80106ba <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 80106e6:	181d      	adds	r5, r3, r0
 80106e8:	e7e7      	b.n	80106ba <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 80106ea:	bf00      	nop
 80106ec:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 80106f0:	20009ff0 	strdcs	r9, [r0], -r0

080106f4 <MDNS::FindFirstDotFromRight(char const*) const>:
 80106f4:	b510      	push	{r4, lr}
 80106f6:	4608      	mov	r0, r1
 80106f8:	460c      	mov	r4, r1
 80106fa:	f7ff ff65 	bl	80105c8 <strlen>
 80106fe:	4420      	add	r0, r4
 8010700:	42a0      	cmp	r0, r4
 8010702:	d903      	bls.n	801070c <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 8010704:	f810 3901 	ldrb.w	r3, [r0], #-1
 8010708:	2b2e      	cmp	r3, #46	; 0x2e
 801070a:	d1f9      	bne.n	8010700 <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 801070c:	3001      	adds	r0, #1
 801070e:	bd10      	pop	{r4, pc}

08010710 <MDNS::WriteDnsName(char const*, char*, bool)>:
 8010710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010712:	4614      	mov	r4, r2
 8010714:	460f      	mov	r7, r1
 8010716:	1c60      	adds	r0, r4, #1
 8010718:	463d      	mov	r5, r7
 801071a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801071e:	b946      	cbnz	r6, 8010732 <MDNS::WriteDnsName(char const*, char*, bool)+0x22>
 8010720:	1a69      	subs	r1, r5, r1
 8010722:	7021      	strb	r1, [r4, #0]
 8010724:	7829      	ldrb	r1, [r5, #0]
 8010726:	b949      	cbnz	r1, 801073c <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 8010728:	b10b      	cbz	r3, 801072e <MDNS::WriteDnsName(char const*, char*, bool)+0x1e>
 801072a:	f800 1b01 	strb.w	r1, [r0], #1
 801072e:	1a80      	subs	r0, r0, r2
 8010730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010732:	2e2e      	cmp	r6, #46	; 0x2e
 8010734:	d0f4      	beq.n	8010720 <MDNS::WriteDnsName(char const*, char*, bool)+0x10>
 8010736:	f800 6b01 	strb.w	r6, [r0], #1
 801073a:	e7ed      	b.n	8010718 <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 801073c:	4604      	mov	r4, r0
 801073e:	1c69      	adds	r1, r5, #1
 8010740:	e7e8      	b.n	8010714 <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

08010744 <MDNS::CreateAnswerLocalIpAddress()>:
 8010744:	2384      	movs	r3, #132	; 0x84
 8010746:	b510      	push	{r4, lr}
 8010748:	4c0f      	ldr	r4, [pc, #60]	; (8010788 <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 801074a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801074e:	80e3      	strh	r3, [r4, #6]
 8010750:	2300      	movs	r3, #0
 8010752:	490e      	ldr	r1, [pc, #56]	; (801078c <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 8010754:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010758:	6809      	ldr	r1, [r1, #0]
 801075a:	f104 0210 	add.w	r2, r4, #16
 801075e:	2301      	movs	r3, #1
 8010760:	f7ff ffd6 	bl	8010710 <MDNS::WriteDnsName(char const*, char*, bool)>
 8010764:	490a      	ldr	r1, [pc, #40]	; (8010790 <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 8010766:	1813      	adds	r3, r2, r0
 8010768:	5011      	str	r1, [r2, r0]
 801076a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 801076e:	605a      	str	r2, [r3, #4]
 8010770:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010774:	811a      	strh	r2, [r3, #8]
 8010776:	4a07      	ldr	r2, [pc, #28]	; (8010794 <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 8010778:	6812      	ldr	r2, [r2, #0]
 801077a:	6912      	ldr	r2, [r2, #16]
 801077c:	f8c3 200a 	str.w	r2, [r3, #10]
 8010780:	1b1b      	subs	r3, r3, r4
 8010782:	330a      	adds	r3, #10
 8010784:	6023      	str	r3, [r4, #0]
 8010786:	bd10      	pop	{r4, pc}
 8010788:	20009bc0 	andcs	r9, r0, r0, asr #23
 801078c:	20009fec 	andcs	r9, r0, ip, ror #31
 8010790:	01800100 	orreq	r0, r0, r0, lsl #2
 8010794:	20009ff4 	strdcs	r9, [r0], -r4

08010798 <MDNS::Start()>:
 8010798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801079a:	4c1d      	ldr	r4, [pc, #116]	; (8010810 <MDNS::Start()+0x78>)
 801079c:	f241 41e9 	movw	r1, #5353	; 0x14e9
 80107a0:	4605      	mov	r5, r0
 80107a2:	6820      	ldr	r0, [r4, #0]
 80107a4:	f000 fb26 	bl	8010df4 <Network::Begin(unsigned short)>
 80107a8:	4e1a      	ldr	r6, [pc, #104]	; (8010814 <MDNS::Start()+0x7c>)
 80107aa:	4f1b      	ldr	r7, [pc, #108]	; (8010818 <MDNS::Start()+0x80>)
 80107ac:	4601      	mov	r1, r0
 80107ae:	6030      	str	r0, [r6, #0]
 80107b0:	683a      	ldr	r2, [r7, #0]
 80107b2:	6820      	ldr	r0, [r4, #0]
 80107b4:	f000 fb2f 	bl	8010e16 <Network::JoinGroup(int, unsigned int)>
 80107b8:	4b18      	ldr	r3, [pc, #96]	; (801081c <MDNS::Start()+0x84>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	b923      	cbnz	r3, 80107c8 <MDNS::Start()+0x30>
 80107be:	6821      	ldr	r1, [r4, #0]
 80107c0:	4628      	mov	r0, r5
 80107c2:	311c      	adds	r1, #28
 80107c4:	f7ff ff38 	bl	8010638 <MDNS::SetName(char const*)>
 80107c8:	4628      	mov	r0, r5
 80107ca:	f7ff ffbb 	bl	8010744 <MDNS::CreateAnswerLocalIpAddress()>
 80107ce:	f241 43e9 	movw	r3, #5353	; 0x14e9
 80107d2:	4913      	ldr	r1, [pc, #76]	; (8010820 <MDNS::Start()+0x88>)
 80107d4:	7830      	ldrb	r0, [r6, #0]
 80107d6:	f831 2b04 	ldrh.w	r2, [r1], #4
 80107da:	9300      	str	r3, [sp, #0]
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	f7ff fe43 	bl	8010468 <udp_send>
 80107e2:	233f      	movs	r3, #63	; 0x3f
 80107e4:	6820      	ldr	r0, [r4, #0]
 80107e6:	4c0f      	ldr	r4, [pc, #60]	; (8010824 <MDNS::Start()+0x8c>)
 80107e8:	f100 025c 	add.w	r2, r0, #92	; 0x5c
 80107ec:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80107f0:	b929      	cbnz	r1, 80107fe <MDNS::Start()+0x66>
 80107f2:	4413      	add	r3, r2
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d006      	beq.n	8010806 <MDNS::Start()+0x6e>
 80107f8:	f802 1b01 	strb.w	r1, [r2], #1
 80107fc:	e7fa      	b.n	80107f4 <MDNS::Start()+0x5c>
 80107fe:	3b01      	subs	r3, #1
 8010800:	f802 1b01 	strb.w	r1, [r2], #1
 8010804:	d1f2      	bne.n	80107ec <MDNS::Start()+0x54>
 8010806:	2300      	movs	r3, #0
 8010808:	f880 309b 	strb.w	r3, [r0, #155]	; 0x9b
 801080c:	b003      	add	sp, #12
 801080e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010810:	20009ff4 	strdcs	r9, [r0], -r4
 8010814:	2000001c 	andcs	r0, r0, ip, lsl r0
 8010818:	20009bbc 			; <UNDEFINED> instruction: 0x20009bbc
 801081c:	20009fec 	andcs	r9, r0, ip, ror #31
 8010820:	20009bc0 	andcs	r9, r0, r0, asr #23
 8010824:	08017f2c 	stmdaeq	r1, {r2, r3, r5, r8, r9, sl, fp, ip, sp, lr}

08010828 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 8010828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801082c:	4c1b      	ldr	r4, [pc, #108]	; (801089c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 801082e:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8010832:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 8010836:	2300      	movs	r3, #0
 8010838:	f854 100c 	ldr.w	r1, [r4, ip]
 801083c:	4607      	mov	r7, r0
 801083e:	f7ff ff67 	bl	8010710 <MDNS::WriteDnsName(char const*, char*, bool)>
 8010842:	2301      	movs	r3, #1
 8010844:	7bac      	ldrb	r4, [r5, #14]
 8010846:	4616      	mov	r6, r2
 8010848:	4915      	ldr	r1, [pc, #84]	; (80108a0 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 801084a:	4402      	add	r2, r0
 801084c:	4815      	ldr	r0, [pc, #84]	; (80108a4 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 801084e:	429c      	cmp	r4, r3
 8010850:	bf18      	it	ne
 8010852:	4601      	movne	r1, r0
 8010854:	4638      	mov	r0, r7
 8010856:	f7ff ff5b 	bl	8010710 <MDNS::WriteDnsName(char const*, char*, bool)>
 801085a:	4b13      	ldr	r3, [pc, #76]	; (80108a8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 801085c:	1814      	adds	r4, r2, r0
 801085e:	5013      	str	r3, [r2, r0]
 8010860:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8010864:	6063      	str	r3, [r4, #4]
 8010866:	4b11      	ldr	r3, [pc, #68]	; (80108ac <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 8010868:	f8d3 8000 	ldr.w	r8, [r3]
 801086c:	4640      	mov	r0, r8
 801086e:	f7ff feab 	bl	80105c8 <strlen>
 8010872:	f100 0308 	add.w	r3, r0, #8
 8010876:	ba5b      	rev16	r3, r3
 8010878:	8123      	strh	r3, [r4, #8]
 801087a:	2300      	movs	r3, #0
 801087c:	f8c4 300a 	str.w	r3, [r4, #10]
 8010880:	89ab      	ldrh	r3, [r5, #12]
 8010882:	f104 0210 	add.w	r2, r4, #16
 8010886:	ba5b      	rev16	r3, r3
 8010888:	81e3      	strh	r3, [r4, #14]
 801088a:	4641      	mov	r1, r8
 801088c:	2301      	movs	r3, #1
 801088e:	4638      	mov	r0, r7
 8010890:	f7ff ff3e 	bl	8010710 <MDNS::WriteDnsName(char const*, char*, bool)>
 8010894:	4410      	add	r0, r2
 8010896:	1b80      	subs	r0, r0, r6
 8010898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801089c:	20009dc4 	andcs	r9, r0, r4, asr #27
 80108a0:	08017f28 	stmdaeq	r1, {r3, r5, r8, r9, sl, fp, ip, sp, lr}
 80108a4:	08017f45 	stmdaeq	r1, {r0, r2, r6, r8, r9, sl, fp, ip, sp, lr}
 80108a8:	01802100 	orreq	r2, r0, r0, lsl #2
 80108ac:	20009fec 	andcs	r9, r0, ip, ror #31

080108b0 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 80108b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108b4:	4e19      	ldr	r6, [pc, #100]	; (801091c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 80108b6:	010f      	lsls	r7, r1, #4
 80108b8:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 80108bc:	2300      	movs	r3, #0
 80108be:	59f1      	ldr	r1, [r6, r7]
 80108c0:	4604      	mov	r4, r0
 80108c2:	f7ff ff25 	bl	8010710 <MDNS::WriteDnsName(char const*, char*, bool)>
 80108c6:	2301      	movs	r3, #1
 80108c8:	7bae      	ldrb	r6, [r5, #14]
 80108ca:	4690      	mov	r8, r2
 80108cc:	4914      	ldr	r1, [pc, #80]	; (8010920 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 80108ce:	4402      	add	r2, r0
 80108d0:	4814      	ldr	r0, [pc, #80]	; (8010924 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 80108d2:	429e      	cmp	r6, r3
 80108d4:	bf18      	it	ne
 80108d6:	4601      	movne	r1, r0
 80108d8:	4620      	mov	r0, r4
 80108da:	f7ff ff19 	bl	8010710 <MDNS::WriteDnsName(char const*, char*, bool)>
 80108de:	4b12      	ldr	r3, [pc, #72]	; (8010928 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 80108e0:	1816      	adds	r6, r2, r0
 80108e2:	5013      	str	r3, [r2, r0]
 80108e4:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80108e8:	68a8      	ldr	r0, [r5, #8]
 80108ea:	6073      	str	r3, [r6, #4]
 80108ec:	f106 040b 	add.w	r4, r6, #11
 80108f0:	b938      	cbnz	r0, 8010902 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 80108f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108f6:	72b0      	strb	r0, [r6, #10]
 80108f8:	8133      	strh	r3, [r6, #8]
 80108fa:	eba4 0008 	sub.w	r0, r4, r8
 80108fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010902:	f7ff fe61 	bl	80105c8 <strlen>
 8010906:	4607      	mov	r7, r0
 8010908:	1c43      	adds	r3, r0, #1
 801090a:	72b0      	strb	r0, [r6, #10]
 801090c:	ba5b      	rev16	r3, r3
 801090e:	4620      	mov	r0, r4
 8010910:	68a9      	ldr	r1, [r5, #8]
 8010912:	8133      	strh	r3, [r6, #8]
 8010914:	f7ff fe6d 	bl	80105f2 <strcpy.isra.0>
 8010918:	443c      	add	r4, r7
 801091a:	e7ee      	b.n	80108fa <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 801091c:	20009dc4 	andcs	r9, r0, r4, asr #27
 8010920:	08017f28 	stmdaeq	r1, {r3, r5, r8, r9, sl, fp, ip, sp, lr}
 8010924:	08017f45 	stmdaeq	r1, {r0, r2, r6, r8, r9, sl, fp, ip, sp, lr}
 8010928:	01801000 	orreq	r1, r0, r0

0801092c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 801092c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010930:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8010994 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x68>
 8010934:	ea4f 1901 	mov.w	r9, r1, lsl #4
 8010938:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 801093c:	6869      	ldr	r1, [r5, #4]
 801093e:	2301      	movs	r3, #1
 8010940:	4607      	mov	r7, r0
 8010942:	f7ff fee5 	bl	8010710 <MDNS::WriteDnsName(char const*, char*, bool)>
 8010946:	4b14      	ldr	r3, [pc, #80]	; (8010998 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 8010948:	f858 8009 	ldr.w	r8, [r8, r9]
 801094c:	5013      	str	r3, [r2, r0]
 801094e:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8010952:	1816      	adds	r6, r2, r0
 8010954:	6073      	str	r3, [r6, #4]
 8010956:	4640      	mov	r0, r8
 8010958:	4614      	mov	r4, r2
 801095a:	f7ff fe35 	bl	80105c8 <strlen>
 801095e:	f100 030d 	add.w	r3, r0, #13
 8010962:	ba5b      	rev16	r3, r3
 8010964:	4641      	mov	r1, r8
 8010966:	8133      	strh	r3, [r6, #8]
 8010968:	f106 020a 	add.w	r2, r6, #10
 801096c:	2300      	movs	r3, #0
 801096e:	4638      	mov	r0, r7
 8010970:	f7ff fece 	bl	8010710 <MDNS::WriteDnsName(char const*, char*, bool)>
 8010974:	2301      	movs	r3, #1
 8010976:	4402      	add	r2, r0
 8010978:	7bad      	ldrb	r5, [r5, #14]
 801097a:	4808      	ldr	r0, [pc, #32]	; (801099c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 801097c:	4908      	ldr	r1, [pc, #32]	; (80109a0 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 801097e:	429d      	cmp	r5, r3
 8010980:	bf18      	it	ne
 8010982:	4601      	movne	r1, r0
 8010984:	4638      	mov	r0, r7
 8010986:	f7ff fec3 	bl	8010710 <MDNS::WriteDnsName(char const*, char*, bool)>
 801098a:	4410      	add	r0, r2
 801098c:	1b00      	subs	r0, r0, r4
 801098e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010992:	bf00      	nop
 8010994:	20009dc4 	andcs	r9, r0, r4, asr #27
 8010998:	01000c00 	tsteq	r0, r0, lsl #24
 801099c:	08017f45 	stmdaeq	r1, {r0, r2, r6, r8, r9, sl, fp, ip, sp, lr}
 80109a0:	08017f28 	stmdaeq	r1, {r3, r5, r8, r9, sl, fp, ip, sp, lr}

080109a4 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 80109a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109a6:	460f      	mov	r7, r1
 80109a8:	2301      	movs	r3, #1
 80109aa:	490f      	ldr	r1, [pc, #60]	; (80109e8 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x44>)
 80109ac:	4606      	mov	r6, r0
 80109ae:	f7ff feaf 	bl	8010710 <MDNS::WriteDnsName(char const*, char*, bool)>
 80109b2:	4b0e      	ldr	r3, [pc, #56]	; (80109ec <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 80109b4:	490e      	ldr	r1, [pc, #56]	; (80109f0 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 80109b6:	5013      	str	r3, [r2, r0]
 80109b8:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80109bc:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 80109c0:	684f      	ldr	r7, [r1, #4]
 80109c2:	1815      	adds	r5, r2, r0
 80109c4:	606b      	str	r3, [r5, #4]
 80109c6:	4638      	mov	r0, r7
 80109c8:	4614      	mov	r4, r2
 80109ca:	f7ff fdfd 	bl	80105c8 <strlen>
 80109ce:	1c83      	adds	r3, r0, #2
 80109d0:	ba5b      	rev16	r3, r3
 80109d2:	812b      	strh	r3, [r5, #8]
 80109d4:	f105 020a 	add.w	r2, r5, #10
 80109d8:	2301      	movs	r3, #1
 80109da:	4639      	mov	r1, r7
 80109dc:	4630      	mov	r0, r6
 80109de:	f7ff fe97 	bl	8010710 <MDNS::WriteDnsName(char const*, char*, bool)>
 80109e2:	4410      	add	r0, r2
 80109e4:	1b00      	subs	r0, r0, r4
 80109e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109e8:	08017f33 	stmdaeq	r1, {r0, r1, r4, r5, r8, r9, sl, fp, ip, sp, lr}
 80109ec:	01000c00 	tsteq	r0, r0, lsl #24
 80109f0:	20009dc4 	andcs	r9, r0, r4, asr #27

080109f4 <MDNS::CreateMDNSMessage(unsigned int)>:
 80109f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109f6:	2384      	movs	r3, #132	; 0x84
 80109f8:	4d19      	ldr	r5, [pc, #100]	; (8010a60 <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 80109fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80109fe:	80eb      	strh	r3, [r5, #6]
 8010a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a04:	f105 0410 	add.w	r4, r5, #16
 8010a08:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8010a0c:	4622      	mov	r2, r4
 8010a0e:	4606      	mov	r6, r0
 8010a10:	460f      	mov	r7, r1
 8010a12:	f7ff ff09 	bl	8010828 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 8010a16:	4404      	add	r4, r0
 8010a18:	4622      	mov	r2, r4
 8010a1a:	4639      	mov	r1, r7
 8010a1c:	4630      	mov	r0, r6
 8010a1e:	f7ff ff47 	bl	80108b0 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 8010a22:	4404      	add	r4, r0
 8010a24:	4622      	mov	r2, r4
 8010a26:	4639      	mov	r1, r7
 8010a28:	4630      	mov	r0, r6
 8010a2a:	f7ff ffbb 	bl	80109a4 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 8010a2e:	4404      	add	r4, r0
 8010a30:	4622      	mov	r2, r4
 8010a32:	4639      	mov	r1, r7
 8010a34:	4630      	mov	r0, r6
 8010a36:	f7ff ff79 	bl	801092c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 8010a3a:	4a0a      	ldr	r2, [pc, #40]	; (8010a64 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 8010a3c:	4404      	add	r4, r0
 8010a3e:	f852 3b10 	ldr.w	r3, [r2], #16
 8010a42:	1e60      	subs	r0, r4, #1
 8010a44:	3b0c      	subs	r3, #12
 8010a46:	4619      	mov	r1, r3
 8010a48:	3901      	subs	r1, #1
 8010a4a:	d204      	bcs.n	8010a56 <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 8010a4c:	441c      	add	r4, r3
 8010a4e:	4b06      	ldr	r3, [pc, #24]	; (8010a68 <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 8010a50:	1ae4      	subs	r4, r4, r3
 8010a52:	602c      	str	r4, [r5, #0]
 8010a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a56:	f812 6b01 	ldrb.w	r6, [r2], #1
 8010a5a:	f800 6f01 	strb.w	r6, [r0, #1]!
 8010a5e:	e7f3      	b.n	8010a48 <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 8010a60:	20009de8 	andcs	r9, r0, r8, ror #27
 8010a64:	20009bc0 	andcs	r9, r0, r0, asr #23
 8010a68:	20009dec 	andcs	r9, r0, ip, ror #27

08010a6c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 8010a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a70:	4d40      	ldr	r5, [pc, #256]	; (8010b74 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>)
 8010a72:	b085      	sub	sp, #20
 8010a74:	682c      	ldr	r4, [r5, #0]
 8010a76:	4680      	mov	r8, r0
 8010a78:	460f      	mov	r7, r1
 8010a7a:	4616      	mov	r6, r2
 8010a7c:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8010a80:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8010a84:	b11c      	cbz	r4, 8010a8e <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22>
 8010a86:	692a      	ldr	r2, [r5, #16]
 8010a88:	2a00      	cmp	r2, #0
 8010a8a:	d16e      	bne.n	8010b6a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfe>
 8010a8c:	2401      	movs	r4, #1
 8010a8e:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8010a92:	ea4f 1904 	mov.w	r9, r4, lsl #4
 8010a96:	8193      	strh	r3, [r2, #12]
 8010a98:	f882 b00e 	strb.w	fp, [r2, #14]
 8010a9c:	2f00      	cmp	r7, #0
 8010a9e:	d154      	bne.n	8010b4a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xde>
 8010aa0:	4b35      	ldr	r3, [pc, #212]	; (8010b78 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 8010aa2:	6818      	ldr	r0, [r3, #0]
 8010aa4:	301c      	adds	r0, #28
 8010aa6:	f7ff fd8f 	bl	80105c8 <strlen>
 8010aaa:	4607      	mov	r7, r0
 8010aac:	4630      	mov	r0, r6
 8010aae:	f7ff fd8b 	bl	80105c8 <strlen>
 8010ab2:	4438      	add	r0, r7
 8010ab4:	3001      	adds	r0, #1
 8010ab6:	f002 fe55 	bl	8013764 <operator new[](unsigned int)>
 8010aba:	4b2f      	ldr	r3, [pc, #188]	; (8010b78 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 8010abc:	f845 0009 	str.w	r0, [r5, r9]
 8010ac0:	6819      	ldr	r1, [r3, #0]
 8010ac2:	311c      	adds	r1, #28
 8010ac4:	f7ff fd95 	bl	80105f2 <strcpy.isra.0>
 8010ac8:	f855 0009 	ldr.w	r0, [r5, r9]
 8010acc:	4631      	mov	r1, r6
 8010ace:	f7ff fd98 	bl	8010602 <strcat.isra.0>
 8010ad2:	4631      	mov	r1, r6
 8010ad4:	4640      	mov	r0, r8
 8010ad6:	f7ff fe0d 	bl	80106f4 <MDNS::FindFirstDotFromRight(char const*) const>
 8010ada:	eb05 0709 	add.w	r7, r5, r9
 8010ade:	4605      	mov	r5, r0
 8010ae0:	f7ff fd72 	bl	80105c8 <strlen>
 8010ae4:	300d      	adds	r0, #13
 8010ae6:	f002 fe3d 	bl	8013764 <operator new[](unsigned int)>
 8010aea:	4629      	mov	r1, r5
 8010aec:	6078      	str	r0, [r7, #4]
 8010aee:	f7ff fd80 	bl	80105f2 <strcpy.isra.0>
 8010af2:	4922      	ldr	r1, [pc, #136]	; (8010b7c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f7ff fd84 	bl	8010602 <strcat.isra.0>
 8010afa:	4921      	ldr	r1, [pc, #132]	; (8010b80 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 8010afc:	4b21      	ldr	r3, [pc, #132]	; (8010b84 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f1bb 0f01 	cmp.w	fp, #1
 8010b04:	bf18      	it	ne
 8010b06:	4619      	movne	r1, r3
 8010b08:	f7ff fd7b 	bl	8010602 <strcat.isra.0>
 8010b0c:	f1ba 0f00 	cmp.w	sl, #0
 8010b10:	d009      	beq.n	8010b26 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xba>
 8010b12:	4650      	mov	r0, sl
 8010b14:	f7ff fd58 	bl	80105c8 <strlen>
 8010b18:	3001      	adds	r0, #1
 8010b1a:	f002 fe23 	bl	8013764 <operator new[](unsigned int)>
 8010b1e:	4651      	mov	r1, sl
 8010b20:	60b8      	str	r0, [r7, #8]
 8010b22:	f7ff fd66 	bl	80105f2 <strcpy.isra.0>
 8010b26:	4621      	mov	r1, r4
 8010b28:	4640      	mov	r0, r8
 8010b2a:	f7ff ff63 	bl	80109f4 <MDNS::CreateMDNSMessage(unsigned int)>
 8010b2e:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8010b32:	4915      	ldr	r1, [pc, #84]	; (8010b88 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 8010b34:	4815      	ldr	r0, [pc, #84]	; (8010b8c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 8010b36:	f831 2b04 	ldrh.w	r2, [r1], #4
 8010b3a:	9300      	str	r3, [sp, #0]
 8010b3c:	4b14      	ldr	r3, [pc, #80]	; (8010b90 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x124>)
 8010b3e:	7800      	ldrb	r0, [r0, #0]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	f7ff fc91 	bl	8010468 <udp_send>
 8010b46:	2001      	movs	r0, #1
 8010b48:	e010      	b.n	8010b6c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x100>
 8010b4a:	4638      	mov	r0, r7
 8010b4c:	f7ff fd3c 	bl	80105c8 <strlen>
 8010b50:	9003      	str	r0, [sp, #12]
 8010b52:	4630      	mov	r0, r6
 8010b54:	f7ff fd38 	bl	80105c8 <strlen>
 8010b58:	9b03      	ldr	r3, [sp, #12]
 8010b5a:	4418      	add	r0, r3
 8010b5c:	3001      	adds	r0, #1
 8010b5e:	f002 fe01 	bl	8013764 <operator new[](unsigned int)>
 8010b62:	4639      	mov	r1, r7
 8010b64:	f845 0009 	str.w	r0, [r5, r9]
 8010b68:	e7ac      	b.n	8010ac4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x58>
 8010b6a:	2000      	movs	r0, #0
 8010b6c:	b005      	add	sp, #20
 8010b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b72:	bf00      	nop
 8010b74:	20009dc4 	andcs	r9, r0, r4, asr #27
 8010b78:	20009ff4 	strdcs	r9, [r0], -r4
 8010b7c:	08016f2b 	stmdaeq	r1, {r0, r1, r3, r5, r8, r9, sl, fp, sp, lr}
 8010b80:	08017f28 	stmdaeq	r1, {r3, r5, r8, r9, sl, fp, ip, sp, lr}
 8010b84:	08017f45 	stmdaeq	r1, {r0, r2, r6, r8, r9, sl, fp, ip, sp, lr}
 8010b88:	20009de8 	andcs	r9, r0, r8, ror #27
 8010b8c:	2000001c 	andcs	r0, r0, ip, lsl r0
 8010b90:	20009bbc 			; <UNDEFINED> instruction: 0x20009bbc

08010b94 <MDNS::HandleRequest(unsigned short)>:
 8010b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b98:	4605      	mov	r5, r0
 8010b9a:	2700      	movs	r7, #0
 8010b9c:	f04f 080c 	mov.w	r8, #12
 8010ba0:	b0c5      	sub	sp, #276	; 0x114
 8010ba2:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8010c64 <MDNS::HandleRequest(unsigned short)+0xd0>
 8010ba6:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8010c68 <MDNS::HandleRequest(unsigned short)+0xd4>
 8010baa:	9103      	str	r1, [sp, #12]
 8010bac:	9b03      	ldr	r3, [sp, #12]
 8010bae:	42bb      	cmp	r3, r7
 8010bb0:	d802      	bhi.n	8010bb8 <MDNS::HandleRequest(unsigned short)+0x24>
 8010bb2:	b045      	add	sp, #276	; 0x114
 8010bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bb8:	f8da 1000 	ldr.w	r1, [sl]
 8010bbc:	aa04      	add	r2, sp, #16
 8010bbe:	4441      	add	r1, r8
 8010bc0:	4628      	mov	r0, r5
 8010bc2:	f7ff fd55 	bl	8010670 <MDNS::DecodeDNSNameNotation(char const*, char*)>
 8010bc6:	f8da 2000 	ldr.w	r2, [sl]
 8010bca:	4440      	add	r0, r8
 8010bcc:	1813      	adds	r3, r2, r0
 8010bce:	885b      	ldrh	r3, [r3, #2]
 8010bd0:	f100 0804 	add.w	r8, r0, #4
 8010bd4:	ba5b      	rev16	r3, r3
 8010bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bda:	2b01      	cmp	r3, #1
 8010bdc:	d13d      	bne.n	8010c5a <MDNS::HandleRequest(unsigned short)+0xc6>
 8010bde:	5a14      	ldrh	r4, [r2, r0]
 8010be0:	4b22      	ldr	r3, [pc, #136]	; (8010c6c <MDNS::HandleRequest(unsigned short)+0xd8>)
 8010be2:	ba64      	rev16	r4, r4
 8010be4:	6818      	ldr	r0, [r3, #0]
 8010be6:	a904      	add	r1, sp, #16
 8010be8:	b2a4      	uxth	r4, r4
 8010bea:	f7ff fcf5 	bl	80105d8 <strcmp>
 8010bee:	b968      	cbnz	r0, 8010c0c <MDNS::HandleRequest(unsigned short)+0x78>
 8010bf0:	2c01      	cmp	r4, #1
 8010bf2:	d10b      	bne.n	8010c0c <MDNS::HandleRequest(unsigned short)+0x78>
 8010bf4:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8010bf8:	491d      	ldr	r1, [pc, #116]	; (8010c70 <MDNS::HandleRequest(unsigned short)+0xdc>)
 8010bfa:	481e      	ldr	r0, [pc, #120]	; (8010c74 <MDNS::HandleRequest(unsigned short)+0xe0>)
 8010bfc:	f831 2b04 	ldrh.w	r2, [r1], #4
 8010c00:	9300      	str	r3, [sp, #0]
 8010c02:	4b1d      	ldr	r3, [pc, #116]	; (8010c78 <MDNS::HandleRequest(unsigned short)+0xe4>)
 8010c04:	7800      	ldrb	r0, [r0, #0]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	f7ff fc2e 	bl	8010468 <udp_send>
 8010c0c:	481b      	ldr	r0, [pc, #108]	; (8010c7c <MDNS::HandleRequest(unsigned short)+0xe8>)
 8010c0e:	a904      	add	r1, sp, #16
 8010c10:	f7ff fce2 	bl	80105d8 <strcmp>
 8010c14:	f04f 0900 	mov.w	r9, #0
 8010c18:	4e19      	ldr	r6, [pc, #100]	; (8010c80 <MDNS::HandleRequest(unsigned short)+0xec>)
 8010c1a:	9002      	str	r0, [sp, #8]
 8010c1c:	6833      	ldr	r3, [r6, #0]
 8010c1e:	b1c3      	cbz	r3, 8010c52 <MDNS::HandleRequest(unsigned short)+0xbe>
 8010c20:	9b02      	ldr	r3, [sp, #8]
 8010c22:	b123      	cbz	r3, 8010c2e <MDNS::HandleRequest(unsigned short)+0x9a>
 8010c24:	6870      	ldr	r0, [r6, #4]
 8010c26:	a904      	add	r1, sp, #16
 8010c28:	f7ff fcd6 	bl	80105d8 <strcmp>
 8010c2c:	b988      	cbnz	r0, 8010c52 <MDNS::HandleRequest(unsigned short)+0xbe>
 8010c2e:	2c0c      	cmp	r4, #12
 8010c30:	d10f      	bne.n	8010c52 <MDNS::HandleRequest(unsigned short)+0xbe>
 8010c32:	4649      	mov	r1, r9
 8010c34:	4628      	mov	r0, r5
 8010c36:	f7ff fedd 	bl	80109f4 <MDNS::CreateMDNSMessage(unsigned int)>
 8010c3a:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8010c3e:	480d      	ldr	r0, [pc, #52]	; (8010c74 <MDNS::HandleRequest(unsigned short)+0xe0>)
 8010c40:	9300      	str	r3, [sp, #0]
 8010c42:	4b0d      	ldr	r3, [pc, #52]	; (8010c78 <MDNS::HandleRequest(unsigned short)+0xe4>)
 8010c44:	f8bb 2000 	ldrh.w	r2, [fp]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	490e      	ldr	r1, [pc, #56]	; (8010c84 <MDNS::HandleRequest(unsigned short)+0xf0>)
 8010c4c:	7800      	ldrb	r0, [r0, #0]
 8010c4e:	f7ff fc0b 	bl	8010468 <udp_send>
 8010c52:	3610      	adds	r6, #16
 8010c54:	f1b9 0f00 	cmp.w	r9, #0
 8010c58:	d001      	beq.n	8010c5e <MDNS::HandleRequest(unsigned short)+0xca>
 8010c5a:	3701      	adds	r7, #1
 8010c5c:	e7a6      	b.n	8010bac <MDNS::HandleRequest(unsigned short)+0x18>
 8010c5e:	f04f 0901 	mov.w	r9, #1
 8010c62:	e7db      	b.n	8010c1c <MDNS::HandleRequest(unsigned short)+0x88>
 8010c64:	20009ff0 	strdcs	r9, [r0], -r0
 8010c68:	20009de8 	andcs	r9, r0, r8, ror #27
 8010c6c:	20009fec 	andcs	r9, r0, ip, ror #31
 8010c70:	20009bc0 	andcs	r9, r0, r0, asr #23
 8010c74:	2000001c 	andcs	r0, r0, ip, lsl r0
 8010c78:	20009bbc 			; <UNDEFINED> instruction: 0x20009bbc
 8010c7c:	08017f33 	stmdaeq	r1, {r0, r1, r4, r5, r8, r9, sl, fp, ip, sp, lr}
 8010c80:	20009dc4 	andcs	r9, r0, r4, asr #27
 8010c84:	20009dec 	andcs	r9, r0, ip, ror #27

08010c88 <MDNS::Parse()>:
 8010c88:	4b08      	ldr	r3, [pc, #32]	; (8010cac <MDNS::Parse()+0x24>)
 8010c8a:	681a      	ldr	r2, [r3, #0]
 8010c8c:	8853      	ldrh	r3, [r2, #2]
 8010c8e:	ba5b      	rev16	r3, r3
 8010c90:	b299      	uxth	r1, r3
 8010c92:	041b      	lsls	r3, r3, #16
 8010c94:	d408      	bmi.n	8010ca8 <MDNS::Parse()+0x20>
 8010c96:	0b89      	lsrs	r1, r1, #14
 8010c98:	d106      	bne.n	8010ca8 <MDNS::Parse()+0x20>
 8010c9a:	8891      	ldrh	r1, [r2, #4]
 8010c9c:	b28b      	uxth	r3, r1
 8010c9e:	b11b      	cbz	r3, 8010ca8 <MDNS::Parse()+0x20>
 8010ca0:	ba49      	rev16	r1, r1
 8010ca2:	b289      	uxth	r1, r1
 8010ca4:	f7ff bf76 	b.w	8010b94 <MDNS::HandleRequest(unsigned short)>
 8010ca8:	4770      	bx	lr
 8010caa:	bf00      	nop
 8010cac:	20009ff0 	strdcs	r9, [r0], -r0

08010cb0 <MDNS::Run()>:
 8010cb0:	b538      	push	{r3, r4, r5, lr}
 8010cb2:	4d0c      	ldr	r5, [pc, #48]	; (8010ce4 <MDNS::Run()+0x34>)
 8010cb4:	4604      	mov	r4, r0
 8010cb6:	480c      	ldr	r0, [pc, #48]	; (8010ce8 <MDNS::Run()+0x38>)
 8010cb8:	462b      	mov	r3, r5
 8010cba:	4a0c      	ldr	r2, [pc, #48]	; (8010cec <MDNS::Run()+0x3c>)
 8010cbc:	490c      	ldr	r1, [pc, #48]	; (8010cf0 <MDNS::Run()+0x40>)
 8010cbe:	7800      	ldrb	r0, [r0, #0]
 8010cc0:	f7ff fbac 	bl	801041c <udp_recv2>
 8010cc4:	4b0b      	ldr	r3, [pc, #44]	; (8010cf4 <MDNS::Run()+0x44>)
 8010cc6:	882a      	ldrh	r2, [r5, #0]
 8010cc8:	8018      	strh	r0, [r3, #0]
 8010cca:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8010cce:	429a      	cmp	r2, r3
 8010cd0:	d106      	bne.n	8010ce0 <MDNS::Run()+0x30>
 8010cd2:	280c      	cmp	r0, #12
 8010cd4:	d904      	bls.n	8010ce0 <MDNS::Run()+0x30>
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cdc:	f7ff bfd4 	b.w	8010c88 <MDNS::Parse()>
 8010ce0:	bd38      	pop	{r3, r4, r5, pc}
 8010ce2:	bf00      	nop
 8010ce4:	20009bb8 			; <UNDEFINED> instruction: 0x20009bb8
 8010ce8:	2000001c 	andcs	r0, r0, ip, lsl r0
 8010cec:	20009bb4 			; <UNDEFINED> instruction: 0x20009bb4
 8010cf0:	20009ff0 	strdcs	r9, [r0], -r0
 8010cf4:	20009de4 	andcs	r9, r0, r4, ror #27

08010cf8 <MDNS::Print()>:
 8010cf8:	b510      	push	{r4, lr}
 8010cfa:	4816      	ldr	r0, [pc, #88]	; (8010d54 <MDNS::Print()+0x5c>)
 8010cfc:	f003 f924 	bl	8013f48 <printf>
 8010d00:	4b15      	ldr	r3, [pc, #84]	; (8010d58 <MDNS::Print()+0x60>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	3301      	adds	r3, #1
 8010d06:	d104      	bne.n	8010d12 <MDNS::Print()+0x1a>
 8010d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d0c:	4813      	ldr	r0, [pc, #76]	; (8010d5c <MDNS::Print()+0x64>)
 8010d0e:	f003 b91b 	b.w	8013f48 <printf>
 8010d12:	4b13      	ldr	r3, [pc, #76]	; (8010d60 <MDNS::Print()+0x68>)
 8010d14:	4c13      	ldr	r4, [pc, #76]	; (8010d64 <MDNS::Print()+0x6c>)
 8010d16:	6819      	ldr	r1, [r3, #0]
 8010d18:	4813      	ldr	r0, [pc, #76]	; (8010d68 <MDNS::Print()+0x70>)
 8010d1a:	f003 f915 	bl	8013f48 <printf>
 8010d1e:	6823      	ldr	r3, [r4, #0]
 8010d20:	b14b      	cbz	r3, 8010d36 <MDNS::Print()+0x3e>
 8010d22:	4a12      	ldr	r2, [pc, #72]	; (8010d6c <MDNS::Print()+0x74>)
 8010d24:	68a3      	ldr	r3, [r4, #8]
 8010d26:	6861      	ldr	r1, [r4, #4]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	bf08      	it	eq
 8010d2c:	4613      	moveq	r3, r2
 8010d2e:	4810      	ldr	r0, [pc, #64]	; (8010d70 <MDNS::Print()+0x78>)
 8010d30:	89a2      	ldrh	r2, [r4, #12]
 8010d32:	f003 f909 	bl	8013f48 <printf>
 8010d36:	6923      	ldr	r3, [r4, #16]
 8010d38:	b15b      	cbz	r3, 8010d52 <MDNS::Print()+0x5a>
 8010d3a:	69a3      	ldr	r3, [r4, #24]
 8010d3c:	4a0b      	ldr	r2, [pc, #44]	; (8010d6c <MDNS::Print()+0x74>)
 8010d3e:	6961      	ldr	r1, [r4, #20]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	bf08      	it	eq
 8010d44:	4613      	moveq	r3, r2
 8010d46:	480a      	ldr	r0, [pc, #40]	; (8010d70 <MDNS::Print()+0x78>)
 8010d48:	8ba2      	ldrh	r2, [r4, #28]
 8010d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d4e:	f003 b8fb 	b.w	8013f48 <printf>
 8010d52:	bd10      	pop	{r4, pc}
 8010d54:	08017f50 	stmdaeq	r1, {r4, r6, r8, r9, sl, fp, ip, sp, lr}
 8010d58:	2000001c 	andcs	r0, r0, ip, lsl r0
 8010d5c:	08017f56 	stmdaeq	r1, {r1, r2, r4, r6, r8, r9, sl, fp, ip, sp, lr}
 8010d60:	20009fec 	andcs	r9, r0, ip, ror #31
 8010d64:	20009dc4 	andcs	r9, r0, r4, asr #27
 8010d68:	08017f64 	stmdaeq	r1, {r2, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 8010d6c:	0801724d 	stmdaeq	r1, {r0, r2, r3, r6, r9, ip, sp, lr}
 8010d70:	08017f70 	stmdaeq	r1, {r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}

08010d74 <strncpy.constprop.0.isra.0>:
 8010d74:	233f      	movs	r3, #63	; 0x3f
 8010d76:	3901      	subs	r1, #1
 8010d78:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010d7c:	b92a      	cbnz	r2, 8010d8a <strncpy.constprop.0.isra.0+0x16>
 8010d7e:	4403      	add	r3, r0
 8010d80:	4298      	cmp	r0, r3
 8010d82:	d006      	beq.n	8010d92 <strncpy.constprop.0.isra.0+0x1e>
 8010d84:	f800 2b01 	strb.w	r2, [r0], #1
 8010d88:	e7fa      	b.n	8010d80 <strncpy.constprop.0.isra.0+0xc>
 8010d8a:	3b01      	subs	r3, #1
 8010d8c:	f800 2b01 	strb.w	r2, [r0], #1
 8010d90:	d1f2      	bne.n	8010d78 <strncpy.constprop.0.isra.0+0x4>
 8010d92:	4770      	bx	lr

08010d94 <Network::Network()>:
 8010d94:	4a11      	ldr	r2, [pc, #68]	; (8010ddc <Network::Network()+0x48>)
 8010d96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010d9a:	6010      	str	r0, [r2, #0]
 8010d9c:	2201      	movs	r2, #1
 8010d9e:	2300      	movs	r3, #0
 8010da0:	e9c0 1200 	strd	r1, r2, [r0]
 8010da4:	2200      	movs	r2, #0
 8010da6:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
 8010daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010dae:	490c      	ldr	r1, [pc, #48]	; (8010de0 <Network::Network()+0x4c>)
 8010db0:	60c2      	str	r2, [r0, #12]
 8010db2:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 8010db6:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
 8010dba:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
 8010dbe:	6083      	str	r3, [r0, #8]
 8010dc0:	6183      	str	r3, [r0, #24]
 8010dc2:	7703      	strb	r3, [r0, #28]
 8010dc4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8010dc8:	f100 02a2 	add.w	r2, r0, #162	; 0xa2
 8010dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010dd0:	f802 3b01 	strb.w	r3, [r2], #1
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d1f9      	bne.n	8010dcc <Network::Network()+0x38>
 8010dd8:	4770      	bx	lr
 8010dda:	bf00      	nop
 8010ddc:	20009ff4 	strdcs	r9, [r0], -r4
 8010de0:	08017f7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}

08010de4 <Network::Shutdown()>:
 8010de4:	b508      	push	{r3, lr}
 8010de6:	30b8      	adds	r0, #184	; 0xb8
 8010de8:	f001 fd6e 	bl	80128c8 <NetworkDisplay::ShowShutdown()>
 8010dec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010df0:	f7f6 ba2a 	b.w	8007248 <net_shutdown>

08010df4 <Network::Begin(unsigned short)>:
 8010df4:	4608      	mov	r0, r1
 8010df6:	f7ff baa1 	b.w	801033c <udp_bind>

08010dfa <Network::End(unsigned short)>:
 8010dfa:	4608      	mov	r0, r1
 8010dfc:	f7ff bab8 	b.w	8010370 <udp_unbind>

08010e00 <Network::MacAddressCopyTo(unsigned char*)>:
 8010e00:	f100 039c 	add.w	r3, r0, #156	; 0x9c
 8010e04:	3901      	subs	r1, #1
 8010e06:	30a2      	adds	r0, #162	; 0xa2
 8010e08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e0c:	4283      	cmp	r3, r0
 8010e0e:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010e12:	d1f9      	bne.n	8010e08 <Network::MacAddressCopyTo(unsigned char*)+0x8>
 8010e14:	4770      	bx	lr

08010e16 <Network::JoinGroup(int, unsigned int)>:
 8010e16:	4610      	mov	r0, r2
 8010e18:	f001 b820 	b.w	8011e5c <igmp_join>

08010e1c <Network::LeaveGroup(int, unsigned int)>:
 8010e1c:	4610      	mov	r0, r2
 8010e1e:	f001 b849 	b.w	8011eb4 <igmp_leave>

08010e22 <Network::SetDefaultIp()>:
 8010e22:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8010e26:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
 8010e2a:	041b      	lsls	r3, r3, #16
 8010e2c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010e30:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
 8010e34:	3302      	adds	r3, #2
 8010e36:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8010e3a:	22ff      	movs	r2, #255	; 0xff
 8010e3c:	6103      	str	r3, [r0, #16]
 8010e3e:	e9c0 3205 	strd	r3, r2, [r0, #20]
 8010e42:	4770      	bx	lr

08010e44 <Network::Init(NetworkParamsStore*)>:
 8010e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e48:	b08b      	sub	sp, #44	; 0x2c
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	a806      	add	r0, sp, #24
 8010e4e:	f000 fa5b 	bl	8011308 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 8010e52:	a806      	add	r0, sp, #24
 8010e54:	f000 fa68 	bl	8011328 <NetworkParams::Load()>
 8010e58:	b110      	cbz	r0, 8010e60 <Network::Init(NetworkParamsStore*)+0x1c>
 8010e5a:	a806      	add	r0, sp, #24
 8010e5c:	f000 fcd1 	bl	8011802 <NetworkParams::Dump()>
 8010e60:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 8010e64:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8011094 <Network::Init(NetworkParamsStore*)+0x250>
 8010e68:	4628      	mov	r0, r5
 8010e6a:	f104 079c 	add.w	r7, r4, #156	; 0x9c
 8010e6e:	f001 fd13 	bl	8012898 <NetworkDisplay::ShowEmacStart()>
 8010e72:	4638      	mov	r0, r7
 8010e74:	f004 f81a 	bl	8014eac <emac_start>
 8010e78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010e7c:	f104 061c 	add.w	r6, r4, #28
 8010e80:	9307      	str	r3, [sp, #28]
 8010e82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010e86:	9308      	str	r3, [sp, #32]
 8010e88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8010e8e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8010e92:	7063      	strb	r3, [r4, #1]
 8010e94:	f8d8 3000 	ldr.w	r3, [r8]
 8010e98:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8010e9c:	bf18      	it	ne
 8010e9e:	f8d8 2055 	ldrne.w	r2, [r8, #85]	; 0x55
 8010ea2:	061b      	lsls	r3, r3, #24
 8010ea4:	bf58      	it	pl
 8010ea6:	2300      	movpl	r3, #0
 8010ea8:	60a2      	str	r2, [r4, #8]
 8010eaa:	bf48      	it	mi
 8010eac:	f8d8 3059 	ldrmi.w	r3, [r8, #89]	; 0x59
 8010eb0:	60e3      	str	r3, [r4, #12]
 8010eb2:	f898 3015 	ldrb.w	r3, [r8, #21]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	f040 80bc 	bne.w	8011034 <Network::Init(NetworkParamsStore*)+0x1f0>
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	4976      	ldr	r1, [pc, #472]	; (8011098 <Network::Init(NetworkParamsStore*)+0x254>)
 8010ec0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ec4:	f103 0c01 	add.w	ip, r3, #1
 8010ec8:	2a00      	cmp	r2, #0
 8010eca:	f040 80af 	bne.w	801102c <Network::Init(NetworkParamsStore*)+0x1e8>
 8010ece:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
 8010ed2:	18e1      	adds	r1, r4, r3
 8010ed4:	0910      	lsrs	r0, r2, #4
 8010ed6:	2a9f      	cmp	r2, #159	; 0x9f
 8010ed8:	f002 020f 	and.w	r2, r2, #15
 8010edc:	bf94      	ite	ls
 8010ede:	3030      	addls	r0, #48	; 0x30
 8010ee0:	3037      	addhi	r0, #55	; 0x37
 8010ee2:	2a09      	cmp	r2, #9
 8010ee4:	bf94      	ite	ls
 8010ee6:	3230      	addls	r2, #48	; 0x30
 8010ee8:	3237      	addhi	r2, #55	; 0x37
 8010eea:	44a4      	add	ip, r4
 8010eec:	7708      	strb	r0, [r1, #28]
 8010eee:	f88c 201c 	strb.w	r2, [ip, #28]
 8010ef2:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
 8010ef6:	f103 0e02 	add.w	lr, r3, #2
 8010efa:	0910      	lsrs	r0, r2, #4
 8010efc:	2a9f      	cmp	r2, #159	; 0x9f
 8010efe:	f002 020f 	and.w	r2, r2, #15
 8010f02:	bf94      	ite	ls
 8010f04:	3030      	addls	r0, #48	; 0x30
 8010f06:	3037      	addhi	r0, #55	; 0x37
 8010f08:	f103 0903 	add.w	r9, r3, #3
 8010f0c:	2a09      	cmp	r2, #9
 8010f0e:	44a6      	add	lr, r4
 8010f10:	f88e 001c 	strb.w	r0, [lr, #28]
 8010f14:	bf94      	ite	ls
 8010f16:	3230      	addls	r2, #48	; 0x30
 8010f18:	3237      	addhi	r2, #55	; 0x37
 8010f1a:	eb04 0009 	add.w	r0, r4, r9
 8010f1e:	7702      	strb	r2, [r0, #28]
 8010f20:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 8010f24:	f103 0c04 	add.w	ip, r3, #4
 8010f28:	0910      	lsrs	r0, r2, #4
 8010f2a:	2a9f      	cmp	r2, #159	; 0x9f
 8010f2c:	f002 020f 	and.w	r2, r2, #15
 8010f30:	bf94      	ite	ls
 8010f32:	3030      	addls	r0, #48	; 0x30
 8010f34:	3037      	addhi	r0, #55	; 0x37
 8010f36:	3305      	adds	r3, #5
 8010f38:	2a09      	cmp	r2, #9
 8010f3a:	4423      	add	r3, r4
 8010f3c:	44a4      	add	ip, r4
 8010f3e:	bf94      	ite	ls
 8010f40:	3230      	addls	r2, #48	; 0x30
 8010f42:	3237      	addhi	r2, #55	; 0x37
 8010f44:	f88c 001c 	strb.w	r0, [ip, #28]
 8010f48:	771a      	strb	r2, [r3, #28]
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
 8010f50:	7863      	ldrb	r3, [r4, #1]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	f040 8098 	bne.w	8011088 <Network::Init(NetworkParamsStore*)+0x244>
 8010f58:	9b07      	ldr	r3, [sp, #28]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d172      	bne.n	8011044 <Network::Init(NetworkParamsStore*)+0x200>
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f7ff ff5f 	bl	8010e22 <Network::SetDefaultIp()>
 8010f64:	6923      	ldr	r3, [r4, #16]
 8010f66:	69a2      	ldr	r2, [r4, #24]
 8010f68:	9307      	str	r3, [sp, #28]
 8010f6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010f6e:	1ce3      	adds	r3, r4, #3
 8010f70:	f104 0901 	add.w	r9, r4, #1
 8010f74:	9302      	str	r3, [sp, #8]
 8010f76:	9300      	str	r3, [sp, #0]
 8010f78:	4632      	mov	r2, r6
 8010f7a:	464b      	mov	r3, r9
 8010f7c:	4638      	mov	r0, r7
 8010f7e:	a907      	add	r1, sp, #28
 8010f80:	f7f6 f912 	bl	80071a8 <net_init>
 8010f84:	78e3      	ldrb	r3, [r4, #3]
 8010f86:	b11b      	cbz	r3, 8010f90 <Network::Init(NetworkParamsStore*)+0x14c>
 8010f88:	2104      	movs	r1, #4
 8010f8a:	4628      	mov	r0, r5
 8010f8c:	f001 fca2 	bl	80128d4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8010f90:	f898 3014 	ldrb.w	r3, [r8, #20]
 8010f94:	f898 a05d 	ldrb.w	sl, [r8, #93]	; 0x5d
 8010f98:	9304      	str	r3, [sp, #16]
 8010f9a:	233c      	movs	r3, #60	; 0x3c
 8010f9c:	fb03 f30a 	mul.w	r3, r3, sl
 8010fa0:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 801109c <Network::Init(NetworkParamsStore*)+0x258>
 8010fa4:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 80110a0 <Network::Init(NetworkParamsStore*)+0x25c>
 8010fa8:	9303      	str	r3, [sp, #12]
 8010faa:	78e3      	ldrb	r3, [r4, #3]
 8010fac:	b393      	cbz	r3, 8011014 <Network::Init(NetworkParamsStore*)+0x1d0>
 8010fae:	f1ba 0f00 	cmp.w	sl, #0
 8010fb2:	d02f      	beq.n	8011014 <Network::Init(NetworkParamsStore*)+0x1d0>
 8010fb4:	9b04      	ldr	r3, [sp, #16]
 8010fb6:	b36b      	cbz	r3, 8011014 <Network::Init(NetworkParamsStore*)+0x1d0>
 8010fb8:	2104      	movs	r1, #4
 8010fba:	f8d8 0000 	ldr.w	r0, [r8]
 8010fbe:	f002 fae7 	bl	8013590 <LedBlink::SetMode(ledblink::Mode)>
 8010fc2:	2103      	movs	r1, #3
 8010fc4:	4628      	mov	r0, r5
 8010fc6:	f001 fc85 	bl	80128d4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8010fca:	2000      	movs	r0, #0
 8010fcc:	f003 f8f2 	bl	80141b4 <time>
 8010fd0:	9005      	str	r0, [sp, #20]
 8010fd2:	2000      	movs	r0, #0
 8010fd4:	f003 f8ee 	bl	80141b4 <time>
 8010fd8:	9b05      	ldr	r3, [sp, #20]
 8010fda:	4932      	ldr	r1, [pc, #200]	; (80110a4 <Network::Init(NetworkParamsStore*)+0x260>)
 8010fdc:	1ac0      	subs	r0, r0, r3
 8010fde:	9b03      	ldr	r3, [sp, #12]
 8010fe0:	4298      	cmp	r0, r3
 8010fe2:	db37      	blt.n	8011054 <Network::Init(NetworkParamsStore*)+0x210>
 8010fe4:	2101      	movs	r1, #1
 8010fe6:	4628      	mov	r0, r5
 8010fe8:	f001 fc74 	bl	80128d4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8010fec:	2101      	movs	r1, #1
 8010fee:	f8d8 0000 	ldr.w	r0, [r8]
 8010ff2:	f002 facd 	bl	8013590 <LedBlink::SetMode(ledblink::Mode)>
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	7063      	strb	r3, [r4, #1]
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	70e3      	strb	r3, [r4, #3]
 8010ffe:	9b02      	ldr	r3, [sp, #8]
 8011000:	4632      	mov	r2, r6
 8011002:	9300      	str	r3, [sp, #0]
 8011004:	4638      	mov	r0, r7
 8011006:	464b      	mov	r3, r9
 8011008:	a907      	add	r1, sp, #28
 801100a:	f7f6 f8cd 	bl	80071a8 <net_init>
 801100e:	7863      	ldrb	r3, [r4, #1]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d0ca      	beq.n	8010faa <Network::Init(NetworkParamsStore*)+0x166>
 8011014:	9b07      	ldr	r3, [sp, #28]
 8011016:	4628      	mov	r0, r5
 8011018:	6123      	str	r3, [r4, #16]
 801101a:	9b08      	ldr	r3, [sp, #32]
 801101c:	61a3      	str	r3, [r4, #24]
 801101e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011020:	6163      	str	r3, [r4, #20]
 8011022:	f001 fc3f 	bl	80128a4 <NetworkDisplay::ShowIp()>
 8011026:	b00b      	add	sp, #44	; 0x2c
 8011028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801102c:	4663      	mov	r3, ip
 801102e:	f800 2b01 	strb.w	r2, [r0], #1
 8011032:	e745      	b.n	8010ec0 <Network::Init(NetworkParamsStore*)+0x7c>
 8011034:	4630      	mov	r0, r6
 8011036:	491c      	ldr	r1, [pc, #112]	; (80110a8 <Network::Init(NetworkParamsStore*)+0x264>)
 8011038:	f7ff fe9c 	bl	8010d74 <strncpy.constprop.0.isra.0>
 801103c:	2300      	movs	r3, #0
 801103e:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 8011042:	e785      	b.n	8010f50 <Network::Init(NetworkParamsStore*)+0x10c>
 8011044:	69a1      	ldr	r1, [r4, #24]
 8011046:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801104a:	4053      	eors	r3, r2
 801104c:	420b      	tst	r3, r1
 801104e:	bf18      	it	ne
 8011050:	9209      	strne	r2, [sp, #36]	; 0x24
 8011052:	e78c      	b.n	8010f6e <Network::Init(NetworkParamsStore*)+0x12a>
 8011054:	f8d8 3000 	ldr.w	r3, [r8]
 8011058:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801105c:	f1bc 0f00 	cmp.w	ip, #0
 8011060:	d0b7      	beq.n	8010fd2 <Network::Init(NetworkParamsStore*)+0x18e>
 8011062:	6808      	ldr	r0, [r1, #0]
 8011064:	695a      	ldr	r2, [r3, #20]
 8011066:	1a80      	subs	r0, r0, r2
 8011068:	4584      	cmp	ip, r0
 801106a:	d8b2      	bhi.n	8010fd2 <Network::Init(NetworkParamsStore*)+0x18e>
 801106c:	6808      	ldr	r0, [r1, #0]
 801106e:	6158      	str	r0, [r3, #20]
 8011070:	6918      	ldr	r0, [r3, #16]
 8011072:	2801      	cmp	r0, #1
 8011074:	f080 0201 	eor.w	r2, r0, #1
 8011078:	611a      	str	r2, [r3, #16]
 801107a:	bf16      	itet	ne
 801107c:	2301      	movne	r3, #1
 801107e:	f8cb 0014 	streq.w	r0, [fp, #20]
 8011082:	f8cb 3010 	strne.w	r3, [fp, #16]
 8011086:	e7a4      	b.n	8010fd2 <Network::Init(NetworkParamsStore*)+0x18e>
 8011088:	2101      	movs	r1, #1
 801108a:	4628      	mov	r0, r5
 801108c:	f001 fc22 	bl	80128d4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011090:	e76d      	b.n	8010f6e <Network::Init(NetworkParamsStore*)+0x12a>
 8011092:	bf00      	nop
 8011094:	20009ff8 	strdcs	r9, [r0], -r8
 8011098:	08017f80 	stmdaeq	r1, {r7, r8, r9, sl, fp, ip, sp, lr}
 801109c:	2000a718 	andcs	sl, r0, r8, lsl r7
 80110a0:	40011000 	andmi	r1, r1, r0
 80110a4:	2000a734 	andcs	sl, r0, r4, lsr r7
 80110a8:	2000a00d 	andcs	sl, r0, sp

080110ac <Network::SetIp(unsigned int)>:
 80110ac:	7843      	ldrb	r3, [r0, #1]
 80110ae:	b570      	push	{r4, r5, r6, lr}
 80110b0:	4604      	mov	r4, r0
 80110b2:	460d      	mov	r5, r1
 80110b4:	2600      	movs	r6, #0
 80110b6:	b113      	cbz	r3, 80110be <Network::SetIp(unsigned int)+0x12>
 80110b8:	7046      	strb	r6, [r0, #1]
 80110ba:	f7fe feff 	bl	800febc <net_dhcp_release>
 80110be:	70e6      	strb	r6, [r4, #3]
 80110c0:	b975      	cbnz	r5, 80110e0 <Network::SetIp(unsigned int)+0x34>
 80110c2:	4620      	mov	r0, r4
 80110c4:	f7ff fead 	bl	8010e22 <Network::SetDefaultIp()>
 80110c8:	6920      	ldr	r0, [r4, #16]
 80110ca:	f7fe feb3 	bl	800fe34 <net_set_ip>
 80110ce:	34b8      	adds	r4, #184	; 0xb8
 80110d0:	4620      	mov	r0, r4
 80110d2:	f001 fbe7 	bl	80128a4 <NetworkDisplay::ShowIp()>
 80110d6:	4620      	mov	r0, r4
 80110d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110dc:	f001 bbe8 	b.w	80128b0 <NetworkDisplay::ShowNetMask()>
 80110e0:	4628      	mov	r0, r5
 80110e2:	f7fe fea7 	bl	800fe34 <net_set_ip>
 80110e6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80110ea:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80110ee:	2800      	cmp	r0, #0
 80110f0:	d0ed      	beq.n	80110ce <Network::SetIp(unsigned int)+0x22>
 80110f2:	6803      	ldr	r3, [r0, #0]
 80110f4:	4629      	mov	r1, r5
 80110f6:	689b      	ldr	r3, [r3, #8]
 80110f8:	4798      	blx	r3
 80110fa:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80110fe:	2100      	movs	r1, #0
 8011100:	6803      	ldr	r3, [r0, #0]
 8011102:	699b      	ldr	r3, [r3, #24]
 8011104:	4798      	blx	r3
 8011106:	e7e2      	b.n	80110ce <Network::SetIp(unsigned int)+0x22>

08011108 <Network::SetNetmask(unsigned int)>:
 8011108:	6982      	ldr	r2, [r0, #24]
 801110a:	b510      	push	{r4, lr}
 801110c:	428a      	cmp	r2, r1
 801110e:	4604      	mov	r4, r0
 8011110:	d00f      	beq.n	8011132 <Network::SetNetmask(unsigned int)+0x2a>
 8011112:	6181      	str	r1, [r0, #24]
 8011114:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 8011118:	b110      	cbz	r0, 8011120 <Network::SetNetmask(unsigned int)+0x18>
 801111a:	6803      	ldr	r3, [r0, #0]
 801111c:	68db      	ldr	r3, [r3, #12]
 801111e:	4798      	blx	r3
 8011120:	34b8      	adds	r4, #184	; 0xb8
 8011122:	4620      	mov	r0, r4
 8011124:	f001 fbbe 	bl	80128a4 <NetworkDisplay::ShowIp()>
 8011128:	4620      	mov	r0, r4
 801112a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801112e:	f001 bbbf 	b.w	80128b0 <NetworkDisplay::ShowNetMask()>
 8011132:	bd10      	pop	{r4, pc}

08011134 <Network::SetGatewayIp(unsigned int)>:
 8011134:	b538      	push	{r3, r4, r5, lr}
 8011136:	6943      	ldr	r3, [r0, #20]
 8011138:	4604      	mov	r4, r0
 801113a:	428b      	cmp	r3, r1
 801113c:	460d      	mov	r5, r1
 801113e:	d00f      	beq.n	8011160 <Network::SetGatewayIp(unsigned int)+0x2c>
 8011140:	4608      	mov	r0, r1
 8011142:	f7fe fe87 	bl	800fe54 <net_set_gw>
 8011146:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 801114a:	b118      	cbz	r0, 8011154 <Network::SetGatewayIp(unsigned int)+0x20>
 801114c:	6803      	ldr	r3, [r0, #0]
 801114e:	4629      	mov	r1, r5
 8011150:	691b      	ldr	r3, [r3, #16]
 8011152:	4798      	blx	r3
 8011154:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8011158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801115c:	f001 bbae 	b.w	80128bc <NetworkDisplay::ShowGatewayIp()>
 8011160:	bd38      	pop	{r3, r4, r5, pc}
	...

08011164 <Network::EnableDhcp()>:
 8011164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011166:	4e23      	ldr	r6, [pc, #140]	; (80111f4 <Network::EnableDhcp()+0x90>)
 8011168:	4604      	mov	r4, r0
 801116a:	6833      	ldr	r3, [r6, #0]
 801116c:	b085      	sub	sp, #20
 801116e:	791f      	ldrb	r7, [r3, #4]
 8011170:	b137      	cbz	r7, 8011180 <Network::EnableDhcp()+0x1c>
 8011172:	2200      	movs	r2, #0
 8011174:	2104      	movs	r1, #4
 8011176:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801117a:	711a      	strb	r2, [r3, #4]
 801117c:	f003 fa00 	bl	8014580 <fwdgt_config>
 8011180:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 8011184:	2101      	movs	r1, #1
 8011186:	4628      	mov	r0, r5
 8011188:	f001 fba4 	bl	80128d4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 801118c:	1ce2      	adds	r2, r4, #3
 801118e:	f104 011c 	add.w	r1, r4, #28
 8011192:	a801      	add	r0, sp, #4
 8011194:	f7fe fe66 	bl	800fe64 <net_set_dhcp>
 8011198:	78e3      	ldrb	r3, [r4, #3]
 801119a:	7060      	strb	r0, [r4, #1]
 801119c:	b343      	cbz	r3, 80111f0 <Network::EnableDhcp()+0x8c>
 801119e:	2104      	movs	r1, #4
 80111a0:	4628      	mov	r0, r5
 80111a2:	f001 fb97 	bl	80128d4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80111a6:	b16f      	cbz	r7, 80111c4 <Network::EnableDhcp()+0x60>
 80111a8:	2102      	movs	r1, #2
 80111aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80111ae:	6836      	ldr	r6, [r6, #0]
 80111b0:	f003 f9e6 	bl	8014580 <fwdgt_config>
 80111b4:	2801      	cmp	r0, #1
 80111b6:	bf0c      	ite	eq
 80111b8:	2301      	moveq	r3, #1
 80111ba:	2300      	movne	r3, #0
 80111bc:	7133      	strb	r3, [r6, #4]
 80111be:	d101      	bne.n	80111c4 <Network::EnableDhcp()+0x60>
 80111c0:	f003 f9ce 	bl	8014560 <fwdgt_enable>
 80111c4:	9b01      	ldr	r3, [sp, #4]
 80111c6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80111ca:	6123      	str	r3, [r4, #16]
 80111cc:	9b02      	ldr	r3, [sp, #8]
 80111ce:	61a3      	str	r3, [r4, #24]
 80111d0:	9b03      	ldr	r3, [sp, #12]
 80111d2:	6163      	str	r3, [r4, #20]
 80111d4:	b118      	cbz	r0, 80111de <Network::EnableDhcp()+0x7a>
 80111d6:	6803      	ldr	r3, [r0, #0]
 80111d8:	7861      	ldrb	r1, [r4, #1]
 80111da:	699b      	ldr	r3, [r3, #24]
 80111dc:	4798      	blx	r3
 80111de:	4628      	mov	r0, r5
 80111e0:	f001 fb60 	bl	80128a4 <NetworkDisplay::ShowIp()>
 80111e4:	4628      	mov	r0, r5
 80111e6:	f001 fb63 	bl	80128b0 <NetworkDisplay::ShowNetMask()>
 80111ea:	7860      	ldrb	r0, [r4, #1]
 80111ec:	b005      	add	sp, #20
 80111ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111f0:	2102      	movs	r1, #2
 80111f2:	e7d5      	b.n	80111a0 <Network::EnableDhcp()+0x3c>
 80111f4:	2000a71c 	andcs	sl, r0, ip, lsl r7

080111f8 <Network::Print()>:
 80111f8:	b530      	push	{r4, r5, lr}
 80111fa:	4604      	mov	r4, r0
 80111fc:	b085      	sub	sp, #20
 80111fe:	4832      	ldr	r0, [pc, #200]	; (80112c8 <Network::Print()+0xd0>)
 8011200:	f002 fea2 	bl	8013f48 <printf>
 8011204:	f104 011c 	add.w	r1, r4, #28
 8011208:	4830      	ldr	r0, [pc, #192]	; (80112cc <Network::Print()+0xd4>)
 801120a:	f002 fe9d 	bl	8013f48 <printf>
 801120e:	6861      	ldr	r1, [r4, #4]
 8011210:	f104 02a2 	add.w	r2, r4, #162	; 0xa2
 8011214:	482e      	ldr	r0, [pc, #184]	; (80112d0 <Network::Print()+0xd8>)
 8011216:	f002 fe97 	bl	8013f48 <printf>
 801121a:	69a0      	ldr	r0, [r4, #24]
 801121c:	f004 ffa8 	bl	8016170 <__popcountsi2>
 8011220:	6925      	ldr	r5, [r4, #16]
 8011222:	9001      	str	r0, [sp, #4]
 8011224:	0e2b      	lsrs	r3, r5, #24
 8011226:	9300      	str	r3, [sp, #0]
 8011228:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801122c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8011230:	b2e9      	uxtb	r1, r5
 8011232:	4828      	ldr	r0, [pc, #160]	; (80112d4 <Network::Print()+0xdc>)
 8011234:	f002 fe88 	bl	8013f48 <printf>
 8011238:	69a1      	ldr	r1, [r4, #24]
 801123a:	4827      	ldr	r0, [pc, #156]	; (80112d8 <Network::Print()+0xe0>)
 801123c:	0e0b      	lsrs	r3, r1, #24
 801123e:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8011242:	9300      	str	r3, [sp, #0]
 8011244:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011248:	b2c9      	uxtb	r1, r1
 801124a:	f002 fe7d 	bl	8013f48 <printf>
 801124e:	6961      	ldr	r1, [r4, #20]
 8011250:	4822      	ldr	r0, [pc, #136]	; (80112dc <Network::Print()+0xe4>)
 8011252:	0e0b      	lsrs	r3, r1, #24
 8011254:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8011258:	9300      	str	r3, [sp, #0]
 801125a:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801125e:	b2c9      	uxtb	r1, r1
 8011260:	f002 fe72 	bl	8013f48 <printf>
 8011264:	69a3      	ldr	r3, [r4, #24]
 8011266:	6921      	ldr	r1, [r4, #16]
 8011268:	481d      	ldr	r0, [pc, #116]	; (80112e0 <Network::Print()+0xe8>)
 801126a:	ea61 0103 	orn	r1, r1, r3
 801126e:	0e0b      	lsrs	r3, r1, #24
 8011270:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8011274:	9300      	str	r3, [sp, #0]
 8011276:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801127a:	b2c9      	uxtb	r1, r1
 801127c:	f002 fe64 	bl	8013f48 <printf>
 8011280:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8011284:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
 8011288:	9302      	str	r3, [sp, #8]
 801128a:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 801128e:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
 8011292:	9301      	str	r3, [sp, #4]
 8011294:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 8011298:	4812      	ldr	r0, [pc, #72]	; (80112e4 <Network::Print()+0xec>)
 801129a:	9300      	str	r3, [sp, #0]
 801129c:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 80112a0:	f002 fe52 	bl	8013f48 <printf>
 80112a4:	4b10      	ldr	r3, [pc, #64]	; (80112e8 <Network::Print()+0xf0>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	78da      	ldrb	r2, [r3, #3]
 80112aa:	b952      	cbnz	r2, 80112c2 <Network::Print()+0xca>
 80112ac:	785b      	ldrb	r3, [r3, #1]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	bf14      	ite	ne
 80112b2:	2144      	movne	r1, #68	; 0x44
 80112b4:	2153      	moveq	r1, #83	; 0x53
 80112b6:	480d      	ldr	r0, [pc, #52]	; (80112ec <Network::Print()+0xf4>)
 80112b8:	b005      	add	sp, #20
 80112ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80112be:	f002 be43 	b.w	8013f48 <printf>
 80112c2:	215a      	movs	r1, #90	; 0x5a
 80112c4:	e7f7      	b.n	80112b6 <Network::Print()+0xbe>
 80112c6:	bf00      	nop
 80112c8:	08017f8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, sl, fp, ip, sp, lr}
 80112cc:	08017f95 	stmdaeq	r1, {r0, r2, r4, r7, r8, r9, sl, fp, ip, sp, lr}
 80112d0:	08017fa6 	stmdaeq	r1, {r1, r2, r5, r7, r8, r9, sl, fp, ip, sp, lr}
 80112d4:	08017fbb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
 80112d8:	08017fd8 	stmdaeq	r1, {r3, r4, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 80112dc:	08017ff2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 80112e0:	0801800c 	stmdaeq	r1, {r2, r3, pc}
 80112e4:	08018026 	stmdaeq	r1, {r1, r2, r5, pc}
 80112e8:	20009ff4 	strdcs	r9, [r0], -r4
 80112ec:	08018052 	stmdaeq	r1, {r1, r4, r6, pc}

080112f0 <Network::TcpBegin(unsigned short)>:
 80112f0:	4608      	mov	r0, r1
 80112f2:	f7fe bf5d 	b.w	80101b0 <tcp_begin>

080112f6 <Network::TcpRead(int, unsigned char const**)>:
 80112f6:	4608      	mov	r0, r1
 80112f8:	4611      	mov	r1, r2
 80112fa:	f7fe bf97 	b.w	801022c <tcp_read>

080112fe <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 80112fe:	4608      	mov	r0, r1
 8011300:	4611      	mov	r1, r2
 8011302:	461a      	mov	r2, r3
 8011304:	f7fe bf6e 	b.w	80101e4 <tcp_write>

08011308 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 8011308:	4b06      	ldr	r3, [pc, #24]	; (8011324 <NetworkParams::NetworkParams(NetworkParamsStore*)+0x1c>)
 801130a:	b510      	push	{r4, lr}
 801130c:	225e      	movs	r2, #94	; 0x5e
 801130e:	4604      	mov	r4, r0
 8011310:	6001      	str	r1, [r0, #0]
 8011312:	2100      	movs	r1, #0
 8011314:	4618      	mov	r0, r3
 8011316:	f002 faf9 	bl	801390c <memset>
 801131a:	2201      	movs	r2, #1
 801131c:	7502      	strb	r2, [r0, #20]
 801131e:	4620      	mov	r0, r4
 8011320:	bd10      	pop	{r4, pc}
 8011322:	bf00      	nop
 8011324:	20009ff8 	strdcs	r9, [r0], -r8

08011328 <NetworkParams::Load()>:
 8011328:	b508      	push	{r3, lr}
 801132a:	2300      	movs	r3, #0
 801132c:	4905      	ldr	r1, [pc, #20]	; (8011344 <NetworkParams::Load()+0x1c>)
 801132e:	6800      	ldr	r0, [r0, #0]
 8011330:	700b      	strb	r3, [r1, #0]
 8011332:	704b      	strb	r3, [r1, #1]
 8011334:	708b      	strb	r3, [r1, #2]
 8011336:	70cb      	strb	r3, [r1, #3]
 8011338:	b118      	cbz	r0, 8011342 <NetworkParams::Load()+0x1a>
 801133a:	6803      	ldr	r3, [r0, #0]
 801133c:	68db      	ldr	r3, [r3, #12]
 801133e:	4798      	blx	r3
 8011340:	2001      	movs	r0, #1
 8011342:	bd08      	pop	{r3, pc}
 8011344:	20009ff8 	strdcs	r9, [r0], -r8

08011348 <NetworkParams::Load(char const*, unsigned int)>:
 8011348:	6803      	ldr	r3, [r0, #0]
 801134a:	b1eb      	cbz	r3, 8011388 <NetworkParams::Load(char const*, unsigned int)+0x40>
 801134c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801134e:	2300      	movs	r3, #0
 8011350:	460e      	mov	r6, r1
 8011352:	4617      	mov	r7, r2
 8011354:	4605      	mov	r5, r0
 8011356:	4c0d      	ldr	r4, [pc, #52]	; (801138c <NetworkParams::Load(char const*, unsigned int)+0x44>)
 8011358:	4602      	mov	r2, r0
 801135a:	490d      	ldr	r1, [pc, #52]	; (8011390 <NetworkParams::Load(char const*, unsigned int)+0x48>)
 801135c:	4668      	mov	r0, sp
 801135e:	7023      	strb	r3, [r4, #0]
 8011360:	7063      	strb	r3, [r4, #1]
 8011362:	70a3      	strb	r3, [r4, #2]
 8011364:	70e3      	strb	r3, [r4, #3]
 8011366:	f001 fc3d 	bl	8012be4 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 801136a:	463a      	mov	r2, r7
 801136c:	4631      	mov	r1, r6
 801136e:	4668      	mov	r0, sp
 8011370:	f001 fc3c 	bl	8012bec <ReadConfigFile::Read(char const*, unsigned int)>
 8011374:	6828      	ldr	r0, [r5, #0]
 8011376:	4621      	mov	r1, r4
 8011378:	6803      	ldr	r3, [r0, #0]
 801137a:	689b      	ldr	r3, [r3, #8]
 801137c:	4798      	blx	r3
 801137e:	4668      	mov	r0, sp
 8011380:	f001 fc33 	bl	8012bea <ReadConfigFile::~ReadConfigFile()>
 8011384:	b003      	add	sp, #12
 8011386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011388:	4770      	bx	lr
 801138a:	bf00      	nop
 801138c:	20009ff8 	strdcs	r9, [r0], -r8
 8011390:	08011531 	stmdaeq	r1, {r0, r4, r5, r8, sl, ip}

08011394 <NetworkParams::callbackFunction(char const*)>:
 8011394:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011396:	460d      	mov	r5, r1
 8011398:	f10d 0203 	add.w	r2, sp, #3
 801139c:	4628      	mov	r0, r5
 801139e:	495b      	ldr	r1, [pc, #364]	; (801150c <NetworkParams::callbackFunction(char const*)+0x178>)
 80113a0:	f001 fd5d 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80113a4:	b980      	cbnz	r0, 80113c8 <NetworkParams::callbackFunction(char const*)+0x34>
 80113a6:	495a      	ldr	r1, [pc, #360]	; (8011510 <NetworkParams::callbackFunction(char const*)+0x17c>)
 80113a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80113ac:	680b      	ldr	r3, [r1, #0]
 80113ae:	b142      	cbz	r2, 80113c2 <NetworkParams::callbackFunction(char const*)+0x2e>
 80113b0:	f023 0301 	bic.w	r3, r3, #1
 80113b4:	3a00      	subs	r2, #0
 80113b6:	bf18      	it	ne
 80113b8:	2201      	movne	r2, #1
 80113ba:	600b      	str	r3, [r1, #0]
 80113bc:	750a      	strb	r2, [r1, #20]
 80113be:	b004      	add	sp, #16
 80113c0:	bd70      	pop	{r4, r5, r6, pc}
 80113c2:	f043 0301 	orr.w	r3, r3, #1
 80113c6:	e7f5      	b.n	80113b4 <NetworkParams::callbackFunction(char const*)+0x20>
 80113c8:	4628      	mov	r0, r5
 80113ca:	4952      	ldr	r1, [pc, #328]	; (8011514 <NetworkParams::callbackFunction(char const*)+0x180>)
 80113cc:	f10d 0203 	add.w	r2, sp, #3
 80113d0:	f001 fd45 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80113d4:	b988      	cbnz	r0, 80113fa <NetworkParams::callbackFunction(char const*)+0x66>
 80113d6:	4a4e      	ldr	r2, [pc, #312]	; (8011510 <NetworkParams::callbackFunction(char const*)+0x17c>)
 80113d8:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80113dc:	6813      	ldr	r3, [r2, #0]
 80113de:	1e4c      	subs	r4, r1, #1
 80113e0:	2c04      	cmp	r4, #4
 80113e2:	bf97      	itett	ls
 80113e4:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 80113e8:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 80113ec:	6013      	strls	r3, [r2, #0]
 80113ee:	f882 105d 	strbls.w	r1, [r2, #93]	; 0x5d
 80113f2:	bf84      	itt	hi
 80113f4:	6013      	strhi	r3, [r2, #0]
 80113f6:	f882 005d 	strbhi.w	r0, [r2, #93]	; 0x5d
 80113fa:	4628      	mov	r0, r5
 80113fc:	4946      	ldr	r1, [pc, #280]	; (8011518 <NetworkParams::callbackFunction(char const*)+0x184>)
 80113fe:	aa01      	add	r2, sp, #4
 8011400:	f001 fcce 	bl	8012da0 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8011404:	b9d0      	cbnz	r0, 801143c <NetworkParams::callbackFunction(char const*)+0xa8>
 8011406:	9b01      	ldr	r3, [sp, #4]
 8011408:	b2d9      	uxtb	r1, r3
 801140a:	29ac      	cmp	r1, #172	; 0xac
 801140c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011410:	d00a      	beq.n	8011428 <NetworkParams::callbackFunction(char const*)+0x94>
 8011412:	29c0      	cmp	r1, #192	; 0xc0
 8011414:	d00c      	beq.n	8011430 <NetworkParams::callbackFunction(char const*)+0x9c>
 8011416:	290a      	cmp	r1, #10
 8011418:	d10d      	bne.n	8011436 <NetworkParams::callbackFunction(char const*)+0xa2>
 801141a:	4a3d      	ldr	r2, [pc, #244]	; (8011510 <NetworkParams::callbackFunction(char const*)+0x17c>)
 801141c:	6053      	str	r3, [r2, #4]
 801141e:	6813      	ldr	r3, [r2, #0]
 8011420:	f043 0302 	orr.w	r3, r3, #2
 8011424:	6013      	str	r3, [r2, #0]
 8011426:	e7ca      	b.n	80113be <NetworkParams::callbackFunction(char const*)+0x2a>
 8011428:	3a10      	subs	r2, #16
 801142a:	2a0f      	cmp	r2, #15
 801142c:	d8c7      	bhi.n	80113be <NetworkParams::callbackFunction(char const*)+0x2a>
 801142e:	e7f4      	b.n	801141a <NetworkParams::callbackFunction(char const*)+0x86>
 8011430:	2aa8      	cmp	r2, #168	; 0xa8
 8011432:	d1c4      	bne.n	80113be <NetworkParams::callbackFunction(char const*)+0x2a>
 8011434:	e7f1      	b.n	801141a <NetworkParams::callbackFunction(char const*)+0x86>
 8011436:	2b00      	cmp	r3, #0
 8011438:	d0ef      	beq.n	801141a <NetworkParams::callbackFunction(char const*)+0x86>
 801143a:	e7c0      	b.n	80113be <NetworkParams::callbackFunction(char const*)+0x2a>
 801143c:	4628      	mov	r0, r5
 801143e:	4937      	ldr	r1, [pc, #220]	; (801151c <NetworkParams::callbackFunction(char const*)+0x188>)
 8011440:	aa01      	add	r2, sp, #4
 8011442:	f001 fcad 	bl	8012da0 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8011446:	b970      	cbnz	r0, 8011466 <NetworkParams::callbackFunction(char const*)+0xd2>
 8011448:	9a01      	ldr	r2, [sp, #4]
 801144a:	2a00      	cmp	r2, #0
 801144c:	d0b7      	beq.n	80113be <NetworkParams::callbackFunction(char const*)+0x2a>
 801144e:	ba13      	rev	r3, r2
 8011450:	43d9      	mvns	r1, r3
 8011452:	ea13 0351 	ands.w	r3, r3, r1, lsr #1
 8011456:	d1b2      	bne.n	80113be <NetworkParams::callbackFunction(char const*)+0x2a>
 8011458:	4b2d      	ldr	r3, [pc, #180]	; (8011510 <NetworkParams::callbackFunction(char const*)+0x17c>)
 801145a:	609a      	str	r2, [r3, #8]
 801145c:	681a      	ldr	r2, [r3, #0]
 801145e:	f042 0204 	orr.w	r2, r2, #4
 8011462:	601a      	str	r2, [r3, #0]
 8011464:	e7ab      	b.n	80113be <NetworkParams::callbackFunction(char const*)+0x2a>
 8011466:	4628      	mov	r0, r5
 8011468:	492d      	ldr	r1, [pc, #180]	; (8011520 <NetworkParams::callbackFunction(char const*)+0x18c>)
 801146a:	aa01      	add	r2, sp, #4
 801146c:	f001 fc98 	bl	8012da0 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8011470:	4c27      	ldr	r4, [pc, #156]	; (8011510 <NetworkParams::callbackFunction(char const*)+0x17c>)
 8011472:	b930      	cbnz	r0, 8011482 <NetworkParams::callbackFunction(char const*)+0xee>
 8011474:	9b01      	ldr	r3, [sp, #4]
 8011476:	60e3      	str	r3, [r4, #12]
 8011478:	6823      	ldr	r3, [r4, #0]
 801147a:	f043 0308 	orr.w	r3, r3, #8
 801147e:	6023      	str	r3, [r4, #0]
 8011480:	e79d      	b.n	80113be <NetworkParams::callbackFunction(char const*)+0x2a>
 8011482:	233f      	movs	r3, #63	; 0x3f
 8011484:	4628      	mov	r0, r5
 8011486:	9302      	str	r3, [sp, #8]
 8011488:	4926      	ldr	r1, [pc, #152]	; (8011524 <NetworkParams::callbackFunction(char const*)+0x190>)
 801148a:	ab02      	add	r3, sp, #8
 801148c:	f104 0215 	add.w	r2, r4, #21
 8011490:	f001 fbe0 	bl	8012c54 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8011494:	b930      	cbnz	r0, 80114a4 <NetworkParams::callbackFunction(char const*)+0x110>
 8011496:	9b02      	ldr	r3, [sp, #8]
 8011498:	4423      	add	r3, r4
 801149a:	7558      	strb	r0, [r3, #21]
 801149c:	6823      	ldr	r3, [r4, #0]
 801149e:	f043 0320 	orr.w	r3, r3, #32
 80114a2:	e7ec      	b.n	801147e <NetworkParams::callbackFunction(char const*)+0xea>
 80114a4:	4628      	mov	r0, r5
 80114a6:	4920      	ldr	r1, [pc, #128]	; (8011528 <NetworkParams::callbackFunction(char const*)+0x194>)
 80114a8:	aa01      	add	r2, sp, #4
 80114aa:	f001 fc79 	bl	8012da0 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 80114ae:	b958      	cbnz	r0, 80114c8 <NetworkParams::callbackFunction(char const*)+0x134>
 80114b0:	9a01      	ldr	r2, [sp, #4]
 80114b2:	6823      	ldr	r3, [r4, #0]
 80114b4:	b12a      	cbz	r2, 80114c2 <NetworkParams::callbackFunction(char const*)+0x12e>
 80114b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114ba:	6023      	str	r3, [r4, #0]
 80114bc:	f8c4 2055 	str.w	r2, [r4, #85]	; 0x55
 80114c0:	e77d      	b.n	80113be <NetworkParams::callbackFunction(char const*)+0x2a>
 80114c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80114c6:	e7f8      	b.n	80114ba <NetworkParams::callbackFunction(char const*)+0x126>
 80114c8:	4628      	mov	r0, r5
 80114ca:	4918      	ldr	r1, [pc, #96]	; (801152c <NetworkParams::callbackFunction(char const*)+0x198>)
 80114cc:	aa03      	add	r2, sp, #12
 80114ce:	f001 fbda 	bl	8012c86 <Sscan::Float(char const*, char const*, float&)>
 80114d2:	2800      	cmp	r0, #0
 80114d4:	f47f af73 	bne.w	80113be <NetworkParams::callbackFunction(char const*)+0x2a>
 80114d8:	9e03      	ldr	r6, [sp, #12]
 80114da:	6825      	ldr	r5, [r4, #0]
 80114dc:	4630      	mov	r0, r6
 80114de:	f7f7 f80d 	bl	80084fc <__aeabi_f2iz>
 80114e2:	300c      	adds	r0, #12
 80114e4:	281a      	cmp	r0, #26
 80114e6:	d80a      	bhi.n	80114fe <NetworkParams::callbackFunction(char const*)+0x16a>
 80114e8:	2100      	movs	r1, #0
 80114ea:	4630      	mov	r0, r6
 80114ec:	f7f6 ffd4 	bl	8008498 <__aeabi_fcmpeq>
 80114f0:	b928      	cbnz	r0, 80114fe <NetworkParams::callbackFunction(char const*)+0x16a>
 80114f2:	f8c4 6059 	str.w	r6, [r4, #89]	; 0x59
 80114f6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80114fa:	6025      	str	r5, [r4, #0]
 80114fc:	e75f      	b.n	80113be <NetworkParams::callbackFunction(char const*)+0x2a>
 80114fe:	2300      	movs	r3, #0
 8011500:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8011504:	f8c4 3059 	str.w	r3, [r4, #89]	; 0x59
 8011508:	e7f7      	b.n	80114fa <NetworkParams::callbackFunction(char const*)+0x166>
 801150a:	bf00      	nop
 801150c:	080180e4 	stmdaeq	r1, {r2, r5, r6, r7, pc}
 8011510:	20009ff8 	strdcs	r9, [r0], -r8
 8011514:	080180c2 	stmdaeq	r1, {r1, r6, r7, pc}
 8011518:	0801808d 	stmdaeq	r1, {r0, r2, r3, r7, pc}
 801151c:	080180db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, pc}
 8011520:	080180b2 	stmdaeq	r1, {r1, r4, r5, r7, pc}
 8011524:	080180d2 	stmdaeq	r1, {r1, r4, r6, r7, pc}
 8011528:	08018098 	stmdaeq	r1, {r3, r4, r7, pc}
 801152c:	080180a3 	stmdaeq	r1, {r0, r1, r5, r7, pc}

08011530 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 8011530:	f7ff bf30 	b.w	8011394 <NetworkParams::callbackFunction(char const*)>

08011534 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>:
 8011534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011536:	4614      	mov	r4, r2
 8011538:	461d      	mov	r5, r3
 801153a:	b089      	sub	sp, #36	; 0x24
 801153c:	2900      	cmp	r1, #0
 801153e:	d02a      	beq.n	8011596 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x62>
 8011540:	225e      	movs	r2, #94	; 0x5e
 8011542:	4892      	ldr	r0, [pc, #584]	; (801178c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x258>)
 8011544:	f002 f9cb 	bl	80138de <memmove>
 8011548:	4622      	mov	r2, r4
 801154a:	462b      	mov	r3, r5
 801154c:	4990      	ldr	r1, [pc, #576]	; (8011790 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x25c>)
 801154e:	a805      	add	r0, sp, #20
 8011550:	f001 fa78 	bl	8012a44 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8011554:	4c8d      	ldr	r4, [pc, #564]	; (801178c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x258>)
 8011556:	6823      	ldr	r3, [r4, #0]
 8011558:	0798      	lsls	r0, r3, #30
 801155a:	bf5f      	itttt	pl
 801155c:	4a8d      	ldrpl	r2, [pc, #564]	; (8011794 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x260>)
 801155e:	6812      	ldrpl	r2, [r2, #0]
 8011560:	6912      	ldrpl	r2, [r2, #16]
 8011562:	6062      	strpl	r2, [r4, #4]
 8011564:	0759      	lsls	r1, r3, #29
 8011566:	bf5f      	itttt	pl
 8011568:	4a8a      	ldrpl	r2, [pc, #552]	; (8011794 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x260>)
 801156a:	6812      	ldrpl	r2, [r2, #0]
 801156c:	6992      	ldrpl	r2, [r2, #24]
 801156e:	60a2      	strpl	r2, [r4, #8]
 8011570:	071a      	lsls	r2, r3, #28
 8011572:	bf5f      	itttt	pl
 8011574:	4a87      	ldrpl	r2, [pc, #540]	; (8011794 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x260>)
 8011576:	6812      	ldrpl	r2, [r2, #0]
 8011578:	6952      	ldrpl	r2, [r2, #20]
 801157a:	60e2      	strpl	r2, [r4, #12]
 801157c:	069f      	lsls	r7, r3, #26
 801157e:	d417      	bmi.n	80115b0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x7c>
 8011580:	223f      	movs	r2, #63	; 0x3f
 8011582:	4b84      	ldr	r3, [pc, #528]	; (8011794 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x260>)
 8011584:	4884      	ldr	r0, [pc, #528]	; (8011798 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x264>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	331b      	adds	r3, #27
 801158a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801158e:	b941      	cbnz	r1, 80115a2 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x6e>
 8011590:	f002 f9bc 	bl	801390c <memset>
 8011594:	e009      	b.n	80115aa <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x76>
 8011596:	6800      	ldr	r0, [r0, #0]
 8011598:	497c      	ldr	r1, [pc, #496]	; (801178c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x258>)
 801159a:	6803      	ldr	r3, [r0, #0]
 801159c:	68db      	ldr	r3, [r3, #12]
 801159e:	4798      	blx	r3
 80115a0:	e7d2      	b.n	8011548 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x14>
 80115a2:	3a01      	subs	r2, #1
 80115a4:	f800 1b01 	strb.w	r1, [r0], #1
 80115a8:	d1ef      	bne.n	801158a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x56>
 80115aa:	2300      	movs	r3, #0
 80115ac:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80115b0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80115b4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80115b8:	7d23      	ldrb	r3, [r4, #20]
 80115ba:	42aa      	cmp	r2, r5
 80115bc:	6821      	ldr	r1, [r4, #0]
 80115be:	d21a      	bcs.n	80115f6 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xc2>
 80115c0:	9805      	ldr	r0, [sp, #20]
 80115c2:	07ce      	lsls	r6, r1, #31
 80115c4:	4410      	add	r0, r2
 80115c6:	eba5 0502 	sub.w	r5, r5, r2
 80115ca:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80115ce:	d404      	bmi.n	80115da <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa6>
 80115d0:	b922      	cbnz	r2, 80115dc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa8>
 80115d2:	9300      	str	r3, [sp, #0]
 80115d4:	4a71      	ldr	r2, [pc, #452]	; (801179c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x268>)
 80115d6:	4b72      	ldr	r3, [pc, #456]	; (80117a0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x26c>)
 80115d8:	e003      	b.n	80115e2 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xae>
 80115da:	b312      	cbz	r2, 8011622 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xee>
 80115dc:	9300      	str	r3, [sp, #0]
 80115de:	4a71      	ldr	r2, [pc, #452]	; (80117a4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x270>)
 80115e0:	4b6f      	ldr	r3, [pc, #444]	; (80117a0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x26c>)
 80115e2:	4629      	mov	r1, r5
 80115e4:	f002 fcd8 	bl	8013f98 <snprintf>
 80115e8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80115ec:	4285      	cmp	r5, r0
 80115ee:	bfa4      	itt	ge
 80115f0:	181b      	addge	r3, r3, r0
 80115f2:	f8ad 301a 	strhge.w	r3, [sp, #26]
 80115f6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80115fa:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80115fe:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8011602:	42aa      	cmp	r2, r5
 8011604:	6821      	ldr	r1, [r4, #0]
 8011606:	d21f      	bcs.n	8011648 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x114>
 8011608:	9805      	ldr	r0, [sp, #20]
 801160a:	05c9      	lsls	r1, r1, #23
 801160c:	4410      	add	r0, r2
 801160e:	eba5 0502 	sub.w	r5, r5, r2
 8011612:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8011616:	d408      	bmi.n	801162a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xf6>
 8011618:	b94a      	cbnz	r2, 801162e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xfa>
 801161a:	9300      	str	r3, [sp, #0]
 801161c:	4a5f      	ldr	r2, [pc, #380]	; (801179c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x268>)
 801161e:	4b62      	ldr	r3, [pc, #392]	; (80117a8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x274>)
 8011620:	e008      	b.n	8011634 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x100>
 8011622:	9300      	str	r3, [sp, #0]
 8011624:	4a61      	ldr	r2, [pc, #388]	; (80117ac <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x278>)
 8011626:	4b5e      	ldr	r3, [pc, #376]	; (80117a0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x26c>)
 8011628:	e7db      	b.n	80115e2 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xae>
 801162a:	2a00      	cmp	r2, #0
 801162c:	d03e      	beq.n	80116ac <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x178>
 801162e:	9300      	str	r3, [sp, #0]
 8011630:	4a5c      	ldr	r2, [pc, #368]	; (80117a4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x270>)
 8011632:	4b5d      	ldr	r3, [pc, #372]	; (80117a8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x274>)
 8011634:	4629      	mov	r1, r5
 8011636:	f002 fcaf 	bl	8013f98 <snprintf>
 801163a:	4285      	cmp	r5, r0
 801163c:	bfa2      	ittt	ge
 801163e:	f8bd 301a 	ldrhge.w	r3, [sp, #26]
 8011642:	18c0      	addge	r0, r0, r3
 8011644:	f8ad 001a 	strhge.w	r0, [sp, #26]
 8011648:	4959      	ldr	r1, [pc, #356]	; (80117b0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x27c>)
 801164a:	a805      	add	r0, sp, #20
 801164c:	f001 fa80 	bl	8012b50 <PropertiesBuilder::AddComment(char const*)>
 8011650:	6823      	ldr	r3, [r4, #0]
 8011652:	6862      	ldr	r2, [r4, #4]
 8011654:	4957      	ldr	r1, [pc, #348]	; (80117b4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x280>)
 8011656:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801165a:	a805      	add	r0, sp, #20
 801165c:	f001 fa34 	bl	8012ac8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8011660:	6823      	ldr	r3, [r4, #0]
 8011662:	68a2      	ldr	r2, [r4, #8]
 8011664:	4954      	ldr	r1, [pc, #336]	; (80117b8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x284>)
 8011666:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801166a:	a805      	add	r0, sp, #20
 801166c:	f001 fa2c 	bl	8012ac8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8011670:	6823      	ldr	r3, [r4, #0]
 8011672:	4952      	ldr	r1, [pc, #328]	; (80117bc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x288>)
 8011674:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011678:	68e2      	ldr	r2, [r4, #12]
 801167a:	a805      	add	r0, sp, #20
 801167c:	f001 fa24 	bl	8012ac8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8011680:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8011684:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 8011688:	6821      	ldr	r1, [r4, #0]
 801168a:	42ab      	cmp	r3, r5
 801168c:	d221      	bcs.n	80116d2 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x19e>
 801168e:	9805      	ldr	r0, [sp, #20]
 8011690:	f011 0f20 	tst.w	r1, #32
 8011694:	4418      	add	r0, r3
 8011696:	eba5 0503 	sub.w	r5, r5, r3
 801169a:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801169e:	4b3e      	ldr	r3, [pc, #248]	; (8011798 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x264>)
 80116a0:	d108      	bne.n	80116b4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x180>
 80116a2:	b94a      	cbnz	r2, 80116b8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x184>
 80116a4:	9300      	str	r3, [sp, #0]
 80116a6:	4a46      	ldr	r2, [pc, #280]	; (80117c0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x28c>)
 80116a8:	4b46      	ldr	r3, [pc, #280]	; (80117c4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x290>)
 80116aa:	e008      	b.n	80116be <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x18a>
 80116ac:	9300      	str	r3, [sp, #0]
 80116ae:	4a3f      	ldr	r2, [pc, #252]	; (80117ac <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x278>)
 80116b0:	4b3d      	ldr	r3, [pc, #244]	; (80117a8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x274>)
 80116b2:	e7bf      	b.n	8011634 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x100>
 80116b4:	2a00      	cmp	r2, #0
 80116b6:	d035      	beq.n	8011724 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>
 80116b8:	9300      	str	r3, [sp, #0]
 80116ba:	4a43      	ldr	r2, [pc, #268]	; (80117c8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x294>)
 80116bc:	4b41      	ldr	r3, [pc, #260]	; (80117c4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x290>)
 80116be:	4629      	mov	r1, r5
 80116c0:	f002 fc6a 	bl	8013f98 <snprintf>
 80116c4:	4285      	cmp	r5, r0
 80116c6:	bfa2      	ittt	ge
 80116c8:	f8bd 301a 	ldrhge.w	r3, [sp, #26]
 80116cc:	18c0      	addge	r0, r0, r3
 80116ce:	f8ad 001a 	strhge.w	r0, [sp, #26]
 80116d2:	493e      	ldr	r1, [pc, #248]	; (80117cc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x298>)
 80116d4:	a805      	add	r0, sp, #20
 80116d6:	f001 fa3b 	bl	8012b50 <PropertiesBuilder::AddComment(char const*)>
 80116da:	6823      	ldr	r3, [r4, #0]
 80116dc:	f8d4 2055 	ldr.w	r2, [r4, #85]	; 0x55
 80116e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80116e4:	493a      	ldr	r1, [pc, #232]	; (80117d0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x29c>)
 80116e6:	a805      	add	r0, sp, #20
 80116e8:	f001 f9ee 	bl	8012ac8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80116ec:	f8d4 0059 	ldr.w	r0, [r4, #89]	; 0x59
 80116f0:	6827      	ldr	r7, [r4, #0]
 80116f2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80116f6:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80116fa:	42a3      	cmp	r3, r4
 80116fc:	d227      	bcs.n	801174e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x21a>
 80116fe:	9d05      	ldr	r5, [sp, #20]
 8011700:	1ae4      	subs	r4, r4, r3
 8011702:	441d      	add	r5, r3
 8011704:	f7f6 fb7e 	bl	8007e04 <__aeabi_f2d>
 8011708:	f017 0f80 	tst.w	r7, #128	; 0x80
 801170c:	f04f 0301 	mov.w	r3, #1
 8011710:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8011714:	d10a      	bne.n	801172c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f8>
 8011716:	b956      	cbnz	r6, 801172e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1fa>
 8011718:	9300      	str	r3, [sp, #0]
 801171a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801171e:	4b2d      	ldr	r3, [pc, #180]	; (80117d4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x2a0>)
 8011720:	4a2d      	ldr	r2, [pc, #180]	; (80117d8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x2a4>)
 8011722:	e009      	b.n	8011738 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x204>
 8011724:	9300      	str	r3, [sp, #0]
 8011726:	4a2d      	ldr	r2, [pc, #180]	; (80117dc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x2a8>)
 8011728:	4b26      	ldr	r3, [pc, #152]	; (80117c4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x290>)
 801172a:	e7c8      	b.n	80116be <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x18a>
 801172c:	b346      	cbz	r6, 8011780 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x24c>
 801172e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011732:	9300      	str	r3, [sp, #0]
 8011734:	4a2a      	ldr	r2, [pc, #168]	; (80117e0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x2ac>)
 8011736:	4b27      	ldr	r3, [pc, #156]	; (80117d4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x2a0>)
 8011738:	4621      	mov	r1, r4
 801173a:	4628      	mov	r0, r5
 801173c:	f002 fc2c 	bl	8013f98 <snprintf>
 8011740:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8011744:	4284      	cmp	r4, r0
 8011746:	bfa4      	itt	ge
 8011748:	181b      	addge	r3, r3, r0
 801174a:	f8ad 301a 	strhge.w	r3, [sp, #26]
 801174e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8011752:	b17b      	cbz	r3, 8011774 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x240>
 8011754:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8011758:	9b05      	ldr	r3, [sp, #20]
 801175a:	4413      	add	r3, r2
 801175c:	227d      	movs	r2, #125	; 0x7d
 801175e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8011762:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8011766:	9905      	ldr	r1, [sp, #20]
 8011768:	54ca      	strb	r2, [r1, r3]
 801176a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801176e:	3301      	adds	r3, #1
 8011770:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011774:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8011778:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801177a:	601a      	str	r2, [r3, #0]
 801177c:	b009      	add	sp, #36	; 0x24
 801177e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011780:	9300      	str	r3, [sp, #0]
 8011782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011786:	4b13      	ldr	r3, [pc, #76]	; (80117d4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x2a0>)
 8011788:	4a16      	ldr	r2, [pc, #88]	; (80117e4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x2b0>)
 801178a:	e7d5      	b.n	8011738 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x204>
 801178c:	20009ff8 	strdcs	r9, [r0], -r8
 8011790:	080180ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, pc}
 8011794:	20009ff4 	strdcs	r9, [r0], -r4
 8011798:	2000a00d 	andcs	sl, r0, sp
 801179c:	08016787 	stmdaeq	r1, {r0, r1, r2, r7, r8, r9, sl, sp, lr}
 80117a0:	080180e4 	stmdaeq	r1, {r2, r5, r6, r7, pc}
 80117a4:	0801677e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r8, r9, sl, sp, lr}
 80117a8:	080180c2 	stmdaeq	r1, {r1, r6, r7, pc}
 80117ac:	08016788 	stmdaeq	r1, {r3, r7, r8, r9, sl, sp, lr}
 80117b0:	08018063 	stmdaeq	r1, {r0, r1, r5, r6, pc}
 80117b4:	0801808d 	stmdaeq	r1, {r0, r2, r3, r7, pc}
 80117b8:	080180db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, pc}
 80117bc:	080180b2 	stmdaeq	r1, {r1, r4, r5, r7, pc}
 80117c0:	0801679a 	stmdaeq	r1, {r1, r3, r4, r7, r8, r9, sl, sp, lr}
 80117c4:	080180d2 	stmdaeq	r1, {r1, r4, r6, r7, pc}
 80117c8:	0801678f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, r9, sl, sp, lr}
 80117cc:	0801806d 	stmdaeq	r1, {r0, r2, r3, r5, r6, pc}
 80117d0:	08018098 	stmdaeq	r1, {r3, r4, r7, pc}
 80117d4:	080180a3 	stmdaeq	r1, {r0, r1, r5, r7, pc}
 80117d8:	08018083 	stmdaeq	r1, {r0, r1, r7, pc}
 80117dc:	0801679b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r8, r9, sl, sp, lr}
 80117e0:	08018078 	stmdaeq	r1, {r3, r4, r5, r6, pc}
 80117e4:	08018084 	stmdaeq	r1, {r2, r7, pc}

080117e8 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 80117e8:	b513      	push	{r0, r1, r4, lr}
 80117ea:	6804      	ldr	r4, [r0, #0]
 80117ec:	b914      	cbnz	r4, 80117f4 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 80117ee:	601c      	str	r4, [r3, #0]
 80117f0:	b002      	add	sp, #8
 80117f2:	bd10      	pop	{r4, pc}
 80117f4:	9300      	str	r3, [sp, #0]
 80117f6:	4613      	mov	r3, r2
 80117f8:	460a      	mov	r2, r1
 80117fa:	2100      	movs	r1, #0
 80117fc:	f7ff fe9a 	bl	8011534 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>
 8011800:	e7f6      	b.n	80117f0 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

08011802 <NetworkParams::Dump()>:
 8011802:	4770      	bx	lr

08011804 <memcpy.isra.0>:
 8011804:	3801      	subs	r0, #1
 8011806:	440a      	add	r2, r1
 8011808:	4291      	cmp	r1, r2
 801180a:	d100      	bne.n	801180e <memcpy.isra.0+0xa>
 801180c:	4770      	bx	lr
 801180e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011812:	f800 3f01 	strb.w	r3, [r0, #1]!
 8011816:	e7f7      	b.n	8011808 <memcpy.isra.0+0x4>

08011818 <arp_announce>:
 8011818:	4803      	ldr	r0, [pc, #12]	; (8011828 <arp_announce+0x10>)
 801181a:	69c3      	ldr	r3, [r0, #28]
 801181c:	b113      	cbz	r3, 8011824 <arp_announce+0xc>
 801181e:	212a      	movs	r1, #42	; 0x2a
 8011820:	f003 bc08 	b.w	8015034 <emac_eth_send>
 8011824:	4770      	bx	lr
 8011826:	bf00      	nop
 8011828:	2000a058 	andcs	sl, r0, r8, asr r0

0801182c <arp_handle_request>:
 801182c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801182e:	2204      	movs	r2, #4
 8011830:	f100 0126 	add.w	r1, r0, #38	; 0x26
 8011834:	4604      	mov	r4, r0
 8011836:	eb0d 0002 	add.w	r0, sp, r2
 801183a:	f7ff ffe3 	bl	8011804 <memcpy.isra.0>
 801183e:	4b0d      	ldr	r3, [pc, #52]	; (8011874 <arp_handle_request+0x48>)
 8011840:	9a01      	ldr	r2, [sp, #4]
 8011842:	69db      	ldr	r3, [r3, #28]
 8011844:	429a      	cmp	r2, r3
 8011846:	d113      	bne.n	8011870 <arp_handle_request+0x44>
 8011848:	2206      	movs	r2, #6
 801184a:	4d0b      	ldr	r5, [pc, #44]	; (8011878 <arp_handle_request+0x4c>)
 801184c:	18a1      	adds	r1, r4, r2
 801184e:	4628      	mov	r0, r5
 8011850:	f7ff ffd8 	bl	8011804 <memcpy.isra.0>
 8011854:	f104 0116 	add.w	r1, r4, #22
 8011858:	f105 0020 	add.w	r0, r5, #32
 801185c:	2206      	movs	r2, #6
 801185e:	f7ff ffd1 	bl	8011804 <memcpy.isra.0>
 8011862:	69e3      	ldr	r3, [r4, #28]
 8011864:	212a      	movs	r1, #42	; 0x2a
 8011866:	4628      	mov	r0, r5
 8011868:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 801186c:	f003 fbe2 	bl	8015034 <emac_eth_send>
 8011870:	b003      	add	sp, #12
 8011872:	bd30      	pop	{r4, r5, pc}
 8011874:	2000a058 	andcs	sl, r0, r8, asr r0
 8011878:	2000a084 	andcs	sl, r0, r4, lsl #1

0801187c <arp_handle_reply>:
 801187c:	69c1      	ldr	r1, [r0, #28]
 801187e:	3016      	adds	r0, #22
 8011880:	f000 b80a 	b.w	8011898 <arp_cache_update>

08011884 <arp_send_request>:
 8011884:	4b03      	ldr	r3, [pc, #12]	; (8011894 <arp_send_request+0x10>)
 8011886:	212a      	movs	r1, #42	; 0x2a
 8011888:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 801188c:	4618      	mov	r0, r3
 801188e:	f003 bbd1 	b.w	8015034 <emac_eth_send>
 8011892:	bf00      	nop
 8011894:	2000a0b0 	strhcs	sl, [r0], -r0

08011898 <arp_cache_update>:
 8011898:	b5f0      	push	{r4, r5, r6, r7, lr}
 801189a:	4e11      	ldr	r6, [pc, #68]	; (80118e0 <arp_cache_update+0x48>)
 801189c:	8833      	ldrh	r3, [r6, #0]
 801189e:	2b20      	cmp	r3, #32
 80118a0:	d018      	beq.n	80118d4 <arp_cache_update+0x3c>
 80118a2:	2400      	movs	r4, #0
 80118a4:	220c      	movs	r2, #12
 80118a6:	4d0f      	ldr	r5, [pc, #60]	; (80118e4 <arp_cache_update+0x4c>)
 80118a8:	b2a7      	uxth	r7, r4
 80118aa:	42bb      	cmp	r3, r7
 80118ac:	d80b      	bhi.n	80118c6 <arp_cache_update+0x2e>
 80118ae:	fb02 5203 	mla	r2, r2, r3, r5
 80118b2:	1d84      	adds	r4, r0, #6
 80118b4:	3203      	adds	r2, #3
 80118b6:	42a0      	cmp	r0, r4
 80118b8:	d10d      	bne.n	80118d6 <arp_cache_update+0x3e>
 80118ba:	220c      	movs	r2, #12
 80118bc:	435a      	muls	r2, r3
 80118be:	3301      	adds	r3, #1
 80118c0:	50a9      	str	r1, [r5, r2]
 80118c2:	8033      	strh	r3, [r6, #0]
 80118c4:	e006      	b.n	80118d4 <arp_cache_update+0x3c>
 80118c6:	3401      	adds	r4, #1
 80118c8:	fb02 5704 	mla	r7, r2, r4, r5
 80118cc:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 80118d0:	428f      	cmp	r7, r1
 80118d2:	d1e9      	bne.n	80118a8 <arp_cache_update+0x10>
 80118d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118d6:	f810 7b01 	ldrb.w	r7, [r0], #1
 80118da:	f802 7f01 	strb.w	r7, [r2, #1]!
 80118de:	e7ea      	b.n	80118b6 <arp_cache_update+0x1e>
 80118e0:	2000a25c 	andcs	sl, r0, ip, asr r2
 80118e4:	2000a0dc 	ldrdcs	sl, [r0], -ip

080118e8 <arp_cache_lookup>:
 80118e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118ec:	2200      	movs	r2, #0
 80118ee:	4606      	mov	r6, r0
 80118f0:	460c      	mov	r4, r1
 80118f2:	200c      	movs	r0, #12
 80118f4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 801197c <arp_cache_lookup+0x94>
 80118f8:	fb00 f302 	mul.w	r3, r0, r2
 80118fc:	f853 1008 	ldr.w	r1, [r3, r8]
 8011900:	42b1      	cmp	r1, r6
 8011902:	d10d      	bne.n	8011920 <arp_cache_lookup+0x38>
 8011904:	3304      	adds	r3, #4
 8011906:	4443      	add	r3, r8
 8011908:	3c01      	subs	r4, #1
 801190a:	1d9a      	adds	r2, r3, #6
 801190c:	4293      	cmp	r3, r2
 801190e:	d102      	bne.n	8011916 <arp_cache_lookup+0x2e>
 8011910:	4630      	mov	r0, r6
 8011912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011916:	f813 1b01 	ldrb.w	r1, [r3], #1
 801191a:	f804 1f01 	strb.w	r1, [r4, #1]!
 801191e:	e7f5      	b.n	801190c <arp_cache_lookup+0x24>
 8011920:	b111      	cbz	r1, 8011928 <arp_cache_lookup+0x40>
 8011922:	3201      	adds	r2, #1
 8011924:	2a20      	cmp	r2, #32
 8011926:	d1e7      	bne.n	80118f8 <arp_cache_lookup+0x10>
 8011928:	2704      	movs	r7, #4
 801192a:	f8df a054 	ldr.w	sl, [pc, #84]	; 8011980 <arp_cache_lookup+0x98>
 801192e:	f8ba 5000 	ldrh.w	r5, [sl]
 8011932:	3f01      	subs	r7, #1
 8011934:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8011938:	d101      	bne.n	801193e <arp_cache_lookup+0x56>
 801193a:	463e      	mov	r6, r7
 801193c:	e7e8      	b.n	8011910 <arp_cache_lookup+0x28>
 801193e:	4630      	mov	r0, r6
 8011940:	f7ff ffa0 	bl	8011884 <arp_send_request>
 8011944:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 8011948:	f1b9 0901 	subs.w	r9, r9, #1
 801194c:	f8ba 3000 	ldrh.w	r3, [sl]
 8011950:	d011      	beq.n	8011976 <arp_cache_lookup+0x8e>
 8011952:	429d      	cmp	r5, r3
 8011954:	d00c      	beq.n	8011970 <arp_cache_lookup+0x88>
 8011956:	230c      	movs	r3, #12
 8011958:	fb03 8505 	mla	r5, r3, r5, r8
 801195c:	3c01      	subs	r4, #1
 801195e:	1d2b      	adds	r3, r5, #4
 8011960:	350a      	adds	r5, #10
 8011962:	42ab      	cmp	r3, r5
 8011964:	d0d4      	beq.n	8011910 <arp_cache_lookup+0x28>
 8011966:	f813 2b01 	ldrb.w	r2, [r3], #1
 801196a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801196e:	e7f8      	b.n	8011962 <arp_cache_lookup+0x7a>
 8011970:	f7f5 fe02 	bl	8007578 <net_handle>
 8011974:	e7e8      	b.n	8011948 <arp_cache_lookup+0x60>
 8011976:	429d      	cmp	r5, r3
 8011978:	d0db      	beq.n	8011932 <arp_cache_lookup+0x4a>
 801197a:	e7ec      	b.n	8011956 <arp_cache_lookup+0x6e>
 801197c:	2000a0dc 	ldrdcs	sl, [r0], -ip
 8011980:	2000a25c 	andcs	sl, r0, ip, asr r2

08011984 <_parse_response>:
 8011984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011988:	2400      	movs	r4, #0
 801198a:	460d      	mov	r5, r1
 801198c:	46a3      	mov	fp, r4
 801198e:	4627      	mov	r7, r4
 8011990:	46a2      	mov	sl, r4
 8011992:	46a1      	mov	r9, r4
 8011994:	46a0      	mov	r8, r4
 8011996:	4e4f      	ldr	r6, [pc, #316]	; (8011ad4 <_parse_response+0x150>)
 8011998:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 801199c:	6833      	ldr	r3, [r6, #0]
 801199e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80119a2:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80119a6:	9009      	str	r0, [sp, #36]	; 0x24
 80119a8:	9402      	str	r4, [sp, #8]
 80119aa:	9407      	str	r4, [sp, #28]
 80119ac:	9308      	str	r3, [sp, #32]
 80119ae:	f7f5 fde3 	bl	8007578 <net_handle>
 80119b2:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80119b6:	9300      	str	r3, [sp, #0]
 80119b8:	f44f 7209 	mov.w	r2, #548	; 0x224
 80119bc:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 80119c0:	ab0c      	add	r3, sp, #48	; 0x30
 80119c2:	a90d      	add	r1, sp, #52	; 0x34
 80119c4:	f7fe fcf4 	bl	80103b0 <udp_recv>
 80119c8:	2800      	cmp	r0, #0
 80119ca:	d03e      	beq.n	8011a4a <_parse_response+0xc6>
 80119cc:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80119d0:	2b43      	cmp	r3, #67	; 0x43
 80119d2:	d13a      	bne.n	8011a4a <_parse_response+0xc6>
 80119d4:	aa14      	add	r2, sp, #80	; 0x50
 80119d6:	1e6b      	subs	r3, r5, #1
 80119d8:	1d69      	adds	r1, r5, #5
 80119da:	4299      	cmp	r1, r3
 80119dc:	d12f      	bne.n	8011a3e <_parse_response+0xba>
 80119de:	2100      	movs	r1, #0
 80119e0:	ab0d      	add	r3, sp, #52	; 0x34
 80119e2:	181d      	adds	r5, r3, r0
 80119e4:	468c      	mov	ip, r1
 80119e6:	460e      	mov	r6, r1
 80119e8:	4608      	mov	r0, r1
 80119ea:	ab49      	add	r3, sp, #292	; 0x124
 80119ec:	42ab      	cmp	r3, r5
 80119ee:	d337      	bcc.n	8011a60 <_parse_response+0xdc>
 80119f0:	b141      	cbz	r1, 8011a04 <_parse_response+0x80>
 80119f2:	4b39      	ldr	r3, [pc, #228]	; (8011ad8 <_parse_response+0x154>)
 80119f4:	9a07      	ldr	r2, [sp, #28]
 80119f6:	f883 8003 	strb.w	r8, [r3, #3]
 80119fa:	709a      	strb	r2, [r3, #2]
 80119fc:	9a06      	ldr	r2, [sp, #24]
 80119fe:	705a      	strb	r2, [r3, #1]
 8011a00:	9a05      	ldr	r2, [sp, #20]
 8011a02:	701a      	strb	r2, [r3, #0]
 8011a04:	f1bc 0f00 	cmp.w	ip, #0
 8011a08:	d007      	beq.n	8011a1a <_parse_response+0x96>
 8011a0a:	4b34      	ldr	r3, [pc, #208]	; (8011adc <_parse_response+0x158>)
 8011a0c:	9a04      	ldr	r2, [sp, #16]
 8011a0e:	705c      	strb	r4, [r3, #1]
 8011a10:	70da      	strb	r2, [r3, #3]
 8011a12:	9a03      	ldr	r2, [sp, #12]
 8011a14:	709a      	strb	r2, [r3, #2]
 8011a16:	9a02      	ldr	r2, [sp, #8]
 8011a18:	701a      	strb	r2, [r3, #0]
 8011a1a:	b13e      	cbz	r6, 8011a2c <_parse_response+0xa8>
 8011a1c:	4b30      	ldr	r3, [pc, #192]	; (8011ae0 <_parse_response+0x15c>)
 8011a1e:	70df      	strb	r7, [r3, #3]
 8011a20:	f883 a002 	strb.w	sl, [r3, #2]
 8011a24:	f883 9001 	strb.w	r9, [r3, #1]
 8011a28:	f883 b000 	strb.w	fp, [r3]
 8011a2c:	2802      	cmp	r0, #2
 8011a2e:	d102      	bne.n	8011a36 <_parse_response+0xb2>
 8011a30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011a32:	4b2c      	ldr	r3, [pc, #176]	; (8011ae4 <_parse_response+0x160>)
 8011a34:	601a      	str	r2, [r3, #0]
 8011a36:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8011a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a3e:	f812 cb01 	ldrb.w	ip, [r2], #1
 8011a42:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8011a46:	45e6      	cmp	lr, ip
 8011a48:	d0c7      	beq.n	80119da <_parse_response+0x56>
 8011a4a:	6833      	ldr	r3, [r6, #0]
 8011a4c:	9a08      	ldr	r2, [sp, #32]
 8011a4e:	1a9b      	subs	r3, r3, r2
 8011a50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8011a54:	d3ab      	bcc.n	80119ae <_parse_response+0x2a>
 8011a56:	2800      	cmp	r0, #0
 8011a58:	d1c1      	bne.n	80119de <_parse_response+0x5a>
 8011a5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a5e:	e7ea      	b.n	8011a36 <_parse_response+0xb2>
 8011a60:	781a      	ldrb	r2, [r3, #0]
 8011a62:	2a35      	cmp	r2, #53	; 0x35
 8011a64:	d011      	beq.n	8011a8a <_parse_response+0x106>
 8011a66:	d808      	bhi.n	8011a7a <_parse_response+0xf6>
 8011a68:	2a01      	cmp	r2, #1
 8011a6a:	d011      	beq.n	8011a90 <_parse_response+0x10c>
 8011a6c:	2a03      	cmp	r2, #3
 8011a6e:	d019      	beq.n	8011aa4 <_parse_response+0x120>
 8011a70:	b14a      	cbz	r2, 8011a86 <_parse_response+0x102>
 8011a72:	1c9a      	adds	r2, r3, #2
 8011a74:	785b      	ldrb	r3, [r3, #1]
 8011a76:	4413      	add	r3, r2
 8011a78:	e7b8      	b.n	80119ec <_parse_response+0x68>
 8011a7a:	2a36      	cmp	r2, #54	; 0x36
 8011a7c:	d01f      	beq.n	8011abe <_parse_response+0x13a>
 8011a7e:	2aff      	cmp	r2, #255	; 0xff
 8011a80:	d1f7      	bne.n	8011a72 <_parse_response+0xee>
 8011a82:	462b      	mov	r3, r5
 8011a84:	e7b2      	b.n	80119ec <_parse_response+0x68>
 8011a86:	3301      	adds	r3, #1
 8011a88:	e7b0      	b.n	80119ec <_parse_response+0x68>
 8011a8a:	7898      	ldrb	r0, [r3, #2]
 8011a8c:	3303      	adds	r3, #3
 8011a8e:	e7ad      	b.n	80119ec <_parse_response+0x68>
 8011a90:	f893 b002 	ldrb.w	fp, [r3, #2]
 8011a94:	f893 9003 	ldrb.w	r9, [r3, #3]
 8011a98:	f893 a004 	ldrb.w	sl, [r3, #4]
 8011a9c:	795f      	ldrb	r7, [r3, #5]
 8011a9e:	4616      	mov	r6, r2
 8011aa0:	3306      	adds	r3, #6
 8011aa2:	e7a3      	b.n	80119ec <_parse_response+0x68>
 8011aa4:	789a      	ldrb	r2, [r3, #2]
 8011aa6:	78dc      	ldrb	r4, [r3, #3]
 8011aa8:	9202      	str	r2, [sp, #8]
 8011aaa:	791a      	ldrb	r2, [r3, #4]
 8011aac:	f04f 0c01 	mov.w	ip, #1
 8011ab0:	9203      	str	r2, [sp, #12]
 8011ab2:	795a      	ldrb	r2, [r3, #5]
 8011ab4:	9204      	str	r2, [sp, #16]
 8011ab6:	785a      	ldrb	r2, [r3, #1]
 8011ab8:	4413      	add	r3, r2
 8011aba:	3302      	adds	r3, #2
 8011abc:	e796      	b.n	80119ec <_parse_response+0x68>
 8011abe:	789a      	ldrb	r2, [r3, #2]
 8011ac0:	f893 8005 	ldrb.w	r8, [r3, #5]
 8011ac4:	9205      	str	r2, [sp, #20]
 8011ac6:	78da      	ldrb	r2, [r3, #3]
 8011ac8:	2101      	movs	r1, #1
 8011aca:	9206      	str	r2, [sp, #24]
 8011acc:	791a      	ldrb	r2, [r3, #4]
 8011ace:	3306      	adds	r3, #6
 8011ad0:	9207      	str	r2, [sp, #28]
 8011ad2:	e78b      	b.n	80119ec <_parse_response+0x68>
 8011ad4:	2000a734 	andcs	sl, r0, r4, lsr r7
 8011ad8:	2000a490 	mulcs	r0, r0, r4
 8011adc:	2000a260 	andcs	sl, r0, r0, ror #4
 8011ae0:	2000a268 	andcs	sl, r0, r8, ror #4
 8011ae4:	2000a264 	andcs	sl, r0, r4, ror #4

08011ae8 <memcpy.isra.0>:
 8011ae8:	3801      	subs	r0, #1
 8011aea:	440a      	add	r2, r1
 8011aec:	4291      	cmp	r1, r2
 8011aee:	d100      	bne.n	8011af2 <memcpy.isra.0+0xa>
 8011af0:	4770      	bx	lr
 8011af2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011af6:	f800 3f01 	strb.w	r3, [r0, #1]!
 8011afa:	e7f7      	b.n	8011aec <memcpy.isra.0+0x4>

08011afc <dhcp_client>:
 8011afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b00:	b087      	sub	sp, #28
 8011b02:	9203      	str	r2, [sp, #12]
 8011b04:	4a77      	ldr	r2, [pc, #476]	; (8011ce4 <dhcp_client+0x1e8>)
 8011b06:	460f      	mov	r7, r1
 8011b08:	4605      	mov	r5, r0
 8011b0a:	f44f 7309 	mov.w	r3, #548	; 0x224
 8011b0e:	4614      	mov	r4, r2
 8011b10:	2100      	movs	r1, #0
 8011b12:	3b01      	subs	r3, #1
 8011b14:	f802 1b01 	strb.w	r1, [r2], #1
 8011b18:	d1fb      	bne.n	8011b12 <dhcp_client+0x16>
 8011b1a:	f240 1301 	movw	r3, #257	; 0x101
 8011b1e:	2206      	movs	r2, #6
 8011b20:	4629      	mov	r1, r5
 8011b22:	4871      	ldr	r0, [pc, #452]	; (8011ce8 <dhcp_client+0x1ec>)
 8011b24:	8023      	strh	r3, [r4, #0]
 8011b26:	70a2      	strb	r2, [r4, #2]
 8011b28:	f7ff ffde 	bl	8011ae8 <memcpy.isra.0>
 8011b2c:	4b6f      	ldr	r3, [pc, #444]	; (8011cec <dhcp_client+0x1f0>)
 8011b2e:	2044      	movs	r0, #68	; 0x44
 8011b30:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8011b34:	f240 1335 	movw	r3, #309	; 0x135
 8011b38:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 8011b3c:	f7fe fbfe 	bl	801033c <udp_bind>
 8011b40:	1e06      	subs	r6, r0, #0
 8011b42:	f2c0 80c9 	blt.w	8011cd8 <dhcp_client+0x1dc>
 8011b46:	f04f 0915 	mov.w	r9, #21
 8011b4a:	f8df a198 	ldr.w	sl, [pc, #408]	; 8011ce4 <dhcp_client+0x1e8>
 8011b4e:	f1b9 0901 	subs.w	r9, r9, #1
 8011b52:	d11f      	bne.n	8011b94 <dhcp_client+0x98>
 8011b54:	464c      	mov	r4, r9
 8011b56:	2044      	movs	r0, #68	; 0x44
 8011b58:	f7fe fc0a 	bl	8010370 <udp_unbind>
 8011b5c:	2c00      	cmp	r4, #0
 8011b5e:	f000 80be 	beq.w	8011cde <dhcp_client+0x1e2>
 8011b62:	2204      	movs	r2, #4
 8011b64:	4962      	ldr	r1, [pc, #392]	; (8011cf0 <dhcp_client+0x1f4>)
 8011b66:	a805      	add	r0, sp, #20
 8011b68:	f7ff ffbe 	bl	8011ae8 <memcpy.isra.0>
 8011b6c:	9b05      	ldr	r3, [sp, #20]
 8011b6e:	2204      	movs	r2, #4
 8011b70:	4960      	ldr	r1, [pc, #384]	; (8011cf4 <dhcp_client+0x1f8>)
 8011b72:	603b      	str	r3, [r7, #0]
 8011b74:	a805      	add	r0, sp, #20
 8011b76:	f7ff ffb7 	bl	8011ae8 <memcpy.isra.0>
 8011b7a:	9b05      	ldr	r3, [sp, #20]
 8011b7c:	a805      	add	r0, sp, #20
 8011b7e:	60bb      	str	r3, [r7, #8]
 8011b80:	2204      	movs	r2, #4
 8011b82:	495d      	ldr	r1, [pc, #372]	; (8011cf8 <dhcp_client+0x1fc>)
 8011b84:	f7ff ffb0 	bl	8011ae8 <memcpy.isra.0>
 8011b88:	2000      	movs	r0, #0
 8011b8a:	9b05      	ldr	r3, [sp, #20]
 8011b8c:	607b      	str	r3, [r7, #4]
 8011b8e:	b007      	add	sp, #28
 8011b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b94:	f643 5301 	movw	r3, #15617	; 0x3d01
 8011b98:	f240 1807 	movw	r8, #263	; 0x107
 8011b9c:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8011ba0:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8011ba4:	782b      	ldrb	r3, [r5, #0]
 8011ba6:	4a55      	ldr	r2, [pc, #340]	; (8011cfc <dhcp_client+0x200>)
 8011ba8:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8011bac:	786b      	ldrb	r3, [r5, #1]
 8011bae:	fa5f fb86 	uxtb.w	fp, r6
 8011bb2:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8011bb6:	78ab      	ldrb	r3, [r5, #2]
 8011bb8:	4651      	mov	r1, sl
 8011bba:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8011bbe:	78eb      	ldrb	r3, [r5, #3]
 8011bc0:	4658      	mov	r0, fp
 8011bc2:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8011bc6:	792b      	ldrb	r3, [r5, #4]
 8011bc8:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8011bcc:	796b      	ldrb	r3, [r5, #5]
 8011bce:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8011bd2:	4b4b      	ldr	r3, [pc, #300]	; (8011d00 <dhcp_client+0x204>)
 8011bd4:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 8011bd8:	23ff      	movs	r3, #255	; 0xff
 8011bda:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8011bde:	2343      	movs	r3, #67	; 0x43
 8011be0:	f240 1205 	movw	r2, #261	; 0x105
 8011be4:	9300      	str	r3, [sp, #0]
 8011be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011bea:	f7fe fc3d 	bl	8010468 <udp_send>
 8011bee:	4629      	mov	r1, r5
 8011bf0:	4630      	mov	r0, r6
 8011bf2:	f7ff fec7 	bl	8011984 <_parse_response>
 8011bf6:	2802      	cmp	r0, #2
 8011bf8:	d1a9      	bne.n	8011b4e <dhcp_client+0x52>
 8011bfa:	f643 5303 	movw	r3, #15619	; 0x3d03
 8011bfe:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8011c02:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8011c06:	782b      	ldrb	r3, [r5, #0]
 8011c08:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8011d04 <dhcp_client+0x208>
 8011c0c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8011c10:	786b      	ldrb	r3, [r5, #1]
 8011c12:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8011c16:	78ab      	ldrb	r3, [r5, #2]
 8011c18:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8011c1c:	78eb      	ldrb	r3, [r5, #3]
 8011c1e:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8011c22:	792b      	ldrb	r3, [r5, #4]
 8011c24:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8011c28:	796b      	ldrb	r3, [r5, #5]
 8011c2a:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8011c2e:	f240 4332 	movw	r3, #1074	; 0x432
 8011c32:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 8011c36:	4b2e      	ldr	r3, [pc, #184]	; (8011cf0 <dhcp_client+0x1f4>)
 8011c38:	881a      	ldrh	r2, [r3, #0]
 8011c3a:	885b      	ldrh	r3, [r3, #2]
 8011c3c:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 8011c40:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8011c44:	f240 4336 	movw	r3, #1078	; 0x436
 8011c48:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 8011c4c:	4b2e      	ldr	r3, [pc, #184]	; (8011d08 <dhcp_client+0x20c>)
 8011c4e:	221e      	movs	r2, #30
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8011c56:	230c      	movs	r3, #12
 8011c58:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 8011c5c:	9b03      	ldr	r3, [sp, #12]
 8011c5e:	1e58      	subs	r0, r3, #1
 8011c60:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011c64:	f1a2 0e1e 	sub.w	lr, r2, #30
 8011c68:	1c51      	adds	r1, r2, #1
 8011c6a:	bb8b      	cbnz	r3, 8011cd0 <dhcp_client+0x1d4>
 8011c6c:	2037      	movs	r0, #55	; 0x37
 8011c6e:	18a3      	adds	r3, r4, r2
 8011c70:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 8011c74:	2006      	movs	r0, #6
 8011c76:	4421      	add	r1, r4
 8011c78:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 8011c7c:	2103      	movs	r1, #3
 8011c7e:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 8011c82:	210f      	movs	r1, #15
 8011c84:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 8011c88:	213a      	movs	r1, #58	; 0x3a
 8011c8a:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 8011c8e:	213b      	movs	r1, #59	; 0x3b
 8011c90:	f04f 0801 	mov.w	r8, #1
 8011c94:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8011c98:	21ff      	movs	r1, #255	; 0xff
 8011c9a:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8011c9e:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 8011ca2:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 8011ca6:	2343      	movs	r3, #67	; 0x43
 8011ca8:	32f5      	adds	r2, #245	; 0xf5
 8011caa:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 8011cae:	4651      	mov	r1, sl
 8011cb0:	9300      	str	r3, [sp, #0]
 8011cb2:	b292      	uxth	r2, r2
 8011cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011cb8:	4658      	mov	r0, fp
 8011cba:	f7fe fbd5 	bl	8010468 <udp_send>
 8011cbe:	4629      	mov	r1, r5
 8011cc0:	4630      	mov	r0, r6
 8011cc2:	f7ff fe5f 	bl	8011984 <_parse_response>
 8011cc6:	2805      	cmp	r0, #5
 8011cc8:	f47f af41 	bne.w	8011b4e <dhcp_client+0x52>
 8011ccc:	4644      	mov	r4, r8
 8011cce:	e742      	b.n	8011b56 <dhcp_client+0x5a>
 8011cd0:	460a      	mov	r2, r1
 8011cd2:	f80c 3b01 	strb.w	r3, [ip], #1
 8011cd6:	e7c3      	b.n	8011c60 <dhcp_client+0x164>
 8011cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011cdc:	e757      	b.n	8011b8e <dhcp_client+0x92>
 8011cde:	f06f 0001 	mvn.w	r0, #1
 8011ce2:	e754      	b.n	8011b8e <dhcp_client+0x92>
 8011ce4:	2000a26c 	andcs	sl, r0, ip, ror #4
 8011ce8:	2000a288 	andcs	sl, r0, r8, lsl #5
 8011cec:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 8011cf0:	2000a264 	andcs	sl, r0, r4, ror #4
 8011cf4:	2000a260 	andcs	sl, r0, r0, ror #4
 8011cf8:	2000a268 	andcs	sl, r0, r8, ror #4
 8011cfc:	03010637 	movweq	r0, #5687	; 0x1637
 8011d00:	3b3a0f06 	blcc	8e95920 <__exidx_end+0xe7d124>
 8011d04:	2000a376 	andcs	sl, r0, r6, ror r3
 8011d08:	2000a490 	mulcs	r0, r0, r4

08011d0c <dhcp_client_release>:
 8011d0c:	b507      	push	{r0, r1, r2, lr}
 8011d0e:	2044      	movs	r0, #68	; 0x44
 8011d10:	f7fe fb14 	bl	801033c <udp_bind>
 8011d14:	f243 6307 	movw	r3, #13831	; 0x3607
 8011d18:	4911      	ldr	r1, [pc, #68]	; (8011d60 <dhcp_client_release+0x54>)
 8011d1a:	b2c0      	uxtb	r0, r0
 8011d1c:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 8011d20:	2304      	movs	r3, #4
 8011d22:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 8011d26:	4b0f      	ldr	r3, [pc, #60]	; (8011d64 <dhcp_client_release+0x58>)
 8011d28:	781a      	ldrb	r2, [r3, #0]
 8011d2a:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 8011d2e:	785a      	ldrb	r2, [r3, #1]
 8011d30:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 8011d34:	789a      	ldrb	r2, [r3, #2]
 8011d36:	78db      	ldrb	r3, [r3, #3]
 8011d38:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 8011d3c:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 8011d40:	23ff      	movs	r3, #255	; 0xff
 8011d42:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 8011d46:	2343      	movs	r3, #67	; 0x43
 8011d48:	22fa      	movs	r2, #250	; 0xfa
 8011d4a:	9300      	str	r3, [sp, #0]
 8011d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d50:	f7fe fb8a 	bl	8010468 <udp_send>
 8011d54:	2044      	movs	r0, #68	; 0x44
 8011d56:	b003      	add	sp, #12
 8011d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d5c:	f7fe bb08 	b.w	8010370 <udp_unbind>
 8011d60:	2000a26c 	andcs	sl, r0, ip, ror #4
 8011d64:	2000a490 	mulcs	r0, r0, r4

08011d68 <memcpy.isra.0>:
 8011d68:	3801      	subs	r0, #1
 8011d6a:	440a      	add	r2, r1
 8011d6c:	4291      	cmp	r1, r2
 8011d6e:	d100      	bne.n	8011d72 <memcpy.isra.0+0xa>
 8011d70:	4770      	bx	lr
 8011d72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d76:	f800 3f01 	strb.w	r3, [r0, #1]!
 8011d7a:	e7f7      	b.n	8011d6c <memcpy.isra.0+0x4>

08011d7c <_send_report>:
 8011d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d7e:	491c      	ldr	r1, [pc, #112]	; (8011df0 <_send_report+0x74>)
 8011d80:	4c1c      	ldr	r4, [pc, #112]	; (8011df4 <_send_report+0x78>)
 8011d82:	f3c0 2306 	ubfx	r3, r0, #8, #7
 8011d86:	9001      	str	r0, [sp, #4]
 8011d88:	70cb      	strb	r3, [r1, #3]
 8011d8a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011d8e:	f3c0 6007 	ubfx	r0, r0, #24, #8
 8011d92:	710b      	strb	r3, [r1, #4]
 8011d94:	7148      	strb	r0, [r1, #5]
 8011d96:	2206      	movs	r2, #6
 8011d98:	4620      	mov	r0, r4
 8011d9a:	f7ff ffe5 	bl	8011d68 <memcpy.isra.0>
 8011d9e:	2204      	movs	r2, #4
 8011da0:	2700      	movs	r7, #0
 8011da2:	4d15      	ldr	r5, [pc, #84]	; (8011df8 <_send_report+0x7c>)
 8011da4:	eb0d 0102 	add.w	r1, sp, r2
 8011da8:	882b      	ldrh	r3, [r5, #0]
 8011daa:	f104 001e 	add.w	r0, r4, #30
 8011dae:	f104 060e 	add.w	r6, r4, #14
 8011db2:	8263      	strh	r3, [r4, #18]
 8011db4:	f7ff ffd8 	bl	8011d68 <memcpy.isra.0>
 8011db8:	2118      	movs	r1, #24
 8011dba:	4630      	mov	r0, r6
 8011dbc:	8327      	strh	r7, [r4, #24]
 8011dbe:	f000 f8c6 	bl	8011f4e <net_chksum>
 8011dc2:	2204      	movs	r2, #4
 8011dc4:	8320      	strh	r0, [r4, #24]
 8011dc6:	eb0d 0102 	add.w	r1, sp, r2
 8011dca:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8011dce:	f7ff ffcb 	bl	8011d68 <memcpy.isra.0>
 8011dd2:	2120      	movs	r1, #32
 8011dd4:	4630      	mov	r0, r6
 8011dd6:	8527      	strh	r7, [r4, #40]	; 0x28
 8011dd8:	f000 f8b9 	bl	8011f4e <net_chksum>
 8011ddc:	212e      	movs	r1, #46	; 0x2e
 8011dde:	8520      	strh	r0, [r4, #40]	; 0x28
 8011de0:	4620      	mov	r0, r4
 8011de2:	f003 f927 	bl	8015034 <emac_eth_send>
 8011de6:	882b      	ldrh	r3, [r5, #0]
 8011de8:	3301      	adds	r3, #1
 8011dea:	802b      	strh	r3, [r5, #0]
 8011dec:	b003      	add	sp, #12
 8011dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011df0:	2000a5ec 	andcs	sl, r0, ip, ror #11
 8011df4:	2000a5f4 	strdcs	sl, [r0], -r4
 8011df8:	2000a5b4 			; <UNDEFINED> instruction: 0x2000a5b4

08011dfc <igmp_set_ip>:
 8011dfc:	b507      	push	{r0, r1, r2, lr}
 8011dfe:	2204      	movs	r2, #4
 8011e00:	6803      	ldr	r3, [r0, #0]
 8011e02:	eb0d 0102 	add.w	r1, sp, r2
 8011e06:	4806      	ldr	r0, [pc, #24]	; (8011e20 <igmp_set_ip+0x24>)
 8011e08:	9301      	str	r3, [sp, #4]
 8011e0a:	f7ff ffad 	bl	8011d68 <memcpy.isra.0>
 8011e0e:	2204      	movs	r2, #4
 8011e10:	4804      	ldr	r0, [pc, #16]	; (8011e24 <igmp_set_ip+0x28>)
 8011e12:	eb0d 0102 	add.w	r1, sp, r2
 8011e16:	f7ff ffa7 	bl	8011d68 <memcpy.isra.0>
 8011e1a:	b003      	add	sp, #12
 8011e1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e20:	2000a60e 	andcs	sl, r0, lr, lsl #12
 8011e24:	2000a5d6 	ldrdcs	sl, [r0], -r6

08011e28 <igmp_timer>:
 8011e28:	b570      	push	{r4, r5, r6, lr}
 8011e2a:	2500      	movs	r5, #0
 8011e2c:	2602      	movs	r6, #2
 8011e2e:	4c0a      	ldr	r4, [pc, #40]	; (8011e58 <igmp_timer+0x30>)
 8011e30:	7963      	ldrb	r3, [r4, #5]
 8011e32:	2b01      	cmp	r3, #1
 8011e34:	d109      	bne.n	8011e4a <igmp_timer+0x22>
 8011e36:	7923      	ldrb	r3, [r4, #4]
 8011e38:	b13b      	cbz	r3, 8011e4a <igmp_timer+0x22>
 8011e3a:	3b01      	subs	r3, #1
 8011e3c:	b2db      	uxtb	r3, r3
 8011e3e:	7123      	strb	r3, [r4, #4]
 8011e40:	b91b      	cbnz	r3, 8011e4a <igmp_timer+0x22>
 8011e42:	6820      	ldr	r0, [r4, #0]
 8011e44:	f7ff ff9a 	bl	8011d7c <_send_report>
 8011e48:	7166      	strb	r6, [r4, #5]
 8011e4a:	3501      	adds	r5, #1
 8011e4c:	2d24      	cmp	r5, #36	; 0x24
 8011e4e:	f104 0408 	add.w	r4, r4, #8
 8011e52:	d1ed      	bne.n	8011e30 <igmp_timer+0x8>
 8011e54:	bd70      	pop	{r4, r5, r6, pc}
 8011e56:	bf00      	nop
 8011e58:	2000a494 	mulcs	r0, r4, r4

08011e5c <igmp_join>:
 8011e5c:	b538      	push	{r3, r4, r5, lr}
 8011e5e:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 8011e62:	2be0      	cmp	r3, #224	; 0xe0
 8011e64:	d11b      	bne.n	8011e9e <igmp_join+0x42>
 8011e66:	4911      	ldr	r1, [pc, #68]	; (8011eac <igmp_join+0x50>)
 8011e68:	680c      	ldr	r4, [r1, #0]
 8011e6a:	2c24      	cmp	r4, #36	; 0x24
 8011e6c:	d01a      	beq.n	8011ea4 <igmp_join+0x48>
 8011e6e:	2300      	movs	r3, #0
 8011e70:	4a0f      	ldr	r2, [pc, #60]	; (8011eb0 <igmp_join+0x54>)
 8011e72:	429c      	cmp	r4, r3
 8011e74:	dc0d      	bgt.n	8011e92 <igmp_join+0x36>
 8011e76:	f44f 7381 	mov.w	r3, #258	; 0x102
 8011e7a:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
 8011e7e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8011e82:	8093      	strh	r3, [r2, #4]
 8011e84:	1c63      	adds	r3, r4, #1
 8011e86:	600b      	str	r3, [r1, #0]
 8011e88:	f7ff ff78 	bl	8011d7c <_send_report>
 8011e8c:	4623      	mov	r3, r4
 8011e8e:	4618      	mov	r0, r3
 8011e90:	bd38      	pop	{r3, r4, r5, pc}
 8011e92:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8011e96:	4285      	cmp	r5, r0
 8011e98:	d0f9      	beq.n	8011e8e <igmp_join+0x32>
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	e7e9      	b.n	8011e72 <igmp_join+0x16>
 8011e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ea2:	e7f4      	b.n	8011e8e <igmp_join+0x32>
 8011ea4:	f06f 0301 	mvn.w	r3, #1
 8011ea8:	e7f1      	b.n	8011e8e <igmp_join+0x32>
 8011eaa:	bf00      	nop
 8011eac:	2000a5b8 			; <UNDEFINED> instruction: 0x2000a5b8
 8011eb0:	2000a494 	mulcs	r0, r4, r4

08011eb4 <igmp_leave>:
 8011eb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011eb8:	2600      	movs	r6, #0
 8011eba:	4f1c      	ldr	r7, [pc, #112]	; (8011f2c <igmp_leave+0x78>)
 8011ebc:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 8011ec0:	4283      	cmp	r3, r0
 8011ec2:	d007      	beq.n	8011ed4 <igmp_leave+0x20>
 8011ec4:	3601      	adds	r6, #1
 8011ec6:	2e24      	cmp	r6, #36	; 0x24
 8011ec8:	d1f8      	bne.n	8011ebc <igmp_leave+0x8>
 8011eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ece:	b002      	add	sp, #8
 8011ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ed4:	2400      	movs	r4, #0
 8011ed6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8011f30 <igmp_leave+0x7c>
 8011eda:	4d16      	ldr	r5, [pc, #88]	; (8011f34 <igmp_leave+0x80>)
 8011edc:	f8b8 3000 	ldrh.w	r3, [r8]
 8011ee0:	2118      	movs	r1, #24
 8011ee2:	9001      	str	r0, [sp, #4]
 8011ee4:	4814      	ldr	r0, [pc, #80]	; (8011f38 <igmp_leave+0x84>)
 8011ee6:	826b      	strh	r3, [r5, #18]
 8011ee8:	832c      	strh	r4, [r5, #24]
 8011eea:	f000 f830 	bl	8011f4e <net_chksum>
 8011eee:	2204      	movs	r2, #4
 8011ef0:	8328      	strh	r0, [r5, #24]
 8011ef2:	eb0d 0102 	add.w	r1, sp, r2
 8011ef6:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8011efa:	f7ff ff35 	bl	8011d68 <memcpy.isra.0>
 8011efe:	2120      	movs	r1, #32
 8011f00:	f105 000e 	add.w	r0, r5, #14
 8011f04:	852c      	strh	r4, [r5, #40]	; 0x28
 8011f06:	f000 f822 	bl	8011f4e <net_chksum>
 8011f0a:	212e      	movs	r1, #46	; 0x2e
 8011f0c:	8528      	strh	r0, [r5, #40]	; 0x28
 8011f0e:	4628      	mov	r0, r5
 8011f10:	f003 f890 	bl	8015034 <emac_eth_send>
 8011f14:	f8b8 3000 	ldrh.w	r3, [r8]
 8011f18:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
 8011f1c:	3301      	adds	r3, #1
 8011f1e:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8011f22:	4620      	mov	r0, r4
 8011f24:	f8a8 3000 	strh.w	r3, [r8]
 8011f28:	80bc      	strh	r4, [r7, #4]
 8011f2a:	e7d0      	b.n	8011ece <igmp_leave+0x1a>
 8011f2c:	2000a494 	mulcs	r0, r4, r4
 8011f30:	2000a5b4 			; <UNDEFINED> instruction: 0x2000a5b4
 8011f34:	2000a5bc 			; <UNDEFINED> instruction: 0x2000a5bc
 8011f38:	2000a602 	andcs	sl, r0, r2, lsl #12

08011f3c <ip_set_ip>:
 8011f3c:	b510      	push	{r4, lr}
 8011f3e:	4604      	mov	r4, r0
 8011f40:	f7fe f9dc 	bl	80102fc <udp_set_ip>
 8011f44:	4620      	mov	r0, r4
 8011f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f4a:	f7ff bf57 	b.w	8011dfc <igmp_set_ip>

08011f4e <net_chksum>:
 8011f4e:	2300      	movs	r3, #0
 8011f50:	f021 0201 	bic.w	r2, r1, #1
 8011f54:	b530      	push	{r4, r5, lr}
 8011f56:	1884      	adds	r4, r0, r2
 8011f58:	42a0      	cmp	r0, r4
 8011f5a:	d10b      	bne.n	8011f74 <net_chksum+0x26>
 8011f5c:	4291      	cmp	r1, r2
 8011f5e:	d004      	beq.n	8011f6a <net_chksum+0x1c>
 8011f60:	7802      	ldrb	r2, [r0, #0]
 8011f62:	0212      	lsls	r2, r2, #8
 8011f64:	ba52      	rev16	r2, r2
 8011f66:	b292      	uxth	r2, r2
 8011f68:	4413      	add	r3, r2
 8011f6a:	0c1a      	lsrs	r2, r3, #16
 8011f6c:	d106      	bne.n	8011f7c <net_chksum+0x2e>
 8011f6e:	43d8      	mvns	r0, r3
 8011f70:	b280      	uxth	r0, r0
 8011f72:	bd30      	pop	{r4, r5, pc}
 8011f74:	f830 5b02 	ldrh.w	r5, [r0], #2
 8011f78:	442b      	add	r3, r5
 8011f7a:	e7ed      	b.n	8011f58 <net_chksum+0xa>
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	e7f3      	b.n	8011f68 <net_chksum+0x1a>

08011f80 <memcpy.isra.0>:
 8011f80:	3801      	subs	r0, #1
 8011f82:	440a      	add	r2, r1
 8011f84:	4291      	cmp	r1, r2
 8011f86:	d100      	bne.n	8011f8a <memcpy.isra.0+0xa>
 8011f88:	4770      	bx	lr
 8011f8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f8e:	f800 3f01 	strb.w	r3, [r0, #1]!
 8011f92:	e7f7      	b.n	8011f84 <memcpy.isra.0+0x4>

08011f94 <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 8011f94:	b430      	push	{r4, r5}
 8011f96:	b168      	cbz	r0, 8011fb4 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8011f98:	2300      	movs	r3, #0
 8011f9a:	7905      	ldrb	r5, [r0, #4]
 8011f9c:	5cd4      	ldrb	r4, [r2, r3]
 8011f9e:	b11c      	cbz	r4, 8011fa8 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 8011fa0:	1c5c      	adds	r4, r3, #1
 8011fa2:	429d      	cmp	r5, r3
 8011fa4:	4623      	mov	r3, r4
 8011fa6:	dcf9      	bgt.n	8011f9c <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 8011fa8:	6804      	ldr	r4, [r0, #0]
 8011faa:	b2db      	uxtb	r3, r3
 8011fac:	69e4      	ldr	r4, [r4, #28]
 8011fae:	46a4      	mov	ip, r4
 8011fb0:	bc30      	pop	{r4, r5}
 8011fb2:	4760      	bx	ip
 8011fb4:	bc30      	pop	{r4, r5}
 8011fb6:	4770      	bx	lr

08011fb8 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8011fb8:	b110      	cbz	r0, 8011fc0 <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8011fba:	6803      	ldr	r3, [r0, #0]
 8011fbc:	691b      	ldr	r3, [r3, #16]
 8011fbe:	4718      	bx	r3
 8011fc0:	4770      	bx	lr

08011fc2 <Display::Printf(unsigned char, char const*, ...)>:
 8011fc2:	b40c      	push	{r2, r3}
 8011fc4:	b570      	push	{r4, r5, r6, lr}
 8011fc6:	6984      	ldr	r4, [r0, #24]
 8011fc8:	4605      	mov	r5, r0
 8011fca:	460e      	mov	r6, r1
 8011fcc:	b08a      	sub	sp, #40	; 0x28
 8011fce:	b174      	cbz	r4, 8011fee <Display::Printf(unsigned char, char const*, ...)+0x2c>
 8011fd0:	ab0f      	add	r3, sp, #60	; 0x3c
 8011fd2:	2120      	movs	r1, #32
 8011fd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011fd6:	a802      	add	r0, sp, #8
 8011fd8:	9301      	str	r3, [sp, #4]
 8011fda:	f001 fff5 	bl	8013fc8 <vsnprintf>
 8011fde:	4604      	mov	r4, r0
 8011fe0:	69a8      	ldr	r0, [r5, #24]
 8011fe2:	4631      	mov	r1, r6
 8011fe4:	6803      	ldr	r3, [r0, #0]
 8011fe6:	aa02      	add	r2, sp, #8
 8011fe8:	69dd      	ldr	r5, [r3, #28]
 8011fea:	b2a3      	uxth	r3, r4
 8011fec:	47a8      	blx	r5
 8011fee:	4620      	mov	r0, r4
 8011ff0:	b00a      	add	sp, #40	; 0x28
 8011ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ff6:	b002      	add	sp, #8
 8011ff8:	4770      	bx	lr

08011ffa <Display::Status(Display7SegmentMessage)>:
 8011ffa:	7c43      	ldrb	r3, [r0, #17]
 8011ffc:	b513      	push	{r0, r1, r4, lr}
 8011ffe:	4604      	mov	r4, r0
 8012000:	b19b      	cbz	r3, 801202a <Display::Status(Display7SegmentMessage)+0x30>
 8012002:	43c9      	mvns	r1, r1
 8012004:	2312      	movs	r3, #18
 8012006:	7a00      	ldrb	r0, [r0, #8]
 8012008:	f88d 3004 	strb.w	r3, [sp, #4]
 801200c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8012010:	f88d 1006 	strb.w	r1, [sp, #6]
 8012014:	f88d 3005 	strb.w	r3, [sp, #5]
 8012018:	f003 f8a4 	bl	8015164 <gd32_i2c_set_address(unsigned char)>
 801201c:	68e0      	ldr	r0, [r4, #12]
 801201e:	f003 f899 	bl	8015154 <gd32_i2c_set_baudrate(unsigned int)>
 8012022:	2103      	movs	r1, #3
 8012024:	a801      	add	r0, sp, #4
 8012026:	f003 f8a3 	bl	8015170 <gd32_i2c_write(char const*, unsigned int)>
 801202a:	b002      	add	sp, #8
 801202c:	bd10      	pop	{r4, pc}
	...

08012030 <DisplayUdf::DisplayUdf()>:
 8012030:	b510      	push	{r4, lr}
 8012032:	4604      	mov	r4, r0
 8012034:	f000 ffd2 	bl	8012fdc <Display::Display()>
 8012038:	2202      	movs	r2, #2
 801203a:	2300      	movs	r3, #0
 801203c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8012040:	4b05      	ldr	r3, [pc, #20]	; (8012058 <DisplayUdf::DisplayUdf()+0x28>)
 8012042:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8012046:	601c      	str	r4, [r3, #0]
 8012048:	2301      	movs	r3, #1
 801204a:	f802 3b01 	strb.w	r3, [r2], #1
 801204e:	3301      	adds	r3, #1
 8012050:	2b15      	cmp	r3, #21
 8012052:	d1fa      	bne.n	801204a <DisplayUdf::DisplayUdf()+0x1a>
 8012054:	4620      	mov	r0, r4
 8012056:	bd10      	pop	{r4, pc}
 8012058:	2000a624 	andcs	sl, r0, r4, lsr #12

0801205c <DisplayUdf::SetTitle(char const*, ...)>:
 801205c:	b40e      	push	{r1, r2, r3}
 801205e:	b517      	push	{r0, r1, r2, r4, lr}
 8012060:	ab05      	add	r3, sp, #20
 8012062:	f853 2b04 	ldr.w	r2, [r3], #4
 8012066:	4604      	mov	r4, r0
 8012068:	211f      	movs	r1, #31
 801206a:	301c      	adds	r0, #28
 801206c:	9301      	str	r3, [sp, #4]
 801206e:	f001 ffab 	bl	8013fc8 <vsnprintf>
 8012072:	2300      	movs	r3, #0
 8012074:	4404      	add	r4, r0
 8012076:	7723      	strb	r3, [r4, #28]
 8012078:	b003      	add	sp, #12
 801207a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801207e:	b003      	add	sp, #12
 8012080:	4770      	bx	lr
	...

08012084 <DisplayUdf::ShowEmacStart()>:
 8012084:	b510      	push	{r4, lr}
 8012086:	4604      	mov	r4, r0
 8012088:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 801208c:	6980      	ldr	r0, [r0, #24]
 801208e:	f7ff ff93 	bl	8011fb8 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8012092:	4620      	mov	r0, r4
 8012094:	4a02      	ldr	r2, [pc, #8]	; (80120a0 <DisplayUdf::ShowEmacStart()+0x1c>)
 8012096:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 801209a:	f7ff ff92 	bl	8011fc2 <Display::Printf(unsigned char, char const*, ...)>
 801209e:	bd10      	pop	{r4, pc}
 80120a0:	080180f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, pc}

080120a4 <DisplayUdf::ShowIpAddress()>:
 80120a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120a8:	4604      	mov	r4, r0
 80120aa:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 80120ae:	b086      	sub	sp, #24
 80120b0:	6980      	ldr	r0, [r0, #24]
 80120b2:	f7ff ff81 	bl	8011fb8 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80120b6:	4b13      	ldr	r3, [pc, #76]	; (8012104 <DisplayUdf::ShowIpAddress()+0x60>)
 80120b8:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
 80120bc:	681d      	ldr	r5, [r3, #0]
 80120be:	69a8      	ldr	r0, [r5, #24]
 80120c0:	692e      	ldr	r6, [r5, #16]
 80120c2:	f004 f855 	bl	8016170 <__popcountsi2>
 80120c6:	78eb      	ldrb	r3, [r5, #3]
 80120c8:	fa5f f886 	uxtb.w	r8, r6
 80120cc:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80120d0:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 80120d4:	0e36      	lsrs	r6, r6, #24
 80120d6:	b99b      	cbnz	r3, 8012100 <DisplayUdf::ShowIpAddress()+0x5c>
 80120d8:	786b      	ldrb	r3, [r5, #1]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	bf14      	ite	ne
 80120de:	2244      	movne	r2, #68	; 0x44
 80120e0:	2253      	moveq	r2, #83	; 0x53
 80120e2:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80120e6:	4643      	mov	r3, r8
 80120e8:	4639      	mov	r1, r7
 80120ea:	4620      	mov	r0, r4
 80120ec:	e9cd a601 	strd	sl, r6, [sp, #4]
 80120f0:	4a05      	ldr	r2, [pc, #20]	; (8012108 <DisplayUdf::ShowIpAddress()+0x64>)
 80120f2:	f8cd 9000 	str.w	r9, [sp]
 80120f6:	f7ff ff64 	bl	8011fc2 <Display::Printf(unsigned char, char const*, ...)>
 80120fa:	b006      	add	sp, #24
 80120fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012100:	225a      	movs	r2, #90	; 0x5a
 8012102:	e7ee      	b.n	80120e2 <DisplayUdf::ShowIpAddress()+0x3e>
 8012104:	20009ff4 	strdcs	r9, [r0], -r4
 8012108:	08018108 	stmdaeq	r1, {r3, r8, pc}

0801210c <DisplayUdf::ShowNetmask()>:
 801210c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801210e:	4604      	mov	r4, r0
 8012110:	4b0b      	ldr	r3, [pc, #44]	; (8012140 <DisplayUdf::ShowNetmask()+0x34>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	699b      	ldr	r3, [r3, #24]
 8012116:	0e1a      	lsrs	r2, r3, #24
 8012118:	9202      	str	r2, [sp, #8]
 801211a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801211e:	9201      	str	r2, [sp, #4]
 8012120:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012124:	9200      	str	r2, [sp, #0]
 8012126:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 801212a:	4a06      	ldr	r2, [pc, #24]	; (8012144 <DisplayUdf::ShowNetmask()+0x38>)
 801212c:	b2db      	uxtb	r3, r3
 801212e:	f7ff ff48 	bl	8011fc2 <Display::Printf(unsigned char, char const*, ...)>
 8012132:	4620      	mov	r0, r4
 8012134:	b004      	add	sp, #16
 8012136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801213a:	f7ff bfb3 	b.w	80120a4 <DisplayUdf::ShowIpAddress()>
 801213e:	bf00      	nop
 8012140:	20009ff4 	strdcs	r9, [r0], -r4
 8012144:	0801811a 	stmdaeq	r1, {r1, r3, r4, r8, pc}

08012148 <DisplayUdf::ShowGatewayIp()>:
 8012148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801214a:	4604      	mov	r4, r0
 801214c:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8012150:	6980      	ldr	r0, [r0, #24]
 8012152:	f7ff ff31 	bl	8011fb8 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8012156:	4b0a      	ldr	r3, [pc, #40]	; (8012180 <DisplayUdf::ShowGatewayIp()+0x38>)
 8012158:	4620      	mov	r0, r4
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 8012160:	695b      	ldr	r3, [r3, #20]
 8012162:	0e1a      	lsrs	r2, r3, #24
 8012164:	9202      	str	r2, [sp, #8]
 8012166:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801216a:	9201      	str	r2, [sp, #4]
 801216c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012170:	9200      	str	r2, [sp, #0]
 8012172:	b2db      	uxtb	r3, r3
 8012174:	4a03      	ldr	r2, [pc, #12]	; (8012184 <DisplayUdf::ShowGatewayIp()+0x3c>)
 8012176:	f7ff ff24 	bl	8011fc2 <Display::Printf(unsigned char, char const*, ...)>
 801217a:	b004      	add	sp, #16
 801217c:	bd10      	pop	{r4, pc}
 801217e:	bf00      	nop
 8012180:	20009ff4 	strdcs	r9, [r0], -r4
 8012184:	08018129 	stmdaeq	r1, {r0, r3, r5, r8, pc}

08012188 <DisplayUdf::ShowHostName()>:
 8012188:	b510      	push	{r4, lr}
 801218a:	4604      	mov	r4, r0
 801218c:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 8012190:	6980      	ldr	r0, [r0, #24]
 8012192:	f7ff ff11 	bl	8011fb8 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8012196:	4b05      	ldr	r3, [pc, #20]	; (80121ac <DisplayUdf::ShowHostName()+0x24>)
 8012198:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 801219c:	681a      	ldr	r2, [r3, #0]
 801219e:	69a0      	ldr	r0, [r4, #24]
 80121a0:	321c      	adds	r2, #28
 80121a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121a6:	f7ff bef5 	b.w	8011f94 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80121aa:	bf00      	nop
 80121ac:	20009ff4 	strdcs	r9, [r0], -r4

080121b0 <DisplayUdf::Show()>:
 80121b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121b2:	4604      	mov	r4, r0
 80121b4:	21ff      	movs	r1, #255	; 0xff
 80121b6:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 80121ba:	f100 0250 	add.w	r2, r0, #80	; 0x50
 80121be:	f813 0b01 	ldrb.w	r0, [r3], #1
 80121c2:	2806      	cmp	r0, #6
 80121c4:	bf88      	it	hi
 80121c6:	f803 1c01 	strbhi.w	r1, [r3, #-1]
 80121ca:	429a      	cmp	r2, r3
 80121cc:	d1f7      	bne.n	80121be <DisplayUdf::Show()+0xe>
 80121ce:	2501      	movs	r5, #1
 80121d0:	4629      	mov	r1, r5
 80121d2:	3501      	adds	r5, #1
 80121d4:	69a0      	ldr	r0, [r4, #24]
 80121d6:	b2ed      	uxtb	r5, r5
 80121d8:	f7ff feee 	bl	8011fb8 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80121dc:	2d06      	cmp	r5, #6
 80121de:	d1f7      	bne.n	80121d0 <DisplayUdf::Show()+0x20>
 80121e0:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80121e4:	69a0      	ldr	r0, [r4, #24]
 80121e6:	f104 021c 	add.w	r2, r4, #28
 80121ea:	f7ff fed3 	bl	8011f94 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80121ee:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80121f2:	69a0      	ldr	r0, [r4, #24]
 80121f4:	4a0d      	ldr	r2, [pc, #52]	; (801222c <DisplayUdf::Show()+0x7c>)
 80121f6:	f7ff fecd 	bl	8011f94 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80121fa:	4b0d      	ldr	r3, [pc, #52]	; (8012230 <DisplayUdf::Show()+0x80>)
 80121fc:	4a0d      	ldr	r2, [pc, #52]	; (8012234 <DisplayUdf::Show()+0x84>)
 80121fe:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	4620      	mov	r0, r4
 8012206:	2303      	movs	r3, #3
 8012208:	f7ff fedb 	bl	8011fc2 <Display::Printf(unsigned char, char const*, ...)>
 801220c:	4620      	mov	r0, r4
 801220e:	f7ff ff49 	bl	80120a4 <DisplayUdf::ShowIpAddress()>
 8012212:	4620      	mov	r0, r4
 8012214:	f7ff ff98 	bl	8012148 <DisplayUdf::ShowGatewayIp()>
 8012218:	4620      	mov	r0, r4
 801221a:	f7ff ff77 	bl	801210c <DisplayUdf::ShowNetmask()>
 801221e:	4620      	mov	r0, r4
 8012220:	b003      	add	sp, #12
 8012222:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012226:	f7ff bfaf 	b.w	8012188 <DisplayUdf::ShowHostName()>
 801222a:	bf00      	nop
 801222c:	0801662f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, sl, sp, lr}
 8012230:	2000a6bc 			; <UNDEFINED> instruction: 0x2000a6bc
 8012234:	08018138 	stmdaeq	r1, {r3, r4, r5, r8, pc}

08012238 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8012238:	3901      	subs	r1, #1
 801223a:	b510      	push	{r4, lr}
 801223c:	4604      	mov	r4, r0
 801223e:	2903      	cmp	r1, #3
 8012240:	d814      	bhi.n	801226c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8012242:	e8df f001 	tbb	[pc, r1]
 8012246:	281b1402 	ldmdacs	fp, {r1, sl, ip}
 801224a:	4b14      	ldr	r3, [pc, #80]	; (801229c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 801224c:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8012250:	6818      	ldr	r0, [r3, #0]
 8012252:	f7ff fed2 	bl	8011ffa <Display::Status(Display7SegmentMessage)>
 8012256:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 801225a:	69a0      	ldr	r0, [r4, #24]
 801225c:	f7ff feac 	bl	8011fb8 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8012260:	4a0f      	ldr	r2, [pc, #60]	; (80122a0 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 8012262:	4620      	mov	r0, r4
 8012264:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8012268:	f7ff feab 	bl	8011fc2 <Display::Printf(unsigned char, char const*, ...)>
 801226c:	bd10      	pop	{r4, pc}
 801226e:	f248 0180 	movw	r1, #32896	; 0x8080
 8012272:	4b0a      	ldr	r3, [pc, #40]	; (801229c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8012274:	6818      	ldr	r0, [r3, #0]
 8012276:	f7ff fec0 	bl	8011ffa <Display::Status(Display7SegmentMessage)>
 801227a:	e7f7      	b.n	801226c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 801227c:	4b07      	ldr	r3, [pc, #28]	; (801229c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 801227e:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8012282:	6818      	ldr	r0, [r3, #0]
 8012284:	f7ff feb9 	bl	8011ffa <Display::Status(Display7SegmentMessage)>
 8012288:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 801228c:	69a0      	ldr	r0, [r4, #24]
 801228e:	f7ff fe93 	bl	8011fb8 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8012292:	4a04      	ldr	r2, [pc, #16]	; (80122a4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 8012294:	e7e5      	b.n	8012262 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 8012296:	f645 3179 	movw	r1, #23417	; 0x5b79
 801229a:	e7ea      	b.n	8012272 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3a>
 801229c:	2000a62c 	andcs	sl, r0, ip, lsr #12
 80122a0:	08018147 	stmdaeq	r1, {r0, r1, r2, r6, r8, pc}
 80122a4:	08018155 	stmdaeq	r1, {r0, r2, r4, r6, r8, pc}

080122a8 <DisplayUdf::ShowShutdown()>:
 80122a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122ac:	4604      	mov	r4, r0
 80122ae:	6980      	ldr	r0, [r0, #24]
 80122b0:	b1d0      	cbz	r0, 80122e8 <DisplayUdf::ShowShutdown()+0x40>
 80122b2:	f890 8005 	ldrb.w	r8, [r0, #5]
 80122b6:	6803      	ldr	r3, [r0, #0]
 80122b8:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 80122bc:	b2ed      	uxtb	r5, r5
 80122be:	462a      	mov	r2, r5
 80122c0:	2100      	movs	r1, #0
 80122c2:	6a1b      	ldr	r3, [r3, #32]
 80122c4:	7906      	ldrb	r6, [r0, #4]
 80122c6:	2700      	movs	r7, #0
 80122c8:	4798      	blx	r3
 80122ca:	3e01      	subs	r6, #1
 80122cc:	42b7      	cmp	r7, r6
 80122ce:	69a0      	ldr	r0, [r4, #24]
 80122d0:	d311      	bcc.n	80122f6 <DisplayUdf::ShowShutdown()+0x4e>
 80122d2:	b120      	cbz	r0, 80122de <DisplayUdf::ShowShutdown()+0x36>
 80122d4:	6803      	ldr	r3, [r0, #0]
 80122d6:	462a      	mov	r2, r5
 80122d8:	2100      	movs	r1, #0
 80122da:	6a1b      	ldr	r3, [r3, #32]
 80122dc:	4798      	blx	r3
 80122de:	4641      	mov	r1, r8
 80122e0:	4a08      	ldr	r2, [pc, #32]	; (8012304 <DisplayUdf::ShowShutdown()+0x5c>)
 80122e2:	69a0      	ldr	r0, [r4, #24]
 80122e4:	f7ff fe56 	bl	8011f94 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80122e8:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 80122ec:	4620      	mov	r0, r4
 80122ee:	f7ff fe84 	bl	8011ffa <Display::Status(Display7SegmentMessage)>
 80122f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122f6:	b118      	cbz	r0, 8012300 <DisplayUdf::ShowShutdown()+0x58>
 80122f8:	6803      	ldr	r3, [r0, #0]
 80122fa:	2120      	movs	r1, #32
 80122fc:	695b      	ldr	r3, [r3, #20]
 80122fe:	4798      	blx	r3
 8012300:	3701      	adds	r7, #1
 8012302:	e7e3      	b.n	80122cc <DisplayUdf::ShowShutdown()+0x24>
 8012304:	08018163 	stmdaeq	r1, {r0, r1, r5, r6, r8, pc}

08012308 <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 8012308:	1e4b      	subs	r3, r1, #1
 801230a:	2b05      	cmp	r3, #5
 801230c:	b530      	push	{r4, r5, lr}
 801230e:	d80f      	bhi.n	8012330 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 8012310:	2300      	movs	r3, #0
 8012312:	f100 043c 	add.w	r4, r0, #60	; 0x3c
 8012316:	f814 5b01 	ldrb.w	r5, [r4], #1
 801231a:	428d      	cmp	r5, r1
 801231c:	d109      	bne.n	8012332 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 801231e:	1884      	adds	r4, r0, r2
 8012320:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 8012324:	4403      	add	r3, r0
 8012326:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 801232a:	4410      	add	r0, r2
 801232c:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8012330:	bd30      	pop	{r4, r5, pc}
 8012332:	3301      	adds	r3, #1
 8012334:	2b14      	cmp	r3, #20
 8012336:	d1ee      	bne.n	8012316 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 8012338:	e7f7      	b.n	801232a <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>
	...

0801233c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 801233c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801233e:	88c6      	ldrh	r6, [r0, #6]
 8012340:	8885      	ldrh	r5, [r0, #4]
 8012342:	42ae      	cmp	r6, r5
 8012344:	d216      	bcs.n	8012374 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 8012346:	4604      	mov	r4, r0
 8012348:	6800      	ldr	r0, [r0, #0]
 801234a:	1bad      	subs	r5, r5, r6
 801234c:	4430      	add	r0, r6
 801234e:	7a26      	ldrb	r6, [r4, #8]
 8012350:	b923      	cbnz	r3, 801235c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 8012352:	b926      	cbnz	r6, 801235e <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 8012354:	9200      	str	r2, [sp, #0]
 8012356:	460b      	mov	r3, r1
 8012358:	4a09      	ldr	r2, [pc, #36]	; (8012380 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 801235a:	e003      	b.n	8012364 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 801235c:	b166      	cbz	r6, 8012378 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 801235e:	460b      	mov	r3, r1
 8012360:	9200      	str	r2, [sp, #0]
 8012362:	4a08      	ldr	r2, [pc, #32]	; (8012384 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 8012364:	4629      	mov	r1, r5
 8012366:	f001 fe17 	bl	8013f98 <snprintf>
 801236a:	4285      	cmp	r5, r0
 801236c:	bfa2      	ittt	ge
 801236e:	88e3      	ldrhge	r3, [r4, #6]
 8012370:	181b      	addge	r3, r3, r0
 8012372:	80e3      	strhge	r3, [r4, #6]
 8012374:	b002      	add	sp, #8
 8012376:	bd70      	pop	{r4, r5, r6, pc}
 8012378:	9200      	str	r2, [sp, #0]
 801237a:	460b      	mov	r3, r1
 801237c:	4a02      	ldr	r2, [pc, #8]	; (8012388 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 801237e:	e7f1      	b.n	8012364 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8012380:	08016787 	stmdaeq	r1, {r0, r1, r2, r7, r8, r9, sl, sp, lr}
 8012384:	0801677e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r8, r9, sl, sp, lr}
 8012388:	08016788 	stmdaeq	r1, {r3, r7, r8, r9, sl, sp, lr}

0801238c <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 801238c:	b510      	push	{r4, lr}
 801238e:	2220      	movs	r2, #32
 8012390:	4604      	mov	r4, r0
 8012392:	f840 1b04 	str.w	r1, [r0], #4
 8012396:	2100      	movs	r1, #0
 8012398:	f001 fab8 	bl	801390c <memset>
 801239c:	f647 7305 	movw	r3, #32517	; 0x7f05
 80123a0:	4620      	mov	r0, r4
 80123a2:	84a3      	strh	r3, [r4, #36]	; 0x24
 80123a4:	bd10      	pop	{r4, pc}

080123a6 <DisplayUdfParams::Load()>:
 80123a6:	b508      	push	{r3, lr}
 80123a8:	2300      	movs	r3, #0
 80123aa:	4601      	mov	r1, r0
 80123ac:	6043      	str	r3, [r0, #4]
 80123ae:	6800      	ldr	r0, [r0, #0]
 80123b0:	b120      	cbz	r0, 80123bc <DisplayUdfParams::Load()+0x16>
 80123b2:	6803      	ldr	r3, [r0, #0]
 80123b4:	3104      	adds	r1, #4
 80123b6:	68db      	ldr	r3, [r3, #12]
 80123b8:	4798      	blx	r3
 80123ba:	2001      	movs	r0, #1
 80123bc:	bd08      	pop	{r3, pc}
	...

080123c0 <DisplayUdfParams::Load(char const*, unsigned int)>:
 80123c0:	6803      	ldr	r3, [r0, #0]
 80123c2:	b1d3      	cbz	r3, 80123fa <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 80123c4:	2300      	movs	r3, #0
 80123c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80123c8:	460d      	mov	r5, r1
 80123ca:	4616      	mov	r6, r2
 80123cc:	4604      	mov	r4, r0
 80123ce:	6043      	str	r3, [r0, #4]
 80123d0:	4602      	mov	r2, r0
 80123d2:	490a      	ldr	r1, [pc, #40]	; (80123fc <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 80123d4:	4668      	mov	r0, sp
 80123d6:	f000 fc05 	bl	8012be4 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 80123da:	4632      	mov	r2, r6
 80123dc:	4629      	mov	r1, r5
 80123de:	4668      	mov	r0, sp
 80123e0:	f000 fc04 	bl	8012bec <ReadConfigFile::Read(char const*, unsigned int)>
 80123e4:	4621      	mov	r1, r4
 80123e6:	f851 0b04 	ldr.w	r0, [r1], #4
 80123ea:	6803      	ldr	r3, [r0, #0]
 80123ec:	689b      	ldr	r3, [r3, #8]
 80123ee:	4798      	blx	r3
 80123f0:	4668      	mov	r0, sp
 80123f2:	f000 fbfa 	bl	8012bea <ReadConfigFile::~ReadConfigFile()>
 80123f6:	b002      	add	sp, #8
 80123f8:	bd70      	pop	{r4, r5, r6, pc}
 80123fa:	4770      	bx	lr
 80123fc:	080124c9 	stmdaeq	r1, {r0, r3, r6, r7, sl, sp}

08012400 <DisplayUdfParams::callbackFunction(char const*)>:
 8012400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012402:	460e      	mov	r6, r1
 8012404:	4604      	mov	r4, r0
 8012406:	492c      	ldr	r1, [pc, #176]	; (80124b8 <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 8012408:	4630      	mov	r0, r6
 801240a:	f10d 0207 	add.w	r2, sp, #7
 801240e:	f000 fd26 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8012412:	b968      	cbnz	r0, 8012430 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 8012414:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012418:	6863      	ldr	r3, [r4, #4]
 801241a:	2a7f      	cmp	r2, #127	; 0x7f
 801241c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8012420:	bf14      	ite	ne
 8012422:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 8012426:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 801242a:	6063      	str	r3, [r4, #4]
 801242c:	b003      	add	sp, #12
 801242e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012430:	4630      	mov	r0, r6
 8012432:	4922      	ldr	r1, [pc, #136]	; (80124bc <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 8012434:	f10d 0207 	add.w	r2, sp, #7
 8012438:	f000 fd11 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801243c:	b958      	cbnz	r0, 8012456 <DisplayUdfParams::callbackFunction(char const*)+0x56>
 801243e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012442:	6863      	ldr	r3, [r4, #4]
 8012444:	2a05      	cmp	r2, #5
 8012446:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 801244a:	bf14      	ite	ne
 801244c:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8012450:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 8012454:	e7e9      	b.n	801242a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8012456:	4630      	mov	r0, r6
 8012458:	4919      	ldr	r1, [pc, #100]	; (80124c0 <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 801245a:	f10d 0207 	add.w	r2, sp, #7
 801245e:	f000 fcfe 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8012462:	b948      	cbnz	r0, 8012478 <DisplayUdfParams::callbackFunction(char const*)+0x78>
 8012464:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012468:	6863      	ldr	r3, [r4, #4]
 801246a:	b112      	cbz	r2, 8012472 <DisplayUdfParams::callbackFunction(char const*)+0x72>
 801246c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012470:	e7db      	b.n	801242a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8012472:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012476:	e7d8      	b.n	801242a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8012478:	2500      	movs	r5, #0
 801247a:	4f12      	ldr	r7, [pc, #72]	; (80124c4 <DisplayUdfParams::callbackFunction(char const*)+0xc4>)
 801247c:	4630      	mov	r0, r6
 801247e:	f857 1b04 	ldr.w	r1, [r7], #4
 8012482:	f10d 0207 	add.w	r2, sp, #7
 8012486:	f000 fcea 	bl	8012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801248a:	b980      	cbnz	r0, 80124ae <DisplayUdfParams::callbackFunction(char const*)+0xae>
 801248c:	2301      	movs	r3, #1
 801248e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012492:	40ab      	lsls	r3, r5
 8012494:	1e4e      	subs	r6, r1, #1
 8012496:	2e05      	cmp	r6, #5
 8012498:	6862      	ldr	r2, [r4, #4]
 801249a:	4425      	add	r5, r4
 801249c:	d802      	bhi.n	80124a4 <DisplayUdfParams::callbackFunction(char const*)+0xa4>
 801249e:	7229      	strb	r1, [r5, #8]
 80124a0:	4313      	orrs	r3, r2
 80124a2:	e7c2      	b.n	801242a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80124a4:	ea22 0203 	bic.w	r2, r2, r3
 80124a8:	7228      	strb	r0, [r5, #8]
 80124aa:	6062      	str	r2, [r4, #4]
 80124ac:	e7be      	b.n	801242c <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 80124ae:	3501      	adds	r5, #1
 80124b0:	2d14      	cmp	r5, #20
 80124b2:	d1e3      	bne.n	801247c <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 80124b4:	e7ba      	b.n	801242c <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 80124b6:	bf00      	nop
 80124b8:	08018222 	stmdaeq	r1, {r1, r5, r9, pc}
 80124bc:	080181ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r8, pc}
 80124c0:	080181f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, pc}
 80124c4:	08018174 	stmdaeq	r1, {r2, r4, r5, r6, r8, pc}

080124c8 <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 80124c8:	f7ff bf9a 	b.w	8012400 <DisplayUdfParams::callbackFunction(char const*)>

080124cc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 80124cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124d0:	4604      	mov	r4, r0
 80124d2:	4615      	mov	r5, r2
 80124d4:	461e      	mov	r6, r3
 80124d6:	b086      	sub	sp, #24
 80124d8:	3004      	adds	r0, #4
 80124da:	b379      	cbz	r1, 801253c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 80124dc:	2222      	movs	r2, #34	; 0x22
 80124de:	f001 f9fe 	bl	80138de <memmove>
 80124e2:	462a      	mov	r2, r5
 80124e4:	4633      	mov	r3, r6
 80124e6:	493d      	ldr	r1, [pc, #244]	; (80125dc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x110>)
 80124e8:	a803      	add	r0, sp, #12
 80124ea:	f000 faab 	bl	8012a44 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 80124ee:	6863      	ldr	r3, [r4, #4]
 80124f0:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80124f4:	493a      	ldr	r1, [pc, #232]	; (80125e0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 80124f6:	f3c3 7340 	ubfx	r3, r3, #29, #1
 80124fa:	a803      	add	r0, sp, #12
 80124fc:	f7ff ff1e 	bl	801233c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8012500:	6863      	ldr	r3, [r4, #4]
 8012502:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8012506:	f3c3 7300 	ubfx	r3, r3, #28, #1
 801250a:	4936      	ldr	r1, [pc, #216]	; (80125e4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 801250c:	a803      	add	r0, sp, #12
 801250e:	f7ff ff15 	bl	801233c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8012512:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012516:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801251a:	6863      	ldr	r3, [r4, #4]
 801251c:	42aa      	cmp	r2, r5
 801251e:	d226      	bcs.n	801256e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 8012520:	9803      	ldr	r0, [sp, #12]
 8012522:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 8012526:	4410      	add	r0, r2
 8012528:	eba5 0502 	sub.w	r5, r5, r2
 801252c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8012530:	d10b      	bne.n	801254a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 8012532:	b962      	cbnz	r2, 801254e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 8012534:	9200      	str	r2, [sp, #0]
 8012536:	4b2c      	ldr	r3, [pc, #176]	; (80125e8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8012538:	4a2c      	ldr	r2, [pc, #176]	; (80125ec <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 801253a:	e00e      	b.n	801255a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 801253c:	6823      	ldr	r3, [r4, #0]
 801253e:	4601      	mov	r1, r0
 8012540:	681a      	ldr	r2, [r3, #0]
 8012542:	4618      	mov	r0, r3
 8012544:	68d2      	ldr	r2, [r2, #12]
 8012546:	4790      	blx	r2
 8012548:	e7cb      	b.n	80124e2 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 801254a:	2a00      	cmp	r2, #0
 801254c:	d041      	beq.n	80125d2 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 801254e:	3b00      	subs	r3, #0
 8012550:	bf18      	it	ne
 8012552:	2301      	movne	r3, #1
 8012554:	4a26      	ldr	r2, [pc, #152]	; (80125f0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 8012556:	9300      	str	r3, [sp, #0]
 8012558:	4b23      	ldr	r3, [pc, #140]	; (80125e8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 801255a:	4629      	mov	r1, r5
 801255c:	f001 fd1c 	bl	8013f98 <snprintf>
 8012560:	4285      	cmp	r5, r0
 8012562:	bfa2      	ittt	ge
 8012564:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8012568:	181b      	addge	r3, r3, r0
 801256a:	f8ad 3012 	strhge.w	r3, [sp, #18]
 801256e:	2500      	movs	r5, #0
 8012570:	2701      	movs	r7, #1
 8012572:	4e20      	ldr	r6, [pc, #128]	; (80125f4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 8012574:	f104 0808 	add.w	r8, r4, #8
 8012578:	f856 1b04 	ldr.w	r1, [r6], #4
 801257c:	780b      	ldrb	r3, [r1, #0]
 801257e:	b15b      	cbz	r3, 8012598 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 8012580:	6862      	ldr	r2, [r4, #4]
 8012582:	fa07 f305 	lsl.w	r3, r7, r5
 8012586:	4393      	bics	r3, r2
 8012588:	bf0c      	ite	eq
 801258a:	2301      	moveq	r3, #1
 801258c:	2300      	movne	r3, #0
 801258e:	f818 2005 	ldrb.w	r2, [r8, r5]
 8012592:	a803      	add	r0, sp, #12
 8012594:	f7ff fed2 	bl	801233c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8012598:	3501      	adds	r5, #1
 801259a:	2d14      	cmp	r5, #20
 801259c:	d1ec      	bne.n	8012578 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 801259e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80125a2:	b17b      	cbz	r3, 80125c4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xf8>
 80125a4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80125a8:	9b03      	ldr	r3, [sp, #12]
 80125aa:	4413      	add	r3, r2
 80125ac:	227d      	movs	r2, #125	; 0x7d
 80125ae:	f803 2c01 	strb.w	r2, [r3, #-1]
 80125b2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80125b6:	9903      	ldr	r1, [sp, #12]
 80125b8:	54ca      	strb	r2, [r1, r3]
 80125ba:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80125be:	3301      	adds	r3, #1
 80125c0:	f8ad 3012 	strh.w	r3, [sp, #18]
 80125c4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80125c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125ca:	601a      	str	r2, [r3, #0]
 80125cc:	b006      	add	sp, #24
 80125ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125d2:	2301      	movs	r3, #1
 80125d4:	4a08      	ldr	r2, [pc, #32]	; (80125f8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 80125d6:	9300      	str	r3, [sp, #0]
 80125d8:	4b03      	ldr	r3, [pc, #12]	; (80125e8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 80125da:	e7be      	b.n	801255a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 80125dc:	08018216 	stmdaeq	r1, {r1, r2, r4, r9, pc}
 80125e0:	08018222 	stmdaeq	r1, {r1, r5, r9, pc}
 80125e4:	080181ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r8, pc}
 80125e8:	080181f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, pc}
 80125ec:	08016787 	stmdaeq	r1, {r0, r1, r2, r7, r8, r9, sl, sp, lr}
 80125f0:	0801677e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r8, r9, sl, sp, lr}
 80125f4:	08018174 	stmdaeq	r1, {r2, r4, r5, r6, r8, pc}
 80125f8:	08016788 	stmdaeq	r1, {r3, r7, r8, r9, sl, sp, lr}

080125fc <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 80125fc:	b513      	push	{r0, r1, r4, lr}
 80125fe:	6804      	ldr	r4, [r0, #0]
 8012600:	b914      	cbnz	r4, 8012608 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8012602:	601c      	str	r4, [r3, #0]
 8012604:	b002      	add	sp, #8
 8012606:	bd10      	pop	{r4, pc}
 8012608:	9300      	str	r3, [sp, #0]
 801260a:	4613      	mov	r3, r2
 801260c:	460a      	mov	r2, r1
 801260e:	2100      	movs	r1, #0
 8012610:	f7ff ff5c 	bl	80124cc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 8012614:	e7f6      	b.n	8012604 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

08012616 <DisplayUdfParams::Set(DisplayUdf*)>:
 8012616:	6843      	ldr	r3, [r0, #4]
 8012618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801261c:	009a      	lsls	r2, r3, #2
 801261e:	4604      	mov	r4, r0
 8012620:	460e      	mov	r6, r1
 8012622:	d506      	bpl.n	8012632 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8012624:	6988      	ldr	r0, [r1, #24]
 8012626:	b120      	cbz	r0, 8012632 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8012628:	6803      	ldr	r3, [r0, #0]
 801262a:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 801262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012630:	4798      	blx	r3
 8012632:	6863      	ldr	r3, [r4, #4]
 8012634:	69b0      	ldr	r0, [r6, #24]
 8012636:	00db      	lsls	r3, r3, #3
 8012638:	bf41      	itttt	mi
 801263a:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 801263e:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 8012642:	4353      	mulmi	r3, r2
 8012644:	6173      	strmi	r3, [r6, #20]
 8012646:	6861      	ldr	r1, [r4, #4]
 8012648:	f3c1 7180 	ubfx	r1, r1, #30, #1
 801264c:	b110      	cbz	r0, 8012654 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 801264e:	6803      	ldr	r3, [r0, #0]
 8012650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012652:	4798      	blx	r3
 8012654:	2500      	movs	r5, #0
 8012656:	2701      	movs	r7, #1
 8012658:	f104 0808 	add.w	r8, r4, #8
 801265c:	6862      	ldr	r2, [r4, #4]
 801265e:	fa07 f305 	lsl.w	r3, r7, r5
 8012662:	4393      	bics	r3, r2
 8012664:	d105      	bne.n	8012672 <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 8012666:	462a      	mov	r2, r5
 8012668:	4630      	mov	r0, r6
 801266a:	f818 1005 	ldrb.w	r1, [r8, r5]
 801266e:	f7ff fe4b 	bl	8012308 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8012672:	3501      	adds	r5, #1
 8012674:	2d14      	cmp	r5, #20
 8012676:	d1f1      	bne.n	801265c <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 8012678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801267c <DisplayUdfParams::Dump()>:
 801267c:	4770      	bx	lr

0801267e <DisplayUdf::ShowNodeName(ArtNetNode*)>:
 801267e:	b570      	push	{r4, r5, r6, lr}
 8012680:	4605      	mov	r5, r0
 8012682:	6980      	ldr	r0, [r0, #24]
 8012684:	460c      	mov	r4, r1
 8012686:	b120      	cbz	r0, 8012692 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x14>
 8012688:	6803      	ldr	r3, [r0, #0]
 801268a:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 801268e:	691b      	ldr	r3, [r3, #16]
 8012690:	4798      	blx	r3
 8012692:	69a8      	ldr	r0, [r5, #24]
 8012694:	f104 0242 	add.w	r2, r4, #66	; 0x42
 8012698:	b190      	cbz	r0, 80126c0 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x42>
 801269a:	2300      	movs	r3, #0
 801269c:	7906      	ldrb	r6, [r0, #4]
 801269e:	3441      	adds	r4, #65	; 0x41
 80126a0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80126a4:	b119      	cbz	r1, 80126ae <DisplayUdf::ShowNodeName(ArtNetNode*)+0x30>
 80126a6:	1c59      	adds	r1, r3, #1
 80126a8:	429e      	cmp	r6, r3
 80126aa:	460b      	mov	r3, r1
 80126ac:	dcf8      	bgt.n	80126a0 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x22>
 80126ae:	6801      	ldr	r1, [r0, #0]
 80126b0:	b2db      	uxtb	r3, r3
 80126b2:	69cc      	ldr	r4, [r1, #28]
 80126b4:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 80126b8:	46a4      	mov	ip, r4
 80126ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126be:	4760      	bx	ip
 80126c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080126c4 <DisplayUdf::ShowUniverse(ArtNetNode*)>:
 80126c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126c8:	460c      	mov	r4, r1
 80126ca:	b08b      	sub	sp, #44	; 0x2c
 80126cc:	4606      	mov	r6, r0
 80126ce:	2301      	movs	r3, #1
 80126d0:	2100      	movs	r1, #0
 80126d2:	4620      	mov	r0, r4
 80126d4:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 80126d8:	f7f7 f842 	bl	8009760 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 80126dc:	b350      	cbz	r0, 8012734 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x70>
 80126de:	2100      	movs	r1, #0
 80126e0:	4620      	mov	r0, r4
 80126e2:	f896 9040 	ldrb.w	r9, [r6, #64]	; 0x40
 80126e6:	f7f7 f855 	bl	8009794 <ArtNetNode::GetNetSwitch(unsigned int) const>
 80126ea:	2100      	movs	r1, #0
 80126ec:	4605      	mov	r5, r0
 80126ee:	4620      	mov	r0, r4
 80126f0:	f7f7 f84c 	bl	800978c <ArtNetNode::GetSubnetSwitch(unsigned int) const>
 80126f4:	2100      	movs	r1, #0
 80126f6:	4607      	mov	r7, r0
 80126f8:	4620      	mov	r0, r4
 80126fa:	f89d a027 	ldrb.w	sl, [sp, #39]	; 0x27
 80126fe:	f7f7 f9c4 	bl	8009a8a <ArtNetNode::GetMergeMode(unsigned int) const>
 8012702:	4a2d      	ldr	r2, [pc, #180]	; (80127b8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf4>)
 8012704:	4b2d      	ldr	r3, [pc, #180]	; (80127bc <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf8>)
 8012706:	2100      	movs	r1, #0
 8012708:	2800      	cmp	r0, #0
 801270a:	bf0c      	ite	eq
 801270c:	4690      	moveq	r8, r2
 801270e:	4698      	movne	r8, r3
 8012710:	4620      	mov	r0, r4
 8012712:	f7f7 f989 	bl	8009a28 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8012716:	4a2a      	ldr	r2, [pc, #168]	; (80127c0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xfc>)
 8012718:	4b2a      	ldr	r3, [pc, #168]	; (80127c4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x100>)
 801271a:	4649      	mov	r1, r9
 801271c:	2800      	cmp	r0, #0
 801271e:	bf18      	it	ne
 8012720:	4613      	movne	r3, r2
 8012722:	e9cd 7a00 	strd	r7, sl, [sp]
 8012726:	e9cd 8302 	strd	r8, r3, [sp, #8]
 801272a:	4630      	mov	r0, r6
 801272c:	462b      	mov	r3, r5
 801272e:	4a26      	ldr	r2, [pc, #152]	; (80127c8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x104>)
 8012730:	f7ff fc47 	bl	8011fc2 <Display::Printf(unsigned char, char const*, ...)>
 8012734:	2500      	movs	r5, #0
 8012736:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80127c4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x100>
 801273a:	4629      	mov	r1, r5
 801273c:	2301      	movs	r3, #1
 801273e:	4620      	mov	r0, r4
 8012740:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8012744:	f7f7 f80c 	bl	8009760 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8012748:	46a9      	mov	r9, r5
 801274a:	3501      	adds	r5, #1
 801274c:	b378      	cbz	r0, 80127ae <DisplayUdf::ShowUniverse(ArtNetNode*)+0xea>
 801274e:	f106 0343 	add.w	r3, r6, #67	; 0x43
 8012752:	2100      	movs	r1, #0
 8012754:	4620      	mov	r0, r4
 8012756:	f813 b005 	ldrb.w	fp, [r3, r5]
 801275a:	f7f7 f81b 	bl	8009794 <ArtNetNode::GetNetSwitch(unsigned int) const>
 801275e:	2100      	movs	r1, #0
 8012760:	4607      	mov	r7, r0
 8012762:	4620      	mov	r0, r4
 8012764:	f7f7 f812 	bl	800978c <ArtNetNode::GetSubnetSwitch(unsigned int) const>
 8012768:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 801276c:	4680      	mov	r8, r0
 801276e:	4649      	mov	r1, r9
 8012770:	4620      	mov	r0, r4
 8012772:	9307      	str	r3, [sp, #28]
 8012774:	f7f7 f989 	bl	8009a8a <ArtNetNode::GetMergeMode(unsigned int) const>
 8012778:	4b10      	ldr	r3, [pc, #64]	; (80127bc <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf8>)
 801277a:	4a0f      	ldr	r2, [pc, #60]	; (80127b8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf4>)
 801277c:	4649      	mov	r1, r9
 801277e:	2800      	cmp	r0, #0
 8012780:	bf18      	it	ne
 8012782:	461a      	movne	r2, r3
 8012784:	4620      	mov	r0, r4
 8012786:	9206      	str	r2, [sp, #24]
 8012788:	f7f7 f94e 	bl	8009a28 <ArtNetNode::GetPortProtocol(unsigned int) const>
 801278c:	490c      	ldr	r1, [pc, #48]	; (80127c0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xfc>)
 801278e:	9a06      	ldr	r2, [sp, #24]
 8012790:	2800      	cmp	r0, #0
 8012792:	bf08      	it	eq
 8012794:	4651      	moveq	r1, sl
 8012796:	9b07      	ldr	r3, [sp, #28]
 8012798:	9104      	str	r1, [sp, #16]
 801279a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 801279e:	9203      	str	r2, [sp, #12]
 80127a0:	462b      	mov	r3, r5
 80127a2:	4659      	mov	r1, fp
 80127a4:	4630      	mov	r0, r6
 80127a6:	4a09      	ldr	r2, [pc, #36]	; (80127cc <DisplayUdf::ShowUniverse(ArtNetNode*)+0x108>)
 80127a8:	9700      	str	r7, [sp, #0]
 80127aa:	f7ff fc0a 	bl	8011fc2 <Display::Printf(unsigned char, char const*, ...)>
 80127ae:	2d04      	cmp	r5, #4
 80127b0:	d1c3      	bne.n	801273a <DisplayUdf::ShowUniverse(ArtNetNode*)+0x76>
 80127b2:	b00b      	add	sp, #44	; 0x2c
 80127b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127b8:	080166af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r9, sl, sp, lr}
 80127bc:	080166b3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r9, sl, sp, lr}
 80127c0:	080166bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r9, sl, sp, lr}
 80127c4:	0801822c 	stmdaeq	r1, {r2, r3, r5, r9, pc}
 80127c8:	08018231 	stmdaeq	r1, {r0, r4, r5, r9, pc}
 80127cc:	08018245 	stmdaeq	r1, {r0, r2, r6, r9, pc}

080127d0 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
 80127d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80127d4:	4606      	mov	r6, r0
 80127d6:	2541      	movs	r5, #65	; 0x41
 80127d8:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8012818 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x48>
 80127dc:	b085      	sub	sp, #20
 80127de:	f100 084a 	add.w	r8, r0, #74	; 0x4a
 80127e2:	f501 775b 	add.w	r7, r1, #876	; 0x36c
 80127e6:	012b      	lsls	r3, r5, #4
 80127e8:	58fc      	ldr	r4, [r7, r3]
 80127ea:	464a      	mov	r2, r9
 80127ec:	0e23      	lsrs	r3, r4, #24
 80127ee:	9303      	str	r3, [sp, #12]
 80127f0:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80127f4:	9302      	str	r3, [sp, #8]
 80127f6:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80127fa:	b2e4      	uxtb	r4, r4
 80127fc:	9301      	str	r3, [sp, #4]
 80127fe:	9400      	str	r4, [sp, #0]
 8012800:	462b      	mov	r3, r5
 8012802:	4630      	mov	r0, r6
 8012804:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012808:	3501      	adds	r5, #1
 801280a:	f7ff fbda 	bl	8011fc2 <Display::Printf(unsigned char, char const*, ...)>
 801280e:	2d45      	cmp	r5, #69	; 0x45
 8012810:	d1e9      	bne.n	80127e6 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x16>
 8012812:	b005      	add	sp, #20
 8012814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012818:	0801825b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r9, pc}

0801281c <DisplayUdf::Show(ArtNetNode*)>:
 801281c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801281e:	4604      	mov	r4, r0
 8012820:	460d      	mov	r5, r1
 8012822:	f7ff fcc5 	bl	80121b0 <DisplayUdf::Show()>
 8012826:	4629      	mov	r1, r5
 8012828:	4620      	mov	r0, r4
 801282a:	f7ff ff28 	bl	801267e <DisplayUdf::ShowNodeName(ArtNetNode*)>
 801282e:	4629      	mov	r1, r5
 8012830:	4620      	mov	r0, r4
 8012832:	f7ff ff47 	bl	80126c4 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8012836:	4629      	mov	r1, r5
 8012838:	4620      	mov	r0, r4
 801283a:	f7ff ffc9 	bl	80127d0 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>
 801283e:	f895 26de 	ldrb.w	r2, [r5, #1758]	; 0x6de
 8012842:	f895 36df 	ldrb.w	r3, [r5, #1759]	; 0x6df
 8012846:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 801284a:	4413      	add	r3, r2
 801284c:	4620      	mov	r0, r4
 801284e:	4a0d      	ldr	r2, [pc, #52]	; (8012884 <DisplayUdf::Show(ArtNetNode*)+0x68>)
 8012850:	f7ff fbb7 	bl	8011fc2 <Display::Printf(unsigned char, char const*, ...)>
 8012854:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8012856:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 801285a:	2a02      	cmp	r2, #2
 801285c:	d001      	beq.n	8012862 <DisplayUdf::Show(ArtNetNode*)+0x46>
 801285e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012860:	b92b      	cbnz	r3, 801286e <DisplayUdf::Show(ArtNetNode*)+0x52>
 8012862:	4620      	mov	r0, r4
 8012864:	4a08      	ldr	r2, [pc, #32]	; (8012888 <DisplayUdf::Show(ArtNetNode*)+0x6c>)
 8012866:	f7ff fbac 	bl	8011fc2 <Display::Printf(unsigned char, char const*, ...)>
 801286a:	b003      	add	sp, #12
 801286c:	bd30      	pop	{r4, r5, pc}
 801286e:	4807      	ldr	r0, [pc, #28]	; (801288c <DisplayUdf::Show(ArtNetNode*)+0x70>)
 8012870:	9300      	str	r3, [sp, #0]
 8012872:	4b07      	ldr	r3, [pc, #28]	; (8012890 <DisplayUdf::Show(ArtNetNode*)+0x74>)
 8012874:	2a00      	cmp	r2, #0
 8012876:	bf08      	it	eq
 8012878:	4603      	moveq	r3, r0
 801287a:	4620      	mov	r0, r4
 801287c:	4a05      	ldr	r2, [pc, #20]	; (8012894 <DisplayUdf::Show(ArtNetNode*)+0x78>)
 801287e:	f7ff fba0 	bl	8011fc2 <Display::Printf(unsigned char, char const*, ...)>
 8012882:	e7f2      	b.n	801286a <DisplayUdf::Show(ArtNetNode*)+0x4e>
 8012884:	0801826b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r9, pc}
 8012888:	08018272 	stmdaeq	r1, {r1, r4, r5, r6, r9, pc}
 801288c:	080167f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 8012890:	080167e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, sl, sp, lr}
 8012894:	08018279 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, pc}

08012898 <NetworkDisplay::ShowEmacStart()>:
 8012898:	4b01      	ldr	r3, [pc, #4]	; (80128a0 <NetworkDisplay::ShowEmacStart()+0x8>)
 801289a:	6818      	ldr	r0, [r3, #0]
 801289c:	f7ff bbf2 	b.w	8012084 <DisplayUdf::ShowEmacStart()>
 80128a0:	2000a624 	andcs	sl, r0, r4, lsr #12

080128a4 <NetworkDisplay::ShowIp()>:
 80128a4:	4b01      	ldr	r3, [pc, #4]	; (80128ac <NetworkDisplay::ShowIp()+0x8>)
 80128a6:	6818      	ldr	r0, [r3, #0]
 80128a8:	f7ff bbfc 	b.w	80120a4 <DisplayUdf::ShowIpAddress()>
 80128ac:	2000a624 	andcs	sl, r0, r4, lsr #12

080128b0 <NetworkDisplay::ShowNetMask()>:
 80128b0:	4b01      	ldr	r3, [pc, #4]	; (80128b8 <NetworkDisplay::ShowNetMask()+0x8>)
 80128b2:	6818      	ldr	r0, [r3, #0]
 80128b4:	f7ff bc2a 	b.w	801210c <DisplayUdf::ShowNetmask()>
 80128b8:	2000a624 	andcs	sl, r0, r4, lsr #12

080128bc <NetworkDisplay::ShowGatewayIp()>:
 80128bc:	4b01      	ldr	r3, [pc, #4]	; (80128c4 <NetworkDisplay::ShowGatewayIp()+0x8>)
 80128be:	6818      	ldr	r0, [r3, #0]
 80128c0:	f7ff bc42 	b.w	8012148 <DisplayUdf::ShowGatewayIp()>
 80128c4:	2000a624 	andcs	sl, r0, r4, lsr #12

080128c8 <NetworkDisplay::ShowShutdown()>:
 80128c8:	4b01      	ldr	r3, [pc, #4]	; (80128d0 <NetworkDisplay::ShowShutdown()+0x8>)
 80128ca:	6818      	ldr	r0, [r3, #0]
 80128cc:	f7ff bcec 	b.w	80122a8 <DisplayUdf::ShowShutdown()>
 80128d0:	2000a624 	andcs	sl, r0, r4, lsr #12

080128d4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 80128d4:	4b01      	ldr	r3, [pc, #4]	; (80128dc <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)+0x8>)
 80128d6:	6818      	ldr	r0, [r3, #0]
 80128d8:	f7ff bcae 	b.w	8012238 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80128dc:	2000a624 	andcs	sl, r0, r4, lsr #12

080128e0 <properties::convert_json_file(char*, unsigned short, bool)>:
 80128e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128e4:	4603      	mov	r3, r0
 80128e6:	7800      	ldrb	r0, [r0, #0]
 80128e8:	287b      	cmp	r0, #123	; 0x7b
 80128ea:	f040 80a2 	bne.w	8012a32 <properties::convert_json_file(char*, unsigned short, bool)+0x152>
 80128ee:	b17a      	cbz	r2, 8012910 <properties::convert_json_file(char*, unsigned short, bool)+0x30>
 80128f0:	2401      	movs	r4, #1
 80128f2:	461e      	mov	r6, r3
 80128f4:	4620      	mov	r0, r4
 80128f6:	2a00      	cmp	r2, #0
 80128f8:	bf0c      	ite	eq
 80128fa:	f04f 0c0a 	moveq.w	ip, #10
 80128fe:	f04f 0c00 	movne.w	ip, #0
 8012902:	273d      	movs	r7, #61	; 0x3d
 8012904:	42a1      	cmp	r1, r4
 8012906:	d850      	bhi.n	80129aa <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 8012908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801290c:	463c      	mov	r4, r7
 801290e:	e7f2      	b.n	80128f6 <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 8012910:	2023      	movs	r0, #35	; 0x23
 8012912:	f803 0b01 	strb.w	r0, [r3], #1
 8012916:	461c      	mov	r4, r3
 8012918:	2701      	movs	r7, #1
 801291a:	42b9      	cmp	r1, r7
 801291c:	d811      	bhi.n	8012942 <properties::convert_json_file(char*, unsigned short, bool)+0x62>
 801291e:	2001      	movs	r0, #1
 8012920:	461e      	mov	r6, r3
 8012922:	230a      	movs	r3, #10
 8012924:	4625      	mov	r5, r4
 8012926:	f806 3b01 	strb.w	r3, [r6], #1
 801292a:	3001      	adds	r0, #1
 801292c:	462b      	mov	r3, r5
 801292e:	781c      	ldrb	r4, [r3, #0]
 8012930:	3501      	adds	r5, #1
 8012932:	2c7b      	cmp	r4, #123	; 0x7b
 8012934:	d0ea      	beq.n	801290c <properties::convert_json_file(char*, unsigned short, bool)+0x2c>
 8012936:	42b9      	cmp	r1, r7
 8012938:	f107 0401 	add.w	r4, r7, #1
 801293c:	d9db      	bls.n	80128f6 <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 801293e:	4627      	mov	r7, r4
 8012940:	e7f4      	b.n	801292c <properties::convert_json_file(char*, unsigned short, bool)+0x4c>
 8012942:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012946:	2822      	cmp	r0, #34	; 0x22
 8012948:	d119      	bne.n	801297e <properties::convert_json_file(char*, unsigned short, bool)+0x9e>
 801294a:	46a4      	mov	ip, r4
 801294c:	461d      	mov	r5, r3
 801294e:	2601      	movs	r6, #1
 8012950:	f89c e000 	ldrb.w	lr, [ip]
 8012954:	4664      	mov	r4, ip
 8012956:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 801295a:	462b      	mov	r3, r5
 801295c:	4630      	mov	r0, r6
 801295e:	f10c 0c01 	add.w	ip, ip, #1
 8012962:	f105 0501 	add.w	r5, r5, #1
 8012966:	f106 0601 	add.w	r6, r6, #1
 801296a:	d0d9      	beq.n	8012920 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 801296c:	3701      	adds	r7, #1
 801296e:	42b9      	cmp	r1, r7
 8012970:	4664      	mov	r4, ip
 8012972:	f805 ec01 	strb.w	lr, [r5, #-1]
 8012976:	d8eb      	bhi.n	8012950 <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 8012978:	4630      	mov	r0, r6
 801297a:	462b      	mov	r3, r5
 801297c:	e7d0      	b.n	8012920 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 801297e:	3701      	adds	r7, #1
 8012980:	e7cb      	b.n	801291a <properties::convert_json_file(char*, unsigned short, bool)+0x3a>
 8012982:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8012986:	d110      	bne.n	80129aa <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 8012988:	eba0 0803 	sub.w	r8, r0, r3
 801298c:	461a      	mov	r2, r3
 801298e:	eb08 0003 	add.w	r0, r8, r3
 8012992:	f813 eb01 	ldrb.w	lr, [r3], #1
 8012996:	1c65      	adds	r5, r4, #1
 8012998:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 801299c:	d04c      	beq.n	8012a38 <properties::convert_json_file(char*, unsigned short, bool)+0x158>
 801299e:	42a1      	cmp	r1, r4
 80129a0:	d911      	bls.n	80129c6 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
 80129a2:	462c      	mov	r4, r5
 80129a4:	f806 eb01 	strb.w	lr, [r6], #1
 80129a8:	e7f0      	b.n	801298c <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 80129aa:	42a1      	cmp	r1, r4
 80129ac:	461d      	mov	r5, r3
 80129ae:	f893 e000 	ldrb.w	lr, [r3]
 80129b2:	f104 0401 	add.w	r4, r4, #1
 80129b6:	f103 0301 	add.w	r3, r3, #1
 80129ba:	d8e2      	bhi.n	8012982 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 80129bc:	462b      	mov	r3, r5
 80129be:	e7e3      	b.n	8012988 <properties::convert_json_file(char*, unsigned short, bool)+0xa8>
 80129c0:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
 80129c4:	d009      	beq.n	80129da <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 80129c6:	42a9      	cmp	r1, r5
 80129c8:	4614      	mov	r4, r2
 80129ca:	f892 e000 	ldrb.w	lr, [r2]
 80129ce:	f105 0501 	add.w	r5, r5, #1
 80129d2:	f102 0201 	add.w	r2, r2, #1
 80129d6:	d8f3      	bhi.n	80129c0 <properties::convert_json_file(char*, unsigned short, bool)+0xe0>
 80129d8:	4622      	mov	r2, r4
 80129da:	7814      	ldrb	r4, [r2, #0]
 80129dc:	4696      	mov	lr, r2
 80129de:	2c2f      	cmp	r4, #47	; 0x2f
 80129e0:	462b      	mov	r3, r5
 80129e2:	f102 0201 	add.w	r2, r2, #1
 80129e6:	f105 0501 	add.w	r5, r5, #1
 80129ea:	d81a      	bhi.n	8012a22 <properties::convert_json_file(char*, unsigned short, bool)+0x142>
 80129ec:	4299      	cmp	r1, r3
 80129ee:	d8f4      	bhi.n	80129da <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 80129f0:	2c22      	cmp	r4, #34	; 0x22
 80129f2:	bf08      	it	eq
 80129f4:	4696      	moveq	lr, r2
 80129f6:	4673      	mov	r3, lr
 80129f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129fc:	1c6c      	adds	r4, r5, #1
 80129fe:	2a22      	cmp	r2, #34	; 0x22
 8012a00:	d011      	beq.n	8012a26 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8012a02:	2a2c      	cmp	r2, #44	; 0x2c
 8012a04:	d00f      	beq.n	8012a26 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8012a06:	2a7d      	cmp	r2, #125	; 0x7d
 8012a08:	d00d      	beq.n	8012a26 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8012a0a:	42a9      	cmp	r1, r5
 8012a0c:	d90f      	bls.n	8012a2e <properties::convert_json_file(char*, unsigned short, bool)+0x14e>
 8012a0e:	f1a2 0520 	sub.w	r5, r2, #32
 8012a12:	2d5a      	cmp	r5, #90	; 0x5a
 8012a14:	d803      	bhi.n	8012a1e <properties::convert_json_file(char*, unsigned short, bool)+0x13e>
 8012a16:	469e      	mov	lr, r3
 8012a18:	f806 2b01 	strb.w	r2, [r6], #1
 8012a1c:	3001      	adds	r0, #1
 8012a1e:	4625      	mov	r5, r4
 8012a20:	e7e9      	b.n	80129f6 <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 8012a22:	461d      	mov	r5, r3
 8012a24:	e7e7      	b.n	80129f6 <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 8012a26:	462c      	mov	r4, r5
 8012a28:	f806 cb01 	strb.w	ip, [r6], #1
 8012a2c:	3001      	adds	r0, #1
 8012a2e:	3401      	adds	r4, #1
 8012a30:	e768      	b.n	8012904 <properties::convert_json_file(char*, unsigned short, bool)+0x24>
 8012a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a36:	e767      	b.n	8012908 <properties::convert_json_file(char*, unsigned short, bool)+0x28>
 8012a38:	4625      	mov	r5, r4
 8012a3a:	f806 7b01 	strb.w	r7, [r6], #1
 8012a3e:	3001      	adds	r0, #1
 8012a40:	e7c1      	b.n	80129c6 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
	...

08012a44 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 8012a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a48:	6002      	str	r2, [r0, #0]
 8012a4a:	4614      	mov	r4, r2
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	80c2      	strh	r2, [r0, #6]
 8012a50:	4a1c      	ldr	r2, [pc, #112]	; (8012ac4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 8012a52:	4606      	mov	r6, r0
 8012a54:	7812      	ldrb	r2, [r2, #0]
 8012a56:	8083      	strh	r3, [r0, #4]
 8012a58:	f002 0201 	and.w	r2, r2, #1
 8012a5c:	7202      	strb	r2, [r0, #8]
 8012a5e:	4608      	mov	r0, r1
 8012a60:	4605      	mov	r5, r0
 8012a62:	782f      	ldrb	r7, [r5, #0]
 8012a64:	3001      	adds	r0, #1
 8012a66:	2f00      	cmp	r7, #0
 8012a68:	d1fa      	bne.n	8012a60 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 8012a6a:	1a6d      	subs	r5, r5, r1
 8012a6c:	b29b      	uxth	r3, r3
 8012a6e:	b1d2      	cbz	r2, 8012aa6 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 8012a70:	1d2f      	adds	r7, r5, #4
 8012a72:	429f      	cmp	r7, r3
 8012a74:	d814      	bhi.n	8012aa0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8012a76:	f04f 087b 	mov.w	r8, #123	; 0x7b
 8012a7a:	f04f 0922 	mov.w	r9, #34	; 0x22
 8012a7e:	462a      	mov	r2, r5
 8012a80:	f884 8000 	strb.w	r8, [r4]
 8012a84:	f884 9001 	strb.w	r9, [r4, #1]
 8012a88:	1ca0      	adds	r0, r4, #2
 8012a8a:	f000 ff28 	bl	80138de <memmove>
 8012a8e:	223a      	movs	r2, #58	; 0x3a
 8012a90:	1963      	adds	r3, r4, r5
 8012a92:	3505      	adds	r5, #5
 8012a94:	f883 9002 	strb.w	r9, [r3, #2]
 8012a98:	70da      	strb	r2, [r3, #3]
 8012a9a:	80f5      	strh	r5, [r6, #6]
 8012a9c:	f804 8007 	strb.w	r8, [r4, r7]
 8012aa0:	4630      	mov	r0, r6
 8012aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012aa6:	1caf      	adds	r7, r5, #2
 8012aa8:	429f      	cmp	r7, r3
 8012aaa:	d8f9      	bhi.n	8012aa0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8012aac:	4620      	mov	r0, r4
 8012aae:	2323      	movs	r3, #35	; 0x23
 8012ab0:	462a      	mov	r2, r5
 8012ab2:	f800 3b01 	strb.w	r3, [r0], #1
 8012ab6:	f000 ff12 	bl	80138de <memmove>
 8012aba:	230a      	movs	r3, #10
 8012abc:	442c      	add	r4, r5
 8012abe:	7063      	strb	r3, [r4, #1]
 8012ac0:	80f7      	strh	r7, [r6, #6]
 8012ac2:	e7ed      	b.n	8012aa0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8012ac4:	2000a628 	andcs	sl, r0, r8, lsr #12

08012ac8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 8012ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012aca:	469c      	mov	ip, r3
 8012acc:	8885      	ldrh	r5, [r0, #4]
 8012ace:	88c3      	ldrh	r3, [r0, #6]
 8012ad0:	b085      	sub	sp, #20
 8012ad2:	42ab      	cmp	r3, r5
 8012ad4:	d302      	bcc.n	8012adc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 8012ad6:	2000      	movs	r0, #0
 8012ad8:	b005      	add	sp, #20
 8012ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012adc:	4604      	mov	r4, r0
 8012ade:	6800      	ldr	r0, [r0, #0]
 8012ae0:	1aed      	subs	r5, r5, r3
 8012ae2:	4418      	add	r0, r3
 8012ae4:	b2d6      	uxtb	r6, r2
 8012ae6:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8012aea:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8012aee:	f894 e008 	ldrb.w	lr, [r4, #8]
 8012af2:	0e12      	lsrs	r2, r2, #24
 8012af4:	f1bc 0f00 	cmp.w	ip, #0
 8012af8:	d109      	bne.n	8012b0e <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 8012afa:	f1be 0f00 	cmp.w	lr, #0
 8012afe:	d109      	bne.n	8012b14 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 8012b00:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012b04:	e9cd 6700 	strd	r6, r7, [sp]
 8012b08:	460b      	mov	r3, r1
 8012b0a:	4a0e      	ldr	r2, [pc, #56]	; (8012b44 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 8012b0c:	e008      	b.n	8012b20 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8012b0e:	f1be 0f00 	cmp.w	lr, #0
 8012b12:	d00f      	beq.n	8012b34 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 8012b14:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012b18:	460b      	mov	r3, r1
 8012b1a:	e9cd 6700 	strd	r6, r7, [sp]
 8012b1e:	4a0a      	ldr	r2, [pc, #40]	; (8012b48 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 8012b20:	4629      	mov	r1, r5
 8012b22:	f001 fa39 	bl	8013f98 <snprintf>
 8012b26:	4285      	cmp	r5, r0
 8012b28:	dbd5      	blt.n	8012ad6 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 8012b2a:	88e3      	ldrh	r3, [r4, #6]
 8012b2c:	4403      	add	r3, r0
 8012b2e:	80e3      	strh	r3, [r4, #6]
 8012b30:	2001      	movs	r0, #1
 8012b32:	e7d1      	b.n	8012ad8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 8012b34:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012b38:	e9cd 6700 	strd	r6, r7, [sp]
 8012b3c:	460b      	mov	r3, r1
 8012b3e:	4a03      	ldr	r2, [pc, #12]	; (8012b4c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 8012b40:	e7ee      	b.n	8012b20 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8012b42:	bf00      	nop
 8012b44:	08018297 	stmdaeq	r1, {r0, r1, r2, r4, r7, r9, pc}
 8012b48:	08018283 	stmdaeq	r1, {r0, r1, r7, r9, pc}
 8012b4c:	08018298 	stmdaeq	r1, {r3, r4, r7, r9, pc}

08012b50 <PropertiesBuilder::AddComment(char const*)>:
 8012b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b52:	7a06      	ldrb	r6, [r0, #8]
 8012b54:	b996      	cbnz	r6, 8012b7c <PropertiesBuilder::AddComment(char const*)+0x2c>
 8012b56:	4604      	mov	r4, r0
 8012b58:	88c0      	ldrh	r0, [r0, #6]
 8012b5a:	88a5      	ldrh	r5, [r4, #4]
 8012b5c:	42a8      	cmp	r0, r5
 8012b5e:	d20d      	bcs.n	8012b7c <PropertiesBuilder::AddComment(char const*)+0x2c>
 8012b60:	6827      	ldr	r7, [r4, #0]
 8012b62:	1a2d      	subs	r5, r5, r0
 8012b64:	460b      	mov	r3, r1
 8012b66:	4a06      	ldr	r2, [pc, #24]	; (8012b80 <PropertiesBuilder::AddComment(char const*)+0x30>)
 8012b68:	4629      	mov	r1, r5
 8012b6a:	4438      	add	r0, r7
 8012b6c:	f001 fa14 	bl	8013f98 <snprintf>
 8012b70:	4285      	cmp	r5, r0
 8012b72:	bfa1      	itttt	ge
 8012b74:	2601      	movge	r6, #1
 8012b76:	88e3      	ldrhge	r3, [r4, #6]
 8012b78:	18c0      	addge	r0, r0, r3
 8012b7a:	80e0      	strhge	r0, [r4, #6]
 8012b7c:	4630      	mov	r0, r6
 8012b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b80:	080182a8 	stmdaeq	r1, {r3, r5, r7, r9, pc}

08012b84 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>:
 8012b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b86:	88c7      	ldrh	r7, [r0, #6]
 8012b88:	8885      	ldrh	r5, [r0, #4]
 8012b8a:	9e08      	ldr	r6, [sp, #32]
 8012b8c:	42af      	cmp	r7, r5
 8012b8e:	d302      	bcc.n	8012b96 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x12>
 8012b90:	2000      	movs	r0, #0
 8012b92:	b003      	add	sp, #12
 8012b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b96:	4604      	mov	r4, r0
 8012b98:	6800      	ldr	r0, [r0, #0]
 8012b9a:	1bed      	subs	r5, r5, r7
 8012b9c:	4438      	add	r0, r7
 8012b9e:	7a27      	ldrb	r7, [r4, #8]
 8012ba0:	b92b      	cbnz	r3, 8012bae <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2a>
 8012ba2:	b92f      	cbnz	r7, 8012bb0 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2c>
 8012ba4:	e9cd 6200 	strd	r6, r2, [sp]
 8012ba8:	460b      	mov	r3, r1
 8012baa:	4a0b      	ldr	r2, [pc, #44]	; (8012bd8 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x54>)
 8012bac:	e004      	b.n	8012bb8 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x34>
 8012bae:	b16f      	cbz	r7, 8012bcc <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x48>
 8012bb0:	460b      	mov	r3, r1
 8012bb2:	e9cd 6200 	strd	r6, r2, [sp]
 8012bb6:	4a09      	ldr	r2, [pc, #36]	; (8012bdc <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x58>)
 8012bb8:	4629      	mov	r1, r5
 8012bba:	f001 f9ed 	bl	8013f98 <snprintf>
 8012bbe:	4285      	cmp	r5, r0
 8012bc0:	dbe6      	blt.n	8012b90 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xc>
 8012bc2:	88e3      	ldrh	r3, [r4, #6]
 8012bc4:	4403      	add	r3, r0
 8012bc6:	80e3      	strh	r3, [r4, #6]
 8012bc8:	2001      	movs	r0, #1
 8012bca:	e7e2      	b.n	8012b92 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xe>
 8012bcc:	e9cd 6200 	strd	r6, r2, [sp]
 8012bd0:	460b      	mov	r3, r1
 8012bd2:	4a03      	ldr	r2, [pc, #12]	; (8012be0 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x5c>)
 8012bd4:	e7f0      	b.n	8012bb8 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x34>
 8012bd6:	bf00      	nop
 8012bd8:	080182bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r9, pc}
 8012bdc:	080182b0 	stmdaeq	r1, {r4, r5, r7, r9, pc}
 8012be0:	080182be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r9, pc}

08012be4 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 8012be4:	e9c0 1200 	strd	r1, r2, [r0]
 8012be8:	4770      	bx	lr

08012bea <ReadConfigFile::~ReadConfigFile()>:
 8012bea:	4770      	bx	lr

08012bec <ReadConfigFile::Read(char const*, unsigned int)>:
 8012bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bf0:	4606      	mov	r6, r0
 8012bf2:	460d      	mov	r5, r1
 8012bf4:	4614      	mov	r4, r2
 8012bf6:	f04f 0800 	mov.w	r8, #0
 8012bfa:	b090      	sub	sp, #64	; 0x40
 8012bfc:	b33c      	cbz	r4, 8012c4e <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8012bfe:	466b      	mov	r3, sp
 8012c00:	462a      	mov	r2, r5
 8012c02:	4619      	mov	r1, r3
 8012c04:	e007      	b.n	8012c16 <ReadConfigFile::Read(char const*, unsigned int)+0x2a>
 8012c06:	f803 7b01 	strb.w	r7, [r3], #1
 8012c0a:	1a58      	subs	r0, r3, r1
 8012c0c:	283f      	cmp	r0, #63	; 0x3f
 8012c0e:	4615      	mov	r5, r2
 8012c10:	dc1d      	bgt.n	8012c4e <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8012c12:	3c01      	subs	r4, #1
 8012c14:	d00f      	beq.n	8012c36 <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 8012c16:	7817      	ldrb	r7, [r2, #0]
 8012c18:	4610      	mov	r0, r2
 8012c1a:	2f0d      	cmp	r7, #13
 8012c1c:	f102 0201 	add.w	r2, r2, #1
 8012c20:	d001      	beq.n	8012c26 <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 8012c22:	2f0a      	cmp	r7, #10
 8012c24:	d1ef      	bne.n	8012c06 <ReadConfigFile::Read(char const*, unsigned int)+0x1a>
 8012c26:	4605      	mov	r5, r0
 8012c28:	b12c      	cbz	r4, 8012c36 <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 8012c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c2e:	2a0d      	cmp	r2, #13
 8012c30:	d00b      	beq.n	8012c4a <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8012c32:	2a0a      	cmp	r2, #10
 8012c34:	d009      	beq.n	8012c4a <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8012c36:	f89d 2000 	ldrb.w	r2, [sp]
 8012c3a:	2a60      	cmp	r2, #96	; 0x60
 8012c3c:	d9de      	bls.n	8012bfc <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8012c3e:	f883 8000 	strb.w	r8, [r3]
 8012c42:	e9d6 3000 	ldrd	r3, r0, [r6]
 8012c46:	4798      	blx	r3
 8012c48:	e7d8      	b.n	8012bfc <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8012c4a:	3c01      	subs	r4, #1
 8012c4c:	e7eb      	b.n	8012c26 <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 8012c4e:	b010      	add	sp, #64	; 0x40
 8012c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012c54 <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 8012c54:	b570      	push	{r4, r5, r6, lr}
 8012c56:	4615      	mov	r5, r2
 8012c58:	461c      	mov	r4, r3
 8012c5a:	f000 f91d 	bl	8012e98 <Sscan::checkName(char const*, char const*)>
 8012c5e:	b180      	cbz	r0, 8012c82 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2e>
 8012c60:	2100      	movs	r1, #0
 8012c62:	5c43      	ldrb	r3, [r0, r1]
 8012c64:	6826      	ldr	r6, [r4, #0]
 8012c66:	b28a      	uxth	r2, r1
 8012c68:	b143      	cbz	r3, 8012c7c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 8012c6a:	42b2      	cmp	r2, r6
 8012c6c:	d303      	bcc.n	8012c76 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x22>
 8012c6e:	2b0a      	cmp	r3, #10
 8012c70:	d004      	beq.n	8012c7c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 8012c72:	2002      	movs	r0, #2
 8012c74:	e004      	b.n	8012c80 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>
 8012c76:	546b      	strb	r3, [r5, r1]
 8012c78:	3101      	adds	r1, #1
 8012c7a:	e7f2      	b.n	8012c62 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 8012c7c:	2000      	movs	r0, #0
 8012c7e:	6022      	str	r2, [r4, #0]
 8012c80:	bd70      	pop	{r4, r5, r6, pc}
 8012c82:	2001      	movs	r0, #1
 8012c84:	e7fc      	b.n	8012c80 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>

08012c86 <Sscan::Float(char const*, char const*, float&)>:
 8012c86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c8a:	4616      	mov	r6, r2
 8012c8c:	f000 f904 	bl	8012e98 <Sscan::checkName(char const*, char const*)>
 8012c90:	2800      	cmp	r0, #0
 8012c92:	d059      	beq.n	8012d48 <Sscan::Float(char const*, char const*, float&)+0xc2>
 8012c94:	4604      	mov	r4, r0
 8012c96:	7803      	ldrb	r3, [r0, #0]
 8012c98:	2b2d      	cmp	r3, #45	; 0x2d
 8012c9a:	bf08      	it	eq
 8012c9c:	3401      	addeq	r4, #1
 8012c9e:	7823      	ldrb	r3, [r4, #0]
 8012ca0:	bf0c      	ite	eq
 8012ca2:	f04f 0801 	moveq.w	r8, #1
 8012ca6:	f04f 0800 	movne.w	r8, #0
 8012caa:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8012cae:	d103      	bne.n	8012cb8 <Sscan::Float(char const*, char const*, float&)+0x32>
 8012cb0:	2702      	movs	r7, #2
 8012cb2:	4638      	mov	r0, r7
 8012cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cb8:	2000      	movs	r0, #0
 8012cba:	220a      	movs	r2, #10
 8012cbc:	7823      	ldrb	r3, [r4, #0]
 8012cbe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012cc2:	2909      	cmp	r1, #9
 8012cc4:	d8f4      	bhi.n	8012cb0 <Sscan::Float(char const*, char const*, float&)+0x2a>
 8012cc6:	fb02 3000 	mla	r0, r2, r0, r3
 8012cca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012cce:	3830      	subs	r0, #48	; 0x30
 8012cd0:	2b2e      	cmp	r3, #46	; 0x2e
 8012cd2:	d002      	beq.n	8012cda <Sscan::Float(char const*, char const*, float&)+0x54>
 8012cd4:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8012cd8:	d1f0      	bne.n	8012cbc <Sscan::Float(char const*, char const*, float&)+0x36>
 8012cda:	f7f5 f9f1 	bl	80080c0 <__aeabi_ui2f>
 8012cde:	6030      	str	r0, [r6, #0]
 8012ce0:	7823      	ldrb	r3, [r4, #0]
 8012ce2:	4605      	mov	r5, r0
 8012ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8012ce6:	d008      	beq.n	8012cfa <Sscan::Float(char const*, char const*, float&)+0x74>
 8012ce8:	f1b8 0f00 	cmp.w	r8, #0
 8012cec:	d101      	bne.n	8012cf2 <Sscan::Float(char const*, char const*, float&)+0x6c>
 8012cee:	2700      	movs	r7, #0
 8012cf0:	e7df      	b.n	8012cb2 <Sscan::Float(char const*, char const*, float&)+0x2c>
 8012cf2:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 8012cf6:	6035      	str	r5, [r6, #0]
 8012cf8:	e7f9      	b.n	8012cee <Sscan::Float(char const*, char const*, float&)+0x68>
 8012cfa:	f04f 0901 	mov.w	r9, #1
 8012cfe:	2000      	movs	r0, #0
 8012d00:	220a      	movs	r2, #10
 8012d02:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012d06:	f013 07df 	ands.w	r7, r3, #223	; 0xdf
 8012d0a:	d111      	bne.n	8012d30 <Sscan::Float(char const*, char const*, float&)+0xaa>
 8012d0c:	f7f5 f9d8 	bl	80080c0 <__aeabi_ui2f>
 8012d10:	4604      	mov	r4, r0
 8012d12:	4648      	mov	r0, r9
 8012d14:	f7f5 f9d4 	bl	80080c0 <__aeabi_ui2f>
 8012d18:	4601      	mov	r1, r0
 8012d1a:	4620      	mov	r0, r4
 8012d1c:	f7f5 fadc 	bl	80082d8 <__aeabi_fdiv>
 8012d20:	4629      	mov	r1, r5
 8012d22:	f7f5 f91d 	bl	8007f60 <__addsf3>
 8012d26:	f1b8 0f00 	cmp.w	r8, #0
 8012d2a:	d109      	bne.n	8012d40 <Sscan::Float(char const*, char const*, float&)+0xba>
 8012d2c:	6030      	str	r0, [r6, #0]
 8012d2e:	e7de      	b.n	8012cee <Sscan::Float(char const*, char const*, float&)+0x68>
 8012d30:	3b30      	subs	r3, #48	; 0x30
 8012d32:	2b09      	cmp	r3, #9
 8012d34:	d8bc      	bhi.n	8012cb0 <Sscan::Float(char const*, char const*, float&)+0x2a>
 8012d36:	fb02 3000 	mla	r0, r2, r0, r3
 8012d3a:	fb02 f909 	mul.w	r9, r2, r9
 8012d3e:	e7e0      	b.n	8012d02 <Sscan::Float(char const*, char const*, float&)+0x7c>
 8012d40:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8012d44:	6030      	str	r0, [r6, #0]
 8012d46:	e7b4      	b.n	8012cb2 <Sscan::Float(char const*, char const*, float&)+0x2c>
 8012d48:	2701      	movs	r7, #1
 8012d4a:	e7b2      	b.n	8012cb2 <Sscan::Float(char const*, char const*, float&)+0x2c>

08012d4c <Sscan::HexUint16(char const*, char const*, unsigned short&)>:
 8012d4c:	b570      	push	{r4, r5, r6, lr}
 8012d4e:	4616      	mov	r6, r2
 8012d50:	f000 f8a2 	bl	8012e98 <Sscan::checkName(char const*, char const*)>
 8012d54:	bb08      	cbnz	r0, 8012d9a <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x4e>
 8012d56:	2001      	movs	r0, #1
 8012d58:	bd70      	pop	{r4, r5, r6, pc}
 8012d5a:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 8012d5e:	2d09      	cmp	r5, #9
 8012d60:	d904      	bls.n	8012d6c <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x20>
 8012d62:	f041 0220 	orr.w	r2, r1, #32
 8012d66:	3a61      	subs	r2, #97	; 0x61
 8012d68:	2a05      	cmp	r2, #5
 8012d6a:	d8f4      	bhi.n	8012d56 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xa>
 8012d6c:	2939      	cmp	r1, #57	; 0x39
 8012d6e:	bf83      	ittte	hi
 8012d70:	f041 0120 	orrhi.w	r1, r1, #32
 8012d74:	3957      	subhi	r1, #87	; 0x57
 8012d76:	b2c9      	uxtbhi	r1, r1
 8012d78:	b2e9      	uxtbls	r1, r5
 8012d7a:	ea41 1404 	orr.w	r4, r1, r4, lsl #4
 8012d7e:	b2a4      	uxth	r4, r4
 8012d80:	3301      	adds	r3, #1
 8012d82:	8034      	strh	r4, [r6, #0]
 8012d84:	5cc1      	ldrb	r1, [r0, r3]
 8012d86:	b119      	cbz	r1, 8012d90 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x44>
 8012d88:	2b04      	cmp	r3, #4
 8012d8a:	d1e6      	bne.n	8012d5a <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xe>
 8012d8c:	2920      	cmp	r1, #32
 8012d8e:	d1e2      	bne.n	8012d56 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xa>
 8012d90:	1f18      	subs	r0, r3, #4
 8012d92:	bf18      	it	ne
 8012d94:	2001      	movne	r0, #1
 8012d96:	0040      	lsls	r0, r0, #1
 8012d98:	e7de      	b.n	8012d58 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xc>
 8012d9a:	2400      	movs	r4, #0
 8012d9c:	4623      	mov	r3, r4
 8012d9e:	e7f0      	b.n	8012d82 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x36>

08012da0 <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 8012da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012da2:	4615      	mov	r5, r2
 8012da4:	f000 f878 	bl	8012e98 <Sscan::checkName(char const*, char const*)>
 8012da8:	bb58      	cbnz	r0, 8012e02 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x62>
 8012daa:	2001      	movs	r0, #1
 8012dac:	e027      	b.n	8012dfe <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 8012dae:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8012db2:	2b09      	cmp	r3, #9
 8012db4:	d822      	bhi.n	8012dfc <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8012db6:	4603      	mov	r3, r0
 8012db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012dbc:	3930      	subs	r1, #48	; 0x30
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012dc4:	2a2e      	cmp	r2, #46	; 0x2e
 8012dc6:	d115      	bne.n	8012df4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 8012dc8:	29ff      	cmp	r1, #255	; 0xff
 8012dca:	d817      	bhi.n	8012dfc <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8012dcc:	3401      	adds	r4, #1
 8012dce:	2c03      	cmp	r4, #3
 8012dd0:	f806 1b01 	strb.w	r1, [r6], #1
 8012dd4:	d119      	bne.n	8012e0a <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6a>
 8012dd6:	2400      	movs	r4, #0
 8012dd8:	260a      	movs	r6, #10
 8012dda:	1d1a      	adds	r2, r3, #4
 8012ddc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8012de0:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8012de4:	d115      	bne.n	8012e12 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x72>
 8012de6:	2cff      	cmp	r4, #255	; 0xff
 8012de8:	d808      	bhi.n	8012dfc <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8012dea:	f88d 4007 	strb.w	r4, [sp, #7]
 8012dee:	9b01      	ldr	r3, [sp, #4]
 8012df0:	602b      	str	r3, [r5, #0]
 8012df2:	e004      	b.n	8012dfe <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 8012df4:	2a00      	cmp	r2, #0
 8012df6:	d0e7      	beq.n	8012dc8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8012df8:	42b8      	cmp	r0, r7
 8012dfa:	d1d8      	bne.n	8012dae <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xe>
 8012dfc:	2002      	movs	r0, #2
 8012dfe:	b003      	add	sp, #12
 8012e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e02:	2400      	movs	r4, #0
 8012e04:	f04f 0c0a 	mov.w	ip, #10
 8012e08:	ae01      	add	r6, sp, #4
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	2100      	movs	r1, #0
 8012e0e:	1d07      	adds	r7, r0, #4
 8012e10:	e7d5      	b.n	8012dbe <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x1e>
 8012e12:	4293      	cmp	r3, r2
 8012e14:	d0f2      	beq.n	8012dfc <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8012e16:	3930      	subs	r1, #48	; 0x30
 8012e18:	2909      	cmp	r1, #9
 8012e1a:	d8ef      	bhi.n	8012dfc <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8012e1c:	fb06 1404 	mla	r4, r6, r4, r1
 8012e20:	e7dc      	b.n	8012ddc <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x3c>

08012e22 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 8012e22:	b538      	push	{r3, r4, r5, lr}
 8012e24:	4615      	mov	r5, r2
 8012e26:	f000 f837 	bl	8012e98 <Sscan::checkName(char const*, char const*)>
 8012e2a:	b1a0      	cbz	r0, 8012e56 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 8012e2c:	4604      	mov	r4, r0
 8012e2e:	2100      	movs	r1, #0
 8012e30:	220a      	movs	r2, #10
 8012e32:	7823      	ldrb	r3, [r4, #0]
 8012e34:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8012e38:	2809      	cmp	r0, #9
 8012e3a:	d80e      	bhi.n	8012e5a <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8012e3c:	fb02 3101 	mla	r1, r2, r1, r3
 8012e40:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012e44:	3930      	subs	r1, #48	; 0x30
 8012e46:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8012e4a:	d1f2      	bne.n	8012e32 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x10>
 8012e4c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8012e50:	d203      	bcs.n	8012e5a <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8012e52:	8029      	strh	r1, [r5, #0]
 8012e54:	bd38      	pop	{r3, r4, r5, pc}
 8012e56:	2001      	movs	r0, #1
 8012e58:	e7fc      	b.n	8012e54 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 8012e5a:	2002      	movs	r0, #2
 8012e5c:	e7fa      	b.n	8012e54 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

08012e5e <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 8012e5e:	b538      	push	{r3, r4, r5, lr}
 8012e60:	4615      	mov	r5, r2
 8012e62:	f000 f819 	bl	8012e98 <Sscan::checkName(char const*, char const*)>
 8012e66:	b198      	cbz	r0, 8012e90 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 8012e68:	4604      	mov	r4, r0
 8012e6a:	2100      	movs	r1, #0
 8012e6c:	220a      	movs	r2, #10
 8012e6e:	7823      	ldrb	r3, [r4, #0]
 8012e70:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8012e74:	2809      	cmp	r0, #9
 8012e76:	d80d      	bhi.n	8012e94 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8012e78:	fb02 3101 	mla	r1, r2, r1, r3
 8012e7c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012e80:	3930      	subs	r1, #48	; 0x30
 8012e82:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8012e86:	d1f2      	bne.n	8012e6e <Sscan::Uint8(char const*, char const*, unsigned char&)+0x10>
 8012e88:	29ff      	cmp	r1, #255	; 0xff
 8012e8a:	d803      	bhi.n	8012e94 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8012e8c:	7029      	strb	r1, [r5, #0]
 8012e8e:	bd38      	pop	{r3, r4, r5, pc}
 8012e90:	2001      	movs	r0, #1
 8012e92:	e7fc      	b.n	8012e8e <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 8012e94:	2002      	movs	r0, #2
 8012e96:	e7fa      	b.n	8012e8e <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

08012e98 <Sscan::checkName(char const*, char const*)>:
 8012e98:	4603      	mov	r3, r0
 8012e9a:	b510      	push	{r4, lr}
 8012e9c:	3901      	subs	r1, #1
 8012e9e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012ea2:	461c      	mov	r4, r3
 8012ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ea8:	b120      	cbz	r0, 8012eb4 <Sscan::checkName(char const*, char const*)+0x1c>
 8012eaa:	b10a      	cbz	r2, 8012eb0 <Sscan::checkName(char const*, char const*)+0x18>
 8012eac:	4290      	cmp	r0, r2
 8012eae:	d0f6      	beq.n	8012e9e <Sscan::checkName(char const*, char const*)+0x6>
 8012eb0:	2000      	movs	r0, #0
 8012eb2:	e006      	b.n	8012ec2 <Sscan::checkName(char const*, char const*)+0x2a>
 8012eb4:	2a3d      	cmp	r2, #61	; 0x3d
 8012eb6:	d104      	bne.n	8012ec2 <Sscan::checkName(char const*, char const*)+0x2a>
 8012eb8:	7860      	ldrb	r0, [r4, #1]
 8012eba:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 8012ebe:	d000      	beq.n	8012ec2 <Sscan::checkName(char const*, char const*)+0x2a>
 8012ec0:	1c60      	adds	r0, r4, #1
 8012ec2:	bd10      	pop	{r4, pc}

08012ec4 <LightSet::GetDmxStartAddress()>:
 8012ec4:	2001      	movs	r0, #1
 8012ec6:	4770      	bx	lr

08012ec8 <LightSet::GetDmxFootprint()>:
 8012ec8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012ecc:	4770      	bx	lr

08012ece <LightSet::SetDmxStartAddress(unsigned short)>:
 8012ece:	2000      	movs	r0, #0
 8012ed0:	4770      	bx	lr

08012ed2 <LightSet::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	2001      	movs	r0, #1
 8012ed6:	7093      	strb	r3, [r2, #2]
 8012ed8:	8010      	strh	r0, [r2, #0]
 8012eda:	4770      	bx	lr

08012edc <Display::PrintInfo() [clone .isra.0]>:
 8012edc:	b910      	cbnz	r0, 8012ee4 <Display::PrintInfo() [clone .isra.0]+0x8>
 8012ede:	4803      	ldr	r0, [pc, #12]	; (8012eec <Display::PrintInfo() [clone .isra.0]+0x10>)
 8012ee0:	f001 b882 	b.w	8013fe8 <puts>
 8012ee4:	6803      	ldr	r3, [r0, #0]
 8012ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ee8:	4718      	bx	r3
 8012eea:	bf00      	nop
 8012eec:	080183bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, r9, pc}

08012ef0 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8012ef0:	b513      	push	{r0, r1, r4, lr}
 8012ef2:	4604      	mov	r4, r0
 8012ef4:	0a13      	lsrs	r3, r2, #8
 8012ef6:	7800      	ldrb	r0, [r0, #0]
 8012ef8:	f88d 1004 	strb.w	r1, [sp, #4]
 8012efc:	f88d 3005 	strb.w	r3, [sp, #5]
 8012f00:	f88d 2006 	strb.w	r2, [sp, #6]
 8012f04:	f002 f92e 	bl	8015164 <gd32_i2c_set_address(unsigned char)>
 8012f08:	6860      	ldr	r0, [r4, #4]
 8012f0a:	f002 f923 	bl	8015154 <gd32_i2c_set_baudrate(unsigned int)>
 8012f0e:	2103      	movs	r1, #3
 8012f10:	a801      	add	r0, sp, #4
 8012f12:	f002 f92d 	bl	8015170 <gd32_i2c_write(char const*, unsigned int)>
 8012f16:	b002      	add	sp, #8
 8012f18:	bd10      	pop	{r4, pc}

08012f1a <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 8012f1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012f1c:	460d      	mov	r5, r1
 8012f1e:	4604      	mov	r4, r0
 8012f20:	f002 f920 	bl	8015164 <gd32_i2c_set_address(unsigned char)>
 8012f24:	4628      	mov	r0, r5
 8012f26:	f002 f915 	bl	8015154 <gd32_i2c_set_baudrate(unsigned int)>
 8012f2a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012f2e:	2b07      	cmp	r3, #7
 8012f30:	d902      	bls.n	8012f38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 8012f32:	3c50      	subs	r4, #80	; 0x50
 8012f34:	2c0f      	cmp	r4, #15
 8012f36:	d809      	bhi.n	8012f4c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 8012f38:	2101      	movs	r1, #1
 8012f3a:	f10d 0007 	add.w	r0, sp, #7
 8012f3e:	f002 f97d 	bl	801523c <gd32_i2c_read(char*, unsigned int)>
 8012f42:	fab0 f080 	clz	r0, r0
 8012f46:	0940      	lsrs	r0, r0, #5
 8012f48:	b003      	add	sp, #12
 8012f4a:	bd30      	pop	{r4, r5, pc}
 8012f4c:	2100      	movs	r1, #0
 8012f4e:	4608      	mov	r0, r1
 8012f50:	f002 f90e 	bl	8015170 <gd32_i2c_write(char const*, unsigned int)>
 8012f54:	e7f5      	b.n	8012f42 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

08012f56 <Display::Detect7Segment()>:
 8012f56:	b538      	push	{r3, r4, r5, lr}
 8012f58:	68c1      	ldr	r1, [r0, #12]
 8012f5a:	4604      	mov	r4, r0
 8012f5c:	7a00      	ldrb	r0, [r0, #8]
 8012f5e:	f7ff ffdc 	bl	8012f1a <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 8012f62:	7460      	strb	r0, [r4, #17]
 8012f64:	b170      	cbz	r0, 8012f84 <Display::Detect7Segment()+0x2e>
 8012f66:	2200      	movs	r2, #0
 8012f68:	f104 0508 	add.w	r5, r4, #8
 8012f6c:	4611      	mov	r1, r2
 8012f6e:	4628      	mov	r0, r5
 8012f70:	f7ff ffbe 	bl	8012ef0 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8012f74:	7c63      	ldrb	r3, [r4, #17]
 8012f76:	b12b      	cbz	r3, 8012f84 <Display::Detect7Segment()+0x2e>
 8012f78:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8012f7c:	2112      	movs	r1, #18
 8012f7e:	4628      	mov	r0, r5
 8012f80:	f7ff ffb6 	bl	8012ef0 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8012f84:	bd38      	pop	{r3, r4, r5, pc}

08012f86 <Display::Detect(display::Type)>:
 8012f86:	2902      	cmp	r1, #2
 8012f88:	b538      	push	{r3, r4, r5, lr}
 8012f8a:	4604      	mov	r4, r0
 8012f8c:	d014      	beq.n	8012fb8 <Display::Detect(display::Type)+0x32>
 8012f8e:	2904      	cmp	r1, #4
 8012f90:	d01b      	beq.n	8012fca <Display::Detect(display::Type)+0x44>
 8012f92:	69a0      	ldr	r0, [r4, #24]
 8012f94:	b168      	cbz	r0, 8012fb2 <Display::Detect(display::Type)+0x2c>
 8012f96:	6803      	ldr	r3, [r0, #0]
 8012f98:	689b      	ldr	r3, [r3, #8]
 8012f9a:	4798      	blx	r3
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	69a0      	ldr	r0, [r4, #24]
 8012fa0:	b9ab      	cbnz	r3, 8012fce <Display::Detect(display::Type)+0x48>
 8012fa2:	b110      	cbz	r0, 8012faa <Display::Detect(display::Type)+0x24>
 8012fa4:	6803      	ldr	r3, [r0, #0]
 8012fa6:	685b      	ldr	r3, [r3, #4]
 8012fa8:	4798      	blx	r3
 8012faa:	2300      	movs	r3, #0
 8012fac:	61a3      	str	r3, [r4, #24]
 8012fae:	2304      	movs	r3, #4
 8012fb0:	6023      	str	r3, [r4, #0]
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	6163      	str	r3, [r4, #20]
 8012fb6:	e010      	b.n	8012fda <Display::Detect(display::Type)+0x54>
 8012fb8:	2018      	movs	r0, #24
 8012fba:	f000 fbd1 	bl	8013760 <operator new(unsigned int)>
 8012fbe:	4605      	mov	r5, r0
 8012fc0:	2100      	movs	r1, #0
 8012fc2:	f000 f89d 	bl	8013100 <Ssd1306::Ssd1306(TOledPanel)>
 8012fc6:	61a5      	str	r5, [r4, #24]
 8012fc8:	e7e3      	b.n	8012f92 <Display::Detect(display::Type)+0xc>
 8012fca:	6001      	str	r1, [r0, #0]
 8012fcc:	e7e1      	b.n	8012f92 <Display::Detect(display::Type)+0xc>
 8012fce:	6803      	ldr	r3, [r0, #0]
 8012fd0:	68db      	ldr	r3, [r3, #12]
 8012fd2:	4798      	blx	r3
 8012fd4:	69a3      	ldr	r3, [r4, #24]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d0eb      	beq.n	8012fb2 <Display::Detect(display::Type)+0x2c>
 8012fda:	bd38      	pop	{r3, r4, r5, pc}

08012fdc <Display::Display()>:
 8012fdc:	2304      	movs	r3, #4
 8012fde:	b510      	push	{r4, lr}
 8012fe0:	6003      	str	r3, [r0, #0]
 8012fe2:	4b0f      	ldr	r3, [pc, #60]	; (8013020 <Display::Display()+0x44>)
 8012fe4:	4604      	mov	r4, r0
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	4a0e      	ldr	r2, [pc, #56]	; (8013024 <Display::Display()+0x48>)
 8012fea:	6043      	str	r3, [r0, #4]
 8012fec:	2321      	movs	r3, #33	; 0x21
 8012fee:	7203      	strb	r3, [r0, #8]
 8012ff0:	4b0d      	ldr	r3, [pc, #52]	; (8013028 <Display::Display()+0x4c>)
 8012ff2:	2102      	movs	r1, #2
 8012ff4:	60c3      	str	r3, [r0, #12]
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8012ffc:	8203      	strh	r3, [r0, #16]
 8012ffe:	4b0b      	ldr	r3, [pc, #44]	; (801302c <Display::Display()+0x50>)
 8013000:	6018      	str	r0, [r3, #0]
 8013002:	f7ff ffc0 	bl	8012f86 <Display::Detect(display::Type)>
 8013006:	4620      	mov	r0, r4
 8013008:	f7ff ffa5 	bl	8012f56 <Display::Detect7Segment()>
 801300c:	69a3      	ldr	r3, [r4, #24]
 801300e:	b10b      	cbz	r3, 8013014 <Display::Display()+0x38>
 8013010:	f7f5 fbfc 	bl	800880c <display::timeout::gpio_init()>
 8013014:	69a0      	ldr	r0, [r4, #24]
 8013016:	f7ff ff61 	bl	8012edc <Display::PrintInfo() [clone .isra.0]>
 801301a:	4620      	mov	r0, r4
 801301c:	bd10      	pop	{r4, pc}
 801301e:	bf00      	nop
 8013020:	2000a734 	andcs	sl, r0, r4, lsr r7
 8013024:	000493e0 	andeq	r9, r4, r0, ror #7
 8013028:	00061a80 	andeq	r1, r6, r0, lsl #21
 801302c:	2000a62c 	andcs	sl, r0, ip, lsr #12

08013030 <Ssd1306::~Ssd1306()>:
 8013030:	4770      	bx	lr

08013032 <Ssd1306::SetCursor(unsigned int)>:
 8013032:	4770      	bx	lr

08013034 <Ssd1306::PrintInfo()>:
 8013034:	b410      	push	{r4}
 8013036:	4906      	ldr	r1, [pc, #24]	; (8013050 <Ssd1306::PrintInfo()+0x1c>)
 8013038:	7c44      	ldrb	r4, [r0, #17]
 801303a:	7903      	ldrb	r3, [r0, #4]
 801303c:	7942      	ldrb	r2, [r0, #5]
 801303e:	4805      	ldr	r0, [pc, #20]	; (8013054 <Ssd1306::PrintInfo()+0x20>)
 8013040:	2c00      	cmp	r4, #0
 8013042:	bf08      	it	eq
 8013044:	4601      	moveq	r1, r0
 8013046:	4804      	ldr	r0, [pc, #16]	; (8013058 <Ssd1306::PrintInfo()+0x24>)
 8013048:	bc10      	pop	{r4}
 801304a:	f000 bf7d 	b.w	8013f48 <printf>
 801304e:	bf00      	nop
 8013050:	080183ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, r9, pc}
 8013054:	080183d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, r9, pc}
 8013058:	080183dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, r9, pc}

0801305c <Ssd1306::~Ssd1306()>:
 801305c:	b510      	push	{r4, lr}
 801305e:	4604      	mov	r4, r0
 8013060:	f000 fb7a 	bl	8013758 <operator delete(void*)>
 8013064:	4620      	mov	r0, r4
 8013066:	bd10      	pop	{r4, pc}

08013068 <HAL_I2C::Setup()>:
 8013068:	b510      	push	{r4, lr}
 801306a:	4604      	mov	r4, r0
 801306c:	7800      	ldrb	r0, [r0, #0]
 801306e:	f002 f879 	bl	8015164 <gd32_i2c_set_address(unsigned char)>
 8013072:	6860      	ldr	r0, [r4, #4]
 8013074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013078:	f002 b86c 	b.w	8015154 <gd32_i2c_set_baudrate(unsigned int)>

0801307c <Ssd1306::PutChar(int)>:
 801307c:	b510      	push	{r4, lr}
 801307e:	f1a1 0420 	sub.w	r4, r1, #32
 8013082:	2c5f      	cmp	r4, #95	; 0x5f
 8013084:	bf88      	it	hi
 8013086:	2400      	movhi	r4, #0
 8013088:	3008      	adds	r0, #8
 801308a:	f7ff ffed 	bl	8013068 <HAL_I2C::Setup()>
 801308e:	4804      	ldr	r0, [pc, #16]	; (80130a0 <Ssd1306::PutChar(int)+0x24>)
 8013090:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8013094:	4420      	add	r0, r4
 8013096:	2107      	movs	r1, #7
 8013098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801309c:	f002 b868 	b.w	8015170 <gd32_i2c_write(char const*, unsigned int)>
 80130a0:	080183f0 	stmdaeq	r1, {r4, r5, r6, r7, r8, r9, pc}

080130a4 <Ssd1306::PutString(char const*)>:
 80130a4:	b538      	push	{r3, r4, r5, lr}
 80130a6:	4605      	mov	r5, r0
 80130a8:	1e4c      	subs	r4, r1, #1
 80130aa:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80130ae:	b901      	cbnz	r1, 80130b2 <Ssd1306::PutString(char const*)+0xe>
 80130b0:	bd38      	pop	{r3, r4, r5, pc}
 80130b2:	4628      	mov	r0, r5
 80130b4:	f7ff ffe2 	bl	801307c <Ssd1306::PutChar(int)>
 80130b8:	e7f7      	b.n	80130aa <Ssd1306::PutString(char const*)+0x6>

080130ba <Ssd1306::Text(char const*, unsigned int)>:
 80130ba:	b570      	push	{r4, r5, r6, lr}
 80130bc:	7903      	ldrb	r3, [r0, #4]
 80130be:	4605      	mov	r5, r0
 80130c0:	460c      	mov	r4, r1
 80130c2:	4293      	cmp	r3, r2
 80130c4:	bf94      	ite	ls
 80130c6:	18ce      	addls	r6, r1, r3
 80130c8:	188e      	addhi	r6, r1, r2
 80130ca:	42b4      	cmp	r4, r6
 80130cc:	d100      	bne.n	80130d0 <Ssd1306::Text(char const*, unsigned int)+0x16>
 80130ce:	bd70      	pop	{r4, r5, r6, pc}
 80130d0:	4628      	mov	r0, r5
 80130d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130d6:	f7ff ffd1 	bl	801307c <Ssd1306::PutChar(int)>
 80130da:	e7f6      	b.n	80130ca <Ssd1306::Text(char const*, unsigned int)+0x10>

080130dc <Ssd1306::InitMembers()>:
 80130dc:	7c03      	ldrb	r3, [r0, #16]
 80130de:	b14b      	cbz	r3, 80130f4 <Ssd1306::InitMembers()+0x18>
 80130e0:	3b01      	subs	r3, #1
 80130e2:	2b01      	cmp	r3, #1
 80130e4:	d909      	bls.n	80130fa <Ssd1306::InitMembers()+0x1e>
 80130e6:	2308      	movs	r3, #8
 80130e8:	2204      	movs	r2, #4
 80130ea:	2115      	movs	r1, #21
 80130ec:	7143      	strb	r3, [r0, #5]
 80130ee:	7101      	strb	r1, [r0, #4]
 80130f0:	6142      	str	r2, [r0, #20]
 80130f2:	4770      	bx	lr
 80130f4:	2308      	movs	r3, #8
 80130f6:	461a      	mov	r2, r3
 80130f8:	e7f7      	b.n	80130ea <Ssd1306::InitMembers()+0xe>
 80130fa:	2304      	movs	r3, #4
 80130fc:	e7fb      	b.n	80130f6 <Ssd1306::InitMembers()+0x1a>
	...

08013100 <Ssd1306::Ssd1306(TOledPanel)>:
 8013100:	4a08      	ldr	r2, [pc, #32]	; (8013124 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8013102:	b508      	push	{r3, lr}
 8013104:	6002      	str	r2, [r0, #0]
 8013106:	227f      	movs	r2, #127	; 0x7f
 8013108:	80c2      	strh	r2, [r0, #6]
 801310a:	223c      	movs	r2, #60	; 0x3c
 801310c:	7202      	strb	r2, [r0, #8]
 801310e:	4a06      	ldr	r2, [pc, #24]	; (8013128 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8013110:	7401      	strb	r1, [r0, #16]
 8013112:	60c2      	str	r2, [r0, #12]
 8013114:	2200      	movs	r2, #0
 8013116:	7442      	strb	r2, [r0, #17]
 8013118:	4a04      	ldr	r2, [pc, #16]	; (801312c <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 801311a:	6010      	str	r0, [r2, #0]
 801311c:	f7ff ffde 	bl	80130dc <Ssd1306::InitMembers()>
 8013120:	bd08      	pop	{r3, pc}
 8013122:	bf00      	nop
 8013124:	080186c8 	stmdaeq	r1, {r3, r6, r7, r9, sl, pc}
 8013128:	00061a80 	andeq	r1, r6, r0, lsl #21
 801312c:	2000a6b8 			; <UNDEFINED> instruction: 0x2000a6b8

08013130 <Ssd1306::SendCommand(unsigned char)>:
 8013130:	2300      	movs	r3, #0
 8013132:	b507      	push	{r0, r1, r2, lr}
 8013134:	3008      	adds	r0, #8
 8013136:	f88d 3004 	strb.w	r3, [sp, #4]
 801313a:	f88d 1005 	strb.w	r1, [sp, #5]
 801313e:	f7ff ff93 	bl	8013068 <HAL_I2C::Setup()>
 8013142:	2102      	movs	r1, #2
 8013144:	a801      	add	r0, sp, #4
 8013146:	f002 f813 	bl	8015170 <gd32_i2c_write(char const*, unsigned int)>
 801314a:	b003      	add	sp, #12
 801314c:	f85d fb04 	ldr.w	pc, [sp], #4

08013150 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 8013150:	2914      	cmp	r1, #20
 8013152:	b570      	push	{r4, r5, r6, lr}
 8013154:	4605      	mov	r5, r0
 8013156:	4616      	mov	r6, r2
 8013158:	d81c      	bhi.n	8013194 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 801315a:	7943      	ldrb	r3, [r0, #5]
 801315c:	4293      	cmp	r3, r2
 801315e:	d919      	bls.n	8013194 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8013160:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013164:	7c43      	ldrb	r3, [r0, #17]
 8013166:	004c      	lsls	r4, r1, #1
 8013168:	b2e4      	uxtb	r4, r4
 801316a:	b10b      	cbz	r3, 8013170 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 801316c:	3404      	adds	r4, #4
 801316e:	b2e4      	uxtb	r4, r4
 8013170:	4628      	mov	r0, r5
 8013172:	f004 010e 	and.w	r1, r4, #14
 8013176:	f7ff ffdb 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 801317a:	0921      	lsrs	r1, r4, #4
 801317c:	4628      	mov	r0, r5
 801317e:	f041 0110 	orr.w	r1, r1, #16
 8013182:	f7ff ffd5 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 8013186:	4628      	mov	r0, r5
 8013188:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 801318c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013190:	f7ff bfce 	b.w	8013130 <Ssd1306::SendCommand(unsigned char)>
 8013194:	bd70      	pop	{r4, r5, r6, pc}

08013196 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 8013196:	b570      	push	{r4, r5, r6, lr}
 8013198:	4604      	mov	r4, r0
 801319a:	4615      	mov	r5, r2
 801319c:	461e      	mov	r6, r3
 801319e:	b171      	cbz	r1, 80131be <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 80131a0:	7943      	ldrb	r3, [r0, #5]
 80131a2:	428b      	cmp	r3, r1
 80131a4:	d30b      	bcc.n	80131be <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 80131a6:	3901      	subs	r1, #1
 80131a8:	b2ca      	uxtb	r2, r1
 80131aa:	2100      	movs	r1, #0
 80131ac:	f7ff ffd0 	bl	8013150 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80131b0:	4632      	mov	r2, r6
 80131b2:	4629      	mov	r1, r5
 80131b4:	4620      	mov	r0, r4
 80131b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80131ba:	f7ff bf7e 	b.w	80130ba <Ssd1306::Text(char const*, unsigned int)>
 80131be:	bd70      	pop	{r4, r5, r6, pc}

080131c0 <Ssd1306::ClearLine(unsigned char)>:
 80131c0:	b538      	push	{r3, r4, r5, lr}
 80131c2:	4605      	mov	r5, r0
 80131c4:	b1b9      	cbz	r1, 80131f6 <Ssd1306::ClearLine(unsigned char)+0x36>
 80131c6:	7943      	ldrb	r3, [r0, #5]
 80131c8:	428b      	cmp	r3, r1
 80131ca:	d314      	bcc.n	80131f6 <Ssd1306::ClearLine(unsigned char)+0x36>
 80131cc:	3901      	subs	r1, #1
 80131ce:	b2cc      	uxtb	r4, r1
 80131d0:	4622      	mov	r2, r4
 80131d2:	2100      	movs	r1, #0
 80131d4:	f7ff ffbc 	bl	8013150 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80131d8:	f105 0008 	add.w	r0, r5, #8
 80131dc:	f7ff ff44 	bl	8013068 <HAL_I2C::Setup()>
 80131e0:	2181      	movs	r1, #129	; 0x81
 80131e2:	4805      	ldr	r0, [pc, #20]	; (80131f8 <Ssd1306::ClearLine(unsigned char)+0x38>)
 80131e4:	f001 ffc4 	bl	8015170 <gd32_i2c_write(char const*, unsigned int)>
 80131e8:	4622      	mov	r2, r4
 80131ea:	4628      	mov	r0, r5
 80131ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131f0:	2100      	movs	r1, #0
 80131f2:	f7ff bfad 	b.w	8013150 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80131f6:	bd38      	pop	{r3, r4, r5, pc}
 80131f8:	2000a630 	andcs	sl, r0, r0, lsr r6

080131fc <Ssd1306::SetSleep(bool)>:
 80131fc:	b111      	cbz	r1, 8013204 <Ssd1306::SetSleep(bool)+0x8>
 80131fe:	21ae      	movs	r1, #174	; 0xae
 8013200:	f7ff bf96 	b.w	8013130 <Ssd1306::SendCommand(unsigned char)>
 8013204:	21af      	movs	r1, #175	; 0xaf
 8013206:	e7fb      	b.n	8013200 <Ssd1306::SetSleep(bool)+0x4>

08013208 <Ssd1306::SetContrast(unsigned char)>:
 8013208:	b538      	push	{r3, r4, r5, lr}
 801320a:	4604      	mov	r4, r0
 801320c:	460d      	mov	r5, r1
 801320e:	7181      	strb	r1, [r0, #6]
 8013210:	2181      	movs	r1, #129	; 0x81
 8013212:	f7ff ff8d 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 8013216:	4629      	mov	r1, r5
 8013218:	4620      	mov	r0, r4
 801321a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801321e:	f7ff bf87 	b.w	8013130 <Ssd1306::SendCommand(unsigned char)>

08013222 <Ssd1306::SetFlipVertically(bool)>:
 8013222:	b510      	push	{r4, lr}
 8013224:	4604      	mov	r4, r0
 8013226:	71c1      	strb	r1, [r0, #7]
 8013228:	b141      	cbz	r1, 801323c <Ssd1306::SetFlipVertically(bool)+0x1a>
 801322a:	21c0      	movs	r1, #192	; 0xc0
 801322c:	f7ff ff80 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 8013230:	21a0      	movs	r1, #160	; 0xa0
 8013232:	4620      	mov	r0, r4
 8013234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013238:	f7ff bf7a 	b.w	8013130 <Ssd1306::SendCommand(unsigned char)>
 801323c:	21c8      	movs	r1, #200	; 0xc8
 801323e:	f7ff ff77 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 8013242:	21a1      	movs	r1, #161	; 0xa1
 8013244:	e7f5      	b.n	8013232 <Ssd1306::SetFlipVertically(bool)+0x10>
	...

08013248 <Ssd1306::CheckSH1106()>:
 8013248:	b570      	push	{r4, r5, r6, lr}
 801324a:	4604      	mov	r4, r0
 801324c:	b086      	sub	sp, #24
 801324e:	2100      	movs	r1, #0
 8013250:	f7ff ff6e 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 8013254:	2190      	movs	r1, #144	; 0x90
 8013256:	4620      	mov	r0, r4
 8013258:	f7ff ff6a 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 801325c:	21b0      	movs	r1, #176	; 0xb0
 801325e:	4620      	mov	r0, r4
 8013260:	f7ff ff66 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 8013264:	4b22      	ldr	r3, [pc, #136]	; (80132f0 <Ssd1306::CheckSH1106()+0xa8>)
 8013266:	f104 0608 	add.w	r6, r4, #8
 801326a:	6818      	ldr	r0, [r3, #0]
 801326c:	791b      	ldrb	r3, [r3, #4]
 801326e:	ad02      	add	r5, sp, #8
 8013270:	9002      	str	r0, [sp, #8]
 8013272:	4630      	mov	r0, r6
 8013274:	712b      	strb	r3, [r5, #4]
 8013276:	f7ff fef7 	bl	8013068 <HAL_I2C::Setup()>
 801327a:	2105      	movs	r1, #5
 801327c:	4628      	mov	r0, r5
 801327e:	f001 ff77 	bl	8015170 <gd32_i2c_write(char const*, unsigned int)>
 8013282:	2100      	movs	r1, #0
 8013284:	4620      	mov	r0, r4
 8013286:	f7ff ff53 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 801328a:	2190      	movs	r1, #144	; 0x90
 801328c:	4620      	mov	r0, r4
 801328e:	f7ff ff4f 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 8013292:	21b0      	movs	r1, #176	; 0xb0
 8013294:	4620      	mov	r0, r4
 8013296:	f7ff ff4b 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 801329a:	2300      	movs	r3, #0
 801329c:	9304      	str	r3, [sp, #16]
 801329e:	f88d 3014 	strb.w	r3, [sp, #20]
 80132a2:	2340      	movs	r3, #64	; 0x40
 80132a4:	4630      	mov	r0, r6
 80132a6:	f88d 3007 	strb.w	r3, [sp, #7]
 80132aa:	f7ff fedd 	bl	8013068 <HAL_I2C::Setup()>
 80132ae:	2101      	movs	r1, #1
 80132b0:	f10d 0007 	add.w	r0, sp, #7
 80132b4:	f001 ff5c 	bl	8015170 <gd32_i2c_write(char const*, unsigned int)>
 80132b8:	4630      	mov	r0, r6
 80132ba:	f7ff fed5 	bl	8013068 <HAL_I2C::Setup()>
 80132be:	2105      	movs	r1, #5
 80132c0:	a804      	add	r0, sp, #16
 80132c2:	f001 ffbb 	bl	801523c <gd32_i2c_read(char*, unsigned int)>
 80132c6:	2201      	movs	r2, #1
 80132c8:	5cab      	ldrb	r3, [r5, r2]
 80132ca:	a904      	add	r1, sp, #16
 80132cc:	3201      	adds	r2, #1
 80132ce:	4411      	add	r1, r2
 80132d0:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 80132d4:	428b      	cmp	r3, r1
 80132d6:	d006      	beq.n	80132e6 <Ssd1306::CheckSH1106()+0x9e>
 80132d8:	1a5b      	subs	r3, r3, r1
 80132da:	fab3 f383 	clz	r3, r3
 80132de:	095b      	lsrs	r3, r3, #5
 80132e0:	7463      	strb	r3, [r4, #17]
 80132e2:	b006      	add	sp, #24
 80132e4:	bd70      	pop	{r4, r5, r6, pc}
 80132e6:	2a05      	cmp	r2, #5
 80132e8:	d1ee      	bne.n	80132c8 <Ssd1306::CheckSH1106()+0x80>
 80132ea:	2300      	movs	r3, #0
 80132ec:	e7f5      	b.n	80132da <Ssd1306::CheckSH1106()+0x92>
 80132ee:	bf00      	nop
 80132f0:	080183e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, pc}

080132f4 <Ssd1306::Cls()>:
 80132f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132f8:	4604      	mov	r4, r0
 80132fa:	2600      	movs	r6, #0
 80132fc:	7c45      	ldrb	r5, [r0, #17]
 80132fe:	00ad      	lsls	r5, r5, #2
 8013300:	b2ed      	uxtb	r5, r5
 8013302:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 8013306:	f045 0810 	orr.w	r8, r5, #16
 801330a:	b2ff      	uxtb	r7, r7
 801330c:	6963      	ldr	r3, [r4, #20]
 801330e:	4629      	mov	r1, r5
 8013310:	42b3      	cmp	r3, r6
 8013312:	4620      	mov	r0, r4
 8013314:	d80b      	bhi.n	801332e <Ssd1306::Cls()+0x3a>
 8013316:	f7ff ff0b 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 801331a:	4641      	mov	r1, r8
 801331c:	4620      	mov	r0, r4
 801331e:	f7ff ff07 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 8013322:	4620      	mov	r0, r4
 8013324:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013328:	21b0      	movs	r1, #176	; 0xb0
 801332a:	f7ff bf01 	b.w	8013130 <Ssd1306::SendCommand(unsigned char)>
 801332e:	f7ff feff 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 8013332:	4641      	mov	r1, r8
 8013334:	4620      	mov	r0, r4
 8013336:	f7ff fefb 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 801333a:	f066 014f 	orn	r1, r6, #79	; 0x4f
 801333e:	4620      	mov	r0, r4
 8013340:	b2c9      	uxtb	r1, r1
 8013342:	f7ff fef5 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 8013346:	7c23      	ldrb	r3, [r4, #16]
 8013348:	b123      	cbz	r3, 8013354 <Ssd1306::Cls()+0x60>
 801334a:	3b01      	subs	r3, #1
 801334c:	2b01      	cmp	r3, #1
 801334e:	d901      	bls.n	8013354 <Ssd1306::Cls()+0x60>
 8013350:	3601      	adds	r6, #1
 8013352:	e7db      	b.n	801330c <Ssd1306::Cls()+0x18>
 8013354:	f104 0008 	add.w	r0, r4, #8
 8013358:	f7ff fe86 	bl	8013068 <HAL_I2C::Setup()>
 801335c:	4639      	mov	r1, r7
 801335e:	4802      	ldr	r0, [pc, #8]	; (8013368 <Ssd1306::Cls()+0x74>)
 8013360:	f001 ff06 	bl	8015170 <gd32_i2c_write(char const*, unsigned int)>
 8013364:	e7f4      	b.n	8013350 <Ssd1306::Cls()+0x5c>
 8013366:	bf00      	nop
 8013368:	2000a630 	andcs	sl, r0, r0, lsr r6

0801336c <Ssd1306::Start()>:
 801336c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801336e:	7a04      	ldrb	r4, [r0, #8]
 8013370:	68c6      	ldr	r6, [r0, #12]
 8013372:	4605      	mov	r5, r0
 8013374:	4620      	mov	r0, r4
 8013376:	f001 fef5 	bl	8015164 <gd32_i2c_set_address(unsigned char)>
 801337a:	4630      	mov	r0, r6
 801337c:	f001 feea 	bl	8015154 <gd32_i2c_set_baudrate(unsigned int)>
 8013380:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013384:	2b07      	cmp	r3, #7
 8013386:	d902      	bls.n	801338e <Ssd1306::Start()+0x22>
 8013388:	3c50      	subs	r4, #80	; 0x50
 801338a:	2c0f      	cmp	r4, #15
 801338c:	d80f      	bhi.n	80133ae <Ssd1306::Start()+0x42>
 801338e:	2101      	movs	r1, #1
 8013390:	f10d 0007 	add.w	r0, sp, #7
 8013394:	f001 ff52 	bl	801523c <gd32_i2c_read(char*, unsigned int)>
 8013398:	fab0 f480 	clz	r4, r0
 801339c:	0964      	lsrs	r4, r4, #5
 801339e:	b35c      	cbz	r4, 80133f8 <Ssd1306::Start()+0x8c>
 80133a0:	7c2e      	ldrb	r6, [r5, #16]
 80133a2:	b14e      	cbz	r6, 80133b8 <Ssd1306::Start()+0x4c>
 80133a4:	3e01      	subs	r6, #1
 80133a6:	2e01      	cmp	r6, #1
 80133a8:	d929      	bls.n	80133fe <Ssd1306::Start()+0x92>
 80133aa:	2400      	movs	r4, #0
 80133ac:	e024      	b.n	80133f8 <Ssd1306::Start()+0x8c>
 80133ae:	2100      	movs	r1, #0
 80133b0:	4608      	mov	r0, r1
 80133b2:	f001 fedd 	bl	8015170 <gd32_i2c_write(char const*, unsigned int)>
 80133b6:	e7ef      	b.n	8013398 <Ssd1306::Start()+0x2c>
 80133b8:	4f16      	ldr	r7, [pc, #88]	; (8013414 <Ssd1306::Start()+0xa8>)
 80133ba:	4628      	mov	r0, r5
 80133bc:	f817 1b01 	ldrb.w	r1, [r7], #1
 80133c0:	3601      	adds	r6, #1
 80133c2:	f7ff feb5 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 80133c6:	2e18      	cmp	r6, #24
 80133c8:	d1f7      	bne.n	80133ba <Ssd1306::Start()+0x4e>
 80133ca:	2300      	movs	r3, #0
 80133cc:	4a12      	ldr	r2, [pc, #72]	; (8013418 <Ssd1306::Start()+0xac>)
 80133ce:	4618      	mov	r0, r3
 80133d0:	4611      	mov	r1, r2
 80133d2:	3301      	adds	r3, #1
 80133d4:	2b86      	cmp	r3, #134	; 0x86
 80133d6:	f802 0b01 	strb.w	r0, [r2], #1
 80133da:	d1fa      	bne.n	80133d2 <Ssd1306::Start()+0x66>
 80133dc:	2340      	movs	r3, #64	; 0x40
 80133de:	4628      	mov	r0, r5
 80133e0:	700b      	strb	r3, [r1, #0]
 80133e2:	f7ff ff31 	bl	8013248 <Ssd1306::CheckSH1106()>
 80133e6:	4628      	mov	r0, r5
 80133e8:	f7ff ff84 	bl	80132f4 <Ssd1306::Cls()>
 80133ec:	21af      	movs	r1, #175	; 0xaf
 80133ee:	4628      	mov	r0, r5
 80133f0:	f7ff fe9e 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 80133f4:	2301      	movs	r3, #1
 80133f6:	71eb      	strb	r3, [r5, #7]
 80133f8:	4620      	mov	r0, r4
 80133fa:	b003      	add	sp, #12
 80133fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133fe:	2600      	movs	r6, #0
 8013400:	4f06      	ldr	r7, [pc, #24]	; (801341c <Ssd1306::Start()+0xb0>)
 8013402:	4628      	mov	r0, r5
 8013404:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013408:	3601      	adds	r6, #1
 801340a:	f7ff fe91 	bl	8013130 <Ssd1306::SendCommand(unsigned char)>
 801340e:	2e18      	cmp	r6, #24
 8013410:	d1f7      	bne.n	8013402 <Ssd1306::Start()+0x96>
 8013412:	e7da      	b.n	80133ca <Ssd1306::Start()+0x5e>
 8013414:	080186a8 	stmdaeq	r1, {r3, r5, r7, r9, sl, pc}
 8013418:	2000a630 	andcs	sl, r0, r0, lsr r6
 801341c:	08018690 	stmdaeq	r1, {r4, r7, r9, sl, pc}

08013420 <console_putc>:
 8013420:	f000 bee4 	b.w	80141ec <uart0_putc>

08013424 <console_puts>:
 8013424:	f000 bf02 	b.w	801422c <uart0_puts>

08013428 <console_set_fg_color>:
 8013428:	2807      	cmp	r0, #7
 801342a:	d810      	bhi.n	801344e <console_set_fg_color+0x26>
 801342c:	e8df f000 	tbb	[pc, r0]
 8013430:	0b090704 	bleq	8255048 <__exidx_end+0x23c84c>
 8013434:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 8013400 <Ssd1306::Start()+0x94>
 8013438:	4806      	ldr	r0, [pc, #24]	; (8013454 <console_set_fg_color+0x2c>)
 801343a:	f000 bef7 	b.w	801422c <uart0_puts>
 801343e:	4806      	ldr	r0, [pc, #24]	; (8013458 <console_set_fg_color+0x30>)
 8013440:	e7fb      	b.n	801343a <console_set_fg_color+0x12>
 8013442:	4806      	ldr	r0, [pc, #24]	; (801345c <console_set_fg_color+0x34>)
 8013444:	e7f9      	b.n	801343a <console_set_fg_color+0x12>
 8013446:	4806      	ldr	r0, [pc, #24]	; (8013460 <console_set_fg_color+0x38>)
 8013448:	e7f7      	b.n	801343a <console_set_fg_color+0x12>
 801344a:	4806      	ldr	r0, [pc, #24]	; (8013464 <console_set_fg_color+0x3c>)
 801344c:	e7f5      	b.n	801343a <console_set_fg_color+0x12>
 801344e:	4806      	ldr	r0, [pc, #24]	; (8013468 <console_set_fg_color+0x40>)
 8013450:	e7f3      	b.n	801343a <console_set_fg_color+0x12>
 8013452:	bf00      	nop
 8013454:	08018706 	stmdaeq	r1, {r1, r2, r8, r9, sl, pc}
 8013458:	0801870c 	stmdaeq	r1, {r2, r3, r8, r9, sl, pc}
 801345c:	08018712 	stmdaeq	r1, {r1, r4, r8, r9, sl, pc}
 8013460:	08018718 	stmdaeq	r1, {r3, r4, r8, r9, sl, pc}
 8013464:	080164ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, sl, sp, lr}
 8013468:	0801871e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, sl, pc}

0801346c <console_error>:
 801346c:	b510      	push	{r4, lr}
 801346e:	4604      	mov	r4, r0
 8013470:	4805      	ldr	r0, [pc, #20]	; (8013488 <console_error+0x1c>)
 8013472:	f000 fedb 	bl	801422c <uart0_puts>
 8013476:	4620      	mov	r0, r4
 8013478:	f000 fed8 	bl	801422c <uart0_puts>
 801347c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013480:	4802      	ldr	r0, [pc, #8]	; (801348c <console_error+0x20>)
 8013482:	f000 bed3 	b.w	801422c <uart0_puts>
 8013486:	bf00      	nop
 8013488:	0801870c 	stmdaeq	r1, {r2, r3, r8, r9, sl, pc}
 801348c:	080164ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, sl, sp, lr}

08013490 <console_status>:
 8013490:	b510      	push	{r4, lr}
 8013492:	460c      	mov	r4, r1
 8013494:	b280      	uxth	r0, r0
 8013496:	f7ff ffc7 	bl	8013428 <console_set_fg_color>
 801349a:	4807      	ldr	r0, [pc, #28]	; (80134b8 <console_status+0x28>)
 801349c:	f000 fec6 	bl	801422c <uart0_puts>
 80134a0:	4620      	mov	r0, r4
 80134a2:	f000 fec3 	bl	801422c <uart0_puts>
 80134a6:	200a      	movs	r0, #10
 80134a8:	f000 fea0 	bl	80141ec <uart0_putc>
 80134ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134b0:	4802      	ldr	r0, [pc, #8]	; (80134bc <console_status+0x2c>)
 80134b2:	f000 bebb 	b.w	801422c <uart0_puts>
 80134b6:	bf00      	nop
 80134b8:	08018700 	stmdaeq	r1, {r8, r9, sl, pc}
 80134bc:	080164ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, sl, sp, lr}

080134c0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 80134c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134c4:	4617      	mov	r7, r2
 80134c6:	461e      	mov	r6, r3
 80134c8:	4d14      	ldr	r5, [pc, #80]	; (801351c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 80134ca:	4b15      	ldr	r3, [pc, #84]	; (8013520 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 80134cc:	b086      	sub	sp, #24
 80134ce:	6018      	str	r0, [r3, #0]
 80134d0:	4604      	mov	r4, r0
 80134d2:	f105 0803 	add.w	r8, r5, #3
 80134d6:	2203      	movs	r2, #3
 80134d8:	4628      	mov	r0, r5
 80134da:	f000 fa00 	bl	80138de <memmove>
 80134de:	4639      	mov	r1, r7
 80134e0:	220b      	movs	r2, #11
 80134e2:	4640      	mov	r0, r8
 80134e4:	f000 f9fb 	bl	80138de <memmove>
 80134e8:	f105 030e 	add.w	r3, r5, #14
 80134ec:	4631      	mov	r1, r6
 80134ee:	2208      	movs	r2, #8
 80134f0:	4618      	mov	r0, r3
 80134f2:	f000 f9f4 	bl	80138de <memmove>
 80134f6:	2308      	movs	r3, #8
 80134f8:	e9cd 8303 	strd	r8, r3, [sp, #12]
 80134fc:	230b      	movs	r3, #11
 80134fe:	9302      	str	r3, [sp, #8]
 8013500:	4b08      	ldr	r3, [pc, #32]	; (8013524 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8013502:	9005      	str	r0, [sp, #20]
 8013504:	e9cd 5300 	strd	r5, r3, [sp]
 8013508:	213f      	movs	r1, #63	; 0x3f
 801350a:	2303      	movs	r3, #3
 801350c:	4a06      	ldr	r2, [pc, #24]	; (8013528 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 801350e:	4807      	ldr	r0, [pc, #28]	; (801352c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8013510:	f000 fd42 	bl	8013f98 <snprintf>
 8013514:	4620      	mov	r0, r4
 8013516:	b006      	add	sp, #24
 8013518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801351c:	2000a6bc 			; <UNDEFINED> instruction: 0x2000a6bc
 8013520:	2000a714 	andcs	sl, r0, r4, lsl r7
 8013524:	0801662f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, sl, sp, lr}
 8013528:	08018724 	stmdaeq	r1, {r2, r5, r8, r9, sl, pc}
 801352c:	2000a6d2 	ldrdcs	sl, [r0], -r2

08013530 <FirmwareVersion::Print(char const*)>:
 8013530:	b510      	push	{r4, lr}
 8013532:	460c      	mov	r4, r1
 8013534:	4804      	ldr	r0, [pc, #16]	; (8013548 <FirmwareVersion::Print(char const*)+0x18>)
 8013536:	f000 fd57 	bl	8013fe8 <puts>
 801353a:	b124      	cbz	r4, 8013546 <FirmwareVersion::Print(char const*)+0x16>
 801353c:	4620      	mov	r0, r4
 801353e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013542:	f000 bd51 	b.w	8013fe8 <puts>
 8013546:	bd10      	pop	{r4, pc}
 8013548:	2000a6d2 	ldrdcs	sl, [r0], -r2

0801354c <LedBlink::LedBlink()>:
 801354c:	b538      	push	{r3, r4, r5, lr}
 801354e:	2205      	movs	r2, #5
 8013550:	2300      	movs	r3, #0
 8013552:	e9c0 3200 	strd	r3, r2, [r0]
 8013556:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801355a:	6083      	str	r3, [r0, #8]
 801355c:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8013560:	6143      	str	r3, [r0, #20]
 8013562:	4b09      	ldr	r3, [pc, #36]	; (8013588 <LedBlink::LedBlink()+0x3c>)
 8013564:	4d09      	ldr	r5, [pc, #36]	; (801358c <LedBlink::LedBlink()+0x40>)
 8013566:	4604      	mov	r4, r0
 8013568:	6018      	str	r0, [r3, #0]
 801356a:	f240 6004 	movw	r0, #1540	; 0x604
 801356e:	f001 f8c9 	bl	8014704 <rcu_periph_clock_enable>
 8013572:	4628      	mov	r0, r5
 8013574:	2301      	movs	r3, #1
 8013576:	2203      	movs	r2, #3
 8013578:	2110      	movs	r1, #16
 801357a:	f001 f82b 	bl	80145d4 <gpio_init>
 801357e:	2301      	movs	r3, #1
 8013580:	4620      	mov	r0, r4
 8013582:	616b      	str	r3, [r5, #20]
 8013584:	bd38      	pop	{r3, r4, r5, pc}
 8013586:	bf00      	nop
 8013588:	2000a718 	andcs	sl, r0, r8, lsl r7
 801358c:	40011000 	andmi	r1, r1, r0

08013590 <LedBlink::SetMode(ledblink::Mode)>:
 8013590:	6843      	ldr	r3, [r0, #4]
 8013592:	428b      	cmp	r3, r1
 8013594:	d02f      	beq.n	80135f6 <LedBlink::SetMode(ledblink::Mode)+0x66>
 8013596:	6041      	str	r1, [r0, #4]
 8013598:	2904      	cmp	r1, #4
 801359a:	d822      	bhi.n	80135e2 <LedBlink::SetMode(ledblink::Mode)+0x52>
 801359c:	e8df f001 	tbb	[pc, r1]
 80135a0:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 80135a4:	23ff001d 	mvnscs	r0, #29
 80135a8:	6003      	str	r3, [r0, #0]
 80135aa:	2300      	movs	r3, #0
 80135ac:	2201      	movs	r2, #1
 80135ae:	60c3      	str	r3, [r0, #12]
 80135b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80135b4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80135b8:	611a      	str	r2, [r3, #16]
 80135ba:	6880      	ldr	r0, [r0, #8]
 80135bc:	b1d8      	cbz	r0, 80135f6 <LedBlink::SetMode(ledblink::Mode)+0x66>
 80135be:	6803      	ldr	r3, [r0, #0]
 80135c0:	689b      	ldr	r3, [r3, #8]
 80135c2:	4718      	bx	r3
 80135c4:	2301      	movs	r3, #1
 80135c6:	6003      	str	r3, [r0, #0]
 80135c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80135cc:	60c3      	str	r3, [r0, #12]
 80135ce:	e7f4      	b.n	80135ba <LedBlink::SetMode(ledblink::Mode)+0x2a>
 80135d0:	2303      	movs	r3, #3
 80135d2:	6003      	str	r3, [r0, #0]
 80135d4:	f240 134d 	movw	r3, #333	; 0x14d
 80135d8:	e7f8      	b.n	80135cc <LedBlink::SetMode(ledblink::Mode)+0x3c>
 80135da:	2305      	movs	r3, #5
 80135dc:	6003      	str	r3, [r0, #0]
 80135de:	23c8      	movs	r3, #200	; 0xc8
 80135e0:	e7f4      	b.n	80135cc <LedBlink::SetMode(ledblink::Mode)+0x3c>
 80135e2:	2300      	movs	r3, #0
 80135e4:	2201      	movs	r2, #1
 80135e6:	6003      	str	r3, [r0, #0]
 80135e8:	60c3      	str	r3, [r0, #12]
 80135ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80135ee:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80135f2:	615a      	str	r2, [r3, #20]
 80135f4:	e7e1      	b.n	80135ba <LedBlink::SetMode(ledblink::Mode)+0x2a>
 80135f6:	4770      	bx	lr

080135f8 <Hardware::Hardware()>:
 80135f8:	b570      	push	{r4, r5, r6, lr}
 80135fa:	2400      	movs	r4, #0
 80135fc:	4b26      	ldr	r3, [pc, #152]	; (8013698 <Hardware::Hardware()+0xa0>)
 80135fe:	b090      	sub	sp, #64	; 0x40
 8013600:	6004      	str	r4, [r0, #0]
 8013602:	7104      	strb	r4, [r0, #4]
 8013604:	6018      	str	r0, [r3, #0]
 8013606:	4605      	mov	r5, r0
 8013608:	f7f3 ffa6 	bl	8007558 <console_init>
 801360c:	f000 fe1e 	bl	801424c <systick_config>
 8013610:	f002 f81e 	bl	8015650 <udelay_init()>
 8013614:	f001 ffce 	bl	80155b4 <micros_init()>
 8013618:	f240 701b 	movw	r0, #1819	; 0x71b
 801361c:	f001 f872 	bl	8014704 <rcu_periph_clock_enable>
 8013620:	f240 701c 	movw	r0, #1820	; 0x71c
 8013624:	f001 f86e 	bl	8014704 <rcu_periph_clock_enable>
 8013628:	4e1c      	ldr	r6, [pc, #112]	; (801369c <Hardware::Hardware()+0xa4>)
 801362a:	f001 f863 	bl	80146f4 <pmu_backup_write_enable>
 801362e:	f000 feb1 	bl	8014394 <bkp_deinit>
 8013632:	4621      	mov	r1, r4
 8013634:	2002      	movs	r0, #2
 8013636:	f000 feb5 	bl	80143a4 <bkp_data_write>
 801363a:	f240 7004 	movw	r0, #1796	; 0x704
 801363e:	f001 f861 	bl	8014704 <rcu_periph_clock_enable>
 8013642:	4630      	mov	r0, r6
 8013644:	f001 f9d2 	bl	80149ec <timer_deinit>
 8013648:	2377      	movs	r3, #119	; 0x77
 801364a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801364e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013652:	a903      	add	r1, sp, #12
 8013654:	4630      	mov	r0, r6
 8013656:	9305      	str	r3, [sp, #20]
 8013658:	f001 fa6e 	bl	8014b38 <timer_init>
 801365c:	4630      	mov	r0, r6
 801365e:	f001 fac3 	bl	8014be8 <timer_enable>
 8013662:	f001 fce9 	bl	8015038 <gd32_adc_init()>
 8013666:	2213      	movs	r2, #19
 8013668:	2302      	movs	r3, #2
 801366a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801366e:	237a      	movs	r3, #122	; 0x7a
 8013670:	a807      	add	r0, sp, #28
 8013672:	930c      	str	r3, [sp, #48]	; 0x30
 8013674:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8013678:	9407      	str	r4, [sp, #28]
 801367a:	940f      	str	r4, [sp, #60]	; 0x3c
 801367c:	f000 fd0c 	bl	8014098 <mktime>
 8013680:	4621      	mov	r1, r4
 8013682:	e9cd 0401 	strd	r0, r4, [sp, #4]
 8013686:	a801      	add	r0, sp, #4
 8013688:	f000 fd7c 	bl	8014184 <settimeofday>
 801368c:	f001 fd2e 	bl	80150ec <gd32_i2c_begin()>
 8013690:	4628      	mov	r0, r5
 8013692:	b010      	add	sp, #64	; 0x40
 8013694:	bd70      	pop	{r4, r5, r6, pc}
 8013696:	bf00      	nop
 8013698:	2000a71c 	andcs	sl, r0, ip, lsl r7
 801369c:	40001000 	andmi	r1, r0, r0

080136a0 <Hardware::GetUuid(unsigned char*)>:
 80136a0:	4a0c      	ldr	r2, [pc, #48]	; (80136d4 <Hardware::GetUuid(unsigned char*)+0x34>)
 80136a2:	b084      	sub	sp, #16
 80136a4:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 80136a8:	9300      	str	r3, [sp, #0]
 80136aa:	f8d2 07ec 	ldr.w	r0, [r2, #2028]	; 0x7ec
 80136ae:	9001      	str	r0, [sp, #4]
 80136b0:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 80136b4:	4403      	add	r3, r0
 80136b6:	4413      	add	r3, r2
 80136b8:	9202      	str	r2, [sp, #8]
 80136ba:	466a      	mov	r2, sp
 80136bc:	9303      	str	r3, [sp, #12]
 80136be:	1e4b      	subs	r3, r1, #1
 80136c0:	310f      	adds	r1, #15
 80136c2:	428b      	cmp	r3, r1
 80136c4:	d101      	bne.n	80136ca <Hardware::GetUuid(unsigned char*)+0x2a>
 80136c6:	b004      	add	sp, #16
 80136c8:	4770      	bx	lr
 80136ca:	f812 0b01 	ldrb.w	r0, [r2], #1
 80136ce:	f803 0f01 	strb.w	r0, [r3, #1]!
 80136d2:	e7f6      	b.n	80136c2 <Hardware::GetUuid(unsigned char*)+0x22>
 80136d4:	1ffff000 	svcne	0x00fff000

080136d8 <Hardware::SetTime(tm const*)>:
 80136d8:	2000      	movs	r0, #0
 80136da:	4770      	bx	lr

080136dc <Hardware::Reboot()>:
 80136dc:	b508      	push	{r3, lr}
 80136de:	6803      	ldr	r3, [r0, #0]
 80136e0:	4604      	mov	r4, r0
 80136e2:	b153      	cbz	r3, 80136fa <Hardware::Reboot()+0x1e>
 80136e4:	2300      	movs	r3, #0
 80136e6:	2104      	movs	r1, #4
 80136e8:	7103      	strb	r3, [r0, #4]
 80136ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80136ee:	f000 ff47 	bl	8014580 <fwdgt_config>
 80136f2:	6820      	ldr	r0, [r4, #0]
 80136f4:	6803      	ldr	r3, [r0, #0]
 80136f6:	689b      	ldr	r3, [r3, #8]
 80136f8:	4798      	blx	r3
 80136fa:	2102      	movs	r1, #2
 80136fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013700:	f000 ff3e 	bl	8014580 <fwdgt_config>
 8013704:	2801      	cmp	r0, #1
 8013706:	bf0c      	ite	eq
 8013708:	2301      	moveq	r3, #1
 801370a:	2300      	movne	r3, #0
 801370c:	7123      	strb	r3, [r4, #4]
 801370e:	d101      	bne.n	8013714 <Hardware::Reboot()+0x38>
 8013710:	f000 ff26 	bl	8014560 <fwdgt_enable>
 8013714:	2208      	movs	r2, #8
 8013716:	4b0d      	ldr	r3, [pc, #52]	; (801374c <Hardware::Reboot()+0x70>)
 8013718:	2501      	movs	r5, #1
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	480c      	ldr	r0, [pc, #48]	; (8013750 <Hardware::Reboot()+0x74>)
 801371e:	601a      	str	r2, [r3, #0]
 8013720:	227d      	movs	r2, #125	; 0x7d
 8013722:	490c      	ldr	r1, [pc, #48]	; (8013754 <Hardware::Reboot()+0x78>)
 8013724:	60da      	str	r2, [r3, #12]
 8013726:	68dc      	ldr	r4, [r3, #12]
 8013728:	b904      	cbnz	r4, 801372c <Hardware::Reboot()+0x50>
 801372a:	e7fe      	b.n	801372a <Hardware::Reboot()+0x4e>
 801372c:	6802      	ldr	r2, [r0, #0]
 801372e:	695e      	ldr	r6, [r3, #20]
 8013730:	1b92      	subs	r2, r2, r6
 8013732:	4294      	cmp	r4, r2
 8013734:	d8f8      	bhi.n	8013728 <Hardware::Reboot()+0x4c>
 8013736:	6802      	ldr	r2, [r0, #0]
 8013738:	615a      	str	r2, [r3, #20]
 801373a:	691a      	ldr	r2, [r3, #16]
 801373c:	2a01      	cmp	r2, #1
 801373e:	f082 0401 	eor.w	r4, r2, #1
 8013742:	611c      	str	r4, [r3, #16]
 8013744:	bf14      	ite	ne
 8013746:	610d      	strne	r5, [r1, #16]
 8013748:	614a      	streq	r2, [r1, #20]
 801374a:	e7ec      	b.n	8013726 <Hardware::Reboot()+0x4a>
 801374c:	2000a718 	andcs	sl, r0, r8, lsl r7
 8013750:	2000a734 	andcs	sl, r0, r4, lsr r7
 8013754:	40011000 	andmi	r1, r1, r0

08013758 <operator delete(void*)>:
 8013758:	f000 b890 	b.w	801387c <free>

0801375c <operator delete[](void*)>:
 801375c:	f000 b88e 	b.w	801387c <free>

08013760 <operator new(unsigned int)>:
 8013760:	f000 b842 	b.w	80137e8 <malloc>

08013764 <operator new[](unsigned int)>:
 8013764:	f000 b840 	b.w	80137e8 <malloc>

08013768 <inet_aton>:
 8013768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801376a:	f04f 0c0a 	mov.w	ip, #10
 801376e:	2500      	movs	r5, #0
 8013770:	ae01      	add	r6, sp, #4
 8013772:	4603      	mov	r3, r0
 8013774:	2200      	movs	r2, #0
 8013776:	1d07      	adds	r7, r0, #4
 8013778:	e007      	b.n	801378a <inet_aton+0x22>
 801377a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801377e:	2b09      	cmp	r3, #9
 8013780:	d820      	bhi.n	80137c4 <inet_aton+0x5c>
 8013782:	4603      	mov	r3, r0
 8013784:	fb0c 4202 	mla	r2, ip, r2, r4
 8013788:	3a30      	subs	r2, #48	; 0x30
 801378a:	4618      	mov	r0, r3
 801378c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8013790:	2c2e      	cmp	r4, #46	; 0x2e
 8013792:	d111      	bne.n	80137b8 <inet_aton+0x50>
 8013794:	3501      	adds	r5, #1
 8013796:	2d03      	cmp	r5, #3
 8013798:	f806 2b01 	strb.w	r2, [r6], #1
 801379c:	d1e9      	bne.n	8013772 <inet_aton+0xa>
 801379e:	2200      	movs	r2, #0
 80137a0:	250a      	movs	r5, #10
 80137a2:	1d1c      	adds	r4, r3, #4
 80137a4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80137a8:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 80137ac:	d10d      	bne.n	80137ca <inet_aton+0x62>
 80137ae:	f88d 2007 	strb.w	r2, [sp, #7]
 80137b2:	b9b1      	cbnz	r1, 80137e2 <inet_aton+0x7a>
 80137b4:	2001      	movs	r0, #1
 80137b6:	e006      	b.n	80137c6 <inet_aton+0x5e>
 80137b8:	2c00      	cmp	r4, #0
 80137ba:	d0eb      	beq.n	8013794 <inet_aton+0x2c>
 80137bc:	2c0a      	cmp	r4, #10
 80137be:	d0e9      	beq.n	8013794 <inet_aton+0x2c>
 80137c0:	42b8      	cmp	r0, r7
 80137c2:	d1da      	bne.n	801377a <inet_aton+0x12>
 80137c4:	2000      	movs	r0, #0
 80137c6:	b003      	add	sp, #12
 80137c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137ca:	280a      	cmp	r0, #10
 80137cc:	d0ef      	beq.n	80137ae <inet_aton+0x46>
 80137ce:	42a3      	cmp	r3, r4
 80137d0:	d0f8      	beq.n	80137c4 <inet_aton+0x5c>
 80137d2:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 80137d6:	2e09      	cmp	r6, #9
 80137d8:	d8f4      	bhi.n	80137c4 <inet_aton+0x5c>
 80137da:	fb05 0202 	mla	r2, r5, r2, r0
 80137de:	3a30      	subs	r2, #48	; 0x30
 80137e0:	e7e0      	b.n	80137a4 <inet_aton+0x3c>
 80137e2:	9b01      	ldr	r3, [sp, #4]
 80137e4:	600b      	str	r3, [r1, #0]
 80137e6:	e7e5      	b.n	80137b4 <inet_aton+0x4c>

080137e8 <malloc>:
 80137e8:	b538      	push	{r3, r4, r5, lr}
 80137ea:	4604      	mov	r4, r0
 80137ec:	4601      	mov	r1, r0
 80137ee:	481c      	ldr	r0, [pc, #112]	; (8013860 <malloc+0x78>)
 80137f0:	f000 fbaa 	bl	8013f48 <printf>
 80137f4:	b17c      	cbz	r4, 8013816 <malloc+0x2e>
 80137f6:	4b1b      	ldr	r3, [pc, #108]	; (8013864 <malloc+0x7c>)
 80137f8:	6818      	ldr	r0, [r3, #0]
 80137fa:	b978      	cbnz	r0, 801381c <malloc+0x34>
 80137fc:	4a1a      	ldr	r2, [pc, #104]	; (8013868 <malloc+0x80>)
 80137fe:	f104 031b 	add.w	r3, r4, #27
 8013802:	6811      	ldr	r1, [r2, #0]
 8013804:	4819      	ldr	r0, [pc, #100]	; (801386c <malloc+0x84>)
 8013806:	f023 030f 	bic.w	r3, r3, #15
 801380a:	440b      	add	r3, r1
 801380c:	4283      	cmp	r3, r0
 801380e:	d921      	bls.n	8013854 <malloc+0x6c>
 8013810:	4817      	ldr	r0, [pc, #92]	; (8013870 <malloc+0x88>)
 8013812:	f000 fb99 	bl	8013f48 <printf>
 8013816:	2500      	movs	r5, #0
 8013818:	4628      	mov	r0, r5
 801381a:	bd38      	pop	{r3, r4, r5, pc}
 801381c:	4284      	cmp	r4, r0
 801381e:	d80a      	bhi.n	8013836 <malloc+0x4e>
 8013820:	685a      	ldr	r2, [r3, #4]
 8013822:	6899      	ldr	r1, [r3, #8]
 8013824:	3201      	adds	r2, #1
 8013826:	428a      	cmp	r2, r1
 8013828:	605a      	str	r2, [r3, #4]
 801382a:	d900      	bls.n	801382e <malloc+0x46>
 801382c:	609a      	str	r2, [r3, #8]
 801382e:	68d9      	ldr	r1, [r3, #12]
 8013830:	b919      	cbnz	r1, 801383a <malloc+0x52>
 8013832:	4604      	mov	r4, r0
 8013834:	e7e2      	b.n	80137fc <malloc+0x14>
 8013836:	3310      	adds	r3, #16
 8013838:	e7de      	b.n	80137f8 <malloc+0x10>
 801383a:	4604      	mov	r4, r0
 801383c:	688a      	ldr	r2, [r1, #8]
 801383e:	60da      	str	r2, [r3, #12]
 8013840:	2300      	movs	r3, #0
 8013842:	f101 050c 	add.w	r5, r1, #12
 8013846:	608b      	str	r3, [r1, #8]
 8013848:	4622      	mov	r2, r4
 801384a:	462b      	mov	r3, r5
 801384c:	4809      	ldr	r0, [pc, #36]	; (8013874 <malloc+0x8c>)
 801384e:	f000 fb7b 	bl	8013f48 <printf>
 8013852:	e7e1      	b.n	8013818 <malloc+0x30>
 8013854:	6013      	str	r3, [r2, #0]
 8013856:	4b08      	ldr	r3, [pc, #32]	; (8013878 <malloc+0x90>)
 8013858:	e9c1 3400 	strd	r3, r4, [r1]
 801385c:	e7f0      	b.n	8013840 <malloc+0x58>
 801385e:	bf00      	nop
 8013860:	08018748 	stmdaeq	r1, {r3, r6, r8, r9, sl, pc}
 8013864:	20000024 	andcs	r0, r0, r4, lsr #32
 8013868:	20000020 	andcs	r0, r0, r0, lsr #32
 801386c:	2003d800 	andcs	sp, r3, r0, lsl #16
 8013870:	08018754 	stmdaeq	r1, {r2, r4, r6, r8, r9, sl, pc}
 8013874:	08018770 	stmdaeq	r1, {r4, r5, r6, r8, r9, sl, pc}
 8013878:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

0801387c <free>:
 801387c:	b538      	push	{r3, r4, r5, lr}
 801387e:	4604      	mov	r4, r0
 8013880:	b1c8      	cbz	r0, 80138b6 <free+0x3a>
 8013882:	f1a0 050c 	sub.w	r5, r0, #12
 8013886:	4602      	mov	r2, r0
 8013888:	4629      	mov	r1, r5
 801388a:	480c      	ldr	r0, [pc, #48]	; (80138bc <free+0x40>)
 801388c:	f000 fb5c 	bl	8013f48 <printf>
 8013890:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8013894:	4b0a      	ldr	r3, [pc, #40]	; (80138c0 <free+0x44>)
 8013896:	429a      	cmp	r2, r3
 8013898:	d10d      	bne.n	80138b6 <free+0x3a>
 801389a:	4b0a      	ldr	r3, [pc, #40]	; (80138c4 <free+0x48>)
 801389c:	681a      	ldr	r2, [r3, #0]
 801389e:	b152      	cbz	r2, 80138b6 <free+0x3a>
 80138a0:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80138a4:	4291      	cmp	r1, r2
 80138a6:	d107      	bne.n	80138b8 <free+0x3c>
 80138a8:	68da      	ldr	r2, [r3, #12]
 80138aa:	f844 2c04 	str.w	r2, [r4, #-4]
 80138ae:	685a      	ldr	r2, [r3, #4]
 80138b0:	60dd      	str	r5, [r3, #12]
 80138b2:	3a01      	subs	r2, #1
 80138b4:	605a      	str	r2, [r3, #4]
 80138b6:	bd38      	pop	{r3, r4, r5, pc}
 80138b8:	3310      	adds	r3, #16
 80138ba:	e7ef      	b.n	801389c <free+0x20>
 80138bc:	0801879b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r8, r9, sl, pc}
 80138c0:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 80138c4:	20000024 	andcs	r0, r0, r4, lsr #32

080138c8 <memcpy>:
 80138c8:	b510      	push	{r4, lr}
 80138ca:	1e43      	subs	r3, r0, #1
 80138cc:	440a      	add	r2, r1
 80138ce:	4291      	cmp	r1, r2
 80138d0:	d100      	bne.n	80138d4 <memcpy+0xc>
 80138d2:	bd10      	pop	{r4, pc}
 80138d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80138d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80138dc:	e7f7      	b.n	80138ce <memcpy+0x6>

080138de <memmove>:
 80138de:	4288      	cmp	r0, r1
 80138e0:	b510      	push	{r4, lr}
 80138e2:	eb01 0302 	add.w	r3, r1, r2
 80138e6:	d208      	bcs.n	80138fa <memmove+0x1c>
 80138e8:	1e42      	subs	r2, r0, #1
 80138ea:	4299      	cmp	r1, r3
 80138ec:	d100      	bne.n	80138f0 <memmove+0x12>
 80138ee:	bd10      	pop	{r4, pc}
 80138f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80138f4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80138f8:	e7f7      	b.n	80138ea <memmove+0xc>
 80138fa:	4601      	mov	r1, r0
 80138fc:	4402      	add	r2, r0
 80138fe:	428a      	cmp	r2, r1
 8013900:	d0f5      	beq.n	80138ee <memmove+0x10>
 8013902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013906:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801390a:	e7f8      	b.n	80138fe <memmove+0x20>

0801390c <memset>:
 801390c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801390e:	b1c2      	cbz	r2, 8013942 <memset+0x36>
 8013910:	4603      	mov	r3, r0
 8013912:	b2c9      	uxtb	r1, r1
 8013914:	075c      	lsls	r4, r3, #29
 8013916:	d110      	bne.n	801393a <memset+0x2e>
 8013918:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 801391c:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8013920:	463d      	mov	r5, r7
 8013922:	461e      	mov	r6, r3
 8013924:	f022 0407 	bic.w	r4, r2, #7
 8013928:	441c      	add	r4, r3
 801392a:	42a6      	cmp	r6, r4
 801392c:	d10a      	bne.n	8013944 <memset+0x38>
 801392e:	4413      	add	r3, r2
 8013930:	429c      	cmp	r4, r3
 8013932:	d006      	beq.n	8013942 <memset+0x36>
 8013934:	f804 1b01 	strb.w	r1, [r4], #1
 8013938:	e7fa      	b.n	8013930 <memset+0x24>
 801393a:	3a01      	subs	r2, #1
 801393c:	f803 1b01 	strb.w	r1, [r3], #1
 8013940:	d1e8      	bne.n	8013914 <memset+0x8>
 8013942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013944:	f846 7b08 	str.w	r7, [r6], #8
 8013948:	f846 5c04 	str.w	r5, [r6, #-4]
 801394c:	e7ed      	b.n	801392a <memset+0x1e>

0801394e <_itostr>:
 801394e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013950:	0fc7      	lsrs	r7, r0, #31
 8013952:	b091      	sub	sp, #68	; 0x44
 8013954:	bf18      	it	ne
 8013956:	4240      	negne	r0, r0
 8013958:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 801395c:	b9c8      	cbnz	r0, 8013992 <_itostr+0x44>
 801395e:	2330      	movs	r3, #48	; 0x30
 8013960:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8013964:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8013968:	b132      	cbz	r2, 8013978 <_itostr+0x2a>
 801396a:	4668      	mov	r0, sp
 801396c:	2530      	movs	r5, #48	; 0x30
 801396e:	1ae6      	subs	r6, r4, r3
 8013970:	4296      	cmp	r6, r2
 8013972:	da01      	bge.n	8013978 <_itostr+0x2a>
 8013974:	4283      	cmp	r3, r0
 8013976:	d81c      	bhi.n	80139b2 <_itostr+0x64>
 8013978:	b117      	cbz	r7, 8013980 <_itostr+0x32>
 801397a:	222d      	movs	r2, #45	; 0x2d
 801397c:	f803 2901 	strb.w	r2, [r3], #-1
 8013980:	3301      	adds	r3, #1
 8013982:	1ae0      	subs	r0, r4, r3
 8013984:	3901      	subs	r1, #1
 8013986:	aa10      	add	r2, sp, #64	; 0x40
 8013988:	4293      	cmp	r3, r2
 801398a:	d315      	bcc.n	80139b8 <_itostr+0x6a>
 801398c:	3001      	adds	r0, #1
 801398e:	b011      	add	sp, #68	; 0x44
 8013990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013992:	4623      	mov	r3, r4
 8013994:	250a      	movs	r5, #10
 8013996:	46ec      	mov	ip, sp
 8013998:	fb90 f6f5 	sdiv	r6, r0, r5
 801399c:	fb05 0016 	mls	r0, r5, r6, r0
 80139a0:	3030      	adds	r0, #48	; 0x30
 80139a2:	f803 0901 	strb.w	r0, [r3], #-1
 80139a6:	4630      	mov	r0, r6
 80139a8:	2e00      	cmp	r6, #0
 80139aa:	d0dd      	beq.n	8013968 <_itostr+0x1a>
 80139ac:	4563      	cmp	r3, ip
 80139ae:	d1f3      	bne.n	8013998 <_itostr+0x4a>
 80139b0:	e7da      	b.n	8013968 <_itostr+0x1a>
 80139b2:	f803 5901 	strb.w	r5, [r3], #-1
 80139b6:	e7da      	b.n	801396e <_itostr+0x20>
 80139b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80139bc:	f801 2f01 	strb.w	r2, [r1, #1]!
 80139c0:	e7e1      	b.n	8013986 <_itostr+0x38>
	...

080139c4 <_xputch>:
 80139c4:	4603      	mov	r3, r0
 80139c6:	b410      	push	{r4}
 80139c8:	4c08      	ldr	r4, [pc, #32]	; (80139ec <_xputch+0x28>)
 80139ca:	68da      	ldr	r2, [r3, #12]
 80139cc:	4608      	mov	r0, r1
 80139ce:	6821      	ldr	r1, [r4, #0]
 80139d0:	3201      	adds	r2, #1
 80139d2:	60da      	str	r2, [r3, #12]
 80139d4:	b139      	cbz	r1, 80139e6 <_xputch+0x22>
 80139d6:	691b      	ldr	r3, [r3, #16]
 80139d8:	429a      	cmp	r2, r3
 80139da:	da02      	bge.n	80139e2 <_xputch+0x1e>
 80139dc:	1c4b      	adds	r3, r1, #1
 80139de:	6023      	str	r3, [r4, #0]
 80139e0:	7008      	strb	r0, [r1, #0]
 80139e2:	bc10      	pop	{r4}
 80139e4:	4770      	bx	lr
 80139e6:	bc10      	pop	{r4}
 80139e8:	f7ff bd1a 	b.w	8013420 <console_putc>
 80139ec:	2000a720 	andcs	sl, r0, r0, lsr #14

080139f0 <_format_int>:
 80139f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80139f4:	4698      	mov	r8, r3
 80139f6:	b091      	sub	sp, #68	; 0x44
 80139f8:	ea52 0308 	orrs.w	r3, r2, r8
 80139fc:	4606      	mov	r6, r0
 80139fe:	4617      	mov	r7, r2
 8013a00:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8013a04:	d133      	bne.n	8013a6e <_format_int+0x7e>
 8013a06:	2330      	movs	r3, #48	; 0x30
 8013a08:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8013a0c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8013a10:	6833      	ldr	r3, [r6, #0]
 8013a12:	07d8      	lsls	r0, r3, #31
 8013a14:	d507      	bpl.n	8013a26 <_format_int+0x36>
 8013a16:	466a      	mov	r2, sp
 8013a18:	2030      	movs	r0, #48	; 0x30
 8013a1a:	6871      	ldr	r1, [r6, #4]
 8013a1c:	1b2f      	subs	r7, r5, r4
 8013a1e:	428f      	cmp	r7, r1
 8013a20:	da01      	bge.n	8013a26 <_format_int+0x36>
 8013a22:	4294      	cmp	r4, r2
 8013a24:	d839      	bhi.n	8013a9a <_format_int+0xaa>
 8013a26:	0699      	lsls	r1, r3, #26
 8013a28:	d507      	bpl.n	8013a3a <_format_int+0x4a>
 8013a2a:	466a      	mov	r2, sp
 8013a2c:	2030      	movs	r0, #48	; 0x30
 8013a2e:	68b1      	ldr	r1, [r6, #8]
 8013a30:	1b2f      	subs	r7, r5, r4
 8013a32:	428f      	cmp	r7, r1
 8013a34:	da01      	bge.n	8013a3a <_format_int+0x4a>
 8013a36:	4294      	cmp	r4, r2
 8013a38:	d832      	bhi.n	8013aa0 <_format_int+0xb0>
 8013a3a:	071a      	lsls	r2, r3, #28
 8013a3c:	bf44      	itt	mi
 8013a3e:	222d      	movmi	r2, #45	; 0x2d
 8013a40:	f804 2901 	strbmi.w	r2, [r4], #-1
 8013a44:	065b      	lsls	r3, r3, #25
 8013a46:	d407      	bmi.n	8013a58 <_format_int+0x68>
 8013a48:	466b      	mov	r3, sp
 8013a4a:	2120      	movs	r1, #32
 8013a4c:	68b2      	ldr	r2, [r6, #8]
 8013a4e:	1b28      	subs	r0, r5, r4
 8013a50:	4290      	cmp	r0, r2
 8013a52:	da01      	bge.n	8013a58 <_format_int+0x68>
 8013a54:	429c      	cmp	r4, r3
 8013a56:	d826      	bhi.n	8013aa6 <_format_int+0xb6>
 8013a58:	1b2d      	subs	r5, r5, r4
 8013a5a:	3401      	adds	r4, #1
 8013a5c:	ab10      	add	r3, sp, #64	; 0x40
 8013a5e:	429c      	cmp	r4, r3
 8013a60:	d324      	bcc.n	8013aac <_format_int+0xbc>
 8013a62:	68b3      	ldr	r3, [r6, #8]
 8013a64:	42ab      	cmp	r3, r5
 8013a66:	dc27      	bgt.n	8013ab8 <_format_int+0xc8>
 8013a68:	b011      	add	sp, #68	; 0x44
 8013a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a6e:	462c      	mov	r4, r5
 8013a70:	46e9      	mov	r9, sp
 8013a72:	4638      	mov	r0, r7
 8013a74:	4641      	mov	r1, r8
 8013a76:	220a      	movs	r2, #10
 8013a78:	2300      	movs	r3, #0
 8013a7a:	f7f4 fd65 	bl	8008548 <__aeabi_uldivmod>
 8013a7e:	3230      	adds	r2, #48	; 0x30
 8013a80:	f804 2901 	strb.w	r2, [r4], #-1
 8013a84:	463a      	mov	r2, r7
 8013a86:	4643      	mov	r3, r8
 8013a88:	2a0a      	cmp	r2, #10
 8013a8a:	f173 0300 	sbcs.w	r3, r3, #0
 8013a8e:	4607      	mov	r7, r0
 8013a90:	4688      	mov	r8, r1
 8013a92:	d3bd      	bcc.n	8013a10 <_format_int+0x20>
 8013a94:	454c      	cmp	r4, r9
 8013a96:	d1ec      	bne.n	8013a72 <_format_int+0x82>
 8013a98:	e7ba      	b.n	8013a10 <_format_int+0x20>
 8013a9a:	f804 0901 	strb.w	r0, [r4], #-1
 8013a9e:	e7bd      	b.n	8013a1c <_format_int+0x2c>
 8013aa0:	f804 0901 	strb.w	r0, [r4], #-1
 8013aa4:	e7c4      	b.n	8013a30 <_format_int+0x40>
 8013aa6:	f804 1901 	strb.w	r1, [r4], #-1
 8013aaa:	e7d0      	b.n	8013a4e <_format_int+0x5e>
 8013aac:	4630      	mov	r0, r6
 8013aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ab2:	f7ff ff87 	bl	80139c4 <_xputch>
 8013ab6:	e7d1      	b.n	8013a5c <_format_int+0x6c>
 8013ab8:	2120      	movs	r1, #32
 8013aba:	4630      	mov	r0, r6
 8013abc:	f7ff ff82 	bl	80139c4 <_xputch>
 8013ac0:	3501      	adds	r5, #1
 8013ac2:	e7ce      	b.n	8013a62 <_format_int+0x72>

08013ac4 <_format_hex>:
 8013ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ac6:	b091      	sub	sp, #68	; 0x44
 8013ac8:	4606      	mov	r6, r0
 8013aca:	6804      	ldr	r4, [r0, #0]
 8013acc:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8013ad0:	bb61      	cbnz	r1, 8013b2c <_format_hex+0x68>
 8013ad2:	2330      	movs	r3, #48	; 0x30
 8013ad4:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8013ad8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8013adc:	07e5      	lsls	r5, r4, #31
 8013ade:	d507      	bpl.n	8013af0 <_format_hex+0x2c>
 8013ae0:	4669      	mov	r1, sp
 8013ae2:	2530      	movs	r5, #48	; 0x30
 8013ae4:	6870      	ldr	r0, [r6, #4]
 8013ae6:	1ad7      	subs	r7, r2, r3
 8013ae8:	4287      	cmp	r7, r0
 8013aea:	da01      	bge.n	8013af0 <_format_hex+0x2c>
 8013aec:	428b      	cmp	r3, r1
 8013aee:	d831      	bhi.n	8013b54 <_format_hex+0x90>
 8013af0:	06a0      	lsls	r0, r4, #26
 8013af2:	d507      	bpl.n	8013b04 <_format_hex+0x40>
 8013af4:	4669      	mov	r1, sp
 8013af6:	2530      	movs	r5, #48	; 0x30
 8013af8:	68b0      	ldr	r0, [r6, #8]
 8013afa:	1ad7      	subs	r7, r2, r3
 8013afc:	4287      	cmp	r7, r0
 8013afe:	da01      	bge.n	8013b04 <_format_hex+0x40>
 8013b00:	428b      	cmp	r3, r1
 8013b02:	d82a      	bhi.n	8013b5a <_format_hex+0x96>
 8013b04:	0661      	lsls	r1, r4, #25
 8013b06:	d407      	bmi.n	8013b18 <_format_hex+0x54>
 8013b08:	4669      	mov	r1, sp
 8013b0a:	2420      	movs	r4, #32
 8013b0c:	68b0      	ldr	r0, [r6, #8]
 8013b0e:	1ad5      	subs	r5, r2, r3
 8013b10:	4285      	cmp	r5, r0
 8013b12:	da01      	bge.n	8013b18 <_format_hex+0x54>
 8013b14:	428b      	cmp	r3, r1
 8013b16:	d823      	bhi.n	8013b60 <_format_hex+0x9c>
 8013b18:	1ad5      	subs	r5, r2, r3
 8013b1a:	1c5c      	adds	r4, r3, #1
 8013b1c:	ab10      	add	r3, sp, #64	; 0x40
 8013b1e:	429c      	cmp	r4, r3
 8013b20:	d321      	bcc.n	8013b66 <_format_hex+0xa2>
 8013b22:	68b3      	ldr	r3, [r6, #8]
 8013b24:	429d      	cmp	r5, r3
 8013b26:	db24      	blt.n	8013b72 <_format_hex+0xae>
 8013b28:	b011      	add	sp, #68	; 0x44
 8013b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b2c:	f014 0f02 	tst.w	r4, #2
 8013b30:	bf0c      	ite	eq
 8013b32:	2757      	moveq	r7, #87	; 0x57
 8013b34:	2737      	movne	r7, #55	; 0x37
 8013b36:	4613      	mov	r3, r2
 8013b38:	466d      	mov	r5, sp
 8013b3a:	f001 000f 	and.w	r0, r1, #15
 8013b3e:	2809      	cmp	r0, #9
 8013b40:	bf94      	ite	ls
 8013b42:	3030      	addls	r0, #48	; 0x30
 8013b44:	19c0      	addhi	r0, r0, r7
 8013b46:	0909      	lsrs	r1, r1, #4
 8013b48:	f803 0901 	strb.w	r0, [r3], #-1
 8013b4c:	d0c6      	beq.n	8013adc <_format_hex+0x18>
 8013b4e:	42ab      	cmp	r3, r5
 8013b50:	d1f3      	bne.n	8013b3a <_format_hex+0x76>
 8013b52:	e7c3      	b.n	8013adc <_format_hex+0x18>
 8013b54:	f803 5901 	strb.w	r5, [r3], #-1
 8013b58:	e7c5      	b.n	8013ae6 <_format_hex+0x22>
 8013b5a:	f803 5901 	strb.w	r5, [r3], #-1
 8013b5e:	e7cc      	b.n	8013afa <_format_hex+0x36>
 8013b60:	f803 4901 	strb.w	r4, [r3], #-1
 8013b64:	e7d3      	b.n	8013b0e <_format_hex+0x4a>
 8013b66:	4630      	mov	r0, r6
 8013b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b6c:	f7ff ff2a 	bl	80139c4 <_xputch>
 8013b70:	e7d4      	b.n	8013b1c <_format_hex+0x58>
 8013b72:	2120      	movs	r1, #32
 8013b74:	4630      	mov	r0, r6
 8013b76:	f7ff ff25 	bl	80139c4 <_xputch>
 8013b7a:	3501      	adds	r5, #1
 8013b7c:	e7d1      	b.n	8013b22 <_format_hex+0x5e>
	...

08013b80 <_vprintf>:
 8013b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b84:	4614      	mov	r4, r2
 8013b86:	2200      	movs	r2, #0
 8013b88:	460b      	mov	r3, r1
 8013b8a:	f04f 0800 	mov.w	r8, #0
 8013b8e:	b099      	sub	sp, #100	; 0x64
 8013b90:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8013b94:	af08      	add	r7, sp, #32
 8013b96:	7819      	ldrb	r1, [r3, #0]
 8013b98:	b919      	cbnz	r1, 8013ba2 <_vprintf+0x22>
 8013b9a:	9806      	ldr	r0, [sp, #24]
 8013b9c:	b019      	add	sp, #100	; 0x64
 8013b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ba2:	2925      	cmp	r1, #37	; 0x25
 8013ba4:	f103 0601 	add.w	r6, r3, #1
 8013ba8:	d004      	beq.n	8013bb4 <_vprintf+0x34>
 8013baa:	a803      	add	r0, sp, #12
 8013bac:	f7ff ff0a 	bl	80139c4 <_xputch>
 8013bb0:	4633      	mov	r3, r6
 8013bb2:	e7f0      	b.n	8013b96 <_vprintf+0x16>
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8013bba:	9205      	str	r2, [sp, #20]
 8013bbc:	785a      	ldrb	r2, [r3, #1]
 8013bbe:	2a30      	cmp	r2, #48	; 0x30
 8013bc0:	d129      	bne.n	8013c16 <_vprintf+0x96>
 8013bc2:	2220      	movs	r2, #32
 8013bc4:	9203      	str	r2, [sp, #12]
 8013bc6:	1c9e      	adds	r6, r3, #2
 8013bc8:	2200      	movs	r2, #0
 8013bca:	4635      	mov	r5, r6
 8013bcc:	4613      	mov	r3, r2
 8013bce:	f04f 0c0a 	mov.w	ip, #10
 8013bd2:	7829      	ldrb	r1, [r5, #0]
 8013bd4:	462e      	mov	r6, r5
 8013bd6:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8013bda:	2809      	cmp	r0, #9
 8013bdc:	f105 0501 	add.w	r5, r5, #1
 8013be0:	d91d      	bls.n	8013c1e <_vprintf+0x9e>
 8013be2:	b12a      	cbz	r2, 8013bf0 <_vprintf+0x70>
 8013be4:	9305      	str	r3, [sp, #20]
 8013be6:	b11b      	cbz	r3, 8013bf0 <_vprintf+0x70>
 8013be8:	9b03      	ldr	r3, [sp, #12]
 8013bea:	f043 0310 	orr.w	r3, r3, #16
 8013bee:	9303      	str	r3, [sp, #12]
 8013bf0:	292e      	cmp	r1, #46	; 0x2e
 8013bf2:	d123      	bne.n	8013c3c <_vprintf+0xbc>
 8013bf4:	7873      	ldrb	r3, [r6, #1]
 8013bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8013bf8:	d015      	beq.n	8013c26 <_vprintf+0xa6>
 8013bfa:	2100      	movs	r1, #0
 8013bfc:	250a      	movs	r5, #10
 8013bfe:	460a      	mov	r2, r1
 8013c00:	1c70      	adds	r0, r6, #1
 8013c02:	7803      	ldrb	r3, [r0, #0]
 8013c04:	4606      	mov	r6, r0
 8013c06:	3b30      	subs	r3, #48	; 0x30
 8013c08:	2b09      	cmp	r3, #9
 8013c0a:	f100 0001 	add.w	r0, r0, #1
 8013c0e:	d959      	bls.n	8013cc4 <_vprintf+0x144>
 8013c10:	b181      	cbz	r1, 8013c34 <_vprintf+0xb4>
 8013c12:	9204      	str	r2, [sp, #16]
 8013c14:	e00e      	b.n	8013c34 <_vprintf+0xb4>
 8013c16:	2a2d      	cmp	r2, #45	; 0x2d
 8013c18:	d1d6      	bne.n	8013bc8 <_vprintf+0x48>
 8013c1a:	2240      	movs	r2, #64	; 0x40
 8013c1c:	e7d2      	b.n	8013bc4 <_vprintf+0x44>
 8013c1e:	2201      	movs	r2, #1
 8013c20:	fb0c 0303 	mla	r3, ip, r3, r0
 8013c24:	e7d5      	b.n	8013bd2 <_vprintf+0x52>
 8013c26:	f854 3b04 	ldr.w	r3, [r4], #4
 8013c2a:	3602      	adds	r6, #2
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	bfb8      	it	lt
 8013c30:	425b      	neglt	r3, r3
 8013c32:	9304      	str	r3, [sp, #16]
 8013c34:	9b03      	ldr	r3, [sp, #12]
 8013c36:	f043 0301 	orr.w	r3, r3, #1
 8013c3a:	9303      	str	r3, [sp, #12]
 8013c3c:	7833      	ldrb	r3, [r6, #0]
 8013c3e:	2b6c      	cmp	r3, #108	; 0x6c
 8013c40:	bf04      	itt	eq
 8013c42:	9b03      	ldreq	r3, [sp, #12]
 8013c44:	3601      	addeq	r6, #1
 8013c46:	7831      	ldrb	r1, [r6, #0]
 8013c48:	bf04      	itt	eq
 8013c4a:	f043 0304 	orreq.w	r3, r3, #4
 8013c4e:	9303      	streq	r3, [sp, #12]
 8013c50:	2958      	cmp	r1, #88	; 0x58
 8013c52:	f000 8171 	beq.w	8013f38 <_vprintf+0x3b8>
 8013c56:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8013c5a:	b2da      	uxtb	r2, r3
 8013c5c:	2a15      	cmp	r2, #21
 8013c5e:	d8a4      	bhi.n	8013baa <_vprintf+0x2a>
 8013c60:	2b15      	cmp	r3, #21
 8013c62:	d8a2      	bhi.n	8013baa <_vprintf+0x2a>
 8013c64:	a201      	add	r2, pc, #4	; (adr r2, 8013c6c <_vprintf+0xec>)
 8013c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c6a:	bf00      	nop
 8013c6c:	08013ccd 	stmdaeq	r1, {r0, r2, r3, r6, r7, sl, fp, ip, sp}
 8013c70:	08013cdf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, sl, fp, ip, sp}
 8013c74:	08013bab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, r9, fp, ip, sp}
 8013c78:	08013d15 	stmdaeq	r1, {r0, r2, r4, r8, sl, fp, ip, sp}
 8013c7c:	08013bab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, r9, fp, ip, sp}
 8013c80:	08013bab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, r9, fp, ip, sp}
 8013c84:	08013cdf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, sl, fp, ip, sp}
 8013c88:	08013bab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, r9, fp, ip, sp}
 8013c8c:	08013bab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, r9, fp, ip, sp}
 8013c90:	08013bab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, r9, fp, ip, sp}
 8013c94:	08013bab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, r9, fp, ip, sp}
 8013c98:	08013bab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, r9, fp, ip, sp}
 8013c9c:	08013bab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, r9, fp, ip, sp}
 8013ca0:	08013e7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8013ca4:	08013bab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, r9, fp, ip, sp}
 8013ca8:	08013bab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, r9, fp, ip, sp}
 8013cac:	08013ea3 	stmdaeq	r1, {r0, r1, r5, r7, r9, sl, fp, ip, sp}
 8013cb0:	08013bab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, r9, fp, ip, sp}
 8013cb4:	08013f19 	stmdaeq	r1, {r0, r3, r4, r8, r9, sl, fp, ip, sp}
 8013cb8:	08013bab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, r9, fp, ip, sp}
 8013cbc:	08013bab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, r9, fp, ip, sp}
 8013cc0:	08013f41 	stmdaeq	r1, {r0, r6, r8, r9, sl, fp, ip, sp}
 8013cc4:	2101      	movs	r1, #1
 8013cc6:	fb05 3202 	mla	r2, r5, r2, r3
 8013cca:	e79a      	b.n	8013c02 <_vprintf+0x82>
 8013ccc:	4625      	mov	r5, r4
 8013cce:	a803      	add	r0, sp, #12
 8013cd0:	f855 1b04 	ldr.w	r1, [r5], #4
 8013cd4:	f7ff fe76 	bl	80139c4 <_xputch>
 8013cd8:	462c      	mov	r4, r5
 8013cda:	3601      	adds	r6, #1
 8013cdc:	e768      	b.n	8013bb0 <_vprintf+0x30>
 8013cde:	9903      	ldr	r1, [sp, #12]
 8013ce0:	074d      	lsls	r5, r1, #29
 8013ce2:	bf51      	iteee	pl
 8013ce4:	4625      	movpl	r5, r4
 8013ce6:	3407      	addmi	r4, #7
 8013ce8:	f024 0407 	bicmi.w	r4, r4, #7
 8013cec:	4625      	movmi	r5, r4
 8013cee:	bf55      	itete	pl
 8013cf0:	f855 2b04 	ldrpl.w	r2, [r5], #4
 8013cf4:	6863      	ldrmi	r3, [r4, #4]
 8013cf6:	17d3      	asrpl	r3, r2, #31
 8013cf8:	f855 2b08 	ldrmi.w	r2, [r5], #8
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	da05      	bge.n	8013d0c <_vprintf+0x18c>
 8013d00:	f041 0108 	orr.w	r1, r1, #8
 8013d04:	4252      	negs	r2, r2
 8013d06:	9103      	str	r1, [sp, #12]
 8013d08:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8013d0c:	a803      	add	r0, sp, #12
 8013d0e:	f7ff fe6f 	bl	80139f0 <_format_int>
 8013d12:	e7e1      	b.n	8013cd8 <_vprintf+0x158>
 8013d14:	3407      	adds	r4, #7
 8013d16:	f024 0507 	bic.w	r5, r4, #7
 8013d1a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8013d1e:	f7f4 f8c9 	bl	8007eb4 <__aeabi_d2f>
 8013d22:	9b03      	ldr	r3, [sp, #12]
 8013d24:	4641      	mov	r1, r8
 8013d26:	07dc      	lsls	r4, r3, #31
 8013d28:	bf54      	ite	pl
 8013d2a:	f04f 0a06 	movpl.w	sl, #6
 8013d2e:	f8dd a010 	ldrmi.w	sl, [sp, #16]
 8013d32:	4681      	mov	r9, r0
 8013d34:	f7f4 fbba 	bl	80084ac <__aeabi_fcmplt>
 8013d38:	2800      	cmp	r0, #0
 8013d3a:	d063      	beq.n	8013e04 <_vprintf+0x284>
 8013d3c:	232d      	movs	r3, #45	; 0x2d
 8013d3e:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 8013d42:	f88d 3020 	strb.w	r3, [sp, #32]
 8013d46:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
 8013d4a:	4648      	mov	r0, r9
 8013d4c:	f7f4 fbd6 	bl	80084fc <__aeabi_f2iz>
 8013d50:	4659      	mov	r1, fp
 8013d52:	2200      	movs	r2, #0
 8013d54:	4604      	mov	r4, r0
 8013d56:	f7ff fdfa 	bl	801394e <_itostr>
 8013d5a:	eb0b 0200 	add.w	r2, fp, r0
 8013d5e:	e9cd 2000 	strd	r2, r0, [sp]
 8013d62:	4620      	mov	r0, r4
 8013d64:	f7f4 f9b0 	bl	80080c8 <__aeabi_i2f>
 8013d68:	4601      	mov	r1, r0
 8013d6a:	4648      	mov	r0, r9
 8013d6c:	f7f4 f8f6 	bl	8007f5c <__aeabi_fsub>
 8013d70:	222e      	movs	r2, #46	; 0x2e
 8013d72:	4601      	mov	r1, r0
 8013d74:	200a      	movs	r0, #10
 8013d76:	9b00      	ldr	r3, [sp, #0]
 8013d78:	f10a 0901 	add.w	r9, sl, #1
 8013d7c:	1c5c      	adds	r4, r3, #1
 8013d7e:	9b01      	ldr	r3, [sp, #4]
 8013d80:	f80b 2003 	strb.w	r2, [fp, r3]
 8013d84:	4603      	mov	r3, r0
 8013d86:	f1ba 0f00 	cmp.w	sl, #0
 8013d8a:	dc3d      	bgt.n	8013e08 <_vprintf+0x288>
 8013d8c:	9100      	str	r1, [sp, #0]
 8013d8e:	f7f4 f99b 	bl	80080c8 <__aeabi_i2f>
 8013d92:	9900      	ldr	r1, [sp, #0]
 8013d94:	f7f4 f9ec 	bl	8008170 <__aeabi_fmul>
 8013d98:	f7f4 fbb0 	bl	80084fc <__aeabi_f2iz>
 8013d9c:	464a      	mov	r2, r9
 8013d9e:	4621      	mov	r1, r4
 8013da0:	f7ff fdd5 	bl	801394e <_itostr>
 8013da4:	4404      	add	r4, r0
 8013da6:	1be0      	subs	r0, r4, r7
 8013da8:	1e44      	subs	r4, r0, #1
 8013daa:	5d3b      	ldrb	r3, [r7, r4]
 8013dac:	193a      	adds	r2, r7, r4
 8013dae:	2b34      	cmp	r3, #52	; 0x34
 8013db0:	d910      	bls.n	8013dd4 <_vprintf+0x254>
 8013db2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8013db6:	1e53      	subs	r3, r2, #1
 8013db8:	292e      	cmp	r1, #46	; 0x2e
 8013dba:	d02c      	beq.n	8013e16 <_vprintf+0x296>
 8013dbc:	469c      	mov	ip, r3
 8013dbe:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8013dc2:	4663      	mov	r3, ip
 8013dc4:	f81c 1901 	ldrb.w	r1, [ip], #-1
 8013dc8:	2939      	cmp	r1, #57	; 0x39
 8013dca:	d021      	beq.n	8013e10 <_vprintf+0x290>
 8013dcc:	292e      	cmp	r1, #46	; 0x2e
 8013dce:	d022      	beq.n	8013e16 <_vprintf+0x296>
 8013dd0:	3101      	adds	r1, #1
 8013dd2:	7019      	strb	r1, [r3, #0]
 8013dd4:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8013dd8:	446b      	add	r3, sp
 8013dda:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 8013dde:	2b2e      	cmp	r3, #46	; 0x2e
 8013de0:	bf08      	it	eq
 8013de2:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8013de6:	46a1      	mov	r9, r4
 8013de8:	9b05      	ldr	r3, [sp, #20]
 8013dea:	4599      	cmp	r9, r3
 8013dec:	db3e      	blt.n	8013e6c <_vprintf+0x2ec>
 8013dee:	46b9      	mov	r9, r7
 8013df0:	2c00      	cmp	r4, #0
 8013df2:	f77f af71 	ble.w	8013cd8 <_vprintf+0x158>
 8013df6:	f819 1b01 	ldrb.w	r1, [r9], #1
 8013dfa:	a803      	add	r0, sp, #12
 8013dfc:	f7ff fde2 	bl	80139c4 <_xputch>
 8013e00:	3c01      	subs	r4, #1
 8013e02:	e7f5      	b.n	8013df0 <_vprintf+0x270>
 8013e04:	46bb      	mov	fp, r7
 8013e06:	e7a0      	b.n	8013d4a <_vprintf+0x1ca>
 8013e08:	4358      	muls	r0, r3
 8013e0a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013e0e:	e7ba      	b.n	8013d86 <_vprintf+0x206>
 8013e10:	f88c e001 	strb.w	lr, [ip, #1]
 8013e14:	e7d5      	b.n	8013dc2 <_vprintf+0x242>
 8013e16:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8013e1a:	3b01      	subs	r3, #1
 8013e1c:	7819      	ldrb	r1, [r3, #0]
 8013e1e:	2939      	cmp	r1, #57	; 0x39
 8013e20:	d112      	bne.n	8013e48 <_vprintf+0x2c8>
 8013e22:	42bb      	cmp	r3, r7
 8013e24:	d20d      	bcs.n	8013e42 <_vprintf+0x2c2>
 8013e26:	1c5c      	adds	r4, r3, #1
 8013e28:	1c99      	adds	r1, r3, #2
 8013e2a:	428c      	cmp	r4, r1
 8013e2c:	eba2 0203 	sub.w	r2, r2, r3
 8013e30:	d913      	bls.n	8013e5a <_vprintf+0x2da>
 8013e32:	3201      	adds	r2, #1
 8013e34:	441a      	add	r2, r3
 8013e36:	42a2      	cmp	r2, r4
 8013e38:	d10b      	bne.n	8013e52 <_vprintf+0x2d2>
 8013e3a:	2231      	movs	r2, #49	; 0x31
 8013e3c:	4604      	mov	r4, r0
 8013e3e:	705a      	strb	r2, [r3, #1]
 8013e40:	e7c8      	b.n	8013dd4 <_vprintf+0x254>
 8013e42:	f803 c901 	strb.w	ip, [r3], #-1
 8013e46:	e7e9      	b.n	8013e1c <_vprintf+0x29c>
 8013e48:	42bb      	cmp	r3, r7
 8013e4a:	d3ec      	bcc.n	8013e26 <_vprintf+0x2a6>
 8013e4c:	292d      	cmp	r1, #45	; 0x2d
 8013e4e:	d0ea      	beq.n	8013e26 <_vprintf+0x2a6>
 8013e50:	e7be      	b.n	8013dd0 <_vprintf+0x250>
 8013e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e56:	7021      	strb	r1, [r4, #0]
 8013e58:	e7ed      	b.n	8013e36 <_vprintf+0x2b6>
 8013e5a:	4414      	add	r4, r2
 8013e5c:	440a      	add	r2, r1
 8013e5e:	428a      	cmp	r2, r1
 8013e60:	d0eb      	beq.n	8013e3a <_vprintf+0x2ba>
 8013e62:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
 8013e66:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8013e6a:	e7f8      	b.n	8013e5e <_vprintf+0x2de>
 8013e6c:	2120      	movs	r1, #32
 8013e6e:	a803      	add	r0, sp, #12
 8013e70:	f7ff fda8 	bl	80139c4 <_xputch>
 8013e74:	f109 0901 	add.w	r9, r9, #1
 8013e78:	e7b6      	b.n	8013de8 <_vprintf+0x268>
 8013e7a:	2308      	movs	r3, #8
 8013e7c:	4625      	mov	r5, r4
 8013e7e:	9305      	str	r3, [sp, #20]
 8013e80:	2320      	movs	r3, #32
 8013e82:	2130      	movs	r1, #48	; 0x30
 8013e84:	f855 4b04 	ldr.w	r4, [r5], #4
 8013e88:	a803      	add	r0, sp, #12
 8013e8a:	9303      	str	r3, [sp, #12]
 8013e8c:	f7ff fd9a 	bl	80139c4 <_xputch>
 8013e90:	2178      	movs	r1, #120	; 0x78
 8013e92:	a803      	add	r0, sp, #12
 8013e94:	f7ff fd96 	bl	80139c4 <_xputch>
 8013e98:	4621      	mov	r1, r4
 8013e9a:	a803      	add	r0, sp, #12
 8013e9c:	f7ff fe12 	bl	8013ac4 <_format_hex>
 8013ea0:	e71a      	b.n	8013cd8 <_vprintf+0x158>
 8013ea2:	4625      	mov	r5, r4
 8013ea4:	2400      	movs	r4, #0
 8013ea6:	f855 9b04 	ldr.w	r9, [r5], #4
 8013eaa:	f819 3004 	ldrb.w	r3, [r9, r4]
 8013eae:	b993      	cbnz	r3, 8013ed6 <_vprintf+0x356>
 8013eb0:	9b03      	ldr	r3, [sp, #12]
 8013eb2:	07d9      	lsls	r1, r3, #31
 8013eb4:	d503      	bpl.n	8013ebe <_vprintf+0x33e>
 8013eb6:	9b04      	ldr	r3, [sp, #16]
 8013eb8:	429c      	cmp	r4, r3
 8013eba:	bfa8      	it	ge
 8013ebc:	461c      	movge	r4, r3
 8013ebe:	9b03      	ldr	r3, [sp, #12]
 8013ec0:	f104 0a01 	add.w	sl, r4, #1
 8013ec4:	065a      	lsls	r2, r3, #25
 8013ec6:	d403      	bmi.n	8013ed0 <_vprintf+0x350>
 8013ec8:	9b05      	ldr	r3, [sp, #20]
 8013eca:	429c      	cmp	r4, r3
 8013ecc:	db05      	blt.n	8013eda <_vprintf+0x35a>
 8013ece:	4654      	mov	r4, sl
 8013ed0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8013ed4:	e00d      	b.n	8013ef2 <_vprintf+0x372>
 8013ed6:	3401      	adds	r4, #1
 8013ed8:	e7e7      	b.n	8013eaa <_vprintf+0x32a>
 8013eda:	2120      	movs	r1, #32
 8013edc:	a803      	add	r0, sp, #12
 8013ede:	f7ff fd71 	bl	80139c4 <_xputch>
 8013ee2:	4654      	mov	r4, sl
 8013ee4:	e7eb      	b.n	8013ebe <_vprintf+0x33e>
 8013ee6:	a803      	add	r0, sp, #12
 8013ee8:	f7ff fd6c 	bl	80139c4 <_xputch>
 8013eec:	9b04      	ldr	r3, [sp, #16]
 8013eee:	3b01      	subs	r3, #1
 8013ef0:	9304      	str	r3, [sp, #16]
 8013ef2:	9b03      	ldr	r3, [sp, #12]
 8013ef4:	07db      	lsls	r3, r3, #31
 8013ef6:	d501      	bpl.n	8013efc <_vprintf+0x37c>
 8013ef8:	9b04      	ldr	r3, [sp, #16]
 8013efa:	b11b      	cbz	r3, 8013f04 <_vprintf+0x384>
 8013efc:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8013f00:	2900      	cmp	r1, #0
 8013f02:	d1f0      	bne.n	8013ee6 <_vprintf+0x366>
 8013f04:	9b05      	ldr	r3, [sp, #20]
 8013f06:	429c      	cmp	r4, r3
 8013f08:	f6bf aee6 	bge.w	8013cd8 <_vprintf+0x158>
 8013f0c:	2120      	movs	r1, #32
 8013f0e:	a803      	add	r0, sp, #12
 8013f10:	f7ff fd58 	bl	80139c4 <_xputch>
 8013f14:	3401      	adds	r4, #1
 8013f16:	e7f5      	b.n	8013f04 <_vprintf+0x384>
 8013f18:	9b03      	ldr	r3, [sp, #12]
 8013f1a:	f013 0304 	ands.w	r3, r3, #4
 8013f1e:	bf1d      	ittte	ne
 8013f20:	3407      	addne	r4, #7
 8013f22:	f024 0407 	bicne.w	r4, r4, #7
 8013f26:	4625      	movne	r5, r4
 8013f28:	4625      	moveq	r5, r4
 8013f2a:	bf1a      	itte	ne
 8013f2c:	f855 2b08 	ldrne.w	r2, [r5], #8
 8013f30:	6863      	ldrne	r3, [r4, #4]
 8013f32:	f855 2b04 	ldreq.w	r2, [r5], #4
 8013f36:	e6e9      	b.n	8013d0c <_vprintf+0x18c>
 8013f38:	9b03      	ldr	r3, [sp, #12]
 8013f3a:	f043 0302 	orr.w	r3, r3, #2
 8013f3e:	9303      	str	r3, [sp, #12]
 8013f40:	4625      	mov	r5, r4
 8013f42:	f855 1b04 	ldr.w	r1, [r5], #4
 8013f46:	e7a8      	b.n	8013e9a <_vprintf+0x31a>

08013f48 <printf>:
 8013f48:	b40f      	push	{r0, r1, r2, r3}
 8013f4a:	b507      	push	{r0, r1, r2, lr}
 8013f4c:	aa04      	add	r2, sp, #16
 8013f4e:	f852 1b04 	ldr.w	r1, [r2], #4
 8013f52:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013f56:	9201      	str	r2, [sp, #4]
 8013f58:	f7ff fe12 	bl	8013b80 <_vprintf>
 8013f5c:	b003      	add	sp, #12
 8013f5e:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f62:	b004      	add	sp, #16
 8013f64:	4770      	bx	lr
	...

08013f68 <sprintf>:
 8013f68:	b40e      	push	{r1, r2, r3}
 8013f6a:	b517      	push	{r0, r1, r2, r4, lr}
 8013f6c:	4c09      	ldr	r4, [pc, #36]	; (8013f94 <sprintf+0x2c>)
 8013f6e:	aa05      	add	r2, sp, #20
 8013f70:	f852 1b04 	ldr.w	r1, [r2], #4
 8013f74:	6020      	str	r0, [r4, #0]
 8013f76:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013f7a:	9201      	str	r2, [sp, #4]
 8013f7c:	f7ff fe00 	bl	8013b80 <_vprintf>
 8013f80:	2300      	movs	r3, #0
 8013f82:	6822      	ldr	r2, [r4, #0]
 8013f84:	6023      	str	r3, [r4, #0]
 8013f86:	7013      	strb	r3, [r2, #0]
 8013f88:	b003      	add	sp, #12
 8013f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f8e:	b003      	add	sp, #12
 8013f90:	4770      	bx	lr
 8013f92:	bf00      	nop
 8013f94:	2000a720 	andcs	sl, r0, r0, lsr #14

08013f98 <snprintf>:
 8013f98:	b40c      	push	{r2, r3}
 8013f9a:	460b      	mov	r3, r1
 8013f9c:	b513      	push	{r0, r1, r4, lr}
 8013f9e:	4c09      	ldr	r4, [pc, #36]	; (8013fc4 <snprintf+0x2c>)
 8013fa0:	aa04      	add	r2, sp, #16
 8013fa2:	f852 1b04 	ldr.w	r1, [r2], #4
 8013fa6:	6020      	str	r0, [r4, #0]
 8013fa8:	4618      	mov	r0, r3
 8013faa:	9201      	str	r2, [sp, #4]
 8013fac:	f7ff fde8 	bl	8013b80 <_vprintf>
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	6822      	ldr	r2, [r4, #0]
 8013fb4:	6023      	str	r3, [r4, #0]
 8013fb6:	7013      	strb	r3, [r2, #0]
 8013fb8:	b002      	add	sp, #8
 8013fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013fbe:	b002      	add	sp, #8
 8013fc0:	4770      	bx	lr
 8013fc2:	bf00      	nop
 8013fc4:	2000a720 	andcs	sl, r0, r0, lsr #14

08013fc8 <vsnprintf>:
 8013fc8:	b538      	push	{r3, r4, r5, lr}
 8013fca:	4605      	mov	r5, r0
 8013fcc:	4c05      	ldr	r4, [pc, #20]	; (8013fe4 <vsnprintf+0x1c>)
 8013fce:	4608      	mov	r0, r1
 8013fd0:	4611      	mov	r1, r2
 8013fd2:	461a      	mov	r2, r3
 8013fd4:	6025      	str	r5, [r4, #0]
 8013fd6:	f7ff fdd3 	bl	8013b80 <_vprintf>
 8013fda:	2300      	movs	r3, #0
 8013fdc:	6822      	ldr	r2, [r4, #0]
 8013fde:	6023      	str	r3, [r4, #0]
 8013fe0:	7013      	strb	r3, [r2, #0]
 8013fe2:	bd38      	pop	{r3, r4, r5, pc}
 8013fe4:	2000a720 	andcs	sl, r0, r0, lsr #14

08013fe8 <puts>:
 8013fe8:	b508      	push	{r3, lr}
 8013fea:	f7ff fa1b 	bl	8013424 <console_puts>
 8013fee:	200a      	movs	r0, #10
 8013ff0:	f7ff fa16 	bl	8013420 <console_putc>
 8013ff4:	2001      	movs	r0, #1
 8013ff6:	bd08      	pop	{r3, pc}

08013ff8 <strtok>:
 8013ff8:	b530      	push	{r4, r5, lr}
 8013ffa:	b910      	cbnz	r0, 8014002 <strtok+0xa>
 8013ffc:	4b12      	ldr	r3, [pc, #72]	; (8014048 <strtok+0x50>)
 8013ffe:	6818      	ldr	r0, [r3, #0]
 8014000:	b158      	cbz	r0, 801401a <strtok+0x22>
 8014002:	4603      	mov	r3, r0
 8014004:	460d      	mov	r5, r1
 8014006:	4618      	mov	r0, r3
 8014008:	f813 2b01 	ldrb.w	r2, [r3], #1
 801400c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014010:	b924      	cbnz	r4, 801401c <strtok+0x24>
 8014012:	b94a      	cbnz	r2, 8014028 <strtok+0x30>
 8014014:	4610      	mov	r0, r2
 8014016:	4b0c      	ldr	r3, [pc, #48]	; (8014048 <strtok+0x50>)
 8014018:	601a      	str	r2, [r3, #0]
 801401a:	bd30      	pop	{r4, r5, pc}
 801401c:	42a2      	cmp	r2, r4
 801401e:	d1f5      	bne.n	801400c <strtok+0x14>
 8014020:	e7f0      	b.n	8014004 <strtok+0xc>
 8014022:	4613      	mov	r3, r2
 8014024:	e00c      	b.n	8014040 <strtok+0x48>
 8014026:	b914      	cbnz	r4, 801402e <strtok+0x36>
 8014028:	460d      	mov	r5, r1
 801402a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801402e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014032:	42a2      	cmp	r2, r4
 8014034:	d1f7      	bne.n	8014026 <strtok+0x2e>
 8014036:	2a00      	cmp	r2, #0
 8014038:	d0f3      	beq.n	8014022 <strtok+0x2a>
 801403a:	2200      	movs	r2, #0
 801403c:	f803 2c01 	strb.w	r2, [r3, #-1]
 8014040:	4a01      	ldr	r2, [pc, #4]	; (8014048 <strtok+0x50>)
 8014042:	6013      	str	r3, [r2, #0]
 8014044:	e7e9      	b.n	801401a <strtok+0x22>
 8014046:	bf00      	nop
 8014048:	2000a724 	andcs	sl, r0, r4, lsr #14

0801404c <isleapyear>:
 801404c:	2264      	movs	r2, #100	; 0x64
 801404e:	fb90 f3f2 	sdiv	r3, r0, r2
 8014052:	fb02 0313 	mls	r3, r2, r3, r0
 8014056:	b94b      	cbnz	r3, 801406c <isleapyear+0x20>
 8014058:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801405c:	fb90 f2f3 	sdiv	r2, r0, r3
 8014060:	fb03 0012 	mls	r0, r3, r2, r0
 8014064:	fab0 f080 	clz	r0, r0
 8014068:	0940      	lsrs	r0, r0, #5
 801406a:	4770      	bx	lr
 801406c:	f010 0f03 	tst.w	r0, #3
 8014070:	bf0c      	ite	eq
 8014072:	2001      	moveq	r0, #1
 8014074:	2000      	movne	r0, #0
 8014076:	4770      	bx	lr

08014078 <getdaysofmonth>:
 8014078:	b510      	push	{r4, lr}
 801407a:	4604      	mov	r4, r0
 801407c:	2c01      	cmp	r4, #1
 801407e:	4608      	mov	r0, r1
 8014080:	d102      	bne.n	8014088 <getdaysofmonth+0x10>
 8014082:	f7ff ffe3 	bl	801404c <isleapyear>
 8014086:	b918      	cbnz	r0, 8014090 <getdaysofmonth+0x18>
 8014088:	4b02      	ldr	r3, [pc, #8]	; (8014094 <getdaysofmonth+0x1c>)
 801408a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801408e:	bd10      	pop	{r4, pc}
 8014090:	201d      	movs	r0, #29
 8014092:	e7fc      	b.n	801408e <getdaysofmonth+0x16>
 8014094:	080187c4 	stmdaeq	r1, {r2, r6, r7, r8, r9, sl, pc}

08014098 <mktime>:
 8014098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801409c:	4604      	mov	r4, r0
 801409e:	2800      	cmp	r0, #0
 80140a0:	d043      	beq.n	801412a <mktime+0x92>
 80140a2:	6941      	ldr	r1, [r0, #20]
 80140a4:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 80140a8:	2b45      	cmp	r3, #69	; 0x45
 80140aa:	d83e      	bhi.n	801412a <mktime+0x92>
 80140ac:	2600      	movs	r6, #0
 80140ae:	f240 75b2 	movw	r5, #1970	; 0x7b2
 80140b2:	f240 186d 	movw	r8, #365	; 0x16d
 80140b6:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 80140ba:	42af      	cmp	r7, r5
 80140bc:	da24      	bge.n	8014108 <mktime+0x70>
 80140be:	6927      	ldr	r7, [r4, #16]
 80140c0:	2f0b      	cmp	r7, #11
 80140c2:	d832      	bhi.n	801412a <mktime+0x92>
 80140c4:	2500      	movs	r5, #0
 80140c6:	42af      	cmp	r7, r5
 80140c8:	d129      	bne.n	801411e <mktime+0x86>
 80140ca:	68e5      	ldr	r5, [r4, #12]
 80140cc:	2d00      	cmp	r5, #0
 80140ce:	dd2c      	ble.n	801412a <mktime+0x92>
 80140d0:	4638      	mov	r0, r7
 80140d2:	f7ff ffd1 	bl	8014078 <getdaysofmonth>
 80140d6:	4285      	cmp	r5, r0
 80140d8:	dc27      	bgt.n	801412a <mktime+0x92>
 80140da:	2318      	movs	r3, #24
 80140dc:	3d01      	subs	r5, #1
 80140de:	4435      	add	r5, r6
 80140e0:	435d      	muls	r5, r3
 80140e2:	68a3      	ldr	r3, [r4, #8]
 80140e4:	2b17      	cmp	r3, #23
 80140e6:	d820      	bhi.n	801412a <mktime+0x92>
 80140e8:	213c      	movs	r1, #60	; 0x3c
 80140ea:	442b      	add	r3, r5
 80140ec:	fb01 f203 	mul.w	r2, r1, r3
 80140f0:	6863      	ldr	r3, [r4, #4]
 80140f2:	2b3b      	cmp	r3, #59	; 0x3b
 80140f4:	d819      	bhi.n	801412a <mktime+0x92>
 80140f6:	6820      	ldr	r0, [r4, #0]
 80140f8:	4413      	add	r3, r2
 80140fa:	283b      	cmp	r0, #59	; 0x3b
 80140fc:	fb01 f303 	mul.w	r3, r1, r3
 8014100:	d813      	bhi.n	801412a <mktime+0x92>
 8014102:	4418      	add	r0, r3
 8014104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014108:	4628      	mov	r0, r5
 801410a:	f7ff ff9f 	bl	801404c <isleapyear>
 801410e:	2800      	cmp	r0, #0
 8014110:	bf14      	ite	ne
 8014112:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8014116:	4643      	moveq	r3, r8
 8014118:	3501      	adds	r5, #1
 801411a:	441e      	add	r6, r3
 801411c:	e7cd      	b.n	80140ba <mktime+0x22>
 801411e:	4628      	mov	r0, r5
 8014120:	f7ff ffaa 	bl	8014078 <getdaysofmonth>
 8014124:	3501      	adds	r5, #1
 8014126:	4406      	add	r6, r0
 8014128:	e7cd      	b.n	80140c6 <mktime+0x2e>
 801412a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801412e:	e7e9      	b.n	8014104 <mktime+0x6c>

08014130 <gettimeofday>:
 8014130:	b538      	push	{r3, r4, r5, lr}
 8014132:	4b10      	ldr	r3, [pc, #64]	; (8014174 <gettimeofday+0x44>)
 8014134:	4a10      	ldr	r2, [pc, #64]	; (8014178 <gettimeofday+0x48>)
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	6814      	ldr	r4, [r2, #0]
 801413a:	6013      	str	r3, [r2, #0]
 801413c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014140:	429c      	cmp	r4, r3
 8014142:	bf2c      	ite	cs
 8014144:	1ae4      	subcs	r4, r4, r3
 8014146:	1b1c      	subcc	r4, r3, r4
 8014148:	4354      	muls	r4, r2
 801414a:	4b0c      	ldr	r3, [pc, #48]	; (801417c <gettimeofday+0x4c>)
 801414c:	4605      	mov	r5, r0
 801414e:	e9d3 2100 	ldrd	r2, r1, [r3]
 8014152:	18a4      	adds	r4, r4, r2
 8014154:	f141 0100 	adc.w	r1, r1, #0
 8014158:	e9c3 4100 	strd	r4, r1, [r3]
 801415c:	4620      	mov	r0, r4
 801415e:	2300      	movs	r3, #0
 8014160:	4a07      	ldr	r2, [pc, #28]	; (8014180 <gettimeofday+0x50>)
 8014162:	f7f4 f9f1 	bl	8008548 <__aeabi_uldivmod>
 8014166:	4b06      	ldr	r3, [pc, #24]	; (8014180 <gettimeofday+0x50>)
 8014168:	6028      	str	r0, [r5, #0]
 801416a:	fb03 4410 	mls	r4, r3, r0, r4
 801416e:	2000      	movs	r0, #0
 8014170:	606c      	str	r4, [r5, #4]
 8014172:	bd38      	pop	{r3, r4, r5, pc}
 8014174:	2000a734 	andcs	sl, r0, r4, lsr r7
 8014178:	2000a730 	andcs	sl, r0, r0, lsr r7
 801417c:	2000a728 	andcs	sl, r0, r8, lsr #14
 8014180:	000f4240 	andeq	r4, pc, r0, asr #4

08014184 <settimeofday>:
 8014184:	4b07      	ldr	r3, [pc, #28]	; (80141a4 <settimeofday+0x20>)
 8014186:	b510      	push	{r4, lr}
 8014188:	681a      	ldr	r2, [r3, #0]
 801418a:	4b07      	ldr	r3, [pc, #28]	; (80141a8 <settimeofday+0x24>)
 801418c:	6804      	ldr	r4, [r0, #0]
 801418e:	601a      	str	r2, [r3, #0]
 8014190:	6843      	ldr	r3, [r0, #4]
 8014192:	4806      	ldr	r0, [pc, #24]	; (80141ac <settimeofday+0x28>)
 8014194:	17da      	asrs	r2, r3, #31
 8014196:	fbc4 3200 	smlal	r3, r2, r4, r0
 801419a:	4905      	ldr	r1, [pc, #20]	; (80141b0 <settimeofday+0x2c>)
 801419c:	2000      	movs	r0, #0
 801419e:	e9c1 3200 	strd	r3, r2, [r1]
 80141a2:	bd10      	pop	{r4, pc}
 80141a4:	2000a734 	andcs	sl, r0, r4, lsr r7
 80141a8:	2000a730 	andcs	sl, r0, r0, lsr r7
 80141ac:	000f4240 	andeq	r4, pc, r0, asr #4
 80141b0:	2000a728 	andcs	sl, r0, r8, lsr #14

080141b4 <time>:
 80141b4:	b513      	push	{r0, r1, r4, lr}
 80141b6:	4604      	mov	r4, r0
 80141b8:	2100      	movs	r1, #0
 80141ba:	4668      	mov	r0, sp
 80141bc:	f7ff ffb8 	bl	8014130 <gettimeofday>
 80141c0:	9800      	ldr	r0, [sp, #0]
 80141c2:	b104      	cbz	r4, 80141c6 <time+0x12>
 80141c4:	6020      	str	r0, [r4, #0]
 80141c6:	b002      	add	sp, #8
 80141c8:	bd10      	pop	{r4, pc}
	...

080141cc <uart0_init>:
 80141cc:	2301      	movs	r3, #1
 80141ce:	b507      	push	{r0, r1, r2, lr}
 80141d0:	2208      	movs	r2, #8
 80141d2:	9300      	str	r3, [sp, #0]
 80141d4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80141d8:	2300      	movs	r3, #0
 80141da:	4803      	ldr	r0, [pc, #12]	; (80141e8 <uart0_init+0x1c>)
 80141dc:	f001 f8d2 	bl	8015384 <gd32_uart_begin>
 80141e0:	b003      	add	sp, #12
 80141e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80141e6:	bf00      	nop
 80141e8:	40013800 	andmi	r3, r1, r0, lsl #16

080141ec <uart0_putc>:
 80141ec:	280a      	cmp	r0, #10
 80141ee:	b538      	push	{r3, r4, r5, lr}
 80141f0:	4604      	mov	r4, r0
 80141f2:	d10a      	bne.n	801420a <uart0_putc+0x1e>
 80141f4:	4d0b      	ldr	r5, [pc, #44]	; (8014224 <uart0_putc+0x38>)
 80141f6:	2107      	movs	r1, #7
 80141f8:	4628      	mov	r0, r5
 80141fa:	f000 fe29 	bl	8014e50 <usart_flag_get>
 80141fe:	2800      	cmp	r0, #0
 8014200:	d0f9      	beq.n	80141f6 <uart0_putc+0xa>
 8014202:	220d      	movs	r2, #13
 8014204:	4b08      	ldr	r3, [pc, #32]	; (8014228 <uart0_putc+0x3c>)
 8014206:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 801420a:	4d06      	ldr	r5, [pc, #24]	; (8014224 <uart0_putc+0x38>)
 801420c:	2107      	movs	r1, #7
 801420e:	4628      	mov	r0, r5
 8014210:	f000 fe1e 	bl	8014e50 <usart_flag_get>
 8014214:	2800      	cmp	r0, #0
 8014216:	d0f9      	beq.n	801420c <uart0_putc+0x20>
 8014218:	4b03      	ldr	r3, [pc, #12]	; (8014228 <uart0_putc+0x3c>)
 801421a:	b2e4      	uxtb	r4, r4
 801421c:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 8014220:	bd38      	pop	{r3, r4, r5, pc}
 8014222:	bf00      	nop
 8014224:	40013800 	andmi	r3, r1, r0, lsl #16
 8014228:	40013000 	andmi	r3, r1, r0

0801422c <uart0_puts>:
 801422c:	b510      	push	{r4, lr}
 801422e:	1e44      	subs	r4, r0, #1
 8014230:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014234:	b903      	cbnz	r3, 8014238 <uart0_puts+0xc>
 8014236:	bd10      	pop	{r4, pc}
 8014238:	2b0a      	cmp	r3, #10
 801423a:	d102      	bne.n	8014242 <uart0_puts+0x16>
 801423c:	200d      	movs	r0, #13
 801423e:	f7ff ffd5 	bl	80141ec <uart0_putc>
 8014242:	7820      	ldrb	r0, [r4, #0]
 8014244:	f7ff ffd2 	bl	80141ec <uart0_putc>
 8014248:	e7f2      	b.n	8014230 <uart0_puts+0x4>
	...

0801424c <systick_config>:
 801424c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014250:	4b0b      	ldr	r3, [pc, #44]	; (8014280 <systick_config+0x34>)
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	fbb3 f3f2 	udiv	r3, r3, r2
 8014258:	3b01      	subs	r3, #1
 801425a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801425e:	d20d      	bcs.n	801427c <systick_config+0x30>
 8014260:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8014264:	21f0      	movs	r1, #240	; 0xf0
 8014266:	6153      	str	r3, [r2, #20]
 8014268:	4b06      	ldr	r3, [pc, #24]	; (8014284 <systick_config+0x38>)
 801426a:	2007      	movs	r0, #7
 801426c:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8014270:	2100      	movs	r1, #0
 8014272:	6191      	str	r1, [r2, #24]
 8014274:	6110      	str	r0, [r2, #16]
 8014276:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 801427a:	4770      	bx	lr
 801427c:	e7fe      	b.n	801427c <systick_config+0x30>
 801427e:	bf00      	nop
 8014280:	200000f4 	strdcs	r0, [r0], -r4
 8014284:	e000ed00 	and	lr, r0, r0, lsl #26

08014288 <SysTick_Handler>:
 8014288:	4a02      	ldr	r2, [pc, #8]	; (8014294 <SysTick_Handler+0xc>)
 801428a:	6813      	ldr	r3, [r2, #0]
 801428c:	3301      	adds	r3, #1
 801428e:	6013      	str	r3, [r2, #0]
 8014290:	4770      	bx	lr
 8014292:	bf00      	nop
 8014294:	2000a734 	andcs	sl, r0, r4, lsr r7

08014298 <SystemInit>:
 8014298:	4b3a      	ldr	r3, [pc, #232]	; (8014384 <SystemInit+0xec>)
 801429a:	681a      	ldr	r2, [r3, #0]
 801429c:	f042 0201 	orr.w	r2, r2, #1
 80142a0:	601a      	str	r2, [r3, #0]
 80142a2:	6859      	ldr	r1, [r3, #4]
 80142a4:	4a38      	ldr	r2, [pc, #224]	; (8014388 <SystemInit+0xf0>)
 80142a6:	400a      	ands	r2, r1
 80142a8:	605a      	str	r2, [r3, #4]
 80142aa:	681a      	ldr	r2, [r3, #0]
 80142ac:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 80142b0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80142b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80142b8:	601a      	str	r2, [r3, #0]
 80142ba:	681a      	ldr	r2, [r3, #0]
 80142bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80142c0:	601a      	str	r2, [r3, #0]
 80142c2:	685a      	ldr	r2, [r3, #4]
 80142c4:	f022 5203 	bic.w	r2, r2, #549453824	; 0x20c00000
 80142c8:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80142cc:	605a      	str	r2, [r3, #4]
 80142ce:	681a      	ldr	r2, [r3, #0]
 80142d0:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 80142d4:	601a      	str	r2, [r3, #0]
 80142d6:	2200      	movs	r2, #0
 80142d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80142da:	6099      	str	r1, [r3, #8]
 80142dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80142e0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80142e4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80142e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80142ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80142f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80142f4:	4a25      	ldr	r2, [pc, #148]	; (801438c <SystemInit+0xf4>)
 80142f6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80142fa:	681a      	ldr	r2, [r3, #0]
 80142fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8014300:	601a      	str	r2, [r3, #0]
 8014302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014306:	6819      	ldr	r1, [r3, #0]
 8014308:	0389      	lsls	r1, r1, #14
 801430a:	d401      	bmi.n	8014310 <SystemInit+0x78>
 801430c:	3a01      	subs	r2, #1
 801430e:	d1fa      	bne.n	8014306 <SystemInit+0x6e>
 8014310:	681a      	ldr	r2, [r3, #0]
 8014312:	0392      	lsls	r2, r2, #14
 8014314:	d400      	bmi.n	8014318 <SystemInit+0x80>
 8014316:	e7fe      	b.n	8014316 <SystemInit+0x7e>
 8014318:	685a      	ldr	r2, [r3, #4]
 801431a:	605a      	str	r2, [r3, #4]
 801431c:	685a      	ldr	r2, [r3, #4]
 801431e:	605a      	str	r2, [r3, #4]
 8014320:	685a      	ldr	r2, [r3, #4]
 8014322:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014326:	605a      	str	r2, [r3, #4]
 8014328:	685a      	ldr	r2, [r3, #4]
 801432a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 801432e:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8014332:	605a      	str	r2, [r3, #4]
 8014334:	685a      	ldr	r2, [r3, #4]
 8014336:	f442 1204 	orr.w	r2, r2, #2162688	; 0x210000
 801433a:	605a      	str	r2, [r3, #4]
 801433c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801433e:	4a14      	ldr	r2, [pc, #80]	; (8014390 <SystemInit+0xf8>)
 8014340:	400a      	ands	r2, r1
 8014342:	62da      	str	r2, [r3, #44]	; 0x2c
 8014344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014346:	f442 3285 	orr.w	r2, r2, #68096	; 0x10a00
 801434a:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 801434e:	62da      	str	r2, [r3, #44]	; 0x2c
 8014350:	681a      	ldr	r2, [r3, #0]
 8014352:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8014356:	601a      	str	r2, [r3, #0]
 8014358:	681a      	ldr	r2, [r3, #0]
 801435a:	0110      	lsls	r0, r2, #4
 801435c:	d5fc      	bpl.n	8014358 <SystemInit+0xc0>
 801435e:	681a      	ldr	r2, [r3, #0]
 8014360:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8014364:	601a      	str	r2, [r3, #0]
 8014366:	681a      	ldr	r2, [r3, #0]
 8014368:	0191      	lsls	r1, r2, #6
 801436a:	d5fc      	bpl.n	8014366 <SystemInit+0xce>
 801436c:	685a      	ldr	r2, [r3, #4]
 801436e:	f022 0203 	bic.w	r2, r2, #3
 8014372:	605a      	str	r2, [r3, #4]
 8014374:	685a      	ldr	r2, [r3, #4]
 8014376:	f042 0202 	orr.w	r2, r2, #2
 801437a:	605a      	str	r2, [r3, #4]
 801437c:	685a      	ldr	r2, [r3, #4]
 801437e:	0712      	lsls	r2, r2, #28
 8014380:	d5fc      	bpl.n	801437c <SystemInit+0xe4>
 8014382:	4770      	bx	lr
 8014384:	40021000 	andmi	r1, r2, r0
 8014388:	e0ff000c 	rscs	r0, pc, ip
 801438c:	20003010 	andcs	r3, r0, r0, lsl r0
 8014390:	fffef000 			; <UNDEFINED> instruction: 0xfffef000

08014394 <bkp_deinit>:
 8014394:	b508      	push	{r3, lr}
 8014396:	f000 f9d5 	bl	8014744 <rcu_bkp_reset_enable>
 801439a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801439e:	f000 b9d9 	b.w	8014754 <rcu_bkp_reset_disable>
	...

080143a4 <bkp_data_write>:
 80143a4:	f1a0 030b 	sub.w	r3, r0, #11
 80143a8:	2b1f      	cmp	r3, #31
 80143aa:	d804      	bhi.n	80143b6 <bkp_data_write+0x12>
 80143ac:	4b07      	ldr	r3, [pc, #28]	; (80143cc <bkp_data_write+0x28>)
 80143ae:	4403      	add	r3, r0
 80143b0:	009b      	lsls	r3, r3, #2
 80143b2:	8019      	strh	r1, [r3, #0]
 80143b4:	4770      	bx	lr
 80143b6:	1e43      	subs	r3, r0, #1
 80143b8:	2b09      	cmp	r3, #9
 80143ba:	bf9f      	itttt	ls
 80143bc:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 80143c0:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 80143c4:	0080      	lslls	r0, r0, #2
 80143c6:	8001      	strhls	r1, [r0, #0]
 80143c8:	4770      	bx	lr
 80143ca:	bf00      	nop
 80143cc:	10001b05 	andne	r1, r0, r5, lsl #22

080143d0 <bkp_data_read>:
 80143d0:	f1a0 030b 	sub.w	r3, r0, #11
 80143d4:	2b1f      	cmp	r3, #31
 80143d6:	d805      	bhi.n	80143e4 <bkp_data_read+0x14>
 80143d8:	4b08      	ldr	r3, [pc, #32]	; (80143fc <bkp_data_read+0x2c>)
 80143da:	4403      	add	r3, r0
 80143dc:	009b      	lsls	r3, r3, #2
 80143de:	8818      	ldrh	r0, [r3, #0]
 80143e0:	b280      	uxth	r0, r0
 80143e2:	4770      	bx	lr
 80143e4:	1e43      	subs	r3, r0, #1
 80143e6:	2b09      	cmp	r3, #9
 80143e8:	d806      	bhi.n	80143f8 <bkp_data_read+0x28>
 80143ea:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 80143ee:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 80143f2:	0080      	lsls	r0, r0, #2
 80143f4:	8800      	ldrh	r0, [r0, #0]
 80143f6:	e7f3      	b.n	80143e0 <bkp_data_read+0x10>
 80143f8:	2000      	movs	r0, #0
 80143fa:	4770      	bx	lr
 80143fc:	10001b05 	andne	r1, r0, r5, lsl #22

08014400 <dma_deinit>:
 8014400:	2314      	movs	r3, #20
 8014402:	fb03 0301 	mla	r3, r3, r1, r0
 8014406:	689a      	ldr	r2, [r3, #8]
 8014408:	b530      	push	{r4, r5, lr}
 801440a:	f022 0201 	bic.w	r2, r2, #1
 801440e:	609a      	str	r2, [r3, #8]
 8014410:	2200      	movs	r2, #0
 8014412:	609a      	str	r2, [r3, #8]
 8014414:	60da      	str	r2, [r3, #12]
 8014416:	611a      	str	r2, [r3, #16]
 8014418:	615a      	str	r2, [r3, #20]
 801441a:	230f      	movs	r3, #15
 801441c:	6844      	ldr	r4, [r0, #4]
 801441e:	008d      	lsls	r5, r1, #2
 8014420:	40ab      	lsls	r3, r5
 8014422:	4323      	orrs	r3, r4
 8014424:	6043      	str	r3, [r0, #4]
 8014426:	4b04      	ldr	r3, [pc, #16]	; (8014438 <dma_deinit+0x38>)
 8014428:	4298      	cmp	r0, r3
 801442a:	d103      	bne.n	8014434 <dma_deinit+0x34>
 801442c:	2905      	cmp	r1, #5
 801442e:	bf08      	it	eq
 8014430:	f8c3 2300 	streq.w	r2, [r3, #768]	; 0x300
 8014434:	bd30      	pop	{r4, r5, pc}
 8014436:	bf00      	nop
 8014438:	40020400 	andmi	r0, r2, r0, lsl #8

0801443c <dma_init>:
 801443c:	2314      	movs	r3, #20
 801443e:	fb03 0101 	mla	r1, r3, r1, r0
 8014442:	6813      	ldr	r3, [r2, #0]
 8014444:	b510      	push	{r4, lr}
 8014446:	610b      	str	r3, [r1, #16]
 8014448:	6893      	ldr	r3, [r2, #8]
 801444a:	614b      	str	r3, [r1, #20]
 801444c:	8a13      	ldrh	r3, [r2, #16]
 801444e:	60cb      	str	r3, [r1, #12]
 8014450:	68d4      	ldr	r4, [r2, #12]
 8014452:	6853      	ldr	r3, [r2, #4]
 8014454:	6888      	ldr	r0, [r1, #8]
 8014456:	4323      	orrs	r3, r4
 8014458:	6954      	ldr	r4, [r2, #20]
 801445a:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 801445e:	4323      	orrs	r3, r4
 8014460:	4303      	orrs	r3, r0
 8014462:	608b      	str	r3, [r1, #8]
 8014464:	7e13      	ldrb	r3, [r2, #24]
 8014466:	2b01      	cmp	r3, #1
 8014468:	688b      	ldr	r3, [r1, #8]
 801446a:	bf0c      	ite	eq
 801446c:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8014470:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8014474:	608b      	str	r3, [r1, #8]
 8014476:	7e53      	ldrb	r3, [r2, #25]
 8014478:	2b01      	cmp	r3, #1
 801447a:	688b      	ldr	r3, [r1, #8]
 801447c:	bf0c      	ite	eq
 801447e:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8014482:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8014486:	608b      	str	r3, [r1, #8]
 8014488:	7e93      	ldrb	r3, [r2, #26]
 801448a:	b923      	cbnz	r3, 8014496 <dma_init+0x5a>
 801448c:	688b      	ldr	r3, [r1, #8]
 801448e:	f023 0310 	bic.w	r3, r3, #16
 8014492:	608b      	str	r3, [r1, #8]
 8014494:	bd10      	pop	{r4, pc}
 8014496:	688b      	ldr	r3, [r1, #8]
 8014498:	f043 0310 	orr.w	r3, r3, #16
 801449c:	e7f9      	b.n	8014492 <dma_init+0x56>

0801449e <dma_circulation_disable>:
 801449e:	2314      	movs	r3, #20
 80144a0:	4359      	muls	r1, r3
 80144a2:	3008      	adds	r0, #8
 80144a4:	580b      	ldr	r3, [r1, r0]
 80144a6:	f023 0320 	bic.w	r3, r3, #32
 80144aa:	500b      	str	r3, [r1, r0]
 80144ac:	4770      	bx	lr

080144ae <dma_memory_to_memory_disable>:
 80144ae:	2314      	movs	r3, #20
 80144b0:	4359      	muls	r1, r3
 80144b2:	3008      	adds	r0, #8
 80144b4:	580b      	ldr	r3, [r1, r0]
 80144b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80144ba:	500b      	str	r3, [r1, r0]
 80144bc:	4770      	bx	lr
	...

080144c0 <fmc_bank0_unlock>:
 80144c0:	4b04      	ldr	r3, [pc, #16]	; (80144d4 <fmc_bank0_unlock+0x14>)
 80144c2:	691a      	ldr	r2, [r3, #16]
 80144c4:	0612      	lsls	r2, r2, #24
 80144c6:	bf41      	itttt	mi
 80144c8:	4a03      	ldrmi	r2, [pc, #12]	; (80144d8 <fmc_bank0_unlock+0x18>)
 80144ca:	605a      	strmi	r2, [r3, #4]
 80144cc:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 80144d0:	605a      	strmi	r2, [r3, #4]
 80144d2:	4770      	bx	lr
 80144d4:	40022000 	andmi	r2, r2, r0
 80144d8:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

080144dc <fmc_bank1_unlock>:
 80144dc:	4b04      	ldr	r3, [pc, #16]	; (80144f0 <fmc_bank1_unlock+0x14>)
 80144de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80144e0:	0612      	lsls	r2, r2, #24
 80144e2:	bf41      	itttt	mi
 80144e4:	4a03      	ldrmi	r2, [pc, #12]	; (80144f4 <fmc_bank1_unlock+0x18>)
 80144e6:	645a      	strmi	r2, [r3, #68]	; 0x44
 80144e8:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 80144ec:	645a      	strmi	r2, [r3, #68]	; 0x44
 80144ee:	4770      	bx	lr
 80144f0:	40022000 	andmi	r2, r2, r0
 80144f4:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

080144f8 <fmc_bank0_lock>:
 80144f8:	4a02      	ldr	r2, [pc, #8]	; (8014504 <fmc_bank0_lock+0xc>)
 80144fa:	6913      	ldr	r3, [r2, #16]
 80144fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014500:	6113      	str	r3, [r2, #16]
 8014502:	4770      	bx	lr
 8014504:	40022000 	andmi	r2, r2, r0

08014508 <fmc_bank1_lock>:
 8014508:	4a02      	ldr	r2, [pc, #8]	; (8014514 <fmc_bank1_lock+0xc>)
 801450a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 801450c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014510:	6513      	str	r3, [r2, #80]	; 0x50
 8014512:	4770      	bx	lr
 8014514:	40022000 	andmi	r2, r2, r0

08014518 <fmc_bank0_state_get>:
 8014518:	4b07      	ldr	r3, [pc, #28]	; (8014538 <fmc_bank0_state_get+0x20>)
 801451a:	68da      	ldr	r2, [r3, #12]
 801451c:	07d1      	lsls	r1, r2, #31
 801451e:	d407      	bmi.n	8014530 <fmc_bank0_state_get+0x18>
 8014520:	68da      	ldr	r2, [r3, #12]
 8014522:	06d2      	lsls	r2, r2, #27
 8014524:	d406      	bmi.n	8014534 <fmc_bank0_state_get+0x1c>
 8014526:	68d8      	ldr	r0, [r3, #12]
 8014528:	f3c0 0080 	ubfx	r0, r0, #2, #1
 801452c:	0040      	lsls	r0, r0, #1
 801452e:	4770      	bx	lr
 8014530:	2001      	movs	r0, #1
 8014532:	4770      	bx	lr
 8014534:	2003      	movs	r0, #3
 8014536:	4770      	bx	lr
 8014538:	40022000 	andmi	r2, r2, r0

0801453c <fmc_bank1_state_get>:
 801453c:	4b07      	ldr	r3, [pc, #28]	; (801455c <fmc_bank1_state_get+0x20>)
 801453e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014540:	07d1      	lsls	r1, r2, #31
 8014542:	d407      	bmi.n	8014554 <fmc_bank1_state_get+0x18>
 8014544:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014546:	06d2      	lsls	r2, r2, #27
 8014548:	d406      	bmi.n	8014558 <fmc_bank1_state_get+0x1c>
 801454a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801454c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8014550:	0040      	lsls	r0, r0, #1
 8014552:	4770      	bx	lr
 8014554:	2001      	movs	r0, #1
 8014556:	4770      	bx	lr
 8014558:	2003      	movs	r0, #3
 801455a:	4770      	bx	lr
 801455c:	40022000 	andmi	r2, r2, r0

08014560 <fwdgt_enable>:
 8014560:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8014564:	4b01      	ldr	r3, [pc, #4]	; (801456c <fwdgt_enable+0xc>)
 8014566:	601a      	str	r2, [r3, #0]
 8014568:	4770      	bx	lr
 801456a:	bf00      	nop
 801456c:	40003000 	andmi	r3, r0, r0

08014570 <fwdgt_counter_reload>:
 8014570:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8014574:	4b01      	ldr	r3, [pc, #4]	; (801457c <fwdgt_counter_reload+0xc>)
 8014576:	601a      	str	r2, [r3, #0]
 8014578:	4770      	bx	lr
 801457a:	bf00      	nop
 801457c:	40003000 	andmi	r3, r0, r0

08014580 <fwdgt_config>:
 8014580:	f245 5355 	movw	r3, #21845	; 0x5555
 8014584:	4a11      	ldr	r2, [pc, #68]	; (80145cc <fwdgt_config+0x4c>)
 8014586:	b510      	push	{r4, lr}
 8014588:	4c11      	ldr	r4, [pc, #68]	; (80145d0 <fwdgt_config+0x50>)
 801458a:	6013      	str	r3, [r2, #0]
 801458c:	68d3      	ldr	r3, [r2, #12]
 801458e:	3c01      	subs	r4, #1
 8014590:	f003 0301 	and.w	r3, r3, #1
 8014594:	d013      	beq.n	80145be <fwdgt_config+0x3e>
 8014596:	2b00      	cmp	r3, #0
 8014598:	d1f8      	bne.n	801458c <fwdgt_config+0xc>
 801459a:	6051      	str	r1, [r2, #4]
 801459c:	490c      	ldr	r1, [pc, #48]	; (80145d0 <fwdgt_config+0x50>)
 801459e:	4a0b      	ldr	r2, [pc, #44]	; (80145cc <fwdgt_config+0x4c>)
 80145a0:	68d3      	ldr	r3, [r2, #12]
 80145a2:	3901      	subs	r1, #1
 80145a4:	f003 0302 	and.w	r3, r3, #2
 80145a8:	d00d      	beq.n	80145c6 <fwdgt_config+0x46>
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d1f8      	bne.n	80145a0 <fwdgt_config+0x20>
 80145ae:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80145b2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80145b6:	6090      	str	r0, [r2, #8]
 80145b8:	2001      	movs	r0, #1
 80145ba:	6013      	str	r3, [r2, #0]
 80145bc:	e002      	b.n	80145c4 <fwdgt_config+0x44>
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d0eb      	beq.n	801459a <fwdgt_config+0x1a>
 80145c2:	2000      	movs	r0, #0
 80145c4:	bd10      	pop	{r4, pc}
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d1fb      	bne.n	80145c2 <fwdgt_config+0x42>
 80145ca:	e7f0      	b.n	80145ae <fwdgt_config+0x2e>
 80145cc:	40003000 	andmi	r3, r0, r0
 80145d0:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

080145d4 <gpio_init>:
 80145d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145d8:	f04f 0c0f 	mov.w	ip, #15
 80145dc:	06cf      	lsls	r7, r1, #27
 80145de:	f04f 0400 	mov.w	r4, #0
 80145e2:	f04f 0701 	mov.w	r7, #1
 80145e6:	f001 050f 	and.w	r5, r1, #15
 80145ea:	bf48      	it	mi
 80145ec:	4315      	orrmi	r5, r2
 80145ee:	fa23 f204 	lsr.w	r2, r3, r4
 80145f2:	07d6      	lsls	r6, r2, #31
 80145f4:	d510      	bpl.n	8014618 <gpio_init+0x44>
 80145f6:	00a2      	lsls	r2, r4, #2
 80145f8:	6806      	ldr	r6, [r0, #0]
 80145fa:	fa0c fe02 	lsl.w	lr, ip, r2
 80145fe:	ea26 060e 	bic.w	r6, r6, lr
 8014602:	fa05 f202 	lsl.w	r2, r5, r2
 8014606:	2928      	cmp	r1, #40	; 0x28
 8014608:	ea42 0206 	orr.w	r2, r2, r6
 801460c:	d128      	bne.n	8014660 <gpio_init+0x8c>
 801460e:	fa07 f604 	lsl.w	r6, r7, r4
 8014612:	401e      	ands	r6, r3
 8014614:	6146      	str	r6, [r0, #20]
 8014616:	6002      	str	r2, [r0, #0]
 8014618:	3401      	adds	r4, #1
 801461a:	2c08      	cmp	r4, #8
 801461c:	d1e7      	bne.n	80145ee <gpio_init+0x1a>
 801461e:	2600      	movs	r6, #0
 8014620:	f04f 0c0f 	mov.w	ip, #15
 8014624:	2701      	movs	r7, #1
 8014626:	f106 0208 	add.w	r2, r6, #8
 801462a:	fa23 f402 	lsr.w	r4, r3, r2
 801462e:	07e4      	lsls	r4, r4, #31
 8014630:	d511      	bpl.n	8014656 <gpio_init+0x82>
 8014632:	00b4      	lsls	r4, r6, #2
 8014634:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8014638:	fa0c f804 	lsl.w	r8, ip, r4
 801463c:	ea2e 0e08 	bic.w	lr, lr, r8
 8014640:	fa05 f404 	lsl.w	r4, r5, r4
 8014644:	2928      	cmp	r1, #40	; 0x28
 8014646:	ea44 040e 	orr.w	r4, r4, lr
 801464a:	d110      	bne.n	801466e <gpio_init+0x9a>
 801464c:	fa07 f202 	lsl.w	r2, r7, r2
 8014650:	401a      	ands	r2, r3
 8014652:	6142      	str	r2, [r0, #20]
 8014654:	6044      	str	r4, [r0, #4]
 8014656:	3601      	adds	r6, #1
 8014658:	2e08      	cmp	r6, #8
 801465a:	d1e4      	bne.n	8014626 <gpio_init+0x52>
 801465c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014660:	2948      	cmp	r1, #72	; 0x48
 8014662:	bf02      	ittt	eq
 8014664:	fa07 f604 	lsleq.w	r6, r7, r4
 8014668:	401e      	andeq	r6, r3
 801466a:	6106      	streq	r6, [r0, #16]
 801466c:	e7d3      	b.n	8014616 <gpio_init+0x42>
 801466e:	2948      	cmp	r1, #72	; 0x48
 8014670:	bf02      	ittt	eq
 8014672:	fa07 f202 	lsleq.w	r2, r7, r2
 8014676:	401a      	andeq	r2, r3
 8014678:	6102      	streq	r2, [r0, #16]
 801467a:	e7eb      	b.n	8014654 <gpio_init+0x80>

0801467c <gpio_pin_remap_config>:
 801467c:	2800      	cmp	r0, #0
 801467e:	4a16      	ldr	r2, [pc, #88]	; (80146d8 <gpio_pin_remap_config+0x5c>)
 8014680:	b530      	push	{r4, r5, lr}
 8014682:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8014686:	bfb4      	ite	lt
 8014688:	69d3      	ldrlt	r3, [r2, #28]
 801468a:	6853      	ldrge	r3, [r2, #4]
 801468c:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8014690:	b284      	uxth	r4, r0
 8014692:	d110      	bne.n	80146b6 <gpio_pin_remap_config+0x3a>
 8014694:	6855      	ldr	r5, [r2, #4]
 8014696:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 801469a:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 801469e:	6055      	str	r5, [r2, #4]
 80146a0:	b119      	cbz	r1, 80146aa <gpio_pin_remap_config+0x2e>
 80146a2:	0d42      	lsrs	r2, r0, #21
 80146a4:	0112      	lsls	r2, r2, #4
 80146a6:	4094      	lsls	r4, r2
 80146a8:	4323      	orrs	r3, r4
 80146aa:	4a0b      	ldr	r2, [pc, #44]	; (80146d8 <gpio_pin_remap_config+0x5c>)
 80146ac:	2800      	cmp	r0, #0
 80146ae:	bfb4      	ite	lt
 80146b0:	61d3      	strlt	r3, [r2, #28]
 80146b2:	6053      	strge	r3, [r2, #4]
 80146b4:	bd30      	pop	{r4, r5, pc}
 80146b6:	02c2      	lsls	r2, r0, #11
 80146b8:	bf4d      	iteet	mi
 80146ba:	2203      	movmi	r2, #3
 80146bc:	0d42      	lsrpl	r2, r0, #21
 80146be:	0112      	lslpl	r2, r2, #4
 80146c0:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 80146c4:	bf4c      	ite	mi
 80146c6:	40aa      	lslmi	r2, r5
 80146c8:	fa04 f202 	lslpl.w	r2, r4, r2
 80146cc:	ea23 0302 	bic.w	r3, r3, r2
 80146d0:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80146d4:	e7e4      	b.n	80146a0 <gpio_pin_remap_config+0x24>
 80146d6:	bf00      	nop
 80146d8:	40010000 	andmi	r0, r1, r0

080146dc <gpio_ethernet_phy_select>:
 80146dc:	4b04      	ldr	r3, [pc, #16]	; (80146f0 <gpio_ethernet_phy_select+0x14>)
 80146de:	685a      	ldr	r2, [r3, #4]
 80146e0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80146e4:	605a      	str	r2, [r3, #4]
 80146e6:	685a      	ldr	r2, [r3, #4]
 80146e8:	4302      	orrs	r2, r0
 80146ea:	605a      	str	r2, [r3, #4]
 80146ec:	4770      	bx	lr
 80146ee:	bf00      	nop
 80146f0:	40010000 	andmi	r0, r1, r0

080146f4 <pmu_backup_write_enable>:
 80146f4:	4a02      	ldr	r2, [pc, #8]	; (8014700 <pmu_backup_write_enable+0xc>)
 80146f6:	6813      	ldr	r3, [r2, #0]
 80146f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80146fc:	6013      	str	r3, [r2, #0]
 80146fe:	4770      	bx	lr
 8014700:	40007000 	andmi	r7, r0, r0

08014704 <rcu_periph_clock_enable>:
 8014704:	2201      	movs	r2, #1
 8014706:	0983      	lsrs	r3, r0, #6
 8014708:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801470c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8014710:	6819      	ldr	r1, [r3, #0]
 8014712:	f000 001f 	and.w	r0, r0, #31
 8014716:	4082      	lsls	r2, r0
 8014718:	430a      	orrs	r2, r1
 801471a:	601a      	str	r2, [r3, #0]
 801471c:	4770      	bx	lr

0801471e <rcu_periph_clock_disable>:
 801471e:	2101      	movs	r1, #1
 8014720:	0983      	lsrs	r3, r0, #6
 8014722:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014726:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 801472a:	681a      	ldr	r2, [r3, #0]
 801472c:	f000 001f 	and.w	r0, r0, #31
 8014730:	4081      	lsls	r1, r0
 8014732:	ea22 0201 	bic.w	r2, r2, r1
 8014736:	601a      	str	r2, [r3, #0]
 8014738:	4770      	bx	lr

0801473a <rcu_periph_reset_enable>:
 801473a:	f7ff bfe3 	b.w	8014704 <rcu_periph_clock_enable>

0801473e <rcu_periph_reset_disable>:
 801473e:	f7ff bfee 	b.w	801471e <rcu_periph_clock_disable>
	...

08014744 <rcu_bkp_reset_enable>:
 8014744:	4a02      	ldr	r2, [pc, #8]	; (8014750 <rcu_bkp_reset_enable+0xc>)
 8014746:	6a13      	ldr	r3, [r2, #32]
 8014748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801474c:	6213      	str	r3, [r2, #32]
 801474e:	4770      	bx	lr
 8014750:	40021000 	andmi	r1, r2, r0

08014754 <rcu_bkp_reset_disable>:
 8014754:	4a02      	ldr	r2, [pc, #8]	; (8014760 <rcu_bkp_reset_disable+0xc>)
 8014756:	6a13      	ldr	r3, [r2, #32]
 8014758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801475c:	6213      	str	r3, [r2, #32]
 801475e:	4770      	bx	lr
 8014760:	40021000 	andmi	r1, r2, r0

08014764 <rcu_ckout0_config>:
 8014764:	4a06      	ldr	r2, [pc, #24]	; (8014780 <rcu_ckout0_config+0x1c>)
 8014766:	6853      	ldr	r3, [r2, #4]
 8014768:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 801476c:	4303      	orrs	r3, r0
 801476e:	6053      	str	r3, [r2, #4]
 8014770:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8014774:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8014778:	430b      	orrs	r3, r1
 801477a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801477e:	4770      	bx	lr
 8014780:	40021000 	andmi	r1, r2, r0

08014784 <rcu_pll2_config>:
 8014784:	4b04      	ldr	r3, [pc, #16]	; (8014798 <rcu_pll2_config+0x14>)
 8014786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014788:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 801478c:	62da      	str	r2, [r3, #44]	; 0x2c
 801478e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014790:	4302      	orrs	r2, r0
 8014792:	62da      	str	r2, [r3, #44]	; 0x2c
 8014794:	4770      	bx	lr
 8014796:	bf00      	nop
 8014798:	40021000 	andmi	r1, r2, r0

0801479c <rcu_adc_clock_config>:
 801479c:	490c      	ldr	r1, [pc, #48]	; (80147d0 <rcu_adc_clock_config+0x34>)
 801479e:	2805      	cmp	r0, #5
 80147a0:	684b      	ldr	r3, [r1, #4]
 80147a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80147a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80147aa:	d006      	beq.n	80147ba <rcu_adc_clock_config+0x1e>
 80147ac:	d803      	bhi.n	80147b6 <rcu_adc_clock_config+0x1a>
 80147ae:	2804      	cmp	r0, #4
 80147b0:	d10a      	bne.n	80147c8 <rcu_adc_clock_config+0x2c>
 80147b2:	604b      	str	r3, [r1, #4]
 80147b4:	4770      	bx	lr
 80147b6:	2807      	cmp	r0, #7
 80147b8:	d1fb      	bne.n	80147b2 <rcu_adc_clock_config+0x16>
 80147ba:	4a06      	ldr	r2, [pc, #24]	; (80147d4 <rcu_adc_clock_config+0x38>)
 80147bc:	ea02 3280 	and.w	r2, r2, r0, lsl #14
 80147c0:	4313      	orrs	r3, r2
 80147c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80147c6:	e7f4      	b.n	80147b2 <rcu_adc_clock_config+0x16>
 80147c8:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 80147cc:	e7f1      	b.n	80147b2 <rcu_adc_clock_config+0x16>
 80147ce:	bf00      	nop
 80147d0:	40021000 	andmi	r1, r2, r0
 80147d4:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

080147d8 <rcu_flag_get>:
 80147d8:	0983      	lsrs	r3, r0, #6
 80147da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80147de:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80147e2:	681a      	ldr	r2, [r3, #0]
 80147e4:	2301      	movs	r3, #1
 80147e6:	f000 001f 	and.w	r0, r0, #31
 80147ea:	4083      	lsls	r3, r0
 80147ec:	4213      	tst	r3, r2
 80147ee:	bf14      	ite	ne
 80147f0:	2001      	movne	r0, #1
 80147f2:	2000      	moveq	r0, #0
 80147f4:	4770      	bx	lr
	...

080147f8 <rcu_osci_stab_wait>:
 80147f8:	281c      	cmp	r0, #28
 80147fa:	b508      	push	{r3, lr}
 80147fc:	d056      	beq.n	80148ac <rcu_osci_stab_wait+0xb4>
 80147fe:	d812      	bhi.n	8014826 <rcu_osci_stab_wait+0x2e>
 8014800:	2818      	cmp	r0, #24
 8014802:	d04a      	beq.n	801489a <rcu_osci_stab_wait+0xa2>
 8014804:	d804      	bhi.n	8014810 <rcu_osci_stab_wait+0x18>
 8014806:	b398      	cbz	r0, 8014870 <rcu_osci_stab_wait+0x78>
 8014808:	2810      	cmp	r0, #16
 801480a:	d022      	beq.n	8014852 <rcu_osci_stab_wait+0x5a>
 801480c:	2000      	movs	r0, #0
 801480e:	bd08      	pop	{r3, pc}
 8014810:	281a      	cmp	r0, #26
 8014812:	d1fb      	bne.n	801480c <rcu_osci_stab_wait+0x14>
 8014814:	492f      	ldr	r1, [pc, #188]	; (80148d4 <rcu_osci_stab_wait+0xdc>)
 8014816:	201b      	movs	r0, #27
 8014818:	f7ff ffde 	bl	80147d8 <rcu_flag_get>
 801481c:	b908      	cbnz	r0, 8014822 <rcu_osci_stab_wait+0x2a>
 801481e:	3901      	subs	r1, #1
 8014820:	d1f9      	bne.n	8014816 <rcu_osci_stab_wait+0x1e>
 8014822:	201b      	movs	r0, #27
 8014824:	e01e      	b.n	8014864 <rcu_osci_stab_wait+0x6c>
 8014826:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 801482a:	d02b      	beq.n	8014884 <rcu_osci_stab_wait+0x8c>
 801482c:	f242 431c 	movw	r3, #9244	; 0x241c
 8014830:	4298      	cmp	r0, r3
 8014832:	d044      	beq.n	80148be <rcu_osci_stab_wait+0xc6>
 8014834:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8014838:	d1e8      	bne.n	801480c <rcu_osci_stab_wait+0x14>
 801483a:	f06f 417c 	mvn.w	r1, #4227858432	; 0xfc000000
 801483e:	f640 0001 	movw	r0, #2049	; 0x801
 8014842:	f7ff ffc9 	bl	80147d8 <rcu_flag_get>
 8014846:	b908      	cbnz	r0, 801484c <rcu_osci_stab_wait+0x54>
 8014848:	3901      	subs	r1, #1
 801484a:	d1f8      	bne.n	801483e <rcu_osci_stab_wait+0x46>
 801484c:	f640 0001 	movw	r0, #2049	; 0x801
 8014850:	e008      	b.n	8014864 <rcu_osci_stab_wait+0x6c>
 8014852:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014856:	2011      	movs	r0, #17
 8014858:	f7ff ffbe 	bl	80147d8 <rcu_flag_get>
 801485c:	b908      	cbnz	r0, 8014862 <rcu_osci_stab_wait+0x6a>
 801485e:	3901      	subs	r1, #1
 8014860:	d1f9      	bne.n	8014856 <rcu_osci_stab_wait+0x5e>
 8014862:	2011      	movs	r0, #17
 8014864:	f7ff ffb8 	bl	80147d8 <rcu_flag_get>
 8014868:	3800      	subs	r0, #0
 801486a:	bf18      	it	ne
 801486c:	2001      	movne	r0, #1
 801486e:	e7ce      	b.n	801480e <rcu_osci_stab_wait+0x16>
 8014870:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8014874:	2001      	movs	r0, #1
 8014876:	f7ff ffaf 	bl	80147d8 <rcu_flag_get>
 801487a:	b908      	cbnz	r0, 8014880 <rcu_osci_stab_wait+0x88>
 801487c:	3901      	subs	r1, #1
 801487e:	d1f9      	bne.n	8014874 <rcu_osci_stab_wait+0x7c>
 8014880:	2001      	movs	r0, #1
 8014882:	e7ef      	b.n	8014864 <rcu_osci_stab_wait+0x6c>
 8014884:	4913      	ldr	r1, [pc, #76]	; (80148d4 <rcu_osci_stab_wait+0xdc>)
 8014886:	f640 1001 	movw	r0, #2305	; 0x901
 801488a:	f7ff ffa5 	bl	80147d8 <rcu_flag_get>
 801488e:	b908      	cbnz	r0, 8014894 <rcu_osci_stab_wait+0x9c>
 8014890:	3901      	subs	r1, #1
 8014892:	d1f8      	bne.n	8014886 <rcu_osci_stab_wait+0x8e>
 8014894:	f640 1001 	movw	r0, #2305	; 0x901
 8014898:	e7e4      	b.n	8014864 <rcu_osci_stab_wait+0x6c>
 801489a:	490e      	ldr	r1, [pc, #56]	; (80148d4 <rcu_osci_stab_wait+0xdc>)
 801489c:	2019      	movs	r0, #25
 801489e:	f7ff ff9b 	bl	80147d8 <rcu_flag_get>
 80148a2:	b908      	cbnz	r0, 80148a8 <rcu_osci_stab_wait+0xb0>
 80148a4:	3901      	subs	r1, #1
 80148a6:	d1f9      	bne.n	801489c <rcu_osci_stab_wait+0xa4>
 80148a8:	2019      	movs	r0, #25
 80148aa:	e7db      	b.n	8014864 <rcu_osci_stab_wait+0x6c>
 80148ac:	4909      	ldr	r1, [pc, #36]	; (80148d4 <rcu_osci_stab_wait+0xdc>)
 80148ae:	201d      	movs	r0, #29
 80148b0:	f7ff ff92 	bl	80147d8 <rcu_flag_get>
 80148b4:	b908      	cbnz	r0, 80148ba <rcu_osci_stab_wait+0xc2>
 80148b6:	3901      	subs	r1, #1
 80148b8:	d1f9      	bne.n	80148ae <rcu_osci_stab_wait+0xb6>
 80148ba:	201d      	movs	r0, #29
 80148bc:	e7d2      	b.n	8014864 <rcu_osci_stab_wait+0x6c>
 80148be:	4905      	ldr	r1, [pc, #20]	; (80148d4 <rcu_osci_stab_wait+0xdc>)
 80148c0:	f242 401d 	movw	r0, #9245	; 0x241d
 80148c4:	f7ff ff88 	bl	80147d8 <rcu_flag_get>
 80148c8:	b908      	cbnz	r0, 80148ce <rcu_osci_stab_wait+0xd6>
 80148ca:	3901      	subs	r1, #1
 80148cc:	d1f8      	bne.n	80148c0 <rcu_osci_stab_wait+0xc8>
 80148ce:	f242 401d 	movw	r0, #9245	; 0x241d
 80148d2:	e7c7      	b.n	8014864 <rcu_osci_stab_wait+0x6c>
 80148d4:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

080148d8 <rcu_osci_on>:
 80148d8:	f7ff bf14 	b.w	8014704 <rcu_periph_clock_enable>

080148dc <rcu_clock_freq_get>:
 80148dc:	4b3e      	ldr	r3, [pc, #248]	; (80149d8 <rcu_clock_freq_get+0xfc>)
 80148de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148e0:	4604      	mov	r4, r0
 80148e2:	461f      	mov	r7, r3
 80148e4:	b089      	sub	sp, #36	; 0x24
 80148e6:	ad04      	add	r5, sp, #16
 80148e8:	f103 0610 	add.w	r6, r3, #16
 80148ec:	462a      	mov	r2, r5
 80148ee:	6818      	ldr	r0, [r3, #0]
 80148f0:	6859      	ldr	r1, [r3, #4]
 80148f2:	3308      	adds	r3, #8
 80148f4:	c203      	stmia	r2!, {r0, r1}
 80148f6:	42b3      	cmp	r3, r6
 80148f8:	4615      	mov	r5, r2
 80148fa:	d1f7      	bne.n	80148ec <rcu_clock_freq_get+0x10>
 80148fc:	466b      	mov	r3, sp
 80148fe:	6938      	ldr	r0, [r7, #16]
 8014900:	6871      	ldr	r1, [r6, #4]
 8014902:	4a36      	ldr	r2, [pc, #216]	; (80149dc <rcu_clock_freq_get+0x100>)
 8014904:	c303      	stmia	r3!, {r0, r1}
 8014906:	c303      	stmia	r3!, {r0, r1}
 8014908:	6853      	ldr	r3, [r2, #4]
 801490a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801490e:	2b01      	cmp	r3, #1
 8014910:	d053      	beq.n	80149ba <rcu_clock_freq_get+0xde>
 8014912:	2b02      	cmp	r3, #2
 8014914:	d153      	bne.n	80149be <rcu_clock_freq_get+0xe2>
 8014916:	6853      	ldr	r3, [r2, #4]
 8014918:	03dd      	lsls	r5, r3, #15
 801491a:	d523      	bpl.n	8014964 <rcu_clock_freq_get+0x88>
 801491c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 801491e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8014922:	4b2f      	ldr	r3, [pc, #188]	; (80149e0 <rcu_clock_freq_get+0x104>)
 8014924:	d00e      	beq.n	8014944 <rcu_clock_freq_get+0x68>
 8014926:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8014928:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 801492a:	f3c1 1103 	ubfx	r1, r1, #4, #4
 801492e:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8014932:	3101      	adds	r1, #1
 8014934:	280f      	cmp	r0, #15
 8014936:	f100 0502 	add.w	r5, r0, #2
 801493a:	fbb3 f3f1 	udiv	r3, r3, r1
 801493e:	bf08      	it	eq
 8014940:	2514      	moveq	r5, #20
 8014942:	436b      	muls	r3, r5
 8014944:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8014946:	f001 010f 	and.w	r1, r1, #15
 801494a:	3101      	adds	r1, #1
 801494c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014950:	6851      	ldr	r1, [r2, #4]
 8014952:	6850      	ldr	r0, [r2, #4]
 8014954:	f3c1 4183 	ubfx	r1, r1, #18, #4
 8014958:	0080      	lsls	r0, r0, #2
 801495a:	d505      	bpl.n	8014968 <rcu_clock_freq_get+0x8c>
 801495c:	f041 0110 	orr.w	r1, r1, #16
 8014960:	3101      	adds	r1, #1
 8014962:	e027      	b.n	80149b4 <rcu_clock_freq_get+0xd8>
 8014964:	4b1f      	ldr	r3, [pc, #124]	; (80149e4 <rcu_clock_freq_get+0x108>)
 8014966:	e7f3      	b.n	8014950 <rcu_clock_freq_get+0x74>
 8014968:	290d      	cmp	r1, #13
 801496a:	d120      	bne.n	80149ae <rcu_clock_freq_get+0xd2>
 801496c:	2006      	movs	r0, #6
 801496e:	0859      	lsrs	r1, r3, #1
 8014970:	fb00 1003 	mla	r0, r0, r3, r1
 8014974:	6853      	ldr	r3, [r2, #4]
 8014976:	6851      	ldr	r1, [r2, #4]
 8014978:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801497c:	6852      	ldr	r2, [r2, #4]
 801497e:	3320      	adds	r3, #32
 8014980:	446b      	add	r3, sp
 8014982:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8014986:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 801498a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 801498e:	3120      	adds	r1, #32
 8014990:	3220      	adds	r2, #32
 8014992:	4469      	add	r1, sp
 8014994:	446a      	add	r2, sp
 8014996:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 801499a:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 801499e:	fa20 f303 	lsr.w	r3, r0, r3
 80149a2:	2c03      	cmp	r4, #3
 80149a4:	d816      	bhi.n	80149d4 <rcu_clock_freq_get+0xf8>
 80149a6:	e8df f004 	tbb	[pc, r4]
 80149aa:	120f0c0d 	andne	r0, pc, #3328	; 0xd00
 80149ae:	290f      	cmp	r1, #15
 80149b0:	d0d6      	beq.n	8014960 <rcu_clock_freq_get+0x84>
 80149b2:	3102      	adds	r1, #2
 80149b4:	fb03 f001 	mul.w	r0, r3, r1
 80149b8:	e7dc      	b.n	8014974 <rcu_clock_freq_get+0x98>
 80149ba:	4809      	ldr	r0, [pc, #36]	; (80149e0 <rcu_clock_freq_get+0x104>)
 80149bc:	e7da      	b.n	8014974 <rcu_clock_freq_get+0x98>
 80149be:	480a      	ldr	r0, [pc, #40]	; (80149e8 <rcu_clock_freq_get+0x10c>)
 80149c0:	e7d8      	b.n	8014974 <rcu_clock_freq_get+0x98>
 80149c2:	4618      	mov	r0, r3
 80149c4:	b009      	add	sp, #36	; 0x24
 80149c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149c8:	fa23 f001 	lsr.w	r0, r3, r1
 80149cc:	e7fa      	b.n	80149c4 <rcu_clock_freq_get+0xe8>
 80149ce:	fa23 f002 	lsr.w	r0, r3, r2
 80149d2:	e7f7      	b.n	80149c4 <rcu_clock_freq_get+0xe8>
 80149d4:	2000      	movs	r0, #0
 80149d6:	e7f5      	b.n	80149c4 <rcu_clock_freq_get+0xe8>
 80149d8:	0801646d 	stmdaeq	r1, {r0, r2, r3, r5, r6, sl, sp, lr}
 80149dc:	40021000 	andmi	r1, r2, r0
 80149e0:	017d7840 	cmneq	sp, r0, asr #16
 80149e4:	003d0900 	eorseq	r0, sp, r0, lsl #18
 80149e8:	007a1200 	rsbseq	r1, sl, r0, lsl #4

080149ec <timer_deinit>:
 80149ec:	b508      	push	{r3, lr}
 80149ee:	4b4e      	ldr	r3, [pc, #312]	; (8014b28 <timer_deinit+0x13c>)
 80149f0:	4298      	cmp	r0, r3
 80149f2:	f000 8092 	beq.w	8014b1a <timer_deinit+0x12e>
 80149f6:	d822      	bhi.n	8014a3e <timer_deinit+0x52>
 80149f8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80149fc:	4298      	cmp	r0, r3
 80149fe:	d062      	beq.n	8014ac6 <timer_deinit+0xda>
 8014a00:	d80b      	bhi.n	8014a1a <timer_deinit+0x2e>
 8014a02:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014a06:	4298      	cmp	r0, r3
 8014a08:	d04f      	beq.n	8014aaa <timer_deinit+0xbe>
 8014a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014a0e:	4298      	cmp	r0, r3
 8014a10:	d052      	beq.n	8014ab8 <timer_deinit+0xcc>
 8014a12:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8014a16:	d041      	beq.n	8014a9c <timer_deinit+0xb0>
 8014a18:	bd08      	pop	{r3, pc}
 8014a1a:	4b44      	ldr	r3, [pc, #272]	; (8014b2c <timer_deinit+0x140>)
 8014a1c:	4298      	cmp	r0, r3
 8014a1e:	d059      	beq.n	8014ad4 <timer_deinit+0xe8>
 8014a20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014a24:	4298      	cmp	r0, r3
 8014a26:	d071      	beq.n	8014b0c <timer_deinit+0x120>
 8014a28:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014a2c:	4298      	cmp	r0, r3
 8014a2e:	d1f3      	bne.n	8014a18 <timer_deinit+0x2c>
 8014a30:	f240 4004 	movw	r0, #1028	; 0x404
 8014a34:	f7ff fe81 	bl	801473a <rcu_periph_reset_enable>
 8014a38:	f240 4004 	movw	r0, #1028	; 0x404
 8014a3c:	e02a      	b.n	8014a94 <timer_deinit+0xa8>
 8014a3e:	4b3c      	ldr	r3, [pc, #240]	; (8014b30 <timer_deinit+0x144>)
 8014a40:	4298      	cmp	r0, r3
 8014a42:	d055      	beq.n	8014af0 <timer_deinit+0x104>
 8014a44:	d812      	bhi.n	8014a6c <timer_deinit+0x80>
 8014a46:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8014a4a:	4298      	cmp	r0, r3
 8014a4c:	d01c      	beq.n	8014a88 <timer_deinit+0x9c>
 8014a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a52:	4298      	cmp	r0, r3
 8014a54:	d045      	beq.n	8014ae2 <timer_deinit+0xf6>
 8014a56:	f5a3 338a 	sub.w	r3, r3, #70656	; 0x11400
 8014a5a:	4298      	cmp	r0, r3
 8014a5c:	d1dc      	bne.n	8014a18 <timer_deinit+0x2c>
 8014a5e:	f44f 6081 	mov.w	r0, #1032	; 0x408
 8014a62:	f7ff fe6a 	bl	801473a <rcu_periph_reset_enable>
 8014a66:	f44f 6081 	mov.w	r0, #1032	; 0x408
 8014a6a:	e013      	b.n	8014a94 <timer_deinit+0xa8>
 8014a6c:	4b31      	ldr	r3, [pc, #196]	; (8014b34 <timer_deinit+0x148>)
 8014a6e:	4298      	cmp	r0, r3
 8014a70:	d045      	beq.n	8014afe <timer_deinit+0x112>
 8014a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014a76:	4298      	cmp	r0, r3
 8014a78:	d1ce      	bne.n	8014a18 <timer_deinit+0x2c>
 8014a7a:	f240 3015 	movw	r0, #789	; 0x315
 8014a7e:	f7ff fe5c 	bl	801473a <rcu_periph_reset_enable>
 8014a82:	f240 3015 	movw	r0, #789	; 0x315
 8014a86:	e005      	b.n	8014a94 <timer_deinit+0xa8>
 8014a88:	f240 300b 	movw	r0, #779	; 0x30b
 8014a8c:	f7ff fe55 	bl	801473a <rcu_periph_reset_enable>
 8014a90:	f240 300b 	movw	r0, #779	; 0x30b
 8014a94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014a98:	f7ff be51 	b.w	801473e <rcu_periph_reset_disable>
 8014a9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014aa0:	f7ff fe4b 	bl	801473a <rcu_periph_reset_enable>
 8014aa4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014aa8:	e7f4      	b.n	8014a94 <timer_deinit+0xa8>
 8014aaa:	f240 4001 	movw	r0, #1025	; 0x401
 8014aae:	f7ff fe44 	bl	801473a <rcu_periph_reset_enable>
 8014ab2:	f240 4001 	movw	r0, #1025	; 0x401
 8014ab6:	e7ed      	b.n	8014a94 <timer_deinit+0xa8>
 8014ab8:	f240 4002 	movw	r0, #1026	; 0x402
 8014abc:	f7ff fe3d 	bl	801473a <rcu_periph_reset_enable>
 8014ac0:	f240 4002 	movw	r0, #1026	; 0x402
 8014ac4:	e7e6      	b.n	8014a94 <timer_deinit+0xa8>
 8014ac6:	f240 4003 	movw	r0, #1027	; 0x403
 8014aca:	f7ff fe36 	bl	801473a <rcu_periph_reset_enable>
 8014ace:	f240 4003 	movw	r0, #1027	; 0x403
 8014ad2:	e7df      	b.n	8014a94 <timer_deinit+0xa8>
 8014ad4:	f240 4005 	movw	r0, #1029	; 0x405
 8014ad8:	f7ff fe2f 	bl	801473a <rcu_periph_reset_enable>
 8014adc:	f240 4005 	movw	r0, #1029	; 0x405
 8014ae0:	e7d8      	b.n	8014a94 <timer_deinit+0xa8>
 8014ae2:	f240 300d 	movw	r0, #781	; 0x30d
 8014ae6:	f7ff fe28 	bl	801473a <rcu_periph_reset_enable>
 8014aea:	f240 300d 	movw	r0, #781	; 0x30d
 8014aee:	e7d1      	b.n	8014a94 <timer_deinit+0xa8>
 8014af0:	f240 3013 	movw	r0, #787	; 0x313
 8014af4:	f7ff fe21 	bl	801473a <rcu_periph_reset_enable>
 8014af8:	f240 3013 	movw	r0, #787	; 0x313
 8014afc:	e7ca      	b.n	8014a94 <timer_deinit+0xa8>
 8014afe:	f44f 7045 	mov.w	r0, #788	; 0x314
 8014b02:	f7ff fe1a 	bl	801473a <rcu_periph_reset_enable>
 8014b06:	f44f 7045 	mov.w	r0, #788	; 0x314
 8014b0a:	e7c3      	b.n	8014a94 <timer_deinit+0xa8>
 8014b0c:	f240 4006 	movw	r0, #1030	; 0x406
 8014b10:	f7ff fe13 	bl	801473a <rcu_periph_reset_enable>
 8014b14:	f240 4006 	movw	r0, #1030	; 0x406
 8014b18:	e7bc      	b.n	8014a94 <timer_deinit+0xa8>
 8014b1a:	f240 4007 	movw	r0, #1031	; 0x407
 8014b1e:	f7ff fe0c 	bl	801473a <rcu_periph_reset_enable>
 8014b22:	f240 4007 	movw	r0, #1031	; 0x407
 8014b26:	e7b5      	b.n	8014a94 <timer_deinit+0xa8>
 8014b28:	40001c00 	andmi	r1, r0, r0, lsl #24
 8014b2c:	40001400 	andmi	r1, r0, r0, lsl #8
 8014b30:	40014c00 	andmi	r4, r1, r0, lsl #24
 8014b34:	40015000 	andmi	r5, r1, r0

08014b38 <timer_init>:
 8014b38:	880b      	ldrh	r3, [r1, #0]
 8014b3a:	6283      	str	r3, [r0, #40]	; 0x28
 8014b3c:	4b26      	ldr	r3, [pc, #152]	; (8014bd8 <timer_init+0xa0>)
 8014b3e:	4298      	cmp	r0, r3
 8014b40:	d018      	beq.n	8014b74 <timer_init+0x3c>
 8014b42:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 8014b46:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8014b4a:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 8014b4e:	d011      	beq.n	8014b74 <timer_init+0x3c>
 8014b50:	4a22      	ldr	r2, [pc, #136]	; (8014bdc <timer_init+0xa4>)
 8014b52:	4290      	cmp	r0, r2
 8014b54:	d00e      	beq.n	8014b74 <timer_init+0x3c>
 8014b56:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8014b5a:	4290      	cmp	r0, r2
 8014b5c:	d00a      	beq.n	8014b74 <timer_init+0x3c>
 8014b5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014b62:	4293      	cmp	r3, r2
 8014b64:	d006      	beq.n	8014b74 <timer_init+0x3c>
 8014b66:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 8014b6a:	4293      	cmp	r3, r2
 8014b6c:	d002      	beq.n	8014b74 <timer_init+0x3c>
 8014b6e:	4b1c      	ldr	r3, [pc, #112]	; (8014be0 <timer_init+0xa8>)
 8014b70:	4298      	cmp	r0, r3
 8014b72:	d10f      	bne.n	8014b94 <timer_init+0x5c>
 8014b74:	6803      	ldr	r3, [r0, #0]
 8014b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014b7a:	6003      	str	r3, [r0, #0]
 8014b7c:	884b      	ldrh	r3, [r1, #2]
 8014b7e:	6802      	ldr	r2, [r0, #0]
 8014b80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014b84:	4313      	orrs	r3, r2
 8014b86:	6003      	str	r3, [r0, #0]
 8014b88:	888b      	ldrh	r3, [r1, #4]
 8014b8a:	6802      	ldr	r2, [r0, #0]
 8014b8c:	f003 0310 	and.w	r3, r3, #16
 8014b90:	4313      	orrs	r3, r2
 8014b92:	6003      	str	r3, [r0, #0]
 8014b94:	688b      	ldr	r3, [r1, #8]
 8014b96:	62c3      	str	r3, [r0, #44]	; 0x2c
 8014b98:	4b12      	ldr	r3, [pc, #72]	; (8014be4 <timer_init+0xac>)
 8014b9a:	4298      	cmp	r0, r3
 8014b9c:	d003      	beq.n	8014ba6 <timer_init+0x6e>
 8014b9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014ba2:	4298      	cmp	r0, r3
 8014ba4:	d104      	bne.n	8014bb0 <timer_init+0x78>
 8014ba6:	6943      	ldr	r3, [r0, #20]
 8014ba8:	f043 0301 	orr.w	r3, r3, #1
 8014bac:	6143      	str	r3, [r0, #20]
 8014bae:	4770      	bx	lr
 8014bb0:	6803      	ldr	r3, [r0, #0]
 8014bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014bb6:	6003      	str	r3, [r0, #0]
 8014bb8:	898b      	ldrh	r3, [r1, #12]
 8014bba:	6802      	ldr	r2, [r0, #0]
 8014bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014bc0:	4313      	orrs	r3, r2
 8014bc2:	6003      	str	r3, [r0, #0]
 8014bc4:	4b04      	ldr	r3, [pc, #16]	; (8014bd8 <timer_init+0xa0>)
 8014bc6:	4298      	cmp	r0, r3
 8014bc8:	d002      	beq.n	8014bd0 <timer_init+0x98>
 8014bca:	4b04      	ldr	r3, [pc, #16]	; (8014bdc <timer_init+0xa4>)
 8014bcc:	4298      	cmp	r0, r3
 8014bce:	d1ea      	bne.n	8014ba6 <timer_init+0x6e>
 8014bd0:	7b8b      	ldrb	r3, [r1, #14]
 8014bd2:	6303      	str	r3, [r0, #48]	; 0x30
 8014bd4:	e7e7      	b.n	8014ba6 <timer_init+0x6e>
 8014bd6:	bf00      	nop
 8014bd8:	40012c00 	andmi	r2, r1, r0, lsl #24
 8014bdc:	40013400 	andmi	r3, r1, r0, lsl #8
 8014be0:	40002000 	andmi	r2, r0, r0
 8014be4:	40001000 	andmi	r1, r0, r0

08014be8 <timer_enable>:
 8014be8:	6803      	ldr	r3, [r0, #0]
 8014bea:	f043 0301 	orr.w	r3, r3, #1
 8014bee:	6003      	str	r3, [r0, #0]
 8014bf0:	4770      	bx	lr

08014bf2 <timer_channel_output_mode_config>:
 8014bf2:	2903      	cmp	r1, #3
 8014bf4:	d81a      	bhi.n	8014c2c <timer_channel_output_mode_config+0x3a>
 8014bf6:	e8df f001 	tbb	[pc, r1]
 8014bfa:	1a120a02 	bne	849740a <__exidx_end+0x47ec0e>
 8014bfe:	6983      	ldr	r3, [r0, #24]
 8014c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014c04:	6183      	str	r3, [r0, #24]
 8014c06:	6983      	ldr	r3, [r0, #24]
 8014c08:	4313      	orrs	r3, r2
 8014c0a:	6183      	str	r3, [r0, #24]
 8014c0c:	4770      	bx	lr
 8014c0e:	6983      	ldr	r3, [r0, #24]
 8014c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014c14:	6183      	str	r3, [r0, #24]
 8014c16:	6983      	ldr	r3, [r0, #24]
 8014c18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014c1c:	e7f5      	b.n	8014c0a <timer_channel_output_mode_config+0x18>
 8014c1e:	69c3      	ldr	r3, [r0, #28]
 8014c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014c24:	61c3      	str	r3, [r0, #28]
 8014c26:	69c3      	ldr	r3, [r0, #28]
 8014c28:	4313      	orrs	r3, r2
 8014c2a:	61c3      	str	r3, [r0, #28]
 8014c2c:	4770      	bx	lr
 8014c2e:	69c3      	ldr	r3, [r0, #28]
 8014c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014c34:	61c3      	str	r3, [r0, #28]
 8014c36:	69c3      	ldr	r3, [r0, #28]
 8014c38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014c3c:	e7f5      	b.n	8014c2a <timer_channel_output_mode_config+0x38>

08014c3e <timer_channel_output_pulse_value_config>:
 8014c3e:	2903      	cmp	r1, #3
 8014c40:	d80a      	bhi.n	8014c58 <timer_channel_output_pulse_value_config+0x1a>
 8014c42:	e8df f001 	tbb	[pc, r1]
 8014c46:	08060402 	stmdaeq	r6, {r1, sl}
 8014c4a:	6342      	str	r2, [r0, #52]	; 0x34
 8014c4c:	4770      	bx	lr
 8014c4e:	6382      	str	r2, [r0, #56]	; 0x38
 8014c50:	4770      	bx	lr
 8014c52:	63c2      	str	r2, [r0, #60]	; 0x3c
 8014c54:	4770      	bx	lr
 8014c56:	6402      	str	r2, [r0, #64]	; 0x40
 8014c58:	4770      	bx	lr

08014c5a <timer_input_trigger_source_select>:
 8014c5a:	6883      	ldr	r3, [r0, #8]
 8014c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014c60:	6083      	str	r3, [r0, #8]
 8014c62:	6883      	ldr	r3, [r0, #8]
 8014c64:	430b      	orrs	r3, r1
 8014c66:	6083      	str	r3, [r0, #8]
 8014c68:	4770      	bx	lr

08014c6a <timer_master_output_trigger_source_select>:
 8014c6a:	6843      	ldr	r3, [r0, #4]
 8014c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014c70:	6043      	str	r3, [r0, #4]
 8014c72:	6843      	ldr	r3, [r0, #4]
 8014c74:	430b      	orrs	r3, r1
 8014c76:	6043      	str	r3, [r0, #4]
 8014c78:	4770      	bx	lr

08014c7a <timer_slave_mode_select>:
 8014c7a:	6883      	ldr	r3, [r0, #8]
 8014c7c:	f023 0307 	bic.w	r3, r3, #7
 8014c80:	6083      	str	r3, [r0, #8]
 8014c82:	6883      	ldr	r3, [r0, #8]
 8014c84:	430b      	orrs	r3, r1
 8014c86:	6083      	str	r3, [r0, #8]
 8014c88:	4770      	bx	lr

08014c8a <timer_master_slave_mode_config>:
 8014c8a:	2980      	cmp	r1, #128	; 0x80
 8014c8c:	d104      	bne.n	8014c98 <timer_master_slave_mode_config+0xe>
 8014c8e:	6883      	ldr	r3, [r0, #8]
 8014c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c94:	6083      	str	r3, [r0, #8]
 8014c96:	4770      	bx	lr
 8014c98:	2900      	cmp	r1, #0
 8014c9a:	d1fc      	bne.n	8014c96 <timer_master_slave_mode_config+0xc>
 8014c9c:	6883      	ldr	r3, [r0, #8]
 8014c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014ca2:	e7f7      	b.n	8014c94 <timer_master_slave_mode_config+0xa>

08014ca4 <timer_interrupt_enable>:
 8014ca4:	68c3      	ldr	r3, [r0, #12]
 8014ca6:	430b      	orrs	r3, r1
 8014ca8:	60c3      	str	r3, [r0, #12]
 8014caa:	4770      	bx	lr

08014cac <timer_interrupt_flag_clear>:
 8014cac:	43c9      	mvns	r1, r1
 8014cae:	6101      	str	r1, [r0, #16]
 8014cb0:	4770      	bx	lr

08014cb2 <timer_flag_clear>:
 8014cb2:	43c9      	mvns	r1, r1
 8014cb4:	6101      	str	r1, [r0, #16]
 8014cb6:	4770      	bx	lr

08014cb8 <usart_deinit>:
 8014cb8:	b508      	push	{r3, lr}
 8014cba:	4b2d      	ldr	r3, [pc, #180]	; (8014d70 <usart_deinit+0xb8>)
 8014cbc:	4298      	cmp	r0, r3
 8014cbe:	d050      	beq.n	8014d62 <usart_deinit+0xaa>
 8014cc0:	d817      	bhi.n	8014cf2 <usart_deinit+0x3a>
 8014cc2:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 8014cc6:	4298      	cmp	r0, r3
 8014cc8:	d044      	beq.n	8014d54 <usart_deinit+0x9c>
 8014cca:	d808      	bhi.n	8014cde <usart_deinit+0x26>
 8014ccc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014cd0:	4298      	cmp	r0, r3
 8014cd2:	d02a      	beq.n	8014d2a <usart_deinit+0x72>
 8014cd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014cd8:	4298      	cmp	r0, r3
 8014cda:	d02d      	beq.n	8014d38 <usart_deinit+0x80>
 8014cdc:	bd08      	pop	{r3, pc}
 8014cde:	4b25      	ldr	r3, [pc, #148]	; (8014d74 <usart_deinit+0xbc>)
 8014ce0:	4298      	cmp	r0, r3
 8014ce2:	d1fb      	bne.n	8014cdc <usart_deinit+0x24>
 8014ce4:	f240 4014 	movw	r0, #1044	; 0x414
 8014ce8:	f7ff fd27 	bl	801473a <rcu_periph_reset_enable>
 8014cec:	f240 4014 	movw	r0, #1044	; 0x414
 8014cf0:	e017      	b.n	8014d22 <usart_deinit+0x6a>
 8014cf2:	4b21      	ldr	r3, [pc, #132]	; (8014d78 <usart_deinit+0xc0>)
 8014cf4:	4298      	cmp	r0, r3
 8014cf6:	d00e      	beq.n	8014d16 <usart_deinit+0x5e>
 8014cf8:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8014cfc:	4298      	cmp	r0, r3
 8014cfe:	d022      	beq.n	8014d46 <usart_deinit+0x8e>
 8014d00:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8014d04:	4298      	cmp	r0, r3
 8014d06:	d1e9      	bne.n	8014cdc <usart_deinit+0x24>
 8014d08:	f641 601f 	movw	r0, #7711	; 0x1e1f
 8014d0c:	f7ff fd15 	bl	801473a <rcu_periph_reset_enable>
 8014d10:	f641 601f 	movw	r0, #7711	; 0x1e1f
 8014d14:	e005      	b.n	8014d22 <usart_deinit+0x6a>
 8014d16:	f240 300e 	movw	r0, #782	; 0x30e
 8014d1a:	f7ff fd0e 	bl	801473a <rcu_periph_reset_enable>
 8014d1e:	f240 300e 	movw	r0, #782	; 0x30e
 8014d22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014d26:	f7ff bd0a 	b.w	801473e <rcu_periph_reset_disable>
 8014d2a:	f240 4011 	movw	r0, #1041	; 0x411
 8014d2e:	f7ff fd04 	bl	801473a <rcu_periph_reset_enable>
 8014d32:	f240 4011 	movw	r0, #1041	; 0x411
 8014d36:	e7f4      	b.n	8014d22 <usart_deinit+0x6a>
 8014d38:	f240 4012 	movw	r0, #1042	; 0x412
 8014d3c:	f7ff fcfd 	bl	801473a <rcu_periph_reset_enable>
 8014d40:	f240 4012 	movw	r0, #1042	; 0x412
 8014d44:	e7ed      	b.n	8014d22 <usart_deinit+0x6a>
 8014d46:	f641 5018 	movw	r0, #7448	; 0x1d18
 8014d4a:	f7ff fcf6 	bl	801473a <rcu_periph_reset_enable>
 8014d4e:	f641 5018 	movw	r0, #7448	; 0x1d18
 8014d52:	e7e6      	b.n	8014d22 <usart_deinit+0x6a>
 8014d54:	f240 4013 	movw	r0, #1043	; 0x413
 8014d58:	f7ff fcef 	bl	801473a <rcu_periph_reset_enable>
 8014d5c:	f240 4013 	movw	r0, #1043	; 0x413
 8014d60:	e7df      	b.n	8014d22 <usart_deinit+0x6a>
 8014d62:	f641 601e 	movw	r0, #7710	; 0x1e1e
 8014d66:	f7ff fce8 	bl	801473a <rcu_periph_reset_enable>
 8014d6a:	f641 601e 	movw	r0, #7710	; 0x1e1e
 8014d6e:	e7d8      	b.n	8014d22 <usart_deinit+0x6a>
 8014d70:	40007800 	andmi	r7, r0, r0, lsl #16
 8014d74:	40005000 	andmi	r5, r0, r0
 8014d78:	40013800 	andmi	r3, r1, r0, lsl #16

08014d7c <usart_baudrate_set>:
 8014d7c:	b538      	push	{r3, r4, r5, lr}
 8014d7e:	4b16      	ldr	r3, [pc, #88]	; (8014dd8 <usart_baudrate_set+0x5c>)
 8014d80:	4604      	mov	r4, r0
 8014d82:	4298      	cmp	r0, r3
 8014d84:	460d      	mov	r5, r1
 8014d86:	d025      	beq.n	8014dd4 <usart_baudrate_set+0x58>
 8014d88:	d816      	bhi.n	8014db8 <usart_baudrate_set+0x3c>
 8014d8a:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 8014d8e:	4298      	cmp	r0, r3
 8014d90:	d020      	beq.n	8014dd4 <usart_baudrate_set+0x58>
 8014d92:	d80f      	bhi.n	8014db4 <usart_baudrate_set+0x38>
 8014d94:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014d98:	4298      	cmp	r0, r3
 8014d9a:	d01b      	beq.n	8014dd4 <usart_baudrate_set+0x58>
 8014d9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014da0:	429c      	cmp	r4, r3
 8014da2:	d017      	beq.n	8014dd4 <usart_baudrate_set+0x58>
 8014da4:	2000      	movs	r0, #0
 8014da6:	eb00 0155 	add.w	r1, r0, r5, lsr #1
 8014daa:	fbb1 f1f5 	udiv	r1, r1, r5
 8014dae:	b289      	uxth	r1, r1
 8014db0:	60a1      	str	r1, [r4, #8]
 8014db2:	bd38      	pop	{r3, r4, r5, pc}
 8014db4:	4b09      	ldr	r3, [pc, #36]	; (8014ddc <usart_baudrate_set+0x60>)
 8014db6:	e7f3      	b.n	8014da0 <usart_baudrate_set+0x24>
 8014db8:	4b09      	ldr	r3, [pc, #36]	; (8014de0 <usart_baudrate_set+0x64>)
 8014dba:	4298      	cmp	r0, r3
 8014dbc:	d006      	beq.n	8014dcc <usart_baudrate_set+0x50>
 8014dbe:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8014dc2:	4298      	cmp	r0, r3
 8014dc4:	d002      	beq.n	8014dcc <usart_baudrate_set+0x50>
 8014dc6:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8014dca:	e7e9      	b.n	8014da0 <usart_baudrate_set+0x24>
 8014dcc:	2003      	movs	r0, #3
 8014dce:	f7ff fd85 	bl	80148dc <rcu_clock_freq_get>
 8014dd2:	e7e8      	b.n	8014da6 <usart_baudrate_set+0x2a>
 8014dd4:	2002      	movs	r0, #2
 8014dd6:	e7fa      	b.n	8014dce <usart_baudrate_set+0x52>
 8014dd8:	40007800 	andmi	r7, r0, r0, lsl #16
 8014ddc:	40005000 	andmi	r5, r0, r0
 8014de0:	40013800 	andmi	r3, r1, r0, lsl #16

08014de4 <usart_parity_config>:
 8014de4:	68c3      	ldr	r3, [r0, #12]
 8014de6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8014dea:	60c3      	str	r3, [r0, #12]
 8014dec:	68c3      	ldr	r3, [r0, #12]
 8014dee:	430b      	orrs	r3, r1
 8014df0:	60c3      	str	r3, [r0, #12]
 8014df2:	4770      	bx	lr

08014df4 <usart_word_length_set>:
 8014df4:	68c3      	ldr	r3, [r0, #12]
 8014df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014dfa:	60c3      	str	r3, [r0, #12]
 8014dfc:	68c3      	ldr	r3, [r0, #12]
 8014dfe:	430b      	orrs	r3, r1
 8014e00:	60c3      	str	r3, [r0, #12]
 8014e02:	4770      	bx	lr

08014e04 <usart_stop_bit_set>:
 8014e04:	6903      	ldr	r3, [r0, #16]
 8014e06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8014e0a:	6103      	str	r3, [r0, #16]
 8014e0c:	6903      	ldr	r3, [r0, #16]
 8014e0e:	430b      	orrs	r3, r1
 8014e10:	6103      	str	r3, [r0, #16]
 8014e12:	4770      	bx	lr

08014e14 <usart_transmit_config>:
 8014e14:	68c3      	ldr	r3, [r0, #12]
 8014e16:	f023 0308 	bic.w	r3, r3, #8
 8014e1a:	430b      	orrs	r3, r1
 8014e1c:	60c3      	str	r3, [r0, #12]
 8014e1e:	4770      	bx	lr

08014e20 <usart_receive_config>:
 8014e20:	68c3      	ldr	r3, [r0, #12]
 8014e22:	f023 0304 	bic.w	r3, r3, #4
 8014e26:	430b      	orrs	r3, r1
 8014e28:	60c3      	str	r3, [r0, #12]
 8014e2a:	4770      	bx	lr

08014e2c <usart_hardware_flow_rts_config>:
 8014e2c:	6943      	ldr	r3, [r0, #20]
 8014e2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014e32:	430b      	orrs	r3, r1
 8014e34:	6143      	str	r3, [r0, #20]
 8014e36:	4770      	bx	lr

08014e38 <usart_hardware_flow_cts_config>:
 8014e38:	6943      	ldr	r3, [r0, #20]
 8014e3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014e3e:	430b      	orrs	r3, r1
 8014e40:	6143      	str	r3, [r0, #20]
 8014e42:	4770      	bx	lr

08014e44 <usart_dma_transmit_config>:
 8014e44:	6943      	ldr	r3, [r0, #20]
 8014e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014e4a:	430b      	orrs	r3, r1
 8014e4c:	6143      	str	r3, [r0, #20]
 8014e4e:	4770      	bx	lr

08014e50 <usart_flag_get>:
 8014e50:	098b      	lsrs	r3, r1, #6
 8014e52:	581a      	ldr	r2, [r3, r0]
 8014e54:	2301      	movs	r3, #1
 8014e56:	f001 011f 	and.w	r1, r1, #31
 8014e5a:	408b      	lsls	r3, r1
 8014e5c:	4213      	tst	r3, r2
 8014e5e:	bf14      	ite	ne
 8014e60:	2001      	movne	r0, #1
 8014e62:	2000      	moveq	r0, #0
 8014e64:	4770      	bx	lr

08014e66 <usart_interrupt_enable>:
 8014e66:	2301      	movs	r3, #1
 8014e68:	b510      	push	{r4, lr}
 8014e6a:	f3c1 1289 	ubfx	r2, r1, #6, #10
 8014e6e:	5814      	ldr	r4, [r2, r0]
 8014e70:	f001 011f 	and.w	r1, r1, #31
 8014e74:	408b      	lsls	r3, r1
 8014e76:	4323      	orrs	r3, r4
 8014e78:	5013      	str	r3, [r2, r0]
 8014e7a:	bd10      	pop	{r4, pc}

08014e7c <usart_interrupt_disable>:
 8014e7c:	2201      	movs	r2, #1
 8014e7e:	b510      	push	{r4, lr}
 8014e80:	f3c1 1489 	ubfx	r4, r1, #6, #10
 8014e84:	5823      	ldr	r3, [r4, r0]
 8014e86:	f001 011f 	and.w	r1, r1, #31
 8014e8a:	408a      	lsls	r2, r1
 8014e8c:	ea23 0302 	bic.w	r3, r3, r2
 8014e90:	5023      	str	r3, [r4, r0]
 8014e92:	bd10      	pop	{r4, pc}

08014e94 <usart_interrupt_flag_clear>:
 8014e94:	2201      	movs	r2, #1
 8014e96:	b510      	push	{r4, lr}
 8014e98:	0d8c      	lsrs	r4, r1, #22
 8014e9a:	5823      	ldr	r3, [r4, r0]
 8014e9c:	f3c1 4104 	ubfx	r1, r1, #16, #5
 8014ea0:	408a      	lsls	r2, r1
 8014ea2:	ea23 0302 	bic.w	r3, r3, r2
 8014ea6:	5023      	str	r3, [r4, r0]
 8014ea8:	bd10      	pop	{r4, pc}
	...

08014eac <emac_start>:
 8014eac:	b510      	push	{r4, lr}
 8014eae:	4604      	mov	r4, r0
 8014eb0:	f240 6002 	movw	r0, #1538	; 0x602
 8014eb4:	f7ff fc26 	bl	8014704 <rcu_periph_clock_enable>
 8014eb8:	f240 6003 	movw	r0, #1539	; 0x603
 8014ebc:	f7ff fc22 	bl	8014704 <rcu_periph_clock_enable>
 8014ec0:	f240 6004 	movw	r0, #1540	; 0x604
 8014ec4:	f7ff fc1e 	bl	8014704 <rcu_periph_clock_enable>
 8014ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014ecc:	2203      	movs	r2, #3
 8014ece:	2118      	movs	r1, #24
 8014ed0:	4846      	ldr	r0, [pc, #280]	; (8014fec <emac_start+0x140>)
 8014ed2:	f7ff fb7f 	bl	80145d4 <gpio_init>
 8014ed6:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8014eda:	f7ff fc13 	bl	8014704 <rcu_periph_clock_enable>
 8014ede:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8014ee2:	f7ff fc4f 	bl	8014784 <rcu_pll2_config>
 8014ee6:	201c      	movs	r0, #28
 8014ee8:	f7ff fcf6 	bl	80148d8 <rcu_osci_on>
 8014eec:	201c      	movs	r0, #28
 8014eee:	f7ff fc83 	bl	80147f8 <rcu_osci_stab_wait>
 8014ef2:	2100      	movs	r1, #0
 8014ef4:	f04f 6030 	mov.w	r0, #184549376	; 0xb000000
 8014ef8:	f7ff fc34 	bl	8014764 <rcu_ckout0_config>
 8014efc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8014f00:	f7ff fbec 	bl	80146dc <gpio_ethernet_phy_select>
 8014f04:	2302      	movs	r3, #2
 8014f06:	2203      	movs	r2, #3
 8014f08:	2104      	movs	r1, #4
 8014f0a:	4838      	ldr	r0, [pc, #224]	; (8014fec <emac_start+0x140>)
 8014f0c:	f7ff fb62 	bl	80145d4 <gpio_init>
 8014f10:	2304      	movs	r3, #4
 8014f12:	2203      	movs	r2, #3
 8014f14:	2118      	movs	r1, #24
 8014f16:	4835      	ldr	r0, [pc, #212]	; (8014fec <emac_start+0x140>)
 8014f18:	f7ff fb5c 	bl	80145d4 <gpio_init>
 8014f1c:	2380      	movs	r3, #128	; 0x80
 8014f1e:	2203      	movs	r2, #3
 8014f20:	2104      	movs	r1, #4
 8014f22:	4832      	ldr	r0, [pc, #200]	; (8014fec <emac_start+0x140>)
 8014f24:	f7ff fb56 	bl	80145d4 <gpio_init>
 8014f28:	2302      	movs	r3, #2
 8014f2a:	2203      	movs	r2, #3
 8014f2c:	2118      	movs	r1, #24
 8014f2e:	4830      	ldr	r0, [pc, #192]	; (8014ff0 <emac_start+0x144>)
 8014f30:	f7ff fb50 	bl	80145d4 <gpio_init>
 8014f34:	2310      	movs	r3, #16
 8014f36:	2203      	movs	r2, #3
 8014f38:	2104      	movs	r1, #4
 8014f3a:	482d      	ldr	r0, [pc, #180]	; (8014ff0 <emac_start+0x144>)
 8014f3c:	f7ff fb4a 	bl	80145d4 <gpio_init>
 8014f40:	2320      	movs	r3, #32
 8014f42:	2203      	movs	r2, #3
 8014f44:	2104      	movs	r1, #4
 8014f46:	482a      	ldr	r0, [pc, #168]	; (8014ff0 <emac_start+0x144>)
 8014f48:	f7ff fb44 	bl	80145d4 <gpio_init>
 8014f4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014f50:	2203      	movs	r2, #3
 8014f52:	2118      	movs	r1, #24
 8014f54:	4827      	ldr	r0, [pc, #156]	; (8014ff4 <emac_start+0x148>)
 8014f56:	f7ff fb3d 	bl	80145d4 <gpio_init>
 8014f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014f5e:	2203      	movs	r2, #3
 8014f60:	2118      	movs	r1, #24
 8014f62:	4824      	ldr	r0, [pc, #144]	; (8014ff4 <emac_start+0x148>)
 8014f64:	f7ff fb36 	bl	80145d4 <gpio_init>
 8014f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014f6c:	2203      	movs	r2, #3
 8014f6e:	2118      	movs	r1, #24
 8014f70:	4820      	ldr	r0, [pc, #128]	; (8014ff4 <emac_start+0x148>)
 8014f72:	f7ff fb2f 	bl	80145d4 <gpio_init>
 8014f76:	f240 500e 	movw	r0, #1294	; 0x50e
 8014f7a:	f7ff fbc3 	bl	8014704 <rcu_periph_clock_enable>
 8014f7e:	f240 500f 	movw	r0, #1295	; 0x50f
 8014f82:	f7ff fbbf 	bl	8014704 <rcu_periph_clock_enable>
 8014f86:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 8014f8a:	f7ff fbbb 	bl	8014704 <rcu_periph_clock_enable>
 8014f8e:	f001 f833 	bl	8015ff8 <enet_deinit>
 8014f92:	f000 fc8f 	bl	80158b4 <enet_software_reset>
 8014f96:	b900      	cbnz	r0, 8014f9a <emac_start+0xee>
 8014f98:	e7fe      	b.n	8014f98 <emac_start+0xec>
 8014f9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014f9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014fa2:	2001      	movs	r0, #1
 8014fa4:	f000 fe0a 	bl	8015bbc <enet_init>
 8014fa8:	4b13      	ldr	r3, [pc, #76]	; (8014ff8 <emac_start+0x14c>)
 8014faa:	6018      	str	r0, [r3, #0]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	b903      	cbnz	r3, 8014fb2 <emac_start+0x106>
 8014fb0:	e7fe      	b.n	8014fb0 <emac_start+0x104>
 8014fb2:	4620      	mov	r0, r4
 8014fb4:	f000 fb78 	bl	80156a8 <mac_address_get>
 8014fb8:	4621      	mov	r1, r4
 8014fba:	2000      	movs	r0, #0
 8014fbc:	f000 fd5e 	bl	8015a7c <enet_mac_address_set>
 8014fc0:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 8014fc4:	f000 fc8a 	bl	80158dc <enet_descriptors_chain_init>
 8014fc8:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8014fcc:	f000 fc86 	bl	80158dc <enet_descriptors_chain_init>
 8014fd0:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8014fd4:	4809      	ldr	r0, [pc, #36]	; (8014ffc <emac_start+0x150>)
 8014fd6:	f000 fd4b 	bl	8015a70 <enet_transmit_checksum_config>
 8014fda:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8014fde:	4808      	ldr	r0, [pc, #32]	; (8015000 <emac_start+0x154>)
 8014fe0:	f000 fd46 	bl	8015a70 <enet_transmit_checksum_config>
 8014fe4:	f000 ff80 	bl	8015ee8 <enet_enable>
 8014fe8:	2001      	movs	r0, #1
 8014fea:	bd10      	pop	{r4, pc}
 8014fec:	40010800 	andmi	r0, r1, r0, lsl #16
 8014ff0:	40011000 	andmi	r1, r1, r0
 8014ff4:	40010c00 	andmi	r0, r1, r0, lsl #24
 8014ff8:	2000a738 	andcs	sl, r0, r8, lsr r7
 8014ffc:	2000e394 	mulcs	r0, r4, r3
 8015000:	2000e3a4 	andcs	lr, r0, r4, lsr #7

08015004 <emac_eth_recv>:
 8015004:	b538      	push	{r3, r4, r5, lr}
 8015006:	4605      	mov	r5, r0
 8015008:	f000 ffc6 	bl	8015f98 <enet_rxframe_size_get>
 801500c:	4604      	mov	r4, r0
 801500e:	b138      	cbz	r0, 8015020 <emac_eth_recv+0x1c>
 8015010:	4b05      	ldr	r3, [pc, #20]	; (8015028 <emac_eth_recv+0x24>)
 8015012:	2105      	movs	r1, #5
 8015014:	6818      	ldr	r0, [r3, #0]
 8015016:	f000 ff6e 	bl	8015ef6 <enet_desc_information_get>
 801501a:	6028      	str	r0, [r5, #0]
 801501c:	4620      	mov	r0, r4
 801501e:	bd38      	pop	{r3, r4, r5, pc}
 8015020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015024:	e7fb      	b.n	801501e <emac_eth_recv+0x1a>
 8015026:	bf00      	nop
 8015028:	2000a748 	andcs	sl, r0, r8, asr #14

0801502c <emac_free_pkt>:
 801502c:	2100      	movs	r1, #0
 801502e:	4608      	mov	r0, r1
 8015030:	f000 bc9c 	b.w	801596c <enet_frame_receive>

08015034 <emac_eth_send>:
 8015034:	f000 bcda 	b.w	80159ec <enet_frame_transmit>

08015038 <gd32_adc_init()>:
 8015038:	b510      	push	{r4, lr}
 801503a:	f240 6009 	movw	r0, #1545	; 0x609
 801503e:	4c21      	ldr	r4, [pc, #132]	; (80150c4 <gd32_adc_init()+0x8c>)
 8015040:	f7ff fb60 	bl	8014704 <rcu_periph_clock_enable>
 8015044:	2005      	movs	r0, #5
 8015046:	f7ff fba9 	bl	801479c <rcu_adc_clock_config>
 801504a:	4620      	mov	r0, r4
 801504c:	2201      	movs	r2, #1
 801504e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015052:	f000 fb4b 	bl	80156ec <adc_special_function_config>
 8015056:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 801505a:	4620      	mov	r0, r4
 801505c:	2102      	movs	r1, #2
 801505e:	f000 fbe4 	bl	801582a <adc_external_trigger_source_config>
 8015062:	2100      	movs	r1, #0
 8015064:	4620      	mov	r0, r4
 8015066:	f000 fb69 	bl	801573c <adc_data_alignment_config>
 801506a:	2000      	movs	r0, #0
 801506c:	f000 fb2e 	bl	80156cc <adc_mode_config>
 8015070:	2202      	movs	r2, #2
 8015072:	4620      	mov	r0, r4
 8015074:	4611      	mov	r1, r2
 8015076:	f000 fb8d 	bl	8015794 <adc_channel_length_config>
 801507a:	4620      	mov	r0, r4
 801507c:	2307      	movs	r3, #7
 801507e:	2210      	movs	r2, #16
 8015080:	2100      	movs	r1, #0
 8015082:	f000 fba4 	bl	80157ce <adc_inserted_channel_config>
 8015086:	2307      	movs	r3, #7
 8015088:	4620      	mov	r0, r4
 801508a:	2211      	movs	r2, #17
 801508c:	2101      	movs	r1, #1
 801508e:	f000 fb9e 	bl	80157ce <adc_inserted_channel_config>
 8015092:	2201      	movs	r2, #1
 8015094:	2102      	movs	r1, #2
 8015096:	4620      	mov	r0, r4
 8015098:	f000 fbd8 	bl	801584c <adc_external_trigger_config>
 801509c:	f000 fb70 	bl	8015780 <adc_tempsensor_vrefint_enable>
 80150a0:	4620      	mov	r0, r4
 80150a2:	f000 fb54 	bl	801574e <adc_enable>
 80150a6:	2100      	movs	r1, #0
 80150a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80150ac:	f000 fae4 	bl	8015678 <udelay(unsigned int, unsigned int)>
 80150b0:	4620      	mov	r0, r4
 80150b2:	f000 fb54 	bl	801575e <adc_calibration_enable>
 80150b6:	4620      	mov	r0, r4
 80150b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150bc:	2102      	movs	r1, #2
 80150be:	f000 bbe0 	b.w	8015882 <adc_software_trigger_enable>
 80150c2:	bf00      	nop
 80150c4:	40012400 	andmi	r2, r1, r0, lsl #8

080150c8 <_stop() [clone .isra.0]>:
 80150c8:	b508      	push	{r3, lr}
 80150ca:	4806      	ldr	r0, [pc, #24]	; (80150e4 <_stop() [clone .isra.0]+0x1c>)
 80150cc:	f001 f828 	bl	8016120 <i2c_stop_on_bus>
 80150d0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80150d4:	4904      	ldr	r1, [pc, #16]	; (80150e8 <_stop() [clone .isra.0]+0x20>)
 80150d6:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 80150da:	0592      	lsls	r2, r2, #22
 80150dc:	d501      	bpl.n	80150e2 <_stop() [clone .isra.0]+0x1a>
 80150de:	3b01      	subs	r3, #1
 80150e0:	d1f9      	bne.n	80150d6 <_stop() [clone .isra.0]+0xe>
 80150e2:	bd08      	pop	{r3, pc}
 80150e4:	40005400 	andmi	r5, r0, r0, lsl #8
 80150e8:	40005000 	andmi	r5, r0, r0

080150ec <gd32_i2c_begin()>:
 80150ec:	b510      	push	{r4, lr}
 80150ee:	f240 7015 	movw	r0, #1813	; 0x715
 80150f2:	f7ff fb07 	bl	8014704 <rcu_periph_clock_enable>
 80150f6:	4c15      	ldr	r4, [pc, #84]	; (801514c <gd32_i2c_begin()+0x60>)
 80150f8:	f240 6003 	movw	r0, #1539	; 0x603
 80150fc:	f7ff fb02 	bl	8014704 <rcu_periph_clock_enable>
 8015100:	f240 6003 	movw	r0, #1539	; 0x603
 8015104:	f7ff fafe 	bl	8014704 <rcu_periph_clock_enable>
 8015108:	4620      	mov	r0, r4
 801510a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801510e:	2203      	movs	r2, #3
 8015110:	211c      	movs	r1, #28
 8015112:	f7ff fa5f 	bl	80145d4 <gpio_init>
 8015116:	f44f 7300 	mov.w	r3, #512	; 0x200
 801511a:	2203      	movs	r2, #3
 801511c:	4620      	mov	r0, r4
 801511e:	211c      	movs	r1, #28
 8015120:	f7ff fa58 	bl	80145d4 <gpio_init>
 8015124:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 8015128:	2101      	movs	r1, #1
 801512a:	2002      	movs	r0, #2
 801512c:	f7ff faa6 	bl	801467c <gpio_pin_remap_config>
 8015130:	4620      	mov	r0, r4
 8015132:	4907      	ldr	r1, [pc, #28]	; (8015150 <gd32_i2c_begin()+0x64>)
 8015134:	2200      	movs	r2, #0
 8015136:	f000 ff6d 	bl	8016014 <i2c_clock_config>
 801513a:	4620      	mov	r0, r4
 801513c:	f000 ffe6 	bl	801610c <i2c_enable>
 8015140:	4620      	mov	r0, r4
 8015142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015146:	2101      	movs	r1, #1
 8015148:	f000 bfc6 	b.w	80160d8 <i2c_ack_config>
 801514c:	40010c00 	andmi	r0, r1, r0, lsl #24
 8015150:	00061a80 	andeq	r1, r6, r0, lsl #21

08015154 <gd32_i2c_set_baudrate(unsigned int)>:
 8015154:	4601      	mov	r1, r0
 8015156:	2200      	movs	r2, #0
 8015158:	4801      	ldr	r0, [pc, #4]	; (8015160 <gd32_i2c_set_baudrate(unsigned int)+0xc>)
 801515a:	f000 bf5b 	b.w	8016014 <i2c_clock_config>
 801515e:	bf00      	nop
 8015160:	40005400 	andmi	r5, r0, r0, lsl #8

08015164 <gd32_i2c_set_address(unsigned char)>:
 8015164:	4b01      	ldr	r3, [pc, #4]	; (801516c <gd32_i2c_set_address(unsigned char)+0x8>)
 8015166:	0040      	lsls	r0, r0, #1
 8015168:	7018      	strb	r0, [r3, #0]
 801516a:	4770      	bx	lr
 801516c:	2000a73c 	andcs	sl, r0, ip, lsr r7

08015170 <gd32_i2c_write(char const*, unsigned int)>:
 8015170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015172:	4604      	mov	r4, r0
 8015174:	460f      	mov	r7, r1
 8015176:	f640 75ff 	movw	r5, #4095	; 0xfff
 801517a:	4e2e      	ldr	r6, [pc, #184]	; (8015234 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 801517c:	f240 6101 	movw	r1, #1537	; 0x601
 8015180:	4630      	mov	r0, r6
 8015182:	f000 ffd7 	bl	8016134 <i2c_flag_get>
 8015186:	b9b0      	cbnz	r0, 80151b6 <gd32_i2c_write(char const*, unsigned int)+0x46>
 8015188:	482a      	ldr	r0, [pc, #168]	; (8015234 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 801518a:	f000 ffc4 	bl	8016116 <i2c_start_on_bus>
 801518e:	f640 75ff 	movw	r5, #4095	; 0xfff
 8015192:	4e28      	ldr	r6, [pc, #160]	; (8015234 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8015194:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8015198:	4630      	mov	r0, r6
 801519a:	f000 ffcb 	bl	8016134 <i2c_flag_get>
 801519e:	b190      	cbz	r0, 80151c6 <gd32_i2c_write(char const*, unsigned int)+0x56>
 80151a0:	4b25      	ldr	r3, [pc, #148]	; (8015238 <gd32_i2c_write(char const*, unsigned int)+0xc8>)
 80151a2:	f06f 0201 	mvn.w	r2, #1
 80151a6:	7819      	ldrb	r1, [r3, #0]
 80151a8:	4822      	ldr	r0, [pc, #136]	; (8015234 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80151aa:	f000 ffa7 	bl	80160fc <i2c_master_addressing>
 80151ae:	f640 75ff 	movw	r5, #4095	; 0xfff
 80151b2:	4e20      	ldr	r6, [pc, #128]	; (8015234 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80151b4:	e00c      	b.n	80151d0 <gd32_i2c_write(char const*, unsigned int)+0x60>
 80151b6:	3d01      	subs	r5, #1
 80151b8:	d1e0      	bne.n	801517c <gd32_i2c_write(char const*, unsigned int)+0xc>
 80151ba:	f7ff ff85 	bl	80150c8 <_stop() [clone .isra.0]>
 80151be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80151c2:	4240      	negs	r0, r0
 80151c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151c6:	3d01      	subs	r5, #1
 80151c8:	d1e4      	bne.n	8015194 <gd32_i2c_write(char const*, unsigned int)+0x24>
 80151ca:	e7f6      	b.n	80151ba <gd32_i2c_write(char const*, unsigned int)+0x4a>
 80151cc:	3d01      	subs	r5, #1
 80151ce:	d0f4      	beq.n	80151ba <gd32_i2c_write(char const*, unsigned int)+0x4a>
 80151d0:	f240 5101 	movw	r1, #1281	; 0x501
 80151d4:	4630      	mov	r0, r6
 80151d6:	f000 ffad 	bl	8016134 <i2c_flag_get>
 80151da:	2800      	cmp	r0, #0
 80151dc:	d0f6      	beq.n	80151cc <gd32_i2c_write(char const*, unsigned int)+0x5c>
 80151de:	f240 5101 	movw	r1, #1281	; 0x501
 80151e2:	4814      	ldr	r0, [pc, #80]	; (8015234 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80151e4:	f000 ffb1 	bl	801614a <i2c_flag_clear>
 80151e8:	f640 75ff 	movw	r5, #4095	; 0xfff
 80151ec:	4e11      	ldr	r6, [pc, #68]	; (8015234 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80151ee:	f240 5107 	movw	r1, #1287	; 0x507
 80151f2:	4630      	mov	r0, r6
 80151f4:	f000 ff9e 	bl	8016134 <i2c_flag_get>
 80151f8:	2801      	cmp	r0, #1
 80151fa:	d107      	bne.n	801520c <gd32_i2c_write(char const*, unsigned int)+0x9c>
 80151fc:	4e0d      	ldr	r6, [pc, #52]	; (8015234 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80151fe:	4427      	add	r7, r4
 8015200:	42a7      	cmp	r7, r4
 8015202:	d106      	bne.n	8015212 <gd32_i2c_write(char const*, unsigned int)+0xa2>
 8015204:	f7ff ff60 	bl	80150c8 <_stop() [clone .isra.0]>
 8015208:	2000      	movs	r0, #0
 801520a:	e7da      	b.n	80151c2 <gd32_i2c_write(char const*, unsigned int)+0x52>
 801520c:	3d01      	subs	r5, #1
 801520e:	d1ee      	bne.n	80151ee <gd32_i2c_write(char const*, unsigned int)+0x7e>
 8015210:	e7d3      	b.n	80151ba <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8015212:	4630      	mov	r0, r6
 8015214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015218:	f000 ff87 	bl	801612a <i2c_data_transmit>
 801521c:	f640 75ff 	movw	r5, #4095	; 0xfff
 8015220:	f240 5102 	movw	r1, #1282	; 0x502
 8015224:	4630      	mov	r0, r6
 8015226:	f000 ff85 	bl	8016134 <i2c_flag_get>
 801522a:	2800      	cmp	r0, #0
 801522c:	d1e8      	bne.n	8015200 <gd32_i2c_write(char const*, unsigned int)+0x90>
 801522e:	3d01      	subs	r5, #1
 8015230:	d1f6      	bne.n	8015220 <gd32_i2c_write(char const*, unsigned int)+0xb0>
 8015232:	e7c2      	b.n	80151ba <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8015234:	40005400 	andmi	r5, r0, r0, lsl #8
 8015238:	2000a73c 	andcs	sl, r0, ip, lsr r7

0801523c <gd32_i2c_read(char*, unsigned int)>:
 801523c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015240:	4680      	mov	r8, r0
 8015242:	460c      	mov	r4, r1
 8015244:	f640 76ff 	movw	r6, #4095	; 0xfff
 8015248:	4f4b      	ldr	r7, [pc, #300]	; (8015378 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 801524a:	f240 6101 	movw	r1, #1537	; 0x601
 801524e:	4638      	mov	r0, r7
 8015250:	f000 ff70 	bl	8016134 <i2c_flag_get>
 8015254:	4605      	mov	r5, r0
 8015256:	bb08      	cbnz	r0, 801529c <gd32_i2c_read(char*, unsigned int)+0x60>
 8015258:	2c02      	cmp	r4, #2
 801525a:	d103      	bne.n	8015264 <gd32_i2c_read(char*, unsigned int)+0x28>
 801525c:	4601      	mov	r1, r0
 801525e:	4846      	ldr	r0, [pc, #280]	; (8015378 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8015260:	f000 ff43 	bl	80160ea <i2c_ackpos_config>
 8015264:	4844      	ldr	r0, [pc, #272]	; (8015378 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8015266:	f000 ff56 	bl	8016116 <i2c_start_on_bus>
 801526a:	f640 76ff 	movw	r6, #4095	; 0xfff
 801526e:	4f42      	ldr	r7, [pc, #264]	; (8015378 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8015270:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8015274:	4638      	mov	r0, r7
 8015276:	f000 ff5d 	bl	8016134 <i2c_flag_get>
 801527a:	b1a8      	cbz	r0, 80152a8 <gd32_i2c_read(char*, unsigned int)+0x6c>
 801527c:	4b3f      	ldr	r3, [pc, #252]	; (801537c <gd32_i2c_read(char*, unsigned int)+0x140>)
 801527e:	2201      	movs	r2, #1
 8015280:	7819      	ldrb	r1, [r3, #0]
 8015282:	483d      	ldr	r0, [pc, #244]	; (8015378 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8015284:	f000 ff3a 	bl	80160fc <i2c_master_addressing>
 8015288:	2c02      	cmp	r4, #2
 801528a:	d803      	bhi.n	8015294 <gd32_i2c_read(char*, unsigned int)+0x58>
 801528c:	2100      	movs	r1, #0
 801528e:	483a      	ldr	r0, [pc, #232]	; (8015378 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8015290:	f000 ff22 	bl	80160d8 <i2c_ack_config>
 8015294:	f640 76ff 	movw	r6, #4095	; 0xfff
 8015298:	4f37      	ldr	r7, [pc, #220]	; (8015378 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 801529a:	e00a      	b.n	80152b2 <gd32_i2c_read(char*, unsigned int)+0x76>
 801529c:	3e01      	subs	r6, #1
 801529e:	d1d4      	bne.n	801524a <gd32_i2c_read(char*, unsigned int)+0xe>
 80152a0:	f7ff ff12 	bl	80150c8 <_stop() [clone .isra.0]>
 80152a4:	2504      	movs	r5, #4
 80152a6:	e04d      	b.n	8015344 <gd32_i2c_read(char*, unsigned int)+0x108>
 80152a8:	3e01      	subs	r6, #1
 80152aa:	d1e1      	bne.n	8015270 <gd32_i2c_read(char*, unsigned int)+0x34>
 80152ac:	e7f8      	b.n	80152a0 <gd32_i2c_read(char*, unsigned int)+0x64>
 80152ae:	3e01      	subs	r6, #1
 80152b0:	d0f6      	beq.n	80152a0 <gd32_i2c_read(char*, unsigned int)+0x64>
 80152b2:	f240 5101 	movw	r1, #1281	; 0x501
 80152b6:	4638      	mov	r0, r7
 80152b8:	f000 ff3c 	bl	8016134 <i2c_flag_get>
 80152bc:	2800      	cmp	r0, #0
 80152be:	d0f6      	beq.n	80152ae <gd32_i2c_read(char*, unsigned int)+0x72>
 80152c0:	f240 5101 	movw	r1, #1281	; 0x501
 80152c4:	482c      	ldr	r0, [pc, #176]	; (8015378 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80152c6:	f000 ff40 	bl	801614a <i2c_flag_clear>
 80152ca:	2c01      	cmp	r4, #1
 80152cc:	d102      	bne.n	80152d4 <gd32_i2c_read(char*, unsigned int)+0x98>
 80152ce:	482a      	ldr	r0, [pc, #168]	; (8015378 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80152d0:	f000 ff26 	bl	8016120 <i2c_stop_on_bus>
 80152d4:	f640 77ff 	movw	r7, #4095	; 0xfff
 80152d8:	4e27      	ldr	r6, [pc, #156]	; (8015378 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80152da:	e022      	b.n	8015322 <gd32_i2c_read(char*, unsigned int)+0xe6>
 80152dc:	2c03      	cmp	r4, #3
 80152de:	d134      	bne.n	801534a <gd32_i2c_read(char*, unsigned int)+0x10e>
 80152e0:	f640 79ff 	movw	r9, #4095	; 0xfff
 80152e4:	e002      	b.n	80152ec <gd32_i2c_read(char*, unsigned int)+0xb0>
 80152e6:	f1b9 0901 	subs.w	r9, r9, #1
 80152ea:	d0d9      	beq.n	80152a0 <gd32_i2c_read(char*, unsigned int)+0x64>
 80152ec:	f240 5102 	movw	r1, #1282	; 0x502
 80152f0:	4630      	mov	r0, r6
 80152f2:	f000 ff1f 	bl	8016134 <i2c_flag_get>
 80152f6:	2800      	cmp	r0, #0
 80152f8:	d0f5      	beq.n	80152e6 <gd32_i2c_read(char*, unsigned int)+0xaa>
 80152fa:	2100      	movs	r1, #0
 80152fc:	4630      	mov	r0, r6
 80152fe:	f000 feeb 	bl	80160d8 <i2c_ack_config>
 8015302:	f240 5106 	movw	r1, #1286	; 0x506
 8015306:	4630      	mov	r0, r6
 8015308:	f000 ff14 	bl	8016134 <i2c_flag_get>
 801530c:	b138      	cbz	r0, 801531e <gd32_i2c_read(char*, unsigned int)+0xe2>
 801530e:	4630      	mov	r0, r6
 8015310:	f000 ff0d 	bl	801612e <i2c_data_receive>
 8015314:	f640 77ff 	movw	r7, #4095	; 0xfff
 8015318:	f808 0b01 	strb.w	r0, [r8], #1
 801531c:	3c01      	subs	r4, #1
 801531e:	3f01      	subs	r7, #1
 8015320:	d0be      	beq.n	80152a0 <gd32_i2c_read(char*, unsigned int)+0x64>
 8015322:	2c00      	cmp	r4, #0
 8015324:	d1da      	bne.n	80152dc <gd32_i2c_read(char*, unsigned int)+0xa0>
 8015326:	f640 73ff 	movw	r3, #4095	; 0xfff
 801532a:	4915      	ldr	r1, [pc, #84]	; (8015380 <gd32_i2c_read(char*, unsigned int)+0x144>)
 801532c:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8015330:	0592      	lsls	r2, r2, #22
 8015332:	d41d      	bmi.n	8015370 <gd32_i2c_read(char*, unsigned int)+0x134>
 8015334:	2101      	movs	r1, #1
 8015336:	4810      	ldr	r0, [pc, #64]	; (8015378 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8015338:	f000 fece 	bl	80160d8 <i2c_ack_config>
 801533c:	2101      	movs	r1, #1
 801533e:	480e      	ldr	r0, [pc, #56]	; (8015378 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8015340:	f000 fed3 	bl	80160ea <i2c_ackpos_config>
 8015344:	4628      	mov	r0, r5
 8015346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801534a:	2c02      	cmp	r4, #2
 801534c:	d1d9      	bne.n	8015302 <gd32_i2c_read(char*, unsigned int)+0xc6>
 801534e:	f640 79ff 	movw	r9, #4095	; 0xfff
 8015352:	e002      	b.n	801535a <gd32_i2c_read(char*, unsigned int)+0x11e>
 8015354:	f1b9 0901 	subs.w	r9, r9, #1
 8015358:	d0a2      	beq.n	80152a0 <gd32_i2c_read(char*, unsigned int)+0x64>
 801535a:	f240 5102 	movw	r1, #1282	; 0x502
 801535e:	4630      	mov	r0, r6
 8015360:	f000 fee8 	bl	8016134 <i2c_flag_get>
 8015364:	2800      	cmp	r0, #0
 8015366:	d0f5      	beq.n	8015354 <gd32_i2c_read(char*, unsigned int)+0x118>
 8015368:	4630      	mov	r0, r6
 801536a:	f000 fed9 	bl	8016120 <i2c_stop_on_bus>
 801536e:	e7c8      	b.n	8015302 <gd32_i2c_read(char*, unsigned int)+0xc6>
 8015370:	3b01      	subs	r3, #1
 8015372:	d1db      	bne.n	801532c <gd32_i2c_read(char*, unsigned int)+0xf0>
 8015374:	e796      	b.n	80152a4 <gd32_i2c_read(char*, unsigned int)+0x68>
 8015376:	bf00      	nop
 8015378:	40005400 	andmi	r5, r0, r0, lsl #8
 801537c:	2000a73c 	andcs	sl, r0, ip, lsr r7
 8015380:	40005000 	andmi	r5, r0, r0

08015384 <gd32_uart_begin>:
 8015384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015386:	461e      	mov	r6, r3
 8015388:	4b82      	ldr	r3, [pc, #520]	; (8015594 <gd32_uart_begin+0x210>)
 801538a:	4604      	mov	r4, r0
 801538c:	4298      	cmp	r0, r3
 801538e:	460f      	mov	r7, r1
 8015390:	4615      	mov	r5, r2
 8015392:	d060      	beq.n	8015456 <gd32_uart_begin+0xd2>
 8015394:	d80f      	bhi.n	80153b6 <gd32_uart_begin+0x32>
 8015396:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 801539a:	4298      	cmp	r0, r3
 801539c:	d04a      	beq.n	8015434 <gd32_uart_begin+0xb0>
 801539e:	d84c      	bhi.n	801543a <gd32_uart_begin+0xb6>
 80153a0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80153a4:	4298      	cmp	r0, r3
 80153a6:	d03e      	beq.n	8015426 <gd32_uart_begin+0xa2>
 80153a8:	f240 7012 	movw	r0, #1810	; 0x712
 80153ac:	f7ff f9aa 	bl	8014704 <rcu_periph_clock_enable>
 80153b0:	f240 6004 	movw	r0, #1540	; 0x604
 80153b4:	e00f      	b.n	80153d6 <gd32_uart_begin+0x52>
 80153b6:	4b78      	ldr	r3, [pc, #480]	; (8015598 <gd32_uart_begin+0x214>)
 80153b8:	4298      	cmp	r0, r3
 80153ba:	d006      	beq.n	80153ca <gd32_uart_begin+0x46>
 80153bc:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 80153c0:	4298      	cmp	r0, r3
 80153c2:	d045      	beq.n	8015450 <gd32_uart_begin+0xcc>
 80153c4:	f641 201f 	movw	r0, #6687	; 0x1a1f
 80153c8:	e047      	b.n	801545a <gd32_uart_begin+0xd6>
 80153ca:	f240 600e 	movw	r0, #1550	; 0x60e
 80153ce:	f7ff f999 	bl	8014704 <rcu_periph_clock_enable>
 80153d2:	f240 6003 	movw	r0, #1539	; 0x603
 80153d6:	f7ff f995 	bl	8014704 <rcu_periph_clock_enable>
 80153da:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80153de:	f7ff f991 	bl	8014704 <rcu_periph_clock_enable>
 80153e2:	4b6c      	ldr	r3, [pc, #432]	; (8015594 <gd32_uart_begin+0x210>)
 80153e4:	429c      	cmp	r4, r3
 80153e6:	f000 80c3 	beq.w	8015570 <gd32_uart_begin+0x1ec>
 80153ea:	d83b      	bhi.n	8015464 <gd32_uart_begin+0xe0>
 80153ec:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 80153f0:	429c      	cmp	r4, r3
 80153f2:	f000 809c 	beq.w	801552e <gd32_uart_begin+0x1aa>
 80153f6:	f200 80a7 	bhi.w	8015548 <gd32_uart_begin+0x1c4>
 80153fa:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80153fe:	429c      	cmp	r4, r3
 8015400:	f000 8088 	beq.w	8015514 <gd32_uart_begin+0x190>
 8015404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015408:	2203      	movs	r2, #3
 801540a:	2118      	movs	r1, #24
 801540c:	4863      	ldr	r0, [pc, #396]	; (801559c <gd32_uart_begin+0x218>)
 801540e:	f7ff f8e1 	bl	80145d4 <gpio_init>
 8015412:	2104      	movs	r1, #4
 8015414:	4861      	ldr	r0, [pc, #388]	; (801559c <gd32_uart_begin+0x218>)
 8015416:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801541a:	2203      	movs	r2, #3
 801541c:	f7ff f8da 	bl	80145d4 <gpio_init>
 8015420:	2101      	movs	r1, #1
 8015422:	485f      	ldr	r0, [pc, #380]	; (80155a0 <gd32_uart_begin+0x21c>)
 8015424:	e03b      	b.n	801549e <gd32_uart_begin+0x11a>
 8015426:	f240 7011 	movw	r0, #1809	; 0x711
 801542a:	f7ff f96b 	bl	8014704 <rcu_periph_clock_enable>
 801542e:	f240 6002 	movw	r0, #1538	; 0x602
 8015432:	e7d0      	b.n	80153d6 <gd32_uart_begin+0x52>
 8015434:	f240 7013 	movw	r0, #1811	; 0x713
 8015438:	e7b8      	b.n	80153ac <gd32_uart_begin+0x28>
 801543a:	f240 7014 	movw	r0, #1812	; 0x714
 801543e:	f7ff f961 	bl	8014704 <rcu_periph_clock_enable>
 8015442:	f240 6004 	movw	r0, #1540	; 0x604
 8015446:	f7ff f95d 	bl	8014704 <rcu_periph_clock_enable>
 801544a:	f240 6005 	movw	r0, #1541	; 0x605
 801544e:	e7c2      	b.n	80153d6 <gd32_uart_begin+0x52>
 8015450:	f641 1018 	movw	r0, #6424	; 0x1918
 8015454:	e7aa      	b.n	80153ac <gd32_uart_begin+0x28>
 8015456:	f641 201e 	movw	r0, #6686	; 0x1a1e
 801545a:	f7ff f953 	bl	8014704 <rcu_periph_clock_enable>
 801545e:	f240 6006 	movw	r0, #1542	; 0x606
 8015462:	e7b8      	b.n	80153d6 <gd32_uart_begin+0x52>
 8015464:	4b4c      	ldr	r3, [pc, #304]	; (8015598 <gd32_uart_begin+0x214>)
 8015466:	429c      	cmp	r4, r3
 8015468:	d00b      	beq.n	8015482 <gd32_uart_begin+0xfe>
 801546a:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 801546e:	429c      	cmp	r4, r3
 8015470:	d076      	beq.n	8015560 <gd32_uart_begin+0x1dc>
 8015472:	2302      	movs	r3, #2
 8015474:	2203      	movs	r2, #3
 8015476:	2118      	movs	r1, #24
 8015478:	484a      	ldr	r0, [pc, #296]	; (80155a4 <gd32_uart_begin+0x220>)
 801547a:	f7ff f8ab 	bl	80145d4 <gpio_init>
 801547e:	2301      	movs	r3, #1
 8015480:	e07e      	b.n	8015580 <gd32_uart_begin+0x1fc>
 8015482:	2340      	movs	r3, #64	; 0x40
 8015484:	2203      	movs	r2, #3
 8015486:	2118      	movs	r1, #24
 8015488:	4847      	ldr	r0, [pc, #284]	; (80155a8 <gd32_uart_begin+0x224>)
 801548a:	f7ff f8a3 	bl	80145d4 <gpio_init>
 801548e:	2104      	movs	r1, #4
 8015490:	4845      	ldr	r0, [pc, #276]	; (80155a8 <gd32_uart_begin+0x224>)
 8015492:	2380      	movs	r3, #128	; 0x80
 8015494:	2203      	movs	r2, #3
 8015496:	f7ff f89d 	bl	80145d4 <gpio_init>
 801549a:	2101      	movs	r1, #1
 801549c:	2004      	movs	r0, #4
 801549e:	f7ff f8ed 	bl	801467c <gpio_pin_remap_config>
 80154a2:	4620      	mov	r0, r4
 80154a4:	f7ff fc08 	bl	8014cb8 <usart_deinit>
 80154a8:	68e3      	ldr	r3, [r4, #12]
 80154aa:	4639      	mov	r1, r7
 80154ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80154b0:	4620      	mov	r0, r4
 80154b2:	60e3      	str	r3, [r4, #12]
 80154b4:	f7ff fc62 	bl	8014d7c <usart_baudrate_set>
 80154b8:	f1a5 0309 	sub.w	r3, r5, #9
 80154bc:	4259      	negs	r1, r3
 80154be:	4159      	adcs	r1, r3
 80154c0:	4620      	mov	r0, r4
 80154c2:	0309      	lsls	r1, r1, #12
 80154c4:	f7ff fc96 	bl	8014df4 <usart_word_length_set>
 80154c8:	9906      	ldr	r1, [sp, #24]
 80154ca:	4620      	mov	r0, r4
 80154cc:	1e8a      	subs	r2, r1, #2
 80154ce:	4251      	negs	r1, r2
 80154d0:	4151      	adcs	r1, r2
 80154d2:	0349      	lsls	r1, r1, #13
 80154d4:	f7ff fc96 	bl	8014e04 <usart_stop_bit_set>
 80154d8:	2e01      	cmp	r6, #1
 80154da:	d055      	beq.n	8015588 <gd32_uart_begin+0x204>
 80154dc:	2e02      	cmp	r6, #2
 80154de:	d156      	bne.n	801558e <gd32_uart_begin+0x20a>
 80154e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80154e4:	4620      	mov	r0, r4
 80154e6:	f7ff fc7d 	bl	8014de4 <usart_parity_config>
 80154ea:	2100      	movs	r1, #0
 80154ec:	4620      	mov	r0, r4
 80154ee:	f7ff fc9d 	bl	8014e2c <usart_hardware_flow_rts_config>
 80154f2:	2100      	movs	r1, #0
 80154f4:	4620      	mov	r0, r4
 80154f6:	f7ff fc9f 	bl	8014e38 <usart_hardware_flow_cts_config>
 80154fa:	2104      	movs	r1, #4
 80154fc:	4620      	mov	r0, r4
 80154fe:	f7ff fc8f 	bl	8014e20 <usart_receive_config>
 8015502:	2108      	movs	r1, #8
 8015504:	4620      	mov	r0, r4
 8015506:	f7ff fc85 	bl	8014e14 <usart_transmit_config>
 801550a:	68e3      	ldr	r3, [r4, #12]
 801550c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015510:	60e3      	str	r3, [r4, #12]
 8015512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015514:	2304      	movs	r3, #4
 8015516:	2203      	movs	r2, #3
 8015518:	2118      	movs	r1, #24
 801551a:	4824      	ldr	r0, [pc, #144]	; (80155ac <gd32_uart_begin+0x228>)
 801551c:	f7ff f85a 	bl	80145d4 <gpio_init>
 8015520:	2308      	movs	r3, #8
 8015522:	2203      	movs	r2, #3
 8015524:	2104      	movs	r1, #4
 8015526:	4821      	ldr	r0, [pc, #132]	; (80155ac <gd32_uart_begin+0x228>)
 8015528:	f7ff f854 	bl	80145d4 <gpio_init>
 801552c:	e7b9      	b.n	80154a2 <gd32_uart_begin+0x11e>
 801552e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015532:	2203      	movs	r2, #3
 8015534:	2118      	movs	r1, #24
 8015536:	4819      	ldr	r0, [pc, #100]	; (801559c <gd32_uart_begin+0x218>)
 8015538:	f7ff f84c 	bl	80145d4 <gpio_init>
 801553c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015540:	2203      	movs	r2, #3
 8015542:	2104      	movs	r1, #4
 8015544:	4815      	ldr	r0, [pc, #84]	; (801559c <gd32_uart_begin+0x218>)
 8015546:	e7ef      	b.n	8015528 <gd32_uart_begin+0x1a4>
 8015548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801554c:	2203      	movs	r2, #3
 801554e:	2118      	movs	r1, #24
 8015550:	4812      	ldr	r0, [pc, #72]	; (801559c <gd32_uart_begin+0x218>)
 8015552:	f7ff f83f 	bl	80145d4 <gpio_init>
 8015556:	2304      	movs	r3, #4
 8015558:	2203      	movs	r2, #3
 801555a:	4619      	mov	r1, r3
 801555c:	4814      	ldr	r0, [pc, #80]	; (80155b0 <gd32_uart_begin+0x22c>)
 801555e:	e7e3      	b.n	8015528 <gd32_uart_begin+0x1a4>
 8015560:	2340      	movs	r3, #64	; 0x40
 8015562:	2203      	movs	r2, #3
 8015564:	2118      	movs	r1, #24
 8015566:	480d      	ldr	r0, [pc, #52]	; (801559c <gd32_uart_begin+0x218>)
 8015568:	f7ff f834 	bl	80145d4 <gpio_init>
 801556c:	2380      	movs	r3, #128	; 0x80
 801556e:	e7e7      	b.n	8015540 <gd32_uart_begin+0x1bc>
 8015570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015574:	2203      	movs	r2, #3
 8015576:	2118      	movs	r1, #24
 8015578:	480a      	ldr	r0, [pc, #40]	; (80155a4 <gd32_uart_begin+0x220>)
 801557a:	f7ff f82b 	bl	80145d4 <gpio_init>
 801557e:	2380      	movs	r3, #128	; 0x80
 8015580:	2203      	movs	r2, #3
 8015582:	2104      	movs	r1, #4
 8015584:	4807      	ldr	r0, [pc, #28]	; (80155a4 <gd32_uart_begin+0x220>)
 8015586:	e7cf      	b.n	8015528 <gd32_uart_begin+0x1a4>
 8015588:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801558c:	e7aa      	b.n	80154e4 <gd32_uart_begin+0x160>
 801558e:	2100      	movs	r1, #0
 8015590:	e7a8      	b.n	80154e4 <gd32_uart_begin+0x160>
 8015592:	bf00      	nop
 8015594:	40007800 	andmi	r7, r0, r0, lsl #16
 8015598:	40013800 	andmi	r3, r1, r0, lsl #16
 801559c:	40011000 	andmi	r1, r1, r0
 80155a0:	00140010 	andseq	r0, r4, r0, lsl r0
 80155a4:	40011800 	andmi	r1, r1, r0, lsl #16
 80155a8:	40010c00 	andmi	r0, r1, r0, lsl #24
 80155ac:	40010800 	andmi	r0, r1, r0, lsl #16
 80155b0:	40011400 	andmi	r1, r1, r0, lsl #8

080155b4 <micros_init()>:
 80155b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80155b6:	2400      	movs	r4, #0
 80155b8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80155bc:	4d22      	ldr	r5, [pc, #136]	; (8015648 <micros_init()+0x94>)
 80155be:	f240 6013 	movw	r0, #1555	; 0x613
 80155c2:	f7ff f89f 	bl	8014704 <rcu_periph_clock_enable>
 80155c6:	4628      	mov	r0, r5
 80155c8:	f7ff fa10 	bl	80149ec <timer_deinit>
 80155cc:	4b1f      	ldr	r3, [pc, #124]	; (801564c <micros_init()+0x98>)
 80155ce:	4628      	mov	r0, r5
 80155d0:	f8c3 4c24 	str.w	r4, [r3, #3108]	; 0xc24
 80155d4:	4669      	mov	r1, sp
 80155d6:	9400      	str	r4, [sp, #0]
 80155d8:	f8ad 4004 	strh.w	r4, [sp, #4]
 80155dc:	9602      	str	r6, [sp, #8]
 80155de:	f8ad 400c 	strh.w	r4, [sp, #12]
 80155e2:	f7ff faa9 	bl	8014b38 <timer_init>
 80155e6:	4628      	mov	r0, r5
 80155e8:	4621      	mov	r1, r4
 80155ea:	f7ff fb4e 	bl	8014c8a <timer_master_slave_mode_config>
 80155ee:	4628      	mov	r0, r5
 80155f0:	2107      	movs	r1, #7
 80155f2:	f7ff fb42 	bl	8014c7a <timer_slave_mode_select>
 80155f6:	2120      	movs	r1, #32
 80155f8:	4628      	mov	r0, r5
 80155fa:	f7ff fb2e 	bl	8014c5a <timer_input_trigger_source_select>
 80155fe:	4628      	mov	r0, r5
 8015600:	f7ff faf2 	bl	8014be8 <timer_enable>
 8015604:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8015608:	f240 6014 	movw	r0, #1556	; 0x614
 801560c:	f7ff f87a 	bl	8014704 <rcu_periph_clock_enable>
 8015610:	4628      	mov	r0, r5
 8015612:	f7ff f9eb 	bl	80149ec <timer_deinit>
 8015616:	2377      	movs	r3, #119	; 0x77
 8015618:	626c      	str	r4, [r5, #36]	; 0x24
 801561a:	4669      	mov	r1, sp
 801561c:	4628      	mov	r0, r5
 801561e:	9300      	str	r3, [sp, #0]
 8015620:	f8ad 4004 	strh.w	r4, [sp, #4]
 8015624:	9602      	str	r6, [sp, #8]
 8015626:	f8ad 400c 	strh.w	r4, [sp, #12]
 801562a:	f7ff fa85 	bl	8014b38 <timer_init>
 801562e:	4621      	mov	r1, r4
 8015630:	4628      	mov	r0, r5
 8015632:	f7ff fb2a 	bl	8014c8a <timer_master_slave_mode_config>
 8015636:	2120      	movs	r1, #32
 8015638:	4628      	mov	r0, r5
 801563a:	f7ff fb16 	bl	8014c6a <timer_master_output_trigger_source_select>
 801563e:	4628      	mov	r0, r5
 8015640:	f7ff fad2 	bl	8014be8 <timer_enable>
 8015644:	b004      	add	sp, #16
 8015646:	bd70      	pop	{r4, r5, r6, pc}
 8015648:	40014c00 	andmi	r4, r1, r0, lsl #24
 801564c:	40014000 	andmi	r4, r1, r0

08015650 <udelay_init()>:
 8015650:	4a07      	ldr	r2, [pc, #28]	; (8015670 <udelay_init()+0x20>)
 8015652:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8015656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801565a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 801565e:	2200      	movs	r2, #0
 8015660:	4b04      	ldr	r3, [pc, #16]	; (8015674 <udelay_init()+0x24>)
 8015662:	605a      	str	r2, [r3, #4]
 8015664:	681a      	ldr	r2, [r3, #0]
 8015666:	f042 0201 	orr.w	r2, r2, #1
 801566a:	601a      	str	r2, [r3, #0]
 801566c:	4770      	bx	lr
 801566e:	bf00      	nop
 8015670:	e000ed00 	and	lr, r0, r0, lsl #26
 8015674:	e0001000 	and	r1, r0, r0

08015678 <udelay(unsigned int, unsigned int)>:
 8015678:	2378      	movs	r3, #120	; 0x78
 801567a:	b530      	push	{r4, r5, lr}
 801567c:	4358      	muls	r0, r3
 801567e:	b909      	cbnz	r1, 8015684 <udelay(unsigned int, unsigned int)+0xc>
 8015680:	4b08      	ldr	r3, [pc, #32]	; (80156a4 <udelay(unsigned int, unsigned int)+0x2c>)
 8015682:	6859      	ldr	r1, [r3, #4]
 8015684:	2300      	movs	r3, #0
 8015686:	4c07      	ldr	r4, [pc, #28]	; (80156a4 <udelay(unsigned int, unsigned int)+0x2c>)
 8015688:	6862      	ldr	r2, [r4, #4]
 801568a:	4291      	cmp	r1, r2
 801568c:	d0fc      	beq.n	8015688 <udelay(unsigned int, unsigned int)+0x10>
 801568e:	bf2a      	itet	cs
 8015690:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 8015694:	189b      	addcc	r3, r3, r2
 8015696:	195b      	addcs	r3, r3, r5
 8015698:	1a5b      	subs	r3, r3, r1
 801569a:	4283      	cmp	r3, r0
 801569c:	d300      	bcc.n	80156a0 <udelay(unsigned int, unsigned int)+0x28>
 801569e:	bd30      	pop	{r4, r5, pc}
 80156a0:	4611      	mov	r1, r2
 80156a2:	e7f1      	b.n	8015688 <udelay(unsigned int, unsigned int)+0x10>
 80156a4:	e0001000 	and	r1, r0, r0

080156a8 <mac_address_get>:
 80156a8:	2102      	movs	r1, #2
 80156aa:	4a07      	ldr	r2, [pc, #28]	; (80156c8 <mac_address_get+0x20>)
 80156ac:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 80156b0:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 80156b4:	7001      	strb	r1, [r0, #0]
 80156b6:	7042      	strb	r2, [r0, #1]
 80156b8:	0e1a      	lsrs	r2, r3, #24
 80156ba:	7082      	strb	r2, [r0, #2]
 80156bc:	0c1a      	lsrs	r2, r3, #16
 80156be:	70c2      	strb	r2, [r0, #3]
 80156c0:	0a1a      	lsrs	r2, r3, #8
 80156c2:	7102      	strb	r2, [r0, #4]
 80156c4:	7143      	strb	r3, [r0, #5]
 80156c6:	4770      	bx	lr
 80156c8:	1ffff000 	svcne	0x00fff000

080156cc <adc_mode_config>:
 80156cc:	4b06      	ldr	r3, [pc, #24]	; (80156e8 <adc_mode_config+0x1c>)
 80156ce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80156d2:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80156d6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80156da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80156de:	4302      	orrs	r2, r0
 80156e0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80156e4:	4770      	bx	lr
 80156e6:	bf00      	nop
 80156e8:	40012000 	andmi	r2, r1, r0

080156ec <adc_special_function_config>:
 80156ec:	b510      	push	{r4, lr}
 80156ee:	f401 7380 	and.w	r3, r1, #256	; 0x100
 80156f2:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 80156f6:	f001 0102 	and.w	r1, r1, #2
 80156fa:	b17a      	cbz	r2, 801571c <adc_special_function_config+0x30>
 80156fc:	b11b      	cbz	r3, 8015706 <adc_special_function_config+0x1a>
 80156fe:	6843      	ldr	r3, [r0, #4]
 8015700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015704:	6043      	str	r3, [r0, #4]
 8015706:	b11c      	cbz	r4, 8015710 <adc_special_function_config+0x24>
 8015708:	6843      	ldr	r3, [r0, #4]
 801570a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801570e:	6043      	str	r3, [r0, #4]
 8015710:	b119      	cbz	r1, 801571a <adc_special_function_config+0x2e>
 8015712:	6883      	ldr	r3, [r0, #8]
 8015714:	f043 0302 	orr.w	r3, r3, #2
 8015718:	6083      	str	r3, [r0, #8]
 801571a:	bd10      	pop	{r4, pc}
 801571c:	b11b      	cbz	r3, 8015726 <adc_special_function_config+0x3a>
 801571e:	6843      	ldr	r3, [r0, #4]
 8015720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015724:	6043      	str	r3, [r0, #4]
 8015726:	b11c      	cbz	r4, 8015730 <adc_special_function_config+0x44>
 8015728:	6843      	ldr	r3, [r0, #4]
 801572a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801572e:	6043      	str	r3, [r0, #4]
 8015730:	2900      	cmp	r1, #0
 8015732:	d0f2      	beq.n	801571a <adc_special_function_config+0x2e>
 8015734:	6883      	ldr	r3, [r0, #8]
 8015736:	f023 0302 	bic.w	r3, r3, #2
 801573a:	e7ed      	b.n	8015718 <adc_special_function_config+0x2c>

0801573c <adc_data_alignment_config>:
 801573c:	6883      	ldr	r3, [r0, #8]
 801573e:	b119      	cbz	r1, 8015748 <adc_data_alignment_config+0xc>
 8015740:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015744:	6083      	str	r3, [r0, #8]
 8015746:	4770      	bx	lr
 8015748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801574c:	e7fa      	b.n	8015744 <adc_data_alignment_config+0x8>

0801574e <adc_enable>:
 801574e:	6883      	ldr	r3, [r0, #8]
 8015750:	07db      	lsls	r3, r3, #31
 8015752:	bf5e      	ittt	pl
 8015754:	6883      	ldrpl	r3, [r0, #8]
 8015756:	f043 0301 	orrpl.w	r3, r3, #1
 801575a:	6083      	strpl	r3, [r0, #8]
 801575c:	4770      	bx	lr

0801575e <adc_calibration_enable>:
 801575e:	6883      	ldr	r3, [r0, #8]
 8015760:	f100 0208 	add.w	r2, r0, #8
 8015764:	f043 0308 	orr.w	r3, r3, #8
 8015768:	6083      	str	r3, [r0, #8]
 801576a:	6813      	ldr	r3, [r2, #0]
 801576c:	0719      	lsls	r1, r3, #28
 801576e:	d4fc      	bmi.n	801576a <adc_calibration_enable+0xc>
 8015770:	6883      	ldr	r3, [r0, #8]
 8015772:	f043 0304 	orr.w	r3, r3, #4
 8015776:	6083      	str	r3, [r0, #8]
 8015778:	6813      	ldr	r3, [r2, #0]
 801577a:	075b      	lsls	r3, r3, #29
 801577c:	d4fc      	bmi.n	8015778 <adc_calibration_enable+0x1a>
 801577e:	4770      	bx	lr

08015780 <adc_tempsensor_vrefint_enable>:
 8015780:	4a03      	ldr	r2, [pc, #12]	; (8015790 <adc_tempsensor_vrefint_enable+0x10>)
 8015782:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 8015786:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801578a:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 801578e:	4770      	bx	lr
 8015790:	40012000 	andmi	r2, r1, r0

08015794 <adc_channel_length_config>:
 8015794:	2901      	cmp	r1, #1
 8015796:	d002      	beq.n	801579e <adc_channel_length_config+0xa>
 8015798:	2902      	cmp	r1, #2
 801579a:	d00c      	beq.n	80157b6 <adc_channel_length_config+0x22>
 801579c:	4770      	bx	lr
 801579e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80157a0:	3a01      	subs	r2, #1
 80157a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80157a6:	62c3      	str	r3, [r0, #44]	; 0x2c
 80157a8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80157aa:	0512      	lsls	r2, r2, #20
 80157ac:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 80157b0:	431a      	orrs	r2, r3
 80157b2:	62c2      	str	r2, [r0, #44]	; 0x2c
 80157b4:	4770      	bx	lr
 80157b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80157b8:	3a01      	subs	r2, #1
 80157ba:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80157be:	6383      	str	r3, [r0, #56]	; 0x38
 80157c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80157c2:	0512      	lsls	r2, r2, #20
 80157c4:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80157c8:	431a      	orrs	r2, r3
 80157ca:	6382      	str	r2, [r0, #56]	; 0x38
 80157cc:	4770      	bx	lr

080157ce <adc_inserted_channel_config>:
 80157ce:	b530      	push	{r4, r5, lr}
 80157d0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80157d2:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80157d4:	f3c4 5401 	ubfx	r4, r4, #20, #2
 80157d8:	1a61      	subs	r1, r4, r1
 80157da:	f06f 0404 	mvn.w	r4, #4
 80157de:	4361      	muls	r1, r4
 80157e0:	241f      	movs	r4, #31
 80157e2:	310f      	adds	r1, #15
 80157e4:	408c      	lsls	r4, r1
 80157e6:	ea25 0504 	bic.w	r5, r5, r4
 80157ea:	fa02 f101 	lsl.w	r1, r2, r1
 80157ee:	4329      	orrs	r1, r5
 80157f0:	2a09      	cmp	r2, #9
 80157f2:	6381      	str	r1, [r0, #56]	; 0x38
 80157f4:	d80b      	bhi.n	801580e <adc_inserted_channel_config+0x40>
 80157f6:	2407      	movs	r4, #7
 80157f8:	6901      	ldr	r1, [r0, #16]
 80157fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80157fe:	4094      	lsls	r4, r2
 8015800:	ea21 0104 	bic.w	r1, r1, r4
 8015804:	fa03 f202 	lsl.w	r2, r3, r2
 8015808:	430a      	orrs	r2, r1
 801580a:	6102      	str	r2, [r0, #16]
 801580c:	bd30      	pop	{r4, r5, pc}
 801580e:	2a11      	cmp	r2, #17
 8015810:	d8fc      	bhi.n	801580c <adc_inserted_channel_config+0x3e>
 8015812:	2407      	movs	r4, #7
 8015814:	3a0a      	subs	r2, #10
 8015816:	68c1      	ldr	r1, [r0, #12]
 8015818:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801581c:	4094      	lsls	r4, r2
 801581e:	ea21 0104 	bic.w	r1, r1, r4
 8015822:	4093      	lsls	r3, r2
 8015824:	430b      	orrs	r3, r1
 8015826:	60c3      	str	r3, [r0, #12]
 8015828:	e7f0      	b.n	801580c <adc_inserted_channel_config+0x3e>

0801582a <adc_external_trigger_source_config>:
 801582a:	2901      	cmp	r1, #1
 801582c:	d002      	beq.n	8015834 <adc_external_trigger_source_config+0xa>
 801582e:	2902      	cmp	r1, #2
 8015830:	d008      	beq.n	8015844 <adc_external_trigger_source_config+0x1a>
 8015832:	4770      	bx	lr
 8015834:	6883      	ldr	r3, [r0, #8]
 8015836:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 801583a:	6083      	str	r3, [r0, #8]
 801583c:	6883      	ldr	r3, [r0, #8]
 801583e:	4313      	orrs	r3, r2
 8015840:	6083      	str	r3, [r0, #8]
 8015842:	4770      	bx	lr
 8015844:	6883      	ldr	r3, [r0, #8]
 8015846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801584a:	e7f6      	b.n	801583a <adc_external_trigger_source_config+0x10>

0801584c <adc_external_trigger_config>:
 801584c:	f001 0301 	and.w	r3, r1, #1
 8015850:	f001 0102 	and.w	r1, r1, #2
 8015854:	b152      	cbz	r2, 801586c <adc_external_trigger_config+0x20>
 8015856:	b11b      	cbz	r3, 8015860 <adc_external_trigger_config+0x14>
 8015858:	6883      	ldr	r3, [r0, #8]
 801585a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801585e:	6083      	str	r3, [r0, #8]
 8015860:	b119      	cbz	r1, 801586a <adc_external_trigger_config+0x1e>
 8015862:	6883      	ldr	r3, [r0, #8]
 8015864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015868:	6083      	str	r3, [r0, #8]
 801586a:	4770      	bx	lr
 801586c:	b11b      	cbz	r3, 8015876 <adc_external_trigger_config+0x2a>
 801586e:	6883      	ldr	r3, [r0, #8]
 8015870:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015874:	6083      	str	r3, [r0, #8]
 8015876:	2900      	cmp	r1, #0
 8015878:	d0f7      	beq.n	801586a <adc_external_trigger_config+0x1e>
 801587a:	6883      	ldr	r3, [r0, #8]
 801587c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015880:	e7f2      	b.n	8015868 <adc_external_trigger_config+0x1c>

08015882 <adc_software_trigger_enable>:
 8015882:	07ca      	lsls	r2, r1, #31
 8015884:	bf42      	ittt	mi
 8015886:	6883      	ldrmi	r3, [r0, #8]
 8015888:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 801588c:	6083      	strmi	r3, [r0, #8]
 801588e:	078b      	lsls	r3, r1, #30
 8015890:	bf42      	ittt	mi
 8015892:	6883      	ldrmi	r3, [r0, #8]
 8015894:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8015898:	6083      	strmi	r3, [r0, #8]
 801589a:	4770      	bx	lr

0801589c <enet_delay>:
 801589c:	2300      	movs	r3, #0
 801589e:	b082      	sub	sp, #8
 80158a0:	9301      	str	r3, [sp, #4]
 80158a2:	9001      	str	r0, [sp, #4]
 80158a4:	9b01      	ldr	r3, [sp, #4]
 80158a6:	b90b      	cbnz	r3, 80158ac <enet_delay+0x10>
 80158a8:	b002      	add	sp, #8
 80158aa:	4770      	bx	lr
 80158ac:	9b01      	ldr	r3, [sp, #4]
 80158ae:	3b01      	subs	r3, #1
 80158b0:	9301      	str	r3, [sp, #4]
 80158b2:	e7f7      	b.n	80158a4 <enet_delay+0x8>

080158b4 <enet_software_reset>:
 80158b4:	4b07      	ldr	r3, [pc, #28]	; (80158d4 <enet_software_reset+0x20>)
 80158b6:	681a      	ldr	r2, [r3, #0]
 80158b8:	f042 0201 	orr.w	r2, r2, #1
 80158bc:	601a      	str	r2, [r3, #0]
 80158be:	4a06      	ldr	r2, [pc, #24]	; (80158d8 <enet_software_reset+0x24>)
 80158c0:	6819      	ldr	r1, [r3, #0]
 80158c2:	07c9      	lsls	r1, r1, #31
 80158c4:	d501      	bpl.n	80158ca <enet_software_reset+0x16>
 80158c6:	3a01      	subs	r2, #1
 80158c8:	d1fa      	bne.n	80158c0 <enet_software_reset+0xc>
 80158ca:	6818      	ldr	r0, [r3, #0]
 80158cc:	43c0      	mvns	r0, r0
 80158ce:	f000 0001 	and.w	r0, r0, #1
 80158d2:	4770      	bx	lr
 80158d4:	40029000 	andmi	r9, r2, r0
 80158d8:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

080158dc <enet_descriptors_chain_init>:
 80158dc:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 80158e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158e2:	4a19      	ldr	r2, [pc, #100]	; (8015948 <enet_descriptors_chain_init+0x6c>)
 80158e4:	d125      	bne.n	8015932 <enet_descriptors_chain_init+0x56>
 80158e6:	2500      	movs	r5, #0
 80158e8:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 80158ec:	2002      	movs	r0, #2
 80158ee:	4b17      	ldr	r3, [pc, #92]	; (801594c <enet_descriptors_chain_init+0x70>)
 80158f0:	4c17      	ldr	r4, [pc, #92]	; (8015950 <enet_descriptors_chain_init+0x74>)
 80158f2:	6113      	str	r3, [r2, #16]
 80158f4:	4a17      	ldr	r2, [pc, #92]	; (8015954 <enet_descriptors_chain_init+0x78>)
 80158f6:	6013      	str	r3, [r2, #0]
 80158f8:	2200      	movs	r2, #0
 80158fa:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 80158fe:	4916      	ldr	r1, [pc, #88]	; (8015958 <enet_descriptors_chain_init+0x7c>)
 8015900:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8015904:	600a      	str	r2, [r1, #0]
 8015906:	4915      	ldr	r1, [pc, #84]	; (801595c <enet_descriptors_chain_init+0x80>)
 8015908:	600a      	str	r2, [r1, #0]
 801590a:	f103 0110 	add.w	r1, r3, #16
 801590e:	fb0e 4702 	mla	r7, lr, r2, r4
 8015912:	f841 7c08 	str.w	r7, [r1, #-8]
 8015916:	4594      	cmp	ip, r2
 8015918:	bf94      	ite	ls
 801591a:	461f      	movls	r7, r3
 801591c:	460f      	movhi	r7, r1
 801591e:	3201      	adds	r2, #1
 8015920:	4290      	cmp	r0, r2
 8015922:	e941 6504 	strd	r6, r5, [r1, #-16]
 8015926:	f841 7c04 	str.w	r7, [r1, #-4]
 801592a:	f101 0110 	add.w	r1, r1, #16
 801592e:	d1ee      	bne.n	801590e <enet_descriptors_chain_init+0x32>
 8015930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015932:	4b0b      	ldr	r3, [pc, #44]	; (8015960 <enet_descriptors_chain_init+0x84>)
 8015934:	f244 55f4 	movw	r5, #17908	; 0x45f4
 8015938:	60d3      	str	r3, [r2, #12]
 801593a:	4a0a      	ldr	r2, [pc, #40]	; (8015964 <enet_descriptors_chain_init+0x88>)
 801593c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015940:	2008      	movs	r0, #8
 8015942:	4c09      	ldr	r4, [pc, #36]	; (8015968 <enet_descriptors_chain_init+0x8c>)
 8015944:	6013      	str	r3, [r2, #0]
 8015946:	e7d7      	b.n	80158f8 <enet_descriptors_chain_init+0x1c>
 8015948:	40029000 	andmi	r9, r2, r0
 801594c:	2000e394 	mulcs	r0, r4, r3
 8015950:	2000d7ac 	andcs	sp, r0, ip, lsr #15
 8015954:	2000a74c 	andcs	sl, r0, ip, asr #14
 8015958:	2000a740 	andcs	sl, r0, r0, asr #14
 801595c:	2000a744 	andcs	sl, r0, r4, asr #14
 8015960:	2000d72c 	andcs	sp, r0, ip, lsr #14
 8015964:	2000a748 	andcs	sl, r0, r8, asr #14
 8015968:	2000a78c 	andcs	sl, r0, ip, lsl #15

0801596c <enet_frame_receive>:
 801596c:	4a1d      	ldr	r2, [pc, #116]	; (80159e4 <enet_frame_receive+0x78>)
 801596e:	b510      	push	{r4, lr}
 8015970:	6813      	ldr	r3, [r2, #0]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	2b00      	cmp	r3, #0
 8015976:	db33      	blt.n	80159e0 <enet_frame_receive+0x74>
 8015978:	b970      	cbnz	r0, 8015998 <enet_frame_receive+0x2c>
 801597a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801597e:	6813      	ldr	r3, [r2, #0]
 8015980:	6019      	str	r1, [r3, #0]
 8015982:	4919      	ldr	r1, [pc, #100]	; (80159e8 <enet_frame_receive+0x7c>)
 8015984:	6948      	ldr	r0, [r1, #20]
 8015986:	0604      	lsls	r4, r0, #24
 8015988:	d419      	bmi.n	80159be <enet_frame_receive+0x52>
 801598a:	6859      	ldr	r1, [r3, #4]
 801598c:	0448      	lsls	r0, r1, #17
 801598e:	d51b      	bpl.n	80159c8 <enet_frame_receive+0x5c>
 8015990:	68db      	ldr	r3, [r3, #12]
 8015992:	2001      	movs	r0, #1
 8015994:	6013      	str	r3, [r2, #0]
 8015996:	bd10      	pop	{r4, pc}
 8015998:	f403 4403 	and.w	r4, r3, #33536	; 0x8300
 801599c:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 80159a0:	d11e      	bne.n	80159e0 <enet_frame_receive+0x74>
 80159a2:	f3c3 430d 	ubfx	r3, r3, #16, #14
 80159a6:	3b04      	subs	r3, #4
 80159a8:	428b      	cmp	r3, r1
 80159aa:	d819      	bhi.n	80159e0 <enet_frame_receive+0x74>
 80159ac:	2100      	movs	r1, #0
 80159ae:	4299      	cmp	r1, r3
 80159b0:	6814      	ldr	r4, [r2, #0]
 80159b2:	d2e2      	bcs.n	801597a <enet_frame_receive+0xe>
 80159b4:	68a4      	ldr	r4, [r4, #8]
 80159b6:	5d0c      	ldrb	r4, [r1, r4]
 80159b8:	5444      	strb	r4, [r0, r1]
 80159ba:	3101      	adds	r1, #1
 80159bc:	e7f7      	b.n	80159ae <enet_frame_receive+0x42>
 80159be:	2080      	movs	r0, #128	; 0x80
 80159c0:	6148      	str	r0, [r1, #20]
 80159c2:	2000      	movs	r0, #0
 80159c4:	6088      	str	r0, [r1, #8]
 80159c6:	e7e0      	b.n	801598a <enet_frame_receive+0x1e>
 80159c8:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80159cc:	4906      	ldr	r1, [pc, #24]	; (80159e8 <enet_frame_receive+0x7c>)
 80159ce:	bf05      	ittet	eq
 80159d0:	3310      	addeq	r3, #16
 80159d2:	6809      	ldreq	r1, [r1, #0]
 80159d4:	68cb      	ldrne	r3, [r1, #12]
 80159d6:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 80159da:	bf08      	it	eq
 80159dc:	185b      	addeq	r3, r3, r1
 80159de:	e7d8      	b.n	8015992 <enet_frame_receive+0x26>
 80159e0:	2000      	movs	r0, #0
 80159e2:	e7d8      	b.n	8015996 <enet_frame_receive+0x2a>
 80159e4:	2000a748 	andcs	sl, r0, r8, asr #14
 80159e8:	40029000 	andmi	r9, r2, r0

080159ec <enet_frame_transmit>:
 80159ec:	4a1e      	ldr	r2, [pc, #120]	; (8015a68 <enet_frame_transmit+0x7c>)
 80159ee:	b530      	push	{r4, r5, lr}
 80159f0:	6813      	ldr	r3, [r2, #0]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	db34      	blt.n	8015a62 <enet_frame_transmit+0x76>
 80159f8:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80159fc:	4299      	cmp	r1, r3
 80159fe:	d830      	bhi.n	8015a62 <enet_frame_transmit+0x76>
 8015a00:	b9e8      	cbnz	r0, 8015a3e <enet_frame_transmit+0x52>
 8015a02:	6813      	ldr	r3, [r2, #0]
 8015a04:	4819      	ldr	r0, [pc, #100]	; (8015a6c <enet_frame_transmit+0x80>)
 8015a06:	6059      	str	r1, [r3, #4]
 8015a08:	6819      	ldr	r1, [r3, #0]
 8015a0a:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 8015a0e:	6019      	str	r1, [r3, #0]
 8015a10:	6941      	ldr	r1, [r0, #20]
 8015a12:	6944      	ldr	r4, [r0, #20]
 8015a14:	f001 0104 	and.w	r1, r1, #4
 8015a18:	f004 0420 	and.w	r4, r4, #32
 8015a1c:	4321      	orrs	r1, r4
 8015a1e:	d110      	bne.n	8015a42 <enet_frame_transmit+0x56>
 8015a20:	6819      	ldr	r1, [r3, #0]
 8015a22:	02c8      	lsls	r0, r1, #11
 8015a24:	d511      	bpl.n	8015a4a <enet_frame_transmit+0x5e>
 8015a26:	68db      	ldr	r3, [r3, #12]
 8015a28:	2001      	movs	r0, #1
 8015a2a:	6013      	str	r3, [r2, #0]
 8015a2c:	bd30      	pop	{r4, r5, pc}
 8015a2e:	5cc5      	ldrb	r5, [r0, r3]
 8015a30:	68a4      	ldr	r4, [r4, #8]
 8015a32:	551d      	strb	r5, [r3, r4]
 8015a34:	3301      	adds	r3, #1
 8015a36:	428b      	cmp	r3, r1
 8015a38:	6814      	ldr	r4, [r2, #0]
 8015a3a:	d1f8      	bne.n	8015a2e <enet_frame_transmit+0x42>
 8015a3c:	e7e1      	b.n	8015a02 <enet_frame_transmit+0x16>
 8015a3e:	2300      	movs	r3, #0
 8015a40:	e7f9      	b.n	8015a36 <enet_frame_transmit+0x4a>
 8015a42:	6141      	str	r1, [r0, #20]
 8015a44:	2100      	movs	r1, #0
 8015a46:	6041      	str	r1, [r0, #4]
 8015a48:	e7ea      	b.n	8015a20 <enet_frame_transmit+0x34>
 8015a4a:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8015a4e:	4907      	ldr	r1, [pc, #28]	; (8015a6c <enet_frame_transmit+0x80>)
 8015a50:	bf05      	ittet	eq
 8015a52:	3310      	addeq	r3, #16
 8015a54:	6809      	ldreq	r1, [r1, #0]
 8015a56:	690b      	ldrne	r3, [r1, #16]
 8015a58:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8015a5c:	bf08      	it	eq
 8015a5e:	185b      	addeq	r3, r3, r1
 8015a60:	e7e2      	b.n	8015a28 <enet_frame_transmit+0x3c>
 8015a62:	2000      	movs	r0, #0
 8015a64:	e7e2      	b.n	8015a2c <enet_frame_transmit+0x40>
 8015a66:	bf00      	nop
 8015a68:	2000a74c 	andcs	sl, r0, ip, asr #14
 8015a6c:	40029000 	andmi	r9, r2, r0

08015a70 <enet_transmit_checksum_config>:
 8015a70:	6803      	ldr	r3, [r0, #0]
 8015a72:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8015a76:	430b      	orrs	r3, r1
 8015a78:	6003      	str	r3, [r0, #0]
 8015a7a:	4770      	bx	lr

08015a7c <enet_mac_address_set>:
 8015a7c:	888a      	ldrh	r2, [r1, #4]
 8015a7e:	4b03      	ldr	r3, [pc, #12]	; (8015a8c <enet_mac_address_set+0x10>)
 8015a80:	50c2      	str	r2, [r0, r3]
 8015a82:	680a      	ldr	r2, [r1, #0]
 8015a84:	3304      	adds	r3, #4
 8015a86:	50c2      	str	r2, [r0, r3]
 8015a88:	4770      	bx	lr
 8015a8a:	bf00      	nop
 8015a8c:	40028040 	andmi	r8, r2, r0, asr #32

08015a90 <enet_rx_enable>:
 8015a90:	4a05      	ldr	r2, [pc, #20]	; (8015aa8 <enet_rx_enable+0x18>)
 8015a92:	6813      	ldr	r3, [r2, #0]
 8015a94:	f043 0304 	orr.w	r3, r3, #4
 8015a98:	6013      	str	r3, [r2, #0]
 8015a9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8015a9e:	6993      	ldr	r3, [r2, #24]
 8015aa0:	f043 0302 	orr.w	r3, r3, #2
 8015aa4:	6193      	str	r3, [r2, #24]
 8015aa6:	4770      	bx	lr
 8015aa8:	40028000 	andmi	r8, r2, r0

08015aac <enet_phy_write_read>:
 8015aac:	b530      	push	{r4, r5, lr}
 8015aae:	4604      	mov	r4, r0
 8015ab0:	4d13      	ldr	r5, [pc, #76]	; (8015b00 <enet_phy_write_read+0x54>)
 8015ab2:	0192      	lsls	r2, r2, #6
 8015ab4:	6928      	ldr	r0, [r5, #16]
 8015ab6:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8015aba:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 8015abe:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 8015ac2:	4302      	orrs	r2, r0
 8015ac4:	02c9      	lsls	r1, r1, #11
 8015ac6:	b289      	uxth	r1, r1
 8015ac8:	2c02      	cmp	r4, #2
 8015aca:	ea42 0204 	orr.w	r2, r2, r4
 8015ace:	ea42 0201 	orr.w	r2, r2, r1
 8015ad2:	bf08      	it	eq
 8015ad4:	8819      	ldrheq	r1, [r3, #0]
 8015ad6:	f042 0201 	orr.w	r2, r2, #1
 8015ada:	bf08      	it	eq
 8015adc:	6169      	streq	r1, [r5, #20]
 8015ade:	612a      	str	r2, [r5, #16]
 8015ae0:	4907      	ldr	r1, [pc, #28]	; (8015b00 <enet_phy_write_read+0x54>)
 8015ae2:	4a08      	ldr	r2, [pc, #32]	; (8015b04 <enet_phy_write_read+0x58>)
 8015ae4:	6908      	ldr	r0, [r1, #16]
 8015ae6:	07c0      	lsls	r0, r0, #31
 8015ae8:	d501      	bpl.n	8015aee <enet_phy_write_read+0x42>
 8015aea:	3a01      	subs	r2, #1
 8015aec:	d1fa      	bne.n	8015ae4 <enet_phy_write_read+0x38>
 8015aee:	690a      	ldr	r2, [r1, #16]
 8015af0:	43d2      	mvns	r2, r2
 8015af2:	f002 0001 	and.w	r0, r2, #1
 8015af6:	b90c      	cbnz	r4, 8015afc <enet_phy_write_read+0x50>
 8015af8:	694a      	ldr	r2, [r1, #20]
 8015afa:	801a      	strh	r2, [r3, #0]
 8015afc:	bd30      	pop	{r4, r5, pc}
 8015afe:	bf00      	nop
 8015b00:	40028000 	andmi	r8, r2, r0
 8015b04:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08015b08 <enet_phy_config>:
 8015b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015b0a:	4d22      	ldr	r5, [pc, #136]	; (8015b94 <enet_phy_config+0x8c>)
 8015b0c:	2001      	movs	r0, #1
 8015b0e:	692c      	ldr	r4, [r5, #16]
 8015b10:	f7fe fee4 	bl	80148dc <rcu_clock_freq_get>
 8015b14:	4b20      	ldr	r3, [pc, #128]	; (8015b98 <enet_phy_config+0x90>)
 8015b16:	4a21      	ldr	r2, [pc, #132]	; (8015b9c <enet_phy_config+0x94>)
 8015b18:	4403      	add	r3, r0
 8015b1a:	4293      	cmp	r3, r2
 8015b1c:	f024 041c 	bic.w	r4, r4, #28
 8015b20:	d21f      	bcs.n	8015b62 <enet_phy_config+0x5a>
 8015b22:	f044 0408 	orr.w	r4, r4, #8
 8015b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015b2a:	612c      	str	r4, [r5, #16]
 8015b2c:	2200      	movs	r2, #0
 8015b2e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015b32:	2101      	movs	r1, #1
 8015b34:	2002      	movs	r0, #2
 8015b36:	f10d 0306 	add.w	r3, sp, #6
 8015b3a:	f7ff ffb7 	bl	8015aac <enet_phy_write_read>
 8015b3e:	b310      	cbz	r0, 8015b86 <enet_phy_config+0x7e>
 8015b40:	2200      	movs	r2, #0
 8015b42:	4817      	ldr	r0, [pc, #92]	; (8015ba0 <enet_phy_config+0x98>)
 8015b44:	f7ff feaa 	bl	801589c <enet_delay>
 8015b48:	2101      	movs	r1, #1
 8015b4a:	4610      	mov	r0, r2
 8015b4c:	f10d 0306 	add.w	r3, sp, #6
 8015b50:	f7ff ffac 	bl	8015aac <enet_phy_write_read>
 8015b54:	b1b8      	cbz	r0, 8015b86 <enet_phy_config+0x7e>
 8015b56:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8015b5a:	43c0      	mvns	r0, r0
 8015b5c:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8015b60:	e012      	b.n	8015b88 <enet_phy_config+0x80>
 8015b62:	4b10      	ldr	r3, [pc, #64]	; (8015ba4 <enet_phy_config+0x9c>)
 8015b64:	4a10      	ldr	r2, [pc, #64]	; (8015ba8 <enet_phy_config+0xa0>)
 8015b66:	4403      	add	r3, r0
 8015b68:	4293      	cmp	r3, r2
 8015b6a:	d802      	bhi.n	8015b72 <enet_phy_config+0x6a>
 8015b6c:	f044 040c 	orr.w	r4, r4, #12
 8015b70:	e7d9      	b.n	8015b26 <enet_phy_config+0x1e>
 8015b72:	4b0e      	ldr	r3, [pc, #56]	; (8015bac <enet_phy_config+0xa4>)
 8015b74:	4a0e      	ldr	r2, [pc, #56]	; (8015bb0 <enet_phy_config+0xa8>)
 8015b76:	4403      	add	r3, r0
 8015b78:	4293      	cmp	r3, r2
 8015b7a:	d3d4      	bcc.n	8015b26 <enet_phy_config+0x1e>
 8015b7c:	4b0d      	ldr	r3, [pc, #52]	; (8015bb4 <enet_phy_config+0xac>)
 8015b7e:	4a0e      	ldr	r2, [pc, #56]	; (8015bb8 <enet_phy_config+0xb0>)
 8015b80:	4403      	add	r3, r0
 8015b82:	4293      	cmp	r3, r2
 8015b84:	d902      	bls.n	8015b8c <enet_phy_config+0x84>
 8015b86:	2000      	movs	r0, #0
 8015b88:	b003      	add	sp, #12
 8015b8a:	bd30      	pop	{r4, r5, pc}
 8015b8c:	f044 0404 	orr.w	r4, r4, #4
 8015b90:	e7c9      	b.n	8015b26 <enet_phy_config+0x1e>
 8015b92:	bf00      	nop
 8015b94:	40028000 	andmi	r8, r2, r0
 8015b98:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 8015b9c:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8015ba0:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8015ba4:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 8015ba8:	017d783f 	cmneq	sp, pc, lsr r8
 8015bac:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 8015bb0:	02625a00 	rsbeq	r5, r2, #0, 20
 8015bb4:	fa0a1f00 	blx	829d7bc <__exidx_end+0x284fc0>
 8015bb8:	01312d00 	teqeq	r1, r0, lsl #26

08015bbc <enet_init>:
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015bc0:	4604      	mov	r4, r0
 8015bc2:	460d      	mov	r5, r1
 8015bc4:	4616      	mov	r6, r2
 8015bc6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015bca:	f7ff ff9d 	bl	8015b08 <enet_phy_config>
 8015bce:	2800      	cmp	r0, #0
 8015bd0:	d039      	beq.n	8015c46 <enet_init+0x8a>
 8015bd2:	4b3c      	ldr	r3, [pc, #240]	; (8015cc4 <enet_init+0x108>)
 8015bd4:	4a3c      	ldr	r2, [pc, #240]	; (8015cc8 <enet_init+0x10c>)
 8015bd6:	6819      	ldr	r1, [r3, #0]
 8015bd8:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8015bdc:	400a      	ands	r2, r1
 8015bde:	601a      	str	r2, [r3, #0]
 8015be0:	2200      	movs	r2, #0
 8015be2:	605a      	str	r2, [r3, #4]
 8015be4:	609a      	str	r2, [r3, #8]
 8015be6:	60da      	str	r2, [r3, #12]
 8015be8:	6999      	ldr	r1, [r3, #24]
 8015bea:	2c01      	cmp	r4, #1
 8015bec:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 8015bf0:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8015bf4:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8015bf8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8015bfc:	6199      	str	r1, [r3, #24]
 8015bfe:	4933      	ldr	r1, [pc, #204]	; (8015ccc <enet_init+0x110>)
 8015c00:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
 8015c04:	61da      	str	r2, [r3, #28]
 8015c06:	6988      	ldr	r0, [r1, #24]
 8015c08:	4b31      	ldr	r3, [pc, #196]	; (8015cd0 <enet_init+0x114>)
 8015c0a:	ea03 0300 	and.w	r3, r3, r0
 8015c0e:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8015c12:	618b      	str	r3, [r1, #24]
 8015c14:	680b      	ldr	r3, [r1, #0]
 8015c16:	4b2f      	ldr	r3, [pc, #188]	; (8015cd4 <enet_init+0x118>)
 8015c18:	600b      	str	r3, [r1, #0]
 8015c1a:	d01e      	beq.n	8015c5a <enet_init+0x9e>
 8015c1c:	08e3      	lsrs	r3, r4, #3
 8015c1e:	0861      	lsrs	r1, r4, #1
 8015c20:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8015c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015c28:	430b      	orrs	r3, r1
 8015c2a:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015c2e:	2101      	movs	r1, #1
 8015c30:	2002      	movs	r0, #2
 8015c32:	f10d 0306 	add.w	r3, sp, #6
 8015c36:	f7ff ff39 	bl	8015aac <enet_phy_write_read>
 8015c3a:	b158      	cbz	r0, 8015c54 <enet_init+0x98>
 8015c3c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8015c40:	f7ff fe2c 	bl	801589c <enet_delay>
 8015c44:	e05d      	b.n	8015d02 <enet_init+0x146>
 8015c46:	4824      	ldr	r0, [pc, #144]	; (8015cd8 <enet_init+0x11c>)
 8015c48:	f7ff fe28 	bl	801589c <enet_delay>
 8015c4c:	f7ff ff5c 	bl	8015b08 <enet_phy_config>
 8015c50:	2800      	cmp	r0, #0
 8015c52:	d1be      	bne.n	8015bd2 <enet_init+0x16>
 8015c54:	2000      	movs	r0, #0
 8015c56:	b003      	add	sp, #12
 8015c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c5a:	4614      	mov	r4, r2
 8015c5c:	4f1f      	ldr	r7, [pc, #124]	; (8015cdc <enet_init+0x120>)
 8015c5e:	2201      	movs	r2, #1
 8015c60:	2000      	movs	r0, #0
 8015c62:	4611      	mov	r1, r2
 8015c64:	f10d 0306 	add.w	r3, sp, #6
 8015c68:	f7ff ff20 	bl	8015aac <enet_phy_write_read>
 8015c6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015c70:	3401      	adds	r4, #1
 8015c72:	f002 0204 	and.w	r2, r2, #4
 8015c76:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015c7a:	b912      	cbnz	r2, 8015c82 <enet_init+0xc6>
 8015c7c:	42bc      	cmp	r4, r7
 8015c7e:	d1ee      	bne.n	8015c5e <enet_init+0xa2>
 8015c80:	e7e8      	b.n	8015c54 <enet_init+0x98>
 8015c82:	42bc      	cmp	r4, r7
 8015c84:	d0e6      	beq.n	8015c54 <enet_init+0x98>
 8015c86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015c8a:	2101      	movs	r1, #1
 8015c8c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015c90:	2002      	movs	r0, #2
 8015c92:	2200      	movs	r2, #0
 8015c94:	f7ff ff0a 	bl	8015aac <enet_phy_write_read>
 8015c98:	2800      	cmp	r0, #0
 8015c9a:	d0db      	beq.n	8015c54 <enet_init+0x98>
 8015c9c:	2400      	movs	r4, #0
 8015c9e:	4f0f      	ldr	r7, [pc, #60]	; (8015cdc <enet_init+0x120>)
 8015ca0:	2201      	movs	r2, #1
 8015ca2:	2000      	movs	r0, #0
 8015ca4:	4611      	mov	r1, r2
 8015ca6:	f10d 0306 	add.w	r3, sp, #6
 8015caa:	f7ff feff 	bl	8015aac <enet_phy_write_read>
 8015cae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015cb2:	3401      	adds	r4, #1
 8015cb4:	f002 0220 	and.w	r2, r2, #32
 8015cb8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015cbc:	b982      	cbnz	r2, 8015ce0 <enet_init+0x124>
 8015cbe:	42bc      	cmp	r4, r7
 8015cc0:	d1ee      	bne.n	8015ca0 <enet_init+0xe4>
 8015cc2:	e7c7      	b.n	8015c54 <enet_init+0x98>
 8015cc4:	40028000 	andmi	r8, r2, r0
 8015cc8:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 8015ccc:	40029000 	andmi	r9, r2, r0
 8015cd0:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 8015cd4:	02c16000 	sbceq	r6, r1, #0
 8015cd8:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 8015cdc:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8015ce0:	42bc      	cmp	r4, r7
 8015ce2:	d0b7      	beq.n	8015c54 <enet_init+0x98>
 8015ce4:	2101      	movs	r1, #1
 8015ce6:	2210      	movs	r2, #16
 8015ce8:	2000      	movs	r0, #0
 8015cea:	f7ff fedf 	bl	8015aac <enet_phy_write_read>
 8015cee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015cf2:	f3c3 0480 	ubfx	r4, r3, #2, #1
 8015cf6:	0799      	lsls	r1, r3, #30
 8015cf8:	ea4f 24c4 	mov.w	r4, r4, lsl #11
 8015cfc:	d401      	bmi.n	8015d02 <enet_init+0x146>
 8015cfe:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8015d02:	4b63      	ldr	r3, [pc, #396]	; (8015e90 <enet_init+0x2d4>)
 8015d04:	681a      	ldr	r2, [r3, #0]
 8015d06:	f422 42b0 	bic.w	r2, r2, #22528	; 0x5800
 8015d0a:	4314      	orrs	r4, r2
 8015d0c:	056a      	lsls	r2, r5, #21
 8015d0e:	601c      	str	r4, [r3, #0]
 8015d10:	d50b      	bpl.n	8015d2a <enet_init+0x16e>
 8015d12:	681a      	ldr	r2, [r3, #0]
 8015d14:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 8015d18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8015d1c:	601a      	str	r2, [r3, #0]
 8015d1e:	4a5d      	ldr	r2, [pc, #372]	; (8015e94 <enet_init+0x2d8>)
 8015d20:	6993      	ldr	r3, [r2, #24]
 8015d22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015d26:	431d      	orrs	r5, r3
 8015d28:	6195      	str	r5, [r2, #24]
 8015d2a:	4959      	ldr	r1, [pc, #356]	; (8015e90 <enet_init+0x2d4>)
 8015d2c:	684b      	ldr	r3, [r1, #4]
 8015d2e:	431e      	orrs	r6, r3
 8015d30:	4b59      	ldr	r3, [pc, #356]	; (8015e98 <enet_init+0x2dc>)
 8015d32:	604e      	str	r6, [r1, #4]
 8015d34:	681a      	ldr	r2, [r3, #0]
 8015d36:	07d7      	lsls	r7, r2, #31
 8015d38:	d510      	bpl.n	8015d5c <enet_init+0x1a0>
 8015d3a:	685a      	ldr	r2, [r3, #4]
 8015d3c:	680c      	ldr	r4, [r1, #0]
 8015d3e:	f002 0080 	and.w	r0, r2, #128	; 0x80
 8015d42:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8015d46:	4320      	orrs	r0, r4
 8015d48:	6008      	str	r0, [r1, #0]
 8015d4a:	4852      	ldr	r0, [pc, #328]	; (8015e94 <enet_init+0x2d8>)
 8015d4c:	0892      	lsrs	r2, r2, #2
 8015d4e:	6981      	ldr	r1, [r0, #24]
 8015d50:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8015d54:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8015d58:	430a      	orrs	r2, r1
 8015d5a:	6182      	str	r2, [r0, #24]
 8015d5c:	681a      	ldr	r2, [r3, #0]
 8015d5e:	0796      	lsls	r6, r2, #30
 8015d60:	d508      	bpl.n	8015d74 <enet_init+0x1b8>
 8015d62:	494c      	ldr	r1, [pc, #304]	; (8015e94 <enet_init+0x2d8>)
 8015d64:	6898      	ldr	r0, [r3, #8]
 8015d66:	680a      	ldr	r2, [r1, #0]
 8015d68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8015d6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8015d70:	4302      	orrs	r2, r0
 8015d72:	600a      	str	r2, [r1, #0]
 8015d74:	681a      	ldr	r2, [r3, #0]
 8015d76:	0755      	lsls	r5, r2, #29
 8015d78:	d508      	bpl.n	8015d8c <enet_init+0x1d0>
 8015d7a:	4946      	ldr	r1, [pc, #280]	; (8015e94 <enet_init+0x2d8>)
 8015d7c:	68d8      	ldr	r0, [r3, #12]
 8015d7e:	680a      	ldr	r2, [r1, #0]
 8015d80:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 8015d84:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8015d88:	4302      	orrs	r2, r0
 8015d8a:	600a      	str	r2, [r1, #0]
 8015d8c:	681a      	ldr	r2, [r3, #0]
 8015d8e:	0714      	lsls	r4, r2, #28
 8015d90:	d508      	bpl.n	8015da4 <enet_init+0x1e8>
 8015d92:	4940      	ldr	r1, [pc, #256]	; (8015e94 <enet_init+0x2d8>)
 8015d94:	6918      	ldr	r0, [r3, #16]
 8015d96:	680a      	ldr	r2, [r1, #0]
 8015d98:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8015d9c:	f022 0202 	bic.w	r2, r2, #2
 8015da0:	4302      	orrs	r2, r0
 8015da2:	600a      	str	r2, [r1, #0]
 8015da4:	681a      	ldr	r2, [r3, #0]
 8015da6:	06d0      	lsls	r0, r2, #27
 8015da8:	d506      	bpl.n	8015db8 <enet_init+0x1fc>
 8015daa:	493a      	ldr	r1, [pc, #232]	; (8015e94 <enet_init+0x2d8>)
 8015dac:	4a3b      	ldr	r2, [pc, #236]	; (8015e9c <enet_init+0x2e0>)
 8015dae:	6988      	ldr	r0, [r1, #24]
 8015db0:	4002      	ands	r2, r0
 8015db2:	6958      	ldr	r0, [r3, #20]
 8015db4:	4302      	orrs	r2, r0
 8015db6:	618a      	str	r2, [r1, #24]
 8015db8:	681a      	ldr	r2, [r3, #0]
 8015dba:	0691      	lsls	r1, r2, #26
 8015dbc:	d508      	bpl.n	8015dd0 <enet_init+0x214>
 8015dbe:	4935      	ldr	r1, [pc, #212]	; (8015e94 <enet_init+0x2d8>)
 8015dc0:	6998      	ldr	r0, [r3, #24]
 8015dc2:	698a      	ldr	r2, [r1, #24]
 8015dc4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8015dc8:	f022 0204 	bic.w	r2, r2, #4
 8015dcc:	4302      	orrs	r2, r0
 8015dce:	618a      	str	r2, [r1, #24]
 8015dd0:	681a      	ldr	r2, [r3, #0]
 8015dd2:	0652      	lsls	r2, r2, #25
 8015dd4:	d506      	bpl.n	8015de4 <enet_init+0x228>
 8015dd6:	492e      	ldr	r1, [pc, #184]	; (8015e90 <enet_init+0x2d4>)
 8015dd8:	69d8      	ldr	r0, [r3, #28]
 8015dda:	69ca      	ldr	r2, [r1, #28]
 8015ddc:	0c52      	lsrs	r2, r2, #17
 8015dde:	0452      	lsls	r2, r2, #17
 8015de0:	4302      	orrs	r2, r0
 8015de2:	61ca      	str	r2, [r1, #28]
 8015de4:	681a      	ldr	r2, [r3, #0]
 8015de6:	0617      	lsls	r7, r2, #24
 8015de8:	d517      	bpl.n	8015e1a <enet_init+0x25e>
 8015dea:	4c29      	ldr	r4, [pc, #164]	; (8015e90 <enet_init+0x2d4>)
 8015dec:	6a1a      	ldr	r2, [r3, #32]
 8015dee:	69a0      	ldr	r0, [r4, #24]
 8015df0:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 8015df4:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 8015df8:	0400      	lsls	r0, r0, #16
 8015dfa:	0c00      	lsrs	r0, r0, #16
 8015dfc:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8015e00:	4301      	orrs	r1, r0
 8015e02:	4824      	ldr	r0, [pc, #144]	; (8015e94 <enet_init+0x2d8>)
 8015e04:	61a1      	str	r1, [r4, #24]
 8015e06:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8015e0a:	0a12      	lsrs	r2, r2, #8
 8015e0c:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 8015e10:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8015e14:	430a      	orrs	r2, r1
 8015e16:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8015e1a:	681a      	ldr	r2, [r3, #0]
 8015e1c:	05d6      	lsls	r6, r2, #23
 8015e1e:	bf42      	ittt	mi
 8015e20:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 8015e22:	4a1b      	ldrmi	r2, [pc, #108]	; (8015e90 <enet_init+0x2d4>)
 8015e24:	6091      	strmi	r1, [r2, #8]
 8015e26:	681a      	ldr	r2, [r3, #0]
 8015e28:	0595      	lsls	r5, r2, #22
 8015e2a:	bf42      	ittt	mi
 8015e2c:	4a18      	ldrmi	r2, [pc, #96]	; (8015e90 <enet_init+0x2d4>)
 8015e2e:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 8015e30:	60d1      	strmi	r1, [r2, #12]
 8015e32:	681a      	ldr	r2, [r3, #0]
 8015e34:	0554      	lsls	r4, r2, #21
 8015e36:	d508      	bpl.n	8015e4a <enet_init+0x28e>
 8015e38:	4915      	ldr	r1, [pc, #84]	; (8015e90 <enet_init+0x2d4>)
 8015e3a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8015e3c:	684a      	ldr	r2, [r1, #4]
 8015e3e:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8015e42:	f022 0206 	bic.w	r2, r2, #6
 8015e46:	4302      	orrs	r2, r0
 8015e48:	604a      	str	r2, [r1, #4]
 8015e4a:	681a      	ldr	r2, [r3, #0]
 8015e4c:	0510      	lsls	r0, r2, #20
 8015e4e:	d508      	bpl.n	8015e62 <enet_init+0x2a6>
 8015e50:	490f      	ldr	r1, [pc, #60]	; (8015e90 <enet_init+0x2d4>)
 8015e52:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015e54:	680a      	ldr	r2, [r1, #0]
 8015e56:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 8015e5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8015e5e:	4302      	orrs	r2, r0
 8015e60:	600a      	str	r2, [r1, #0]
 8015e62:	681a      	ldr	r2, [r3, #0]
 8015e64:	04d1      	lsls	r1, r2, #19
 8015e66:	d506      	bpl.n	8015e76 <enet_init+0x2ba>
 8015e68:	4909      	ldr	r1, [pc, #36]	; (8015e90 <enet_init+0x2d4>)
 8015e6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015e6c:	680a      	ldr	r2, [r1, #0]
 8015e6e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8015e72:	4302      	orrs	r2, r0
 8015e74:	600a      	str	r2, [r1, #0]
 8015e76:	681a      	ldr	r2, [r3, #0]
 8015e78:	0492      	lsls	r2, r2, #18
 8015e7a:	d506      	bpl.n	8015e8a <enet_init+0x2ce>
 8015e7c:	4904      	ldr	r1, [pc, #16]	; (8015e90 <enet_init+0x2d4>)
 8015e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e80:	680a      	ldr	r2, [r1, #0]
 8015e82:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 8015e86:	4313      	orrs	r3, r2
 8015e88:	600b      	str	r3, [r1, #0]
 8015e8a:	2001      	movs	r0, #1
 8015e8c:	e6e3      	b.n	8015c56 <enet_init+0x9a>
 8015e8e:	bf00      	nop
 8015e90:	40028000 	andmi	r8, r2, r0
 8015e94:	40029000 	andmi	r9, r2, r0
 8015e98:	2000a750 	andcs	sl, r0, r0, asr r7
 8015e9c:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c

08015ea0 <enet_txfifo_flush>:
 8015ea0:	4b06      	ldr	r3, [pc, #24]	; (8015ebc <enet_txfifo_flush+0x1c>)
 8015ea2:	4807      	ldr	r0, [pc, #28]	; (8015ec0 <enet_txfifo_flush+0x20>)
 8015ea4:	699a      	ldr	r2, [r3, #24]
 8015ea6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015eaa:	619a      	str	r2, [r3, #24]
 8015eac:	699a      	ldr	r2, [r3, #24]
 8015eae:	02d2      	lsls	r2, r2, #11
 8015eb0:	d502      	bpl.n	8015eb8 <enet_txfifo_flush+0x18>
 8015eb2:	3801      	subs	r0, #1
 8015eb4:	d1fa      	bne.n	8015eac <enet_txfifo_flush+0xc>
 8015eb6:	4770      	bx	lr
 8015eb8:	2001      	movs	r0, #1
 8015eba:	4770      	bx	lr
 8015ebc:	40029000 	andmi	r9, r2, r0
 8015ec0:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08015ec4 <enet_tx_enable>:
 8015ec4:	4a06      	ldr	r2, [pc, #24]	; (8015ee0 <enet_tx_enable+0x1c>)
 8015ec6:	b508      	push	{r3, lr}
 8015ec8:	6813      	ldr	r3, [r2, #0]
 8015eca:	f043 0308 	orr.w	r3, r3, #8
 8015ece:	6013      	str	r3, [r2, #0]
 8015ed0:	f7ff ffe6 	bl	8015ea0 <enet_txfifo_flush>
 8015ed4:	4a03      	ldr	r2, [pc, #12]	; (8015ee4 <enet_tx_enable+0x20>)
 8015ed6:	6993      	ldr	r3, [r2, #24]
 8015ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015edc:	6193      	str	r3, [r2, #24]
 8015ede:	bd08      	pop	{r3, pc}
 8015ee0:	40028000 	andmi	r8, r2, r0
 8015ee4:	40029000 	andmi	r9, r2, r0

08015ee8 <enet_enable>:
 8015ee8:	b508      	push	{r3, lr}
 8015eea:	f7ff ffeb 	bl	8015ec4 <enet_tx_enable>
 8015eee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015ef2:	f7ff bdcd 	b.w	8015a90 <enet_rx_enable>

08015ef6 <enet_desc_information_get>:
 8015ef6:	2905      	cmp	r1, #5
 8015ef8:	d817      	bhi.n	8015f2a <enet_desc_information_get+0x34>
 8015efa:	e8df f001 	tbb	[pc, r1]
 8015efe:	03091012 	movweq	r1, #36882	; 0x9012
 8015f02:	68401007 	stmdavs	r0, {r0, r1, r2, ip}^
 8015f06:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8015f0a:	4770      	bx	lr
 8015f0c:	88c0      	ldrh	r0, [r0, #6]
 8015f0e:	e7fa      	b.n	8015f06 <enet_desc_information_get+0x10>
 8015f10:	8840      	ldrh	r0, [r0, #2]
 8015f12:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8015f16:	2804      	cmp	r0, #4
 8015f18:	d90a      	bls.n	8015f30 <enet_desc_information_get+0x3a>
 8015f1a:	3804      	subs	r0, #4
 8015f1c:	4770      	bx	lr
 8015f1e:	6880      	ldr	r0, [r0, #8]
 8015f20:	4770      	bx	lr
 8015f22:	6800      	ldr	r0, [r0, #0]
 8015f24:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8015f28:	4770      	bx	lr
 8015f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015f2e:	4770      	bx	lr
 8015f30:	2000      	movs	r0, #0
 8015f32:	4770      	bx	lr

08015f34 <enet_rxframe_drop>:
 8015f34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015f38:	4814      	ldr	r0, [pc, #80]	; (8015f8c <enet_rxframe_drop+0x58>)
 8015f3a:	b510      	push	{r4, lr}
 8015f3c:	6802      	ldr	r2, [r0, #0]
 8015f3e:	4914      	ldr	r1, [pc, #80]	; (8015f90 <enet_rxframe_drop+0x5c>)
 8015f40:	6854      	ldr	r4, [r2, #4]
 8015f42:	6013      	str	r3, [r2, #0]
 8015f44:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8015f48:	680b      	ldr	r3, [r1, #0]
 8015f4a:	d009      	beq.n	8015f60 <enet_rxframe_drop+0x2c>
 8015f4c:	b12b      	cbz	r3, 8015f5a <enet_rxframe_drop+0x26>
 8015f4e:	68da      	ldr	r2, [r3, #12]
 8015f50:	6002      	str	r2, [r0, #0]
 8015f52:	681a      	ldr	r2, [r3, #0]
 8015f54:	b1ba      	cbz	r2, 8015f86 <enet_rxframe_drop+0x52>
 8015f56:	600a      	str	r2, [r1, #0]
 8015f58:	bd10      	pop	{r4, pc}
 8015f5a:	68d3      	ldr	r3, [r2, #12]
 8015f5c:	6003      	str	r3, [r0, #0]
 8015f5e:	e7fb      	b.n	8015f58 <enet_rxframe_drop+0x24>
 8015f60:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8015f64:	4c0b      	ldr	r4, [pc, #44]	; (8015f94 <enet_rxframe_drop+0x60>)
 8015f66:	d006      	beq.n	8015f76 <enet_rxframe_drop+0x42>
 8015f68:	68e2      	ldr	r2, [r4, #12]
 8015f6a:	6002      	str	r2, [r0, #0]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d0f3      	beq.n	8015f58 <enet_rxframe_drop+0x24>
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	600b      	str	r3, [r1, #0]
 8015f74:	e7f0      	b.n	8015f58 <enet_rxframe_drop+0x24>
 8015f76:	6824      	ldr	r4, [r4, #0]
 8015f78:	3210      	adds	r2, #16
 8015f7a:	f3c4 0484 	ubfx	r4, r4, #2, #5
 8015f7e:	4422      	add	r2, r4
 8015f80:	6002      	str	r2, [r0, #0]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d0e8      	beq.n	8015f58 <enet_rxframe_drop+0x24>
 8015f86:	3310      	adds	r3, #16
 8015f88:	e7f3      	b.n	8015f72 <enet_rxframe_drop+0x3e>
 8015f8a:	bf00      	nop
 8015f8c:	2000a748 	andcs	sl, r0, r8, asr #14
 8015f90:	2000a740 	andcs	sl, r0, r0, asr #14
 8015f94:	40029000 	andmi	r9, r2, r0

08015f98 <enet_rxframe_size_get>:
 8015f98:	b508      	push	{r3, lr}
 8015f9a:	4b0c      	ldr	r3, [pc, #48]	; (8015fcc <enet_rxframe_size_get+0x34>)
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	6818      	ldr	r0, [r3, #0]
 8015fa0:	2800      	cmp	r0, #0
 8015fa2:	db10      	blt.n	8015fc6 <enet_rxframe_size_get+0x2e>
 8015fa4:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
 8015fa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015fac:	d003      	beq.n	8015fb6 <enet_rxframe_size_get+0x1e>
 8015fae:	f7ff ffc1 	bl	8015f34 <enet_rxframe_drop>
 8015fb2:	2001      	movs	r0, #1
 8015fb4:	bd08      	pop	{r3, pc}
 8015fb6:	f000 0321 	and.w	r3, r0, #33	; 0x21
 8015fba:	2b21      	cmp	r3, #33	; 0x21
 8015fbc:	d0f7      	beq.n	8015fae <enet_rxframe_size_get+0x16>
 8015fbe:	f3c0 400d 	ubfx	r0, r0, #16, #14
 8015fc2:	3804      	subs	r0, #4
 8015fc4:	e7f6      	b.n	8015fb4 <enet_rxframe_size_get+0x1c>
 8015fc6:	2000      	movs	r0, #0
 8015fc8:	e7f4      	b.n	8015fb4 <enet_rxframe_size_get+0x1c>
 8015fca:	bf00      	nop
 8015fcc:	2000a748 	andcs	sl, r0, r8, asr #14

08015fd0 <enet_initpara_reset>:
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	4b08      	ldr	r3, [pc, #32]	; (8015ff4 <enet_initpara_reset+0x24>)
 8015fd4:	e9c3 2200 	strd	r2, r2, [r3]
 8015fd8:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8015fdc:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8015fe0:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8015fe4:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8015fe8:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8015fec:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 8015ff0:	639a      	str	r2, [r3, #56]	; 0x38
 8015ff2:	4770      	bx	lr
 8015ff4:	2000a750 	andcs	sl, r0, r0, asr r7

08015ff8 <enet_deinit>:
 8015ff8:	b508      	push	{r3, lr}
 8015ffa:	f640 200e 	movw	r0, #2574	; 0xa0e
 8015ffe:	f7fe fb9c 	bl	801473a <rcu_periph_reset_enable>
 8016002:	f640 200e 	movw	r0, #2574	; 0xa0e
 8016006:	f7fe fb9a 	bl	801473e <rcu_periph_reset_disable>
 801600a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801600e:	f7ff bfdf 	b.w	8015fd0 <enet_initpara_reset>
	...

08016014 <i2c_clock_config>:
 8016014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016016:	4605      	mov	r5, r0
 8016018:	2002      	movs	r0, #2
 801601a:	460c      	mov	r4, r1
 801601c:	4617      	mov	r7, r2
 801601e:	f7fe fc5d 	bl	80148dc <rcu_clock_freq_get>
 8016022:	4603      	mov	r3, r0
 8016024:	4828      	ldr	r0, [pc, #160]	; (80160c8 <i2c_clock_config+0xb4>)
 8016026:	4a29      	ldr	r2, [pc, #164]	; (80160cc <i2c_clock_config+0xb8>)
 8016028:	fbb3 f0f0 	udiv	r0, r3, r0
 801602c:	4293      	cmp	r3, r2
 801602e:	bf94      	ite	ls
 8016030:	4601      	movls	r1, r0
 8016032:	213f      	movhi	r1, #63	; 0x3f
 8016034:	686e      	ldr	r6, [r5, #4]
 8016036:	4a26      	ldr	r2, [pc, #152]	; (80160d0 <i2c_clock_config+0xbc>)
 8016038:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 801603c:	430e      	orrs	r6, r1
 801603e:	4294      	cmp	r4, r2
 8016040:	606e      	str	r6, [r5, #4]
 8016042:	d816      	bhi.n	8016072 <i2c_clock_config+0x5e>
 8016044:	3001      	adds	r0, #1
 8016046:	283e      	cmp	r0, #62	; 0x3e
 8016048:	d90d      	bls.n	8016066 <i2c_clock_config+0x52>
 801604a:	223f      	movs	r2, #63	; 0x3f
 801604c:	622a      	str	r2, [r5, #32]
 801604e:	0064      	lsls	r4, r4, #1
 8016050:	fbb3 f4f4 	udiv	r4, r3, r4
 8016054:	2c04      	cmp	r4, #4
 8016056:	bf38      	it	cc
 8016058:	2404      	movcc	r4, #4
 801605a:	69ea      	ldr	r2, [r5, #28]
 801605c:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8016060:	4314      	orrs	r4, r2
 8016062:	61ec      	str	r4, [r5, #28]
 8016064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016066:	2802      	cmp	r0, #2
 8016068:	d801      	bhi.n	801606e <i2c_clock_config+0x5a>
 801606a:	2202      	movs	r2, #2
 801606c:	e7ee      	b.n	801604c <i2c_clock_config+0x38>
 801606e:	6228      	str	r0, [r5, #32]
 8016070:	e7ed      	b.n	801604e <i2c_clock_config+0x3a>
 8016072:	4a18      	ldr	r2, [pc, #96]	; (80160d4 <i2c_clock_config+0xc0>)
 8016074:	4294      	cmp	r4, r2
 8016076:	d8f5      	bhi.n	8016064 <i2c_clock_config+0x50>
 8016078:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801607c:	4351      	muls	r1, r2
 801607e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016082:	fbb1 f1f2 	udiv	r1, r1, r2
 8016086:	3101      	adds	r1, #1
 8016088:	6229      	str	r1, [r5, #32]
 801608a:	b9a7      	cbnz	r7, 80160b6 <i2c_clock_config+0xa2>
 801608c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016090:	fbb3 f4f4 	udiv	r4, r3, r4
 8016094:	69eb      	ldr	r3, [r5, #28]
 8016096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801609a:	61eb      	str	r3, [r5, #28]
 801609c:	f3c4 030b 	ubfx	r3, r4, #0, #12
 80160a0:	b90b      	cbnz	r3, 80160a6 <i2c_clock_config+0x92>
 80160a2:	f044 0401 	orr.w	r4, r4, #1
 80160a6:	69eb      	ldr	r3, [r5, #28]
 80160a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80160ac:	61eb      	str	r3, [r5, #28]
 80160ae:	69eb      	ldr	r3, [r5, #28]
 80160b0:	4323      	orrs	r3, r4
 80160b2:	61eb      	str	r3, [r5, #28]
 80160b4:	e7d6      	b.n	8016064 <i2c_clock_config+0x50>
 80160b6:	2219      	movs	r2, #25
 80160b8:	4354      	muls	r4, r2
 80160ba:	fbb3 f4f4 	udiv	r4, r3, r4
 80160be:	69eb      	ldr	r3, [r5, #28]
 80160c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80160c4:	e7e9      	b.n	801609a <i2c_clock_config+0x86>
 80160c6:	bf00      	nop
 80160c8:	000f4240 	andeq	r4, pc, r0, asr #4
 80160cc:	03c14dbf 	biceq	r4, r1, #12224	; 0x2fc0
 80160d0:	000186a0 	andeq	r8, r1, r0, lsr #13
 80160d4:	00061a80 	andeq	r1, r6, r0, lsl #21

080160d8 <i2c_ack_config>:
 80160d8:	6803      	ldr	r3, [r0, #0]
 80160da:	2901      	cmp	r1, #1
 80160dc:	bf0c      	ite	eq
 80160de:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 80160e2:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 80160e6:	6003      	str	r3, [r0, #0]
 80160e8:	4770      	bx	lr

080160ea <i2c_ackpos_config>:
 80160ea:	6803      	ldr	r3, [r0, #0]
 80160ec:	b919      	cbnz	r1, 80160f6 <i2c_ackpos_config+0xc>
 80160ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80160f2:	6003      	str	r3, [r0, #0]
 80160f4:	4770      	bx	lr
 80160f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80160fa:	e7fa      	b.n	80160f2 <i2c_ackpos_config+0x8>

080160fc <i2c_master_addressing>:
 80160fc:	3202      	adds	r2, #2
 80160fe:	bf0c      	ite	eq
 8016100:	f021 0101 	biceq.w	r1, r1, #1
 8016104:	f041 0101 	orrne.w	r1, r1, #1
 8016108:	6101      	str	r1, [r0, #16]
 801610a:	4770      	bx	lr

0801610c <i2c_enable>:
 801610c:	6803      	ldr	r3, [r0, #0]
 801610e:	f043 0301 	orr.w	r3, r3, #1
 8016112:	6003      	str	r3, [r0, #0]
 8016114:	4770      	bx	lr

08016116 <i2c_start_on_bus>:
 8016116:	6803      	ldr	r3, [r0, #0]
 8016118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801611c:	6003      	str	r3, [r0, #0]
 801611e:	4770      	bx	lr

08016120 <i2c_stop_on_bus>:
 8016120:	6803      	ldr	r3, [r0, #0]
 8016122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016126:	6003      	str	r3, [r0, #0]
 8016128:	4770      	bx	lr

0801612a <i2c_data_transmit>:
 801612a:	6101      	str	r1, [r0, #16]
 801612c:	4770      	bx	lr

0801612e <i2c_data_receive>:
 801612e:	6900      	ldr	r0, [r0, #16]
 8016130:	b2c0      	uxtb	r0, r0
 8016132:	4770      	bx	lr

08016134 <i2c_flag_get>:
 8016134:	098b      	lsrs	r3, r1, #6
 8016136:	581a      	ldr	r2, [r3, r0]
 8016138:	2301      	movs	r3, #1
 801613a:	f001 011f 	and.w	r1, r1, #31
 801613e:	408b      	lsls	r3, r1
 8016140:	4213      	tst	r3, r2
 8016142:	bf14      	ite	ne
 8016144:	2001      	movne	r0, #1
 8016146:	2000      	moveq	r0, #0
 8016148:	4770      	bx	lr

0801614a <i2c_flag_clear>:
 801614a:	f240 5301 	movw	r3, #1281	; 0x501
 801614e:	4299      	cmp	r1, r3
 8016150:	b510      	push	{r4, lr}
 8016152:	d102      	bne.n	801615a <i2c_flag_clear+0x10>
 8016154:	6943      	ldr	r3, [r0, #20]
 8016156:	6983      	ldr	r3, [r0, #24]
 8016158:	bd10      	pop	{r4, pc}
 801615a:	2201      	movs	r2, #1
 801615c:	098c      	lsrs	r4, r1, #6
 801615e:	5823      	ldr	r3, [r4, r0]
 8016160:	f001 011f 	and.w	r1, r1, #31
 8016164:	408a      	lsls	r2, r1
 8016166:	ea23 0302 	bic.w	r3, r3, r2
 801616a:	5023      	str	r3, [r4, r0]
 801616c:	e7f4      	b.n	8016158 <i2c_flag_clear+0xe>
	...

08016170 <__popcountsi2>:
 8016170:	0843      	lsrs	r3, r0, #1
 8016172:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8016176:	1ac0      	subs	r0, r0, r3
 8016178:	0883      	lsrs	r3, r0, #2
 801617a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 801617e:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8016182:	4418      	add	r0, r3
 8016184:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8016188:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 801618c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8016190:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8016194:	0e00      	lsrs	r0, r0, #24
 8016196:	4770      	bx	lr

08016198 <__udivmoddi4>:
 8016198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801619c:	9e08      	ldr	r6, [sp, #32]
 801619e:	460d      	mov	r5, r1
 80161a0:	4604      	mov	r4, r0
 80161a2:	468e      	mov	lr, r1
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d14c      	bne.n	8016242 <__udivmoddi4+0xaa>
 80161a8:	428a      	cmp	r2, r1
 80161aa:	4694      	mov	ip, r2
 80161ac:	d967      	bls.n	801627e <__udivmoddi4+0xe6>
 80161ae:	fab2 f382 	clz	r3, r2
 80161b2:	b153      	cbz	r3, 80161ca <__udivmoddi4+0x32>
 80161b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80161b8:	f1c3 0220 	rsb	r2, r3, #32
 80161bc:	fa01 fe03 	lsl.w	lr, r1, r3
 80161c0:	fa20 f202 	lsr.w	r2, r0, r2
 80161c4:	ea42 0e0e 	orr.w	lr, r2, lr
 80161c8:	409c      	lsls	r4, r3
 80161ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80161ce:	fbbe f1f7 	udiv	r1, lr, r7
 80161d2:	fa1f f58c 	uxth.w	r5, ip
 80161d6:	fb07 ee11 	mls	lr, r7, r1, lr
 80161da:	fb01 f005 	mul.w	r0, r1, r5
 80161de:	0c22      	lsrs	r2, r4, #16
 80161e0:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80161e4:	4290      	cmp	r0, r2
 80161e6:	d90a      	bls.n	80161fe <__udivmoddi4+0x66>
 80161e8:	eb1c 0202 	adds.w	r2, ip, r2
 80161ec:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 80161f0:	f080 8119 	bcs.w	8016426 <__udivmoddi4+0x28e>
 80161f4:	4290      	cmp	r0, r2
 80161f6:	f240 8116 	bls.w	8016426 <__udivmoddi4+0x28e>
 80161fa:	3902      	subs	r1, #2
 80161fc:	4462      	add	r2, ip
 80161fe:	1a12      	subs	r2, r2, r0
 8016200:	fbb2 f0f7 	udiv	r0, r2, r7
 8016204:	fb07 2210 	mls	r2, r7, r0, r2
 8016208:	fb00 f505 	mul.w	r5, r0, r5
 801620c:	b2a4      	uxth	r4, r4
 801620e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8016212:	42a5      	cmp	r5, r4
 8016214:	d90a      	bls.n	801622c <__udivmoddi4+0x94>
 8016216:	eb1c 0404 	adds.w	r4, ip, r4
 801621a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 801621e:	f080 8104 	bcs.w	801642a <__udivmoddi4+0x292>
 8016222:	42a5      	cmp	r5, r4
 8016224:	f240 8101 	bls.w	801642a <__udivmoddi4+0x292>
 8016228:	4464      	add	r4, ip
 801622a:	3802      	subs	r0, #2
 801622c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8016230:	2100      	movs	r1, #0
 8016232:	1b64      	subs	r4, r4, r5
 8016234:	b11e      	cbz	r6, 801623e <__udivmoddi4+0xa6>
 8016236:	40dc      	lsrs	r4, r3
 8016238:	2300      	movs	r3, #0
 801623a:	e9c6 4300 	strd	r4, r3, [r6]
 801623e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016242:	428b      	cmp	r3, r1
 8016244:	d908      	bls.n	8016258 <__udivmoddi4+0xc0>
 8016246:	2e00      	cmp	r6, #0
 8016248:	f000 80ea 	beq.w	8016420 <__udivmoddi4+0x288>
 801624c:	2100      	movs	r1, #0
 801624e:	e9c6 0500 	strd	r0, r5, [r6]
 8016252:	4608      	mov	r0, r1
 8016254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016258:	fab3 f183 	clz	r1, r3
 801625c:	2900      	cmp	r1, #0
 801625e:	d148      	bne.n	80162f2 <__udivmoddi4+0x15a>
 8016260:	42ab      	cmp	r3, r5
 8016262:	d302      	bcc.n	801626a <__udivmoddi4+0xd2>
 8016264:	4282      	cmp	r2, r0
 8016266:	f200 80f8 	bhi.w	801645a <__udivmoddi4+0x2c2>
 801626a:	1a84      	subs	r4, r0, r2
 801626c:	eb65 0203 	sbc.w	r2, r5, r3
 8016270:	2001      	movs	r0, #1
 8016272:	4696      	mov	lr, r2
 8016274:	2e00      	cmp	r6, #0
 8016276:	d0e2      	beq.n	801623e <__udivmoddi4+0xa6>
 8016278:	e9c6 4e00 	strd	r4, lr, [r6]
 801627c:	e7df      	b.n	801623e <__udivmoddi4+0xa6>
 801627e:	b902      	cbnz	r2, 8016282 <__udivmoddi4+0xea>
 8016280:	deff      	udf	#255	; 0xff
 8016282:	fab2 f382 	clz	r3, r2
 8016286:	2b00      	cmp	r3, #0
 8016288:	f040 808e 	bne.w	80163a8 <__udivmoddi4+0x210>
 801628c:	1a88      	subs	r0, r1, r2
 801628e:	2101      	movs	r1, #1
 8016290:	0c17      	lsrs	r7, r2, #16
 8016292:	fa1f fe82 	uxth.w	lr, r2
 8016296:	fbb0 f5f7 	udiv	r5, r0, r7
 801629a:	fb07 0015 	mls	r0, r7, r5, r0
 801629e:	0c22      	lsrs	r2, r4, #16
 80162a0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80162a4:	fb0e f005 	mul.w	r0, lr, r5
 80162a8:	4290      	cmp	r0, r2
 80162aa:	d908      	bls.n	80162be <__udivmoddi4+0x126>
 80162ac:	eb1c 0202 	adds.w	r2, ip, r2
 80162b0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80162b4:	d202      	bcs.n	80162bc <__udivmoddi4+0x124>
 80162b6:	4290      	cmp	r0, r2
 80162b8:	f200 80cc 	bhi.w	8016454 <__udivmoddi4+0x2bc>
 80162bc:	4645      	mov	r5, r8
 80162be:	1a12      	subs	r2, r2, r0
 80162c0:	fbb2 f0f7 	udiv	r0, r2, r7
 80162c4:	fb07 2210 	mls	r2, r7, r0, r2
 80162c8:	fb0e fe00 	mul.w	lr, lr, r0
 80162cc:	b2a4      	uxth	r4, r4
 80162ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80162d2:	45a6      	cmp	lr, r4
 80162d4:	d908      	bls.n	80162e8 <__udivmoddi4+0x150>
 80162d6:	eb1c 0404 	adds.w	r4, ip, r4
 80162da:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80162de:	d202      	bcs.n	80162e6 <__udivmoddi4+0x14e>
 80162e0:	45a6      	cmp	lr, r4
 80162e2:	f200 80b4 	bhi.w	801644e <__udivmoddi4+0x2b6>
 80162e6:	4610      	mov	r0, r2
 80162e8:	eba4 040e 	sub.w	r4, r4, lr
 80162ec:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80162f0:	e7a0      	b.n	8016234 <__udivmoddi4+0x9c>
 80162f2:	f1c1 0720 	rsb	r7, r1, #32
 80162f6:	408b      	lsls	r3, r1
 80162f8:	fa22 fc07 	lsr.w	ip, r2, r7
 80162fc:	ea4c 0c03 	orr.w	ip, ip, r3
 8016300:	fa25 fa07 	lsr.w	sl, r5, r7
 8016304:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8016308:	fbba f8f9 	udiv	r8, sl, r9
 801630c:	408d      	lsls	r5, r1
 801630e:	fa20 f307 	lsr.w	r3, r0, r7
 8016312:	fb09 aa18 	mls	sl, r9, r8, sl
 8016316:	fa1f fe8c 	uxth.w	lr, ip
 801631a:	432b      	orrs	r3, r5
 801631c:	fa00 f501 	lsl.w	r5, r0, r1
 8016320:	fb08 f00e 	mul.w	r0, r8, lr
 8016324:	0c1c      	lsrs	r4, r3, #16
 8016326:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801632a:	42a0      	cmp	r0, r4
 801632c:	fa02 f201 	lsl.w	r2, r2, r1
 8016330:	d90b      	bls.n	801634a <__udivmoddi4+0x1b2>
 8016332:	eb1c 0404 	adds.w	r4, ip, r4
 8016336:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 801633a:	f080 8086 	bcs.w	801644a <__udivmoddi4+0x2b2>
 801633e:	42a0      	cmp	r0, r4
 8016340:	f240 8083 	bls.w	801644a <__udivmoddi4+0x2b2>
 8016344:	f1a8 0802 	sub.w	r8, r8, #2
 8016348:	4464      	add	r4, ip
 801634a:	1a24      	subs	r4, r4, r0
 801634c:	b298      	uxth	r0, r3
 801634e:	fbb4 f3f9 	udiv	r3, r4, r9
 8016352:	fb09 4413 	mls	r4, r9, r3, r4
 8016356:	fb03 fe0e 	mul.w	lr, r3, lr
 801635a:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 801635e:	45a6      	cmp	lr, r4
 8016360:	d908      	bls.n	8016374 <__udivmoddi4+0x1dc>
 8016362:	eb1c 0404 	adds.w	r4, ip, r4
 8016366:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 801636a:	d26a      	bcs.n	8016442 <__udivmoddi4+0x2aa>
 801636c:	45a6      	cmp	lr, r4
 801636e:	d968      	bls.n	8016442 <__udivmoddi4+0x2aa>
 8016370:	3b02      	subs	r3, #2
 8016372:	4464      	add	r4, ip
 8016374:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8016378:	fba0 9302 	umull	r9, r3, r0, r2
 801637c:	eba4 040e 	sub.w	r4, r4, lr
 8016380:	429c      	cmp	r4, r3
 8016382:	46c8      	mov	r8, r9
 8016384:	469e      	mov	lr, r3
 8016386:	d354      	bcc.n	8016432 <__udivmoddi4+0x29a>
 8016388:	d051      	beq.n	801642e <__udivmoddi4+0x296>
 801638a:	2e00      	cmp	r6, #0
 801638c:	d067      	beq.n	801645e <__udivmoddi4+0x2c6>
 801638e:	ebb5 0308 	subs.w	r3, r5, r8
 8016392:	eb64 040e 	sbc.w	r4, r4, lr
 8016396:	40cb      	lsrs	r3, r1
 8016398:	fa04 f707 	lsl.w	r7, r4, r7
 801639c:	431f      	orrs	r7, r3
 801639e:	40cc      	lsrs	r4, r1
 80163a0:	e9c6 7400 	strd	r7, r4, [r6]
 80163a4:	2100      	movs	r1, #0
 80163a6:	e74a      	b.n	801623e <__udivmoddi4+0xa6>
 80163a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80163ac:	f1c3 0020 	rsb	r0, r3, #32
 80163b0:	40c1      	lsrs	r1, r0
 80163b2:	409d      	lsls	r5, r3
 80163b4:	fa24 f000 	lsr.w	r0, r4, r0
 80163b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80163bc:	4328      	orrs	r0, r5
 80163be:	fbb1 f5f7 	udiv	r5, r1, r7
 80163c2:	fb07 1115 	mls	r1, r7, r5, r1
 80163c6:	fa1f fe8c 	uxth.w	lr, ip
 80163ca:	0c02      	lsrs	r2, r0, #16
 80163cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80163d0:	fb05 f10e 	mul.w	r1, r5, lr
 80163d4:	4291      	cmp	r1, r2
 80163d6:	fa04 f403 	lsl.w	r4, r4, r3
 80163da:	d908      	bls.n	80163ee <__udivmoddi4+0x256>
 80163dc:	eb1c 0202 	adds.w	r2, ip, r2
 80163e0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80163e4:	d22f      	bcs.n	8016446 <__udivmoddi4+0x2ae>
 80163e6:	4291      	cmp	r1, r2
 80163e8:	d92d      	bls.n	8016446 <__udivmoddi4+0x2ae>
 80163ea:	3d02      	subs	r5, #2
 80163ec:	4462      	add	r2, ip
 80163ee:	1a52      	subs	r2, r2, r1
 80163f0:	fbb2 f1f7 	udiv	r1, r2, r7
 80163f4:	fb07 2211 	mls	r2, r7, r1, r2
 80163f8:	b280      	uxth	r0, r0
 80163fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80163fe:	fb01 f20e 	mul.w	r2, r1, lr
 8016402:	4282      	cmp	r2, r0
 8016404:	d908      	bls.n	8016418 <__udivmoddi4+0x280>
 8016406:	eb1c 0000 	adds.w	r0, ip, r0
 801640a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 801640e:	d216      	bcs.n	801643e <__udivmoddi4+0x2a6>
 8016410:	4282      	cmp	r2, r0
 8016412:	d914      	bls.n	801643e <__udivmoddi4+0x2a6>
 8016414:	3902      	subs	r1, #2
 8016416:	4460      	add	r0, ip
 8016418:	1a80      	subs	r0, r0, r2
 801641a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 801641e:	e73a      	b.n	8016296 <__udivmoddi4+0xfe>
 8016420:	4631      	mov	r1, r6
 8016422:	4630      	mov	r0, r6
 8016424:	e70b      	b.n	801623e <__udivmoddi4+0xa6>
 8016426:	4671      	mov	r1, lr
 8016428:	e6e9      	b.n	80161fe <__udivmoddi4+0x66>
 801642a:	4610      	mov	r0, r2
 801642c:	e6fe      	b.n	801622c <__udivmoddi4+0x94>
 801642e:	454d      	cmp	r5, r9
 8016430:	d2ab      	bcs.n	801638a <__udivmoddi4+0x1f2>
 8016432:	ebb9 0802 	subs.w	r8, r9, r2
 8016436:	eb63 0e0c 	sbc.w	lr, r3, ip
 801643a:	3801      	subs	r0, #1
 801643c:	e7a5      	b.n	801638a <__udivmoddi4+0x1f2>
 801643e:	4641      	mov	r1, r8
 8016440:	e7ea      	b.n	8016418 <__udivmoddi4+0x280>
 8016442:	4603      	mov	r3, r0
 8016444:	e796      	b.n	8016374 <__udivmoddi4+0x1dc>
 8016446:	4645      	mov	r5, r8
 8016448:	e7d1      	b.n	80163ee <__udivmoddi4+0x256>
 801644a:	46d0      	mov	r8, sl
 801644c:	e77d      	b.n	801634a <__udivmoddi4+0x1b2>
 801644e:	4464      	add	r4, ip
 8016450:	3802      	subs	r0, #2
 8016452:	e749      	b.n	80162e8 <__udivmoddi4+0x150>
 8016454:	3d02      	subs	r5, #2
 8016456:	4462      	add	r2, ip
 8016458:	e731      	b.n	80162be <__udivmoddi4+0x126>
 801645a:	4608      	mov	r0, r1
 801645c:	e70a      	b.n	8016274 <__udivmoddi4+0xdc>
 801645e:	4631      	mov	r1, r6
 8016460:	e6ed      	b.n	801623e <__udivmoddi4+0xa6>
 8016462:	bf00      	nop

Disassembly of section .rodata:

08016464 <vtable for DisplayHandler-0xc8>:
 8016464:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016468:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8016474:	03020100 	movweq	r0, #8448	; 0x2100
 8016478:	08070604 	stmdaeq	r7, {r2, r9, sl}
 801647c:	00000009 	andeq	r0, r0, r9
 8016480:	03020100 	movweq	r0, #8448	; 0x2100
 8016484:	3a373104 	bcc	8de289c <__exidx_end+0xdca0a0>
 8016488:	333a3635 	teqcc	sl, #55574528	; 0x3500000
 801648c:	614d0038 	cmpvs	sp, r8, lsr r0
 8016490:	39312072 	ldmdbcc	r1!, {r1, r4, r5, r6, sp}
 8016494:	32303220 	eorscc	r3, r0, #32, 4
 8016498:	72410032 	subvc	r0, r1, #50	; 0x32
 801649c:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 80164a0:	20342074 	eorscs	r2, r4, r4, ror r0
 80164a4:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
 80164a8:	335b1b20 	cmpcc	fp, #32, 22	; 0x8000
 80164ac:	4d446d32 	stclmi	13, cr6, [r4, #-200]	; 0xffffff38
 80164b0:	44522f58 	ldrbmi	r2, [r2], #-3928	; 0xfffff0a8
 80164b4:	6f63204d 	svcvs	0x0063204d
 80164b8:	6f72746e 	svcvs	0x0072746e
 80164bc:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 80164c0:	20347b20 	eorscs	r7, r4, r0, lsr #22
 80164c4:	76696e55 			; <UNDEFINED> instruction: 0x76696e55
 80164c8:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 80164cc:	5b1b7d73 	blpl	86f5aa0 <__exidx_end+0x6dd2a4>
 80164d0:	006d3733 	rsbeq	r3, sp, r3, lsr r7
 80164d4:	6f635f2e 	svcvs	0x00635f2e
 80164d8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 80164dc:	685f2e00 	ldmdavs	pc, {r9, sl, fp, sp}^	; <UNPREDICTABLE>
 80164e0:	00707474 	rsbseq	r7, r0, r4, ror r4
 80164e4:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 80164e8:	7472413d 	ldrbtvc	r4, [r2], #-317	; 0xfffffec3
 80164ec:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 80164f0:	44203420 	strtmi	r3, [r0], #-1056	; 0xfffffbe0
 80164f4:	522f584d 	eorpl	r5, pc, #5046272	; 0x4d0000
 80164f8:	41004d44 	tstmi	r0, r4, asr #26
 80164fc:	4e2d7472 	mcrmi	4, 1, r7, cr13, cr2, {3}
 8016500:	34207465 	strtcc	r7, [r0], #-1125	; 0xfffffb9b
 8016504:	00752520 	rsbseq	r2, r5, r0, lsr #10
 8016508:	21786d64 	cmncs	r8, r4, ror #26
 801650c:	65726200 	ldrbvs	r6, [r2, #-512]!	; 0xfffffe00
 8016510:	00236b61 	eoreq	r6, r3, r1, ror #22
 8016514:	2362616d 	cmncs	r2, #1073741851	; 0x4000001b
 8016518:	66657200 	strbtvs	r7, [r5], -r0, lsl #4
 801651c:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 8016520:	6c730023 	ldclvs	0, cr0, [r3], #-140	; 0xffffff74
 8016524:	2373746f 	cmncs	r3, #1862270976	; 0x6f000000
 8016528:	00000000 	andeq	r0, r0, r0

0801652c <vtable for DisplayHandler>:
	...
 8016534:	080085e3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r8, sl, pc}
 8016538:	0800863d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, sl, pc}
 801653c:	080086e1 	stmdaeq	r0, {r0, r5, r6, r7, r9, sl, pc}

08016540 <vtable for ArtNetReboot>:
	...
 8016548:	080085e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, sl, pc}
 801654c:	08008631 	stmdaeq	r0, {r0, r4, r5, r9, sl, pc}
 8016550:	0800860d 	stmdaeq	r0, {r0, r2, r3, r9, sl, pc}

08016554 <vtable for DisplayUdfHandler>:
	...
 801655c:	080085e7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, r8, sl, pc}
 8016560:	08008649 	stmdaeq	r0, {r0, r3, r6, r9, sl, pc}
 8016564:	080086b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sl, pc}
 8016568:	080085e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, sl, pc}
 801656c:	080086a5 	stmdaeq	r0, {r0, r2, r5, r7, r9, sl, pc}
 8016570:	08008691 	stmdaeq	r0, {r0, r4, r7, r9, sl, pc}
 8016574:	0800867d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r9, sl, pc}
 8016578:	08008669 	stmdaeq	r0, {r0, r3, r5, r6, r9, sl, pc}
 801657c:	08008655 	stmdaeq	r0, {r0, r2, r4, r6, r9, sl, pc}

08016580 <CSWTCH.98>:
 8016580:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 8016584:	 			; <UNDEFINED> instruction: 0x312e3146

08016585 <SOFTWARE_VERSION>:
 8016585:	00312e31 	eorseq	r2, r1, r1, lsr lr
 8016589:	 	andeq	r0, r0, r0

0801658c <vtable for DmxInput>:
	...
 8016594:	08008e31 	stmdaeq	r0, {r0, r4, r5, r9, sl, fp, pc}
 8016598:	08008ed1 	stmdaeq	r0, {r0, r4, r6, r7, r9, sl, fp, pc}
 801659c:	08008e35 	stmdaeq	r0, {r0, r2, r4, r5, r9, sl, fp, pc}
 80165a0:	08008e65 	stmdaeq	r0, {r0, r2, r5, r6, r9, sl, fp, pc}
 80165a4:	08008e95 	stmdaeq	r0, {r0, r2, r4, r7, r9, sl, fp, pc}
 80165a8:	6e552020 	cdpvs	0, 5, cr2, cr5, cr0, {1}
 80165ac:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 80165b0:	20736573 	rsbscs	r6, r3, r3, ror r5
 80165b4:	20657261 	rsbcs	r7, r5, r1, ror #4
 80165b8:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 80165bc:	20646570 	rsbcs	r6, r4, r0, ror r5
 80165c0:	000a312b 	andeq	r3, sl, fp, lsr #2

080165c4 <vtable for ArtNet4Node>:
	...
 80165cc:	08008f59 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, sl, fp, pc}
 80165d0:	08009047 	stmdaeq	r0, {r0, r1, r2, r6, ip, pc}
 80165d4:	08008efd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sl, fp, pc}
 80165d8:	08008f79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, r9, sl, fp, pc}
 80165dc:	08009059 	stmdaeq	r0, {r0, r3, r4, r6, ip, pc}
 80165e0:	0800903f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, ip, pc}

080165e4 <ArtNetMsgConst::START>:
 80165e4:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 80165e8:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 80165ec:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 80165f0:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
	...

080165f5 <ArtNetMsgConst::PARAMS>:
 80165f5:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 80165f9:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 80165fd:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8016601:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016605:	0074654e 	rsbseq	r6, r4, lr, asr #10

08016609 <ArtNetMsgConst::RDM_RUN>:
 8016609:	6e6e7552 	mcrvs	5, 3, r7, cr14, cr2, {2}
 801660d:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8016611:	204d4452 	subcs	r4, sp, r2, asr r4
 8016615:	63736944 	cmnvs	r3, #68, 18	; 0x110000
 8016619:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
 801661d:	 	subvc	r0, r1, #121	; 0x79

0801661f <ArtNetMsgConst::STARTED>:
 801661f:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016623:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016627:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801662b:	00646574 	rsbeq	r6, r4, r4, ror r5
 801662f:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8016633:	37303246 	ldrcc	r3, [r0, -r6, asr #4]!
 8016637:	73250052 			; <UNDEFINED> instruction: 0x73250052
 801663b:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801663f:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 8016643:	74680073 	strbtvc	r0, [r8], #-115	; 0xffffff8d
 8016647:	2f3a7074 	svccs	0x003a7074
 801664b:	3364672f 	cmncc	r4, #12320768	; 0xbc0000
 801664f:	6d642d32 	stclvs	13, cr2, [r4, #-200]!	; 0xffffff38
 8016653:	726f2e78 	rsbvc	r2, pc, #120, 28	; 0x780
 8016657:	6d450067 	stclvs	0, cr0, [r5, #-412]	; 0xfffffe64
 801665b:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 801665f:	 	tstmi	r0, r5, ror #8

08016662 <artnet::NODE_ID>:
 8016662:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016666:	0074654e 	rsbseq	r6, r4, lr, asr #10

0801666a <defaults::SHORT_NAME>:
 801666a:	20567641 	subscs	r7, r6, r1, asr #12
 801666e:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016672:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016676:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
	...

0801667b <artnet::NODE_ID>:
 801667b:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801667f:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8016683:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 8016687:	30255b20 	eorcc	r5, r5, r0, lsr #22
 801668b:	205d6434 	subscs	r6, sp, r4, lsr r4
 801668f:	41207325 			; <UNDEFINED> instruction: 0x41207325
 8016693:	 	tstmi	r0, r6, ror r6

08016696 <artnet::NODE_ID>:
 8016696:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801669a:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801669e:	52206f4e 	eorpl	r6, r0, #312	; 0x138
 80166a2:	72204d44 	eorvc	r4, r0, #68, 26	; 0x1100
 80166a6:	6f707365 	svcvs	0x00707365
 80166aa:	0a65736e 	beq	997346a <__exidx_end+0x195ac6e>
 80166ae:	50544800 	subspl	r4, r4, r0, lsl #16
 80166b2:	50544c00 	subspl	r4, r4, r0, lsl #24
 80166b6:	74724100 	ldrbtvc	r4, [r2], #-256	; 0xffffff00
 80166ba:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 80166be:	43417300 	movtmi	r7, #4864	; 0x1300
 80166c2:	6f4e004e 	svcvs	0x004e004e
 80166c6:	25206564 	strcs	r6, [r0, #-1380]!	; 0xfffffa9c
 80166ca:	255b2064 	ldrbcs	r2, [fp, #-100]	; 0xffffff9c
 80166ce:	000a5d75 	andeq	r5, sl, r5, ror sp
 80166d2:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 80166d6:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 80166da:	20202065 	eorcs	r2, r0, r5, rrx
 80166de:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80166e2:	0a64252e 	beq	991fba2 <__exidx_end+0x19073a6>
 80166e6:	68532000 	ldmdavs	r3, {sp}^
 80166ea:	2074726f 	rsbscs	r7, r4, pc, ror #4
 80166ee:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 80166f2:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 80166f6:	20000a73 	andcs	r0, r0, r3, ror sl
 80166fa:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 80166fe:	6d616e20 	stclvs	14, cr6, [r1, #-128]!	; 0xffffff80
 8016702:	3a202065 	bcc	881e89e <__exidx_end+0x8060a2>
 8016706:	0a732520 	beq	9cdfb8e <__exidx_end+0x1cc7392>
 801670a:	754f2000 	strbvc	r2, [pc, #-0]	; 8016712 <artnet::NODE_ID+0x7c>
 801670e:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 8016712:	2020000a 	eorcs	r0, r0, sl
 8016716:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 801671a:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 801671e:	3a642520 	bcc	991fba6 <__exidx_end+0x19073aa>
 8016722:	322d255b 	eorcc	r2, sp, #381681664	; 0x16c00000
 8016726:	2d253a64 	vstmdbcs	r5!, {s6-s105}
 801672a:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 801672e:	5d64322d 	sfmpl	f3, 2, [r4, #-180]!	; 0xffffff4c
 8016732:	7534253a 	ldrvc	r2, [r4, #-1338]!	; 0xfffffac6
 8016736:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
 801673a:	7b20005d 	blvc	88168b6 <__exidx_end+0x7fe0ba>
 801673e:	0a7d7325 	beq	9f733da <__exidx_end+0x1f5abde>
 8016742:	6e492000 	cdpvs	0, 4, cr2, cr9, cr0, {0}
 8016746:	0a747570 	beq	9d33d0e <__exidx_end+0x1d1b512>
 801674a:	50202000 	eorpl	r2, r0, r0
 801674e:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8016752:	20643225 	rsbcs	r3, r4, r5, lsr #4
 8016756:	5b3a6425 	blpl	8eaf7f2 <__exidx_end+0xe96ff6>
 801675a:	64322d25 	ldrtvs	r2, [r2], #-3365	; 0xfffff2db
 801675e:	322d253a 	eorcc	r2, sp, #243269632	; 0xe800000
 8016762:	2d253a64 	vstmdbcs	r5!, {s6-s105}
 8016766:	3a5d6432 	bcc	976f836 <__exidx_end+0x175703a>
 801676a:	20753425 	rsbscs	r3, r5, r5, lsr #8
 801676e:	25203e2d 	strcs	r3, [r0, #-3629]!	; 0xfffff1d3
 8016772:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016776:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801677a:	000a6425 	andeq	r6, sl, r5, lsr #8
 801677e:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8016782:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	; 0xffffff18
 8016786:	73252300 			; <UNDEFINED> instruction: 0x73252300
 801678a:	0a64253d 	beq	991fc86 <__exidx_end+0x190748a>
 801678e:	73252200 			; <UNDEFINED> instruction: 0x73252200
 8016792:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8016796:	002c2273 	eoreq	r2, ip, r3, ror r2
 801679a:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 801679e:	000a7325 	andeq	r7, sl, r5, lsr #6
 80167a2:	6e636173 	mcrvs	1, 3, r6, cr3, cr3, {3}
 80167a6:	706e6900 	rsbvc	r6, lr, r0, lsl #18
 80167aa:	6f007475 	svcvs	0x00007475
 80167ae:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 80167b2:	746c0074 	strbtvc	r0, [ip], #-116	; 0xffffff8c
 80167b6:	74680070 	strbtvc	r0, [r8], #-112	; 0xffffff90
 80167ba:	72610070 	rsbvc	r0, r1, #112	; 0x70
 80167be:	74656e74 	strbtvc	r6, [r5], #-3700	; 0xfffff18c
 80167c2:	6c754d00 	ldclvs	13, cr4, [r5], #-0
 80167c6:	70206974 	eorvc	r6, r0, r4, ror r9
 80167ca:	2074726f 	rsbscs	r7, r4, pc, ror #4
 80167ce:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 80167d2:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 80167d6:	6f697461 	svcvs	0x00697461
 80167da:	6f4e006e 	svcvs	0x004e006e
 80167de:	44006564 	strmi	r6, [r0], #-1380	; 0xfffffa9c
 80167e2:	522f584d 	eorpl	r5, pc, #5046272	; 0x4d0000
 80167e6:	4f204d44 	svcmi	0x00204d44
 80167ea:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 80167ee:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
 80167f2:	6e492058 	mcrvs	0, 2, r2, cr9, cr8, {2}
 80167f6:	00747570 	rsbseq	r7, r4, r0, ror r5
 80167fa:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80167fe:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016802:	 	mcrvs	0, 3, r0, cr5, cr4, {1}

08016804 <ArtNetParamsConst::ENABLE_RDM>:
 8016804:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016808:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 801680c:	 	stcvs	13, cr6, [r0, #-400]	; 0xfffffe70

0801680f <ArtNetParamsConst::MAP_UNIVERSE0>:
 801680f:	5f70616d 	svcpl	0x0070616d
 8016813:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8016817:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801681b:	 	rsbsvc	r0, r0, #48	; 0x30

0801681d <ArtNetParamsConst::PROTOCOL_PORT>:
 801681d:	746f7270 	strbtvc	r7, [pc], #-624	; 8016825 <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 8016821:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801666c <defaults::SHORT_NAME+0x2>
 8016825:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016829:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801682d:	746f7270 	strbtvc	r7, [pc], #-624	; 8016835 <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 8016831:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801667c <artnet::NODE_ID+0x1>
 8016835:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016839:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801683d:	746f7270 	strbtvc	r7, [pc], #-624	; 8016845 <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 8016841:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801668c <artnet::NODE_ID+0x11>
 8016845:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016849:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801684d:	746f7270 	strbtvc	r7, [pc], #-624	; 8016855 <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 8016851:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801669c <artnet::NODE_ID+0x6>
 8016855:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016859:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801685d <ArtNetParamsConst::NODE_LONG_NAME>:
 801685d:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 8016861:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	; 0xfffffe84
 8016865:	 	strbvs	r0, [pc, #-101]!	; 8016808 <ArtNetParamsConst::ENABLE_RDM+0x4>

08016867 <ArtNetParamsConst::NODE_OEM_VALUE>:
 8016867:	5f6d656f 	svcpl	0x006d656f
 801686b:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 801686f:	 	ldmdavs	r3!, {r0, r2, r5, r6}^

08016871 <ArtNetParamsConst::NODE_SHORT_NAME>:
 8016871:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 8016875:	616e5f74 	smcvs	58868	; 0xe5f4
 8016879:	 	strvs	r6, [r0], #-1389	; 0xfffffa93

0801687c <ArtNetParamsConst::DESTINATION_IP_PORT>:
 801687c:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016880:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016884:	5f6e6f69 	svcpl	0x006e6f69
 8016888:	705f7069 	subsvc	r7, pc, r9, rrx
 801688c:	5f74726f 	svcpl	0x0074726f
 8016890:	00000061 	andeq	r0, r0, r1, rrx
 8016894:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016898:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801689c:	5f6e6f69 	svcpl	0x006e6f69
 80168a0:	705f7069 	subsvc	r7, pc, r9, rrx
 80168a4:	5f74726f 	svcpl	0x0074726f
 80168a8:	00000062 	andeq	r0, r0, r2, rrx
 80168ac:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 80168b0:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 80168b4:	5f6e6f69 	svcpl	0x006e6f69
 80168b8:	705f7069 	subsvc	r7, pc, r9, rrx
 80168bc:	5f74726f 	svcpl	0x0074726f
 80168c0:	00000063 	andeq	r0, r0, r3, rrx
 80168c4:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 80168c8:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 80168cc:	5f6e6f69 	svcpl	0x006e6f69
 80168d0:	705f7069 	subsvc	r7, pc, r9, rrx
 80168d4:	5f74726f 	svcpl	0x0074726f
 80168d8:	00000064 	andeq	r0, r0, r4, rrx

080168dc <ArtNetParamsConst::DISABLE_MERGE_TIMEOUT>:
 80168dc:	61736964 	cmnvs	r3, r4, ror #18
 80168e0:	5f656c62 	svcpl	0x00656c62
 80168e4:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 80168e8:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 80168ec:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8016387 <__udivmoddi4+0x1ef>
 80168f0:	 	strbvs	r0, [lr, #-116]!	; 0xffffff8c

080168f2 <ArtNetParamsConst::NODE_NETWORK_DATA_LOSS_TIMEOUT>:
 80168f2:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 80168f6:	5f6b726f 	svcpl	0x006b726f
 80168fa:	61746164 	cmnvs	r4, r4, ror #2
 80168fe:	736f6c5f 	cmnvc	pc, #24320	; 0x5f00
 8016902:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8016906:	756f656d 	strbvc	r6, [pc, #-1389]!	; 80163a1 <__udivmoddi4+0x209>
 801690a:	 	strbvs	r0, [lr, #-116]!	; 0xffffff8c

0801690c <ArtNetParamsConst::NET>:
 801690c:	0074656e 	rsbseq	r6, r4, lr, ror #10

08016910 <ArtNetParamsConst::SUBNET>:
 8016910:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
 8016914:	 	andvc	r7, r0, r5, ror #8

08016917 <ArtNetParamsConst::PROTOCOL>:
 8016917:	746f7270 	strbtvc	r7, [pc], #-624	; 801691f <ArtNetParamsConst::PROTOCOL+0x8>
 801691b:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016764 <artnet::NODE_ID+0xce>
	...

08016920 <ArtNetParamsConst::FILE_NAME>:
 8016920:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 8016924:	742e7465 	strtvc	r7, [lr], #-1125	; 0xfffffb9b
 8016928:	 			; <UNDEFINED> instruction: 0xff007478

0801692b <ArtNetConst::OEM_ID>:
 801692b:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

0801692d <ArtNetConst::ESTA_ID>:
 801692d:	 			; <UNDEFINED> instruction: 0x36010050

0801692f <ArtNetConst::VERSION>:
 801692f:	33323601 	teqcc	r2, #1048576	; 0x100000
 8016933:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 8016937:	2e302e35 	mrccs	14, 1, r2, cr0, cr5, {1}
 801693b:	2e250030 	mcrcs	0, 1, r0, cr5, cr0, {1}
 801693f:	20733834 	rsbscs	r3, r3, r4, lsr r8
 8016943:	30007325 	andcc	r7, r0, r5, lsr #6
 8016947:	6f4e202e 	svcvs	0x004e202e
 801694b:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 801694f:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 8016953:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 8016957:	202c6465 	eorcs	r6, ip, r5, ror #8
 801695b:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 801695f:	6f687320 	svcvs	0x00687320
 8016963:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 8016967:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 801696b:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 801696f:	000a216e 	andeq	r2, sl, lr, ror #2
 8016973:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 8016977:	000a6567 	andeq	r6, sl, r7, ror #10
 801697b:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 801697f:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 8016983:	203a2065 	eorscs	r2, sl, r5, rrx
 8016987:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801698b:	20000a64 	andcs	r0, r0, r4, ror #20
 801698f:	20444943 	subcs	r4, r4, r3, asr #18
 8016993:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016997:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801699b:	20000a73 	andcs	r0, r0, r3, ror sl
 801699f:	726f5020 	rsbvc	r5, pc, #32
 80169a3:	32252074 	eorcc	r2, r5, #116	; 0x74
 80169a7:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 80169ab:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 80169af:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 80169b3:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 80169b7:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 80169bb:	2020000a 	eorcs	r0, r0, sl
 80169bf:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 80169c3:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 80169c7:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 80169cb:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80169cf:	2d252065 	stccs	0, cr2, [r5, #-404]!	; 0xfffffe6c
 80169d3:	5b206433 	blpl	882faa7 <__exidx_end+0x8172ab>
 80169d7:	0a5d6425 	beq	976fa73 <__exidx_end+0x1757277>
 80169db:	79532000 	ldmdbvc	r3, {sp}^
 80169df:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
 80169e3:	7a696e6f 	bvc	9a723a7 <__exidx_end+0x1a59bab>
 80169e7:	73692065 	cmnvc	r9, #101	; 0x65
 80169eb:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 80169ef:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 80169f3:	 	tstmi	r0, r4, ror #20

080169f6 <E117Const::ACN_PACKET_IDENTIFIER>:
 80169f6:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 80169fa:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 80169fe:	00000037 	andeq	r0, r0, r7, lsr r0

08016a02 <E131BridgeConst::VERSION>:
 8016a02:	30251801 	eorcc	r1, r5, r1, lsl #16
 8016a06:	252d7838 	strcs	r7, [sp, #-2104]!	; 0xfffff7c8
 8016a0a:	2d783430 	cfldrdcs	mvd3, [r8, #-192]!	; 0xffffff40
 8016a0e:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 8016a12:	3230252d 	eorscc	r2, r0, #188743680	; 0xb400000
 8016a16:	32302578 	eorscc	r2, r0, #120, 10	; 0x1e000000
 8016a1a:	30252d78 	eorcc	r2, r5, r8, ror sp
 8016a1e:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016a22:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016a26:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016a2a:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016a2e:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016a32:	00007832 	andeq	r7, r0, r2, lsr r8
	...

08016a38 <UID_ALL>:
 8016a38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8016a3c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

08016a40 <vtable for ArtNetRdmController>:
	...
 8016a48:	0800c4dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, sl, lr, pc}
 8016a4c:	0800c529 	stmdaeq	r0, {r0, r3, r5, r8, sl, lr, pc}
 8016a50:	0800c53b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r8, sl, lr, pc}
 8016a54:	0800c4ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, sl, lr, pc}
 8016a58:	0800c4b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, sl, lr, pc}
 8016a5c:	0800c549 	stmdaeq	r0, {r0, r3, r6, r8, sl, lr, pc}

08016a60 <UID_ALL>:
 8016a60:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8016a64:	4452ffff 	ldrbmi	pc, [r2], #-4095	; 0xfffff001	; <UNPREDICTABLE>
 8016a68:	6544204d 	strbvs	r2, [r4, #-77]	; 0xffffffb3
 8016a6c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 8016a70:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8016a74:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 8016a78:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 8016a7c:	000a6e6f 	andeq	r6, sl, pc, ror #28
 8016a80:	6e614d20 	cdpvs	13, 6, cr4, cr1, cr0, {1}
 8016a84:	63616675 	cmnvs	r1, #122683392	; 0x7500000
 8016a88:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 8016a8c:	614e2072 	hvcvs	57858	; 0xe202
 8016a90:	3a20656d 	bcc	883004c <__exidx_end+0x817850>
 8016a94:	2a2e2520 	bcs	8b9ff1c <__exidx_end+0xb87720>
 8016a98:	20000a73 	andcs	r0, r0, r3, ror sl
 8016a9c:	756e614d 	strbvc	r6, [lr, #-333]!	; 0xfffffeb3
 8016aa0:	74636166 	strbtvc	r6, [r3], #-358	; 0xfffffe9a
 8016aa4:	72657275 	rsbvc	r7, r5, #1342177287	; 0x50000007
 8016aa8:	20444920 	subcs	r4, r4, r0, lsr #18
 8016aac:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016ab0:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016ab4:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016ab8:	5320000a 			; <UNDEFINED> instruction: 0x5320000a
 8016abc:	61697265 	cmnvs	r9, r5, ror #4
 8016ac0:	754e206c 	strbvc	r2, [lr, #-108]	; 0xffffff94
 8016ac4:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 8016ac8:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016acc:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016ad0:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8016ad4:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8016ad8:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8016adc:	0a58322e 	beq	962339c <__exidx_end+0x160aba0>
 8016ae0:	6f522000 	svcvs	0x00522000
 8016ae4:	6c20746f 	cfstrsvs	mvf7, [r0], #-444	; 0xfffffe44
 8016ae8:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
 8016aec:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016af0:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016af4:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8016af8:	000a732a 	andeq	r7, sl, sl, lsr #6
 8016afc:	6f725020 	svcvs	0x00725020
 8016b00:	74637564 	strbtvc	r7, [r3], #-1380	; 0xfffffa9c
 8016b04:	74614320 	strbtvc	r4, [r1], #-800	; 0xfffffce0
 8016b08:	726f6765 	rsbvc	r6, pc, #26476544	; 0x1940000
 8016b0c:	3a202079 	bcc	881ecf8 <__exidx_end+0x8064fc>
 8016b10:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 8016b14:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 8016b18:	20000a58 	andcs	r0, r0, r8, asr sl
 8016b1c:	646f7250 	strbtvs	r7, [pc], #-592	; 8016b24 <UID_ALL+0xc4>
 8016b20:	20746375 	rsbscs	r6, r4, r5, ror r3
 8016b24:	61746544 	cmnvs	r4, r4, asr #10
 8016b28:	20206c69 	eorcs	r6, r0, r9, ror #24
 8016b2c:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016b30:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016b34:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016b38:	 	strbmi	r0, [r7], #-10

08016b3a <DEVICE_LABEL>:
 8016b3a:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8016b3e:	37303246 	ldrcc	r3, [r0, -r6, asr #4]!
 8016b42:	44522052 	ldrbmi	r2, [r2], #-82	; 0xffffffae
 8016b46:	6544204d 	strbvs	r2, [r4, #-77]	; 0xffffffb3
 8016b4a:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
	...

08016b4f <DEVICE_LABEL>:
 8016b4f:	61676947 	cmnvs	r7, r7, asr #18
 8016b53:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 8016b57:	52206563 	eorpl	r6, r0, #415236096	; 0x18c00000
 8016b5b:	43204d44 			; <UNDEFINED> instruction: 0x43204d44
 8016b5f:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 8016b63:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 8016b67:	00000072 	andeq	r0, r0, r2, ror r0
	...

08016b6c <UID_ALL>:
 8016b6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8016b70:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

08016b72 <RDMConst::MANUFACTURER_ID>:
 8016b72:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

08016b74 <RDMConst::MANUFACTURER_NAME>:
 8016b74:	70747468 	rsbsvc	r7, r4, r8, ror #8
 8016b78:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 8016b7c:	6f2e7777 	svcvs	0x002e7777
 8016b80:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 8016b84:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 8016b88:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 8016b8c:	0067726f 	rsbeq	r7, r7, pc, ror #4
 8016b90:	20584d44 	subscs	r4, r8, r4, asr #26
 8016b94:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
 8016b98:	4220000a 	eormi	r0, r0, #10
 8016b9c:	6b616572 	blvs	987016c <__exidx_end+0x1857970>
 8016ba0:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 8016ba4:	20202065 	eorcs	r2, r0, r5, rrx
 8016ba8:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016bac:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 8016bb0:	74204241 	strtvc	r4, [r0], #-577	; 0xfffffdbf
 8016bb4:	20656d69 	rsbcs	r6, r5, r9, ror #26
 8016bb8:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016bbc:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016bc0:	5220000a 	eorpl	r0, r0, #10
 8016bc4:	65726665 	ldrbvs	r6, [r2, #-1637]!	; 0xfffff99b
 8016bc8:	72206873 	eorvc	r6, r0, #7536640	; 0x730000
 8016bcc:	20657461 	rsbcs	r7, r5, r1, ror #8
 8016bd0:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016bd4:	5320000a 			; <UNDEFINED> instruction: 0x5320000a
 8016bd8:	73746f6c 	cmnvc	r4, #108, 30	; 0x1b0
 8016bdc:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016be0:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016be4:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016be8:	0000000a 	andeq	r0, r0, sl

08016bec <vtable for DmxSend>:
	...
 8016bf4:	0800cd71 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, fp, lr, pc}
 8016bf8:	0800ce41 	stmdaeq	r0, {r0, r6, r9, sl, fp, lr, pc}
 8016bfc:	0800cd75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, sl, fp, lr, pc}
 8016c00:	0800cda5 	stmdaeq	r0, {r0, r2, r5, r7, r8, sl, fp, lr, pc}
 8016c04:	0800cdd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, sl, fp, lr, pc}
 8016c08:	0800cd6f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8, sl, fp, lr, pc}
 8016c0c:	0800cde9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, sl, fp, lr, pc}
 8016c10:	08012ecf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r9, sl, fp, sp}
 8016c14:	08012ec5 	stmdaeq	r1, {r0, r2, r6, r7, r9, sl, fp, sp}
 8016c18:	08012ec9 	stmdaeq	r1, {r0, r3, r6, r7, r9, sl, fp, sp}
 8016c1c:	08012ed3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r9, sl, fp, sp}

08016c20 <DmxParamsConst::BREAK_TIME>:
 8016c20:	61657262 	cmnvs	r5, r2, ror #4
 8016c24:	69745f6b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 8016c28:	 	movwvc	r6, #1389	; 0x56d

08016c2b <DmxParamsConst::SLOTS_COUNT>:
 8016c2b:	746f6c73 	strbtvc	r6, [pc], #-3187	; 8016c33 <DmxParamsConst::SLOTS_COUNT+0x8>
 8016c2f:	6f635f73 	svcvs	0x00635f73
 8016c33:	00746e75 	rsbseq	r6, r4, r5, ror lr

08016c37 <DmxParamsConst::REFRESH_RATE>:
 8016c37:	72666572 	rsbvc	r6, r6, #478150656	; 0x1c800000
 8016c3b:	5f687365 	svcpl	0x00687365
 8016c3f:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
	...

08016c44 <DmxParamsConst::MAB_TIME>:
 8016c44:	5f62616d 	svcpl	0x0062616d
 8016c48:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	...

08016c4d <DmxParamsConst::FILE_NAME>:
 8016c4d:	61726170 	cmnvs	r2, r0, ror r1
 8016c51:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 8016c55:	 	andeq	r7, r0, r8, ror r4

08016c58 <s_DirGpio>:
 8016c58:	40010c00 	andmi	r0, r1, r0, lsl #24
 8016c5c:	00000400 	andeq	r0, r0, r0, lsl #8
 8016c60:	40010800 	andmi	r0, r1, r0, lsl #16
 8016c64:	00000800 	andeq	r0, r0, r0, lsl #16
 8016c68:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016c6c:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016c70:	2c64252e 	cfstr64cs	mvdx2, [r4], #-184	; 0xffffff48
 8016c74:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 8016c78:	64252c73 	strtvs	r2, [r5], #-3187	; 0xfffff38d
 8016c7c:	0a73252c 	beq	9ce0134 <__exidx_end+0x1cc7938>
 8016c80:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 8016c84:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016c88:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016c8c:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 8016c90:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 8016c94:	4f000a64 	svcmi	0x00000a64
 8016c98:	664f006e 	strbvs	r0, [pc], -lr, rrx
 8016c9c:	69640066 	stmdbvs	r4!, {r1, r2, r5, r6}^
 8016ca0:	616c7073 	smcvs	50947	; 0xc703
 8016ca4:	73253a79 			; <UNDEFINED> instruction: 0x73253a79
 8016ca8:	6674000a 	ldrbtvs	r0, [r4], -sl
 8016cac:	253a7074 	ldrcs	r7, [sl, #-116]!	; 0xffffff8c
 8016cb0:	76000a73 			; <UNDEFINED> instruction: 0x76000a73
 8016cb4:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8016cb8:	253a6e6f 	ldrcs	r6, [sl, #-3695]!	; 0xfffff191
 8016cbc:	70750073 	rsbsvc	r0, r5, r3, ror r0
 8016cc0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8016cc4:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 8016cc8:	45000a73 	strmi	r0, [r0, #-2675]	; 0xfffff58d
 8016ccc:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 8016cd0:	65673f23 	strbvs	r3, [r7, #-3875]!	; 0xfffff0dd
 8016cd4:	74000a74 	strvc	r0, [r0], #-2676	; 0xfffff58c
 8016cd8:	23707466 	cmncs	r0, #1711276032	; 0x66000000
 8016cdc:	73696400 	cmnvc	r9, #0, 8
 8016ce0:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8016ce4:	52450023 	subpl	r0, r5, #35	; 0x23
 8016ce8:	23524f52 	cmpcs	r2, #328	; 0x148
 8016cec:	45000a21 	strmi	r0, [r0, #-2593]	; 0xfffff5df
 8016cf0:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 8016cf4:	000a3f23 	andeq	r3, sl, r3, lsr #30
 8016cf8:	6f626572 	svcvs	0x00626572
 8016cfc:	2323746f 			; <UNDEFINED> instruction: 0x2323746f
 8016d00:	73696c00 	cmnvc	r9, #0, 24
 8016d04:	6c002374 	stcvs	3, cr2, [r0], {116}	; 0x74
 8016d08:	23747369 	cmncs	r4, #-1543503871	; 0xa4000001
 8016d0c:	7075002a 	rsbsvc	r0, r5, sl, lsr #32
 8016d10:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8016d14:	65760023 	ldrbvs	r0, [r6, #-35]!	; 0xffffffdd
 8016d18:	6f697372 	svcvs	0x00697372
 8016d1c:	6700236e 	strvs	r2, [r0, -lr, ror #6]
 8016d20:	00237465 	eoreq	r7, r3, r5, ror #8
 8016d24:	74636166 	strbtvc	r6, [r3], #-358	; 0xfffffe9a
 8016d28:	2379726f 	cmncs	r9, #-268435450	; 0xf0000006
 8016d2c:	 	subvc	r0, r1, #35	; 0x23

08016d2e <s_Node>:
 8016d2e:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016d32:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8016d3e:	41730000 	cmnmi	r3, r0
 8016d42:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 8016d46:	31332e31 	teqcc	r3, r1, lsr lr
	...
 8016d52:	2043534f 	subcs	r5, r3, pc, asr #6
 8016d56:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8016d5a:	00007265 	andeq	r7, r0, r5, ror #4
 8016d5e:	00000000 	andeq	r0, r0, r0
 8016d62:	544c0000 	strbpl	r0, [ip], #-0
 8016d66:	00000043 	andeq	r0, r0, r3, asr #32
	...
 8016d76:	2043534f 	subcs	r5, r3, pc, asr #6
 8016d7a:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 8016d7e:	0000746e 	andeq	r7, r0, lr, ror #8
 8016d82:	00000000 	andeq	r0, r0, r0
 8016d86:	44520000 	ldrbmi	r0, [r2], #-0
 8016d8a:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 8016d8e:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 8016d92:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 8016d96:	0000796c 	andeq	r7, r0, ip, ror #18
 8016d9a:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 8016d9e:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 8016daa:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 8016dae:	00004944 	andeq	r4, r0, r4, asr #18
	...
 8016dbe:	00504444 	subseq	r4, r0, r4, asr #8
	...

08016dd0 <s_Output>:
 8016dd0:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 8016ddc:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 8016de8:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 8016dec:	00726f74 	rsbseq	r6, r2, r4, ror pc
 8016df0:	00000000 	andeq	r0, r0, r0
 8016df4:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8016df8:	0000006c 	andeq	r0, r0, ip, rrx
 8016dfc:	00000000 	andeq	r0, r0, r0
 8016e00:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 8016e04:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 8016e08:	00000000 	andeq	r0, r0, r0
 8016e0c:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 8016e18:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8016e1c:	00006769 	andeq	r6, r0, r9, ror #14
 8016e20:	00000000 	andeq	r0, r0, r0
 8016e24:	70657453 	rsbvc	r7, r5, r3, asr r4
 8016e28:	00726570 	rsbseq	r6, r2, r0, ror r5
 8016e2c:	00000000 	andeq	r0, r0, r0
 8016e30:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 8016e34:	00007265 	andeq	r7, r0, r5, ror #4
 8016e38:	00000000 	andeq	r0, r0, r0
 8016e3c:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016e40:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8016e44:	00000000 	andeq	r0, r0, r0
 8016e48:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 8016e4c:	00006c61 	andeq	r6, r0, r1, ror #24
 8016e50:	00000000 	andeq	r0, r0, r0
 8016e54:	20424752 	subcs	r4, r2, r2, asr r7
 8016e58:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 8016e5c:	0000006c 	andeq	r0, r0, ip, rrx

08016e60 <RemoteConfig::s_GET>:
 8016e60:	0800e915 	stmdaeq	r0, {r0, r2, r4, r8, fp, sp, lr, pc}
 8016e64:	00000000 	andeq	r0, r0, r0
 8016e68:	08016cf8 	stmdaeq	r1, {r3, r4, r5, r6, r7, sl, fp, sp, lr}
 8016e6c:	00000008 	andeq	r0, r0, r8
 8016e70:	0800dde5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, sl, fp, ip, lr, pc}
 8016e74:	00000000 	andeq	r0, r0, r0
 8016e78:	08016d01 	stmdaeq	r1, {r0, r8, sl, fp, sp, lr}
 8016e7c:	00000005 	andeq	r0, r0, r5
 8016e80:	0800dde5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, sl, fp, ip, lr, pc}
 8016e84:	00000000 	andeq	r0, r0, r0
 8016e88:	08016d07 	stmdaeq	r1, {r0, r1, r2, r8, sl, fp, sp, lr}
 8016e8c:	00000006 	andeq	r0, r0, r6
 8016e90:	0800dfd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 8016e94:	00000000 	andeq	r0, r0, r0
 8016e98:	08016d0e 	stmdaeq	r1, {r1, r2, r3, r8, sl, fp, sp, lr}
 8016e9c:	00000007 	andeq	r0, r0, r7
 8016ea0:	0800df95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, sl, fp, ip, lr, pc}
 8016ea4:	00000000 	andeq	r0, r0, r0
 8016ea8:	08016d16 	stmdaeq	r1, {r1, r2, r4, r8, sl, fp, sp, lr}
 8016eac:	00000008 	andeq	r0, r0, r8
 8016eb0:	0800debd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, sl, fp, ip, lr, pc}
 8016eb4:	00000000 	andeq	r0, r0, r0
 8016eb8:	08016cdd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, sl, fp, sp, lr}
 8016ebc:	00000008 	andeq	r0, r0, r8
 8016ec0:	0800e25d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r9, sp, lr, pc}
 8016ec4:	00000000 	andeq	r0, r0, r0
 8016ec8:	08016d1f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, sl, fp, sp, lr}
 8016ecc:	00010004 	andeq	r0, r1, r4
 8016ed0:	0800df3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, sl, fp, ip, lr, pc}
 8016ed4:	00000000 	andeq	r0, r0, r0
 8016ed8:	08016cd7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, sl, fp, sp, lr}
 8016edc:	00000005 	andeq	r0, r0, r5
 8016ee0:	0800e5fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, sl, sp, lr, pc}
 8016ee4:	00000000 	andeq	r0, r0, r0
 8016ee8:	08016d24 	stmdaeq	r1, {r2, r5, r8, sl, fp, sp, lr}
 8016eec:	00000009 	andeq	r0, r0, r9

08016ef0 <RemoteConfig::s_SET>:
 8016ef0:	0800df19 	stmdaeq	r0, {r0, r3, r4, r8, r9, sl, fp, ip, lr, pc}
 8016ef4:	00000000 	andeq	r0, r0, r0
 8016ef8:	08016cd7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, sl, fp, sp, lr}
 8016efc:	00010005 	andeq	r0, r1, r5
 8016f00:	0800e02d 	stmdaeq	r0, {r0, r2, r3, r5, sp, lr, pc}
 8016f04:	00000000 	andeq	r0, r0, r0
 8016f08:	08016cdd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, sl, fp, sp, lr}
 8016f0c:	00010008 	andeq	r0, r1, r8
 8016f10:	6f626552 	svcvs	0x00626552
 8016f14:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 8016f18:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 8016f1c:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 8016f20:	6f6f6265 	svcvs	0x006f6265
 8016f24:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8016f28:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 8016f2c:	6f637200 	svcvs	0x00637200
 8016f30:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8016f34:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8016f38:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 8016f3c:	6b726f77 	blvs	9cb2d20 <__exidx_end+0x1c9a524>
 8016f40:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8016f44:	73696400 	cmnvc	r9, #0, 8
 8016f48:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8016f4c:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8016f50:	74726100 	ldrbtvc	r6, [r2], #-256	; 0xffffff00
 8016f54:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8016f58:	00747874 	rsbseq	r7, r4, r4, ror r8
 8016f5c:	61726170 	cmnvs	r2, r0, ror r1
 8016f60:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 8016f64:	00007478 	andeq	r7, r0, r8, ror r4

08016f68 <RemoteConfig::s_TXT>:
 8016f68:	0800e265 	stmdaeq	r0, {r0, r2, r5, r6, r9, sp, lr, pc}
 8016f6c:	00000000 	andeq	r0, r0, r0
 8016f70:	0800e521 	stmdaeq	r0, {r0, r5, r8, sl, sp, lr, pc}
 8016f74:	00000000 	andeq	r0, r0, r0
 8016f78:	08016f2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, sl, fp, sp, lr}
 8016f7c:	0000000b 	andeq	r0, r0, fp
 8016f80:	0000000c 	andeq	r0, r0, ip
 8016f84:	0800e291 	stmdaeq	r0, {r0, r4, r7, r9, sp, lr, pc}
 8016f88:	00000000 	andeq	r0, r0, r0
 8016f8c:	0800e555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl, sp, lr, pc}
 8016f90:	00000000 	andeq	r0, r0, r0
 8016f94:	08016f39 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, sl, fp, sp, lr}
 8016f98:	0000000b 	andeq	r0, r0, fp
 8016f9c:	00000000 	andeq	r0, r0, r0
 8016fa0:	0800e315 	stmdaeq	r0, {r0, r2, r4, r8, r9, sp, lr, pc}
 8016fa4:	00000000 	andeq	r0, r0, r0
 8016fa8:	0800e5d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, sl, sp, lr, pc}
 8016fac:	00000000 	andeq	r0, r0, r0
 8016fb0:	08016f45 	stmdaeq	r1, {r0, r2, r6, r8, r9, sl, fp, sp, lr}
 8016fb4:	0000000b 	andeq	r0, r0, fp
 8016fb8:	0000000f 	andeq	r0, r0, pc
 8016fbc:	0800e2bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, sp, lr, pc}
 8016fc0:	00000000 	andeq	r0, r0, r0
 8016fc4:	0800e57d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, sl, sp, lr, pc}
 8016fc8:	00000000 	andeq	r0, r0, r0
 8016fcc:	08016f51 	stmdaeq	r1, {r0, r4, r6, r8, r9, sl, fp, sp, lr}
 8016fd0:	0000000a 	andeq	r0, r0, sl
 8016fd4:	00000001 	andeq	r0, r0, r1
 8016fd8:	0800e2e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, sp, lr, pc}
 8016fdc:	00000000 	andeq	r0, r0, r0
 8016fe0:	0800e5a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, sl, sp, lr, pc}
 8016fe4:	00000000 	andeq	r0, r0, r0
 8016fe8:	08016f5c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, sl, fp, sp, lr}
 8016fec:	0000000a 	andeq	r0, r0, sl
 8016ff0:	00000002 	andeq	r0, r0, r2
 8016ff4:	00544547 	subseq	r4, r4, r7, asr #10
 8016ff8:	54534f50 	ldrbpl	r4, [r3], #-3920	; 0xfffff0b0
 8016ffc:	54544800 	ldrbpl	r4, [r4], #-2048	; 0xfffff800
 8017000:	0a200050 	beq	8817148 <__exidx_end+0x7fe94c>
 8017004:	312e3100 			; <UNDEFINED> instruction: 0x312e3100
 8017008:	43003a00 	movwmi	r3, #2560	; 0xa00
 801700c:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8017010:	542d746e 	strtpl	r7, [sp], #-1134	; 0xfffffb92
 8017014:	00657079 	rsbeq	r7, r5, r9, ror r0
 8017018:	61003b20 	tstvs	r0, r0, lsr #22
 801701c:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 8017020:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 8017024:	6a2f6e6f 	bvs	8bf29e8 <__exidx_end+0xbda1ec>
 8017028:	006e6f73 	rsbeq	r6, lr, r3, ror pc
 801702c:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8017030:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8017034:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8017038:	2f006874 	svccs	0x00006874
 801703c:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8017040:	74682e78 	strbtvc	r2, [r8], #-3704	; 0xfffff188
 8017044:	2f006c6d 	svccs	0x00006c6d
 8017048:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 801704c:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8017050:	2f007373 	svccs	0x00007373
 8017054:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8017058:	736a2e78 	cmnvc	sl, #120, 28	; 0x780
 801705c:	736a2f00 	cmnvc	sl, #0, 30
 8017060:	002f6e6f 	eoreq	r6, pc, pc, ror #28
 8017064:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017068:	72657600 	rsbvc	r7, r5, #0, 12
 801706c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8017070:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 8017074:	00656d69 	rsbeq	r6, r5, r9, ror #26
 8017078:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801707c:	0079616c 	rsbseq	r6, r9, ip, ror #2
 8017080:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017084:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8017088:	6a2f0079 	bvs	8bd7274 <__exidx_end+0xbbea78>
 801708c:	2f6e6f73 	svccs	0x006e6f73
 8017090:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8017094:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
 8017098:	6f6f6265 	svcvs	0x006f6265
 801709c:	64690074 	strbtvs	r0, [r9], #-116	; 0xffffff8c
 80170a0:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 80170a4:	3c007966 			; <UNDEFINED> instruction: 0x3c007966
 80170a8:	434f4421 	movtmi	r4, #62497	; 0xf421
 80170ac:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 80170b0:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 80170b4:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 80170b8:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80170bc:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 80170c0:	3e646165 	powccsz	f6, f4, f5
 80170c4:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 80170c8:	533e656c 	teqpl	lr, #108, 10	; 0x1b000000
 80170cc:	696d6275 	stmdbvs	sp!, {r0, r2, r4, r5, r6, r9, sp, lr}^
 80170d0:	742f3c74 	strtvc	r3, [pc], #-3188	; 80170d8 <RemoteConfig::s_TXT+0x170>
 80170d4:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 80170d8:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80170dc:	3e646165 	powccsz	f6, f4, f5
 80170e0:	6f623c0a 	svcvs	0x00623c0a
 80170e4:	3c3e7964 			; <UNDEFINED> instruction: 0x3c3e7964
 80170e8:	4f3e3168 	svcmi	0x003e3168
 80170ec:	682f3c4b 	stmdavs	pc!, {r0, r1, r3, r6, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80170f0:	2f3c3e31 	svccs	0x003c3e31
 80170f4:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 80170f8:	2f3c0a3e 	svccs	0x003c0a3e
 80170fc:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8017100:	42000a3e 	andmi	r0, r0, #253952	; 0x3e000
 8017104:	52206461 	eorpl	r6, r0, #1627389952	; 0x61000000
 8017108:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 801710c:	4e007473 	mcrmi	4, 0, r7, cr0, cr3, {3}
 8017110:	4620746f 	strtmi	r7, [r0], -pc, ror #8
 8017114:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 8017118:	71655200 	cmnvc	r5, r0, lsl #4
 801711c:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
 8017120:	746e4520 	strbtvc	r4, [lr], #-1312	; 0xfffffae0
 8017124:	20797469 	rsbscs	r7, r9, r9, ror #8
 8017128:	206f6f54 	rsbcs	r6, pc, r4, asr pc	; <UNPREDICTABLE>
 801712c:	6772614c 	ldrbvs	r6, [r2, -ip, asr #2]!
 8017130:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
 8017134:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
 8017138:	52552d74 	subspl	r2, r5, #116, 26	; 0x1d00
 801713c:	6f542049 	svcvs	0x00542049
 8017140:	6f4c206f 	svcvs	0x004c206f
 8017144:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 8017148:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 801714c:	206c616e 	rsbcs	r6, ip, lr, ror #2
 8017150:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8017154:	45207265 	strmi	r7, [r0, #-613]!	; 0xfffffd9b
 8017158:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 801715c:	74654d00 	strbtvc	r4, [r5], #-3328	; 0xfffff300
 8017160:	20646f68 	rsbcs	r6, r4, r8, ror #30
 8017164:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8017168:	6c706d49 	ldclvs	13, cr6, [r0], #-292	; 0xfffffedc
 801716c:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8017170:	00646574 	rsbeq	r6, r4, r4, ror r5
 8017174:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 8017178:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801717c:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8017180:	70707553 	rsbsvc	r7, r0, r3, asr r5
 8017184:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
 8017188:	6e550064 	cdpvs	0, 5, cr0, cr5, cr4, {3}
 801718c:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 8017190:	7245206e 	subvc	r2, r5, #110	; 0x6e
 8017194:	00726f72 	rsbseq	r6, r2, r2, ror pc
 8017198:	3c004b4f 			; <UNDEFINED> instruction: 0x3c004b4f
 801719c:	434f4421 	movtmi	r4, #62497	; 0xf421
 80171a0:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 80171a4:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 80171a8:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 80171ac:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80171b0:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 80171b4:	3e646165 	powccsz	f6, f4, f5
 80171b8:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 80171bc:	253e656c 	ldrcs	r6, [lr, #-1388]!	; 0xfffffa94
 80171c0:	73252075 			; <UNDEFINED> instruction: 0x73252075
 80171c4:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 80171c8:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 80171cc:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 80171d0:	0a3e6461 	beq	8fb035c <__exidx_end+0xf97b60>
 80171d4:	646f623c 	strbtvs	r6, [pc], #-572	; 80171dc <RemoteConfig::s_TXT+0x274>
 80171d8:	683c3e79 	ldmdavs	ip!, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 80171dc:	73253e31 			; <UNDEFINED> instruction: 0x73253e31
 80171e0:	31682f3c 	cmncc	r8, ip, lsr pc
 80171e4:	622f3c3e 	eorvs	r3, pc, #15872	; 0x3e00
 80171e8:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 80171ec:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80171f0:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 80171f4:	5448000a 	strbpl	r0, [r8], #-10
 80171f8:	312f5054 	qsubcc	r5, r4, pc	; <UNPREDICTABLE>
 80171fc:	2520312e 	strcs	r3, [r0, #-302]!	; 0xfffffed2
 8017200:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8017204:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
 8017208:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
 801720c:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8017210:	6f430a0d 	svcvs	0x00430a0d
 8017214:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 8017218:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 801721c:	203a6570 	eorscs	r6, sl, r0, ror r5
 8017220:	0a0d7325 	beq	8373ebc <__exidx_end+0x35b6c0>
 8017224:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8017228:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 801722c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8017230:	203a6874 	eorscs	r6, sl, r4, ror r8
 8017234:	0a0d7525 	beq	83746d0 <__exidx_end+0x35bed4>
 8017238:	6e6e6f43 	cdpvs	15, 6, cr6, cr14, cr3, {2}
 801723c:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8017240:	203a6e6f 	eorscs	r6, sl, pc, ror #28
 8017244:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 8017248:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
 801724c:	 	ldrbvs	r0, [r4, #-10]!

0801724e <contentType>:
 801724e:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8017252:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 8017256:	0000006c 	andeq	r0, r0, ip, rrx
	...
 801726e:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8017272:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 801728e:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8017292:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 8017296:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 801729a:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 80172ae:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 80172b2:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 80172b6:	2f6e6f69 	svccs	0x006e6f69
 80172ba:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

080172ce <RemoteConfigConst::PARAMS_DISABLE>:
 80172ce:	61736964 	cmnvs	r3, r4, ror #18
 80172d2:	00656c62 	rsbeq	r6, r5, r2, ror #24

080172d6 <RemoteConfigConst::PARAMS_FILE_NAME>:
 80172d6:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 80172da:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 80172de:	00747874 	rsbseq	r7, r4, r4, ror r8

080172e2 <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 80172e2:	70736964 	rsbsvc	r6, r3, r4, ror #18
 80172e6:	5f79616c 	svcpl	0x0079616c
 80172ea:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

080172ef <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 80172ef:	61736964 	cmnvs	r3, r4, ror #18
 80172f3:	5f656c62 	svcpl	0x00656c62
 80172f7:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 80172fb:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

080172fd <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 80172fd:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8017301:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8017305:	6f6f6265 	svcvs	0x006f6265
 8017309:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

0801730b <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 801730b:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801730f:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 8016dab <s_Node+0x7d>
 8017313:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8017317:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08017319 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 8017319:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801731d:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 8017321:	6f746361 	svcvs	0x00746361
 8017325:	7b007972 	blvc	80358f5 <__exidx_end+0x1d0f9>
 8017329:	73696c22 	cmnvc	r9, #8704	; 0x2200
 801732d:	7b3a2274 	blvc	8e9fd05 <__exidx_end+0xe87509>
 8017331:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 8017335:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8017339:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801733d:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017341:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 8017345:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8017349:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801734d:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8017351:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8017355:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8017359:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 801735d:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8017361:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8017365:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8017369:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 801736d:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8017371:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8017375:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8017379:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 801737d:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 8017381:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 8017385:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8017389:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801738d:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8017391:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8017395:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8017399:	616f6222 	cmnvs	pc, r2, lsr #4
 801739d:	3a226472 	bcc	88b056d <__exidx_end+0x897d71>
 80173a1:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 80173a5:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 80173a9:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 80173ad:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 80173b1:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 80173b5:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 80173b9:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 80173bd:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 80173c1:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 80173c5:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 80173c9:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 80173cd:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 80173d1:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 80173d5:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 80173d9:	7b000a7d 	blvc	8019dd5 <__exidx_end+0x15d9>
 80173dd:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 80173e1:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80173e5:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 80173e9:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 80173ed:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 80173f1:	7b3a2273 	blvc	8e9fdc5 <__exidx_end+0xe875c9>
 80173f5:	74726122 	ldrbtvc	r6, [r2], #-290	; 0xfffffede
 80173f9:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 80173fd:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8017401:	7241223a 	subvc	r2, r1, #-1610612733	; 0xa0000003
 8017405:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 8017409:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 801740d:	61726170 	cmnvs	r2, r0, ror r1
 8017411:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 8017415:	3a227478 	bcc	88b45fd <__exidx_end+0x89be01>
 8017419:	584d4422 	stmdapl	sp, {r1, r5, sl, lr}^
 801741d:	61725420 	cmnvs	r2, r0, lsr #8
 8017421:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 8017425:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 8017429:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801742d:	2e79616c 	rpwcsez	f6, f1, #4.0
 8017431:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8017435:	6944223a 	stmdbvs	r4, {r1, r3, r4, r5, r9, sp}^
 8017439:	616c7073 	smcvs	50947	; 0xc703
 801743d:	44552079 	ldrbmi	r2, [r5], #-121	; 0xffffff87
 8017441:	222c2246 	eorcs	r2, ip, #1610612740	; 0x60000004
 8017445:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8017449:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 801744d:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8017451:	654e223a 	strbvs	r2, [lr, #-570]	; 0xfffffdc6
 8017455:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8017459:	222c226b 	eorcs	r2, ip, #-1342177274	; 0xb0000006
 801745d:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 8017461:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 8017465:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8017469:	6552223a 	ldrbvs	r2, [r2, #-570]	; 0xfffffdc6
 801746d:	65746f6d 	ldrbvs	r6, [r4, #-3949]!	; 0xfffff093
 8017471:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8017475:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 8017479:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801747d:	7d226e6f 	stcvc	14, cr6, [r2, #-444]!	; 0xfffffe44
 8017481:	7273007d 	rsbsvc	r0, r3, #125	; 0x7d
 8017485:	74682f63 	strbtvc	r2, [r8], #-3939	; 0xfffff09d
 8017489:	2f647074 	svccs	0x00647074
 801748d:	5f746567 	svcpl	0x00746567
 8017491:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8017495:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 8017499:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
 801749d:	7070632e 	rsbsvc	r6, r0, lr, lsr #6
 80174a1:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
 80174a5:	6c69665f 	stclvs	6, cr6, [r9], #-380	; 0xfffffe84
 80174a9:	6f635f65 	svcvs	0x00635f65
 80174ad:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 80174b1:	73250074 			; <UNDEFINED> instruction: 0x73250074
 80174b5:	25202928 	strcs	r2, [r0, #-2344]!	; 0xfffff6d8
 80174b9:	6c202c73 	stcvs	12, cr2, [r0], #-460	; 0xfffffe34
 80174bd:	20656e69 	rsbcs	r6, r5, r9, ror #28
 80174c1:	203a6925 	eorscs	r6, sl, r5, lsr #18
 80174c5:	2d207325 	stccs	3, cr7, [r0, #-148]!	; 0xffffff6c
 80174c9:	6425203e 	strtvs	r2, [r5], #-62	; 0xffffffc2
 80174cd:	2d3c000a 	ldccs	0, cr0, [ip, #-40]!	; 0xffffffd8
 80174d1:	7325202d 			; <UNDEFINED> instruction: 0x7325202d
 80174d5:	3a73253a 	bcc	9ce09c5 <__exidx_end+0x1cc81c9>
 80174d9:	000a6425 	andeq	r6, sl, r5, lsr #8

080174dd <index_html>:
 80174dd:	4f44213c 	svcmi	0x0044213c
 80174e1:	50595443 	subspl	r5, r9, r3, asr #8
 80174e5:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 80174e9:	0a3e6c6d 	beq	8fb26a5 <__exidx_end+0xf99ea9>
 80174ed:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 80174f1:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 80174f5:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 80174f9:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 80174fd:	6b6e696c 	blvs	9bb1ab5 <__exidx_end+0x1b992b9>
 8017501:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 8017505:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 8017509:	73656c79 	cmnvc	r5, #30976	; 0x7900
 801750d:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8017511:	72682022 	rsbvc	r2, r8, #34	; 0x22
 8017515:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 8017519:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 801751d:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8017521:	20227373 	eorcs	r7, r2, r3, ror r3
 8017525:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 8017529:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 801752d:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 8017531:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 8017535:	0a3e656c 	beq	8fb0aed <__exidx_end+0xf982f1>
 8017539:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 801753d:	0a3e6461 	beq	8fb06c9 <__exidx_end+0xf97ecd>
 8017541:	646f623c 	strbtvs	r6, [pc], #-572	; 8017549 <index_html+0x6c>
 8017545:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8017549:	6165683c 	cmnvs	r5, ip, lsr r8
 801754d:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 8017551:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 8017555:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 8017559:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 801755d:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 8017561:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8017565:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8017569:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 801756d:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8017571:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 8017575:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 8017579:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 801757d:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 8017581:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8017585:	6f746365 	svcvs	0x00746365
 8017589:	20227972 	eorcs	r7, r2, r2, ror r9
 801758d:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8017591:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 8017595:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 8017599:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801759d:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 80175a1:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 80175a5:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 80175a9:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 80175ad:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 80175b1:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 80175b5:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 80175b9:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 80175bd:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 80175c1:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 80175c5:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 80175c9:	20227478 	eorcs	r7, r2, r8, ror r4
 80175cd:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 80175d1:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 80175d5:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 80175d9:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 80175dd:	0a3e656c 	beq	8fb0b95 <__exidx_end+0xf98399>
 80175e1:	6f663c09 	svcvs	0x00663c09
 80175e5:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 80175e9:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 80175ed:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 80175f1:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 80175f5:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80175f9:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 80175fd:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8017601:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 8017605:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 8017609:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 801760d:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 8017611:	20747069 	rsbscs	r7, r4, r9, rrx
 8017615:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 8017619:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 801761d:	6a2e7865 	bvs	8bb57b9 <__exidx_end+0xb9cfbd>
 8017621:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 8017625:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 8017629:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801762d:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 8017631:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8017635:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8017639:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 801763d:	 	strbtvs	r6, [pc], #-522	; 8017645 <styles_css+0x7>

0801763e <styles_css>:
 801763e:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017642:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8017646:	63616220 	cmnvs	r1, #32, 4
 801764a:	6f72676b 	svcvs	0x0072676b
 801764e:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 8017652:	6f6c6f63 	svcvs	0x006c6f63
 8017656:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 801765a:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 801765e:	30322c30 	eorscc	r2, r2, r0, lsr ip
 8017662:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 8017666:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 801766a:	6f6c6f63 	svcvs	0x006c6f63
 801766e:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 8017672:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8017676:	202c3535 	eorcs	r3, ip, r5, lsr r5
 801767a:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 801767e:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 8017682:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8017686:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 801768a:	200a7b20 	andcs	r7, sl, r0, lsr #22
 801768e:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8017692:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8017696:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 801769a:	0a3b7865 	beq	8ef5836 <__exidx_end+0xedd03a>
 801769e:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 80176a2:	0a7b2069 	beq	9edf84e <__exidx_end+0x1ec7052>
 80176a6:	696c2020 	stmdbvs	ip!, {r5, sp}^
 80176aa:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 80176ae:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 80176b2:	6f6e203a 	svcvs	0x006e203a
 80176b6:	0a3b656e 	beq	8ef0c76 <__exidx_end+0xed847a>
 80176ba:	616d2020 	cmnvs	sp, r0, lsr #32
 80176be:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 80176c2:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 80176c6:	70352078 	eorsvc	r2, r5, r8, ror r0
 80176ca:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 80176ce:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 80176d2:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 80176d6:	200a7b20 	andcs	r7, sl, r0, lsr #22
 80176da:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 80176de:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80176e2:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 80176e6:	0a3b7865 	beq	8ef5882 <__exidx_end+0xedd086>
 80176ea:	6f622020 	svcvs	0x00622020
 80176ee:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 80176f2:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 80176f6:	3a737569 	bcc	9cf4ca2 <__exidx_end+0x1cdc4a6>
 80176fa:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 80176fe:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8017702:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8017706:	203a7265 	eorscs	r7, sl, r5, ror #4
 801770a:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801770e:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8017712:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8017716:	0a3b7870 	beq	8ef58de <__exidx_end+0xedd0e2>
 801771a:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 801771e:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 8017722:	0a7b2072 	beq	9edf8f2 <__exidx_end+0x1ec70f6>
 8017726:	69642020 	stmdbvs	r4!, {r5, sp}^
 801772a:	616c7073 	smcvs	50947	; 0xc703
 801772e:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 8017732:	3b78656c 	blcc	9e30cea <__exidx_end+0x1e184ee>
 8017736:	6a20200a 	bvs	881f766 <__exidx_end+0x806f6a>
 801773a:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 801773e:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 8017742:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8017746:	203a746e 	eorscs	r7, sl, lr, ror #8
 801774a:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 801774e:	0a3b7265 	beq	8ef40ea <__exidx_end+0xedb8ee>
 8017752:	6f622020 	svcvs	0x00622020
 8017756:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 801775a:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 801775e:	3a737569 	bcc	9cf4d0a <__exidx_end+0x1cdc50e>
 8017762:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8017766:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 801776a:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 801776e:	203a7265 	eorscs	r7, sl, r5, ror #4
 8017772:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017776:	72672064 	rsbvc	r2, r7, #100	; 0x64
 801777a:	31207965 			; <UNDEFINED> instruction: 0x31207965
 801777e:	0a3b7870 	beq	8ef5946 <__exidx_end+0xedd14a>
 8017782:	 	subvc	r0, r8, sp, ror sl

08017784 <HttpContent>:
 8017784:	08017048 	stmdaeq	r1, {r3, r6, ip, sp, lr}
 8017788:	0801763e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r9, sl, ip, sp, lr}
 801778c:	08017054 	stmdaeq	r1, {r2, r4, r6, ip, sp, lr}
 8017790:	0801779c 	stmdaeq	r1, {r2, r3, r4, r7, r8, r9, sl, ip, sp, lr}
 8017794:	0801703c 	stmdaeq	r1, {r2, r3, r4, r5, ip, sp, lr}
 8017798:	080174dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, sl, ip, sp, lr}

0801779c <index_js>:
 801779c:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 80177a0:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 80177a4:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80177a8:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 80177ac:	534a7465 	movtpl	r7, #42085	; 0xa465
 80177b0:	6a284e4f 	bvs	8a2b0f4 <__exidx_end+0xa128f8>
 80177b4:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80177b8:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 80177bc:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 80177c0:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 80177c4:	6a2f273d 	bvs	8be14c0 <__exidx_end+0xbc8cc4>
 80177c8:	2f6e6f73 	svccs	0x006e6f73
 80177cc:	202b2027 	eorcs	r2, fp, r7, lsr #32
 80177d0:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 80177d4:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 80177d8:	20797274 	rsbscs	r7, r9, r4, ror r2
 80177dc:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 80177e0:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 80177e4:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 80177e8:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 80177ec:	20746961 	rsbscs	r6, r4, r1, ror #18
 80177f0:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 80177f4:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 80177f8:	0a3b296c 	beq	8ee1db0 <__exidx_end+0xec95b4>
 80177fc:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8017800:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 8017804:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 8017808:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 801780c:	73657220 	cmnvc	r5, #32, 4
 8017810:	6f736a2e 	svcvs	0x00736a2e
 8017814:	3b29286e 	blcc	8a619d4 <__exidx_end+0xa491d8>
 8017818:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 801781c:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 8017820:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 8017824:	6f727265 	svcvs	0x00727265
 8017828:	7b202972 	blvc	8821df8 <__exidx_end+0x8095fc>
 801782c:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8017830:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 8017834:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 8017838:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 801783c:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 8017840:	3b29726f 	blcc	8a74204 <__exidx_end+0xa5ba08>
 8017844:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 8017848:	0a0a7d0a 	beq	82b6c78 <__exidx_end+0x29e47c>
 801784c:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8017850:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8017854:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8017858:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 801785c:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8017860:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8017864:	20292874 	eorcs	r2, r9, r4, ror r8
 8017868:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 801786c:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8017870:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017874:	6177613d 	cmnvs	r7, sp, lsr r1
 8017878:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801787c:	534a7465 	movtpl	r7, #42085	; 0xa465
 8017880:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8017884:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017888:	0a3b2927 	beq	8ee1d2c <__exidx_end+0xec9530>
 801788c:	6f640909 	svcvs	0x00640909
 8017890:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8017894:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8017898:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 801789c:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 80178a0:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 80178a4:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 80178a8:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 80178ac:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 80178b0:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 80178b4:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 80178b8:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 80178bc:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 80178c0:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 80178c4:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 80178c8:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 80178cc:	2b656d61 	blcs	9972e58 <__exidx_end+0x195a65c>
 80178d0:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017850 <index_js+0xb4>
 80178d4:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 80178d8:	2b223e69 	blcs	88a7284 <__exidx_end+0x88ea88>
 80178dc:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80178e0:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 80178e4:	6f6e2e74 	svcvs	0x006e2e74
 80178e8:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 80178ec:	2b657079 	blcs	9973ad8 <__exidx_end+0x195b2dc>
 80178f0:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017870 <index_js+0xd4>
 80178f4:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 80178f8:	2b223e69 	blcs	88a72a4 <__exidx_end+0x88eaa8>
 80178fc:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017900:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8017904:	6f6e2e74 	svcvs	0x006e2e74
 8017908:	702e6564 	eorvc	r6, lr, r4, ror #10
 801790c:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 8017910:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8017914:	2f3c222b 	svccs	0x003c222b
 8017918:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 801791c:	0a7d0a3b 	beq	9f5a210 <__exidx_end+0x1f41a14>
 8017920:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 8017924:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 8017928:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 801792c:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 8017930:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 8017934:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017938:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801793c:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 8017940:	0a7b2029 	beq	9edf9ec <__exidx_end+0x1ec71f0>
 8017944:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8017948:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 801794c:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8017950:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017954:	6177613d 	cmnvs	r7, sp, lsr r1
 8017958:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801795c:	534a7465 	movtpl	r7, #42085	; 0xa465
 8017960:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8017964:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017968:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 801796c:	3b292779 	blcc	8a61758 <__exidx_end+0xa48f5c>
 8017970:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8017974:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8017978:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801797c:	0a22223d 	beq	88a0278 <__exidx_end+0x887a7c>
 8017980:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8017984:	66207465 	strtvs	r7, [r0], -r5, ror #8
 8017988:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 801798c:	73656d61 	cmnvc	r5, #6208	; 0x1840
 8017990:	6a624f3d 	bvs	98ab68c <__exidx_end+0x1892e90>
 8017994:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 8017998:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 801799c:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 80179a0:	6f746365 	svcvs	0x00746365
 80179a4:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 80179a8:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 80179ac:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 80179b0:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 80179b4:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 80179b8:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 80179bc:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 80179c0:	6145726f 	cmpvs	r5, pc, ror #4
 80179c4:	66286863 	strtvs	r6, [r8], -r3, ror #16
 80179c8:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 80179cc:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 80179d0:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 80179d4:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 80179d8:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 80179dc:	20726176 	rsbscs	r6, r2, r6, ror r1
 80179e0:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 80179e4:	203d2065 	eorscs	r2, sp, r5, rrx
 80179e8:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 80179ec:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 80179f0:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 80179f4:	73656c69 	cmnvc	r5, #26880	; 0x6900
 80179f8:	6b5b5d22 	blvs	96eee88 <__exidx_end+0x16d668c>
 80179fc:	3b5d7965 	blcc	9775f98 <__exidx_end+0x175d79c>
 8017a00:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8017a04:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 8017a08:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 8017a0c:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 8017a10:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8017a14:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 8017a18:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 8017a1c:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 8017a20:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 8017a24:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 8017a28:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 8017a2c:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 8017a30:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8017a34:	0a3b223e 	beq	8ee0334 <__exidx_end+0xec7b38>
 8017a38:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 8017a3c:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8017a40:	6f640909 	svcvs	0x00640909
 8017a44:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8017a48:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8017a4c:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8017a50:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8017a54:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 8017a58:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 8017a5c:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8017a60:	6f746365 	svcvs	0x00746365
 8017a64:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 8017a68:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 8017a6c:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 8017a70:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 8017a74:	3b6c6d74 	blcc	9b3304c <__exidx_end+0x1b1a850>
 8017a78:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8017a7c:	5f746567 	svcpl	0x00746567
 8017a80:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 8017a84:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8017a88:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8017a8c:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 8017a90:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8017a94:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 8017a98:	20636e79 	rsbcs	r6, r3, r9, ror lr
 8017a9c:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8017aa0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8017aa4:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 8017aa8:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 8017aac:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017ab0:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 8017ab4:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8017ab8:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8017abc:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 8017ac0:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8017ac4:	6177613d 	cmnvs	r7, sp, lsr r1
 8017ac8:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8017acc:	534a7465 	movtpl	r7, #42085	; 0xa465
 8017ad0:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8017ad4:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017ad8:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 8017adc:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8017ae0:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 8017ae4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 8017ae8:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 8017aec:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 8017af0:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 8017af4:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 8017af8:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 8017afc:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 8017b00:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8017b04:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 8017b08:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 8017b0c:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 8017b10:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 8017b14:	2b22563e 	blcs	88ad414 <__exidx_end+0x894c18>
 8017b18:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017b1c:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 8017b20:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017b24:	2b6e6f69 	blcs	9bb38d0 <__exidx_end+0x1b9b0d4>
 8017b28:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017aa8 <index_js+0x30c>
 8017b2c:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8017b30:	2b223e69 	blcs	88a74dc <__exidx_end+0x88ece0>
 8017b34:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017b38:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 8017b3c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 8017b40:	61642e64 	cmnvs	r4, r4, ror #28
 8017b44:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 8017b48:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8017b4c:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 8017b50:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 8017b54:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017b58:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 8017b5c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 8017b60:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 8017b64:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 8017b68:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 8017b6c:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 8017b70:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 8017b74:	6f697372 	svcvs	0x00697372
 8017b78:	6f622e6e 	svcvs	0x00622e6e
 8017b7c:	2b647261 	blcs	9934508 <__exidx_end+0x191bd0c>
 8017b80:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017b00 <index_js+0x364>
 8017b84:	3b223e69 	blcc	88a7530 <__exidx_end+0x88ed34>
 8017b88:	0a0a7d0a 	beq	82b6fb8 <__exidx_end+0x29e7bc>
 8017b8c:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8017b90:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8017b94:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8017b98:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8017b9c:	745f7465 	ldrbvc	r7, [pc], #-1125	; 8017ba4 <index_js+0x408>
 8017ba0:	73287478 			; <UNDEFINED> instruction: 0x73287478
 8017ba4:	20296c65 	eorcs	r6, r9, r5, ror #24
 8017ba8:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 8017bac:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 8017bb0:	613d7478 	teqvs	sp, r8, ror r4
 8017bb4:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 8017bb8:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 8017bbc:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 8017bc0:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 8017bc4:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8017bc8:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8017bcc:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8017bd0:	3b22223d 	blcc	88a04cc <__exidx_end+0x887cd0>
 8017bd4:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 8017bd8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 8017bdc:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 8017be0:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 8017be4:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 8017be8:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 8017bec:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 8017bf0:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 8017bf4:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8017bf8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8017bfc:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 8017c00:	0a7b2029 	beq	9edfcac <__exidx_end+0x1ec74b0>
 8017c04:	61760909 	cmnvs	r6, r9, lsl #18
 8017c08:	61762072 	cmnvs	r6, r2, ror r0
 8017c0c:	2065756c 	rsbcs	r7, r5, ip, ror #10
 8017c10:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 8017c14:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 8017c18:	6b5b5d6c 	blvs	96ef1d0 <__exidx_end+0x16d69d4>
 8017c1c:	3b5d7965 	blcc	97761b8 <__exidx_end+0x175d9bc>
 8017c20:	2009090a 	andcs	r0, r9, sl, lsl #18
 8017c24:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8017c28:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 8017c2c:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 8017c30:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8017c34:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 8017c38:	2f3c222b 	svccs	0x003c222b
 8017c3c:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 8017c40:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8017c44:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 8017c48:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 8017c4c:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 8017c50:	742f3c3e 	strtvc	r3, [pc], #-3134	; 8017c58 <index_js+0x4bc>
 8017c54:	3b223e72 	blcc	88a7624 <__exidx_end+0x88ee28>
 8017c58:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 8017c5c:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 8017c60:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 8017c64:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 8017c68:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 8017c6c:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 8017c70:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 8017c74:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 8017c78:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 8017c7c:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8017c80:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8017c84:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8017c88:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 8017c8c:	0a3b6c6d 	beq	8ef2e48 <__exidx_end+0xeda64c>
 8017c90:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 8017c94:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8017c98:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8017c9c:	3b292874 	blcc	8a61e74 <__exidx_end+0xa49678>
 8017ca0:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 8017ca4:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 8017ca8:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8017cac:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017cb0:	0a3b2928 	beq	8ee2158 <__exidx_end+0xec995c>
 8017cb4:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 8017cb8:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 8017cbc:	6f697372 	svcvs	0x00697372
 8017cc0:	3b29286e 	blcc	8a61e80 <__exidx_end+0xa49684>
 8017cc4:	0000000a 	andeq	r0, r0, sl

08017cc8 <s_aStorSize>:
 8017cc8:	00000060 	andeq	r0, r0, r0, rrx
 8017ccc:	00000090 	muleq	r0, r0, r0
 8017cd0:	00000020 	andeq	r0, r0, r0, lsr #32
 8017cd4:	00000040 	andeq	r0, r0, r0, asr #32
 8017cd8:	00000060 	andeq	r0, r0, r0, rrx
 8017cdc:	00000040 	andeq	r0, r0, r0, asr #32
 8017ce0:	00000020 	andeq	r0, r0, r0, lsr #32
 8017ce4:	00000020 	andeq	r0, r0, r0, lsr #32
 8017ce8:	000001e0 	andeq	r0, r0, r0, ror #3
 8017cec:	00000040 	andeq	r0, r0, r0, asr #32
 8017cf0:	00000020 	andeq	r0, r0, r0, lsr #32
 8017cf4:	00000060 	andeq	r0, r0, r0, rrx
 8017cf8:	00000030 	andeq	r0, r0, r0, lsr r0
 8017cfc:	00000020 	andeq	r0, r0, r0, lsr #32
 8017d00:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 8017d04:	00000030 	andeq	r0, r0, r0, lsr r0
 8017d08:	00000040 	andeq	r0, r0, r0, asr #32
 8017d0c:	00000020 	andeq	r0, r0, r0, lsr #32
 8017d10:	00000060 	andeq	r0, r0, r0, rrx
 8017d14:	00000020 	andeq	r0, r0, r0, lsr #32
 8017d18:	00000400 	andeq	r0, r0, r0, lsl #8
 8017d1c:	00000020 	andeq	r0, r0, r0, lsr #32
 8017d20:	00000020 	andeq	r0, r0, r0, lsr #32
 8017d24:	00000040 	andeq	r0, r0, r0, asr #32
 8017d28:	00000060 	andeq	r0, r0, r0, rrx
 8017d2c:	00000020 	andeq	r0, r0, r0, lsr #32
 8017d30:	00000020 	andeq	r0, r0, r0, lsr #32
 8017d34:	00000020 	andeq	r0, r0, r0, lsr #32

08017d38 <vtable for StoreArtNet>:
	...
 8017d40:	0800f5dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sl, ip, sp, lr, pc}
 8017d44:	0800f7a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, r9, sl, ip, sp, lr, pc}
 8017d48:	0800f5e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, sl, ip, sp, lr, pc}
 8017d4c:	0800f7b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, r9, sl, ip, sp, lr, pc}
 8017d50:	0800f609 	stmdaeq	r0, {r0, r3, r9, sl, ip, sp, lr, pc}
 8017d54:	0800f639 	stmdaeq	r0, {r0, r3, r4, r5, r9, sl, ip, sp, lr, pc}
 8017d58:	0800f665 	stmdaeq	r0, {r0, r2, r5, r6, r9, sl, ip, sp, lr, pc}
 8017d5c:	0800f6a1 	stmdaeq	r0, {r0, r5, r7, r9, sl, ip, sp, lr, pc}
 8017d60:	0800f6d1 	stmdaeq	r0, {r0, r4, r6, r7, r9, sl, ip, sp, lr, pc}
 8017d64:	0800f705 	stmdaeq	r0, {r0, r2, r8, r9, sl, ip, sp, lr, pc}
 8017d68:	0800f755 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, sl, ip, sp, lr, pc}
 8017d6c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8017d70:	00000000 	andeq	r0, r0, r0
 8017d74:	0800f5df 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r8, sl, ip, sp, lr, pc}
 8017d78:	0800f7b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, ip, sp, lr, pc}
 8017d7c:	0800f631 	stmdaeq	r0, {r0, r4, r5, r9, sl, ip, sp, lr, pc}
 8017d80:	0800f65d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r9, sl, ip, sp, lr, pc}
 8017d84:	0800f699 	stmdaeq	r0, {r0, r3, r4, r7, r9, sl, ip, sp, lr, pc}
 8017d88:	0800f6c9 	stmdaeq	r0, {r0, r3, r6, r7, r9, sl, ip, sp, lr, pc}
 8017d8c:	0800f6fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sl, ip, sp, lr, pc}
 8017d90:	0800f74d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, sl, ip, sp, lr, pc}
 8017d94:	0800f79d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, sl, ip, sp, lr, pc}

08017d98 <vtable for StoreDisplayUdf>:
	...
 8017da0:	0800f7f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, r9, sl, ip, sp, lr, pc}
 8017da4:	0800f83d 	stmdaeq	r0, {r0, r2, r3, r4, r5, fp, ip, sp, lr, pc}
 8017da8:	0800f819 	stmdaeq	r0, {r0, r3, r4, fp, ip, sp, lr, pc}
 8017dac:	0800f7f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp, lr, pc}

08017db0 <vtable for StoreDmxSend>:
	...
 8017db8:	0800f85d 	stmdaeq	r0, {r0, r2, r3, r4, r6, fp, ip, sp, lr, pc}
 8017dbc:	0800f8a5 	stmdaeq	r0, {r0, r2, r5, r7, fp, ip, sp, lr, pc}
 8017dc0:	0800f881 	stmdaeq	r0, {r0, r7, fp, ip, sp, lr, pc}
 8017dc4:	0800f861 	stmdaeq	r0, {r0, r5, r6, fp, ip, sp, lr, pc}

08017dc8 <vtable for StoreNetwork>:
	...
 8017dd0:	0800f8c5 	stmdaeq	r0, {r0, r2, r6, r7, fp, ip, sp, lr, pc}
 8017dd4:	0800f9d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, fp, ip, sp, lr, pc}
 8017dd8:	0800f8cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, fp, ip, sp, lr, pc}
 8017ddc:	0800f9ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, fp, ip, sp, lr, pc}
 8017de0:	0800f97d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, fp, ip, sp, lr, pc}
 8017de4:	0800f951 	stmdaeq	r0, {r0, r4, r6, r8, fp, ip, sp, lr, pc}
 8017de8:	0800f921 	stmdaeq	r0, {r0, r5, r8, fp, ip, sp, lr, pc}
 8017dec:	0800f9a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, fp, ip, sp, lr, pc}
 8017df0:	0800f8f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, fp, ip, sp, lr, pc}
 8017df4:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8017df8:	00000000 	andeq	r0, r0, r0
 8017dfc:	0800f8c7 	stmdaeq	r0, {r0, r1, r2, r6, r7, fp, ip, sp, lr, pc}
 8017e00:	0800f9e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, fp, ip, sp, lr, pc}
 8017e04:	0800f9a1 	stmdaeq	r0, {r0, r5, r7, r8, fp, ip, sp, lr, pc}
 8017e08:	0800f975 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, fp, ip, sp, lr, pc}
 8017e0c:	0800f949 	stmdaeq	r0, {r0, r3, r6, r8, fp, ip, sp, lr, pc}
 8017e10:	0800f9d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, fp, ip, sp, lr, pc}
 8017e14:	0800f919 	stmdaeq	r0, {r0, r3, r4, r8, fp, ip, sp, lr, pc}

08017e18 <vtable for StoreRDMDevice>:
	...
 8017e20:	0800fa21 	stmdaeq	r0, {r0, r5, r9, fp, ip, sp, lr, pc}
 8017e24:	0800fa91 	stmdaeq	r0, {r0, r4, r7, r9, fp, ip, sp, lr, pc}
 8017e28:	0800fa29 	stmdaeq	r0, {r0, r3, r5, r9, fp, ip, sp, lr, pc}
 8017e2c:	0800faa5 	stmdaeq	r0, {r0, r2, r5, r7, r9, fp, ip, sp, lr, pc}
 8017e30:	0800fa4d 	stmdaeq	r0, {r0, r2, r3, r6, r9, fp, ip, sp, lr, pc}
 8017e34:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8017e38:	00000000 	andeq	r0, r0, r0
 8017e3c:	0800fa23 	stmdaeq	r0, {r0, r1, r5, r9, fp, ip, sp, lr, pc}
 8017e40:	0800fa9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, fp, ip, sp, lr, pc}
 8017e44:	0800fa89 	stmdaeq	r0, {r0, r3, r7, r9, fp, ip, sp, lr, pc}

08017e48 <vtable for StoreRemoteConfig>:
	...
 8017e50:	0800fadd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, fp, ip, sp, lr, pc}
 8017e54:	0800fb25 	stmdaeq	r0, {r0, r2, r5, r8, r9, fp, ip, sp, lr, pc}
 8017e58:	0800fb01 	stmdaeq	r0, {r0, r8, r9, fp, ip, sp, lr, pc}
 8017e5c:	0800fae1 	stmdaeq	r0, {r0, r5, r6, r7, r9, fp, ip, sp, lr, pc}
 8017e60:	3a434d46 	bcc	90eb380 <__exidx_end+0x10d2b84>
 8017e64:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 8017e68:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 8017e6c:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8017e70:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 8017e74:	6f742068 	svcvs	0x00742068
 8017e78:	206c6174 	rsbcs	r6, ip, r4, ror r1
 8017e7c:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 8017e80:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 8017e84:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 8017e88:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 8017e8c:	6374000a 	cmnvs	r4, #10
 8017e90:	65625f70 	strbvs	r5, [r2, #-3952]!	; 0xfffff090
 8017e94:	3a6e6967 	bcc	9bb2438 <__exidx_end+0x1b99c3c>
 8017e98:	6f6f7420 	svcvs	0x006f7420
 8017e9c:	6e616d20 	cdpvs	13, 6, cr6, cr1, cr0, {1}
 8017ea0:	6f632079 	svcvs	0x00632079
 8017ea4:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
 8017ea8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8017eac:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
 8017eb0:	7500646e 	strvc	r6, [r0, #-1134]	; 0xfffffb92
 8017eb4:	6e69626e 	cdpvs	2, 6, cr6, cr9, cr14, {3}
 8017eb8:	41000a64 	tstmi	r0, r4, ror #20
 8017ebc:	6c205052 	stcvs	0, cr5, [r0], #-328	; 0xfffffeb8
 8017ec0:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
 8017ec4:	61662070 	smcvs	25088	; 0x6200
 8017ec8:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
 8017ecc:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 8017ed0:	61666564 	cmnvs	r6, r4, ror #10
 8017ed4:	20746c75 	rsbscs	r6, r4, r5, ror ip
 8017ed8:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8017edc:	0a796177 	beq	9e704c0 <__exidx_end+0x1e57cc4>
 8017ee0:	50524100 	subspl	r4, r2, r0, lsl #2
 8017ee4:	6f6f6c20 	svcvs	0x006f6c20
 8017ee8:	2070756b 	rsbscs	r7, r0, fp, ror #10
 8017eec:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 8017ef0:	000a6465 	andeq	r6, sl, r5, ror #8

08017ef4 <NetworkConst::MSG_MDNS_CONFIG>:
 8017ef4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8017ef8:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8017efc:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8017f00:	534e444d 	movtpl	r4, #58445	; 0xe44d
	...

08017f05 <NetworkConst::MSG_NETWORK_INIT>:
 8017f05:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8017f09:	206b726f 	rsbcs	r7, fp, pc, ror #4
 8017f0d:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 8017f11:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 8017f15:	6974617a 	ldmdbvs	r4!, {r1, r3, r4, r5, r6, r8, sp, lr}^
 8017f19:	32006e6f 	andcc	r6, r0, #1776	; 0x6f0
 8017f1d:	302e3432 	eorcc	r3, lr, r2, lsr r4
 8017f21:	322e302e 	eorcc	r3, lr, #46	; 0x2e
 8017f25:	5f003135 	svcpl	0x00003135
 8017f29:	2e706374 	mrccs	3, 3, r6, cr0, cr4, {3}
 8017f2d:	61636f6c 	cmnvs	r3, ip, ror #30
 8017f31:	735f006c 	cmpvc	pc, #108	; 0x6c
 8017f35:	69767265 	ldmdbvs	r6!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017f39:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8017f3d:	736e645f 	cmnvc	lr, #1593835520	; 0x5f000000
 8017f41:	2e64732d 	cdpcs	3, 6, cr7, cr4, cr13, {1}
 8017f45:	7064755f 	rsbvc	r7, r4, pc, asr r5
 8017f49:	636f6c2e 	cmnvs	pc, #11776	; 0x2e00
 8017f4d:	6d006c61 	stcvs	12, cr6, [r0, #-388]	; 0xfffffe7c
 8017f51:	0a534e44 	beq	94eb869 <__exidx_end+0x14d306d>
 8017f55:	6f4e2000 	svcvs	0x004e2000
 8017f59:	75722074 	ldrbvc	r2, [r2, #-116]!	; 0xffffff8c
 8017f5d:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
 8017f61:	20000a67 	andcs	r0, r0, r7, ror #20
 8017f65:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 8017f69:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8017f6d:	20000a73 	andcs	r0, r0, r3, ror sl
 8017f71:	25207325 	strcs	r7, [r0, #-805]!	; 0xfffffcdb
 8017f75:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8017f79:	7465000a 	strbtvc	r0, [r5], #-10
 8017f7d:	67003068 	strvs	r3, [r0, -r8, rrx]
 8017f81:	64616769 	strbtvs	r6, [r1], #-1897	; 0xfffff897
 8017f85:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 8017f89:	4e005f65 	cdpmi	15, 0, cr5, cr0, cr5, {3}
 8017f8d:	6f777465 	svcvs	0x00777465
 8017f91:	000a6b72 	andeq	r6, sl, r2, ror fp
 8017f95:	736f4820 	cmnvc	pc, #32, 16	; 0x200000
 8017f99:	6d616e74 	stclvs	14, cr6, [r1, #-464]!	; 0xfffffe30
 8017f9d:	3a202065 	bcc	8820139 <__exidx_end+0x80793d>
 8017fa1:	0a732520 	beq	9ce1429 <__exidx_end+0x1cc8c2d>
 8017fa5:	66492000 	strbvs	r2, [r9], -r0
 8017fa9:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 8017fad:	20202020 	eorcs	r2, r0, r0, lsr #32
 8017fb1:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8017fb5:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8017fb9:	4920000a 	stmdbmi	r0!, {r1, r3}
 8017fbd:	2074656e 	rsbscs	r6, r4, lr, ror #10
 8017fc1:	20202020 	eorcs	r2, r0, r0, lsr #32
 8017fc5:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8017fc9:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017fcd:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017fd1:	252f6425 	strcs	r6, [pc, #-1061]!	; 8017bb4 <index_js+0x418>
 8017fd5:	20000a64 	andcs	r0, r0, r4, ror #20
 8017fd9:	6d74654e 	cfldr64vs	mvdx6, [r4, #-312]!	; 0xfffffec8
 8017fdd:	206b7361 	rsbcs	r7, fp, r1, ror #6
 8017fe1:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8017fe5:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017fe9:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017fed:	0a64252e 	beq	99214ad <__exidx_end+0x1908cb1>
 8017ff1:	61472000 	mrsvs	r2, (UNDEF: 71)
 8017ff5:	61776574 	cmnvs	r7, r4, ror r5
 8017ff9:	20202079 	eorcs	r2, r0, r9, ror r0
 8017ffd:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8018001:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8018005:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8018009:	20000a64 	andcs	r0, r0, r4, ror #20
 801800d:	616f7242 	cmnvs	pc, r2, asr #4
 8018011:	73616364 	cmnvc	r1, #100, 6	; 0x90000001
 8018015:	203a2074 	eorscs	r2, sl, r4, ror r0
 8018019:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801801d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8018021:	0a64252e 	beq	99214e1 <__exidx_end+0x1908ce5>
 8018025:	614d2000 	mrsvs	r2, (UNDEF: 77)
 8018029:	20202063 	eorcs	r2, r0, r3, rrx
 801802d:	20202020 	eorcs	r2, r0, r0, lsr #32
 8018031:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8018035:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8018039:	3a78322e 	bcc	9e248f9 <__exidx_end+0x1e0c0fd>
 801803d:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8018041:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8018045:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 8018049:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 801804d:	0a78322e 	beq	9e2490d <__exidx_end+0x1e0c111>
 8018051:	6f4d2000 	svcvs	0x004d2000
 8018055:	20206564 	eorcs	r6, r0, r4, ror #10
 8018059:	20202020 	eorcs	r2, r0, r0, lsr #32
 801805d:	6325203a 			; <UNDEFINED> instruction: 0x6325203a
 8018061:	7453000a 	ldrbvc	r0, [r3], #-10
 8018065:	63697461 	cmnvs	r9, #1627389952	; 0x61000000
 8018069:	00504920 	subseq	r4, r0, r0, lsr #18
 801806d:	2050544e 	subscs	r5, r0, lr, asr #8
 8018071:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8018075:	22007265 	andcs	r7, r0, #1342177286	; 0x50000006
 8018079:	3a227325 	bcc	88b4d15 <__exidx_end+0x89c519>
 801807d:	662a2e25 	strtvs	r2, [sl], -r5, lsr #28
 8018081:	2523002c 	strcs	r0, [r3, #-44]!	; 0xffffffd4
 8018085:	2e253d73 	mcrcs	13, 1, r3, cr5, cr3, {3}
 8018089:	000a662a 	andeq	r6, sl, sl, lsr #12

0801808d <NetworkParamsConst::IP_ADDRESS>:
 801808d:	615f7069 	cmpvs	pc, r9, rrx
 8018091:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 8018095:	 	mcrvs	3, 0, r7, cr0, cr3, {3}

08018098 <NetworkParamsConst::NTP_SERVER>:
 8018098:	5f70746e 	svcpl	0x0070746e
 801809c:	76726573 			; <UNDEFINED> instruction: 0x76726573
 80180a0:	 	cdpvs	2, 0, cr7, cr0, cr5, {3}

080180a3 <NetworkParamsConst::NTP_UTC_OFFSET>:
 80180a3:	5f70746e 	svcpl	0x0070746e
 80180a7:	5f637475 	svcpl	0x00637475
 80180ab:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
 80180af:	 	strvs	r7, [r0], #-1125	; 0xfffffb9b

080180b2 <NetworkParamsConst::DEFAULT_GATEWAY>:
 80180b2:	61666564 	cmnvs	r6, r4, ror #10
 80180b6:	5f746c75 	svcpl	0x00746c75
 80180ba:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 80180be:	00796177 	rsbseq	r6, r9, r7, ror r1

080180c2 <NetworkParamsConst::DHCP_RETRY_TIME>:
 80180c2:	70636864 	rsbvc	r6, r3, r4, ror #16
 80180c6:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 80180ca:	745f7972 	ldrbvc	r7, [pc], #-2418	; 80180d2 <NetworkParamsConst::HOSTNAME>
 80180ce:	00656d69 	rsbeq	r6, r5, r9, ror #26

080180d2 <NetworkParamsConst::HOSTNAME>:
 80180d2:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 80180d6:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

080180db <NetworkParamsConst::NET_MASK>:
 80180db:	5f74656e 	svcpl	0x0074656e
 80180df:	6b73616d 	blvs	9cf069b <__exidx_end+0x1cd7e9f>
	...

080180e4 <NetworkParamsConst::USE_DHCP>:
 80180e4:	5f657375 	svcpl	0x00657375
 80180e8:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

080180ed <NetworkParamsConst::FILE_NAME>:
 80180ed:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 80180f1:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 80180f5:	00747874 	rsbseq	r7, r4, r4, ror r8
 80180f9:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 80180fd:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 8018101:	61747320 	cmnvs	r4, r0, lsr #6
 8018105:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 8018109:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801810d:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8018111:	252f6425 	strcs	r6, [pc, #-1061]!	; 8017cf4 <s_aStorSize+0x2c>
 8018115:	63252064 			; <UNDEFINED> instruction: 0x63252064
 8018119:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 801811d:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8018121:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8018125:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 8018129:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 801812d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8018131:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8018135:	46006425 	strmi	r6, [r0], -r5, lsr #8
 8018139:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 801813d:	20657261 	rsbcs	r7, r5, r1, ror #4
 8018141:	2a2e2556 	bcs	8ba16a1 <__exidx_end+0xb88ea5>
 8018145:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 8018149:	72205043 	eorvc	r5, r0, #67	; 0x43
 801814d:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 8018151:	00676e69 	rsbeq	r6, r7, r9, ror #28
 8018155:	50434844 	subpl	r4, r3, r4, asr #16
 8018159:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 801815d:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 8018161:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 8018165:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8018169:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 801816d:	6f647475 	svcvs	0x00647475
 8018171:	 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp, lr}

08018174 <pArray>:
 8018174:	08018208 	stmdaeq	r1, {r3, r9, pc}
 8018178:	080181c4 	stmdaeq	r1, {r2, r6, r7, r8, pc}
 801817c:	0801808d 	stmdaeq	r1, {r0, r2, r3, r7, pc}
 8018180:	0801820e 	stmdaeq	r1, {r1, r2, r3, r9, pc}
 8018184:	0801836c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, pc}
 8018188:	080181cf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r8, pc}
 801818c:	08016871 	stmdaeq	r1, {r0, r4, r5, r6, fp, sp, lr}
 8018190:	080180d2 	stmdaeq	r1, {r1, r4, r6, r7, pc}
 8018194:	080182d2 	stmdaeq	r1, {r1, r4, r6, r7, r9, pc}
 8018198:	080182e2 	stmdaeq	r1, {r1, r5, r6, r7, r9, pc}
 801819c:	080182f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r9, pc}
 80181a0:	08018302 	stmdaeq	r1, {r1, r8, r9, pc}
 80181a4:	080180db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, pc}
 80181a8:	0801835a 	stmdaeq	r1, {r1, r3, r4, r6, r8, r9, pc}
 80181ac:	0801687c 	stmdaeq	r1, {r2, r3, r4, r5, r6, fp, sp, lr}
 80181b0:	08016894 	stmdaeq	r1, {r2, r4, r7, fp, sp, lr}
 80181b4:	080168ac 	stmdaeq	r1, {r2, r3, r5, r7, fp, sp, lr}
 80181b8:	080168c4 	stmdaeq	r1, {r2, r6, r7, fp, sp, lr}
 80181bc:	080180b2 	stmdaeq	r1, {r1, r4, r5, r7, pc}
 80181c0:	080181dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, pc}

080181c4 <DisplayUdfParamsConst::BOARD_NAME>:
 80181c4:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 80181c8:	616e5f64 	cmnvs	lr, r4, ror #30
 80181cc:	 	tstvs	r0, sp, ror #10

080181cf <DisplayUdfParamsConst::ACTIVE_PORTS>:
 80181cf:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 80181d3:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 80181d7:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

080181dc <DisplayUdfParamsConst::DMX_DIRECTION>:
 80181dc:	5f786d64 	svcpl	0x00786d64
 80181e0:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 80181e4:	6f697463 	svcvs	0x00697463
 80181e8:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

080181ea <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 80181ea:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 80181ee:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 80181f2:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8017c8d <index_js+0x4f1>
 80181f6:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

080181f8 <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 80181f8:	70696c66 	rsbvc	r6, r9, r6, ror #24
 80181fc:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 8018200:	61636974 	smcvs	13972	; 0x3694
 8018204:	00796c6c 	rsbseq	r6, r9, ip, ror #24

08018208 <DisplayUdfParamsConst::TITLE>:
 8018208:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 801820c:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

0801820e <DisplayUdfParamsConst::VERSION>:
 801820e:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8018212:	006e6f69 	rsbeq	r6, lr, r9, ror #30

08018216 <DisplayUdfParamsConst::FILE_NAME>:
 8018216:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801821a:	2e79616c 	rpwcsez	f6, f1, #4.0
 801821e:	00747874 	rsbseq	r7, r4, r4, ror r8

08018222 <DisplayUdfParamsConst::INTENSITY>:
 8018222:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 8018226:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 801822a:	20200079 	eorcs	r0, r0, r9, ror r0
 801822e:	4f002020 	svcmi	0x00002020
 8018232:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8018236:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 801823a:	64253a64 	strtvs	r3, [r5], #-2660	; 0xfffff59c
 801823e:	20632520 	rsbcs	r2, r3, r0, lsr #10
 8018242:	4f007325 	svcmi	0x00007325
 8018246:	203a6425 	eorscs	r6, sl, r5, lsr #8
 801824a:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 801824e:	3a64253a 	bcc	992173e <__exidx_end+0x1908f42>
 8018252:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 8018256:	73252063 			; <UNDEFINED> instruction: 0x73252063
 801825a:	3a632500 	bcc	98e1662 <__exidx_end+0x18c8e66>
 801825e:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 8018262:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8018266:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801826a:	3a504100 	bcc	9428672 <__exidx_end+0x140fe76>
 801826e:	00642520 	rsbeq	r2, r4, r0, lsr #10
 8018272:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 8018276:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 801827a:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 801827e:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
 8018282:	73252200 			; <UNDEFINED> instruction: 0x73252200
 8018286:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801828a:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801828e:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8018292:	2c226425 	cfstrscs	mvf6, [r2], #-148	; 0xffffff6c
 8018296:	73252300 			; <UNDEFINED> instruction: 0x73252300
 801829a:	2e64253d 	mcrcs	5, 3, r2, cr4, cr13, {1}
 801829e:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80182a2:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80182a6:	2023000a 	eorcs	r0, r3, sl
 80182aa:	23207325 			; <UNDEFINED> instruction: 0x23207325
 80182ae:	2522000a 	strcs	r0, [r2, #-10]!
 80182b2:	223a2273 	eorscs	r2, sl, #805306375	; 0x30000007
 80182b6:	782a2e25 	stmdavc	sl!, {r0, r2, r5, r9, sl, fp, sp}
 80182ba:	23002c22 	movwcs	r2, #3106	; 0xc22
 80182be:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 80182c2:	0a782a2e 	beq	9e22b82 <__exidx_end+0x1e0a386>
	...

080182c7 <LightSetParamsConst::MERGE_MODE>:
 80182c7:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 80182cb:	6f6d5f65 	svcvs	0x006d5f65
 80182cf:	 	strvc	r6, [r0, #-1380]	; 0xfffffa9c

080182d2 <LightSetParamsConst::UNIVERSE_PORT>:
 80182d2:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 80182d6:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 80182da:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80182de:	00615f74 	rsbeq	r5, r1, r4, ror pc
 80182e2:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 80182e6:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 80182ea:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80182ee:	00625f74 	rsbeq	r5, r2, r4, ror pc
 80182f2:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 80182f6:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 80182fa:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80182fe:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8018302:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8018306:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801830a:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801830e:	00645f74 	rsbeq	r5, r4, r4, ror pc

08018312 <LightSetParamsConst::MERGE_MODE_PORT>:
 8018312:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8018316:	6f6d5f65 	svcvs	0x006d5f65
 801831a:	705f6564 	subsvc	r6, pc, r4, ror #10
 801831e:	5f74726f 	svcpl	0x0074726f
 8018322:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 8018326:	5f656772 	svcpl	0x00656772
 801832a:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 801832e:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018332:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8018336:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801833a:	6f6d5f65 	svcvs	0x006d5f65
 801833e:	705f6564 	subsvc	r6, pc, r4, ror #10
 8018342:	5f74726f 	svcpl	0x0074726f
 8018346:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 801834a:	5f656772 	svcpl	0x00656772
 801834e:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8018352:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018356:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801835a <LightSetParamsConst::DMX_START_ADDRESS>:
 801835a:	5f786d64 	svcpl	0x00786d64
 801835e:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8018362:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 8018366:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 801836a:	 	mrcvs	0, 3, r0, cr5, cr3, {3}

0801836c <LightSetParamsConst::UNIVERSE>:
 801836c:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8018370:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

08018375 <LightSetParamsConst::DIRECTION>:
 8018375:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8018379:	6f697463 	svcvs	0x00697463
 801837d:	6f705f6e 	svcvs	0x00705f6e
 8018381:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 8018385:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8018389:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801838d:	5f6e6f69 	svcpl	0x006e6f69
 8018391:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8018395:	0000625f 	andeq	r6, r0, pc, asr r2
 8018399:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801839d:	6f697463 	svcvs	0x00697463
 80183a1:	6f705f6e 	svcvs	0x00705f6e
 80183a5:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 80183a9:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 80183ad:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 80183b1:	5f6e6f69 	svcpl	0x006e6f69
 80183b5:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 80183b9:	0000645f 	andeq	r6, r0, pc, asr r4
 80183bd:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 80183c1:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 80183c5:	66207961 	strtvs	r7, [r0], -r1, ror #18
 80183c9:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 80183cd:	31485300 	mrscc	r5, (UNDEF: 120)
 80183d1:	00363031 	eorseq	r3, r6, r1, lsr r0
 80183d5:	31445353 	cmpcc	r4, r3, asr r3
 80183d9:	00363033 	eorseq	r3, r6, r3, lsr r0
 80183dd:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 80183e1:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 80183e5:	000a2964 	andeq	r2, sl, r4, ror #18
 80183e9:	aaeeaa40 	bge	7bc2cf1 <__stack_size+0x7bc04f1>
 80183ed:	 	andmi	r0, r0, lr, ror #1

080183f0 <_OledFont8x6>:
 80183f0:	00000040 	andeq	r0, r0, r0, asr #32
 80183f4:	40000000 	andmi	r0, r0, r0
 80183f8:	005f0000 	subseq	r0, pc, r0
 80183fc:	00400000 	subeq	r0, r0, r0
 8018400:	00070007 	andeq	r0, r7, r7
 8018404:	7f144000 	svcvc	0x00144000
 8018408:	00147f14 	andseq	r7, r4, r4, lsl pc
 801840c:	7f2a2440 	svcvc	0x002a2440
 8018410:	4000122a 	andmi	r1, r0, sl, lsr #4
 8018414:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 8018418:	36400062 	strbcc	r0, [r0], -r2, rrx
 801841c:	50205649 	eorpl	r5, r0, r9, asr #12
 8018420:	08004000 	stmdaeq	r0, {lr}
 8018424:	00000307 	andeq	r0, r0, r7, lsl #6
 8018428:	221c0040 	andscs	r0, ip, #64	; 0x40
 801842c:	40000041 	andmi	r0, r0, r1, asr #32
 8018430:	1c224100 	stfnes	f4, [r2], #-0
 8018434:	2a400000 	bcs	901843c <__exidx_end+0xfffc40>
 8018438:	2a1c7f1c 	bcs	87380b0 <__exidx_end+0x71f8b4>
 801843c:	08084000 	stmdaeq	r8, {lr}
 8018440:	0008083e 	andeq	r0, r8, lr, lsr r8
 8018444:	70800040 	addvc	r0, r0, r0, asr #32
 8018448:	40000030 	andmi	r0, r0, r0, lsr r0
 801844c:	08080808 	stmdaeq	r8, {r3, fp}
 8018450:	00400008 	subeq	r0, r0, r8
 8018454:	00606000 	rsbeq	r6, r0, r0
 8018458:	10204000 	eorne	r4, r0, r0
 801845c:	00020408 	andeq	r0, r2, r8, lsl #8
 8018460:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 8018464:	40003e45 	andmi	r3, r0, r5, asr #28
 8018468:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 801846c:	72400000 	subvc	r0, r0, #0
 8018470:	46494949 	strbmi	r4, [r9], -r9, asr #18
 8018474:	41214000 			; <UNDEFINED> instruction: 0x41214000
 8018478:	00334d49 	eorseq	r4, r3, r9, asr #26
 801847c:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 8018480:	4000107f 	andmi	r1, r0, pc, ror r0
 8018484:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 8018488:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 801848c:	3149494a 	cmpcc	r9, sl, asr #18
 8018490:	21414000 	mrscs	r4, (UNDEF: 65)
 8018494:	00070911 	andeq	r0, r7, r1, lsl r9
 8018498:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 801849c:	40003649 	andmi	r3, r0, r9, asr #12
 80184a0:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 80184a4:	0040001e 	subeq	r0, r0, lr, lsl r0
 80184a8:	00001400 	andeq	r1, r0, r0, lsl #8
 80184ac:	40004000 	andmi	r4, r0, r0
 80184b0:	00000034 	andeq	r0, r0, r4, lsr r0
 80184b4:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 80184b8:	40004122 	andmi	r4, r0, r2, lsr #2
 80184bc:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 80184c0:	00400014 	subeq	r0, r0, r4, lsl r0
 80184c4:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 80184c8:	01024000 	mrseq	r4, (UNDEF: 2)
 80184cc:	00060959 	andeq	r0, r6, r9, asr r9
 80184d0:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 80184d4:	40004e59 	andmi	r4, r0, r9, asr lr
 80184d8:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 80184dc:	7f40007c 	svcvc	0x0040007c
 80184e0:	36494949 	strbcc	r4, [r9], -r9, asr #18
 80184e4:	413e4000 	teqmi	lr, r0
 80184e8:	00224141 	eoreq	r4, r2, r1, asr #2
 80184ec:	41417f40 	cmpmi	r1, r0, asr #30
 80184f0:	40003e41 	andmi	r3, r0, r1, asr #28
 80184f4:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 80184f8:	7f400041 	svcvc	0x00400041
 80184fc:	01090909 	tsteq	r9, r9, lsl #18
 8018500:	413e4000 	teqmi	lr, r0
 8018504:	00735141 	rsbseq	r5, r3, r1, asr #2
 8018508:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 801850c:	40007f08 	andmi	r7, r0, r8, lsl #30
 8018510:	417f4100 	cmnmi	pc, r0, lsl #2
 8018514:	20400000 	subcs	r0, r0, r0
 8018518:	013f4140 	teqeq	pc, r0, asr #2
 801851c:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 8018520:	00412214 	subeq	r2, r1, r4, lsl r2
 8018524:	40407f40 	submi	r7, r0, r0, asr #30
 8018528:	40004040 	andmi	r4, r0, r0, asr #32
 801852c:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 8018530:	7f40007f 	svcvc	0x0040007f
 8018534:	7f100804 	svcvc	0x00100804
 8018538:	413e4000 	teqmi	lr, r0
 801853c:	003e4141 	eorseq	r4, lr, r1, asr #2
 8018540:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 8018544:	40000609 	andmi	r0, r0, r9, lsl #12
 8018548:	2151413e 	cmpcs	r1, lr, lsr r1
 801854c:	7f40005e 	svcvc	0x0040005e
 8018550:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 8018554:	49264000 	stmdbmi	r6!, {lr}
 8018558:	00324949 	eorseq	r4, r2, r9, asr #18
 801855c:	7f010340 	svcvc	0x00010340
 8018560:	40000301 	andmi	r0, r0, r1, lsl #6
 8018564:	4040403f 	submi	r4, r0, pc, lsr r0
 8018568:	1f40003f 	svcne	0x0040003f
 801856c:	1f204020 	svcne	0x00204020
 8018570:	403f4000 	eorsmi	r4, pc, r0
 8018574:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 8018578:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 801857c:	40006314 	andmi	r6, r0, r4, lsl r3
 8018580:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 8018584:	61400003 	cmpvs	r0, r3
 8018588:	434d4959 	movtmi	r4, #55641	; 0xd959
 801858c:	7f004000 	svcvc	0x00004000
 8018590:	00414141 	subeq	r4, r1, r1, asr #2
 8018594:	08040240 	stmdaeq	r4, {r6, r9}
 8018598:	40002010 	andmi	r2, r0, r0, lsl r0
 801859c:	41414100 	mrsmi	r4, (UNDEF: 81)
 80185a0:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 80185a4:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 80185a8:	40404000 	submi	r4, r0, r0
 80185ac:	00404040 	subeq	r4, r0, r0, asr #32
 80185b0:	07030040 	streq	r0, [r3, -r0, asr #32]
 80185b4:	40000008 	andmi	r0, r0, r8
 80185b8:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 80185bc:	7f400040 	svcvc	0x00400040
 80185c0:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 80185c4:	44384000 	ldrtmi	r4, [r8], #-0
 80185c8:	00284444 	eoreq	r4, r8, r4, asr #8
 80185cc:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 80185d0:	40007f28 	andmi	r7, r0, r8, lsr #30
 80185d4:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 80185d8:	00400018 	subeq	r0, r0, r8, lsl r0
 80185dc:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 80185e0:	a4184000 	ldrge	r4, [r8], #-0
 80185e4:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 80185e8:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 80185ec:	40007804 	andmi	r7, r0, r4, lsl #16
 80185f0:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 80185f4:	20400000 	subcs	r0, r0, r0
 80185f8:	003d4040 	eorseq	r4, sp, r0, asr #32
 80185fc:	107f4000 	rsbsne	r4, pc, r0
 8018600:	00004428 	andeq	r4, r0, r8, lsr #8
 8018604:	7f410040 	svcvc	0x00410040
 8018608:	40000040 	andmi	r0, r0, r0, asr #32
 801860c:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 8018610:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 8018614:	78040408 	stmdavc	r4, {r3, sl}
 8018618:	44384000 	ldrtmi	r4, [r8], #-0
 801861c:	00384444 	eorseq	r4, r8, r4, asr #8
 8018620:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 8018624:	40001824 	andmi	r1, r0, r4, lsr #16
 8018628:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 801862c:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 8018630:	08040408 	stmdaeq	r4, {r3, sl}
 8018634:	54484000 	strbpl	r4, [r8], #-0
 8018638:	00245454 	eoreq	r5, r4, r4, asr r4
 801863c:	3f040440 	svccc	0x00040440
 8018640:	40002444 	andmi	r2, r0, r4, asr #8
 8018644:	2040403c 	subcs	r4, r0, ip, lsr r0
 8018648:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 801864c:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 8018650:	403c4000 	eorsmi	r4, ip, r0
 8018654:	003c4030 	eorseq	r4, ip, r0, lsr r0
 8018658:	10284440 	eorne	r4, r8, r0, asr #8
 801865c:	40004428 	andmi	r4, r0, r8, lsr #8
 8018660:	9090904c 	addsls	r9, r0, ip, asr #32
 8018664:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 8018668:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 801866c:	08004000 	stmdaeq	r0, {lr}
 8018670:	00004136 	andeq	r4, r0, r6, lsr r1
 8018674:	77000040 	strvc	r0, [r0, -r0, asr #32]
 8018678:	40000000 	andmi	r0, r0, r0
 801867c:	08364100 	ldmdaeq	r6!, {r8, lr}
 8018680:	02400000 	subeq	r0, r0, #0
 8018684:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 8018688:	263c4000 	ldrtcs	r4, [ip], -r0
 801868c:	003c2623 	eorseq	r2, ip, r3, lsr #12

08018690 <oled_128x32_init>:
 8018690:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8018694:	4000d31f 	andmi	sp, r0, pc, lsl r3
 8018698:	0020148d 	eoreq	r1, r0, sp, lsl #9
 801869c:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 80186a0:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 80186a4:	a6a440db 	ssatge	r4, #5, fp, asr #1

080186a8 <oled_128x64_init>:
 80186a8:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 80186ac:	4000d33f 	andmi	sp, r0, pc, lsr r3
 80186b0:	0020148d 	eoreq	r1, r0, sp, lsl #9
 80186b4:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 80186b8:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 80186bc:	a6a440db 	ssatge	r4, #5, fp, asr #1

080186c0 <vtable for Ssd1306>:
	...
 80186c8:	08013031 	stmdaeq	r1, {r0, r4, r5, ip, sp}
 80186cc:	0801305d 	stmdaeq	r1, {r0, r2, r3, r4, r6, ip, sp}
 80186d0:	0801336d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
 80186d4:	080132f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, ip, sp}
 80186d8:	080131c1 	stmdaeq	r1, {r0, r6, r7, r8, ip, sp}
 80186dc:	0801307d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, ip, sp}
 80186e0:	080130a5 	stmdaeq	r1, {r0, r2, r5, r7, ip, sp}
 80186e4:	08013197 	stmdaeq	r1, {r0, r1, r2, r4, r7, r8, ip, sp}
 80186e8:	08013151 	stmdaeq	r1, {r0, r4, r6, r8, ip, sp}
 80186ec:	08013033 	stmdaeq	r1, {r0, r1, r4, r5, ip, sp}
 80186f0:	080131fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, ip, sp}
 80186f4:	08013209 	stmdaeq	r1, {r0, r3, r9, ip, sp}
 80186f8:	08013223 	stmdaeq	r1, {r0, r1, r5, r9, ip, sp}
 80186fc:	08013035 	stmdaeq	r1, {r0, r2, r4, r5, ip, sp}
 8018700:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 8018704:	5b1b006d 	blpl	86d88c0 <__exidx_end+0x6c00c4>
 8018708:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 801870c:	31335b1b 	teqcc	r3, fp, lsl fp
 8018710:	5b1b006d 	blpl	86d88cc <__exidx_end+0x6c00d0>
 8018714:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 8018718:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 801871c:	5b1b006d 	blpl	86d88d8 <__exidx_end+0x6c00dc>
 8018720:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 8018724:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 8018728:	205d732a 	subscs	r7, sp, sl, lsr #6
 801872c:	43207325 			; <UNDEFINED> instruction: 0x43207325
 8018730:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 8018734:	2064656c 	rsbcs	r6, r4, ip, ror #10
 8018738:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 801873c:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 8018740:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 8018744:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 8018748:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 801874c:	203a636f 	eorscs	r6, sl, pc, ror #6
 8018750:	000a7525 	andeq	r7, sl, r5, lsr #10
 8018754:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8018758:	203a636f 	eorscs	r6, sl, pc, ror #6
 801875c:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 8018760:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 8018764:	6b636f6c 	blvs	98f451c <__exidx_end+0x18dbd20>
 8018768:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 801876c:	000a7469 	andeq	r7, sl, r9, ror #8
 8018770:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8018774:	203a636f 	eorscs	r6, sl, pc, ror #6
 8018778:	6f6c4270 	svcvs	0x006c4270
 801877c:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 8018780:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 8018784:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 8018788:	7a697320 	bvc	9a75410 <__exidx_end+0x1a5cc14>
 801878c:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 8018790:	6164202c 	cmnvs	r4, ip, lsr #32
 8018794:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 8018798:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 801879c:	3a656572 	bcc	9971d6c <__exidx_end+0x1959570>
 80187a0:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 80187a4:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80187a8:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 80187ac:	203d2072 	eorscs	r2, sp, r2, ror r0
 80187b0:	202c7025 	eorcs	r7, ip, r5, lsr #32
 80187b4:	6f6c4270 	svcvs	0x006c4270
 80187b8:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 80187bc:	0a702520 	beq	9c21c44 <__exidx_end+0x1c09448>
 80187c0:	00000000 	andeq	r0, r0, r0

080187c4 <days_of_month>:
 80187c4:	0000001f 	andeq	r0, r0, pc, lsl r0
 80187c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 80187cc:	0000001f 	andeq	r0, r0, pc, lsl r0
 80187d0:	0000001e 	andeq	r0, r0, lr, lsl r0
 80187d4:	0000001f 	andeq	r0, r0, pc, lsl r0
 80187d8:	0000001e 	andeq	r0, r0, lr, lsl r0
 80187dc:	0000001f 	andeq	r0, r0, pc, lsl r0
 80187e0:	0000001f 	andeq	r0, r0, pc, lsl r0
 80187e4:	0000001e 	andeq	r0, r0, lr, lsl r0
 80187e8:	0000001f 	andeq	r0, r0, pc, lsl r0
 80187ec:	0000001e 	andeq	r0, r0, lr, lsl r0
 80187f0:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

080187f4 <__exidx_start>:
 80187f4:	7fffd9a4 	svcvc	0x00ffd9a4
 80187f8:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

080187fc <.ARM.attributes>:
 80187fc:	00002e41 	andeq	r2, r0, r1, asr #28
 8018800:	61656100 	cmnvs	r5, r0, lsl #2
 8018804:	01006962 	tsteq	r0, r2, ror #18
 8018808:	00000024 	andeq	r0, r0, r4, lsr #32
 801880c:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 8018810:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 8018814:	0600334d 	streq	r3, [r0], -sp, asr #6
 8018818:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 801881c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 8018820:	17011501 	strne	r1, [r1, -r1, lsl #10]
 8018824:	1a011803 	bne	805e838 <__exidx_end+0x4603c>
 8018828:	Address 0x0000000008018828 is out of bounds.


Disassembly of section .data:

20000000 <DmxConfigUdp::Run()::pCmd>:
20000000:	20000e35 	andcs	r0, r0, r5, lsr lr

20000004 <DmxConfigUdp::s_nHandle>:
20000004:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000008 <s_nDmxTransmitPeriod>:
20000008:	000061a8 	andeq	r6, r0, r8, lsr #3

2000000c <s_nDmxTransmitMabTime>:
2000000c:	0000000c 	andeq	r0, r0, ip

20000010 <s_nDmxTransmitBreakTime>:
20000010:	0000005c 	andeq	r0, r0, ip, asr r0

20000014 <s_multicast_mac>:
20000014:	005e0001 	subseq	r0, lr, r1
20000018:	00000000 	andeq	r0, r0, r0

2000001c <MDNS::s_nHandle>:
2000001c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000020 <next_block>:
20000020:	2003c000 	andcs	ip, r3, r0

20000024 <s_block_bucket>:
20000024:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000034:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000044:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000054:	00000060 	andeq	r0, r0, r0, rrx
	...
20000064:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000074:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000084:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000094:	00000180 	andeq	r0, r0, r0, lsl #3
	...
200000a4:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000b4:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000c4:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000d4:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000f4 <SystemCoreClock>:
200000f4:	07270e00 	streq	r0, [r7, -r0, lsl #28]!

Disassembly of section .bss:

200000f8 <DmxInput::s_nStarted>:
200000f8:	00000000 	andeq	r0, r0, r0

200000fc <guard variable for lightset::Data::Get()::instance>:
200000fc:	00000000 	andeq	r0, r0, r0

20000100 <lightset::Data::Get()::instance>:
	...

20000d08 <ArtNetNode::s_pThis>:
20000d08:	00000000 	andeq	r0, r0, r0

20000d0c <s_ReceivingMask>:
20000d0c:	00000000 	andeq	r0, r0, r0

20000d10 <ip>:
20000d10:	00000000 	andeq	r0, r0, r0

20000d14 <ip>:
20000d14:	00000000 	andeq	r0, r0, r0

20000d18 <E131Bridge::s_pThis>:
20000d18:	00000000 	andeq	r0, r0, r0

20000d1c <s_ReceivingMask>:
20000d1c:	00000000 	andeq	r0, r0, r0

20000d20 <ArtNetRdmController::s_rdmMessage>:
	...

20000e20 <ArtNetRdmController::s_nPorts>:
	...

20000e28 <uuid_cast>:
	...

20000e30 <DmxSend::s_nStarted>:
	...

20000e31 <DmxConfigUdp::s_Buffer>:
	...

20000e44 <s_RxBuffer>:
	...

20001264 <s_TxBuffer>:
	...

2000166c <sv_PortState>:
	...

20001674 <s_nUartsSending>:
20001674:	00000000 	andeq	r0, r0, r0

20001678 <sv_nRxDmxPackets>:
	...

20001698 <Dmx::s_pThis>:
20001698:	00000000 	andeq	r0, r0, r0

2000169c <gv_RdmDataReceiveEnd>:
2000169c:	00000000 	andeq	r0, r0, r0

200016a0 <s_nLastSendMicros>:
	...

200016a8 <s_TransactionNumber>:
200016a8:	00000000 	andeq	r0, r0, r0

200016ac <RemoteConfig::s_pUdpBuffer>:
200016ac:	00000000 	andeq	r0, r0, r0

200016b0 <RemoteConfig::s_RemoteConfigListBin>:
	...

200016d4 <RemoteConfig::s_pThis>:
200016d4:	00000000 	andeq	r0, r0, r0

200016d8 <SpiFlashStore::s_nWaitMillis>:
200016d8:	00000000 	andeq	r0, r0, r0

200016dc <SpiFlashStore::s_SpiFlashData>:
	...

200026dc <SpiFlashStore::s_nStartAddress>:
200026dc:	00000000 	andeq	r0, r0, r0

200026e0 <SpiFlashStore::s_bHaveFlashChip>:
200026e0:	00000000 	andeq	r0, r0, r0

200026e4 <SpiFlashStore::s_nSpiFlashStoreSize>:
200026e4:	00000000 	andeq	r0, r0, r0

200026e8 <SpiFlashStore::s_State>:
200026e8:	00000000 	andeq	r0, r0, r0

200026ec <SpiFlashStore::s_pThis>:
200026ec:	00000000 	andeq	r0, r0, r0

200026f0 <SpiFlashStore::s_bIsNew>:
200026f0:	00000000 	andeq	r0, r0, r0

200026f4 <StoreArtNet::s_pThis>:
200026f4:	00000000 	andeq	r0, r0, r0

200026f8 <StoreDisplayUdf::s_pThis>:
200026f8:	00000000 	andeq	r0, r0, r0

200026fc <StoreDmxSend::s_pThis>:
200026fc:	00000000 	andeq	r0, r0, r0

20002700 <StoreNetwork::s_pThis>:
20002700:	00000000 	andeq	r0, r0, r0

20002704 <StoreRDMDevice::s_pThis>:
20002704:	00000000 	andeq	r0, r0, r0

20002708 <StoreRemoteConfig::s_pThis>:
20002708:	00000000 	andeq	r0, r0, r0

2000270c <FlashRom::s_pThis>:
2000270c:	00000000 	andeq	r0, r0, r0

20002710 <flashrom::s_nAddress>:
20002710:	00000000 	andeq	r0, r0, r0

20002714 <flashrom::s_State>:
20002714:	00000000 	andeq	r0, r0, r0

20002718 <flashrom::s_nPage>:
20002718:	00000000 	andeq	r0, r0, r0

2000271c <flashrom::s_pData>:
2000271c:	00000000 	andeq	r0, r0, r0

20002720 <flashrom::s_isBank0>:
20002720:	00000000 	andeq	r0, r0, r0

20002724 <flashrom::s_nLength>:
20002724:	00000000 	andeq	r0, r0, r0

20002728 <g_ip_info>:
	...

20002734 <g_mac_address>:
20002734:	00000000 	andeq	r0, r0, r0
	...

2000273a <s_is_dhcp>:
	...

2000273c <s_p>:
2000273c:	00000000 	andeq	r0, r0, r0

20002740 <s_ticker>:
20002740:	00000000 	andeq	r0, r0, r0

20002744 <s_mac_address>:
	...

2000274c <s_mac_address_arp_reply>:
	...

20002754 <s_id>:
20002754:	00000000 	andeq	r0, r0, r0

20002758 <s_recv_queue>:
	...

200032c8 <s_tcb>:
	...

2000330c <s_tcp>:
	...

200038f8 <broadcast_mask>:
200038f8:	00000000 	andeq	r0, r0, r0

200038fc <gw_ip>:
200038fc:	00000000 	andeq	r0, r0, r0

20003900 <on_network_mask>:
20003900:	00000000 	andeq	r0, r0, r0

20003904 <s_id>:
20003904:	00000000 	andeq	r0, r0, r0

20003908 <s_ports_allowed>:
	...

20003928 <s_recv_queue>:
	...

200095c8 <s_send_packet>:
	...

20009bb4 <MDNS::s_nRemoteIp>:
20009bb4:	00000000 	andeq	r0, r0, r0

20009bb8 <MDNS::s_nRemotePort>:
20009bb8:	00000000 	andeq	r0, r0, r0

20009bbc <MDNS::s_nMulticastIp>:
20009bbc:	00000000 	andeq	r0, r0, r0

20009bc0 <MDNS::s_AnswerLocalIp>:
	...

20009dc4 <MDNS::s_ServiceRecords>:
	...

20009de4 <MDNS::s_nBytesReceived>:
20009de4:	00000000 	andeq	r0, r0, r0

20009de8 <MDNS::s_ServiceRecordsData>:
	...

20009fec <MDNS::s_pName>:
20009fec:	00000000 	andeq	r0, r0, r0

20009ff0 <MDNS::s_pBuffer>:
20009ff0:	00000000 	andeq	r0, r0, r0

20009ff4 <Network::s_pThis>:
20009ff4:	00000000 	andeq	r0, r0, r0

20009ff8 <NetworkParams::m_tNetworkParams>:
	...

2000a058 <s_arp_announce>:
	...

2000a084 <s_arp_reply>:
	...

2000a0b0 <s_arp_request>:
	...

2000a0dc <s_arp_records>:
	...

2000a25c <s_entry_current>:
2000a25c:	00000000 	andeq	r0, r0, r0

2000a260 <s_dhcp_allocated_gw>:
2000a260:	00000000 	andeq	r0, r0, r0

2000a264 <s_dhcp_allocated_ip>:
2000a264:	00000000 	andeq	r0, r0, r0

2000a268 <s_dhcp_allocated_netmask>:
2000a268:	00000000 	andeq	r0, r0, r0

2000a26c <s_dhcp_message>:
	...

2000a490 <s_dhcp_server_ip>:
2000a490:	00000000 	andeq	r0, r0, r0

2000a494 <s_groups>:
	...

2000a5b4 <s_id>:
2000a5b4:	00000000 	andeq	r0, r0, r0

2000a5b8 <s_joins_allowed_index>:
2000a5b8:	00000000 	andeq	r0, r0, r0

2000a5bc <s_leave>:
	...

2000a5ec <s_multicast_mac>:
	...

2000a5f4 <s_report>:
	...

2000a624 <DisplayUdf::s_pThis>:
2000a624:	00000000 	andeq	r0, r0, r0

2000a628 <PropertiesConfig::s_Config>:
2000a628:	00000000 	andeq	r0, r0, r0

2000a62c <Display::s_pThis>:
2000a62c:	00000000 	andeq	r0, r0, r0

2000a630 <_ClearBuffer>:
	...

2000a6b8 <Ssd1306::s_pThis>:
2000a6b8:	00000000 	andeq	r0, r0, r0

2000a6bc <FirmwareVersion::s_FirmwareVersion>:
	...

2000a6d2 <FirmwareVersion::s_Print>:
	...

2000a714 <FirmwareVersion::s_pThis>:
2000a714:	00000000 	andeq	r0, r0, r0

2000a718 <LedBlink::s_pThis>:
2000a718:	00000000 	andeq	r0, r0, r0

2000a71c <Hardware::s_pThis>:
2000a71c:	00000000 	andeq	r0, r0, r0

2000a720 <outptr>:
2000a720:	00000000 	andeq	r0, r0, r0

2000a724 <last.0>:
2000a724:	00000000 	andeq	r0, r0, r0

2000a728 <s_micros>:
	...

2000a730 <set_timer>:
2000a730:	00000000 	andeq	r0, r0, r0

2000a734 <s_nSysTickMillis>:
2000a734:	00000000 	andeq	r0, r0, r0

2000a738 <enet_init_status>:
2000a738:	00000000 	andeq	r0, r0, r0

2000a73c <s_nAddress>:
2000a73c:	00000000 	andeq	r0, r0, r0

2000a740 <dma_current_ptp_rxdesc>:
2000a740:	00000000 	andeq	r0, r0, r0

2000a744 <dma_current_ptp_txdesc>:
2000a744:	00000000 	andeq	r0, r0, r0

2000a748 <dma_current_rxdesc>:
2000a748:	00000000 	andeq	r0, r0, r0

2000a74c <dma_current_txdesc>:
2000a74c:	00000000 	andeq	r0, r0, r0

2000a750 <enet_initpara>:
	...

2000a78c <rx_buff>:
	...

2000d72c <rxdesc_tab>:
	...

2000d7ac <tx_buff>:
	...

2000e394 <txdesc_tab>:
	...

Disassembly of section .heap:

2003c000 <heap_low>:
	...

Disassembly of section .stack:

2003d800 <_sp-0x2800>:
	...
