
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08007000 <__gVectors>:
 8007000:	20040000 	andcs	r0, r4, r0
 8007004:	080080cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, pc}
 8007008:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 800700c:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007010:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007014:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007018:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
	...
 800702c:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007030:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007034:	00000000 	andeq	r0, r0, r0
 8007038:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 800703c:	08014325 	stmdaeq	r1, {r0, r2, r5, r8, r9, lr}
 8007040:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007044:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007048:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 800704c:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007050:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007054:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007058:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 800705c:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007060:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007064:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007068:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 800706c:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007070:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007074:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007078:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 800707c:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007080:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007084:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007088:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 800708c:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007090:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007094:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007098:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 800709c:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070a0:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070a4:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070a8:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070ac:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070b0:	0800eaa9 	stmdaeq	r0, {r0, r3, r5, r7, r9, fp, sp, lr, pc}
 80070b4:	0800ebd1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, fp, sp, lr, pc}
 80070b8:	0800ec41 	stmdaeq	r0, {r0, r6, sl, fp, sp, lr, pc}
 80070bc:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070c0:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070c4:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070c8:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070cc:	00000000 	andeq	r0, r0, r0
 80070d0:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070d4:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070d8:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070dc:	0800ea91 	stmdaeq	r0, {r0, r4, r7, r9, fp, sp, lr, pc}
 80070e0:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070e4:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070e8:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070ec:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070f0:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070f4:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070f8:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80070fc:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007100:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007104:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007108:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 800710c:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007110:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007114:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007118:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 800711c:	0800ec61 	stmdaeq	r0, {r0, r5, r6, sl, fp, sp, lr, pc}
 8007120:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007124:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007128:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 800712c:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007130:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007134:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007138:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 800713c:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007140:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007144:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007148:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 800714c:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007150:	00000000 	andeq	r0, r0, r0
 8007154:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007158:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 800715c:	0800ea9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, fp, sp, lr, pc}
 8007160:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007164:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
	...
 8007178:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 800717c:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007180:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 8007184:	00000000 	andeq	r0, r0, r0
 8007188:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 800718c:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
	...
 80071a0:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}
 80071a4:	08008111 	stmdaeq	r0, {r0, r4, r8, pc}

Disassembly of section .text:

080071a8 <net_init>:
 80071a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ac:	460c      	mov	r4, r1
 80071ae:	4616      	mov	r6, r2
 80071b0:	9f06      	ldr	r7, [sp, #24]
 80071b2:	4a22      	ldr	r2, [pc, #136]	; (800723c <net_init+0x94>)
 80071b4:	461d      	mov	r5, r3
 80071b6:	1e43      	subs	r3, r0, #1
 80071b8:	3005      	adds	r0, #5
 80071ba:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80071be:	4283      	cmp	r3, r0
 80071c0:	f802 1b01 	strb.w	r1, [r2], #1
 80071c4:	d1f9      	bne.n	80071ba <net_init+0x12>
 80071c6:	4623      	mov	r3, r4
 80071c8:	4a1d      	ldr	r2, [pc, #116]	; (8007240 <net_init+0x98>)
 80071ca:	f104 010c 	add.w	r1, r4, #12
 80071ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80071d2:	428b      	cmp	r3, r1
 80071d4:	f802 0b01 	strb.w	r0, [r2], #1
 80071d8:	d1f9      	bne.n	80071ce <net_init+0x26>
 80071da:	f04f 0800 	mov.w	r8, #0
 80071de:	4918      	ldr	r1, [pc, #96]	; (8007240 <net_init+0x98>)
 80071e0:	4816      	ldr	r0, [pc, #88]	; (800723c <net_init+0x94>)
 80071e2:	f000 f9a7 	bl	8007534 <ip_init>
 80071e6:	4815      	ldr	r0, [pc, #84]	; (800723c <net_init+0x94>)
 80071e8:	f000 f83c 	bl	8007264 <rfc3927_init>
 80071ec:	f887 8000 	strb.w	r8, [r7]
 80071f0:	782b      	ldrb	r3, [r5, #0]
 80071f2:	b163      	cbz	r3, 800720e <net_init+0x66>
 80071f4:	4632      	mov	r2, r6
 80071f6:	4912      	ldr	r1, [pc, #72]	; (8007240 <net_init+0x98>)
 80071f8:	4810      	ldr	r0, [pc, #64]	; (800723c <net_init+0x94>)
 80071fa:	f00a fdbd 	bl	8011d78 <dhcp_client>
 80071fe:	4540      	cmp	r0, r8
 8007200:	da05      	bge.n	800720e <net_init+0x66>
 8007202:	480f      	ldr	r0, [pc, #60]	; (8007240 <net_init+0x98>)
 8007204:	f885 8000 	strb.w	r8, [r5]
 8007208:	f009 f830 	bl	801026c <rfc3927>
 800720c:	7038      	strb	r0, [r7, #0]
 800720e:	490c      	ldr	r1, [pc, #48]	; (8007240 <net_init+0x98>)
 8007210:	480a      	ldr	r0, [pc, #40]	; (800723c <net_init+0x94>)
 8007212:	f000 f883 	bl	800731c <arp_init>
 8007216:	480a      	ldr	r0, [pc, #40]	; (8007240 <net_init+0x98>)
 8007218:	f00a ffce 	bl	80121b8 <ip_set_ip>
 800721c:	f000 f82e 	bl	800727c <tcp_init>
 8007220:	4a07      	ldr	r2, [pc, #28]	; (8007240 <net_init+0x98>)
 8007222:	1e63      	subs	r3, r4, #1
 8007224:	340b      	adds	r4, #11
 8007226:	f812 1b01 	ldrb.w	r1, [r2], #1
 800722a:	f803 1f01 	strb.w	r1, [r3, #1]!
 800722e:	429c      	cmp	r4, r3
 8007230:	d1f9      	bne.n	8007226 <net_init+0x7e>
 8007232:	782a      	ldrb	r2, [r5, #0]
 8007234:	4b03      	ldr	r3, [pc, #12]	; (8007244 <net_init+0x9c>)
 8007236:	701a      	strb	r2, [r3, #0]
 8007238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800723c:	20002cdc 	ldrdcs	r2, [r0], -ip
 8007240:	20002cd0 	ldrdcs	r2, [r0], -r0
 8007244:	20002ce2 	andcs	r2, r0, r2, ror #25

08007248 <net_shutdown>:
 8007248:	b508      	push	{r3, lr}
 800724a:	f000 f97e 	bl	800754a <ip_shutdown>
 800724e:	4b04      	ldr	r3, [pc, #16]	; (8007260 <net_shutdown+0x18>)
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	b11b      	cbz	r3, 800725c <net_shutdown+0x14>
 8007254:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007258:	f00a be96 	b.w	8011f88 <dhcp_client_release>
 800725c:	bd08      	pop	{r3, pc}
 800725e:	bf00      	nop
 8007260:	20002ce2 	andcs	r2, r0, r2, ror #25

08007264 <rfc3927_init>:
 8007264:	4b04      	ldr	r3, [pc, #16]	; (8007278 <rfc3927_init+0x14>)
 8007266:	1d82      	adds	r2, r0, #6
 8007268:	4290      	cmp	r0, r2
 800726a:	d100      	bne.n	800726e <rfc3927_init+0xa>
 800726c:	4770      	bx	lr
 800726e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007272:	f803 1b01 	strb.w	r1, [r3], #1
 8007276:	e7f7      	b.n	8007268 <rfc3927_init+0x4>
 8007278:	20002cec 	andcs	r2, r0, ip, ror #25

0800727c <tcp_init>:
 800727c:	2206      	movs	r2, #6
 800727e:	b513      	push	{r0, r1, r4, lr}
 8007280:	4c0b      	ldr	r4, [pc, #44]	; (80072b0 <tcp_init+0x34>)
 8007282:	490c      	ldr	r1, [pc, #48]	; (80072b4 <tcp_init+0x38>)
 8007284:	18a0      	adds	r0, r4, r2
 8007286:	f009 f84b 	bl	8010320 <memcpy.isra.0>
 800728a:	2308      	movs	r3, #8
 800728c:	2204      	movs	r2, #4
 800728e:	81a3      	strh	r3, [r4, #12]
 8007290:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <tcp_init+0x3c>)
 8007292:	eb0d 0102 	add.w	r1, sp, r2
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f104 001a 	add.w	r0, r4, #26
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	f009 f83f 	bl	8010320 <memcpy.isra.0>
 80072a2:	2345      	movs	r3, #69	; 0x45
 80072a4:	81e3      	strh	r3, [r4, #14]
 80072a6:	4b05      	ldr	r3, [pc, #20]	; (80072bc <tcp_init+0x40>)
 80072a8:	6163      	str	r3, [r4, #20]
 80072aa:	b002      	add	sp, #8
 80072ac:	bd10      	pop	{r4, pc}
 80072ae:	bf00      	nop
 80072b0:	200038b4 			; <UNDEFINED> instruction: 0x200038b4
 80072b4:	20002cdc 	ldrdcs	r2, [r0], -ip
 80072b8:	20002cd0 	ldrdcs	r2, [r0], -r0
 80072bc:	06400040 	strbeq	r0, [r0], -r0, asr #32

080072c0 <udp_init>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	2200      	movs	r2, #0
 80072c4:	2408      	movs	r4, #8
 80072c6:	460e      	mov	r6, r1
 80072c8:	4b0d      	ldr	r3, [pc, #52]	; (8007300 <udp_init+0x40>)
 80072ca:	490e      	ldr	r1, [pc, #56]	; (8007304 <udp_init+0x44>)
 80072cc:	3c01      	subs	r4, #1
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	805a      	strh	r2, [r3, #2]
 80072d2:	f841 2b04 	str.w	r2, [r1], #4
 80072d6:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 80072da:	d1f7      	bne.n	80072cc <udp_init+0xc>
 80072dc:	2206      	movs	r2, #6
 80072de:	4d0a      	ldr	r5, [pc, #40]	; (8007308 <udp_init+0x48>)
 80072e0:	4b0a      	ldr	r3, [pc, #40]	; (800730c <udp_init+0x4c>)
 80072e2:	4601      	mov	r1, r0
 80072e4:	18a8      	adds	r0, r5, r2
 80072e6:	801c      	strh	r4, [r3, #0]
 80072e8:	f009 f99e 	bl	8010628 <memcpy.isra.0>
 80072ec:	4b08      	ldr	r3, [pc, #32]	; (8007310 <udp_init+0x50>)
 80072ee:	4630      	mov	r0, r6
 80072f0:	60eb      	str	r3, [r5, #12]
 80072f2:	4b08      	ldr	r3, [pc, #32]	; (8007314 <udp_init+0x54>)
 80072f4:	616b      	str	r3, [r5, #20]
 80072f6:	f009 f9bf 	bl	8010678 <udp_set_ip>
 80072fa:	852c      	strh	r4, [r5, #40]	; 0x28
 80072fc:	bd70      	pop	{r4, r5, r6, pc}
 80072fe:	bf00      	nop
 8007300:	20003ed0 	ldrdcs	r3, [r0], -r0
 8007304:	20003eb0 			; <UNDEFINED> instruction: 0x20003eb0
 8007308:	20009b70 	andcs	r9, r0, r0, ror fp
 800730c:	20003eac 	andcs	r3, r0, ip, lsr #29
 8007310:	00450008 	subeq	r0, r5, r8
 8007314:	11400040 	cmpne	r0, r0, asr #32

08007318 <udp_shutdown>:
 8007318:	4770      	bx	lr
	...

0800731c <arp_init>:
 800731c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007320:	4604      	mov	r4, r0
 8007322:	460d      	mov	r5, r1
 8007324:	f000 f876 	bl	8007414 <arp_cache_init>
 8007328:	2206      	movs	r2, #6
 800732a:	4621      	mov	r1, r4
 800732c:	482e      	ldr	r0, [pc, #184]	; (80073e8 <arp_init+0xcc>)
 800732e:	682f      	ldr	r7, [r5, #0]
 8007330:	f00a fba4 	bl	8011a7c <memcpy.isra.0>
 8007334:	4b2d      	ldr	r3, [pc, #180]	; (80073ec <arp_init+0xd0>)
 8007336:	2507      	movs	r5, #7
 8007338:	461e      	mov	r6, r3
 800733a:	22ff      	movs	r2, #255	; 0xff
 800733c:	3d01      	subs	r5, #1
 800733e:	d146      	bne.n	80073ce <arp_init+0xb2>
 8007340:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <arp_init+0xd4>)
 8007342:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80073f4 <arp_init+0xd8>
 8007346:	2206      	movs	r2, #6
 8007348:	e9c6 3803 	strd	r3, r8, [r6, #12]
 800734c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007350:	4621      	mov	r1, r4
 8007352:	4829      	ldr	r0, [pc, #164]	; (80073f8 <arp_init+0xdc>)
 8007354:	82b3      	strh	r3, [r6, #20]
 8007356:	f00a fb91 	bl	8011a7c <memcpy.isra.0>
 800735a:	2307      	movs	r3, #7
 800735c:	4a27      	ldr	r2, [pc, #156]	; (80073fc <arp_init+0xe0>)
 800735e:	61f7      	str	r7, [r6, #28]
 8007360:	3b01      	subs	r3, #1
 8007362:	d137      	bne.n	80073d4 <arp_init+0xb8>
 8007364:	2206      	movs	r2, #6
 8007366:	4621      	mov	r1, r4
 8007368:	4825      	ldr	r0, [pc, #148]	; (8007400 <arp_init+0xe4>)
 800736a:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 800736e:	f00a fb85 	bl	8011a7c <memcpy.isra.0>
 8007372:	4a24      	ldr	r2, [pc, #144]	; (8007404 <arp_init+0xe8>)
 8007374:	2306      	movs	r3, #6
 8007376:	4615      	mov	r5, r2
 8007378:	21ff      	movs	r1, #255	; 0xff
 800737a:	3b01      	subs	r3, #1
 800737c:	d22d      	bcs.n	80073da <arp_init+0xbe>
 800737e:	4b1c      	ldr	r3, [pc, #112]	; (80073f0 <arp_init+0xd4>)
 8007380:	2206      	movs	r2, #6
 8007382:	e9c5 3803 	strd	r3, r8, [r5, #12]
 8007386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800738a:	4621      	mov	r1, r4
 800738c:	481e      	ldr	r0, [pc, #120]	; (8007408 <arp_init+0xec>)
 800738e:	82ab      	strh	r3, [r5, #20]
 8007390:	f00a fb74 	bl	8011a7c <memcpy.isra.0>
 8007394:	2307      	movs	r3, #7
 8007396:	2100      	movs	r1, #0
 8007398:	4a1c      	ldr	r2, [pc, #112]	; (800740c <arp_init+0xf0>)
 800739a:	61ef      	str	r7, [r5, #28]
 800739c:	3b01      	subs	r3, #1
 800739e:	d11f      	bne.n	80073e0 <arp_init+0xc4>
 80073a0:	2206      	movs	r2, #6
 80073a2:	4d1b      	ldr	r5, [pc, #108]	; (8007410 <arp_init+0xf4>)
 80073a4:	4621      	mov	r1, r4
 80073a6:	18a8      	adds	r0, r5, r2
 80073a8:	f00a fb68 	bl	8011a7c <memcpy.isra.0>
 80073ac:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <arp_init+0xd4>)
 80073ae:	4621      	mov	r1, r4
 80073b0:	e9c5 3803 	strd	r3, r8, [r5, #12]
 80073b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073b8:	f105 0016 	add.w	r0, r5, #22
 80073bc:	2206      	movs	r2, #6
 80073be:	82ab      	strh	r3, [r5, #20]
 80073c0:	f00a fb5c 	bl	8011a7c <memcpy.isra.0>
 80073c4:	61ef      	str	r7, [r5, #28]
 80073c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073ca:	f00a bb61 	b.w	8011a90 <arp_announce>
 80073ce:	f803 2b01 	strb.w	r2, [r3], #1
 80073d2:	e7b3      	b.n	800733c <arp_init+0x20>
 80073d4:	f802 5b01 	strb.w	r5, [r2], #1
 80073d8:	e7c2      	b.n	8007360 <arp_init+0x44>
 80073da:	f802 1b01 	strb.w	r1, [r2], #1
 80073de:	e7cc      	b.n	800737a <arp_init+0x5e>
 80073e0:	f802 1b01 	strb.w	r1, [r2], #1
 80073e4:	e7da      	b.n	800739c <arp_init+0x80>
 80073e6:	bf00      	nop
 80073e8:	2000a5a6 	andcs	sl, r0, r6, lsr #11
 80073ec:	2000a5a0 	andcs	sl, r0, r0, lsr #11
 80073f0:	01000608 	tsteq	r0, r8, lsl #12
 80073f4:	04060008 	streq	r0, [r6], #-8
 80073f8:	2000a5b6 			; <UNDEFINED> instruction: 0x2000a5b6
 80073fc:	2000a5c0 	andcs	sl, r0, r0, asr #11
 8007400:	2000a5fe 	strdcs	sl, [r0], -lr
 8007404:	2000a5f8 	strdcs	sl, [r0], -r8
 8007408:	2000a60e 	andcs	sl, r0, lr, lsl #12
 800740c:	2000a618 	andcs	sl, r0, r8, lsl r6
 8007410:	2000a5cc 	andcs	sl, r0, ip, asr #11

08007414 <arp_cache_init>:
 8007414:	2300      	movs	r3, #0
 8007416:	4618      	mov	r0, r3
 8007418:	4a09      	ldr	r2, [pc, #36]	; (8007440 <arp_cache_init+0x2c>)
 800741a:	b510      	push	{r4, lr}
 800741c:	8013      	strh	r3, [r2, #0]
 800741e:	4a09      	ldr	r2, [pc, #36]	; (8007444 <arp_cache_init+0x30>)
 8007420:	4611      	mov	r1, r2
 8007422:	f842 0c04 	str.w	r0, [r2, #-4]
 8007426:	1d94      	adds	r4, r2, #6
 8007428:	42a1      	cmp	r1, r4
 800742a:	d105      	bne.n	8007438 <arp_cache_init+0x24>
 800742c:	3303      	adds	r3, #3
 800742e:	2b60      	cmp	r3, #96	; 0x60
 8007430:	f102 020c 	add.w	r2, r2, #12
 8007434:	d1f4      	bne.n	8007420 <arp_cache_init+0xc>
 8007436:	bd10      	pop	{r4, pc}
 8007438:	f801 0b01 	strb.w	r0, [r1], #1
 800743c:	e7f4      	b.n	8007428 <arp_cache_init+0x14>
 800743e:	bf00      	nop
 8007440:	2000a7a4 	andcs	sl, r0, r4, lsr #15
 8007444:	2000a628 	andcs	sl, r0, r8, lsr #12

08007448 <igmp_init>:
 8007448:	2200      	movs	r2, #0
 800744a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800744e:	4605      	mov	r5, r0
 8007450:	4608      	mov	r0, r1
 8007452:	4611      	mov	r1, r2
 8007454:	4b23      	ldr	r3, [pc, #140]	; (80074e4 <igmp_init+0x9c>)
 8007456:	f103 0408 	add.w	r4, r3, #8
 800745a:	42a3      	cmp	r3, r4
 800745c:	d13e      	bne.n	80074dc <igmp_init+0x94>
 800745e:	3201      	adds	r2, #1
 8007460:	2a24      	cmp	r2, #36	; 0x24
 8007462:	d1f8      	bne.n	8007456 <igmp_init+0xe>
 8007464:	2600      	movs	r6, #0
 8007466:	4b20      	ldr	r3, [pc, #128]	; (80074e8 <igmp_init+0xa0>)
 8007468:	4c20      	ldr	r4, [pc, #128]	; (80074ec <igmp_init+0xa4>)
 800746a:	601e      	str	r6, [r3, #0]
 800746c:	4b20      	ldr	r3, [pc, #128]	; (80074f0 <igmp_init+0xa8>)
 800746e:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8007472:	801e      	strh	r6, [r3, #0]
 8007474:	f00a fe00 	bl	8012078 <igmp_set_ip>
 8007478:	2201      	movs	r2, #1
 800747a:	4b1e      	ldr	r3, [pc, #120]	; (80074f4 <igmp_init+0xac>)
 800747c:	4629      	mov	r1, r5
 800747e:	801a      	strh	r2, [r3, #0]
 8007480:	225e      	movs	r2, #94	; 0x5e
 8007482:	709a      	strb	r2, [r3, #2]
 8007484:	2206      	movs	r2, #6
 8007486:	18a0      	adds	r0, r4, r2
 8007488:	f00a fdac 	bl	8011fe4 <memcpy.isra.0>
 800748c:	f240 4394 	movw	r3, #1172	; 0x494
 8007490:	8463      	strh	r3, [r4, #34]	; 0x22
 8007492:	2316      	movs	r3, #22
 8007494:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80074f8 <igmp_init+0xb0>
 8007498:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80074fc <igmp_init+0xb4>
 800749c:	84e3      	strh	r3, [r4, #38]	; 0x26
 800749e:	f8c4 9014 	str.w	r9, [r4, #20]
 80074a2:	4b17      	ldr	r3, [pc, #92]	; (8007500 <igmp_init+0xb8>)
 80074a4:	f8c4 800c 	str.w	r8, [r4, #12]
 80074a8:	8227      	strh	r7, [r4, #16]
 80074aa:	84a6      	strh	r6, [r4, #36]	; 0x24
 80074ac:	4c15      	ldr	r4, [pc, #84]	; (8007504 <igmp_init+0xbc>)
 80074ae:	2206      	movs	r2, #6
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074b6:	18a0      	adds	r0, r4, r2
 80074b8:	80a3      	strh	r3, [r4, #4]
 80074ba:	4629      	mov	r1, r5
 80074bc:	f00a fd92 	bl	8011fe4 <memcpy.isra.0>
 80074c0:	23e0      	movs	r3, #224	; 0xe0
 80074c2:	83e3      	strh	r3, [r4, #30]
 80074c4:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 80074c8:	4a0f      	ldr	r2, [pc, #60]	; (8007508 <igmp_init+0xc0>)
 80074ca:	f8c4 9014 	str.w	r9, [r4, #20]
 80074ce:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80074d2:	f8c4 800c 	str.w	r8, [r4, #12]
 80074d6:	8227      	strh	r7, [r4, #16]
 80074d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074dc:	f803 1b01 	strb.w	r1, [r3], #1
 80074e0:	e7bb      	b.n	800745a <igmp_init+0x12>
 80074e2:	bf00      	nop
 80074e4:	2000a9dc 	ldrdcs	sl, [r0], -ip
 80074e8:	2000ab00 	andcs	sl, r0, r0, lsl #22
 80074ec:	2000ab3c 	andcs	sl, r0, ip, lsr fp
 80074f0:	2000aafc 	strdcs	sl, [r0], -ip
 80074f4:	2000ab34 	andcs	sl, r0, r4, lsr fp
 80074f8:	02010040 	andeq	r0, r1, #64	; 0x40
 80074fc:	00460008 	subeq	r0, r6, r8
 8007500:	005e0001 	subseq	r0, lr, r1
 8007504:	2000ab04 	andcs	sl, r0, r4, lsl #22
 8007508:	04940200 	ldreq	r0, [r4], #512	; 0x200

0800750c <igmp_shutdown>:
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	2500      	movs	r5, #0
 8007510:	462e      	mov	r6, r5
 8007512:	4c07      	ldr	r4, [pc, #28]	; (8007530 <igmp_shutdown+0x24>)
 8007514:	6820      	ldr	r0, [r4, #0]
 8007516:	b120      	cbz	r0, 8007522 <igmp_shutdown+0x16>
 8007518:	f00a fe0a 	bl	8012130 <igmp_leave>
 800751c:	6026      	str	r6, [r4, #0]
 800751e:	7166      	strb	r6, [r4, #5]
 8007520:	7126      	strb	r6, [r4, #4]
 8007522:	3501      	adds	r5, #1
 8007524:	2d24      	cmp	r5, #36	; 0x24
 8007526:	f104 0408 	add.w	r4, r4, #8
 800752a:	d1f3      	bne.n	8007514 <igmp_shutdown+0x8>
 800752c:	bd70      	pop	{r4, r5, r6, pc}
 800752e:	bf00      	nop
 8007530:	2000a9dc 	ldrdcs	sl, [r0], -ip

08007534 <ip_init>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4604      	mov	r4, r0
 8007538:	460d      	mov	r5, r1
 800753a:	f7ff fec1 	bl	80072c0 <udp_init>
 800753e:	4629      	mov	r1, r5
 8007540:	4620      	mov	r0, r4
 8007542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007546:	f7ff bf7f 	b.w	8007448 <igmp_init>

0800754a <ip_shutdown>:
 800754a:	b508      	push	{r3, lr}
 800754c:	f7ff ffde 	bl	800750c <igmp_shutdown>
 8007550:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007554:	f7ff bee0 	b.w	8007318 <udp_shutdown>

08007558 <console_init>:
 8007558:	b508      	push	{r3, lr}
 800755a:	f00c fe85 	bl	8014268 <uart0_init>
 800755e:	4804      	ldr	r0, [pc, #16]	; (8007570 <console_init+0x18>)
 8007560:	f00c feb2 	bl	80142c8 <uart0_puts>
 8007564:	4803      	ldr	r0, [pc, #12]	; (8007574 <console_init+0x1c>)
 8007566:	f00c feaf 	bl	80142c8 <uart0_puts>
 800756a:	2000      	movs	r0, #0
 800756c:	bd08      	pop	{r3, pc}
 800756e:	bf00      	nop
 8007570:	08016555 	stmdaeq	r1, {r0, r2, r4, r6, r8, sl, sp, lr}
 8007574:	08018778 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, sl, pc}

08007578 <net_handle>:
 8007578:	b510      	push	{r4, lr}
 800757a:	4c0c      	ldr	r4, [pc, #48]	; (80075ac <net_handle+0x34>)
 800757c:	4620      	mov	r0, r4
 800757e:	f00d fccb 	bl	8014f18 <emac_eth_recv>
 8007582:	2800      	cmp	r0, #0
 8007584:	dd07      	ble.n	8007596 <net_handle+0x1e>
 8007586:	6820      	ldr	r0, [r4, #0]
 8007588:	8983      	ldrh	r3, [r0, #12]
 800758a:	2b08      	cmp	r3, #8
 800758c:	d107      	bne.n	800759e <net_handle+0x26>
 800758e:	f000 fa6f 	bl	8007a70 <ip_handle>
 8007592:	f00d fcd5 	bl	8014f40 <emac_free_pkt>
 8007596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800759a:	f008 be57 	b.w	801024c <net_timers_run>
 800759e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80075a2:	d1f6      	bne.n	8007592 <net_handle+0x1a>
 80075a4:	f000 fa08 	bl	80079b8 <arp_handle>
 80075a8:	e7f3      	b.n	8007592 <net_handle+0x1a>
 80075aa:	bf00      	nop
 80075ac:	20002ce4 	andcs	r2, r0, r4, ror #25

080075b0 <tcp_handle>:
 80075b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075b4:	4605      	mov	r5, r0
 80075b6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80075b8:	f8b0 8010 	ldrh.w	r8, [r0, #16]
 80075bc:	ba5b      	rev16	r3, r3
 80075be:	8443      	strh	r3, [r0, #34]	; 0x22
 80075c0:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80075c2:	f890 902e 	ldrb.w	r9, [r0, #46]	; 0x2e
 80075c6:	ba5b      	rev16	r3, r3
 80075c8:	8483      	strh	r3, [r0, #36]	; 0x24
 80075ca:	f008 feb3 	bl	8010334 <_bswap32>
 80075ce:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 80075d0:	4ca5      	ldr	r4, [pc, #660]	; (8007868 <tcp_handle+0x2b8>)
 80075d2:	ba5b      	rev16	r3, r3
 80075d4:	862b      	strh	r3, [r5, #48]	; 0x30
 80075d6:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 80075d8:	8822      	ldrh	r2, [r4, #0]
 80075da:	ba5b      	rev16	r3, r3
 80075dc:	86ab      	strh	r3, [r5, #52]	; 0x34
 80075de:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d14d      	bne.n	8007680 <tcp_handle+0xd0>
 80075e4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d00d      	beq.n	8007608 <tcp_handle+0x58>
 80075ec:	2204      	movs	r2, #4
 80075ee:	4668      	mov	r0, sp
 80075f0:	f105 011a 	add.w	r1, r5, #26
 80075f4:	f008 fe94 	bl	8010320 <memcpy.isra.0>
 80075f8:	8862      	ldrh	r2, [r4, #2]
 80075fa:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d13f      	bne.n	8007680 <tcp_handle+0xd0>
 8007600:	6862      	ldr	r2, [r4, #4]
 8007602:	9b00      	ldr	r3, [sp, #0]
 8007604:	429a      	cmp	r2, r3
 8007606:	d13b      	bne.n	8007680 <tcp_handle+0xd0>
 8007608:	2204      	movs	r2, #4
 800760a:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 800760e:	eb0d 0002 	add.w	r0, sp, r2
 8007612:	f008 fe85 	bl	8010320 <memcpy.isra.0>
 8007616:	2204      	movs	r2, #4
 8007618:	f105 0126 	add.w	r1, r5, #38	; 0x26
 800761c:	eb0d 0002 	add.w	r0, sp, r2
 8007620:	9e01      	ldr	r6, [sp, #4]
 8007622:	f008 fe7d 	bl	8010320 <memcpy.isra.0>
 8007626:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800762a:	9f01      	ldr	r7, [sp, #4]
 800762c:	2a01      	cmp	r2, #1
 800762e:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 8007632:	d01b      	beq.n	800766c <tcp_handle+0xbc>
 8007634:	1ed3      	subs	r3, r2, #3
 8007636:	2b07      	cmp	r3, #7
 8007638:	d822      	bhi.n	8007680 <tcp_handle+0xd0>
 800763a:	fa98 f198 	rev16.w	r1, r8
 800763e:	f64f 78ec 	movw	r8, #65516	; 0xffec
 8007642:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8007646:	eba8 0883 	sub.w	r8, r8, r3, lsl #2
 800764a:	4488      	add	r8, r1
 800764c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800764e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 8007652:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8007656:	fa1f f888 	uxth.w	r8, r8
 800765a:	2900      	cmp	r1, #0
 800765c:	d142      	bne.n	80076e4 <tcp_handle+0x134>
 800765e:	f1b8 0f00 	cmp.w	r8, #0
 8007662:	d16b      	bne.n	800773c <tcp_handle+0x18c>
 8007664:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007666:	42bb      	cmp	r3, r7
 8007668:	d168      	bne.n	800773c <tcp_handle+0x18c>
 800766a:	e048      	b.n	80076fe <tcp_handle+0x14e>
 800766c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007670:	075a      	lsls	r2, r3, #29
 8007672:	d405      	bmi.n	8007680 <tcp_handle+0xd0>
 8007674:	06d8      	lsls	r0, r3, #27
 8007676:	d506      	bpl.n	8007686 <tcp_handle+0xd6>
 8007678:	4628      	mov	r0, r5
 800767a:	497b      	ldr	r1, [pc, #492]	; (8007868 <tcp_handle+0x2b8>)
 800767c:	f008 ff26 	bl	80104cc <_send_reset>
 8007680:	b004      	add	sp, #16
 8007682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007686:	0799      	lsls	r1, r3, #30
 8007688:	d5fa      	bpl.n	8007680 <tcp_handle+0xd0>
 800768a:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 800768e:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8007692:	4668      	mov	r0, sp
 8007694:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007698:	f105 011a 	add.w	r1, r5, #26
 800769c:	2204      	movs	r2, #4
 800769e:	8063      	strh	r3, [r4, #2]
 80076a0:	f008 fe3e 	bl	8010320 <memcpy.isra.0>
 80076a4:	2206      	movs	r2, #6
 80076a6:	9b00      	ldr	r3, [sp, #0]
 80076a8:	18a9      	adds	r1, r5, r2
 80076aa:	4870      	ldr	r0, [pc, #448]	; (800786c <tcp_handle+0x2bc>)
 80076ac:	6063      	str	r3, [r4, #4]
 80076ae:	f008 fe37 	bl	8010320 <memcpy.isra.0>
 80076b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80076b4:	1c7b      	adds	r3, r7, #1
 80076b6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80076ba:	6363      	str	r3, [r4, #52]	; 0x34
 80076bc:	2312      	movs	r3, #18
 80076be:	486a      	ldr	r0, [pc, #424]	; (8007868 <tcp_handle+0x2b8>)
 80076c0:	a901      	add	r1, sp, #4
 80076c2:	f88d 300c 	strb.w	r3, [sp, #12]
 80076c6:	e9c4 7608 	strd	r7, r6, [r4, #32]
 80076ca:	63e7      	str	r7, [r4, #60]	; 0x3c
 80076cc:	f8c4 a018 	str.w	sl, [r4, #24]
 80076d0:	f008 fe56 	bl	8010380 <_tcp_send_package>
 80076d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	e9c4 3204 	strd	r3, r2, [r4, #16]
 80076dc:	2303      	movs	r3, #3
 80076de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80076e2:	e7cd      	b.n	8007680 <tcp_handle+0xd0>
 80076e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076e6:	eba3 0c07 	sub.w	ip, r3, r7
 80076ea:	f1b8 0f00 	cmp.w	r8, #0
 80076ee:	d10d      	bne.n	800770c <tcp_handle+0x15c>
 80076f0:	f1bc 0f00 	cmp.w	ip, #0
 80076f4:	dc22      	bgt.n	800773c <tcp_handle+0x18c>
 80076f6:	1afb      	subs	r3, r7, r3
 80076f8:	1a5b      	subs	r3, r3, r1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	da1e      	bge.n	800773c <tcp_handle+0x18c>
 80076fe:	0743      	lsls	r3, r0, #29
 8007700:	d530      	bpl.n	8007764 <tcp_handle+0x1b4>
 8007702:	8821      	ldrh	r1, [r4, #0]
 8007704:	4858      	ldr	r0, [pc, #352]	; (8007868 <tcp_handle+0x2b8>)
 8007706:	f008 fdf1 	bl	80102ec <_init_tcb>
 800770a:	e7b9      	b.n	8007680 <tcp_handle+0xd0>
 800770c:	f1bc 0f00 	cmp.w	ip, #0
 8007710:	dc06      	bgt.n	8007720 <tcp_handle+0x170>
 8007712:	eba7 0c03 	sub.w	ip, r7, r3
 8007716:	ebac 0c01 	sub.w	ip, ip, r1
 800771a:	f1bc 0f00 	cmp.w	ip, #0
 800771e:	dbee      	blt.n	80076fe <tcp_handle+0x14e>
 8007720:	eb08 0c07 	add.w	ip, r8, r7
 8007724:	f103 0e01 	add.w	lr, r3, #1
 8007728:	ebae 0e0c 	sub.w	lr, lr, ip
 800772c:	f1be 0f00 	cmp.w	lr, #0
 8007730:	dc04      	bgt.n	800773c <tcp_handle+0x18c>
 8007732:	43db      	mvns	r3, r3
 8007734:	1a5b      	subs	r3, r3, r1
 8007736:	eb13 0f0c 	cmn.w	r3, ip
 800773a:	d4e0      	bmi.n	80076fe <tcp_handle+0x14e>
 800773c:	0742      	lsls	r2, r0, #29
 800773e:	d505      	bpl.n	800774c <tcp_handle+0x19c>
 8007740:	8821      	ldrh	r1, [r4, #0]
 8007742:	4849      	ldr	r0, [pc, #292]	; (8007868 <tcp_handle+0x2b8>)
 8007744:	f008 fdd2 	bl	80102ec <_init_tcb>
 8007748:	2301      	movs	r3, #1
 800774a:	e7c8      	b.n	80076de <tcp_handle+0x12e>
 800774c:	6963      	ldr	r3, [r4, #20]
 800774e:	9301      	str	r3, [sp, #4]
 8007750:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007752:	9302      	str	r3, [sp, #8]
 8007754:	2310      	movs	r3, #16
 8007756:	4844      	ldr	r0, [pc, #272]	; (8007868 <tcp_handle+0x2b8>)
 8007758:	a901      	add	r1, sp, #4
 800775a:	f88d 300c 	strb.w	r3, [sp, #12]
 800775e:	f008 fe0f 	bl	8010380 <_tcp_send_package>
 8007762:	e78d      	b.n	8007680 <tcp_handle+0xd0>
 8007764:	0781      	lsls	r1, r0, #30
 8007766:	d505      	bpl.n	8007774 <tcp_handle+0x1c4>
 8007768:	2a03      	cmp	r2, #3
 800776a:	d0ed      	beq.n	8007748 <tcp_handle+0x198>
 800776c:	4628      	mov	r0, r5
 800776e:	493e      	ldr	r1, [pc, #248]	; (8007868 <tcp_handle+0x2b8>)
 8007770:	f008 feac 	bl	80104cc <_send_reset>
 8007774:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007778:	06da      	lsls	r2, r3, #27
 800777a:	d581      	bpl.n	8007680 <tcp_handle+0xd0>
 800777c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007780:	3b03      	subs	r3, #3
 8007782:	2b07      	cmp	r3, #7
 8007784:	d818      	bhi.n	80077b8 <tcp_handle+0x208>
 8007786:	e8df f003 	tbb	[pc, r3]
 800778a:	75757504 	ldrbvc	r7, [r5, #-1284]!	; 0xfffffafc
 800778e:	a59c7575 	ldrge	r7, [ip, #1397]	; 0x575
 8007792:	6923      	ldr	r3, [r4, #16]
 8007794:	1b9b      	subs	r3, r3, r6
 8007796:	2b00      	cmp	r3, #0
 8007798:	dc0a      	bgt.n	80077b0 <tcp_handle+0x200>
 800779a:	6963      	ldr	r3, [r4, #20]
 800779c:	1af3      	subs	r3, r6, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	dc06      	bgt.n	80077b0 <tcp_handle+0x200>
 80077a2:	2304      	movs	r3, #4
 80077a4:	e9c4 7608 	strd	r7, r6, [r4, #32]
 80077a8:	f8c4 a018 	str.w	sl, [r4, #24]
 80077ac:	6126      	str	r6, [r4, #16]
 80077ae:	e796      	b.n	80076de <tcp_handle+0x12e>
 80077b0:	4628      	mov	r0, r5
 80077b2:	492d      	ldr	r1, [pc, #180]	; (8007868 <tcp_handle+0x2b8>)
 80077b4:	f008 fe8a 	bl	80104cc <_send_reset>
 80077b8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80077bc:	3b04      	subs	r3, #4
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d830      	bhi.n	8007824 <tcp_handle+0x274>
 80077c2:	f1b8 0f00 	cmp.w	r8, #0
 80077c6:	d02d      	beq.n	8007824 <tcp_handle+0x274>
 80077c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077ca:	42bb      	cmp	r3, r7
 80077cc:	f040 8091 	bne.w	80078f2 <tcp_handle+0x342>
 80077d0:	f240 53b6 	movw	r3, #1462	; 0x5b6
 80077d4:	f8df a098 	ldr.w	sl, [pc, #152]	; 8007870 <tcp_handle+0x2c0>
 80077d8:	f105 0122 	add.w	r1, r5, #34	; 0x22
 80077dc:	f8ba 7000 	ldrh.w	r7, [sl]
 80077e0:	4642      	mov	r2, r8
 80077e2:	435f      	muls	r7, r3
 80077e4:	1d38      	adds	r0, r7, #4
 80077e6:	4449      	add	r1, r9
 80077e8:	4450      	add	r0, sl
 80077ea:	f008 fd99 	bl	8010320 <memcpy.isra.0>
 80077ee:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80077f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077f2:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 80077f6:	8722      	strh	r2, [r4, #56]	; 0x38
 80077f8:	6962      	ldr	r2, [r4, #20]
 80077fa:	4443      	add	r3, r8
 80077fc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007800:	6363      	str	r3, [r4, #52]	; 0x34
 8007802:	2310      	movs	r3, #16
 8007804:	4457      	add	r7, sl
 8007806:	4818      	ldr	r0, [pc, #96]	; (8007868 <tcp_handle+0x2b8>)
 8007808:	f8a7 85b8 	strh.w	r8, [r7, #1464]	; 0x5b8
 800780c:	a901      	add	r1, sp, #4
 800780e:	f88d 300c 	strb.w	r3, [sp, #12]
 8007812:	f008 fdb5 	bl	8010380 <_tcp_send_package>
 8007816:	f8ba 3000 	ldrh.w	r3, [sl]
 800781a:	3301      	adds	r3, #1
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	f8aa 3000 	strh.w	r3, [sl]
 8007824:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007828:	2b02      	cmp	r3, #2
 800782a:	f67f af29 	bls.w	8007680 <tcp_handle+0xd0>
 800782e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007832:	07db      	lsls	r3, r3, #31
 8007834:	f57f af24 	bpl.w	8007680 <tcp_handle+0xd0>
 8007838:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800783a:	6962      	ldr	r2, [r4, #20]
 800783c:	3301      	adds	r3, #1
 800783e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007842:	6363      	str	r3, [r4, #52]	; 0x34
 8007844:	2310      	movs	r3, #16
 8007846:	4808      	ldr	r0, [pc, #32]	; (8007868 <tcp_handle+0x2b8>)
 8007848:	a901      	add	r1, sp, #4
 800784a:	f88d 300c 	strb.w	r3, [sp, #12]
 800784e:	f008 fd97 	bl	8010380 <_tcp_send_package>
 8007852:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007856:	2b05      	cmp	r3, #5
 8007858:	d053      	beq.n	8007902 <tcp_handle+0x352>
 800785a:	d84d      	bhi.n	80078f8 <tcp_handle+0x348>
 800785c:	3b03      	subs	r3, #3
 800785e:	2b01      	cmp	r3, #1
 8007860:	f63f af0e 	bhi.w	8007680 <tcp_handle+0xd0>
 8007864:	2307      	movs	r3, #7
 8007866:	e73a      	b.n	80076de <tcp_handle+0x12e>
 8007868:	20003870 	andcs	r3, r0, r0, ror r8
 800786c:	20003878 	andcs	r3, r0, r8, ror r8
 8007870:	20002d00 	andcs	r2, r0, r0, lsl #26
 8007874:	6923      	ldr	r3, [r4, #16]
 8007876:	1b99      	subs	r1, r3, r6
 8007878:	d513      	bpl.n	80078a2 <tcp_handle+0x2f2>
 800787a:	6962      	ldr	r2, [r4, #20]
 800787c:	1ab2      	subs	r2, r6, r2
 800787e:	2a00      	cmp	r2, #0
 8007880:	dc0f      	bgt.n	80078a2 <tcp_handle+0x2f2>
 8007882:	6126      	str	r6, [r4, #16]
 8007884:	6a23      	ldr	r3, [r4, #32]
 8007886:	1bda      	subs	r2, r3, r7
 8007888:	2a00      	cmp	r2, #0
 800788a:	db05      	blt.n	8007898 <tcp_handle+0x2e8>
 800788c:	42bb      	cmp	r3, r7
 800788e:	d193      	bne.n	80077b8 <tcp_handle+0x208>
 8007890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007892:	1b9b      	subs	r3, r3, r6
 8007894:	2b00      	cmp	r3, #0
 8007896:	dc8f      	bgt.n	80077b8 <tcp_handle+0x208>
 8007898:	e9c4 7608 	strd	r7, r6, [r4, #32]
 800789c:	f8c4 a018 	str.w	sl, [r4, #24]
 80078a0:	e78a      	b.n	80077b8 <tcp_handle+0x208>
 80078a2:	1af3      	subs	r3, r6, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	dc06      	bgt.n	80078b6 <tcp_handle+0x306>
 80078a8:	2900      	cmp	r1, #0
 80078aa:	dc85      	bgt.n	80077b8 <tcp_handle+0x208>
 80078ac:	6963      	ldr	r3, [r4, #20]
 80078ae:	1af3      	subs	r3, r6, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	dc81      	bgt.n	80077b8 <tcp_handle+0x208>
 80078b4:	e7e6      	b.n	8007884 <tcp_handle+0x2d4>
 80078b6:	6963      	ldr	r3, [r4, #20]
 80078b8:	1b9a      	subs	r2, r3, r6
 80078ba:	2a00      	cmp	r2, #0
 80078bc:	f6bf af7c 	bge.w	80077b8 <tcp_handle+0x208>
 80078c0:	e745      	b.n	800774e <tcp_handle+0x19e>
 80078c2:	6963      	ldr	r3, [r4, #20]
 80078c4:	42b3      	cmp	r3, r6
 80078c6:	f47f af77 	bne.w	80077b8 <tcp_handle+0x208>
 80078ca:	8821      	ldrh	r1, [r4, #0]
 80078cc:	480f      	ldr	r0, [pc, #60]	; (800790c <tcp_handle+0x35c>)
 80078ce:	f008 fd0d 	bl	80102ec <_init_tcb>
 80078d2:	e771      	b.n	80077b8 <tcp_handle+0x208>
 80078d4:	6963      	ldr	r3, [r4, #20]
 80078d6:	42b3      	cmp	r3, r6
 80078d8:	f47f af6e 	bne.w	80077b8 <tcp_handle+0x208>
 80078dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078de:	480b      	ldr	r0, [pc, #44]	; (800790c <tcp_handle+0x35c>)
 80078e0:	9302      	str	r3, [sp, #8]
 80078e2:	2310      	movs	r3, #16
 80078e4:	a901      	add	r1, sp, #4
 80078e6:	9601      	str	r6, [sp, #4]
 80078e8:	f88d 300c 	strb.w	r3, [sp, #12]
 80078ec:	f008 fd48 	bl	8010380 <_tcp_send_package>
 80078f0:	e762      	b.n	80077b8 <tcp_handle+0x208>
 80078f2:	6962      	ldr	r2, [r4, #20]
 80078f4:	9201      	str	r2, [sp, #4]
 80078f6:	e72c      	b.n	8007752 <tcp_handle+0x1a2>
 80078f8:	2b06      	cmp	r3, #6
 80078fa:	f47f aec1 	bne.w	8007680 <tcp_handle+0xd0>
 80078fe:	230a      	movs	r3, #10
 8007900:	e6ed      	b.n	80076de <tcp_handle+0x12e>
 8007902:	6963      	ldr	r3, [r4, #20]
 8007904:	42b3      	cmp	r3, r6
 8007906:	d0fa      	beq.n	80078fe <tcp_handle+0x34e>
 8007908:	2308      	movs	r3, #8
 800790a:	e6e8      	b.n	80076de <tcp_handle+0x12e>
 800790c:	20003870 	andcs	r3, r0, r0, ror r8

08007910 <udp_handle>:
 8007910:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007914:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8007916:	4607      	mov	r7, r0
 8007918:	ba5b      	rev16	r3, r3
 800791a:	b29b      	uxth	r3, r3
 800791c:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 8007920:	2a01      	cmp	r2, #1
 8007922:	d904      	bls.n	800792e <udp_handle+0x1e>
 8007924:	2b7b      	cmp	r3, #123	; 0x7b
 8007926:	d002      	beq.n	800792e <udp_handle+0x1e>
 8007928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800792c:	d308      	bcc.n	8007940 <udp_handle+0x30>
 800792e:	2400      	movs	r4, #0
 8007930:	4a1f      	ldr	r2, [pc, #124]	; (80079b0 <udp_handle+0xa0>)
 8007932:	f852 1b04 	ldr.w	r1, [r2], #4
 8007936:	4299      	cmp	r1, r3
 8007938:	d005      	beq.n	8007946 <udp_handle+0x36>
 800793a:	3401      	adds	r4, #1
 800793c:	2c08      	cmp	r4, #8
 800793e:	d1f8      	bne.n	8007932 <udp_handle+0x22>
 8007940:	b002      	add	sp, #8
 8007942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007946:	f640 3394 	movw	r3, #2964	; 0xb94
 800794a:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 800794c:	435c      	muls	r4, r3
 800794e:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 8007952:	ba76      	rev16	r6, r6
 8007954:	3e08      	subs	r6, #8
 8007956:	b2b6      	uxth	r6, r6
 8007958:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 800795c:	bf28      	it	cs
 800795e:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 8007962:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80079b4 <udp_handle+0xa4>
 8007966:	1d20      	adds	r0, r4, #4
 8007968:	f838 5004 	ldrh.w	r5, [r8, r4]
 800796c:	4632      	mov	r2, r6
 800796e:	435d      	muls	r5, r3
 8007970:	4428      	add	r0, r5
 8007972:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 8007976:	4440      	add	r0, r8
 8007978:	f008 fe56 	bl	8010628 <memcpy.isra.0>
 800797c:	2204      	movs	r2, #4
 800797e:	f107 011a 	add.w	r1, r7, #26
 8007982:	eb0d 0002 	add.w	r0, sp, r2
 8007986:	f008 fe4f 	bl	8010628 <memcpy.isra.0>
 800798a:	9a01      	ldr	r2, [sp, #4]
 800798c:	192b      	adds	r3, r5, r4
 800798e:	4443      	add	r3, r8
 8007990:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 8007994:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007996:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 800799a:	ba52      	rev16	r2, r2
 800799c:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 80079a0:	f838 3004 	ldrh.w	r3, [r8, r4]
 80079a4:	3301      	adds	r3, #1
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	f828 3004 	strh.w	r3, [r8, r4]
 80079ae:	e7c7      	b.n	8007940 <udp_handle+0x30>
 80079b0:	20003eb0 			; <UNDEFINED> instruction: 0x20003eb0
 80079b4:	20003ed0 	ldrdcs	r3, [r0], -r0

080079b8 <arp_handle>:
 80079b8:	8a83      	ldrh	r3, [r0, #20]
 80079ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079be:	d003      	beq.n	80079c8 <arp_handle+0x10>
 80079c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c4:	d002      	beq.n	80079cc <arp_handle+0x14>
 80079c6:	4770      	bx	lr
 80079c8:	f00a b86c 	b.w	8011aa4 <arp_handle_request>
 80079cc:	f00a b892 	b.w	8011af4 <arp_handle_reply>

080079d0 <igmp_handle>:
 80079d0:	7b83      	ldrb	r3, [r0, #14]
 80079d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079d6:	2b45      	cmp	r3, #69	; 0x45
 80079d8:	d116      	bne.n	8007a08 <igmp_handle+0x38>
 80079da:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80079de:	2b11      	cmp	r3, #17
 80079e0:	d112      	bne.n	8007a08 <igmp_handle+0x38>
 80079e2:	4b20      	ldr	r3, [pc, #128]	; (8007a64 <igmp_handle+0x94>)
 80079e4:	f100 051d 	add.w	r5, r0, #29
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	466a      	mov	r2, sp
 80079ec:	462b      	mov	r3, r5
 80079ee:	f100 0621 	add.w	r6, r0, #33	; 0x21
 80079f2:	42b3      	cmp	r3, r6
 80079f4:	d10b      	bne.n	8007a0e <igmp_handle+0x3e>
 80079f6:	2401      	movs	r4, #1
 80079f8:	2100      	movs	r1, #0
 80079fa:	f04f 0c01 	mov.w	ip, #1
 80079fe:	4b1a      	ldr	r3, [pc, #104]	; (8007a68 <igmp_handle+0x98>)
 8007a00:	4a1a      	ldr	r2, [pc, #104]	; (8007a6c <igmp_handle+0x9c>)
 8007a02:	681f      	ldr	r7, [r3, #0]
 8007a04:	428f      	cmp	r7, r1
 8007a06:	d10a      	bne.n	8007a1e <igmp_handle+0x4e>
 8007a08:	b003      	add	sp, #12
 8007a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a0e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007a12:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8007a16:	428c      	cmp	r4, r1
 8007a18:	d0eb      	beq.n	80079f2 <igmp_handle+0x22>
 8007a1a:	2400      	movs	r4, #0
 8007a1c:	e7ec      	b.n	80079f8 <igmp_handle+0x28>
 8007a1e:	6813      	ldr	r3, [r2, #0]
 8007a20:	9301      	str	r3, [sp, #4]
 8007a22:	b924      	cbnz	r4, 8007a2e <igmp_handle+0x5e>
 8007a24:	462b      	mov	r3, r5
 8007a26:	f10d 0e04 	add.w	lr, sp, #4
 8007a2a:	42b3      	cmp	r3, r6
 8007a2c:	d10e      	bne.n	8007a4c <igmp_handle+0x7c>
 8007a2e:	f892 e005 	ldrb.w	lr, [r2, #5]
 8007a32:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8007a36:	f1be 0f01 	cmp.w	lr, #1
 8007a3a:	d110      	bne.n	8007a5e <igmp_handle+0x8e>
 8007a3c:	f892 e004 	ldrb.w	lr, [r2, #4]
 8007a40:	459e      	cmp	lr, r3
 8007a42:	d909      	bls.n	8007a58 <igmp_handle+0x88>
 8007a44:	085b      	lsrs	r3, r3, #1
 8007a46:	3301      	adds	r3, #1
 8007a48:	7113      	strb	r3, [r2, #4]
 8007a4a:	e005      	b.n	8007a58 <igmp_handle+0x88>
 8007a4c:	f81e 8b01 	ldrb.w	r8, [lr], #1
 8007a50:	f813 9f01 	ldrb.w	r9, [r3, #1]!
 8007a54:	45c1      	cmp	r9, r8
 8007a56:	d0e8      	beq.n	8007a2a <igmp_handle+0x5a>
 8007a58:	3101      	adds	r1, #1
 8007a5a:	3208      	adds	r2, #8
 8007a5c:	e7d2      	b.n	8007a04 <igmp_handle+0x34>
 8007a5e:	f882 c005 	strb.w	ip, [r2, #5]
 8007a62:	e7ef      	b.n	8007a44 <igmp_handle+0x74>
 8007a64:	010000e0 	smlatteq	r0, r0, r0, r0
 8007a68:	2000ab00 	andcs	sl, r0, r0, lsl #22
 8007a6c:	2000a9dc 	ldrdcs	sl, [r0], -ip

08007a70 <ip_handle>:
 8007a70:	7b82      	ldrb	r2, [r0, #14]
 8007a72:	7dc3      	ldrb	r3, [r0, #23]
 8007a74:	2a45      	cmp	r2, #69	; 0x45
 8007a76:	d003      	beq.n	8007a80 <ip_handle+0x10>
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d111      	bne.n	8007aa0 <ip_handle+0x30>
 8007a7c:	f7ff bfa8 	b.w	80079d0 <igmp_handle>
 8007a80:	2b06      	cmp	r3, #6
 8007a82:	d00b      	beq.n	8007a9c <ip_handle+0x2c>
 8007a84:	d804      	bhi.n	8007a90 <ip_handle+0x20>
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d006      	beq.n	8007a98 <ip_handle+0x28>
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d0f6      	beq.n	8007a7c <ip_handle+0xc>
 8007a8e:	4770      	bx	lr
 8007a90:	2b11      	cmp	r3, #17
 8007a92:	d105      	bne.n	8007aa0 <ip_handle+0x30>
 8007a94:	f7ff bf3c 	b.w	8007910 <udp_handle>
 8007a98:	f000 b804 	b.w	8007aa4 <icmp_handle>
 8007a9c:	f7ff bd88 	b.w	80075b0 <tcp_handle>
 8007aa0:	4770      	bx	lr
	...

08007aa4 <icmp_handle>:
 8007aa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007aa6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007aaa:	4604      	mov	r4, r0
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d13e      	bne.n	8007b2e <icmp_handle+0x8a>
 8007ab0:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8007ab4:	2d00      	cmp	r5, #0
 8007ab6:	d13a      	bne.n	8007b2e <icmp_handle+0x8a>
 8007ab8:	1d86      	adds	r6, r0, #6
 8007aba:	4631      	mov	r1, r6
 8007abc:	2206      	movs	r2, #6
 8007abe:	f00a fb9d 	bl	80121fc <memcpy.isra.0>
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	2206      	movs	r2, #6
 8007ac6:	491b      	ldr	r1, [pc, #108]	; (8007b34 <icmp_handle+0x90>)
 8007ac8:	f00a fb98 	bl	80121fc <memcpy.isra.0>
 8007acc:	8a63      	ldrh	r3, [r4, #18]
 8007ace:	f104 061a 	add.w	r6, r4, #26
 8007ad2:	43db      	mvns	r3, r3
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	2204      	movs	r2, #4
 8007ad8:	8263      	strh	r3, [r4, #18]
 8007ada:	f104 001e 	add.w	r0, r4, #30
 8007ade:	f00a fb8d 	bl	80121fc <memcpy.isra.0>
 8007ae2:	2204      	movs	r2, #4
 8007ae4:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <icmp_handle+0x94>)
 8007ae6:	eb0d 0102 	add.w	r1, sp, r2
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4630      	mov	r0, r6
 8007aee:	f104 060e 	add.w	r6, r4, #14
 8007af2:	9301      	str	r3, [sp, #4]
 8007af4:	f00a fb82 	bl	80121fc <memcpy.isra.0>
 8007af8:	2114      	movs	r1, #20
 8007afa:	4630      	mov	r0, r6
 8007afc:	7625      	strb	r5, [r4, #24]
 8007afe:	7665      	strb	r5, [r4, #25]
 8007b00:	f00a fb63 	bl	80121ca <net_chksum>
 8007b04:	8a21      	ldrh	r1, [r4, #16]
 8007b06:	8320      	strh	r0, [r4, #24]
 8007b08:	ba49      	rev16	r1, r1
 8007b0a:	b289      	uxth	r1, r1
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8007b12:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8007b16:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8007b1a:	f00a fb56 	bl	80121ca <net_chksum>
 8007b1e:	8a21      	ldrh	r1, [r4, #16]
 8007b20:	84a0      	strh	r0, [r4, #36]	; 0x24
 8007b22:	ba49      	rev16	r1, r1
 8007b24:	b289      	uxth	r1, r1
 8007b26:	4620      	mov	r0, r4
 8007b28:	310e      	adds	r1, #14
 8007b2a:	f00d fa0d 	bl	8014f48 <emac_eth_send>
 8007b2e:	b002      	add	sp, #8
 8007b30:	bd70      	pop	{r4, r5, r6, pc}
 8007b32:	bf00      	nop
 8007b34:	20002cdc 	ldrdcs	r2, [r0], -ip
 8007b38:	20002cd0 	ldrdcs	r2, [r0], -r0

08007b3c <__aeabi_fmul>:
 8007b3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007b40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8007b44:	bf1e      	ittt	ne
 8007b46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8007b4a:	ea92 0f0c 	teqne	r2, ip
 8007b4e:	ea93 0f0c 	teqne	r3, ip
 8007b52:	d06f      	beq.n	8007c34 <__aeabi_fmul+0xf8>
 8007b54:	441a      	add	r2, r3
 8007b56:	ea80 0c01 	eor.w	ip, r0, r1
 8007b5a:	0240      	lsls	r0, r0, #9
 8007b5c:	bf18      	it	ne
 8007b5e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8007b62:	d01e      	beq.n	8007ba2 <__aeabi_fmul+0x66>
 8007b64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b68:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8007b6c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8007b70:	fba0 3101 	umull	r3, r1, r0, r1
 8007b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8007b78:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8007b7c:	bf3e      	ittt	cc
 8007b7e:	0049      	lslcc	r1, r1, #1
 8007b80:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8007b84:	005b      	lslcc	r3, r3, #1
 8007b86:	ea40 0001 	orr.w	r0, r0, r1
 8007b8a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8007b8e:	2afd      	cmp	r2, #253	; 0xfd
 8007b90:	d81d      	bhi.n	8007bce <__aeabi_fmul+0x92>
 8007b92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007b9a:	bf08      	it	eq
 8007b9c:	f020 0001 	biceq.w	r0, r0, #1
 8007ba0:	4770      	bx	lr
 8007ba2:	f090 0f00 	teq	r0, #0
 8007ba6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8007baa:	bf08      	it	eq
 8007bac:	0249      	lsleq	r1, r1, #9
 8007bae:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8007bb2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8007bb6:	3a7f      	subs	r2, #127	; 0x7f
 8007bb8:	bfc2      	ittt	gt
 8007bba:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8007bbe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8007bc2:	4770      	bxgt	lr
 8007bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007bc8:	f04f 0300 	mov.w	r3, #0
 8007bcc:	3a01      	subs	r2, #1
 8007bce:	dc5d      	bgt.n	8007c8c <__aeabi_fmul+0x150>
 8007bd0:	f112 0f19 	cmn.w	r2, #25
 8007bd4:	bfdc      	itt	le
 8007bd6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8007bda:	4770      	bxle	lr
 8007bdc:	f1c2 0200 	rsb	r2, r2, #0
 8007be0:	0041      	lsls	r1, r0, #1
 8007be2:	fa21 f102 	lsr.w	r1, r1, r2
 8007be6:	f1c2 0220 	rsb	r2, r2, #32
 8007bea:	fa00 fc02 	lsl.w	ip, r0, r2
 8007bee:	ea5f 0031 	movs.w	r0, r1, rrx
 8007bf2:	f140 0000 	adc.w	r0, r0, #0
 8007bf6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8007bfa:	bf08      	it	eq
 8007bfc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8007c00:	4770      	bx	lr
 8007c02:	f092 0f00 	teq	r2, #0
 8007c06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8007c0a:	bf02      	ittt	eq
 8007c0c:	0040      	lsleq	r0, r0, #1
 8007c0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8007c12:	3a01      	subeq	r2, #1
 8007c14:	d0f9      	beq.n	8007c0a <__aeabi_fmul+0xce>
 8007c16:	ea40 000c 	orr.w	r0, r0, ip
 8007c1a:	f093 0f00 	teq	r3, #0
 8007c1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007c22:	bf02      	ittt	eq
 8007c24:	0049      	lsleq	r1, r1, #1
 8007c26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8007c2a:	3b01      	subeq	r3, #1
 8007c2c:	d0f9      	beq.n	8007c22 <__aeabi_fmul+0xe6>
 8007c2e:	ea41 010c 	orr.w	r1, r1, ip
 8007c32:	e78f      	b.n	8007b54 <__aeabi_fmul+0x18>
 8007c34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8007c38:	ea92 0f0c 	teq	r2, ip
 8007c3c:	bf18      	it	ne
 8007c3e:	ea93 0f0c 	teqne	r3, ip
 8007c42:	d00a      	beq.n	8007c5a <__aeabi_fmul+0x11e>
 8007c44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8007c48:	bf18      	it	ne
 8007c4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8007c4e:	d1d8      	bne.n	8007c02 <__aeabi_fmul+0xc6>
 8007c50:	ea80 0001 	eor.w	r0, r0, r1
 8007c54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007c58:	4770      	bx	lr
 8007c5a:	f090 0f00 	teq	r0, #0
 8007c5e:	bf17      	itett	ne
 8007c60:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8007c64:	4608      	moveq	r0, r1
 8007c66:	f091 0f00 	teqne	r1, #0
 8007c6a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8007c6e:	d014      	beq.n	8007c9a <__aeabi_fmul+0x15e>
 8007c70:	ea92 0f0c 	teq	r2, ip
 8007c74:	d101      	bne.n	8007c7a <__aeabi_fmul+0x13e>
 8007c76:	0242      	lsls	r2, r0, #9
 8007c78:	d10f      	bne.n	8007c9a <__aeabi_fmul+0x15e>
 8007c7a:	ea93 0f0c 	teq	r3, ip
 8007c7e:	d103      	bne.n	8007c88 <__aeabi_fmul+0x14c>
 8007c80:	024b      	lsls	r3, r1, #9
 8007c82:	bf18      	it	ne
 8007c84:	4608      	movne	r0, r1
 8007c86:	d108      	bne.n	8007c9a <__aeabi_fmul+0x15e>
 8007c88:	ea80 0001 	eor.w	r0, r0, r1
 8007c8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007c98:	4770      	bx	lr
 8007c9a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007c9e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8007ca2:	4770      	bx	lr

08007ca4 <__aeabi_d2f>:
 8007ca4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007ca8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8007cac:	bf24      	itt	cs
 8007cae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8007cb2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8007cb6:	d90d      	bls.n	8007cd4 <__aeabi_d2f+0x30>
 8007cb8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007cbc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007cc0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007cc4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007cc8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8007ccc:	bf08      	it	eq
 8007cce:	f020 0001 	biceq.w	r0, r0, #1
 8007cd2:	4770      	bx	lr
 8007cd4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007cd8:	d121      	bne.n	8007d1e <__aeabi_d2f+0x7a>
 8007cda:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8007cde:	bfbc      	itt	lt
 8007ce0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8007ce4:	4770      	bxlt	lr
 8007ce6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007cea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8007cee:	f1c2 0218 	rsb	r2, r2, #24
 8007cf2:	f1c2 0c20 	rsb	ip, r2, #32
 8007cf6:	fa10 f30c 	lsls.w	r3, r0, ip
 8007cfa:	fa20 f002 	lsr.w	r0, r0, r2
 8007cfe:	bf18      	it	ne
 8007d00:	f040 0001 	orrne.w	r0, r0, #1
 8007d04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007d08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8007d0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8007d10:	ea40 000c 	orr.w	r0, r0, ip
 8007d14:	fa23 f302 	lsr.w	r3, r3, r2
 8007d18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007d1c:	e7cc      	b.n	8007cb8 <__aeabi_d2f+0x14>
 8007d1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8007d22:	d107      	bne.n	8007d34 <__aeabi_d2f+0x90>
 8007d24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8007d28:	bf1e      	ittt	ne
 8007d2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8007d2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8007d32:	4770      	bxne	lr
 8007d34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8007d38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007d3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop

08007d44 <__aeabi_frsub>:
 8007d44:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8007d48:	e002      	b.n	8007d50 <__addsf3>
 8007d4a:	bf00      	nop

08007d4c <__aeabi_fsub>:
 8007d4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08007d50 <__addsf3>:
 8007d50:	0042      	lsls	r2, r0, #1
 8007d52:	bf1f      	itttt	ne
 8007d54:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8007d58:	ea92 0f03 	teqne	r2, r3
 8007d5c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8007d60:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007d64:	d06a      	beq.n	8007e3c <__addsf3+0xec>
 8007d66:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8007d6a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8007d6e:	bfc1      	itttt	gt
 8007d70:	18d2      	addgt	r2, r2, r3
 8007d72:	4041      	eorgt	r1, r0
 8007d74:	4048      	eorgt	r0, r1
 8007d76:	4041      	eorgt	r1, r0
 8007d78:	bfb8      	it	lt
 8007d7a:	425b      	neglt	r3, r3
 8007d7c:	2b19      	cmp	r3, #25
 8007d7e:	bf88      	it	hi
 8007d80:	4770      	bxhi	lr
 8007d82:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007d8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8007d8e:	bf18      	it	ne
 8007d90:	4240      	negne	r0, r0
 8007d92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007d96:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007d9a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007d9e:	bf18      	it	ne
 8007da0:	4249      	negne	r1, r1
 8007da2:	ea92 0f03 	teq	r2, r3
 8007da6:	d03f      	beq.n	8007e28 <__addsf3+0xd8>
 8007da8:	f1a2 0201 	sub.w	r2, r2, #1
 8007dac:	fa41 fc03 	asr.w	ip, r1, r3
 8007db0:	eb10 000c 	adds.w	r0, r0, ip
 8007db4:	f1c3 0320 	rsb	r3, r3, #32
 8007db8:	fa01 f103 	lsl.w	r1, r1, r3
 8007dbc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007dc0:	d502      	bpl.n	8007dc8 <__addsf3+0x78>
 8007dc2:	4249      	negs	r1, r1
 8007dc4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8007dc8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007dcc:	d313      	bcc.n	8007df6 <__addsf3+0xa6>
 8007dce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007dd2:	d306      	bcc.n	8007de2 <__addsf3+0x92>
 8007dd4:	0840      	lsrs	r0, r0, #1
 8007dd6:	ea4f 0131 	mov.w	r1, r1, rrx
 8007dda:	f102 0201 	add.w	r2, r2, #1
 8007dde:	2afe      	cmp	r2, #254	; 0xfe
 8007de0:	d251      	bcs.n	8007e86 <__addsf3+0x136>
 8007de2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8007de6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007dea:	bf08      	it	eq
 8007dec:	f020 0001 	biceq.w	r0, r0, #1
 8007df0:	ea40 0003 	orr.w	r0, r0, r3
 8007df4:	4770      	bx	lr
 8007df6:	0049      	lsls	r1, r1, #1
 8007df8:	eb40 0000 	adc.w	r0, r0, r0
 8007dfc:	3a01      	subs	r2, #1
 8007dfe:	bf28      	it	cs
 8007e00:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8007e04:	d2ed      	bcs.n	8007de2 <__addsf3+0x92>
 8007e06:	fab0 fc80 	clz	ip, r0
 8007e0a:	f1ac 0c08 	sub.w	ip, ip, #8
 8007e0e:	ebb2 020c 	subs.w	r2, r2, ip
 8007e12:	fa00 f00c 	lsl.w	r0, r0, ip
 8007e16:	bfaa      	itet	ge
 8007e18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8007e1c:	4252      	neglt	r2, r2
 8007e1e:	4318      	orrge	r0, r3
 8007e20:	bfbc      	itt	lt
 8007e22:	40d0      	lsrlt	r0, r2
 8007e24:	4318      	orrlt	r0, r3
 8007e26:	4770      	bx	lr
 8007e28:	f092 0f00 	teq	r2, #0
 8007e2c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8007e30:	bf06      	itte	eq
 8007e32:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8007e36:	3201      	addeq	r2, #1
 8007e38:	3b01      	subne	r3, #1
 8007e3a:	e7b5      	b.n	8007da8 <__addsf3+0x58>
 8007e3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007e40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007e44:	bf18      	it	ne
 8007e46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007e4a:	d021      	beq.n	8007e90 <__addsf3+0x140>
 8007e4c:	ea92 0f03 	teq	r2, r3
 8007e50:	d004      	beq.n	8007e5c <__addsf3+0x10c>
 8007e52:	f092 0f00 	teq	r2, #0
 8007e56:	bf08      	it	eq
 8007e58:	4608      	moveq	r0, r1
 8007e5a:	4770      	bx	lr
 8007e5c:	ea90 0f01 	teq	r0, r1
 8007e60:	bf1c      	itt	ne
 8007e62:	2000      	movne	r0, #0
 8007e64:	4770      	bxne	lr
 8007e66:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8007e6a:	d104      	bne.n	8007e76 <__addsf3+0x126>
 8007e6c:	0040      	lsls	r0, r0, #1
 8007e6e:	bf28      	it	cs
 8007e70:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8007e74:	4770      	bx	lr
 8007e76:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8007e7a:	bf3c      	itt	cc
 8007e7c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8007e80:	4770      	bxcc	lr
 8007e82:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007e86:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8007e8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007e8e:	4770      	bx	lr
 8007e90:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8007e94:	bf16      	itet	ne
 8007e96:	4608      	movne	r0, r1
 8007e98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8007e9c:	4601      	movne	r1, r0
 8007e9e:	0242      	lsls	r2, r0, #9
 8007ea0:	bf06      	itte	eq
 8007ea2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8007ea6:	ea90 0f01 	teqeq	r0, r1
 8007eaa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8007eae:	4770      	bx	lr

08007eb0 <__aeabi_ui2f>:
 8007eb0:	f04f 0300 	mov.w	r3, #0
 8007eb4:	e004      	b.n	8007ec0 <__aeabi_i2f+0x8>
 8007eb6:	bf00      	nop

08007eb8 <__aeabi_i2f>:
 8007eb8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8007ebc:	bf48      	it	mi
 8007ebe:	4240      	negmi	r0, r0
 8007ec0:	ea5f 0c00 	movs.w	ip, r0
 8007ec4:	bf08      	it	eq
 8007ec6:	4770      	bxeq	lr
 8007ec8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8007ecc:	4601      	mov	r1, r0
 8007ece:	f04f 0000 	mov.w	r0, #0
 8007ed2:	e01c      	b.n	8007f0e <__aeabi_l2f+0x2a>

08007ed4 <__aeabi_ul2f>:
 8007ed4:	ea50 0201 	orrs.w	r2, r0, r1
 8007ed8:	bf08      	it	eq
 8007eda:	4770      	bxeq	lr
 8007edc:	f04f 0300 	mov.w	r3, #0
 8007ee0:	e00a      	b.n	8007ef8 <__aeabi_l2f+0x14>
 8007ee2:	bf00      	nop

08007ee4 <__aeabi_l2f>:
 8007ee4:	ea50 0201 	orrs.w	r2, r0, r1
 8007ee8:	bf08      	it	eq
 8007eea:	4770      	bxeq	lr
 8007eec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8007ef0:	d502      	bpl.n	8007ef8 <__aeabi_l2f+0x14>
 8007ef2:	4240      	negs	r0, r0
 8007ef4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007ef8:	ea5f 0c01 	movs.w	ip, r1
 8007efc:	bf02      	ittt	eq
 8007efe:	4684      	moveq	ip, r0
 8007f00:	4601      	moveq	r1, r0
 8007f02:	2000      	moveq	r0, #0
 8007f04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8007f08:	bf08      	it	eq
 8007f0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8007f0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8007f12:	fabc f28c 	clz	r2, ip
 8007f16:	3a08      	subs	r2, #8
 8007f18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8007f1c:	db10      	blt.n	8007f40 <__aeabi_l2f+0x5c>
 8007f1e:	fa01 fc02 	lsl.w	ip, r1, r2
 8007f22:	4463      	add	r3, ip
 8007f24:	fa00 fc02 	lsl.w	ip, r0, r2
 8007f28:	f1c2 0220 	rsb	r2, r2, #32
 8007f2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007f30:	fa20 f202 	lsr.w	r2, r0, r2
 8007f34:	eb43 0002 	adc.w	r0, r3, r2
 8007f38:	bf08      	it	eq
 8007f3a:	f020 0001 	biceq.w	r0, r0, #1
 8007f3e:	4770      	bx	lr
 8007f40:	f102 0220 	add.w	r2, r2, #32
 8007f44:	fa01 fc02 	lsl.w	ip, r1, r2
 8007f48:	f1c2 0220 	rsb	r2, r2, #32
 8007f4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8007f50:	fa21 f202 	lsr.w	r2, r1, r2
 8007f54:	eb43 0002 	adc.w	r0, r3, r2
 8007f58:	bf08      	it	eq
 8007f5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8007f5e:	4770      	bx	lr

08007f60 <__gesf2>:
 8007f60:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007f64:	e006      	b.n	8007f74 <__cmpsf2+0x4>
 8007f66:	bf00      	nop

08007f68 <__lesf2>:
 8007f68:	f04f 0c01 	mov.w	ip, #1
 8007f6c:	e002      	b.n	8007f74 <__cmpsf2+0x4>
 8007f6e:	bf00      	nop

08007f70 <__cmpsf2>:
 8007f70:	f04f 0c01 	mov.w	ip, #1
 8007f74:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007f78:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007f7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007f80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007f84:	bf18      	it	ne
 8007f86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007f8a:	d011      	beq.n	8007fb0 <__cmpsf2+0x40>
 8007f8c:	b001      	add	sp, #4
 8007f8e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8007f92:	bf18      	it	ne
 8007f94:	ea90 0f01 	teqne	r0, r1
 8007f98:	bf58      	it	pl
 8007f9a:	ebb2 0003 	subspl.w	r0, r2, r3
 8007f9e:	bf88      	it	hi
 8007fa0:	17c8      	asrhi	r0, r1, #31
 8007fa2:	bf38      	it	cc
 8007fa4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8007fa8:	bf18      	it	ne
 8007faa:	f040 0001 	orrne.w	r0, r0, #1
 8007fae:	4770      	bx	lr
 8007fb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007fb4:	d102      	bne.n	8007fbc <__cmpsf2+0x4c>
 8007fb6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8007fba:	d105      	bne.n	8007fc8 <__cmpsf2+0x58>
 8007fbc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8007fc0:	d1e4      	bne.n	8007f8c <__cmpsf2+0x1c>
 8007fc2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8007fc6:	d0e1      	beq.n	8007f8c <__cmpsf2+0x1c>
 8007fc8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop

08007fd0 <__aeabi_cfrcmple>:
 8007fd0:	4684      	mov	ip, r0
 8007fd2:	4608      	mov	r0, r1
 8007fd4:	4661      	mov	r1, ip
 8007fd6:	e7ff      	b.n	8007fd8 <__aeabi_cfcmpeq>

08007fd8 <__aeabi_cfcmpeq>:
 8007fd8:	b50f      	push	{r0, r1, r2, r3, lr}
 8007fda:	f7ff ffc9 	bl	8007f70 <__cmpsf2>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	bf48      	it	mi
 8007fe2:	f110 0f00 	cmnmi.w	r0, #0
 8007fe6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08007fe8 <__aeabi_fcmpeq>:
 8007fe8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007fec:	f7ff fff4 	bl	8007fd8 <__aeabi_cfcmpeq>
 8007ff0:	bf0c      	ite	eq
 8007ff2:	2001      	moveq	r0, #1
 8007ff4:	2000      	movne	r0, #0
 8007ff6:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ffa:	bf00      	nop

08007ffc <__aeabi_fcmplt>:
 8007ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008000:	f7ff ffea 	bl	8007fd8 <__aeabi_cfcmpeq>
 8008004:	bf34      	ite	cc
 8008006:	2001      	movcc	r0, #1
 8008008:	2000      	movcs	r0, #0
 800800a:	f85d fb08 	ldr.w	pc, [sp], #8
 800800e:	bf00      	nop

08008010 <__aeabi_fcmple>:
 8008010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008014:	f7ff ffe0 	bl	8007fd8 <__aeabi_cfcmpeq>
 8008018:	bf94      	ite	ls
 800801a:	2001      	movls	r0, #1
 800801c:	2000      	movhi	r0, #0
 800801e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008022:	bf00      	nop

08008024 <__aeabi_fcmpge>:
 8008024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008028:	f7ff ffd2 	bl	8007fd0 <__aeabi_cfrcmple>
 800802c:	bf94      	ite	ls
 800802e:	2001      	movls	r0, #1
 8008030:	2000      	movhi	r0, #0
 8008032:	f85d fb08 	ldr.w	pc, [sp], #8
 8008036:	bf00      	nop

08008038 <__aeabi_fcmpgt>:
 8008038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800803c:	f7ff ffc8 	bl	8007fd0 <__aeabi_cfrcmple>
 8008040:	bf34      	ite	cc
 8008042:	2001      	movcc	r0, #1
 8008044:	2000      	movcs	r0, #0
 8008046:	f85d fb08 	ldr.w	pc, [sp], #8
 800804a:	bf00      	nop

0800804c <__aeabi_f2iz>:
 800804c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8008050:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8008054:	d30f      	bcc.n	8008076 <__aeabi_f2iz+0x2a>
 8008056:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800805a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800805e:	d90d      	bls.n	800807c <__aeabi_f2iz+0x30>
 8008060:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8008064:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008068:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800806c:	fa23 f002 	lsr.w	r0, r3, r2
 8008070:	bf18      	it	ne
 8008072:	4240      	negne	r0, r0
 8008074:	4770      	bx	lr
 8008076:	f04f 0000 	mov.w	r0, #0
 800807a:	4770      	bx	lr
 800807c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8008080:	d101      	bne.n	8008086 <__aeabi_f2iz+0x3a>
 8008082:	0242      	lsls	r2, r0, #9
 8008084:	d105      	bne.n	8008092 <__aeabi_f2iz+0x46>
 8008086:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800808a:	bf08      	it	eq
 800808c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008090:	4770      	bx	lr
 8008092:	f04f 0000 	mov.w	r0, #0
 8008096:	4770      	bx	lr

08008098 <__aeabi_uldivmod>:
 8008098:	b953      	cbnz	r3, 80080b0 <__aeabi_uldivmod+0x18>
 800809a:	b94a      	cbnz	r2, 80080b0 <__aeabi_uldivmod+0x18>
 800809c:	2900      	cmp	r1, #0
 800809e:	bf08      	it	eq
 80080a0:	2800      	cmpeq	r0, #0
 80080a2:	bf1c      	itt	ne
 80080a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80080a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80080ac:	f000 b80c 	b.w	80080c8 <__aeabi_idiv0>
 80080b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80080b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80080b8:	f00e f8b4 	bl	8016224 <__udivmoddi4>
 80080bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80080c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080c4:	b004      	add	sp, #16
 80080c6:	4770      	bx	lr

080080c8 <__aeabi_idiv0>:
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop

080080cc <Reset_Handler>:
 80080cc:	2100      	movs	r1, #0
 80080ce:	e003      	b.n	80080d8 <DataInit>

080080d0 <CopyData>:
 80080d0:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <Zerobss+0x10>)
 80080d2:	585b      	ldr	r3, [r3, r1]
 80080d4:	5043      	str	r3, [r0, r1]
 80080d6:	3104      	adds	r1, #4

080080d8 <DataInit>:
 80080d8:	4809      	ldr	r0, [pc, #36]	; (8008100 <Zerobss+0x14>)
 80080da:	4b0a      	ldr	r3, [pc, #40]	; (8008104 <Zerobss+0x18>)
 80080dc:	1842      	adds	r2, r0, r1
 80080de:	429a      	cmp	r2, r3
 80080e0:	d3f6      	bcc.n	80080d0 <CopyData>
 80080e2:	4a09      	ldr	r2, [pc, #36]	; (8008108 <Zerobss+0x1c>)
 80080e4:	e002      	b.n	80080ec <Zerobss>

080080e6 <FillZerobss>:
 80080e6:	2300      	movs	r3, #0
 80080e8:	f842 3b04 	str.w	r3, [r2], #4

080080ec <Zerobss>:
 80080ec:	4b07      	ldr	r3, [pc, #28]	; (800810c <Zerobss+0x20>)
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d3f9      	bcc.n	80080e6 <FillZerobss>
 80080f2:	f00c f91f 	bl	8014334 <SystemInit>
 80080f6:	f000 f975 	bl	80083e4 <main>
 80080fa:	4770      	bx	lr
 80080fc:	08018874 	stmdaeq	r1, {r2, r4, r5, r6, fp, pc}
 8008100:	20000000 	andcs	r0, r0, r0
 8008104:	200000f4 	strdcs	r0, [r0], -r4
 8008108:	200000f8 	strdcs	r0, [r0], -r8
 800810c:	2000e8f8 	strdcs	lr, [r0], -r8

08008110 <ADC0_1_IRQHandler>:
 8008110:	e7fe      	b.n	8008110 <ADC0_1_IRQHandler>

08008112 <memcmp>:
 8008112:	b510      	push	{r4, lr}
 8008114:	3901      	subs	r1, #1
 8008116:	4402      	add	r2, r0
 8008118:	4290      	cmp	r0, r2
 800811a:	d101      	bne.n	8008120 <memcmp+0xe>
 800811c:	2000      	movs	r0, #0
 800811e:	e005      	b.n	800812c <memcmp+0x1a>
 8008120:	7803      	ldrb	r3, [r0, #0]
 8008122:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008126:	42a3      	cmp	r3, r4
 8008128:	d001      	beq.n	800812e <memcmp+0x1c>
 800812a:	1b18      	subs	r0, r3, r4
 800812c:	bd10      	pop	{r4, pc}
 800812e:	3001      	adds	r0, #1
 8008130:	e7f2      	b.n	8008118 <memcmp+0x6>

08008132 <DisplayHandler::~DisplayHandler()>:
 8008132:	4770      	bx	lr

08008134 <DisplayUdfHandler::~DisplayUdfHandler()>:
 8008134:	4770      	bx	lr

08008136 <DisplayUdfHandler::ShowLongName(char const*)>:
 8008136:	4770      	bx	lr

08008138 <DisplayUdfHandler::ShowRdmEnabled(unsigned int, bool)>:
 8008138:	4770      	bx	lr

0800813a <DisplayUdfHandler::ShowFailSafe(unsigned char)>:
 800813a:	4770      	bx	lr

0800813c <dmxconfigudp::atoi(char const*, unsigned int)>:
 800813c:	4603      	mov	r3, r0
 800813e:	b530      	push	{r4, r5, lr}
 8008140:	4401      	add	r1, r0
 8008142:	250a      	movs	r5, #10
 8008144:	2000      	movs	r0, #0
 8008146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800814a:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 800814e:	2c09      	cmp	r4, #9
 8008150:	d805      	bhi.n	800815e <dmxconfigudp::atoi(char const*, unsigned int)+0x22>
 8008152:	fb05 2000 	mla	r0, r5, r0, r2
 8008156:	4299      	cmp	r1, r3
 8008158:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
 800815c:	d1f3      	bne.n	8008146 <dmxconfigudp::atoi(char const*, unsigned int)+0xa>
 800815e:	bd30      	pop	{r4, r5, pc}

08008160 <DisplayHandler::~DisplayHandler()>:
 8008160:	b510      	push	{r4, lr}
 8008162:	4604      	mov	r4, r0
 8008164:	f00b fb46 	bl	80137f4 <operator delete(void*)>
 8008168:	4620      	mov	r0, r4
 800816a:	bd10      	pop	{r4, pc}

0800816c <DisplayUdfHandler::~DisplayUdfHandler()>:
 800816c:	b510      	push	{r4, lr}
 800816e:	4604      	mov	r4, r0
 8008170:	f00b fb40 	bl	80137f4 <operator delete(void*)>
 8008174:	4620      	mov	r0, r4
 8008176:	bd10      	pop	{r4, pc}

08008178 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)>:
 8008178:	4b02      	ldr	r3, [pc, #8]	; (8008184 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0xc>)
 800817a:	6819      	ldr	r1, [r3, #0]
 800817c:	4b02      	ldr	r3, [pc, #8]	; (8008188 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0x10>)
 800817e:	6818      	ldr	r0, [r3, #0]
 8008180:	f00a bbc0 	b.w	8012904 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8008184:	200012d4 	ldrdcs	r1, [r0], -r4
 8008188:	2000ab6c 	andcs	sl, r0, ip, ror #22

0800818c <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)>:
 800818c:	4b02      	ldr	r3, [pc, #8]	; (8008198 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0xc>)
 800818e:	6819      	ldr	r1, [r3, #0]
 8008190:	4b02      	ldr	r3, [pc, #8]	; (800819c <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0x10>)
 8008192:	6818      	ldr	r0, [r3, #0]
 8008194:	f00a bbb6 	b.w	8012904 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8008198:	200012d4 	ldrdcs	r1, [r0], -r4
 800819c:	2000ab6c 	andcs	sl, r0, ip, ror #22

080081a0 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)>:
 80081a0:	4b02      	ldr	r3, [pc, #8]	; (80081ac <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0xc>)
 80081a2:	6819      	ldr	r1, [r3, #0]
 80081a4:	4b02      	ldr	r3, [pc, #8]	; (80081b0 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0x10>)
 80081a6:	6818      	ldr	r0, [r3, #0]
 80081a8:	f00a bbac 	b.w	8012904 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80081ac:	200012d4 	ldrdcs	r1, [r0], -r4
 80081b0:	2000ab6c 	andcs	sl, r0, ip, ror #22

080081b4 <DisplayUdfHandler::ShowNetSwitch(unsigned char)>:
 80081b4:	4b02      	ldr	r3, [pc, #8]	; (80081c0 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0xc>)
 80081b6:	6819      	ldr	r1, [r3, #0]
 80081b8:	4b02      	ldr	r3, [pc, #8]	; (80081c4 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0x10>)
 80081ba:	6818      	ldr	r0, [r3, #0]
 80081bc:	f00a bba2 	b.w	8012904 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80081c0:	200012d4 	ldrdcs	r1, [r0], -r4
 80081c4:	2000ab6c 	andcs	sl, r0, ip, ror #22

080081c8 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)>:
 80081c8:	4b02      	ldr	r3, [pc, #8]	; (80081d4 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0xc>)
 80081ca:	6819      	ldr	r1, [r3, #0]
 80081cc:	4b02      	ldr	r3, [pc, #8]	; (80081d8 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0x10>)
 80081ce:	6818      	ldr	r0, [r3, #0]
 80081d0:	f00a bb98 	b.w	8012904 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80081d4:	200012d4 	ldrdcs	r1, [r0], -r4
 80081d8:	2000ab6c 	andcs	sl, r0, ip, ror #22

080081dc <DisplayUdfHandler::ShowShortName(char const*)>:
 80081dc:	4b02      	ldr	r3, [pc, #8]	; (80081e8 <DisplayUdfHandler::ShowShortName(char const*)+0xc>)
 80081de:	6819      	ldr	r1, [r3, #0]
 80081e0:	4b02      	ldr	r3, [pc, #8]	; (80081ec <DisplayUdfHandler::ShowShortName(char const*)+0x10>)
 80081e2:	6818      	ldr	r0, [r3, #0]
 80081e4:	f00a bb6b 	b.w	80128be <DisplayUdf::ShowNodeName(ArtNetNode*)>
 80081e8:	200012d4 	ldrdcs	r1, [r0], -r4
 80081ec:	2000ab6c 	andcs	sl, r0, ip, ror #22

080081f0 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 80081f0:	b110      	cbz	r0, 80081f8 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 80081f2:	6803      	ldr	r3, [r0, #0]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	4718      	bx	r3
 80081f8:	4770      	bx	lr

080081fa <Display::PutChar(int) [clone .isra.0]>:
 80081fa:	b110      	cbz	r0, 8008202 <Display::PutChar(int) [clone .isra.0]+0x8>
 80081fc:	6803      	ldr	r3, [r0, #0]
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	4718      	bx	r3
 8008202:	4770      	bx	lr

08008204 <DisplayHandler::Print(unsigned int)>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	7903      	ldrb	r3, [r0, #4]
 8008208:	b1f3      	cbz	r3, 8008248 <DisplayHandler::Print(unsigned int)+0x44>
 800820a:	2904      	cmp	r1, #4
 800820c:	bf98      	it	ls
 800820e:	4b0f      	ldrls	r3, [pc, #60]	; (800824c <DisplayHandler::Print(unsigned int)+0x48>)
 8008210:	4d0f      	ldr	r5, [pc, #60]	; (8008250 <DisplayHandler::Print(unsigned int)+0x4c>)
 8008212:	bf98      	it	ls
 8008214:	5c5c      	ldrbls	r4, [r3, r1]
 8008216:	682b      	ldr	r3, [r5, #0]
 8008218:	bf88      	it	hi
 800821a:	2455      	movhi	r4, #85	; 0x55
 800821c:	6998      	ldr	r0, [r3, #24]
 800821e:	b178      	cbz	r0, 8008240 <DisplayHandler::Print(unsigned int)+0x3c>
 8008220:	7901      	ldrb	r1, [r0, #4]
 8008222:	3901      	subs	r1, #1
 8008224:	b2c9      	uxtb	r1, r1
 8008226:	b168      	cbz	r0, 8008244 <DisplayHandler::Print(unsigned int)+0x40>
 8008228:	7942      	ldrb	r2, [r0, #5]
 800822a:	3a01      	subs	r2, #1
 800822c:	b2d2      	uxtb	r2, r2
 800822e:	f7ff ffdf 	bl	80081f0 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8008232:	682b      	ldr	r3, [r5, #0]
 8008234:	4621      	mov	r1, r4
 8008236:	6998      	ldr	r0, [r3, #24]
 8008238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800823c:	f7ff bfdd 	b.w	80081fa <Display::PutChar(int) [clone .isra.0]>
 8008240:	4601      	mov	r1, r0
 8008242:	e7ee      	b.n	8008222 <DisplayHandler::Print(unsigned int)+0x1e>
 8008244:	4602      	mov	r2, r0
 8008246:	e7f0      	b.n	800822a <DisplayHandler::Print(unsigned int)+0x26>
 8008248:	bd38      	pop	{r3, r4, r5, pc}
 800824a:	bf00      	nop
 800824c:	080165f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, sl, sp, lr}
 8008250:	2000ab74 	andcs	sl, r0, r4, ror fp

08008254 <Display::TextStatus(char const*)>:
 8008254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008258:	4604      	mov	r4, r0
 800825a:	6980      	ldr	r0, [r0, #24]
 800825c:	460d      	mov	r5, r1
 800825e:	b360      	cbz	r0, 80082ba <Display::TextStatus(char const*)+0x66>
 8008260:	7947      	ldrb	r7, [r0, #5]
 8008262:	2100      	movs	r1, #0
 8008264:	1e7e      	subs	r6, r7, #1
 8008266:	b2f6      	uxtb	r6, r6
 8008268:	4632      	mov	r2, r6
 800826a:	f890 9004 	ldrb.w	r9, [r0, #4]
 800826e:	f04f 0800 	mov.w	r8, #0
 8008272:	f7ff ffbd 	bl	80081f0 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8008276:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800827a:	45c1      	cmp	r9, r8
 800827c:	69a0      	ldr	r0, [r4, #24]
 800827e:	d816      	bhi.n	80082ae <Display::TextStatus(char const*)+0x5a>
 8008280:	4632      	mov	r2, r6
 8008282:	2100      	movs	r1, #0
 8008284:	f7ff ffb4 	bl	80081f0 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8008288:	69a0      	ldr	r0, [r4, #24]
 800828a:	b1b0      	cbz	r0, 80082ba <Display::TextStatus(char const*)+0x66>
 800828c:	2300      	movs	r3, #0
 800828e:	7901      	ldrb	r1, [r0, #4]
 8008290:	5cea      	ldrb	r2, [r5, r3]
 8008292:	b11a      	cbz	r2, 800829c <Display::TextStatus(char const*)+0x48>
 8008294:	1c5a      	adds	r2, r3, #1
 8008296:	4299      	cmp	r1, r3
 8008298:	4613      	mov	r3, r2
 800829a:	dcf9      	bgt.n	8008290 <Display::TextStatus(char const*)+0x3c>
 800829c:	6802      	ldr	r2, [r0, #0]
 800829e:	4639      	mov	r1, r7
 80082a0:	69d4      	ldr	r4, [r2, #28]
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	462a      	mov	r2, r5
 80082a6:	46a4      	mov	ip, r4
 80082a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ac:	4760      	bx	ip
 80082ae:	2120      	movs	r1, #32
 80082b0:	f7ff ffa3 	bl	80081fa <Display::PutChar(int) [clone .isra.0]>
 80082b4:	f108 0801 	add.w	r8, r8, #1
 80082b8:	e7df      	b.n	800827a <Display::TextStatus(char const*)+0x26>
 80082ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080082be <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 80082be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082c0:	4605      	mov	r5, r0
 80082c2:	461e      	mov	r6, r3
 80082c4:	460f      	mov	r7, r1
 80082c6:	4614      	mov	r4, r2
 80082c8:	f7ff ffc4 	bl	8008254 <Display::TextStatus(char const*)>
 80082cc:	7c6b      	ldrb	r3, [r5, #17]
 80082ce:	b19b      	cbz	r3, 80082f8 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3a>
 80082d0:	43e2      	mvns	r2, r4
 80082d2:	2312      	movs	r3, #18
 80082d4:	7a28      	ldrb	r0, [r5, #8]
 80082d6:	f88d 3004 	strb.w	r3, [sp, #4]
 80082da:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80082de:	f88d 3005 	strb.w	r3, [sp, #5]
 80082e2:	f88d 2006 	strb.w	r2, [sp, #6]
 80082e6:	f00c fec7 	bl	8015078 <gd32_i2c_set_address>
 80082ea:	68e8      	ldr	r0, [r5, #12]
 80082ec:	f00c febc 	bl	8015068 <gd32_i2c_set_baudrate>
 80082f0:	2103      	movs	r1, #3
 80082f2:	a801      	add	r0, sp, #4
 80082f4:	f00c fec6 	bl	8015084 <gd32_i2c_write>
 80082f8:	1c73      	adds	r3, r6, #1
 80082fa:	d006      	beq.n	800830a <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4c>
 80082fc:	4639      	mov	r1, r7
 80082fe:	4630      	mov	r0, r6
 8008300:	b003      	add	sp, #12
 8008302:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008306:	f00b b917 	b.w	8013538 <console_status>
 800830a:	b003      	add	sp, #12
 800830c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008310 <Display::SetSleep(bool)>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4604      	mov	r4, r0
 8008314:	6980      	ldr	r0, [r0, #24]
 8008316:	460d      	mov	r5, r1
 8008318:	b138      	cbz	r0, 800832a <Display::SetSleep(bool)+0x1a>
 800831a:	6803      	ldr	r3, [r0, #0]
 800831c:	7421      	strb	r1, [r4, #16]
 800831e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008320:	4798      	blx	r3
 8008322:	b915      	cbnz	r5, 800832a <Display::SetSleep(bool)+0x1a>
 8008324:	4b01      	ldr	r3, [pc, #4]	; (800832c <Display::SetSleep(bool)+0x1c>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6063      	str	r3, [r4, #4]
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	2000ac7c 	andcs	sl, r0, ip, ror ip

08008330 <display::timeout::gpio_init()>:
 8008330:	b510      	push	{r4, lr}
 8008332:	f240 6003 	movw	r0, #1539	; 0x603
 8008336:	f00c fa2b 	bl	8014790 <rcu_periph_clock_enable>
 800833a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800833e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008342:	2203      	movs	r2, #3
 8008344:	2148      	movs	r1, #72	; 0x48
 8008346:	4801      	ldr	r0, [pc, #4]	; (800834c <display::timeout::gpio_init()+0x1c>)
 8008348:	f00c b98a 	b.w	8014660 <gpio_init>
 800834c:	40010c00 	andmi	r0, r1, r0, lsl #24

08008350 <display::timeout::gpio_renew()>:
 8008350:	4b03      	ldr	r3, [pc, #12]	; (8008360 <display::timeout::gpio_renew()+0x10>)
 8008352:	f8d3 0c08 	ldr.w	r0, [r3, #3080]	; 0xc08
 8008356:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 800835a:	f3c0 3080 	ubfx	r0, r0, #14, #1
 800835e:	4770      	bx	lr
 8008360:	40010000 	andmi	r0, r1, r0

08008364 <RDMDevice::Init()>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	2301      	movs	r3, #1
 8008368:	4604      	mov	r4, r0
 800836a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800836e:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
 8008372:	3051      	adds	r0, #81	; 0x51
 8008374:	2a20      	cmp	r2, #32
 8008376:	bf28      	it	cs
 8008378:	2220      	movcs	r2, #32
 800837a:	4613      	mov	r3, r2
 800837c:	f104 010a 	add.w	r1, r4, #10
 8008380:	3b01      	subs	r3, #1
 8008382:	d215      	bcs.n	80083b0 <RDMDevice::Init()+0x4c>
 8008384:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008386:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
 800838a:	b110      	cbz	r0, 8008392 <RDMDevice::Init()+0x2e>
 800838c:	6803      	ldr	r3, [r0, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	4798      	blx	r3
 8008392:	f06f 0508 	mvn.w	r5, #8
 8008396:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
 800839a:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 800839e:	f104 0209 	add.w	r2, r4, #9
 80083a2:	1b2d      	subs	r5, r5, r4
 80083a4:	18a9      	adds	r1, r5, r2
 80083a6:	4288      	cmp	r0, r1
 80083a8:	d807      	bhi.n	80083ba <RDMDevice::Init()+0x56>
 80083aa:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 80083ae:	bd38      	pop	{r3, r4, r5, pc}
 80083b0:	f810 5b01 	ldrb.w	r5, [r0], #1
 80083b4:	f800 5c48 	strb.w	r5, [r0, #-72]
 80083b8:	e7e2      	b.n	8008380 <RDMDevice::Init()+0x1c>
 80083ba:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80083be:	440b      	add	r3, r1
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	e7ef      	b.n	80083a4 <RDMDevice::Init()+0x40>

080083c4 <Hardware::RebootHandler()>:
 80083c4:	b508      	push	{r3, lr}
 80083c6:	4b05      	ldr	r3, [pc, #20]	; (80083dc <Hardware::RebootHandler()+0x18>)
 80083c8:	6818      	ldr	r0, [r3, #0]
 80083ca:	f006 ff53 	bl	800f274 <Dmx::Blackout()>
 80083ce:	4b04      	ldr	r3, [pc, #16]	; (80083e0 <Hardware::RebootHandler()+0x1c>)
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80083d6:	f001 bf49 	b.w	800a26c <ArtNetNode::Stop()>
 80083da:	bf00      	nop
 80083dc:	20001c60 	andcs	r1, r0, r0, ror #24
 80083e0:	200012d4 	ldrdcs	r1, [r0], -r4

080083e4 <main>:
 80083e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e8:	2701      	movs	r7, #1
 80083ea:	f5ad 5d90 	sub.w	sp, sp, #4608	; 0x1200
 80083ee:	b085      	sub	sp, #20
 80083f0:	ac0c      	add	r4, sp, #48	; 0x30
 80083f2:	f1a4 001c 	sub.w	r0, r4, #28
 80083f6:	f00b f953 	bl	80136a0 <Hardware::Hardware()>
 80083fa:	a88b      	add	r0, sp, #556	; 0x22c
 80083fc:	f008 fe88 	bl	8011110 <Network::Network()>
 8008400:	a81b      	add	r0, sp, #108	; 0x6c
 8008402:	f00b f8f7 	bl	80135f4 <LedBlink::LedBlink()>
 8008406:	a852      	add	r0, sp, #328	; 0x148
 8008408:	f009 ff36 	bl	8012278 <DisplayUdf::DisplayUdf()>
 800840c:	4bab      	ldr	r3, [pc, #684]	; (80086bc <main+0x2d8>)
 800840e:	4aac      	ldr	r2, [pc, #688]	; (80086c0 <main+0x2dc>)
 8008410:	49ac      	ldr	r1, [pc, #688]	; (80086c4 <main+0x2e0>)
 8008412:	a806      	add	r0, sp, #24
 8008414:	f00b f8a8 	bl	8013568 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8008418:	f1a4 0014 	sub.w	r0, r4, #20
 800841c:	f007 fd50 	bl	800fec0 <FlashRom::FlashRom()>
 8008420:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 80086c8 <main+0x2e4>
 8008424:	a808      	add	r0, sp, #32
 8008426:	f007 f92f 	bl	800f688 <SpiFlashStore::SpiFlashStore()>
 800842a:	49a8      	ldr	r1, [pc, #672]	; (80086cc <main+0x2e8>)
 800842c:	a806      	add	r0, sp, #24
 800842e:	f00b f8d3 	bl	80135d8 <FirmwareVersion::Print(char const*)>
 8008432:	2008      	movs	r0, #8
 8008434:	f8c8 7010 	str.w	r7, [r8, #16]
 8008438:	f00b f9e0 	bl	80137fc <operator new(unsigned int)>
 800843c:	4ba4      	ldr	r3, [pc, #656]	; (80086d0 <main+0x2ec>)
 800843e:	2600      	movs	r6, #0
 8008440:	6003      	str	r3, [r0, #0]
 8008442:	4ba4      	ldr	r3, [pc, #656]	; (80086d4 <main+0x2f0>)
 8008444:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	49a3      	ldr	r1, [pc, #652]	; (80086d8 <main+0x2f4>)
 800844c:	3b00      	subs	r3, #0
 800844e:	bf18      	it	ne
 8008450:	2301      	movne	r3, #1
 8008452:	7103      	strb	r3, [r0, #4]
 8008454:	901d      	str	r0, [sp, #116]	; 0x74
 8008456:	ab1b      	add	r3, sp, #108	; 0x6c
 8008458:	a852      	add	r0, sp, #328	; 0x148
 800845a:	2303      	movs	r3, #3
 800845c:	f7ff ff2f 	bl	80082be <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008460:	ad14      	add	r5, sp, #80	; 0x50
 8008462:	a811      	add	r0, sp, #68	; 0x44
 8008464:	f007 fb24 	bl	800fab0 <StoreNetwork::StoreNetwork()>
 8008468:	f1a5 0308 	sub.w	r3, r5, #8
 800846c:	a911      	add	r1, sp, #68	; 0x44
 800846e:	a88b      	add	r0, sp, #556	; 0x22c
 8008470:	93b9      	str	r3, [sp, #740]	; 0x2e4
 8008472:	f008 fea7 	bl	80111c4 <Network::Init(NetworkParamsStore*)>
 8008476:	a88b      	add	r0, sp, #556	; 0x22c
 8008478:	f009 f894 	bl	80115a4 <Network::Print()>
 800847c:	2303      	movs	r3, #3
 800847e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008482:	4996      	ldr	r1, [pc, #600]	; (80086dc <main+0x2f8>)
 8008484:	a852      	add	r0, sp, #328	; 0x148
 8008486:	f7ff ff1a 	bl	80082be <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 800848a:	a809      	add	r0, sp, #36	; 0x24
 800848c:	f008 fa82 	bl	8010994 <MDNS::MDNS()>
 8008490:	a809      	add	r0, sp, #36	; 0x24
 8008492:	f008 fb3f 	bl	8010b14 <MDNS::Start()>
 8008496:	f642 1305 	movw	r3, #10501	; 0x2905
 800849a:	4631      	mov	r1, r6
 800849c:	4a90      	ldr	r2, [pc, #576]	; (80086e0 <main+0x2fc>)
 800849e:	e9cd 6600 	strd	r6, r6, [sp]
 80084a2:	a809      	add	r0, sp, #36	; 0x24
 80084a4:	f008 fca0 	bl	8010de8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 80084a8:	4b8e      	ldr	r3, [pc, #568]	; (80086e4 <main+0x300>)
 80084aa:	4631      	mov	r1, r6
 80084ac:	4a8e      	ldr	r2, [pc, #568]	; (80086e8 <main+0x304>)
 80084ae:	e9cd 7300 	strd	r7, r3, [sp]
 80084b2:	a809      	add	r0, sp, #36	; 0x24
 80084b4:	2350      	movs	r3, #80	; 0x50
 80084b6:	f008 fc97 	bl	8010de8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 80084ba:	a809      	add	r0, sp, #36	; 0x24
 80084bc:	f008 fdda 	bl	8011074 <MDNS::Print()>
 80084c0:	a83c      	add	r0, sp, #240	; 0xf0
 80084c2:	f001 f929 	bl	8009718 <HttpDaemon::HttpDaemon()>
 80084c6:	a83c      	add	r0, sp, #240	; 0xf0
 80084c8:	f001 f93a 	bl	8009740 <HttpDaemon::Start()>
 80084cc:	2303      	movs	r3, #3
 80084ce:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 80084d2:	4986      	ldr	r1, [pc, #536]	; (80086ec <main+0x308>)
 80084d4:	a852      	add	r0, sp, #328	; 0x148
 80084d6:	f7ff fef2 	bl	80082be <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80084da:	4631      	mov	r1, r6
 80084dc:	a813      	add	r0, sp, #76	; 0x4c
 80084de:	f007 fcdd 	bl	800fe9c <StoreArtNet::StoreArtNet(unsigned int)>
 80084e2:	a913      	add	r1, sp, #76	; 0x4c
 80084e4:	a868      	add	r0, sp, #416	; 0x1a0
 80084e6:	f003 fbc5 	bl	800bc74 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 80084ea:	a8be      	add	r0, sp, #760	; 0x2f8
 80084ec:	f001 fdec 	bl	800a0c8 <ArtNet4Node::ArtNet4Node()>
 80084f0:	a868      	add	r0, sp, #416	; 0x1a0
 80084f2:	f003 fbe1 	bl	800bcb8 <ArtNetParams::Load()>
 80084f6:	b130      	cbz	r0, 8008506 <main+0x122>
 80084f8:	a868      	add	r0, sp, #416	; 0x1a0
 80084fa:	f004 f809 	bl	800c510 <ArtNetParams::Dump()>
 80084fe:	4631      	mov	r1, r6
 8008500:	a868      	add	r0, sp, #416	; 0x1a0
 8008502:	f003 ff79 	bl	800c3f8 <ArtNetParams::Set(unsigned int)>
 8008506:	4a7a      	ldr	r2, [pc, #488]	; (80086f0 <main+0x30c>)
 8008508:	ab0a      	add	r3, sp, #40	; 0x28
 800850a:	601a      	str	r2, [r3, #0]
 800850c:	f8bd 2219 	ldrh.w	r2, [sp, #537]	; 0x219
 8008510:	f1a4 0308 	sub.w	r3, r4, #8
 8008514:	2100      	movs	r1, #0
 8008516:	e9cd 53c6 	strd	r5, r3, [sp, #792]	; 0x318
 800851a:	f002 0203 	and.w	r2, r2, #3
 800851e:	f89d 320b 	ldrb.w	r3, [sp, #523]	; 0x20b
 8008522:	a8bf      	add	r0, sp, #764	; 0x2fc
 8008524:	f002 f946 	bl	800a7b4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8008528:	f8bd 2219 	ldrh.w	r2, [sp, #537]	; 0x219
 800852c:	f89d 320c 	ldrb.w	r3, [sp, #524]	; 0x20c
 8008530:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8008534:	2101      	movs	r1, #1
 8008536:	a8bf      	add	r0, sp, #764	; 0x2fc
 8008538:	f002 f93c 	bl	800a7b4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800853c:	a80b      	add	r0, sp, #44	; 0x2c
 800853e:	f007 fa09 	bl	800f954 <StoreDmxSend::StoreDmxSend()>
 8008542:	a90b      	add	r1, sp, #44	; 0x2c
 8008544:	a817      	add	r0, sp, #92	; 0x5c
 8008546:	f005 ffa7 	bl	800e498 <DmxParams::DmxParams(DmxParamsStore*)>
 800854a:	a821      	add	r0, sp, #132	; 0x84
 800854c:	f006 fcfc 	bl	800ef48 <Dmx::Dmx()>
 8008550:	a817      	add	r0, sp, #92	; 0x5c
 8008552:	f005 ffad 	bl	800e4b0 <DmxParams::Load()>
 8008556:	b130      	cbz	r0, 8008566 <main+0x182>
 8008558:	a817      	add	r0, sp, #92	; 0x5c
 800855a:	f006 f8f7 	bl	800e74c <DmxParams::Dump()>
 800855e:	a921      	add	r1, sp, #132	; 0x84
 8008560:	a817      	add	r0, sp, #92	; 0x5c
 8008562:	f006 f8c9 	bl	800e6f8 <DmxParams::Set(Dmx*)>
 8008566:	4b63      	ldr	r3, [pc, #396]	; (80086f4 <main+0x310>)
 8008568:	4620      	mov	r0, r4
 800856a:	6023      	str	r3, [r4, #0]
 800856c:	f005 ff3a 	bl	800e3e4 <DmxSend::Print()>
 8008570:	f89d 6be6 	ldrb.w	r6, [sp, #3046]	; 0xbe6
 8008574:	b166      	cbz	r6, 8008590 <main+0x1ac>
 8008576:	2001      	movs	r0, #1
 8008578:	94c0      	str	r4, [sp, #768]	; 0x300
 800857a:	f00b f93f 	bl	80137fc <operator new(unsigned int)>
 800857e:	4b5e      	ldr	r3, [pc, #376]	; (80086f8 <main+0x314>)
 8008580:	4606      	mov	r6, r0
 8008582:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8008586:	6818      	ldr	r0, [r3, #0]
 8008588:	f008 fdf4 	bl	8011174 <Network::Begin(unsigned short)>
 800858c:	4b5b      	ldr	r3, [pc, #364]	; (80086fc <main+0x318>)
 800858e:	6018      	str	r0, [r3, #0]
 8008590:	f1a5 071c 	sub.w	r7, r5, #28
 8008594:	4638      	mov	r0, r7
 8008596:	f000 fa3b 	bl	8008a10 <DmxInput::DmxInput()>
 800859a:	f89d 3be7 	ldrb.w	r3, [sp, #3047]	; 0xbe7
 800859e:	b103      	cbz	r3, 80085a2 <main+0x1be>
 80085a0:	97c3      	str	r7, [sp, #780]	; 0x30c
 80085a2:	ab15      	add	r3, sp, #84	; 0x54
 80085a4:	4618      	mov	r0, r3
 80085a6:	9303      	str	r3, [sp, #12]
 80085a8:	f007 fae2 	bl	800fb70 <StoreRDMDevice::StoreRDMDevice()>
 80085ac:	f89d 9be6 	ldrb.w	r9, [sp, #3046]	; 0xbe6
 80085b0:	f1b9 0f00 	cmp.w	r9, #0
 80085b4:	d049      	beq.n	800864a <main+0x266>
 80085b6:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 80085b8:	069b      	lsls	r3, r3, #26
 80085ba:	d546      	bpl.n	800864a <main+0x266>
 80085bc:	f44f 70cc 	mov.w	r0, #408	; 0x198
 80085c0:	f00b f91c 	bl	80137fc <operator new(unsigned int)>
 80085c4:	4649      	mov	r1, r9
 80085c6:	4607      	mov	r7, r0
 80085c8:	f005 fab2 	bl	800db30 <ArtNetRdmController::ArtNetRdmController(unsigned int)>
 80085cc:	9903      	ldr	r1, [sp, #12]
 80085ce:	a846      	add	r0, sp, #280	; 0x118
 80085d0:	f005 fdd6 	bl	800e180 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 80085d4:	a846      	add	r0, sp, #280	; 0x118
 80085d6:	f005 fde5 	bl	800e1a4 <RDMDeviceParams::Load()>
 80085da:	f107 0904 	add.w	r9, r7, #4
 80085de:	b130      	cbz	r0, 80085ee <main+0x20a>
 80085e0:	a846      	add	r0, sp, #280	; 0x118
 80085e2:	f005 fe1f 	bl	800e224 <RDMDeviceParams::Dump()>
 80085e6:	4649      	mov	r1, r9
 80085e8:	a846      	add	r0, sp, #280	; 0x118
 80085ea:	f005 fde6 	bl	800e1ba <RDMDeviceParams::Set(RDMDevice*)>
 80085ee:	4648      	mov	r0, r9
 80085f0:	f7ff feb8 	bl	8008364 <RDMDevice::Init()>
 80085f4:	4648      	mov	r0, r9
 80085f6:	f005 fd7f 	bl	800e0f8 <RDMDevice::Print()>
 80085fa:	2303      	movs	r3, #3
 80085fc:	f44f 42da 	mov.w	r2, #27904	; 0x6d00
 8008600:	493f      	ldr	r1, [pc, #252]	; (8008700 <main+0x31c>)
 8008602:	a852      	add	r0, sp, #328	; 0x148
 8008604:	f7ff fe5b 	bl	80082be <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008608:	2301      	movs	r3, #1
 800860a:	2100      	movs	r1, #0
 800860c:	aa33      	add	r2, sp, #204	; 0xcc
 800860e:	a8bf      	add	r0, sp, #764	; 0x2fc
 8008610:	f002 f97f 	bl	800a912 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8008614:	b130      	cbz	r0, 8008624 <main+0x240>
 8008616:	4b3b      	ldr	r3, [pc, #236]	; (8008704 <main+0x320>)
 8008618:	2100      	movs	r1, #0
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8008620:	f005 fc94 	bl	800df4c <RDMDiscovery::Full(unsigned int, RDMTod*)>
 8008624:	2301      	movs	r3, #1
 8008626:	aa33      	add	r2, sp, #204	; 0xcc
 8008628:	4619      	mov	r1, r3
 800862a:	a8bf      	add	r0, sp, #764	; 0x2fc
 800862c:	f002 f971 	bl	800a912 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8008630:	b130      	cbz	r0, 8008640 <main+0x25c>
 8008632:	4b34      	ldr	r3, [pc, #208]	; (8008704 <main+0x320>)
 8008634:	2101      	movs	r1, #1
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800863c:	f005 fc86 	bl	800df4c <RDMDiscovery::Full(unsigned int, RDMTod*)>
 8008640:	2200      	movs	r2, #0
 8008642:	4639      	mov	r1, r7
 8008644:	a8bf      	add	r0, sp, #764	; 0x2fc
 8008646:	f003 f8f8 	bl	800b83a <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)>
 800864a:	a8be      	add	r0, sp, #760	; 0x2f8
 800864c:	f001 fd90 	bl	800a170 <ArtNet4Node::Print()>
 8008650:	f89d 3be7 	ldrb.w	r3, [sp, #3047]	; 0xbe7
 8008654:	f89d 7be6 	ldrb.w	r7, [sp, #3046]	; 0xbe6
 8008658:	492b      	ldr	r1, [pc, #172]	; (8008708 <main+0x324>)
 800865a:	441f      	add	r7, r3
 800865c:	463a      	mov	r2, r7
 800865e:	a852      	add	r0, sp, #328	; 0x148
 8008660:	f009 fe20 	bl	80122a4 <DisplayUdf::SetTitle(char const*, ...)>
 8008664:	2206      	movs	r2, #6
 8008666:	2102      	movs	r1, #2
 8008668:	a852      	add	r0, sp, #328	; 0x148
 800866a:	f009 fe2e 	bl	80122ca <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 800866e:	2202      	movs	r2, #2
 8008670:	2103      	movs	r1, #3
 8008672:	a852      	add	r0, sp, #328	; 0x148
 8008674:	f009 fe29 	bl	80122ca <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008678:	2203      	movs	r2, #3
 800867a:	2104      	movs	r1, #4
 800867c:	a852      	add	r0, sp, #328	; 0x148
 800867e:	f009 fe24 	bl	80122ca <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008682:	2208      	movs	r2, #8
 8008684:	2105      	movs	r1, #5
 8008686:	a852      	add	r0, sp, #328	; 0x148
 8008688:	f009 fe1f 	bl	80122ca <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 800868c:	2209      	movs	r2, #9
 800868e:	2106      	movs	r1, #6
 8008690:	a852      	add	r0, sp, #328	; 0x148
 8008692:	f009 fe1a 	bl	80122ca <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008696:	a80e      	add	r0, sp, #56	; 0x38
 8008698:	f007 f926 	bl	800f8e8 <StoreDisplayUdf::StoreDisplayUdf()>
 800869c:	a90e      	add	r1, sp, #56	; 0x38
 800869e:	a846      	add	r0, sp, #280	; 0x118
 80086a0:	f009 ff94 	bl	80125cc <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 80086a4:	a846      	add	r0, sp, #280	; 0x118
 80086a6:	f009 ff9e 	bl	80125e6 <DisplayUdfParams::Load()>
 80086aa:	b378      	cbz	r0, 800870c <main+0x328>
 80086ac:	a846      	add	r0, sp, #280	; 0x118
 80086ae:	f00a f905 	bl	80128bc <DisplayUdfParams::Dump()>
 80086b2:	a952      	add	r1, sp, #328	; 0x148
 80086b4:	a846      	add	r0, sp, #280	; 0x118
 80086b6:	f00a f8ce 	bl	8012856 <DisplayUdfParams::Set(DisplayUdf*)>
 80086ba:	e027      	b.n	800870c <main+0x328>
 80086bc:	08016511 	stmdaeq	r1, {r0, r4, r8, sl, sp, lr}
 80086c0:	0801651a 	stmdaeq	r1, {r1, r3, r4, r8, sl, sp, lr}
 80086c4:	080165fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, sl, sp, lr}
 80086c8:	40011000 	andmi	r1, r1, r0
 80086cc:	08016526 	stmdaeq	r1, {r1, r2, r5, r8, sl, sp, lr}
 80086d0:	080165b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, sl, sp, lr}
 80086d4:	2000ab74 	andcs	sl, r0, r4, ror fp
 80086d8:	08017fc5 	stmdaeq	r1, {r0, r2, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 80086dc:	08017fb4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
 80086e0:	0801655b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, sl, sp, lr}
 80086e4:	0801656b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r8, sl, sp, lr}
 80086e8:	08016564 	stmdaeq	r1, {r2, r5, r6, r8, sl, sp, lr}
 80086ec:	08017719 	stmdaeq	r1, {r0, r3, r4, r8, r9, sl, ip, sp, lr}
 80086f0:	080165cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sl, sp, lr}
 80086f4:	08017cf8 	stmdaeq	r1, {r3, r4, r5, r6, r7, sl, fp, ip, sp, lr}
 80086f8:	2000a59c 	mulcs	r0, ip, r5
 80086fc:	2000000c 	andcs	r0, r0, ip
 8008700:	0801772d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, sl, ip, sp, lr}
 8008704:	200013f8 	strdcs	r1, [r0], -r8
 8008708:	08016582 	stmdaeq	r1, {r1, r7, r8, sl, sp, lr}
 800870c:	a9bf      	add	r1, sp, #764	; 0x2fc
 800870e:	a852      	add	r0, sp, #328	; 0x148
 8008710:	f00a f994 	bl	8012a3c <DisplayUdf::Show(ArtNetNode*)>
 8008714:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 8008716:	463b      	mov	r3, r7
 8008718:	2100      	movs	r1, #0
 800871a:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800871e:	a82a      	add	r0, sp, #168	; 0xa8
 8008720:	f000 faea 	bl	8008cf8 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 8008724:	a80f      	add	r0, sp, #60	; 0x3c
 8008726:	f007 fa5b 	bl	800fbe0 <StoreRemoteConfig::StoreRemoteConfig()>
 800872a:	a90f      	add	r1, sp, #60	; 0x3c
 800872c:	a833      	add	r0, sp, #204	; 0xcc
 800872e:	f000 fddd 	bl	80092ec <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8008732:	a833      	add	r0, sp, #204	; 0xcc
 8008734:	f000 fde4 	bl	8009300 <RemoteConfigParams::Load()>
 8008738:	b130      	cbz	r0, 8008748 <main+0x364>
 800873a:	a833      	add	r0, sp, #204	; 0xcc
 800873c:	f000 ff27 	bl	800958e <RemoteConfigParams::Dump()>
 8008740:	a92a      	add	r1, sp, #168	; 0xa8
 8008742:	a833      	add	r0, sp, #204	; 0xcc
 8008744:	f000 ff03 	bl	800954e <RemoteConfigParams::Set(RemoteConfig*)>
 8008748:	a808      	add	r0, sp, #32
 800874a:	f007 f847 	bl	800f7dc <SpiFlashStore::Flash()>
 800874e:	2800      	cmp	r0, #0
 8008750:	d1fa      	bne.n	8008748 <main+0x364>
 8008752:	2303      	movs	r3, #3
 8008754:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8008758:	4975      	ldr	r1, [pc, #468]	; (8008930 <main+0x54c>)
 800875a:	a852      	add	r0, sp, #328	; 0x148
 800875c:	f7ff fdaf 	bl	80082be <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008760:	a8be      	add	r0, sp, #760	; 0x2f8
 8008762:	f001 fcc1 	bl	800a0e8 <ArtNet4Node::Start()>
 8008766:	f248 0280 	movw	r2, #32896	; 0x8080
 800876a:	2302      	movs	r3, #2
 800876c:	4971      	ldr	r1, [pc, #452]	; (8008934 <main+0x550>)
 800876e:	a852      	add	r0, sp, #328	; 0x148
 8008770:	f7ff fda5 	bl	80082be <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008774:	2102      	movs	r1, #2
 8008776:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800877a:	f00b ff47 	bl	801460c <fwdgt_config>
 800877e:	2801      	cmp	r0, #1
 8008780:	bf0c      	ite	eq
 8008782:	2201      	moveq	r2, #1
 8008784:	2200      	movne	r2, #0
 8008786:	ab05      	add	r3, sp, #20
 8008788:	701a      	strb	r2, [r3, #0]
 800878a:	d101      	bne.n	8008790 <main+0x3ac>
 800878c:	f00b ff2e 	bl	80145ec <fwdgt_enable>
 8008790:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 8008938 <main+0x554>
 8008794:	f00b ff32 	bl	80145fc <fwdgt_counter_reload>
 8008798:	f7fe feee 	bl	8007578 <net_handle>
 800879c:	a8be      	add	r0, sp, #760	; 0x2f8
 800879e:	f001 fcd7 	bl	800a150 <ArtNet4Node::Run()>
 80087a2:	a82a      	add	r0, sp, #168	; 0xa8
 80087a4:	f000 fc52 	bl	800904c <RemoteConfig::Run()>
 80087a8:	a808      	add	r0, sp, #32
 80087aa:	f007 f817 	bl	800f7dc <SpiFlashStore::Flash()>
 80087ae:	2e00      	cmp	r6, #0
 80087b0:	d03b      	beq.n	800882a <main+0x446>
 80087b2:	4862      	ldr	r0, [pc, #392]	; (800893c <main+0x558>)
 80087b4:	f1a5 0210 	sub.w	r2, r5, #16
 80087b8:	4961      	ldr	r1, [pc, #388]	; (8008940 <main+0x55c>)
 80087ba:	7800      	ldrb	r0, [r0, #0]
 80087bc:	f1a4 030a 	sub.w	r3, r4, #10
 80087c0:	f007 ffea 	bl	8010798 <udp_recv2>
 80087c4:	f1a0 020b 	sub.w	r2, r0, #11
 80087c8:	b292      	uxth	r2, r2
 80087ca:	2a05      	cmp	r2, #5
 80087cc:	4682      	mov	sl, r0
 80087ce:	d82c      	bhi.n	800882a <main+0x446>
 80087d0:	4b5b      	ldr	r3, [pc, #364]	; (8008940 <main+0x55c>)
 80087d2:	2204      	movs	r2, #4
 80087d4:	681f      	ldr	r7, [r3, #0]
 80087d6:	4658      	mov	r0, fp
 80087d8:	4639      	mov	r1, r7
 80087da:	f7ff fc9a 	bl	8008112 <memcmp>
 80087de:	bb20      	cbnz	r0, 800882a <main+0x446>
 80087e0:	eb07 020a 	add.w	r2, r7, sl
 80087e4:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80087e8:	f107 0904 	add.w	r9, r7, #4
 80087ec:	2a0a      	cmp	r2, #10
 80087ee:	bf04      	itt	eq
 80087f0:	f10a 33ff 	addeq.w	r3, sl, #4294967295	; 0xffffffff
 80087f4:	fa1f fa83 	uxtheq.w	sl, r3
 80087f8:	f1ba 0f0a 	cmp.w	sl, #10
 80087fc:	d043      	beq.n	8008886 <main+0x4a2>
 80087fe:	f1ba 0f0e 	cmp.w	sl, #14
 8008802:	d840      	bhi.n	8008886 <main+0x4a2>
 8008804:	2206      	movs	r2, #6
 8008806:	4649      	mov	r1, r9
 8008808:	484e      	ldr	r0, [pc, #312]	; (8008944 <main+0x560>)
 800880a:	f7ff fc82 	bl	8008112 <memcmp>
 800880e:	2800      	cmp	r0, #0
 8008810:	d139      	bne.n	8008886 <main+0x4a2>
 8008812:	2104      	movs	r1, #4
 8008814:	f107 000a 	add.w	r0, r7, #10
 8008818:	f7ff fc90 	bl	800813c <dmxconfigudp::atoi(char const*, unsigned int)>
 800881c:	285b      	cmp	r0, #91	; 0x5b
 800881e:	4601      	mov	r1, r0
 8008820:	d903      	bls.n	800882a <main+0x446>
 8008822:	4b49      	ldr	r3, [pc, #292]	; (8008948 <main+0x564>)
 8008824:	6818      	ldr	r0, [r3, #0]
 8008826:	f006 fcd5 	bl	800f1d4 <Dmx::SetDmxBreakTime(unsigned int)>
 800882a:	a809      	add	r0, sp, #36	; 0x24
 800882c:	f008 fbfe 	bl	801102c <MDNS::Run()>
 8008830:	a83c      	add	r0, sp, #240	; 0xf0
 8008832:	f001 f9f1 	bl	8009c18 <HttpDaemon::Run()>
 8008836:	9a57      	ldr	r2, [sp, #348]	; 0x15c
 8008838:	b16a      	cbz	r2, 8008856 <main+0x472>
 800883a:	f89d 3158 	ldrb.w	r3, [sp, #344]	; 0x158
 800883e:	2b00      	cmp	r3, #0
 8008840:	d16f      	bne.n	8008922 <main+0x53e>
 8008842:	4b42      	ldr	r3, [pc, #264]	; (800894c <main+0x568>)
 8008844:	9953      	ldr	r1, [sp, #332]	; 0x14c
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	1a5b      	subs	r3, r3, r1
 800884a:	429a      	cmp	r2, r3
 800884c:	d203      	bcs.n	8008856 <main+0x472>
 800884e:	2101      	movs	r1, #1
 8008850:	a852      	add	r0, sp, #328	; 0x148
 8008852:	f7ff fd5d 	bl	8008310 <Display::SetSleep(bool)>
 8008856:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8008858:	ab1b      	add	r3, sp, #108	; 0x6c
 800885a:	2f00      	cmp	r7, #0
 800885c:	d09a      	beq.n	8008794 <main+0x3b0>
 800885e:	493b      	ldr	r1, [pc, #236]	; (800894c <main+0x568>)
 8008860:	6958      	ldr	r0, [r3, #20]
 8008862:	680a      	ldr	r2, [r1, #0]
 8008864:	1a12      	subs	r2, r2, r0
 8008866:	4297      	cmp	r7, r2
 8008868:	d894      	bhi.n	8008794 <main+0x3b0>
 800886a:	680a      	ldr	r2, [r1, #0]
 800886c:	615a      	str	r2, [r3, #20]
 800886e:	691a      	ldr	r2, [r3, #16]
 8008870:	2a01      	cmp	r2, #1
 8008872:	f082 0101 	eor.w	r1, r2, #1
 8008876:	6119      	str	r1, [r3, #16]
 8008878:	bf16      	itet	ne
 800887a:	2301      	movne	r3, #1
 800887c:	f8c8 2014 	streq.w	r2, [r8, #20]
 8008880:	f8c8 3010 	strne.w	r3, [r8, #16]
 8008884:	e786      	b.n	8008794 <main+0x3b0>
 8008886:	2204      	movs	r2, #4
 8008888:	4649      	mov	r1, r9
 800888a:	4831      	ldr	r0, [pc, #196]	; (8008950 <main+0x56c>)
 800888c:	f7ff fc41 	bl	8008112 <memcmp>
 8008890:	b978      	cbnz	r0, 80088b2 <main+0x4ce>
 8008892:	2107      	movs	r1, #7
 8008894:	f107 0008 	add.w	r0, r7, #8
 8008898:	f7ff fc50 	bl	800813c <dmxconfigudp::atoi(char const*, unsigned int)>
 800889c:	4b2d      	ldr	r3, [pc, #180]	; (8008954 <main+0x570>)
 800889e:	f1a0 020c 	sub.w	r2, r0, #12
 80088a2:	429a      	cmp	r2, r3
 80088a4:	4601      	mov	r1, r0
 80088a6:	d8c0      	bhi.n	800882a <main+0x446>
 80088a8:	4b27      	ldr	r3, [pc, #156]	; (8008948 <main+0x564>)
 80088aa:	6818      	ldr	r0, [r3, #0]
 80088ac:	f006 fc9c 	bl	800f1e8 <Dmx::SetDmxMabTime(unsigned int)>
 80088b0:	e7bb      	b.n	800882a <main+0x446>
 80088b2:	f1ba 0f0c 	cmp.w	sl, #12
 80088b6:	d917      	bls.n	80088e8 <main+0x504>
 80088b8:	f1ba 0f0e 	cmp.w	sl, #14
 80088bc:	d82d      	bhi.n	800891a <main+0x536>
 80088be:	2208      	movs	r2, #8
 80088c0:	4649      	mov	r1, r9
 80088c2:	4825      	ldr	r0, [pc, #148]	; (8008958 <main+0x574>)
 80088c4:	f7ff fc25 	bl	8008112 <memcmp>
 80088c8:	bb38      	cbnz	r0, 800891a <main+0x536>
 80088ca:	2102      	movs	r1, #2
 80088cc:	f107 000c 	add.w	r0, r7, #12
 80088d0:	f7ff fc34 	bl	800813c <dmxconfigudp::atoi(char const*, unsigned int)>
 80088d4:	4601      	mov	r1, r0
 80088d6:	b110      	cbz	r0, 80088de <main+0x4fa>
 80088d8:	4b20      	ldr	r3, [pc, #128]	; (800895c <main+0x578>)
 80088da:	fbb3 f1f0 	udiv	r1, r3, r0
 80088de:	4b1a      	ldr	r3, [pc, #104]	; (8008948 <main+0x564>)
 80088e0:	6818      	ldr	r0, [r3, #0]
 80088e2:	f006 fc43 	bl	800f16c <Dmx::SetDmxPeriodTime(unsigned int)>
 80088e6:	e7a0      	b.n	800882a <main+0x446>
 80088e8:	f1ba 0f0a 	cmp.w	sl, #10
 80088ec:	d09d      	beq.n	800882a <main+0x446>
 80088ee:	2206      	movs	r2, #6
 80088f0:	4649      	mov	r1, r9
 80088f2:	481b      	ldr	r0, [pc, #108]	; (8008960 <main+0x57c>)
 80088f4:	f7ff fc0d 	bl	8008112 <memcmp>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d196      	bne.n	800882a <main+0x446>
 80088fc:	2103      	movs	r1, #3
 80088fe:	f107 000a 	add.w	r0, r7, #10
 8008902:	f7ff fc1b 	bl	800813c <dmxconfigudp::atoi(char const*, unsigned int)>
 8008906:	1e83      	subs	r3, r0, #2
 8008908:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800890c:	d88d      	bhi.n	800882a <main+0x446>
 800890e:	4b0e      	ldr	r3, [pc, #56]	; (8008948 <main+0x564>)
 8008910:	b281      	uxth	r1, r0
 8008912:	6818      	ldr	r0, [r3, #0]
 8008914:	f006 fc72 	bl	800f1fc <Dmx::SetDmxSlots(unsigned short)>
 8008918:	e787      	b.n	800882a <main+0x446>
 800891a:	f1ba 0f0d 	cmp.w	sl, #13
 800891e:	d184      	bne.n	800882a <main+0x446>
 8008920:	e7e5      	b.n	80088ee <main+0x50a>
 8008922:	f7ff fd15 	bl	8008350 <display::timeout::gpio_renew()>
 8008926:	2800      	cmp	r0, #0
 8008928:	d095      	beq.n	8008856 <main+0x472>
 800892a:	2100      	movs	r1, #0
 800892c:	e790      	b.n	8008850 <main+0x46c>
 800892e:	bf00      	nop
 8008930:	08017708 	stmdaeq	r1, {r3, r8, r9, sl, ip, sp, lr}
 8008934:	08017743 	stmdaeq	r1, {r0, r1, r6, r8, r9, sl, ip, sp, lr}
 8008938:	0801658f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, sl, sp, lr}
 800893c:	2000000c 	andcs	r0, r0, ip
 8008940:	20001c74 	andcs	r1, r0, r4, ror ip
 8008944:	08016594 	stmdaeq	r1, {r2, r4, r7, r8, sl, sp, lr}
 8008948:	20001c60 	andcs	r1, r0, r0, ror #24
 800894c:	2000ac7c 	andcs	sl, r0, ip, ror ip
 8008950:	0801659b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r8, sl, sp, lr}
 8008954:	000f4234 	andeq	r4, pc, r4, lsr r2	; <UNPREDICTABLE>
 8008958:	080165a0 	stmdaeq	r1, {r5, r7, r8, sl, sp, lr}
 800895c:	000f4240 	andeq	r4, pc, r0, asr #4
 8008960:	080165a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, sl, sp, lr}

08008964 <DmxInput::~DmxInput()>:
 8008964:	4770      	bx	lr
	...

08008968 <DmxInput::Start(unsigned int)>:
 8008968:	2301      	movs	r3, #1
 800896a:	b430      	push	{r4, r5}
 800896c:	4c08      	ldr	r4, [pc, #32]	; (8008990 <DmxInput::Start(unsigned int)+0x28>)
 800896e:	fa03 f001 	lsl.w	r0, r3, r1
 8008972:	7822      	ldrb	r2, [r4, #0]
 8008974:	ea30 0502 	bics.w	r5, r0, r2
 8008978:	d007      	beq.n	800898a <DmxInput::Start(unsigned int)+0x22>
 800897a:	4302      	orrs	r2, r0
 800897c:	4805      	ldr	r0, [pc, #20]	; (8008994 <DmxInput::Start(unsigned int)+0x2c>)
 800897e:	7022      	strb	r2, [r4, #0]
 8008980:	6800      	ldr	r0, [r0, #0]
 8008982:	461a      	mov	r2, r3
 8008984:	bc30      	pop	{r4, r5}
 8008986:	f006 ba9f 	b.w	800eec8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800898a:	bc30      	pop	{r4, r5}
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	200000f8 	strdcs	r0, [r0], -r8
 8008994:	20001c60 	andcs	r1, r0, r0, ror #24

08008998 <DmxInput::Stop(unsigned int)>:
 8008998:	2201      	movs	r2, #1
 800899a:	b430      	push	{r4, r5}
 800899c:	4c08      	ldr	r4, [pc, #32]	; (80089c0 <DmxInput::Stop(unsigned int)+0x28>)
 800899e:	fa02 f001 	lsl.w	r0, r2, r1
 80089a2:	7823      	ldrb	r3, [r4, #0]
 80089a4:	ea30 0503 	bics.w	r5, r0, r3
 80089a8:	d108      	bne.n	80089bc <DmxInput::Stop(unsigned int)+0x24>
 80089aa:	ea23 0300 	bic.w	r3, r3, r0
 80089ae:	4805      	ldr	r0, [pc, #20]	; (80089c4 <DmxInput::Stop(unsigned int)+0x2c>)
 80089b0:	7023      	strb	r3, [r4, #0]
 80089b2:	6800      	ldr	r0, [r0, #0]
 80089b4:	2300      	movs	r3, #0
 80089b6:	bc30      	pop	{r4, r5}
 80089b8:	f006 ba86 	b.w	800eec8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80089bc:	bc30      	pop	{r4, r5}
 80089be:	4770      	bx	lr
 80089c0:	200000f8 	strdcs	r0, [r0], -r8
 80089c4:	20001c60 	andcs	r1, r0, r0, ror #24

080089c8 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)>:
 80089c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089cc:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8008a00 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x38>
 80089d0:	461e      	mov	r6, r3
 80089d2:	f8d8 0000 	ldr.w	r0, [r8]
 80089d6:	460f      	mov	r7, r1
 80089d8:	4615      	mov	r5, r2
 80089da:	f006 fcd3 	bl	800f384 <Dmx::GetDmxAvailable(unsigned int)>
 80089de:	4639      	mov	r1, r7
 80089e0:	4604      	mov	r4, r0
 80089e2:	f8d8 0000 	ldr.w	r0, [r8]
 80089e6:	f006 fce1 	bl	800f3ac <Dmx::GetUpdatesPerSecond(unsigned int)>
 80089ea:	6030      	str	r0, [r6, #0]
 80089ec:	b134      	cbz	r4, 80089fc <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x34>
 80089ee:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 80089f2:	3401      	adds	r4, #1
 80089f4:	4620      	mov	r0, r4
 80089f6:	602b      	str	r3, [r5, #0]
 80089f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089fc:	4623      	mov	r3, r4
 80089fe:	e7f9      	b.n	80089f4 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x2c>
 8008a00:	20001c60 	andcs	r1, r0, r0, ror #24

08008a04 <DmxInput::~DmxInput()>:
 8008a04:	b510      	push	{r4, lr}
 8008a06:	4604      	mov	r4, r0
 8008a08:	f00a fef4 	bl	80137f4 <operator delete(void*)>
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	bd10      	pop	{r4, pc}

08008a10 <DmxInput::DmxInput()>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	4604      	mov	r4, r0
 8008a14:	2500      	movs	r5, #0
 8008a16:	4b05      	ldr	r3, [pc, #20]	; (8008a2c <DmxInput::DmxInput()+0x1c>)
 8008a18:	6003      	str	r3, [r0, #0]
 8008a1a:	4629      	mov	r1, r5
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	3501      	adds	r5, #1
 8008a20:	f7ff ffba 	bl	8008998 <DmxInput::Stop(unsigned int)>
 8008a24:	2d08      	cmp	r5, #8
 8008a26:	d1f8      	bne.n	8008a1a <DmxInput::DmxInput()+0xa>
 8008a28:	4620      	mov	r0, r4
 8008a2a:	bd38      	pop	{r3, r4, r5, pc}
 8008a2c:	0801660c 	stmdaeq	r1, {r2, r3, r9, sl, sp, lr}

08008a30 <RemoteConfig::HandleList()>:
 8008a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a34:	6801      	ldr	r1, [r0, #0]
 8008a36:	4604      	mov	r4, r0
 8008a38:	2012      	movs	r0, #18
 8008a3a:	f04f 080c 	mov.w	r8, #12
 8008a3e:	4a29      	ldr	r2, [pc, #164]	; (8008ae4 <RemoteConfig::HandleList()+0xb4>)
 8008a40:	4b29      	ldr	r3, [pc, #164]	; (8008ae8 <RemoteConfig::HandleList()+0xb8>)
 8008a42:	fb00 2201 	mla	r2, r0, r1, r2
 8008a46:	6860      	ldr	r0, [r4, #4]
 8008a48:	4928      	ldr	r1, [pc, #160]	; (8008aec <RemoteConfig::HandleList()+0xbc>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	fb08 1100 	mla	r1, r8, r0, r1
 8008a50:	4e27      	ldr	r6, [pc, #156]	; (8008af0 <RemoteConfig::HandleList()+0xc0>)
 8008a52:	4828      	ldr	r0, [pc, #160]	; (8008af4 <RemoteConfig::HandleList()+0xc4>)
 8008a54:	695f      	ldr	r7, [r3, #20]
 8008a56:	6835      	ldr	r5, [r6, #0]
 8008a58:	f890 9009 	ldrb.w	r9, [r0, #9]
 8008a5c:	b2fb      	uxtb	r3, r7
 8008a5e:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8008a62:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8008a66:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8008a6a:	b089      	sub	sp, #36	; 0x24
 8008a6c:	3507      	adds	r5, #7
 8008a6e:	0e3f      	lsrs	r7, r7, #24
 8008a70:	f1b9 0f00 	cmp.w	r9, #0
 8008a74:	d01d      	beq.n	8008ab2 <RemoteConfig::HandleList()+0x82>
 8008a76:	3009      	adds	r0, #9
 8008a78:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8008a7c:	e9cd 8005 	strd	r8, r0, [sp, #20]
 8008a80:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8008a84:	4628      	mov	r0, r5
 8008a86:	e9cd e701 	strd	lr, r7, [sp, #4]
 8008a8a:	4a1b      	ldr	r2, [pc, #108]	; (8008af8 <RemoteConfig::HandleList()+0xc8>)
 8008a8c:	f8cd c000 	str.w	ip, [sp]
 8008a90:	f00b fad0 	bl	8014034 <snprintf>
 8008a94:	69e3      	ldr	r3, [r4, #28]
 8008a96:	2b05      	cmp	r3, #5
 8008a98:	d118      	bne.n	8008acc <RemoteConfig::HandleList()+0x9c>
 8008a9a:	f642 1305 	movw	r3, #10501	; 0x2905
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	69a3      	ldr	r3, [r4, #24]
 8008aa2:	b282      	uxth	r2, r0
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	7d20      	ldrb	r0, [r4, #20]
 8008aa8:	f007 fe9c 	bl	80107e4 <udp_send>
 8008aac:	b009      	add	sp, #36	; 0x24
 8008aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ab2:	e9cd 1804 	strd	r1, r8, [sp, #16]
 8008ab6:	e9cd 7202 	strd	r7, r2, [sp, #8]
 8008aba:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8008abe:	4628      	mov	r0, r5
 8008ac0:	e9cd ce00 	strd	ip, lr, [sp]
 8008ac4:	4a0d      	ldr	r2, [pc, #52]	; (8008afc <RemoteConfig::HandleList()+0xcc>)
 8008ac6:	f00b fab5 	bl	8014034 <snprintf>
 8008aca:	e7e3      	b.n	8008a94 <RemoteConfig::HandleList()+0x64>
 8008acc:	2b06      	cmp	r3, #6
 8008ace:	d1ed      	bne.n	8008aac <RemoteConfig::HandleList()+0x7c>
 8008ad0:	6833      	ldr	r3, [r6, #0]
 8008ad2:	799b      	ldrb	r3, [r3, #6]
 8008ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ad6:	d1e9      	bne.n	8008aac <RemoteConfig::HandleList()+0x7c>
 8008ad8:	f642 1305 	movw	r3, #10501	; 0x2905
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ae2:	e7de      	b.n	8008aa2 <RemoteConfig::HandleList()+0x72>
 8008ae4:	0801670b 	stmdaeq	r1, {r0, r1, r3, r8, r9, sl, sp, lr}
 8008ae8:	2000a59c 	mulcs	r0, ip, r5
 8008aec:	080167d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, sl, sp, lr}
 8008af0:	200000fc 	strdcs	r0, [r0], -ip
 8008af4:	20000100 	andcs	r0, r0, r0, lsl #2
 8008af8:	08016620 	stmdaeq	r1, {r5, r9, sl, sp, lr}
 8008afc:	08016639 	stmdaeq	r1, {r0, r3, r4, r5, r9, sl, sp, lr}

08008b00 <RemoteConfig::HandleDisplayGet()>:
 8008b00:	69c3      	ldr	r3, [r0, #28]
 8008b02:	2b08      	cmp	r3, #8
 8008b04:	d11b      	bne.n	8008b3e <RemoteConfig::HandleDisplayGet()+0x3e>
 8008b06:	4b0e      	ldr	r3, [pc, #56]	; (8008b40 <RemoteConfig::HandleDisplayGet()+0x40>)
 8008b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4d0d      	ldr	r5, [pc, #52]	; (8008b44 <RemoteConfig::HandleDisplayGet()+0x44>)
 8008b0e:	7c19      	ldrb	r1, [r3, #16]
 8008b10:	4a0d      	ldr	r2, [pc, #52]	; (8008b48 <RemoteConfig::HandleDisplayGet()+0x48>)
 8008b12:	4b0e      	ldr	r3, [pc, #56]	; (8008b4c <RemoteConfig::HandleDisplayGet()+0x4c>)
 8008b14:	4604      	mov	r4, r0
 8008b16:	2900      	cmp	r1, #0
 8008b18:	bf18      	it	ne
 8008b1a:	4613      	movne	r3, r2
 8008b1c:	6828      	ldr	r0, [r5, #0]
 8008b1e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008b22:	4a0b      	ldr	r2, [pc, #44]	; (8008b50 <RemoteConfig::HandleDisplayGet()+0x50>)
 8008b24:	f00b fa86 	bl	8014034 <snprintf>
 8008b28:	f642 1305 	movw	r3, #10501	; 0x2905
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	b282      	uxth	r2, r0
 8008b30:	69a3      	ldr	r3, [r4, #24]
 8008b32:	6829      	ldr	r1, [r5, #0]
 8008b34:	7d20      	ldrb	r0, [r4, #20]
 8008b36:	f007 fe55 	bl	80107e4 <udp_send>
 8008b3a:	b003      	add	sp, #12
 8008b3c:	bd30      	pop	{r4, r5, pc}
 8008b3e:	4770      	bx	lr
 8008b40:	2000ab74 	andcs	sl, r0, r4, ror fp
 8008b44:	200000fc 	strdcs	r0, [r0], -ip
 8008b48:	08016652 	stmdaeq	r1, {r1, r4, r6, r9, sl, sp, lr}
 8008b4c:	0801664f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r9, sl, sp, lr}
 8008b50:	08016656 	stmdaeq	r1, {r1, r2, r4, r6, r9, sl, sp, lr}

08008b54 <RemoteConfig::HandleTftpGet()>:
 8008b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b56:	4604      	mov	r4, r0
 8008b58:	f000 fd9e 	bl	8009698 <RemoteConfig::PlatformHandleTftpGet()>
 8008b5c:	69e3      	ldr	r3, [r4, #28]
 8008b5e:	2b05      	cmp	r3, #5
 8008b60:	d116      	bne.n	8008b90 <RemoteConfig::HandleTftpGet()+0x3c>
 8008b62:	f894 1020 	ldrb.w	r1, [r4, #32]
 8008b66:	4d0b      	ldr	r5, [pc, #44]	; (8008b94 <RemoteConfig::HandleTftpGet()+0x40>)
 8008b68:	4a0b      	ldr	r2, [pc, #44]	; (8008b98 <RemoteConfig::HandleTftpGet()+0x44>)
 8008b6a:	4b0c      	ldr	r3, [pc, #48]	; (8008b9c <RemoteConfig::HandleTftpGet()+0x48>)
 8008b6c:	6828      	ldr	r0, [r5, #0]
 8008b6e:	2900      	cmp	r1, #0
 8008b70:	bf08      	it	eq
 8008b72:	4613      	moveq	r3, r2
 8008b74:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008b78:	4a09      	ldr	r2, [pc, #36]	; (8008ba0 <RemoteConfig::HandleTftpGet()+0x4c>)
 8008b7a:	f00b fa5b 	bl	8014034 <snprintf>
 8008b7e:	f642 1305 	movw	r3, #10501	; 0x2905
 8008b82:	b282      	uxth	r2, r0
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	6829      	ldr	r1, [r5, #0]
 8008b88:	69a3      	ldr	r3, [r4, #24]
 8008b8a:	7d20      	ldrb	r0, [r4, #20]
 8008b8c:	f007 fe2a 	bl	80107e4 <udp_send>
 8008b90:	b003      	add	sp, #12
 8008b92:	bd30      	pop	{r4, r5, pc}
 8008b94:	200000fc 	strdcs	r0, [r0], -ip
 8008b98:	08016652 	stmdaeq	r1, {r1, r4, r6, r9, sl, sp, lr}
 8008b9c:	0801664f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r9, sl, sp, lr}
 8008ba0:	08016662 	stmdaeq	r1, {r1, r5, r6, r9, sl, sp, lr}

08008ba4 <RemoteConfig::HandleVersion()>:
 8008ba4:	69c3      	ldr	r3, [r0, #28]
 8008ba6:	2b08      	cmp	r3, #8
 8008ba8:	d114      	bne.n	8008bd4 <RemoteConfig::HandleVersion()+0x30>
 8008baa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bac:	4d0a      	ldr	r5, [pc, #40]	; (8008bd8 <RemoteConfig::HandleVersion()+0x34>)
 8008bae:	4604      	mov	r4, r0
 8008bb0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008bb4:	4b09      	ldr	r3, [pc, #36]	; (8008bdc <RemoteConfig::HandleVersion()+0x38>)
 8008bb6:	4a0a      	ldr	r2, [pc, #40]	; (8008be0 <RemoteConfig::HandleVersion()+0x3c>)
 8008bb8:	6828      	ldr	r0, [r5, #0]
 8008bba:	f00b fa3b 	bl	8014034 <snprintf>
 8008bbe:	f642 1305 	movw	r3, #10501	; 0x2905
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	b282      	uxth	r2, r0
 8008bc6:	69a3      	ldr	r3, [r4, #24]
 8008bc8:	6829      	ldr	r1, [r5, #0]
 8008bca:	7d20      	ldrb	r0, [r4, #20]
 8008bcc:	f007 fe0a 	bl	80107e4 <udp_send>
 8008bd0:	b003      	add	sp, #12
 8008bd2:	bd30      	pop	{r4, r5, pc}
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	200000fc 	strdcs	r0, [r0], -ip
 8008bdc:	2000ac1a 	andcs	sl, r0, sl, lsl ip
 8008be0:	0801666b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r9, sl, sp, lr}

08008be4 <RemoteConfig::HandleUptime()>:
 8008be4:	7bc3      	ldrb	r3, [r0, #15]
 8008be6:	b1e3      	cbz	r3, 8008c22 <RemoteConfig::HandleUptime()+0x3e>
 8008be8:	4b0e      	ldr	r3, [pc, #56]	; (8008c24 <RemoteConfig::HandleUptime()+0x40>)
 8008bea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	69c3      	ldr	r3, [r0, #28]
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	2b07      	cmp	r3, #7
 8008bf4:	d113      	bne.n	8008c1e <RemoteConfig::HandleUptime()+0x3a>
 8008bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008bfa:	4d0b      	ldr	r5, [pc, #44]	; (8008c28 <RemoteConfig::HandleUptime()+0x44>)
 8008bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c00:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008c04:	4a09      	ldr	r2, [pc, #36]	; (8008c2c <RemoteConfig::HandleUptime()+0x48>)
 8008c06:	6828      	ldr	r0, [r5, #0]
 8008c08:	f00b fa14 	bl	8014034 <snprintf>
 8008c0c:	f642 1305 	movw	r3, #10501	; 0x2905
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	b282      	uxth	r2, r0
 8008c14:	69a3      	ldr	r3, [r4, #24]
 8008c16:	6829      	ldr	r1, [r5, #0]
 8008c18:	7d20      	ldrb	r0, [r4, #20]
 8008c1a:	f007 fde3 	bl	80107e4 <udp_send>
 8008c1e:	b003      	add	sp, #12
 8008c20:	bd30      	pop	{r4, r5, pc}
 8008c22:	4770      	bx	lr
 8008c24:	2000ac7c 	andcs	sl, r0, ip, ror ip
 8008c28:	200000fc 	strdcs	r0, [r0], -ip
 8008c2c:	08016676 	stmdaeq	r1, {r1, r2, r4, r5, r6, r9, sl, sp, lr}

08008c30 <Display::Status(Display7SegmentMessage)>:
 8008c30:	7c43      	ldrb	r3, [r0, #17]
 8008c32:	b1bb      	cbz	r3, 8008c64 <Display::Status(Display7SegmentMessage)+0x34>
 8008c34:	b513      	push	{r0, r1, r4, lr}
 8008c36:	2312      	movs	r3, #18
 8008c38:	43c9      	mvns	r1, r1
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	f88d 3004 	strb.w	r3, [sp, #4]
 8008c40:	7a00      	ldrb	r0, [r0, #8]
 8008c42:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8008c46:	f88d 3005 	strb.w	r3, [sp, #5]
 8008c4a:	f88d 1006 	strb.w	r1, [sp, #6]
 8008c4e:	f00c fa13 	bl	8015078 <gd32_i2c_set_address>
 8008c52:	68e0      	ldr	r0, [r4, #12]
 8008c54:	f00c fa08 	bl	8015068 <gd32_i2c_set_baudrate>
 8008c58:	2103      	movs	r1, #3
 8008c5a:	a801      	add	r0, sp, #4
 8008c5c:	f00c fa12 	bl	8015084 <gd32_i2c_write>
 8008c60:	b002      	add	sp, #8
 8008c62:	bd10      	pop	{r4, pc}
 8008c64:	4770      	bx	lr
	...

08008c68 <RemoteConfig::HandleDisplaySet()>:
 8008c68:	b508      	push	{r3, lr}
 8008c6a:	69c3      	ldr	r3, [r0, #28]
 8008c6c:	2b09      	cmp	r3, #9
 8008c6e:	d10a      	bne.n	8008c86 <RemoteConfig::HandleDisplaySet()+0x1e>
 8008c70:	4b05      	ldr	r3, [pc, #20]	; (8008c88 <RemoteConfig::HandleDisplaySet()+0x20>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	7a59      	ldrb	r1, [r3, #9]
 8008c76:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008c7a:	4259      	negs	r1, r3
 8008c7c:	4159      	adcs	r1, r3
 8008c7e:	4b03      	ldr	r3, [pc, #12]	; (8008c8c <RemoteConfig::HandleDisplaySet()+0x24>)
 8008c80:	6818      	ldr	r0, [r3, #0]
 8008c82:	f7ff fb45 	bl	8008310 <Display::SetSleep(bool)>
 8008c86:	bd08      	pop	{r3, pc}
 8008c88:	200000fc 	strdcs	r0, [r0], -ip
 8008c8c:	2000ab74 	andcs	sl, r0, r4, ror fp

08008c90 <RemoteConfig::HandleTftpSet()>:
 8008c90:	69c3      	ldr	r3, [r0, #28]
 8008c92:	2b06      	cmp	r3, #6
 8008c94:	d127      	bne.n	8008ce6 <RemoteConfig::HandleTftpSet()+0x56>
 8008c96:	b570      	push	{r4, r5, r6, lr}
 8008c98:	4b13      	ldr	r3, [pc, #76]	; (8008ce8 <RemoteConfig::HandleTftpSet()+0x58>)
 8008c9a:	4e14      	ldr	r6, [pc, #80]	; (8008cec <RemoteConfig::HandleTftpSet()+0x5c>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	799b      	ldrb	r3, [r3, #6]
 8008ca2:	6835      	ldr	r5, [r6, #0]
 8008ca4:	2b30      	cmp	r3, #48	; 0x30
 8008ca6:	bf14      	ite	ne
 8008ca8:	2301      	movne	r3, #1
 8008caa:	2300      	moveq	r3, #0
 8008cac:	f880 3020 	strb.w	r3, [r0, #32]
 8008cb0:	d012      	beq.n	8008cd8 <RemoteConfig::HandleTftpSet()+0x48>
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	f7ff fb2b 	bl	8008310 <Display::SetSleep(bool)>
 8008cba:	6835      	ldr	r5, [r6, #0]
 8008cbc:	490c      	ldr	r1, [pc, #48]	; (8008cf0 <RemoteConfig::HandleTftpSet()+0x60>)
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	f7ff fac8 	bl	8008254 <Display::TextStatus(char const*)>
 8008cc4:	f244 0171 	movw	r1, #16497	; 0x4071
 8008cc8:	4628      	mov	r0, r5
 8008cca:	f7ff ffb1 	bl	8008c30 <Display::Status(Display7SegmentMessage)>
 8008cce:	4620      	mov	r0, r4
 8008cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008cd4:	f000 bcd8 	b.w	8009688 <RemoteConfig::PlatformHandleTftpSet()>
 8008cd8:	4906      	ldr	r1, [pc, #24]	; (8008cf4 <RemoteConfig::HandleTftpSet()+0x64>)
 8008cda:	4628      	mov	r0, r5
 8008cdc:	f7ff faba 	bl	8008254 <Display::TextStatus(char const*)>
 8008ce0:	f248 0171 	movw	r1, #32881	; 0x8071
 8008ce4:	e7f0      	b.n	8008cc8 <RemoteConfig::HandleTftpSet()+0x38>
 8008ce6:	4770      	bx	lr
 8008ce8:	200000fc 	strdcs	r0, [r0], -ip
 8008cec:	2000ab74 	andcs	sl, r0, r4, ror fp
 8008cf0:	08016683 	stmdaeq	r1, {r0, r1, r7, r9, sl, sp, lr}
 8008cf4:	08016695 	stmdaeq	r1, {r0, r2, r4, r7, r9, sl, sp, lr}

08008cf8 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 8008cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cfc:	2500      	movs	r5, #0
 8008cfe:	461f      	mov	r7, r3
 8008d00:	6083      	str	r3, [r0, #8]
 8008d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d06:	4690      	mov	r8, r2
 8008d08:	4689      	mov	r9, r1
 8008d0a:	4e12      	ldr	r6, [pc, #72]	; (8008d54 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x5c>)
 8008d0c:	e9c0 3505 	strd	r3, r5, [r0, #20]
 8008d10:	f8df a044 	ldr.w	sl, [pc, #68]	; 8008d58 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x60>
 8008d14:	4b11      	ldr	r3, [pc, #68]	; (8008d5c <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x64>)
 8008d16:	e9c0 1200 	strd	r1, r2, [r0]
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	6018      	str	r0, [r3, #0]
 8008d1e:	4631      	mov	r1, r6
 8008d20:	60c5      	str	r5, [r0, #12]
 8008d22:	8205      	strh	r5, [r0, #16]
 8008d24:	61c5      	str	r5, [r0, #28]
 8008d26:	f880 5020 	strb.w	r5, [r0, #32]
 8008d2a:	f8da 0000 	ldr.w	r0, [sl]
 8008d2e:	f008 fa27 	bl	8011180 <Network::MacAddressCopyTo(unsigned char*)>
 8008d32:	f642 1105 	movw	r1, #10501	; 0x2905
 8008d36:	f8da 0000 	ldr.w	r0, [sl]
 8008d3a:	f886 9006 	strb.w	r9, [r6, #6]
 8008d3e:	f886 8007 	strb.w	r8, [r6, #7]
 8008d42:	7237      	strb	r7, [r6, #8]
 8008d44:	7275      	strb	r5, [r6, #9]
 8008d46:	f008 fa15 	bl	8011174 <Network::Begin(unsigned short)>
 8008d4a:	6160      	str	r0, [r4, #20]
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d52:	bf00      	nop
 8008d54:	20000100 	andcs	r0, r0, r0, lsl #2
 8008d58:	2000a59c 	mulcs	r0, ip, r5
 8008d5c:	20000124 	andcs	r0, r0, r4, lsr #2

08008d60 <RemoteConfig::GetStringNode() const>:
 8008d60:	2012      	movs	r0, #18
 8008d62:	4b03      	ldr	r3, [pc, #12]	; (8008d70 <RemoteConfig::GetStringNode() const+0x10>)
 8008d64:	799a      	ldrb	r2, [r3, #6]
 8008d66:	4b03      	ldr	r3, [pc, #12]	; (8008d74 <RemoteConfig::GetStringNode() const+0x14>)
 8008d68:	fb00 3002 	mla	r0, r0, r2, r3
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	20000100 	andcs	r0, r0, r0, lsl #2
 8008d74:	0801670b 	stmdaeq	r1, {r0, r1, r3, r8, r9, sl, sp, lr}

08008d78 <RemoteConfig::GetStringOutput() const>:
 8008d78:	200c      	movs	r0, #12
 8008d7a:	4b03      	ldr	r3, [pc, #12]	; (8008d88 <RemoteConfig::GetStringOutput() const+0x10>)
 8008d7c:	79da      	ldrb	r2, [r3, #7]
 8008d7e:	4b03      	ldr	r3, [pc, #12]	; (8008d8c <RemoteConfig::GetStringOutput() const+0x14>)
 8008d80:	fb00 3002 	mla	r0, r0, r2, r3
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	20000100 	andcs	r0, r0, r0, lsl #2
 8008d8c:	080167d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, sl, sp, lr}

08008d90 <RemoteConfig::SetDisable(bool)>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4604      	mov	r4, r0
 8008d94:	7b03      	ldrb	r3, [r0, #12]
 8008d96:	b161      	cbz	r1, 8008db2 <RemoteConfig::SetDisable(bool)+0x22>
 8008d98:	b953      	cbnz	r3, 8008db0 <RemoteConfig::SetDisable(bool)+0x20>
 8008d9a:	4b0c      	ldr	r3, [pc, #48]	; (8008dcc <RemoteConfig::SetDisable(bool)+0x3c>)
 8008d9c:	f642 1105 	movw	r1, #10501	; 0x2905
 8008da0:	6818      	ldr	r0, [r3, #0]
 8008da2:	f008 f9ea 	bl	801117a <Network::End(unsigned short)>
 8008da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008daa:	6163      	str	r3, [r4, #20]
 8008dac:	2301      	movs	r3, #1
 8008dae:	7323      	strb	r3, [r4, #12]
 8008db0:	bd38      	pop	{r3, r4, r5, pc}
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0fc      	beq.n	8008db0 <RemoteConfig::SetDisable(bool)+0x20>
 8008db6:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <RemoteConfig::SetDisable(bool)+0x3c>)
 8008db8:	460d      	mov	r5, r1
 8008dba:	6818      	ldr	r0, [r3, #0]
 8008dbc:	f642 1105 	movw	r1, #10501	; 0x2905
 8008dc0:	f008 f9d8 	bl	8011174 <Network::Begin(unsigned short)>
 8008dc4:	7325      	strb	r5, [r4, #12]
 8008dc6:	6160      	str	r0, [r4, #20]
 8008dc8:	e7f2      	b.n	8008db0 <RemoteConfig::SetDisable(bool)+0x20>
 8008dca:	bf00      	nop
 8008dcc:	2000a59c 	mulcs	r0, ip, r5

08008dd0 <RemoteConfig::SetDisplayName(char const*)>:
 8008dd0:	2217      	movs	r2, #23
 8008dd2:	4809      	ldr	r0, [pc, #36]	; (8008df8 <RemoteConfig::SetDisplayName(char const*)+0x28>)
 8008dd4:	b508      	push	{r3, lr}
 8008dd6:	1e4b      	subs	r3, r1, #1
 8008dd8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008ddc:	b911      	cbnz	r1, 8008de4 <RemoteConfig::SetDisplayName(char const*)+0x14>
 8008dde:	f00a fde3 	bl	80139a8 <memset>
 8008de2:	e003      	b.n	8008dec <RemoteConfig::SetDisplayName(char const*)+0x1c>
 8008de4:	3a01      	subs	r2, #1
 8008de6:	f800 1b01 	strb.w	r1, [r0], #1
 8008dea:	d1f5      	bne.n	8008dd8 <RemoteConfig::SetDisplayName(char const*)+0x8>
 8008dec:	2200      	movs	r2, #0
 8008dee:	4b03      	ldr	r3, [pc, #12]	; (8008dfc <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 8008df0:	f883 2020 	strb.w	r2, [r3, #32]
 8008df4:	bd08      	pop	{r3, pc}
 8008df6:	bf00      	nop
 8008df8:	20000109 	andcs	r0, r0, r9, lsl #2
 8008dfc:	20000100 	andcs	r0, r0, r0, lsl #2

08008e00 <RemoteConfig::HandleGet(void*, unsigned int)>:
 8008e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e02:	4604      	mov	r4, r0
 8008e04:	4616      	mov	r6, r2
 8008e06:	460d      	mov	r5, r1
 8008e08:	4f28      	ldr	r7, [pc, #160]	; (8008eac <RemoteConfig::HandleGet(void*, unsigned int)+0xac>)
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	b9a9      	cbnz	r1, 8008e3a <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 8008e0e:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	aa03      	add	r2, sp, #12
 8008e16:	3105      	adds	r1, #5
 8008e18:	9303      	str	r3, [sp, #12]
 8008e1a:	f000 fc0b 	bl	8009634 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 8008e1e:	1e03      	subs	r3, r0, #0
 8008e20:	da1b      	bge.n	8008e5a <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 8008e22:	f642 1305 	movw	r3, #10501	; 0x2905
 8008e26:	220b      	movs	r2, #11
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	4921      	ldr	r1, [pc, #132]	; (8008eb0 <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 8008e2c:	69a3      	ldr	r3, [r4, #24]
 8008e2e:	7d20      	ldrb	r0, [r4, #20]
 8008e30:	f007 fcd8 	bl	80107e4 <udp_send>
 8008e34:	200c      	movs	r0, #12
 8008e36:	b005      	add	sp, #20
 8008e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e3a:	9203      	str	r2, [sp, #12]
 8008e3c:	aa03      	add	r2, sp, #12
 8008e3e:	6039      	str	r1, [r7, #0]
 8008e40:	f000 fbf8 	bl	8009634 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 8008e44:	1e03      	subs	r3, r0, #0
 8008e46:	da08      	bge.n	8008e5a <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 8008e48:	2e0b      	cmp	r6, #11
 8008e4a:	4632      	mov	r2, r6
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	bf28      	it	cs
 8008e50:	220b      	movcs	r2, #11
 8008e52:	4917      	ldr	r1, [pc, #92]	; (8008eb0 <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 8008e54:	f00a fd86 	bl	8013964 <memcpy>
 8008e58:	e7ec      	b.n	8008e34 <RemoteConfig::HandleGet(void*, unsigned int)+0x34>
 8008e5a:	221c      	movs	r2, #28
 8008e5c:	4353      	muls	r3, r2
 8008e5e:	4915      	ldr	r1, [pc, #84]	; (8008eb4 <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 8008e60:	18ca      	adds	r2, r1, r3
 8008e62:	6852      	ldr	r2, [r2, #4]
 8008e64:	58cb      	ldr	r3, [r1, r3]
 8008e66:	ea4f 0c62 	mov.w	ip, r2, asr #1
 8008e6a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8008e6e:	07d2      	lsls	r2, r2, #31
 8008e70:	bf48      	it	mi
 8008e72:	f854 200c 	ldrmi.w	r2, [r4, ip]
 8008e76:	a903      	add	r1, sp, #12
 8008e78:	bf48      	it	mi
 8008e7a:	58d3      	ldrmi	r3, [r2, r3]
 8008e7c:	4798      	blx	r3
 8008e7e:	b95d      	cbnz	r5, 8008e98 <RemoteConfig::HandleGet(void*, unsigned int)+0x98>
 8008e80:	f642 1305 	movw	r3, #10501	; 0x2905
 8008e84:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	69a3      	ldr	r3, [r4, #24]
 8008e8e:	7d20      	ldrb	r0, [r4, #20]
 8008e90:	f007 fca8 	bl	80107e4 <udp_send>
 8008e94:	9803      	ldr	r0, [sp, #12]
 8008e96:	e7ce      	b.n	8008e36 <RemoteConfig::HandleGet(void*, unsigned int)+0x36>
 8008e98:	9a03      	ldr	r2, [sp, #12]
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	42b2      	cmp	r2, r6
 8008e9e:	bf28      	it	cs
 8008ea0:	4632      	movcs	r2, r6
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	f00a fd69 	bl	801397a <memmove>
 8008ea8:	e7f4      	b.n	8008e94 <RemoteConfig::HandleGet(void*, unsigned int)+0x94>
 8008eaa:	bf00      	nop
 8008eac:	200000fc 	strdcs	r0, [r0], -ip
 8008eb0:	080166a8 	stmdaeq	r1, {r3, r5, r7, r9, sl, sp, lr}
 8008eb4:	08016998 	stmdaeq	r1, {r3, r4, r7, r8, fp, sp, lr}

08008eb8 <RemoteConfig::HandleGetNoParams()>:
 8008eb8:	2200      	movs	r2, #0
 8008eba:	4611      	mov	r1, r2
 8008ebc:	f7ff bfa0 	b.w	8008e00 <RemoteConfig::HandleGet(void*, unsigned int)>

08008ec0 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 8008ec0:	b510      	push	{r4, lr}
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	4b07      	ldr	r3, [pc, #28]	; (8008ee4 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x24>)
 8008ec6:	b08a      	sub	sp, #40	; 0x28
 8008ec8:	6819      	ldr	r1, [r3, #0]
 8008eca:	a801      	add	r0, sp, #4
 8008ecc:	f000 fa0e 	bl	80092ec <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8008ed0:	4905      	ldr	r1, [pc, #20]	; (8008ee8 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 8008ed2:	4623      	mov	r3, r4
 8008ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ed8:	6809      	ldr	r1, [r1, #0]
 8008eda:	a801      	add	r0, sp, #4
 8008edc:	f000 fb2a 	bl	8009534 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 8008ee0:	b00a      	add	sp, #40	; 0x28
 8008ee2:	bd10      	pop	{r4, pc}
 8008ee4:	20002ca4 	andcs	r2, r0, r4, lsr #25
 8008ee8:	200000fc 	strdcs	r0, [r0], -ip

08008eec <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 8008eec:	b510      	push	{r4, lr}
 8008eee:	460c      	mov	r4, r1
 8008ef0:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x24>)
 8008ef2:	b09a      	sub	sp, #104	; 0x68
 8008ef4:	6819      	ldr	r1, [r3, #0]
 8008ef6:	a801      	add	r0, sp, #4
 8008ef8:	f008 fbdc 	bl	80116b4 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 8008efc:	4905      	ldr	r1, [pc, #20]	; (8008f14 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 8008efe:	4623      	mov	r3, r4
 8008f00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f04:	6809      	ldr	r1, [r1, #0]
 8008f06:	a801      	add	r0, sp, #4
 8008f08:	f008 fdaa 	bl	8011a60 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 8008f0c:	b01a      	add	sp, #104	; 0x68
 8008f0e:	bd10      	pop	{r4, pc}
 8008f10:	20002c9c 	mulcs	r0, ip, ip
 8008f14:	200000fc 	strdcs	r0, [r0], -ip

08008f18 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
 8008f18:	b510      	push	{r4, lr}
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	4b07      	ldr	r3, [pc, #28]	; (8008f3c <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x24>)
 8008f1e:	b0a4      	sub	sp, #144	; 0x90
 8008f20:	6819      	ldr	r1, [r3, #0]
 8008f22:	a801      	add	r0, sp, #4
 8008f24:	f002 fea6 	bl	800bc74 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8008f28:	4905      	ldr	r1, [pc, #20]	; (8008f40 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x28>)
 8008f2a:	4623      	mov	r3, r4
 8008f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f30:	6809      	ldr	r1, [r1, #0]
 8008f32:	a801      	add	r0, sp, #4
 8008f34:	f003 fa52 	bl	800c3dc <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
 8008f38:	b024      	add	sp, #144	; 0x90
 8008f3a:	bd10      	pop	{r4, pc}
 8008f3c:	20002cac 	andcs	r2, r0, ip, lsr #25
 8008f40:	200000fc 	strdcs	r0, [r0], -ip

08008f44 <RemoteConfig::HandleGetE131Txt(unsigned int&)>:
 8008f44:	b510      	push	{r4, lr}
 8008f46:	460c      	mov	r4, r1
 8008f48:	4b07      	ldr	r3, [pc, #28]	; (8008f68 <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x24>)
 8008f4a:	b088      	sub	sp, #32
 8008f4c:	6819      	ldr	r1, [r3, #0]
 8008f4e:	a801      	add	r0, sp, #4
 8008f50:	f004 fa80 	bl	800d454 <E131Params::E131Params(E131ParamsStore*)>
 8008f54:	4905      	ldr	r1, [pc, #20]	; (8008f6c <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x28>)
 8008f56:	4623      	mov	r3, r4
 8008f58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f5c:	6809      	ldr	r1, [r1, #0]
 8008f5e:	a801      	add	r0, sp, #4
 8008f60:	f004 fd5c 	bl	800da1c <E131Params::Save(char*, unsigned int, unsigned int&)>
 8008f64:	b008      	add	sp, #32
 8008f66:	bd10      	pop	{r4, pc}
 8008f68:	20002cb0 			; <UNDEFINED> instruction: 0x20002cb0
 8008f6c:	200000fc 	strdcs	r0, [r0], -ip

08008f70 <RemoteConfig::HandleGetParamsTxt(unsigned int&)>:
 8008f70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f72:	460c      	mov	r4, r1
 8008f74:	4b07      	ldr	r3, [pc, #28]	; (8008f94 <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x24>)
 8008f76:	4668      	mov	r0, sp
 8008f78:	6819      	ldr	r1, [r3, #0]
 8008f7a:	f005 fa8d 	bl	800e498 <DmxParams::DmxParams(DmxParamsStore*)>
 8008f7e:	4906      	ldr	r1, [pc, #24]	; (8008f98 <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x28>)
 8008f80:	4623      	mov	r3, r4
 8008f82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f86:	4668      	mov	r0, sp
 8008f88:	6809      	ldr	r1, [r1, #0]
 8008f8a:	f005 fba7 	bl	800e6dc <DmxParams::Save(char*, unsigned int, unsigned int&)>
 8008f8e:	b004      	add	sp, #16
 8008f90:	bd10      	pop	{r4, pc}
 8008f92:	bf00      	nop
 8008f94:	20002c98 	mulcs	r0, r8, ip
 8008f98:	200000fc 	strdcs	r0, [r0], -ip

08008f9c <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 8008f9c:	b510      	push	{r4, lr}
 8008f9e:	460c      	mov	r4, r1
 8008fa0:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x24>)
 8008fa2:	b08a      	sub	sp, #40	; 0x28
 8008fa4:	6819      	ldr	r1, [r3, #0]
 8008fa6:	4668      	mov	r0, sp
 8008fa8:	f009 fb10 	bl	80125cc <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8008fac:	4905      	ldr	r1, [pc, #20]	; (8008fc4 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 8008fae:	4623      	mov	r3, r4
 8008fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008fb4:	4668      	mov	r0, sp
 8008fb6:	6809      	ldr	r1, [r1, #0]
 8008fb8:	f009 fc40 	bl	801283c <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 8008fbc:	b00a      	add	sp, #40	; 0x28
 8008fbe:	bd10      	pop	{r4, pc}
 8008fc0:	20002c94 	mulcs	r0, r4, ip
 8008fc4:	200000fc 	strdcs	r0, [r0], -ip

08008fc8 <RemoteConfig::HandleSet(void*, unsigned int)>:
 8008fc8:	b530      	push	{r4, r5, lr}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	4604      	mov	r4, r0
 8008fce:	9201      	str	r2, [sp, #4]
 8008fd0:	b9d1      	cbnz	r1, 8009008 <RemoteConfig::HandleSet(void*, unsigned int)+0x40>
 8008fd2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8008fd6:	9303      	str	r3, [sp, #12]
 8008fd8:	4b19      	ldr	r3, [pc, #100]	; (8009040 <RemoteConfig::HandleSet(void*, unsigned int)+0x78>)
 8008fda:	aa03      	add	r2, sp, #12
 8008fdc:	6819      	ldr	r1, [r3, #0]
 8008fde:	3101      	adds	r1, #1
 8008fe0:	f000 fb28 	bl	8009634 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	db0d      	blt.n	8009004 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 8008fe8:	221c      	movs	r2, #28
 8008fea:	4b16      	ldr	r3, [pc, #88]	; (8009044 <RemoteConfig::HandleSet(void*, unsigned int)+0x7c>)
 8008fec:	fb02 3300 	mla	r3, r2, r0, r3
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	1051      	asrs	r1, r2, #1
 8008ff6:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8008ffa:	07d2      	lsls	r2, r2, #31
 8008ffc:	bf44      	itt	mi
 8008ffe:	5862      	ldrmi	r2, [r4, r1]
 8009000:	58d3      	ldrmi	r3, [r2, r3]
 8009002:	4798      	blx	r3
 8009004:	b005      	add	sp, #20
 8009006:	bd30      	pop	{r4, r5, pc}
 8009008:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800900c:	d8fa      	bhi.n	8009004 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800900e:	4b0e      	ldr	r3, [pc, #56]	; (8009048 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 8009010:	460d      	mov	r5, r1
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	07d9      	lsls	r1, r3, #31
 8009016:	d50b      	bpl.n	8009030 <RemoteConfig::HandleSet(void*, unsigned int)+0x68>
 8009018:	782b      	ldrb	r3, [r5, #0]
 800901a:	2b7b      	cmp	r3, #123	; 0x7b
 800901c:	d108      	bne.n	8009030 <RemoteConfig::HandleSet(void*, unsigned int)+0x68>
 800901e:	1e51      	subs	r1, r2, #1
 8009020:	4628      	mov	r0, r5
 8009022:	2200      	movs	r2, #0
 8009024:	b289      	uxth	r1, r1
 8009026:	f009 fd6b 	bl	8012b00 <properties::convert_json_file(char*, unsigned short, bool)>
 800902a:	1e02      	subs	r2, r0, #0
 800902c:	ddea      	ble.n	8009004 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800902e:	b292      	uxth	r2, r2
 8009030:	4b03      	ldr	r3, [pc, #12]	; (8009040 <RemoteConfig::HandleSet(void*, unsigned int)+0x78>)
 8009032:	61e2      	str	r2, [r4, #28]
 8009034:	4620      	mov	r0, r4
 8009036:	601d      	str	r5, [r3, #0]
 8009038:	aa01      	add	r2, sp, #4
 800903a:	1c69      	adds	r1, r5, #1
 800903c:	e7d0      	b.n	8008fe0 <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 800903e:	bf00      	nop
 8009040:	200000fc 	strdcs	r0, [r0], -ip
 8009044:	08016998 	stmdaeq	r1, {r3, r4, r7, r8, fp, sp, lr}
 8009048:	2000ab70 	andcs	sl, r0, r0, ror fp

0800904c <RemoteConfig::Run()>:
 800904c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009050:	7b05      	ldrb	r5, [r0, #12]
 8009052:	2d00      	cmp	r5, #0
 8009054:	d156      	bne.n	8009104 <RemoteConfig::Run()+0xb8>
 8009056:	4e45      	ldr	r6, [pc, #276]	; (800916c <RemoteConfig::Run()+0x120>)
 8009058:	4604      	mov	r4, r0
 800905a:	f100 0218 	add.w	r2, r0, #24
 800905e:	4631      	mov	r1, r6
 8009060:	7d00      	ldrb	r0, [r0, #20]
 8009062:	f10d 030e 	add.w	r3, sp, #14
 8009066:	f007 fb97 	bl	8010798 <udp_recv2>
 800906a:	2803      	cmp	r0, #3
 800906c:	61e0      	str	r0, [r4, #28]
 800906e:	d949      	bls.n	8009104 <RemoteConfig::Run()+0xb8>
 8009070:	6831      	ldr	r1, [r6, #0]
 8009072:	1e43      	subs	r3, r0, #1
 8009074:	5cca      	ldrb	r2, [r1, r3]
 8009076:	2a0a      	cmp	r2, #10
 8009078:	bf18      	it	ne
 800907a:	4603      	movne	r3, r0
 800907c:	61e3      	str	r3, [r4, #28]
 800907e:	7808      	ldrb	r0, [r1, #0]
 8009080:	283f      	cmp	r0, #63	; 0x3f
 8009082:	d137      	bne.n	80090f4 <RemoteConfig::Run()+0xa8>
 8009084:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8009170 <RemoteConfig::Run()+0x124>
 8009088:	462a      	mov	r2, r5
 800908a:	4667      	mov	r7, ip
 800908c:	3b01      	subs	r3, #1
 800908e:	61e3      	str	r3, [r4, #28]
 8009090:	f89c 500e 	ldrb.w	r5, [ip, #14]
 8009094:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 8009098:	b16d      	cbz	r5, 80090b6 <RemoteConfig::Run()+0x6a>
 800909a:	4283      	cmp	r3, r0
 800909c:	d80d      	bhi.n	80090ba <RemoteConfig::Run()+0x6e>
 800909e:	3201      	adds	r2, #1
 80090a0:	2a09      	cmp	r2, #9
 80090a2:	f10c 0c10 	add.w	ip, ip, #16
 80090a6:	d1f3      	bne.n	8009090 <RemoteConfig::Run()+0x44>
 80090a8:	f642 1305 	movw	r3, #10501	; 0x2905
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	2208      	movs	r2, #8
 80090b0:	69a3      	ldr	r3, [r4, #24]
 80090b2:	4930      	ldr	r1, [pc, #192]	; (8009174 <RemoteConfig::Run()+0x128>)
 80090b4:	e04e      	b.n	8009154 <RemoteConfig::Run()+0x108>
 80090b6:	4283      	cmp	r3, r0
 80090b8:	d1f1      	bne.n	800909e <RemoteConfig::Run()+0x52>
 80090ba:	460e      	mov	r6, r1
 80090bc:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80090c0:	4408      	add	r0, r1
 80090c2:	3d01      	subs	r5, #1
 80090c4:	4286      	cmp	r6, r0
 80090c6:	d10b      	bne.n	80090e0 <RemoteConfig::Run()+0x94>
 80090c8:	0113      	lsls	r3, r2, #4
 80090ca:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 80090ce:	6852      	ldr	r2, [r2, #4]
 80090d0:	58fb      	ldr	r3, [r7, r3]
 80090d2:	1051      	asrs	r1, r2, #1
 80090d4:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80090d8:	07d2      	lsls	r2, r2, #31
 80090da:	d408      	bmi.n	80090ee <RemoteConfig::Run()+0xa2>
 80090dc:	4798      	blx	r3
 80090de:	e011      	b.n	8009104 <RemoteConfig::Run()+0xb8>
 80090e0:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80090e4:	f815 ef01 	ldrb.w	lr, [r5, #1]!
 80090e8:	45f0      	cmp	r8, lr
 80090ea:	d0eb      	beq.n	80090c4 <RemoteConfig::Run()+0x78>
 80090ec:	e7d7      	b.n	800909e <RemoteConfig::Run()+0x52>
 80090ee:	5862      	ldr	r2, [r4, r1]
 80090f0:	58d3      	ldr	r3, [r2, r3]
 80090f2:	e7f3      	b.n	80090dc <RemoteConfig::Run()+0x90>
 80090f4:	7b62      	ldrb	r2, [r4, #13]
 80090f6:	b92a      	cbnz	r2, 8009104 <RemoteConfig::Run()+0xb8>
 80090f8:	2823      	cmp	r0, #35	; 0x23
 80090fa:	d106      	bne.n	800910a <RemoteConfig::Run()+0xbe>
 80090fc:	4611      	mov	r1, r2
 80090fe:	4620      	mov	r0, r4
 8009100:	f7ff ff62 	bl	8008fc8 <RemoteConfig::HandleSet(void*, unsigned int)>
 8009104:	b004      	add	sp, #16
 8009106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800910a:	2821      	cmp	r0, #33	; 0x21
 800910c:	d1fa      	bne.n	8009104 <RemoteConfig::Run()+0xb8>
 800910e:	3b01      	subs	r3, #1
 8009110:	2b05      	cmp	r3, #5
 8009112:	61e3      	str	r3, [r4, #28]
 8009114:	d918      	bls.n	8009148 <RemoteConfig::Run()+0xfc>
 8009116:	460a      	mov	r2, r1
 8009118:	4608      	mov	r0, r1
 800911a:	4d17      	ldr	r5, [pc, #92]	; (8009178 <RemoteConfig::Run()+0x12c>)
 800911c:	f101 0c05 	add.w	ip, r1, #5
 8009120:	4560      	cmp	r0, ip
 8009122:	d01b      	beq.n	800915c <RemoteConfig::Run()+0x110>
 8009124:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009128:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800912c:	42b7      	cmp	r7, r6
 800912e:	d0f7      	beq.n	8009120 <RemoteConfig::Run()+0xd4>
 8009130:	2b08      	cmp	r3, #8
 8009132:	d909      	bls.n	8009148 <RemoteConfig::Run()+0xfc>
 8009134:	4b11      	ldr	r3, [pc, #68]	; (800917c <RemoteConfig::Run()+0x130>)
 8009136:	3108      	adds	r1, #8
 8009138:	428a      	cmp	r2, r1
 800913a:	d015      	beq.n	8009168 <RemoteConfig::Run()+0x11c>
 800913c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009140:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8009144:	4285      	cmp	r5, r0
 8009146:	d0f7      	beq.n	8009138 <RemoteConfig::Run()+0xec>
 8009148:	f642 1305 	movw	r3, #10501	; 0x2905
 800914c:	2208      	movs	r2, #8
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	69a3      	ldr	r3, [r4, #24]
 8009152:	490b      	ldr	r1, [pc, #44]	; (8009180 <RemoteConfig::Run()+0x134>)
 8009154:	7d20      	ldrb	r0, [r4, #20]
 8009156:	f007 fb45 	bl	80107e4 <udp_send>
 800915a:	e7d3      	b.n	8009104 <RemoteConfig::Run()+0xb8>
 800915c:	2300      	movs	r3, #0
 800915e:	4a09      	ldr	r2, [pc, #36]	; (8009184 <RemoteConfig::Run()+0x138>)
 8009160:	011b      	lsls	r3, r3, #4
 8009162:	4620      	mov	r0, r4
 8009164:	58d3      	ldr	r3, [r2, r3]
 8009166:	e7b9      	b.n	80090dc <RemoteConfig::Run()+0x90>
 8009168:	2301      	movs	r3, #1
 800916a:	e7f8      	b.n	800915e <RemoteConfig::Run()+0x112>
 800916c:	200000fc 	strdcs	r0, [r0], -ip
 8009170:	08016864 	stmdaeq	r1, {r2, r5, r6, fp, sp, lr}
 8009174:	080166cc 	stmdaeq	r1, {r2, r3, r6, r7, r9, sl, sp, lr}
 8009178:	080166b4 	stmdaeq	r1, {r2, r4, r5, r7, r9, sl, sp, lr}
 800917c:	080166ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, sl, sp, lr}
 8009180:	080166c3 	stmdaeq	r1, {r0, r1, r6, r7, r9, sl, sp, lr}
 8009184:	080168f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, fp, sp, lr}

08009188 <RemoteConfig::HandleSetRconfig()>:
 8009188:	b510      	push	{r4, lr}
 800918a:	4604      	mov	r4, r0
 800918c:	4b08      	ldr	r3, [pc, #32]	; (80091b0 <RemoteConfig::HandleSetRconfig()+0x28>)
 800918e:	b08a      	sub	sp, #40	; 0x28
 8009190:	6819      	ldr	r1, [r3, #0]
 8009192:	a801      	add	r0, sp, #4
 8009194:	f000 f8aa 	bl	80092ec <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8009198:	4b06      	ldr	r3, [pc, #24]	; (80091b4 <RemoteConfig::HandleSetRconfig()+0x2c>)
 800919a:	69e2      	ldr	r2, [r4, #28]
 800919c:	6819      	ldr	r1, [r3, #0]
 800919e:	a801      	add	r0, sp, #4
 80091a0:	f000 f8ba 	bl	8009318 <RemoteConfigParams::Load(char const*, unsigned int)>
 80091a4:	4621      	mov	r1, r4
 80091a6:	a801      	add	r0, sp, #4
 80091a8:	f000 f9d1 	bl	800954e <RemoteConfigParams::Set(RemoteConfig*)>
 80091ac:	b00a      	add	sp, #40	; 0x28
 80091ae:	bd10      	pop	{r4, pc}
 80091b0:	20002ca4 	andcs	r2, r0, r4, lsr #25
 80091b4:	200000fc 	strdcs	r0, [r0], -ip

080091b8 <RemoteConfig::HandleSetNetworkTxt()>:
 80091b8:	b510      	push	{r4, lr}
 80091ba:	4604      	mov	r4, r0
 80091bc:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 80091be:	b09a      	sub	sp, #104	; 0x68
 80091c0:	6819      	ldr	r1, [r3, #0]
 80091c2:	a801      	add	r0, sp, #4
 80091c4:	f008 fa76 	bl	80116b4 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 80091c8:	4b04      	ldr	r3, [pc, #16]	; (80091dc <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 80091ca:	69e2      	ldr	r2, [r4, #28]
 80091cc:	6819      	ldr	r1, [r3, #0]
 80091ce:	a801      	add	r0, sp, #4
 80091d0:	f008 fa88 	bl	80116e4 <NetworkParams::Load(char const*, unsigned int)>
 80091d4:	b01a      	add	sp, #104	; 0x68
 80091d6:	bd10      	pop	{r4, pc}
 80091d8:	20002c9c 	mulcs	r0, ip, ip
 80091dc:	200000fc 	strdcs	r0, [r0], -ip

080091e0 <RemoteConfig::HandleSetArtnetTxt()>:
 80091e0:	b510      	push	{r4, lr}
 80091e2:	4604      	mov	r4, r0
 80091e4:	4b06      	ldr	r3, [pc, #24]	; (8009200 <RemoteConfig::HandleSetArtnetTxt()+0x20>)
 80091e6:	b0a4      	sub	sp, #144	; 0x90
 80091e8:	6819      	ldr	r1, [r3, #0]
 80091ea:	a801      	add	r0, sp, #4
 80091ec:	f002 fd42 	bl	800bc74 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 80091f0:	4b04      	ldr	r3, [pc, #16]	; (8009204 <RemoteConfig::HandleSetArtnetTxt()+0x24>)
 80091f2:	69e2      	ldr	r2, [r4, #28]
 80091f4:	6819      	ldr	r1, [r3, #0]
 80091f6:	a801      	add	r0, sp, #4
 80091f8:	f002 fd6c 	bl	800bcd4 <ArtNetParams::Load(char const*, unsigned int)>
 80091fc:	b024      	add	sp, #144	; 0x90
 80091fe:	bd10      	pop	{r4, pc}
 8009200:	20002cac 	andcs	r2, r0, ip, lsr #25
 8009204:	200000fc 	strdcs	r0, [r0], -ip

08009208 <RemoteConfig::HandleSetE131Txt()>:
 8009208:	b510      	push	{r4, lr}
 800920a:	4604      	mov	r4, r0
 800920c:	4b06      	ldr	r3, [pc, #24]	; (8009228 <RemoteConfig::HandleSetE131Txt()+0x20>)
 800920e:	b088      	sub	sp, #32
 8009210:	6819      	ldr	r1, [r3, #0]
 8009212:	a801      	add	r0, sp, #4
 8009214:	f004 f91e 	bl	800d454 <E131Params::E131Params(E131ParamsStore*)>
 8009218:	4b04      	ldr	r3, [pc, #16]	; (800922c <RemoteConfig::HandleSetE131Txt()+0x24>)
 800921a:	69e2      	ldr	r2, [r4, #28]
 800921c:	6819      	ldr	r1, [r3, #0]
 800921e:	a801      	add	r0, sp, #4
 8009220:	f004 f936 	bl	800d490 <E131Params::Load(char const*, unsigned int)>
 8009224:	b008      	add	sp, #32
 8009226:	bd10      	pop	{r4, pc}
 8009228:	20002cb0 			; <UNDEFINED> instruction: 0x20002cb0
 800922c:	200000fc 	strdcs	r0, [r0], -ip

08009230 <RemoteConfig::HandleSetParamsTxt()>:
 8009230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009232:	4604      	mov	r4, r0
 8009234:	4b06      	ldr	r3, [pc, #24]	; (8009250 <RemoteConfig::HandleSetParamsTxt()+0x20>)
 8009236:	4668      	mov	r0, sp
 8009238:	6819      	ldr	r1, [r3, #0]
 800923a:	f005 f92d 	bl	800e498 <DmxParams::DmxParams(DmxParamsStore*)>
 800923e:	4b05      	ldr	r3, [pc, #20]	; (8009254 <RemoteConfig::HandleSetParamsTxt()+0x24>)
 8009240:	4668      	mov	r0, sp
 8009242:	69e2      	ldr	r2, [r4, #28]
 8009244:	6819      	ldr	r1, [r3, #0]
 8009246:	f005 f93f 	bl	800e4c8 <DmxParams::Load(char const*, unsigned int)>
 800924a:	b004      	add	sp, #16
 800924c:	bd10      	pop	{r4, pc}
 800924e:	bf00      	nop
 8009250:	20002c98 	mulcs	r0, r8, ip
 8009254:	200000fc 	strdcs	r0, [r0], -ip

08009258 <RemoteConfig::HandleSetDisplayTxt()>:
 8009258:	b510      	push	{r4, lr}
 800925a:	4604      	mov	r4, r0
 800925c:	4b06      	ldr	r3, [pc, #24]	; (8009278 <RemoteConfig::HandleSetDisplayTxt()+0x20>)
 800925e:	b08a      	sub	sp, #40	; 0x28
 8009260:	6819      	ldr	r1, [r3, #0]
 8009262:	4668      	mov	r0, sp
 8009264:	f009 f9b2 	bl	80125cc <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8009268:	4b04      	ldr	r3, [pc, #16]	; (800927c <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 800926a:	4668      	mov	r0, sp
 800926c:	69e2      	ldr	r2, [r4, #28]
 800926e:	6819      	ldr	r1, [r3, #0]
 8009270:	f009 f9c6 	bl	8012600 <DisplayUdfParams::Load(char const*, unsigned int)>
 8009274:	b00a      	add	sp, #40	; 0x28
 8009276:	bd10      	pop	{r4, pc}
 8009278:	20002c94 	mulcs	r0, r4, ip
 800927c:	200000fc 	strdcs	r0, [r0], -ip

08009280 <RemoteConfig::HandleFactory()>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	2400      	movs	r4, #0
 8009284:	4d04      	ldr	r5, [pc, #16]	; (8009298 <RemoteConfig::HandleFactory()+0x18>)
 8009286:	4621      	mov	r1, r4
 8009288:	6828      	ldr	r0, [r5, #0]
 800928a:	3401      	adds	r4, #1
 800928c:	f006 fa22 	bl	800f6d4 <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 8009290:	2c1c      	cmp	r4, #28
 8009292:	d1f8      	bne.n	8009286 <RemoteConfig::HandleFactory()+0x6>
 8009294:	bd38      	pop	{r3, r4, r5, pc}
 8009296:	bf00      	nop
 8009298:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800929c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800929c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800929e:	460b      	mov	r3, r1
 80092a0:	8885      	ldrh	r5, [r0, #4]
 80092a2:	88c1      	ldrh	r1, [r0, #6]
 80092a4:	42a9      	cmp	r1, r5
 80092a6:	d214      	bcs.n	80092d2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 80092a8:	4604      	mov	r4, r0
 80092aa:	6800      	ldr	r0, [r0, #0]
 80092ac:	1a6d      	subs	r5, r5, r1
 80092ae:	4408      	add	r0, r1
 80092b0:	7a21      	ldrb	r1, [r4, #8]
 80092b2:	b91a      	cbnz	r2, 80092bc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 80092b4:	b919      	cbnz	r1, 80092be <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 80092b6:	4a0a      	ldr	r2, [pc, #40]	; (80092e0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 80092b8:	9100      	str	r1, [sp, #0]
 80092ba:	e002      	b.n	80092c2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 80092bc:	b159      	cbz	r1, 80092d6 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 80092be:	9200      	str	r2, [sp, #0]
 80092c0:	4a08      	ldr	r2, [pc, #32]	; (80092e4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 80092c2:	4629      	mov	r1, r5
 80092c4:	f00a feb6 	bl	8014034 <snprintf>
 80092c8:	4285      	cmp	r5, r0
 80092ca:	bfa2      	ittt	ge
 80092cc:	88e3      	ldrhge	r3, [r4, #6]
 80092ce:	181b      	addge	r3, r3, r0
 80092d0:	80e3      	strhge	r3, [r4, #6]
 80092d2:	b003      	add	sp, #12
 80092d4:	bd30      	pop	{r4, r5, pc}
 80092d6:	2201      	movs	r2, #1
 80092d8:	9200      	str	r2, [sp, #0]
 80092da:	4a03      	ldr	r2, [pc, #12]	; (80092e8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 80092dc:	e7f1      	b.n	80092c2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 80092de:	bf00      	nop
 80092e0:	0801691d 	stmdaeq	r1, {r0, r2, r3, r4, r8, fp, sp, lr}
 80092e4:	08016914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr}
 80092e8:	0801691e 	stmdaeq	r1, {r1, r2, r3, r4, r8, fp, sp, lr}

080092ec <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 80092ec:	b510      	push	{r4, lr}
 80092ee:	4604      	mov	r4, r0
 80092f0:	2220      	movs	r2, #32
 80092f2:	f840 1b04 	str.w	r1, [r0], #4
 80092f6:	2100      	movs	r1, #0
 80092f8:	f00a fb56 	bl	80139a8 <memset>
 80092fc:	4620      	mov	r0, r4
 80092fe:	bd10      	pop	{r4, pc}

08009300 <RemoteConfigParams::Load()>:
 8009300:	b508      	push	{r3, lr}
 8009302:	2300      	movs	r3, #0
 8009304:	4601      	mov	r1, r0
 8009306:	6043      	str	r3, [r0, #4]
 8009308:	6800      	ldr	r0, [r0, #0]
 800930a:	b120      	cbz	r0, 8009316 <RemoteConfigParams::Load()+0x16>
 800930c:	6803      	ldr	r3, [r0, #0]
 800930e:	3104      	adds	r1, #4
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	4798      	blx	r3
 8009314:	2001      	movs	r0, #1
 8009316:	bd08      	pop	{r3, pc}

08009318 <RemoteConfigParams::Load(char const*, unsigned int)>:
 8009318:	2300      	movs	r3, #0
 800931a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800931c:	460d      	mov	r5, r1
 800931e:	4616      	mov	r6, r2
 8009320:	4604      	mov	r4, r0
 8009322:	6043      	str	r3, [r0, #4]
 8009324:	4602      	mov	r2, r0
 8009326:	490a      	ldr	r1, [pc, #40]	; (8009350 <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 8009328:	4668      	mov	r0, sp
 800932a:	f009 fd3b 	bl	8012da4 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800932e:	4632      	mov	r2, r6
 8009330:	4629      	mov	r1, r5
 8009332:	4668      	mov	r0, sp
 8009334:	f009 fd3a 	bl	8012dac <ReadConfigFile::Read(char const*, unsigned int)>
 8009338:	4621      	mov	r1, r4
 800933a:	f851 0b04 	ldr.w	r0, [r1], #4
 800933e:	6803      	ldr	r3, [r0, #0]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	4798      	blx	r3
 8009344:	4668      	mov	r0, sp
 8009346:	f009 fd30 	bl	8012daa <ReadConfigFile::~ReadConfigFile()>
 800934a:	b002      	add	sp, #8
 800934c:	bd70      	pop	{r4, r5, r6, pc}
 800934e:	bf00      	nop
 8009350:	08009411 	stmdaeq	r0, {r0, r4, sl, ip, pc}

08009354 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 8009354:	6843      	ldr	r3, [r0, #4]
 8009356:	b111      	cbz	r1, 800935e <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 8009358:	4313      	orrs	r3, r2
 800935a:	6043      	str	r3, [r0, #4]
 800935c:	4770      	bx	lr
 800935e:	ea23 0302 	bic.w	r3, r3, r2
 8009362:	e7fa      	b.n	800935a <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

08009364 <RemoteConfigParams::callbackFunction(char const*)>:
 8009364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009366:	460d      	mov	r5, r1
 8009368:	4604      	mov	r4, r0
 800936a:	4923      	ldr	r1, [pc, #140]	; (80093f8 <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 800936c:	4628      	mov	r0, r5
 800936e:	f10d 0203 	add.w	r2, sp, #3
 8009372:	f009 fdc7 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009376:	b940      	cbnz	r0, 800938a <RemoteConfigParams::callbackFunction(char const*)+0x26>
 8009378:	2201      	movs	r2, #1
 800937a:	4620      	mov	r0, r4
 800937c:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8009380:	b003      	add	sp, #12
 8009382:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009386:	f7ff bfe5 	b.w	8009354 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 800938a:	4628      	mov	r0, r5
 800938c:	491b      	ldr	r1, [pc, #108]	; (80093fc <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 800938e:	f10d 0203 	add.w	r2, sp, #3
 8009392:	f009 fdb7 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009396:	b908      	cbnz	r0, 800939c <RemoteConfigParams::callbackFunction(char const*)+0x38>
 8009398:	2202      	movs	r2, #2
 800939a:	e7ee      	b.n	800937a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800939c:	4628      	mov	r0, r5
 800939e:	4918      	ldr	r1, [pc, #96]	; (8009400 <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 80093a0:	f10d 0203 	add.w	r2, sp, #3
 80093a4:	f009 fdae 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80093a8:	b908      	cbnz	r0, 80093ae <RemoteConfigParams::callbackFunction(char const*)+0x4a>
 80093aa:	2204      	movs	r2, #4
 80093ac:	e7e5      	b.n	800937a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 80093ae:	4628      	mov	r0, r5
 80093b0:	4914      	ldr	r1, [pc, #80]	; (8009404 <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 80093b2:	f10d 0203 	add.w	r2, sp, #3
 80093b6:	f009 fda5 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80093ba:	b908      	cbnz	r0, 80093c0 <RemoteConfigParams::callbackFunction(char const*)+0x5c>
 80093bc:	2208      	movs	r2, #8
 80093be:	e7dc      	b.n	800937a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 80093c0:	4628      	mov	r0, r5
 80093c2:	4911      	ldr	r1, [pc, #68]	; (8009408 <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 80093c4:	f10d 0203 	add.w	r2, sp, #3
 80093c8:	f009 fd9c 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80093cc:	b908      	cbnz	r0, 80093d2 <RemoteConfigParams::callbackFunction(char const*)+0x6e>
 80093ce:	2220      	movs	r2, #32
 80093d0:	e7d3      	b.n	800937a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 80093d2:	2317      	movs	r3, #23
 80093d4:	4628      	mov	r0, r5
 80093d6:	9301      	str	r3, [sp, #4]
 80093d8:	490c      	ldr	r1, [pc, #48]	; (800940c <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 80093da:	ab01      	add	r3, sp, #4
 80093dc:	f104 020c 	add.w	r2, r4, #12
 80093e0:	f009 fd18 	bl	8012e14 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 80093e4:	b930      	cbnz	r0, 80093f4 <RemoteConfigParams::callbackFunction(char const*)+0x90>
 80093e6:	9b01      	ldr	r3, [sp, #4]
 80093e8:	4423      	add	r3, r4
 80093ea:	7318      	strb	r0, [r3, #12]
 80093ec:	6863      	ldr	r3, [r4, #4]
 80093ee:	f043 0310 	orr.w	r3, r3, #16
 80093f2:	6063      	str	r3, [r4, #4]
 80093f4:	b003      	add	sp, #12
 80093f6:	bd30      	pop	{r4, r5, pc}
 80093f8:	08016d25 	stmdaeq	r1, {r0, r2, r5, r8, sl, fp, sp, lr}
 80093fc:	08016d46 	stmdaeq	r1, {r1, r2, r6, r8, sl, fp, sp, lr}
 8009400:	08016d54 	stmdaeq	r1, {r2, r4, r6, r8, sl, fp, sp, lr}
 8009404:	08016d62 	stmdaeq	r1, {r1, r5, r6, r8, sl, fp, sp, lr}
 8009408:	08016d70 	stmdaeq	r1, {r4, r5, r6, r8, sl, fp, sp, lr}
 800940c:	08016d39 	stmdaeq	r1, {r0, r3, r4, r5, r8, sl, fp, sp, lr}

08009410 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 8009410:	f7ff bfa8 	b.w	8009364 <RemoteConfigParams::callbackFunction(char const*)>

08009414 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 8009414:	b570      	push	{r4, r5, r6, lr}
 8009416:	4604      	mov	r4, r0
 8009418:	4615      	mov	r5, r2
 800941a:	461e      	mov	r6, r3
 800941c:	b086      	sub	sp, #24
 800941e:	3004      	adds	r0, #4
 8009420:	2900      	cmp	r1, #0
 8009422:	d041      	beq.n	80094a8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x94>
 8009424:	2220      	movs	r2, #32
 8009426:	f00a faa8 	bl	801397a <memmove>
 800942a:	4633      	mov	r3, r6
 800942c:	462a      	mov	r2, r5
 800942e:	4937      	ldr	r1, [pc, #220]	; (800950c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 8009430:	a803      	add	r0, sp, #12
 8009432:	f009 fc17 	bl	8012c64 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8009436:	6862      	ldr	r2, [r4, #4]
 8009438:	4935      	ldr	r1, [pc, #212]	; (8009510 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800943a:	f002 0201 	and.w	r2, r2, #1
 800943e:	a803      	add	r0, sp, #12
 8009440:	f7ff ff2c 	bl	800929c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8009444:	6862      	ldr	r2, [r4, #4]
 8009446:	4933      	ldr	r1, [pc, #204]	; (8009514 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 8009448:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800944c:	a803      	add	r0, sp, #12
 800944e:	f7ff ff25 	bl	800929c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8009452:	6862      	ldr	r2, [r4, #4]
 8009454:	4930      	ldr	r1, [pc, #192]	; (8009518 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 8009456:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800945a:	a803      	add	r0, sp, #12
 800945c:	f7ff ff1e 	bl	800929c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8009460:	6862      	ldr	r2, [r4, #4]
 8009462:	492e      	ldr	r1, [pc, #184]	; (800951c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 8009464:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8009468:	a803      	add	r0, sp, #12
 800946a:	f7ff ff17 	bl	800929c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800946e:	6862      	ldr	r2, [r4, #4]
 8009470:	492b      	ldr	r1, [pc, #172]	; (8009520 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 8009472:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8009476:	a803      	add	r0, sp, #12
 8009478:	f7ff ff10 	bl	800929c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800947c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8009480:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8009484:	6862      	ldr	r2, [r4, #4]
 8009486:	42ab      	cmp	r3, r5
 8009488:	d223      	bcs.n	80094d2 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbe>
 800948a:	9803      	ldr	r0, [sp, #12]
 800948c:	06d2      	lsls	r2, r2, #27
 800948e:	4418      	add	r0, r3
 8009490:	eba5 0503 	sub.w	r5, r5, r3
 8009494:	f104 040c 	add.w	r4, r4, #12
 8009498:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800949c:	d40b      	bmi.n	80094b6 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 800949e:	b95b      	cbnz	r3, 80094b8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa4>
 80094a0:	4b20      	ldr	r3, [pc, #128]	; (8009524 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 80094a2:	4a21      	ldr	r2, [pc, #132]	; (8009528 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 80094a4:	9400      	str	r4, [sp, #0]
 80094a6:	e00a      	b.n	80094be <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	4601      	mov	r1, r0
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	4618      	mov	r0, r3
 80094b0:	68d2      	ldr	r2, [r2, #12]
 80094b2:	4790      	blx	r2
 80094b4:	e7b9      	b.n	800942a <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 80094b6:	b32b      	cbz	r3, 8009504 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf0>
 80094b8:	4b1a      	ldr	r3, [pc, #104]	; (8009524 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 80094ba:	4a1c      	ldr	r2, [pc, #112]	; (800952c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 80094bc:	9400      	str	r4, [sp, #0]
 80094be:	4629      	mov	r1, r5
 80094c0:	f00a fdb8 	bl	8014034 <snprintf>
 80094c4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80094c8:	4285      	cmp	r5, r0
 80094ca:	bfa4      	itt	ge
 80094cc:	181b      	addge	r3, r3, r0
 80094ce:	f8ad 3012 	strhge.w	r3, [sp, #18]
 80094d2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80094d6:	b17b      	cbz	r3, 80094f8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe4>
 80094d8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80094dc:	9b03      	ldr	r3, [sp, #12]
 80094de:	4413      	add	r3, r2
 80094e0:	227d      	movs	r2, #125	; 0x7d
 80094e2:	f803 2c01 	strb.w	r2, [r3, #-1]
 80094e6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80094ea:	9903      	ldr	r1, [sp, #12]
 80094ec:	54ca      	strb	r2, [r1, r3]
 80094ee:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80094f2:	3301      	adds	r3, #1
 80094f4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80094f8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80094fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094fe:	601a      	str	r2, [r3, #0]
 8009500:	b006      	add	sp, #24
 8009502:	bd70      	pop	{r4, r5, r6, pc}
 8009504:	4b07      	ldr	r3, [pc, #28]	; (8009524 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 8009506:	4a0a      	ldr	r2, [pc, #40]	; (8009530 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 8009508:	9400      	str	r4, [sp, #0]
 800950a:	e7d8      	b.n	80094be <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800950c:	08016d2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, sl, fp, sp, lr}
 8009510:	08016d25 	stmdaeq	r1, {r0, r2, r5, r8, sl, fp, sp, lr}
 8009514:	08016d46 	stmdaeq	r1, {r1, r2, r6, r8, sl, fp, sp, lr}
 8009518:	08016d54 	stmdaeq	r1, {r2, r4, r6, r8, sl, fp, sp, lr}
 800951c:	08016d62 	stmdaeq	r1, {r1, r5, r6, r8, sl, fp, sp, lr}
 8009520:	08016d70 	stmdaeq	r1, {r4, r5, r6, r8, sl, fp, sp, lr}
 8009524:	08016d39 	stmdaeq	r1, {r0, r3, r4, r5, r8, sl, fp, sp, lr}
 8009528:	08016930 	stmdaeq	r1, {r4, r5, r8, fp, sp, lr}
 800952c:	08016925 	stmdaeq	r1, {r0, r2, r5, r8, fp, sp, lr}
 8009530:	08016931 	stmdaeq	r1, {r0, r4, r5, r8, fp, sp, lr}

08009534 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 8009534:	b513      	push	{r0, r1, r4, lr}
 8009536:	6804      	ldr	r4, [r0, #0]
 8009538:	b914      	cbnz	r4, 8009540 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800953a:	601c      	str	r4, [r3, #0]
 800953c:	b002      	add	sp, #8
 800953e:	bd10      	pop	{r4, pc}
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	4613      	mov	r3, r2
 8009544:	460a      	mov	r2, r1
 8009546:	2100      	movs	r1, #0
 8009548:	f7ff ff64 	bl	8009414 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 800954c:	e7f6      	b.n	800953c <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800954e <RemoteConfigParams::Set(RemoteConfig*)>:
 800954e:	b538      	push	{r3, r4, r5, lr}
 8009550:	460c      	mov	r4, r1
 8009552:	4605      	mov	r5, r0
 8009554:	6841      	ldr	r1, [r0, #4]
 8009556:	4620      	mov	r0, r4
 8009558:	f001 0101 	and.w	r1, r1, #1
 800955c:	f7ff fc18 	bl	8008d90 <RemoteConfig::SetDisable(bool)>
 8009560:	686b      	ldr	r3, [r5, #4]
 8009562:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8009566:	7362      	strb	r2, [r4, #13]
 8009568:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800956c:	73a2      	strb	r2, [r4, #14]
 800956e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8009572:	73e2      	strb	r2, [r4, #15]
 8009574:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8009578:	06db      	lsls	r3, r3, #27
 800957a:	7422      	strb	r2, [r4, #16]
 800957c:	d506      	bpl.n	800958c <RemoteConfigParams::Set(RemoteConfig*)+0x3e>
 800957e:	4620      	mov	r0, r4
 8009580:	f105 010c 	add.w	r1, r5, #12
 8009584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009588:	f7ff bc22 	b.w	8008dd0 <RemoteConfig::SetDisplayName(char const*)>
 800958c:	bd38      	pop	{r3, r4, r5, pc}

0800958e <RemoteConfigParams::Dump()>:
 800958e:	4770      	bx	lr

08009590 <RemoteConfig::HandleReboot()>:
 8009590:	7b83      	ldrb	r3, [r0, #14]
 8009592:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009594:	2b00      	cmp	r3, #0
 8009596:	d03c      	beq.n	8009612 <RemoteConfig::HandleReboot()+0x82>
 8009598:	2301      	movs	r3, #1
 800959a:	4c1f      	ldr	r4, [pc, #124]	; (8009618 <RemoteConfig::HandleReboot()+0x88>)
 800959c:	7443      	strb	r3, [r0, #17]
 800959e:	6825      	ldr	r5, [r4, #0]
 80095a0:	69a8      	ldr	r0, [r5, #24]
 80095a2:	b138      	cbz	r0, 80095b4 <RemoteConfig::HandleReboot()+0x24>
 80095a4:	2100      	movs	r1, #0
 80095a6:	6803      	ldr	r3, [r0, #0]
 80095a8:	7429      	strb	r1, [r5, #16]
 80095aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ac:	4798      	blx	r3
 80095ae:	4b1b      	ldr	r3, [pc, #108]	; (800961c <RemoteConfig::HandleReboot()+0x8c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	606b      	str	r3, [r5, #4]
 80095b4:	4d1a      	ldr	r5, [pc, #104]	; (8009620 <RemoteConfig::HandleReboot()+0x90>)
 80095b6:	6828      	ldr	r0, [r5, #0]
 80095b8:	f006 f910 	bl	800f7dc <SpiFlashStore::Flash()>
 80095bc:	2800      	cmp	r0, #0
 80095be:	d1fa      	bne.n	80095b6 <RemoteConfig::HandleReboot()+0x26>
 80095c0:	4b18      	ldr	r3, [pc, #96]	; (8009624 <RemoteConfig::HandleReboot()+0x94>)
 80095c2:	6818      	ldr	r0, [r3, #0]
 80095c4:	f007 fdce 	bl	8011164 <Network::Shutdown()>
 80095c8:	4817      	ldr	r0, [pc, #92]	; (8009628 <RemoteConfig::HandleReboot()+0x98>)
 80095ca:	f00a fd0b 	bl	8013fe4 <printf>
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	6998      	ldr	r0, [r3, #24]
 80095d2:	b110      	cbz	r0, 80095da <RemoteConfig::HandleReboot()+0x4a>
 80095d4:	6803      	ldr	r3, [r0, #0]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	4798      	blx	r3
 80095da:	6824      	ldr	r4, [r4, #0]
 80095dc:	4913      	ldr	r1, [pc, #76]	; (800962c <RemoteConfig::HandleReboot()+0x9c>)
 80095de:	4620      	mov	r0, r4
 80095e0:	f7fe fe38 	bl	8008254 <Display::TextStatus(char const*)>
 80095e4:	7c63      	ldrb	r3, [r4, #17]
 80095e6:	b183      	cbz	r3, 800960a <RemoteConfig::HandleReboot()+0x7a>
 80095e8:	f64b 7312 	movw	r3, #48914	; 0xbf12
 80095ec:	f8ad 3004 	strh.w	r3, [sp, #4]
 80095f0:	23bf      	movs	r3, #191	; 0xbf
 80095f2:	7a20      	ldrb	r0, [r4, #8]
 80095f4:	f88d 3006 	strb.w	r3, [sp, #6]
 80095f8:	f00b fd3e 	bl	8015078 <gd32_i2c_set_address>
 80095fc:	68e0      	ldr	r0, [r4, #12]
 80095fe:	f00b fd33 	bl	8015068 <gd32_i2c_set_baudrate>
 8009602:	2103      	movs	r1, #3
 8009604:	a801      	add	r0, sp, #4
 8009606:	f00b fd3d 	bl	8015084 <gd32_i2c_write>
 800960a:	4b09      	ldr	r3, [pc, #36]	; (8009630 <RemoteConfig::HandleReboot()+0xa0>)
 800960c:	6818      	ldr	r0, [r3, #0]
 800960e:	f00a f8b5 	bl	801377c <Hardware::Reboot()>
 8009612:	b003      	add	sp, #12
 8009614:	bd30      	pop	{r4, r5, pc}
 8009616:	bf00      	nop
 8009618:	2000ab74 	andcs	sl, r0, r4, ror fp
 800961c:	2000ac7c 	andcs	sl, r0, ip, ror ip
 8009620:	20002c8c 	andcs	r2, r0, ip, lsl #25
 8009624:	2000a59c 	mulcs	r0, ip, r5
 8009628:	08016938 	stmdaeq	r1, {r3, r4, r5, r8, fp, sp, lr}
 800962c:	08016947 	stmdaeq	r1, {r0, r1, r2, r6, r8, fp, sp, lr}
 8009630:	2000ac64 	andcs	sl, r0, r4, ror #24

08009634 <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 8009634:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009638:	2000      	movs	r0, #0
 800963a:	4d12      	ldr	r5, [pc, #72]	; (8009684 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 800963c:	f10d 0c04 	add.w	ip, sp, #4
 8009640:	6814      	ldr	r4, [r2, #0]
 8009642:	7d2b      	ldrb	r3, [r5, #20]
 8009644:	692e      	ldr	r6, [r5, #16]
 8009646:	42a3      	cmp	r3, r4
 8009648:	bf34      	ite	cc
 800964a:	4664      	movcc	r4, ip
 800964c:	4614      	movcs	r4, r2
 800964e:	9301      	str	r3, [sp, #4]
 8009650:	6827      	ldr	r7, [r4, #0]
 8009652:	460c      	mov	r4, r1
 8009654:	3e01      	subs	r6, #1
 8009656:	440f      	add	r7, r1
 8009658:	42bc      	cmp	r4, r7
 800965a:	d101      	bne.n	8009660 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x2c>
 800965c:	6013      	str	r3, [r2, #0]
 800965e:	e00c      	b.n	800967a <RemoteConfig::GetIndex(void const*, unsigned int&)+0x46>
 8009660:	f894 8000 	ldrb.w	r8, [r4]
 8009664:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 8009668:	45f0      	cmp	r8, lr
 800966a:	d009      	beq.n	8009680 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 800966c:	3001      	adds	r0, #1
 800966e:	2806      	cmp	r0, #6
 8009670:	f105 051c 	add.w	r5, r5, #28
 8009674:	d1e4      	bne.n	8009640 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 8009676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800967a:	b002      	add	sp, #8
 800967c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009680:	3401      	adds	r4, #1
 8009682:	e7e9      	b.n	8009658 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 8009684:	08016998 	stmdaeq	r1, {r3, r4, r7, r8, fp, sp, lr}

08009688 <RemoteConfig::PlatformHandleTftpSet()>:
 8009688:	f890 1020 	ldrb.w	r1, [r0, #32]
 800968c:	b109      	cbz	r1, 8009692 <RemoteConfig::PlatformHandleTftpSet()+0xa>
 800968e:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 8009692:	2002      	movs	r0, #2
 8009694:	f00a becc 	b.w	8014430 <bkp_data_write>

08009698 <RemoteConfig::PlatformHandleTftpGet()>:
 8009698:	b510      	push	{r4, lr}
 800969a:	4604      	mov	r4, r0
 800969c:	2002      	movs	r0, #2
 800969e:	f00a fedd 	bl	801445c <bkp_data_read>
 80096a2:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 80096a6:	1ac3      	subs	r3, r0, r3
 80096a8:	4258      	negs	r0, r3
 80096aa:	4158      	adcs	r0, r3
 80096ac:	f884 0020 	strb.w	r0, [r4, #32]
 80096b0:	bd10      	pop	{r4, pc}

080096b2 <strcmp>:
 80096b2:	1e43      	subs	r3, r0, #1
 80096b4:	3901      	subs	r1, #1
 80096b6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80096ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80096be:	4290      	cmp	r0, r2
 80096c0:	d001      	beq.n	80096c6 <strcmp+0x14>
 80096c2:	1a80      	subs	r0, r0, r2
 80096c4:	e001      	b.n	80096ca <strcmp+0x18>
 80096c6:	2800      	cmp	r0, #0
 80096c8:	d1f5      	bne.n	80096b6 <strcmp+0x4>
 80096ca:	4770      	bx	lr

080096cc <strcasecmp>:
 80096cc:	b530      	push	{r4, r5, lr}
 80096ce:	1e42      	subs	r2, r0, #1
 80096d0:	3901      	subs	r1, #1
 80096d2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80096d6:	4604      	mov	r4, r0
 80096d8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80096dc:	2b19      	cmp	r3, #25
 80096de:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80096e2:	bf98      	it	ls
 80096e4:	f100 0420 	addls.w	r4, r0, #32
 80096e8:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 80096ec:	2d19      	cmp	r5, #25
 80096ee:	bf98      	it	ls
 80096f0:	3320      	addls	r3, #32
 80096f2:	42a3      	cmp	r3, r4
 80096f4:	d001      	beq.n	80096fa <strcasecmp+0x2e>
 80096f6:	1ae0      	subs	r0, r4, r3
 80096f8:	e001      	b.n	80096fe <strcasecmp+0x32>
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d1e9      	bne.n	80096d2 <strcasecmp+0x6>
 80096fe:	bd30      	pop	{r4, r5, pc}

08009700 <PropertiesConfig::EnableJSON(bool)>:
 8009700:	4a04      	ldr	r2, [pc, #16]	; (8009714 <PropertiesConfig::EnableJSON(bool)+0x14>)
 8009702:	7813      	ldrb	r3, [r2, #0]
 8009704:	b118      	cbz	r0, 800970e <PropertiesConfig::EnableJSON(bool)+0xe>
 8009706:	f043 0301 	orr.w	r3, r3, #1
 800970a:	7013      	strb	r3, [r2, #0]
 800970c:	4770      	bx	lr
 800970e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009712:	e7fa      	b.n	800970a <PropertiesConfig::EnableJSON(bool)+0xa>
 8009714:	2000ab70 	andcs	sl, r0, r0, ror fp

08009718 <HttpDaemon::HttpDaemon()>:
 8009718:	4a08      	ldr	r2, [pc, #32]	; (800973c <HttpDaemon::HttpDaemon()+0x24>)
 800971a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800971e:	6002      	str	r2, [r0, #0]
 8009720:	2200      	movs	r2, #0
 8009722:	f44f 7c02 	mov.w	ip, #520	; 0x208
 8009726:	e9c0 1204 	strd	r1, r2, [r0, #16]
 800972a:	2102      	movs	r1, #2
 800972c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8009730:	e9c0 c106 	strd	ip, r1, [r0, #24]
 8009734:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8009738:	60c2      	str	r2, [r0, #12]
 800973a:	4770      	bx	lr
 800973c:	08016ca5 	stmdaeq	r1, {r0, r2, r5, r7, sl, fp, sp, lr}

08009740 <HttpDaemon::Start()>:
 8009740:	4b04      	ldr	r3, [pc, #16]	; (8009754 <HttpDaemon::Start()+0x14>)
 8009742:	b510      	push	{r4, lr}
 8009744:	2150      	movs	r1, #80	; 0x50
 8009746:	4604      	mov	r4, r0
 8009748:	6818      	ldr	r0, [r3, #0]
 800974a:	f007 ffa7 	bl	801169c <Network::TcpBegin(unsigned short)>
 800974e:	6120      	str	r0, [r4, #16]
 8009750:	bd10      	pop	{r4, pc}
 8009752:	bf00      	nop
 8009754:	2000a59c 	mulcs	r0, ip, r5

08009758 <HttpDaemon::ParseMethod(char*)>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4604      	mov	r4, r0
 800975c:	4608      	mov	r0, r1
 800975e:	491a      	ldr	r1, [pc, #104]	; (80097c8 <HttpDaemon::ParseMethod(char*)+0x70>)
 8009760:	f00a fc98 	bl	8014094 <strtok>
 8009764:	4605      	mov	r5, r0
 8009766:	b360      	cbz	r0, 80097c2 <HttpDaemon::ParseMethod(char*)+0x6a>
 8009768:	4918      	ldr	r1, [pc, #96]	; (80097cc <HttpDaemon::ParseMethod(char*)+0x74>)
 800976a:	f7ff ffa2 	bl	80096b2 <strcmp>
 800976e:	b128      	cbz	r0, 800977c <HttpDaemon::ParseMethod(char*)+0x24>
 8009770:	4628      	mov	r0, r5
 8009772:	4917      	ldr	r1, [pc, #92]	; (80097d0 <HttpDaemon::ParseMethod(char*)+0x78>)
 8009774:	f7ff ff9d 	bl	80096b2 <strcmp>
 8009778:	bb18      	cbnz	r0, 80097c2 <HttpDaemon::ParseMethod(char*)+0x6a>
 800977a:	2001      	movs	r0, #1
 800977c:	61e0      	str	r0, [r4, #28]
 800977e:	4912      	ldr	r1, [pc, #72]	; (80097c8 <HttpDaemon::ParseMethod(char*)+0x70>)
 8009780:	2000      	movs	r0, #0
 8009782:	f00a fc87 	bl	8014094 <strtok>
 8009786:	b910      	cbnz	r0, 800978e <HttpDaemon::ParseMethod(char*)+0x36>
 8009788:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800978c:	bd38      	pop	{r3, r4, r5, pc}
 800978e:	6060      	str	r0, [r4, #4]
 8009790:	4910      	ldr	r1, [pc, #64]	; (80097d4 <HttpDaemon::ParseMethod(char*)+0x7c>)
 8009792:	2000      	movs	r0, #0
 8009794:	f00a fc7e 	bl	8014094 <strtok>
 8009798:	2800      	cmp	r0, #0
 800979a:	d0f5      	beq.n	8009788 <HttpDaemon::ParseMethod(char*)+0x30>
 800979c:	490e      	ldr	r1, [pc, #56]	; (80097d8 <HttpDaemon::ParseMethod(char*)+0x80>)
 800979e:	f7ff ff88 	bl	80096b2 <strcmp>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d1f0      	bne.n	8009788 <HttpDaemon::ParseMethod(char*)+0x30>
 80097a6:	490d      	ldr	r1, [pc, #52]	; (80097dc <HttpDaemon::ParseMethod(char*)+0x84>)
 80097a8:	f00a fc74 	bl	8014094 <strtok>
 80097ac:	2800      	cmp	r0, #0
 80097ae:	d0eb      	beq.n	8009788 <HttpDaemon::ParseMethod(char*)+0x30>
 80097b0:	490b      	ldr	r1, [pc, #44]	; (80097e0 <HttpDaemon::ParseMethod(char*)+0x88>)
 80097b2:	f7ff ff7e 	bl	80096b2 <strcmp>
 80097b6:	2800      	cmp	r0, #0
 80097b8:	f240 10f9 	movw	r0, #505	; 0x1f9
 80097bc:	bf08      	it	eq
 80097be:	20c8      	moveq	r0, #200	; 0xc8
 80097c0:	e7e4      	b.n	800978c <HttpDaemon::ParseMethod(char*)+0x34>
 80097c2:	f240 10f5 	movw	r0, #501	; 0x1f5
 80097c6:	e7e1      	b.n	800978c <HttpDaemon::ParseMethod(char*)+0x34>
 80097c8:	080182ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r9, pc}
 80097cc:	08016a40 	stmdaeq	r1, {r6, r9, fp, sp, lr}
 80097d0:	08016a44 	stmdaeq	r1, {r2, r6, r9, fp, sp, lr}
 80097d4:	08016aae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r9, fp, sp, lr}
 80097d8:	08016a49 	stmdaeq	r1, {r0, r3, r6, r9, fp, sp, lr}
 80097dc:	08016a4e 	stmdaeq	r1, {r1, r2, r3, r6, r9, fp, sp, lr}
 80097e0:	08016a51 	stmdaeq	r1, {r0, r4, r6, r9, fp, sp, lr}

080097e4 <HttpDaemon::ParseHeaderField(char*)>:
 80097e4:	b538      	push	{r3, r4, r5, lr}
 80097e6:	4605      	mov	r5, r0
 80097e8:	4608      	mov	r0, r1
 80097ea:	491d      	ldr	r1, [pc, #116]	; (8009860 <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 80097ec:	f00a fc52 	bl	8014094 <strtok>
 80097f0:	4604      	mov	r4, r0
 80097f2:	b910      	cbnz	r0, 80097fa <HttpDaemon::ParseHeaderField(char*)+0x16>
 80097f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80097f8:	bd38      	pop	{r3, r4, r5, pc}
 80097fa:	491a      	ldr	r1, [pc, #104]	; (8009864 <HttpDaemon::ParseHeaderField(char*)+0x80>)
 80097fc:	f7ff ff66 	bl	80096cc <strcasecmp>
 8009800:	b970      	cbnz	r0, 8009820 <HttpDaemon::ParseHeaderField(char*)+0x3c>
 8009802:	4919      	ldr	r1, [pc, #100]	; (8009868 <HttpDaemon::ParseHeaderField(char*)+0x84>)
 8009804:	f00a fc46 	bl	8014094 <strtok>
 8009808:	2800      	cmp	r0, #0
 800980a:	d0f3      	beq.n	80097f4 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800980c:	4917      	ldr	r1, [pc, #92]	; (800986c <HttpDaemon::ParseHeaderField(char*)+0x88>)
 800980e:	f7ff ff50 	bl	80096b2 <strcmp>
 8009812:	b108      	cbz	r0, 8009818 <HttpDaemon::ParseHeaderField(char*)+0x34>
 8009814:	20c8      	movs	r0, #200	; 0xc8
 8009816:	e7ef      	b.n	80097f8 <HttpDaemon::ParseHeaderField(char*)+0x14>
 8009818:	2301      	movs	r3, #1
 800981a:	f885 3020 	strb.w	r3, [r5, #32]
 800981e:	e7f9      	b.n	8009814 <HttpDaemon::ParseHeaderField(char*)+0x30>
 8009820:	4620      	mov	r0, r4
 8009822:	4913      	ldr	r1, [pc, #76]	; (8009870 <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 8009824:	f7ff ff52 	bl	80096cc <strcasecmp>
 8009828:	4604      	mov	r4, r0
 800982a:	2800      	cmp	r0, #0
 800982c:	d1f2      	bne.n	8009814 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800982e:	4911      	ldr	r1, [pc, #68]	; (8009874 <HttpDaemon::ParseHeaderField(char*)+0x90>)
 8009830:	f00a fc30 	bl	8014094 <strtok>
 8009834:	2800      	cmp	r0, #0
 8009836:	d0dd      	beq.n	80097f4 <HttpDaemon::ParseHeaderField(char*)+0x10>
 8009838:	1e42      	subs	r2, r0, #1
 800983a:	4623      	mov	r3, r4
 800983c:	200a      	movs	r0, #10
 800983e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8009842:	b909      	cbnz	r1, 8009848 <HttpDaemon::ParseHeaderField(char*)+0x64>
 8009844:	84eb      	strh	r3, [r5, #38]	; 0x26
 8009846:	e7e5      	b.n	8009814 <HttpDaemon::ParseHeaderField(char*)+0x30>
 8009848:	3930      	subs	r1, #48	; 0x30
 800984a:	2909      	cmp	r1, #9
 800984c:	d8d2      	bhi.n	80097f4 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800984e:	fb00 1303 	mla	r3, r0, r3, r1
 8009852:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8009856:	d9f2      	bls.n	800983e <HttpDaemon::ParseHeaderField(char*)+0x5a>
 8009858:	f240 109d 	movw	r0, #413	; 0x19d
 800985c:	e7cc      	b.n	80097f8 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800985e:	bf00      	nop
 8009860:	08016a55 	stmdaeq	r1, {r0, r2, r4, r6, r9, fp, sp, lr}
 8009864:	08016a57 	stmdaeq	r1, {r0, r1, r2, r4, r6, r9, fp, sp, lr}
 8009868:	08016a64 	stmdaeq	r1, {r2, r5, r6, r9, fp, sp, lr}
 800986c:	08016a67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r9, fp, sp, lr}
 8009870:	08016a78 	stmdaeq	r1, {r3, r4, r5, r6, r9, fp, sp, lr}
 8009874:	080182ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r9, pc}

08009878 <HttpDaemon::ParseRequest()>:
 8009878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987a:	2400      	movs	r4, #0
 800987c:	4605      	mov	r5, r0
 800987e:	4622      	mov	r2, r4
 8009880:	4626      	mov	r6, r4
 8009882:	68c1      	ldr	r1, [r0, #12]
 8009884:	f880 4020 	strb.w	r4, [r0, #32]
 8009888:	6244      	str	r4, [r0, #36]	; 0x24
 800988a:	8aab      	ldrh	r3, [r5, #20]
 800988c:	42a3      	cmp	r3, r4
 800988e:	d91d      	bls.n	80098cc <HttpDaemon::ParseRequest()+0x54>
 8009890:	68eb      	ldr	r3, [r5, #12]
 8009892:	5d18      	ldrb	r0, [r3, r4]
 8009894:	280a      	cmp	r0, #10
 8009896:	d10e      	bne.n	80098b6 <HttpDaemon::ParseRequest()+0x3e>
 8009898:	4423      	add	r3, r4
 800989a:	f803 6c01 	strb.w	r6, [r3, #-1]
 800989e:	1c57      	adds	r7, r2, #1
 80098a0:	b962      	cbnz	r2, 80098bc <HttpDaemon::ParseRequest()+0x44>
 80098a2:	4628      	mov	r0, r5
 80098a4:	f7ff ff58 	bl	8009758 <HttpDaemon::ParseMethod(char*)>
 80098a8:	28c8      	cmp	r0, #200	; 0xc8
 80098aa:	d110      	bne.n	80098ce <HttpDaemon::ParseRequest()+0x56>
 80098ac:	463a      	mov	r2, r7
 80098ae:	68e9      	ldr	r1, [r5, #12]
 80098b0:	3401      	adds	r4, #1
 80098b2:	b2a4      	uxth	r4, r4
 80098b4:	4421      	add	r1, r4
 80098b6:	3401      	adds	r4, #1
 80098b8:	b2a4      	uxth	r4, r4
 80098ba:	e7e6      	b.n	800988a <HttpDaemon::ParseRequest()+0x12>
 80098bc:	7808      	ldrb	r0, [r1, #0]
 80098be:	b968      	cbnz	r0, 80098dc <HttpDaemon::ParseRequest()+0x64>
 80098c0:	696b      	ldr	r3, [r5, #20]
 80098c2:	3b01      	subs	r3, #1
 80098c4:	1b1b      	subs	r3, r3, r4
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	84ab      	strh	r3, [r5, #36]	; 0x24
 80098ca:	b90b      	cbnz	r3, 80098d0 <HttpDaemon::ParseRequest()+0x58>
 80098cc:	20c8      	movs	r0, #200	; 0xc8
 80098ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098d0:	68ea      	ldr	r2, [r5, #12]
 80098d2:	3401      	adds	r4, #1
 80098d4:	4414      	add	r4, r2
 80098d6:	60ac      	str	r4, [r5, #8]
 80098d8:	54e0      	strb	r0, [r4, r3]
 80098da:	e7f7      	b.n	80098cc <HttpDaemon::ParseRequest()+0x54>
 80098dc:	4628      	mov	r0, r5
 80098de:	f7ff ff81 	bl	80097e4 <HttpDaemon::ParseHeaderField(char*)>
 80098e2:	e7e1      	b.n	80098a8 <HttpDaemon::ParseRequest()+0x30>

080098e4 <HttpDaemon::HandleGetTxt()>:
 80098e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e8:	6846      	ldr	r6, [r0, #4]
 80098ea:	4607      	mov	r7, r0
 80098ec:	1db4      	adds	r4, r6, #6
 80098ee:	4622      	mov	r2, r4
 80098f0:	4613      	mov	r3, r2
 80098f2:	7819      	ldrb	r1, [r3, #0]
 80098f4:	3201      	adds	r2, #1
 80098f6:	2900      	cmp	r1, #0
 80098f8:	d1fa      	bne.n	80098f0 <HttpDaemon::HandleGetTxt()+0xc>
 80098fa:	1b1b      	subs	r3, r3, r4
 80098fc:	2b04      	cmp	r3, #4
 80098fe:	d803      	bhi.n	8009908 <HttpDaemon::HandleGetTxt()+0x24>
 8009900:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009908:	3b04      	subs	r3, #4
 800990a:	4914      	ldr	r1, [pc, #80]	; (800995c <HttpDaemon::HandleGetTxt()+0x78>)
 800990c:	18e0      	adds	r0, r4, r3
 800990e:	f7ff fed0 	bl	80096b2 <strcmp>
 8009912:	2800      	cmp	r0, #0
 8009914:	d1f4      	bne.n	8009900 <HttpDaemon::HandleGetTxt()+0x1c>
 8009916:	4b12      	ldr	r3, [pc, #72]	; (8009960 <HttpDaemon::HandleGetTxt()+0x7c>)
 8009918:	2001      	movs	r0, #1
 800991a:	f893 8000 	ldrb.w	r8, [r3]
 800991e:	f7ff feef 	bl	8009700 <PropertiesConfig::EnableJSON(bool)>
 8009922:	4b10      	ldr	r3, [pc, #64]	; (8009964 <HttpDaemon::HandleGetTxt()+0x80>)
 8009924:	f240 529b 	movw	r2, #1435	; 0x59b
 8009928:	4621      	mov	r1, r4
 800992a:	6818      	ldr	r0, [r3, #0]
 800992c:	f7ff fa68 	bl	8008e00 <RemoteConfig::HandleGet(void*, unsigned int)>
 8009930:	4605      	mov	r5, r0
 8009932:	f008 0801 	and.w	r8, r8, #1
 8009936:	4640      	mov	r0, r8
 8009938:	f7ff fee2 	bl	8009700 <PropertiesConfig::EnableJSON(bool)>
 800993c:	2d00      	cmp	r5, #0
 800993e:	d0df      	beq.n	8009900 <HttpDaemon::HandleGetTxt()+0x1c>
 8009940:	847d      	strh	r5, [r7, #34]	; 0x22
 8009942:	4b09      	ldr	r3, [pc, #36]	; (8009968 <HttpDaemon::HandleGetTxt()+0x84>)
 8009944:	3506      	adds	r5, #6
 8009946:	442e      	add	r6, r5
 8009948:	42b4      	cmp	r4, r6
 800994a:	d101      	bne.n	8009950 <HttpDaemon::HandleGetTxt()+0x6c>
 800994c:	20c8      	movs	r0, #200	; 0xc8
 800994e:	e7d9      	b.n	8009904 <HttpDaemon::HandleGetTxt()+0x20>
 8009950:	f814 2b01 	ldrb.w	r2, [r4], #1
 8009954:	f803 2b01 	strb.w	r2, [r3], #1
 8009958:	e7f6      	b.n	8009948 <HttpDaemon::HandleGetTxt()+0x64>
 800995a:	bf00      	nop
 800995c:	08016988 	stmdaeq	r1, {r3, r7, r8, fp, sp, lr}
 8009960:	2000ab70 	andcs	sl, r0, r0, ror fp
 8009964:	20000124 	andcs	r0, r0, r4, lsr #2
 8009968:	20000128 	andcs	r0, r0, r8, lsr #2

0800996c <HttpDaemon::HandleGet()>:
 800996c:	b570      	push	{r4, r5, r6, lr}
 800996e:	6845      	ldr	r5, [r0, #4]
 8009970:	4604      	mov	r4, r0
 8009972:	493e      	ldr	r1, [pc, #248]	; (8009a6c <HttpDaemon::HandleGet()+0x100>)
 8009974:	4628      	mov	r0, r5
 8009976:	f7ff fe9c 	bl	80096b2 <strcmp>
 800997a:	b120      	cbz	r0, 8009986 <HttpDaemon::HandleGet()+0x1a>
 800997c:	4628      	mov	r0, r5
 800997e:	493c      	ldr	r1, [pc, #240]	; (8009a70 <HttpDaemon::HandleGet()+0x104>)
 8009980:	f7ff fe97 	bl	80096b2 <strcmp>
 8009984:	b950      	cbnz	r0, 800999c <HttpDaemon::HandleGet()+0x30>
 8009986:	4b3b      	ldr	r3, [pc, #236]	; (8009a74 <HttpDaemon::HandleGet()+0x108>)
 8009988:	493b      	ldr	r1, [pc, #236]	; (8009a78 <HttpDaemon::HandleGet()+0x10c>)
 800998a:	483c      	ldr	r0, [pc, #240]	; (8009a7c <HttpDaemon::HandleGet()+0x110>)
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	f000 fa67 	bl	8009e60 <get_file_content(char const*, char*)>
 8009992:	2800      	cmp	r0, #0
 8009994:	dd2f      	ble.n	80099f6 <HttpDaemon::HandleGet()+0x8a>
 8009996:	8460      	strh	r0, [r4, #34]	; 0x22
 8009998:	20c8      	movs	r0, #200	; 0xc8
 800999a:	bd70      	pop	{r4, r5, r6, pc}
 800999c:	4628      	mov	r0, r5
 800999e:	4938      	ldr	r1, [pc, #224]	; (8009a80 <HttpDaemon::HandleGet()+0x114>)
 80099a0:	f7ff fe87 	bl	80096b2 <strcmp>
 80099a4:	b920      	cbnz	r0, 80099b0 <HttpDaemon::HandleGet()+0x44>
 80099a6:	4b37      	ldr	r3, [pc, #220]	; (8009a84 <HttpDaemon::HandleGet()+0x118>)
 80099a8:	4933      	ldr	r1, [pc, #204]	; (8009a78 <HttpDaemon::HandleGet()+0x10c>)
 80099aa:	4837      	ldr	r0, [pc, #220]	; (8009a88 <HttpDaemon::HandleGet()+0x11c>)
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	e7ee      	b.n	800998e <HttpDaemon::HandleGet()+0x22>
 80099b0:	4628      	mov	r0, r5
 80099b2:	4936      	ldr	r1, [pc, #216]	; (8009a8c <HttpDaemon::HandleGet()+0x120>)
 80099b4:	f7ff fe7d 	bl	80096b2 <strcmp>
 80099b8:	b190      	cbz	r0, 80099e0 <HttpDaemon::HandleGet()+0x74>
 80099ba:	4a35      	ldr	r2, [pc, #212]	; (8009a90 <HttpDaemon::HandleGet()+0x124>)
 80099bc:	1e6b      	subs	r3, r5, #1
 80099be:	1d69      	adds	r1, r5, #5
 80099c0:	428b      	cmp	r3, r1
 80099c2:	d112      	bne.n	80099ea <HttpDaemon::HandleGet()+0x7e>
 80099c4:	4b33      	ldr	r3, [pc, #204]	; (8009a94 <HttpDaemon::HandleGet()+0x128>)
 80099c6:	3506      	adds	r5, #6
 80099c8:	4628      	mov	r0, r5
 80099ca:	4933      	ldr	r1, [pc, #204]	; (8009a98 <HttpDaemon::HandleGet()+0x12c>)
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	f7ff fe70 	bl	80096b2 <strcmp>
 80099d2:	b998      	cbnz	r0, 80099fc <HttpDaemon::HandleGet()+0x90>
 80099d4:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 80099d8:	4827      	ldr	r0, [pc, #156]	; (8009a78 <HttpDaemon::HandleGet()+0x10c>)
 80099da:	f000 f9c9 	bl	8009d70 <remoteconfig::json_get_list(char*, unsigned short)>
 80099de:	e7d8      	b.n	8009992 <HttpDaemon::HandleGet()+0x26>
 80099e0:	4b2e      	ldr	r3, [pc, #184]	; (8009a9c <HttpDaemon::HandleGet()+0x130>)
 80099e2:	4925      	ldr	r1, [pc, #148]	; (8009a78 <HttpDaemon::HandleGet()+0x10c>)
 80099e4:	482e      	ldr	r0, [pc, #184]	; (8009aa0 <HttpDaemon::HandleGet()+0x134>)
 80099e6:	6023      	str	r3, [r4, #0]
 80099e8:	e7d1      	b.n	800998e <HttpDaemon::HandleGet()+0x22>
 80099ea:	f812 0b01 	ldrb.w	r0, [r2], #1
 80099ee:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 80099f2:	4286      	cmp	r6, r0
 80099f4:	d0e4      	beq.n	80099c0 <HttpDaemon::HandleGet()+0x54>
 80099f6:	f44f 70ca 	mov.w	r0, #404	; 0x194
 80099fa:	e7ce      	b.n	800999a <HttpDaemon::HandleGet()+0x2e>
 80099fc:	4628      	mov	r0, r5
 80099fe:	4929      	ldr	r1, [pc, #164]	; (8009aa4 <HttpDaemon::HandleGet()+0x138>)
 8009a00:	f7ff fe57 	bl	80096b2 <strcmp>
 8009a04:	b928      	cbnz	r0, 8009a12 <HttpDaemon::HandleGet()+0xa6>
 8009a06:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8009a0a:	481b      	ldr	r0, [pc, #108]	; (8009a78 <HttpDaemon::HandleGet()+0x10c>)
 8009a0c:	f000 f9e4 	bl	8009dd8 <remoteconfig::json_get_version(char*, unsigned short)>
 8009a10:	e7bf      	b.n	8009992 <HttpDaemon::HandleGet()+0x26>
 8009a12:	4628      	mov	r0, r5
 8009a14:	4924      	ldr	r1, [pc, #144]	; (8009aa8 <HttpDaemon::HandleGet()+0x13c>)
 8009a16:	f7ff fe4c 	bl	80096b2 <strcmp>
 8009a1a:	b948      	cbnz	r0, 8009a30 <HttpDaemon::HandleGet()+0xc4>
 8009a1c:	4b23      	ldr	r3, [pc, #140]	; (8009aac <HttpDaemon::HandleGet()+0x140>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	7bdb      	ldrb	r3, [r3, #15]
 8009a22:	b303      	cbz	r3, 8009a66 <HttpDaemon::HandleGet()+0xfa>
 8009a24:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8009a28:	4813      	ldr	r0, [pc, #76]	; (8009a78 <HttpDaemon::HandleGet()+0x10c>)
 8009a2a:	f000 f9f1 	bl	8009e10 <remoteconfig::json_get_uptime(char*, unsigned short)>
 8009a2e:	e7b0      	b.n	8009992 <HttpDaemon::HandleGet()+0x26>
 8009a30:	4628      	mov	r0, r5
 8009a32:	491f      	ldr	r1, [pc, #124]	; (8009ab0 <HttpDaemon::HandleGet()+0x144>)
 8009a34:	f7ff fe3d 	bl	80096b2 <strcmp>
 8009a38:	b928      	cbnz	r0, 8009a46 <HttpDaemon::HandleGet()+0xda>
 8009a3a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8009a3e:	480e      	ldr	r0, [pc, #56]	; (8009a78 <HttpDaemon::HandleGet()+0x10c>)
 8009a40:	f000 f9f6 	bl	8009e30 <remoteconfig::json_get_display(char*, unsigned short)>
 8009a44:	e7a5      	b.n	8009992 <HttpDaemon::HandleGet()+0x26>
 8009a46:	4628      	mov	r0, r5
 8009a48:	491a      	ldr	r1, [pc, #104]	; (8009ab4 <HttpDaemon::HandleGet()+0x148>)
 8009a4a:	f7ff fe32 	bl	80096b2 <strcmp>
 8009a4e:	b928      	cbnz	r0, 8009a5c <HttpDaemon::HandleGet()+0xf0>
 8009a50:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8009a54:	4808      	ldr	r0, [pc, #32]	; (8009a78 <HttpDaemon::HandleGet()+0x10c>)
 8009a56:	f000 f9fb 	bl	8009e50 <remoteconfig::json_get_directory(char*, unsigned short)>
 8009a5a:	e79a      	b.n	8009992 <HttpDaemon::HandleGet()+0x26>
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a62:	f7ff bf3f 	b.w	80098e4 <HttpDaemon::HandleGetTxt()>
 8009a66:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009a6a:	e796      	b.n	800999a <HttpDaemon::HandleGet()+0x2e>
 8009a6c:	08016aae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r9, fp, sp, lr}
 8009a70:	08016a87 	stmdaeq	r1, {r0, r1, r2, r7, r9, fp, sp, lr}
 8009a74:	08016ca5 	stmdaeq	r1, {r0, r2, r5, r7, sl, fp, sp, lr}
 8009a78:	20000128 	andcs	r0, r0, r8, lsr #2
 8009a7c:	08016a88 	stmdaeq	r1, {r3, r7, r9, fp, sp, lr}
 8009a80:	08016a93 	stmdaeq	r1, {r0, r1, r4, r7, r9, fp, sp, lr}
 8009a84:	08016cc5 	stmdaeq	r1, {r0, r2, r6, r7, sl, fp, sp, lr}
 8009a88:	08016a94 	stmdaeq	r1, {r2, r4, r7, r9, fp, sp, lr}
 8009a8c:	08016a9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r9, fp, sp, lr}
 8009a90:	08016aa9 	stmdaeq	r1, {r0, r3, r5, r7, r9, fp, sp, lr}
 8009a94:	08016d05 	stmdaeq	r1, {r0, r2, r8, sl, fp, sp, lr}
 8009a98:	08016ab0 	stmdaeq	r1, {r4, r5, r7, r9, fp, sp, lr}
 8009a9c:	08016ce5 	stmdaeq	r1, {r0, r2, r5, r6, r7, sl, fp, sp, lr}
 8009aa0:	08016aa0 	stmdaeq	r1, {r5, r7, r9, fp, sp, lr}
 8009aa4:	08016ab5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r9, fp, sp, lr}
 8009aa8:	08016abd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r9, fp, sp, lr}
 8009aac:	20000124 	andcs	r0, r0, r4, lsr #2
 8009ab0:	08016ac4 	stmdaeq	r1, {r2, r6, r7, r9, fp, sp, lr}
 8009ab4:	08016acc 	stmdaeq	r1, {r2, r3, r6, r7, r9, fp, sp, lr}

08009ab8 <HttpDaemon::HandlePost(bool)>:
 8009ab8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009aba:	4604      	mov	r4, r0
 8009abc:	2900      	cmp	r1, #0
 8009abe:	f040 808a 	bne.w	8009bd6 <HttpDaemon::HandlePost(bool)+0x11e>
 8009ac2:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d05a      	beq.n	8009b80 <HttpDaemon::HandlePost(bool)+0xc8>
 8009aca:	6845      	ldr	r5, [r0, #4]
 8009acc:	4944      	ldr	r1, [pc, #272]	; (8009be0 <HttpDaemon::HandlePost(bool)+0x128>)
 8009ace:	4628      	mov	r0, r5
 8009ad0:	f7ff fdef 	bl	80096b2 <strcmp>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	bf0c      	ite	eq
 8009ad8:	2301      	moveq	r3, #1
 8009ada:	2300      	movne	r3, #0
 8009adc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8009ae0:	d052      	beq.n	8009b88 <HttpDaemon::HandlePost(bool)+0xd0>
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	493f      	ldr	r1, [pc, #252]	; (8009be4 <HttpDaemon::HandlePost(bool)+0x12c>)
 8009ae6:	f7ff fde4 	bl	80096b2 <strcmp>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d04c      	beq.n	8009b88 <HttpDaemon::HandlePost(bool)+0xd0>
 8009aee:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8009af2:	e047      	b.n	8009b84 <HttpDaemon::HandlePost(bool)+0xcc>
 8009af4:	493c      	ldr	r1, [pc, #240]	; (8009be8 <HttpDaemon::HandlePost(bool)+0x130>)
 8009af6:	68a0      	ldr	r0, [r4, #8]
 8009af8:	f10d 0207 	add.w	r2, sp, #7
 8009afc:	f009 fa02 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009b00:	b9d8      	cbnz	r0, 8009b3a <HttpDaemon::HandlePost(bool)+0x82>
 8009b02:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8009b06:	4b39      	ldr	r3, [pc, #228]	; (8009bec <HttpDaemon::HandlePost(bool)+0x134>)
 8009b08:	fab6 f186 	clz	r1, r6
 8009b0c:	681d      	ldr	r5, [r3, #0]
 8009b0e:	0949      	lsrs	r1, r1, #5
 8009b10:	69a8      	ldr	r0, [r5, #24]
 8009b12:	b138      	cbz	r0, 8009b24 <HttpDaemon::HandlePost(bool)+0x6c>
 8009b14:	6803      	ldr	r3, [r0, #0]
 8009b16:	7429      	strb	r1, [r5, #16]
 8009b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1a:	4798      	blx	r3
 8009b1c:	b116      	cbz	r6, 8009b24 <HttpDaemon::HandlePost(bool)+0x6c>
 8009b1e:	4b34      	ldr	r3, [pc, #208]	; (8009bf0 <HttpDaemon::HandlePost(bool)+0x138>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	606b      	str	r3, [r5, #4]
 8009b24:	4b33      	ldr	r3, [pc, #204]	; (8009bf4 <HttpDaemon::HandlePost(bool)+0x13c>)
 8009b26:	f240 519f 	movw	r1, #1439	; 0x59f
 8009b2a:	4a33      	ldr	r2, [pc, #204]	; (8009bf8 <HttpDaemon::HandlePost(bool)+0x140>)
 8009b2c:	4833      	ldr	r0, [pc, #204]	; (8009bfc <HttpDaemon::HandlePost(bool)+0x144>)
 8009b2e:	6023      	str	r3, [r4, #0]
 8009b30:	f00a fa80 	bl	8014034 <snprintf>
 8009b34:	8460      	strh	r0, [r4, #34]	; 0x22
 8009b36:	20c8      	movs	r0, #200	; 0xc8
 8009b38:	e024      	b.n	8009b84 <HttpDaemon::HandlePost(bool)+0xcc>
 8009b3a:	4931      	ldr	r1, [pc, #196]	; (8009c00 <HttpDaemon::HandlePost(bool)+0x148>)
 8009b3c:	68a0      	ldr	r0, [r4, #8]
 8009b3e:	f10d 0207 	add.w	r2, sp, #7
 8009b42:	f009 f9df 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009b46:	b9d8      	cbnz	r0, 8009b80 <HttpDaemon::HandlePost(bool)+0xc8>
 8009b48:	4b2e      	ldr	r3, [pc, #184]	; (8009c04 <HttpDaemon::HandlePost(bool)+0x14c>)
 8009b4a:	6818      	ldr	r0, [r3, #0]
 8009b4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009b50:	b11b      	cbz	r3, 8009b5a <HttpDaemon::HandlePost(bool)+0xa2>
 8009b52:	2104      	movs	r1, #4
 8009b54:	f009 fd70 	bl	8013638 <LedBlink::SetMode(ledblink::Mode)>
 8009b58:	e7e4      	b.n	8009b24 <HttpDaemon::HandlePost(bool)+0x6c>
 8009b5a:	2102      	movs	r1, #2
 8009b5c:	e7fa      	b.n	8009b54 <HttpDaemon::HandlePost(bool)+0x9c>
 8009b5e:	4b2a      	ldr	r3, [pc, #168]	; (8009c08 <HttpDaemon::HandlePost(bool)+0x150>)
 8009b60:	2001      	movs	r0, #1
 8009b62:	781d      	ldrb	r5, [r3, #0]
 8009b64:	f7ff fdcc 	bl	8009700 <PropertiesConfig::EnableJSON(bool)>
 8009b68:	4b28      	ldr	r3, [pc, #160]	; (8009c0c <HttpDaemon::HandlePost(bool)+0x154>)
 8009b6a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8009b6c:	6818      	ldr	r0, [r3, #0]
 8009b6e:	68a1      	ldr	r1, [r4, #8]
 8009b70:	f005 0501 	and.w	r5, r5, #1
 8009b74:	f7ff fa28 	bl	8008fc8 <RemoteConfig::HandleSet(void*, unsigned int)>
 8009b78:	4628      	mov	r0, r5
 8009b7a:	f7ff fdc1 	bl	8009700 <PropertiesConfig::EnableJSON(bool)>
 8009b7e:	e7d1      	b.n	8009b24 <HttpDaemon::HandlePost(bool)+0x6c>
 8009b80:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009b84:	b002      	add	sp, #8
 8009b86:	bd70      	pop	{r4, r5, r6, pc}
 8009b88:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8009b8a:	6962      	ldr	r2, [r4, #20]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	dbd2      	blt.n	8009b36 <HttpDaemon::HandlePost(bool)+0x7e>
 8009b90:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d0cf      	beq.n	8009b36 <HttpDaemon::HandlePost(bool)+0x7e>
 8009b96:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0df      	beq.n	8009b5e <HttpDaemon::HandlePost(bool)+0xa6>
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8009ba2:	68a0      	ldr	r0, [r4, #8]
 8009ba4:	f008 ffac 	bl	8012b00 <properties::convert_json_file(char*, unsigned short, bool)>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	dde9      	ble.n	8009b80 <HttpDaemon::HandlePost(bool)+0xc8>
 8009bac:	4918      	ldr	r1, [pc, #96]	; (8009c10 <HttpDaemon::HandlePost(bool)+0x158>)
 8009bae:	68a0      	ldr	r0, [r4, #8]
 8009bb0:	f10d 0207 	add.w	r2, sp, #7
 8009bb4:	f009 f9a6 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d19b      	bne.n	8009af4 <HttpDaemon::HandlePost(bool)+0x3c>
 8009bbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d0af      	beq.n	8009b24 <HttpDaemon::HandlePost(bool)+0x6c>
 8009bc4:	4b11      	ldr	r3, [pc, #68]	; (8009c0c <HttpDaemon::HandlePost(bool)+0x154>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	7b9b      	ldrb	r3, [r3, #14]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d0d8      	beq.n	8009b80 <HttpDaemon::HandlePost(bool)+0xc8>
 8009bce:	4b11      	ldr	r3, [pc, #68]	; (8009c14 <HttpDaemon::HandlePost(bool)+0x15c>)
 8009bd0:	6818      	ldr	r0, [r3, #0]
 8009bd2:	f009 fdd3 	bl	801377c <Hardware::Reboot()>
 8009bd6:	68c3      	ldr	r3, [r0, #12]
 8009bd8:	6083      	str	r3, [r0, #8]
 8009bda:	6943      	ldr	r3, [r0, #20]
 8009bdc:	8483      	strh	r3, [r0, #36]	; 0x24
 8009bde:	e7da      	b.n	8009b96 <HttpDaemon::HandlePost(bool)+0xde>
 8009be0:	08016ad6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r9, fp, sp, lr}
 8009be4:	08016a72 	stmdaeq	r1, {r1, r4, r5, r6, r9, fp, sp, lr}
 8009be8:	08016ac4 	stmdaeq	r1, {r2, r6, r7, r9, fp, sp, lr}
 8009bec:	2000ab74 	andcs	sl, r0, r4, ror fp
 8009bf0:	2000ac7c 	andcs	sl, r0, ip, ror ip
 8009bf4:	08016ca5 	stmdaeq	r1, {r0, r2, r5, r7, sl, fp, sp, lr}
 8009bf8:	08016af3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, fp, sp, lr}
 8009bfc:	20000128 	andcs	r0, r0, r8, lsr #2
 8009c00:	08016aea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r9, fp, sp, lr}
 8009c04:	2000ac60 	andcs	sl, r0, r0, ror #24
 8009c08:	2000ab70 	andcs	sl, r0, r0, ror fp
 8009c0c:	20000124 	andcs	r0, r0, r4, lsr #2
 8009c10:	08016ae3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r9, fp, sp, lr}
 8009c14:	2000ac64 	andcs	sl, r0, r4, ror #24

08009c18 <HttpDaemon::Run()>:
 8009c18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009c1a:	4e46      	ldr	r6, [pc, #280]	; (8009d34 <HttpDaemon::Run()+0x11c>)
 8009c1c:	4604      	mov	r4, r0
 8009c1e:	6901      	ldr	r1, [r0, #16]
 8009c20:	f100 020c 	add.w	r2, r0, #12
 8009c24:	6830      	ldr	r0, [r6, #0]
 8009c26:	f007 fd3c 	bl	80116a2 <Network::TcpRead(int, unsigned char const**)>
 8009c2a:	6160      	str	r0, [r4, #20]
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d05b      	beq.n	8009ce8 <HttpDaemon::Run()+0xd0>
 8009c30:	69a3      	ldr	r3, [r4, #24]
 8009c32:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8009c36:	d159      	bne.n	8009cec <HttpDaemon::Run()+0xd4>
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f7ff fe1d 	bl	8009878 <HttpDaemon::ParseRequest()>
 8009c3e:	28c8      	cmp	r0, #200	; 0xc8
 8009c40:	61a0      	str	r0, [r4, #24]
 8009c42:	d106      	bne.n	8009c52 <HttpDaemon::Run()+0x3a>
 8009c44:	69e3      	ldr	r3, [r4, #28]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d142      	bne.n	8009cd0 <HttpDaemon::Run()+0xb8>
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f7ff fe8e 	bl	800996c <HttpDaemon::HandleGet()>
 8009c50:	61a0      	str	r0, [r4, #24]
 8009c52:	69a3      	ldr	r3, [r4, #24]
 8009c54:	2bc8      	cmp	r3, #200	; 0xc8
 8009c56:	d06b      	beq.n	8009d30 <HttpDaemon::Run()+0x118>
 8009c58:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 8009c5c:	d05e      	beq.n	8009d1c <HttpDaemon::Run()+0x104>
 8009c5e:	dc4e      	bgt.n	8009cfe <HttpDaemon::Run()+0xe6>
 8009c60:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8009c64:	d05c      	beq.n	8009d20 <HttpDaemon::Run()+0x108>
 8009c66:	f240 129d 	movw	r2, #413	; 0x19d
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d05a      	beq.n	8009d24 <HttpDaemon::Run()+0x10c>
 8009c6e:	4d32      	ldr	r5, [pc, #200]	; (8009d38 <HttpDaemon::Run()+0x120>)
 8009c70:	4a32      	ldr	r2, [pc, #200]	; (8009d3c <HttpDaemon::Run()+0x124>)
 8009c72:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009c76:	bf18      	it	ne
 8009c78:	4615      	movne	r5, r2
 8009c7a:	4a31      	ldr	r2, [pc, #196]	; (8009d40 <HttpDaemon::Run()+0x128>)
 8009c7c:	f240 519f 	movw	r1, #1439	; 0x59f
 8009c80:	6022      	str	r2, [r4, #0]
 8009c82:	e9cd 5500 	strd	r5, r5, [sp]
 8009c86:	4a2f      	ldr	r2, [pc, #188]	; (8009d44 <HttpDaemon::Run()+0x12c>)
 8009c88:	482f      	ldr	r0, [pc, #188]	; (8009d48 <HttpDaemon::Run()+0x130>)
 8009c8a:	f00a f9d3 	bl	8014034 <snprintf>
 8009c8e:	8460      	strh	r0, [r4, #34]	; 0x22
 8009c90:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8009c92:	f240 519f 	movw	r1, #1439	; 0x59f
 8009c96:	9303      	str	r3, [sp, #12]
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	4a2c      	ldr	r2, [pc, #176]	; (8009d4c <HttpDaemon::Run()+0x134>)
 8009c9c:	9302      	str	r3, [sp, #8]
 8009c9e:	4b2c      	ldr	r3, [pc, #176]	; (8009d50 <HttpDaemon::Run()+0x138>)
 8009ca0:	68e0      	ldr	r0, [r4, #12]
 8009ca2:	e9cd 5300 	strd	r5, r3, [sp]
 8009ca6:	69a3      	ldr	r3, [r4, #24]
 8009ca8:	f00a f9c4 	bl	8014034 <snprintf>
 8009cac:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8009cb0:	b283      	uxth	r3, r0
 8009cb2:	6830      	ldr	r0, [r6, #0]
 8009cb4:	f007 fcf9 	bl	80116aa <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 8009cb8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8009cba:	4a23      	ldr	r2, [pc, #140]	; (8009d48 <HttpDaemon::Run()+0x130>)
 8009cbc:	6921      	ldr	r1, [r4, #16]
 8009cbe:	6830      	ldr	r0, [r6, #0]
 8009cc0:	f007 fcf3 	bl	80116aa <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 8009cc4:	f44f 7202 	mov.w	r2, #520	; 0x208
 8009cc8:	2302      	movs	r3, #2
 8009cca:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8009cce:	e00b      	b.n	8009ce8 <HttpDaemon::Run()+0xd0>
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d1be      	bne.n	8009c52 <HttpDaemon::Run()+0x3a>
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f7ff feee 	bl	8009ab8 <HttpDaemon::HandlePost(bool)>
 8009cdc:	28c8      	cmp	r0, #200	; 0xc8
 8009cde:	61a0      	str	r0, [r4, #24]
 8009ce0:	d1b7      	bne.n	8009c52 <HttpDaemon::Run()+0x3a>
 8009ce2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1b4      	bne.n	8009c52 <HttpDaemon::Run()+0x3a>
 8009ce8:	b004      	add	sp, #16
 8009cea:	bd70      	pop	{r4, r5, r6, pc}
 8009cec:	2bc8      	cmp	r3, #200	; 0xc8
 8009cee:	d1b0      	bne.n	8009c52 <HttpDaemon::Run()+0x3a>
 8009cf0:	69e1      	ldr	r1, [r4, #28]
 8009cf2:	2901      	cmp	r1, #1
 8009cf4:	d1ad      	bne.n	8009c52 <HttpDaemon::Run()+0x3a>
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f7ff fede 	bl	8009ab8 <HttpDaemon::HandlePost(bool)>
 8009cfc:	e7a8      	b.n	8009c50 <HttpDaemon::Run()+0x38>
 8009cfe:	f240 12f5 	movw	r2, #501	; 0x1f5
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d010      	beq.n	8009d28 <HttpDaemon::Run()+0x110>
 8009d06:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d00e      	beq.n	8009d2c <HttpDaemon::Run()+0x114>
 8009d0e:	4d11      	ldr	r5, [pc, #68]	; (8009d54 <HttpDaemon::Run()+0x13c>)
 8009d10:	4a0a      	ldr	r2, [pc, #40]	; (8009d3c <HttpDaemon::Run()+0x124>)
 8009d12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009d16:	bf18      	it	ne
 8009d18:	4615      	movne	r5, r2
 8009d1a:	e7ae      	b.n	8009c7a <HttpDaemon::Run()+0x62>
 8009d1c:	4d0e      	ldr	r5, [pc, #56]	; (8009d58 <HttpDaemon::Run()+0x140>)
 8009d1e:	e7ac      	b.n	8009c7a <HttpDaemon::Run()+0x62>
 8009d20:	4d0e      	ldr	r5, [pc, #56]	; (8009d5c <HttpDaemon::Run()+0x144>)
 8009d22:	e7aa      	b.n	8009c7a <HttpDaemon::Run()+0x62>
 8009d24:	4d0e      	ldr	r5, [pc, #56]	; (8009d60 <HttpDaemon::Run()+0x148>)
 8009d26:	e7a8      	b.n	8009c7a <HttpDaemon::Run()+0x62>
 8009d28:	4d0e      	ldr	r5, [pc, #56]	; (8009d64 <HttpDaemon::Run()+0x14c>)
 8009d2a:	e7a6      	b.n	8009c7a <HttpDaemon::Run()+0x62>
 8009d2c:	4d0e      	ldr	r5, [pc, #56]	; (8009d68 <HttpDaemon::Run()+0x150>)
 8009d2e:	e7a4      	b.n	8009c7a <HttpDaemon::Run()+0x62>
 8009d30:	4d0e      	ldr	r5, [pc, #56]	; (8009d6c <HttpDaemon::Run()+0x154>)
 8009d32:	e7ad      	b.n	8009c90 <HttpDaemon::Run()+0x78>
 8009d34:	2000a59c 	mulcs	r0, ip, r5
 8009d38:	08016b4f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, r9, fp, sp, lr}
 8009d3c:	08016bd6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, r9, fp, sp, lr}
 8009d40:	08016ca5 	stmdaeq	r1, {r0, r2, r5, r7, sl, fp, sp, lr}
 8009d44:	08016be7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, r9, fp, sp, lr}
 8009d48:	20000128 	andcs	r0, r0, r8, lsr #2
 8009d4c:	08016c42 	stmdaeq	r1, {r1, r6, sl, fp, sp, lr}
 8009d50:	08016c9a 	stmdaeq	r1, {r1, r3, r4, r7, sl, fp, sp, lr}
 8009d54:	08016b93 	stmdaeq	r1, {r0, r1, r4, r7, r8, r9, fp, sp, lr}
 8009d58:	08016b7e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r8, r9, fp, sp, lr}
 8009d5c:	08016b5b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, r9, fp, sp, lr}
 8009d60:	08016b65 	stmdaeq	r1, {r0, r2, r5, r6, r8, r9, fp, sp, lr}
 8009d64:	08016ba9 	stmdaeq	r1, {r0, r3, r5, r7, r8, r9, fp, sp, lr}
 8009d68:	08016bc0 	stmdaeq	r1, {r6, r7, r8, r9, fp, sp, lr}
 8009d6c:	08016be4 	stmdaeq	r1, {r2, r5, r6, r7, r8, r9, fp, sp, lr}

08009d70 <remoteconfig::json_get_list(char*, unsigned short)>:
 8009d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d74:	4b14      	ldr	r3, [pc, #80]	; (8009dc8 <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 8009d76:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8009dcc <remoteconfig::json_get_list(char*, unsigned short)+0x5c>
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	b088      	sub	sp, #32
 8009d7e:	4605      	mov	r5, r0
 8009d80:	f8d8 0000 	ldr.w	r0, [r8]
 8009d84:	695c      	ldr	r4, [r3, #20]
 8009d86:	460e      	mov	r6, r1
 8009d88:	f7fe ffea 	bl	8008d60 <RemoteConfig::GetStringNode() const>
 8009d8c:	4607      	mov	r7, r0
 8009d8e:	f8d8 0000 	ldr.w	r0, [r8]
 8009d92:	f7fe fff1 	bl	8008d78 <RemoteConfig::GetStringOutput() const>
 8009d96:	4b0e      	ldr	r3, [pc, #56]	; (8009dd0 <remoteconfig::json_get_list(char*, unsigned short)+0x60>)
 8009d98:	4631      	mov	r1, r6
 8009d9a:	7a1a      	ldrb	r2, [r3, #8]
 8009d9c:	3309      	adds	r3, #9
 8009d9e:	9303      	str	r3, [sp, #12]
 8009da0:	0e23      	lsrs	r3, r4, #24
 8009da2:	9302      	str	r3, [sp, #8]
 8009da4:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8009dae:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	4628      	mov	r0, r5
 8009db6:	4a07      	ldr	r2, [pc, #28]	; (8009dd4 <remoteconfig::json_get_list(char*, unsigned short)+0x64>)
 8009db8:	9704      	str	r7, [sp, #16]
 8009dba:	b2e3      	uxtb	r3, r4
 8009dbc:	f00a f93a 	bl	8014034 <snprintf>
 8009dc0:	b280      	uxth	r0, r0
 8009dc2:	b008      	add	sp, #32
 8009dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc8:	2000a59c 	mulcs	r0, ip, r5
 8009dcc:	20000124 	andcs	r0, r0, r4, lsr #2
 8009dd0:	20000100 	andcs	r0, r0, r0, lsl #2
 8009dd4:	08016d7f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r8, sl, fp, sp, lr}

08009dd8 <remoteconfig::json_get_version(char*, unsigned short)>:
 8009dd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009dda:	2208      	movs	r2, #8
 8009ddc:	4b09      	ldr	r3, [pc, #36]	; (8009e04 <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 8009dde:	9204      	str	r2, [sp, #16]
 8009de0:	f1a3 020b 	sub.w	r2, r3, #11
 8009de4:	9203      	str	r2, [sp, #12]
 8009de6:	220b      	movs	r2, #11
 8009de8:	9202      	str	r2, [sp, #8]
 8009dea:	4a07      	ldr	r2, [pc, #28]	; (8009e08 <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 8009dec:	9305      	str	r3, [sp, #20]
 8009dee:	3b0e      	subs	r3, #14
 8009df0:	9201      	str	r2, [sp, #4]
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	4a05      	ldr	r2, [pc, #20]	; (8009e0c <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 8009df6:	2303      	movs	r3, #3
 8009df8:	f00a f91c 	bl	8014034 <snprintf>
 8009dfc:	b280      	uxth	r0, r0
 8009dfe:	b007      	add	sp, #28
 8009e00:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e04:	2000ac12 	andcs	sl, r0, r2, lsl ip
 8009e08:	08016c9a 	stmdaeq	r1, {r1, r3, r4, r7, sl, fp, sp, lr}
 8009e0c:	08016dde 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, sl, fp, sp, lr}

08009e10 <remoteconfig::json_get_uptime(char*, unsigned short)>:
 8009e10:	b508      	push	{r3, lr}
 8009e12:	4b05      	ldr	r3, [pc, #20]	; (8009e28 <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e1e:	4a03      	ldr	r2, [pc, #12]	; (8009e2c <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 8009e20:	f00a f908 	bl	8014034 <snprintf>
 8009e24:	b280      	uxth	r0, r0
 8009e26:	bd08      	pop	{r3, pc}
 8009e28:	2000ac7c 	andcs	sl, r0, ip, ror ip
 8009e2c:	08016e24 	stmdaeq	r1, {r2, r5, r9, sl, fp, sp, lr}

08009e30 <remoteconfig::json_get_display(char*, unsigned short)>:
 8009e30:	b508      	push	{r3, lr}
 8009e32:	4b05      	ldr	r3, [pc, #20]	; (8009e48 <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 8009e34:	4a05      	ldr	r2, [pc, #20]	; (8009e4c <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	7c1b      	ldrb	r3, [r3, #16]
 8009e3a:	f083 0301 	eor.w	r3, r3, #1
 8009e3e:	f00a f8f9 	bl	8014034 <snprintf>
 8009e42:	b280      	uxth	r0, r0
 8009e44:	bd08      	pop	{r3, pc}
 8009e46:	bf00      	nop
 8009e48:	2000ab74 	andcs	sl, r0, r4, ror fp
 8009e4c:	08016e33 	stmdaeq	r1, {r0, r1, r4, r5, r9, sl, fp, sp, lr}

08009e50 <remoteconfig::json_get_directory(char*, unsigned short)>:
 8009e50:	b508      	push	{r3, lr}
 8009e52:	4a02      	ldr	r2, [pc, #8]	; (8009e5c <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 8009e54:	f00a f8ee 	bl	8014034 <snprintf>
 8009e58:	b280      	uxth	r0, r0
 8009e5a:	bd08      	pop	{r3, pc}
 8009e5c:	08016e42 	stmdaeq	r1, {r1, r6, r9, sl, fp, sp, lr}

08009e60 <get_file_content(char const*, char*)>:
 8009e60:	2300      	movs	r3, #0
 8009e62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e64:	4a10      	ldr	r2, [pc, #64]	; (8009ea8 <get_file_content(char const*, char*)+0x48>)
 8009e66:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8009e6a:	1e46      	subs	r6, r0, #1
 8009e6c:	3c01      	subs	r4, #1
 8009e6e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8009e72:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8009e76:	42bd      	cmp	r5, r7
 8009e78:	d005      	beq.n	8009e86 <get_file_content(char const*, char*)+0x26>
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	2b03      	cmp	r3, #3
 8009e7e:	d1f2      	bne.n	8009e66 <get_file_content(char const*, char*)+0x6>
 8009e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e86:	2d00      	cmp	r5, #0
 8009e88:	d1f1      	bne.n	8009e6e <get_file_content(char const*, char*)+0xe>
 8009e8a:	4608      	mov	r0, r1
 8009e8c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009e90:	6853      	ldr	r3, [r2, #4]
 8009e92:	3b01      	subs	r3, #1
 8009e94:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8009e98:	f800 2b01 	strb.w	r2, [r0], #1
 8009e9c:	2a00      	cmp	r2, #0
 8009e9e:	d1f9      	bne.n	8009e94 <get_file_content(char const*, char*)+0x34>
 8009ea0:	1a40      	subs	r0, r0, r1
 8009ea2:	3801      	subs	r0, #1
 8009ea4:	e7ee      	b.n	8009e84 <get_file_content(char const*, char*)+0x24>
 8009ea6:	bf00      	nop
 8009ea8:	08017184 	stmdaeq	r1, {r2, r7, r8, ip, sp, lr}

08009eac <ArtNet4Node::IsStatusChanged()>:
 8009eac:	4603      	mov	r3, r0
 8009eae:	f890 0e5c 	ldrb.w	r0, [r0, #3676]	; 0xe5c
 8009eb2:	b110      	cbz	r0, 8009eba <ArtNet4Node::IsStatusChanged()+0xe>
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 2e5c 	strb.w	r2, [r3, #3676]	; 0xe5c
 8009eba:	4770      	bx	lr

08009ebc <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
 8009ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ebe:	4616      	mov	r6, r2
 8009ec0:	1d07      	adds	r7, r0, #4
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	f10d 0206 	add.w	r2, sp, #6
 8009ecc:	460d      	mov	r5, r1
 8009ece:	f000 fc4b 	bl	800a768 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8009ed2:	b1be      	cbz	r6, 8009f04 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 8009ed4:	b1b0      	cbz	r0, 8009f04 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 8009ed6:	2328      	movs	r3, #40	; 0x28
 8009ed8:	fb03 4305 	mla	r3, r3, r5, r4
 8009edc:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d10f      	bne.n	8009f04 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 8009ee4:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 8009ee8:	b123      	cbz	r3, 8009ef4 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x38>
 8009eea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009ef4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009ef8:	b933      	cbnz	r3, 8009f08 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x4c>
 8009efa:	2202      	movs	r2, #2
 8009efc:	4629      	mov	r1, r5
 8009efe:	4638      	mov	r0, r7
 8009f00:	f000 fc58 	bl	800a7b4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8009f04:	b003      	add	sp, #12
 8009f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f08:	1e71      	subs	r1, r6, #1
 8009f0a:	424a      	negs	r2, r1
 8009f0c:	414a      	adcs	r2, r1
 8009f0e:	f604 1064 	addw	r0, r4, #2404	; 0x964
 8009f12:	4629      	mov	r1, r5
 8009f14:	f002 fc28 	bl	800c768 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8009f18:	e7f4      	b.n	8009f04 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
	...

08009f1c <ArtNet4Node::SetLedBlinkMode(ledblink::Mode)>:
 8009f1c:	1e8a      	subs	r2, r1, #2
 8009f1e:	4253      	negs	r3, r2
 8009f20:	4153      	adcs	r3, r2
 8009f22:	f880 396c 	strb.w	r3, [r0, #2412]	; 0x96c
 8009f26:	4b02      	ldr	r3, [pc, #8]	; (8009f30 <ArtNet4Node::SetLedBlinkMode(ledblink::Mode)+0x14>)
 8009f28:	6818      	ldr	r0, [r3, #0]
 8009f2a:	f009 bb85 	b.w	8013638 <LedBlink::SetMode(ledblink::Mode)>
 8009f2e:	bf00      	nop
 8009f30:	2000ac60 	andcs	sl, r0, r0, ror #24

08009f34 <ArtNet4Node::~ArtNet4Node()>:
 8009f34:	b510      	push	{r4, lr}
 8009f36:	4604      	mov	r4, r0
 8009f38:	4b05      	ldr	r3, [pc, #20]	; (8009f50 <ArtNet4Node::~ArtNet4Node()+0x1c>)
 8009f3a:	6003      	str	r3, [r0, #0]
 8009f3c:	f600 1064 	addw	r0, r0, #2404	; 0x964
 8009f40:	f002 fb90 	bl	800c664 <E131Bridge::~E131Bridge()>
 8009f44:	1d20      	adds	r0, r4, #4
 8009f46:	f000 f94f 	bl	800a1e8 <ArtNetNode::~ArtNetNode()>
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	bd10      	pop	{r4, pc}
 8009f4e:	bf00      	nop
 8009f50:	080176ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r9, sl, ip, sp, lr}

08009f54 <ArtNet4Node::~ArtNet4Node()>:
 8009f54:	b510      	push	{r4, lr}
 8009f56:	4604      	mov	r4, r0
 8009f58:	f7ff ffec 	bl	8009f34 <ArtNet4Node::~ArtNet4Node()>
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	f009 fc49 	bl	80137f4 <operator delete(void*)>
 8009f62:	4620      	mov	r0, r4
 8009f64:	bd10      	pop	{r4, pc}

08009f66 <ArtNet4Node::GetStatus(unsigned int)>:
 8009f66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f68:	2301      	movs	r3, #1
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	f10d 0206 	add.w	r2, sp, #6
 8009f70:	f600 1064 	addw	r0, r0, #2404	; 0x964
 8009f74:	460d      	mov	r5, r1
 8009f76:	f002 fc6f 	bl	800c858 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 8009f7a:	b160      	cbz	r0, 8009f96 <ArtNet4Node::GetStatus(unsigned int)+0x30>
 8009f7c:	2344      	movs	r3, #68	; 0x44
 8009f7e:	fb03 4405 	mla	r4, r3, r5, r4
 8009f82:	f894 0eba 	ldrb.w	r0, [r4, #3770]	; 0xeba
 8009f86:	f894 3eb9 	ldrb.w	r3, [r4, #3769]	; 0xeb9
 8009f8a:	01c0      	lsls	r0, r0, #7
 8009f8c:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8009f90:	f040 0001 	orr.w	r0, r0, #1
 8009f94:	b2c0      	uxtb	r0, r0
 8009f96:	b003      	add	sp, #12
 8009f98:	bd30      	pop	{r4, r5, pc}
	...

08009f9c <ArtNet4Node::HandleAddress(unsigned char)>:
 8009f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	460c      	mov	r4, r1
 8009fa2:	2700      	movs	r7, #0
 8009fa4:	1d06      	adds	r6, r0, #4
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	4639      	mov	r1, r7
 8009faa:	4630      	mov	r0, r6
 8009fac:	f10d 0206 	add.w	r2, sp, #6
 8009fb0:	f000 fbda 	bl	800a768 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8009fb4:	b150      	cbz	r0, 8009fcc <ArtNet4Node::HandleAddress(unsigned char)+0x30>
 8009fb6:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
 8009fba:	b123      	cbz	r3, 8009fc6 <ArtNet4Node::HandleAddress(unsigned char)+0x2a>
 8009fbc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009fc6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009fca:	b993      	cbnz	r3, 8009ff2 <ArtNet4Node::HandleAddress(unsigned char)+0x56>
 8009fcc:	b17f      	cbz	r7, 8009fee <ArtNet4Node::HandleAddress(unsigned char)+0x52>
 8009fce:	2c13      	cmp	r4, #19
 8009fd0:	f004 0603 	and.w	r6, r4, #3
 8009fd4:	d81b      	bhi.n	800a00e <ArtNet4Node::HandleAddress(unsigned char)+0x72>
 8009fd6:	2c0f      	cmp	r4, #15
 8009fd8:	d869      	bhi.n	800a0ae <ArtNet4Node::HandleAddress(unsigned char)+0x112>
 8009fda:	2c02      	cmp	r4, #2
 8009fdc:	d064      	beq.n	800a0a8 <ArtNet4Node::HandleAddress(unsigned char)+0x10c>
 8009fde:	3c03      	subs	r4, #3
 8009fe0:	2c01      	cmp	r4, #1
 8009fe2:	d802      	bhi.n	8009fea <ArtNet4Node::HandleAddress(unsigned char)+0x4e>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	f885 396c 	strb.w	r3, [r5, #2412]	; 0x96c
 8009fea:	b003      	add	sp, #12
 8009fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fee:	2701      	movs	r7, #1
 8009ff0:	e7d9      	b.n	8009fa6 <ArtNet4Node::HandleAddress(unsigned char)+0xa>
 8009ff2:	2228      	movs	r2, #40	; 0x28
 8009ff4:	437a      	muls	r2, r7
 8009ff6:	f605 1114 	addw	r1, r5, #2324	; 0x914
 8009ffa:	588a      	ldr	r2, [r1, r2]
 8009ffc:	f605 1064 	addw	r0, r5, #2404	; 0x964
 800a000:	2a01      	cmp	r2, #1
 800a002:	bf18      	it	ne
 800a004:	2202      	movne	r2, #2
 800a006:	4639      	mov	r1, r7
 800a008:	f002 fbae 	bl	800c768 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 800a00c:	e7de      	b.n	8009fcc <ArtNet4Node::HandleAddress(unsigned char)+0x30>
 800a00e:	2c53      	cmp	r4, #83	; 0x53
 800a010:	d808      	bhi.n	800a024 <ArtNet4Node::HandleAddress(unsigned char)+0x88>
 800a012:	2c4f      	cmp	r4, #79	; 0x4f
 800a014:	d9e9      	bls.n	8009fea <ArtNet4Node::HandleAddress(unsigned char)+0x4e>
 800a016:	2344      	movs	r3, #68	; 0x44
 800a018:	2200      	movs	r2, #0
 800a01a:	fb03 5306 	mla	r3, r3, r6, r5
 800a01e:	f8c3 2eb4 	str.w	r2, [r3, #3764]	; 0xeb4
 800a022:	e7e2      	b.n	8009fea <ArtNet4Node::HandleAddress(unsigned char)+0x4e>
 800a024:	3470      	adds	r4, #112	; 0x70
 800a026:	b2e4      	uxtb	r4, r4
 800a028:	2c03      	cmp	r4, #3
 800a02a:	d8de      	bhi.n	8009fea <ArtNet4Node::HandleAddress(unsigned char)+0x4e>
 800a02c:	2328      	movs	r3, #40	; 0x28
 800a02e:	fb03 5306 	mla	r3, r3, r6, r5
 800a032:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
 800a036:	2b01      	cmp	r3, #1
 800a038:	d1d7      	bne.n	8009fea <ArtNet4Node::HandleAddress(unsigned char)+0x4e>
 800a03a:	4b21      	ldr	r3, [pc, #132]	; (800a0c0 <ArtNet4Node::HandleAddress(unsigned char)+0x124>)
 800a03c:	f8d5 0968 	ldr.w	r0, [r5, #2408]	; 0x968
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	07d2      	lsls	r2, r2, #31
 800a044:	f240 6204 	movw	r2, #1540	; 0x604
 800a048:	fb06 f202 	mul.w	r2, r6, r2
 800a04c:	bf58      	it	pl
 800a04e:	601f      	strpl	r7, [r3, #0]
 800a050:	4b1c      	ldr	r3, [pc, #112]	; (800a0c4 <ArtNet4Node::HandleAddress(unsigned char)+0x128>)
 800a052:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a056:	441a      	add	r2, r3
 800a058:	4611      	mov	r1, r2
 800a05a:	2700      	movs	r7, #0
 800a05c:	f502 7400 	add.w	r4, r2, #512	; 0x200
 800a060:	428c      	cmp	r4, r1
 800a062:	d12a      	bne.n	800a0ba <ArtNet4Node::HandleAddress(unsigned char)+0x11e>
 800a064:	f240 6104 	movw	r1, #1540	; 0x604
 800a068:	fb01 3106 	mla	r1, r1, r6, r3
 800a06c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a070:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800a074:	6801      	ldr	r1, [r0, #0]
 800a076:	690c      	ldr	r4, [r1, #16]
 800a078:	4631      	mov	r1, r6
 800a07a:	47a0      	blx	r4
 800a07c:	2444      	movs	r4, #68	; 0x44
 800a07e:	fb04 5406 	mla	r4, r4, r6, r5
 800a082:	f894 3e7a 	ldrb.w	r3, [r4, #3706]	; 0xe7a
 800a086:	b15b      	cbz	r3, 800a0a0 <ArtNet4Node::HandleAddress(unsigned char)+0x104>
 800a088:	f894 3eba 	ldrb.w	r3, [r4, #3770]	; 0xeba
 800a08c:	b943      	cbnz	r3, 800a0a0 <ArtNet4Node::HandleAddress(unsigned char)+0x104>
 800a08e:	f8d5 0968 	ldr.w	r0, [r5, #2408]	; 0x968
 800a092:	4631      	mov	r1, r6
 800a094:	6803      	ldr	r3, [r0, #0]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	4798      	blx	r3
 800a09a:	2301      	movs	r3, #1
 800a09c:	f884 3eba 	strb.w	r3, [r4, #3770]	; 0xeba
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f885 3e58 	strb.w	r3, [r5, #3672]	; 0xe58
 800a0a6:	e7a0      	b.n	8009fea <ArtNet4Node::HandleAddress(unsigned char)+0x4e>
 800a0a8:	f885 796c 	strb.w	r7, [r5, #2412]	; 0x96c
 800a0ac:	e79d      	b.n	8009fea <ArtNet4Node::HandleAddress(unsigned char)+0x4e>
 800a0ae:	2344      	movs	r3, #68	; 0x44
 800a0b0:	fb03 5306 	mla	r3, r3, r6, r5
 800a0b4:	f8c3 7eb4 	str.w	r7, [r3, #3764]	; 0xeb4
 800a0b8:	e797      	b.n	8009fea <ArtNet4Node::HandleAddress(unsigned char)+0x4e>
 800a0ba:	f801 7b01 	strb.w	r7, [r1], #1
 800a0be:	e7cf      	b.n	800a060 <ArtNet4Node::HandleAddress(unsigned char)+0xc4>
 800a0c0:	200006c8 	andcs	r0, r0, r8, asr #13
 800a0c4:	200006cc 	andcs	r0, r0, ip, asr #13

0800a0c8 <ArtNet4Node::ArtNet4Node()>:
 800a0c8:	b510      	push	{r4, lr}
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	3004      	adds	r0, #4
 800a0ce:	f000 f957 	bl	800a380 <ArtNetNode::ArtNetNode()>
 800a0d2:	4b04      	ldr	r3, [pc, #16]	; (800a0e4 <ArtNet4Node::ArtNet4Node()+0x1c>)
 800a0d4:	f604 1064 	addw	r0, r4, #2404	; 0x964
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	f002 fa59 	bl	800c590 <E131Bridge::E131Bridge()>
 800a0de:	4620      	mov	r0, r4
 800a0e0:	61e4      	str	r4, [r4, #28]
 800a0e2:	bd10      	pop	{r4, pc}
 800a0e4:	080176ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r9, sl, ip, sp, lr}

0800a0e8 <ArtNet4Node::Start()>:
 800a0e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0ea:	1d05      	adds	r5, r0, #4
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	f10d 0206 	add.w	r2, sp, #6
 800a0f8:	f000 fb36 	bl	800a768 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800a0fc:	b138      	cbz	r0, 800a10e <ArtNet4Node::Start()+0x26>
 800a0fe:	f8d4 3914 	ldr.w	r3, [r4, #2324]	; 0x914
 800a102:	2b01      	cmp	r3, #1
 800a104:	bf04      	itt	eq
 800a106:	f8d4 390c 	ldreq.w	r3, [r4, #2316]	; 0x90c
 800a10a:	f8c4 3eb4 	streq.w	r3, [r4, #3764]	; 0xeb4
 800a10e:	2301      	movs	r3, #1
 800a110:	4628      	mov	r0, r5
 800a112:	4619      	mov	r1, r3
 800a114:	f10d 0206 	add.w	r2, sp, #6
 800a118:	f000 fb26 	bl	800a768 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800a11c:	b138      	cbz	r0, 800a12e <ArtNet4Node::Start()+0x46>
 800a11e:	f8d4 393c 	ldr.w	r3, [r4, #2364]	; 0x93c
 800a122:	2b01      	cmp	r3, #1
 800a124:	bf04      	itt	eq
 800a126:	f8d4 3934 	ldreq.w	r3, [r4, #2356]	; 0x934
 800a12a:	f8c4 3ef8 	streq.w	r3, [r4, #3832]	; 0xef8
 800a12e:	f894 38ec 	ldrb.w	r3, [r4, #2284]	; 0x8ec
 800a132:	4628      	mov	r0, r5
 800a134:	f884 3e5d 	strb.w	r3, [r4, #3677]	; 0xe5d
 800a138:	68a3      	ldr	r3, [r4, #8]
 800a13a:	f8c4 3968 	str.w	r3, [r4, #2408]	; 0x968
 800a13e:	f000 f855 	bl	800a1ec <ArtNetNode::Start()>
 800a142:	f604 1064 	addw	r0, r4, #2404	; 0x964
 800a146:	b003      	add	sp, #12
 800a148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a14c:	f002 ba8c 	b.w	800c668 <E131Bridge::Start()>

0800a150 <ArtNet4Node::Run()>:
 800a150:	b510      	push	{r4, lr}
 800a152:	4604      	mov	r4, r0
 800a154:	3004      	adds	r0, #4
 800a156:	f000 fa2b 	bl	800a5b0 <ArtNetNode::Run()>
 800a15a:	f894 3e6f 	ldrb.w	r3, [r4, #3695]	; 0xe6f
 800a15e:	b12b      	cbz	r3, 800a16c <ArtNet4Node::Run()+0x1c>
 800a160:	f604 1064 	addw	r0, r4, #2404	; 0x964
 800a164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a168:	f002 be68 	b.w	800ce3c <E131Bridge::Run()>
 800a16c:	bd10      	pop	{r4, pc}
	...

0800a170 <ArtNet4Node::Print()>:
 800a170:	b510      	push	{r4, lr}
 800a172:	4604      	mov	r4, r0
 800a174:	3004      	adds	r0, #4
 800a176:	f001 fc4d 	bl	800ba14 <ArtNetNode::Print()>
 800a17a:	f894 38ee 	ldrb.w	r3, [r4, #2286]	; 0x8ee
 800a17e:	b15b      	cbz	r3, 800a198 <ArtNet4Node::Print()+0x28>
 800a180:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 800a184:	b113      	cbz	r3, 800a18c <ArtNet4Node::Print()+0x1c>
 800a186:	4805      	ldr	r0, [pc, #20]	; (800a19c <ArtNet4Node::Print()+0x2c>)
 800a188:	f009 ff2c 	bl	8013fe4 <printf>
 800a18c:	f604 1064 	addw	r0, r4, #2404	; 0x964
 800a190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a194:	f003 b8a8 	b.w	800d2e8 <E131Bridge::Print()>
 800a198:	bd10      	pop	{r4, pc}
 800a19a:	bf00      	nop
 800a19c:	080176c5 	stmdaeq	r1, {r0, r2, r6, r7, r9, sl, ip, sp, lr}

0800a1a0 <strncpy.isra.0>:
 800a1a0:	3901      	subs	r1, #1
 800a1a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a1a6:	b92b      	cbnz	r3, 800a1b4 <strncpy.isra.0+0x14>
 800a1a8:	4402      	add	r2, r0
 800a1aa:	4290      	cmp	r0, r2
 800a1ac:	d006      	beq.n	800a1bc <strncpy.isra.0+0x1c>
 800a1ae:	f800 3b01 	strb.w	r3, [r0], #1
 800a1b2:	e7fa      	b.n	800a1aa <strncpy.isra.0+0xa>
 800a1b4:	3a01      	subs	r2, #1
 800a1b6:	f800 3b01 	strb.w	r3, [r0], #1
 800a1ba:	d1f2      	bne.n	800a1a2 <strncpy.isra.0+0x2>
 800a1bc:	4770      	bx	lr
	...

0800a1c0 <lightset::Data::ClearLength(unsigned int)>:
 800a1c0:	4b07      	ldr	r3, [pc, #28]	; (800a1e0 <lightset::Data::ClearLength(unsigned int)+0x20>)
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	07d2      	lsls	r2, r2, #31
 800a1c6:	bf5c      	itt	pl
 800a1c8:	2201      	movpl	r2, #1
 800a1ca:	601a      	strpl	r2, [r3, #0]
 800a1cc:	f240 6204 	movw	r2, #1540	; 0x604
 800a1d0:	4b04      	ldr	r3, [pc, #16]	; (800a1e4 <lightset::Data::ClearLength(unsigned int)+0x24>)
 800a1d2:	fb02 3000 	mla	r0, r2, r0, r3
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	200006c8 	andcs	r0, r0, r8, asr #13
 800a1e4:	200006cc 	andcs	r0, r0, ip, asr #13

0800a1e8 <ArtNetNode::~ArtNetNode()>:
 800a1e8:	4770      	bx	lr
	...

0800a1ec <ArtNetNode::Start()>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	4d1d      	ldr	r5, [pc, #116]	; (800a264 <ArtNetNode::Start()+0x78>)
 800a1f0:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 800a1f4:	682a      	ldr	r2, [r5, #0]
 800a1f6:	f023 0302 	bic.w	r3, r3, #2
 800a1fa:	7951      	ldrb	r1, [r2, #5]
 800a1fc:	4604      	mov	r4, r0
 800a1fe:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800a202:	b25b      	sxtb	r3, r3
 800a204:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
 800a208:	7912      	ldrb	r2, [r2, #4]
 800a20a:	f023 0304 	bic.w	r3, r3, #4
 800a20e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800a212:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
 800a216:	f001 f8d7 	bl	800b3c8 <ArtNetNode::FillPollReply()>
 800a21a:	f641 1136 	movw	r1, #6454	; 0x1936
 800a21e:	6828      	ldr	r0, [r5, #0]
 800a220:	f006 ffa8 	bl	8011174 <Network::Begin(unsigned short)>
 800a224:	2302      	movs	r3, #2
 800a226:	6020      	str	r0, [r4, #0]
 800a228:	6920      	ldr	r0, [r4, #16]
 800a22a:	f884 38e1 	strb.w	r3, [r4, #2273]	; 0x8e1
 800a22e:	b170      	cbz	r0, 800a24e <ArtNetNode::Start()+0x62>
 800a230:	f894 3944 	ldrb.w	r3, [r4, #2372]	; 0x944
 800a234:	b11b      	cbz	r3, 800a23e <ArtNetNode::Start()+0x52>
 800a236:	6803      	ldr	r3, [r0, #0]
 800a238:	2100      	movs	r1, #0
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	4798      	blx	r3
 800a23e:	f894 3954 	ldrb.w	r3, [r4, #2388]	; 0x954
 800a242:	b123      	cbz	r3, 800a24e <ArtNetNode::Start()+0x62>
 800a244:	6920      	ldr	r0, [r4, #16]
 800a246:	2101      	movs	r1, #1
 800a248:	6803      	ldr	r3, [r0, #0]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	4798      	blx	r3
 800a24e:	4b06      	ldr	r3, [pc, #24]	; (800a268 <ArtNetNode::Start()+0x7c>)
 800a250:	2102      	movs	r1, #2
 800a252:	6818      	ldr	r0, [r3, #0]
 800a254:	f009 f9f0 	bl	8013638 <LedBlink::SetMode(ledblink::Mode)>
 800a258:	4620      	mov	r0, r4
 800a25a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a25e:	2100      	movs	r1, #0
 800a260:	f001 b98a 	b.w	800b578 <ArtNetNode::SendPollRelply(bool)>
 800a264:	2000a59c 	mulcs	r0, ip, r5
 800a268:	2000ac60 	andcs	sl, r0, r0, ror #24

0800a26c <ArtNetNode::Stop()>:
 800a26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26e:	2500      	movs	r5, #0
 800a270:	4604      	mov	r4, r0
 800a272:	4606      	mov	r6, r0
 800a274:	462f      	mov	r7, r5
 800a276:	f8d6 3910 	ldr.w	r3, [r6, #2320]	; 0x910
 800a27a:	b953      	cbnz	r3, 800a292 <ArtNetNode::Stop()+0x26>
 800a27c:	6860      	ldr	r0, [r4, #4]
 800a27e:	b118      	cbz	r0, 800a288 <ArtNetNode::Stop()+0x1c>
 800a280:	6803      	ldr	r3, [r0, #0]
 800a282:	4629      	mov	r1, r5
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	4798      	blx	r3
 800a288:	4628      	mov	r0, r5
 800a28a:	f7ff ff99 	bl	800a1c0 <lightset::Data::ClearLength(unsigned int)>
 800a28e:	f886 7915 	strb.w	r7, [r6, #2325]	; 0x915
 800a292:	3628      	adds	r6, #40	; 0x28
 800a294:	b305      	cbz	r5, 800a2d8 <ArtNetNode::Stop()+0x6c>
 800a296:	6923      	ldr	r3, [r4, #16]
 800a298:	b16b      	cbz	r3, 800a2b6 <ArtNetNode::Stop()+0x4a>
 800a29a:	2500      	movs	r5, #0
 800a29c:	f604 1644 	addw	r6, r4, #2372	; 0x944
 800a2a0:	012b      	lsls	r3, r5, #4
 800a2a2:	5cf3      	ldrb	r3, [r6, r3]
 800a2a4:	b123      	cbz	r3, 800a2b0 <ArtNetNode::Stop()+0x44>
 800a2a6:	6920      	ldr	r0, [r4, #16]
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	6803      	ldr	r3, [r0, #0]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	4798      	blx	r3
 800a2b0:	3501      	adds	r5, #1
 800a2b2:	2d04      	cmp	r5, #4
 800a2b4:	d1f4      	bne.n	800a2a0 <ArtNetNode::Stop()+0x34>
 800a2b6:	4b09      	ldr	r3, [pc, #36]	; (800a2dc <ArtNetNode::Stop()+0x70>)
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	6818      	ldr	r0, [r3, #0]
 800a2bc:	f009 f9bc 	bl	8013638 <LedBlink::SetMode(ledblink::Mode)>
 800a2c0:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 800a2c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a2cc:	f884 308f 	strb.w	r3, [r4, #143]	; 0x8f
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	f884 38e1 	strb.w	r3, [r4, #2273]	; 0x8e1
 800a2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2d8:	2501      	movs	r5, #1
 800a2da:	e7cc      	b.n	800a276 <ArtNetNode::Stop()+0xa>
 800a2dc:	2000ac60 	andcs	sl, r0, r0, ror #24

0800a2e0 <ArtNetNode::SetShortName(char const*)>:
 800a2e0:	b570      	push	{r4, r5, r6, lr}
 800a2e2:	f100 053c 	add.w	r5, r0, #60	; 0x3c
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	2211      	movs	r2, #17
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	f7ff ff58 	bl	800a1a0 <strncpy.isra.0>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800a2f6:	462b      	mov	r3, r5
 800a2f8:	f104 024e 	add.w	r2, r4, #78	; 0x4e
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d111      	bne.n	800a324 <ArtNetNode::SetShortName(char const*)+0x44>
 800a300:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 800a304:	2b02      	cmp	r3, #2
 800a306:	d112      	bne.n	800a32e <ArtNetNode::SetShortName(char const*)+0x4e>
 800a308:	69e0      	ldr	r0, [r4, #28]
 800a30a:	b118      	cbz	r0, 800a314 <ArtNetNode::SetShortName(char const*)+0x34>
 800a30c:	6803      	ldr	r3, [r0, #0]
 800a30e:	4629      	mov	r1, r5
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	4798      	blx	r3
 800a314:	6a20      	ldr	r0, [r4, #32]
 800a316:	b150      	cbz	r0, 800a32e <ArtNetNode::SetShortName(char const*)+0x4e>
 800a318:	6803      	ldr	r3, [r0, #0]
 800a31a:	4629      	mov	r1, r5
 800a31c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	4718      	bx	r3
 800a324:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a328:	f883 154d 	strb.w	r1, [r3, #1357]	; 0x54d
 800a32c:	e7e6      	b.n	800a2fc <ArtNetNode::SetShortName(char const*)+0x1c>
 800a32e:	bd70      	pop	{r4, r5, r6, pc}

0800a330 <ArtNetNode::SetLongName(char const*)>:
 800a330:	b570      	push	{r4, r5, r6, lr}
 800a332:	f100 054e 	add.w	r5, r0, #78	; 0x4e
 800a336:	4604      	mov	r4, r0
 800a338:	223f      	movs	r2, #63	; 0x3f
 800a33a:	4628      	mov	r0, r5
 800a33c:	f7ff ff30 	bl	800a1a0 <strncpy.isra.0>
 800a340:	2300      	movs	r3, #0
 800a342:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
 800a346:	462b      	mov	r3, r5
 800a348:	f104 028e 	add.w	r2, r4, #142	; 0x8e
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d111      	bne.n	800a374 <ArtNetNode::SetLongName(char const*)+0x44>
 800a350:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 800a354:	2b02      	cmp	r3, #2
 800a356:	d112      	bne.n	800a37e <ArtNetNode::SetLongName(char const*)+0x4e>
 800a358:	69e0      	ldr	r0, [r4, #28]
 800a35a:	b118      	cbz	r0, 800a364 <ArtNetNode::SetLongName(char const*)+0x34>
 800a35c:	6803      	ldr	r3, [r0, #0]
 800a35e:	4629      	mov	r1, r5
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	4798      	blx	r3
 800a364:	6a20      	ldr	r0, [r4, #32]
 800a366:	b150      	cbz	r0, 800a37e <ArtNetNode::SetLongName(char const*)+0x4e>
 800a368:	6803      	ldr	r3, [r0, #0]
 800a36a:	4629      	mov	r1, r5
 800a36c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	4718      	bx	r3
 800a374:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a378:	f883 154d 	strb.w	r1, [r3, #1357]	; 0x54d
 800a37c:	e7e6      	b.n	800a34c <ArtNetNode::SetLongName(char const*)+0x1c>
 800a37e:	bd70      	pop	{r4, r5, r6, pc}

0800a380 <ArtNetNode::ArtNetNode()>:
 800a380:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a382:	2300      	movs	r3, #0
 800a384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a388:	4604      	mov	r4, r0
 800a38a:	e9c0 2300 	strd	r2, r3, [r0]
 800a38e:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800a392:	4a4e      	ldr	r2, [pc, #312]	; (800a4cc <ArtNetNode::ArtNetNode()+0x14c>)
 800a394:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a398:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800a39c:	6010      	str	r0, [r2, #0]
 800a39e:	6203      	str	r3, [r0, #32]
 800a3a0:	f8c0 3874 	str.w	r3, [r0, #2164]	; 0x874
 800a3a4:	f8c0 3878 	str.w	r3, [r0, #2168]	; 0x878
 800a3a8:	f880 387c 	strb.w	r3, [r0, #2172]	; 0x87c
 800a3ac:	f100 0224 	add.w	r2, r0, #36	; 0x24
 800a3b0:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 800a3b4:	428a      	cmp	r2, r1
 800a3b6:	d126      	bne.n	800a406 <ArtNetNode::ArtNetNode()+0x86>
 800a3b8:	4b45      	ldr	r3, [pc, #276]	; (800a4d0 <ArtNetNode::ArtNetNode()+0x150>)
 800a3ba:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800a3be:	6818      	ldr	r0, [r3, #0]
 800a3c0:	6943      	ldr	r3, [r0, #20]
 800a3c2:	6263      	str	r3, [r4, #36]	; 0x24
 800a3c4:	69c2      	ldr	r2, [r0, #28]
 800a3c6:	ea63 0302 	orn	r3, r3, r2
 800a3ca:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3cc:	6323      	str	r3, [r4, #48]	; 0x30
 800a3ce:	f006 fed7 	bl	8011180 <Network::MacAddressCopyTo(unsigned char*)>
 800a3d2:	23d0      	movs	r3, #208	; 0xd0
 800a3d4:	f884 308f 	strb.w	r3, [r4, #143]	; 0x8f
 800a3d8:	f642 0398 	movw	r3, #10392	; 0x2898
 800a3dc:	2100      	movs	r1, #0
 800a3de:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
 800a3e2:	f504 620d 	add.w	r2, r4, #2256	; 0x8d0
 800a3e6:	f504 630f 	add.w	r3, r4, #2288	; 0x8f0
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d10e      	bne.n	800a40c <ArtNetNode::ArtNetNode()+0x8c>
 800a3ee:	f240 1201 	movw	r2, #257	; 0x101
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	f8a4 28e0 	strh.w	r2, [r4, #2272]	; 0x8e0
 800a3f8:	f604 1218 	addw	r2, r4, #2328	; 0x918
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d008      	beq.n	800a412 <ArtNetNode::ArtNetNode()+0x92>
 800a400:	f803 1b01 	strb.w	r1, [r3], #1
 800a404:	e7fa      	b.n	800a3fc <ArtNetNode::ArtNetNode()+0x7c>
 800a406:	f802 3b01 	strb.w	r3, [r2], #1
 800a40a:	e7d3      	b.n	800a3b4 <ArtNetNode::ArtNetNode()+0x34>
 800a40c:	f802 1b01 	strb.w	r1, [r2], #1
 800a410:	e7eb      	b.n	800a3ea <ArtNetNode::ArtNetNode()+0x6a>
 800a412:	f504 6014 	add.w	r0, r4, #2368	; 0x940
 800a416:	4601      	mov	r1, r0
 800a418:	2500      	movs	r5, #0
 800a41a:	f504 6315 	add.w	r3, r4, #2384	; 0x950
 800a41e:	4299      	cmp	r1, r3
 800a420:	d002      	beq.n	800a428 <ArtNetNode::ArtNetNode()+0xa8>
 800a422:	f801 5b01 	strb.w	r5, [r1], #1
 800a426:	e7fa      	b.n	800a41e <ArtNetNode::ArtNetNode()+0x9e>
 800a428:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a42a:	f8c4 1948 	str.w	r1, [r4, #2376]	; 0x948
 800a42e:	2108      	movs	r1, #8
 800a430:	f884 1943 	strb.w	r1, [r4, #2371]	; 0x943
 800a434:	2100      	movs	r1, #0
 800a436:	4282      	cmp	r2, r0
 800a438:	d13d      	bne.n	800a4b6 <ArtNetNode::ArtNetNode()+0x136>
 800a43a:	2100      	movs	r1, #0
 800a43c:	f504 6216 	add.w	r2, r4, #2400	; 0x960
 800a440:	4293      	cmp	r3, r2
 800a442:	d13b      	bne.n	800a4bc <ArtNetNode::ArtNetNode()+0x13c>
 800a444:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a446:	4620      	mov	r0, r4
 800a448:	f8c4 3958 	str.w	r3, [r4, #2392]	; 0x958
 800a44c:	2308      	movs	r3, #8
 800a44e:	4921      	ldr	r1, [pc, #132]	; (800a4d4 <ArtNetNode::ArtNetNode()+0x154>)
 800a450:	f884 3953 	strb.w	r3, [r4, #2387]	; 0x953
 800a454:	f7ff ff44 	bl	800a2e0 <ArtNetNode::SetShortName(char const*)>
 800a458:	4b1f      	ldr	r3, [pc, #124]	; (800a4d8 <ArtNetNode::ArtNetNode()+0x158>)
 800a45a:	4d20      	ldr	r5, [pc, #128]	; (800a4dc <ArtNetNode::ArtNetNode()+0x15c>)
 800a45c:	9302      	str	r3, [sp, #8]
 800a45e:	2304      	movs	r3, #4
 800a460:	f604 068d 	addw	r6, r4, #2189	; 0x88d
 800a464:	4a1e      	ldr	r2, [pc, #120]	; (800a4e0 <ArtNetNode::ArtNetNode()+0x160>)
 800a466:	2140      	movs	r1, #64	; 0x40
 800a468:	9301      	str	r3, [sp, #4]
 800a46a:	4630      	mov	r0, r6
 800a46c:	4b1d      	ldr	r3, [pc, #116]	; (800a4e4 <ArtNetNode::ArtNetNode()+0x164>)
 800a46e:	9500      	str	r5, [sp, #0]
 800a470:	f009 fde0 	bl	8014034 <snprintf>
 800a474:	4631      	mov	r1, r6
 800a476:	4620      	mov	r0, r4
 800a478:	f7ff ff5a 	bl	800a330 <ArtNetNode::SetLongName(char const*)>
 800a47c:	220f      	movs	r2, #15
 800a47e:	491a      	ldr	r1, [pc, #104]	; (800a4e8 <ArtNetNode::ArtNetNode()+0x168>)
 800a480:	f604 007d 	addw	r0, r4, #2173	; 0x87d
 800a484:	f7ff fe8c 	bl	800a1a0 <strncpy.isra.0>
 800a488:	2300      	movs	r3, #0
 800a48a:	f204 6266 	addw	r2, r4, #1638	; 0x666
 800a48e:	f884 388c 	strb.w	r3, [r4, #2188]	; 0x88c
 800a492:	f204 635e 	addw	r3, r4, #1630	; 0x65e
 800a496:	4293      	cmp	r3, r2
 800a498:	d113      	bne.n	800a4c2 <ArtNetNode::ArtNetNode()+0x142>
 800a49a:	2300      	movs	r3, #0
 800a49c:	2250      	movs	r2, #80	; 0x50
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f884 3667 	strb.w	r3, [r4, #1639]	; 0x667
 800a4a4:	f884 3669 	strb.w	r3, [r4, #1641]	; 0x669
 800a4a8:	230e      	movs	r3, #14
 800a4aa:	f884 2668 	strb.w	r2, [r4, #1640]	; 0x668
 800a4ae:	f884 366a 	strb.w	r3, [r4, #1642]	; 0x66a
 800a4b2:	b004      	add	sp, #16
 800a4b4:	bd70      	pop	{r4, r5, r6, pc}
 800a4b6:	f802 1b01 	strb.w	r1, [r2], #1
 800a4ba:	e7bc      	b.n	800a436 <ArtNetNode::ArtNetNode()+0xb6>
 800a4bc:	f803 1b01 	strb.w	r1, [r3], #1
 800a4c0:	e7be      	b.n	800a440 <ArtNetNode::ArtNetNode()+0xc0>
 800a4c2:	f815 1b01 	ldrb.w	r1, [r5], #1
 800a4c6:	f803 1f01 	strb.w	r1, [r3, #1]!
 800a4ca:	e7e4      	b.n	800a496 <ArtNetNode::ArtNetNode()+0x116>
 800a4cc:	200012d4 	ldrdcs	r1, [r0], -r4
 800a4d0:	2000a59c 	mulcs	r0, ip, r5
 800a4d4:	08017785 	stmdaeq	r1, {r0, r2, r7, r8, r9, sl, ip, sp, lr}
 800a4d8:	0801775f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}
 800a4dc:	0801777d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, r9, sl, ip, sp, lr}
 800a4e0:	08017753 	stmdaeq	r1, {r0, r1, r4, r6, r8, r9, sl, ip, sp, lr}
 800a4e4:	08016c9a 	stmdaeq	r1, {r1, r3, r4, r7, sl, fp, sp, lr}
 800a4e8:	08017774 	stmdaeq	r1, {r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}

0800a4ec <ArtNetNode::SetNetworkDataLossCondition()>:
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	b570      	push	{r4, r5, r6, lr}
 800a4f0:	f8d0 2904 	ldr.w	r2, [r0, #2308]	; 0x904
 800a4f4:	f880 38e6 	strb.w	r3, [r0, #2278]	; 0x8e6
 800a4f8:	f880 38e5 	strb.w	r3, [r0, #2277]	; 0x8e5
 800a4fc:	f8d0 38fc 	ldr.w	r3, [r0, #2300]	; 0x8fc
 800a500:	4604      	mov	r4, r0
 800a502:	42d3      	cmn	r3, r2
 800a504:	d105      	bne.n	800a512 <ArtNetNode::SetNetworkDataLossCondition()+0x26>
 800a506:	f8d0 3924 	ldr.w	r3, [r0, #2340]	; 0x924
 800a50a:	f8d0 292c 	ldr.w	r2, [r0, #2348]	; 0x92c
 800a50e:	42d3      	cmn	r3, r2
 800a510:	d017      	beq.n	800a542 <ArtNetNode::SetNetworkDataLossCondition()+0x56>
 800a512:	2500      	movs	r5, #0
 800a514:	4628      	mov	r0, r5
 800a516:	f8c4 58fc 	str.w	r5, [r4, #2300]	; 0x8fc
 800a51a:	f8c4 5904 	str.w	r5, [r4, #2308]	; 0x904
 800a51e:	f7ff fe4f 	bl	800a1c0 <lightset::Data::ClearLength(unsigned int)>
 800a522:	2001      	movs	r0, #1
 800a524:	f8c4 5924 	str.w	r5, [r4, #2340]	; 0x924
 800a528:	f8c4 592c 	str.w	r5, [r4, #2348]	; 0x92c
 800a52c:	f7ff fe48 	bl	800a1c0 <lightset::Data::ClearLength(unsigned int)>
 800a530:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800a534:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a538:	2b40      	cmp	r3, #64	; 0x40
 800a53a:	d003      	beq.n	800a544 <ArtNetNode::SetNetworkDataLossCondition()+0x58>
 800a53c:	d901      	bls.n	800a542 <ArtNetNode::SetNetworkDataLossCondition()+0x56>
 800a53e:	2b80      	cmp	r3, #128	; 0x80
 800a540:	d007      	beq.n	800a552 <ArtNetNode::SetNetworkDataLossCondition()+0x66>
 800a542:	bd70      	pop	{r4, r5, r6, pc}
 800a544:	6860      	ldr	r0, [r4, #4]
 800a546:	2101      	movs	r1, #1
 800a548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a54c:	6803      	ldr	r3, [r0, #0]
 800a54e:	695b      	ldr	r3, [r3, #20]
 800a550:	4718      	bx	r3
 800a552:	6860      	ldr	r0, [r4, #4]
 800a554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a558:	6803      	ldr	r3, [r0, #0]
 800a55a:	699b      	ldr	r3, [r3, #24]
 800a55c:	4718      	bx	r3
	...

0800a560 <ArtNetNode::GetType()>:
 800a560:	f8b0 356c 	ldrh.w	r3, [r0, #1388]	; 0x56c
 800a564:	b530      	push	{r4, r5, lr}
 800a566:	2b0b      	cmp	r3, #11
 800a568:	d91d      	bls.n	800a5a6 <ArtNetNode::GetType()+0x46>
 800a56a:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 800a56e:	b9d3      	cbnz	r3, 800a5a6 <ArtNetNode::GetType()+0x46>
 800a570:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
 800a574:	2a0e      	cmp	r2, #14
 800a576:	d10d      	bne.n	800a594 <ArtNetNode::GetType()+0x34>
 800a578:	4a0c      	ldr	r2, [pc, #48]	; (800a5ac <ArtNetNode::GetType()+0x4c>)
 800a57a:	f100 039b 	add.w	r3, r0, #155	; 0x9b
 800a57e:	f100 01a3 	add.w	r1, r0, #163	; 0xa3
 800a582:	428b      	cmp	r3, r1
 800a584:	d109      	bne.n	800a59a <ArtNetNode::GetType()+0x3a>
 800a586:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
 800a58a:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 800a58e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a592:	b29b      	uxth	r3, r3
 800a594:	f8a0 356e 	strh.w	r3, [r0, #1390]	; 0x56e
 800a598:	bd30      	pop	{r4, r5, pc}
 800a59a:	f812 4b01 	ldrb.w	r4, [r2], #1
 800a59e:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800a5a2:	42a5      	cmp	r5, r4
 800a5a4:	d0ed      	beq.n	800a582 <ArtNetNode::GetType()+0x22>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	e7f4      	b.n	800a594 <ArtNetNode::GetType()+0x34>
 800a5aa:	bf00      	nop
 800a5ac:	080164f0 	stmdaeq	r1, {r4, r5, r6, r7, sl, sp, lr}

0800a5b0 <ArtNetNode::Run()>:
 800a5b0:	b530      	push	{r4, r5, lr}
 800a5b2:	4601      	mov	r1, r0
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	f10d 030e 	add.w	r3, sp, #14
 800a5bc:	f811 0b9c 	ldrb.w	r0, [r1], #156
 800a5c0:	f240 42cc 	movw	r2, #1228	; 0x4cc
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	f504 63ad 	add.w	r3, r4, #1384	; 0x568
 800a5ca:	f006 f8af 	bl	801072c <udp_recv>
 800a5ce:	4b64      	ldr	r3, [pc, #400]	; (800a760 <ArtNetNode::Run()+0x1b0>)
 800a5d0:	681d      	ldr	r5, [r3, #0]
 800a5d2:	f8c4 5874 	str.w	r5, [r4, #2164]	; 0x874
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	d142      	bne.n	800a660 <ArtNetNode::Run()+0xb0>
 800a5da:	f8d4 3878 	ldr.w	r3, [r4, #2168]	; 0x878
 800a5de:	1aed      	subs	r5, r5, r3
 800a5e0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a5e4:	429d      	cmp	r5, r3
 800a5e6:	d902      	bls.n	800a5ee <ArtNetNode::Run()+0x3e>
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	f7ff ff7f 	bl	800a4ec <ArtNetNode::SetNetworkDataLossCondition()>
 800a5ee:	f894 38e2 	ldrb.w	r3, [r4, #2274]	; 0x8e2
 800a5f2:	b15b      	cbz	r3, 800a60c <ArtNetNode::Run()+0x5c>
 800a5f4:	69a0      	ldr	r0, [r4, #24]
 800a5f6:	f894 58e7 	ldrb.w	r5, [r4, #2279]	; 0x8e7
 800a5fa:	6803      	ldr	r3, [r0, #0]
 800a5fc:	695b      	ldr	r3, [r3, #20]
 800a5fe:	4798      	blx	r3
 800a600:	b905      	cbnz	r5, 800a604 <ArtNetNode::Run()+0x54>
 800a602:	b118      	cbz	r0, 800a60c <ArtNetNode::Run()+0x5c>
 800a604:	2100      	movs	r1, #0
 800a606:	4620      	mov	r0, r4
 800a608:	f000 ffb6 	bl	800b578 <ArtNetNode::SendPollRelply(bool)>
 800a60c:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
 800a610:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
 800a614:	1a9b      	subs	r3, r3, r2
 800a616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a61a:	d305      	bcc.n	800a628 <ArtNetNode::Run()+0x78>
 800a61c:	f894 38e9 	ldrb.w	r3, [r4, #2281]	; 0x8e9
 800a620:	f023 0302 	bic.w	r3, r3, #2
 800a624:	f884 38e9 	strb.w	r3, [r4, #2281]	; 0x8e9
 800a628:	6923      	ldr	r3, [r4, #16]
 800a62a:	b113      	cbz	r3, 800a632 <ArtNetNode::Run()+0x82>
 800a62c:	4620      	mov	r0, r4
 800a62e:	f000 fd6d 	bl	800b10c <ArtNetNode::HandleDmxIn()>
 800a632:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 800a636:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a63a:	2bc0      	cmp	r3, #192	; 0xc0
 800a63c:	d10e      	bne.n	800a65c <ArtNetNode::Run()+0xac>
 800a63e:	4b49      	ldr	r3, [pc, #292]	; (800a764 <ArtNetNode::Run()+0x1b4>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	2b04      	cmp	r3, #4
 800a646:	d009      	beq.n	800a65c <ArtNetNode::Run()+0xac>
 800a648:	69a0      	ldr	r0, [r4, #24]
 800a64a:	f894 28e9 	ldrb.w	r2, [r4, #2281]	; 0x8e9
 800a64e:	6803      	ldr	r3, [r0, #0]
 800a650:	699b      	ldr	r3, [r3, #24]
 800a652:	2a00      	cmp	r2, #0
 800a654:	f000 8081 	beq.w	800a75a <ArtNetNode::Run()+0x1aa>
 800a658:	2103      	movs	r1, #3
 800a65a:	4798      	blx	r3
 800a65c:	b005      	add	sp, #20
 800a65e:	bd30      	pop	{r4, r5, pc}
 800a660:	f8a4 056c 	strh.w	r0, [r4, #1388]	; 0x56c
 800a664:	f8c4 5878 	str.w	r5, [r4, #2168]	; 0x878
 800a668:	4620      	mov	r0, r4
 800a66a:	f7ff ff79 	bl	800a560 <ArtNetNode::GetType()>
 800a66e:	f894 38e5 	ldrb.w	r3, [r4, #2277]	; 0x8e5
 800a672:	b143      	cbz	r3, 800a686 <ArtNetNode::Run()+0xd6>
 800a674:	f8d4 38dc 	ldr.w	r3, [r4, #2268]	; 0x8dc
 800a678:	1aed      	subs	r5, r5, r3
 800a67a:	f5b5 6f7a 	cmp.w	r5, #4000	; 0xfa0
 800a67e:	bf24      	itt	cs
 800a680:	2300      	movcs	r3, #0
 800a682:	f884 38e5 	strbcs.w	r3, [r4, #2277]	; 0x8e5
 800a686:	f8b4 356e 	ldrh.w	r3, [r4, #1390]	; 0x56e
 800a68a:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 800a68e:	d04c      	beq.n	800a72a <ArtNetNode::Run()+0x17a>
 800a690:	d81d      	bhi.n	800a6ce <ArtNetNode::Run()+0x11e>
 800a692:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 800a696:	d039      	beq.n	800a70c <ArtNetNode::Run()+0x15c>
 800a698:	d80c      	bhi.n	800a6b4 <ArtNetNode::Run()+0x104>
 800a69a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a69e:	d031      	beq.n	800a704 <ArtNetNode::Run()+0x154>
 800a6a0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a6a4:	d1c0      	bne.n	800a628 <ArtNetNode::Run()+0x78>
 800a6a6:	6863      	ldr	r3, [r4, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d0bd      	beq.n	800a628 <ArtNetNode::Run()+0x78>
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	f000 fc47 	bl	800af40 <ArtNetNode::HandleDmx()>
 800a6b2:	e7b9      	b.n	800a628 <ArtNetNode::Run()+0x78>
 800a6b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a6b8:	d02f      	beq.n	800a71a <ArtNetNode::Run()+0x16a>
 800a6ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6be:	d1b3      	bne.n	800a628 <ArtNetNode::Run()+0x78>
 800a6c0:	68e3      	ldr	r3, [r4, #12]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d0b0      	beq.n	800a628 <ArtNetNode::Run()+0x78>
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f001 f891 	bl	800b7ee <ArtNetNode::HandleTodRequest()>
 800a6cc:	e7ac      	b.n	800a628 <ArtNetNode::Run()+0x78>
 800a6ce:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 800a6d2:	d026      	beq.n	800a722 <ArtNetNode::Run()+0x172>
 800a6d4:	d80c      	bhi.n	800a6f0 <ArtNetNode::Run()+0x140>
 800a6d6:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 800a6da:	d02e      	beq.n	800a73a <ArtNetNode::Run()+0x18a>
 800a6dc:	f5b3 4f17 	cmp.w	r3, #38656	; 0x9700
 800a6e0:	d1a2      	bne.n	800a628 <ArtNetNode::Run()+0x78>
 800a6e2:	68a3      	ldr	r3, [r4, #8]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d09f      	beq.n	800a628 <ArtNetNode::Run()+0x78>
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f001 f96b 	bl	800b9c4 <ArtNetNode::HandleTimeCode()>
 800a6ee:	e79b      	b.n	800a628 <ArtNetNode::Run()+0x78>
 800a6f0:	f5b3 4f19 	cmp.w	r3, #39168	; 0x9900
 800a6f4:	d029      	beq.n	800a74a <ArtNetNode::Run()+0x19a>
 800a6f6:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 800a6fa:	d195      	bne.n	800a628 <ArtNetNode::Run()+0x78>
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f000 fd9d 	bl	800b23c <ArtNetNode::HandleIpProg()>
 800a702:	e791      	b.n	800a628 <ArtNetNode::Run()+0x78>
 800a704:	4620      	mov	r0, r4
 800a706:	f000 ff83 	bl	800b610 <ArtNetNode::HandlePoll()>
 800a70a:	e78d      	b.n	800a628 <ArtNetNode::Run()+0x78>
 800a70c:	6863      	ldr	r3, [r4, #4]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d08a      	beq.n	800a628 <ArtNetNode::Run()+0x78>
 800a712:	4620      	mov	r0, r4
 800a714:	f001 f90c 	bl	800b930 <ArtNetNode::HandleSync()>
 800a718:	e786      	b.n	800a628 <ArtNetNode::Run()+0x78>
 800a71a:	4620      	mov	r0, r4
 800a71c:	f000 f9f8 	bl	800ab10 <ArtNetNode::HandleAddress()>
 800a720:	e782      	b.n	800a628 <ArtNetNode::Run()+0x78>
 800a722:	4620      	mov	r0, r4
 800a724:	f001 f954 	bl	800b9d0 <ArtNetNode::HandleTimeSync()>
 800a728:	e77e      	b.n	800a628 <ArtNetNode::Run()+0x78>
 800a72a:	68e3      	ldr	r3, [r4, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f43f af7b 	beq.w	800a628 <ArtNetNode::Run()+0x78>
 800a732:	4620      	mov	r0, r4
 800a734:	f001 f81f 	bl	800b776 <ArtNetNode::HandleTodControl()>
 800a738:	e776      	b.n	800a628 <ArtNetNode::Run()+0x78>
 800a73a:	68e3      	ldr	r3, [r4, #12]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f43f af73 	beq.w	800a628 <ArtNetNode::Run()+0x78>
 800a742:	4620      	mov	r0, r4
 800a744:	f001 f887 	bl	800b856 <ArtNetNode::HandleRdm()>
 800a748:	e76e      	b.n	800a628 <ArtNetNode::Run()+0x78>
 800a74a:	6963      	ldr	r3, [r4, #20]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f43f af6b 	beq.w	800a628 <ArtNetNode::Run()+0x78>
 800a752:	4620      	mov	r0, r4
 800a754:	f001 fede 	bl	800c514 <ArtNetNode::HandleTrigger()>
 800a758:	e766      	b.n	800a628 <ArtNetNode::Run()+0x78>
 800a75a:	2102      	movs	r1, #2
 800a75c:	e77d      	b.n	800a65a <ArtNetNode::Run()+0xaa>
 800a75e:	bf00      	nop
 800a760:	2000ac7c 	andcs	sl, r0, ip, ror ip
 800a764:	2000ac60 	andcs	sl, r0, r0, ror #24

0800a768 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
 800a768:	b93b      	cbnz	r3, 800a77a <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x12>
 800a76a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a76e:	f8b0 3940 	ldrh.w	r3, [r0, #2368]	; 0x940
 800a772:	8013      	strh	r3, [r2, #0]
 800a774:	f890 0944 	ldrb.w	r0, [r0, #2372]	; 0x944
 800a778:	4770      	bx	lr
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	bf01      	itttt	eq
 800a77e:	2328      	moveq	r3, #40	; 0x28
 800a780:	fb03 0001 	mlaeq	r0, r3, r1, r0
 800a784:	f8b0 38f0 	ldrheq.w	r3, [r0, #2288]	; 0x8f0
 800a788:	f890 08f4 	ldrbeq.w	r0, [r0, #2292]	; 0x8f4
 800a78c:	bf0c      	ite	eq
 800a78e:	8013      	strheq	r3, [r2, #0]
 800a790:	2000      	movne	r0, #0
 800a792:	4770      	bx	lr

0800a794 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
 800a794:	4402      	add	r2, r0
 800a796:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 800a79a:	f892 203b 	ldrb.w	r2, [r2, #59]	; 0x3b
 800a79e:	021b      	lsls	r3, r3, #8
 800a7a0:	0112      	lsls	r2, r2, #4
 800a7a2:	b2d2      	uxtb	r2, r2
 800a7a4:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	f001 010f 	and.w	r1, r1, #15
 800a7ae:	ea43 0001 	orr.w	r0, r3, r1
 800a7b2:	4770      	bx	lr

0800a7b4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
 800a7b4:	2901      	cmp	r1, #1
 800a7b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	460d      	mov	r5, r1
 800a7be:	4617      	mov	r7, r2
 800a7c0:	461e      	mov	r6, r3
 800a7c2:	f200 80a3 	bhi.w	800a90c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x158>
 800a7c6:	2a02      	cmp	r2, #2
 800a7c8:	d121      	bne.n	800a80e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x5a>
 800a7ca:	2328      	movs	r3, #40	; 0x28
 800a7cc:	fb03 0301 	mla	r3, r3, r1, r0
 800a7d0:	f893 28f4 	ldrb.w	r2, [r3, #2292]	; 0x8f4
 800a7d4:	b13a      	cbz	r2, 800a7e6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x32>
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 800a7dc:	f890 38ea 	ldrb.w	r3, [r0, #2282]	; 0x8ea
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	f880 38ea 	strb.w	r3, [r0, #2282]	; 0x8ea
 800a7e6:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800a7ea:	f895 3944 	ldrb.w	r3, [r5, #2372]	; 0x944
 800a7ee:	b90b      	cbnz	r3, 800a7f4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x40>
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	e00a      	b.n	800a80a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>
 800a7f4:	2308      	movs	r3, #8
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	f885 3943 	strb.w	r3, [r5, #2371]	; 0x943
 800a7fc:	f885 0944 	strb.w	r0, [r5, #2372]	; 0x944
 800a800:	f894 38eb 	ldrb.w	r3, [r4, #2283]	; 0x8eb
 800a804:	3b01      	subs	r3, #1
 800a806:	f884 38eb 	strb.w	r3, [r4, #2283]	; 0x8eb
 800a80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a80e:	2a00      	cmp	r2, #0
 800a810:	d13b      	bne.n	800a88a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xd6>
 800a812:	eb00 1801 	add.w	r8, r0, r1, lsl #4
 800a816:	f898 3944 	ldrb.w	r3, [r8, #2372]	; 0x944
 800a81a:	b923      	cbnz	r3, 800a826 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x72>
 800a81c:	f890 38eb 	ldrb.w	r3, [r0, #2283]	; 0x8eb
 800a820:	3301      	adds	r3, #1
 800a822:	f880 38eb 	strb.w	r3, [r0, #2283]	; 0x8eb
 800a826:	2301      	movs	r3, #1
 800a828:	f04f 0900 	mov.w	r9, #0
 800a82c:	f888 3944 	strb.w	r3, [r8, #2372]	; 0x944
 800a830:	f006 030f 	and.w	r3, r6, #15
 800a834:	464a      	mov	r2, r9
 800a836:	f888 3942 	strb.w	r3, [r8, #2370]	; 0x942
 800a83a:	4631      	mov	r1, r6
 800a83c:	4620      	mov	r0, r4
 800a83e:	f888 9943 	strb.w	r9, [r8, #2371]	; 0x943
 800a842:	f7ff ffa7 	bl	800a794 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a846:	2328      	movs	r3, #40	; 0x28
 800a848:	fb03 4305 	mla	r3, r3, r5, r4
 800a84c:	f8a8 0940 	strh.w	r0, [r8, #2368]	; 0x940
 800a850:	f893 28f4 	ldrb.w	r2, [r3, #2292]	; 0x8f4
 800a854:	b132      	cbz	r2, 800a864 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a856:	f883 98f4 	strb.w	r9, [r3, #2292]	; 0x8f4
 800a85a:	f894 38ea 	ldrb.w	r3, [r4, #2282]	; 0x8ea
 800a85e:	3b01      	subs	r3, #1
 800a860:	f884 38ea 	strb.w	r3, [r4, #2282]	; 0x8ea
 800a864:	69a0      	ldr	r0, [r4, #24]
 800a866:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d042      	beq.n	800a8f4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x140>
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d13b      	bne.n	800a8ea <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x136>
 800a872:	69e0      	ldr	r0, [r4, #28]
 800a874:	2800      	cmp	r0, #0
 800a876:	d143      	bne.n	800a900 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x14c>
 800a878:	6a20      	ldr	r0, [r4, #32]
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d0b8      	beq.n	800a7f0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800a87e:	6803      	ldr	r3, [r0, #0]
 800a880:	4632      	mov	r2, r6
 800a882:	4629      	mov	r1, r5
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	4798      	blx	r3
 800a888:	e7b2      	b.n	800a7f0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800a88a:	2a01      	cmp	r2, #1
 800a88c:	d1ea      	bne.n	800a864 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a88e:	f04f 0828 	mov.w	r8, #40	; 0x28
 800a892:	fb08 0301 	mla	r3, r8, r1, r0
 800a896:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
 800a89a:	b923      	cbnz	r3, 800a8a6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xf2>
 800a89c:	f890 38ea 	ldrb.w	r3, [r0, #2282]	; 0x8ea
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	f880 38ea 	strb.w	r3, [r0, #2282]	; 0x8ea
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	fb08 4805 	mla	r8, r8, r5, r4
 800a8ac:	f888 38f4 	strb.w	r3, [r8, #2292]	; 0x8f4
 800a8b0:	f006 030f 	and.w	r3, r6, #15
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f888 38f2 	strb.w	r3, [r8, #2290]	; 0x8f2
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f7ff ff69 	bl	800a794 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a8c2:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 800a8c6:	f8a8 08f0 	strh.w	r0, [r8, #2288]	; 0x8f0
 800a8ca:	f893 2944 	ldrb.w	r2, [r3, #2372]	; 0x944
 800a8ce:	2a00      	cmp	r2, #0
 800a8d0:	d0c8      	beq.n	800a864 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 2944 	strb.w	r2, [r3, #2372]	; 0x944
 800a8d8:	2208      	movs	r2, #8
 800a8da:	f883 2943 	strb.w	r2, [r3, #2371]	; 0x943
 800a8de:	f894 38eb 	ldrb.w	r3, [r4, #2283]	; 0x8eb
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	f884 38eb 	strb.w	r3, [r4, #2283]	; 0x8eb
 800a8e8:	e7bc      	b.n	800a864 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800a8ea:	6803      	ldr	r3, [r0, #0]
 800a8ec:	463a      	mov	r2, r7
 800a8ee:	4629      	mov	r1, r5
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	4798      	blx	r3
 800a8f4:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	f47f af79 	bne.w	800a7f0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800a8fe:	e7b8      	b.n	800a872 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800a900:	6803      	ldr	r3, [r0, #0]
 800a902:	4632      	mov	r2, r6
 800a904:	4629      	mov	r1, r5
 800a906:	695b      	ldr	r3, [r3, #20]
 800a908:	4798      	blx	r3
 800a90a:	e7b5      	b.n	800a878 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xc4>
 800a90c:	f06f 0004 	mvn.w	r0, #4
 800a910:	e77b      	b.n	800a80a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>

0800a912 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
 800a912:	2901      	cmp	r1, #1
 800a914:	d813      	bhi.n	800a93e <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x2c>
 800a916:	b93b      	cbnz	r3, 800a928 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x16>
 800a918:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a91c:	f890 3942 	ldrb.w	r3, [r0, #2370]	; 0x942
 800a920:	7013      	strb	r3, [r2, #0]
 800a922:	f890 0944 	ldrb.w	r0, [r0, #2372]	; 0x944
 800a926:	4770      	bx	lr
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d008      	beq.n	800a93e <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x2c>
 800a92c:	2328      	movs	r3, #40	; 0x28
 800a92e:	fb03 0001 	mla	r0, r3, r1, r0
 800a932:	f890 38f2 	ldrb.w	r3, [r0, #2290]	; 0x8f2
 800a936:	7013      	strb	r3, [r2, #0]
 800a938:	f890 08f4 	ldrb.w	r0, [r0, #2292]	; 0x8f4
 800a93c:	4770      	bx	lr
 800a93e:	2000      	movs	r0, #0
 800a940:	4770      	bx	lr

0800a942 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
 800a942:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a946:	26a0      	movs	r6, #160	; 0xa0
 800a948:	ea4f 0882 	mov.w	r8, r2, lsl #2
 800a94c:	f108 0904 	add.w	r9, r8, #4
 800a950:	f1b9 0f02 	cmp.w	r9, #2
 800a954:	4605      	mov	r5, r0
 800a956:	460f      	mov	r7, r1
 800a958:	4614      	mov	r4, r2
 800a95a:	bf28      	it	cs
 800a95c:	f04f 0902 	movcs.w	r9, #2
 800a960:	fb06 0602 	mla	r6, r6, r2, r0
 800a964:	1883      	adds	r3, r0, r2
 800a966:	f883 103b 	strb.w	r1, [r3, #59]	; 0x3b
 800a96a:	45c8      	cmp	r8, r9
 800a96c:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800a970:	d30c      	bcc.n	800a98c <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x4a>
 800a972:	69e8      	ldr	r0, [r5, #28]
 800a974:	b1a8      	cbz	r0, 800a9a2 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x60>
 800a976:	f895 38e1 	ldrb.w	r3, [r5, #2273]	; 0x8e1
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d111      	bne.n	800a9a2 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x60>
 800a97e:	6803      	ldr	r3, [r0, #0]
 800a980:	463a      	mov	r2, r7
 800a982:	4621      	mov	r1, r4
 800a984:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a988:	69db      	ldr	r3, [r3, #28]
 800a98a:	4718      	bx	r3
 800a98c:	f8b6 18c8 	ldrh.w	r1, [r6, #2248]	; 0x8c8
 800a990:	4622      	mov	r2, r4
 800a992:	4628      	mov	r0, r5
 800a994:	f7ff fefe 	bl	800a794 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a998:	f108 0801 	add.w	r8, r8, #1
 800a99c:	f8a6 08c8 	strh.w	r0, [r6, #2248]	; 0x8c8
 800a9a0:	e7e3      	b.n	800a96a <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x28>
 800a9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a9a6 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
 800a9a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9aa:	26a0      	movs	r6, #160	; 0xa0
 800a9ac:	ea4f 0882 	mov.w	r8, r2, lsl #2
 800a9b0:	f108 0904 	add.w	r9, r8, #4
 800a9b4:	f1b9 0f02 	cmp.w	r9, #2
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	460f      	mov	r7, r1
 800a9bc:	4614      	mov	r4, r2
 800a9be:	bf28      	it	cs
 800a9c0:	f04f 0902 	movcs.w	r9, #2
 800a9c4:	fb06 0602 	mla	r6, r6, r2, r0
 800a9c8:	1883      	adds	r3, r0, r2
 800a9ca:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
 800a9ce:	45c8      	cmp	r8, r9
 800a9d0:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800a9d4:	d30c      	bcc.n	800a9f0 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x4a>
 800a9d6:	69e8      	ldr	r0, [r5, #28]
 800a9d8:	b1a8      	cbz	r0, 800aa06 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x60>
 800a9da:	f895 38e1 	ldrb.w	r3, [r5, #2273]	; 0x8e1
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d111      	bne.n	800aa06 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x60>
 800a9e2:	6803      	ldr	r3, [r0, #0]
 800a9e4:	463a      	mov	r2, r7
 800a9e6:	4621      	mov	r1, r4
 800a9e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9ec:	699b      	ldr	r3, [r3, #24]
 800a9ee:	4718      	bx	r3
 800a9f0:	f8b6 18c8 	ldrh.w	r1, [r6, #2248]	; 0x8c8
 800a9f4:	4622      	mov	r2, r4
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f7ff fecc 	bl	800a794 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a9fc:	f108 0801 	add.w	r8, r8, #1
 800aa00:	f8a6 08c8 	strh.w	r0, [r6, #2248]	; 0x8c8
 800aa04:	e7e3      	b.n	800a9ce <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x28>
 800aa06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800aa0a <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
 800aa0a:	2901      	cmp	r1, #1
 800aa0c:	b570      	push	{r4, r5, r6, lr}
 800aa0e:	4605      	mov	r5, r0
 800aa10:	460c      	mov	r4, r1
 800aa12:	4616      	mov	r6, r2
 800aa14:	d823      	bhi.n	800aa5e <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800aa16:	2228      	movs	r2, #40	; 0x28
 800aa18:	fb02 0301 	mla	r3, r2, r1, r0
 800aa1c:	fb02 0201 	mla	r2, r2, r1, r0
 800aa20:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
 800aa24:	f893 38f3 	ldrb.w	r3, [r3, #2291]	; 0x8f3
 800aa28:	2e01      	cmp	r6, #1
 800aa2a:	bf0c      	ite	eq
 800aa2c:	f043 0301 	orreq.w	r3, r3, #1
 800aa30:	f003 03fe 	andne.w	r3, r3, #254	; 0xfe
 800aa34:	f882 38f3 	strb.w	r3, [r2, #2291]	; 0x8f3
 800aa38:	f890 38e1 	ldrb.w	r3, [r0, #2273]	; 0x8e1
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	d10e      	bne.n	800aa5e <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800aa40:	69c0      	ldr	r0, [r0, #28]
 800aa42:	b118      	cbz	r0, 800aa4c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x42>
 800aa44:	6803      	ldr	r3, [r0, #0]
 800aa46:	4632      	mov	r2, r6
 800aa48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa4a:	4798      	blx	r3
 800aa4c:	6a28      	ldr	r0, [r5, #32]
 800aa4e:	b130      	cbz	r0, 800aa5e <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800aa50:	6803      	ldr	r3, [r0, #0]
 800aa52:	4632      	mov	r2, r6
 800aa54:	4621      	mov	r1, r4
 800aa56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa5a:	6a1b      	ldr	r3, [r3, #32]
 800aa5c:	4718      	bx	r3
 800aa5e:	bd70      	pop	{r4, r5, r6, pc}

0800aa60 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
 800aa60:	2901      	cmp	r1, #1
 800aa62:	b570      	push	{r4, r5, r6, lr}
 800aa64:	4605      	mov	r5, r0
 800aa66:	460c      	mov	r4, r1
 800aa68:	4616      	mov	r6, r2
 800aa6a:	d823      	bhi.n	800aab4 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800aa6c:	2228      	movs	r2, #40	; 0x28
 800aa6e:	fb02 0301 	mla	r3, r2, r1, r0
 800aa72:	fb02 0201 	mla	r2, r2, r1, r0
 800aa76:	f8c3 6908 	str.w	r6, [r3, #2312]	; 0x908
 800aa7a:	f893 38f3 	ldrb.w	r3, [r3, #2291]	; 0x8f3
 800aa7e:	2e01      	cmp	r6, #1
 800aa80:	bf0c      	ite	eq
 800aa82:	f043 0302 	orreq.w	r3, r3, #2
 800aa86:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 800aa8a:	f882 38f3 	strb.w	r3, [r2, #2291]	; 0x8f3
 800aa8e:	f890 38e1 	ldrb.w	r3, [r0, #2273]	; 0x8e1
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d10e      	bne.n	800aab4 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800aa96:	69c0      	ldr	r0, [r0, #28]
 800aa98:	b118      	cbz	r0, 800aaa2 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x42>
 800aa9a:	6803      	ldr	r3, [r0, #0]
 800aa9c:	4632      	mov	r2, r6
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa0:	4798      	blx	r3
 800aaa2:	6a28      	ldr	r0, [r5, #32]
 800aaa4:	b130      	cbz	r0, 800aab4 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 800aaa6:	6803      	ldr	r3, [r0, #0]
 800aaa8:	4632      	mov	r2, r6
 800aaaa:	4621      	mov	r1, r4
 800aaac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aab0:	69db      	ldr	r3, [r3, #28]
 800aab2:	4718      	bx	r3
 800aab4:	bd70      	pop	{r4, r5, r6, pc}

0800aab6 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>:
 800aab6:	b570      	push	{r4, r5, r6, lr}
 800aab8:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 800aabc:	f1a1 0208 	sub.w	r2, r1, #8
 800aac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aac4:	4604      	mov	r4, r0
 800aac6:	f880 3091 	strb.w	r3, [r0, #145]	; 0x91
 800aaca:	2a04      	cmp	r2, #4
 800aacc:	d81f      	bhi.n	800ab0e <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x58>
 800aace:	e8df f002 	tbb	[pc, r2]
 800aad2:	1e1b0307 	cdpne	3, 1, cr0, cr11, cr7, {0}
 800aad6:	f043001e 			; <UNDEFINED> instruction: 0xf043001e
 800aada:	0340      	lsls	r0, r0, #13
 800aadc:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
 800aae0:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d112      	bne.n	800ab0e <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x58>
 800aae8:	69e0      	ldr	r0, [r4, #28]
 800aaea:	f001 0507 	and.w	r5, r1, #7
 800aaee:	b118      	cbz	r0, 800aaf8 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x42>
 800aaf0:	6803      	ldr	r3, [r0, #0]
 800aaf2:	4629      	mov	r1, r5
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	4798      	blx	r3
 800aaf8:	6a20      	ldr	r0, [r4, #32]
 800aafa:	b140      	cbz	r0, 800ab0e <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x58>
 800aafc:	6803      	ldr	r3, [r0, #0]
 800aafe:	4629      	mov	r1, r5
 800ab00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab06:	4718      	bx	r3
 800ab08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab0c:	e7e6      	b.n	800aadc <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x26>
 800ab0e:	bd70      	pop	{r4, r5, r6, pc}

0800ab10 <ArtNetNode::HandleAddress()>:
 800ab10:	2301      	movs	r3, #1
 800ab12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab16:	f880 38e0 	strb.w	r3, [r0, #2272]	; 0x8e0
 800ab1a:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 800ab1e:	4604      	mov	r4, r0
 800ab20:	b133      	cbz	r3, 800ab30 <ArtNetNode::HandleAddress()+0x20>
 800ab22:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 800ab26:	f7ff fbdb 	bl	800a2e0 <ArtNetNode::SetShortName(char const*)>
 800ab2a:	2306      	movs	r3, #6
 800ab2c:	f884 38e0 	strb.w	r3, [r4, #2272]	; 0x8e0
 800ab30:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 800ab34:	b13b      	cbz	r3, 800ab46 <ArtNetNode::HandleAddress()+0x36>
 800ab36:	4620      	mov	r0, r4
 800ab38:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
 800ab3c:	f7ff fbf8 	bl	800a330 <ArtNetNode::SetLongName(char const*)>
 800ab40:	2307      	movs	r3, #7
 800ab42:	f884 38e0 	strb.w	r3, [r4, #2272]	; 0x8e0
 800ab46:	f894 50a9 	ldrb.w	r5, [r4, #169]	; 0xa9
 800ab4a:	b105      	cbz	r5, 800ab4e <ArtNetNode::HandleAddress()+0x3e>
 800ab4c:	3d01      	subs	r5, #1
 800ab4e:	f894 1104 	ldrb.w	r1, [r4, #260]	; 0x104
 800ab52:	2900      	cmp	r1, #0
 800ab54:	d146      	bne.n	800abe4 <ArtNetNode::HandleAddress()+0xd4>
 800ab56:	462a      	mov	r2, r5
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f7ff fef2 	bl	800a942 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800ab5e:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
 800ab62:	2900      	cmp	r1, #0
 800ab64:	d144      	bne.n	800abf0 <ArtNetNode::HandleAddress()+0xe0>
 800ab66:	462a      	mov	r2, r5
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f7ff ff1c 	bl	800a9a6 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800ab6e:	00ad      	lsls	r5, r5, #2
 800ab70:	462e      	mov	r6, r5
 800ab72:	f104 07fb 	add.w	r7, r4, #251	; 0xfb
 800ab76:	f104 08ff 	add.w	r8, r4, #255	; 0xff
 800ab7a:	797b      	ldrb	r3, [r7, #5]
 800ab7c:	2b7f      	cmp	r3, #127	; 0x7f
 800ab7e:	d007      	beq.n	800ab90 <ArtNetNode::HandleAddress()+0x80>
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d13b      	bne.n	800abfc <ArtNetNode::HandleAddress()+0xec>
 800ab84:	2301      	movs	r3, #1
 800ab86:	2201      	movs	r2, #1
 800ab88:	4631      	mov	r1, r6
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f7ff fe12 	bl	800a7b4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800ab90:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800ab94:	2a7f      	cmp	r2, #127	; 0x7f
 800ab96:	d005      	beq.n	800aba4 <ArtNetNode::HandleAddress()+0x94>
 800ab98:	bbaa      	cbnz	r2, 800ac06 <ArtNetNode::HandleAddress()+0xf6>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	4631      	mov	r1, r6
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f7ff fe08 	bl	800a7b4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800aba4:	45b8      	cmp	r8, r7
 800aba6:	f106 0601 	add.w	r6, r6, #1
 800abaa:	d1e6      	bne.n	800ab7a <ArtNetNode::HandleAddress()+0x6a>
 800abac:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
 800abb0:	f003 0103 	and.w	r1, r3, #3
 800abb4:	2b53      	cmp	r3, #83	; 0x53
 800abb6:	4429      	add	r1, r5
 800abb8:	d82b      	bhi.n	800ac12 <ArtNetNode::HandleAddress()+0x102>
 800abba:	2b4f      	cmp	r3, #79	; 0x4f
 800abbc:	f200 8093 	bhi.w	800ace6 <ArtNetNode::HandleAddress()+0x1d6>
 800abc0:	1e5a      	subs	r2, r3, #1
 800abc2:	b2d0      	uxtb	r0, r2
 800abc4:	2812      	cmp	r0, #18
 800abc6:	d834      	bhi.n	800ac32 <ArtNetNode::HandleAddress()+0x122>
 800abc8:	2a12      	cmp	r2, #18
 800abca:	d832      	bhi.n	800ac32 <ArtNetNode::HandleAddress()+0x122>
 800abcc:	e8df f002 	tbb	[pc, r2]
 800abd0:	75695d4d 	strbvc	r5, [r9, #-3405]!	; 0xfffff2b3
 800abd4:	81313131 	teqhi	r1, r1, lsr r1
 800abd8:	81818181 	orrhi	r8, r1, r1, lsl #3
 800abdc:	86313131 			; <UNDEFINED> instruction: 0x86313131
 800abe0:	00868686 	addeq	r8, r6, r6, lsl #13
 800abe4:	060f      	lsls	r7, r1, #24
 800abe6:	d5ba      	bpl.n	800ab5e <ArtNetNode::HandleAddress()+0x4e>
 800abe8:	462a      	mov	r2, r5
 800abea:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800abee:	e7b3      	b.n	800ab58 <ArtNetNode::HandleAddress()+0x48>
 800abf0:	060e      	lsls	r6, r1, #24
 800abf2:	d5bc      	bpl.n	800ab6e <ArtNetNode::HandleAddress()+0x5e>
 800abf4:	462a      	mov	r2, r5
 800abf6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800abfa:	e7b5      	b.n	800ab68 <ArtNetNode::HandleAddress()+0x58>
 800abfc:	0618      	lsls	r0, r3, #24
 800abfe:	d5c7      	bpl.n	800ab90 <ArtNetNode::HandleAddress()+0x80>
 800ac00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac04:	e7bf      	b.n	800ab86 <ArtNetNode::HandleAddress()+0x76>
 800ac06:	0611      	lsls	r1, r2, #24
 800ac08:	d5cc      	bpl.n	800aba4 <ArtNetNode::HandleAddress()+0x94>
 800ac0a:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800ac0e:	2200      	movs	r2, #0
 800ac10:	e7c4      	b.n	800ab9c <ArtNetNode::HandleAddress()+0x8c>
 800ac12:	2b93      	cmp	r3, #147	; 0x93
 800ac14:	d81a      	bhi.n	800ac4c <ArtNetNode::HandleAddress()+0x13c>
 800ac16:	2b8f      	cmp	r3, #143	; 0x8f
 800ac18:	d869      	bhi.n	800acee <ArtNetNode::HandleAddress()+0x1de>
 800ac1a:	2b63      	cmp	r3, #99	; 0x63
 800ac1c:	d806      	bhi.n	800ac2c <ArtNetNode::HandleAddress()+0x11c>
 800ac1e:	2b5f      	cmp	r3, #95	; 0x5f
 800ac20:	d907      	bls.n	800ac32 <ArtNetNode::HandleAddress()+0x122>
 800ac22:	2200      	movs	r2, #0
 800ac24:	4620      	mov	r0, r4
 800ac26:	f7ff fef0 	bl	800aa0a <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800ac2a:	e002      	b.n	800ac32 <ArtNetNode::HandleAddress()+0x122>
 800ac2c:	3b70      	subs	r3, #112	; 0x70
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d95b      	bls.n	800acea <ArtNetNode::HandleAddress()+0x1da>
 800ac32:	69a0      	ldr	r0, [r4, #24]
 800ac34:	b120      	cbz	r0, 800ac40 <ArtNetNode::HandleAddress()+0x130>
 800ac36:	6803      	ldr	r3, [r0, #0]
 800ac38:	f894 1106 	ldrb.w	r1, [r4, #262]	; 0x106
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	4798      	blx	r3
 800ac40:	4620      	mov	r0, r4
 800ac42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac46:	2101      	movs	r1, #1
 800ac48:	f000 bc96 	b.w	800b578 <ArtNetNode::SendPollRelply(bool)>
 800ac4c:	2bc3      	cmp	r3, #195	; 0xc3
 800ac4e:	d806      	bhi.n	800ac5e <ArtNetNode::HandleAddress()+0x14e>
 800ac50:	2bbf      	cmp	r3, #191	; 0xbf
 800ac52:	d9ee      	bls.n	800ac32 <ArtNetNode::HandleAddress()+0x122>
 800ac54:	2201      	movs	r2, #1
 800ac56:	4620      	mov	r0, r4
 800ac58:	f000 fd16 	bl	800b688 <ArtNetNode::SetRmd(unsigned int, bool)>
 800ac5c:	e7e9      	b.n	800ac32 <ArtNetNode::HandleAddress()+0x122>
 800ac5e:	3330      	adds	r3, #48	; 0x30
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2b03      	cmp	r3, #3
 800ac64:	d8e5      	bhi.n	800ac32 <ArtNetNode::HandleAddress()+0x122>
 800ac66:	2200      	movs	r2, #0
 800ac68:	e7f5      	b.n	800ac56 <ArtNetNode::HandleAddress()+0x146>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	f884 38e6 	strb.w	r3, [r4, #2278]	; 0x8e6
 800ac70:	f894 38f3 	ldrb.w	r3, [r4, #2291]	; 0x8f3
 800ac74:	f023 0308 	bic.w	r3, r3, #8
 800ac78:	f884 38f3 	strb.w	r3, [r4, #2291]	; 0x8f3
 800ac7c:	f894 391b 	ldrb.w	r3, [r4, #2331]	; 0x91b
 800ac80:	f023 0308 	bic.w	r3, r3, #8
 800ac84:	f884 391b 	strb.w	r3, [r4, #2331]	; 0x91b
 800ac88:	e7d3      	b.n	800ac32 <ArtNetNode::HandleAddress()+0x122>
 800ac8a:	4b3a      	ldr	r3, [pc, #232]	; (800ad74 <ArtNetNode::HandleAddress()+0x264>)
 800ac8c:	2102      	movs	r1, #2
 800ac8e:	6818      	ldr	r0, [r3, #0]
 800ac90:	f008 fcd2 	bl	8013638 <LedBlink::SetMode(ledblink::Mode)>
 800ac94:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 800ac98:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800ac9c:	f884 308f 	strb.w	r3, [r4, #143]	; 0x8f
 800aca0:	e7c7      	b.n	800ac32 <ArtNetNode::HandleAddress()+0x122>
 800aca2:	4b34      	ldr	r3, [pc, #208]	; (800ad74 <ArtNetNode::HandleAddress()+0x264>)
 800aca4:	2100      	movs	r1, #0
 800aca6:	6818      	ldr	r0, [r3, #0]
 800aca8:	f008 fcc6 	bl	8013638 <LedBlink::SetMode(ledblink::Mode)>
 800acac:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 800acb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800acb8:	e7f0      	b.n	800ac9c <ArtNetNode::HandleAddress()+0x18c>
 800acba:	4b2e      	ldr	r3, [pc, #184]	; (800ad74 <ArtNetNode::HandleAddress()+0x264>)
 800acbc:	2104      	movs	r1, #4
 800acbe:	6818      	ldr	r0, [r3, #0]
 800acc0:	f008 fcba 	bl	8013638 <LedBlink::SetMode(ledblink::Mode)>
 800acc4:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 800acc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800accc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acd0:	e7e4      	b.n	800ac9c <ArtNetNode::HandleAddress()+0x18c>
 800acd2:	4619      	mov	r1, r3
 800acd4:	4620      	mov	r0, r4
 800acd6:	f7ff feee 	bl	800aab6 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800acda:	e7aa      	b.n	800ac32 <ArtNetNode::HandleAddress()+0x122>
 800acdc:	2201      	movs	r2, #1
 800acde:	4620      	mov	r0, r4
 800ace0:	f7ff febe 	bl	800aa60 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800ace4:	e7a5      	b.n	800ac32 <ArtNetNode::HandleAddress()+0x122>
 800ace6:	2200      	movs	r2, #0
 800ace8:	e7f9      	b.n	800acde <ArtNetNode::HandleAddress()+0x1ce>
 800acea:	2201      	movs	r2, #1
 800acec:	e79a      	b.n	800ac24 <ArtNetNode::HandleAddress()+0x114>
 800acee:	4b22      	ldr	r3, [pc, #136]	; (800ad78 <ArtNetNode::HandleAddress()+0x268>)
 800acf0:	b2cd      	uxtb	r5, r1
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	2700      	movs	r7, #0
 800acf6:	07d2      	lsls	r2, r2, #31
 800acf8:	bf5c      	itt	pl
 800acfa:	2201      	movpl	r2, #1
 800acfc:	601a      	strpl	r2, [r3, #0]
 800acfe:	f240 6204 	movw	r2, #1540	; 0x604
 800ad02:	436a      	muls	r2, r5
 800ad04:	4b1d      	ldr	r3, [pc, #116]	; (800ad7c <ArtNetNode::HandleAddress()+0x26c>)
 800ad06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad0a:	441a      	add	r2, r3
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	6860      	ldr	r0, [r4, #4]
 800ad10:	f502 7600 	add.w	r6, r2, #512	; 0x200
 800ad14:	42b1      	cmp	r1, r6
 800ad16:	d12a      	bne.n	800ad6e <ArtNetNode::HandleAddress()+0x25e>
 800ad18:	f240 6104 	movw	r1, #1540	; 0x604
 800ad1c:	fb01 3105 	mla	r1, r1, r5, r3
 800ad20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad24:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800ad28:	6801      	ldr	r1, [r0, #0]
 800ad2a:	690e      	ldr	r6, [r1, #16]
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	47b0      	blx	r6
 800ad30:	2d01      	cmp	r5, #1
 800ad32:	f63f af7e 	bhi.w	800ac32 <ArtNetNode::HandleAddress()+0x122>
 800ad36:	2628      	movs	r6, #40	; 0x28
 800ad38:	fb06 4605 	mla	r6, r6, r5, r4
 800ad3c:	f8d6 3910 	ldr.w	r3, [r6, #2320]	; 0x910
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f47f af76 	bne.w	800ac32 <ArtNetNode::HandleAddress()+0x122>
 800ad46:	f896 3915 	ldrb.w	r3, [r6, #2325]	; 0x915
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f47f af71 	bne.w	800ac32 <ArtNetNode::HandleAddress()+0x122>
 800ad50:	6860      	ldr	r0, [r4, #4]
 800ad52:	4629      	mov	r1, r5
 800ad54:	6803      	ldr	r3, [r0, #0]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	4798      	blx	r3
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	f886 3915 	strb.w	r3, [r6, #2325]	; 0x915
 800ad60:	f896 38f3 	ldrb.w	r3, [r6, #2291]	; 0x8f3
 800ad64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ad68:	f886 38f3 	strb.w	r3, [r6, #2291]	; 0x8f3
 800ad6c:	e761      	b.n	800ac32 <ArtNetNode::HandleAddress()+0x122>
 800ad6e:	f801 7b01 	strb.w	r7, [r1], #1
 800ad72:	e7cf      	b.n	800ad14 <ArtNetNode::HandleAddress()+0x204>
 800ad74:	2000ac60 	andcs	sl, r0, r0, ror #24
 800ad78:	200006c8 	andcs	r0, r0, r8, asr #13
 800ad7c:	200006cc 	andcs	r0, r0, ip, asr #13

0800ad80 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 800ad80:	f240 6304 	movw	r3, #1540	; 0x604
 800ad84:	fb03 0001 	mla	r0, r3, r1, r0
 800ad88:	2300      	movs	r3, #0
 800ad8a:	b510      	push	{r4, lr}
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d100      	bne.n	800ad92 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x12>
 800ad90:	bd10      	pop	{r4, pc}
 800ad92:	f810 4b01 	ldrb.w	r4, [r0], #1
 800ad96:	3301      	adds	r3, #1
 800ad98:	f890 11ff 	ldrb.w	r1, [r0, #511]	; 0x1ff
 800ad9c:	42a1      	cmp	r1, r4
 800ad9e:	bf38      	it	cc
 800ada0:	4621      	movcc	r1, r4
 800ada2:	f880 13ff 	strb.w	r1, [r0, #1023]	; 0x3ff
 800ada6:	e7f1      	b.n	800ad8c <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>

0800ada8 <memcpy.isra.0>:
 800ada8:	3801      	subs	r0, #1
 800adaa:	440a      	add	r2, r1
 800adac:	4291      	cmp	r1, r2
 800adae:	d100      	bne.n	800adb2 <memcpy.isra.0+0xa>
 800adb0:	4770      	bx	lr
 800adb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adb6:	f800 3f01 	strb.w	r3, [r0, #1]!
 800adba:	e7f7      	b.n	800adac <memcpy.isra.0+0x4>

0800adbc <lightset::Data::Get()>:
 800adbc:	4b03      	ldr	r3, [pc, #12]	; (800adcc <lightset::Data::Get()+0x10>)
 800adbe:	4804      	ldr	r0, [pc, #16]	; (800add0 <lightset::Data::Get()+0x14>)
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	07d2      	lsls	r2, r2, #31
 800adc4:	bf5c      	itt	pl
 800adc6:	2201      	movpl	r2, #1
 800adc8:	601a      	strpl	r2, [r3, #0]
 800adca:	4770      	bx	lr
 800adcc:	200006c8 	andcs	r0, r0, r8, asr #13
 800add0:	200006cc 	andcs	r0, r0, ip, asr #13

0800add4 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 800add4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add8:	4615      	mov	r5, r2
 800adda:	460f      	mov	r7, r1
 800addc:	4604      	mov	r4, r0
 800adde:	f7ff ffed 	bl	800adbc <lightset::Data::Get()>
 800ade2:	f240 6304 	movw	r3, #1540	; 0x604
 800ade6:	4606      	mov	r6, r0
 800ade8:	435c      	muls	r4, r3
 800adea:	eb00 0804 	add.w	r8, r0, r4
 800adee:	462a      	mov	r2, r5
 800adf0:	4639      	mov	r1, r7
 800adf2:	4640      	mov	r0, r8
 800adf4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800adf8:	f7ff ffd6 	bl	800ada8 <memcpy.isra.0>
 800adfc:	462a      	mov	r2, r5
 800adfe:	4639      	mov	r1, r7
 800ae00:	f8c8 5600 	str.w	r5, [r8, #1536]	; 0x600
 800ae04:	1930      	adds	r0, r6, r4
 800ae06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae0a:	f7ff bfcd 	b.w	800ada8 <memcpy.isra.0>

0800ae0e <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800ae0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae12:	4680      	mov	r8, r0
 800ae14:	f240 6404 	movw	r4, #1540	; 0x604
 800ae18:	4615      	mov	r5, r2
 800ae1a:	460f      	mov	r7, r1
 800ae1c:	4699      	mov	r9, r3
 800ae1e:	f7ff ffcd 	bl	800adbc <lightset::Data::Get()>
 800ae22:	fb04 f408 	mul.w	r4, r4, r8
 800ae26:	eb00 0a04 	add.w	sl, r0, r4
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	462a      	mov	r2, r5
 800ae2e:	4639      	mov	r1, r7
 800ae30:	4650      	mov	r0, sl
 800ae32:	f7ff ffb9 	bl	800ada8 <memcpy.isra.0>
 800ae36:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
 800ae3a:	f1b9 0f00 	cmp.w	r9, #0
 800ae3e:	d106      	bne.n	800ae4e <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x40>
 800ae40:	462a      	mov	r2, r5
 800ae42:	4641      	mov	r1, r8
 800ae44:	4630      	mov	r0, r6
 800ae46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae4a:	f7ff bf99 	b.w	800ad80 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800ae4e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800ae52:	462a      	mov	r2, r5
 800ae54:	4639      	mov	r1, r7
 800ae56:	1930      	adds	r0, r6, r4
 800ae58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae5c:	f7ff bfa4 	b.w	800ada8 <memcpy.isra.0>

0800ae60 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800ae60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae64:	4616      	mov	r6, r2
 800ae66:	4699      	mov	r9, r3
 800ae68:	4680      	mov	r8, r0
 800ae6a:	460f      	mov	r7, r1
 800ae6c:	f7ff ffa6 	bl	800adbc <lightset::Data::Get()>
 800ae70:	f240 6404 	movw	r4, #1540	; 0x604
 800ae74:	4605      	mov	r5, r0
 800ae76:	fb04 f408 	mul.w	r4, r4, r8
 800ae7a:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800ae7e:	4632      	mov	r2, r6
 800ae80:	4639      	mov	r1, r7
 800ae82:	4428      	add	r0, r5
 800ae84:	f7ff ff90 	bl	800ada8 <memcpy.isra.0>
 800ae88:	192b      	adds	r3, r5, r4
 800ae8a:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
 800ae8e:	f1b9 0f00 	cmp.w	r9, #0
 800ae92:	d106      	bne.n	800aea2 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 800ae94:	4632      	mov	r2, r6
 800ae96:	4641      	mov	r1, r8
 800ae98:	4628      	mov	r0, r5
 800ae9a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae9e:	f7ff bf6f 	b.w	800ad80 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800aea2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800aea6:	4632      	mov	r2, r6
 800aea8:	4639      	mov	r1, r7
 800aeaa:	1928      	adds	r0, r5, r4
 800aeac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeb0:	f7ff bf7a 	b.w	800ada8 <memcpy.isra.0>

0800aeb4 <ArtNetNode::UpdateMergeStatus(unsigned int)>:
 800aeb4:	f890 38e6 	ldrb.w	r3, [r0, #2278]	; 0x8e6
 800aeb8:	b91b      	cbnz	r3, 800aec2 <ArtNetNode::UpdateMergeStatus(unsigned int)+0xe>
 800aeba:	f240 1301 	movw	r3, #257	; 0x101
 800aebe:	f8a0 38e6 	strh.w	r3, [r0, #2278]	; 0x8e6
 800aec2:	2328      	movs	r3, #40	; 0x28
 800aec4:	fb03 0001 	mla	r0, r3, r1, r0
 800aec8:	f890 38f3 	ldrb.w	r3, [r0, #2291]	; 0x8f3
 800aecc:	f043 0308 	orr.w	r3, r3, #8
 800aed0:	f880 38f3 	strb.w	r3, [r0, #2291]	; 0x8f3
 800aed4:	4770      	bx	lr

0800aed6 <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
 800aed6:	2328      	movs	r3, #40	; 0x28
 800aed8:	b530      	push	{r4, r5, lr}
 800aeda:	f242 7510 	movw	r5, #10000	; 0x2710
 800aede:	fb03 0301 	mla	r3, r3, r1, r0
 800aee2:	f8d0 2874 	ldr.w	r2, [r0, #2164]	; 0x874
 800aee6:	f8d3 48f8 	ldr.w	r4, [r3, #2296]	; 0x8f8
 800aeea:	1b14      	subs	r4, r2, r4
 800aeec:	42ac      	cmp	r4, r5
 800aeee:	d908      	bls.n	800af02 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x2c>
 800aef0:	2400      	movs	r4, #0
 800aef2:	f8c3 48fc 	str.w	r4, [r3, #2300]	; 0x8fc
 800aef6:	f893 48f3 	ldrb.w	r4, [r3, #2291]	; 0x8f3
 800aefa:	f024 0408 	bic.w	r4, r4, #8
 800aefe:	f883 48f3 	strb.w	r4, [r3, #2291]	; 0x8f3
 800af02:	2328      	movs	r3, #40	; 0x28
 800af04:	fb03 0101 	mla	r1, r3, r1, r0
 800af08:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800af0c:	1ad2      	subs	r2, r2, r3
 800af0e:	f242 7310 	movw	r3, #10000	; 0x2710
 800af12:	429a      	cmp	r2, r3
 800af14:	d908      	bls.n	800af28 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x52>
 800af16:	2300      	movs	r3, #0
 800af18:	f8c1 3904 	str.w	r3, [r1, #2308]	; 0x904
 800af1c:	f891 38f3 	ldrb.w	r3, [r1, #2291]	; 0x8f3
 800af20:	f023 0308 	bic.w	r3, r3, #8
 800af24:	f881 38f3 	strb.w	r3, [r1, #2291]	; 0x8f3
 800af28:	f890 38f3 	ldrb.w	r3, [r0, #2291]	; 0x8f3
 800af2c:	f890 291b 	ldrb.w	r2, [r0, #2331]	; 0x91b
 800af30:	4313      	orrs	r3, r2
 800af32:	071b      	lsls	r3, r3, #28
 800af34:	bf5c      	itt	pl
 800af36:	f44f 7380 	movpl.w	r3, #256	; 0x100
 800af3a:	f8a0 38e6 	strhpl.w	r3, [r0, #2278]	; 0x8e6
 800af3e:	bd30      	pop	{r4, r5, pc}

0800af40 <ArtNetNode::HandleDmx()>:
 800af40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af44:	f8b0 70ac 	ldrh.w	r7, [r0, #172]	; 0xac
 800af48:	4604      	mov	r4, r0
 800af4a:	ba7f      	rev16	r7, r7
 800af4c:	b2bf      	uxth	r7, r7
 800af4e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800af52:	bf28      	it	cs
 800af54:	f44f 7700 	movcs.w	r7, #512	; 0x200
 800af58:	4605      	mov	r5, r0
 800af5a:	2600      	movs	r6, #0
 800af5c:	f04f 0901 	mov.w	r9, #1
 800af60:	f100 08ae 	add.w	r8, r0, #174	; 0xae
 800af64:	f895 38f4 	ldrb.w	r3, [r5, #2292]	; 0x8f4
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d056      	beq.n	800b01a <ArtNetNode::HandleDmx()+0xda>
 800af6c:	f8d5 3910 	ldr.w	r3, [r5, #2320]	; 0x910
 800af70:	2b00      	cmp	r3, #0
 800af72:	d152      	bne.n	800b01a <ArtNetNode::HandleDmx()+0xda>
 800af74:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
 800af78:	f8b5 38f0 	ldrh.w	r3, [r5, #2288]	; 0x8f0
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d14c      	bne.n	800b01a <ArtNetNode::HandleDmx()+0xda>
 800af80:	f895 38f3 	ldrb.w	r3, [r5, #2291]	; 0x8f3
 800af84:	f8d5 b8fc 	ldr.w	fp, [r5, #2300]	; 0x8fc
 800af88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af8c:	f885 38f3 	strb.w	r3, [r5, #2291]	; 0x8f3
 800af90:	f894 38e6 	ldrb.w	r3, [r4, #2278]	; 0x8e6
 800af94:	f8d5 a904 	ldr.w	sl, [r5, #2308]	; 0x904
 800af98:	b133      	cbz	r3, 800afa8 <ArtNetNode::HandleDmx()+0x68>
 800af9a:	f894 38e8 	ldrb.w	r3, [r4, #2280]	; 0x8e8
 800af9e:	b91b      	cbnz	r3, 800afa8 <ArtNetNode::HandleDmx()+0x68>
 800afa0:	4631      	mov	r1, r6
 800afa2:	4620      	mov	r0, r4
 800afa4:	f7ff ff97 	bl	800aed6 <ArtNetNode::CheckMergeTimeouts(unsigned int)>
 800afa8:	ea5b 020a 	orrs.w	r2, fp, sl
 800afac:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
 800afb0:	d138      	bne.n	800b024 <ArtNetNode::HandleDmx()+0xe4>
 800afb2:	f8c5 38fc 	str.w	r3, [r5, #2300]	; 0x8fc
 800afb6:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
 800afba:	463a      	mov	r2, r7
 800afbc:	4641      	mov	r1, r8
 800afbe:	4630      	mov	r0, r6
 800afc0:	f8c5 38f8 	str.w	r3, [r5, #2296]	; 0x8f8
 800afc4:	f7ff ff06 	bl	800add4 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800afc8:	f894 38e5 	ldrb.w	r3, [r4, #2277]	; 0x8e5
 800afcc:	b9fb      	cbnz	r3, 800b00e <ArtNetNode::HandleDmx()+0xce>
 800afce:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800afd2:	f7ff fef3 	bl	800adbc <lightset::Data::Get()>
 800afd6:	f240 6304 	movw	r3, #1540	; 0x604
 800afda:	4373      	muls	r3, r6
 800afdc:	18c2      	adds	r2, r0, r3
 800afde:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 800afe2:	f8da 3000 	ldr.w	r3, [sl]
 800afe6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800afea:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800afee:	1842      	adds	r2, r0, r1
 800aff0:	4631      	mov	r1, r6
 800aff2:	4650      	mov	r0, sl
 800aff4:	47d8      	blx	fp
 800aff6:	f895 3915 	ldrb.w	r3, [r5, #2325]	; 0x915
 800affa:	b943      	cbnz	r3, 800b00e <ArtNetNode::HandleDmx()+0xce>
 800affc:	6860      	ldr	r0, [r4, #4]
 800affe:	4631      	mov	r1, r6
 800b000:	6803      	ldr	r3, [r0, #0]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	4798      	blx	r3
 800b006:	f884 98e7 	strb.w	r9, [r4, #2279]	; 0x8e7
 800b00a:	f885 9915 	strb.w	r9, [r5, #2325]	; 0x915
 800b00e:	f894 38e9 	ldrb.w	r3, [r4, #2281]	; 0x8e9
 800b012:	f043 0302 	orr.w	r3, r3, #2
 800b016:	f884 38e9 	strb.w	r3, [r4, #2281]	; 0x8e9
 800b01a:	3528      	adds	r5, #40	; 0x28
 800b01c:	2e00      	cmp	r6, #0
 800b01e:	d142      	bne.n	800b0a6 <ArtNetNode::HandleDmx()+0x166>
 800b020:	2601      	movs	r6, #1
 800b022:	e79f      	b.n	800af64 <ArtNetNode::HandleDmx()+0x24>
 800b024:	459b      	cmp	fp, r3
 800b026:	d104      	bne.n	800b032 <ArtNetNode::HandleDmx()+0xf2>
 800b028:	f1ba 0f00 	cmp.w	sl, #0
 800b02c:	d0c3      	beq.n	800afb6 <ArtNetNode::HandleDmx()+0x76>
 800b02e:	b11b      	cbz	r3, 800b038 <ArtNetNode::HandleDmx()+0xf8>
 800b030:	e037      	b.n	800b0a2 <ArtNetNode::HandleDmx()+0x162>
 800b032:	f1bb 0f00 	cmp.w	fp, #0
 800b036:	d132      	bne.n	800b09e <ArtNetNode::HandleDmx()+0x15e>
 800b038:	459a      	cmp	sl, r3
 800b03a:	d11d      	bne.n	800b078 <ArtNetNode::HandleDmx()+0x138>
 800b03c:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
 800b040:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
 800b044:	f7ff feba 	bl	800adbc <lightset::Data::Get()>
 800b048:	f240 6304 	movw	r3, #1540	; 0x604
 800b04c:	4683      	mov	fp, r0
 800b04e:	fb03 fa06 	mul.w	sl, r3, r6
 800b052:	f50a 7000 	add.w	r0, sl, #512	; 0x200
 800b056:	463a      	mov	r2, r7
 800b058:	4641      	mov	r1, r8
 800b05a:	4458      	add	r0, fp
 800b05c:	f7ff fea4 	bl	800ada8 <memcpy.isra.0>
 800b060:	eb0b 030a 	add.w	r3, fp, sl
 800b064:	f50a 6080 	add.w	r0, sl, #1024	; 0x400
 800b068:	463a      	mov	r2, r7
 800b06a:	4641      	mov	r1, r8
 800b06c:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800b070:	4458      	add	r0, fp
 800b072:	f7ff fe99 	bl	800ada8 <memcpy.isra.0>
 800b076:	e7a7      	b.n	800afc8 <ArtNetNode::HandleDmx()+0x88>
 800b078:	b9bb      	cbnz	r3, 800b0aa <ArtNetNode::HandleDmx()+0x16a>
 800b07a:	f8c5 38fc 	str.w	r3, [r5, #2300]	; 0x8fc
 800b07e:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
 800b082:	4631      	mov	r1, r6
 800b084:	4620      	mov	r0, r4
 800b086:	f8c5 38f8 	str.w	r3, [r5, #2296]	; 0x8f8
 800b08a:	f7ff ff13 	bl	800aeb4 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800b08e:	463a      	mov	r2, r7
 800b090:	4641      	mov	r1, r8
 800b092:	4630      	mov	r0, r6
 800b094:	f8d5 3908 	ldr.w	r3, [r5, #2312]	; 0x908
 800b098:	f7ff feb9 	bl	800ae0e <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800b09c:	e794      	b.n	800afc8 <ArtNetNode::HandleDmx()+0x88>
 800b09e:	459b      	cmp	fp, r3
 800b0a0:	d118      	bne.n	800b0d4 <ArtNetNode::HandleDmx()+0x194>
 800b0a2:	459a      	cmp	sl, r3
 800b0a4:	d1eb      	bne.n	800b07e <ArtNetNode::HandleDmx()+0x13e>
 800b0a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0aa:	f1ba 0f00 	cmp.w	sl, #0
 800b0ae:	d1e4      	bne.n	800b07a <ArtNetNode::HandleDmx()+0x13a>
 800b0b0:	f8c5 3904 	str.w	r3, [r5, #2308]	; 0x904
 800b0b4:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
 800b0b8:	4631      	mov	r1, r6
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f8c5 3900 	str.w	r3, [r5, #2304]	; 0x900
 800b0c0:	f7ff fef8 	bl	800aeb4 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800b0c4:	463a      	mov	r2, r7
 800b0c6:	4641      	mov	r1, r8
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	f8d5 3908 	ldr.w	r3, [r5, #2312]	; 0x908
 800b0ce:	f7ff fec7 	bl	800ae60 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800b0d2:	e779      	b.n	800afc8 <ArtNetNode::HandleDmx()+0x88>
 800b0d4:	f1ba 0f00 	cmp.w	sl, #0
 800b0d8:	d0ea      	beq.n	800b0b0 <ArtNetNode::HandleDmx()+0x170>
 800b0da:	459a      	cmp	sl, r3
 800b0dc:	d0ea      	beq.n	800b0b4 <ArtNetNode::HandleDmx()+0x174>
 800b0de:	e7e2      	b.n	800b0a6 <ArtNetNode::HandleDmx()+0x166>

0800b0e0 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>:
 800b0e0:	2901      	cmp	r1, #1
 800b0e2:	b510      	push	{r4, lr}
 800b0e4:	d80f      	bhi.n	800b106 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x26>
 800b0e6:	4b08      	ldr	r3, [pc, #32]	; (800b108 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x28>)
 800b0e8:	0109      	lsls	r1, r1, #4
 800b0ea:	681c      	ldr	r4, [r3, #0]
 800b0ec:	6963      	ldr	r3, [r4, #20]
 800b0ee:	69e4      	ldr	r4, [r4, #28]
 800b0f0:	4053      	eors	r3, r2
 800b0f2:	4223      	tst	r3, r4
 800b0f4:	bf15      	itete	ne
 800b0f6:	6a83      	ldrne	r3, [r0, #40]	; 0x28
 800b0f8:	1840      	addeq	r0, r0, r1
 800b0fa:	1809      	addne	r1, r1, r0
 800b0fc:	f8c0 2948 	streq.w	r2, [r0, #2376]	; 0x948
 800b100:	bf18      	it	ne
 800b102:	f8c1 3948 	strne.w	r3, [r1, #2376]	; 0x948
 800b106:	bd10      	pop	{r4, pc}
 800b108:	2000a59c 	mulcs	r0, ip, r5

0800b10c <ArtNetNode::HandleDmxIn()>:
 800b10c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b110:	4604      	mov	r4, r0
 800b112:	4605      	mov	r5, r0
 800b114:	2600      	movs	r6, #0
 800b116:	4f3a      	ldr	r7, [pc, #232]	; (800b200 <ArtNetNode::HandleDmxIn()+0xf4>)
 800b118:	f895 3944 	ldrb.w	r3, [r5, #2372]	; 0x944
 800b11c:	b933      	cbnz	r3, 800b12c <ArtNetNode::HandleDmxIn()+0x20>
 800b11e:	3510      	adds	r5, #16
 800b120:	b116      	cbz	r6, 800b128 <ArtNetNode::HandleDmxIn()+0x1c>
 800b122:	b004      	add	sp, #16
 800b124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b128:	2601      	movs	r6, #1
 800b12a:	e7f5      	b.n	800b118 <ArtNetNode::HandleDmxIn()+0xc>
 800b12c:	6920      	ldr	r0, [r4, #16]
 800b12e:	4631      	mov	r1, r6
 800b130:	6803      	ldr	r3, [r0, #0]
 800b132:	aa02      	add	r2, sp, #8
 800b134:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800b138:	ab03      	add	r3, sp, #12
 800b13a:	47c0      	blx	r8
 800b13c:	2800      	cmp	r0, #0
 800b13e:	d044      	beq.n	800b1ca <ArtNetNode::HandleDmxIn()+0xbe>
 800b140:	f895 394c 	ldrb.w	r3, [r5, #2380]	; 0x94c
 800b144:	f504 62ce 	add.w	r2, r4, #1648	; 0x670
 800b148:	3301      	adds	r3, #1
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	f885 394c 	strb.w	r3, [r5, #2380]	; 0x94c
 800b150:	f884 366b 	strb.w	r3, [r4, #1643]	; 0x66b
 800b154:	f884 666c 	strb.w	r6, [r4, #1644]	; 0x66c
 800b158:	f8b5 3940 	ldrh.w	r3, [r5, #2368]	; 0x940
 800b15c:	f8a4 366d 	strh.w	r3, [r4, #1645]	; 0x66d
 800b160:	9b02      	ldr	r3, [sp, #8]
 800b162:	18c1      	adds	r1, r0, r3
 800b164:	4281      	cmp	r1, r0
 800b166:	d12b      	bne.n	800b1c0 <ArtNetNode::HandleDmxIn()+0xb4>
 800b168:	07da      	lsls	r2, r3, #31
 800b16a:	d505      	bpl.n	800b178 <ArtNetNode::HandleDmxIn()+0x6c>
 800b16c:	2100      	movs	r1, #0
 800b16e:	18e2      	adds	r2, r4, r3
 800b170:	3301      	adds	r3, #1
 800b172:	f882 1671 	strb.w	r1, [r2, #1649]	; 0x671
 800b176:	9302      	str	r3, [sp, #8]
 800b178:	9b02      	ldr	r3, [sp, #8]
 800b17a:	f204 615f 	addw	r1, r4, #1631	; 0x65f
 800b17e:	f884 3670 	strb.w	r3, [r4, #1648]	; 0x670
 800b182:	0a1a      	lsrs	r2, r3, #8
 800b184:	2380      	movs	r3, #128	; 0x80
 800b186:	f884 266f 	strb.w	r2, [r4, #1647]	; 0x66f
 800b18a:	f885 3943 	strb.w	r3, [r5, #2371]	; 0x943
 800b18e:	f641 1336 	movw	r3, #6454	; 0x1936
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	f240 2212 	movw	r2, #530	; 0x212
 800b198:	f8d5 3948 	ldr.w	r3, [r5, #2376]	; 0x948
 800b19c:	7820      	ldrb	r0, [r4, #0]
 800b19e:	f005 fb21 	bl	80107e4 <udp_send>
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	40b3      	lsls	r3, r6
 800b1a8:	ea33 0102 	bics.w	r1, r3, r2
 800b1ac:	d0b7      	beq.n	800b11e <ArtNetNode::HandleDmxIn()+0x12>
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	603b      	str	r3, [r7, #0]
 800b1b2:	f894 38e9 	ldrb.w	r3, [r4, #2281]	; 0x8e9
 800b1b6:	f043 0301 	orr.w	r3, r3, #1
 800b1ba:	f884 38e9 	strb.w	r3, [r4, #2281]	; 0x8e9
 800b1be:	e7ae      	b.n	800b11e <ArtNetNode::HandleDmxIn()+0x12>
 800b1c0:	f810 cb01 	ldrb.w	ip, [r0], #1
 800b1c4:	f802 cf01 	strb.w	ip, [r2, #1]!
 800b1c8:	e7cc      	b.n	800b164 <ArtNetNode::HandleDmxIn()+0x58>
 800b1ca:	f995 2943 	ldrsb.w	r2, [r5, #2371]	; 0x943
 800b1ce:	f895 3943 	ldrb.w	r3, [r5, #2371]	; 0x943
 800b1d2:	2a00      	cmp	r2, #0
 800b1d4:	daa3      	bge.n	800b11e <ArtNetNode::HandleDmxIn()+0x12>
 800b1d6:	9a03      	ldr	r2, [sp, #12]
 800b1d8:	2a00      	cmp	r2, #0
 800b1da:	d1a0      	bne.n	800b11e <ArtNetNode::HandleDmxIn()+0x12>
 800b1dc:	2201      	movs	r2, #1
 800b1de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1e2:	f885 3943 	strb.w	r3, [r5, #2371]	; 0x943
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	40b2      	lsls	r2, r6
 800b1ea:	ea23 0302 	bic.w	r3, r3, r2
 800b1ee:	603b      	str	r3, [r7, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d194      	bne.n	800b11e <ArtNetNode::HandleDmxIn()+0x12>
 800b1f4:	f894 38e9 	ldrb.w	r3, [r4, #2281]	; 0x8e9
 800b1f8:	f023 0301 	bic.w	r3, r3, #1
 800b1fc:	e7dd      	b.n	800b1ba <ArtNetNode::HandleDmxIn()+0xae>
 800b1fe:	bf00      	nop
 800b200:	200012d8 	ldrdcs	r1, [r0], -r8

0800b204 <memcmp.constprop.0>:
 800b204:	b510      	push	{r4, lr}
 800b206:	4907      	ldr	r1, [pc, #28]	; (800b224 <memcmp.constprop.0+0x20>)
 800b208:	1e42      	subs	r2, r0, #1
 800b20a:	3003      	adds	r0, #3
 800b20c:	4282      	cmp	r2, r0
 800b20e:	d101      	bne.n	800b214 <memcmp.constprop.0+0x10>
 800b210:	2000      	movs	r0, #0
 800b212:	e006      	b.n	800b222 <memcmp.constprop.0+0x1e>
 800b214:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800b218:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b21c:	42a3      	cmp	r3, r4
 800b21e:	d0f5      	beq.n	800b20c <memcmp.constprop.0+0x8>
 800b220:	1b18      	subs	r0, r3, r4
 800b222:	bd10      	pop	{r4, pc}
 800b224:	200012dc 	ldrdcs	r1, [r0], -ip

0800b228 <memcpy.constprop.0.isra.0>:
 800b228:	3801      	subs	r0, #1
 800b22a:	1d0b      	adds	r3, r1, #4
 800b22c:	4299      	cmp	r1, r3
 800b22e:	d100      	bne.n	800b232 <memcpy.constprop.0.isra.0+0xa>
 800b230:	4770      	bx	lr
 800b232:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b236:	f800 2f01 	strb.w	r2, [r0, #1]!
 800b23a:	e7f7      	b.n	800b22c <memcpy.constprop.0.isra.0+0x4>

0800b23c <ArtNetNode::HandleIpProg()>:
 800b23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b240:	f100 039c 	add.w	r3, r0, #156	; 0x9c
 800b244:	b085      	sub	sp, #20
 800b246:	4604      	mov	r4, r0
 800b248:	9303      	str	r3, [sp, #12]
 800b24a:	2300      	movs	r3, #0
 800b24c:	4d57      	ldr	r5, [pc, #348]	; (800b3ac <ArtNetNode::HandleIpProg()+0x170>)
 800b24e:	f890 70aa 	ldrb.w	r7, [r0, #170]	; 0xaa
 800b252:	6828      	ldr	r0, [r5, #0]
 800b254:	f890 b005 	ldrb.w	fp, [r0, #5]
 800b258:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 800b25c:	f06f 0306 	mvn.w	r3, #6
 800b260:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 800b264:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
 800b268:	2bc0      	cmp	r3, #192	; 0xc0
 800b26a:	d101      	bne.n	800b270 <ArtNetNode::HandleIpProg()+0x34>
 800b26c:	f006 f94c 	bl	8011508 <Network::EnableDhcp()>
 800b270:	f007 0388 	and.w	r3, r7, #136	; 0x88
 800b274:	2b88      	cmp	r3, #136	; 0x88
 800b276:	d103      	bne.n	800b280 <ArtNetNode::HandleIpProg()+0x44>
 800b278:	2100      	movs	r1, #0
 800b27a:	6828      	ldr	r0, [r5, #0]
 800b27c:	f006 f8e8 	bl	8011450 <Network::SetIp(unsigned int)>
 800b280:	f007 0384 	and.w	r3, r7, #132	; 0x84
 800b284:	2b84      	cmp	r3, #132	; 0x84
 800b286:	4e4a      	ldr	r6, [pc, #296]	; (800b3b0 <ArtNetNode::HandleIpProg()+0x174>)
 800b288:	f104 08ac 	add.w	r8, r4, #172	; 0xac
 800b28c:	d107      	bne.n	800b29e <ArtNetNode::HandleIpProg()+0x62>
 800b28e:	4641      	mov	r1, r8
 800b290:	4630      	mov	r0, r6
 800b292:	f7ff ffc9 	bl	800b228 <memcpy.constprop.0.isra.0>
 800b296:	6831      	ldr	r1, [r6, #0]
 800b298:	6828      	ldr	r0, [r5, #0]
 800b29a:	f006 f8d9 	bl	8011450 <Network::SetIp(unsigned int)>
 800b29e:	f007 0382 	and.w	r3, r7, #130	; 0x82
 800b2a2:	2b82      	cmp	r3, #130	; 0x82
 800b2a4:	f104 09b0 	add.w	r9, r4, #176	; 0xb0
 800b2a8:	d107      	bne.n	800b2ba <ArtNetNode::HandleIpProg()+0x7e>
 800b2aa:	4649      	mov	r1, r9
 800b2ac:	4840      	ldr	r0, [pc, #256]	; (800b3b0 <ArtNetNode::HandleIpProg()+0x174>)
 800b2ae:	f7ff ffbb 	bl	800b228 <memcpy.constprop.0.isra.0>
 800b2b2:	6831      	ldr	r1, [r6, #0]
 800b2b4:	6828      	ldr	r0, [r5, #0]
 800b2b6:	f006 f8f9 	bl	80114ac <Network::SetNetmask(unsigned int)>
 800b2ba:	f007 0790 	and.w	r7, r7, #144	; 0x90
 800b2be:	2f90      	cmp	r7, #144	; 0x90
 800b2c0:	f104 0ab6 	add.w	sl, r4, #182	; 0xb6
 800b2c4:	d107      	bne.n	800b2d6 <ArtNetNode::HandleIpProg()+0x9a>
 800b2c6:	4651      	mov	r1, sl
 800b2c8:	4839      	ldr	r0, [pc, #228]	; (800b3b0 <ArtNetNode::HandleIpProg()+0x174>)
 800b2ca:	f7ff ffad 	bl	800b228 <memcpy.constprop.0.isra.0>
 800b2ce:	6831      	ldr	r1, [r6, #0]
 800b2d0:	6828      	ldr	r0, [r5, #0]
 800b2d2:	f006 f901 	bl	80114d8 <Network::SetGatewayIp(unsigned int)>
 800b2d6:	6829      	ldr	r1, [r5, #0]
 800b2d8:	794a      	ldrb	r2, [r1, #5]
 800b2da:	0192      	lsls	r2, r2, #6
 800b2dc:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f884 20b7 	strb.w	r2, [r4, #183]	; 0xb7
 800b2e6:	7948      	ldrb	r0, [r1, #5]
 800b2e8:	6949      	ldr	r1, [r1, #20]
 800b2ea:	ea8b 0b00 	eor.w	fp, fp, r0
 800b2ee:	4640      	mov	r0, r8
 800b2f0:	6031      	str	r1, [r6, #0]
 800b2f2:	f7ff ff87 	bl	800b204 <memcmp.constprop.0>
 800b2f6:	492e      	ldr	r1, [pc, #184]	; (800b3b0 <ArtNetNode::HandleIpProg()+0x174>)
 800b2f8:	4607      	mov	r7, r0
 800b2fa:	4640      	mov	r0, r8
 800b2fc:	f7ff ff94 	bl	800b228 <memcpy.constprop.0.isra.0>
 800b300:	6829      	ldr	r1, [r5, #0]
 800b302:	4648      	mov	r0, r9
 800b304:	69c9      	ldr	r1, [r1, #28]
 800b306:	6031      	str	r1, [r6, #0]
 800b308:	f7ff ff7c 	bl	800b204 <memcmp.constprop.0>
 800b30c:	4928      	ldr	r1, [pc, #160]	; (800b3b0 <ArtNetNode::HandleIpProg()+0x174>)
 800b30e:	9003      	str	r0, [sp, #12]
 800b310:	4648      	mov	r0, r9
 800b312:	f7ff ff89 	bl	800b228 <memcpy.constprop.0.isra.0>
 800b316:	6829      	ldr	r1, [r5, #0]
 800b318:	4650      	mov	r0, sl
 800b31a:	6989      	ldr	r1, [r1, #24]
 800b31c:	6031      	str	r1, [r6, #0]
 800b31e:	f7ff ff71 	bl	800b204 <memcmp.constprop.0>
 800b322:	9b03      	ldr	r3, [sp, #12]
 800b324:	4922      	ldr	r1, [pc, #136]	; (800b3b0 <ArtNetNode::HandleIpProg()+0x174>)
 800b326:	431f      	orrs	r7, r3
 800b328:	4307      	orrs	r7, r0
 800b32a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 800b32e:	bf0c      	ite	eq
 800b330:	465e      	moveq	r6, fp
 800b332:	f04b 0601 	orrne.w	r6, fp, #1
 800b336:	f7ff ff77 	bl	800b228 <memcpy.constprop.0.isra.0>
 800b33a:	2200      	movs	r2, #0
 800b33c:	f641 1336 	movw	r3, #6454	; 0x1936
 800b340:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
 800b344:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
 800b348:	9300      	str	r3, [sp, #0]
 800b34a:	2222      	movs	r2, #34	; 0x22
 800b34c:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
 800b350:	7820      	ldrb	r0, [r4, #0]
 800b352:	f104 019c 	add.w	r1, r4, #156	; 0x9c
 800b356:	f005 fa45 	bl	80107e4 <udp_send>
 800b35a:	b31e      	cbz	r6, 800b3a4 <ArtNetNode::HandleIpProg()+0x168>
 800b35c:	682a      	ldr	r2, [r5, #0]
 800b35e:	f204 507a 	addw	r0, r4, #1402	; 0x57a
 800b362:	6953      	ldr	r3, [r2, #20]
 800b364:	6263      	str	r3, [r4, #36]	; 0x24
 800b366:	69d1      	ldr	r1, [r2, #28]
 800b368:	7952      	ldrb	r2, [r2, #5]
 800b36a:	ea63 0301 	orn	r3, r3, r1
 800b36e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b370:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800b374:	4641      	mov	r1, r8
 800b376:	f023 0302 	bic.w	r3, r3, #2
 800b37a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800b37e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 800b382:	f7ff ff51 	bl	800b228 <memcpy.constprop.0.isra.0>
 800b386:	4641      	mov	r1, r8
 800b388:	f204 603f 	addw	r0, r4, #1599	; 0x63f
 800b38c:	f7ff ff4c 	bl	800b228 <memcpy.constprop.0.isra.0>
 800b390:	f894 38e2 	ldrb.w	r3, [r4, #2274]	; 0x8e2
 800b394:	b133      	cbz	r3, 800b3a4 <ArtNetNode::HandleIpProg()+0x168>
 800b396:	2101      	movs	r1, #1
 800b398:	4620      	mov	r0, r4
 800b39a:	b005      	add	sp, #20
 800b39c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a0:	f000 b8ea 	b.w	800b578 <ArtNetNode::SendPollRelply(bool)>
 800b3a4:	b005      	add	sp, #20
 800b3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3aa:	bf00      	nop
 800b3ac:	2000a59c 	mulcs	r0, ip, r5
 800b3b0:	200012dc 	ldrdcs	r1, [r0], -ip

0800b3b4 <memcpy.isra.0>:
 800b3b4:	3801      	subs	r0, #1
 800b3b6:	440a      	add	r2, r1
 800b3b8:	4291      	cmp	r1, r2
 800b3ba:	d100      	bne.n	800b3be <memcpy.isra.0+0xa>
 800b3bc:	4770      	bx	lr
 800b3be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3c2:	f800 3f01 	strb.w	r3, [r0, #1]!
 800b3c6:	e7f7      	b.n	800b3b8 <memcpy.isra.0+0x4>

0800b3c8 <ArtNetNode::FillPollReply()>:
 800b3c8:	b538      	push	{r3, r4, r5, lr}
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	f500 60ae 	add.w	r0, r0, #1392	; 0x570
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	f204 625f 	addw	r2, r4, #1631	; 0x65f
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d153      	bne.n	800b484 <ArtNetNode::FillPollReply()+0xbc>
 800b3dc:	2208      	movs	r2, #8
 800b3de:	492b      	ldr	r1, [pc, #172]	; (800b48c <ArtNetNode::FillPollReply()+0xc4>)
 800b3e0:	f7ff ffe8 	bl	800b3b4 <memcpy.isra.0>
 800b3e4:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800b3e8:	4d29      	ldr	r5, [pc, #164]	; (800b490 <ArtNetNode::FillPollReply()+0xc8>)
 800b3ea:	f8a4 3578 	strh.w	r3, [r4, #1400]	; 0x578
 800b3ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3f0:	4629      	mov	r1, r5
 800b3f2:	f204 507a 	addw	r0, r4, #1402	; 0x57a
 800b3f6:	2204      	movs	r2, #4
 800b3f8:	602b      	str	r3, [r5, #0]
 800b3fa:	f7ff ffdb 	bl	800b3b4 <memcpy.isra.0>
 800b3fe:	f641 1336 	movw	r3, #6454	; 0x1936
 800b402:	f8a4 357e 	strh.w	r3, [r4, #1406]	; 0x57e
 800b406:	4b23      	ldr	r3, [pc, #140]	; (800b494 <ArtNetNode::FillPollReply()+0xcc>)
 800b408:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800b40c:	781a      	ldrb	r2, [r3, #0]
 800b40e:	f204 508a 	addw	r0, r4, #1418	; 0x58a
 800b412:	f884 2580 	strb.w	r2, [r4, #1408]	; 0x580
 800b416:	785b      	ldrb	r3, [r3, #1]
 800b418:	f884 3581 	strb.w	r3, [r4, #1409]	; 0x581
 800b41c:	4b1e      	ldr	r3, [pc, #120]	; (800b498 <ArtNetNode::FillPollReply()+0xd0>)
 800b41e:	781a      	ldrb	r2, [r3, #0]
 800b420:	f884 2584 	strb.w	r2, [r4, #1412]	; 0x584
 800b424:	785b      	ldrb	r3, [r3, #1]
 800b426:	f884 3585 	strb.w	r3, [r4, #1413]	; 0x585
 800b42a:	4b1c      	ldr	r3, [pc, #112]	; (800b49c <ArtNetNode::FillPollReply()+0xd4>)
 800b42c:	785a      	ldrb	r2, [r3, #1]
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	f884 2588 	strb.w	r2, [r4, #1416]	; 0x588
 800b434:	f884 3589 	strb.w	r3, [r4, #1417]	; 0x589
 800b438:	2212      	movs	r2, #18
 800b43a:	f7ff ffbb 	bl	800b3b4 <memcpy.isra.0>
 800b43e:	f104 014e 	add.w	r1, r4, #78	; 0x4e
 800b442:	f204 509c 	addw	r0, r4, #1436	; 0x59c
 800b446:	2240      	movs	r2, #64	; 0x40
 800b448:	f7ff ffb4 	bl	800b3b4 <memcpy.isra.0>
 800b44c:	2300      	movs	r3, #0
 800b44e:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800b452:	f884 3638 	strb.w	r3, [r4, #1592]	; 0x638
 800b456:	f204 6039 	addw	r0, r4, #1593	; 0x639
 800b45a:	2206      	movs	r2, #6
 800b45c:	f7ff ffaa 	bl	800b3b4 <memcpy.isra.0>
 800b460:	4629      	mov	r1, r5
 800b462:	f204 603f 	addw	r0, r4, #1599	; 0x63f
 800b466:	2204      	movs	r2, #4
 800b468:	f7ff ffa4 	bl	800b3b4 <memcpy.isra.0>
 800b46c:	2304      	movs	r3, #4
 800b46e:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800b472:	f884 361d 	strb.w	r3, [r4, #1565]	; 0x61d
 800b476:	f204 604a 	addw	r0, r4, #1610	; 0x64a
 800b47a:	2206      	movs	r2, #6
 800b47c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b480:	f7ff bf98 	b.w	800b3b4 <memcpy.isra.0>
 800b484:	f803 1b01 	strb.w	r1, [r3], #1
 800b488:	e7a6      	b.n	800b3d8 <ArtNetNode::FillPollReply()+0x10>
 800b48a:	bf00      	nop
 800b48c:	080177a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, r9, sl, ip, sp, lr}
 800b490:	200012e0 	andcs	r1, r0, r0, ror #5
 800b494:	080179e0 	stmdaeq	r1, {r5, r6, r7, r8, fp, ip, sp, lr}
 800b498:	080179dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, fp, ip, sp, lr}
 800b49c:	080179de 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, fp, ip, sp, lr}

0800b4a0 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)>:
 800b4a0:	1a8a      	subs	r2, r1, r2
 800b4a2:	2901      	cmp	r1, #1
 800b4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4a8:	4605      	mov	r5, r0
 800b4aa:	460e      	mov	r6, r1
 800b4ac:	461f      	mov	r7, r3
 800b4ae:	eb00 0402 	add.w	r4, r0, r2
 800b4b2:	d90e      	bls.n	800b4d2 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x32>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
 800b4ba:	f884 3626 	strb.w	r3, [r4, #1574]	; 0x626
 800b4be:	f884 3645 	strb.w	r3, [r4, #1605]	; 0x645
 800b4c2:	f884 362e 	strb.w	r3, [r4, #1582]	; 0x62e
 800b4c6:	f884 3622 	strb.w	r3, [r4, #1570]	; 0x622
 800b4ca:	f884 362a 	strb.w	r3, [r4, #1578]	; 0x62a
 800b4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4d2:	f04f 0928 	mov.w	r9, #40	; 0x28
 800b4d6:	fb09 0901 	mla	r9, r9, r1, r0
 800b4da:	f8d9 3910 	ldr.w	r3, [r9, #2320]	; 0x910
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d115      	bne.n	800b50e <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x6e>
 800b4e2:	6980      	ldr	r0, [r0, #24]
 800b4e4:	f899 88f3 	ldrb.w	r8, [r9, #2291]	; 0x8f3
 800b4e8:	6803      	ldr	r3, [r0, #0]
 800b4ea:	f008 0876 	and.w	r8, r8, #118	; 0x76
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	4798      	blx	r3
 800b4f2:	2328      	movs	r3, #40	; 0x28
 800b4f4:	fb03 5306 	mla	r3, r3, r6, r5
 800b4f8:	f000 0089 	and.w	r0, r0, #137	; 0x89
 800b4fc:	ea40 0808 	orr.w	r8, r0, r8
 800b500:	f010 0001 	ands.w	r0, r0, #1
 800b504:	bf08      	it	eq
 800b506:	f8c9 0910 	streq.w	r0, [r9, #2320]	; 0x910
 800b50a:	f883 88f3 	strb.w	r8, [r3, #2291]	; 0x8f3
 800b50e:	2300      	movs	r3, #0
 800b510:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
 800b514:	2328      	movs	r3, #40	; 0x28
 800b516:	fb03 5306 	mla	r3, r3, r6, r5
 800b51a:	f893 38f4 	ldrb.w	r3, [r3, #2292]	; 0x8f4
 800b51e:	b12b      	cbz	r3, 800b52c <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x8c>
 800b520:	2380      	movs	r3, #128	; 0x80
 800b522:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	3301      	adds	r3, #1
 800b52a:	603b      	str	r3, [r7, #0]
 800b52c:	2328      	movs	r3, #40	; 0x28
 800b52e:	fb03 5306 	mla	r3, r3, r6, r5
 800b532:	f893 28f3 	ldrb.w	r2, [r3, #2291]	; 0x8f3
 800b536:	eb05 1506 	add.w	r5, r5, r6, lsl #4
 800b53a:	f884 2626 	strb.w	r2, [r4, #1574]	; 0x626
 800b53e:	f893 290c 	ldrb.w	r2, [r3, #2316]	; 0x90c
 800b542:	2a00      	cmp	r2, #0
 800b544:	bf14      	ite	ne
 800b546:	2240      	movne	r2, #64	; 0x40
 800b548:	22c0      	moveq	r2, #192	; 0xc0
 800b54a:	f884 2645 	strb.w	r2, [r4, #1605]	; 0x645
 800b54e:	f893 38f2 	ldrb.w	r3, [r3, #2290]	; 0x8f2
 800b552:	f884 362e 	strb.w	r3, [r4, #1582]	; 0x62e
 800b556:	f895 3944 	ldrb.w	r3, [r5, #2372]	; 0x944
 800b55a:	b12b      	cbz	r3, 800b568 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0xc8>
 800b55c:	2340      	movs	r3, #64	; 0x40
 800b55e:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	3301      	adds	r3, #1
 800b566:	603b      	str	r3, [r7, #0]
 800b568:	f895 3943 	ldrb.w	r3, [r5, #2371]	; 0x943
 800b56c:	f884 3622 	strb.w	r3, [r4, #1570]	; 0x622
 800b570:	f895 3942 	ldrb.w	r3, [r5, #2370]	; 0x942
 800b574:	e7a9      	b.n	800b4ca <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x2a>
	...

0800b578 <ArtNetNode::SendPollRelply(bool)>:
 800b578:	b530      	push	{r4, r5, lr}
 800b57a:	4604      	mov	r4, r0
 800b57c:	b085      	sub	sp, #20
 800b57e:	b941      	cbnz	r1, 800b592 <ArtNetNode::SendPollRelply(bool)+0x1a>
 800b580:	f890 38e1 	ldrb.w	r3, [r0, #2273]	; 0x8e1
 800b584:	2b02      	cmp	r3, #2
 800b586:	bf02      	ittt	eq
 800b588:	f8d0 38d0 	ldreq.w	r3, [r0, #2256]	; 0x8d0
 800b58c:	3301      	addeq	r3, #1
 800b58e:	f8c0 38d0 	streq.w	r3, [r0, #2256]	; 0x8d0
 800b592:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 800b596:	2500      	movs	r5, #0
 800b598:	f884 3587 	strb.w	r3, [r4, #1415]	; 0x587
 800b59c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800b5a0:	9503      	str	r5, [sp, #12]
 800b5a2:	f884 3644 	strb.w	r3, [r4, #1604]	; 0x644
 800b5a6:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800b5aa:	f884 3649 	strb.w	r3, [r4, #1609]	; 0x649
 800b5ae:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800b5b0:	f8a4 3582 	strh.w	r3, [r4, #1410]	; 0x582
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	f884 3643 	strb.w	r3, [r4, #1603]	; 0x643
 800b5ba:	4629      	mov	r1, r5
 800b5bc:	2200      	movs	r2, #0
 800b5be:	4620      	mov	r0, r4
 800b5c0:	ab03      	add	r3, sp, #12
 800b5c2:	3501      	adds	r5, #1
 800b5c4:	f7ff ff6c 	bl	800b4a0 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)>
 800b5c8:	2d04      	cmp	r5, #4
 800b5ca:	d1f6      	bne.n	800b5ba <ArtNetNode::SendPollRelply(bool)+0x42>
 800b5cc:	9b03      	ldr	r3, [sp, #12]
 800b5ce:	2140      	movs	r1, #64	; 0x40
 800b5d0:	f884 361d 	strb.w	r3, [r4, #1565]	; 0x61d
 800b5d4:	f604 037d 	addw	r3, r4, #2173	; 0x87d
 800b5d8:	9301      	str	r3, [sp, #4]
 800b5da:	f8d4 38d0 	ldr.w	r3, [r4, #2256]	; 0x8d0
 800b5de:	4a0b      	ldr	r2, [pc, #44]	; (800b60c <ArtNetNode::SendPollRelply(bool)+0x94>)
 800b5e0:	9300      	str	r3, [sp, #0]
 800b5e2:	f204 50dc 	addw	r0, r4, #1500	; 0x5dc
 800b5e6:	f894 38e0 	ldrb.w	r3, [r4, #2272]	; 0x8e0
 800b5ea:	f008 fd23 	bl	8014034 <snprintf>
 800b5ee:	f641 1336 	movw	r3, #6454	; 0x1936
 800b5f2:	22ef      	movs	r2, #239	; 0xef
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	7820      	ldrb	r0, [r4, #0]
 800b5f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b5fa:	f504 61ae 	add.w	r1, r4, #1392	; 0x570
 800b5fe:	f005 f8f1 	bl	80107e4 <udp_send>
 800b602:	2300      	movs	r3, #0
 800b604:	f884 38e7 	strb.w	r3, [r4, #2279]	; 0x8e7
 800b608:	b005      	add	sp, #20
 800b60a:	bd30      	pop	{r4, r5, pc}
 800b60c:	08017796 	stmdaeq	r1, {r1, r2, r4, r7, r8, r9, sl, ip, sp, lr}

0800b610 <ArtNetNode::HandlePoll()>:
 800b610:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
 800b614:	b410      	push	{r4}
 800b616:	f3c2 0340 	ubfx	r3, r2, #1, #1
 800b61a:	f880 38e2 	strb.w	r3, [r0, #2274]	; 0x8e2
 800b61e:	f012 0304 	ands.w	r3, r2, #4
 800b622:	d02e      	beq.n	800b682 <ArtNetNode::HandlePoll()+0x72>
 800b624:	2301      	movs	r3, #1
 800b626:	f8d0 18d8 	ldr.w	r1, [r0, #2264]	; 0x8d8
 800b62a:	f890 48e4 	ldrb.w	r4, [r0, #2276]	; 0x8e4
 800b62e:	f880 38e3 	strb.w	r3, [r0, #2275]	; 0x8e3
 800b632:	b979      	cbnz	r1, 800b654 <ArtNetNode::HandlePoll()+0x44>
 800b634:	f8d0 3568 	ldr.w	r3, [r0, #1384]	; 0x568
 800b638:	f8c0 38d8 	str.w	r3, [r0, #2264]	; 0x8d8
 800b63c:	b19c      	cbz	r4, 800b666 <ArtNetNode::HandlePoll()+0x56>
 800b63e:	f890 38ec 	ldrb.w	r3, [r0, #2284]	; 0x8ec
 800b642:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
 800b646:	4293      	cmp	r3, r2
 800b648:	bf28      	it	cs
 800b64a:	4613      	movcs	r3, r2
 800b64c:	f880 38ec 	strb.w	r3, [r0, #2284]	; 0x8ec
 800b650:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b652:	e010      	b.n	800b676 <ArtNetNode::HandlePoll()+0x66>
 800b654:	2c00      	cmp	r4, #0
 800b656:	d1f2      	bne.n	800b63e <ArtNetNode::HandlePoll()+0x2e>
 800b658:	f8d0 4568 	ldr.w	r4, [r0, #1384]	; 0x568
 800b65c:	42a1      	cmp	r1, r4
 800b65e:	d002      	beq.n	800b666 <ArtNetNode::HandlePoll()+0x56>
 800b660:	f880 38e4 	strb.w	r3, [r0, #2276]	; 0x8e4
 800b664:	e7eb      	b.n	800b63e <ArtNetNode::HandlePoll()+0x2e>
 800b666:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
 800b66a:	f880 38ec 	strb.w	r3, [r0, #2284]	; 0x8ec
 800b66e:	0713      	lsls	r3, r2, #28
 800b670:	d5ee      	bpl.n	800b650 <ArtNetNode::HandlePoll()+0x40>
 800b672:	f8d0 3568 	ldr.w	r3, [r0, #1384]	; 0x568
 800b676:	2101      	movs	r1, #1
 800b678:	bc10      	pop	{r4}
 800b67a:	f8c0 38d4 	str.w	r3, [r0, #2260]	; 0x8d4
 800b67e:	f7ff bf7b 	b.w	800b578 <ArtNetNode::SendPollRelply(bool)>
 800b682:	f880 38e3 	strb.w	r3, [r0, #2275]	; 0x8e3
 800b686:	e7f6      	b.n	800b676 <ArtNetNode::HandlePoll()+0x66>

0800b688 <ArtNetNode::SetRmd(unsigned int, bool)>:
 800b688:	2328      	movs	r3, #40	; 0x28
 800b68a:	fb03 0301 	mla	r3, r3, r1, r0
 800b68e:	b570      	push	{r4, r5, r6, lr}
 800b690:	4604      	mov	r4, r0
 800b692:	f893 090c 	ldrb.w	r0, [r3, #2316]	; 0x90c
 800b696:	460e      	mov	r6, r1
 800b698:	4290      	cmp	r0, r2
 800b69a:	4615      	mov	r5, r2
 800b69c:	f883 290c 	strb.w	r2, [r3, #2316]	; 0x90c
 800b6a0:	d011      	beq.n	800b6c6 <ArtNetNode::SetRmd(unsigned int, bool)+0x3e>
 800b6a2:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d10d      	bne.n	800b6c6 <ArtNetNode::SetRmd(unsigned int, bool)+0x3e>
 800b6aa:	69e0      	ldr	r0, [r4, #28]
 800b6ac:	b110      	cbz	r0, 800b6b4 <ArtNetNode::SetRmd(unsigned int, bool)+0x2c>
 800b6ae:	6803      	ldr	r3, [r0, #0]
 800b6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b2:	4798      	blx	r3
 800b6b4:	6a20      	ldr	r0, [r4, #32]
 800b6b6:	b130      	cbz	r0, 800b6c6 <ArtNetNode::SetRmd(unsigned int, bool)+0x3e>
 800b6b8:	6803      	ldr	r3, [r0, #0]
 800b6ba:	462a      	mov	r2, r5
 800b6bc:	4631      	mov	r1, r6
 800b6be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c4:	4718      	bx	r3
 800b6c6:	bd70      	pop	{r4, r5, r6, pc}

0800b6c8 <ArtNetNode::SendTod(unsigned int)>:
 800b6c8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800b6cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b6d0:	2500      	movs	r5, #0
 800b6d2:	f880 30a5 	strb.w	r3, [r0, #165]	; 0xa5
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	4688      	mov	r8, r1
 800b6da:	4604      	mov	r4, r0
 800b6dc:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
 800b6e0:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
 800b6e4:	68c0      	ldr	r0, [r0, #12]
 800b6e6:	088f      	lsrs	r7, r1, #2
 800b6e8:	6803      	ldr	r3, [r0, #0]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	4798      	blx	r3
 800b6ee:	f008 0303 	and.w	r3, r8, #3
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 800b6f8:	1c7b      	adds	r3, r7, #1
 800b6fa:	b2ff      	uxtb	r7, r7
 800b6fc:	f884 50aa 	strb.w	r5, [r4, #170]	; 0xaa
 800b700:	f884 50ab 	strb.w	r5, [r4, #171]	; 0xab
 800b704:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 800b708:	f884 50ad 	strb.w	r5, [r4, #173]	; 0xad
 800b70c:	f884 50ae 	strb.w	r5, [r4, #174]	; 0xae
 800b710:	f884 50af 	strb.w	r5, [r4, #175]	; 0xaf
 800b714:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 800b718:	4427      	add	r7, r4
 800b71a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800b71e:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
 800b722:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 800b726:	2328      	movs	r3, #40	; 0x28
 800b728:	fb03 4308 	mla	r3, r3, r8, r4
 800b72c:	f893 38f2 	ldrb.w	r3, [r3, #2290]	; 0x8f2
 800b730:	b2c6      	uxtb	r6, r0
 800b732:	68e0      	ldr	r0, [r4, #12]
 800b734:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 800b738:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 800b73c:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
 800b740:	f884 60b5 	strb.w	r6, [r4, #181]	; 0xb5
 800b744:	f884 60b7 	strb.w	r6, [r4, #183]	; 0xb7
 800b748:	6803      	ldr	r3, [r0, #0]
 800b74a:	4641      	mov	r1, r8
 800b74c:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
 800b750:	691b      	ldr	r3, [r3, #16]
 800b752:	4798      	blx	r3
 800b754:	2306      	movs	r3, #6
 800b756:	fb03 f206 	mul.w	r2, r3, r6
 800b75a:	f641 1336 	movw	r3, #6454	; 0x1936
 800b75e:	f104 059c 	add.w	r5, r4, #156	; 0x9c
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	4629      	mov	r1, r5
 800b766:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b768:	7820      	ldrb	r0, [r4, #0]
 800b76a:	321c      	adds	r2, #28
 800b76c:	f005 f83a 	bl	80107e4 <udp_send>
 800b770:	b002      	add	sp, #8
 800b772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b776 <ArtNetNode::HandleTodControl()>:
 800b776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b778:	4604      	mov	r4, r0
 800b77a:	4605      	mov	r5, r0
 800b77c:	2600      	movs	r6, #0
 800b77e:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800b782:	f890 70b3 	ldrb.w	r7, [r0, #179]	; 0xb3
 800b786:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800b78a:	f895 390c 	ldrb.w	r3, [r5, #2316]	; 0x90c
 800b78e:	b34b      	cbz	r3, 800b7e4 <ArtNetNode::HandleTodControl()+0x6e>
 800b790:	f8b5 38f0 	ldrh.w	r3, [r5, #2288]	; 0x8f0
 800b794:	42bb      	cmp	r3, r7
 800b796:	d125      	bne.n	800b7e4 <ArtNetNode::HandleTodControl()+0x6e>
 800b798:	f895 38f4 	ldrb.w	r3, [r5, #2292]	; 0x8f4
 800b79c:	b313      	cbz	r3, 800b7e4 <ArtNetNode::HandleTodControl()+0x6e>
 800b79e:	f895 3915 	ldrb.w	r3, [r5, #2325]	; 0x915
 800b7a2:	b13b      	cbz	r3, 800b7b4 <ArtNetNode::HandleTodControl()+0x3e>
 800b7a4:	f894 387c 	ldrb.w	r3, [r4, #2172]	; 0x87c
 800b7a8:	b923      	cbnz	r3, 800b7b4 <ArtNetNode::HandleTodControl()+0x3e>
 800b7aa:	6860      	ldr	r0, [r4, #4]
 800b7ac:	4631      	mov	r1, r6
 800b7ae:	6803      	ldr	r3, [r0, #0]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	4798      	blx	r3
 800b7b4:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d104      	bne.n	800b7c6 <ArtNetNode::HandleTodControl()+0x50>
 800b7bc:	68e0      	ldr	r0, [r4, #12]
 800b7be:	4631      	mov	r1, r6
 800b7c0:	6803      	ldr	r3, [r0, #0]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	4798      	blx	r3
 800b7c6:	4631      	mov	r1, r6
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f7ff ff7d 	bl	800b6c8 <ArtNetNode::SendTod(unsigned int)>
 800b7ce:	f895 3915 	ldrb.w	r3, [r5, #2325]	; 0x915
 800b7d2:	b13b      	cbz	r3, 800b7e4 <ArtNetNode::HandleTodControl()+0x6e>
 800b7d4:	f894 387c 	ldrb.w	r3, [r4, #2172]	; 0x87c
 800b7d8:	b923      	cbnz	r3, 800b7e4 <ArtNetNode::HandleTodControl()+0x6e>
 800b7da:	6860      	ldr	r0, [r4, #4]
 800b7dc:	4631      	mov	r1, r6
 800b7de:	6803      	ldr	r3, [r0, #0]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	4798      	blx	r3
 800b7e4:	3528      	adds	r5, #40	; 0x28
 800b7e6:	b106      	cbz	r6, 800b7ea <ArtNetNode::HandleTodControl()+0x74>
 800b7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7ea:	2601      	movs	r6, #1
 800b7ec:	e7cd      	b.n	800b78a <ArtNetNode::HandleTodControl()+0x14>

0800b7ee <ArtNetNode::HandleTodRequest()>:
 800b7ee:	b538      	push	{r3, r4, r5, lr}
 800b7f0:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800b7f4:	f890 50b4 	ldrb.w	r5, [r0, #180]	; 0xb4
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 800b7fe:	f890 390c 	ldrb.w	r3, [r0, #2316]	; 0x90c
 800b802:	b14b      	cbz	r3, 800b818 <ArtNetNode::HandleTodRequest()+0x2a>
 800b804:	f8b0 38f0 	ldrh.w	r3, [r0, #2288]	; 0x8f0
 800b808:	429d      	cmp	r5, r3
 800b80a:	d105      	bne.n	800b818 <ArtNetNode::HandleTodRequest()+0x2a>
 800b80c:	f890 38f4 	ldrb.w	r3, [r0, #2292]	; 0x8f4
 800b810:	b113      	cbz	r3, 800b818 <ArtNetNode::HandleTodRequest()+0x2a>
 800b812:	2100      	movs	r1, #0
 800b814:	f7ff ff58 	bl	800b6c8 <ArtNetNode::SendTod(unsigned int)>
 800b818:	f894 3934 	ldrb.w	r3, [r4, #2356]	; 0x934
 800b81c:	b163      	cbz	r3, 800b838 <ArtNetNode::HandleTodRequest()+0x4a>
 800b81e:	f8b4 3918 	ldrh.w	r3, [r4, #2328]	; 0x918
 800b822:	42ab      	cmp	r3, r5
 800b824:	d108      	bne.n	800b838 <ArtNetNode::HandleTodRequest()+0x4a>
 800b826:	f894 391c 	ldrb.w	r3, [r4, #2332]	; 0x91c
 800b82a:	b12b      	cbz	r3, 800b838 <ArtNetNode::HandleTodRequest()+0x4a>
 800b82c:	4620      	mov	r0, r4
 800b82e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b832:	2101      	movs	r1, #1
 800b834:	f7ff bf48 	b.w	800b6c8 <ArtNetNode::SendTod(unsigned int)>
 800b838:	bd38      	pop	{r3, r4, r5, pc}

0800b83a <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)>:
 800b83a:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
 800b83e:	60c1      	str	r1, [r0, #12]
 800b840:	b131      	cbz	r1, 800b850 <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)+0x16>
 800b842:	f880 287c 	strb.w	r2, [r0, #2172]	; 0x87c
 800b846:	f043 0302 	orr.w	r3, r3, #2
 800b84a:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
 800b84e:	4770      	bx	lr
 800b850:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800b854:	e7f9      	b.n	800b84a <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)+0x10>

0800b856 <ArtNetNode::HandleRdm()>:
 800b856:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85a:	4604      	mov	r4, r0
 800b85c:	4605      	mov	r5, r0
 800b85e:	2600      	movs	r6, #0
 800b860:	f04f 0a01 	mov.w	sl, #1
 800b864:	f641 1b36 	movw	fp, #6454	; 0x1936
 800b868:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800b86c:	f890 70b3 	ldrb.w	r7, [r0, #179]	; 0xb3
 800b870:	f100 089c 	add.w	r8, r0, #156	; 0x9c
 800b874:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800b878:	f100 09b4 	add.w	r9, r0, #180	; 0xb4
 800b87c:	f895 390c 	ldrb.w	r3, [r5, #2316]	; 0x90c
 800b880:	2b00      	cmp	r3, #0
 800b882:	d049      	beq.n	800b918 <ArtNetNode::HandleRdm()+0xc2>
 800b884:	f8b5 38f0 	ldrh.w	r3, [r5, #2288]	; 0x8f0
 800b888:	42bb      	cmp	r3, r7
 800b88a:	d145      	bne.n	800b918 <ArtNetNode::HandleRdm()+0xc2>
 800b88c:	f895 38f4 	ldrb.w	r3, [r5, #2292]	; 0x8f4
 800b890:	2b00      	cmp	r3, #0
 800b892:	d041      	beq.n	800b918 <ArtNetNode::HandleRdm()+0xc2>
 800b894:	f894 387c 	ldrb.w	r3, [r4, #2172]	; 0x87c
 800b898:	b9c3      	cbnz	r3, 800b8cc <ArtNetNode::HandleRdm()+0x76>
 800b89a:	f8d5 3910 	ldr.w	r3, [r5, #2320]	; 0x910
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d10c      	bne.n	800b8bc <ArtNetNode::HandleRdm()+0x66>
 800b8a2:	69a0      	ldr	r0, [r4, #24]
 800b8a4:	b150      	cbz	r0, 800b8bc <ArtNetNode::HandleRdm()+0x66>
 800b8a6:	6803      	ldr	r3, [r0, #0]
 800b8a8:	4631      	mov	r1, r6
 800b8aa:	691b      	ldr	r3, [r3, #16]
 800b8ac:	4798      	blx	r3
 800b8ae:	f010 0f89 	tst.w	r0, #137	; 0x89
 800b8b2:	bf14      	ite	ne
 800b8b4:	2301      	movne	r3, #1
 800b8b6:	2300      	moveq	r3, #0
 800b8b8:	f885 3915 	strb.w	r3, [r5, #2325]	; 0x915
 800b8bc:	f895 3915 	ldrb.w	r3, [r5, #2325]	; 0x915
 800b8c0:	b123      	cbz	r3, 800b8cc <ArtNetNode::HandleRdm()+0x76>
 800b8c2:	6860      	ldr	r0, [r4, #4]
 800b8c4:	4631      	mov	r1, r6
 800b8c6:	6803      	ldr	r3, [r0, #0]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	4798      	blx	r3
 800b8cc:	68e0      	ldr	r0, [r4, #12]
 800b8ce:	464a      	mov	r2, r9
 800b8d0:	6803      	ldr	r3, [r0, #0]
 800b8d2:	4631      	mov	r1, r6
 800b8d4:	695b      	ldr	r3, [r3, #20]
 800b8d6:	4798      	blx	r3
 800b8d8:	b198      	cbz	r0, 800b902 <ArtNetNode::HandleRdm()+0xac>
 800b8da:	f884 a0a8 	strb.w	sl, [r4, #168]	; 0xa8
 800b8de:	7881      	ldrb	r1, [r0, #2]
 800b8e0:	1c43      	adds	r3, r0, #1
 800b8e2:	460a      	mov	r2, r1
 800b8e4:	3102      	adds	r1, #2
 800b8e6:	f104 0cb3 	add.w	ip, r4, #179	; 0xb3
 800b8ea:	4408      	add	r0, r1
 800b8ec:	4298      	cmp	r0, r3
 800b8ee:	d11a      	bne.n	800b926 <ArtNetNode::HandleRdm()+0xd0>
 800b8f0:	4641      	mov	r1, r8
 800b8f2:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
 800b8f6:	7820      	ldrb	r0, [r4, #0]
 800b8f8:	f8cd b000 	str.w	fp, [sp]
 800b8fc:	3219      	adds	r2, #25
 800b8fe:	f004 ff71 	bl	80107e4 <udp_send>
 800b902:	f895 3915 	ldrb.w	r3, [r5, #2325]	; 0x915
 800b906:	b13b      	cbz	r3, 800b918 <ArtNetNode::HandleRdm()+0xc2>
 800b908:	f894 387c 	ldrb.w	r3, [r4, #2172]	; 0x87c
 800b90c:	b923      	cbnz	r3, 800b918 <ArtNetNode::HandleRdm()+0xc2>
 800b90e:	6860      	ldr	r0, [r4, #4]
 800b910:	4631      	mov	r1, r6
 800b912:	6803      	ldr	r3, [r0, #0]
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	4798      	blx	r3
 800b918:	3528      	adds	r5, #40	; 0x28
 800b91a:	b116      	cbz	r6, 800b922 <ArtNetNode::HandleRdm()+0xcc>
 800b91c:	b003      	add	sp, #12
 800b91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b922:	2601      	movs	r6, #1
 800b924:	e7aa      	b.n	800b87c <ArtNetNode::HandleRdm()+0x26>
 800b926:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b92a:	f80c 1f01 	strb.w	r1, [ip, #1]!
 800b92e:	e7dd      	b.n	800b8ec <ArtNetNode::HandleRdm()+0x96>

0800b930 <ArtNetNode::HandleSync()>:
 800b930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b934:	2600      	movs	r6, #0
 800b936:	2301      	movs	r3, #1
 800b938:	4604      	mov	r4, r0
 800b93a:	4605      	mov	r5, r0
 800b93c:	46b1      	mov	r9, r6
 800b93e:	f880 38e5 	strb.w	r3, [r0, #2277]	; 0x8e5
 800b942:	4b1d      	ldr	r3, [pc, #116]	; (800b9b8 <ArtNetNode::HandleSync()+0x88>)
 800b944:	4f1d      	ldr	r7, [pc, #116]	; (800b9bc <ArtNetNode::HandleSync()+0x8c>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800b9c0 <ArtNetNode::HandleSync()+0x90>
 800b94c:	f8c0 38dc 	str.w	r3, [r0, #2268]	; 0x8dc
 800b950:	f8d5 3910 	ldr.w	r3, [r5, #2320]	; 0x910
 800b954:	bb3b      	cbnz	r3, 800b9a6 <ArtNetNode::HandleSync()+0x76>
 800b956:	f895 38f4 	ldrb.w	r3, [r5, #2292]	; 0x8f4
 800b95a:	b323      	cbz	r3, 800b9a6 <ArtNetNode::HandleSync()+0x76>
 800b95c:	f8d8 3000 	ldr.w	r3, [r8]
 800b960:	6860      	ldr	r0, [r4, #4]
 800b962:	07da      	lsls	r2, r3, #31
 800b964:	bf5c      	itt	pl
 800b966:	2301      	movpl	r3, #1
 800b968:	f8c8 3000 	strpl.w	r3, [r8]
 800b96c:	6803      	ldr	r3, [r0, #0]
 800b96e:	4631      	mov	r1, r6
 800b970:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800b974:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800b978:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800b97c:	47d0      	blx	sl
 800b97e:	f895 3915 	ldrb.w	r3, [r5, #2325]	; 0x915
 800b982:	b93b      	cbnz	r3, 800b994 <ArtNetNode::HandleSync()+0x64>
 800b984:	6860      	ldr	r0, [r4, #4]
 800b986:	4631      	mov	r1, r6
 800b988:	6803      	ldr	r3, [r0, #0]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	4798      	blx	r3
 800b98e:	2301      	movs	r3, #1
 800b990:	f885 3915 	strb.w	r3, [r5, #2325]	; 0x915
 800b994:	f8d8 3000 	ldr.w	r3, [r8]
 800b998:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800b99c:	07db      	lsls	r3, r3, #31
 800b99e:	bf5c      	itt	pl
 800b9a0:	2301      	movpl	r3, #1
 800b9a2:	f8c8 3000 	strpl.w	r3, [r8]
 800b9a6:	3528      	adds	r5, #40	; 0x28
 800b9a8:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800b9ac:	b10e      	cbz	r6, 800b9b2 <ArtNetNode::HandleSync()+0x82>
 800b9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9b2:	2601      	movs	r6, #1
 800b9b4:	e7cc      	b.n	800b950 <ArtNetNode::HandleSync()+0x20>
 800b9b6:	bf00      	nop
 800b9b8:	2000ac7c 	andcs	sl, r0, ip, ror ip
 800b9bc:	200006cc 	andcs	r0, r0, ip, asr #13
 800b9c0:	200006c8 	andcs	r0, r0, r8, asr #13

0800b9c4 <ArtNetNode::HandleTimeCode()>:
 800b9c4:	4601      	mov	r1, r0
 800b9c6:	6880      	ldr	r0, [r0, #8]
 800b9c8:	31aa      	adds	r1, #170	; 0xaa
 800b9ca:	6803      	ldr	r3, [r0, #0]
 800b9cc:	691b      	ldr	r3, [r3, #16]
 800b9ce:	4718      	bx	r3

0800b9d0 <ArtNetNode::HandleTimeSync()>:
 800b9d0:	b500      	push	{lr}
 800b9d2:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 800b9d6:	b08b      	sub	sp, #44	; 0x2c
 800b9d8:	9301      	str	r3, [sp, #4]
 800b9da:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 800b9de:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
 800b9e2:	9302      	str	r3, [sp, #8]
 800b9e4:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800b9e8:	a901      	add	r1, sp, #4
 800b9ea:	9303      	str	r3, [sp, #12]
 800b9ec:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 800b9f0:	9304      	str	r3, [sp, #16]
 800b9f2:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 800b9f6:	9305      	str	r3, [sp, #20]
 800b9f8:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800b9fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ba00:	9306      	str	r3, [sp, #24]
 800ba02:	4b03      	ldr	r3, [pc, #12]	; (800ba10 <ArtNetNode::HandleTimeSync()+0x40>)
 800ba04:	6818      	ldr	r0, [r3, #0]
 800ba06:	f007 feb7 	bl	8013778 <Hardware::SetTime(tm const*)>
 800ba0a:	b00b      	add	sp, #44	; 0x2c
 800ba0c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba10:	2000ac64 	andcs	sl, r0, r4, ror #24

0800ba14 <ArtNetNode::Print()>:
 800ba14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba18:	4604      	mov	r4, r0
 800ba1a:	b087      	sub	sp, #28
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	2104      	movs	r1, #4
 800ba20:	4839      	ldr	r0, [pc, #228]	; (800bb08 <ArtNetNode::Print()+0xf4>)
 800ba22:	f008 fadf 	bl	8013fe4 <printf>
 800ba26:	4b39      	ldr	r3, [pc, #228]	; (800bb0c <ArtNetNode::Print()+0xf8>)
 800ba28:	4839      	ldr	r0, [pc, #228]	; (800bb10 <ArtNetNode::Print()+0xfc>)
 800ba2a:	7819      	ldrb	r1, [r3, #0]
 800ba2c:	785a      	ldrb	r2, [r3, #1]
 800ba2e:	f008 fad9 	bl	8013fe4 <printf>
 800ba32:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800ba36:	4837      	ldr	r0, [pc, #220]	; (800bb14 <ArtNetNode::Print()+0x100>)
 800ba38:	f008 fad4 	bl	8013fe4 <printf>
 800ba3c:	4836      	ldr	r0, [pc, #216]	; (800bb18 <ArtNetNode::Print()+0x104>)
 800ba3e:	f104 014e 	add.w	r1, r4, #78	; 0x4e
 800ba42:	f008 facf 	bl	8013fe4 <printf>
 800ba46:	f894 38ea 	ldrb.w	r3, [r4, #2282]	; 0x8ea
 800ba4a:	b353      	cbz	r3, 800baa2 <ArtNetNode::Print()+0x8e>
 800ba4c:	4833      	ldr	r0, [pc, #204]	; (800bb1c <ArtNetNode::Print()+0x108>)
 800ba4e:	f008 fac9 	bl	8013fe4 <printf>
 800ba52:	4626      	mov	r6, r4
 800ba54:	2500      	movs	r5, #0
 800ba56:	4f32      	ldr	r7, [pc, #200]	; (800bb20 <ArtNetNode::Print()+0x10c>)
 800ba58:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800bb24 <ArtNetNode::Print()+0x110>
 800ba5c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800bb28 <ArtNetNode::Print()+0x114>
 800ba60:	2301      	movs	r3, #1
 800ba62:	4629      	mov	r1, r5
 800ba64:	4620      	mov	r0, r4
 800ba66:	f10d 0216 	add.w	r2, sp, #22
 800ba6a:	f7fe fe7d 	bl	800a768 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800ba6e:	b1b0      	cbz	r0, 800ba9e <ArtNetNode::Print()+0x8a>
 800ba70:	f8d6 3908 	ldr.w	r3, [r6, #2312]	; 0x908
 800ba74:	4629      	mov	r1, r5
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	bf0c      	ite	eq
 800ba7a:	463b      	moveq	r3, r7
 800ba7c:	4643      	movne	r3, r8
 800ba7e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800ba82:	4648      	mov	r0, r9
 800ba84:	f008 faae 	bl	8013fe4 <printf>
 800ba88:	f8d6 1910 	ldr.w	r1, [r6, #2320]	; 0x910
 800ba8c:	4a27      	ldr	r2, [pc, #156]	; (800bb2c <ArtNetNode::Print()+0x118>)
 800ba8e:	4b28      	ldr	r3, [pc, #160]	; (800bb30 <ArtNetNode::Print()+0x11c>)
 800ba90:	4828      	ldr	r0, [pc, #160]	; (800bb34 <ArtNetNode::Print()+0x120>)
 800ba92:	2900      	cmp	r1, #0
 800ba94:	bf0c      	ite	eq
 800ba96:	4611      	moveq	r1, r2
 800ba98:	4619      	movne	r1, r3
 800ba9a:	f008 faa3 	bl	8013fe4 <printf>
 800ba9e:	3628      	adds	r6, #40	; 0x28
 800baa0:	b36d      	cbz	r5, 800bafe <ArtNetNode::Print()+0xea>
 800baa2:	f894 38eb 	ldrb.w	r3, [r4, #2283]	; 0x8eb
 800baa6:	b33b      	cbz	r3, 800baf8 <ArtNetNode::Print()+0xe4>
 800baa8:	4823      	ldr	r0, [pc, #140]	; (800bb38 <ArtNetNode::Print()+0x124>)
 800baaa:	f008 fa9b 	bl	8013fe4 <printf>
 800baae:	2500      	movs	r5, #0
 800bab0:	4e22      	ldr	r6, [pc, #136]	; (800bb3c <ArtNetNode::Print()+0x128>)
 800bab2:	4f23      	ldr	r7, [pc, #140]	; (800bb40 <ArtNetNode::Print()+0x12c>)
 800bab4:	2300      	movs	r3, #0
 800bab6:	4629      	mov	r1, r5
 800bab8:	4620      	mov	r0, r4
 800baba:	f10d 0216 	add.w	r2, sp, #22
 800babe:	f7fe fe53 	bl	800a768 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800bac2:	b1c0      	cbz	r0, 800baf6 <ArtNetNode::Print()+0xe2>
 800bac4:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 800bac8:	f8d3 3948 	ldr.w	r3, [r3, #2376]	; 0x948
 800bacc:	b923      	cbnz	r3, 800bad8 <ArtNetNode::Print()+0xc4>
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	69da      	ldr	r2, [r3, #28]
 800bad2:	695b      	ldr	r3, [r3, #20]
 800bad4:	ea63 0302 	orn	r3, r3, r2
 800bad8:	0e1a      	lsrs	r2, r3, #24
 800bada:	9202      	str	r2, [sp, #8]
 800badc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800bae0:	9201      	str	r2, [sp, #4]
 800bae2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bae6:	9200      	str	r2, [sp, #0]
 800bae8:	4629      	mov	r1, r5
 800baea:	4630      	mov	r0, r6
 800baec:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	f008 fa77 	bl	8013fe4 <printf>
 800baf6:	b125      	cbz	r5, 800bb02 <ArtNetNode::Print()+0xee>
 800baf8:	b007      	add	sp, #28
 800bafa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bafe:	2501      	movs	r5, #1
 800bb00:	e7ae      	b.n	800ba60 <ArtNetNode::Print()+0x4c>
 800bb02:	2501      	movs	r5, #1
 800bb04:	e7d6      	b.n	800bab4 <ArtNetNode::Print()+0xa0>
 800bb06:	bf00      	nop
 800bb08:	080177c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, r9, sl, ip, sp, lr}
 800bb0c:	080179e0 	stmdaeq	r1, {r5, r6, r7, r8, fp, ip, sp, lr}
 800bb10:	080177d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, r9, sl, ip, sp, lr}
 800bb14:	080177e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, sl, ip, sp, lr}
 800bb18:	080177fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}
 800bb1c:	0801780d 	stmdaeq	r1, {r0, r2, r3, fp, ip, sp, lr}
 800bb20:	080177b1 	stmdaeq	r1, {r0, r4, r5, r7, r8, r9, sl, ip, sp, lr}
 800bb24:	080177b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, sl, ip, sp, lr}
 800bb28:	08017816 	stmdaeq	r1, {r1, r2, r4, fp, ip, sp, lr}
 800bb2c:	080177b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, r9, sl, ip, sp, lr}
 800bb30:	080177c1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl, ip, sp, lr}
 800bb34:	0801782a 	stmdaeq	r1, {r1, r3, r5, fp, ip, sp, lr}
 800bb38:	08017831 	stmdaeq	r1, {r0, r4, r5, fp, ip, sp, lr}
 800bb3c:	08017839 	stmdaeq	r1, {r0, r3, r4, r5, fp, ip, sp, lr}
 800bb40:	2000a59c 	mulcs	r0, ip, r5

0800bb44 <memcmp>:
 800bb44:	4402      	add	r2, r0
 800bb46:	4290      	cmp	r0, r2
 800bb48:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800bb4c:	d106      	bne.n	800bb5c <memcmp+0x18>
 800bb4e:	2000      	movs	r0, #0
 800bb50:	4770      	bx	lr
 800bb52:	3001      	adds	r0, #1
 800bb54:	4290      	cmp	r0, r2
 800bb56:	d102      	bne.n	800bb5e <memcmp+0x1a>
 800bb58:	2000      	movs	r0, #0
 800bb5a:	e006      	b.n	800bb6a <memcmp+0x26>
 800bb5c:	b510      	push	{r4, lr}
 800bb5e:	7803      	ldrb	r3, [r0, #0]
 800bb60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bb64:	42a3      	cmp	r3, r4
 800bb66:	d0f4      	beq.n	800bb52 <memcmp+0xe>
 800bb68:	1b18      	subs	r0, r3, r4
 800bb6a:	bd10      	pop	{r4, pc}

0800bb6c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800bb6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb6e:	88c6      	ldrh	r6, [r0, #6]
 800bb70:	8885      	ldrh	r5, [r0, #4]
 800bb72:	42ae      	cmp	r6, r5
 800bb74:	d216      	bcs.n	800bba4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800bb76:	4604      	mov	r4, r0
 800bb78:	6800      	ldr	r0, [r0, #0]
 800bb7a:	1bad      	subs	r5, r5, r6
 800bb7c:	4430      	add	r0, r6
 800bb7e:	7a26      	ldrb	r6, [r4, #8]
 800bb80:	b923      	cbnz	r3, 800bb8c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800bb82:	b926      	cbnz	r6, 800bb8e <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800bb84:	9200      	str	r2, [sp, #0]
 800bb86:	460b      	mov	r3, r1
 800bb88:	4a09      	ldr	r2, [pc, #36]	; (800bbb0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800bb8a:	e003      	b.n	800bb94 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800bb8c:	b166      	cbz	r6, 800bba8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800bb8e:	460b      	mov	r3, r1
 800bb90:	9200      	str	r2, [sp, #0]
 800bb92:	4a08      	ldr	r2, [pc, #32]	; (800bbb4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800bb94:	4629      	mov	r1, r5
 800bb96:	f008 fa4d 	bl	8014034 <snprintf>
 800bb9a:	4285      	cmp	r5, r0
 800bb9c:	bfa2      	ittt	ge
 800bb9e:	88e3      	ldrhge	r3, [r4, #6]
 800bba0:	181b      	addge	r3, r3, r0
 800bba2:	80e3      	strhge	r3, [r4, #6]
 800bba4:	b002      	add	sp, #8
 800bba6:	bd70      	pop	{r4, r5, r6, pc}
 800bba8:	9200      	str	r2, [sp, #0]
 800bbaa:	460b      	mov	r3, r1
 800bbac:	4a02      	ldr	r2, [pc, #8]	; (800bbb8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800bbae:	e7f1      	b.n	800bb94 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800bbb0:	0801691d 	stmdaeq	r1, {r0, r2, r3, r4, r8, fp, sp, lr}
 800bbb4:	08016914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr}
 800bbb8:	0801691e 	stmdaeq	r1, {r1, r2, r3, r4, r8, fp, sp, lr}

0800bbbc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800bbbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bbbe:	88c6      	ldrh	r6, [r0, #6]
 800bbc0:	8885      	ldrh	r5, [r0, #4]
 800bbc2:	42ae      	cmp	r6, r5
 800bbc4:	d216      	bcs.n	800bbf4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	6800      	ldr	r0, [r0, #0]
 800bbca:	1bad      	subs	r5, r5, r6
 800bbcc:	4430      	add	r0, r6
 800bbce:	7a26      	ldrb	r6, [r4, #8]
 800bbd0:	b923      	cbnz	r3, 800bbdc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800bbd2:	b926      	cbnz	r6, 800bbde <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800bbd4:	9200      	str	r2, [sp, #0]
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	4a09      	ldr	r2, [pc, #36]	; (800bc00 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800bbda:	e003      	b.n	800bbe4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800bbdc:	b166      	cbz	r6, 800bbf8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800bbde:	460b      	mov	r3, r1
 800bbe0:	9200      	str	r2, [sp, #0]
 800bbe2:	4a08      	ldr	r2, [pc, #32]	; (800bc04 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800bbe4:	4629      	mov	r1, r5
 800bbe6:	f008 fa25 	bl	8014034 <snprintf>
 800bbea:	4285      	cmp	r5, r0
 800bbec:	bfa2      	ittt	ge
 800bbee:	88e3      	ldrhge	r3, [r4, #6]
 800bbf0:	181b      	addge	r3, r3, r0
 800bbf2:	80e3      	strhge	r3, [r4, #6]
 800bbf4:	b002      	add	sp, #8
 800bbf6:	bd70      	pop	{r4, r5, r6, pc}
 800bbf8:	9200      	str	r2, [sp, #0]
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	4a02      	ldr	r2, [pc, #8]	; (800bc08 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800bbfe:	e7f1      	b.n	800bbe4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800bc00:	08016930 	stmdaeq	r1, {r4, r5, r8, fp, sp, lr}
 800bc04:	08016925 	stmdaeq	r1, {r0, r2, r5, r8, fp, sp, lr}
 800bc08:	08016931 	stmdaeq	r1, {r0, r4, r5, r8, fp, sp, lr}

0800bc0c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800bc0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc0e:	460b      	mov	r3, r1
 800bc10:	8885      	ldrh	r5, [r0, #4]
 800bc12:	88c1      	ldrh	r1, [r0, #6]
 800bc14:	42a9      	cmp	r1, r5
 800bc16:	d214      	bcs.n	800bc42 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800bc18:	4604      	mov	r4, r0
 800bc1a:	6800      	ldr	r0, [r0, #0]
 800bc1c:	1a6d      	subs	r5, r5, r1
 800bc1e:	4408      	add	r0, r1
 800bc20:	7a21      	ldrb	r1, [r4, #8]
 800bc22:	b91a      	cbnz	r2, 800bc2c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800bc24:	b919      	cbnz	r1, 800bc2e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800bc26:	4a0a      	ldr	r2, [pc, #40]	; (800bc50 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800bc28:	9100      	str	r1, [sp, #0]
 800bc2a:	e002      	b.n	800bc32 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800bc2c:	b159      	cbz	r1, 800bc46 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800bc2e:	9200      	str	r2, [sp, #0]
 800bc30:	4a08      	ldr	r2, [pc, #32]	; (800bc54 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800bc32:	4629      	mov	r1, r5
 800bc34:	f008 f9fe 	bl	8014034 <snprintf>
 800bc38:	4285      	cmp	r5, r0
 800bc3a:	bfa2      	ittt	ge
 800bc3c:	88e3      	ldrhge	r3, [r4, #6]
 800bc3e:	181b      	addge	r3, r3, r0
 800bc40:	80e3      	strhge	r3, [r4, #6]
 800bc42:	b003      	add	sp, #12
 800bc44:	bd30      	pop	{r4, r5, pc}
 800bc46:	2201      	movs	r2, #1
 800bc48:	9200      	str	r2, [sp, #0]
 800bc4a:	4a03      	ldr	r2, [pc, #12]	; (800bc58 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800bc4c:	e7f1      	b.n	800bc32 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800bc4e:	bf00      	nop
 800bc50:	0801691d 	stmdaeq	r1, {r0, r2, r3, r4, r8, fp, sp, lr}
 800bc54:	08016914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr}
 800bc58:	0801691e 	stmdaeq	r1, {r1, r2, r3, r4, r8, fp, sp, lr}

0800bc5c <strncpy.isra.0>:
 800bc5c:	1e4b      	subs	r3, r1, #1
 800bc5e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800bc62:	b909      	cbnz	r1, 800bc68 <strncpy.isra.0+0xc>
 800bc64:	f007 bea0 	b.w	80139a8 <memset>
 800bc68:	3a01      	subs	r2, #1
 800bc6a:	f800 1b01 	strb.w	r1, [r0], #1
 800bc6e:	d1f6      	bne.n	800bc5e <strncpy.isra.0+0x2>
 800bc70:	4770      	bx	lr
	...

0800bc74 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
 800bc74:	b510      	push	{r4, lr}
 800bc76:	2287      	movs	r2, #135	; 0x87
 800bc78:	4604      	mov	r4, r0
 800bc7a:	f840 1b04 	str.w	r1, [r0], #4
 800bc7e:	2100      	movs	r1, #0
 800bc80:	f007 fe92 	bl	80139a8 <memset>
 800bc84:	2301      	movs	r3, #1
 800bc86:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800bc8a:	f240 3302 	movw	r3, #770	; 0x302
 800bc8e:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800bc92:	2304      	movs	r3, #4
 800bc94:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 800bc98:	2355      	movs	r3, #85	; 0x55
 800bc9a:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
 800bc9e:	2300      	movs	r3, #0
 800bca0:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800bca4:	4b03      	ldr	r3, [pc, #12]	; (800bcb4 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x40>)
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	b90a      	cbnz	r2, 800bcae <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x3a>
 800bcaa:	2202      	movs	r2, #2
 800bcac:	601a      	str	r2, [r3, #0]
 800bcae:	4620      	mov	r0, r4
 800bcb0:	bd10      	pop	{r4, pc}
 800bcb2:	bf00      	nop
 800bcb4:	200012e4 	andcs	r1, r0, r4, ror #5

0800bcb8 <ArtNetParams::Load()>:
 800bcb8:	b508      	push	{r3, lr}
 800bcba:	2300      	movs	r3, #0
 800bcbc:	4601      	mov	r1, r0
 800bcbe:	6043      	str	r3, [r0, #4]
 800bcc0:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800bcc4:	6800      	ldr	r0, [r0, #0]
 800bcc6:	b120      	cbz	r0, 800bcd2 <ArtNetParams::Load()+0x1a>
 800bcc8:	6803      	ldr	r3, [r0, #0]
 800bcca:	3104      	adds	r1, #4
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	4798      	blx	r3
 800bcd0:	2001      	movs	r0, #1
 800bcd2:	bd08      	pop	{r3, pc}

0800bcd4 <ArtNetParams::Load(char const*, unsigned int)>:
 800bcd4:	6803      	ldr	r3, [r0, #0]
 800bcd6:	b1e3      	cbz	r3, 800bd12 <ArtNetParams::Load(char const*, unsigned int)+0x3e>
 800bcd8:	2300      	movs	r3, #0
 800bcda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcdc:	460d      	mov	r5, r1
 800bcde:	4616      	mov	r6, r2
 800bce0:	4604      	mov	r4, r0
 800bce2:	6043      	str	r3, [r0, #4]
 800bce4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800bce8:	4602      	mov	r2, r0
 800bcea:	490a      	ldr	r1, [pc, #40]	; (800bd14 <ArtNetParams::Load(char const*, unsigned int)+0x40>)
 800bcec:	4668      	mov	r0, sp
 800bcee:	f007 f859 	bl	8012da4 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800bcf2:	4632      	mov	r2, r6
 800bcf4:	4629      	mov	r1, r5
 800bcf6:	4668      	mov	r0, sp
 800bcf8:	f007 f858 	bl	8012dac <ReadConfigFile::Read(char const*, unsigned int)>
 800bcfc:	4621      	mov	r1, r4
 800bcfe:	f851 0b04 	ldr.w	r0, [r1], #4
 800bd02:	6803      	ldr	r3, [r0, #0]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	4798      	blx	r3
 800bd08:	4668      	mov	r0, sp
 800bd0a:	f007 f84e 	bl	8012daa <ReadConfigFile::~ReadConfigFile()>
 800bd0e:	b002      	add	sp, #8
 800bd10:	bd70      	pop	{r4, r5, r6, pc}
 800bd12:	4770      	bx	lr
 800bd14:	0800c0f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, lr, pc}

0800bd18 <ArtNetParams::SetBool(unsigned char, unsigned int)>:
 800bd18:	6843      	ldr	r3, [r0, #4]
 800bd1a:	b111      	cbz	r1, 800bd22 <ArtNetParams::SetBool(unsigned char, unsigned int)+0xa>
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	6043      	str	r3, [r0, #4]
 800bd20:	4770      	bx	lr
 800bd22:	ea23 0302 	bic.w	r3, r3, r2
 800bd26:	e7fa      	b.n	800bd1e <ArtNetParams::SetBool(unsigned char, unsigned int)+0x6>

0800bd28 <ArtNetParams::callbackFunction(char const*)>:
 800bd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2c:	460e      	mov	r6, r1
 800bd2e:	b0a7      	sub	sp, #156	; 0x9c
 800bd30:	4604      	mov	r4, r0
 800bd32:	499d      	ldr	r1, [pc, #628]	; (800bfa8 <ArtNetParams::callbackFunction(char const*)+0x280>)
 800bd34:	4630      	mov	r0, r6
 800bd36:	f10d 020f 	add.w	r2, sp, #15
 800bd3a:	f007 f8e3 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800bd3e:	b940      	cbnz	r0, 800bd52 <ArtNetParams::callbackFunction(char const*)+0x2a>
 800bd40:	2220      	movs	r2, #32
 800bd42:	4620      	mov	r0, r4
 800bd44:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800bd48:	b027      	add	sp, #156	; 0x9c
 800bd4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4e:	f7ff bfe3 	b.w	800bd18 <ArtNetParams::SetBool(unsigned char, unsigned int)>
 800bd52:	2708      	movs	r7, #8
 800bd54:	4630      	mov	r0, r6
 800bd56:	4995      	ldr	r1, [pc, #596]	; (800bfac <ArtNetParams::callbackFunction(char const*)+0x284>)
 800bd58:	ab05      	add	r3, sp, #20
 800bd5a:	aa06      	add	r2, sp, #24
 800bd5c:	9705      	str	r7, [sp, #20]
 800bd5e:	f007 f859 	bl	8012e14 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800bd62:	bb40      	cbnz	r0, 800bdb6 <ArtNetParams::callbackFunction(char const*)+0x8e>
 800bd64:	2204      	movs	r2, #4
 800bd66:	4992      	ldr	r1, [pc, #584]	; (800bfb0 <ArtNetParams::callbackFunction(char const*)+0x288>)
 800bd68:	a806      	add	r0, sp, #24
 800bd6a:	f7ff feeb 	bl	800bb44 <memcmp>
 800bd6e:	6865      	ldr	r5, [r4, #4]
 800bd70:	b188      	cbz	r0, 800bd96 <ArtNetParams::callbackFunction(char const*)+0x6e>
 800bd72:	2203      	movs	r2, #3
 800bd74:	498f      	ldr	r1, [pc, #572]	; (800bfb4 <ArtNetParams::callbackFunction(char const*)+0x28c>)
 800bd76:	a806      	add	r0, sp, #24
 800bd78:	f7ff fee4 	bl	800bb44 <memcmp>
 800bd7c:	b198      	cbz	r0, 800bda6 <ArtNetParams::callbackFunction(char const*)+0x7e>
 800bd7e:	2202      	movs	r2, #2
 800bd80:	498d      	ldr	r1, [pc, #564]	; (800bfb8 <ArtNetParams::callbackFunction(char const*)+0x290>)
 800bd82:	a806      	add	r0, sp, #24
 800bd84:	f7ff fede 	bl	800bb44 <memcmp>
 800bd88:	b188      	cbz	r0, 800bdae <ArtNetParams::callbackFunction(char const*)+0x86>
 800bd8a:	463a      	mov	r2, r7
 800bd8c:	498b      	ldr	r1, [pc, #556]	; (800bfbc <ArtNetParams::callbackFunction(char const*)+0x294>)
 800bd8e:	a806      	add	r0, sp, #24
 800bd90:	f7ff fed8 	bl	800bb44 <memcmp>
 800bd94:	b168      	cbz	r0, 800bdb2 <ArtNetParams::callbackFunction(char const*)+0x8a>
 800bd96:	2300      	movs	r3, #0
 800bd98:	f025 0510 	bic.w	r5, r5, #16
 800bd9c:	6065      	str	r5, [r4, #4]
 800bd9e:	72a3      	strb	r3, [r4, #10]
 800bda0:	b027      	add	sp, #156	; 0x9c
 800bda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda6:	2301      	movs	r3, #1
 800bda8:	f045 0510 	orr.w	r5, r5, #16
 800bdac:	e7f6      	b.n	800bd9c <ArtNetParams::callbackFunction(char const*)+0x74>
 800bdae:	2302      	movs	r3, #2
 800bdb0:	e7fa      	b.n	800bda8 <ArtNetParams::callbackFunction(char const*)+0x80>
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	e7f8      	b.n	800bda8 <ArtNetParams::callbackFunction(char const*)+0x80>
 800bdb6:	2311      	movs	r3, #17
 800bdb8:	4630      	mov	r0, r6
 800bdba:	9305      	str	r3, [sp, #20]
 800bdbc:	4980      	ldr	r1, [pc, #512]	; (800bfc0 <ArtNetParams::callbackFunction(char const*)+0x298>)
 800bdbe:	ab05      	add	r3, sp, #20
 800bdc0:	f104 0210 	add.w	r2, r4, #16
 800bdc4:	f007 f826 	bl	8012e14 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800bdc8:	b938      	cbnz	r0, 800bdda <ArtNetParams::callbackFunction(char const*)+0xb2>
 800bdca:	9b05      	ldr	r3, [sp, #20]
 800bdcc:	4423      	add	r3, r4
 800bdce:	7418      	strb	r0, [r3, #16]
 800bdd0:	6863      	ldr	r3, [r4, #4]
 800bdd2:	f043 0302 	orr.w	r3, r3, #2
 800bdd6:	6063      	str	r3, [r4, #4]
 800bdd8:	e7e2      	b.n	800bda0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800bdda:	233f      	movs	r3, #63	; 0x3f
 800bddc:	4630      	mov	r0, r6
 800bdde:	9305      	str	r3, [sp, #20]
 800bde0:	4978      	ldr	r1, [pc, #480]	; (800bfc4 <ArtNetParams::callbackFunction(char const*)+0x29c>)
 800bde2:	ab05      	add	r3, sp, #20
 800bde4:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800bde8:	f007 f814 	bl	8012e14 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800bdec:	b938      	cbnz	r0, 800bdfe <ArtNetParams::callbackFunction(char const*)+0xd6>
 800bdee:	9b05      	ldr	r3, [sp, #20]
 800bdf0:	4423      	add	r3, r4
 800bdf2:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800bdf6:	6863      	ldr	r3, [r4, #4]
 800bdf8:	f043 0301 	orr.w	r3, r3, #1
 800bdfc:	e7eb      	b.n	800bdd6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800bdfe:	4630      	mov	r0, r6
 800be00:	4971      	ldr	r1, [pc, #452]	; (800bfc8 <ArtNetParams::callbackFunction(char const*)+0x2a0>)
 800be02:	f10d 020f 	add.w	r2, sp, #15
 800be06:	f007 f87d 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800be0a:	b950      	cbnz	r0, 800be22 <ArtNetParams::callbackFunction(char const*)+0xfa>
 800be0c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800be10:	6863      	ldr	r3, [r4, #4]
 800be12:	7222      	strb	r2, [r4, #8]
 800be14:	b112      	cbz	r2, 800be1c <ArtNetParams::callbackFunction(char const*)+0xf4>
 800be16:	f043 0304 	orr.w	r3, r3, #4
 800be1a:	e7dc      	b.n	800bdd6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800be1c:	f023 0304 	bic.w	r3, r3, #4
 800be20:	e7d9      	b.n	800bdd6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800be22:	4630      	mov	r0, r6
 800be24:	4969      	ldr	r1, [pc, #420]	; (800bfcc <ArtNetParams::callbackFunction(char const*)+0x2a4>)
 800be26:	f10d 020f 	add.w	r2, sp, #15
 800be2a:	f007 f86b 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800be2e:	b950      	cbnz	r0, 800be46 <ArtNetParams::callbackFunction(char const*)+0x11e>
 800be30:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800be34:	6863      	ldr	r3, [r4, #4]
 800be36:	7262      	strb	r2, [r4, #9]
 800be38:	b112      	cbz	r2, 800be40 <ArtNetParams::callbackFunction(char const*)+0x118>
 800be3a:	f043 0308 	orr.w	r3, r3, #8
 800be3e:	e7ca      	b.n	800bdd6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800be40:	f023 0308 	bic.w	r3, r3, #8
 800be44:	e7c7      	b.n	800bdd6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800be46:	2500      	movs	r5, #0
 800be48:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800bfd0 <ArtNetParams::callbackFunction(char const*)+0x2a8>
 800be4c:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800bfd4 <ArtNetParams::callbackFunction(char const*)+0x2ac>
 800be50:	f8df b184 	ldr.w	fp, [pc, #388]	; 800bfd8 <ArtNetParams::callbackFunction(char const*)+0x2b0>
 800be54:	4649      	mov	r1, r9
 800be56:	4630      	mov	r0, r6
 800be58:	f10d 020f 	add.w	r2, sp, #15
 800be5c:	f007 f852 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800be60:	b9a8      	cbnz	r0, 800be8e <ArtNetParams::callbackFunction(char const*)+0x166>
 800be62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be66:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800be6a:	6862      	ldr	r2, [r4, #4]
 800be6c:	280f      	cmp	r0, #15
 800be6e:	fa03 f305 	lsl.w	r3, r3, r5
 800be72:	eb04 0105 	add.w	r1, r4, r5
 800be76:	d803      	bhi.n	800be80 <ArtNetParams::callbackFunction(char const*)+0x158>
 800be78:	f881 006b 	strb.w	r0, [r1, #107]	; 0x6b
 800be7c:	4313      	orrs	r3, r2
 800be7e:	e7aa      	b.n	800bdd6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800be80:	3501      	adds	r5, #1
 800be82:	ea22 0203 	bic.w	r2, r2, r3
 800be86:	f881 506b 	strb.w	r5, [r1, #107]	; 0x6b
 800be8a:	6062      	str	r2, [r4, #4]
 800be8c:	e788      	b.n	800bda0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800be8e:	2712      	movs	r7, #18
 800be90:	2303      	movs	r3, #3
 800be92:	436f      	muls	r7, r5
 800be94:	4951      	ldr	r1, [pc, #324]	; (800bfdc <ArtNetParams::callbackFunction(char const*)+0x2b4>)
 800be96:	9305      	str	r3, [sp, #20]
 800be98:	4630      	mov	r0, r6
 800be9a:	ab05      	add	r3, sp, #20
 800be9c:	aa06      	add	r2, sp, #24
 800be9e:	4439      	add	r1, r7
 800bea0:	f006 ffb8 	bl	8012e14 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800bea4:	bb00      	cbnz	r0, 800bee8 <ArtNetParams::callbackFunction(char const*)+0x1c0>
 800bea6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800beaa:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800beae:	40aa      	lsls	r2, r5
 800beb0:	f041 0120 	orr.w	r1, r1, #32
 800beb4:	296c      	cmp	r1, #108	; 0x6c
 800beb6:	6863      	ldr	r3, [r4, #4]
 800beb8:	4425      	add	r5, r4
 800beba:	d10f      	bne.n	800bedc <ArtNetParams::callbackFunction(char const*)+0x1b4>
 800bebc:	f89d 1019 	ldrb.w	r1, [sp, #25]
 800bec0:	f041 0120 	orr.w	r1, r1, #32
 800bec4:	2974      	cmp	r1, #116	; 0x74
 800bec6:	d109      	bne.n	800bedc <ArtNetParams::callbackFunction(char const*)+0x1b4>
 800bec8:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800becc:	f041 0120 	orr.w	r1, r1, #32
 800bed0:	2970      	cmp	r1, #112	; 0x70
 800bed2:	d103      	bne.n	800bedc <ArtNetParams::callbackFunction(char const*)+0x1b4>
 800bed4:	2101      	movs	r1, #1
 800bed6:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800beda:	e7cf      	b.n	800be7c <ArtNetParams::callbackFunction(char const*)+0x154>
 800bedc:	2100      	movs	r1, #0
 800bede:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800bee2:	ea23 0302 	bic.w	r3, r3, r2
 800bee6:	e776      	b.n	800bdd6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800bee8:	f04f 0a04 	mov.w	sl, #4
 800beec:	493c      	ldr	r1, [pc, #240]	; (800bfe0 <ArtNetParams::callbackFunction(char const*)+0x2b8>)
 800beee:	4630      	mov	r0, r6
 800bef0:	ab05      	add	r3, sp, #20
 800bef2:	aa06      	add	r2, sp, #24
 800bef4:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800bef8:	f8cd a014 	str.w	sl, [sp, #20]
 800befc:	f006 ff8a 	bl	8012e14 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800bf00:	b9a0      	cbnz	r0, 800bf2c <ArtNetParams::callbackFunction(char const*)+0x204>
 800bf02:	4652      	mov	r2, sl
 800bf04:	9001      	str	r0, [sp, #4]
 800bf06:	4937      	ldr	r1, [pc, #220]	; (800bfe4 <ArtNetParams::callbackFunction(char const*)+0x2bc>)
 800bf08:	a806      	add	r0, sp, #24
 800bf0a:	f7ff fe1b 	bl	800bb44 <memcmp>
 800bf0e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800bf12:	9b01      	ldr	r3, [sp, #4]
 800bf14:	40aa      	lsls	r2, r5
 800bf16:	4425      	add	r5, r4
 800bf18:	b920      	cbnz	r0, 800bf24 <ArtNetParams::callbackFunction(char const*)+0x1fc>
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
 800bf20:	6863      	ldr	r3, [r4, #4]
 800bf22:	e7ab      	b.n	800be7c <ArtNetParams::callbackFunction(char const*)+0x154>
 800bf24:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
 800bf28:	6863      	ldr	r3, [r4, #4]
 800bf2a:	e7da      	b.n	800bee2 <ArtNetParams::callbackFunction(char const*)+0x1ba>
 800bf2c:	2307      	movs	r3, #7
 800bf2e:	4630      	mov	r0, r6
 800bf30:	9305      	str	r3, [sp, #20]
 800bf32:	aa06      	add	r2, sp, #24
 800bf34:	ab05      	add	r3, sp, #20
 800bf36:	eb0b 0107 	add.w	r1, fp, r7
 800bf3a:	f006 ff6b 	bl	8012e14 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	d17d      	bne.n	800c03e <ArtNetParams::callbackFunction(char const*)+0x316>
 800bf42:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800bf46:	f043 0320 	orr.w	r3, r3, #32
 800bf4a:	2b69      	cmp	r3, #105	; 0x69
 800bf4c:	d14c      	bne.n	800bfe8 <ArtNetParams::callbackFunction(char const*)+0x2c0>
 800bf4e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800bf52:	f043 0320 	orr.w	r3, r3, #32
 800bf56:	2b6e      	cmp	r3, #110	; 0x6e
 800bf58:	d16f      	bne.n	800c03a <ArtNetParams::callbackFunction(char const*)+0x312>
 800bf5a:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800bf5e:	f043 0320 	orr.w	r3, r3, #32
 800bf62:	2b70      	cmp	r3, #112	; 0x70
 800bf64:	d169      	bne.n	800c03a <ArtNetParams::callbackFunction(char const*)+0x312>
 800bf66:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800bf6a:	f043 0320 	orr.w	r3, r3, #32
 800bf6e:	2b75      	cmp	r3, #117	; 0x75
 800bf70:	d163      	bne.n	800c03a <ArtNetParams::callbackFunction(char const*)+0x312>
 800bf72:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800bf76:	f043 0320 	orr.w	r3, r3, #32
 800bf7a:	3b74      	subs	r3, #116	; 0x74
 800bf7c:	bf18      	it	ne
 800bf7e:	2301      	movne	r3, #1
 800bf80:	2103      	movs	r1, #3
 800bf82:	f8b4 2079 	ldrh.w	r2, [r4, #121]	; 0x79
 800bf86:	006d      	lsls	r5, r5, #1
 800bf88:	40a9      	lsls	r1, r5
 800bf8a:	ea22 0201 	bic.w	r2, r2, r1
 800bf8e:	b143      	cbz	r3, 800bfa2 <ArtNetParams::callbackFunction(char const*)+0x27a>
 800bf90:	2b02      	cmp	r3, #2
 800bf92:	bf15      	itete	ne
 800bf94:	2301      	movne	r3, #1
 800bf96:	40ab      	lsleq	r3, r5
 800bf98:	fa03 f505 	lslne.w	r5, r3, r5
 800bf9c:	431a      	orreq	r2, r3
 800bf9e:	bf18      	it	ne
 800bfa0:	432a      	orrne	r2, r5
 800bfa2:	f8a4 2079 	strh.w	r2, [r4, #121]	; 0x79
 800bfa6:	e6fb      	b.n	800bda0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800bfa8:	080178b0 	stmdaeq	r1, {r4, r5, r7, fp, ip, sp, lr}
 800bfac:	080183dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, r9, pc}
 800bfb0:	08017858 	stmdaeq	r1, {r3, r4, r6, fp, ip, sp, lr}
 800bfb4:	0801785d 	stmdaeq	r1, {r0, r2, r3, r4, r6, fp, ip, sp, lr}
 800bfb8:	08016aba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, fp, sp, lr}
 800bfbc:	08017861 	stmdaeq	r1, {r0, r5, r6, fp, ip, sp, lr}
 800bfc0:	08017913 	stmdaeq	r1, {r0, r1, r4, r8, fp, ip, sp, lr}
 800bfc4:	08017909 	stmdaeq	r1, {r0, r3, r8, fp, ip, sp, lr}
 800bfc8:	080179c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, fp, ip, sp, lr}
 800bfcc:	080179ca 	stmdaeq	r1, {r1, r3, r6, r7, r8, fp, ip, sp, lr}
 800bfd0:	0801832c 	stmdaeq	r1, {r2, r3, r5, r8, r9, pc}
 800bfd4:	0801791e 	stmdaeq	r1, {r1, r2, r3, r4, r8, fp, ip, sp, lr}
 800bfd8:	080183ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, r9, pc}
 800bfdc:	0801836c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, pc}
 800bfe0:	080178c9 	stmdaeq	r1, {r0, r3, r6, r7, fp, ip, sp, lr}
 800bfe4:	0801786a 	stmdaeq	r1, {r1, r3, r5, r6, fp, ip, sp, lr}
 800bfe8:	2b64      	cmp	r3, #100	; 0x64
 800bfea:	d126      	bne.n	800c03a <ArtNetParams::callbackFunction(char const*)+0x312>
 800bfec:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800bff0:	f043 0320 	orr.w	r3, r3, #32
 800bff4:	2b69      	cmp	r3, #105	; 0x69
 800bff6:	d120      	bne.n	800c03a <ArtNetParams::callbackFunction(char const*)+0x312>
 800bff8:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800bffc:	f043 0320 	orr.w	r3, r3, #32
 800c000:	2b73      	cmp	r3, #115	; 0x73
 800c002:	d11a      	bne.n	800c03a <ArtNetParams::callbackFunction(char const*)+0x312>
 800c004:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c008:	f043 0320 	orr.w	r3, r3, #32
 800c00c:	2b61      	cmp	r3, #97	; 0x61
 800c00e:	d114      	bne.n	800c03a <ArtNetParams::callbackFunction(char const*)+0x312>
 800c010:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800c014:	f043 0320 	orr.w	r3, r3, #32
 800c018:	2b62      	cmp	r3, #98	; 0x62
 800c01a:	d10e      	bne.n	800c03a <ArtNetParams::callbackFunction(char const*)+0x312>
 800c01c:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800c020:	f043 0320 	orr.w	r3, r3, #32
 800c024:	2b6c      	cmp	r3, #108	; 0x6c
 800c026:	d108      	bne.n	800c03a <ArtNetParams::callbackFunction(char const*)+0x312>
 800c028:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c02c:	f043 0320 	orr.w	r3, r3, #32
 800c030:	2b65      	cmp	r3, #101	; 0x65
 800c032:	bf14      	ite	ne
 800c034:	2301      	movne	r3, #1
 800c036:	2302      	moveq	r3, #2
 800c038:	e7a2      	b.n	800bf80 <ArtNetParams::callbackFunction(char const*)+0x258>
 800c03a:	2301      	movs	r3, #1
 800c03c:	e7a0      	b.n	800bf80 <ArtNetParams::callbackFunction(char const*)+0x258>
 800c03e:	2118      	movs	r1, #24
 800c040:	4b2a      	ldr	r3, [pc, #168]	; (800c0ec <ArtNetParams::callbackFunction(char const*)+0x3c4>)
 800c042:	4630      	mov	r0, r6
 800c044:	fb01 3105 	mla	r1, r1, r5, r3
 800c048:	aa04      	add	r2, sp, #16
 800c04a:	f006 fefc 	bl	8012e46 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800c04e:	b998      	cbnz	r0, 800c078 <ArtNetParams::callbackFunction(char const*)+0x350>
 800c050:	9904      	ldr	r1, [sp, #16]
 800c052:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c056:	f8c3 107b 	str.w	r1, [r3, #123]	; 0x7b
 800c05a:	2301      	movs	r3, #1
 800c05c:	40ab      	lsls	r3, r5
 800c05e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800c062:	b29b      	uxth	r3, r3
 800c064:	b119      	cbz	r1, 800c06e <ArtNetParams::callbackFunction(char const*)+0x346>
 800c066:	4313      	orrs	r3, r2
 800c068:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800c06c:	e698      	b.n	800bda0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c06e:	ea22 0203 	bic.w	r2, r2, r3
 800c072:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 800c076:	e693      	b.n	800bda0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c078:	4641      	mov	r1, r8
 800c07a:	4630      	mov	r0, r6
 800c07c:	f10d 020f 	add.w	r2, sp, #15
 800c080:	f006 ff40 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800c084:	b998      	cbnz	r0, 800c0ae <ArtNetParams::callbackFunction(char const*)+0x386>
 800c086:	2201      	movs	r2, #1
 800c088:	f105 0308 	add.w	r3, r5, #8
 800c08c:	fa02 f303 	lsl.w	r3, r2, r3
 800c090:	40aa      	lsls	r2, r5
 800c092:	4313      	orrs	r3, r2
 800c094:	89a2      	ldrh	r2, [r4, #12]
 800c096:	b29b      	uxth	r3, r3
 800c098:	ea22 0103 	bic.w	r1, r2, r3
 800c09c:	81a1      	strh	r1, [r4, #12]
 800c09e:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800c0a2:	2900      	cmp	r1, #0
 800c0a4:	f43f ae7c 	beq.w	800bda0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c0a8:	431a      	orrs	r2, r3
 800c0aa:	81a2      	strh	r2, [r4, #12]
 800c0ac:	e678      	b.n	800bda0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c0ae:	3501      	adds	r5, #1
 800c0b0:	2d04      	cmp	r5, #4
 800c0b2:	f109 0910 	add.w	r9, r9, #16
 800c0b6:	f108 0812 	add.w	r8, r8, #18
 800c0ba:	f47f aecb 	bne.w	800be54 <ArtNetParams::callbackFunction(char const*)+0x12c>
 800c0be:	4630      	mov	r0, r6
 800c0c0:	490b      	ldr	r1, [pc, #44]	; (800c0f0 <ArtNetParams::callbackFunction(char const*)+0x3c8>)
 800c0c2:	f10d 020f 	add.w	r2, sp, #15
 800c0c6:	f006 ff1d 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800c0ca:	b910      	cbnz	r0, 800c0d2 <ArtNetParams::callbackFunction(char const*)+0x3aa>
 800c0cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c0d0:	e637      	b.n	800bd42 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	4907      	ldr	r1, [pc, #28]	; (800c0f4 <ArtNetParams::callbackFunction(char const*)+0x3cc>)
 800c0d6:	f10d 020f 	add.w	r2, sp, #15
 800c0da:	f006 ff13 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	f47f ae5e 	bne.w	800bda0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800c0e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c0e8:	e62b      	b.n	800bd42 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800c0ea:	bf00      	nop
 800c0ec:	08017966 	stmdaeq	r1, {r1, r2, r5, r6, r8, fp, ip, sp, lr}
 800c0f0:	080178bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, fp, ip, sp, lr}
 800c0f4:	080183c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, r9, pc}

0800c0f8 <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800c0f8:	f7ff be16 	b.w	800bd28 <ArtNetParams::callbackFunction(char const*)>

0800c0fc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
 800c0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c100:	4604      	mov	r4, r0
 800c102:	4615      	mov	r5, r2
 800c104:	461e      	mov	r6, r3
 800c106:	b085      	sub	sp, #20
 800c108:	3004      	adds	r0, #4
 800c10a:	2900      	cmp	r1, #0
 800c10c:	f000 80a2 	beq.w	800c254 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x158>
 800c110:	2287      	movs	r2, #135	; 0x87
 800c112:	f007 fc32 	bl	801397a <memmove>
 800c116:	4633      	mov	r3, r6
 800c118:	462a      	mov	r2, r5
 800c11a:	4995      	ldr	r1, [pc, #596]	; (800c370 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800c11c:	a801      	add	r0, sp, #4
 800c11e:	f006 fda1 	bl	8012c64 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800c122:	6863      	ldr	r3, [r4, #4]
 800c124:	f104 0622 	add.w	r6, r4, #34	; 0x22
 800c128:	f013 0501 	ands.w	r5, r3, #1
 800c12c:	d108      	bne.n	800c140 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x44>
 800c12e:	4b91      	ldr	r3, [pc, #580]	; (800c374 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800c130:	223f      	movs	r2, #63	; 0x3f
 800c132:	6819      	ldr	r1, [r3, #0]
 800c134:	4630      	mov	r0, r6
 800c136:	314e      	adds	r1, #78	; 0x4e
 800c138:	f7ff fd90 	bl	800bc5c <strncpy.isra.0>
 800c13c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800c140:	6863      	ldr	r3, [r4, #4]
 800c142:	4632      	mov	r2, r6
 800c144:	f003 0301 	and.w	r3, r3, #1
 800c148:	498b      	ldr	r1, [pc, #556]	; (800c378 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800c14a:	a801      	add	r0, sp, #4
 800c14c:	f7ff fd36 	bl	800bbbc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c150:	6863      	ldr	r3, [r4, #4]
 800c152:	f104 0610 	add.w	r6, r4, #16
 800c156:	f013 0502 	ands.w	r5, r3, #2
 800c15a:	d108      	bne.n	800c16e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x72>
 800c15c:	4b85      	ldr	r3, [pc, #532]	; (800c374 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800c15e:	2211      	movs	r2, #17
 800c160:	6819      	ldr	r1, [r3, #0]
 800c162:	4630      	mov	r0, r6
 800c164:	313c      	adds	r1, #60	; 0x3c
 800c166:	f7ff fd79 	bl	800bc5c <strncpy.isra.0>
 800c16a:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800c16e:	6863      	ldr	r3, [r4, #4]
 800c170:	4632      	mov	r2, r6
 800c172:	4982      	ldr	r1, [pc, #520]	; (800c37c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800c174:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c178:	a801      	add	r0, sp, #4
 800c17a:	f7ff fd1f 	bl	800bbbc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c17e:	6863      	ldr	r3, [r4, #4]
 800c180:	7a22      	ldrb	r2, [r4, #8]
 800c182:	497f      	ldr	r1, [pc, #508]	; (800c380 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x284>)
 800c184:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c188:	a801      	add	r0, sp, #4
 800c18a:	f7ff fcef 	bl	800bb6c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800c18e:	6863      	ldr	r3, [r4, #4]
 800c190:	7a62      	ldrb	r2, [r4, #9]
 800c192:	497c      	ldr	r1, [pc, #496]	; (800c384 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800c194:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c198:	a801      	add	r0, sp, #4
 800c19a:	f7ff fce7 	bl	800bb6c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800c19e:	6862      	ldr	r2, [r4, #4]
 800c1a0:	4979      	ldr	r1, [pc, #484]	; (800c388 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800c1a2:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800c1a6:	a801      	add	r0, sp, #4
 800c1a8:	f7ff fd30 	bl	800bc0c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800c1ac:	2500      	movs	r5, #0
 800c1ae:	4f77      	ldr	r7, [pc, #476]	; (800c38c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800c1b0:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 800c390 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x294>
 800c1b4:	f104 086a 	add.w	r8, r4, #106	; 0x6a
 800c1b8:	f8d9 2000 	ldr.w	r2, [r9]
 800c1bc:	6863      	ldr	r3, [r4, #4]
 800c1be:	42aa      	cmp	r2, r5
 800c1c0:	d84f      	bhi.n	800c262 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x166>
 800c1c2:	7aa1      	ldrb	r1, [r4, #10]
 800c1c4:	4a73      	ldr	r2, [pc, #460]	; (800c394 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800c1c6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c1ca:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c1ce:	a801      	add	r0, sp, #4
 800c1d0:	4971      	ldr	r1, [pc, #452]	; (800c398 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800c1d2:	f7ff fcf3 	bl	800bbbc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c1d6:	4971      	ldr	r1, [pc, #452]	; (800c39c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800c1d8:	a801      	add	r0, sp, #4
 800c1da:	f006 fdc9 	bl	8012d70 <PropertiesBuilder::AddComment(char const*)>
 800c1de:	2500      	movs	r5, #0
 800c1e0:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 800c1e4:	4e6e      	ldr	r6, [pc, #440]	; (800c3a0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 800c1e6:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c3a4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a8>
 800c1ea:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 800c3a8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ac>
 800c1ee:	f104 0774 	add.w	r7, r4, #116	; 0x74
 800c1f2:	f8d9 3000 	ldr.w	r3, [r9]
 800c1f6:	42ab      	cmp	r3, r5
 800c1f8:	6863      	ldr	r3, [r4, #4]
 800c1fa:	f200 80a5 	bhi.w	800c348 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x24c>
 800c1fe:	f3c3 62c0 	ubfx	r2, r3, #27, #1
 800c202:	496a      	ldr	r1, [pc, #424]	; (800c3ac <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b0>)
 800c204:	a801      	add	r0, sp, #4
 800c206:	f7ff fd01 	bl	800bc0c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800c20a:	4969      	ldr	r1, [pc, #420]	; (800c3b0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 800c20c:	a801      	add	r0, sp, #4
 800c20e:	f006 fdaf 	bl	8012d70 <PropertiesBuilder::AddComment(char const*)>
 800c212:	6862      	ldr	r2, [r4, #4]
 800c214:	4967      	ldr	r1, [pc, #412]	; (800c3b4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800c216:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800c21a:	a801      	add	r0, sp, #4
 800c21c:	f7ff fcf6 	bl	800bc0c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800c220:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c224:	b17b      	cbz	r3, 800c246 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x14a>
 800c226:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800c22a:	9b01      	ldr	r3, [sp, #4]
 800c22c:	4413      	add	r3, r2
 800c22e:	227d      	movs	r2, #125	; 0x7d
 800c230:	f803 2c01 	strb.w	r2, [r3, #-1]
 800c234:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800c238:	9901      	ldr	r1, [sp, #4]
 800c23a:	54ca      	strb	r2, [r1, r3]
 800c23c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800c240:	3301      	adds	r3, #1
 800c242:	f8ad 300a 	strh.w	r3, [sp, #10]
 800c246:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800c24a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c24c:	601a      	str	r2, [r3, #0]
 800c24e:	b005      	add	sp, #20
 800c250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c254:	6823      	ldr	r3, [r4, #0]
 800c256:	4601      	mov	r1, r0
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	4618      	mov	r0, r3
 800c25c:	68d2      	ldr	r2, [r2, #12]
 800c25e:	4790      	blx	r2
 800c260:	e759      	b.n	800c116 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a>
 800c262:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c266:	2612      	movs	r6, #18
 800c268:	40aa      	lsls	r2, r5
 800c26a:	4953      	ldr	r1, [pc, #332]	; (800c3b8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800c26c:	439a      	bics	r2, r3
 800c26e:	bf0c      	ite	eq
 800c270:	2301      	moveq	r3, #1
 800c272:	2300      	movne	r3, #0
 800c274:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800c278:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800c27c:	a801      	add	r0, sp, #4
 800c27e:	f7ff fc75 	bl	800bb6c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800c282:	436e      	muls	r6, r5
 800c284:	f8b4 3079 	ldrh.w	r3, [r4, #121]	; 0x79
 800c288:	006a      	lsls	r2, r5, #1
 800c28a:	494c      	ldr	r1, [pc, #304]	; (800c3bc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>)
 800c28c:	40d3      	lsrs	r3, r2
 800c28e:	f013 0303 	ands.w	r3, r3, #3
 800c292:	ea4f 1b05 	mov.w	fp, r5, lsl #4
 800c296:	4431      	add	r1, r6
 800c298:	d054      	beq.n	800c344 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x248>
 800c29a:	4a49      	ldr	r2, [pc, #292]	; (800c3c0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800c29c:	4849      	ldr	r0, [pc, #292]	; (800c3c4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	bf08      	it	eq
 800c2a2:	4602      	moveq	r2, r0
 800c2a4:	3b01      	subs	r3, #1
 800c2a6:	bf18      	it	ne
 800c2a8:	2301      	movne	r3, #1
 800c2aa:	a801      	add	r0, sp, #4
 800c2ac:	f7ff fc86 	bl	800bbbc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c2b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c2b4:	f04f 0a01 	mov.w	sl, #1
 800c2b8:	6861      	ldr	r1, [r4, #4]
 800c2ba:	40ab      	lsls	r3, r5
 800c2bc:	438b      	bics	r3, r1
 800c2be:	f898 2005 	ldrb.w	r2, [r8, #5]
 800c2c2:	4841      	ldr	r0, [pc, #260]	; (800c3c8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800c2c4:	4941      	ldr	r1, [pc, #260]	; (800c3cc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 800c2c6:	bf0c      	ite	eq
 800c2c8:	2301      	moveq	r3, #1
 800c2ca:	2300      	movne	r3, #0
 800c2cc:	2a00      	cmp	r2, #0
 800c2ce:	bf0c      	ite	eq
 800c2d0:	4602      	moveq	r2, r0
 800c2d2:	460a      	movne	r2, r1
 800c2d4:	493e      	ldr	r1, [pc, #248]	; (800c3d0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 800c2d6:	a801      	add	r0, sp, #4
 800c2d8:	4431      	add	r1, r6
 800c2da:	f7ff fc6f 	bl	800bbbc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c2de:	f105 0208 	add.w	r2, r5, #8
 800c2e2:	89a1      	ldrh	r1, [r4, #12]
 800c2e4:	fa0a f202 	lsl.w	r2, sl, r2
 800c2e8:	b292      	uxth	r2, r2
 800c2ea:	438a      	bics	r2, r1
 800c2ec:	4939      	ldr	r1, [pc, #228]	; (800c3d4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>)
 800c2ee:	bf0c      	ite	eq
 800c2f0:	4652      	moveq	r2, sl
 800c2f2:	2200      	movne	r2, #0
 800c2f4:	4431      	add	r1, r6
 800c2f6:	a801      	add	r0, sp, #4
 800c2f8:	f7ff fc88 	bl	800bc0c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800c2fc:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800c300:	fa0a f305 	lsl.w	r3, sl, r5
 800c304:	b29b      	uxth	r3, r3
 800c306:	401a      	ands	r2, r3
 800c308:	4293      	cmp	r3, r2
 800c30a:	bf0c      	ite	eq
 800c30c:	4653      	moveq	r3, sl
 800c30e:	2300      	movne	r3, #0
 800c310:	f105 021c 	add.w	r2, r5, #28
 800c314:	d00b      	beq.n	800c32e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x232>
 800c316:	4917      	ldr	r1, [pc, #92]	; (800c374 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800c318:	4555      	cmp	r5, sl
 800c31a:	6809      	ldr	r1, [r1, #0]
 800c31c:	bf8e      	itee	hi
 800c31e:	2100      	movhi	r1, #0
 800c320:	4459      	addls	r1, fp
 800c322:	f8d1 1948 	ldrls.w	r1, [r1, #2376]	; 0x948
 800c326:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 800c32a:	f8c0 100b 	str.w	r1, [r0, #11]
 800c32e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c332:	4639      	mov	r1, r7
 800c334:	f8d2 200b 	ldr.w	r2, [r2, #11]
 800c338:	a801      	add	r0, sp, #4
 800c33a:	f006 fcd5 	bl	8012ce8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800c33e:	3501      	adds	r5, #1
 800c340:	3718      	adds	r7, #24
 800c342:	e739      	b.n	800c1b8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xbc>
 800c344:	4a24      	ldr	r2, [pc, #144]	; (800c3d8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800c346:	e7ad      	b.n	800c2a4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a8>
 800c348:	fa0b f105 	lsl.w	r1, fp, r5
 800c34c:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800c350:	4399      	bics	r1, r3
 800c352:	bf0c      	ite	eq
 800c354:	2301      	moveq	r3, #1
 800c356:	2300      	movne	r3, #0
 800c358:	4631      	mov	r1, r6
 800c35a:	2a00      	cmp	r2, #0
 800c35c:	bf0c      	ite	eq
 800c35e:	4642      	moveq	r2, r8
 800c360:	4652      	movne	r2, sl
 800c362:	a801      	add	r0, sp, #4
 800c364:	f7ff fc2a 	bl	800bbbc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c368:	3501      	adds	r5, #1
 800c36a:	3610      	adds	r6, #16
 800c36c:	e741      	b.n	800c1f2 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xf6>
 800c36e:	bf00      	nop
 800c370:	080179d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, fp, ip, sp, lr}
 800c374:	200012d4 	ldrdcs	r1, [r0], -r4
 800c378:	08017909 	stmdaeq	r1, {r0, r3, r8, fp, ip, sp, lr}
 800c37c:	08017913 	stmdaeq	r1, {r0, r1, r4, r8, fp, ip, sp, lr}
 800c380:	080179c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, fp, ip, sp, lr}
 800c384:	080179ca 	stmdaeq	r1, {r1, r3, r6, r7, r8, fp, ip, sp, lr}
 800c388:	080178b0 	stmdaeq	r1, {r4, r5, r7, fp, ip, sp, lr}
 800c38c:	08017966 	stmdaeq	r1, {r1, r2, r5, r6, r8, fp, ip, sp, lr}
 800c390:	200012e4 	andcs	r1, r0, r4, ror #5
 800c394:	080178a0 	stmdaeq	r1, {r5, r7, fp, ip, sp, lr}
 800c398:	080183dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, r9, pc}
 800c39c:	08017893 	stmdaeq	r1, {r0, r1, r4, r7, fp, ip, sp, lr}
 800c3a0:	080178c9 	stmdaeq	r1, {r0, r3, r6, r7, fp, ip, sp, lr}
 800c3a4:	0801788c 	stmdaeq	r1, {r2, r3, r7, fp, ip, sp, lr}
 800c3a8:	0801786a 	stmdaeq	r1, {r1, r3, r5, r6, fp, ip, sp, lr}
 800c3ac:	080178bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, fp, ip, sp, lr}
 800c3b0:	080166dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, sl, sp, lr}
 800c3b4:	080183c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, r9, pc}
 800c3b8:	0801832c 	stmdaeq	r1, {r2, r3, r5, r8, r9, pc}
 800c3bc:	080183ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, r9, pc}
 800c3c0:	08017875 	stmdaeq	r1, {r0, r2, r4, r5, r6, fp, ip, sp, lr}
 800c3c4:	0801787c 	stmdaeq	r1, {r2, r3, r4, r5, r6, fp, ip, sp, lr}
 800c3c8:	08017888 	stmdaeq	r1, {r3, r7, fp, ip, sp, lr}
 800c3cc:	08017884 	stmdaeq	r1, {r2, r7, fp, ip, sp, lr}
 800c3d0:	0801836c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, pc}
 800c3d4:	0801791e 	stmdaeq	r1, {r1, r2, r3, r4, r8, fp, ip, sp, lr}
 800c3d8:	0801786f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, fp, ip, sp, lr}

0800c3dc <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
 800c3dc:	b513      	push	{r0, r1, r4, lr}
 800c3de:	6804      	ldr	r4, [r0, #0]
 800c3e0:	b914      	cbnz	r4, 800c3e8 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800c3e2:	601c      	str	r4, [r3, #0]
 800c3e4:	b002      	add	sp, #8
 800c3e6:	bd10      	pop	{r4, pc}
 800c3e8:	9300      	str	r3, [sp, #0]
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	460a      	mov	r2, r1
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	f7ff fe84 	bl	800c0fc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
 800c3f4:	e7f6      	b.n	800c3e4 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

0800c3f8 <ArtNetParams::Set(unsigned int)>:
 800c3f8:	2901      	cmp	r1, #1
 800c3fa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3fe:	4604      	mov	r4, r0
 800c400:	4688      	mov	r8, r1
 800c402:	d105      	bne.n	800c410 <ArtNetParams::Set(unsigned int)+0x18>
 800c404:	4a40      	ldr	r2, [pc, #256]	; (800c508 <ArtNetParams::Set(unsigned int)+0x110>)
 800c406:	6813      	ldr	r3, [r2, #0]
 800c408:	3b00      	subs	r3, #0
 800c40a:	bf18      	it	ne
 800c40c:	2301      	movne	r3, #1
 800c40e:	6013      	str	r3, [r2, #0]
 800c410:	6863      	ldr	r3, [r4, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d076      	beq.n	800c504 <ArtNetParams::Set(unsigned int)+0x10c>
 800c416:	4a3d      	ldr	r2, [pc, #244]	; (800c50c <ArtNetParams::Set(unsigned int)+0x114>)
 800c418:	079f      	lsls	r7, r3, #30
 800c41a:	6815      	ldr	r5, [r2, #0]
 800c41c:	d504      	bpl.n	800c428 <ArtNetParams::Set(unsigned int)+0x30>
 800c41e:	4628      	mov	r0, r5
 800c420:	f104 0110 	add.w	r1, r4, #16
 800c424:	f7fd ff5c 	bl	800a2e0 <ArtNetNode::SetShortName(char const*)>
 800c428:	6863      	ldr	r3, [r4, #4]
 800c42a:	07de      	lsls	r6, r3, #31
 800c42c:	d504      	bpl.n	800c438 <ArtNetParams::Set(unsigned int)+0x40>
 800c42e:	4628      	mov	r0, r5
 800c430:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800c434:	f7fd ff7c 	bl	800a330 <ArtNetNode::SetLongName(char const*)>
 800c438:	6863      	ldr	r3, [r4, #4]
 800c43a:	0758      	lsls	r0, r3, #29
 800c43c:	d504      	bpl.n	800c448 <ArtNetParams::Set(unsigned int)+0x50>
 800c43e:	2200      	movs	r2, #0
 800c440:	4628      	mov	r0, r5
 800c442:	7a21      	ldrb	r1, [r4, #8]
 800c444:	f7fe faaf 	bl	800a9a6 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800c448:	6863      	ldr	r3, [r4, #4]
 800c44a:	0719      	lsls	r1, r3, #28
 800c44c:	d504      	bpl.n	800c458 <ArtNetParams::Set(unsigned int)+0x60>
 800c44e:	2200      	movs	r2, #0
 800c450:	4628      	mov	r0, r5
 800c452:	7a61      	ldrb	r1, [r4, #9]
 800c454:	f7fe fa75 	bl	800a942 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800c458:	2600      	movs	r6, #0
 800c45a:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
 800c45e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800c508 <ArtNetParams::Set(unsigned int)+0x110>
 800c462:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800c466:	e03a      	b.n	800c4de <ArtNetParams::Set(unsigned int)+0xe6>
 800c468:	eb06 0a08 	add.w	sl, r6, r8
 800c46c:	f1ba 0f01 	cmp.w	sl, #1
 800c470:	d839      	bhi.n	800c4e6 <ArtNetParams::Set(unsigned int)+0xee>
 800c472:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c476:	fa03 f206 	lsl.w	r2, r3, r6
 800c47a:	6863      	ldr	r3, [r4, #4]
 800c47c:	439a      	bics	r2, r3
 800c47e:	d104      	bne.n	800c48a <ArtNetParams::Set(unsigned int)+0x92>
 800c480:	4651      	mov	r1, sl
 800c482:	4628      	mov	r0, r5
 800c484:	797a      	ldrb	r2, [r7, #5]
 800c486:	f7fe fac0 	bl	800aa0a <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800c48a:	6863      	ldr	r3, [r4, #4]
 800c48c:	fa0b f206 	lsl.w	r2, fp, r6
 800c490:	439a      	bics	r2, r3
 800c492:	d104      	bne.n	800c49e <ArtNetParams::Set(unsigned int)+0xa6>
 800c494:	4651      	mov	r1, sl
 800c496:	4628      	mov	r0, r5
 800c498:	783a      	ldrb	r2, [r7, #0]
 800c49a:	f7fe fae1 	bl	800aa60 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800c49e:	2301      	movs	r3, #1
 800c4a0:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800c4a4:	40b3      	lsls	r3, r6
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	4393      	bics	r3, r2
 800c4aa:	d109      	bne.n	800c4c0 <ArtNetParams::Set(unsigned int)+0xc8>
 800c4ac:	f106 031c 	add.w	r3, r6, #28
 800c4b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c4b4:	4651      	mov	r1, sl
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800c4bc:	f7fe fe10 	bl	800b0e0 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	f106 0308 	add.w	r3, r6, #8
 800c4c6:	89a0      	ldrh	r0, [r4, #12]
 800c4c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	4383      	bics	r3, r0
 800c4d0:	d103      	bne.n	800c4da <ArtNetParams::Set(unsigned int)+0xe2>
 800c4d2:	4651      	mov	r1, sl
 800c4d4:	4628      	mov	r0, r5
 800c4d6:	f7ff f8d7 	bl	800b688 <ArtNetNode::SetRmd(unsigned int, bool)>
 800c4da:	3601      	adds	r6, #1
 800c4dc:	3701      	adds	r7, #1
 800c4de:	f8d9 3000 	ldr.w	r3, [r9]
 800c4e2:	42b3      	cmp	r3, r6
 800c4e4:	d8c0      	bhi.n	800c468 <ArtNetParams::Set(unsigned int)+0x70>
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	7aa1      	ldrb	r1, [r4, #10]
 800c4ea:	f7fe fae4 	bl	800aab6 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800c4ee:	6863      	ldr	r3, [r4, #4]
 800c4f0:	011a      	lsls	r2, r3, #4
 800c4f2:	bf44      	itt	mi
 800c4f4:	2201      	movmi	r2, #1
 800c4f6:	f885 2098 	strbmi.w	r2, [r5, #152]	; 0x98
 800c4fa:	04db      	lsls	r3, r3, #19
 800c4fc:	bf44      	itt	mi
 800c4fe:	2301      	movmi	r3, #1
 800c500:	f885 38e8 	strbmi.w	r3, [r5, #2280]	; 0x8e8
 800c504:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c508:	200012e4 	andcs	r1, r0, r4, ror #5
 800c50c:	200012d4 	ldrdcs	r1, [r0], -r4

0800c510 <ArtNetParams::Dump()>:
 800c510:	4770      	bx	lr
	...

0800c514 <ArtNetNode::HandleTrigger()>:
 800c514:	f890 20aa 	ldrb.w	r2, [r0, #170]	; 0xaa
 800c518:	4601      	mov	r1, r0
 800c51a:	2aff      	cmp	r2, #255	; 0xff
 800c51c:	d103      	bne.n	800c526 <ArtNetNode::HandleTrigger()+0x12>
 800c51e:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 800c522:	2bff      	cmp	r3, #255	; 0xff
 800c524:	d008      	beq.n	800c538 <ArtNetNode::HandleTrigger()+0x24>
 800c526:	4b07      	ldr	r3, [pc, #28]	; (800c544 <ArtNetNode::HandleTrigger()+0x30>)
 800c528:	7818      	ldrb	r0, [r3, #0]
 800c52a:	4290      	cmp	r0, r2
 800c52c:	d109      	bne.n	800c542 <ArtNetNode::HandleTrigger()+0x2e>
 800c52e:	f891 20ab 	ldrb.w	r2, [r1, #171]	; 0xab
 800c532:	785b      	ldrb	r3, [r3, #1]
 800c534:	429a      	cmp	r2, r3
 800c536:	d104      	bne.n	800c542 <ArtNetNode::HandleTrigger()+0x2e>
 800c538:	6948      	ldr	r0, [r1, #20]
 800c53a:	31ac      	adds	r1, #172	; 0xac
 800c53c:	6803      	ldr	r3, [r0, #0]
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	4718      	bx	r3
 800c542:	4770      	bx	lr
 800c544:	080179dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, fp, ip, sp, lr}

0800c548 <e131::universe_to_multicast_ip(unsigned short)>:
 800c548:	b513      	push	{r0, r1, r4, lr}
 800c54a:	4604      	mov	r4, r0
 800c54c:	a901      	add	r1, sp, #4
 800c54e:	4806      	ldr	r0, [pc, #24]	; (800c568 <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 800c550:	f007 f958 	bl	8013804 <inet_aton>
 800c554:	9801      	ldr	r0, [sp, #4]
 800c556:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800c55a:	0224      	lsls	r4, r4, #8
 800c55c:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800c560:	4320      	orrs	r0, r4
 800c562:	b002      	add	sp, #8
 800c564:	bd10      	pop	{r4, pc}
 800c566:	bf00      	nop
 800c568:	080179e2 	stmdaeq	r1, {r1, r5, r6, r7, r8, fp, ip, sp, lr}

0800c56c <memset.constprop.0.isra.0>:
 800c56c:	2300      	movs	r3, #0
 800c56e:	4401      	add	r1, r0
 800c570:	4288      	cmp	r0, r1
 800c572:	d100      	bne.n	800c576 <memset.constprop.0.isra.0+0xa>
 800c574:	4770      	bx	lr
 800c576:	f800 3b01 	strb.w	r3, [r0], #1
 800c57a:	e7f9      	b.n	800c570 <memset.constprop.0.isra.0+0x4>

0800c57c <memcpy.isra.0>:
 800c57c:	3801      	subs	r0, #1
 800c57e:	440a      	add	r2, r1
 800c580:	4291      	cmp	r1, r2
 800c582:	d100      	bne.n	800c586 <memcpy.isra.0+0xa>
 800c584:	4770      	bx	lr
 800c586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c58a:	f800 3f01 	strb.w	r3, [r0, #1]!
 800c58e:	e7f7      	b.n	800c580 <memcpy.isra.0+0x4>

0800c590 <E131Bridge::E131Bridge()>:
 800c590:	2300      	movs	r3, #0
 800c592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c596:	b530      	push	{r4, r5, lr}
 800c598:	e9c0 2300 	strd	r2, r3, [r0]
 800c59c:	2201      	movs	r2, #1
 800c59e:	4604      	mov	r4, r0
 800c5a0:	2564      	movs	r5, #100	; 0x64
 800c5a2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5a6:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800c5aa:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800c5ae:	6743      	str	r3, [r0, #116]	; 0x74
 800c5b0:	4b27      	ldr	r3, [pc, #156]	; (800c650 <E131Bridge::E131Bridge()+0xc0>)
 800c5b2:	b093      	sub	sp, #76	; 0x4c
 800c5b4:	6018      	str	r0, [r3, #0]
 800c5b6:	7202      	strb	r2, [r0, #8]
 800c5b8:	2144      	movs	r1, #68	; 0x44
 800c5ba:	f200 5014 	addw	r0, r0, #1300	; 0x514
 800c5be:	f7ff ffd5 	bl	800c56c <memset.constprop.0.isra.0>
 800c5c2:	210c      	movs	r1, #12
 800c5c4:	f204 509c 	addw	r0, r4, #1436	; 0x59c
 800c5c8:	f7ff ffd0 	bl	800c56c <memset.constprop.0.isra.0>
 800c5cc:	2144      	movs	r1, #68	; 0x44
 800c5ce:	f884 55a5 	strb.w	r5, [r4, #1445]	; 0x5a5
 800c5d2:	f504 60ab 	add.w	r0, r4, #1368	; 0x558
 800c5d6:	f7ff ffc9 	bl	800c56c <memset.constprop.0.isra.0>
 800c5da:	210c      	movs	r1, #12
 800c5dc:	f504 60b5 	add.w	r0, r4, #1448	; 0x5a8
 800c5e0:	f7ff ffc4 	bl	800c56c <memset.constprop.0.isra.0>
 800c5e4:	f884 55b1 	strb.w	r5, [r4, #1457]	; 0x5b1
 800c5e8:	4d1a      	ldr	r5, [pc, #104]	; (800c654 <E131Bridge::E131Bridge()+0xc4>)
 800c5ea:	2120      	movs	r1, #32
 800c5ec:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800c5f0:	f7ff ffbc 	bl	800c56c <memset.constprop.0.isra.0>
 800c5f4:	682b      	ldr	r3, [r5, #0]
 800c5f6:	f884 250c 	strb.w	r2, [r4, #1292]	; 0x50c
 800c5fa:	4a17      	ldr	r2, [pc, #92]	; (800c658 <E131Bridge::E131Bridge()+0xc8>)
 800c5fc:	2140      	movs	r1, #64	; 0x40
 800c5fe:	9200      	str	r2, [sp, #0]
 800c600:	3320      	adds	r3, #32
 800c602:	4a16      	ldr	r2, [pc, #88]	; (800c65c <E131Bridge::E131Bridge()+0xcc>)
 800c604:	a802      	add	r0, sp, #8
 800c606:	f007 fd15 	bl	8014034 <snprintf>
 800c60a:	223f      	movs	r2, #63	; 0x3f
 800c60c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800c610:	a902      	add	r1, sp, #8
 800c612:	f811 0b01 	ldrb.w	r0, [r1], #1
 800c616:	b928      	cbnz	r0, 800c624 <E131Bridge::E131Bridge()+0x94>
 800c618:	441a      	add	r2, r3
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d006      	beq.n	800c62c <E131Bridge::E131Bridge()+0x9c>
 800c61e:	f803 0b01 	strb.w	r0, [r3], #1
 800c622:	e7fa      	b.n	800c61a <E131Bridge::E131Bridge()+0x8a>
 800c624:	3a01      	subs	r2, #1
 800c626:	f803 0b01 	strb.w	r0, [r3], #1
 800c62a:	d1f2      	bne.n	800c612 <E131Bridge::E131Bridge()+0x82>
 800c62c:	2300      	movs	r3, #0
 800c62e:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 800c632:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 800c636:	6828      	ldr	r0, [r5, #0]
 800c638:	f004 fd9c 	bl	8011174 <Network::Begin(unsigned short)>
 800c63c:	4621      	mov	r1, r4
 800c63e:	4b08      	ldr	r3, [pc, #32]	; (800c660 <E131Bridge::E131Bridge()+0xd0>)
 800c640:	f841 0b24 	str.w	r0, [r1], #36
 800c644:	6818      	ldr	r0, [r3, #0]
 800c646:	f007 f87b 	bl	8013740 <Hardware::GetUuid(unsigned char*)>
 800c64a:	4620      	mov	r0, r4
 800c64c:	b013      	add	sp, #76	; 0x4c
 800c64e:	bd30      	pop	{r4, r5, pc}
 800c650:	200012e8 	andcs	r1, r0, r8, ror #5
 800c654:	2000a59c 	mulcs	r0, ip, r5
 800c658:	08016c9a 	stmdaeq	r1, {r1, r3, r4, r7, sl, fp, sp, lr}
 800c65c:	080179ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, fp, ip, sp, lr}
 800c660:	2000ac64 	andcs	sl, r0, r4, ror #24

0800c664 <E131Bridge::~E131Bridge()>:
 800c664:	4770      	bx	lr
	...

0800c668 <E131Bridge::Start()>:
 800c668:	6943      	ldr	r3, [r0, #20]
 800c66a:	b513      	push	{r0, r1, r4, lr}
 800c66c:	4604      	mov	r4, r0
 800c66e:	b35b      	cbz	r3, 800c6c8 <E131Bridge::Start()+0x60>
 800c670:	6983      	ldr	r3, [r0, #24]
 800c672:	b9cb      	cbnz	r3, 800c6a8 <E131Bridge::Start()+0x40>
 800c674:	a901      	add	r1, sp, #4
 800c676:	4818      	ldr	r0, [pc, #96]	; (800c6d8 <E131Bridge::Start()+0x70>)
 800c678:	f007 f8c4 	bl	8013804 <inet_aton>
 800c67c:	9b01      	ldr	r3, [sp, #4]
 800c67e:	f240 207e 	movw	r0, #638	; 0x27e
 800c682:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 800c686:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 800c68a:	6223      	str	r3, [r4, #32]
 800c68c:	f007 f8b6 	bl	80137fc <operator new(unsigned int)>
 800c690:	61a0      	str	r0, [r4, #24]
 800c692:	4620      	mov	r0, r4
 800c694:	f000 fd0a 	bl	800d0ac <E131Bridge::FillDataPacket()>
 800c698:	f44f 608f 	mov.w	r0, #1144	; 0x478
 800c69c:	f007 f8ae 	bl	80137fc <operator new(unsigned int)>
 800c6a0:	61e0      	str	r0, [r4, #28]
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	f000 fc52 	bl	800cf4c <E131Bridge::FillDiscoveryPacket()>
 800c6a8:	f894 359e 	ldrb.w	r3, [r4, #1438]	; 0x59e
 800c6ac:	b123      	cbz	r3, 800c6b8 <E131Bridge::Start()+0x50>
 800c6ae:	6960      	ldr	r0, [r4, #20]
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	6803      	ldr	r3, [r0, #0]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	4798      	blx	r3
 800c6b8:	f894 35aa 	ldrb.w	r3, [r4, #1450]	; 0x5aa
 800c6bc:	b123      	cbz	r3, 800c6c8 <E131Bridge::Start()+0x60>
 800c6be:	6960      	ldr	r0, [r4, #20]
 800c6c0:	2101      	movs	r1, #1
 800c6c2:	6803      	ldr	r3, [r0, #0]
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	4798      	blx	r3
 800c6c8:	2102      	movs	r1, #2
 800c6ca:	4b04      	ldr	r3, [pc, #16]	; (800c6dc <E131Bridge::Start()+0x74>)
 800c6cc:	6818      	ldr	r0, [r3, #0]
 800c6ce:	b002      	add	sp, #8
 800c6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6d4:	f006 bfb0 	b.w	8013638 <LedBlink::SetMode(ledblink::Mode)>
 800c6d8:	080179e2 	stmdaeq	r1, {r1, r5, r6, r7, r8, fp, ip, sp, lr}
 800c6dc:	2000ac60 	andcs	sl, r0, r0, ror #24

0800c6e0 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 800c6e0:	b538      	push	{r3, r4, r5, lr}
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	4610      	mov	r0, r2
 800c6e6:	b129      	cbz	r1, 800c6f4 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x14>
 800c6e8:	f8b3 2514 	ldrh.w	r2, [r3, #1300]	; 0x514
 800c6ec:	4282      	cmp	r2, r0
 800c6ee:	d011      	beq.n	800c714 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x34>
 800c6f0:	2901      	cmp	r1, #1
 800c6f2:	d003      	beq.n	800c6fc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x1c>
 800c6f4:	f8b3 2558 	ldrh.w	r2, [r3, #1368]	; 0x558
 800c6f8:	4282      	cmp	r2, r0
 800c6fa:	d00b      	beq.n	800c714 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x34>
 800c6fc:	4a06      	ldr	r2, [pc, #24]	; (800c718 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x38>)
 800c6fe:	681d      	ldr	r5, [r3, #0]
 800c700:	6814      	ldr	r4, [r2, #0]
 800c702:	f7ff ff21 	bl	800c548 <e131::universe_to_multicast_ip(unsigned short)>
 800c706:	4629      	mov	r1, r5
 800c708:	4602      	mov	r2, r0
 800c70a:	4620      	mov	r0, r4
 800c70c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c710:	f004 bd44 	b.w	801119c <Network::LeaveGroup(int, unsigned int)>
 800c714:	bd38      	pop	{r3, r4, r5, pc}
 800c716:	bf00      	nop
 800c718:	2000a59c 	mulcs	r0, ip, r5

0800c71c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800c71c:	b570      	push	{r4, r5, r6, lr}
 800c71e:	4604      	mov	r4, r0
 800c720:	461d      	mov	r5, r3
 800c722:	b1c1      	cbz	r1, 800c756 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 800c724:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800c728:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800c72c:	b12a      	cbz	r2, 800c73a <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x1e>
 800c72e:	42aa      	cmp	r2, r5
 800c730:	d017      	beq.n	800c762 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800c732:	2102      	movs	r1, #2
 800c734:	4620      	mov	r0, r4
 800c736:	f7ff ffd3 	bl	800c6e0 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800c73a:	4b0a      	ldr	r3, [pc, #40]	; (800c764 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>)
 800c73c:	8035      	strh	r5, [r6, #0]
 800c73e:	4628      	mov	r0, r5
 800c740:	6826      	ldr	r6, [r4, #0]
 800c742:	681c      	ldr	r4, [r3, #0]
 800c744:	f7ff ff00 	bl	800c548 <e131::universe_to_multicast_ip(unsigned short)>
 800c748:	4631      	mov	r1, r6
 800c74a:	4602      	mov	r2, r0
 800c74c:	4620      	mov	r0, r4
 800c74e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c752:	f004 bd20 	b.w	8011196 <Network::JoinGroup(int, unsigned int)>
 800c756:	b122      	cbz	r2, 800c762 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800c758:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800c75c:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 800c760:	e7e4      	b.n	800c72c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 800c762:	bd70      	pop	{r4, r5, r6, pc}
 800c764:	2000a59c 	mulcs	r0, ip, r5

0800c768 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800c768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c76c:	4604      	mov	r4, r0
 800c76e:	460d      	mov	r5, r1
 800c770:	461e      	mov	r6, r3
 800c772:	bb02      	cbnz	r2, 800c7b6 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x4e>
 800c774:	2901      	cmp	r1, #1
 800c776:	d843      	bhi.n	800c800 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800c778:	230c      	movs	r3, #12
 800c77a:	fb03 0301 	mla	r3, r3, r1, r0
 800c77e:	f893 259e 	ldrb.w	r2, [r3, #1438]	; 0x59e
 800c782:	b12a      	cbz	r2, 800c790 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x28>
 800c784:	f8b3 359c 	ldrh.w	r3, [r3, #1436]	; 0x59c
 800c788:	42b3      	cmp	r3, r6
 800c78a:	d109      	bne.n	800c7a0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x38>
 800c78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c790:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800c794:	3201      	adds	r2, #1
 800c796:	f880 250a 	strb.w	r2, [r0, #1290]	; 0x50a
 800c79a:	2201      	movs	r2, #1
 800c79c:	f883 259e 	strb.w	r2, [r3, #1438]	; 0x59e
 800c7a0:	230c      	movs	r3, #12
 800c7a2:	fb03 4405 	mla	r4, r3, r5, r4
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	f8a4 659c 	strh.w	r6, [r4, #1436]	; 0x59c
 800c7ac:	f7ff fecc 	bl	800c548 <e131::universe_to_multicast_ip(unsigned short)>
 800c7b0:	f8c4 05a0 	str.w	r0, [r4, #1440]	; 0x5a0
 800c7b4:	e7ea      	b.n	800c78c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c7b6:	2a02      	cmp	r2, #2
 800c7b8:	d122      	bne.n	800c800 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800c7ba:	2901      	cmp	r1, #1
 800c7bc:	d8e6      	bhi.n	800c78c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c7be:	2344      	movs	r3, #68	; 0x44
 800c7c0:	fb03 0301 	mla	r3, r3, r1, r0
 800c7c4:	f893 2516 	ldrb.w	r2, [r3, #1302]	; 0x516
 800c7c8:	b152      	cbz	r2, 800c7e0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x78>
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800c7d0:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800c7d4:	4632      	mov	r2, r6
 800c7d6:	3b01      	subs	r3, #1
 800c7d8:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800c7dc:	f7ff ff80 	bl	800c6e0 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800c7e0:	230c      	movs	r3, #12
 800c7e2:	fb03 4505 	mla	r5, r3, r5, r4
 800c7e6:	f895 359e 	ldrb.w	r3, [r5, #1438]	; 0x59e
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d0ce      	beq.n	800c78c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	f885 359e 	strb.w	r3, [r5, #1438]	; 0x59e
 800c7f4:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800c7fe:	e7c5      	b.n	800c78c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c800:	2344      	movs	r3, #68	; 0x44
 800c802:	fb03 4305 	mla	r3, r3, r5, r4
 800c806:	f893 2516 	ldrb.w	r2, [r3, #1302]	; 0x516
 800c80a:	b1d2      	cbz	r2, 800c842 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xda>
 800c80c:	f8b3 3514 	ldrh.w	r3, [r3, #1300]	; 0x514
 800c810:	42b3      	cmp	r3, r6
 800c812:	d0bb      	beq.n	800c78c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c814:	4632      	mov	r2, r6
 800c816:	4629      	mov	r1, r5
 800c818:	4620      	mov	r0, r4
 800c81a:	f7ff ff61 	bl	800c6e0 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800c81e:	4b0d      	ldr	r3, [pc, #52]	; (800c854 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xec>)
 800c820:	4630      	mov	r0, r6
 800c822:	681f      	ldr	r7, [r3, #0]
 800c824:	f8d4 8000 	ldr.w	r8, [r4]
 800c828:	f7ff fe8e 	bl	800c548 <e131::universe_to_multicast_ip(unsigned short)>
 800c82c:	4641      	mov	r1, r8
 800c82e:	4602      	mov	r2, r0
 800c830:	4638      	mov	r0, r7
 800c832:	f004 fcb0 	bl	8011196 <Network::JoinGroup(int, unsigned int)>
 800c836:	2344      	movs	r3, #68	; 0x44
 800c838:	fb03 4305 	mla	r3, r3, r5, r4
 800c83c:	f8a3 6514 	strh.w	r6, [r3, #1300]	; 0x514
 800c840:	e7a4      	b.n	800c78c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800c842:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 800c846:	3201      	adds	r2, #1
 800c848:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 800c84c:	2201      	movs	r2, #1
 800c84e:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800c852:	e7e4      	b.n	800c81e <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xb6>
 800c854:	2000a59c 	mulcs	r0, ip, r5

0800c858 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 800c858:	b953      	cbnz	r3, 800c870 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x18>
 800c85a:	2901      	cmp	r1, #1
 800c85c:	d811      	bhi.n	800c882 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x2a>
 800c85e:	230c      	movs	r3, #12
 800c860:	fb03 0001 	mla	r0, r3, r1, r0
 800c864:	f8b0 359c 	ldrh.w	r3, [r0, #1436]	; 0x59c
 800c868:	f890 059e 	ldrb.w	r0, [r0, #1438]	; 0x59e
 800c86c:	8013      	strh	r3, [r2, #0]
 800c86e:	4770      	bx	lr
 800c870:	2344      	movs	r3, #68	; 0x44
 800c872:	fb03 0001 	mla	r0, r3, r1, r0
 800c876:	f8b0 3514 	ldrh.w	r3, [r0, #1300]	; 0x514
 800c87a:	f890 0516 	ldrb.w	r0, [r0, #1302]	; 0x516
 800c87e:	8013      	strh	r3, [r2, #0]
 800c880:	4770      	bx	lr
 800c882:	4618      	mov	r0, r3
 800c884:	4770      	bx	lr

0800c886 <E131Bridge::UpdateMergeStatus(unsigned int)>:
 800c886:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 800c88a:	b923      	cbnz	r3, 800c896 <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 800c88c:	2301      	movs	r3, #1
 800c88e:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 800c892:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800c896:	2344      	movs	r3, #68	; 0x44
 800c898:	fb03 0001 	mla	r0, r3, r1, r0
 800c89c:	2301      	movs	r3, #1
 800c89e:	f880 3555 	strb.w	r3, [r0, #1365]	; 0x555
 800c8a2:	4770      	bx	lr

0800c8a4 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	2044      	movs	r0, #68	; 0x44
 800c8a8:	4348      	muls	r0, r1
 800c8aa:	b570      	push	{r4, r5, r6, lr}
 800c8ac:	1815      	adds	r5, r2, r0
 800c8ae:	460c      	mov	r4, r1
 800c8b0:	68d3      	ldr	r3, [r2, #12]
 800c8b2:	f8d5 1518 	ldr.w	r1, [r5, #1304]	; 0x518
 800c8b6:	1a5b      	subs	r3, r3, r1
 800c8b8:	f242 7110 	movw	r1, #10000	; 0x2710
 800c8bc:	428b      	cmp	r3, r1
 800c8be:	d90a      	bls.n	800c8d6 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 800c8c0:	2600      	movs	r6, #0
 800c8c2:	f500 60a4 	add.w	r0, r0, #1312	; 0x520
 800c8c6:	2110      	movs	r1, #16
 800c8c8:	f8c5 651c 	str.w	r6, [r5, #1308]	; 0x51c
 800c8cc:	4410      	add	r0, r2
 800c8ce:	f7ff fe4d 	bl	800c56c <memset.constprop.0.isra.0>
 800c8d2:	f885 6555 	strb.w	r6, [r5, #1365]	; 0x555
 800c8d6:	2344      	movs	r3, #68	; 0x44
 800c8d8:	435c      	muls	r4, r3
 800c8da:	1915      	adds	r5, r2, r4
 800c8dc:	f8d5 1534 	ldr.w	r1, [r5, #1332]	; 0x534
 800c8e0:	68d3      	ldr	r3, [r2, #12]
 800c8e2:	1a5b      	subs	r3, r3, r1
 800c8e4:	f242 7110 	movw	r1, #10000	; 0x2710
 800c8e8:	428b      	cmp	r3, r1
 800c8ea:	d90a      	bls.n	800c902 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800c8ec:	2600      	movs	r6, #0
 800c8ee:	f204 543c 	addw	r4, r4, #1340	; 0x53c
 800c8f2:	2110      	movs	r1, #16
 800c8f4:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
 800c8f8:	1910      	adds	r0, r2, r4
 800c8fa:	f7ff fe37 	bl	800c56c <memset.constprop.0.isra.0>
 800c8fe:	f885 6555 	strb.w	r6, [r5, #1365]	; 0x555
 800c902:	f892 3555 	ldrb.w	r3, [r2, #1365]	; 0x555
 800c906:	b93b      	cbnz	r3, 800c918 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x74>
 800c908:	f892 3599 	ldrb.w	r3, [r2, #1433]	; 0x599
 800c90c:	b923      	cbnz	r3, 800c918 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x74>
 800c90e:	2101      	movs	r1, #1
 800c910:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 800c914:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 800c918:	bd70      	pop	{r4, r5, r6, pc}

0800c91a <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 800c91a:	2244      	movs	r2, #68	; 0x44
 800c91c:	fb02 0101 	mla	r1, r2, r1, r0
 800c920:	68c3      	ldr	r3, [r0, #12]
 800c922:	b510      	push	{r4, lr}
 800c924:	f8d1 2534 	ldr.w	r2, [r1, #1332]	; 0x534
 800c928:	f8d1 451c 	ldr.w	r4, [r1, #1308]	; 0x51c
 800c92c:	f8d1 0538 	ldr.w	r0, [r1, #1336]	; 0x538
 800c930:	1a9a      	subs	r2, r3, r2
 800c932:	b184      	cbz	r4, 800c956 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 800c934:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
 800c938:	1a5b      	subs	r3, r3, r1
 800c93a:	b128      	cbz	r0, 800c948 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 800c93c:	f242 700f 	movw	r0, #9999	; 0x270f
 800c940:	4283      	cmp	r3, r0
 800c942:	d90d      	bls.n	800c960 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 800c944:	4282      	cmp	r2, r0
 800c946:	e002      	b.n	800c94e <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 800c948:	f242 7010 	movw	r0, #10000	; 0x2710
 800c94c:	4283      	cmp	r3, r0
 800c94e:	bf94      	ite	ls
 800c950:	2000      	movls	r0, #0
 800c952:	2001      	movhi	r0, #1
 800c954:	bd10      	pop	{r4, pc}
 800c956:	2800      	cmp	r0, #0
 800c958:	d0fc      	beq.n	800c954 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 800c95a:	f242 7010 	movw	r0, #10000	; 0x2710
 800c95e:	e7f1      	b.n	800c944 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 800c960:	2000      	movs	r0, #0
 800c962:	e7f7      	b.n	800c954 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

0800c964 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 800c964:	684a      	ldr	r2, [r1, #4]
 800c966:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800c968:	b510      	push	{r4, lr}
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d10d      	bne.n	800c98a <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 800c96e:	f100 0391 	add.w	r3, r0, #145	; 0x91
 800c972:	3107      	adds	r1, #7
 800c974:	30a1      	adds	r0, #161	; 0xa1
 800c976:	4283      	cmp	r3, r0
 800c978:	d101      	bne.n	800c97e <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x1a>
 800c97a:	2001      	movs	r0, #1
 800c97c:	bd10      	pop	{r4, pc}
 800c97e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c982:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800c986:	4294      	cmp	r4, r2
 800c988:	d0f5      	beq.n	800c976 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 800c98a:	2000      	movs	r0, #0
 800c98c:	e7f6      	b.n	800c97c <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x18>
	...

0800c990 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800c990:	2301      	movs	r3, #1
 800c992:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c996:	4604      	mov	r4, r0
 800c998:	4690      	mov	r8, r2
 800c99a:	460f      	mov	r7, r1
 800c99c:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800c9a0:	2900      	cmp	r1, #0
 800c9a2:	d045      	beq.n	800ca30 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xa0>
 800c9a4:	2a00      	cmp	r2, #0
 800c9a6:	d043      	beq.n	800ca30 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xa0>
 800c9a8:	f890 6556 	ldrb.w	r6, [r0, #1366]	; 0x556
 800c9ac:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
 800c9b0:	f880 350c 	strb.w	r3, [r0, #1292]	; 0x50c
 800c9b4:	b1b6      	cbz	r6, 800c9e4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x54>
 800c9b6:	2500      	movs	r5, #0
 800c9b8:	2110      	movs	r1, #16
 800c9ba:	f8c0 551c 	str.w	r5, [r0, #1308]	; 0x51c
 800c9be:	f500 60a4 	add.w	r0, r0, #1312	; 0x520
 800c9c2:	f7ff fdd3 	bl	800c56c <memset.constprop.0.isra.0>
 800c9c6:	2110      	movs	r1, #16
 800c9c8:	f204 503c 	addw	r0, r4, #1340	; 0x53c
 800c9cc:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
 800c9d0:	f7ff fdcc 	bl	800c56c <memset.constprop.0.isra.0>
 800c9d4:	f7fe f9f2 	bl	800adbc <lightset::Data::Get()>
 800c9d8:	f8c0 5600 	str.w	r5, [r0, #1536]	; 0x600
 800c9dc:	f8a4 5554 	strh.w	r5, [r4, #1364]	; 0x554
 800c9e0:	f884 5556 	strb.w	r5, [r4, #1366]	; 0x556
 800c9e4:	f894 359a 	ldrb.w	r3, [r4, #1434]	; 0x59a
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d05b      	beq.n	800caa4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x114>
 800c9ec:	2500      	movs	r5, #0
 800c9ee:	2110      	movs	r1, #16
 800c9f0:	f204 5064 	addw	r0, r4, #1380	; 0x564
 800c9f4:	f8c4 5560 	str.w	r5, [r4, #1376]	; 0x560
 800c9f8:	f7ff fdb8 	bl	800c56c <memset.constprop.0.isra.0>
 800c9fc:	2110      	movs	r1, #16
 800c9fe:	f504 60b0 	add.w	r0, r4, #1408	; 0x580
 800ca02:	f8c4 557c 	str.w	r5, [r4, #1404]	; 0x57c
 800ca06:	f7ff fdb1 	bl	800c56c <memset.constprop.0.isra.0>
 800ca0a:	f7fe f9d7 	bl	800adbc <lightset::Data::Get()>
 800ca0e:	f8c0 5c04 	str.w	r5, [r0, #3076]	; 0xc04
 800ca12:	f8a4 5598 	strh.w	r5, [r4, #1432]	; 0x598
 800ca16:	f884 559a 	strb.w	r5, [r4, #1434]	; 0x59a
 800ca1a:	f8d4 1510 	ldr.w	r1, [r4, #1296]	; 0x510
 800ca1e:	2901      	cmp	r1, #1
 800ca20:	d053      	beq.n	800caca <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x13a>
 800ca22:	2902      	cmp	r1, #2
 800ca24:	d140      	bne.n	800caa8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x118>
 800ca26:	6860      	ldr	r0, [r4, #4]
 800ca28:	6803      	ldr	r3, [r0, #0]
 800ca2a:	699b      	ldr	r3, [r3, #24]
 800ca2c:	4798      	blx	r3
 800ca2e:	e03b      	b.n	800caa8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x118>
 800ca30:	f04f 0b00 	mov.w	fp, #0
 800ca34:	465e      	mov	r6, fp
 800ca36:	46d9      	mov	r9, fp
 800ca38:	f204 553c 	addw	r5, r4, #1340	; 0x53c
 800ca3c:	f895 a01a 	ldrb.w	sl, [r5, #26]
 800ca40:	f1ba 0f00 	cmp.w	sl, #0
 800ca44:	d02a      	beq.n	800ca9c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x10c>
 800ca46:	b15f      	cbz	r7, 800ca60 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd0>
 800ca48:	f855 2c20 	ldr.w	r2, [r5, #-32]
 800ca4c:	b142      	cbz	r2, 800ca60 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd0>
 800ca4e:	2110      	movs	r1, #16
 800ca50:	f845 9c20 	str.w	r9, [r5, #-32]
 800ca54:	f1a5 001c 	sub.w	r0, r5, #28
 800ca58:	f7ff fd88 	bl	800c56c <memset.constprop.0.isra.0>
 800ca5c:	f885 9019 	strb.w	r9, [r5, #25]
 800ca60:	f1b8 0f00 	cmp.w	r8, #0
 800ca64:	d00a      	beq.n	800ca7c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xec>
 800ca66:	f855 2c04 	ldr.w	r2, [r5, #-4]
 800ca6a:	b13a      	cbz	r2, 800ca7c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xec>
 800ca6c:	2110      	movs	r1, #16
 800ca6e:	4628      	mov	r0, r5
 800ca70:	f845 9c04 	str.w	r9, [r5, #-4]
 800ca74:	f7ff fd7a 	bl	800c56c <memset.constprop.0.isra.0>
 800ca78:	f885 9019 	strb.w	r9, [r5, #25]
 800ca7c:	f894 24f5 	ldrb.w	r2, [r4, #1269]	; 0x4f5
 800ca80:	b962      	cbnz	r2, 800ca9c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x10c>
 800ca82:	9201      	str	r2, [sp, #4]
 800ca84:	f7fe f99a 	bl	800adbc <lightset::Data::Get()>
 800ca88:	f240 6304 	movw	r3, #1540	; 0x604
 800ca8c:	4656      	mov	r6, sl
 800ca8e:	fb03 000b 	mla	r0, r3, fp, r0
 800ca92:	9a01      	ldr	r2, [sp, #4]
 800ca94:	f8c0 2600 	str.w	r2, [r0, #1536]	; 0x600
 800ca98:	762a      	strb	r2, [r5, #24]
 800ca9a:	76aa      	strb	r2, [r5, #26]
 800ca9c:	3544      	adds	r5, #68	; 0x44
 800ca9e:	f1bb 0f00 	cmp.w	fp, #0
 800caa2:	d00f      	beq.n	800cac4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x134>
 800caa4:	2e00      	cmp	r6, #0
 800caa6:	d1b8      	bne.n	800ca1a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x8a>
 800caa8:	4b0a      	ldr	r3, [pc, #40]	; (800cad4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x144>)
 800caaa:	2102      	movs	r1, #2
 800caac:	6818      	ldr	r0, [r3, #0]
 800caae:	f006 fdc3 	bl	8013638 <LedBlink::SetMode(ledblink::Mode)>
 800cab2:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800cab6:	f023 0302 	bic.w	r3, r3, #2
 800caba:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800cabe:	b003      	add	sp, #12
 800cac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac4:	f04f 0b01 	mov.w	fp, #1
 800cac8:	e7b8      	b.n	800ca3c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xac>
 800caca:	6860      	ldr	r0, [r4, #4]
 800cacc:	6803      	ldr	r3, [r0, #0]
 800cace:	695b      	ldr	r3, [r3, #20]
 800cad0:	4798      	blx	r3
 800cad2:	e7e9      	b.n	800caa8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x118>
 800cad4:	2000ac60 	andcs	sl, r0, r0, ror #24

0800cad8 <E131Bridge::HandleDmx()>:
 800cad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae0:	4604      	mov	r4, r0
 800cae2:	2600      	movs	r6, #0
 800cae4:	f8b0 70f7 	ldrh.w	r7, [r0, #247]	; 0xf7
 800cae8:	b085      	sub	sp, #20
 800caea:	ba7f      	rev16	r7, r7
 800caec:	b2bf      	uxth	r7, r7
 800caee:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 800caf2:	3f01      	subs	r7, #1
 800caf4:	f500 65a4 	add.w	r5, r0, #1312	; 0x520
 800caf8:	9301      	str	r3, [sp, #4]
 800cafa:	f815 3c0a 	ldrb.w	r3, [r5, #-10]
 800cafe:	b353      	cbz	r3, 800cb56 <E131Bridge::HandleDmx()+0x7e>
 800cb00:	f835 3c0c 	ldrh.w	r3, [r5, #-12]
 800cb04:	f8b4 20ed 	ldrh.w	r2, [r4, #237]	; 0xed
 800cb08:	ba5b      	rev16	r3, r3
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d122      	bne.n	800cb56 <E131Bridge::HandleDmx()+0x7e>
 800cb10:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800cb14:	f1a5 0108 	sub.w	r1, r5, #8
 800cb18:	4620      	mov	r0, r4
 800cb1a:	9302      	str	r3, [sp, #8]
 800cb1c:	f7ff ff22 	bl	800c964 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800cb20:	f105 0114 	add.w	r1, r5, #20
 800cb24:	4682      	mov	sl, r0
 800cb26:	4620      	mov	r0, r4
 800cb28:	f7ff ff1c 	bl	800c964 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800cb2c:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800cb30:	4680      	mov	r8, r0
 800cb32:	f1ba 0f00 	cmp.w	sl, #0
 800cb36:	d018      	beq.n	800cb6a <E131Bridge::HandleDmx()+0x92>
 800cb38:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cb3c:	7c2a      	ldrb	r2, [r5, #16]
 800cb3e:	742b      	strb	r3, [r5, #16]
 800cb40:	3313      	adds	r3, #19
 800cb42:	1a9b      	subs	r3, r3, r2
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	2b13      	cmp	r3, #19
 800cb48:	d905      	bls.n	800cb56 <E131Bridge::HandleDmx()+0x7e>
 800cb4a:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800cb4e:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800cb52:	2a00      	cmp	r2, #0
 800cb54:	da12      	bge.n	800cb7c <E131Bridge::HandleDmx()+0xa4>
 800cb56:	9b01      	ldr	r3, [sp, #4]
 800cb58:	3544      	adds	r5, #68	; 0x44
 800cb5a:	f203 6304 	addw	r3, r3, #1540	; 0x604
 800cb5e:	9301      	str	r3, [sp, #4]
 800cb60:	2e00      	cmp	r6, #0
 800cb62:	f040 8134 	bne.w	800cdce <E131Bridge::HandleDmx()+0x2f6>
 800cb66:	2601      	movs	r6, #1
 800cb68:	e7c7      	b.n	800cafa <E131Bridge::HandleDmx()+0x22>
 800cb6a:	2800      	cmp	r0, #0
 800cb6c:	d0ed      	beq.n	800cb4a <E131Bridge::HandleDmx()+0x72>
 800cb6e:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cb72:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800cb76:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800cb7a:	e7e1      	b.n	800cb40 <E131Bridge::HandleDmx()+0x68>
 800cb7c:	065a      	lsls	r2, r3, #25
 800cb7e:	d50b      	bpl.n	800cb98 <E131Bridge::HandleDmx()+0xc0>
 800cb80:	f1ba 0f00 	cmp.w	sl, #0
 800cb84:	d102      	bne.n	800cb8c <E131Bridge::HandleDmx()+0xb4>
 800cb86:	f1b8 0f00 	cmp.w	r8, #0
 800cb8a:	d0e4      	beq.n	800cb56 <E131Bridge::HandleDmx()+0x7e>
 800cb8c:	4642      	mov	r2, r8
 800cb8e:	4651      	mov	r1, sl
 800cb90:	4620      	mov	r0, r4
 800cb92:	f7ff fefd 	bl	800c990 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800cb96:	e7de      	b.n	800cb56 <E131Bridge::HandleDmx()+0x7e>
 800cb98:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800cb9c:	b133      	cbz	r3, 800cbac <E131Bridge::HandleDmx()+0xd4>
 800cb9e:	f894 34f9 	ldrb.w	r3, [r4, #1273]	; 0x4f9
 800cba2:	b91b      	cbnz	r3, 800cbac <E131Bridge::HandleDmx()+0xd4>
 800cba4:	4631      	mov	r1, r6
 800cba6:	4620      	mov	r0, r4
 800cba8:	f7ff fe7c 	bl	800c8a4 <E131Bridge::CheckMergeTimeouts(unsigned int)>
 800cbac:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 800cbb0:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d259      	bcs.n	800cc6c <E131Bridge::HandleDmx()+0x194>
 800cbb8:	4631      	mov	r1, r6
 800cbba:	4620      	mov	r0, r4
 800cbbc:	9303      	str	r3, [sp, #12]
 800cbbe:	f7ff feac 	bl	800c91a <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	d0c7      	beq.n	800cb56 <E131Bridge::HandleDmx()+0x7e>
 800cbc6:	9b03      	ldr	r3, [sp, #12]
 800cbc8:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800cbcc:	9b02      	ldr	r3, [sp, #8]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d154      	bne.n	800cc7c <E131Bridge::HandleDmx()+0x1a4>
 800cbd2:	f1bb 0f00 	cmp.w	fp, #0
 800cbd6:	d15c      	bne.n	800cc92 <E131Bridge::HandleDmx()+0x1ba>
 800cbd8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800cbda:	2210      	movs	r2, #16
 800cbdc:	f845 3c04 	str.w	r3, [r5, #-4]
 800cbe0:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	742b      	strb	r3, [r5, #16]
 800cbe8:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800cbec:	f7ff fcc6 	bl	800c57c <memcpy.isra.0>
 800cbf0:	68e3      	ldr	r3, [r4, #12]
 800cbf2:	463a      	mov	r2, r7
 800cbf4:	4649      	mov	r1, r9
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	f845 3c08 	str.w	r3, [r5, #-8]
 800cbfc:	f7fe f8ea 	bl	800add4 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800cc00:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800cc04:	069b      	lsls	r3, r3, #26
 800cc06:	f100 80aa 	bmi.w	800cd5e <E131Bridge::HandleDmx()+0x286>
 800cc0a:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 800cc0e:	b29a      	uxth	r2, r3
 800cc10:	2a00      	cmp	r2, #0
 800cc12:	f000 80a8 	beq.w	800cd66 <E131Bridge::HandleDmx()+0x28e>
 800cc16:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 800cc1a:	2a00      	cmp	r2, #0
 800cc1c:	f040 80a3 	bne.w	800cd66 <E131Bridge::HandleDmx()+0x28e>
 800cc20:	ba5b      	rev16	r3, r3
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	f1ba 0f00 	cmp.w	sl, #0
 800cc28:	f040 8096 	bne.w	800cd58 <E131Bridge::HandleDmx()+0x280>
 800cc2c:	f1b8 0f00 	cmp.w	r8, #0
 800cc30:	f040 8092 	bne.w	800cd58 <E131Bridge::HandleDmx()+0x280>
 800cc34:	69aa      	ldr	r2, [r5, #24]
 800cc36:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800cc3a:	3a00      	subs	r2, #0
 800cc3c:	bf18      	it	ne
 800cc3e:	2201      	movne	r2, #1
 800cc40:	3900      	subs	r1, #0
 800cc42:	bf18      	it	ne
 800cc44:	2101      	movne	r1, #1
 800cc46:	4620      	mov	r0, r4
 800cc48:	f7ff fd68 	bl	800c71c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800cc4c:	f240 1301 	movw	r3, #257	; 0x101
 800cc50:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800cc54:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	f040 8089 	bne.w	800cd70 <E131Bridge::HandleDmx()+0x298>
 800cc5e:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800cc62:	f043 0302 	orr.w	r3, r3, #2
 800cc66:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800cc6a:	e774      	b.n	800cb56 <E131Bridge::HandleDmx()+0x7e>
 800cc6c:	d9ae      	bls.n	800cbcc <E131Bridge::HandleDmx()+0xf4>
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f845 2c04 	str.w	r2, [r5, #-4]
 800cc74:	61aa      	str	r2, [r5, #24]
 800cc76:	f884 24f5 	strb.w	r2, [r4, #1269]	; 0x4f5
 800cc7a:	e7a5      	b.n	800cbc8 <E131Bridge::HandleDmx()+0xf0>
 800cc7c:	f1ba 0f00 	cmp.w	sl, #0
 800cc80:	f000 809a 	beq.w	800cdb8 <E131Bridge::HandleDmx()+0x2e0>
 800cc84:	f1bb 0f00 	cmp.w	fp, #0
 800cc88:	d159      	bne.n	800cd3e <E131Bridge::HandleDmx()+0x266>
 800cc8a:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cc8e:	742b      	strb	r3, [r5, #16]
 800cc90:	e7ae      	b.n	800cbf0 <E131Bridge::HandleDmx()+0x118>
 800cc92:	f1b8 0f00 	cmp.w	r8, #0
 800cc96:	d038      	beq.n	800cd0a <E131Bridge::HandleDmx()+0x232>
 800cc98:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cc9c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800cca0:	68e3      	ldr	r3, [r4, #12]
 800cca2:	616b      	str	r3, [r5, #20]
 800cca4:	f7fe f88a 	bl	800adbc <lightset::Data::Get()>
 800cca8:	4683      	mov	fp, r0
 800ccaa:	9b01      	ldr	r3, [sp, #4]
 800ccac:	463a      	mov	r2, r7
 800ccae:	f5a3 7000 	sub.w	r0, r3, #512	; 0x200
 800ccb2:	4649      	mov	r1, r9
 800ccb4:	4458      	add	r0, fp
 800ccb6:	f7ff fc61 	bl	800c57c <memcpy.isra.0>
 800ccba:	f240 6304 	movw	r3, #1540	; 0x604
 800ccbe:	fb03 b306 	mla	r3, r3, r6, fp
 800ccc2:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800ccc6:	9b01      	ldr	r3, [sp, #4]
 800ccc8:	463a      	mov	r2, r7
 800ccca:	4649      	mov	r1, r9
 800cccc:	eb0b 0003 	add.w	r0, fp, r3
 800ccd0:	f7ff fc54 	bl	800c57c <memcpy.isra.0>
 800ccd4:	e794      	b.n	800cc00 <E131Bridge::HandleDmx()+0x128>
 800ccd6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ccd8:	2210      	movs	r2, #16
 800ccda:	61ab      	str	r3, [r5, #24]
 800ccdc:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cce0:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800cce4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800cce8:	f105 001c 	add.w	r0, r5, #28
 800ccec:	f7ff fc46 	bl	800c57c <memcpy.isra.0>
 800ccf0:	68e3      	ldr	r3, [r4, #12]
 800ccf2:	4631      	mov	r1, r6
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	616b      	str	r3, [r5, #20]
 800ccf8:	f7ff fdc5 	bl	800c886 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800ccfc:	463a      	mov	r2, r7
 800ccfe:	4649      	mov	r1, r9
 800cd00:	4630      	mov	r0, r6
 800cd02:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800cd04:	f7fe f8ac 	bl	800ae60 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800cd08:	e77a      	b.n	800cc00 <E131Bridge::HandleDmx()+0x128>
 800cd0a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800cd0c:	2210      	movs	r2, #16
 800cd0e:	f845 3c04 	str.w	r3, [r5, #-4]
 800cd12:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cd16:	4628      	mov	r0, r5
 800cd18:	742b      	strb	r3, [r5, #16]
 800cd1a:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800cd1e:	f7ff fc2d 	bl	800c57c <memcpy.isra.0>
 800cd22:	68e3      	ldr	r3, [r4, #12]
 800cd24:	4631      	mov	r1, r6
 800cd26:	4620      	mov	r0, r4
 800cd28:	f845 3c08 	str.w	r3, [r5, #-8]
 800cd2c:	f7ff fdab 	bl	800c886 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800cd30:	463a      	mov	r2, r7
 800cd32:	4649      	mov	r1, r9
 800cd34:	4630      	mov	r0, r6
 800cd36:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800cd38:	f7fe f869 	bl	800ae0e <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800cd3c:	e760      	b.n	800cc00 <E131Bridge::HandleDmx()+0x128>
 800cd3e:	f1b8 0f00 	cmp.w	r8, #0
 800cd42:	d103      	bne.n	800cd4c <E131Bridge::HandleDmx()+0x274>
 800cd44:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cd48:	742b      	strb	r3, [r5, #16]
 800cd4a:	e7ea      	b.n	800cd22 <E131Bridge::HandleDmx()+0x24a>
 800cd4c:	4821      	ldr	r0, [pc, #132]	; (800cdd4 <E131Bridge::HandleDmx()+0x2fc>)
 800cd4e:	b005      	add	sp, #20
 800cd50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd54:	f007 b946 	b.w	8013fe4 <printf>
 800cd58:	4642      	mov	r2, r8
 800cd5a:	4651      	mov	r1, sl
 800cd5c:	e773      	b.n	800cc46 <E131Bridge::HandleDmx()+0x16e>
 800cd5e:	f04f 0300 	mov.w	r3, #0
 800cd62:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 800cd66:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	f47f af72 	bne.w	800cc54 <E131Bridge::HandleDmx()+0x17c>
 800cd70:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800cd74:	f7fe f822 	bl	800adbc <lightset::Data::Get()>
 800cd78:	f240 6304 	movw	r3, #1540	; 0x604
 800cd7c:	f8d8 2000 	ldr.w	r2, [r8]
 800cd80:	fb03 0306 	mla	r3, r3, r6, r0
 800cd84:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800cd88:	9a01      	ldr	r2, [sp, #4]
 800cd8a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
 800cd8e:	1882      	adds	r2, r0, r2
 800cd90:	4631      	mov	r1, r6
 800cd92:	4640      	mov	r0, r8
 800cd94:	47d0      	blx	sl
 800cd96:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f47f af5f 	bne.w	800cc5e <E131Bridge::HandleDmx()+0x186>
 800cda0:	6860      	ldr	r0, [r4, #4]
 800cda2:	4631      	mov	r1, r6
 800cda4:	6803      	ldr	r3, [r0, #0]
 800cda6:	689b      	ldr	r3, [r3, #8]
 800cda8:	4798      	blx	r3
 800cdaa:	f04f 0301 	mov.w	r3, #1
 800cdae:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 800cdb2:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 800cdb6:	e752      	b.n	800cc5e <E131Bridge::HandleDmx()+0x186>
 800cdb8:	f1bb 0f00 	cmp.w	fp, #0
 800cdbc:	d08b      	beq.n	800ccd6 <E131Bridge::HandleDmx()+0x1fe>
 800cdbe:	f1b8 0f00 	cmp.w	r8, #0
 800cdc2:	d0c3      	beq.n	800cd4c <E131Bridge::HandleDmx()+0x274>
 800cdc4:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800cdc8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800cdcc:	e790      	b.n	800ccf0 <E131Bridge::HandleDmx()+0x218>
 800cdce:	b005      	add	sp, #20
 800cdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdd4:	080179f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, fp, ip, sp, lr}

0800cdd8 <E131Bridge::IsValidRoot()>:
 800cdd8:	b530      	push	{r4, r5, lr}
 800cdda:	4a0d      	ldr	r2, [pc, #52]	; (800ce10 <E131Bridge::IsValidRoot()+0x38>)
 800cddc:	f100 037f 	add.w	r3, r0, #127	; 0x7f
 800cde0:	f100 018b 	add.w	r1, r0, #139	; 0x8b
 800cde4:	4299      	cmp	r1, r3
 800cde6:	d109      	bne.n	800cdfc <E131Bridge::IsValidRoot()+0x24>
 800cde8:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 800cdec:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800cdf0:	d00c      	beq.n	800ce0c <E131Bridge::IsValidRoot()+0x34>
 800cdf2:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800cdf6:	4258      	negs	r0, r3
 800cdf8:	4158      	adcs	r0, r3
 800cdfa:	bd30      	pop	{r4, r5, pc}
 800cdfc:	f812 4b01 	ldrb.w	r4, [r2], #1
 800ce00:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800ce04:	42a5      	cmp	r5, r4
 800ce06:	d0ed      	beq.n	800cde4 <E131Bridge::IsValidRoot()+0xc>
 800ce08:	2000      	movs	r0, #0
 800ce0a:	e7f6      	b.n	800cdfa <E131Bridge::IsValidRoot()+0x22>
 800ce0c:	2001      	movs	r0, #1
 800ce0e:	e7f4      	b.n	800cdfa <E131Bridge::IsValidRoot()+0x22>
 800ce10:	08017af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, ip, sp, lr}

0800ce14 <E131Bridge::IsValidDataPacket()>:
 800ce14:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800ce18:	2b02      	cmp	r3, #2
 800ce1a:	d10d      	bne.n	800ce38 <E131Bridge::IsValidDataPacket()+0x24>
 800ce1c:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 800ce20:	2ba1      	cmp	r3, #161	; 0xa1
 800ce22:	d109      	bne.n	800ce38 <E131Bridge::IsValidDataPacket()+0x24>
 800ce24:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800ce28:	b933      	cbnz	r3, 800ce38 <E131Bridge::IsValidDataPacket()+0x24>
 800ce2a:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 800ce2e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800ce32:	4258      	negs	r0, r3
 800ce34:	4158      	adcs	r0, r3
 800ce36:	4770      	bx	lr
 800ce38:	2000      	movs	r0, #0
 800ce3a:	4770      	bx	lr

0800ce3c <E131Bridge::Run()>:
 800ce3c:	b530      	push	{r4, r5, lr}
 800ce3e:	4601      	mov	r1, r0
 800ce40:	4604      	mov	r4, r0
 800ce42:	b085      	sub	sp, #20
 800ce44:	f10d 030e 	add.w	r3, sp, #14
 800ce48:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800ce4c:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800ce50:	9300      	str	r3, [sp, #0]
 800ce52:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800ce56:	f003 fc69 	bl	801072c <udp_recv>
 800ce5a:	4b3a      	ldr	r3, [pc, #232]	; (800cf44 <E131Bridge::Run()+0x108>)
 800ce5c:	681d      	ldr	r5, [r3, #0]
 800ce5e:	60e5      	str	r5, [r4, #12]
 800ce60:	2800      	cmp	r0, #0
 800ce62:	d138      	bne.n	800ced6 <E131Bridge::Run()+0x9a>
 800ce64:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800ce68:	b16b      	cbz	r3, 800ce86 <E131Bridge::Run()+0x4a>
 800ce6a:	6923      	ldr	r3, [r4, #16]
 800ce6c:	1aed      	subs	r5, r5, r3
 800ce6e:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800ce72:	429d      	cmp	r5, r3
 800ce74:	d928      	bls.n	800cec8 <E131Bridge::Run()+0x8c>
 800ce76:	6863      	ldr	r3, [r4, #4]
 800ce78:	b9eb      	cbnz	r3, 800ceb6 <E131Bridge::Run()+0x7a>
 800ce7a:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800ce7e:	f023 0302 	bic.w	r3, r3, #2
 800ce82:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800ce86:	6963      	ldr	r3, [r4, #20]
 800ce88:	b12b      	cbz	r3, 800ce96 <E131Bridge::Run()+0x5a>
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f000 f954 	bl	800d138 <E131Bridge::HandleDmxIn()>
 800ce90:	4620      	mov	r0, r4
 800ce92:	f000 f8c7 	bl	800d024 <E131Bridge::SendDiscoveryPacket()>
 800ce96:	7a23      	ldrb	r3, [r4, #8]
 800ce98:	b15b      	cbz	r3, 800ceb2 <E131Bridge::Run()+0x76>
 800ce9a:	4b2b      	ldr	r3, [pc, #172]	; (800cf48 <E131Bridge::Run()+0x10c>)
 800ce9c:	6818      	ldr	r0, [r3, #0]
 800ce9e:	6843      	ldr	r3, [r0, #4]
 800cea0:	2b04      	cmp	r3, #4
 800cea2:	d006      	beq.n	800ceb2 <E131Bridge::Run()+0x76>
 800cea4:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d049      	beq.n	800cf40 <E131Bridge::Run()+0x104>
 800ceac:	2103      	movs	r1, #3
 800ceae:	f006 fbc3 	bl	8013638 <LedBlink::SetMode(ledblink::Mode)>
 800ceb2:	b005      	add	sp, #20
 800ceb4:	bd30      	pop	{r4, r5, pc}
 800ceb6:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d1dd      	bne.n	800ce7a <E131Bridge::Run()+0x3e>
 800cebe:	2201      	movs	r2, #1
 800cec0:	4620      	mov	r0, r4
 800cec2:	4611      	mov	r1, r2
 800cec4:	f7ff fd64 	bl	800c990 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800cec8:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800cecc:	1a9b      	subs	r3, r3, r2
 800cece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ced2:	d3d8      	bcc.n	800ce86 <E131Bridge::Run()+0x4a>
 800ced4:	e7d1      	b.n	800ce7a <E131Bridge::Run()+0x3e>
 800ced6:	4620      	mov	r0, r4
 800ced8:	f7ff ff7e 	bl	800cdd8 <E131Bridge::IsValidRoot()>
 800cedc:	2800      	cmp	r0, #0
 800cede:	d0e8      	beq.n	800ceb2 <E131Bridge::Run()+0x76>
 800cee0:	2300      	movs	r3, #0
 800cee2:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800cee6:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800ceea:	6125      	str	r5, [r4, #16]
 800ceec:	b15b      	cbz	r3, 800cf06 <E131Bridge::Run()+0xca>
 800ceee:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800cef2:	b943      	cbnz	r3, 800cf06 <E131Bridge::Run()+0xca>
 800cef4:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800cef8:	1aad      	subs	r5, r5, r2
 800cefa:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800cefe:	4295      	cmp	r5, r2
 800cf00:	bf88      	it	hi
 800cf02:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800cf06:	6863      	ldr	r3, [r4, #4]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d0bc      	beq.n	800ce86 <E131Bridge::Run()+0x4a>
 800cf0c:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800cf10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cf14:	ba1a      	rev	r2, r3
 800cf16:	d108      	bne.n	800cf2a <E131Bridge::Run()+0xee>
 800cf18:	4620      	mov	r0, r4
 800cf1a:	f7ff ff7b 	bl	800ce14 <E131Bridge::IsValidDataPacket()>
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d0b1      	beq.n	800ce86 <E131Bridge::Run()+0x4a>
 800cf22:	4620      	mov	r0, r4
 800cf24:	f7ff fdd8 	bl	800cad8 <E131Bridge::HandleDmx()>
 800cf28:	e7ad      	b.n	800ce86 <E131Bridge::Run()+0x4a>
 800cf2a:	2a08      	cmp	r2, #8
 800cf2c:	d1ab      	bne.n	800ce86 <E131Bridge::Run()+0x4a>
 800cf2e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800cf32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cf36:	d1a6      	bne.n	800ce86 <E131Bridge::Run()+0x4a>
 800cf38:	4620      	mov	r0, r4
 800cf3a:	f000 f979 	bl	800d230 <E131Bridge::HandleSynchronization()>
 800cf3e:	e7a2      	b.n	800ce86 <E131Bridge::Run()+0x4a>
 800cf40:	2102      	movs	r1, #2
 800cf42:	e7b4      	b.n	800ceae <E131Bridge::Run()+0x72>
 800cf44:	2000ac7c 	andcs	sl, r0, ip, ror ip
 800cf48:	2000ac60 	andcs	sl, r0, r0, ror #24

0800cf4c <E131Bridge::FillDiscoveryPacket()>:
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800cf52:	b510      	push	{r4, lr}
 800cf54:	333c      	adds	r3, #60	; 0x3c
 800cf56:	005b      	lsls	r3, r3, #1
 800cf58:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800cf5c:	69c3      	ldr	r3, [r0, #28]
 800cf5e:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800cf62:	428b      	cmp	r3, r1
 800cf64:	d14a      	bne.n	800cffc <E131Bridge::FillDiscoveryPacket()+0xb0>
 800cf66:	69c3      	ldr	r3, [r0, #28]
 800cf68:	492d      	ldr	r1, [pc, #180]	; (800d020 <E131Bridge::FillDiscoveryPacket()+0xd4>)
 800cf6a:	701a      	strb	r2, [r3, #0]
 800cf6c:	2210      	movs	r2, #16
 800cf6e:	705a      	strb	r2, [r3, #1]
 800cf70:	1cda      	adds	r2, r3, #3
 800cf72:	330f      	adds	r3, #15
 800cf74:	4293      	cmp	r3, r2
 800cf76:	d144      	bne.n	800d002 <E131Bridge::FillDiscoveryPacket()+0xb6>
 800cf78:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800cf7c:	69c3      	ldr	r3, [r0, #28]
 800cf7e:	3234      	adds	r2, #52	; 0x34
 800cf80:	0052      	lsls	r2, r2, #1
 800cf82:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800cf86:	ba52      	rev16	r2, r2
 800cf88:	821a      	strh	r2, [r3, #16]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	749a      	strb	r2, [r3, #18]
 800cf8e:	74da      	strb	r2, [r3, #19]
 800cf90:	751a      	strb	r2, [r3, #20]
 800cf92:	2208      	movs	r2, #8
 800cf94:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800cf98:	f803 2f15 	strb.w	r2, [r3, #21]!
 800cf9c:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800cfa0:	4291      	cmp	r1, r2
 800cfa2:	d133      	bne.n	800d00c <E131Bridge::FillDiscoveryPacket()+0xc0>
 800cfa4:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800cfa8:	69c3      	ldr	r3, [r0, #28]
 800cfaa:	3229      	adds	r2, #41	; 0x29
 800cfac:	0052      	lsls	r2, r2, #1
 800cfae:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800cfb2:	ba52      	rev16	r2, r2
 800cfb4:	84da      	strh	r2, [r3, #38]	; 0x26
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800cfbc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800cfc0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800cfc4:	2202      	movs	r2, #2
 800cfc6:	f803 2f2b 	strb.w	r2, [r3, #43]!
 800cfca:	f100 0274 	add.w	r2, r0, #116	; 0x74
 800cfce:	4291      	cmp	r1, r2
 800cfd0:	d121      	bne.n	800d016 <E131Bridge::FillDiscoveryPacket()+0xca>
 800cfd2:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800cfd6:	69c2      	ldr	r2, [r0, #28]
 800cfd8:	3304      	adds	r3, #4
 800cfda:	005b      	lsls	r3, r3, #1
 800cfdc:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800cfe0:	ba5b      	rev16	r3, r3
 800cfe2:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800cfec:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800cff0:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800cff4:	2301      	movs	r3, #1
 800cff6:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800cffa:	bd10      	pop	{r4, pc}
 800cffc:	f803 2b01 	strb.w	r2, [r3], #1
 800d000:	e7af      	b.n	800cf62 <E131Bridge::FillDiscoveryPacket()+0x16>
 800d002:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d006:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d00a:	e7b3      	b.n	800cf74 <E131Bridge::FillDiscoveryPacket()+0x28>
 800d00c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d010:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d014:	e7c4      	b.n	800cfa0 <E131Bridge::FillDiscoveryPacket()+0x54>
 800d016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d01a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d01e:	e7d6      	b.n	800cfce <E131Bridge::FillDiscoveryPacket()+0x82>
 800d020:	08017af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, ip, sp, lr}

0800d024 <E131Bridge::SendDiscoveryPacket()>:
 800d024:	f242 710f 	movw	r1, #9999	; 0x270f
 800d028:	b530      	push	{r4, r5, lr}
 800d02a:	68c2      	ldr	r2, [r0, #12]
 800d02c:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800d030:	4604      	mov	r4, r0
 800d032:	1ad3      	subs	r3, r2, r3
 800d034:	428b      	cmp	r3, r1
 800d036:	b085      	sub	sp, #20
 800d038:	d92c      	bls.n	800d094 <E131Bridge::SendDiscoveryPacket()+0x70>
 800d03a:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800d03e:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800d042:	b1eb      	cbz	r3, 800d080 <E131Bridge::SendDiscoveryPacket()+0x5c>
 800d044:	2300      	movs	r3, #0
 800d046:	f10d 020e 	add.w	r2, sp, #14
 800d04a:	4619      	mov	r1, r3
 800d04c:	f7ff fc04 	bl	800c858 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800d050:	4605      	mov	r5, r0
 800d052:	b130      	cbz	r0, 800d062 <E131Bridge::SendDiscoveryPacket()+0x3e>
 800d054:	2501      	movs	r5, #1
 800d056:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d05a:	69e2      	ldr	r2, [r4, #28]
 800d05c:	ba5b      	rev16	r3, r3
 800d05e:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
 800d062:	2300      	movs	r3, #0
 800d064:	2101      	movs	r1, #1
 800d066:	4620      	mov	r0, r4
 800d068:	f10d 020e 	add.w	r2, sp, #14
 800d06c:	f7ff fbf4 	bl	800c858 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800d070:	b130      	cbz	r0, 800d080 <E131Bridge::SendDiscoveryPacket()+0x5c>
 800d072:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d076:	69e2      	ldr	r2, [r4, #28]
 800d078:	ba5b      	rev16	r3, r3
 800d07a:	353c      	adds	r5, #60	; 0x3c
 800d07c:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
 800d080:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800d084:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800d088:	9300      	str	r3, [sp, #0]
 800d08a:	69e1      	ldr	r1, [r4, #28]
 800d08c:	6a23      	ldr	r3, [r4, #32]
 800d08e:	7820      	ldrb	r0, [r4, #0]
 800d090:	f003 fba8 	bl	80107e4 <udp_send>
 800d094:	b005      	add	sp, #20
 800d096:	bd30      	pop	{r4, r5, pc}

0800d098 <memcpy.isra.0>:
 800d098:	3801      	subs	r0, #1
 800d09a:	440a      	add	r2, r1
 800d09c:	4291      	cmp	r1, r2
 800d09e:	d100      	bne.n	800d0a2 <memcpy.isra.0+0xa>
 800d0a0:	4770      	bx	lr
 800d0a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0a6:	f800 3f01 	strb.w	r3, [r0, #1]!
 800d0aa:	e7f7      	b.n	800d09c <memcpy.isra.0+0x4>

0800d0ac <E131Bridge::FillDataPacket()>:
 800d0ac:	b570      	push	{r4, r5, r6, lr}
 800d0ae:	2400      	movs	r4, #0
 800d0b0:	2610      	movs	r6, #16
 800d0b2:	4605      	mov	r5, r0
 800d0b4:	6980      	ldr	r0, [r0, #24]
 800d0b6:	220c      	movs	r2, #12
 800d0b8:	7046      	strb	r6, [r0, #1]
 800d0ba:	7004      	strb	r4, [r0, #0]
 800d0bc:	7084      	strb	r4, [r0, #2]
 800d0be:	70c4      	strb	r4, [r0, #3]
 800d0c0:	491c      	ldr	r1, [pc, #112]	; (800d134 <E131Bridge::FillDataPacket()+0x88>)
 800d0c2:	3004      	adds	r0, #4
 800d0c4:	f7ff ffe8 	bl	800d098 <memcpy.isra.0>
 800d0c8:	2304      	movs	r3, #4
 800d0ca:	4632      	mov	r2, r6
 800d0cc:	2602      	movs	r6, #2
 800d0ce:	69a8      	ldr	r0, [r5, #24]
 800d0d0:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800d0d4:	7543      	strb	r3, [r0, #21]
 800d0d6:	7484      	strb	r4, [r0, #18]
 800d0d8:	74c4      	strb	r4, [r0, #19]
 800d0da:	7504      	strb	r4, [r0, #20]
 800d0dc:	3016      	adds	r0, #22
 800d0de:	f7ff ffdb 	bl	800d098 <memcpy.isra.0>
 800d0e2:	69a8      	ldr	r0, [r5, #24]
 800d0e4:	2240      	movs	r2, #64	; 0x40
 800d0e6:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800d0ea:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800d0ee:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800d0f2:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800d0f6:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800d0fa:	302c      	adds	r0, #44	; 0x2c
 800d0fc:	f7ff ffcc 	bl	800d098 <memcpy.isra.0>
 800d100:	22a1      	movs	r2, #161	; 0xa1
 800d102:	69ab      	ldr	r3, [r5, #24]
 800d104:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800d108:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800d10c:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800d110:	69ab      	ldr	r3, [r5, #24]
 800d112:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800d116:	69ab      	ldr	r3, [r5, #24]
 800d118:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800d11c:	2201      	movs	r2, #1
 800d11e:	69ab      	ldr	r3, [r5, #24]
 800d120:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800d124:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800d128:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800d12c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800d130:	bd70      	pop	{r4, r5, r6, pc}
 800d132:	bf00      	nop
 800d134:	08017af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, ip, sp, lr}

0800d138 <E131Bridge::HandleDmxIn()>:
 800d138:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d13c:	4604      	mov	r4, r0
 800d13e:	4605      	mov	r5, r0
 800d140:	2600      	movs	r6, #0
 800d142:	4f3a      	ldr	r7, [pc, #232]	; (800d22c <E131Bridge::HandleDmxIn()+0xf4>)
 800d144:	f895 359e 	ldrb.w	r3, [r5, #1438]	; 0x59e
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d058      	beq.n	800d1fe <E131Bridge::HandleDmxIn()+0xc6>
 800d14c:	6960      	ldr	r0, [r4, #20]
 800d14e:	4631      	mov	r1, r6
 800d150:	6803      	ldr	r3, [r0, #0]
 800d152:	aa02      	add	r2, sp, #8
 800d154:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800d158:	ab03      	add	r3, sp, #12
 800d15a:	47c0      	blx	r8
 800d15c:	4601      	mov	r1, r0
 800d15e:	2800      	cmp	r0, #0
 800d160:	d054      	beq.n	800d20c <E131Bridge::HandleDmxIn()+0xd4>
 800d162:	9a02      	ldr	r2, [sp, #8]
 800d164:	69a0      	ldr	r0, [r4, #24]
 800d166:	b293      	uxth	r3, r2
 800d168:	f103 0c6d 	add.w	ip, r3, #109	; 0x6d
 800d16c:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800d170:	fa9c fc9c 	rev16.w	ip, ip
 800d174:	f8a0 c010 	strh.w	ip, [r0, #16]
 800d178:	f103 0c57 	add.w	ip, r3, #87	; 0x57
 800d17c:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800d180:	fa9c fc9c 	rev16.w	ip, ip
 800d184:	f8a0 c026 	strh.w	ip, [r0, #38]	; 0x26
 800d188:	f895 c5a5 	ldrb.w	ip, [r5, #1445]	; 0x5a5
 800d18c:	330a      	adds	r3, #10
 800d18e:	f880 c06c 	strb.w	ip, [r0, #108]	; 0x6c
 800d192:	f895 c5a4 	ldrb.w	ip, [r5, #1444]	; 0x5a4
 800d196:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800d19a:	f10c 0001 	add.w	r0, ip, #1
 800d19e:	f885 05a4 	strb.w	r0, [r5, #1444]	; 0x5a4
 800d1a2:	69a0      	ldr	r0, [r4, #24]
 800d1a4:	ba5b      	rev16	r3, r3
 800d1a6:	f880 c06f 	strb.w	ip, [r0, #111]	; 0x6f
 800d1aa:	f8b5 c59c 	ldrh.w	ip, [r5, #1436]	; 0x59c
 800d1ae:	69a0      	ldr	r0, [r4, #24]
 800d1b0:	fa9c fc9c 	rev16.w	ip, ip
 800d1b4:	f8a0 c071 	strh.w	ip, [r0, #113]	; 0x71
 800d1b8:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800d1bc:	307d      	adds	r0, #125	; 0x7d
 800d1be:	f7ff ff6b 	bl	800d098 <memcpy.isra.0>
 800d1c2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800d1c6:	69a1      	ldr	r1, [r4, #24]
 800d1c8:	ba53      	rev16	r3, r2
 800d1ca:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800d1ce:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800d1d2:	327d      	adds	r2, #125	; 0x7d
 800d1d4:	9300      	str	r3, [sp, #0]
 800d1d6:	f8d5 35a0 	ldr.w	r3, [r5, #1440]	; 0x5a0
 800d1da:	b292      	uxth	r2, r2
 800d1dc:	7820      	ldrb	r0, [r4, #0]
 800d1de:	f003 fb01 	bl	80107e4 <udp_send>
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	683a      	ldr	r2, [r7, #0]
 800d1e6:	40b3      	lsls	r3, r6
 800d1e8:	ea33 0102 	bics.w	r1, r3, r2
 800d1ec:	d007      	beq.n	800d1fe <E131Bridge::HandleDmxIn()+0xc6>
 800d1ee:	4313      	orrs	r3, r2
 800d1f0:	603b      	str	r3, [r7, #0]
 800d1f2:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800d1f6:	f043 0301 	orr.w	r3, r3, #1
 800d1fa:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800d1fe:	350c      	adds	r5, #12
 800d200:	b116      	cbz	r6, 800d208 <E131Bridge::HandleDmxIn()+0xd0>
 800d202:	b004      	add	sp, #16
 800d204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d208:	2601      	movs	r6, #1
 800d20a:	e79b      	b.n	800d144 <E131Bridge::HandleDmxIn()+0xc>
 800d20c:	9b03      	ldr	r3, [sp, #12]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d1f5      	bne.n	800d1fe <E131Bridge::HandleDmxIn()+0xc6>
 800d212:	2201      	movs	r2, #1
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	40b2      	lsls	r2, r6
 800d218:	ea23 0302 	bic.w	r3, r3, r2
 800d21c:	603b      	str	r3, [r7, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d1ed      	bne.n	800d1fe <E131Bridge::HandleDmxIn()+0xc6>
 800d222:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800d226:	f023 0301 	bic.w	r3, r3, #1
 800d22a:	e7e6      	b.n	800d1fa <E131Bridge::HandleDmxIn()+0xc2>
 800d22c:	200012ec 	andcs	r1, r0, ip, ror #5

0800d230 <E131Bridge::HandleSynchronization()>:
 800d230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d234:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800d238:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800d23c:	ba5b      	rev16	r3, r3
 800d23e:	b29b      	uxth	r3, r3
 800d240:	429a      	cmp	r2, r3
 800d242:	4604      	mov	r4, r0
 800d244:	d00a      	beq.n	800d25c <E131Bridge::HandleSynchronization()+0x2c>
 800d246:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d006      	beq.n	800d25c <E131Bridge::HandleSynchronization()+0x2c>
 800d24e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d252:	4b22      	ldr	r3, [pc, #136]	; (800d2dc <E131Bridge::HandleSynchronization()+0xac>)
 800d254:	2102      	movs	r1, #2
 800d256:	6818      	ldr	r0, [r3, #0]
 800d258:	f006 b9ee 	b.w	8013638 <LedBlink::SetMode(ledblink::Mode)>
 800d25c:	2500      	movs	r5, #0
 800d25e:	4627      	mov	r7, r4
 800d260:	46a9      	mov	r9, r5
 800d262:	68e3      	ldr	r3, [r4, #12]
 800d264:	4e1e      	ldr	r6, [pc, #120]	; (800d2e0 <E131Bridge::HandleSynchronization()+0xb0>)
 800d266:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800d2e4 <E131Bridge::HandleSynchronization()+0xb4>
 800d26a:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800d26e:	f897 3516 	ldrb.w	r3, [r7, #1302]	; 0x516
 800d272:	b323      	cbz	r3, 800d2be <E131Bridge::HandleSynchronization()+0x8e>
 800d274:	f8d8 3000 	ldr.w	r3, [r8]
 800d278:	6860      	ldr	r0, [r4, #4]
 800d27a:	07da      	lsls	r2, r3, #31
 800d27c:	bf5c      	itt	pl
 800d27e:	2301      	movpl	r3, #1
 800d280:	f8c8 3000 	strpl.w	r3, [r8]
 800d284:	6803      	ldr	r3, [r0, #0]
 800d286:	4629      	mov	r1, r5
 800d288:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800d28c:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800d290:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800d294:	47d0      	blx	sl
 800d296:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 800d29a:	b93b      	cbnz	r3, 800d2ac <E131Bridge::HandleSynchronization()+0x7c>
 800d29c:	6860      	ldr	r0, [r4, #4]
 800d29e:	4629      	mov	r1, r5
 800d2a0:	6803      	ldr	r3, [r0, #0]
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	4798      	blx	r3
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
 800d2ac:	f8d8 3000 	ldr.w	r3, [r8]
 800d2b0:	f8c6 9600 	str.w	r9, [r6, #1536]	; 0x600
 800d2b4:	07db      	lsls	r3, r3, #31
 800d2b6:	bf5c      	itt	pl
 800d2b8:	2301      	movpl	r3, #1
 800d2ba:	f8c8 3000 	strpl.w	r3, [r8]
 800d2be:	3744      	adds	r7, #68	; 0x44
 800d2c0:	f206 6604 	addw	r6, r6, #1540	; 0x604
 800d2c4:	b135      	cbz	r5, 800d2d4 <E131Bridge::HandleSynchronization()+0xa4>
 800d2c6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d2c8:	b130      	cbz	r0, 800d2d8 <E131Bridge::HandleSynchronization()+0xa8>
 800d2ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2ce:	6803      	ldr	r3, [r0, #0]
 800d2d0:	689b      	ldr	r3, [r3, #8]
 800d2d2:	4718      	bx	r3
 800d2d4:	2501      	movs	r5, #1
 800d2d6:	e7ca      	b.n	800d26e <E131Bridge::HandleSynchronization()+0x3e>
 800d2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2dc:	2000ac60 	andcs	sl, r0, r0, ror #24
 800d2e0:	200006cc 	andcs	r0, r0, ip, asr #13
 800d2e4:	200006c8 	andcs	r0, r0, r8, asr #13

0800d2e8 <E131Bridge::Print()>:
 800d2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2ec:	2500      	movs	r5, #0
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	b08c      	sub	sp, #48	; 0x30
 800d2f2:	a902      	add	r1, sp, #8
 800d2f4:	3024      	adds	r0, #36	; 0x24
 800d2f6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800d2fa:	f001 f825 	bl	800e348 <uuid_unparse>
 800d2fe:	482c      	ldr	r0, [pc, #176]	; (800d3b0 <E131Bridge::Print()+0xc8>)
 800d300:	f006 fe70 	bl	8013fe4 <printf>
 800d304:	4b2b      	ldr	r3, [pc, #172]	; (800d3b4 <E131Bridge::Print()+0xcc>)
 800d306:	482c      	ldr	r0, [pc, #176]	; (800d3b8 <E131Bridge::Print()+0xd0>)
 800d308:	7819      	ldrb	r1, [r3, #0]
 800d30a:	785a      	ldrb	r2, [r3, #1]
 800d30c:	f006 fe6a 	bl	8013fe4 <printf>
 800d310:	482a      	ldr	r0, [pc, #168]	; (800d3bc <E131Bridge::Print()+0xd4>)
 800d312:	a902      	add	r1, sp, #8
 800d314:	f006 fe66 	bl	8013fe4 <printf>
 800d318:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800d31c:	b1f3      	cbz	r3, 800d35c <E131Bridge::Print()+0x74>
 800d31e:	4828      	ldr	r0, [pc, #160]	; (800d3c0 <E131Bridge::Print()+0xd8>)
 800d320:	f006 fe60 	bl	8013fe4 <printf>
 800d324:	4e27      	ldr	r6, [pc, #156]	; (800d3c4 <E131Bridge::Print()+0xdc>)
 800d326:	4f28      	ldr	r7, [pc, #160]	; (800d3c8 <E131Bridge::Print()+0xe0>)
 800d328:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800d3cc <E131Bridge::Print()+0xe4>
 800d32c:	2301      	movs	r3, #1
 800d32e:	4629      	mov	r1, r5
 800d330:	4620      	mov	r0, r4
 800d332:	f10d 0206 	add.w	r2, sp, #6
 800d336:	f7ff fa8f 	bl	800c858 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800d33a:	b170      	cbz	r0, 800d35a <E131Bridge::Print()+0x72>
 800d33c:	2344      	movs	r3, #68	; 0x44
 800d33e:	436b      	muls	r3, r5
 800d340:	f504 62aa 	add.w	r2, r4, #1360	; 0x550
 800d344:	58d3      	ldr	r3, [r2, r3]
 800d346:	4629      	mov	r1, r5
 800d348:	2b00      	cmp	r3, #0
 800d34a:	bf0c      	ite	eq
 800d34c:	4633      	moveq	r3, r6
 800d34e:	463b      	movne	r3, r7
 800d350:	4640      	mov	r0, r8
 800d352:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d356:	f006 fe45 	bl	8013fe4 <printf>
 800d35a:	b325      	cbz	r5, 800d3a6 <E131Bridge::Print()+0xbe>
 800d35c:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800d360:	b1c3      	cbz	r3, 800d394 <E131Bridge::Print()+0xac>
 800d362:	481b      	ldr	r0, [pc, #108]	; (800d3d0 <E131Bridge::Print()+0xe8>)
 800d364:	f006 fe3e 	bl	8013fe4 <printf>
 800d368:	2500      	movs	r5, #0
 800d36a:	4e1a      	ldr	r6, [pc, #104]	; (800d3d4 <E131Bridge::Print()+0xec>)
 800d36c:	2300      	movs	r3, #0
 800d36e:	4629      	mov	r1, r5
 800d370:	4620      	mov	r0, r4
 800d372:	f10d 0206 	add.w	r2, sp, #6
 800d376:	f7ff fa6f 	bl	800c858 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800d37a:	b150      	cbz	r0, 800d392 <E131Bridge::Print()+0xaa>
 800d37c:	230c      	movs	r3, #12
 800d37e:	436b      	muls	r3, r5
 800d380:	f204 52a5 	addw	r2, r4, #1445	; 0x5a5
 800d384:	5cd3      	ldrb	r3, [r2, r3]
 800d386:	4629      	mov	r1, r5
 800d388:	4630      	mov	r0, r6
 800d38a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d38e:	f006 fe29 	bl	8013fe4 <printf>
 800d392:	b155      	cbz	r5, 800d3aa <E131Bridge::Print()+0xc2>
 800d394:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800d398:	b113      	cbz	r3, 800d3a0 <E131Bridge::Print()+0xb8>
 800d39a:	480f      	ldr	r0, [pc, #60]	; (800d3d8 <E131Bridge::Print()+0xf0>)
 800d39c:	f006 fe22 	bl	8013fe4 <printf>
 800d3a0:	b00c      	add	sp, #48	; 0x30
 800d3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3a6:	2501      	movs	r5, #1
 800d3a8:	e7c0      	b.n	800d32c <E131Bridge::Print()+0x44>
 800d3aa:	2501      	movs	r5, #1
 800d3ac:	e7de      	b.n	800d36c <E131Bridge::Print()+0x84>
 800d3ae:	bf00      	nop
 800d3b0:	08017a24 	stmdaeq	r1, {r2, r5, r9, fp, ip, sp, lr}
 800d3b4:	08017b05 	stmdaeq	r1, {r0, r2, r8, r9, fp, ip, sp, lr}
 800d3b8:	08017a2c 	stmdaeq	r1, {r2, r3, r5, r9, fp, ip, sp, lr}
 800d3bc:	08017a3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r9, fp, ip, sp, lr}
 800d3c0:	0801780d 	stmdaeq	r1, {r0, r2, r3, fp, ip, sp, lr}
 800d3c4:	080177b1 	stmdaeq	r1, {r0, r4, r5, r7, r8, r9, sl, ip, sp, lr}
 800d3c8:	080177b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, sl, ip, sp, lr}
 800d3cc:	08017a4f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r9, fp, ip, sp, lr}
 800d3d0:	08017831 	stmdaeq	r1, {r0, r4, r5, fp, ip, sp, lr}
 800d3d4:	08017a6e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r9, fp, ip, sp, lr}
 800d3d8:	08017a8d 	stmdaeq	r1, {r0, r2, r3, r7, r9, fp, ip, sp, lr}

0800d3dc <memcmp>:
 800d3dc:	4402      	add	r2, r0
 800d3de:	4290      	cmp	r0, r2
 800d3e0:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800d3e4:	d106      	bne.n	800d3f4 <memcmp+0x18>
 800d3e6:	2000      	movs	r0, #0
 800d3e8:	4770      	bx	lr
 800d3ea:	3001      	adds	r0, #1
 800d3ec:	4290      	cmp	r0, r2
 800d3ee:	d102      	bne.n	800d3f6 <memcmp+0x1a>
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	e006      	b.n	800d402 <memcmp+0x26>
 800d3f4:	b510      	push	{r4, lr}
 800d3f6:	7803      	ldrb	r3, [r0, #0]
 800d3f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d3fc:	42a3      	cmp	r3, r4
 800d3fe:	d0f4      	beq.n	800d3ea <memcmp+0xe>
 800d400:	1b18      	subs	r0, r3, r4
 800d402:	bd10      	pop	{r4, pc}

0800d404 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800d404:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d406:	88c6      	ldrh	r6, [r0, #6]
 800d408:	8885      	ldrh	r5, [r0, #4]
 800d40a:	42ae      	cmp	r6, r5
 800d40c:	d216      	bcs.n	800d43c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800d40e:	4604      	mov	r4, r0
 800d410:	6800      	ldr	r0, [r0, #0]
 800d412:	1bad      	subs	r5, r5, r6
 800d414:	4430      	add	r0, r6
 800d416:	7a26      	ldrb	r6, [r4, #8]
 800d418:	b923      	cbnz	r3, 800d424 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800d41a:	b926      	cbnz	r6, 800d426 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800d41c:	9200      	str	r2, [sp, #0]
 800d41e:	460b      	mov	r3, r1
 800d420:	4a09      	ldr	r2, [pc, #36]	; (800d448 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800d422:	e003      	b.n	800d42c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800d424:	b166      	cbz	r6, 800d440 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800d426:	460b      	mov	r3, r1
 800d428:	9200      	str	r2, [sp, #0]
 800d42a:	4a08      	ldr	r2, [pc, #32]	; (800d44c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800d42c:	4629      	mov	r1, r5
 800d42e:	f006 fe01 	bl	8014034 <snprintf>
 800d432:	4285      	cmp	r5, r0
 800d434:	bfa2      	ittt	ge
 800d436:	88e3      	ldrhge	r3, [r4, #6]
 800d438:	181b      	addge	r3, r3, r0
 800d43a:	80e3      	strhge	r3, [r4, #6]
 800d43c:	b002      	add	sp, #8
 800d43e:	bd70      	pop	{r4, r5, r6, pc}
 800d440:	9200      	str	r2, [sp, #0]
 800d442:	460b      	mov	r3, r1
 800d444:	4a02      	ldr	r2, [pc, #8]	; (800d450 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800d446:	e7f1      	b.n	800d42c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800d448:	08016930 	stmdaeq	r1, {r4, r5, r8, fp, sp, lr}
 800d44c:	08016925 	stmdaeq	r1, {r0, r2, r5, r8, fp, sp, lr}
 800d450:	08016931 	stmdaeq	r1, {r0, r4, r5, r8, fp, sp, lr}

0800d454 <E131Params::E131Params(E131ParamsStore*)>:
 800d454:	b510      	push	{r4, lr}
 800d456:	2213      	movs	r2, #19
 800d458:	4604      	mov	r4, r0
 800d45a:	f840 1b04 	str.w	r1, [r0], #4
 800d45e:	2100      	movs	r1, #0
 800d460:	f006 faa2 	bl	80139a8 <memset>
 800d464:	2164      	movs	r1, #100	; 0x64
 800d466:	2201      	movs	r2, #1
 800d468:	2300      	movs	r3, #0
 800d46a:	7661      	strb	r1, [r4, #25]
 800d46c:	76a1      	strb	r1, [r4, #26]
 800d46e:	2105      	movs	r1, #5
 800d470:	72e2      	strb	r2, [r4, #11]
 800d472:	2202      	movs	r2, #2
 800d474:	7323      	strb	r3, [r4, #12]
 800d476:	73a3      	strb	r3, [r4, #14]
 800d478:	7623      	strb	r3, [r4, #24]
 800d47a:	4b04      	ldr	r3, [pc, #16]	; (800d48c <E131Params::E131Params(E131ParamsStore*)+0x38>)
 800d47c:	75e1      	strb	r1, [r4, #23]
 800d47e:	6819      	ldr	r1, [r3, #0]
 800d480:	7362      	strb	r2, [r4, #13]
 800d482:	b901      	cbnz	r1, 800d486 <E131Params::E131Params(E131ParamsStore*)+0x32>
 800d484:	601a      	str	r2, [r3, #0]
 800d486:	4620      	mov	r0, r4
 800d488:	bd10      	pop	{r4, pc}
 800d48a:	bf00      	nop
 800d48c:	200012f0 	strdcs	r1, [r0], -r0

0800d490 <E131Params::Load(char const*, unsigned int)>:
 800d490:	6803      	ldr	r3, [r0, #0]
 800d492:	b1d3      	cbz	r3, 800d4ca <E131Params::Load(char const*, unsigned int)+0x3a>
 800d494:	2300      	movs	r3, #0
 800d496:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d498:	460d      	mov	r5, r1
 800d49a:	4616      	mov	r6, r2
 800d49c:	4604      	mov	r4, r0
 800d49e:	6043      	str	r3, [r0, #4]
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	490a      	ldr	r1, [pc, #40]	; (800d4cc <E131Params::Load(char const*, unsigned int)+0x3c>)
 800d4a4:	4668      	mov	r0, sp
 800d4a6:	f005 fc7d 	bl	8012da4 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800d4aa:	4632      	mov	r2, r6
 800d4ac:	4629      	mov	r1, r5
 800d4ae:	4668      	mov	r0, sp
 800d4b0:	f005 fc7c 	bl	8012dac <ReadConfigFile::Read(char const*, unsigned int)>
 800d4b4:	4621      	mov	r1, r4
 800d4b6:	f851 0b04 	ldr.w	r0, [r1], #4
 800d4ba:	6803      	ldr	r3, [r0, #0]
 800d4bc:	689b      	ldr	r3, [r3, #8]
 800d4be:	4798      	blx	r3
 800d4c0:	4668      	mov	r0, sp
 800d4c2:	f005 fc72 	bl	8012daa <ReadConfigFile::~ReadConfigFile()>
 800d4c6:	b002      	add	sp, #8
 800d4c8:	bd70      	pop	{r4, r5, r6, pc}
 800d4ca:	4770      	bx	lr
 800d4cc:	0800d769 	stmdaeq	r0, {r0, r3, r5, r6, r8, r9, sl, ip, lr, pc}

0800d4d0 <E131Params::callbackFunction(char const*)>:
 800d4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d4:	460e      	mov	r6, r1
 800d4d6:	2708      	movs	r7, #8
 800d4d8:	b087      	sub	sp, #28
 800d4da:	4604      	mov	r4, r0
 800d4dc:	4998      	ldr	r1, [pc, #608]	; (800d740 <E131Params::callbackFunction(char const*)+0x270>)
 800d4de:	4630      	mov	r0, r6
 800d4e0:	ab01      	add	r3, sp, #4
 800d4e2:	eb0d 0207 	add.w	r2, sp, r7
 800d4e6:	9701      	str	r7, [sp, #4]
 800d4e8:	f005 fc94 	bl	8012e14 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d4ec:	bb68      	cbnz	r0, 800d54a <E131Params::callbackFunction(char const*)+0x7a>
 800d4ee:	2204      	movs	r2, #4
 800d4f0:	4994      	ldr	r1, [pc, #592]	; (800d744 <E131Params::callbackFunction(char const*)+0x274>)
 800d4f2:	eb0d 0007 	add.w	r0, sp, r7
 800d4f6:	f7ff ff71 	bl	800d3dc <memcmp>
 800d4fa:	6865      	ldr	r5, [r4, #4]
 800d4fc:	b1a0      	cbz	r0, 800d528 <E131Params::callbackFunction(char const*)+0x58>
 800d4fe:	2203      	movs	r2, #3
 800d500:	4991      	ldr	r1, [pc, #580]	; (800d748 <E131Params::callbackFunction(char const*)+0x278>)
 800d502:	eb0d 0007 	add.w	r0, sp, r7
 800d506:	f7ff ff69 	bl	800d3dc <memcmp>
 800d50a:	b1b0      	cbz	r0, 800d53a <E131Params::callbackFunction(char const*)+0x6a>
 800d50c:	2202      	movs	r2, #2
 800d50e:	498f      	ldr	r1, [pc, #572]	; (800d74c <E131Params::callbackFunction(char const*)+0x27c>)
 800d510:	eb0d 0007 	add.w	r0, sp, r7
 800d514:	f7ff ff62 	bl	800d3dc <memcmp>
 800d518:	b198      	cbz	r0, 800d542 <E131Params::callbackFunction(char const*)+0x72>
 800d51a:	463a      	mov	r2, r7
 800d51c:	498c      	ldr	r1, [pc, #560]	; (800d750 <E131Params::callbackFunction(char const*)+0x280>)
 800d51e:	eb0d 0007 	add.w	r0, sp, r7
 800d522:	f7ff ff5b 	bl	800d3dc <memcmp>
 800d526:	b170      	cbz	r0, 800d546 <E131Params::callbackFunction(char const*)+0x76>
 800d528:	2300      	movs	r3, #0
 800d52a:	f025 0501 	bic.w	r5, r5, #1
 800d52e:	6065      	str	r5, [r4, #4]
 800d530:	f8a4 3009 	strh.w	r3, [r4, #9]
 800d534:	b007      	add	sp, #28
 800d536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d53a:	2301      	movs	r3, #1
 800d53c:	f045 0501 	orr.w	r5, r5, #1
 800d540:	e7f5      	b.n	800d52e <E131Params::callbackFunction(char const*)+0x5e>
 800d542:	2302      	movs	r3, #2
 800d544:	e7fa      	b.n	800d53c <E131Params::callbackFunction(char const*)+0x6c>
 800d546:	2303      	movs	r3, #3
 800d548:	e7f8      	b.n	800d53c <E131Params::callbackFunction(char const*)+0x6c>
 800d54a:	2500      	movs	r5, #0
 800d54c:	f8df 9204 	ldr.w	r9, [pc, #516]	; 800d754 <E131Params::callbackFunction(char const*)+0x284>
 800d550:	f8df 8204 	ldr.w	r8, [pc, #516]	; 800d758 <E131Params::callbackFunction(char const*)+0x288>
 800d554:	f8df a204 	ldr.w	sl, [pc, #516]	; 800d75c <E131Params::callbackFunction(char const*)+0x28c>
 800d558:	f8df b204 	ldr.w	fp, [pc, #516]	; 800d760 <E131Params::callbackFunction(char const*)+0x290>
 800d55c:	4649      	mov	r1, r9
 800d55e:	4630      	mov	r0, r6
 800d560:	f10d 0202 	add.w	r2, sp, #2
 800d564:	f005 fcb0 	bl	8012ec8 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800d568:	b9e8      	cbnz	r0, 800d5a6 <E131Params::callbackFunction(char const*)+0xd6>
 800d56a:	f64f 16fe 	movw	r6, #63998	; 0xf9fe
 800d56e:	2310      	movs	r3, #16
 800d570:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800d574:	6861      	ldr	r1, [r4, #4]
 800d576:	1e42      	subs	r2, r0, #1
 800d578:	b292      	uxth	r2, r2
 800d57a:	42b2      	cmp	r2, r6
 800d57c:	fa03 f305 	lsl.w	r3, r3, r5
 800d580:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800d584:	d909      	bls.n	800d59a <E131Params::callbackFunction(char const*)+0xca>
 800d586:	3501      	adds	r5, #1
 800d588:	4422      	add	r2, r4
 800d58a:	ea21 0103 	bic.w	r1, r1, r3
 800d58e:	f8a2 500b 	strh.w	r5, [r2, #11]
 800d592:	6061      	str	r1, [r4, #4]
 800d594:	e7ce      	b.n	800d534 <E131Params::callbackFunction(char const*)+0x64>
 800d596:	2501      	movs	r5, #1
 800d598:	e7e0      	b.n	800d55c <E131Params::callbackFunction(char const*)+0x8c>
 800d59a:	4422      	add	r2, r4
 800d59c:	f8a2 000b 	strh.w	r0, [r2, #11]
 800d5a0:	430b      	orrs	r3, r1
 800d5a2:	6063      	str	r3, [r4, #4]
 800d5a4:	e7c6      	b.n	800d534 <E131Params::callbackFunction(char const*)+0x64>
 800d5a6:	2712      	movs	r7, #18
 800d5a8:	2303      	movs	r3, #3
 800d5aa:	436f      	muls	r7, r5
 800d5ac:	9301      	str	r3, [sp, #4]
 800d5ae:	4630      	mov	r0, r6
 800d5b0:	ab01      	add	r3, sp, #4
 800d5b2:	aa02      	add	r2, sp, #8
 800d5b4:	eb0a 0107 	add.w	r1, sl, r7
 800d5b8:	f005 fc2c 	bl	8012e14 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d5bc:	bb00      	cbnz	r0, 800d600 <E131Params::callbackFunction(char const*)+0x130>
 800d5be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5c2:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800d5c6:	40ab      	lsls	r3, r5
 800d5c8:	f041 0120 	orr.w	r1, r1, #32
 800d5cc:	296c      	cmp	r1, #108	; 0x6c
 800d5ce:	6862      	ldr	r2, [r4, #4]
 800d5d0:	4425      	add	r5, r4
 800d5d2:	d10f      	bne.n	800d5f4 <E131Params::callbackFunction(char const*)+0x124>
 800d5d4:	f89d 1009 	ldrb.w	r1, [sp, #9]
 800d5d8:	f041 0120 	orr.w	r1, r1, #32
 800d5dc:	2974      	cmp	r1, #116	; 0x74
 800d5de:	d109      	bne.n	800d5f4 <E131Params::callbackFunction(char const*)+0x124>
 800d5e0:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800d5e4:	f041 0120 	orr.w	r1, r1, #32
 800d5e8:	2970      	cmp	r1, #112	; 0x70
 800d5ea:	d103      	bne.n	800d5f4 <E131Params::callbackFunction(char const*)+0x124>
 800d5ec:	2101      	movs	r1, #1
 800d5ee:	7429      	strb	r1, [r5, #16]
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	e7d6      	b.n	800d5a2 <E131Params::callbackFunction(char const*)+0xd2>
 800d5f4:	2100      	movs	r1, #0
 800d5f6:	ea22 0203 	bic.w	r2, r2, r3
 800d5fa:	7429      	strb	r1, [r5, #16]
 800d5fc:	6062      	str	r2, [r4, #4]
 800d5fe:	e799      	b.n	800d534 <E131Params::callbackFunction(char const*)+0x64>
 800d600:	2307      	movs	r3, #7
 800d602:	4630      	mov	r0, r6
 800d604:	9301      	str	r3, [sp, #4]
 800d606:	aa02      	add	r2, sp, #8
 800d608:	ab01      	add	r3, sp, #4
 800d60a:	eb0b 0107 	add.w	r1, fp, r7
 800d60e:	f005 fc01 	bl	8012e14 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d612:	2800      	cmp	r0, #0
 800d614:	d15e      	bne.n	800d6d4 <E131Params::callbackFunction(char const*)+0x204>
 800d616:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d61a:	f043 0320 	orr.w	r3, r3, #32
 800d61e:	2b69      	cmp	r3, #105	; 0x69
 800d620:	d123      	bne.n	800d66a <E131Params::callbackFunction(char const*)+0x19a>
 800d622:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800d626:	f043 0320 	orr.w	r3, r3, #32
 800d62a:	2b6e      	cmp	r3, #110	; 0x6e
 800d62c:	d146      	bne.n	800d6bc <E131Params::callbackFunction(char const*)+0x1ec>
 800d62e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800d632:	f043 0320 	orr.w	r3, r3, #32
 800d636:	2b70      	cmp	r3, #112	; 0x70
 800d638:	d140      	bne.n	800d6bc <E131Params::callbackFunction(char const*)+0x1ec>
 800d63a:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d63e:	f043 0320 	orr.w	r3, r3, #32
 800d642:	2b75      	cmp	r3, #117	; 0x75
 800d644:	d13a      	bne.n	800d6bc <E131Params::callbackFunction(char const*)+0x1ec>
 800d646:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d64a:	f043 0320 	orr.w	r3, r3, #32
 800d64e:	3b74      	subs	r3, #116	; 0x74
 800d650:	bf18      	it	ne
 800d652:	2301      	movne	r3, #1
 800d654:	2103      	movs	r1, #3
 800d656:	f8b4 2017 	ldrh.w	r2, [r4, #23]
 800d65a:	006d      	lsls	r5, r5, #1
 800d65c:	40a9      	lsls	r1, r5
 800d65e:	ea22 0201 	bic.w	r2, r2, r1
 800d662:	bb6b      	cbnz	r3, 800d6c0 <E131Params::callbackFunction(char const*)+0x1f0>
 800d664:	f8a4 2017 	strh.w	r2, [r4, #23]
 800d668:	e764      	b.n	800d534 <E131Params::callbackFunction(char const*)+0x64>
 800d66a:	2b64      	cmp	r3, #100	; 0x64
 800d66c:	d126      	bne.n	800d6bc <E131Params::callbackFunction(char const*)+0x1ec>
 800d66e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800d672:	f043 0320 	orr.w	r3, r3, #32
 800d676:	2b69      	cmp	r3, #105	; 0x69
 800d678:	d120      	bne.n	800d6bc <E131Params::callbackFunction(char const*)+0x1ec>
 800d67a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800d67e:	f043 0320 	orr.w	r3, r3, #32
 800d682:	2b73      	cmp	r3, #115	; 0x73
 800d684:	d11a      	bne.n	800d6bc <E131Params::callbackFunction(char const*)+0x1ec>
 800d686:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d68a:	f043 0320 	orr.w	r3, r3, #32
 800d68e:	2b61      	cmp	r3, #97	; 0x61
 800d690:	d114      	bne.n	800d6bc <E131Params::callbackFunction(char const*)+0x1ec>
 800d692:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d696:	f043 0320 	orr.w	r3, r3, #32
 800d69a:	2b62      	cmp	r3, #98	; 0x62
 800d69c:	d10e      	bne.n	800d6bc <E131Params::callbackFunction(char const*)+0x1ec>
 800d69e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800d6a2:	f043 0320 	orr.w	r3, r3, #32
 800d6a6:	2b6c      	cmp	r3, #108	; 0x6c
 800d6a8:	d108      	bne.n	800d6bc <E131Params::callbackFunction(char const*)+0x1ec>
 800d6aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800d6ae:	f043 0320 	orr.w	r3, r3, #32
 800d6b2:	2b65      	cmp	r3, #101	; 0x65
 800d6b4:	bf14      	ite	ne
 800d6b6:	2301      	movne	r3, #1
 800d6b8:	2302      	moveq	r3, #2
 800d6ba:	e7cb      	b.n	800d654 <E131Params::callbackFunction(char const*)+0x184>
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e7c9      	b.n	800d654 <E131Params::callbackFunction(char const*)+0x184>
 800d6c0:	2b02      	cmp	r3, #2
 800d6c2:	bf15      	itete	ne
 800d6c4:	2301      	movne	r3, #1
 800d6c6:	40ab      	lsleq	r3, r5
 800d6c8:	fa03 f505 	lslne.w	r5, r3, r5
 800d6cc:	431a      	orreq	r2, r3
 800d6ce:	bf18      	it	ne
 800d6d0:	432a      	orrne	r2, r5
 800d6d2:	e7c7      	b.n	800d664 <E131Params::callbackFunction(char const*)+0x194>
 800d6d4:	4641      	mov	r1, r8
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	f10d 0201 	add.w	r2, sp, #1
 800d6dc:	f005 fc12 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d6e0:	b998      	cbnz	r0, 800d70a <E131Params::callbackFunction(char const*)+0x23a>
 800d6e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d6e6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800d6ea:	40aa      	lsls	r2, r5
 800d6ec:	1e48      	subs	r0, r1, #1
 800d6ee:	b2c0      	uxtb	r0, r0
 800d6f0:	28c7      	cmp	r0, #199	; 0xc7
 800d6f2:	6863      	ldr	r3, [r4, #4]
 800d6f4:	4425      	add	r5, r4
 800d6f6:	d803      	bhi.n	800d700 <E131Params::callbackFunction(char const*)+0x230>
 800d6f8:	2964      	cmp	r1, #100	; 0x64
 800d6fa:	d001      	beq.n	800d700 <E131Params::callbackFunction(char const*)+0x230>
 800d6fc:	7669      	strb	r1, [r5, #25]
 800d6fe:	e777      	b.n	800d5f0 <E131Params::callbackFunction(char const*)+0x120>
 800d700:	2164      	movs	r1, #100	; 0x64
 800d702:	ea23 0302 	bic.w	r3, r3, r2
 800d706:	7669      	strb	r1, [r5, #25]
 800d708:	e74b      	b.n	800d5a2 <E131Params::callbackFunction(char const*)+0xd2>
 800d70a:	f109 0910 	add.w	r9, r9, #16
 800d70e:	f108 0812 	add.w	r8, r8, #18
 800d712:	2d00      	cmp	r5, #0
 800d714:	f43f af3f 	beq.w	800d596 <E131Params::callbackFunction(char const*)+0xc6>
 800d718:	4630      	mov	r0, r6
 800d71a:	4912      	ldr	r1, [pc, #72]	; (800d764 <E131Params::callbackFunction(char const*)+0x294>)
 800d71c:	f10d 0201 	add.w	r2, sp, #1
 800d720:	f005 fbf0 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d724:	2800      	cmp	r0, #0
 800d726:	f47f af05 	bne.w	800d534 <E131Params::callbackFunction(char const*)+0x64>
 800d72a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d72e:	6863      	ldr	r3, [r4, #4]
 800d730:	b112      	cbz	r2, 800d738 <E131Params::callbackFunction(char const*)+0x268>
 800d732:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d736:	e734      	b.n	800d5a2 <E131Params::callbackFunction(char const*)+0xd2>
 800d738:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d73c:	e731      	b.n	800d5a2 <E131Params::callbackFunction(char const*)+0xd2>
 800d73e:	bf00      	nop
 800d740:	080183dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, r9, pc}
 800d744:	08017858 	stmdaeq	r1, {r3, r4, r6, fp, ip, sp, lr}
 800d748:	0801785d 	stmdaeq	r1, {r0, r2, r3, r4, r6, fp, ip, sp, lr}
 800d74c:	08016aba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, fp, sp, lr}
 800d750:	08017861 	stmdaeq	r1, {r0, r5, r6, fp, ip, sp, lr}
 800d754:	0801832c 	stmdaeq	r1, {r2, r3, r5, r8, r9, pc}
 800d758:	08017acc 	stmdaeq	r1, {r2, r3, r6, r7, r9, fp, ip, sp, lr}
 800d75c:	0801836c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, pc}
 800d760:	080183ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, r9, pc}
 800d764:	080183c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, r9, pc}

0800d768 <E131Params::staticCallbackFunction(void*, char const*)>:
 800d768:	f7ff beb2 	b.w	800d4d0 <E131Params::callbackFunction(char const*)>

0800d76c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>:
 800d76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d770:	4604      	mov	r4, r0
 800d772:	4615      	mov	r5, r2
 800d774:	461e      	mov	r6, r3
 800d776:	b087      	sub	sp, #28
 800d778:	3004      	adds	r0, #4
 800d77a:	2900      	cmp	r1, #0
 800d77c:	d05f      	beq.n	800d83e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xd2>
 800d77e:	2217      	movs	r2, #23
 800d780:	f006 f8fb 	bl	801397a <memmove>
 800d784:	4633      	mov	r3, r6
 800d786:	462a      	mov	r2, r5
 800d788:	4990      	ldr	r1, [pc, #576]	; (800d9cc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x260>)
 800d78a:	a803      	add	r0, sp, #12
 800d78c:	f005 fa6a 	bl	8012c64 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800d790:	2500      	movs	r5, #0
 800d792:	4f8f      	ldr	r7, [pc, #572]	; (800d9d0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x264>)
 800d794:	4e8f      	ldr	r6, [pc, #572]	; (800d9d4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x268>)
 800d796:	f8df 8240 	ldr.w	r8, [pc, #576]	; 800d9d8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x26c>
 800d79a:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800d9dc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x270>
 800d79e:	f8d8 2000 	ldr.w	r2, [r8]
 800d7a2:	6863      	ldr	r3, [r4, #4]
 800d7a4:	42aa      	cmp	r2, r5
 800d7a6:	d851      	bhi.n	800d84c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xe0>
 800d7a8:	f8b4 1009 	ldrh.w	r1, [r4, #9]
 800d7ac:	4a8c      	ldr	r2, [pc, #560]	; (800d9e0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800d7ae:	f003 0301 	and.w	r3, r3, #1
 800d7b2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d7b6:	a803      	add	r0, sp, #12
 800d7b8:	498a      	ldr	r1, [pc, #552]	; (800d9e4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800d7ba:	f7ff fe23 	bl	800d404 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800d7be:	498a      	ldr	r1, [pc, #552]	; (800d9e8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800d7c0:	a803      	add	r0, sp, #12
 800d7c2:	f005 fad5 	bl	8012d70 <PropertiesBuilder::AddComment(char const*)>
 800d7c6:	2500      	movs	r5, #0
 800d7c8:	f44f 7b80 	mov.w	fp, #256	; 0x100
 800d7cc:	4e87      	ldr	r6, [pc, #540]	; (800d9ec <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800d7ce:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800d9f0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x284>
 800d7d2:	f8df a220 	ldr.w	sl, [pc, #544]	; 800d9f4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x288>
 800d7d6:	f104 070f 	add.w	r7, r4, #15
 800d7da:	f8d8 3000 	ldr.w	r3, [r8]
 800d7de:	42ab      	cmp	r3, r5
 800d7e0:	d87f      	bhi.n	800d8e2 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x176>
 800d7e2:	4985      	ldr	r1, [pc, #532]	; (800d9f8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800d7e4:	a803      	add	r0, sp, #12
 800d7e6:	f005 fac3 	bl	8012d70 <PropertiesBuilder::AddComment(char const*)>
 800d7ea:	2700      	movs	r7, #0
 800d7ec:	4e83      	ldr	r6, [pc, #524]	; (800d9fc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800d7ee:	f8df a210 	ldr.w	sl, [pc, #528]	; 800da00 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>
 800d7f2:	f8df b210 	ldr.w	fp, [pc, #528]	; 800da04 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>
 800d7f6:	f104 0918 	add.w	r9, r4, #24
 800d7fa:	f8d8 3000 	ldr.w	r3, [r8]
 800d7fe:	42bb      	cmp	r3, r7
 800d800:	f200 8083 	bhi.w	800d90a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x19e>
 800d804:	4980      	ldr	r1, [pc, #512]	; (800da08 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800d806:	a803      	add	r0, sp, #12
 800d808:	f005 fab2 	bl	8012d70 <PropertiesBuilder::AddComment(char const*)>
 800d80c:	6863      	ldr	r3, [r4, #4]
 800d80e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d812:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800d816:	42a2      	cmp	r2, r4
 800d818:	f080 80b8 	bcs.w	800d98c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x220>
 800d81c:	9803      	ldr	r0, [sp, #12]
 800d81e:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 800d822:	4410      	add	r0, r2
 800d824:	eba4 0402 	sub.w	r4, r4, r2
 800d828:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800d82c:	f040 809d 	bne.w	800d96a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1fe>
 800d830:	2a00      	cmp	r2, #0
 800d832:	f040 809b 	bne.w	800d96c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x200>
 800d836:	9200      	str	r2, [sp, #0]
 800d838:	4b74      	ldr	r3, [pc, #464]	; (800da0c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800d83a:	4a72      	ldr	r2, [pc, #456]	; (800da04 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800d83c:	e09c      	b.n	800d978 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20c>
 800d83e:	6823      	ldr	r3, [r4, #0]
 800d840:	4601      	mov	r1, r0
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	4618      	mov	r0, r3
 800d846:	68d2      	ldr	r2, [r2, #12]
 800d848:	4790      	blx	r2
 800d84a:	e79b      	b.n	800d784 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x18>
 800d84c:	f8bd c012 	ldrh.w	ip, [sp, #18]
 800d850:	f8bd b010 	ldrh.w	fp, [sp, #16]
 800d854:	eb04 0245 	add.w	r2, r4, r5, lsl #1
 800d858:	45dc      	cmp	ip, fp
 800d85a:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800d85e:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800d862:	d221      	bcs.n	800d8a8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x13c>
 800d864:	2110      	movs	r1, #16
 800d866:	9803      	ldr	r0, [sp, #12]
 800d868:	40a9      	lsls	r1, r5
 800d86a:	ea31 0303 	bics.w	r3, r1, r3
 800d86e:	4460      	add	r0, ip
 800d870:	ebab 0b0c 	sub.w	fp, fp, ip
 800d874:	f89d c014 	ldrb.w	ip, [sp, #20]
 800d878:	d006      	beq.n	800d888 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x11c>
 800d87a:	f1bc 0f00 	cmp.w	ip, #0
 800d87e:	d106      	bne.n	800d88e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x122>
 800d880:	9200      	str	r2, [sp, #0]
 800d882:	4633      	mov	r3, r6
 800d884:	4a5f      	ldr	r2, [pc, #380]	; (800da04 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800d886:	e005      	b.n	800d894 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x128>
 800d888:	f1bc 0f00 	cmp.w	ip, #0
 800d88c:	d023      	beq.n	800d8d6 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x16a>
 800d88e:	9200      	str	r2, [sp, #0]
 800d890:	4633      	mov	r3, r6
 800d892:	464a      	mov	r2, r9
 800d894:	4659      	mov	r1, fp
 800d896:	f006 fbcd 	bl	8014034 <snprintf>
 800d89a:	4583      	cmp	fp, r0
 800d89c:	bfa2      	ittt	ge
 800d89e:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800d8a2:	18c0      	addge	r0, r0, r3
 800d8a4:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800d8a8:	f8b4 3017 	ldrh.w	r3, [r4, #23]
 800d8ac:	fa23 f30a 	lsr.w	r3, r3, sl
 800d8b0:	f013 0303 	ands.w	r3, r3, #3
 800d8b4:	d013      	beq.n	800d8de <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x172>
 800d8b6:	4a56      	ldr	r2, [pc, #344]	; (800da10 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 800d8b8:	4956      	ldr	r1, [pc, #344]	; (800da14 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a8>)
 800d8ba:	2b02      	cmp	r3, #2
 800d8bc:	bf08      	it	eq
 800d8be:	460a      	moveq	r2, r1
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	4639      	mov	r1, r7
 800d8c4:	bf18      	it	ne
 800d8c6:	2301      	movne	r3, #1
 800d8c8:	a803      	add	r0, sp, #12
 800d8ca:	f7ff fd9b 	bl	800d404 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800d8ce:	3501      	adds	r5, #1
 800d8d0:	3712      	adds	r7, #18
 800d8d2:	3610      	adds	r6, #16
 800d8d4:	e763      	b.n	800d79e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x32>
 800d8d6:	9200      	str	r2, [sp, #0]
 800d8d8:	4633      	mov	r3, r6
 800d8da:	4a49      	ldr	r2, [pc, #292]	; (800da00 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800d8dc:	e7da      	b.n	800d894 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x128>
 800d8de:	4a4e      	ldr	r2, [pc, #312]	; (800da18 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2ac>)
 800d8e0:	e7ee      	b.n	800d8c0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x154>
 800d8e2:	6861      	ldr	r1, [r4, #4]
 800d8e4:	fa0b f305 	lsl.w	r3, fp, r5
 800d8e8:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800d8ec:	438b      	bics	r3, r1
 800d8ee:	bf0c      	ite	eq
 800d8f0:	2301      	moveq	r3, #1
 800d8f2:	2300      	movne	r3, #0
 800d8f4:	4631      	mov	r1, r6
 800d8f6:	2a00      	cmp	r2, #0
 800d8f8:	bf0c      	ite	eq
 800d8fa:	464a      	moveq	r2, r9
 800d8fc:	4652      	movne	r2, sl
 800d8fe:	a803      	add	r0, sp, #12
 800d900:	f7ff fd80 	bl	800d404 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800d904:	3501      	adds	r5, #1
 800d906:	3612      	adds	r6, #18
 800d908:	e767      	b.n	800d7da <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x6e>
 800d90a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800d90e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800d912:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 800d916:	42a9      	cmp	r1, r5
 800d918:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800d91c:	d21e      	bcs.n	800d95c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f0>
 800d91e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d922:	9803      	ldr	r0, [sp, #12]
 800d924:	40ba      	lsls	r2, r7
 800d926:	ea32 0c0c 	bics.w	ip, r2, ip
 800d92a:	4408      	add	r0, r1
 800d92c:	eba5 0501 	sub.w	r5, r5, r1
 800d930:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800d934:	d004      	beq.n	800d940 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d4>
 800d936:	b921      	cbnz	r1, 800d942 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d6>
 800d938:	9300      	str	r3, [sp, #0]
 800d93a:	465a      	mov	r2, fp
 800d93c:	4633      	mov	r3, r6
 800d93e:	e003      	b.n	800d948 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
 800d940:	b179      	cbz	r1, 800d962 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f6>
 800d942:	9300      	str	r3, [sp, #0]
 800d944:	4633      	mov	r3, r6
 800d946:	4a25      	ldr	r2, [pc, #148]	; (800d9dc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800d948:	4629      	mov	r1, r5
 800d94a:	f006 fb73 	bl	8014034 <snprintf>
 800d94e:	4285      	cmp	r5, r0
 800d950:	bfa2      	ittt	ge
 800d952:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800d956:	18c0      	addge	r0, r0, r3
 800d958:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800d95c:	3701      	adds	r7, #1
 800d95e:	3612      	adds	r6, #18
 800d960:	e74b      	b.n	800d7fa <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 800d962:	9300      	str	r3, [sp, #0]
 800d964:	4652      	mov	r2, sl
 800d966:	4633      	mov	r3, r6
 800d968:	e7ee      	b.n	800d948 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
 800d96a:	b34a      	cbz	r2, 800d9c0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x254>
 800d96c:	3b00      	subs	r3, #0
 800d96e:	bf18      	it	ne
 800d970:	2301      	movne	r3, #1
 800d972:	4a1a      	ldr	r2, [pc, #104]	; (800d9dc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800d974:	9300      	str	r3, [sp, #0]
 800d976:	4b25      	ldr	r3, [pc, #148]	; (800da0c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800d978:	4621      	mov	r1, r4
 800d97a:	f006 fb5b 	bl	8014034 <snprintf>
 800d97e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d982:	4284      	cmp	r4, r0
 800d984:	bfa4      	itt	ge
 800d986:	181b      	addge	r3, r3, r0
 800d988:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800d98c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800d990:	b17b      	cbz	r3, 800d9b2 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x246>
 800d992:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d996:	9b03      	ldr	r3, [sp, #12]
 800d998:	4413      	add	r3, r2
 800d99a:	227d      	movs	r2, #125	; 0x7d
 800d99c:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d9a0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d9a4:	9903      	ldr	r1, [sp, #12]
 800d9a6:	54ca      	strb	r2, [r1, r3]
 800d9a8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	f8ad 3012 	strh.w	r3, [sp, #18]
 800d9b2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d9b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d9b8:	601a      	str	r2, [r3, #0]
 800d9ba:	b007      	add	sp, #28
 800d9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	4a0f      	ldr	r2, [pc, #60]	; (800da00 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800d9c4:	9300      	str	r3, [sp, #0]
 800d9c6:	4b11      	ldr	r3, [pc, #68]	; (800da0c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800d9c8:	e7d6      	b.n	800d978 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20c>
 800d9ca:	bf00      	nop
 800d9cc:	08017af0 	stmdaeq	r1, {r4, r5, r6, r7, r9, fp, ip, sp, lr}
 800d9d0:	080183ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, r9, pc}
 800d9d4:	0801832c 	stmdaeq	r1, {r2, r3, r5, r8, r9, pc}
 800d9d8:	200012f0 	strdcs	r1, [r0], -r0
 800d9dc:	08016914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr}
 800d9e0:	08017abc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, fp, ip, sp, lr}
 800d9e4:	080183dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, r9, pc}
 800d9e8:	08017aa7 	stmdaeq	r1, {r0, r1, r2, r5, r7, r9, fp, ip, sp, lr}
 800d9ec:	0801836c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, pc}
 800d9f0:	08017888 	stmdaeq	r1, {r3, r7, fp, ip, sp, lr}
 800d9f4:	08017884 	stmdaeq	r1, {r2, r7, fp, ip, sp, lr}
 800d9f8:	08017ab2 	stmdaeq	r1, {r1, r4, r5, r7, r9, fp, ip, sp, lr}
 800d9fc:	08017acc 	stmdaeq	r1, {r2, r3, r6, r7, r9, fp, ip, sp, lr}
 800da00:	0801691e 	stmdaeq	r1, {r1, r2, r3, r4, r8, fp, sp, lr}
 800da04:	0801691d 	stmdaeq	r1, {r0, r2, r3, r4, r8, fp, sp, lr}
 800da08:	080166dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, sl, sp, lr}
 800da0c:	080183c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, r9, pc}
 800da10:	08017875 	stmdaeq	r1, {r0, r2, r4, r5, r6, fp, ip, sp, lr}
 800da14:	0801787c 	stmdaeq	r1, {r2, r3, r4, r5, r6, fp, ip, sp, lr}
 800da18:	0801786f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, fp, ip, sp, lr}

0800da1c <E131Params::Save(char*, unsigned int, unsigned int&)>:
 800da1c:	b513      	push	{r0, r1, r4, lr}
 800da1e:	6804      	ldr	r4, [r0, #0]
 800da20:	b914      	cbnz	r4, 800da28 <E131Params::Save(char*, unsigned int, unsigned int&)+0xc>
 800da22:	601c      	str	r4, [r3, #0]
 800da24:	b002      	add	sp, #8
 800da26:	bd10      	pop	{r4, pc}
 800da28:	9300      	str	r3, [sp, #0]
 800da2a:	4613      	mov	r3, r2
 800da2c:	460a      	mov	r2, r1
 800da2e:	2100      	movs	r1, #0
 800da30:	f7ff fe9c 	bl	800d76c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>
 800da34:	e7f6      	b.n	800da24 <E131Params::Save(char*, unsigned int, unsigned int&)+0x8>
	...

0800da38 <ArtNetRdmController::GetUidCount(unsigned int)>:
 800da38:	4b02      	ldr	r3, [pc, #8]	; (800da44 <ArtNetRdmController::GetUidCount(unsigned int)+0xc>)
 800da3a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800da3e:	b100      	cbz	r0, 800da42 <ArtNetRdmController::GetUidCount(unsigned int)+0xa>
 800da40:	6800      	ldr	r0, [r0, #0]
 800da42:	4770      	bx	lr
 800da44:	200013f8 	strdcs	r1, [r0], -r8

0800da48 <ArtNetRdmController::Copy(unsigned int, unsigned char*)>:
 800da48:	4b08      	ldr	r3, [pc, #32]	; (800da6c <ArtNetRdmController::Copy(unsigned int, unsigned char*)+0x24>)
 800da4a:	b530      	push	{r4, r5, lr}
 800da4c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800da50:	b130      	cbz	r0, 800da60 <ArtNetRdmController::Copy(unsigned int, unsigned char*)+0x18>
 800da52:	2300      	movs	r3, #0
 800da54:	2406      	movs	r4, #6
 800da56:	6845      	ldr	r5, [r0, #4]
 800da58:	6801      	ldr	r1, [r0, #0]
 800da5a:	4361      	muls	r1, r4
 800da5c:	428b      	cmp	r3, r1
 800da5e:	d300      	bcc.n	800da62 <ArtNetRdmController::Copy(unsigned int, unsigned char*)+0x1a>
 800da60:	bd30      	pop	{r4, r5, pc}
 800da62:	5ce9      	ldrb	r1, [r5, r3]
 800da64:	54d1      	strb	r1, [r2, r3]
 800da66:	3301      	adds	r3, #1
 800da68:	e7f6      	b.n	800da58 <ArtNetRdmController::Copy(unsigned int, unsigned char*)+0x10>
 800da6a:	bf00      	nop
 800da6c:	200013f8 	strdcs	r1, [r0], -r8

0800da70 <ArtNetRdmController::Full(unsigned int)>:
 800da70:	4b02      	ldr	r3, [pc, #8]	; (800da7c <ArtNetRdmController::Full(unsigned int)+0xc>)
 800da72:	307c      	adds	r0, #124	; 0x7c
 800da74:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800da78:	f000 ba68 	b.w	800df4c <RDMDiscovery::Full(unsigned int, RDMTod*)>
 800da7c:	200013f8 	strdcs	r1, [r0], -r8

0800da80 <ArtNetRdmController::~ArtNetRdmController()>:
 800da80:	b570      	push	{r4, r5, r6, lr}
 800da82:	4d10      	ldr	r5, [pc, #64]	; (800dac4 <ArtNetRdmController::~ArtNetRdmController()+0x44>)
 800da84:	4b10      	ldr	r3, [pc, #64]	; (800dac8 <ArtNetRdmController::~ArtNetRdmController()+0x48>)
 800da86:	682e      	ldr	r6, [r5, #0]
 800da88:	4604      	mov	r4, r0
 800da8a:	6003      	str	r3, [r0, #0]
 800da8c:	b146      	cbz	r6, 800daa0 <ArtNetRdmController::~ArtNetRdmController()+0x20>
 800da8e:	2300      	movs	r3, #0
 800da90:	6870      	ldr	r0, [r6, #4]
 800da92:	6033      	str	r3, [r6, #0]
 800da94:	b998      	cbnz	r0, 800dabe <ArtNetRdmController::~ArtNetRdmController()+0x3e>
 800da96:	4630      	mov	r0, r6
 800da98:	f005 feac 	bl	80137f4 <operator delete(void*)>
 800da9c:	2300      	movs	r3, #0
 800da9e:	602b      	str	r3, [r5, #0]
 800daa0:	686e      	ldr	r6, [r5, #4]
 800daa2:	b156      	cbz	r6, 800daba <ArtNetRdmController::~ArtNetRdmController()+0x3a>
 800daa4:	2300      	movs	r3, #0
 800daa6:	6870      	ldr	r0, [r6, #4]
 800daa8:	6033      	str	r3, [r6, #0]
 800daaa:	b108      	cbz	r0, 800dab0 <ArtNetRdmController::~ArtNetRdmController()+0x30>
 800daac:	f005 fea4 	bl	80137f8 <operator delete[](void*)>
 800dab0:	4630      	mov	r0, r6
 800dab2:	f005 fe9f 	bl	80137f4 <operator delete(void*)>
 800dab6:	2300      	movs	r3, #0
 800dab8:	606b      	str	r3, [r5, #4]
 800daba:	4620      	mov	r0, r4
 800dabc:	bd70      	pop	{r4, r5, r6, pc}
 800dabe:	f005 fe9b 	bl	80137f8 <operator delete[](void*)>
 800dac2:	e7e8      	b.n	800da96 <ArtNetRdmController::~ArtNetRdmController()+0x16>
 800dac4:	200013f8 	strdcs	r1, [r0], -r8
 800dac8:	08017b38 	stmdaeq	r1, {r3, r4, r5, r8, r9, fp, ip, sp, lr}

0800dacc <ArtNetRdmController::~ArtNetRdmController()>:
 800dacc:	b510      	push	{r4, lr}
 800dace:	4604      	mov	r4, r0
 800dad0:	f7ff ffd6 	bl	800da80 <ArtNetRdmController::~ArtNetRdmController()>
 800dad4:	4620      	mov	r0, r4
 800dad6:	f005 fe8d 	bl	80137f4 <operator delete(void*)>
 800dada:	4620      	mov	r0, r4
 800dadc:	bd10      	pop	{r4, pc}
	...

0800dae0 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	460d      	mov	r5, r1
 800dae4:	4614      	mov	r4, r2
 800dae6:	b1f2      	cbz	r2, 800db26 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x46>
 800dae8:	f006 fd88 	bl	80145fc <fwdgt_counter_reload>
 800daec:	4628      	mov	r0, r5
 800daee:	f000 fe2f 	bl	800e750 <Rdm::Receive(unsigned int)>
 800daf2:	2800      	cmp	r0, #0
 800daf4:	d1f8      	bne.n	800dae8 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x8>
 800daf6:	4621      	mov	r1, r4
 800daf8:	7863      	ldrb	r3, [r4, #1]
 800dafa:	4a0c      	ldr	r2, [pc, #48]	; (800db2c <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x4c>)
 800dafc:	3b01      	subs	r3, #1
 800dafe:	1cd8      	adds	r0, r3, #3
 800db00:	d10c      	bne.n	800db1c <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x3c>
 800db02:	7862      	ldrb	r2, [r4, #1]
 800db04:	4628      	mov	r0, r5
 800db06:	4909      	ldr	r1, [pc, #36]	; (800db2c <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x4c>)
 800db08:	3202      	adds	r2, #2
 800db0a:	f000 fe31 	bl	800e770 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 800db0e:	4628      	mov	r0, r5
 800db10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db14:	f64e 2160 	movw	r1, #60000	; 0xea60
 800db18:	f000 be22 	b.w	800e760 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800db1c:	f811 0b01 	ldrb.w	r0, [r1], #1
 800db20:	f802 0f01 	strb.w	r0, [r2, #1]!
 800db24:	e7ea      	b.n	800dafc <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x1c>
 800db26:	4610      	mov	r0, r2
 800db28:	bd38      	pop	{r3, r4, r5, pc}
 800db2a:	bf00      	nop
 800db2c:	200012f4 	strdcs	r1, [r0], -r4

0800db30 <ArtNetRdmController::ArtNetRdmController(unsigned int)>:
 800db30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db34:	4605      	mov	r5, r0
 800db36:	2700      	movs	r7, #0
 800db38:	1d06      	adds	r6, r0, #4
 800db3a:	4630      	mov	r0, r6
 800db3c:	460c      	mov	r4, r1
 800db3e:	f000 fa69 	bl	800e014 <RDMDevice::RDMDevice()>
 800db42:	4628      	mov	r0, r5
 800db44:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800dbc0 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x90>
 800db48:	46b8      	mov	r8, r7
 800db4a:	46ca      	mov	sl, r9
 800db4c:	4b1d      	ldr	r3, [pc, #116]	; (800dbc4 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x94>)
 800db4e:	4631      	mov	r1, r6
 800db50:	f840 3b7c 	str.w	r3, [r0], #124
 800db54:	f000 f87b 	bl	800dc4e <RDMDiscovery::RDMDiscovery(unsigned char const*)>
 800db58:	4b1b      	ldr	r3, [pc, #108]	; (800dbc8 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x98>)
 800db5a:	602b      	str	r3, [r5, #0]
 800db5c:	4b1b      	ldr	r3, [pc, #108]	; (800dbcc <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x9c>)
 800db5e:	601c      	str	r4, [r3, #0]
 800db60:	42a7      	cmp	r7, r4
 800db62:	d108      	bne.n	800db76 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x46>
 800db64:	2300      	movs	r3, #0
 800db66:	2c02      	cmp	r4, #2
 800db68:	d125      	bne.n	800dbb6 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x86>
 800db6a:	22cc      	movs	r2, #204	; 0xcc
 800db6c:	4b18      	ldr	r3, [pc, #96]	; (800dbd0 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0xa0>)
 800db6e:	4628      	mov	r0, r5
 800db70:	701a      	strb	r2, [r3, #0]
 800db72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db76:	2008      	movs	r0, #8
 800db78:	f005 fe40 	bl	80137fc <operator new(unsigned int)>
 800db7c:	4606      	mov	r6, r0
 800db7e:	f8c0 8000 	str.w	r8, [r0]
 800db82:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800db86:	f005 fe3b 	bl	8013800 <operator new[](unsigned int)>
 800db8a:	2200      	movs	r2, #0
 800db8c:	6070      	str	r0, [r6, #4]
 800db8e:	6873      	ldr	r3, [r6, #4]
 800db90:	4810      	ldr	r0, [pc, #64]	; (800dbd4 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0xa4>)
 800db92:	4413      	add	r3, r2
 800db94:	1e59      	subs	r1, r3, #1
 800db96:	3305      	adds	r3, #5
 800db98:	4299      	cmp	r1, r3
 800db9a:	d107      	bne.n	800dbac <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x7c>
 800db9c:	3206      	adds	r2, #6
 800db9e:	f5b2 6f96 	cmp.w	r2, #1200	; 0x4b0
 800dba2:	d1f4      	bne.n	800db8e <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x5e>
 800dba4:	f849 6b04 	str.w	r6, [r9], #4
 800dba8:	3701      	adds	r7, #1
 800dbaa:	e7d9      	b.n	800db60 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x30>
 800dbac:	f810 cb01 	ldrb.w	ip, [r0], #1
 800dbb0:	f801 cf01 	strb.w	ip, [r1, #1]!
 800dbb4:	e7f0      	b.n	800db98 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x68>
 800dbb6:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
 800dbba:	3401      	adds	r4, #1
 800dbbc:	e7d3      	b.n	800db66 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x36>
 800dbbe:	bf00      	nop
 800dbc0:	200013f8 	strdcs	r1, [r0], -r8
 800dbc4:	08017b10 	stmdaeq	r1, {r4, r8, r9, fp, ip, sp, lr}
 800dbc8:	08017b38 	stmdaeq	r1, {r3, r4, r5, r8, r9, fp, ip, sp, lr}
 800dbcc:	200013f4 	strdcs	r1, [r0], -r4
 800dbd0:	200012f4 	strdcs	r1, [r0], -r4
 800dbd4:	08017b28 	stmdaeq	r1, {r3, r5, r8, r9, fp, ip, sp, lr}

0800dbd8 <memcmp.constprop.0>:
 800dbd8:	b510      	push	{r4, lr}
 800dbda:	1e4a      	subs	r2, r1, #1
 800dbdc:	1e43      	subs	r3, r0, #1
 800dbde:	3105      	adds	r1, #5
 800dbe0:	428a      	cmp	r2, r1
 800dbe2:	d101      	bne.n	800dbe8 <memcmp.constprop.0+0x10>
 800dbe4:	2000      	movs	r0, #0
 800dbe6:	e006      	b.n	800dbf6 <memcmp.constprop.0+0x1e>
 800dbe8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800dbec:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800dbf0:	42a0      	cmp	r0, r4
 800dbf2:	d0f5      	beq.n	800dbe0 <memcmp.constprop.0+0x8>
 800dbf4:	1b00      	subs	r0, r0, r4
 800dbf6:	bd10      	pop	{r4, pc}

0800dbf8 <memcpy.constprop.0.isra.0>:
 800dbf8:	3801      	subs	r0, #1
 800dbfa:	1d8b      	adds	r3, r1, #6
 800dbfc:	4299      	cmp	r1, r3
 800dbfe:	d100      	bne.n	800dc02 <memcpy.constprop.0.isra.0+0xa>
 800dc00:	4770      	bx	lr
 800dc02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc06:	f800 2f01 	strb.w	r2, [r0, #1]!
 800dc0a:	e7f7      	b.n	800dbfc <memcpy.constprop.0.isra.0+0x4>

0800dc0c <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>:
 800dc0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc10:	6805      	ldr	r5, [r0, #0]
 800dc12:	4604      	mov	r4, r0
 800dc14:	2dc8      	cmp	r5, #200	; 0xc8
 800dc16:	460e      	mov	r6, r1
 800dc18:	d017      	beq.n	800dc4a <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x3e>
 800dc1a:	2700      	movs	r7, #0
 800dc1c:	f04f 0906 	mov.w	r9, #6
 800dc20:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800dc24:	42bd      	cmp	r5, r7
 800dc26:	d108      	bne.n	800dc3a <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x2e>
 800dc28:	1c6b      	adds	r3, r5, #1
 800dc2a:	4631      	mov	r1, r6
 800dc2c:	fb09 8005 	mla	r0, r9, r5, r8
 800dc30:	6023      	str	r3, [r4, #0]
 800dc32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc36:	f7ff bfdf 	b.w	800dbf8 <memcpy.constprop.0.isra.0>
 800dc3a:	4631      	mov	r1, r6
 800dc3c:	fb09 8007 	mla	r0, r9, r7, r8
 800dc40:	f7ff ffca 	bl	800dbd8 <memcmp.constprop.0>
 800dc44:	b108      	cbz	r0, 800dc4a <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x3e>
 800dc46:	3701      	adds	r7, #1
 800dc48:	e7ec      	b.n	800dc24 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x18>
 800dc4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800dc4e <RDMDiscovery::RDMDiscovery(unsigned char const*)>:
 800dc4e:	b538      	push	{r3, r4, r5, lr}
 800dc50:	4604      	mov	r4, r0
 800dc52:	460d      	mov	r5, r1
 800dc54:	f000 faf2 	bl	800e23c <RDMMessage::RDMMessage()>
 800dc58:	4629      	mov	r1, r5
 800dc5a:	f504 7084 	add.w	r0, r4, #264	; 0x108
 800dc5e:	f7ff ffcb 	bl	800dbf8 <memcpy.constprop.0.isra.0>
 800dc62:	4620      	mov	r0, r4
 800dc64:	4629      	mov	r1, r5
 800dc66:	f000 fb07 	bl	800e278 <RDMMessage::SetSrcUid(unsigned char const*)>
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	bd38      	pop	{r3, r4, r5, pc}

0800dc6e <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>:
 800dc6e:	b570      	push	{r4, r5, r6, lr}
 800dc70:	780b      	ldrb	r3, [r1, #0]
 800dc72:	2bfe      	cmp	r3, #254	; 0xfe
 800dc74:	d001      	beq.n	800dc7a <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0xc>
 800dc76:	2000      	movs	r0, #0
 800dc78:	bd70      	pop	{r4, r5, r6, pc}
 800dc7a:	7a48      	ldrb	r0, [r1, #9]
 800dc7c:	7a0b      	ldrb	r3, [r1, #8]
 800dc7e:	1e54      	subs	r4, r2, #1
 800dc80:	4003      	ands	r3, r0
 800dc82:	7013      	strb	r3, [r2, #0]
 800dc84:	7ac8      	ldrb	r0, [r1, #11]
 800dc86:	7a8b      	ldrb	r3, [r1, #10]
 800dc88:	3205      	adds	r2, #5
 800dc8a:	4003      	ands	r3, r0
 800dc8c:	f802 3c04 	strb.w	r3, [r2, #-4]
 800dc90:	7b48      	ldrb	r0, [r1, #13]
 800dc92:	7b0b      	ldrb	r3, [r1, #12]
 800dc94:	4003      	ands	r3, r0
 800dc96:	f802 3c03 	strb.w	r3, [r2, #-3]
 800dc9a:	7bc8      	ldrb	r0, [r1, #15]
 800dc9c:	7b8b      	ldrb	r3, [r1, #14]
 800dc9e:	4003      	ands	r3, r0
 800dca0:	f802 3c02 	strb.w	r3, [r2, #-2]
 800dca4:	7c48      	ldrb	r0, [r1, #17]
 800dca6:	7c0b      	ldrb	r3, [r1, #16]
 800dca8:	4003      	ands	r3, r0
 800dcaa:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dcae:	7cc8      	ldrb	r0, [r1, #19]
 800dcb0:	7c8b      	ldrb	r3, [r1, #18]
 800dcb2:	4003      	ands	r3, r0
 800dcb4:	7013      	strb	r3, [r2, #0]
 800dcb6:	7d0b      	ldrb	r3, [r1, #20]
 800dcb8:	7d88      	ldrb	r0, [r1, #22]
 800dcba:	7dcd      	ldrb	r5, [r1, #23]
 800dcbc:	7d49      	ldrb	r1, [r1, #21]
 800dcbe:	4019      	ands	r1, r3
 800dcc0:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800dcc4:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800dcc8:	4433      	add	r3, r6
 800dcca:	4294      	cmp	r4, r2
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	d1f9      	bne.n	800dcc4 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0x56>
 800dcd0:	ebb1 2f13 	cmp.w	r1, r3, lsr #8
 800dcd4:	d1cf      	bne.n	800dc76 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0x8>
 800dcd6:	4028      	ands	r0, r5
 800dcd8:	b2db      	uxtb	r3, r3
 800dcda:	1ac3      	subs	r3, r0, r3
 800dcdc:	4258      	negs	r0, r3
 800dcde:	4158      	adcs	r0, r3
 800dce0:	e7ca      	b.n	800dc78 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0xa>
	...

0800dce4 <RDMDiscovery::QuickFind(unsigned char const*)>:
 800dce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dce6:	4604      	mov	r4, r0
 800dce8:	460d      	mov	r5, r1
 800dcea:	f006 fc87 	bl	80145fc <fwdgt_counter_reload>
 800dcee:	2110      	movs	r1, #16
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	f000 fac9 	bl	800e288 <RDMMessage::SetCc(unsigned char)>
 800dcf6:	2102      	movs	r1, #2
 800dcf8:	4620      	mov	r0, r4
 800dcfa:	f000 fac7 	bl	800e28c <RDMMessage::SetPid(unsigned short)>
 800dcfe:	4629      	mov	r1, r5
 800dd00:	4620      	mov	r0, r4
 800dd02:	f000 fabd 	bl	800e280 <RDMMessage::SetDstUid(unsigned char const*)>
 800dd06:	2200      	movs	r2, #0
 800dd08:	4620      	mov	r0, r4
 800dd0a:	4611      	mov	r1, r2
 800dd0c:	f000 fac2 	bl	800e294 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800dd10:	4620      	mov	r0, r4
 800dd12:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800dd16:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800dd1a:	f000 facd 	bl	800e2b8 <RDMMessage::Send(unsigned int, unsigned int)>
 800dd1e:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800dd22:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800dd26:	f000 fd1b 	bl	800e760 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800dd2a:	b168      	cbz	r0, 800dd48 <RDMDiscovery::QuickFind(unsigned char const*)+0x64>
 800dd2c:	7d03      	ldrb	r3, [r0, #20]
 800dd2e:	2b11      	cmp	r3, #17
 800dd30:	d10a      	bne.n	800dd48 <RDMDiscovery::QuickFind(unsigned char const*)+0x64>
 800dd32:	f100 0109 	add.w	r1, r0, #9
 800dd36:	4628      	mov	r0, r5
 800dd38:	f7ff ff4e 	bl	800dbd8 <memcmp.constprop.0>
 800dd3c:	b920      	cbnz	r0, 800dd48 <RDMDiscovery::QuickFind(unsigned char const*)+0x64>
 800dd3e:	4629      	mov	r1, r5
 800dd40:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 800dd44:	f7ff ff62 	bl	800dc0c <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>
 800dd48:	f006 fc58 	bl	80145fc <fwdgt_counter_reload>
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	491c      	ldr	r1, [pc, #112]	; (800ddc0 <RDMDiscovery::QuickFind(unsigned char const*)+0xdc>)
 800dd50:	f000 fa96 	bl	800e280 <RDMMessage::SetDstUid(unsigned char const*)>
 800dd54:	2110      	movs	r1, #16
 800dd56:	4620      	mov	r0, r4
 800dd58:	f000 fa96 	bl	800e288 <RDMMessage::SetCc(unsigned char)>
 800dd5c:	2101      	movs	r1, #1
 800dd5e:	4620      	mov	r0, r4
 800dd60:	f000 fa94 	bl	800e28c <RDMMessage::SetPid(unsigned short)>
 800dd64:	220c      	movs	r2, #12
 800dd66:	4620      	mov	r0, r4
 800dd68:	f504 7187 	add.w	r1, r4, #270	; 0x10e
 800dd6c:	f000 fa92 	bl	800e294 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800dd70:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800dd74:	4620      	mov	r0, r4
 800dd76:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800dd7a:	f000 fa9d 	bl	800e2b8 <RDMMessage::Send(unsigned int, unsigned int)>
 800dd7e:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800dd82:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800dd86:	f000 fceb 	bl	800e760 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800dd8a:	4605      	mov	r5, r0
 800dd8c:	f006 fc36 	bl	80145fc <fwdgt_counter_reload>
 800dd90:	b14d      	cbz	r5, 800dda6 <RDMDiscovery::QuickFind(unsigned char const*)+0xc2>
 800dd92:	466a      	mov	r2, sp
 800dd94:	4629      	mov	r1, r5
 800dd96:	4620      	mov	r0, r4
 800dd98:	f7ff ff69 	bl	800dc6e <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800dd9c:	b130      	cbz	r0, 800ddac <RDMDiscovery::QuickFind(unsigned char const*)+0xc8>
 800dd9e:	4669      	mov	r1, sp
 800dda0:	4620      	mov	r0, r4
 800dda2:	f7ff ff9f 	bl	800dce4 <RDMDiscovery::QuickFind(unsigned char const*)>
 800dda6:	2000      	movs	r0, #0
 800dda8:	b003      	add	sp, #12
 800ddaa:	bd30      	pop	{r4, r5, pc}
 800ddac:	466a      	mov	r2, sp
 800ddae:	4629      	mov	r1, r5
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	f7ff ff5c 	bl	800dc6e <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800ddb6:	f080 0001 	eor.w	r0, r0, #1
 800ddba:	b2c0      	uxtb	r0, r0
 800ddbc:	e7f4      	b.n	800dda8 <RDMDiscovery::QuickFind(unsigned char const*)+0xc4>
 800ddbe:	bf00      	nop
 800ddc0:	08017b50 	stmdaeq	r1, {r4, r6, r8, r9, fp, ip, sp, lr}

0800ddc4 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>:
 800ddc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc8:	4691      	mov	r9, r2
 800ddca:	469b      	mov	fp, r3
 800ddcc:	b085      	sub	sp, #20
 800ddce:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	f006 fc12 	bl	80145fc <fwdgt_counter_reload>
 800ddd8:	45c3      	cmp	fp, r8
 800ddda:	bf08      	it	eq
 800dddc:	45b9      	cmpeq	r9, r7
 800ddde:	ea4f 430b 	mov.w	r3, fp, lsl #16
 800dde2:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 800dde6:	ea4f 4209 	mov.w	r2, r9, lsl #16
 800ddea:	4d56      	ldr	r5, [pc, #344]	; (800df44 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x180>)
 800ddec:	ba12      	rev	r2, r2
 800ddee:	ba1b      	rev	r3, r3
 800ddf0:	d139      	bne.n	800de66 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0xa2>
 800ddf2:	4629      	mov	r1, r5
 800ddf4:	a802      	add	r0, sp, #8
 800ddf6:	e9c5 3200 	strd	r3, r2, [r5]
 800ddfa:	f7ff fefd 	bl	800dbf8 <memcpy.constprop.0.isra.0>
 800ddfe:	2110      	movs	r1, #16
 800de00:	4620      	mov	r0, r4
 800de02:	f000 fa41 	bl	800e288 <RDMMessage::SetCc(unsigned char)>
 800de06:	2102      	movs	r1, #2
 800de08:	4620      	mov	r0, r4
 800de0a:	f000 fa3f 	bl	800e28c <RDMMessage::SetPid(unsigned short)>
 800de0e:	4620      	mov	r0, r4
 800de10:	a902      	add	r1, sp, #8
 800de12:	f000 fa35 	bl	800e280 <RDMMessage::SetDstUid(unsigned char const*)>
 800de16:	2200      	movs	r2, #0
 800de18:	4620      	mov	r0, r4
 800de1a:	4611      	mov	r1, r2
 800de1c:	f000 fa3a 	bl	800e294 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800de20:	4620      	mov	r0, r4
 800de22:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800de26:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800de2a:	f000 fa45 	bl	800e2b8 <RDMMessage::Send(unsigned int, unsigned int)>
 800de2e:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800de32:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800de36:	f000 fc93 	bl	800e760 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800de3a:	2800      	cmp	r0, #0
 800de3c:	d07f      	beq.n	800df3e <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x17a>
 800de3e:	7d03      	ldrb	r3, [r0, #20]
 800de40:	2b11      	cmp	r3, #17
 800de42:	d003      	beq.n	800de4c <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x88>
 800de44:	2000      	movs	r0, #0
 800de46:	b005      	add	sp, #20
 800de48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de4c:	f100 0109 	add.w	r1, r0, #9
 800de50:	a802      	add	r0, sp, #8
 800de52:	f7ff fec1 	bl	800dbd8 <memcmp.constprop.0>
 800de56:	2800      	cmp	r0, #0
 800de58:	d1f4      	bne.n	800de44 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800de5a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 800de5e:	a902      	add	r1, sp, #8
 800de60:	f7ff fed4 	bl	800dc0c <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>
 800de64:	e7ee      	b.n	800de44 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800de66:	f504 7687 	add.w	r6, r4, #270	; 0x10e
 800de6a:	4629      	mov	r1, r5
 800de6c:	4630      	mov	r0, r6
 800de6e:	e9c5 3200 	strd	r3, r2, [r5]
 800de72:	f7ff fec1 	bl	800dbf8 <memcpy.constprop.0.isra.0>
 800de76:	ea4f 4308 	mov.w	r3, r8, lsl #16
 800de7a:	ea43 4317 	orr.w	r3, r3, r7, lsr #16
 800de7e:	043a      	lsls	r2, r7, #16
 800de80:	ba1b      	rev	r3, r3
 800de82:	ba12      	rev	r2, r2
 800de84:	4629      	mov	r1, r5
 800de86:	f504 708a 	add.w	r0, r4, #276	; 0x114
 800de8a:	e9c5 3200 	strd	r3, r2, [r5]
 800de8e:	f7ff feb3 	bl	800dbf8 <memcpy.constprop.0.isra.0>
 800de92:	4620      	mov	r0, r4
 800de94:	492c      	ldr	r1, [pc, #176]	; (800df48 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x184>)
 800de96:	f000 f9f3 	bl	800e280 <RDMMessage::SetDstUid(unsigned char const*)>
 800de9a:	2110      	movs	r1, #16
 800de9c:	4620      	mov	r0, r4
 800de9e:	f000 f9f3 	bl	800e288 <RDMMessage::SetCc(unsigned char)>
 800dea2:	2101      	movs	r1, #1
 800dea4:	4620      	mov	r0, r4
 800dea6:	f000 f9f1 	bl	800e28c <RDMMessage::SetPid(unsigned short)>
 800deaa:	220c      	movs	r2, #12
 800deac:	4631      	mov	r1, r6
 800deae:	4620      	mov	r0, r4
 800deb0:	f000 f9f0 	bl	800e294 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800deb4:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800deb8:	4620      	mov	r0, r4
 800deba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800debe:	f000 f9fb 	bl	800e2b8 <RDMMessage::Send(unsigned int, unsigned int)>
 800dec2:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800dec6:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800deca:	f000 fc49 	bl	800e760 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800dece:	4601      	mov	r1, r0
 800ded0:	2800      	cmp	r0, #0
 800ded2:	d0b7      	beq.n	800de44 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800ded4:	4620      	mov	r0, r4
 800ded6:	aa02      	add	r2, sp, #8
 800ded8:	f7ff fec9 	bl	800dc6e <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800dedc:	bb40      	cbnz	r0, 800df30 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x16c>
 800dede:	ea4f 0a58 	mov.w	sl, r8, lsr #1
 800dee2:	ea4f 035b 	mov.w	r3, fp, lsr #1
 800dee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800deea:	f40a 4a80 	and.w	sl, sl, #16384	; 0x4000
 800deee:	eb19 0607 	adds.w	r6, r9, r7
 800def2:	449a      	add	sl, r3
 800def4:	f3c8 020e 	ubfx	r2, r8, #0, #15
 800def8:	f3cb 030e 	ubfx	r3, fp, #0, #15
 800defc:	eb43 0302 	adc.w	r3, r3, r2
 800df00:	0876      	lsrs	r6, r6, #1
 800df02:	ea46 76c3 	orr.w	r6, r6, r3, lsl #31
 800df06:	eb0a 0a53 	add.w	sl, sl, r3, lsr #1
 800df0a:	464a      	mov	r2, r9
 800df0c:	465b      	mov	r3, fp
 800df0e:	4620      	mov	r0, r4
 800df10:	e9cd 6a00 	strd	r6, sl, [sp]
 800df14:	f7ff ff56 	bl	800ddc4 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800df18:	1c72      	adds	r2, r6, #1
 800df1a:	4605      	mov	r5, r0
 800df1c:	e9cd 7800 	strd	r7, r8, [sp]
 800df20:	4620      	mov	r0, r4
 800df22:	f14a 0300 	adc.w	r3, sl, #0
 800df26:	f7ff ff4d 	bl	800ddc4 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800df2a:	4328      	orrs	r0, r5
 800df2c:	b2c0      	uxtb	r0, r0
 800df2e:	e78a      	b.n	800de46 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x82>
 800df30:	4620      	mov	r0, r4
 800df32:	a902      	add	r1, sp, #8
 800df34:	f7ff fed6 	bl	800dce4 <RDMDiscovery::QuickFind(unsigned char const*)>
 800df38:	2800      	cmp	r0, #0
 800df3a:	d1d0      	bne.n	800dede <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x11a>
 800df3c:	e782      	b.n	800de44 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800df3e:	2001      	movs	r0, #1
 800df40:	e781      	b.n	800de46 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x82>
 800df42:	bf00      	nop
 800df44:	20001400 	andcs	r1, r0, r0, lsl #8
 800df48:	08017b50 	stmdaeq	r1, {r4, r6, r8, r9, fp, ip, sp, lr}

0800df4c <RDMDiscovery::Full(unsigned int, RDMTod*)>:
 800df4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800df50:	4604      	mov	r4, r0
 800df52:	4616      	mov	r6, r2
 800df54:	2500      	movs	r5, #0
 800df56:	2706      	movs	r7, #6
 800df58:	e9c0 1240 	strd	r1, r2, [r0, #256]	; 0x100
 800df5c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800e010 <RDMDiscovery::Full(unsigned int, RDMTod*)+0xc4>
 800df60:	6833      	ldr	r3, [r6, #0]
 800df62:	429d      	cmp	r5, r3
 800df64:	d34c      	bcc.n	800e000 <RDMDiscovery::Full(unsigned int, RDMTod*)+0xb4>
 800df66:	2500      	movs	r5, #0
 800df68:	6035      	str	r5, [r6, #0]
 800df6a:	f006 fb47 	bl	80145fc <fwdgt_counter_reload>
 800df6e:	4620      	mov	r0, r4
 800df70:	4927      	ldr	r1, [pc, #156]	; (800e010 <RDMDiscovery::Full(unsigned int, RDMTod*)+0xc4>)
 800df72:	f000 f985 	bl	800e280 <RDMMessage::SetDstUid(unsigned char const*)>
 800df76:	4620      	mov	r0, r4
 800df78:	2110      	movs	r1, #16
 800df7a:	f000 f985 	bl	800e288 <RDMMessage::SetCc(unsigned char)>
 800df7e:	4620      	mov	r0, r4
 800df80:	2103      	movs	r1, #3
 800df82:	f000 f983 	bl	800e28c <RDMMessage::SetPid(unsigned short)>
 800df86:	462a      	mov	r2, r5
 800df88:	4629      	mov	r1, r5
 800df8a:	4620      	mov	r0, r4
 800df8c:	f000 f982 	bl	800e294 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800df90:	462a      	mov	r2, r5
 800df92:	4620      	mov	r0, r4
 800df94:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800df98:	f000 f98e 	bl	800e2b8 <RDMMessage::Send(unsigned int, unsigned int)>
 800df9c:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800dfa0:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800dfa4:	f000 fbdc 	bl	800e760 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800dfa8:	f006 fb28 	bl	80145fc <fwdgt_counter_reload>
 800dfac:	4629      	mov	r1, r5
 800dfae:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 800dfb2:	f007 faeb 	bl	801558c <udelay(unsigned int, unsigned int)>
 800dfb6:	f006 fb21 	bl	80145fc <fwdgt_counter_reload>
 800dfba:	462a      	mov	r2, r5
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800dfc2:	f000 f979 	bl	800e2b8 <RDMMessage::Send(unsigned int, unsigned int)>
 800dfc6:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800dfca:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800dfce:	f000 fbc7 	bl	800e760 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800dfd2:	f006 fb13 	bl	80145fc <fwdgt_counter_reload>
 800dfd6:	4629      	mov	r1, r5
 800dfd8:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 800dfdc:	f007 fad6 	bl	801558c <udelay(unsigned int, unsigned int)>
 800dfe0:	f006 fb0c 	bl	80145fc <fwdgt_counter_reload>
 800dfe4:	f06f 0201 	mvn.w	r2, #1
 800dfe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dfec:	4620      	mov	r0, r4
 800dfee:	e9cd 2300 	strd	r2, r3, [sp]
 800dff2:	2200      	movs	r2, #0
 800dff4:	2300      	movs	r3, #0
 800dff6:	f7ff fee5 	bl	800ddc4 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800dffa:	b002      	add	sp, #8
 800dffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e000:	6870      	ldr	r0, [r6, #4]
 800e002:	4641      	mov	r1, r8
 800e004:	fb07 0005 	mla	r0, r7, r5, r0
 800e008:	f7ff fdf6 	bl	800dbf8 <memcpy.constprop.0.isra.0>
 800e00c:	3501      	adds	r5, #1
 800e00e:	e7a7      	b.n	800df60 <RDMDiscovery::Full(unsigned int, RDMTod*)+0x14>
 800e010:	08017b50 	stmdaeq	r1, {r4, r6, r8, r9, fp, ip, sp, lr}

0800e014 <RDMDevice::RDMDevice()>:
 800e014:	4a33      	ldr	r2, [pc, #204]	; (800e0e4 <RDMDevice::RDMDevice()+0xd0>)
 800e016:	2300      	movs	r3, #0
 800e018:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e01a:	4604      	mov	r4, r0
 800e01c:	4611      	mov	r1, r2
 800e01e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800e022:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 800e026:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
 800e02a:	6743      	str	r3, [r0, #116]	; 0x74
 800e02c:	4613      	mov	r3, r2
 800e02e:	7818      	ldrb	r0, [r3, #0]
 800e030:	3201      	adds	r2, #1
 800e032:	2800      	cmp	r0, #0
 800e034:	d1fa      	bne.n	800e02c <RDMDevice::RDMDevice()+0x18>
 800e036:	1a5b      	subs	r3, r3, r1
 800e038:	2b20      	cmp	r3, #32
 800e03a:	bf28      	it	cs
 800e03c:	2320      	movcs	r3, #32
 800e03e:	f104 052a 	add.w	r5, r4, #42	; 0x2a
 800e042:	4629      	mov	r1, r5
 800e044:	461a      	mov	r2, r3
 800e046:	4827      	ldr	r0, [pc, #156]	; (800e0e4 <RDMDevice::RDMDevice()+0xd0>)
 800e048:	3a01      	subs	r2, #1
 800e04a:	d23b      	bcs.n	800e0c4 <RDMDevice::RDMDevice()+0xb0>
 800e04c:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800e050:	4b25      	ldr	r3, [pc, #148]	; (800e0e8 <RDMDevice::RDMDevice()+0xd4>)
 800e052:	4669      	mov	r1, sp
 800e054:	781a      	ldrb	r2, [r3, #0]
 800e056:	7022      	strb	r2, [r4, #0]
 800e058:	785b      	ldrb	r3, [r3, #1]
 800e05a:	7063      	strb	r3, [r4, #1]
 800e05c:	4b23      	ldr	r3, [pc, #140]	; (800e0ec <RDMDevice::RDMDevice()+0xd8>)
 800e05e:	6818      	ldr	r0, [r3, #0]
 800e060:	f003 f88e 	bl	8011180 <Network::MacAddressCopyTo(unsigned char*)>
 800e064:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e068:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e06c:	70a3      	strb	r3, [r4, #2]
 800e06e:	7263      	strb	r3, [r4, #9]
 800e070:	4b1f      	ldr	r3, [pc, #124]	; (800e0f0 <RDMDevice::RDMDevice()+0xdc>)
 800e072:	70e2      	strb	r2, [r4, #3]
 800e074:	7222      	strb	r2, [r4, #8]
 800e076:	461a      	mov	r2, r3
 800e078:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e07c:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800e080:	7121      	strb	r1, [r4, #4]
 800e082:	7160      	strb	r0, [r4, #5]
 800e084:	71a0      	strb	r0, [r4, #6]
 800e086:	71e1      	strb	r1, [r4, #7]
 800e088:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e08c:	2900      	cmp	r1, #0
 800e08e:	d1fb      	bne.n	800e088 <RDMDevice::RDMDevice()+0x74>
 800e090:	1a9b      	subs	r3, r3, r2
 800e092:	2b20      	cmp	r3, #32
 800e094:	bf28      	it	cs
 800e096:	2320      	movcs	r3, #32
 800e098:	461a      	mov	r2, r3
 800e09a:	4915      	ldr	r1, [pc, #84]	; (800e0f0 <RDMDevice::RDMDevice()+0xdc>)
 800e09c:	3a01      	subs	r2, #1
 800e09e:	d216      	bcs.n	800e0ce <RDMDevice::RDMDevice()+0xba>
 800e0a0:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800e0a4:	f06f 2380 	mvn.w	r3, #2147516416	; 0x80008000
 800e0a8:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e0aa:	2315      	movs	r3, #21
 800e0ac:	4a11      	ldr	r2, [pc, #68]	; (800e0f4 <RDMDevice::RDMDevice()+0xe0>)
 800e0ae:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 800e0b2:	f104 0165 	add.w	r1, r4, #101	; 0x65
 800e0b6:	f104 0350 	add.w	r3, r4, #80	; 0x50
 800e0ba:	4299      	cmp	r1, r3
 800e0bc:	d10c      	bne.n	800e0d8 <RDMDevice::RDMDevice()+0xc4>
 800e0be:	4620      	mov	r0, r4
 800e0c0:	b002      	add	sp, #8
 800e0c2:	bd70      	pop	{r4, r5, r6, pc}
 800e0c4:	f810 6b01 	ldrb.w	r6, [r0], #1
 800e0c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e0cc:	e7bc      	b.n	800e048 <RDMDevice::RDMDevice()+0x34>
 800e0ce:	f811 0b01 	ldrb.w	r0, [r1], #1
 800e0d2:	f805 0f01 	strb.w	r0, [r5, #1]!
 800e0d6:	e7e1      	b.n	800e09c <RDMDevice::RDMDevice()+0x88>
 800e0d8:	f812 0b01 	ldrb.w	r0, [r2], #1
 800e0dc:	f803 0f01 	strb.w	r0, [r3, #1]!
 800e0e0:	e7eb      	b.n	800e0ba <RDMDevice::RDMDevice()+0xa6>
 800e0e2:	bf00      	nop
 800e0e4:	08017c48 	stmdaeq	r1, {r3, r6, sl, fp, ip, sp, lr}
 800e0e8:	08017c46 	stmdaeq	r1, {r1, r2, r6, sl, fp, ip, sp, lr}
 800e0ec:	2000a59c 	mulcs	r0, ip, r5
 800e0f0:	0801775f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}
 800e0f4:	08017c2a 	stmdaeq	r1, {r1, r3, r5, sl, fp, ip, sp, lr}

0800e0f8 <RDMDevice::Print()>:
 800e0f8:	b513      	push	{r0, r1, r4, lr}
 800e0fa:	4604      	mov	r4, r0
 800e0fc:	4818      	ldr	r0, [pc, #96]	; (800e160 <RDMDevice::Print()+0x68>)
 800e0fe:	f005 ff71 	bl	8013fe4 <printf>
 800e102:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800e106:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 800e10a:	4816      	ldr	r0, [pc, #88]	; (800e164 <RDMDevice::Print()+0x6c>)
 800e10c:	f005 ff6a 	bl	8013fe4 <printf>
 800e110:	7862      	ldrb	r2, [r4, #1]
 800e112:	7821      	ldrb	r1, [r4, #0]
 800e114:	4814      	ldr	r0, [pc, #80]	; (800e168 <RDMDevice::Print()+0x70>)
 800e116:	f005 ff65 	bl	8013fe4 <printf>
 800e11a:	79a3      	ldrb	r3, [r4, #6]
 800e11c:	7a22      	ldrb	r2, [r4, #8]
 800e11e:	7a61      	ldrb	r1, [r4, #9]
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	4812      	ldr	r0, [pc, #72]	; (800e16c <RDMDevice::Print()+0x74>)
 800e124:	79e3      	ldrb	r3, [r4, #7]
 800e126:	f005 ff5d 	bl	8013fe4 <printf>
 800e12a:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 800e12e:	f104 020a 	add.w	r2, r4, #10
 800e132:	480f      	ldr	r0, [pc, #60]	; (800e170 <RDMDevice::Print()+0x78>)
 800e134:	f005 ff56 	bl	8013fe4 <printf>
 800e138:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 800e13c:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 800e140:	0a09      	lsrs	r1, r1, #8
 800e142:	480c      	ldr	r0, [pc, #48]	; (800e174 <RDMDevice::Print()+0x7c>)
 800e144:	f005 ff4e 	bl	8013fe4 <printf>
 800e148:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 800e14c:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 800e150:	4809      	ldr	r0, [pc, #36]	; (800e178 <RDMDevice::Print()+0x80>)
 800e152:	0a09      	lsrs	r1, r1, #8
 800e154:	b002      	add	sp, #8
 800e156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e15a:	f005 bf43 	b.w	8013fe4 <printf>
 800e15e:	bf00      	nop
 800e160:	08017b56 	stmdaeq	r1, {r1, r2, r4, r6, r8, r9, fp, ip, sp, lr}
 800e164:	08017b70 	stmdaeq	r1, {r4, r5, r6, r8, r9, fp, ip, sp, lr}
 800e168:	08017b8b 	stmdaeq	r1, {r0, r1, r3, r7, r8, r9, fp, ip, sp, lr}
 800e16c:	08017baa 	stmdaeq	r1, {r1, r3, r5, r7, r8, r9, fp, ip, sp, lr}
 800e170:	08017bd1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, fp, ip, sp, lr}
 800e174:	08017bec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, fp, ip, sp, lr}
 800e178:	08017c0b 	stmdaeq	r1, {r0, r1, r3, sl, fp, ip, sp, lr}

0800e17c <memcpy.isra.0>:
 800e17c:	f005 bbf2 	b.w	8013964 <memcpy>

0800e180 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 800e180:	b510      	push	{r4, lr}
 800e182:	6001      	str	r1, [r0, #0]
 800e184:	2100      	movs	r1, #0
 800e186:	4604      	mov	r4, r0
 800e188:	6041      	str	r1, [r0, #4]
 800e18a:	2220      	movs	r2, #32
 800e18c:	3008      	adds	r0, #8
 800e18e:	f005 fc0b 	bl	80139a8 <memset>
 800e192:	4b03      	ldr	r3, [pc, #12]	; (800e1a0 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x20>)
 800e194:	4620      	mov	r0, r4
 800e196:	62a3      	str	r3, [r4, #40]	; 0x28
 800e198:	237f      	movs	r3, #127	; 0x7f
 800e19a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800e19e:	bd10      	pop	{r4, pc}
 800e1a0:	ff7fff00 			; <UNDEFINED> instruction: 0xff7fff00

0800e1a4 <RDMDeviceParams::Load()>:
 800e1a4:	4601      	mov	r1, r0
 800e1a6:	6800      	ldr	r0, [r0, #0]
 800e1a8:	b130      	cbz	r0, 800e1b8 <RDMDeviceParams::Load()+0x14>
 800e1aa:	b508      	push	{r3, lr}
 800e1ac:	6803      	ldr	r3, [r0, #0]
 800e1ae:	3104      	adds	r1, #4
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	4798      	blx	r3
 800e1b4:	2001      	movs	r0, #1
 800e1b6:	bd08      	pop	{r3, pc}
 800e1b8:	4770      	bx	lr

0800e1ba <RDMDeviceParams::Set(RDMDevice*)>:
 800e1ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1bc:	6843      	ldr	r3, [r0, #4]
 800e1be:	460c      	mov	r4, r1
 800e1c0:	07d9      	lsls	r1, r3, #31
 800e1c2:	4605      	mov	r5, r0
 800e1c4:	d518      	bpl.n	800e1f8 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 800e1c6:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 800e1ca:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800e1ce:	2e20      	cmp	r6, #32
 800e1d0:	bf28      	it	cs
 800e1d2:	2620      	movcs	r6, #32
 800e1d4:	f100 0108 	add.w	r1, r0, #8
 800e1d8:	b1e3      	cbz	r3, 800e214 <RDMDeviceParams::Set(RDMDevice*)+0x5a>
 800e1da:	f104 070a 	add.w	r7, r4, #10
 800e1de:	4638      	mov	r0, r7
 800e1e0:	4632      	mov	r2, r6
 800e1e2:	f7ff ffcb 	bl	800e17c <memcpy.isra.0>
 800e1e6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800e1e8:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
 800e1ec:	b120      	cbz	r0, 800e1f8 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 800e1ee:	6803      	ldr	r3, [r0, #0]
 800e1f0:	4632      	mov	r2, r6
 800e1f2:	4639      	mov	r1, r7
 800e1f4:	689b      	ldr	r3, [r3, #8]
 800e1f6:	4798      	blx	r3
 800e1f8:	686b      	ldr	r3, [r5, #4]
 800e1fa:	079a      	lsls	r2, r3, #30
 800e1fc:	bf44      	itt	mi
 800e1fe:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 800e202:	f8a4 204c 	strhmi.w	r2, [r4, #76]	; 0x4c
 800e206:	075b      	lsls	r3, r3, #29
 800e208:	bf44      	itt	mi
 800e20a:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 800e20e:	f8a4 304e 	strhmi.w	r3, [r4, #78]	; 0x4e
 800e212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e214:	4632      	mov	r2, r6
 800e216:	f104 0051 	add.w	r0, r4, #81	; 0x51
 800e21a:	f7ff ffaf 	bl	800e17c <memcpy.isra.0>
 800e21e:	f884 6071 	strb.w	r6, [r4, #113]	; 0x71
 800e222:	e7e9      	b.n	800e1f8 <RDMDeviceParams::Set(RDMDevice*)+0x3e>

0800e224 <RDMDeviceParams::Dump()>:
 800e224:	4770      	bx	lr

0800e226 <memcpy.isra.0>:
 800e226:	3801      	subs	r0, #1
 800e228:	440a      	add	r2, r1
 800e22a:	4291      	cmp	r1, r2
 800e22c:	d100      	bne.n	800e230 <memcpy.isra.0+0xa>
 800e22e:	4770      	bx	lr
 800e230:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e234:	f800 3f01 	strb.w	r3, [r0, #1]!
 800e238:	e7f7      	b.n	800e22a <memcpy.isra.0+0x4>
	...

0800e23c <RDMMessage::RDMMessage()>:
 800e23c:	23cc      	movs	r3, #204	; 0xcc
 800e23e:	b570      	push	{r4, r5, r6, lr}
 800e240:	7003      	strb	r3, [r0, #0]
 800e242:	2501      	movs	r5, #1
 800e244:	2318      	movs	r3, #24
 800e246:	4604      	mov	r4, r0
 800e248:	4e0a      	ldr	r6, [pc, #40]	; (800e274 <RDMMessage::RDMMessage()+0x38>)
 800e24a:	7083      	strb	r3, [r0, #2]
 800e24c:	7045      	strb	r5, [r0, #1]
 800e24e:	4631      	mov	r1, r6
 800e250:	2206      	movs	r2, #6
 800e252:	3009      	adds	r0, #9
 800e254:	f7ff ffe7 	bl	800e226 <memcpy.isra.0>
 800e258:	1ce0      	adds	r0, r4, #3
 800e25a:	2206      	movs	r2, #6
 800e25c:	4631      	mov	r1, r6
 800e25e:	f7ff ffe2 	bl	800e226 <memcpy.isra.0>
 800e262:	2300      	movs	r3, #0
 800e264:	4620      	mov	r0, r4
 800e266:	7425      	strb	r5, [r4, #16]
 800e268:	7463      	strb	r3, [r4, #17]
 800e26a:	74a3      	strb	r3, [r4, #18]
 800e26c:	74e3      	strb	r3, [r4, #19]
 800e26e:	75e3      	strb	r3, [r4, #23]
 800e270:	bd70      	pop	{r4, r5, r6, pc}
 800e272:	bf00      	nop
 800e274:	08017c40 	stmdaeq	r1, {r6, sl, fp, ip, sp, lr}

0800e278 <RDMMessage::SetSrcUid(unsigned char const*)>:
 800e278:	2206      	movs	r2, #6
 800e27a:	3009      	adds	r0, #9
 800e27c:	f7ff bfd3 	b.w	800e226 <memcpy.isra.0>

0800e280 <RDMMessage::SetDstUid(unsigned char const*)>:
 800e280:	2206      	movs	r2, #6
 800e282:	3003      	adds	r0, #3
 800e284:	f7ff bfcf 	b.w	800e226 <memcpy.isra.0>

0800e288 <RDMMessage::SetCc(unsigned char)>:
 800e288:	7501      	strb	r1, [r0, #20]
 800e28a:	4770      	bx	lr

0800e28c <RDMMessage::SetPid(unsigned short)>:
 800e28c:	0a0b      	lsrs	r3, r1, #8
 800e28e:	7543      	strb	r3, [r0, #21]
 800e290:	7581      	strb	r1, [r0, #22]
 800e292:	4770      	bx	lr

0800e294 <RDMMessage::SetPd(unsigned char const*, unsigned char)>:
 800e294:	b538      	push	{r3, r4, r5, lr}
 800e296:	4604      	mov	r4, r0
 800e298:	7883      	ldrb	r3, [r0, #2]
 800e29a:	7dc0      	ldrb	r0, [r0, #23]
 800e29c:	4615      	mov	r5, r2
 800e29e:	1a1b      	subs	r3, r3, r0
 800e2a0:	70a3      	strb	r3, [r4, #2]
 800e2a2:	75e2      	strb	r2, [r4, #23]
 800e2a4:	b121      	cbz	r1, 800e2b0 <RDMMessage::SetPd(unsigned char const*, unsigned char)+0x1c>
 800e2a6:	b11a      	cbz	r2, 800e2b0 <RDMMessage::SetPd(unsigned char const*, unsigned char)+0x1c>
 800e2a8:	f104 0018 	add.w	r0, r4, #24
 800e2ac:	f7ff ffbb 	bl	800e226 <memcpy.isra.0>
 800e2b0:	78a3      	ldrb	r3, [r4, #2]
 800e2b2:	441d      	add	r5, r3
 800e2b4:	70a5      	strb	r5, [r4, #2]
 800e2b6:	bd38      	pop	{r3, r4, r5, pc}

0800e2b8 <RDMMessage::Send(unsigned int, unsigned int)>:
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	4601      	mov	r1, r0
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f001 b901 	b.w	800f4c4 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)>

0800e2c2 <uuid_unparse_x>:
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	b530      	push	{r4, r5, lr}
 800e2c6:	4608      	mov	r0, r1
 800e2c8:	4611      	mov	r1, r2
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	b08f      	sub	sp, #60	; 0x3c
 800e2ce:	ba12      	rev	r2, r2
 800e2d0:	920a      	str	r2, [sp, #40]	; 0x28
 800e2d2:	889a      	ldrh	r2, [r3, #4]
 800e2d4:	891c      	ldrh	r4, [r3, #8]
 800e2d6:	ba52      	rev16	r2, r2
 800e2d8:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800e2dc:	88da      	ldrh	r2, [r3, #6]
 800e2de:	ba64      	rev16	r4, r4
 800e2e0:	ba52      	rev16	r2, r2
 800e2e2:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800e2e6:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 800e2ea:	f103 020a 	add.w	r2, r3, #10
 800e2ee:	f10d 0431 	add.w	r4, sp, #49	; 0x31
 800e2f2:	3310      	adds	r3, #16
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d122      	bne.n	800e33e <uuid_unparse_x+0x7c>
 800e2f8:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800e2fc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800e300:	9208      	str	r2, [sp, #32]
 800e302:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800e306:	0a1b      	lsrs	r3, r3, #8
 800e308:	9207      	str	r2, [sp, #28]
 800e30a:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800e30e:	9301      	str	r3, [sp, #4]
 800e310:	9206      	str	r2, [sp, #24]
 800e312:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800e316:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800e31a:	9205      	str	r2, [sp, #20]
 800e31c:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800e320:	9300      	str	r3, [sp, #0]
 800e322:	9204      	str	r2, [sp, #16]
 800e324:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800e328:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800e32c:	9203      	str	r2, [sp, #12]
 800e32e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800e332:	9202      	str	r2, [sp, #8]
 800e334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e336:	f005 fe65 	bl	8014004 <sprintf>
 800e33a:	b00f      	add	sp, #60	; 0x3c
 800e33c:	bd30      	pop	{r4, r5, pc}
 800e33e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e342:	f804 5f01 	strb.w	r5, [r4, #1]!
 800e346:	e7d5      	b.n	800e2f4 <uuid_unparse_x+0x32>

0800e348 <uuid_unparse>:
 800e348:	4a01      	ldr	r2, [pc, #4]	; (800e350 <uuid_unparse+0x8>)
 800e34a:	f7ff bfba 	b.w	800e2c2 <uuid_unparse_x>
 800e34e:	bf00      	nop
 800e350:	08017c64 	stmdaeq	r1, {r2, r5, r6, sl, fp, ip, sp, lr}

0800e354 <DmxSend::~DmxSend()>:
 800e354:	4770      	bx	lr
	...

0800e358 <DmxSend::Start(unsigned int)>:
 800e358:	2301      	movs	r3, #1
 800e35a:	b430      	push	{r4, r5}
 800e35c:	4c08      	ldr	r4, [pc, #32]	; (800e380 <DmxSend::Start(unsigned int)+0x28>)
 800e35e:	fa03 f001 	lsl.w	r0, r3, r1
 800e362:	7822      	ldrb	r2, [r4, #0]
 800e364:	ea30 0502 	bics.w	r5, r0, r2
 800e368:	d007      	beq.n	800e37a <DmxSend::Start(unsigned int)+0x22>
 800e36a:	4302      	orrs	r2, r0
 800e36c:	4805      	ldr	r0, [pc, #20]	; (800e384 <DmxSend::Start(unsigned int)+0x2c>)
 800e36e:	7022      	strb	r2, [r4, #0]
 800e370:	6800      	ldr	r0, [r0, #0]
 800e372:	2200      	movs	r2, #0
 800e374:	bc30      	pop	{r4, r5}
 800e376:	f000 bda7 	b.w	800eec8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800e37a:	bc30      	pop	{r4, r5}
 800e37c:	4770      	bx	lr
 800e37e:	bf00      	nop
 800e380:	20001408 	andcs	r1, r0, r8, lsl #8
 800e384:	20001c60 	andcs	r1, r0, r0, ror #24

0800e388 <DmxSend::Stop(unsigned int)>:
 800e388:	2201      	movs	r2, #1
 800e38a:	b410      	push	{r4}
 800e38c:	4809      	ldr	r0, [pc, #36]	; (800e3b4 <DmxSend::Stop(unsigned int)+0x2c>)
 800e38e:	408a      	lsls	r2, r1
 800e390:	7803      	ldrb	r3, [r0, #0]
 800e392:	ea03 0402 	and.w	r4, r3, r2
 800e396:	439a      	bics	r2, r3
 800e398:	d109      	bne.n	800e3ae <DmxSend::Stop(unsigned int)+0x26>
 800e39a:	ea23 0304 	bic.w	r3, r3, r4
 800e39e:	7003      	strb	r3, [r0, #0]
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	4805      	ldr	r0, [pc, #20]	; (800e3b8 <DmxSend::Stop(unsigned int)+0x30>)
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	6800      	ldr	r0, [r0, #0]
 800e3a8:	bc10      	pop	{r4}
 800e3aa:	f000 bd8d 	b.w	800eec8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800e3ae:	bc10      	pop	{r4}
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop
 800e3b4:	20001408 	andcs	r1, r0, r8, lsl #8
 800e3b8:	20001c60 	andcs	r1, r0, r0, ror #24

0800e3bc <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800e3bc:	b11b      	cbz	r3, 800e3c6 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xa>
 800e3be:	4802      	ldr	r0, [pc, #8]	; (800e3c8 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xc>)
 800e3c0:	6800      	ldr	r0, [r0, #0]
 800e3c2:	f000 bf31 	b.w	800f228 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>
 800e3c6:	4770      	bx	lr
 800e3c8:	20001c60 	andcs	r1, r0, r0, ror #24

0800e3cc <DmxSend::Blackout(bool)>:
 800e3cc:	4b01      	ldr	r3, [pc, #4]	; (800e3d4 <DmxSend::Blackout(bool)+0x8>)
 800e3ce:	6818      	ldr	r0, [r3, #0]
 800e3d0:	f000 bf50 	b.w	800f274 <Dmx::Blackout()>
 800e3d4:	20001c60 	andcs	r1, r0, r0, ror #24

0800e3d8 <DmxSend::FullOn()>:
 800e3d8:	4b01      	ldr	r3, [pc, #4]	; (800e3e0 <DmxSend::FullOn()+0x8>)
 800e3da:	6818      	ldr	r0, [r3, #0]
 800e3dc:	f000 bf8e 	b.w	800f2fc <Dmx::FullOn()>
 800e3e0:	20001c60 	andcs	r1, r0, r0, ror #24

0800e3e4 <DmxSend::Print()>:
 800e3e4:	b510      	push	{r4, lr}
 800e3e6:	4c0e      	ldr	r4, [pc, #56]	; (800e420 <DmxSend::Print()+0x3c>)
 800e3e8:	480e      	ldr	r0, [pc, #56]	; (800e424 <DmxSend::Print()+0x40>)
 800e3ea:	f005 fdfb 	bl	8013fe4 <printf>
 800e3ee:	6823      	ldr	r3, [r4, #0]
 800e3f0:	480d      	ldr	r0, [pc, #52]	; (800e428 <DmxSend::Print()+0x44>)
 800e3f2:	6819      	ldr	r1, [r3, #0]
 800e3f4:	f005 fdf6 	bl	8013fe4 <printf>
 800e3f8:	6823      	ldr	r3, [r4, #0]
 800e3fa:	480c      	ldr	r0, [pc, #48]	; (800e42c <DmxSend::Print()+0x48>)
 800e3fc:	6859      	ldr	r1, [r3, #4]
 800e3fe:	f005 fdf1 	bl	8013fe4 <printf>
 800e402:	6823      	ldr	r3, [r4, #0]
 800e404:	490a      	ldr	r1, [pc, #40]	; (800e430 <DmxSend::Print()+0x4c>)
 800e406:	689b      	ldr	r3, [r3, #8]
 800e408:	480a      	ldr	r0, [pc, #40]	; (800e434 <DmxSend::Print()+0x50>)
 800e40a:	fbb1 f1f3 	udiv	r1, r1, r3
 800e40e:	f005 fde9 	bl	8013fe4 <printf>
 800e412:	6823      	ldr	r3, [r4, #0]
 800e414:	4808      	ldr	r0, [pc, #32]	; (800e438 <DmxSend::Print()+0x54>)
 800e416:	8a19      	ldrh	r1, [r3, #16]
 800e418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e41c:	f005 bde2 	b.w	8013fe4 <printf>
 800e420:	20001c60 	andcs	r1, r0, r0, ror #24
 800e424:	08017c95 	stmdaeq	r1, {r0, r2, r4, r7, sl, fp, ip, sp, lr}
 800e428:	08017c9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, sl, fp, ip, sp, lr}
 800e42c:	08017cb3 	stmdaeq	r1, {r0, r1, r4, r5, r7, sl, fp, ip, sp, lr}
 800e430:	000f4240 	andeq	r4, pc, r0, asr #4
 800e434:	08017cc7 	stmdaeq	r1, {r0, r1, r2, r6, r7, sl, fp, ip, sp, lr}
 800e438:	08017cdb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, sl, fp, ip, sp, lr}

0800e43c <DmxSend::~DmxSend()>:
 800e43c:	b510      	push	{r4, lr}
 800e43e:	4604      	mov	r4, r0
 800e440:	f005 f9d8 	bl	80137f4 <operator delete(void*)>
 800e444:	4620      	mov	r0, r4
 800e446:	bd10      	pop	{r4, pc}

0800e448 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 800e448:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e44a:	88c6      	ldrh	r6, [r0, #6]
 800e44c:	8885      	ldrh	r5, [r0, #4]
 800e44e:	42ae      	cmp	r6, r5
 800e450:	d216      	bcs.n	800e480 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 800e452:	4604      	mov	r4, r0
 800e454:	6800      	ldr	r0, [r0, #0]
 800e456:	1bad      	subs	r5, r5, r6
 800e458:	4430      	add	r0, r6
 800e45a:	7a26      	ldrb	r6, [r4, #8]
 800e45c:	b923      	cbnz	r3, 800e468 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 800e45e:	b926      	cbnz	r6, 800e46a <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 800e460:	9200      	str	r2, [sp, #0]
 800e462:	460b      	mov	r3, r1
 800e464:	4a09      	ldr	r2, [pc, #36]	; (800e48c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 800e466:	e003      	b.n	800e470 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800e468:	b166      	cbz	r6, 800e484 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 800e46a:	460b      	mov	r3, r1
 800e46c:	9200      	str	r2, [sp, #0]
 800e46e:	4a08      	ldr	r2, [pc, #32]	; (800e490 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 800e470:	4629      	mov	r1, r5
 800e472:	f005 fddf 	bl	8014034 <snprintf>
 800e476:	4285      	cmp	r5, r0
 800e478:	bfa2      	ittt	ge
 800e47a:	88e3      	ldrhge	r3, [r4, #6]
 800e47c:	181b      	addge	r3, r3, r0
 800e47e:	80e3      	strhge	r3, [r4, #6]
 800e480:	b002      	add	sp, #8
 800e482:	bd70      	pop	{r4, r5, r6, pc}
 800e484:	9200      	str	r2, [sp, #0]
 800e486:	460b      	mov	r3, r1
 800e488:	4a02      	ldr	r2, [pc, #8]	; (800e494 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 800e48a:	e7f1      	b.n	800e470 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800e48c:	0801691d 	stmdaeq	r1, {r0, r2, r3, r4, r8, fp, sp, lr}
 800e490:	08016914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr}
 800e494:	0801691e 	stmdaeq	r1, {r1, r2, r3, r4, r8, fp, sp, lr}

0800e498 <DmxParams::DmxParams(DmxParamsStore*)>:
 800e498:	6001      	str	r1, [r0, #0]
 800e49a:	2100      	movs	r1, #0
 800e49c:	4a03      	ldr	r2, [pc, #12]	; (800e4ac <DmxParams::DmxParams(DmxParamsStore*)+0x14>)
 800e49e:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800e4a2:	f64f 7228 	movw	r2, #65320	; 0xff28
 800e4a6:	8182      	strh	r2, [r0, #12]
 800e4a8:	4770      	bx	lr
 800e4aa:	bf00      	nop
 800e4ac:	000c00b0 	strheq	r0, [ip], -r0	; <UNPREDICTABLE>

0800e4b0 <DmxParams::Load()>:
 800e4b0:	b508      	push	{r3, lr}
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	4601      	mov	r1, r0
 800e4b6:	6043      	str	r3, [r0, #4]
 800e4b8:	6800      	ldr	r0, [r0, #0]
 800e4ba:	b120      	cbz	r0, 800e4c6 <DmxParams::Load()+0x16>
 800e4bc:	6803      	ldr	r3, [r0, #0]
 800e4be:	3104      	adds	r1, #4
 800e4c0:	68db      	ldr	r3, [r3, #12]
 800e4c2:	4798      	blx	r3
 800e4c4:	2001      	movs	r0, #1
 800e4c6:	bd08      	pop	{r3, pc}

0800e4c8 <DmxParams::Load(char const*, unsigned int)>:
 800e4c8:	6803      	ldr	r3, [r0, #0]
 800e4ca:	b1d3      	cbz	r3, 800e502 <DmxParams::Load(char const*, unsigned int)+0x3a>
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e4d0:	460d      	mov	r5, r1
 800e4d2:	4616      	mov	r6, r2
 800e4d4:	4604      	mov	r4, r0
 800e4d6:	6043      	str	r3, [r0, #4]
 800e4d8:	4602      	mov	r2, r0
 800e4da:	490a      	ldr	r1, [pc, #40]	; (800e504 <DmxParams::Load(char const*, unsigned int)+0x3c>)
 800e4dc:	4668      	mov	r0, sp
 800e4de:	f004 fc61 	bl	8012da4 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800e4e2:	4632      	mov	r2, r6
 800e4e4:	4629      	mov	r1, r5
 800e4e6:	4668      	mov	r0, sp
 800e4e8:	f004 fc60 	bl	8012dac <ReadConfigFile::Read(char const*, unsigned int)>
 800e4ec:	4621      	mov	r1, r4
 800e4ee:	f851 0b04 	ldr.w	r0, [r1], #4
 800e4f2:	6803      	ldr	r3, [r0, #0]
 800e4f4:	689b      	ldr	r3, [r3, #8]
 800e4f6:	4798      	blx	r3
 800e4f8:	4668      	mov	r0, sp
 800e4fa:	f004 fc56 	bl	8012daa <ReadConfigFile::~ReadConfigFile()>
 800e4fe:	b002      	add	sp, #8
 800e500:	bd70      	pop	{r4, r5, r6, pc}
 800e502:	4770      	bx	lr
 800e504:	0800e5d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, sl, sp, lr, pc}

0800e508 <DmxParams::callbackFunction(char const*)>:
 800e508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e50a:	460d      	mov	r5, r1
 800e50c:	4604      	mov	r4, r0
 800e50e:	492d      	ldr	r1, [pc, #180]	; (800e5c4 <DmxParams::callbackFunction(char const*)+0xbc>)
 800e510:	4628      	mov	r0, r5
 800e512:	f10d 0206 	add.w	r2, sp, #6
 800e516:	f004 fcd7 	bl	8012ec8 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800e51a:	b988      	cbnz	r0, 800e540 <DmxParams::callbackFunction(char const*)+0x38>
 800e51c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e520:	6863      	ldr	r3, [r4, #4]
 800e522:	2a5b      	cmp	r2, #91	; 0x5b
 800e524:	d907      	bls.n	800e536 <DmxParams::callbackFunction(char const*)+0x2e>
 800e526:	2ab0      	cmp	r2, #176	; 0xb0
 800e528:	d005      	beq.n	800e536 <DmxParams::callbackFunction(char const*)+0x2e>
 800e52a:	8122      	strh	r2, [r4, #8]
 800e52c:	f043 0301 	orr.w	r3, r3, #1
 800e530:	6063      	str	r3, [r4, #4]
 800e532:	b003      	add	sp, #12
 800e534:	bd30      	pop	{r4, r5, pc}
 800e536:	22b0      	movs	r2, #176	; 0xb0
 800e538:	f023 0301 	bic.w	r3, r3, #1
 800e53c:	8122      	strh	r2, [r4, #8]
 800e53e:	e7f7      	b.n	800e530 <DmxParams::callbackFunction(char const*)+0x28>
 800e540:	4628      	mov	r0, r5
 800e542:	4921      	ldr	r1, [pc, #132]	; (800e5c8 <DmxParams::callbackFunction(char const*)+0xc0>)
 800e544:	f10d 0206 	add.w	r2, sp, #6
 800e548:	f004 fcbe 	bl	8012ec8 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800e54c:	b968      	cbnz	r0, 800e56a <DmxParams::callbackFunction(char const*)+0x62>
 800e54e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e552:	6863      	ldr	r3, [r4, #4]
 800e554:	2a0c      	cmp	r2, #12
 800e556:	bf93      	iteet	ls
 800e558:	220c      	movls	r2, #12
 800e55a:	8162      	strhhi	r2, [r4, #10]
 800e55c:	f043 0302 	orrhi.w	r3, r3, #2
 800e560:	8162      	strhls	r2, [r4, #10]
 800e562:	bf98      	it	ls
 800e564:	f023 0302 	bicls.w	r3, r3, #2
 800e568:	e7e2      	b.n	800e530 <DmxParams::callbackFunction(char const*)+0x28>
 800e56a:	4628      	mov	r0, r5
 800e56c:	4917      	ldr	r1, [pc, #92]	; (800e5cc <DmxParams::callbackFunction(char const*)+0xc4>)
 800e56e:	f10d 0205 	add.w	r2, sp, #5
 800e572:	f004 fcc7 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e576:	b950      	cbnz	r0, 800e58e <DmxParams::callbackFunction(char const*)+0x86>
 800e578:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e57c:	6863      	ldr	r3, [r4, #4]
 800e57e:	2a28      	cmp	r2, #40	; 0x28
 800e580:	7322      	strb	r2, [r4, #12]
 800e582:	bf14      	ite	ne
 800e584:	f043 0304 	orrne.w	r3, r3, #4
 800e588:	f023 0304 	biceq.w	r3, r3, #4
 800e58c:	e7d0      	b.n	800e530 <DmxParams::callbackFunction(char const*)+0x28>
 800e58e:	4628      	mov	r0, r5
 800e590:	490f      	ldr	r1, [pc, #60]	; (800e5d0 <DmxParams::callbackFunction(char const*)+0xc8>)
 800e592:	f10d 0206 	add.w	r2, sp, #6
 800e596:	f004 fc97 	bl	8012ec8 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800e59a:	2800      	cmp	r0, #0
 800e59c:	d1c9      	bne.n	800e532 <DmxParams::callbackFunction(char const*)+0x2a>
 800e59e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e5a2:	6863      	ldr	r3, [r4, #4]
 800e5a4:	1e91      	subs	r1, r2, #2
 800e5a6:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 800e5aa:	bf2f      	iteee	cs
 800e5ac:	22ff      	movcs	r2, #255	; 0xff
 800e5ae:	0852      	lsrcc	r2, r2, #1
 800e5b0:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 800e5b4:	7362      	strbcc	r2, [r4, #13]
 800e5b6:	bf32      	itee	cc
 800e5b8:	f043 0308 	orrcc.w	r3, r3, #8
 800e5bc:	7362      	strbcs	r2, [r4, #13]
 800e5be:	f023 0308 	biccs.w	r3, r3, #8
 800e5c2:	e7b5      	b.n	800e530 <DmxParams::callbackFunction(char const*)+0x28>
 800e5c4:	08017d28 	stmdaeq	r1, {r3, r5, r8, sl, fp, ip, sp, lr}
 800e5c8:	08017d4c 	stmdaeq	r1, {r2, r3, r6, r8, sl, fp, ip, sp, lr}
 800e5cc:	08017d3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, sl, fp, ip, sp, lr}
 800e5d0:	08017d33 	stmdaeq	r1, {r0, r1, r4, r5, r8, sl, fp, ip, sp, lr}

0800e5d4 <DmxParams::staticCallbackFunction(void*, char const*)>:
 800e5d4:	f7ff bf98 	b.w	800e508 <DmxParams::callbackFunction(char const*)>

0800e5d8 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>:
 800e5d8:	b570      	push	{r4, r5, r6, lr}
 800e5da:	4604      	mov	r4, r0
 800e5dc:	4615      	mov	r5, r2
 800e5de:	461e      	mov	r6, r3
 800e5e0:	b086      	sub	sp, #24
 800e5e2:	3004      	adds	r0, #4
 800e5e4:	b369      	cbz	r1, 800e642 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x6a>
 800e5e6:	220a      	movs	r2, #10
 800e5e8:	f005 f9c7 	bl	801397a <memmove>
 800e5ec:	462a      	mov	r2, r5
 800e5ee:	4633      	mov	r3, r6
 800e5f0:	4932      	ldr	r1, [pc, #200]	; (800e6bc <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe4>)
 800e5f2:	a803      	add	r0, sp, #12
 800e5f4:	f004 fb36 	bl	8012c64 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800e5f8:	6863      	ldr	r3, [r4, #4]
 800e5fa:	8922      	ldrh	r2, [r4, #8]
 800e5fc:	4930      	ldr	r1, [pc, #192]	; (800e6c0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe8>)
 800e5fe:	f003 0301 	and.w	r3, r3, #1
 800e602:	a803      	add	r0, sp, #12
 800e604:	f7ff ff20 	bl	800e448 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800e608:	6863      	ldr	r3, [r4, #4]
 800e60a:	8962      	ldrh	r2, [r4, #10]
 800e60c:	492d      	ldr	r1, [pc, #180]	; (800e6c4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xec>)
 800e60e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e612:	a803      	add	r0, sp, #12
 800e614:	f7ff ff18 	bl	800e448 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800e618:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e61c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800e620:	7b23      	ldrb	r3, [r4, #12]
 800e622:	42aa      	cmp	r2, r5
 800e624:	6861      	ldr	r1, [r4, #4]
 800e626:	d221      	bcs.n	800e66c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x94>
 800e628:	9803      	ldr	r0, [sp, #12]
 800e62a:	0749      	lsls	r1, r1, #29
 800e62c:	4410      	add	r0, r2
 800e62e:	eba5 0502 	sub.w	r5, r5, r2
 800e632:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800e636:	d40b      	bmi.n	800e650 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x78>
 800e638:	b95a      	cbnz	r2, 800e652 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x7a>
 800e63a:	9300      	str	r3, [sp, #0]
 800e63c:	4a22      	ldr	r2, [pc, #136]	; (800e6c8 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf0>)
 800e63e:	4b23      	ldr	r3, [pc, #140]	; (800e6cc <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 800e640:	e00a      	b.n	800e658 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x80>
 800e642:	6823      	ldr	r3, [r4, #0]
 800e644:	4601      	mov	r1, r0
 800e646:	681a      	ldr	r2, [r3, #0]
 800e648:	4618      	mov	r0, r3
 800e64a:	68d2      	ldr	r2, [r2, #12]
 800e64c:	4790      	blx	r2
 800e64e:	e7cd      	b.n	800e5ec <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x14>
 800e650:	b37a      	cbz	r2, 800e6b2 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xda>
 800e652:	9300      	str	r3, [sp, #0]
 800e654:	4a1e      	ldr	r2, [pc, #120]	; (800e6d0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800e656:	4b1d      	ldr	r3, [pc, #116]	; (800e6cc <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 800e658:	4629      	mov	r1, r5
 800e65a:	f005 fceb 	bl	8014034 <snprintf>
 800e65e:	4285      	cmp	r5, r0
 800e660:	bfa2      	ittt	ge
 800e662:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800e666:	18c0      	addge	r0, r0, r3
 800e668:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800e66c:	7b62      	ldrb	r2, [r4, #13]
 800e66e:	6863      	ldr	r3, [r4, #4]
 800e670:	3201      	adds	r2, #1
 800e672:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e676:	4917      	ldr	r1, [pc, #92]	; (800e6d4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800e678:	0052      	lsls	r2, r2, #1
 800e67a:	a803      	add	r0, sp, #12
 800e67c:	f7ff fee4 	bl	800e448 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800e680:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e684:	b17b      	cbz	r3, 800e6a6 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xce>
 800e686:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e68a:	9b03      	ldr	r3, [sp, #12]
 800e68c:	4413      	add	r3, r2
 800e68e:	227d      	movs	r2, #125	; 0x7d
 800e690:	f803 2c01 	strb.w	r2, [r3, #-1]
 800e694:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e698:	9903      	ldr	r1, [sp, #12]
 800e69a:	54ca      	strb	r2, [r1, r3]
 800e69c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e6a6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e6aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6ac:	601a      	str	r2, [r3, #0]
 800e6ae:	b006      	add	sp, #24
 800e6b0:	bd70      	pop	{r4, r5, r6, pc}
 800e6b2:	9300      	str	r3, [sp, #0]
 800e6b4:	4a08      	ldr	r2, [pc, #32]	; (800e6d8 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800e6b6:	4b05      	ldr	r3, [pc, #20]	; (800e6cc <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 800e6b8:	e7ce      	b.n	800e658 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x80>
 800e6ba:	bf00      	nop
 800e6bc:	08017d55 	stmdaeq	r1, {r0, r2, r4, r6, r8, sl, fp, ip, sp, lr}
 800e6c0:	08017d28 	stmdaeq	r1, {r3, r5, r8, sl, fp, ip, sp, lr}
 800e6c4:	08017d4c 	stmdaeq	r1, {r2, r3, r6, r8, sl, fp, ip, sp, lr}
 800e6c8:	0801691d 	stmdaeq	r1, {r0, r2, r3, r4, r8, fp, sp, lr}
 800e6cc:	08017d3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, sl, fp, ip, sp, lr}
 800e6d0:	08016914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr}
 800e6d4:	08017d33 	stmdaeq	r1, {r0, r1, r4, r5, r8, sl, fp, ip, sp, lr}
 800e6d8:	0801691e 	stmdaeq	r1, {r1, r2, r3, r4, r8, fp, sp, lr}

0800e6dc <DmxParams::Save(char*, unsigned int, unsigned int&)>:
 800e6dc:	b513      	push	{r0, r1, r4, lr}
 800e6de:	6804      	ldr	r4, [r0, #0]
 800e6e0:	b914      	cbnz	r4, 800e6e8 <DmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800e6e2:	601c      	str	r4, [r3, #0]
 800e6e4:	b002      	add	sp, #8
 800e6e6:	bd10      	pop	{r4, pc}
 800e6e8:	9300      	str	r3, [sp, #0]
 800e6ea:	4613      	mov	r3, r2
 800e6ec:	460a      	mov	r2, r1
 800e6ee:	2100      	movs	r1, #0
 800e6f0:	f7ff ff72 	bl	800e5d8 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>
 800e6f4:	e7f6      	b.n	800e6e4 <DmxParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

0800e6f8 <DmxParams::Set(Dmx*)>:
 800e6f8:	b538      	push	{r3, r4, r5, lr}
 800e6fa:	6843      	ldr	r3, [r0, #4]
 800e6fc:	4604      	mov	r4, r0
 800e6fe:	07d8      	lsls	r0, r3, #31
 800e700:	460d      	mov	r5, r1
 800e702:	d503      	bpl.n	800e70c <DmxParams::Set(Dmx*)+0x14>
 800e704:	4628      	mov	r0, r5
 800e706:	8921      	ldrh	r1, [r4, #8]
 800e708:	f000 fd64 	bl	800f1d4 <Dmx::SetDmxBreakTime(unsigned int)>
 800e70c:	6863      	ldr	r3, [r4, #4]
 800e70e:	0799      	lsls	r1, r3, #30
 800e710:	d503      	bpl.n	800e71a <DmxParams::Set(Dmx*)+0x22>
 800e712:	4628      	mov	r0, r5
 800e714:	8961      	ldrh	r1, [r4, #10]
 800e716:	f000 fd67 	bl	800f1e8 <Dmx::SetDmxMabTime(unsigned int)>
 800e71a:	6863      	ldr	r3, [r4, #4]
 800e71c:	075a      	lsls	r2, r3, #29
 800e71e:	d507      	bpl.n	800e730 <DmxParams::Set(Dmx*)+0x38>
 800e720:	7b21      	ldrb	r1, [r4, #12]
 800e722:	b111      	cbz	r1, 800e72a <DmxParams::Set(Dmx*)+0x32>
 800e724:	4b08      	ldr	r3, [pc, #32]	; (800e748 <DmxParams::Set(Dmx*)+0x50>)
 800e726:	fbb3 f1f1 	udiv	r1, r3, r1
 800e72a:	4628      	mov	r0, r5
 800e72c:	f000 fd1e 	bl	800f16c <Dmx::SetDmxPeriodTime(unsigned int)>
 800e730:	6863      	ldr	r3, [r4, #4]
 800e732:	071b      	lsls	r3, r3, #28
 800e734:	d507      	bpl.n	800e746 <DmxParams::Set(Dmx*)+0x4e>
 800e736:	7b61      	ldrb	r1, [r4, #13]
 800e738:	4628      	mov	r0, r5
 800e73a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e73e:	3101      	adds	r1, #1
 800e740:	0049      	lsls	r1, r1, #1
 800e742:	f000 bd5b 	b.w	800f1fc <Dmx::SetDmxSlots(unsigned short)>
 800e746:	bd38      	pop	{r3, r4, r5, pc}
 800e748:	000f4240 	andeq	r4, pc, r0, asr #4

0800e74c <DmxParams::Dump()>:
 800e74c:	4770      	bx	lr
	...

0800e750 <Rdm::Receive(unsigned int)>:
 800e750:	4b02      	ldr	r3, [pc, #8]	; (800e75c <Rdm::Receive(unsigned int)+0xc>)
 800e752:	4601      	mov	r1, r0
 800e754:	6818      	ldr	r0, [r3, #0]
 800e756:	f000 be81 	b.w	800f45c <Dmx::RdmReceive(unsigned int)>
 800e75a:	bf00      	nop
 800e75c:	20001c60 	andcs	r1, r0, r0, ror #24

0800e760 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>:
 800e760:	4b02      	ldr	r3, [pc, #8]	; (800e76c <Rdm::ReceiveTimeOut(unsigned int, unsigned short)+0xc>)
 800e762:	460a      	mov	r2, r1
 800e764:	4601      	mov	r1, r0
 800e766:	6818      	ldr	r0, [r3, #0]
 800e768:	f000 be8a 	b.w	800f480 <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)>
 800e76c:	20001c60 	andcs	r1, r0, r0, ror #24

0800e770 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>:
 800e770:	2300      	movs	r3, #0
 800e772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e776:	4604      	mov	r4, r0
 800e778:	460e      	mov	r6, r1
 800e77a:	4617      	mov	r7, r2
 800e77c:	4d0b      	ldr	r5, [pc, #44]	; (800e7ac <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)+0x3c>)
 800e77e:	461a      	mov	r2, r3
 800e780:	4601      	mov	r1, r0
 800e782:	6828      	ldr	r0, [r5, #0]
 800e784:	f000 fba0 	bl	800eec8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800e788:	463b      	mov	r3, r7
 800e78a:	4632      	mov	r2, r6
 800e78c:	4621      	mov	r1, r4
 800e78e:	6828      	ldr	r0, [r5, #0]
 800e790:	f000 fe14 	bl	800f3bc <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>
 800e794:	2100      	movs	r1, #0
 800e796:	2004      	movs	r0, #4
 800e798:	f006 fef8 	bl	801558c <udelay(unsigned int, unsigned int)>
 800e79c:	2301      	movs	r3, #1
 800e79e:	4621      	mov	r1, r4
 800e7a0:	6828      	ldr	r0, [r5, #0]
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7a8:	f000 bb8e 	b.w	800eec8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800e7ac:	20001c60 	andcs	r1, r0, r0, ror #24

0800e7b0 <_port_to_uart(unsigned int)>:
 800e7b0:	4a03      	ldr	r2, [pc, #12]	; (800e7c0 <_port_to_uart(unsigned int)+0x10>)
 800e7b2:	4b04      	ldr	r3, [pc, #16]	; (800e7c4 <_port_to_uart(unsigned int)+0x14>)
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	bf14      	ite	ne
 800e7b8:	4610      	movne	r0, r2
 800e7ba:	4618      	moveq	r0, r3
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop
 800e7c0:	40017000 	andmi	r7, r1, r0
 800e7c4:	40004800 	andmi	r4, r0, r0, lsl #16

0800e7c8 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)>:
 800e7c8:	b570      	push	{r4, r5, r6, lr}
 800e7ca:	f3bf 8f5f 	dmb	sy
 800e7ce:	2508      	movs	r5, #8
 800e7d0:	4ba9      	ldr	r3, [pc, #676]	; (800ea78 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2b0>)
 800e7d2:	f8c3 5c10 	str.w	r5, [r3, #3088]	; 0xc10
 800e7d6:	6802      	ldr	r2, [r0, #0]
 800e7d8:	f012 0f02 	tst.w	r2, #2
 800e7dc:	4aa7      	ldr	r2, [pc, #668]	; (800ea7c <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2b4>)
 800e7de:	d017      	beq.n	800e810 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x48>
 800e7e0:	6804      	ldr	r4, [r0, #0]
 800e7e2:	f024 0402 	bic.w	r4, r4, #2
 800e7e6:	6004      	str	r4, [r0, #0]
 800e7e8:	6840      	ldr	r0, [r0, #4]
 800e7ea:	f44f 7004 	mov.w	r0, #528	; 0x210
 800e7ee:	fb00 2201 	mla	r2, r0, r1, r2
 800e7f2:	2100      	movs	r1, #0
 800e7f4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 800e7f8:	2102      	movs	r1, #2
 800e7fa:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
 800e7fe:	2210      	movs	r2, #16
 800e800:	f8c3 5c14 	str.w	r5, [r3, #3092]	; 0xc14
 800e804:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800e808:	2220      	movs	r2, #32
 800e80a:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800e80e:	bd70      	pop	{r4, r5, r6, pc}
 800e810:	f44f 7304 	mov.w	r3, #528	; 0x210
 800e814:	fb03 2401 	mla	r4, r3, r1, r2
 800e818:	6840      	ldr	r0, [r0, #4]
 800e81a:	f8d4 420c 	ldr.w	r4, [r4, #524]	; 0x20c
 800e81e:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800e822:	2c0a      	cmp	r4, #10
 800e824:	f200 811f 	bhi.w	800ea66 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x29e>
 800e828:	e8df f014 	tbh	[pc, r4, lsl #1]
 800e82c:	011d000b 	tsteq	sp, fp
 800e830:	011d001b 	tsteq	sp, fp, lsl r0
 800e834:	00750049 	rsbseq	r0, r5, r9, asr #32
 800e838:	00a40094 	umlaleq	r0, r4, r4, r0
 800e83c:	00e900d1 	ldrdeq	r0, [r9], #1	; <UNPREDICTABLE>
 800e840:	434b00ff 	movtmi	r0, #45311	; 0xb0ff
 800e844:	2408      	movs	r4, #8
 800e846:	18d1      	adds	r1, r2, r3
 800e848:	54d0      	strb	r0, [r2, r3]
 800e84a:	2301      	movs	r3, #1
 800e84c:	f8c1 420c 	str.w	r4, [r1, #524]	; 0x20c
 800e850:	f8a1 3204 	strh.w	r3, [r1, #516]	; 0x204
 800e854:	2208      	movs	r2, #8
 800e856:	4b88      	ldr	r3, [pc, #544]	; (800ea78 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2b0>)
 800e858:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800e85c:	f3bf 8f5f 	dmb	sy
 800e860:	e7d5      	b.n	800e80e <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x46>
 800e862:	b148      	cbz	r0, 800e878 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xb0>
 800e864:	28cc      	cmp	r0, #204	; 0xcc
 800e866:	f44f 7304 	mov.w	r3, #528	; 0x210
 800e86a:	d01e      	beq.n	800e8aa <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xe2>
 800e86c:	fb03 2301 	mla	r3, r3, r1, r2
 800e870:	2200      	movs	r2, #0
 800e872:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800e876:	e7ed      	b.n	800e854 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800e878:	434b      	muls	r3, r1
 800e87a:	18d4      	adds	r4, r2, r3
 800e87c:	54d0      	strb	r0, [r2, r3]
 800e87e:	2301      	movs	r3, #1
 800e880:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
 800e884:	4b7e      	ldr	r3, [pc, #504]	; (800ea80 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2b8>)
 800e886:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800e88a:	685a      	ldr	r2, [r3, #4]
 800e88c:	3201      	adds	r2, #1
 800e88e:	605a      	str	r2, [r3, #4]
 800e890:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e894:	f8d2 2424 	ldr.w	r2, [r2, #1060]	; 0x424
 800e898:	60da      	str	r2, [r3, #12]
 800e89a:	2304      	movs	r3, #4
 800e89c:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 800e8a0:	2210      	movs	r2, #16
 800e8a2:	4b75      	ldr	r3, [pc, #468]	; (800ea78 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2b0>)
 800e8a4:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 800e8a8:	e7d4      	b.n	800e854 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800e8aa:	434b      	muls	r3, r1
 800e8ac:	18d1      	adds	r1, r2, r3
 800e8ae:	54d0      	strb	r0, [r2, r3]
 800e8b0:	4b74      	ldr	r3, [pc, #464]	; (800ea84 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2bc>)
 800e8b2:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 800e8b6:	2305      	movs	r3, #5
 800e8b8:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
 800e8bc:	e7f0      	b.n	800e8a0 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xd8>
 800e8be:	fb03 2301 	mla	r3, r3, r1, r2
 800e8c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e8c6:	b294      	uxth	r4, r2
 800e8c8:	3201      	adds	r2, #1
 800e8ca:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800e8ce:	5518      	strb	r0, [r3, r4]
 800e8d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800e8d4:	d90b      	bls.n	800e8ee <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x126>
 800e8d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e8da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800e8de:	2200      	movs	r2, #0
 800e8e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800e8e4:	2210      	movs	r2, #16
 800e8e6:	4b64      	ldr	r3, [pc, #400]	; (800ea78 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2b0>)
 800e8e8:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800e8ec:	e7b2      	b.n	800e854 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800e8ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e8f2:	4a63      	ldr	r2, [pc, #396]	; (800ea80 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2b8>)
 800e8f4:	f8d0 4424 	ldr.w	r4, [r0, #1060]	; 0x424
 800e8f8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800e8fc:	68d3      	ldr	r3, [r2, #12]
 800e8fe:	2901      	cmp	r1, #1
 800e900:	ebc3 0344 	rsb	r3, r3, r4, lsl #1
 800e904:	f103 0304 	add.w	r3, r3, #4
 800e908:	60d4      	str	r4, [r2, #12]
 800e90a:	bf14      	ite	ne
 800e90c:	f8c0 3434 	strne.w	r3, [r0, #1076]	; 0x434
 800e910:	f8c0 3438 	streq.w	r3, [r0, #1080]	; 0x438
 800e914:	e79e      	b.n	800e854 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800e916:	fb03 2301 	mla	r3, r3, r1, r2
 800e91a:	f8b3 5204 	ldrh.w	r5, [r3, #516]	; 0x204
 800e91e:	f8b3 6206 	ldrh.w	r6, [r3, #518]	; 0x206
 800e922:	5558      	strb	r0, [r3, r5]
 800e924:	1c6c      	adds	r4, r5, #1
 800e926:	3d17      	subs	r5, #23
 800e928:	b2a4      	uxth	r4, r4
 800e92a:	4430      	add	r0, r6
 800e92c:	2de7      	cmp	r5, #231	; 0xe7
 800e92e:	f8a3 4204 	strh.w	r4, [r3, #516]	; 0x204
 800e932:	f8a3 0206 	strh.w	r0, [r3, #518]	; 0x206
 800e936:	d808      	bhi.n	800e94a <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x182>
 800e938:	7898      	ldrb	r0, [r3, #2]
 800e93a:	42a0      	cmp	r0, r4
 800e93c:	d105      	bne.n	800e94a <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x182>
 800e93e:	2206      	movs	r2, #6
 800e940:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800e944:	2220      	movs	r2, #32
 800e946:	4b4c      	ldr	r3, [pc, #304]	; (800ea78 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2b0>)
 800e948:	e7ac      	b.n	800e8a4 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xdc>
 800e94a:	2cff      	cmp	r4, #255	; 0xff
 800e94c:	d982      	bls.n	800e854 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800e94e:	f44f 7304 	mov.w	r3, #528	; 0x210
 800e952:	e78b      	b.n	800e86c <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xa4>
 800e954:	fb03 2301 	mla	r3, r3, r1, r2
 800e958:	f8b3 2204 	ldrh.w	r2, [r3, #516]	; 0x204
 800e95c:	5498      	strb	r0, [r3, r2]
 800e95e:	3201      	adds	r2, #1
 800e960:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800e964:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800e968:	eba2 2200 	sub.w	r2, r2, r0, lsl #8
 800e96c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800e970:	2207      	movs	r2, #7
 800e972:	e77e      	b.n	800e872 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xaa>
 800e974:	2320      	movs	r3, #32
 800e976:	4e40      	ldr	r6, [pc, #256]	; (800ea78 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2b0>)
 800e978:	f8c6 3c14 	str.w	r3, [r6, #3092]	; 0xc14
 800e97c:	f44f 7304 	mov.w	r3, #528	; 0x210
 800e980:	fb03 2301 	mla	r3, r3, r1, r2
 800e984:	f8b3 4204 	ldrh.w	r4, [r3, #516]	; 0x204
 800e988:	f8b3 5206 	ldrh.w	r5, [r3, #518]	; 0x206
 800e98c:	5518      	strb	r0, [r3, r4]
 800e98e:	3401      	adds	r4, #1
 800e990:	1a28      	subs	r0, r5, r0
 800e992:	b2a4      	uxth	r4, r4
 800e994:	b280      	uxth	r0, r0
 800e996:	f8a3 4204 	strh.w	r4, [r3, #516]	; 0x204
 800e99a:	f8a3 0206 	strh.w	r0, [r3, #518]	; 0x206
 800e99e:	b910      	cbnz	r0, 800e9a6 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x1de>
 800e9a0:	7858      	ldrb	r0, [r3, #1]
 800e9a2:	2801      	cmp	r0, #1
 800e9a4:	d007      	beq.n	800e9b6 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x1ee>
 800e9a6:	f44f 7304 	mov.w	r3, #528	; 0x210
 800e9aa:	2000      	movs	r0, #0
 800e9ac:	fb03 2301 	mla	r3, r3, r1, r2
 800e9b0:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 800e9b4:	e7cb      	b.n	800e94e <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x186>
 800e9b6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800e9ba:	f8a3 4204 	strh.w	r4, [r3, #516]	; 0x204
 800e9be:	4b32      	ldr	r3, [pc, #200]	; (800ea88 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2c0>)
 800e9c0:	6858      	ldr	r0, [r3, #4]
 800e9c2:	4b32      	ldr	r3, [pc, #200]	; (800ea8c <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2c4>)
 800e9c4:	6018      	str	r0, [r3, #0]
 800e9c6:	2310      	movs	r3, #16
 800e9c8:	f8c6 3c14 	str.w	r3, [r6, #3092]	; 0xc14
 800e9cc:	e7bf      	b.n	800e94e <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x186>
 800e9ce:	fb03 2301 	mla	r3, r3, r1, r2
 800e9d2:	f8b3 4204 	ldrh.w	r4, [r3, #516]	; 0x204
 800e9d6:	28aa      	cmp	r0, #170	; 0xaa
 800e9d8:	5518      	strb	r0, [r3, r4]
 800e9da:	f104 0401 	add.w	r4, r4, #1
 800e9de:	b2a4      	uxth	r4, r4
 800e9e0:	f8a3 4204 	strh.w	r4, [r3, #516]	; 0x204
 800e9e4:	d002      	beq.n	800e9ec <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x224>
 800e9e6:	2c09      	cmp	r4, #9
 800e9e8:	f47f af34 	bne.w	800e854 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800e9ec:	f44f 7304 	mov.w	r3, #528	; 0x210
 800e9f0:	fb03 2301 	mla	r3, r3, r1, r2
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800e9fa:	2209      	movs	r2, #9
 800e9fc:	e739      	b.n	800e872 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xaa>
 800e9fe:	fb03 2301 	mla	r3, r3, r1, r2
 800ea02:	f8b3 2204 	ldrh.w	r2, [r3, #516]	; 0x204
 800ea06:	5498      	strb	r0, [r3, r2]
 800ea08:	3201      	adds	r2, #1
 800ea0a:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800ea0e:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
 800ea12:	3201      	adds	r2, #1
 800ea14:	b292      	uxth	r2, r2
 800ea16:	2a0c      	cmp	r2, #12
 800ea18:	d002      	beq.n	800ea20 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x258>
 800ea1a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800ea1e:	e719      	b.n	800e854 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800ea20:	2200      	movs	r2, #0
 800ea22:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800ea26:	220a      	movs	r2, #10
 800ea28:	e723      	b.n	800e872 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0xaa>
 800ea2a:	fb03 2301 	mla	r3, r3, r1, r2
 800ea2e:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 800ea32:	f8b3 2204 	ldrh.w	r2, [r3, #516]	; 0x204
 800ea36:	3101      	adds	r1, #1
 800ea38:	b289      	uxth	r1, r1
 800ea3a:	5498      	strb	r0, [r3, r2]
 800ea3c:	3201      	adds	r2, #1
 800ea3e:	b292      	uxth	r2, r2
 800ea40:	2904      	cmp	r1, #4
 800ea42:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800ea46:	f8a3 1208 	strh.w	r1, [r3, #520]	; 0x208
 800ea4a:	f47f af03 	bne.w	800e854 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800ea4e:	2100      	movs	r1, #0
 800ea50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ea54:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 800ea58:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800ea5c:	4b0a      	ldr	r3, [pc, #40]	; (800ea88 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2c0>)
 800ea5e:	685a      	ldr	r2, [r3, #4]
 800ea60:	4b0a      	ldr	r3, [pc, #40]	; (800ea8c <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x2c4>)
 800ea62:	601a      	str	r2, [r3, #0]
 800ea64:	e6f6      	b.n	800e854 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800ea66:	fb03 2201 	mla	r2, r3, r1, r2
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 800ea70:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
 800ea74:	e6ee      	b.n	800e854 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)+0x8c>
 800ea76:	bf00      	nop
 800ea78:	40010000 	andmi	r0, r1, r0
 800ea7c:	2000140c 	andcs	r1, r0, ip, lsl #8
 800ea80:	20001c3c 	andcs	r1, r0, ip, lsr ip
 800ea84:	00cc0001 	sbceq	r0, ip, r1
 800ea88:	e0001000 	and	r1, r0, r0
 800ea8c:	20001c64 	andcs	r1, r0, r4, ror #24

0800ea90 <USART2_IRQHandler>:
 800ea90:	2100      	movs	r1, #0
 800ea92:	4801      	ldr	r0, [pc, #4]	; (800ea98 <USART2_IRQHandler+0x8>)
 800ea94:	f7ff be98 	b.w	800e7c8 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)>
 800ea98:	40004800 	andmi	r4, r0, r0, lsl #16

0800ea9c <USART5_IRQHandler>:
 800ea9c:	2101      	movs	r1, #1
 800ea9e:	4801      	ldr	r0, [pc, #4]	; (800eaa4 <USART5_IRQHandler+0x8>)
 800eaa0:	f7ff be92 	b.w	800e7c8 <irq_handler_dmx_rdm_input(unsigned int, unsigned int)>
 800eaa4:	40017000 	andmi	r7, r1, r0

0800eaa8 <TIMER1_IRQHandler>:
 800eaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaaa:	f3bf 8f5f 	dmb	sy
 800eaae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eab2:	2208      	movs	r2, #8
 800eab4:	4d3f      	ldr	r5, [pc, #252]	; (800ebb4 <TIMER1_IRQHandler+0x10c>)
 800eab6:	691e      	ldr	r6, [r3, #16]
 800eab8:	882c      	ldrh	r4, [r5, #0]
 800eaba:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800eabe:	07b1      	lsls	r1, r6, #30
 800eac0:	b2a4      	uxth	r4, r4
 800eac2:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 800eac6:	d52d      	bpl.n	800eb24 <TIMER1_IRQHandler+0x7c>
 800eac8:	07e2      	lsls	r2, r4, #31
 800eaca:	d50f      	bpl.n	800eaec <TIMER1_IRQHandler+0x44>
 800eacc:	882b      	ldrh	r3, [r5, #0]
 800eace:	4f3a      	ldr	r7, [pc, #232]	; (800ebb8 <TIMER1_IRQHandler+0x110>)
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ead6:	802b      	strh	r3, [r5, #0]
 800ead8:	2203      	movs	r2, #3
 800eada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eade:	2110      	movs	r1, #16
 800eae0:	4638      	mov	r0, r7
 800eae2:	f005 fdbd 	bl	8014660 <gpio_init>
 800eae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eaea:	617b      	str	r3, [r7, #20]
 800eaec:	07a3      	lsls	r3, r4, #30
 800eaee:	d50d      	bpl.n	800eb0c <TIMER1_IRQHandler+0x64>
 800eaf0:	882b      	ldrh	r3, [r5, #0]
 800eaf2:	4c31      	ldr	r4, [pc, #196]	; (800ebb8 <TIMER1_IRQHandler+0x110>)
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eafa:	802b      	strh	r3, [r5, #0]
 800eafc:	2203      	movs	r2, #3
 800eafe:	2340      	movs	r3, #64	; 0x40
 800eb00:	2110      	movs	r1, #16
 800eb02:	4620      	mov	r0, r4
 800eb04:	f005 fdac 	bl	8014660 <gpio_init>
 800eb08:	2340      	movs	r3, #64	; 0x40
 800eb0a:	6163      	str	r3, [r4, #20]
 800eb0c:	4631      	mov	r1, r6
 800eb0e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800eb12:	f006 f901 	bl	8014d18 <timer_interrupt_flag_clear>
 800eb16:	2208      	movs	r2, #8
 800eb18:	4b28      	ldr	r3, [pc, #160]	; (800ebbc <TIMER1_IRQHandler+0x114>)
 800eb1a:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800eb1e:	f3bf 8f5f 	dmb	sy
 800eb22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb24:	0777      	lsls	r7, r6, #29
 800eb26:	d511      	bpl.n	800eb4c <TIMER1_IRQHandler+0xa4>
 800eb28:	05e5      	lsls	r5, r4, #23
 800eb2a:	d506      	bpl.n	800eb3a <TIMER1_IRQHandler+0x92>
 800eb2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb30:	2203      	movs	r2, #3
 800eb32:	2118      	movs	r1, #24
 800eb34:	4820      	ldr	r0, [pc, #128]	; (800ebb8 <TIMER1_IRQHandler+0x110>)
 800eb36:	f005 fd93 	bl	8014660 <gpio_init>
 800eb3a:	05a0      	lsls	r0, r4, #22
 800eb3c:	d5e6      	bpl.n	800eb0c <TIMER1_IRQHandler+0x64>
 800eb3e:	2340      	movs	r3, #64	; 0x40
 800eb40:	2203      	movs	r2, #3
 800eb42:	2118      	movs	r1, #24
 800eb44:	481c      	ldr	r0, [pc, #112]	; (800ebb8 <TIMER1_IRQHandler+0x110>)
 800eb46:	f005 fd8b 	bl	8014660 <gpio_init>
 800eb4a:	e7df      	b.n	800eb0c <TIMER1_IRQHandler+0x64>
 800eb4c:	0731      	lsls	r1, r6, #28
 800eb4e:	d5dd      	bpl.n	800eb0c <TIMER1_IRQHandler+0x64>
 800eb50:	05e2      	lsls	r2, r4, #23
 800eb52:	d511      	bpl.n	800eb78 <TIMER1_IRQHandler+0xd0>
 800eb54:	4b1a      	ldr	r3, [pc, #104]	; (800ebc0 <TIMER1_IRQHandler+0x118>)
 800eb56:	2180      	movs	r1, #128	; 0x80
 800eb58:	69da      	ldr	r2, [r3, #28]
 800eb5a:	481a      	ldr	r0, [pc, #104]	; (800ebc4 <TIMER1_IRQHandler+0x11c>)
 800eb5c:	f022 0201 	bic.w	r2, r2, #1
 800eb60:	61da      	str	r2, [r3, #28]
 800eb62:	4a19      	ldr	r2, [pc, #100]	; (800ebc8 <TIMER1_IRQHandler+0x120>)
 800eb64:	629a      	str	r2, [r3, #40]	; 0x28
 800eb66:	f8b2 2202 	ldrh.w	r2, [r2, #514]	; 0x202
 800eb6a:	621a      	str	r2, [r3, #32]
 800eb6c:	69da      	ldr	r2, [r3, #28]
 800eb6e:	f042 0201 	orr.w	r2, r2, #1
 800eb72:	61da      	str	r2, [r3, #28]
 800eb74:	f006 f99c 	bl	8014eb0 <usart_dma_transmit_config>
 800eb78:	05a3      	lsls	r3, r4, #22
 800eb7a:	d5c7      	bpl.n	800eb0c <TIMER1_IRQHandler+0x64>
 800eb7c:	4b10      	ldr	r3, [pc, #64]	; (800ebc0 <TIMER1_IRQHandler+0x118>)
 800eb7e:	4813      	ldr	r0, [pc, #76]	; (800ebcc <TIMER1_IRQHandler+0x124>)
 800eb80:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
 800eb84:	f022 0201 	bic.w	r2, r2, #1
 800eb88:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
 800eb8c:	4a0e      	ldr	r2, [pc, #56]	; (800ebc8 <TIMER1_IRQHandler+0x120>)
 800eb8e:	f502 7101 	add.w	r1, r2, #516	; 0x204
 800eb92:	f8b2 2406 	ldrh.w	r2, [r2, #1030]	; 0x406
 800eb96:	f8c3 148c 	str.w	r1, [r3, #1164]	; 0x48c
 800eb9a:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
 800eb9e:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
 800eba2:	2180      	movs	r1, #128	; 0x80
 800eba4:	f042 0201 	orr.w	r2, r2, #1
 800eba8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
 800ebac:	f006 f980 	bl	8014eb0 <usart_dma_transmit_config>
 800ebb0:	e7ac      	b.n	800eb0c <TIMER1_IRQHandler+0x64>
 800ebb2:	bf00      	nop
 800ebb4:	20001c5c 	andcs	r1, r0, ip, asr ip
 800ebb8:	40011000 	andmi	r1, r1, r0
 800ebbc:	40010000 	andmi	r0, r1, r0
 800ebc0:	40020000 	andmi	r0, r2, r0
 800ebc4:	40004800 	andmi	r4, r0, r0, lsl #16
 800ebc8:	2000182c 	andcs	r1, r0, ip, lsr #16
 800ebcc:	40017000 	andmi	r7, r1, r0

0800ebd0 <TIMER2_IRQHandler>:
 800ebd0:	b508      	push	{r3, lr}
 800ebd2:	f3bf 8f5f 	dmb	sy
 800ebd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ebda:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 800ebde:	f011 0202 	ands.w	r2, r1, #2
 800ebe2:	d017      	beq.n	800ec14 <TIMER2_IRQHandler+0x44>
 800ebe4:	4b13      	ldr	r3, [pc, #76]	; (800ec34 <TIMER2_IRQHandler+0x64>)
 800ebe6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800ebea:	2a04      	cmp	r2, #4
 800ebec:	d10c      	bne.n	800ec08 <TIMER2_IRQHandler+0x38>
 800ebee:	2200      	movs	r2, #0
 800ebf0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800ebf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ebf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ebfc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800ec00:	2210      	movs	r2, #16
 800ec02:	4b0d      	ldr	r3, [pc, #52]	; (800ec38 <TIMER2_IRQHandler+0x68>)
 800ec04:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800ec08:	480c      	ldr	r0, [pc, #48]	; (800ec3c <TIMER2_IRQHandler+0x6c>)
 800ec0a:	f006 f885 	bl	8014d18 <timer_interrupt_flag_clear>
 800ec0e:	f3bf 8f5f 	dmb	sy
 800ec12:	bd08      	pop	{r3, pc}
 800ec14:	074b      	lsls	r3, r1, #29
 800ec16:	d5f7      	bpl.n	800ec08 <TIMER2_IRQHandler+0x38>
 800ec18:	4b06      	ldr	r3, [pc, #24]	; (800ec34 <TIMER2_IRQHandler+0x64>)
 800ec1a:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
 800ec1e:	2804      	cmp	r0, #4
 800ec20:	bf01      	itttt	eq
 800ec22:	f8c3 241c 	streq.w	r2, [r3, #1052]	; 0x41c
 800ec26:	f8d3 2414 	ldreq.w	r2, [r3, #1044]	; 0x414
 800ec2a:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 800ec2e:	f8c3 2414 	streq.w	r2, [r3, #1044]	; 0x414
 800ec32:	e7e9      	b.n	800ec08 <TIMER2_IRQHandler+0x38>
 800ec34:	2000140c 	andcs	r1, r0, ip, lsl #8
 800ec38:	40010000 	andmi	r0, r1, r0
 800ec3c:	40000400 	andmi	r0, r0, r0, lsl #8

0800ec40 <TIMER3_IRQHandler>:
 800ec40:	b508      	push	{r3, lr}
 800ec42:	f3bf 8f5f 	dmb	sy
 800ec46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ec4a:	4804      	ldr	r0, [pc, #16]	; (800ec5c <TIMER3_IRQHandler+0x1c>)
 800ec4c:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 800ec50:	f006 f862 	bl	8014d18 <timer_interrupt_flag_clear>
 800ec54:	f3bf 8f5f 	dmb	sy
 800ec58:	bd08      	pop	{r3, pc}
 800ec5a:	bf00      	nop
 800ec5c:	40000800 	andmi	r0, r0, r0, lsl #16

0800ec60 <TIMER6_IRQHandler>:
 800ec60:	b508      	push	{r3, lr}
 800ec62:	f3bf 8f5f 	dmb	sy
 800ec66:	4b0a      	ldr	r3, [pc, #40]	; (800ec90 <TIMER6_IRQHandler+0x30>)
 800ec68:	480a      	ldr	r0, [pc, #40]	; (800ec94 <TIMER6_IRQHandler+0x34>)
 800ec6a:	685a      	ldr	r2, [r3, #4]
 800ec6c:	6899      	ldr	r1, [r3, #8]
 800ec6e:	1a52      	subs	r2, r2, r1
 800ec70:	601a      	str	r2, [r3, #0]
 800ec72:	685a      	ldr	r2, [r3, #4]
 800ec74:	609a      	str	r2, [r3, #8]
 800ec76:	695a      	ldr	r2, [r3, #20]
 800ec78:	6999      	ldr	r1, [r3, #24]
 800ec7a:	1a52      	subs	r2, r2, r1
 800ec7c:	611a      	str	r2, [r3, #16]
 800ec7e:	695a      	ldr	r2, [r3, #20]
 800ec80:	2101      	movs	r1, #1
 800ec82:	619a      	str	r2, [r3, #24]
 800ec84:	f006 f848 	bl	8014d18 <timer_interrupt_flag_clear>
 800ec88:	f3bf 8f5f 	dmb	sy
 800ec8c:	bd08      	pop	{r3, pc}
 800ec8e:	bf00      	nop
 800ec90:	20001c3c 	andcs	r1, r0, ip, lsr ip
 800ec94:	40001400 	andmi	r1, r0, r0, lsl #8

0800ec98 <Dmx::ClearData(unsigned int)>:
 800ec98:	f44f 7301 	mov.w	r3, #516	; 0x204
 800ec9c:	b510      	push	{r4, lr}
 800ec9e:	2400      	movs	r4, #0
 800eca0:	4a08      	ldr	r2, [pc, #32]	; (800ecc4 <Dmx::ClearData(unsigned int)+0x2c>)
 800eca2:	fb03 2301 	mla	r3, r3, r1, r2
 800eca6:	f203 2002 	addw	r0, r3, #514	; 0x202
 800ecaa:	f823 4b02 	strh.w	r4, [r3], #2
 800ecae:	4283      	cmp	r3, r0
 800ecb0:	d1fb      	bne.n	800ecaa <Dmx::ClearData(unsigned int)+0x12>
 800ecb2:	f44f 7301 	mov.w	r3, #516	; 0x204
 800ecb6:	fb03 2201 	mla	r2, r3, r1, r2
 800ecba:	f240 2301 	movw	r3, #513	; 0x201
 800ecbe:	f8a2 3202 	strh.w	r3, [r2, #514]	; 0x202
 800ecc2:	bd10      	pop	{r4, pc}
 800ecc4:	2000182c 	andcs	r1, r0, ip, lsr #16

0800ecc8 <Dmx::StartData(unsigned int, unsigned int)>:
 800ecc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecca:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800ecce:	6943      	ldr	r3, [r0, #20]
 800ecd0:	460c      	mov	r4, r1
 800ecd2:	4615      	mov	r5, r2
 800ecd4:	b085      	sub	sp, #20
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d16c      	bne.n	800edb4 <Dmx::StartData(unsigned int, unsigned int)+0xec>
 800ecda:	4e4a      	ldr	r6, [pc, #296]	; (800ee04 <Dmx::StartData(unsigned int, unsigned int)+0x13c>)
 800ecdc:	8834      	ldrh	r4, [r6, #0]
 800ecde:	b2a4      	uxth	r4, r4
 800ece0:	2c00      	cmp	r4, #0
 800ece2:	d15b      	bne.n	800ed9c <Dmx::StartData(unsigned int, unsigned int)+0xd4>
 800ece4:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800ece8:	f005 fd52 	bl	8014790 <rcu_periph_clock_enable>
 800ecec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ecf0:	f005 feb2 	bl	8014a58 <timer_deinit>
 800ecf4:	2377      	movs	r3, #119	; 0x77
 800ecf6:	9300      	str	r3, [sp, #0]
 800ecf8:	4b43      	ldr	r3, [pc, #268]	; (800ee08 <Dmx::StartData(unsigned int, unsigned int)+0x140>)
 800ecfa:	4669      	mov	r1, sp
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ed02:	9302      	str	r3, [sp, #8]
 800ed04:	f8ad 4004 	strh.w	r4, [sp, #4]
 800ed08:	f8ad 400c 	strh.w	r4, [sp, #12]
 800ed0c:	f88d 400e 	strb.w	r4, [sp, #14]
 800ed10:	f005 ff48 	bl	8014ba4 <timer_init>
 800ed14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ed18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ed1c:	f005 ffff 	bl	8014d1e <timer_flag_clear>
 800ed20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ed24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ed28:	f005 fff6 	bl	8014d18 <timer_interrupt_flag_clear>
 800ed2c:	2210      	movs	r2, #16
 800ed2e:	4621      	mov	r1, r4
 800ed30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ed34:	f005 ff93 	bl	8014c5e <timer_channel_output_mode_config>
 800ed38:	2210      	movs	r2, #16
 800ed3a:	2101      	movs	r1, #1
 800ed3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ed40:	f005 ff8d 	bl	8014c5e <timer_channel_output_mode_config>
 800ed44:	4f31      	ldr	r7, [pc, #196]	; (800ee0c <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 800ed46:	2210      	movs	r2, #16
 800ed48:	2102      	movs	r1, #2
 800ed4a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ed4e:	f005 ff86 	bl	8014c5e <timer_channel_output_mode_config>
 800ed52:	4622      	mov	r2, r4
 800ed54:	4621      	mov	r1, r4
 800ed56:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ed5a:	f005 ffa6 	bl	8014caa <timer_channel_output_pulse_value_config>
 800ed5e:	2101      	movs	r1, #1
 800ed60:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ed64:	883a      	ldrh	r2, [r7, #0]
 800ed66:	f005 ffa0 	bl	8014caa <timer_channel_output_pulse_value_config>
 800ed6a:	4b29      	ldr	r3, [pc, #164]	; (800ee10 <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 800ed6c:	683a      	ldr	r2, [r7, #0]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	2102      	movs	r1, #2
 800ed72:	441a      	add	r2, r3
 800ed74:	b292      	uxth	r2, r2
 800ed76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ed7a:	f005 ff96 	bl	8014caa <timer_channel_output_pulse_value_config>
 800ed7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ed82:	210e      	movs	r1, #14
 800ed84:	f005 ffc4 	bl	8014d10 <timer_interrupt_enable>
 800ed88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed8c:	4b21      	ldr	r3, [pc, #132]	; (800ee14 <Dmx::StartData(unsigned int, unsigned int)+0x14c>)
 800ed8e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ed92:	f883 431c 	strb.w	r4, [r3, #796]	; 0x31c
 800ed96:	601a      	str	r2, [r3, #0]
 800ed98:	f005 ff5c 	bl	8014c54 <timer_enable>
 800ed9c:	2201      	movs	r2, #1
 800ed9e:	8831      	ldrh	r1, [r6, #0]
 800eda0:	fa02 f305 	lsl.w	r3, r2, r5
 800eda4:	430b      	orrs	r3, r1
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	8033      	strh	r3, [r6, #0]
 800edaa:	4b1b      	ldr	r3, [pc, #108]	; (800ee18 <Dmx::StartData(unsigned int, unsigned int)+0x150>)
 800edac:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800edb0:	b005      	add	sp, #20
 800edb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edb4:	f44f 7204 	mov.w	r2, #528	; 0x210
 800edb8:	4b18      	ldr	r3, [pc, #96]	; (800ee1c <Dmx::StartData(unsigned int, unsigned int)+0x154>)
 800edba:	fb02 3305 	mla	r3, r2, r5, r3
 800edbe:	2200      	movs	r2, #0
 800edc0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800edc4:	2107      	movs	r1, #7
 800edc6:	4620      	mov	r0, r4
 800edc8:	f006 f878 	bl	8014ebc <usart_flag_get>
 800edcc:	2800      	cmp	r0, #0
 800edce:	d0f9      	beq.n	800edc4 <Dmx::StartData(unsigned int, unsigned int)+0xfc>
 800edd0:	4620      	mov	r0, r4
 800edd2:	4913      	ldr	r1, [pc, #76]	; (800ee20 <Dmx::StartData(unsigned int, unsigned int)+0x158>)
 800edd4:	f006 f894 	bl	8014f00 <usart_interrupt_flag_clear>
 800edd8:	f240 3105 	movw	r1, #773	; 0x305
 800eddc:	4620      	mov	r0, r4
 800edde:	f006 f878 	bl	8014ed2 <usart_interrupt_enable>
 800ede2:	2202      	movs	r2, #2
 800ede4:	4b0c      	ldr	r3, [pc, #48]	; (800ee18 <Dmx::StartData(unsigned int, unsigned int)+0x150>)
 800ede6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800edea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800edee:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800edf2:	b925      	cbnz	r5, 800edfe <Dmx::StartData(unsigned int, unsigned int)+0x136>
 800edf4:	f042 0202 	orr.w	r2, r2, #2
 800edf8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 800edfc:	e7d8      	b.n	800edb0 <Dmx::StartData(unsigned int, unsigned int)+0xe8>
 800edfe:	f042 0204 	orr.w	r2, r2, #4
 800ee02:	e7f9      	b.n	800edf8 <Dmx::StartData(unsigned int, unsigned int)+0x130>
 800ee04:	20001c5c 	andcs	r1, r0, ip, asr ip
 800ee08:	20000000 	andcs	r0, r0, r0
 800ee0c:	20000008 	andcs	r0, r0, r8
 800ee10:	20000004 	andcs	r0, r0, r4
 800ee14:	e000e100 	and	lr, r0, r0, lsl #2
 800ee18:	20001c34 	andcs	r1, r0, r4, lsr ip
 800ee1c:	2000140c 	andcs	r1, r0, ip, lsl #8
 800ee20:	00050305 	andeq	r0, r5, r5, lsl #6

0800ee24 <Dmx::StopData(unsigned int, unsigned int)>:
 800ee24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee28:	4f24      	ldr	r7, [pc, #144]	; (800eebc <Dmx::StopData(unsigned int, unsigned int)+0x98>)
 800ee2a:	4688      	mov	r8, r1
 800ee2c:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 800ee30:	4614      	mov	r4, r2
 800ee32:	b333      	cbz	r3, 800ee82 <Dmx::StopData(unsigned int, unsigned int)+0x5e>
 800ee34:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800ee38:	6943      	ldr	r3, [r0, #20]
 800ee3a:	bb23      	cbnz	r3, 800ee86 <Dmx::StopData(unsigned int, unsigned int)+0x62>
 800ee3c:	2601      	movs	r6, #1
 800ee3e:	4d20      	ldr	r5, [pc, #128]	; (800eec0 <Dmx::StopData(unsigned int, unsigned int)+0x9c>)
 800ee40:	fa06 f202 	lsl.w	r2, r6, r2
 800ee44:	882b      	ldrh	r3, [r5, #0]
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	ea23 0302 	bic.w	r3, r3, r2
 800ee4c:	802b      	strh	r3, [r5, #0]
 800ee4e:	f3bf 8f5f 	dmb	sy
 800ee52:	882b      	ldrh	r3, [r5, #0]
 800ee54:	f104 0208 	add.w	r2, r4, #8
 800ee58:	b29b      	uxth	r3, r3
 800ee5a:	4096      	lsls	r6, r2
 800ee5c:	ea36 0303 	bics.w	r3, r6, r3
 800ee60:	d105      	bne.n	800ee6e <Dmx::StopData(unsigned int, unsigned int)+0x4a>
 800ee62:	2107      	movs	r1, #7
 800ee64:	4640      	mov	r0, r8
 800ee66:	f006 f829 	bl	8014ebc <usart_flag_get>
 800ee6a:	2801      	cmp	r0, #1
 800ee6c:	d1f9      	bne.n	800ee62 <Dmx::StopData(unsigned int, unsigned int)+0x3e>
 800ee6e:	882b      	ldrh	r3, [r5, #0]
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	ea23 0306 	bic.w	r3, r3, r6
 800ee76:	802b      	strh	r3, [r5, #0]
 800ee78:	f3bf 8f4f 	dsb	sy
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
 800ee82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee86:	f240 3105 	movw	r1, #773	; 0x305
 800ee8a:	4640      	mov	r0, r8
 800ee8c:	f006 f82c 	bl	8014ee8 <usart_interrupt_disable>
 800ee90:	f44f 7204 	mov.w	r2, #528	; 0x210
 800ee94:	4b0b      	ldr	r3, [pc, #44]	; (800eec4 <Dmx::StopData(unsigned int, unsigned int)+0xa0>)
 800ee96:	fb02 3304 	mla	r3, r2, r4, r3
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800eea0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eea4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800eea8:	b924      	cbnz	r4, 800eeb4 <Dmx::StopData(unsigned int, unsigned int)+0x90>
 800eeaa:	f022 0202 	bic.w	r2, r2, #2
 800eeae:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 800eeb2:	e7e3      	b.n	800ee7c <Dmx::StopData(unsigned int, unsigned int)+0x58>
 800eeb4:	f022 0204 	bic.w	r2, r2, #4
 800eeb8:	e7f9      	b.n	800eeae <Dmx::StopData(unsigned int, unsigned int)+0x8a>
 800eeba:	bf00      	nop
 800eebc:	20001c34 	andcs	r1, r0, r4, lsr ip
 800eec0:	20001c5c 	andcs	r1, r0, ip, asr ip
 800eec4:	2000140c 	andcs	r1, r0, ip, lsl #8

0800eec8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>:
 800eec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eecc:	4605      	mov	r5, r0
 800eece:	4616      	mov	r6, r2
 800eed0:	4608      	mov	r0, r1
 800eed2:	4698      	mov	r8, r3
 800eed4:	f7ff fc6c 	bl	800e7b0 <_port_to_uart(unsigned int)>
 800eed8:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800eedc:	695a      	ldr	r2, [r3, #20]
 800eede:	460c      	mov	r4, r1
 800eee0:	42b2      	cmp	r2, r6
 800eee2:	4607      	mov	r7, r0
 800eee4:	d01c      	beq.n	800ef20 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>
 800eee6:	460a      	mov	r2, r1
 800eee8:	615e      	str	r6, [r3, #20]
 800eeea:	4601      	mov	r1, r0
 800eeec:	4628      	mov	r0, r5
 800eeee:	f7ff ff99 	bl	800ee24 <Dmx::StopData(unsigned int, unsigned int)>
 800eef2:	b95e      	cbnz	r6, 800ef0c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x44>
 800eef4:	4b13      	ldr	r3, [pc, #76]	; (800ef44 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x7c>)
 800eef6:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 800eefa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	6113      	str	r3, [r2, #16]
 800ef02:	f1b8 0f00 	cmp.w	r8, #0
 800ef06:	d10e      	bne.n	800ef26 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x5e>
 800ef08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef0c:	2e01      	cmp	r6, #1
 800ef0e:	d1f8      	bne.n	800ef02 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 800ef10:	4b0c      	ldr	r3, [pc, #48]	; (800ef44 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x7c>)
 800ef12:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
 800ef16:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef1a:	685b      	ldr	r3, [r3, #4]
 800ef1c:	6153      	str	r3, [r2, #20]
 800ef1e:	e7f0      	b.n	800ef02 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 800ef20:	f1b8 0f00 	cmp.w	r8, #0
 800ef24:	d006      	beq.n	800ef34 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x6c>
 800ef26:	4622      	mov	r2, r4
 800ef28:	4639      	mov	r1, r7
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef30:	f7ff beca 	b.w	800ecc8 <Dmx::StartData(unsigned int, unsigned int)>
 800ef34:	460a      	mov	r2, r1
 800ef36:	4601      	mov	r1, r0
 800ef38:	4628      	mov	r0, r5
 800ef3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef3e:	f7ff bf71 	b.w	800ee24 <Dmx::StopData(unsigned int, unsigned int)>
 800ef42:	bf00      	nop
 800ef44:	08017d60 	stmdaeq	r1, {r5, r6, r8, sl, fp, ip, sp, lr}

0800ef48 <Dmx::Dmx()>:
 800ef48:	230c      	movs	r3, #12
 800ef4a:	225c      	movs	r2, #92	; 0x5c
 800ef4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef50:	e9c0 2300 	strd	r2, r3, [r0]
 800ef54:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800ef58:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800ef5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef60:	2400      	movs	r4, #0
 800ef62:	4606      	mov	r6, r0
 800ef64:	8203      	strh	r3, [r0, #16]
 800ef66:	4b73      	ldr	r3, [pc, #460]	; (800f134 <Dmx::Dmx()+0x1ec>)
 800ef68:	4f73      	ldr	r7, [pc, #460]	; (800f138 <Dmx::Dmx()+0x1f0>)
 800ef6a:	6018      	str	r0, [r3, #0]
 800ef6c:	4b73      	ldr	r3, [pc, #460]	; (800f13c <Dmx::Dmx()+0x1f4>)
 800ef6e:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800f140 <Dmx::Dmx()+0x1f8>
 800ef72:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 800f144 <Dmx::Dmx()+0x1fc>
 800ef76:	b08b      	sub	sp, #44	; 0x2c
 800ef78:	801c      	strh	r4, [r3, #0]
 800ef7a:	2500      	movs	r5, #0
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2203      	movs	r2, #3
 800ef80:	2110      	movs	r1, #16
 800ef82:	f857 0b08 	ldr.w	r0, [r7], #8
 800ef86:	f005 fb6b 	bl	8014660 <gpio_init>
 800ef8a:	4621      	mov	r1, r4
 800ef8c:	4630      	mov	r0, r6
 800ef8e:	f7ff fe83 	bl	800ec98 <Dmx::ClearData(unsigned int)>
 800ef92:	462b      	mov	r3, r5
 800ef94:	2201      	movs	r2, #1
 800ef96:	4630      	mov	r0, r6
 800ef98:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
 800ef9c:	f7ff ff94 	bl	800eec8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800efa0:	f44f 7304 	mov.w	r3, #528	; 0x210
 800efa4:	fb03 8304 	mla	r3, r3, r4, r8
 800efa8:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 800efac:	2c00      	cmp	r4, #0
 800efae:	f000 80be 	beq.w	800f12e <Dmx::Dmx()+0x1e6>
 800efb2:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 800efb6:	f44f 7780 	mov.w	r7, #256	; 0x100
 800efba:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800efbe:	f005 fbe7 	bl	8014790 <rcu_periph_clock_enable>
 800efc2:	f240 5001 	movw	r0, #1281	; 0x501
 800efc6:	f005 fbe3 	bl	8014790 <rcu_periph_clock_enable>
 800efca:	4621      	mov	r1, r4
 800efcc:	485e      	ldr	r0, [pc, #376]	; (800f148 <Dmx::Dmx()+0x200>)
 800efce:	f005 fa5d 	bl	801448c <dma_deinit>
 800efd2:	4b5e      	ldr	r3, [pc, #376]	; (800f14c <Dmx::Dmx()+0x204>)
 800efd4:	aa03      	add	r2, sp, #12
 800efd6:	4621      	mov	r1, r4
 800efd8:	485b      	ldr	r0, [pc, #364]	; (800f148 <Dmx::Dmx()+0x200>)
 800efda:	e9cd 3503 	strd	r3, r5, [sp, #12]
 800efde:	f8cd 8020 	str.w	r8, [sp, #32]
 800efe2:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800efe6:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
 800efea:	9506      	str	r5, [sp, #24]
 800efec:	f005 fa6c 	bl	80144c8 <dma_init>
 800eff0:	4621      	mov	r1, r4
 800eff2:	4855      	ldr	r0, [pc, #340]	; (800f148 <Dmx::Dmx()+0x200>)
 800eff4:	f005 fa99 	bl	801452a <dma_circulation_disable>
 800eff8:	4621      	mov	r1, r4
 800effa:	4853      	ldr	r0, [pc, #332]	; (800f148 <Dmx::Dmx()+0x200>)
 800effc:	f005 fa9d 	bl	801453a <dma_memory_to_memory_disable>
 800f000:	2106      	movs	r1, #6
 800f002:	4853      	ldr	r0, [pc, #332]	; (800f150 <Dmx::Dmx()+0x208>)
 800f004:	f005 fa42 	bl	801448c <dma_deinit>
 800f008:	4b52      	ldr	r3, [pc, #328]	; (800f154 <Dmx::Dmx()+0x20c>)
 800f00a:	aa03      	add	r2, sp, #12
 800f00c:	2106      	movs	r1, #6
 800f00e:	4850      	ldr	r0, [pc, #320]	; (800f150 <Dmx::Dmx()+0x208>)
 800f010:	e9cd 3503 	strd	r3, r5, [sp, #12]
 800f014:	f8cd 8020 	str.w	r8, [sp, #32]
 800f018:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 800f01c:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
 800f020:	9506      	str	r5, [sp, #24]
 800f022:	f005 fa51 	bl	80144c8 <dma_init>
 800f026:	2106      	movs	r1, #6
 800f028:	4849      	ldr	r0, [pc, #292]	; (800f150 <Dmx::Dmx()+0x208>)
 800f02a:	f005 fa7e 	bl	801452a <dma_circulation_disable>
 800f02e:	2106      	movs	r1, #6
 800f030:	4847      	ldr	r0, [pc, #284]	; (800f150 <Dmx::Dmx()+0x208>)
 800f032:	f005 fa82 	bl	801453a <dma_memory_to_memory_disable>
 800f036:	f240 7001 	movw	r0, #1793	; 0x701
 800f03a:	f005 fba9 	bl	8014790 <rcu_periph_clock_enable>
 800f03e:	4846      	ldr	r0, [pc, #280]	; (800f158 <Dmx::Dmx()+0x210>)
 800f040:	f005 fd0a 	bl	8014a58 <timer_deinit>
 800f044:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800f048:	2377      	movs	r3, #119	; 0x77
 800f04a:	a903      	add	r1, sp, #12
 800f04c:	4842      	ldr	r0, [pc, #264]	; (800f158 <Dmx::Dmx()+0x210>)
 800f04e:	9303      	str	r3, [sp, #12]
 800f050:	f8cd 8014 	str.w	r8, [sp, #20]
 800f054:	f8ad 5010 	strh.w	r5, [sp, #16]
 800f058:	f8ad 5018 	strh.w	r5, [sp, #24]
 800f05c:	f88d 501a 	strb.w	r5, [sp, #26]
 800f060:	f005 fda0 	bl	8014ba4 <timer_init>
 800f064:	4641      	mov	r1, r8
 800f066:	483c      	ldr	r0, [pc, #240]	; (800f158 <Dmx::Dmx()+0x210>)
 800f068:	f005 fe59 	bl	8014d1e <timer_flag_clear>
 800f06c:	4641      	mov	r1, r8
 800f06e:	483a      	ldr	r0, [pc, #232]	; (800f158 <Dmx::Dmx()+0x210>)
 800f070:	f005 fe52 	bl	8014d18 <timer_interrupt_flag_clear>
 800f074:	4629      	mov	r1, r5
 800f076:	2210      	movs	r2, #16
 800f078:	4837      	ldr	r0, [pc, #220]	; (800f158 <Dmx::Dmx()+0x210>)
 800f07a:	f005 fdf0 	bl	8014c5e <timer_channel_output_mode_config>
 800f07e:	4621      	mov	r1, r4
 800f080:	2210      	movs	r2, #16
 800f082:	4835      	ldr	r0, [pc, #212]	; (800f158 <Dmx::Dmx()+0x210>)
 800f084:	f005 fdeb 	bl	8014c5e <timer_channel_output_mode_config>
 800f088:	2210      	movs	r2, #16
 800f08a:	2102      	movs	r1, #2
 800f08c:	4832      	ldr	r0, [pc, #200]	; (800f158 <Dmx::Dmx()+0x210>)
 800f08e:	f005 fde6 	bl	8014c5e <timer_channel_output_mode_config>
 800f092:	2210      	movs	r2, #16
 800f094:	2103      	movs	r1, #3
 800f096:	4830      	ldr	r0, [pc, #192]	; (800f158 <Dmx::Dmx()+0x210>)
 800f098:	f005 fde1 	bl	8014c5e <timer_channel_output_mode_config>
 800f09c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800f0a0:	f107 27e0 	add.w	r7, r7, #3758153728	; 0xe000e000
 800f0a4:	f887 531d 	strb.w	r5, [r7, #797]	; 0x31d
 800f0a8:	482b      	ldr	r0, [pc, #172]	; (800f158 <Dmx::Dmx()+0x210>)
 800f0aa:	603b      	str	r3, [r7, #0]
 800f0ac:	f005 fdd2 	bl	8014c54 <timer_enable>
 800f0b0:	f240 7005 	movw	r0, #1797	; 0x705
 800f0b4:	f005 fb6c 	bl	8014790 <rcu_periph_clock_enable>
 800f0b8:	4828      	ldr	r0, [pc, #160]	; (800f15c <Dmx::Dmx()+0x214>)
 800f0ba:	f005 fccd 	bl	8014a58 <timer_deinit>
 800f0be:	f642 63df 	movw	r3, #11999	; 0x2edf
 800f0c2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f0c6:	f242 7310 	movw	r3, #10000	; 0x2710
 800f0ca:	a903      	add	r1, sp, #12
 800f0cc:	4823      	ldr	r0, [pc, #140]	; (800f15c <Dmx::Dmx()+0x214>)
 800f0ce:	9305      	str	r3, [sp, #20]
 800f0d0:	f005 fd68 	bl	8014ba4 <timer_init>
 800f0d4:	4641      	mov	r1, r8
 800f0d6:	4821      	ldr	r0, [pc, #132]	; (800f15c <Dmx::Dmx()+0x214>)
 800f0d8:	f005 fe21 	bl	8014d1e <timer_flag_clear>
 800f0dc:	4641      	mov	r1, r8
 800f0de:	481f      	ldr	r0, [pc, #124]	; (800f15c <Dmx::Dmx()+0x214>)
 800f0e0:	f005 fe1a 	bl	8014d18 <timer_interrupt_flag_clear>
 800f0e4:	4621      	mov	r1, r4
 800f0e6:	481d      	ldr	r0, [pc, #116]	; (800f15c <Dmx::Dmx()+0x214>)
 800f0e8:	f005 fe12 	bl	8014d10 <timer_interrupt_enable>
 800f0ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f0f0:	f04f 0802 	mov.w	r8, #2
 800f0f4:	2480      	movs	r4, #128	; 0x80
 800f0f6:	f887 5337 	strb.w	r5, [r7, #823]	; 0x337
 800f0fa:	4818      	ldr	r0, [pc, #96]	; (800f15c <Dmx::Dmx()+0x214>)
 800f0fc:	607b      	str	r3, [r7, #4]
 800f0fe:	f005 fda9 	bl	8014c54 <timer_enable>
 800f102:	462b      	mov	r3, r5
 800f104:	2208      	movs	r2, #8
 800f106:	4916      	ldr	r1, [pc, #88]	; (800f160 <Dmx::Dmx()+0x218>)
 800f108:	4816      	ldr	r0, [pc, #88]	; (800f164 <Dmx::Dmx()+0x21c>)
 800f10a:	f8cd 8000 	str.w	r8, [sp]
 800f10e:	f006 f8c3 	bl	8015298 <gd32_uart_begin>
 800f112:	607c      	str	r4, [r7, #4]
 800f114:	462b      	mov	r3, r5
 800f116:	2208      	movs	r2, #8
 800f118:	4911      	ldr	r1, [pc, #68]	; (800f160 <Dmx::Dmx()+0x218>)
 800f11a:	4813      	ldr	r0, [pc, #76]	; (800f168 <Dmx::Dmx()+0x220>)
 800f11c:	f8cd 8000 	str.w	r8, [sp]
 800f120:	f006 f8ba 	bl	8015298 <gd32_uart_begin>
 800f124:	4630      	mov	r0, r6
 800f126:	60bc      	str	r4, [r7, #8]
 800f128:	b00b      	add	sp, #44	; 0x2c
 800f12a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f12e:	2401      	movs	r4, #1
 800f130:	e723      	b.n	800ef7a <Dmx::Dmx()+0x32>
 800f132:	bf00      	nop
 800f134:	20001c60 	andcs	r1, r0, r0, ror #24
 800f138:	08017d60 	stmdaeq	r1, {r5, r6, r8, sl, fp, ip, sp, lr}
 800f13c:	20001c5c 	andcs	r1, r0, ip, asr ip
 800f140:	20001c34 	andcs	r1, r0, r4, lsr ip
 800f144:	2000140c 	andcs	r1, r0, ip, lsl #8
 800f148:	40020000 	andmi	r0, r2, r0
 800f14c:	40004804 	andmi	r4, r0, r4, lsl #16
 800f150:	40020400 	andmi	r0, r2, r0, lsl #8
 800f154:	40017004 	andmi	r7, r1, r4
 800f158:	40000400 	andmi	r0, r0, r0, lsl #8
 800f15c:	40001400 	andmi	r1, r0, r0, lsl #8
 800f160:	0003d090 	muleq	r3, r0, r0
 800f164:	40004800 	andmi	r4, r0, r0, lsl #16
 800f168:	40017000 	andmi	r7, r1, r0

0800f16c <Dmx::SetDmxPeriodTime(unsigned int)>:
 800f16c:	4b15      	ldr	r3, [pc, #84]	; (800f1c4 <Dmx::SetDmxPeriodTime(unsigned int)+0x58>)
 800f16e:	b570      	push	{r4, r5, r6, lr}
 800f170:	60c1      	str	r1, [r0, #12]
 800f172:	f8b3 0406 	ldrh.w	r0, [r3, #1030]	; 0x406
 800f176:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800f17a:	f64f 76d3 	movw	r6, #65491	; 0xffd3
 800f17e:	4298      	cmp	r0, r3
 800f180:	bf38      	it	cc
 800f182:	4618      	movcc	r0, r3
 800f184:	232c      	movs	r3, #44	; 0x2c
 800f186:	4d10      	ldr	r5, [pc, #64]	; (800f1c8 <Dmx::SetDmxPeriodTime(unsigned int)+0x5c>)
 800f188:	4c10      	ldr	r4, [pc, #64]	; (800f1cc <Dmx::SetDmxPeriodTime(unsigned int)+0x60>)
 800f18a:	4358      	muls	r0, r3
 800f18c:	682a      	ldr	r2, [r5, #0]
 800f18e:	6823      	ldr	r3, [r4, #0]
 800f190:	4413      	add	r3, r2
 800f192:	4403      	add	r3, r0
 800f194:	42b3      	cmp	r3, r6
 800f196:	d908      	bls.n	800f1aa <Dmx::SetDmxPeriodTime(unsigned int)+0x3e>
 800f198:	2ab0      	cmp	r2, #176	; 0xb0
 800f19a:	4613      	mov	r3, r2
 800f19c:	bf28      	it	cs
 800f19e:	23b0      	movcs	r3, #176	; 0xb0
 800f1a0:	220c      	movs	r2, #12
 800f1a2:	602b      	str	r3, [r5, #0]
 800f1a4:	4413      	add	r3, r2
 800f1a6:	6022      	str	r2, [r4, #0]
 800f1a8:	4403      	add	r3, r0
 800f1aa:	b109      	cbz	r1, 800f1b0 <Dmx::SetDmxPeriodTime(unsigned int)+0x44>
 800f1ac:	428b      	cmp	r3, r1
 800f1ae:	d906      	bls.n	800f1be <Dmx::SetDmxPeriodTime(unsigned int)+0x52>
 800f1b0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800f1b4:	f240 43b4 	movw	r3, #1204	; 0x4b4
 800f1b8:	4299      	cmp	r1, r3
 800f1ba:	bf38      	it	cc
 800f1bc:	4619      	movcc	r1, r3
 800f1be:	4b04      	ldr	r3, [pc, #16]	; (800f1d0 <Dmx::SetDmxPeriodTime(unsigned int)+0x64>)
 800f1c0:	6019      	str	r1, [r3, #0]
 800f1c2:	bd70      	pop	{r4, r5, r6, pc}
 800f1c4:	2000182c 	andcs	r1, r0, ip, lsr #16
 800f1c8:	20000008 	andcs	r0, r0, r8
 800f1cc:	20000004 	andcs	r0, r0, r4
 800f1d0:	20000000 	andcs	r0, r0, r0

0800f1d4 <Dmx::SetDmxBreakTime(unsigned int)>:
 800f1d4:	295c      	cmp	r1, #92	; 0x5c
 800f1d6:	bf38      	it	cc
 800f1d8:	215c      	movcc	r1, #92	; 0x5c
 800f1da:	4b02      	ldr	r3, [pc, #8]	; (800f1e4 <Dmx::SetDmxBreakTime(unsigned int)+0x10>)
 800f1dc:	6019      	str	r1, [r3, #0]
 800f1de:	68c1      	ldr	r1, [r0, #12]
 800f1e0:	f7ff bfc4 	b.w	800f16c <Dmx::SetDmxPeriodTime(unsigned int)>
 800f1e4:	20000008 	andcs	r0, r0, r8

0800f1e8 <Dmx::SetDmxMabTime(unsigned int)>:
 800f1e8:	290c      	cmp	r1, #12
 800f1ea:	bf38      	it	cc
 800f1ec:	210c      	movcc	r1, #12
 800f1ee:	4b02      	ldr	r3, [pc, #8]	; (800f1f8 <Dmx::SetDmxMabTime(unsigned int)+0x10>)
 800f1f0:	6019      	str	r1, [r3, #0]
 800f1f2:	68c1      	ldr	r1, [r0, #12]
 800f1f4:	f7ff bfba 	b.w	800f16c <Dmx::SetDmxPeriodTime(unsigned int)>
 800f1f8:	20000004 	andcs	r0, r0, r4

0800f1fc <Dmx::SetDmxSlots(unsigned short)>:
 800f1fc:	1e8b      	subs	r3, r1, #2
 800f1fe:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800f202:	d80f      	bhi.n	800f224 <Dmx::SetDmxSlots(unsigned short)+0x28>
 800f204:	69c3      	ldr	r3, [r0, #28]
 800f206:	8201      	strh	r1, [r0, #16]
 800f208:	b11b      	cbz	r3, 800f212 <Dmx::SetDmxSlots(unsigned short)+0x16>
 800f20a:	4299      	cmp	r1, r3
 800f20c:	bf94      	ite	ls
 800f20e:	61c1      	strls	r1, [r0, #28]
 800f210:	61c3      	strhi	r3, [r0, #28]
 800f212:	6a03      	ldr	r3, [r0, #32]
 800f214:	b11b      	cbz	r3, 800f21e <Dmx::SetDmxSlots(unsigned short)+0x22>
 800f216:	4299      	cmp	r1, r3
 800f218:	bf94      	ite	ls
 800f21a:	6201      	strls	r1, [r0, #32]
 800f21c:	6203      	strhi	r3, [r0, #32]
 800f21e:	68c1      	ldr	r1, [r0, #12]
 800f220:	f7ff bfa4 	b.w	800f16c <Dmx::SetDmxPeriodTime(unsigned int)>
 800f224:	4770      	bx	lr
	...

0800f228 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>:
 800f228:	b470      	push	{r4, r5, r6}
 800f22a:	8a04      	ldrh	r4, [r0, #16]
 800f22c:	f44f 7501 	mov.w	r5, #516	; 0x204
 800f230:	42a3      	cmp	r3, r4
 800f232:	bf28      	it	cs
 800f234:	4623      	movcs	r3, r4
 800f236:	4c0e      	ldr	r4, [pc, #56]	; (800f270 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x48>)
 800f238:	f892 f000 	pld	[r2]
 800f23c:	fb05 4401 	mla	r4, r5, r1, r4
 800f240:	1c5d      	adds	r5, r3, #1
 800f242:	f8a4 5202 	strh.w	r5, [r4, #514]	; 0x202
 800f246:	18d5      	adds	r5, r2, r3
 800f248:	4295      	cmp	r5, r2
 800f24a:	d109      	bne.n	800f260 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x38>
 800f24c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f250:	69ca      	ldr	r2, [r1, #28]
 800f252:	429a      	cmp	r2, r3
 800f254:	d009      	beq.n	800f26a <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x42>
 800f256:	bc70      	pop	{r4, r5, r6}
 800f258:	61cb      	str	r3, [r1, #28]
 800f25a:	68c1      	ldr	r1, [r0, #12]
 800f25c:	f7ff bf86 	b.w	800f16c <Dmx::SetDmxPeriodTime(unsigned int)>
 800f260:	f812 6b01 	ldrb.w	r6, [r2], #1
 800f264:	f804 6f01 	strb.w	r6, [r4, #1]!
 800f268:	e7ee      	b.n	800f248 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x20>
 800f26a:	bc70      	pop	{r4, r5, r6}
 800f26c:	4770      	bx	lr
 800f26e:	bf00      	nop
 800f270:	2000182c 	andcs	r1, r0, ip, lsr #16

0800f274 <Dmx::Blackout()>:
 800f274:	b538      	push	{r3, r4, r5, lr}
 800f276:	4c1e      	ldr	r4, [pc, #120]	; (800f2f0 <Dmx::Blackout()+0x7c>)
 800f278:	8823      	ldrh	r3, [r4, #0]
 800f27a:	b29b      	uxth	r3, r3
 800f27c:	b3bb      	cbz	r3, 800f2ee <Dmx::Blackout()+0x7a>
 800f27e:	f3bf 8f5f 	dmb	sy
 800f282:	8823      	ldrh	r3, [r4, #0]
 800f284:	05da      	lsls	r2, r3, #23
 800f286:	d515      	bpl.n	800f2b4 <Dmx::Blackout()+0x40>
 800f288:	2000      	movs	r0, #0
 800f28a:	f7ff fa91 	bl	800e7b0 <_port_to_uart(unsigned int)>
 800f28e:	4605      	mov	r5, r0
 800f290:	2107      	movs	r1, #7
 800f292:	4628      	mov	r0, r5
 800f294:	f005 fe12 	bl	8014ebc <usart_flag_get>
 800f298:	2801      	cmp	r0, #1
 800f29a:	d1f9      	bne.n	800f290 <Dmx::Blackout()+0x1c>
 800f29c:	4b15      	ldr	r3, [pc, #84]	; (800f2f4 <Dmx::Blackout()+0x80>)
 800f29e:	2000      	movs	r0, #0
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	f203 2102 	addw	r1, r3, #514	; 0x202
 800f2a6:	f823 0b02 	strh.w	r0, [r3], #2
 800f2aa:	428b      	cmp	r3, r1
 800f2ac:	d1fb      	bne.n	800f2a6 <Dmx::Blackout()+0x32>
 800f2ae:	f04f 0300 	mov.w	r3, #0
 800f2b2:	7013      	strb	r3, [r2, #0]
 800f2b4:	f3bf 8f5f 	dmb	sy
 800f2b8:	8823      	ldrh	r3, [r4, #0]
 800f2ba:	059b      	lsls	r3, r3, #22
 800f2bc:	d517      	bpl.n	800f2ee <Dmx::Blackout()+0x7a>
 800f2be:	2001      	movs	r0, #1
 800f2c0:	f7ff fa76 	bl	800e7b0 <_port_to_uart(unsigned int)>
 800f2c4:	4604      	mov	r4, r0
 800f2c6:	2107      	movs	r1, #7
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	f005 fdf7 	bl	8014ebc <usart_flag_get>
 800f2ce:	2801      	cmp	r0, #1
 800f2d0:	d1f9      	bne.n	800f2c6 <Dmx::Blackout()+0x52>
 800f2d2:	2000      	movs	r0, #0
 800f2d4:	4b08      	ldr	r3, [pc, #32]	; (800f2f8 <Dmx::Blackout()+0x84>)
 800f2d6:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 800f2da:	f203 2102 	addw	r1, r3, #514	; 0x202
 800f2de:	f823 0b02 	strh.w	r0, [r3], #2
 800f2e2:	428b      	cmp	r3, r1
 800f2e4:	d1fb      	bne.n	800f2de <Dmx::Blackout()+0x6a>
 800f2e6:	f04f 0300 	mov.w	r3, #0
 800f2ea:	f882 3204 	strb.w	r3, [r2, #516]	; 0x204
 800f2ee:	bd38      	pop	{r3, r4, r5, pc}
 800f2f0:	20001c5c 	andcs	r1, r0, ip, asr ip
 800f2f4:	2000182c 	andcs	r1, r0, ip, lsr #16
 800f2f8:	20001a30 	andcs	r1, r0, r0, lsr sl

0800f2fc <Dmx::FullOn()>:
 800f2fc:	b538      	push	{r3, r4, r5, lr}
 800f2fe:	4c1e      	ldr	r4, [pc, #120]	; (800f378 <Dmx::FullOn()+0x7c>)
 800f300:	8823      	ldrh	r3, [r4, #0]
 800f302:	b29b      	uxth	r3, r3
 800f304:	b3bb      	cbz	r3, 800f376 <Dmx::FullOn()+0x7a>
 800f306:	f3bf 8f5f 	dmb	sy
 800f30a:	8823      	ldrh	r3, [r4, #0]
 800f30c:	05da      	lsls	r2, r3, #23
 800f30e:	d515      	bpl.n	800f33c <Dmx::FullOn()+0x40>
 800f310:	2000      	movs	r0, #0
 800f312:	f7ff fa4d 	bl	800e7b0 <_port_to_uart(unsigned int)>
 800f316:	4605      	mov	r5, r0
 800f318:	2107      	movs	r1, #7
 800f31a:	4628      	mov	r0, r5
 800f31c:	f005 fdce 	bl	8014ebc <usart_flag_get>
 800f320:	2801      	cmp	r0, #1
 800f322:	d1f9      	bne.n	800f318 <Dmx::FullOn()+0x1c>
 800f324:	4b15      	ldr	r3, [pc, #84]	; (800f37c <Dmx::FullOn()+0x80>)
 800f326:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f32a:	461a      	mov	r2, r3
 800f32c:	f203 2102 	addw	r1, r3, #514	; 0x202
 800f330:	f823 0b02 	strh.w	r0, [r3], #2
 800f334:	428b      	cmp	r3, r1
 800f336:	d1fb      	bne.n	800f330 <Dmx::FullOn()+0x34>
 800f338:	2300      	movs	r3, #0
 800f33a:	7013      	strb	r3, [r2, #0]
 800f33c:	f3bf 8f5f 	dmb	sy
 800f340:	8823      	ldrh	r3, [r4, #0]
 800f342:	059b      	lsls	r3, r3, #22
 800f344:	d517      	bpl.n	800f376 <Dmx::FullOn()+0x7a>
 800f346:	2001      	movs	r0, #1
 800f348:	f7ff fa32 	bl	800e7b0 <_port_to_uart(unsigned int)>
 800f34c:	4604      	mov	r4, r0
 800f34e:	2107      	movs	r1, #7
 800f350:	4620      	mov	r0, r4
 800f352:	f005 fdb3 	bl	8014ebc <usart_flag_get>
 800f356:	2801      	cmp	r0, #1
 800f358:	d1f9      	bne.n	800f34e <Dmx::FullOn()+0x52>
 800f35a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f35e:	4b08      	ldr	r3, [pc, #32]	; (800f380 <Dmx::FullOn()+0x84>)
 800f360:	f5a3 7201 	sub.w	r2, r3, #516	; 0x204
 800f364:	f203 2102 	addw	r1, r3, #514	; 0x202
 800f368:	f823 0b02 	strh.w	r0, [r3], #2
 800f36c:	428b      	cmp	r3, r1
 800f36e:	d1fb      	bne.n	800f368 <Dmx::FullOn()+0x6c>
 800f370:	2300      	movs	r3, #0
 800f372:	f882 3204 	strb.w	r3, [r2, #516]	; 0x204
 800f376:	bd38      	pop	{r3, r4, r5, pc}
 800f378:	20001c5c 	andcs	r1, r0, ip, asr ip
 800f37c:	2000182c 	andcs	r1, r0, ip, lsr #16
 800f380:	20001a30 	andcs	r1, r0, r0, lsr sl

0800f384 <Dmx::GetDmxAvailable(unsigned int)>:
 800f384:	f44f 7204 	mov.w	r2, #528	; 0x210
 800f388:	4b07      	ldr	r3, [pc, #28]	; (800f3a8 <Dmx::GetDmxAvailable(unsigned int)+0x24>)
 800f38a:	fb02 3101 	mla	r1, r2, r1, r3
 800f38e:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 800f392:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800f396:	bf1f      	itttt	ne
 800f398:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 800f39c:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 800f3a0:	4608      	movne	r0, r1
 800f3a2:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 800f3a6:	4770      	bx	lr
 800f3a8:	2000140c 	andcs	r1, r0, ip, lsl #8

0800f3ac <Dmx::GetUpdatesPerSecond(unsigned int)>:
 800f3ac:	f3bf 8f5f 	dmb	sy
 800f3b0:	4b01      	ldr	r3, [pc, #4]	; (800f3b8 <Dmx::GetUpdatesPerSecond(unsigned int)+0xc>)
 800f3b2:	0109      	lsls	r1, r1, #4
 800f3b4:	5858      	ldr	r0, [r3, r1]
 800f3b6:	4770      	bx	lr
 800f3b8:	20001c3c 	andcs	r1, r0, ip, lsr ip

0800f3bc <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>:
 800f3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3be:	4608      	mov	r0, r1
 800f3c0:	4615      	mov	r5, r2
 800f3c2:	461e      	mov	r6, r3
 800f3c4:	f7ff f9f4 	bl	800e7b0 <_port_to_uart(unsigned int)>
 800f3c8:	4604      	mov	r4, r0
 800f3ca:	2106      	movs	r1, #6
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	f005 fd75 	bl	8014ebc <usart_flag_get>
 800f3d2:	2800      	cmp	r0, #0
 800f3d4:	d0f9      	beq.n	800f3ca <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0xe>
 800f3d6:	4b1f      	ldr	r3, [pc, #124]	; (800f454 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x98>)
 800f3d8:	4f1f      	ldr	r7, [pc, #124]	; (800f458 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x9c>)
 800f3da:	429c      	cmp	r4, r3
 800f3dc:	d126      	bne.n	800f42c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x70>
 800f3de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3e2:	2203      	movs	r2, #3
 800f3e4:	2110      	movs	r1, #16
 800f3e6:	4638      	mov	r0, r7
 800f3e8:	f005 f93a 	bl	8014660 <gpio_init>
 800f3ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3f0:	2100      	movs	r1, #0
 800f3f2:	20b0      	movs	r0, #176	; 0xb0
 800f3f4:	617b      	str	r3, [r7, #20]
 800f3f6:	f006 f8c9 	bl	801558c <udelay(unsigned int, unsigned int)>
 800f3fa:	4b16      	ldr	r3, [pc, #88]	; (800f454 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x98>)
 800f3fc:	2203      	movs	r2, #3
 800f3fe:	429c      	cmp	r4, r3
 800f400:	bf0c      	ite	eq
 800f402:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f406:	2340      	movne	r3, #64	; 0x40
 800f408:	2118      	movs	r1, #24
 800f40a:	4813      	ldr	r0, [pc, #76]	; (800f458 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x9c>)
 800f40c:	f005 f928 	bl	8014660 <gpio_init>
 800f410:	2100      	movs	r1, #0
 800f412:	200c      	movs	r0, #12
 800f414:	f006 f8ba 	bl	801558c <udelay(unsigned int, unsigned int)>
 800f418:	442e      	add	r6, r5
 800f41a:	42b5      	cmp	r5, r6
 800f41c:	d10e      	bne.n	800f43c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x80>
 800f41e:	2106      	movs	r1, #6
 800f420:	4620      	mov	r0, r4
 800f422:	f005 fd4b 	bl	8014ebc <usart_flag_get>
 800f426:	2801      	cmp	r0, #1
 800f428:	d112      	bne.n	800f450 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x94>
 800f42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f42c:	2340      	movs	r3, #64	; 0x40
 800f42e:	2203      	movs	r2, #3
 800f430:	2110      	movs	r1, #16
 800f432:	4638      	mov	r0, r7
 800f434:	f005 f914 	bl	8014660 <gpio_init>
 800f438:	2340      	movs	r3, #64	; 0x40
 800f43a:	e7d9      	b.n	800f3f0 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x34>
 800f43c:	2107      	movs	r1, #7
 800f43e:	4620      	mov	r0, r4
 800f440:	f005 fd3c 	bl	8014ebc <usart_flag_get>
 800f444:	2800      	cmp	r0, #0
 800f446:	d0f9      	beq.n	800f43c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x80>
 800f448:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f44c:	6063      	str	r3, [r4, #4]
 800f44e:	e7e4      	b.n	800f41a <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x5e>
 800f450:	6863      	ldr	r3, [r4, #4]
 800f452:	e7e4      	b.n	800f41e <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x62>
 800f454:	40004800 	andmi	r4, r0, r0, lsl #16
 800f458:	40011000 	andmi	r1, r1, r0

0800f45c <Dmx::RdmReceive(unsigned int)>:
 800f45c:	f44f 7204 	mov.w	r2, #528	; 0x210
 800f460:	4b06      	ldr	r3, [pc, #24]	; (800f47c <Dmx::RdmReceive(unsigned int)+0x20>)
 800f462:	fb02 3101 	mla	r1, r2, r1, r3
 800f466:	f8b1 0204 	ldrh.w	r0, [r1, #516]	; 0x204
 800f46a:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 800f46e:	bf1e      	ittt	ne
 800f470:	2300      	movne	r3, #0
 800f472:	4608      	movne	r0, r1
 800f474:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 800f478:	4770      	bx	lr
 800f47a:	bf00      	nop
 800f47c:	2000140c 	andcs	r1, r0, ip, lsl #8

0800f480 <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)>:
 800f480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f482:	2300      	movs	r3, #0
 800f484:	4605      	mov	r5, r0
 800f486:	460e      	mov	r6, r1
 800f488:	4614      	mov	r4, r2
 800f48a:	4f05      	ldr	r7, [pc, #20]	; (800f4a0 <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0x20>)
 800f48c:	627b      	str	r3, [r7, #36]	; 0x24
 800f48e:	4631      	mov	r1, r6
 800f490:	4628      	mov	r0, r5
 800f492:	f7ff ffe3 	bl	800f45c <Dmx::RdmReceive(unsigned int)>
 800f496:	b910      	cbnz	r0, 800f49e <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0x1e>
 800f498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f49a:	42a3      	cmp	r3, r4
 800f49c:	d3f7      	bcc.n	800f48e <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0xe>
 800f49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4a0:	40001000 	andmi	r1, r0, r0

0800f4a4 <micros()>:
 800f4a4:	b510      	push	{r4, lr}
 800f4a6:	4a05      	ldr	r2, [pc, #20]	; (800f4bc <micros()+0x18>)
 800f4a8:	4c05      	ldr	r4, [pc, #20]	; (800f4c0 <micros()+0x1c>)
 800f4aa:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800f4ac:	f8d4 0c24 	ldr.w	r0, [r4, #3108]	; 0xc24
 800f4b0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800f4b2:	428b      	cmp	r3, r1
 800f4b4:	d1f9      	bne.n	800f4aa <micros()+0x6>
 800f4b6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800f4ba:	bd10      	pop	{r4, pc}
 800f4bc:	40015000 	andmi	r5, r1, r0
 800f4c0:	40014000 	andmi	r4, r1, r0

0800f4c4 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)>:
 800f4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4c6:	4605      	mov	r5, r0
 800f4c8:	460c      	mov	r4, r1
 800f4ca:	4616      	mov	r6, r2
 800f4cc:	b9d2      	cbnz	r2, 800f504 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x40>
 800f4ce:	4e18      	ldr	r6, [pc, #96]	; (800f530 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x6c>)
 800f4d0:	4622      	mov	r2, r4
 800f4d2:	5d73      	ldrb	r3, [r6, r5]
 800f4d4:	78a1      	ldrb	r1, [r4, #2]
 800f4d6:	73e3      	strb	r3, [r4, #15]
 800f4d8:	2300      	movs	r3, #0
 800f4da:	1908      	adds	r0, r1, r4
 800f4dc:	4282      	cmp	r2, r0
 800f4de:	d122      	bne.n	800f526 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x62>
 800f4e0:	0a18      	lsrs	r0, r3, #8
 800f4e2:	5460      	strb	r0, [r4, r1]
 800f4e4:	7053      	strb	r3, [r2, #1]
 800f4e6:	78a2      	ldrb	r2, [r4, #2]
 800f4e8:	4621      	mov	r1, r4
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	3202      	adds	r2, #2
 800f4ee:	f7ff f93f 	bl	800e770 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 800f4f2:	f7ff ffd7 	bl	800f4a4 <micros()>
 800f4f6:	4b0f      	ldr	r3, [pc, #60]	; (800f534 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x70>)
 800f4f8:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800f4fc:	5d73      	ldrb	r3, [r6, r5]
 800f4fe:	3301      	adds	r3, #1
 800f500:	5573      	strb	r3, [r6, r5]
 800f502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f504:	f7ff ffce 	bl	800f4a4 <micros()>
 800f508:	4b0a      	ldr	r3, [pc, #40]	; (800f534 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x70>)
 800f50a:	4607      	mov	r7, r0
 800f50c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f510:	1ac2      	subs	r2, r0, r3
 800f512:	4296      	cmp	r6, r2
 800f514:	d9db      	bls.n	800f4ce <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0xa>
 800f516:	4433      	add	r3, r6
 800f518:	1a1e      	subs	r6, r3, r0
 800f51a:	f7ff ffc3 	bl	800f4a4 <micros()>
 800f51e:	1bc0      	subs	r0, r0, r7
 800f520:	42b0      	cmp	r0, r6
 800f522:	d3fa      	bcc.n	800f51a <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x56>
 800f524:	e7d3      	b.n	800f4ce <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0xa>
 800f526:	f812 7b01 	ldrb.w	r7, [r2], #1
 800f52a:	443b      	add	r3, r7
 800f52c:	b29b      	uxth	r3, r3
 800f52e:	e7d5      	b.n	800f4dc <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x18>
 800f530:	20001c70 	andcs	r1, r0, r0, ror ip
 800f534:	20001c68 	andcs	r1, r0, r8, ror #24

0800f538 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 800f538:	2300      	movs	r3, #0
 800f53a:	2020      	movs	r0, #32
 800f53c:	b510      	push	{r4, lr}
 800f53e:	4a04      	ldr	r2, [pc, #16]	; (800f550 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 800f540:	428b      	cmp	r3, r1
 800f542:	d100      	bne.n	800f546 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0xe>
 800f544:	bd10      	pop	{r4, pc}
 800f546:	f852 4b04 	ldr.w	r4, [r2], #4
 800f54a:	3301      	adds	r3, #1
 800f54c:	4420      	add	r0, r4
 800f54e:	e7f7      	b.n	800f540 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 800f550:	08017d70 	stmdaeq	r1, {r4, r5, r6, r8, sl, fp, ip, sp, lr}

0800f554 <SpiFlashStore::Init()>:
 800f554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f558:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800f670 <SpiFlashStore::Init()+0x11c>
 800f55c:	4607      	mov	r7, r0
 800f55e:	b085      	sub	sp, #20
 800f560:	f8d8 0000 	ldr.w	r0, [r8]
 800f564:	f000 fccc 	bl	800ff00 <FlashRom::GetSectorSize() const>
 800f568:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800f56c:	4605      	mov	r5, r0
 800f56e:	d17d      	bne.n	800f66c <SpiFlashStore::Init()+0x118>
 800f570:	f8d8 0000 	ldr.w	r0, [r8]
 800f574:	f000 fcbc 	bl	800fef0 <FlashRom::GetSize() const>
 800f578:	4b3e      	ldr	r3, [pc, #248]	; (800f674 <SpiFlashStore::Init()+0x120>)
 800f57a:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 800f57e:	f3c1 060b 	ubfx	r6, r1, #0, #12
 800f582:	6019      	str	r1, [r3, #0]
 800f584:	2e00      	cmp	r6, #0
 800f586:	d171      	bne.n	800f66c <SpiFlashStore::Init()+0x118>
 800f588:	4c3b      	ldr	r4, [pc, #236]	; (800f678 <SpiFlashStore::Init()+0x124>)
 800f58a:	ab03      	add	r3, sp, #12
 800f58c:	9300      	str	r3, [sp, #0]
 800f58e:	462a      	mov	r2, r5
 800f590:	4623      	mov	r3, r4
 800f592:	f8d8 0000 	ldr.w	r0, [r8]
 800f596:	f000 fcb6 	bl	800ff06 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 800f59a:	7823      	ldrb	r3, [r4, #0]
 800f59c:	2b41      	cmp	r3, #65	; 0x41
 800f59e:	bf1c      	itt	ne
 800f5a0:	2341      	movne	r3, #65	; 0x41
 800f5a2:	7023      	strbne	r3, [r4, #0]
 800f5a4:	7863      	ldrb	r3, [r4, #1]
 800f5a6:	bf14      	ite	ne
 800f5a8:	4635      	movne	r5, r6
 800f5aa:	2501      	moveq	r5, #1
 800f5ac:	2b76      	cmp	r3, #118	; 0x76
 800f5ae:	bf1c      	itt	ne
 800f5b0:	2376      	movne	r3, #118	; 0x76
 800f5b2:	7063      	strbne	r3, [r4, #1]
 800f5b4:	78a3      	ldrb	r3, [r4, #2]
 800f5b6:	bf18      	it	ne
 800f5b8:	2500      	movne	r5, #0
 800f5ba:	2b56      	cmp	r3, #86	; 0x56
 800f5bc:	bf1c      	itt	ne
 800f5be:	2356      	movne	r3, #86	; 0x56
 800f5c0:	70a3      	strbne	r3, [r4, #2]
 800f5c2:	78e3      	ldrb	r3, [r4, #3]
 800f5c4:	bf18      	it	ne
 800f5c6:	2500      	movne	r5, #0
 800f5c8:	2b10      	cmp	r3, #16
 800f5ca:	d022      	beq.n	800f612 <SpiFlashStore::Init()+0xbe>
 800f5cc:	2310      	movs	r3, #16
 800f5ce:	70e3      	strb	r3, [r4, #3]
 800f5d0:	2201      	movs	r2, #1
 800f5d2:	2500      	movs	r5, #0
 800f5d4:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800f5d8:	4b28      	ldr	r3, [pc, #160]	; (800f67c <SpiFlashStore::Init()+0x128>)
 800f5da:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800f680 <SpiFlashStore::Init()+0x12c>
 800f5de:	701a      	strb	r2, [r3, #0]
 800f5e0:	4631      	mov	r1, r6
 800f5e2:	4638      	mov	r0, r7
 800f5e4:	f7ff ffa8 	bl	800f538 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800f5e8:	1823      	adds	r3, r4, r0
 800f5ea:	5425      	strb	r5, [r4, r0]
 800f5ec:	705d      	strb	r5, [r3, #1]
 800f5ee:	709d      	strb	r5, [r3, #2]
 800f5f0:	70dd      	strb	r5, [r3, #3]
 800f5f2:	f858 3b04 	ldr.w	r3, [r8], #4
 800f5f6:	1d02      	adds	r2, r0, #4
 800f5f8:	4403      	add	r3, r0
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d332      	bcc.n	800f664 <SpiFlashStore::Init()+0x110>
 800f5fe:	3601      	adds	r6, #1
 800f600:	2e1c      	cmp	r6, #28
 800f602:	d1ed      	bne.n	800f5e0 <SpiFlashStore::Init()+0x8c>
 800f604:	2501      	movs	r5, #1
 800f606:	4b1f      	ldr	r3, [pc, #124]	; (800f684 <SpiFlashStore::Init()+0x130>)
 800f608:	601d      	str	r5, [r3, #0]
 800f60a:	4628      	mov	r0, r5
 800f60c:	b005      	add	sp, #20
 800f60e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f612:	2d00      	cmp	r5, #0
 800f614:	d0dc      	beq.n	800f5d0 <SpiFlashStore::Init()+0x7c>
 800f616:	f04f 0900 	mov.w	r9, #0
 800f61a:	46c8      	mov	r8, r9
 800f61c:	4631      	mov	r1, r6
 800f61e:	4638      	mov	r0, r7
 800f620:	f7ff ff8a 	bl	800f538 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800f624:	5c23      	ldrb	r3, [r4, r0]
 800f626:	2bff      	cmp	r3, #255	; 0xff
 800f628:	d112      	bne.n	800f650 <SpiFlashStore::Init()+0xfc>
 800f62a:	1823      	adds	r3, r4, r0
 800f62c:	785a      	ldrb	r2, [r3, #1]
 800f62e:	2aff      	cmp	r2, #255	; 0xff
 800f630:	d10e      	bne.n	800f650 <SpiFlashStore::Init()+0xfc>
 800f632:	789a      	ldrb	r2, [r3, #2]
 800f634:	2aff      	cmp	r2, #255	; 0xff
 800f636:	d10b      	bne.n	800f650 <SpiFlashStore::Init()+0xfc>
 800f638:	78da      	ldrb	r2, [r3, #3]
 800f63a:	2aff      	cmp	r2, #255	; 0xff
 800f63c:	d108      	bne.n	800f650 <SpiFlashStore::Init()+0xfc>
 800f63e:	46a9      	mov	r9, r5
 800f640:	f804 8000 	strb.w	r8, [r4, r0]
 800f644:	f883 8001 	strb.w	r8, [r3, #1]
 800f648:	f883 8002 	strb.w	r8, [r3, #2]
 800f64c:	f883 8003 	strb.w	r8, [r3, #3]
 800f650:	3601      	adds	r6, #1
 800f652:	2e1c      	cmp	r6, #28
 800f654:	d1e2      	bne.n	800f61c <SpiFlashStore::Init()+0xc8>
 800f656:	f1b9 0f00 	cmp.w	r9, #0
 800f65a:	d0d6      	beq.n	800f60a <SpiFlashStore::Init()+0xb6>
 800f65c:	2201      	movs	r2, #1
 800f65e:	4b09      	ldr	r3, [pc, #36]	; (800f684 <SpiFlashStore::Init()+0x130>)
 800f660:	601a      	str	r2, [r3, #0]
 800f662:	e7d2      	b.n	800f60a <SpiFlashStore::Init()+0xb6>
 800f664:	f804 9002 	strb.w	r9, [r4, r2]
 800f668:	3201      	adds	r2, #1
 800f66a:	e7c6      	b.n	800f5fa <SpiFlashStore::Init()+0xa6>
 800f66c:	2500      	movs	r5, #0
 800f66e:	e7cc      	b.n	800f60a <SpiFlashStore::Init()+0xb6>
 800f670:	20002cb4 			; <UNDEFINED> instruction: 0x20002cb4
 800f674:	20002c7c 	andcs	r2, r0, ip, ror ip
 800f678:	20001c7c 	andcs	r1, r0, ip, ror ip
 800f67c:	20002c90 	mulcs	r0, r0, ip
 800f680:	08017d70 	stmdaeq	r1, {r4, r5, r6, r8, sl, fp, ip, sp, lr}
 800f684:	20002c88 	andcs	r2, r0, r8, lsl #25

0800f688 <SpiFlashStore::SpiFlashStore()>:
 800f688:	b538      	push	{r3, r4, r5, lr}
 800f68a:	4b0d      	ldr	r3, [pc, #52]	; (800f6c0 <SpiFlashStore::SpiFlashStore()+0x38>)
 800f68c:	4604      	mov	r4, r0
 800f68e:	6018      	str	r0, [r3, #0]
 800f690:	4b0c      	ldr	r3, [pc, #48]	; (800f6c4 <SpiFlashStore::SpiFlashStore()+0x3c>)
 800f692:	4d0d      	ldr	r5, [pc, #52]	; (800f6c8 <SpiFlashStore::SpiFlashStore()+0x40>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	b113      	cbz	r3, 800f6a0 <SpiFlashStore::SpiFlashStore()+0x18>
 800f69a:	f7ff ff5b 	bl	800f554 <SpiFlashStore::Init()>
 800f69e:	7028      	strb	r0, [r5, #0]
 800f6a0:	782b      	ldrb	r3, [r5, #0]
 800f6a2:	b153      	cbz	r3, 800f6ba <SpiFlashStore::SpiFlashStore()+0x32>
 800f6a4:	2320      	movs	r3, #32
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	4908      	ldr	r1, [pc, #32]	; (800f6cc <SpiFlashStore::SpiFlashStore()+0x44>)
 800f6aa:	f851 0b04 	ldr.w	r0, [r1], #4
 800f6ae:	3201      	adds	r2, #1
 800f6b0:	2a1c      	cmp	r2, #28
 800f6b2:	4403      	add	r3, r0
 800f6b4:	d1f9      	bne.n	800f6aa <SpiFlashStore::SpiFlashStore()+0x22>
 800f6b6:	4a06      	ldr	r2, [pc, #24]	; (800f6d0 <SpiFlashStore::SpiFlashStore()+0x48>)
 800f6b8:	6013      	str	r3, [r2, #0]
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	bd38      	pop	{r3, r4, r5, pc}
 800f6be:	bf00      	nop
 800f6c0:	20002c8c 	andcs	r2, r0, ip, lsl #25
 800f6c4:	20002cb4 			; <UNDEFINED> instruction: 0x20002cb4
 800f6c8:	20002c80 	andcs	r2, r0, r0, lsl #25
 800f6cc:	08017d70 	stmdaeq	r1, {r4, r5, r6, r8, sl, fp, ip, sp, lr}
 800f6d0:	20002c84 	andcs	r2, r0, r4, lsl #25

0800f6d4 <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 800f6d4:	b508      	push	{r3, lr}
 800f6d6:	f7ff ff2f 	bl	800f538 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800f6da:	2300      	movs	r3, #0
 800f6dc:	4904      	ldr	r1, [pc, #16]	; (800f6f0 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 800f6de:	1842      	adds	r2, r0, r1
 800f6e0:	540b      	strb	r3, [r1, r0]
 800f6e2:	7053      	strb	r3, [r2, #1]
 800f6e4:	7093      	strb	r3, [r2, #2]
 800f6e6:	70d3      	strb	r3, [r2, #3]
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	4b02      	ldr	r3, [pc, #8]	; (800f6f4 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 800f6ec:	601a      	str	r2, [r3, #0]
 800f6ee:	bd08      	pop	{r3, pc}
 800f6f0:	20001c7c 	andcs	r1, r0, ip, ror ip
 800f6f4:	20002c88 	andcs	r2, r0, r8, lsl #25

0800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 800f6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6fc:	461c      	mov	r4, r3
 800f6fe:	4b19      	ldr	r3, [pc, #100]	; (800f764 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 800f700:	4616      	mov	r6, r2
 800f702:	781f      	ldrb	r7, [r3, #0]
 800f704:	9d07      	ldr	r5, [sp, #28]
 800f706:	b307      	cbz	r7, 800f74a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800f708:	f7ff ff16 	bl	800f538 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800f70c:	f04f 0c00 	mov.w	ip, #0
 800f710:	4a15      	ldr	r2, [pc, #84]	; (800f768 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 800f712:	1831      	adds	r1, r6, r0
 800f714:	1e63      	subs	r3, r4, #1
 800f716:	9c06      	ldr	r4, [sp, #24]
 800f718:	4411      	add	r1, r2
 800f71a:	440c      	add	r4, r1
 800f71c:	42a1      	cmp	r1, r4
 800f71e:	d116      	bne.n	800f74e <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 800f720:	f1bc 0f00 	cmp.w	ip, #0
 800f724:	d011      	beq.n	800f74a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800f726:	4b11      	ldr	r3, [pc, #68]	; (800f76c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 800f728:	6819      	ldr	r1, [r3, #0]
 800f72a:	b109      	cbz	r1, 800f730 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 800f72c:	2906      	cmp	r1, #6
 800f72e:	d101      	bne.n	800f734 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 800f730:	2101      	movs	r1, #1
 800f732:	6019      	str	r1, [r3, #0]
 800f734:	4b0e      	ldr	r3, [pc, #56]	; (800f770 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 800f736:	6819      	ldr	r1, [r3, #0]
 800f738:	4b0e      	ldr	r3, [pc, #56]	; (800f774 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 800f73a:	6019      	str	r1, [r3, #0]
 800f73c:	b12e      	cbz	r6, 800f74a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800f73e:	b125      	cbz	r5, 800f74a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800f740:	9b08      	ldr	r3, [sp, #32]
 800f742:	4418      	add	r0, r3
 800f744:	5813      	ldr	r3, [r2, r0]
 800f746:	432b      	orrs	r3, r5
 800f748:	5013      	str	r3, [r2, r0]
 800f74a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f74e:	f891 8000 	ldrb.w	r8, [r1]
 800f752:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800f756:	3101      	adds	r1, #1
 800f758:	45f0      	cmp	r8, lr
 800f75a:	bf1c      	itt	ne
 800f75c:	f801 ec01 	strbne.w	lr, [r1, #-1]
 800f760:	46bc      	movne	ip, r7
 800f762:	e7db      	b.n	800f71c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 800f764:	20002c80 	andcs	r2, r0, r0, lsl #25
 800f768:	20001c7c 	andcs	r1, r0, ip, ror ip
 800f76c:	20002c88 	andcs	r2, r0, r8, lsl #25
 800f770:	2000ac7c 	andcs	sl, r0, ip, ror ip
 800f774:	20001c78 	andcs	r1, r0, r8, ror ip

0800f778 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>:
 800f778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f77c:	461d      	mov	r5, r3
 800f77e:	4b15      	ldr	r3, [pc, #84]	; (800f7d4 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x5c>)
 800f780:	b085      	sub	sp, #20
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	4607      	mov	r7, r0
 800f786:	4614      	mov	r4, r2
 800f788:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800f78c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 800f790:	b193      	cbz	r3, 800f7b8 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 800f792:	f7ff fed1 	bl	800f538 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800f796:	4a10      	ldr	r2, [pc, #64]	; (800f7d8 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x60>)
 800f798:	eb08 0600 	add.w	r6, r8, r0
 800f79c:	18b3      	adds	r3, r6, r2
 800f79e:	f1b9 0f00 	cmp.w	r9, #0
 800f7a2:	d013      	beq.n	800f7cc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 800f7a4:	5990      	ldr	r0, [r2, r6]
 800f7a6:	b988      	cbnz	r0, 800f7cc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 800f7a8:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800f7ac:	4623      	mov	r3, r4
 800f7ae:	4642      	mov	r2, r8
 800f7b0:	4638      	mov	r0, r7
 800f7b2:	9500      	str	r5, [sp, #0]
 800f7b4:	f7ff ffa0 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f7b8:	b005      	add	sp, #20
 800f7ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f7c6:	429d      	cmp	r5, r3
 800f7c8:	d1f9      	bne.n	800f7be <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x46>
 800f7ca:	e7f5      	b.n	800f7b8 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 800f7cc:	3c01      	subs	r4, #1
 800f7ce:	441d      	add	r5, r3
 800f7d0:	e7f9      	b.n	800f7c6 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x4e>
 800f7d2:	bf00      	nop
 800f7d4:	20002c80 	andcs	r2, r0, r0, lsl #25
 800f7d8:	20001c7c 	andcs	r1, r0, ip, ror ip

0800f7dc <SpiFlashStore::Flash()>:
 800f7dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f7de:	4c25      	ldr	r4, [pc, #148]	; (800f874 <SpiFlashStore::Flash()+0x98>)
 800f7e0:	6820      	ldr	r0, [r4, #0]
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	d043      	beq.n	800f86e <SpiFlashStore::Flash()+0x92>
 800f7e6:	3801      	subs	r0, #1
 800f7e8:	2805      	cmp	r0, #5
 800f7ea:	d831      	bhi.n	800f850 <SpiFlashStore::Flash()+0x74>
 800f7ec:	e8df f000 	tbb	[pc, r0]
 800f7f0:	2e140b03 	vnmlscs.f64	d0, d4, d3
 800f7f4:	4b203025 	blmi	881b890 <__exidx_end+0x80301c>
 800f7f8:	681a      	ldr	r2, [r3, #0]
 800f7fa:	4b20      	ldr	r3, [pc, #128]	; (800f87c <SpiFlashStore::Flash()+0xa0>)
 800f7fc:	601a      	str	r2, [r3, #0]
 800f7fe:	2302      	movs	r3, #2
 800f800:	6023      	str	r3, [r4, #0]
 800f802:	2001      	movs	r0, #1
 800f804:	e033      	b.n	800f86e <SpiFlashStore::Flash()+0x92>
 800f806:	4b1c      	ldr	r3, [pc, #112]	; (800f878 <SpiFlashStore::Flash()+0x9c>)
 800f808:	4a1c      	ldr	r2, [pc, #112]	; (800f87c <SpiFlashStore::Flash()+0xa0>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	6812      	ldr	r2, [r2, #0]
 800f80e:	1a9b      	subs	r3, r3, r2
 800f810:	2b63      	cmp	r3, #99	; 0x63
 800f812:	d9f6      	bls.n	800f802 <SpiFlashStore::Flash()+0x26>
 800f814:	2303      	movs	r3, #3
 800f816:	e7f3      	b.n	800f800 <SpiFlashStore::Flash()+0x24>
 800f818:	4919      	ldr	r1, [pc, #100]	; (800f880 <SpiFlashStore::Flash()+0xa4>)
 800f81a:	481a      	ldr	r0, [pc, #104]	; (800f884 <SpiFlashStore::Flash()+0xa8>)
 800f81c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f820:	6809      	ldr	r1, [r1, #0]
 800f822:	6800      	ldr	r0, [r0, #0]
 800f824:	ab03      	add	r3, sp, #12
 800f826:	f000 fb7d 	bl	800ff24 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 800f82a:	2800      	cmp	r0, #0
 800f82c:	d0e9      	beq.n	800f802 <SpiFlashStore::Flash()+0x26>
 800f82e:	4b12      	ldr	r3, [pc, #72]	; (800f878 <SpiFlashStore::Flash()+0x9c>)
 800f830:	681a      	ldr	r2, [r3, #0]
 800f832:	4b12      	ldr	r3, [pc, #72]	; (800f87c <SpiFlashStore::Flash()+0xa0>)
 800f834:	601a      	str	r2, [r3, #0]
 800f836:	2305      	movs	r3, #5
 800f838:	e7e2      	b.n	800f800 <SpiFlashStore::Flash()+0x24>
 800f83a:	4b0f      	ldr	r3, [pc, #60]	; (800f878 <SpiFlashStore::Flash()+0x9c>)
 800f83c:	4a0f      	ldr	r2, [pc, #60]	; (800f87c <SpiFlashStore::Flash()+0xa0>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	6812      	ldr	r2, [r2, #0]
 800f842:	1a9b      	subs	r3, r3, r2
 800f844:	2b63      	cmp	r3, #99	; 0x63
 800f846:	d9dc      	bls.n	800f802 <SpiFlashStore::Flash()+0x26>
 800f848:	2304      	movs	r3, #4
 800f84a:	e7d9      	b.n	800f800 <SpiFlashStore::Flash()+0x24>
 800f84c:	2306      	movs	r3, #6
 800f84e:	e7d7      	b.n	800f800 <SpiFlashStore::Flash()+0x24>
 800f850:	ab03      	add	r3, sp, #12
 800f852:	4a0d      	ldr	r2, [pc, #52]	; (800f888 <SpiFlashStore::Flash()+0xac>)
 800f854:	490a      	ldr	r1, [pc, #40]	; (800f880 <SpiFlashStore::Flash()+0xa4>)
 800f856:	480b      	ldr	r0, [pc, #44]	; (800f884 <SpiFlashStore::Flash()+0xa8>)
 800f858:	9300      	str	r3, [sp, #0]
 800f85a:	6812      	ldr	r2, [r2, #0]
 800f85c:	4b0b      	ldr	r3, [pc, #44]	; (800f88c <SpiFlashStore::Flash()+0xb0>)
 800f85e:	6809      	ldr	r1, [r1, #0]
 800f860:	6800      	ldr	r0, [r0, #0]
 800f862:	f000 fbff 	bl	8010064 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 800f866:	2800      	cmp	r0, #0
 800f868:	d0cb      	beq.n	800f802 <SpiFlashStore::Flash()+0x26>
 800f86a:	2000      	movs	r0, #0
 800f86c:	6020      	str	r0, [r4, #0]
 800f86e:	b004      	add	sp, #16
 800f870:	bd10      	pop	{r4, pc}
 800f872:	bf00      	nop
 800f874:	20002c88 	andcs	r2, r0, r8, lsl #25
 800f878:	2000ac7c 	andcs	sl, r0, ip, ror ip
 800f87c:	20001c78 	andcs	r1, r0, r8, ror ip
 800f880:	20002c7c 	andcs	r2, r0, ip, ror ip
 800f884:	20002cb4 			; <UNDEFINED> instruction: 0x20002cb4
 800f888:	20002c84 	andcs	r2, r0, r4, lsl #25
 800f88c:	20001c7c 	andcs	r1, r0, ip, ror ip

0800f890 <StoreDisplayUdf::~StoreDisplayUdf()>:
 800f890:	4770      	bx	lr
	...

0800f894 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 800f894:	b507      	push	{r0, r1, r2, lr}
 800f896:	2300      	movs	r3, #0
 800f898:	460a      	mov	r2, r1
 800f89a:	2101      	movs	r1, #1
 800f89c:	e9cd 3100 	strd	r3, r1, [sp]
 800f8a0:	4804      	ldr	r0, [pc, #16]	; (800f8b4 <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x20>)
 800f8a2:	2322      	movs	r3, #34	; 0x22
 800f8a4:	210f      	movs	r1, #15
 800f8a6:	6800      	ldr	r0, [r0, #0]
 800f8a8:	f7ff ff66 	bl	800f778 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 800f8ac:	b003      	add	sp, #12
 800f8ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800f8b2:	bf00      	nop
 800f8b4:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800f8b8 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 800f8b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	460b      	mov	r3, r1
 800f8be:	2122      	movs	r1, #34	; 0x22
 800f8c0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800f8c4:	4804      	ldr	r0, [pc, #16]	; (800f8d8 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 800f8c6:	9100      	str	r1, [sp, #0]
 800f8c8:	6800      	ldr	r0, [r0, #0]
 800f8ca:	210f      	movs	r1, #15
 800f8cc:	f7ff ff14 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f8d0:	b005      	add	sp, #20
 800f8d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f8d6:	bf00      	nop
 800f8d8:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800f8dc <StoreDisplayUdf::~StoreDisplayUdf()>:
 800f8dc:	b510      	push	{r4, lr}
 800f8de:	4604      	mov	r4, r0
 800f8e0:	f003 ff88 	bl	80137f4 <operator delete(void*)>
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	bd10      	pop	{r4, pc}

0800f8e8 <StoreDisplayUdf::StoreDisplayUdf()>:
 800f8e8:	4a02      	ldr	r2, [pc, #8]	; (800f8f4 <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 800f8ea:	6002      	str	r2, [r0, #0]
 800f8ec:	4a02      	ldr	r2, [pc, #8]	; (800f8f8 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 800f8ee:	6010      	str	r0, [r2, #0]
 800f8f0:	4770      	bx	lr
 800f8f2:	bf00      	nop
 800f8f4:	08017de8 	stmdaeq	r1, {r3, r5, r6, r7, r8, sl, fp, ip, sp, lr}
 800f8f8:	20002c94 	mulcs	r0, r4, ip

0800f8fc <StoreDmxSend::~StoreDmxSend()>:
 800f8fc:	4770      	bx	lr
	...

0800f900 <StoreDmxSend::Copy(TDmxParams*)>:
 800f900:	b507      	push	{r0, r1, r2, lr}
 800f902:	2300      	movs	r3, #0
 800f904:	460a      	mov	r2, r1
 800f906:	2101      	movs	r1, #1
 800f908:	e9cd 3100 	strd	r3, r1, [sp]
 800f90c:	4804      	ldr	r0, [pc, #16]	; (800f920 <StoreDmxSend::Copy(TDmxParams*)+0x20>)
 800f90e:	230a      	movs	r3, #10
 800f910:	2102      	movs	r1, #2
 800f912:	6800      	ldr	r0, [r0, #0]
 800f914:	f7ff ff30 	bl	800f778 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 800f918:	b003      	add	sp, #12
 800f91a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f91e:	bf00      	nop
 800f920:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800f924 <StoreDmxSend::Update(TDmxParams const*)>:
 800f924:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f926:	2200      	movs	r2, #0
 800f928:	460b      	mov	r3, r1
 800f92a:	210a      	movs	r1, #10
 800f92c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800f930:	4804      	ldr	r0, [pc, #16]	; (800f944 <StoreDmxSend::Update(TDmxParams const*)+0x20>)
 800f932:	9100      	str	r1, [sp, #0]
 800f934:	6800      	ldr	r0, [r0, #0]
 800f936:	2102      	movs	r1, #2
 800f938:	f7ff fede 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f93c:	b005      	add	sp, #20
 800f93e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f942:	bf00      	nop
 800f944:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800f948 <StoreDmxSend::~StoreDmxSend()>:
 800f948:	b510      	push	{r4, lr}
 800f94a:	4604      	mov	r4, r0
 800f94c:	f003 ff52 	bl	80137f4 <operator delete(void*)>
 800f950:	4620      	mov	r0, r4
 800f952:	bd10      	pop	{r4, pc}

0800f954 <StoreDmxSend::StoreDmxSend()>:
 800f954:	4a02      	ldr	r2, [pc, #8]	; (800f960 <StoreDmxSend::StoreDmxSend()+0xc>)
 800f956:	6002      	str	r2, [r0, #0]
 800f958:	4a02      	ldr	r2, [pc, #8]	; (800f964 <StoreDmxSend::StoreDmxSend()+0x10>)
 800f95a:	6010      	str	r0, [r2, #0]
 800f95c:	4770      	bx	lr
 800f95e:	bf00      	nop
 800f960:	08017e00 	stmdaeq	r1, {r9, sl, fp, ip, sp, lr}
 800f964:	20002c98 	mulcs	r0, r8, ip

0800f968 <StoreNetwork::~StoreNetwork()>:
 800f968:	4770      	bx	lr

0800f96a <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800f96a:	3804      	subs	r0, #4
 800f96c:	4770      	bx	lr
	...

0800f970 <StoreNetwork::Update(networkparams::Params const*)>:
 800f970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f972:	2200      	movs	r2, #0
 800f974:	460b      	mov	r3, r1
 800f976:	215e      	movs	r1, #94	; 0x5e
 800f978:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800f97c:	4804      	ldr	r0, [pc, #16]	; (800f990 <StoreNetwork::Update(networkparams::Params const*)+0x20>)
 800f97e:	9100      	str	r1, [sp, #0]
 800f980:	6800      	ldr	r0, [r0, #0]
 800f982:	4611      	mov	r1, r2
 800f984:	f7ff feb8 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f988:	b005      	add	sp, #20
 800f98a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f98e:	bf00      	nop
 800f990:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800f994 <StoreNetwork::SaveDhcp(bool)>:
 800f994:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f996:	2301      	movs	r3, #1
 800f998:	f88d 1017 	strb.w	r1, [sp, #23]
 800f99c:	2100      	movs	r1, #0
 800f99e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f9a2:	4805      	ldr	r0, [pc, #20]	; (800f9b8 <StoreNetwork::SaveDhcp(bool)+0x24>)
 800f9a4:	9300      	str	r3, [sp, #0]
 800f9a6:	2214      	movs	r2, #20
 800f9a8:	6800      	ldr	r0, [r0, #0]
 800f9aa:	f10d 0317 	add.w	r3, sp, #23
 800f9ae:	f7ff fea3 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f9b2:	b007      	add	sp, #28
 800f9b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9b8:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800f9bc <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 800f9bc:	f1a0 0004 	sub.w	r0, r0, #4
 800f9c0:	e7e8      	b.n	800f994 <StoreNetwork::SaveDhcp(bool)>
 800f9c2:	bf00      	nop

0800f9c4 <StoreNetwork::SaveGatewayIp(unsigned int)>:
 800f9c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f9c6:	2308      	movs	r3, #8
 800f9c8:	9105      	str	r1, [sp, #20]
 800f9ca:	2100      	movs	r1, #0
 800f9cc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f9d0:	2304      	movs	r3, #4
 800f9d2:	4805      	ldr	r0, [pc, #20]	; (800f9e8 <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 800f9d4:	9300      	str	r3, [sp, #0]
 800f9d6:	220c      	movs	r2, #12
 800f9d8:	6800      	ldr	r0, [r0, #0]
 800f9da:	ab05      	add	r3, sp, #20
 800f9dc:	f7ff fe8c 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f9e0:	b007      	add	sp, #28
 800f9e2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9e6:	bf00      	nop
 800f9e8:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800f9ec <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 800f9ec:	f1a0 0004 	sub.w	r0, r0, #4
 800f9f0:	e7e8      	b.n	800f9c4 <StoreNetwork::SaveGatewayIp(unsigned int)>
 800f9f2:	bf00      	nop

0800f9f4 <StoreNetwork::SaveNetMask(unsigned int)>:
 800f9f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f9f6:	2304      	movs	r3, #4
 800f9f8:	9105      	str	r1, [sp, #20]
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800fa00:	4804      	ldr	r0, [pc, #16]	; (800fa14 <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 800fa02:	9300      	str	r3, [sp, #0]
 800fa04:	2208      	movs	r2, #8
 800fa06:	6800      	ldr	r0, [r0, #0]
 800fa08:	ab05      	add	r3, sp, #20
 800fa0a:	f7ff fe75 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fa0e:	b007      	add	sp, #28
 800fa10:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa14:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fa18 <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 800fa18:	f1a0 0004 	sub.w	r0, r0, #4
 800fa1c:	e7ea      	b.n	800f9f4 <StoreNetwork::SaveNetMask(unsigned int)>
 800fa1e:	bf00      	nop

0800fa20 <StoreNetwork::SaveIp(unsigned int)>:
 800fa20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fa22:	2302      	movs	r3, #2
 800fa24:	9105      	str	r1, [sp, #20]
 800fa26:	2100      	movs	r1, #0
 800fa28:	2204      	movs	r2, #4
 800fa2a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800fa2e:	4804      	ldr	r0, [pc, #16]	; (800fa40 <StoreNetwork::SaveIp(unsigned int)+0x20>)
 800fa30:	9200      	str	r2, [sp, #0]
 800fa32:	6800      	ldr	r0, [r0, #0]
 800fa34:	ab05      	add	r3, sp, #20
 800fa36:	f7ff fe5f 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fa3a:	b007      	add	sp, #28
 800fa3c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa40:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fa44 <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 800fa44:	f1a0 0004 	sub.w	r0, r0, #4
 800fa48:	e7ea      	b.n	800fa20 <StoreNetwork::SaveIp(unsigned int)>
 800fa4a:	bf00      	nop

0800fa4c <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800fa4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa4e:	460b      	mov	r3, r1
 800fa50:	2020      	movs	r0, #32
 800fa52:	2100      	movs	r1, #0
 800fa54:	2a40      	cmp	r2, #64	; 0x40
 800fa56:	bf28      	it	cs
 800fa58:	2240      	movcs	r2, #64	; 0x40
 800fa5a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800fa5e:	4804      	ldr	r0, [pc, #16]	; (800fa70 <StoreNetwork::SaveHostName(char const*, unsigned int)+0x24>)
 800fa60:	9200      	str	r2, [sp, #0]
 800fa62:	6800      	ldr	r0, [r0, #0]
 800fa64:	2215      	movs	r2, #21
 800fa66:	f7ff fe47 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fa6a:	b005      	add	sp, #20
 800fa6c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa70:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fa74 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800fa74:	f1a0 0004 	sub.w	r0, r0, #4
 800fa78:	e7e8      	b.n	800fa4c <StoreNetwork::SaveHostName(char const*, unsigned int)>
 800fa7a:	bf00      	nop

0800fa7c <StoreNetwork::~StoreNetwork()>:
 800fa7c:	b510      	push	{r4, lr}
 800fa7e:	4604      	mov	r4, r0
 800fa80:	f003 feb8 	bl	80137f4 <operator delete(void*)>
 800fa84:	4620      	mov	r0, r4
 800fa86:	bd10      	pop	{r4, pc}

0800fa88 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800fa88:	f1a0 0004 	sub.w	r0, r0, #4
 800fa8c:	e7f6      	b.n	800fa7c <StoreNetwork::~StoreNetwork()>
	...

0800fa90 <StoreNetwork::Copy(networkparams::Params*)>:
 800fa90:	b507      	push	{r0, r1, r2, lr}
 800fa92:	2301      	movs	r3, #1
 800fa94:	460a      	mov	r2, r1
 800fa96:	2100      	movs	r1, #0
 800fa98:	e9cd 1300 	strd	r1, r3, [sp]
 800fa9c:	4803      	ldr	r0, [pc, #12]	; (800faac <StoreNetwork::Copy(networkparams::Params*)+0x1c>)
 800fa9e:	235e      	movs	r3, #94	; 0x5e
 800faa0:	6800      	ldr	r0, [r0, #0]
 800faa2:	f7ff fe69 	bl	800f778 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 800faa6:	b003      	add	sp, #12
 800faa8:	f85d fb04 	ldr.w	pc, [sp], #4
 800faac:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fab0 <StoreNetwork::StoreNetwork()>:
 800fab0:	4a03      	ldr	r2, [pc, #12]	; (800fac0 <StoreNetwork::StoreNetwork()+0x10>)
 800fab2:	6002      	str	r2, [r0, #0]
 800fab4:	322c      	adds	r2, #44	; 0x2c
 800fab6:	6042      	str	r2, [r0, #4]
 800fab8:	4a02      	ldr	r2, [pc, #8]	; (800fac4 <StoreNetwork::StoreNetwork()+0x14>)
 800faba:	6010      	str	r0, [r2, #0]
 800fabc:	4770      	bx	lr
 800fabe:	bf00      	nop
 800fac0:	08017e18 	stmdaeq	r1, {r3, r4, r9, sl, fp, ip, sp, lr}
 800fac4:	20002c9c 	mulcs	r0, ip, ip

0800fac8 <StoreRDMDevice::~StoreRDMDevice()>:
 800fac8:	4770      	bx	lr

0800faca <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 800faca:	3804      	subs	r0, #4
 800facc:	4770      	bx	lr
	...

0800fad0 <StoreRDMDevice::Update(TRDMDeviceParams const*)>:
 800fad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fad2:	2200      	movs	r2, #0
 800fad4:	460b      	mov	r3, r1
 800fad6:	2129      	movs	r1, #41	; 0x29
 800fad8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800fadc:	4804      	ldr	r0, [pc, #16]	; (800faf0 <StoreRDMDevice::Update(TRDMDeviceParams const*)+0x20>)
 800fade:	9100      	str	r1, [sp, #0]
 800fae0:	6800      	ldr	r0, [r0, #0]
 800fae2:	210b      	movs	r1, #11
 800fae4:	f7ff fe08 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fae8:	b005      	add	sp, #20
 800faea:	f85d fb04 	ldr.w	pc, [sp], #4
 800faee:	bf00      	nop
 800faf0:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800faf4 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 800faf4:	b570      	push	{r4, r5, r6, lr}
 800faf6:	2401      	movs	r4, #1
 800faf8:	2600      	movs	r6, #0
 800fafa:	4d0c      	ldr	r5, [pc, #48]	; (800fb2c <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 800fafc:	b086      	sub	sp, #24
 800fafe:	460b      	mov	r3, r1
 800fb00:	6828      	ldr	r0, [r5, #0]
 800fb02:	f88d 2017 	strb.w	r2, [sp, #23]
 800fb06:	9200      	str	r2, [sp, #0]
 800fb08:	210b      	movs	r1, #11
 800fb0a:	2204      	movs	r2, #4
 800fb0c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800fb10:	f7ff fdf2 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fb14:	2224      	movs	r2, #36	; 0x24
 800fb16:	210b      	movs	r1, #11
 800fb18:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800fb1c:	6828      	ldr	r0, [r5, #0]
 800fb1e:	9400      	str	r4, [sp, #0]
 800fb20:	f10d 0317 	add.w	r3, sp, #23
 800fb24:	f7ff fde8 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fb28:	b006      	add	sp, #24
 800fb2a:	bd70      	pop	{r4, r5, r6, pc}
 800fb2c:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fb30 <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 800fb30:	f1a0 0004 	sub.w	r0, r0, #4
 800fb34:	e7de      	b.n	800faf4 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 800fb36:	bf00      	nop

0800fb38 <StoreRDMDevice::~StoreRDMDevice()>:
 800fb38:	b510      	push	{r4, lr}
 800fb3a:	4604      	mov	r4, r0
 800fb3c:	f003 fe5a 	bl	80137f4 <operator delete(void*)>
 800fb40:	4620      	mov	r0, r4
 800fb42:	bd10      	pop	{r4, pc}

0800fb44 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 800fb44:	f1a0 0004 	sub.w	r0, r0, #4
 800fb48:	e7f6      	b.n	800fb38 <StoreRDMDevice::~StoreRDMDevice()>
	...

0800fb4c <StoreRDMDevice::Copy(TRDMDeviceParams*)>:
 800fb4c:	b507      	push	{r0, r1, r2, lr}
 800fb4e:	2300      	movs	r3, #0
 800fb50:	460a      	mov	r2, r1
 800fb52:	2101      	movs	r1, #1
 800fb54:	e9cd 3100 	strd	r3, r1, [sp]
 800fb58:	4804      	ldr	r0, [pc, #16]	; (800fb6c <StoreRDMDevice::Copy(TRDMDeviceParams*)+0x20>)
 800fb5a:	2329      	movs	r3, #41	; 0x29
 800fb5c:	210b      	movs	r1, #11
 800fb5e:	6800      	ldr	r0, [r0, #0]
 800fb60:	f7ff fe0a 	bl	800f778 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 800fb64:	b003      	add	sp, #12
 800fb66:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb6a:	bf00      	nop
 800fb6c:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fb70 <StoreRDMDevice::StoreRDMDevice()>:
 800fb70:	4a03      	ldr	r2, [pc, #12]	; (800fb80 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 800fb72:	6002      	str	r2, [r0, #0]
 800fb74:	321c      	adds	r2, #28
 800fb76:	6042      	str	r2, [r0, #4]
 800fb78:	4a02      	ldr	r2, [pc, #8]	; (800fb84 <StoreRDMDevice::StoreRDMDevice()+0x14>)
 800fb7a:	6010      	str	r0, [r2, #0]
 800fb7c:	4770      	bx	lr
 800fb7e:	bf00      	nop
 800fb80:	08017e68 	stmdaeq	r1, {r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800fb84:	20002ca0 	andcs	r2, r0, r0, lsr #25

0800fb88 <StoreRemoteConfig::~StoreRemoteConfig()>:
 800fb88:	4770      	bx	lr
	...

0800fb8c <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 800fb8c:	b507      	push	{r0, r1, r2, lr}
 800fb8e:	2300      	movs	r3, #0
 800fb90:	460a      	mov	r2, r1
 800fb92:	2101      	movs	r1, #1
 800fb94:	e9cd 3100 	strd	r3, r1, [sp]
 800fb98:	4804      	ldr	r0, [pc, #16]	; (800fbac <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x20>)
 800fb9a:	2320      	movs	r3, #32
 800fb9c:	210c      	movs	r1, #12
 800fb9e:	6800      	ldr	r0, [r0, #0]
 800fba0:	f7ff fdea 	bl	800f778 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 800fba4:	b003      	add	sp, #12
 800fba6:	f85d fb04 	ldr.w	pc, [sp], #4
 800fbaa:	bf00      	nop
 800fbac:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fbb0 <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 800fbb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	460b      	mov	r3, r1
 800fbb6:	2120      	movs	r1, #32
 800fbb8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800fbbc:	4804      	ldr	r0, [pc, #16]	; (800fbd0 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 800fbbe:	9100      	str	r1, [sp, #0]
 800fbc0:	6800      	ldr	r0, [r0, #0]
 800fbc2:	210c      	movs	r1, #12
 800fbc4:	f7ff fd98 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fbc8:	b005      	add	sp, #20
 800fbca:	f85d fb04 	ldr.w	pc, [sp], #4
 800fbce:	bf00      	nop
 800fbd0:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fbd4 <StoreRemoteConfig::~StoreRemoteConfig()>:
 800fbd4:	b510      	push	{r4, lr}
 800fbd6:	4604      	mov	r4, r0
 800fbd8:	f003 fe0c 	bl	80137f4 <operator delete(void*)>
 800fbdc:	4620      	mov	r0, r4
 800fbde:	bd10      	pop	{r4, pc}

0800fbe0 <StoreRemoteConfig::StoreRemoteConfig()>:
 800fbe0:	4a02      	ldr	r2, [pc, #8]	; (800fbec <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 800fbe2:	6002      	str	r2, [r0, #0]
 800fbe4:	4a02      	ldr	r2, [pc, #8]	; (800fbf0 <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 800fbe6:	6010      	str	r0, [r2, #0]
 800fbe8:	4770      	bx	lr
 800fbea:	bf00      	nop
 800fbec:	08017e98 	stmdaeq	r1, {r3, r4, r7, r9, sl, fp, ip, sp, lr}
 800fbf0:	20002ca4 	andcs	r2, r0, r4, lsr #25

0800fbf4 <StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
 800fbf4:	4770      	bx	lr

0800fbf6 <non-virtual thunk to StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
 800fbf6:	4770      	bx	lr

0800fbf8 <StoreArtNet::~StoreArtNet()>:
 800fbf8:	4770      	bx	lr

0800fbfa <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 800fbfa:	3804      	subs	r0, #4
 800fbfc:	4770      	bx	lr
	...

0800fc00 <StoreArtNet::Update(artnetparams::Params const*)>:
 800fc00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc02:	2200      	movs	r2, #0
 800fc04:	460b      	mov	r3, r1
 800fc06:	2187      	movs	r1, #135	; 0x87
 800fc08:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800fc0c:	4804      	ldr	r0, [pc, #16]	; (800fc20 <StoreArtNet::Update(artnetparams::Params const*)+0x20>)
 800fc0e:	9100      	str	r1, [sp, #0]
 800fc10:	6800      	ldr	r0, [r0, #0]
 800fc12:	2101      	movs	r1, #1
 800fc14:	f7ff fd70 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fc18:	b005      	add	sp, #20
 800fc1a:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc1e:	bf00      	nop
 800fc20:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fc24 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 800fc24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fc26:	4b0d      	ldr	r3, [pc, #52]	; (800fc5c <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x38>)
 800fc28:	f88d 2017 	strb.w	r2, [sp, #23]
 800fc2c:	681a      	ldr	r2, [r3, #0]
 800fc2e:	428a      	cmp	r2, r1
 800fc30:	d811      	bhi.n	800fc56 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x32>
 800fc32:	1a8a      	subs	r2, r1, r2
 800fc34:	2a03      	cmp	r2, #3
 800fc36:	d80e      	bhi.n	800fc56 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x32>
 800fc38:	2300      	movs	r3, #0
 800fc3a:	9302      	str	r3, [sp, #8]
 800fc3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fc40:	2101      	movs	r1, #1
 800fc42:	4093      	lsls	r3, r2
 800fc44:	4806      	ldr	r0, [pc, #24]	; (800fc60 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x3c>)
 800fc46:	9301      	str	r3, [sp, #4]
 800fc48:	9100      	str	r1, [sp, #0]
 800fc4a:	6800      	ldr	r0, [r0, #0]
 800fc4c:	f10d 0317 	add.w	r3, sp, #23
 800fc50:	3267      	adds	r2, #103	; 0x67
 800fc52:	f7ff fd51 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fc56:	b007      	add	sp, #28
 800fc58:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc5c:	20002ca8 	andcs	r2, r0, r8, lsr #25
 800fc60:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fc64 <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 800fc64:	f1a0 0004 	sub.w	r0, r0, #4
 800fc68:	f7ff bfdc 	b.w	800fc24 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

0800fc6c <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
 800fc6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fc6e:	f88d 2017 	strb.w	r2, [sp, #23]
 800fc72:	b951      	cbnz	r1, 800fc8a <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x1e>
 800fc74:	9102      	str	r1, [sp, #8]
 800fc76:	2204      	movs	r2, #4
 800fc78:	2101      	movs	r1, #1
 800fc7a:	e9cd 1200 	strd	r1, r2, [sp]
 800fc7e:	4804      	ldr	r0, [pc, #16]	; (800fc90 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x24>)
 800fc80:	f10d 0317 	add.w	r3, sp, #23
 800fc84:	6800      	ldr	r0, [r0, #0]
 800fc86:	f7ff fd37 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fc8a:	b007      	add	sp, #28
 800fc8c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc90:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fc94 <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
 800fc94:	f1a0 0004 	sub.w	r0, r0, #4
 800fc98:	f7ff bfe8 	b.w	800fc6c <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>

0800fc9c <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
 800fc9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fc9e:	f88d 2017 	strb.w	r2, [sp, #23]
 800fca2:	b959      	cbnz	r1, 800fcbc <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x20>
 800fca4:	2308      	movs	r3, #8
 800fca6:	9102      	str	r1, [sp, #8]
 800fca8:	2101      	movs	r1, #1
 800fcaa:	e9cd 1300 	strd	r1, r3, [sp]
 800fcae:	4805      	ldr	r0, [pc, #20]	; (800fcc4 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x28>)
 800fcb0:	2205      	movs	r2, #5
 800fcb2:	6800      	ldr	r0, [r0, #0]
 800fcb4:	f10d 0317 	add.w	r3, sp, #23
 800fcb8:	f7ff fd1e 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fcbc:	b007      	add	sp, #28
 800fcbe:	f85d fb04 	ldr.w	pc, [sp], #4
 800fcc2:	bf00      	nop
 800fcc4:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fcc8 <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
 800fcc8:	f1a0 0004 	sub.w	r0, r0, #4
 800fccc:	f7ff bfe6 	b.w	800fc9c <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>

0800fcd0 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 800fcd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fcd2:	4b0c      	ldr	r3, [pc, #48]	; (800fd04 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x34>)
 800fcd4:	9205      	str	r2, [sp, #20]
 800fcd6:	681a      	ldr	r2, [r3, #0]
 800fcd8:	428a      	cmp	r2, r1
 800fcda:	d810      	bhi.n	800fcfe <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x2e>
 800fcdc:	1a8a      	subs	r2, r1, r2
 800fcde:	2a03      	cmp	r2, #3
 800fce0:	d80d      	bhi.n	800fcfe <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x2e>
 800fce2:	2300      	movs	r3, #0
 800fce4:	9302      	str	r3, [sp, #8]
 800fce6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fcea:	2101      	movs	r1, #1
 800fcec:	4093      	lsls	r3, r2
 800fcee:	4806      	ldr	r0, [pc, #24]	; (800fd08 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x38>)
 800fcf0:	9301      	str	r3, [sp, #4]
 800fcf2:	9100      	str	r1, [sp, #0]
 800fcf4:	6800      	ldr	r0, [r0, #0]
 800fcf6:	ab05      	add	r3, sp, #20
 800fcf8:	326c      	adds	r2, #108	; 0x6c
 800fcfa:	f7ff fcfd 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fcfe:	b007      	add	sp, #28
 800fd00:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd04:	20002ca8 	andcs	r2, r0, r8, lsr #25
 800fd08:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fd0c <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 800fd0c:	f1a0 0004 	sub.w	r0, r0, #4
 800fd10:	f7ff bfde 	b.w	800fcd0 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

0800fd14 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 800fd14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fd16:	4b0c      	ldr	r3, [pc, #48]	; (800fd48 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x34>)
 800fd18:	9205      	str	r2, [sp, #20]
 800fd1a:	681a      	ldr	r2, [r3, #0]
 800fd1c:	428a      	cmp	r2, r1
 800fd1e:	d810      	bhi.n	800fd42 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x2e>
 800fd20:	1a8a      	subs	r2, r1, r2
 800fd22:	2a03      	cmp	r2, #3
 800fd24:	d80d      	bhi.n	800fd42 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x2e>
 800fd26:	2300      	movs	r3, #0
 800fd28:	9302      	str	r3, [sp, #8]
 800fd2a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fd2e:	2101      	movs	r1, #1
 800fd30:	4093      	lsls	r3, r2
 800fd32:	4806      	ldr	r0, [pc, #24]	; (800fd4c <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x38>)
 800fd34:	9301      	str	r3, [sp, #4]
 800fd36:	9100      	str	r1, [sp, #0]
 800fd38:	6800      	ldr	r0, [r0, #0]
 800fd3a:	ab05      	add	r3, sp, #20
 800fd3c:	3271      	adds	r2, #113	; 0x71
 800fd3e:	f7ff fcdb 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fd42:	b007      	add	sp, #28
 800fd44:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd48:	20002ca8 	andcs	r2, r0, r8, lsr #25
 800fd4c:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fd50 <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 800fd50:	f1a0 0004 	sub.w	r0, r0, #4
 800fd54:	f7ff bfde 	b.w	800fd14 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

0800fd58 <StoreArtNet::SaveLongName(char const*)>:
 800fd58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd5a:	460b      	mov	r3, r1
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	2101      	movs	r1, #1
 800fd60:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800fd64:	2240      	movs	r2, #64	; 0x40
 800fd66:	4804      	ldr	r0, [pc, #16]	; (800fd78 <StoreArtNet::SaveLongName(char const*)+0x20>)
 800fd68:	9200      	str	r2, [sp, #0]
 800fd6a:	6800      	ldr	r0, [r0, #0]
 800fd6c:	221e      	movs	r2, #30
 800fd6e:	f7ff fcc3 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fd72:	b005      	add	sp, #20
 800fd74:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd78:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fd7c <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
 800fd7c:	f1a0 0004 	sub.w	r0, r0, #4
 800fd80:	e7ea      	b.n	800fd58 <StoreArtNet::SaveLongName(char const*)>
 800fd82:	bf00      	nop

0800fd84 <StoreArtNet::SaveShortName(char const*)>:
 800fd84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd86:	460b      	mov	r3, r1
 800fd88:	2202      	movs	r2, #2
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800fd90:	2212      	movs	r2, #18
 800fd92:	4805      	ldr	r0, [pc, #20]	; (800fda8 <StoreArtNet::SaveShortName(char const*)+0x24>)
 800fd94:	9200      	str	r2, [sp, #0]
 800fd96:	2101      	movs	r1, #1
 800fd98:	220c      	movs	r2, #12
 800fd9a:	6800      	ldr	r0, [r0, #0]
 800fd9c:	f7ff fcac 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fda0:	b005      	add	sp, #20
 800fda2:	f85d fb04 	ldr.w	pc, [sp], #4
 800fda6:	bf00      	nop
 800fda8:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fdac <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
 800fdac:	f1a0 0004 	sub.w	r0, r0, #4
 800fdb0:	e7e8      	b.n	800fd84 <StoreArtNet::SaveShortName(char const*)>
 800fdb2:	bf00      	nop

0800fdb4 <StoreArtNet::SaveFailSafe(unsigned char)>:
 800fdb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fdb6:	2310      	movs	r3, #16
 800fdb8:	2200      	movs	r2, #0
 800fdba:	f88d 1017 	strb.w	r1, [sp, #23]
 800fdbe:	2101      	movs	r1, #1
 800fdc0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800fdc4:	4805      	ldr	r0, [pc, #20]	; (800fddc <StoreArtNet::SaveFailSafe(unsigned char)+0x28>)
 800fdc6:	9100      	str	r1, [sp, #0]
 800fdc8:	2206      	movs	r2, #6
 800fdca:	6800      	ldr	r0, [r0, #0]
 800fdcc:	f10d 0317 	add.w	r3, sp, #23
 800fdd0:	f7ff fc92 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fdd4:	b007      	add	sp, #28
 800fdd6:	f85d fb04 	ldr.w	pc, [sp], #4
 800fdda:	bf00      	nop
 800fddc:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fde0 <non-virtual thunk to StoreArtNet::SaveFailSafe(unsigned char)>:
 800fde0:	f1a0 0004 	sub.w	r0, r0, #4
 800fde4:	e7e6      	b.n	800fdb4 <StoreArtNet::SaveFailSafe(unsigned char)>
 800fde6:	bf00      	nop

0800fde8 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
 800fde8:	b570      	push	{r4, r5, r6, lr}
 800fdea:	4b1b      	ldr	r3, [pc, #108]	; (800fe58 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x70>)
 800fdec:	4615      	mov	r5, r2
 800fdee:	681c      	ldr	r4, [r3, #0]
 800fdf0:	b086      	sub	sp, #24
 800fdf2:	428c      	cmp	r4, r1
 800fdf4:	d829      	bhi.n	800fe4a <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x62>
 800fdf6:	1b0c      	subs	r4, r1, r4
 800fdf8:	2c03      	cmp	r4, #3
 800fdfa:	d826      	bhi.n	800fe4a <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x62>
 800fdfc:	2308      	movs	r3, #8
 800fdfe:	2200      	movs	r2, #0
 800fe00:	4e16      	ldr	r6, [pc, #88]	; (800fe5c <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x74>)
 800fe02:	e9cd 3200 	strd	r3, r2, [sp]
 800fe06:	2101      	movs	r1, #1
 800fe08:	2302      	movs	r3, #2
 800fe0a:	f10d 0216 	add.w	r2, sp, #22
 800fe0e:	6830      	ldr	r0, [r6, #0]
 800fe10:	f7ff fcb2 	bl	800f778 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 800fe14:	2201      	movs	r2, #1
 800fe16:	f104 0308 	add.w	r3, r4, #8
 800fe1a:	fa02 f303 	lsl.w	r3, r2, r3
 800fe1e:	40a2      	lsls	r2, r4
 800fe20:	4313      	orrs	r3, r2
 800fe22:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	ea21 0203 	bic.w	r2, r1, r3
 800fe2c:	b97d      	cbnz	r5, 800fe4e <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x66>
 800fe2e:	f8ad 2016 	strh.w	r2, [sp, #22]
 800fe32:	2300      	movs	r3, #0
 800fe34:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800fe38:	2302      	movs	r3, #2
 800fe3a:	2208      	movs	r2, #8
 800fe3c:	9300      	str	r3, [sp, #0]
 800fe3e:	2101      	movs	r1, #1
 800fe40:	6830      	ldr	r0, [r6, #0]
 800fe42:	f10d 0316 	add.w	r3, sp, #22
 800fe46:	f7ff fc57 	bl	800f6f8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800fe4a:	b006      	add	sp, #24
 800fe4c:	bd70      	pop	{r4, r5, r6, pc}
 800fe4e:	4319      	orrs	r1, r3
 800fe50:	f8ad 1016 	strh.w	r1, [sp, #22]
 800fe54:	e7ed      	b.n	800fe32 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x4a>
 800fe56:	bf00      	nop
 800fe58:	20002ca8 	andcs	r2, r0, r8, lsr #25
 800fe5c:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fe60 <non-virtual thunk to StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
 800fe60:	f1a0 0004 	sub.w	r0, r0, #4
 800fe64:	f7ff bfc0 	b.w	800fde8 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>

0800fe68 <StoreArtNet::Copy(artnetparams::Params*)>:
 800fe68:	b507      	push	{r0, r1, r2, lr}
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	460a      	mov	r2, r1
 800fe6e:	2101      	movs	r1, #1
 800fe70:	e9cd 3100 	strd	r3, r1, [sp]
 800fe74:	4803      	ldr	r0, [pc, #12]	; (800fe84 <StoreArtNet::Copy(artnetparams::Params*)+0x1c>)
 800fe76:	2387      	movs	r3, #135	; 0x87
 800fe78:	6800      	ldr	r0, [r0, #0]
 800fe7a:	f7ff fc7d 	bl	800f778 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 800fe7e:	b003      	add	sp, #12
 800fe80:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe84:	20002c8c 	andcs	r2, r0, ip, lsl #25

0800fe88 <StoreArtNet::~StoreArtNet()>:
 800fe88:	b510      	push	{r4, lr}
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	f003 fcb2 	bl	80137f4 <operator delete(void*)>
 800fe90:	4620      	mov	r0, r4
 800fe92:	bd10      	pop	{r4, pc}

0800fe94 <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 800fe94:	f1a0 0004 	sub.w	r0, r0, #4
 800fe98:	e7f6      	b.n	800fe88 <StoreArtNet::~StoreArtNet()>
	...

0800fe9c <StoreArtNet::StoreArtNet(unsigned int)>:
 800fe9c:	b510      	push	{r4, lr}
 800fe9e:	4a05      	ldr	r2, [pc, #20]	; (800feb4 <StoreArtNet::StoreArtNet(unsigned int)+0x18>)
 800fea0:	4b05      	ldr	r3, [pc, #20]	; (800feb8 <StoreArtNet::StoreArtNet(unsigned int)+0x1c>)
 800fea2:	f102 0408 	add.w	r4, r2, #8
 800fea6:	3248      	adds	r2, #72	; 0x48
 800fea8:	6042      	str	r2, [r0, #4]
 800feaa:	4a04      	ldr	r2, [pc, #16]	; (800febc <StoreArtNet::StoreArtNet(unsigned int)+0x20>)
 800feac:	6004      	str	r4, [r0, #0]
 800feae:	6010      	str	r0, [r2, #0]
 800feb0:	6019      	str	r1, [r3, #0]
 800feb2:	bd10      	pop	{r4, pc}
 800feb4:	08017ea8 	stmdaeq	r1, {r3, r5, r7, r9, sl, fp, ip, sp, lr}
 800feb8:	20002ca8 	andcs	r2, r0, r8, lsr #25
 800febc:	20002cac 	andcs	r2, r0, ip, lsr #25

0800fec0 <FlashRom::FlashRom()>:
 800fec0:	4b07      	ldr	r3, [pc, #28]	; (800fee0 <FlashRom::FlashRom()+0x20>)
 800fec2:	b510      	push	{r4, lr}
 800fec4:	6018      	str	r0, [r3, #0]
 800fec6:	2301      	movs	r3, #1
 800fec8:	4604      	mov	r4, r0
 800feca:	7003      	strb	r3, [r0, #0]
 800fecc:	4b05      	ldr	r3, [pc, #20]	; (800fee4 <FlashRom::FlashRom()+0x24>)
 800fece:	4906      	ldr	r1, [pc, #24]	; (800fee8 <FlashRom::FlashRom()+0x28>)
 800fed0:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800fed4:	4805      	ldr	r0, [pc, #20]	; (800feec <FlashRom::FlashRom()+0x2c>)
 800fed6:	029a      	lsls	r2, r3, #10
 800fed8:	f004 f884 	bl	8013fe4 <printf>
 800fedc:	4620      	mov	r0, r4
 800fede:	bd10      	pop	{r4, pc}
 800fee0:	20002cb4 			; <UNDEFINED> instruction: 0x20002cb4
 800fee4:	1ffff700 	svcne	0x00fff700
 800fee8:	08016c9a 	stmdaeq	r1, {r1, r3, r4, r7, sl, fp, sp, lr}
 800feec:	08017f20 	stmdaeq	r1, {r5, r8, r9, sl, fp, ip, sp, lr}

0800fef0 <FlashRom::GetSize() const>:
 800fef0:	4b02      	ldr	r3, [pc, #8]	; (800fefc <FlashRom::GetSize() const+0xc>)
 800fef2:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 800fef6:	0280      	lsls	r0, r0, #10
 800fef8:	4770      	bx	lr
 800fefa:	bf00      	nop
 800fefc:	1ffff700 	svcne	0x00fff700

0800ff00 <FlashRom::GetSectorSize() const>:
 800ff00:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ff04:	4770      	bx	lr

0800ff06 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 800ff06:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800ff0a:	441a      	add	r2, r3
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d104      	bne.n	800ff1a <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 800ff10:	2200      	movs	r2, #0
 800ff12:	9b00      	ldr	r3, [sp, #0]
 800ff14:	2001      	movs	r0, #1
 800ff16:	601a      	str	r2, [r3, #0]
 800ff18:	4770      	bx	lr
 800ff1a:	f851 0b04 	ldr.w	r0, [r1], #4
 800ff1e:	f843 0b04 	str.w	r0, [r3], #4
 800ff22:	e7f3      	b.n	800ff0c <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>

0800ff24 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 800ff24:	2000      	movs	r0, #0
 800ff26:	b538      	push	{r3, r4, r5, lr}
 800ff28:	4c47      	ldr	r4, [pc, #284]	; (8010048 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 800ff2a:	6018      	str	r0, [r3, #0]
 800ff2c:	6823      	ldr	r3, [r4, #0]
 800ff2e:	2b04      	cmp	r3, #4
 800ff30:	f200 8082 	bhi.w	8010038 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800ff34:	e8df f003 	tbb	[pc, r3]
 800ff38:	78452003 	stmdavc	r5, {r0, r1, sp}^
 800ff3c:	4b430080 	blmi	90d0144 <__exidx_end+0x10b78d0>
 800ff40:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800ff44:	6019      	str	r1, [r3, #0]
 800ff46:	4b42      	ldr	r3, [pc, #264]	; (8010050 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800ff48:	601a      	str	r2, [r3, #0]
 800ff4a:	4b42      	ldr	r3, [pc, #264]	; (8010054 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 800ff4c:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800ff50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff54:	4b40      	ldr	r3, [pc, #256]	; (8010058 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800ff56:	d807      	bhi.n	800ff68 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 800ff58:	2201      	movs	r2, #1
 800ff5a:	701a      	strb	r2, [r3, #0]
 800ff5c:	f004 faf6 	bl	801454c <fmc_bank0_unlock>
 800ff60:	2301      	movs	r3, #1
 800ff62:	6023      	str	r3, [r4, #0]
 800ff64:	2000      	movs	r0, #0
 800ff66:	e026      	b.n	800ffb6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800ff68:	4a3c      	ldr	r2, [pc, #240]	; (801005c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 800ff6a:	4291      	cmp	r1, r2
 800ff6c:	d3f4      	bcc.n	800ff58 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 800ff6e:	2200      	movs	r2, #0
 800ff70:	701a      	strb	r2, [r3, #0]
 800ff72:	f004 faf9 	bl	8014568 <fmc_bank1_unlock>
 800ff76:	e7f3      	b.n	800ff60 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800ff78:	4d37      	ldr	r5, [pc, #220]	; (8010058 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800ff7a:	782b      	ldrb	r3, [r5, #0]
 800ff7c:	b15b      	cbz	r3, 800ff96 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 800ff7e:	f004 fb11 	bl	80145a4 <fmc_bank0_state_get>
 800ff82:	2801      	cmp	r0, #1
 800ff84:	d0ee      	beq.n	800ff64 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 800ff86:	7829      	ldrb	r1, [r5, #0]
 800ff88:	4b35      	ldr	r3, [pc, #212]	; (8010060 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800ff8a:	b939      	cbnz	r1, 800ff9c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 800ff8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff8e:	f022 0202 	bic.w	r2, r2, #2
 800ff92:	651a      	str	r2, [r3, #80]	; 0x50
 800ff94:	e006      	b.n	800ffa4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 800ff96:	f004 fb17 	bl	80145c8 <fmc_bank1_state_get>
 800ff9a:	e7f2      	b.n	800ff82 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 800ff9c:	691a      	ldr	r2, [r3, #16]
 800ff9e:	f022 0202 	bic.w	r2, r2, #2
 800ffa2:	611a      	str	r2, [r3, #16]
 800ffa4:	4b2a      	ldr	r3, [pc, #168]	; (8010050 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	b94b      	cbnz	r3, 800ffbe <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 800ffaa:	b129      	cbz	r1, 800ffb8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 800ffac:	f004 faea 	bl	8014584 <fmc_bank0_lock>
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	2001      	movs	r0, #1
 800ffb4:	6023      	str	r3, [r4, #0]
 800ffb6:	bd38      	pop	{r3, r4, r5, pc}
 800ffb8:	f004 faec 	bl	8014594 <fmc_bank1_lock>
 800ffbc:	e7f8      	b.n	800ffb0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 800ffbe:	2302      	movs	r3, #2
 800ffc0:	e7cf      	b.n	800ff62 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 800ffc2:	4923      	ldr	r1, [pc, #140]	; (8010050 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800ffc4:	680b      	ldr	r3, [r1, #0]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d0ca      	beq.n	800ff60 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800ffca:	4b23      	ldr	r3, [pc, #140]	; (8010058 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800ffcc:	4a1f      	ldr	r2, [pc, #124]	; (801004c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 800ffce:	7818      	ldrb	r0, [r3, #0]
 800ffd0:	4b23      	ldr	r3, [pc, #140]	; (8010060 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800ffd2:	b190      	cbz	r0, 800fffa <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 800ffd4:	6918      	ldr	r0, [r3, #16]
 800ffd6:	f040 0002 	orr.w	r0, r0, #2
 800ffda:	6118      	str	r0, [r3, #16]
 800ffdc:	6810      	ldr	r0, [r2, #0]
 800ffde:	6158      	str	r0, [r3, #20]
 800ffe0:	6918      	ldr	r0, [r3, #16]
 800ffe2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800ffe6:	6118      	str	r0, [r3, #16]
 800ffe8:	680b      	ldr	r3, [r1, #0]
 800ffea:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800ffee:	600b      	str	r3, [r1, #0]
 800fff0:	6813      	ldr	r3, [r2, #0]
 800fff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fff6:	6013      	str	r3, [r2, #0]
 800fff8:	e7b2      	b.n	800ff60 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800fffa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fffc:	f040 0002 	orr.w	r0, r0, #2
 8010000:	6518      	str	r0, [r3, #80]	; 0x50
 8010002:	6810      	ldr	r0, [r2, #0]
 8010004:	6558      	str	r0, [r3, #84]	; 0x54
 8010006:	69dd      	ldr	r5, [r3, #28]
 8010008:	07ad      	lsls	r5, r5, #30
 801000a:	bf48      	it	mi
 801000c:	6158      	strmi	r0, [r3, #20]
 801000e:	4814      	ldr	r0, [pc, #80]	; (8010060 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 8010010:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010016:	6503      	str	r3, [r0, #80]	; 0x50
 8010018:	680b      	ldr	r3, [r1, #0]
 801001a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 801001e:	600b      	str	r3, [r1, #0]
 8010020:	6813      	ldr	r3, [r2, #0]
 8010022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010026:	e7e6      	b.n	800fff6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 8010028:	4b0b      	ldr	r3, [pc, #44]	; (8010058 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 801002a:	781a      	ldrb	r2, [r3, #0]
 801002c:	4b0c      	ldr	r3, [pc, #48]	; (8010060 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 801002e:	b132      	cbz	r2, 801003e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 8010030:	691a      	ldr	r2, [r3, #16]
 8010032:	f022 0201 	bic.w	r2, r2, #1
 8010036:	611a      	str	r2, [r3, #16]
 8010038:	2000      	movs	r0, #0
 801003a:	6020      	str	r0, [r4, #0]
 801003c:	e7bb      	b.n	800ffb6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 801003e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010040:	f022 0201 	bic.w	r2, r2, #1
 8010044:	651a      	str	r2, [r3, #80]	; 0x50
 8010046:	e7f7      	b.n	8010038 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 8010048:	20002cbc 			; <UNDEFINED> instruction: 0x20002cbc
 801004c:	20002cc0 	andcs	r2, r0, r0, asr #25
 8010050:	20002ccc 	andcs	r2, r0, ip, asr #25
 8010054:	1ffff700 	svcne	0x00fff700
 8010058:	20002cc8 	andcs	r2, r0, r8, asr #25
 801005c:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8010060:	40022000 	andmi	r2, r2, r0

08010064 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 8010064:	b570      	push	{r4, r5, r6, lr}
 8010066:	2400      	movs	r4, #0
 8010068:	9804      	ldr	r0, [sp, #16]
 801006a:	6004      	str	r4, [r0, #0]
 801006c:	4c48      	ldr	r4, [pc, #288]	; (8010190 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 801006e:	6820      	ldr	r0, [r4, #0]
 8010070:	2804      	cmp	r0, #4
 8010072:	d848      	bhi.n	8010106 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 8010074:	e8df f000 	tbb	[pc, r0]
 8010078:	22847c03 	addcs	r7, r4, #768	; 0x300
 801007c:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 8010080:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8010084:	6001      	str	r1, [r0, #0]
 8010086:	4844      	ldr	r0, [pc, #272]	; (8010198 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8010088:	6003      	str	r3, [r0, #0]
 801008a:	4b44      	ldr	r3, [pc, #272]	; (801019c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 801008c:	601a      	str	r2, [r3, #0]
 801008e:	4b44      	ldr	r3, [pc, #272]	; (80101a0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 8010090:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8010094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010098:	4b42      	ldr	r3, [pc, #264]	; (80101a4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 801009a:	d807      	bhi.n	80100ac <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 801009c:	2201      	movs	r2, #1
 801009e:	701a      	strb	r2, [r3, #0]
 80100a0:	f004 fa54 	bl	801454c <fmc_bank0_unlock>
 80100a4:	2303      	movs	r3, #3
 80100a6:	6023      	str	r3, [r4, #0]
 80100a8:	2000      	movs	r0, #0
 80100aa:	e026      	b.n	80100fa <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 80100ac:	4a3e      	ldr	r2, [pc, #248]	; (80101a8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 80100ae:	4291      	cmp	r1, r2
 80100b0:	d3f4      	bcc.n	801009c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 80100b2:	2200      	movs	r2, #0
 80100b4:	701a      	strb	r2, [r3, #0]
 80100b6:	f004 fa57 	bl	8014568 <fmc_bank1_unlock>
 80100ba:	e7f3      	b.n	80100a4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 80100bc:	4d39      	ldr	r5, [pc, #228]	; (80101a4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 80100be:	782b      	ldrb	r3, [r5, #0]
 80100c0:	b15b      	cbz	r3, 80100da <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 80100c2:	f004 fa6f 	bl	80145a4 <fmc_bank0_state_get>
 80100c6:	2801      	cmp	r0, #1
 80100c8:	d0ee      	beq.n	80100a8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 80100ca:	7829      	ldrb	r1, [r5, #0]
 80100cc:	4b37      	ldr	r3, [pc, #220]	; (80101ac <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 80100ce:	b939      	cbnz	r1, 80100e0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 80100d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80100d2:	f022 0201 	bic.w	r2, r2, #1
 80100d6:	651a      	str	r2, [r3, #80]	; 0x50
 80100d8:	e006      	b.n	80100e8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 80100da:	f004 fa75 	bl	80145c8 <fmc_bank1_state_get>
 80100de:	e7f2      	b.n	80100c6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 80100e0:	691a      	ldr	r2, [r3, #16]
 80100e2:	f022 0201 	bic.w	r2, r2, #1
 80100e6:	611a      	str	r2, [r3, #16]
 80100e8:	4b2c      	ldr	r3, [pc, #176]	; (801019c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	b94b      	cbnz	r3, 8010102 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 80100ee:	b129      	cbz	r1, 80100fc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 80100f0:	f004 fa48 	bl	8014584 <fmc_bank0_lock>
 80100f4:	2300      	movs	r3, #0
 80100f6:	2001      	movs	r0, #1
 80100f8:	6023      	str	r3, [r4, #0]
 80100fa:	bd70      	pop	{r4, r5, r6, pc}
 80100fc:	f004 fa4a 	bl	8014594 <fmc_bank1_lock>
 8010100:	e7f8      	b.n	80100f4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 8010102:	2304      	movs	r3, #4
 8010104:	e7cf      	b.n	80100a6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 8010106:	4a25      	ldr	r2, [pc, #148]	; (801019c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 8010108:	6813      	ldr	r3, [r2, #0]
 801010a:	2b03      	cmp	r3, #3
 801010c:	d91a      	bls.n	8010144 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 801010e:	4b25      	ldr	r3, [pc, #148]	; (80101a4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8010110:	7819      	ldrb	r1, [r3, #0]
 8010112:	4b26      	ldr	r3, [pc, #152]	; (80101ac <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8010114:	b189      	cbz	r1, 801013a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 8010116:	6919      	ldr	r1, [r3, #16]
 8010118:	f041 0101 	orr.w	r1, r1, #1
 801011c:	6119      	str	r1, [r3, #16]
 801011e:	4d1e      	ldr	r5, [pc, #120]	; (8010198 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 8010120:	481c      	ldr	r0, [pc, #112]	; (8010194 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 8010122:	6829      	ldr	r1, [r5, #0]
 8010124:	6803      	ldr	r3, [r0, #0]
 8010126:	f851 6b04 	ldr.w	r6, [r1], #4
 801012a:	f843 6b04 	str.w	r6, [r3], #4
 801012e:	6003      	str	r3, [r0, #0]
 8010130:	6813      	ldr	r3, [r2, #0]
 8010132:	6029      	str	r1, [r5, #0]
 8010134:	3b04      	subs	r3, #4
 8010136:	6013      	str	r3, [r2, #0]
 8010138:	e7b4      	b.n	80100a4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 801013a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801013c:	f041 0101 	orr.w	r1, r1, #1
 8010140:	6519      	str	r1, [r3, #80]	; 0x50
 8010142:	e7ec      	b.n	801011e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 8010144:	2b00      	cmp	r3, #0
 8010146:	d0ad      	beq.n	80100a4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8010148:	4b16      	ldr	r3, [pc, #88]	; (80101a4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 801014a:	781a      	ldrb	r2, [r3, #0]
 801014c:	4b17      	ldr	r3, [pc, #92]	; (80101ac <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 801014e:	b152      	cbz	r2, 8010166 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 8010150:	691a      	ldr	r2, [r3, #16]
 8010152:	f042 0201 	orr.w	r2, r2, #1
 8010156:	611a      	str	r2, [r3, #16]
 8010158:	4a0f      	ldr	r2, [pc, #60]	; (8010198 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 801015a:	4b0e      	ldr	r3, [pc, #56]	; (8010194 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 801015c:	6812      	ldr	r2, [r2, #0]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	6812      	ldr	r2, [r2, #0]
 8010162:	601a      	str	r2, [r3, #0]
 8010164:	e79e      	b.n	80100a4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 8010166:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010168:	f042 0201 	orr.w	r2, r2, #1
 801016c:	651a      	str	r2, [r3, #80]	; 0x50
 801016e:	e7f3      	b.n	8010158 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 8010170:	4b0c      	ldr	r3, [pc, #48]	; (80101a4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 8010172:	781a      	ldrb	r2, [r3, #0]
 8010174:	4b0d      	ldr	r3, [pc, #52]	; (80101ac <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 8010176:	b132      	cbz	r2, 8010186 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 8010178:	691a      	ldr	r2, [r3, #16]
 801017a:	f022 0202 	bic.w	r2, r2, #2
 801017e:	611a      	str	r2, [r3, #16]
 8010180:	2000      	movs	r0, #0
 8010182:	6020      	str	r0, [r4, #0]
 8010184:	e7b9      	b.n	80100fa <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 8010186:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010188:	f022 0202 	bic.w	r2, r2, #2
 801018c:	651a      	str	r2, [r3, #80]	; 0x50
 801018e:	e7f7      	b.n	8010180 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 8010190:	20002cbc 			; <UNDEFINED> instruction: 0x20002cbc
 8010194:	20002cb8 			; <UNDEFINED> instruction: 0x20002cb8
 8010198:	20002cc4 	andcs	r2, r0, r4, asr #25
 801019c:	20002ccc 	andcs	r2, r0, ip, asr #25
 80101a0:	1ffff700 	svcne	0x00fff700
 80101a4:	20002cc8 	andcs	r2, r0, r8, asr #25
 80101a8:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 80101ac:	40022000 	andmi	r2, r2, r0

080101b0 <net_set_ip>:
 80101b0:	b510      	push	{r4, lr}
 80101b2:	4c05      	ldr	r4, [pc, #20]	; (80101c8 <net_set_ip+0x18>)
 80101b4:	6020      	str	r0, [r4, #0]
 80101b6:	4621      	mov	r1, r4
 80101b8:	4804      	ldr	r0, [pc, #16]	; (80101cc <net_set_ip+0x1c>)
 80101ba:	f7f7 f8af 	bl	800731c <arp_init>
 80101be:	4620      	mov	r0, r4
 80101c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101c4:	f001 bff8 	b.w	80121b8 <ip_set_ip>
 80101c8:	20002cd0 	ldrdcs	r2, [r0], -r0
 80101cc:	20002cdc 	ldrdcs	r2, [r0], -ip

080101d0 <net_set_gw>:
 80101d0:	4b02      	ldr	r3, [pc, #8]	; (80101dc <net_set_gw+0xc>)
 80101d2:	6098      	str	r0, [r3, #8]
 80101d4:	4618      	mov	r0, r3
 80101d6:	f001 bfef 	b.w	80121b8 <ip_set_ip>
 80101da:	bf00      	nop
 80101dc:	20002cd0 	ldrdcs	r2, [r0], -r0

080101e0 <net_set_dhcp>:
 80101e0:	b570      	push	{r4, r5, r6, lr}
 80101e2:	2400      	movs	r4, #0
 80101e4:	4605      	mov	r5, r0
 80101e6:	7014      	strb	r4, [r2, #0]
 80101e8:	4616      	mov	r6, r2
 80101ea:	4810      	ldr	r0, [pc, #64]	; (801022c <net_set_dhcp+0x4c>)
 80101ec:	460a      	mov	r2, r1
 80101ee:	4910      	ldr	r1, [pc, #64]	; (8010230 <net_set_dhcp+0x50>)
 80101f0:	f001 fdc2 	bl	8011d78 <dhcp_client>
 80101f4:	42a0      	cmp	r0, r4
 80101f6:	da17      	bge.n	8010228 <net_set_dhcp+0x48>
 80101f8:	480d      	ldr	r0, [pc, #52]	; (8010230 <net_set_dhcp+0x50>)
 80101fa:	f000 f837 	bl	801026c <rfc3927>
 80101fe:	7030      	strb	r0, [r6, #0]
 8010200:	490b      	ldr	r1, [pc, #44]	; (8010230 <net_set_dhcp+0x50>)
 8010202:	480a      	ldr	r0, [pc, #40]	; (801022c <net_set_dhcp+0x4c>)
 8010204:	f7f7 f88a 	bl	800731c <arp_init>
 8010208:	4809      	ldr	r0, [pc, #36]	; (8010230 <net_set_dhcp+0x50>)
 801020a:	f001 ffd5 	bl	80121b8 <ip_set_ip>
 801020e:	4a08      	ldr	r2, [pc, #32]	; (8010230 <net_set_dhcp+0x50>)
 8010210:	1e6b      	subs	r3, r5, #1
 8010212:	350b      	adds	r5, #11
 8010214:	f812 1b01 	ldrb.w	r1, [r2], #1
 8010218:	f803 1f01 	strb.w	r1, [r3, #1]!
 801021c:	42ab      	cmp	r3, r5
 801021e:	d1f9      	bne.n	8010214 <net_set_dhcp+0x34>
 8010220:	4b04      	ldr	r3, [pc, #16]	; (8010234 <net_set_dhcp+0x54>)
 8010222:	4620      	mov	r0, r4
 8010224:	701c      	strb	r4, [r3, #0]
 8010226:	bd70      	pop	{r4, r5, r6, pc}
 8010228:	2401      	movs	r4, #1
 801022a:	e7e9      	b.n	8010200 <net_set_dhcp+0x20>
 801022c:	20002cdc 	ldrdcs	r2, [r0], -ip
 8010230:	20002cd0 	ldrdcs	r2, [r0], -r0
 8010234:	20002ce2 	andcs	r2, r0, r2, ror #25

08010238 <net_dhcp_release>:
 8010238:	b508      	push	{r3, lr}
 801023a:	f001 fea5 	bl	8011f88 <dhcp_client_release>
 801023e:	2200      	movs	r2, #0
 8010240:	4b01      	ldr	r3, [pc, #4]	; (8010248 <net_dhcp_release+0x10>)
 8010242:	701a      	strb	r2, [r3, #0]
 8010244:	bd08      	pop	{r3, pc}
 8010246:	bf00      	nop
 8010248:	20002ce2 	andcs	r2, r0, r2, ror #25

0801024c <net_timers_run>:
 801024c:	4b05      	ldr	r3, [pc, #20]	; (8010264 <net_timers_run+0x18>)
 801024e:	4a06      	ldr	r2, [pc, #24]	; (8010268 <net_timers_run+0x1c>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	6811      	ldr	r1, [r2, #0]
 8010254:	4299      	cmp	r1, r3
 8010256:	d803      	bhi.n	8010260 <net_timers_run+0x14>
 8010258:	3364      	adds	r3, #100	; 0x64
 801025a:	6013      	str	r3, [r2, #0]
 801025c:	f001 bf22 	b.w	80120a4 <igmp_timer>
 8010260:	4770      	bx	lr
 8010262:	bf00      	nop
 8010264:	2000ac7c 	andcs	sl, r0, ip, ror ip
 8010268:	20002ce8 	andcs	r2, r0, r8, ror #25

0801026c <rfc3927>:
 801026c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010270:	4606      	mov	r6, r0
 8010272:	25ff      	movs	r5, #255	; 0xff
 8010274:	4b18      	ldr	r3, [pc, #96]	; (80102d8 <rfc3927+0x6c>)
 8010276:	4f19      	ldr	r7, [pc, #100]	; (80102dc <rfc3927+0x70>)
 8010278:	791a      	ldrb	r2, [r3, #4]
 801027a:	78dc      	ldrb	r4, [r3, #3]
 801027c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80102e0 <rfc3927+0x74>
 8010280:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 8010284:	f8d7 9000 	ldr.w	r9, [r7]
 8010288:	f8df b058 	ldr.w	fp, [pc, #88]	; 80102e4 <rfc3927+0x78>
 801028c:	f8df a058 	ldr.w	sl, [pc, #88]	; 80102e8 <rfc3927+0x7c>
 8010290:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8010294:	4659      	mov	r1, fp
 8010296:	4620      	mov	r0, r4
 8010298:	f001 fc62 	bl	8011b60 <arp_cache_lookup>
 801029c:	b190      	cbz	r0, 80102c4 <rfc3927+0x58>
 801029e:	ba24      	rev	r4, r4
 80102a0:	3401      	adds	r4, #1
 80102a2:	3d01      	subs	r5, #1
 80102a4:	ba24      	rev	r4, r4
 80102a6:	b2ad      	uxth	r5, r5
 80102a8:	4554      	cmp	r4, sl
 80102aa:	bf08      	it	eq
 80102ac:	4644      	moveq	r4, r8
 80102ae:	b18d      	cbz	r5, 80102d4 <rfc3927+0x68>
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	eba3 0309 	sub.w	r3, r3, r9
 80102b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80102ba:	d3eb      	bcc.n	8010294 <rfc3927+0x28>
 80102bc:	2400      	movs	r4, #0
 80102be:	4623      	mov	r3, r4
 80102c0:	4620      	mov	r0, r4
 80102c2:	e002      	b.n	80102ca <rfc3927+0x5e>
 80102c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80102c8:	2001      	movs	r0, #1
 80102ca:	e9c6 3401 	strd	r3, r4, [r6, #4]
 80102ce:	6034      	str	r4, [r6, #0]
 80102d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102d4:	462c      	mov	r4, r5
 80102d6:	e7f2      	b.n	80102be <rfc3927+0x52>
 80102d8:	20002cec 	andcs	r2, r0, ip, ror #25
 80102dc:	2000ac7c 	andcs	sl, r0, ip, ror ip
 80102e0:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 80102e4:	20002cf4 	strdcs	r2, [r0], -r4
 80102e8:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

080102ec <_init_tcb>:
 80102ec:	b510      	push	{r4, lr}
 80102ee:	4603      	mov	r3, r0
 80102f0:	2400      	movs	r4, #0
 80102f2:	f100 0244 	add.w	r2, r0, #68	; 0x44
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d10d      	bne.n	8010316 <_init_tcb+0x2a>
 80102fa:	4b08      	ldr	r3, [pc, #32]	; (801031c <_init_tcb+0x30>)
 80102fc:	f640 3268 	movw	r2, #2920	; 0xb68
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	8702      	strh	r2, [r0, #56]	; 0x38
 8010304:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010308:	6283      	str	r3, [r0, #40]	; 0x28
 801030a:	6243      	str	r3, [r0, #36]	; 0x24
 801030c:	2301      	movs	r3, #1
 801030e:	8001      	strh	r1, [r0, #0]
 8010310:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8010314:	bd10      	pop	{r4, pc}
 8010316:	f803 4b01 	strb.w	r4, [r3], #1
 801031a:	e7ec      	b.n	80102f6 <_init_tcb+0xa>
 801031c:	2000ac7c 	andcs	sl, r0, ip, ror ip

08010320 <memcpy.isra.0>:
 8010320:	3801      	subs	r0, #1
 8010322:	440a      	add	r2, r1
 8010324:	4291      	cmp	r1, r2
 8010326:	d100      	bne.n	801032a <memcpy.isra.0+0xa>
 8010328:	4770      	bx	lr
 801032a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801032e:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010332:	e7f7      	b.n	8010324 <memcpy.isra.0+0x4>

08010334 <_bswap32>:
 8010334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010336:	2204      	movs	r2, #4
 8010338:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 801033c:	4629      	mov	r1, r5
 801033e:	4604      	mov	r4, r0
 8010340:	eb0d 0002 	add.w	r0, sp, r2
 8010344:	f7ff ffec 	bl	8010320 <memcpy.isra.0>
 8010348:	2204      	movs	r2, #4
 801034a:	9b01      	ldr	r3, [sp, #4]
 801034c:	eb0d 0102 	add.w	r1, sp, r2
 8010350:	ba1b      	rev	r3, r3
 8010352:	4628      	mov	r0, r5
 8010354:	9301      	str	r3, [sp, #4]
 8010356:	f7ff ffe3 	bl	8010320 <memcpy.isra.0>
 801035a:	2204      	movs	r2, #4
 801035c:	3426      	adds	r4, #38	; 0x26
 801035e:	eb0d 0002 	add.w	r0, sp, r2
 8010362:	4621      	mov	r1, r4
 8010364:	f7ff ffdc 	bl	8010320 <memcpy.isra.0>
 8010368:	2204      	movs	r2, #4
 801036a:	9b01      	ldr	r3, [sp, #4]
 801036c:	4620      	mov	r0, r4
 801036e:	ba1b      	rev	r3, r3
 8010370:	eb0d 0102 	add.w	r1, sp, r2
 8010374:	9301      	str	r3, [sp, #4]
 8010376:	f7ff ffd3 	bl	8010320 <memcpy.isra.0>
 801037a:	b003      	add	sp, #12
 801037c:	bd30      	pop	{r4, r5, pc}
	...

08010380 <_tcp_send_package>:
 8010380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010384:	7a0b      	ldrb	r3, [r1, #8]
 8010386:	4605      	mov	r5, r0
 8010388:	f013 0f02 	tst.w	r3, #2
 801038c:	bf0c      	ite	eq
 801038e:	f04f 0805 	moveq.w	r8, #5
 8010392:	f04f 0806 	movne.w	r8, #6
 8010396:	f04f 0a00 	mov.w	sl, #0
 801039a:	4c47      	ldr	r4, [pc, #284]	; (80104b8 <_tcp_send_package+0x138>)
 801039c:	460f      	mov	r7, r1
 801039e:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 80103a0:	f100 0108 	add.w	r1, r0, #8
 80103a4:	2206      	movs	r2, #6
 80103a6:	4620      	mov	r0, r4
 80103a8:	f7ff ffba 	bl	8010320 <memcpy.isra.0>
 80103ac:	4a43      	ldr	r2, [pc, #268]	; (80104bc <_tcp_send_package+0x13c>)
 80103ae:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 80103b2:	8813      	ldrh	r3, [r2, #0]
 80103b4:	b2b6      	uxth	r6, r6
 80103b6:	1c59      	adds	r1, r3, #1
 80103b8:	8263      	strh	r3, [r4, #18]
 80103ba:	f105 0904 	add.w	r9, r5, #4
 80103be:	f106 0314 	add.w	r3, r6, #20
 80103c2:	ba5b      	rev16	r3, r3
 80103c4:	8011      	strh	r1, [r2, #0]
 80103c6:	f104 001e 	add.w	r0, r4, #30
 80103ca:	2204      	movs	r2, #4
 80103cc:	4649      	mov	r1, r9
 80103ce:	8223      	strh	r3, [r4, #16]
 80103d0:	f7ff ffa6 	bl	8010320 <memcpy.isra.0>
 80103d4:	2114      	movs	r1, #20
 80103d6:	f104 000e 	add.w	r0, r4, #14
 80103da:	f8a4 a018 	strh.w	sl, [r4, #24]
 80103de:	f001 fef4 	bl	80121ca <net_chksum>
 80103e2:	882b      	ldrh	r3, [r5, #0]
 80103e4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80103e8:	8463      	strh	r3, [r4, #34]	; 0x22
 80103ea:	886b      	ldrh	r3, [r5, #2]
 80103ec:	8320      	strh	r0, [r4, #24]
 80103ee:	84a3      	strh	r3, [r4, #36]	; 0x24
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 80103f4:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f884 802e 	strb.w	r8, [r4, #46]	; 0x2e
 80103fe:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 8010402:	7a3b      	ldrb	r3, [r7, #8]
 8010404:	8622      	strh	r2, [r4, #48]	; 0x30
 8010406:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 801040a:	079b      	lsls	r3, r3, #30
 801040c:	bf48      	it	mi
 801040e:	f240 4302 	movwmi	r3, #1026	; 0x402
 8010412:	8baa      	ldrh	r2, [r5, #28]
 8010414:	bf48      	it	mi
 8010416:	86e3      	strhmi	r3, [r4, #54]	; 0x36
 8010418:	86a2      	strh	r2, [r4, #52]	; 0x34
 801041a:	bf42      	ittt	mi
 801041c:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 8010420:	4622      	movmi	r2, r4
 8010422:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 8010426:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8010428:	f8a4 a032 	strh.w	sl, [r4, #50]	; 0x32
 801042c:	bf58      	it	pl
 801042e:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 8010432:	2b00      	cmp	r3, #0
 8010434:	d13e      	bne.n	80104b4 <_tcp_send_package+0x134>
 8010436:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8010438:	481f      	ldr	r0, [pc, #124]	; (80104b8 <_tcp_send_package+0x138>)
 801043a:	ba5b      	rev16	r3, r3
 801043c:	8463      	strh	r3, [r4, #34]	; 0x22
 801043e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8010440:	ba5b      	rev16	r3, r3
 8010442:	84a3      	strh	r3, [r4, #36]	; 0x24
 8010444:	f7ff ff76 	bl	8010334 <_bswap32>
 8010448:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801044a:	a801      	add	r0, sp, #4
 801044c:	ba5b      	rev16	r3, r3
 801044e:	8623      	strh	r3, [r4, #48]	; 0x30
 8010450:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010452:	220c      	movs	r2, #12
 8010454:	ba5b      	rev16	r3, r3
 8010456:	491a      	ldr	r1, [pc, #104]	; (80104c0 <_tcp_send_package+0x140>)
 8010458:	86a3      	strh	r3, [r4, #52]	; 0x34
 801045a:	f7ff ff61 	bl	8010320 <memcpy.isra.0>
 801045e:	2204      	movs	r2, #4
 8010460:	4918      	ldr	r1, [pc, #96]	; (80104c4 <_tcp_send_package+0x144>)
 8010462:	4817      	ldr	r0, [pc, #92]	; (80104c0 <_tcp_send_package+0x140>)
 8010464:	f7ff ff5c 	bl	8010320 <memcpy.isra.0>
 8010468:	2204      	movs	r2, #4
 801046a:	4649      	mov	r1, r9
 801046c:	4816      	ldr	r0, [pc, #88]	; (80104c8 <_tcp_send_package+0x148>)
 801046e:	f7ff ff57 	bl	8010320 <memcpy.isra.0>
 8010472:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8010476:	f106 010c 	add.w	r1, r6, #12
 801047a:	83e3      	strh	r3, [r4, #30]
 801047c:	4810      	ldr	r0, [pc, #64]	; (80104c0 <_tcp_send_package+0x140>)
 801047e:	ba73      	rev16	r3, r6
 8010480:	8423      	strh	r3, [r4, #32]
 8010482:	f001 fea2 	bl	80121ca <net_chksum>
 8010486:	a901      	add	r1, sp, #4
 8010488:	4605      	mov	r5, r0
 801048a:	220c      	movs	r2, #12
 801048c:	480c      	ldr	r0, [pc, #48]	; (80104c0 <_tcp_send_package+0x140>)
 801048e:	f7ff ff47 	bl	8010320 <memcpy.isra.0>
 8010492:	4809      	ldr	r0, [pc, #36]	; (80104b8 <_tcp_send_package+0x138>)
 8010494:	f106 0122 	add.w	r1, r6, #34	; 0x22
 8010498:	8665      	strh	r5, [r4, #50]	; 0x32
 801049a:	b004      	add	sp, #16
 801049c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104a0:	f004 bd52 	b.w	8014f48 <emac_eth_send>
 80104a4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80104a6:	5cc9      	ldrb	r1, [r1, r3]
 80104a8:	54d1      	strb	r1, [r2, r3]
 80104aa:	3301      	adds	r3, #1
 80104ac:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 80104ae:	4299      	cmp	r1, r3
 80104b0:	d8f8      	bhi.n	80104a4 <_tcp_send_package+0x124>
 80104b2:	e7c0      	b.n	8010436 <_tcp_send_package+0xb6>
 80104b4:	2300      	movs	r3, #0
 80104b6:	e7f9      	b.n	80104ac <_tcp_send_package+0x12c>
 80104b8:	200038b4 			; <UNDEFINED> instruction: 0x200038b4
 80104bc:	20002cfc 	strdcs	r2, [r0], -ip
 80104c0:	200038ca 	andcs	r3, r0, sl, asr #17
 80104c4:	20002cd0 	ldrdcs	r2, [r0], -r0
 80104c8:	200038ce 	andcs	r3, r0, lr, asr #17

080104cc <_send_reset>:
 80104cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80104ce:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80104d2:	4604      	mov	r4, r0
 80104d4:	075a      	lsls	r2, r3, #29
 80104d6:	460e      	mov	r6, r1
 80104d8:	d421      	bmi.n	801051e <_send_reset+0x52>
 80104da:	2204      	movs	r2, #4
 80104dc:	f013 0310 	ands.w	r3, r3, #16
 80104e0:	f88d 200c 	strb.w	r2, [sp, #12]
 80104e4:	d01d      	beq.n	8010522 <_send_reset+0x56>
 80104e6:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 80104ea:	4668      	mov	r0, sp
 80104ec:	f7ff ff18 	bl	8010320 <memcpy.isra.0>
 80104f0:	9b00      	ldr	r3, [sp, #0]
 80104f2:	9301      	str	r3, [sp, #4]
 80104f4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80104f8:	4668      	mov	r0, sp
 80104fa:	f3c3 0540 	ubfx	r5, r3, #1, #1
 80104fe:	f104 0126 	add.w	r1, r4, #38	; 0x26
 8010502:	07db      	lsls	r3, r3, #31
 8010504:	f04f 0204 	mov.w	r2, #4
 8010508:	bf48      	it	mi
 801050a:	3501      	addmi	r5, #1
 801050c:	f7ff ff08 	bl	8010320 <memcpy.isra.0>
 8010510:	9b00      	ldr	r3, [sp, #0]
 8010512:	4630      	mov	r0, r6
 8010514:	441d      	add	r5, r3
 8010516:	a901      	add	r1, sp, #4
 8010518:	9502      	str	r5, [sp, #8]
 801051a:	f7ff ff31 	bl	8010380 <_tcp_send_package>
 801051e:	b004      	add	sp, #16
 8010520:	bd70      	pop	{r4, r5, r6, pc}
 8010522:	9301      	str	r3, [sp, #4]
 8010524:	2314      	movs	r3, #20
 8010526:	f88d 300c 	strb.w	r3, [sp, #12]
 801052a:	e7e3      	b.n	80104f4 <_send_reset+0x28>

0801052c <tcp_begin>:
 801052c:	b508      	push	{r3, lr}
 801052e:	4b0a      	ldr	r3, [pc, #40]	; (8010558 <tcp_begin+0x2c>)
 8010530:	4601      	mov	r1, r0
 8010532:	881a      	ldrh	r2, [r3, #0]
 8010534:	4282      	cmp	r2, r0
 8010536:	d102      	bne.n	801053e <tcp_begin+0x12>
 8010538:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801053c:	b130      	cbz	r0, 801054c <tcp_begin+0x20>
 801053e:	b12a      	cbz	r2, 801054c <tcp_begin+0x20>
 8010540:	4806      	ldr	r0, [pc, #24]	; (801055c <tcp_begin+0x30>)
 8010542:	f002 ffe7 	bl	8013514 <console_error>
 8010546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801054a:	bd08      	pop	{r3, pc}
 801054c:	4802      	ldr	r0, [pc, #8]	; (8010558 <tcp_begin+0x2c>)
 801054e:	8019      	strh	r1, [r3, #0]
 8010550:	f7ff fecc 	bl	80102ec <_init_tcb>
 8010554:	2000      	movs	r0, #0
 8010556:	e7f8      	b.n	801054a <tcp_begin+0x1e>
 8010558:	20003870 	andcs	r3, r0, r0, ror r8
 801055c:	08017f4e 	stmdaeq	r1, {r1, r2, r3, r6, r8, r9, sl, fp, ip, sp, lr}

08010560 <tcp_write>:
 8010560:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8010564:	429a      	cmp	r2, r3
 8010566:	bf28      	it	cs
 8010568:	461a      	movcs	r2, r3
 801056a:	2344      	movs	r3, #68	; 0x44
 801056c:	b530      	push	{r4, r5, lr}
 801056e:	4c0d      	ldr	r4, [pc, #52]	; (80105a4 <tcp_write+0x44>)
 8010570:	b085      	sub	sp, #20
 8010572:	fb03 4400 	mla	r4, r3, r0, r4
 8010576:	6963      	ldr	r3, [r4, #20]
 8010578:	62e1      	str	r1, [r4, #44]	; 0x2c
 801057a:	9301      	str	r3, [sp, #4]
 801057c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801057e:	4620      	mov	r0, r4
 8010580:	9302      	str	r3, [sp, #8]
 8010582:	2318      	movs	r3, #24
 8010584:	8622      	strh	r2, [r4, #48]	; 0x30
 8010586:	a901      	add	r1, sp, #4
 8010588:	4615      	mov	r5, r2
 801058a:	f88d 300c 	strb.w	r3, [sp, #12]
 801058e:	f7ff fef7 	bl	8010380 <_tcp_send_package>
 8010592:	2300      	movs	r3, #0
 8010594:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010596:	8623      	strh	r3, [r4, #48]	; 0x30
 8010598:	6963      	ldr	r3, [r4, #20]
 801059a:	442b      	add	r3, r5
 801059c:	6163      	str	r3, [r4, #20]
 801059e:	b005      	add	sp, #20
 80105a0:	bd30      	pop	{r4, r5, pc}
 80105a2:	bf00      	nop
 80105a4:	20003870 	andcs	r3, r0, r0, ror r8

080105a8 <tcp_read>:
 80105a8:	2344      	movs	r3, #68	; 0x44
 80105aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105ac:	4c1c      	ldr	r4, [pc, #112]	; (8010620 <tcp_read+0x78>)
 80105ae:	b085      	sub	sp, #20
 80105b0:	fb03 4400 	mla	r4, r3, r0, r4
 80105b4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80105b8:	2b07      	cmp	r3, #7
 80105ba:	d112      	bne.n	80105e2 <tcp_read+0x3a>
 80105bc:	6963      	ldr	r3, [r4, #20]
 80105be:	4620      	mov	r0, r4
 80105c0:	9301      	str	r3, [sp, #4]
 80105c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80105c4:	a901      	add	r1, sp, #4
 80105c6:	9302      	str	r3, [sp, #8]
 80105c8:	2311      	movs	r3, #17
 80105ca:	f88d 300c 	strb.w	r3, [sp, #12]
 80105ce:	f7ff fed7 	bl	8010380 <_tcp_send_package>
 80105d2:	2309      	movs	r3, #9
 80105d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80105d8:	6963      	ldr	r3, [r4, #20]
 80105da:	3301      	adds	r3, #1
 80105dc:	6163      	str	r3, [r4, #20]
 80105de:	2000      	movs	r0, #0
 80105e0:	e01b      	b.n	801061a <tcp_read+0x72>
 80105e2:	f44f 6337 	mov.w	r3, #2928	; 0xb70
 80105e6:	4358      	muls	r0, r3
 80105e8:	4a0e      	ldr	r2, [pc, #56]	; (8010624 <tcp_read+0x7c>)
 80105ea:	1817      	adds	r7, r2, r0
 80105ec:	887b      	ldrh	r3, [r7, #2]
 80105ee:	5a15      	ldrh	r5, [r2, r0]
 80105f0:	429d      	cmp	r5, r3
 80105f2:	d0f4      	beq.n	80105de <tcp_read+0x36>
 80105f4:	f240 55b6 	movw	r5, #1462	; 0x5b6
 80105f8:	435d      	muls	r5, r3
 80105fa:	1d06      	adds	r6, r0, #4
 80105fc:	442e      	add	r6, r5
 80105fe:	4416      	add	r6, r2
 8010600:	4405      	add	r5, r0
 8010602:	600e      	str	r6, [r1, #0]
 8010604:	442a      	add	r2, r5
 8010606:	f8b2 05b8 	ldrh.w	r0, [r2, #1464]	; 0x5b8
 801060a:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801060c:	3301      	adds	r3, #1
 801060e:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 8010612:	f003 0301 	and.w	r3, r3, #1
 8010616:	8722      	strh	r2, [r4, #56]	; 0x38
 8010618:	807b      	strh	r3, [r7, #2]
 801061a:	b005      	add	sp, #20
 801061c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801061e:	bf00      	nop
 8010620:	20003870 	andcs	r3, r0, r0, ror r8
 8010624:	20002d00 	andcs	r2, r0, r0, lsl #26

08010628 <memcpy.isra.0>:
 8010628:	3801      	subs	r0, #1
 801062a:	440a      	add	r2, r1
 801062c:	4291      	cmp	r1, r2
 801062e:	d100      	bne.n	8010632 <memcpy.isra.0+0xa>
 8010630:	4770      	bx	lr
 8010632:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010636:	f800 3f01 	strb.w	r3, [r0, #1]!
 801063a:	e7f7      	b.n	801062c <memcpy.isra.0+0x4>

0801063c <net_memcpy>:
 801063c:	ea40 0301 	orr.w	r3, r0, r1
 8010640:	079b      	lsls	r3, r3, #30
 8010642:	b570      	push	{r4, r5, r6, lr}
 8010644:	d108      	bne.n	8010658 <net_memcpy+0x1c>
 8010646:	f022 0303 	bic.w	r3, r2, #3
 801064a:	1f04      	subs	r4, r0, #4
 801064c:	18cd      	adds	r5, r1, r3
 801064e:	42a9      	cmp	r1, r5
 8010650:	d108      	bne.n	8010664 <net_memcpy+0x28>
 8010652:	1ad2      	subs	r2, r2, r3
 8010654:	4403      	add	r3, r0
 8010656:	e000      	b.n	801065a <net_memcpy+0x1e>
 8010658:	4603      	mov	r3, r0
 801065a:	3b01      	subs	r3, #1
 801065c:	440a      	add	r2, r1
 801065e:	4291      	cmp	r1, r2
 8010660:	d105      	bne.n	801066e <net_memcpy+0x32>
 8010662:	bd70      	pop	{r4, r5, r6, pc}
 8010664:	f851 6b04 	ldr.w	r6, [r1], #4
 8010668:	f844 6f04 	str.w	r6, [r4, #4]!
 801066c:	e7ef      	b.n	801064e <net_memcpy+0x12>
 801066e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010672:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010676:	e7f2      	b.n	801065e <net_memcpy+0x22>

08010678 <udp_set_ip>:
 8010678:	2204      	movs	r2, #4
 801067a:	b513      	push	{r0, r1, r4, lr}
 801067c:	4604      	mov	r4, r0
 801067e:	6803      	ldr	r3, [r0, #0]
 8010680:	eb0d 0102 	add.w	r1, sp, r2
 8010684:	4808      	ldr	r0, [pc, #32]	; (80106a8 <udp_set_ip+0x30>)
 8010686:	9301      	str	r3, [sp, #4]
 8010688:	f7ff ffce 	bl	8010628 <memcpy.isra.0>
 801068c:	6862      	ldr	r2, [r4, #4]
 801068e:	4b07      	ldr	r3, [pc, #28]	; (80106ac <udp_set_ip+0x34>)
 8010690:	43d1      	mvns	r1, r2
 8010692:	6019      	str	r1, [r3, #0]
 8010694:	6823      	ldr	r3, [r4, #0]
 8010696:	4013      	ands	r3, r2
 8010698:	4a05      	ldr	r2, [pc, #20]	; (80106b0 <udp_set_ip+0x38>)
 801069a:	6013      	str	r3, [r2, #0]
 801069c:	68a2      	ldr	r2, [r4, #8]
 801069e:	4b05      	ldr	r3, [pc, #20]	; (80106b4 <udp_set_ip+0x3c>)
 80106a0:	601a      	str	r2, [r3, #0]
 80106a2:	b002      	add	sp, #8
 80106a4:	bd10      	pop	{r4, pc}
 80106a6:	bf00      	nop
 80106a8:	20009b8a 	andcs	r9, r0, sl, lsl #23
 80106ac:	20003ea0 	andcs	r3, r0, r0, lsr #29
 80106b0:	20003ea8 	andcs	r3, r0, r8, lsr #29
 80106b4:	20003ea4 	andcs	r3, r0, r4, lsr #29

080106b8 <udp_bind>:
 80106b8:	4a0a      	ldr	r2, [pc, #40]	; (80106e4 <udp_bind+0x2c>)
 80106ba:	4603      	mov	r3, r0
 80106bc:	b510      	push	{r4, lr}
 80106be:	2000      	movs	r0, #0
 80106c0:	4614      	mov	r4, r2
 80106c2:	f852 1b04 	ldr.w	r1, [r2], #4
 80106c6:	4299      	cmp	r1, r3
 80106c8:	d008      	beq.n	80106dc <udp_bind+0x24>
 80106ca:	b141      	cbz	r1, 80106de <udp_bind+0x26>
 80106cc:	3001      	adds	r0, #1
 80106ce:	2808      	cmp	r0, #8
 80106d0:	d1f7      	bne.n	80106c2 <udp_bind+0xa>
 80106d2:	4805      	ldr	r0, [pc, #20]	; (80106e8 <udp_bind+0x30>)
 80106d4:	f002 ff1e 	bl	8013514 <console_error>
 80106d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106dc:	bd10      	pop	{r4, pc}
 80106de:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 80106e2:	e7fb      	b.n	80106dc <udp_bind+0x24>
 80106e4:	20003eb0 			; <UNDEFINED> instruction: 0x20003eb0
 80106e8:	08017f6e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, sp, lr}

080106ec <udp_unbind>:
 80106ec:	4a0c      	ldr	r2, [pc, #48]	; (8010720 <udp_unbind+0x34>)
 80106ee:	2300      	movs	r3, #0
 80106f0:	4611      	mov	r1, r2
 80106f2:	b510      	push	{r4, lr}
 80106f4:	f852 4b04 	ldr.w	r4, [r2], #4
 80106f8:	4284      	cmp	r4, r0
 80106fa:	d108      	bne.n	801070e <udp_unbind+0x22>
 80106fc:	2000      	movs	r0, #0
 80106fe:	f640 3294 	movw	r2, #2964	; 0xb94
 8010702:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8010706:	4353      	muls	r3, r2
 8010708:	4a06      	ldr	r2, [pc, #24]	; (8010724 <udp_unbind+0x38>)
 801070a:	50d0      	str	r0, [r2, r3]
 801070c:	bd10      	pop	{r4, pc}
 801070e:	3301      	adds	r3, #1
 8010710:	2b08      	cmp	r3, #8
 8010712:	d1ef      	bne.n	80106f4 <udp_unbind+0x8>
 8010714:	4804      	ldr	r0, [pc, #16]	; (8010728 <udp_unbind+0x3c>)
 8010716:	f002 fefd 	bl	8013514 <console_error>
 801071a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801071e:	e7f5      	b.n	801070c <udp_unbind+0x20>
 8010720:	20003eb0 			; <UNDEFINED> instruction: 0x20003eb0
 8010724:	20003ed0 	ldrdcs	r3, [r0], -r0
 8010728:	08017f73 	stmdaeq	r1, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}

0801072c <udp_recv>:
 801072c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010730:	4604      	mov	r4, r0
 8010732:	4698      	mov	r8, r3
 8010734:	f640 3394 	movw	r3, #2964	; 0xb94
 8010738:	435c      	muls	r4, r3
 801073a:	4608      	mov	r0, r1
 801073c:	4915      	ldr	r1, [pc, #84]	; (8010794 <udp_recv+0x68>)
 801073e:	190f      	adds	r7, r1, r4
 8010740:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 8010744:	5b0b      	ldrh	r3, [r1, r4]
 8010746:	4563      	cmp	r3, ip
 8010748:	d021      	beq.n	801078e <udp_recv+0x62>
 801074a:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 801074e:	fb03 fc0c 	mul.w	ip, r3, ip
 8010752:	eb0c 0604 	add.w	r6, ip, r4
 8010756:	440e      	add	r6, r1
 8010758:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 801075c:	3404      	adds	r4, #4
 801075e:	4295      	cmp	r5, r2
 8010760:	bf28      	it	cs
 8010762:	4615      	movcs	r5, r2
 8010764:	4464      	add	r4, ip
 8010766:	462a      	mov	r2, r5
 8010768:	4421      	add	r1, r4
 801076a:	f7ff ff67 	bl	801063c <net_memcpy>
 801076e:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 8010772:	f8c8 3000 	str.w	r3, [r8]
 8010776:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 801077a:	9b06      	ldr	r3, [sp, #24]
 801077c:	801a      	strh	r2, [r3, #0]
 801077e:	887b      	ldrh	r3, [r7, #2]
 8010780:	3301      	adds	r3, #1
 8010782:	f003 0301 	and.w	r3, r3, #1
 8010786:	807b      	strh	r3, [r7, #2]
 8010788:	4628      	mov	r0, r5
 801078a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801078e:	2500      	movs	r5, #0
 8010790:	e7fa      	b.n	8010788 <udp_recv+0x5c>
 8010792:	bf00      	nop
 8010794:	20003ed0 	ldrdcs	r3, [r0], -r0

08010798 <udp_recv2>:
 8010798:	b5f0      	push	{r4, r5, r6, r7, lr}
 801079a:	f640 3594 	movw	r5, #2964	; 0xb94
 801079e:	4368      	muls	r0, r5
 80107a0:	4c0f      	ldr	r4, [pc, #60]	; (80107e0 <udp_recv2+0x48>)
 80107a2:	1827      	adds	r7, r4, r0
 80107a4:	887d      	ldrh	r5, [r7, #2]
 80107a6:	5a26      	ldrh	r6, [r4, r0]
 80107a8:	42ae      	cmp	r6, r5
 80107aa:	d017      	beq.n	80107dc <udp_recv2+0x44>
 80107ac:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 80107b0:	fb0c f505 	mul.w	r5, ip, r5
 80107b4:	1d06      	adds	r6, r0, #4
 80107b6:	442e      	add	r6, r5
 80107b8:	4405      	add	r5, r0
 80107ba:	4426      	add	r6, r4
 80107bc:	442c      	add	r4, r5
 80107be:	600e      	str	r6, [r1, #0]
 80107c0:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 80107c4:	6011      	str	r1, [r2, #0]
 80107c6:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 80107ca:	801a      	strh	r2, [r3, #0]
 80107cc:	887b      	ldrh	r3, [r7, #2]
 80107ce:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 80107d2:	3301      	adds	r3, #1
 80107d4:	f003 0301 	and.w	r3, r3, #1
 80107d8:	807b      	strh	r3, [r7, #2]
 80107da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107dc:	2000      	movs	r0, #0
 80107de:	e7fc      	b.n	80107da <udp_recv2+0x42>
 80107e0:	20003ed0 	ldrdcs	r3, [r0], -r0

080107e4 <udp_send>:
 80107e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80107e8:	f8df 9130 	ldr.w	r9, [pc, #304]	; 801091c <udp_send+0x138>
 80107ec:	461c      	mov	r4, r3
 80107ee:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 80107f2:	4607      	mov	r7, r0
 80107f4:	4688      	mov	r8, r1
 80107f6:	4616      	mov	r6, r2
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	f000 808b 	beq.w	8010914 <udp_send+0x130>
 80107fe:	1c63      	adds	r3, r4, #1
 8010800:	d141      	bne.n	8010886 <udp_send+0xa2>
 8010802:	4a47      	ldr	r2, [pc, #284]	; (8010920 <udp_send+0x13c>)
 8010804:	2307      	movs	r3, #7
 8010806:	4611      	mov	r1, r2
 8010808:	20ff      	movs	r0, #255	; 0xff
 801080a:	e001      	b.n	8010810 <udp_send+0x2c>
 801080c:	f802 0b01 	strb.w	r0, [r2], #1
 8010810:	3b01      	subs	r3, #1
 8010812:	d1fb      	bne.n	801080c <udp_send+0x28>
 8010814:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010818:	83cb      	strh	r3, [r1, #30]
 801081a:	840b      	strh	r3, [r1, #32]
 801081c:	2500      	movs	r5, #0
 801081e:	f8df a104 	ldr.w	sl, [pc, #260]	; 8010924 <udp_send+0x140>
 8010822:	4c3f      	ldr	r4, [pc, #252]	; (8010920 <udp_send+0x13c>)
 8010824:	f8ba 3000 	ldrh.w	r3, [sl]
 8010828:	2114      	movs	r1, #20
 801082a:	8263      	strh	r3, [r4, #18]
 801082c:	f106 031c 	add.w	r3, r6, #28
 8010830:	ba5b      	rev16	r3, r3
 8010832:	f104 000e 	add.w	r0, r4, #14
 8010836:	8223      	strh	r3, [r4, #16]
 8010838:	8325      	strh	r5, [r4, #24]
 801083a:	f001 fcc6 	bl	80121ca <net_chksum>
 801083e:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 8010842:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 8010846:	ba5b      	rev16	r3, r3
 8010848:	8463      	strh	r3, [r4, #34]	; 0x22
 801084a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801084e:	4632      	mov	r2, r6
 8010850:	ba5b      	rev16	r3, r3
 8010852:	84a3      	strh	r3, [r4, #36]	; 0x24
 8010854:	f106 0308 	add.w	r3, r6, #8
 8010858:	ba5b      	rev16	r3, r3
 801085a:	bf28      	it	cs
 801085c:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 8010860:	4641      	mov	r1, r8
 8010862:	8320      	strh	r0, [r4, #24]
 8010864:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8010868:	84e3      	strh	r3, [r4, #38]	; 0x26
 801086a:	f7ff fee7 	bl	801063c <net_memcpy>
 801086e:	4620      	mov	r0, r4
 8010870:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 8010874:	f004 fb68 	bl	8014f48 <emac_eth_send>
 8010878:	f8ba 3000 	ldrh.w	r3, [sl]
 801087c:	4628      	mov	r0, r5
 801087e:	3301      	adds	r3, #1
 8010880:	f8aa 3000 	strh.w	r3, [sl]
 8010884:	e037      	b.n	80108f6 <udp_send+0x112>
 8010886:	4b28      	ldr	r3, [pc, #160]	; (8010928 <udp_send+0x144>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	43a3      	bics	r3, r4
 801088c:	d10f      	bne.n	80108ae <udp_send+0xca>
 801088e:	2307      	movs	r3, #7
 8010890:	21ff      	movs	r1, #255	; 0xff
 8010892:	4a23      	ldr	r2, [pc, #140]	; (8010920 <udp_send+0x13c>)
 8010894:	e001      	b.n	801089a <udp_send+0xb6>
 8010896:	f802 1b01 	strb.w	r1, [r2], #1
 801089a:	3b01      	subs	r3, #1
 801089c:	d1fb      	bne.n	8010896 <udp_send+0xb2>
 801089e:	2204      	movs	r2, #4
 80108a0:	4822      	ldr	r0, [pc, #136]	; (801092c <udp_send+0x148>)
 80108a2:	eb0d 0102 	add.w	r1, sp, r2
 80108a6:	9401      	str	r4, [sp, #4]
 80108a8:	f7ff febe 	bl	8010628 <memcpy.isra.0>
 80108ac:	e7b6      	b.n	801081c <udp_send+0x38>
 80108ae:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 80108b2:	2be0      	cmp	r3, #224	; 0xe0
 80108b4:	d10e      	bne.n	80108d4 <udp_send+0xf0>
 80108b6:	491e      	ldr	r1, [pc, #120]	; (8010930 <udp_send+0x14c>)
 80108b8:	f3c4 2306 	ubfx	r3, r4, #8, #7
 80108bc:	70cb      	strb	r3, [r1, #3]
 80108be:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80108c2:	710b      	strb	r3, [r1, #4]
 80108c4:	f3c4 6307 	ubfx	r3, r4, #24, #8
 80108c8:	2206      	movs	r2, #6
 80108ca:	4815      	ldr	r0, [pc, #84]	; (8010920 <udp_send+0x13c>)
 80108cc:	714b      	strb	r3, [r1, #5]
 80108ce:	f7ff feab 	bl	8010628 <memcpy.isra.0>
 80108d2:	e7e4      	b.n	801089e <udp_send+0xba>
 80108d4:	4b17      	ldr	r3, [pc, #92]	; (8010934 <udp_send+0x150>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	43a3      	bics	r3, r4
 80108da:	d00f      	beq.n	80108fc <udp_send+0x118>
 80108dc:	4d16      	ldr	r5, [pc, #88]	; (8010938 <udp_send+0x154>)
 80108de:	4910      	ldr	r1, [pc, #64]	; (8010920 <udp_send+0x13c>)
 80108e0:	6828      	ldr	r0, [r5, #0]
 80108e2:	f001 f93d 	bl	8011b60 <arp_cache_lookup>
 80108e6:	682b      	ldr	r3, [r5, #0]
 80108e8:	4298      	cmp	r0, r3
 80108ea:	d0d8      	beq.n	801089e <udp_send+0xba>
 80108ec:	4813      	ldr	r0, [pc, #76]	; (801093c <udp_send+0x158>)
 80108ee:	f002 fe11 	bl	8013514 <console_error>
 80108f2:	f06f 0002 	mvn.w	r0, #2
 80108f6:	b002      	add	sp, #8
 80108f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108fc:	4620      	mov	r0, r4
 80108fe:	4908      	ldr	r1, [pc, #32]	; (8010920 <udp_send+0x13c>)
 8010900:	f001 f92e 	bl	8011b60 <arp_cache_lookup>
 8010904:	42a0      	cmp	r0, r4
 8010906:	d0ca      	beq.n	801089e <udp_send+0xba>
 8010908:	480d      	ldr	r0, [pc, #52]	; (8010940 <udp_send+0x15c>)
 801090a:	f002 fe03 	bl	8013514 <console_error>
 801090e:	f06f 0001 	mvn.w	r0, #1
 8010912:	e7f0      	b.n	80108f6 <udp_send+0x112>
 8010914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010918:	e7ed      	b.n	80108f6 <udp_send+0x112>
 801091a:	bf00      	nop
 801091c:	20003eb0 			; <UNDEFINED> instruction: 0x20003eb0
 8010920:	20009b70 	andcs	r9, r0, r0, ror fp
 8010924:	20003eac 	andcs	r3, r0, ip, lsr #29
 8010928:	20003ea0 	andcs	r3, r0, r0, lsr #29
 801092c:	20009b8e 	andcs	r9, r0, lr, lsl #23
 8010930:	20000010 	andcs	r0, r0, r0, lsl r0
 8010934:	20003ea8 	andcs	r3, r0, r8, lsr #29
 8010938:	20003ea4 	andcs	r3, r0, r4, lsr #29
 801093c:	08017f7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 8010940:	08017fa1 	stmdaeq	r1, {r0, r5, r7, r8, r9, sl, fp, ip, sp, lr}

08010944 <strlen>:
 8010944:	4603      	mov	r3, r0
 8010946:	461a      	mov	r2, r3
 8010948:	7811      	ldrb	r1, [r2, #0]
 801094a:	3301      	adds	r3, #1
 801094c:	2900      	cmp	r1, #0
 801094e:	d1fa      	bne.n	8010946 <strlen+0x2>
 8010950:	1a10      	subs	r0, r2, r0
 8010952:	4770      	bx	lr

08010954 <strcmp>:
 8010954:	1e43      	subs	r3, r0, #1
 8010956:	3901      	subs	r1, #1
 8010958:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 801095c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010960:	4290      	cmp	r0, r2
 8010962:	d001      	beq.n	8010968 <strcmp+0x14>
 8010964:	1a80      	subs	r0, r0, r2
 8010966:	e001      	b.n	801096c <strcmp+0x18>
 8010968:	2800      	cmp	r0, #0
 801096a:	d1f5      	bne.n	8010958 <strcmp+0x4>
 801096c:	4770      	bx	lr

0801096e <strcpy.isra.0>:
 801096e:	3801      	subs	r0, #1
 8010970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010974:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010978:	2b00      	cmp	r3, #0
 801097a:	d1f9      	bne.n	8010970 <strcpy.isra.0+0x2>
 801097c:	4770      	bx	lr

0801097e <strcat.isra.0>:
 801097e:	b538      	push	{r3, r4, r5, lr}
 8010980:	4604      	mov	r4, r0
 8010982:	460d      	mov	r5, r1
 8010984:	f7ff ffde 	bl	8010944 <strlen>
 8010988:	4629      	mov	r1, r5
 801098a:	4420      	add	r0, r4
 801098c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010990:	f7ff bfed 	b.w	801096e <strcpy.isra.0>

08010994 <MDNS::MDNS()>:
 8010994:	b513      	push	{r0, r1, r4, lr}
 8010996:	4604      	mov	r4, r0
 8010998:	a901      	add	r1, sp, #4
 801099a:	4804      	ldr	r0, [pc, #16]	; (80109ac <MDNS::MDNS()+0x18>)
 801099c:	f002 ff32 	bl	8013804 <inet_aton>
 80109a0:	4620      	mov	r0, r4
 80109a2:	4b03      	ldr	r3, [pc, #12]	; (80109b0 <MDNS::MDNS()+0x1c>)
 80109a4:	9a01      	ldr	r2, [sp, #4]
 80109a6:	601a      	str	r2, [r3, #0]
 80109a8:	b002      	add	sp, #8
 80109aa:	bd10      	pop	{r4, pc}
 80109ac:	08017fd2 	stmdaeq	r1, {r1, r4, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 80109b0:	2000a164 	andcs	sl, r0, r4, ror #2

080109b4 <MDNS::SetName(char const*)>:
 80109b4:	b538      	push	{r3, r4, r5, lr}
 80109b6:	4d0b      	ldr	r5, [pc, #44]	; (80109e4 <MDNS::SetName(char const*)+0x30>)
 80109b8:	460c      	mov	r4, r1
 80109ba:	6828      	ldr	r0, [r5, #0]
 80109bc:	b108      	cbz	r0, 80109c2 <MDNS::SetName(char const*)+0xe>
 80109be:	f002 ff1b 	bl	80137f8 <operator delete[](void*)>
 80109c2:	4620      	mov	r0, r4
 80109c4:	f7ff ffbe 	bl	8010944 <strlen>
 80109c8:	3007      	adds	r0, #7
 80109ca:	f002 ff19 	bl	8013800 <operator new[](unsigned int)>
 80109ce:	4621      	mov	r1, r4
 80109d0:	6028      	str	r0, [r5, #0]
 80109d2:	f7ff ffcc 	bl	801096e <strcpy.isra.0>
 80109d6:	6828      	ldr	r0, [r5, #0]
 80109d8:	4903      	ldr	r1, [pc, #12]	; (80109e8 <MDNS::SetName(char const*)+0x34>)
 80109da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109de:	f7ff bfce 	b.w	801097e <strcat.isra.0>
 80109e2:	bf00      	nop
 80109e4:	2000a594 	mulcs	r0, r4, r5
 80109e8:	08017fe2 	stmdaeq	r1, {r1, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}

080109ec <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 80109ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109f0:	f04f 0e00 	mov.w	lr, #0
 80109f4:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 80109f8:	4675      	mov	r5, lr
 80109fa:	4e1b      	ldr	r6, [pc, #108]	; (8010a68 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7c>)
 80109fc:	4f1b      	ldr	r7, [pc, #108]	; (8010a6c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x80>)
 80109fe:	780b      	ldrb	r3, [r1, #0]
 8010a00:	1c68      	adds	r0, r5, #1
 8010a02:	b913      	cbnz	r3, 8010a0a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x1e>
 8010a04:	7013      	strb	r3, [r2, #0]
 8010a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a0a:	2b3f      	cmp	r3, #63	; 0x3f
 8010a0c:	d91c      	bls.n	8010a48 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5c>
 8010a0e:	7849      	ldrb	r1, [r1, #1]
 8010a10:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 8010a14:	430b      	orrs	r3, r1
 8010a16:	6839      	ldr	r1, [r7, #0]
 8010a18:	f1be 0f00 	cmp.w	lr, #0
 8010a1c:	bf08      	it	eq
 8010a1e:	4605      	moveq	r5, r0
 8010a20:	5ccc      	ldrb	r4, [r1, r3]
 8010a22:	3301      	adds	r3, #1
 8010a24:	4419      	add	r1, r3
 8010a26:	2300      	movs	r3, #0
 8010a28:	42a3      	cmp	r3, r4
 8010a2a:	5cc8      	ldrb	r0, [r1, r3]
 8010a2c:	d309      	bcc.n	8010a42 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x56>
 8010a2e:	f04f 0e01 	mov.w	lr, #1
 8010a32:	4421      	add	r1, r4
 8010a34:	4414      	add	r4, r2
 8010a36:	780b      	ldrb	r3, [r1, #0]
 8010a38:	b10b      	cbz	r3, 8010a3e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x52>
 8010a3a:	f804 cb01 	strb.w	ip, [r4], #1
 8010a3e:	4622      	mov	r2, r4
 8010a40:	e7dd      	b.n	80109fe <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 8010a42:	54d0      	strb	r0, [r2, r3]
 8010a44:	3301      	adds	r3, #1
 8010a46:	e7ef      	b.n	8010a28 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x3c>
 8010a48:	4688      	mov	r8, r1
 8010a4a:	18d4      	adds	r4, r2, r3
 8010a4c:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8010a50:	f802 9b01 	strb.w	r9, [r2], #1
 8010a54:	4294      	cmp	r4, r2
 8010a56:	d1f9      	bne.n	8010a4c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x60>
 8010a58:	1c5a      	adds	r2, r3, #1
 8010a5a:	4411      	add	r1, r2
 8010a5c:	f1be 0f00 	cmp.w	lr, #0
 8010a60:	d1e9      	bne.n	8010a36 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 8010a62:	181d      	adds	r5, r3, r0
 8010a64:	e7e7      	b.n	8010a36 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 8010a66:	bf00      	nop
 8010a68:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 8010a6c:	2000a598 	mulcs	r0, r8, r5

08010a70 <MDNS::FindFirstDotFromRight(char const*) const>:
 8010a70:	b510      	push	{r4, lr}
 8010a72:	4608      	mov	r0, r1
 8010a74:	460c      	mov	r4, r1
 8010a76:	f7ff ff65 	bl	8010944 <strlen>
 8010a7a:	4420      	add	r0, r4
 8010a7c:	42a0      	cmp	r0, r4
 8010a7e:	d903      	bls.n	8010a88 <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 8010a80:	f810 3901 	ldrb.w	r3, [r0], #-1
 8010a84:	2b2e      	cmp	r3, #46	; 0x2e
 8010a86:	d1f9      	bne.n	8010a7c <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 8010a88:	3001      	adds	r0, #1
 8010a8a:	bd10      	pop	{r4, pc}

08010a8c <MDNS::WriteDnsName(char const*, char*, bool)>:
 8010a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a8e:	4614      	mov	r4, r2
 8010a90:	460f      	mov	r7, r1
 8010a92:	1c60      	adds	r0, r4, #1
 8010a94:	463d      	mov	r5, r7
 8010a96:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010a9a:	b946      	cbnz	r6, 8010aae <MDNS::WriteDnsName(char const*, char*, bool)+0x22>
 8010a9c:	1a69      	subs	r1, r5, r1
 8010a9e:	7021      	strb	r1, [r4, #0]
 8010aa0:	7829      	ldrb	r1, [r5, #0]
 8010aa2:	b949      	cbnz	r1, 8010ab8 <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 8010aa4:	b10b      	cbz	r3, 8010aaa <MDNS::WriteDnsName(char const*, char*, bool)+0x1e>
 8010aa6:	f800 1b01 	strb.w	r1, [r0], #1
 8010aaa:	1a80      	subs	r0, r0, r2
 8010aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aae:	2e2e      	cmp	r6, #46	; 0x2e
 8010ab0:	d0f4      	beq.n	8010a9c <MDNS::WriteDnsName(char const*, char*, bool)+0x10>
 8010ab2:	f800 6b01 	strb.w	r6, [r0], #1
 8010ab6:	e7ed      	b.n	8010a94 <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 8010ab8:	4604      	mov	r4, r0
 8010aba:	1c69      	adds	r1, r5, #1
 8010abc:	e7e8      	b.n	8010a90 <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

08010ac0 <MDNS::CreateAnswerLocalIpAddress()>:
 8010ac0:	2384      	movs	r3, #132	; 0x84
 8010ac2:	b510      	push	{r4, lr}
 8010ac4:	4c0f      	ldr	r4, [pc, #60]	; (8010b04 <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 8010ac6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010aca:	80e3      	strh	r3, [r4, #6]
 8010acc:	2300      	movs	r3, #0
 8010ace:	490e      	ldr	r1, [pc, #56]	; (8010b08 <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 8010ad0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010ad4:	6809      	ldr	r1, [r1, #0]
 8010ad6:	f104 0210 	add.w	r2, r4, #16
 8010ada:	2301      	movs	r3, #1
 8010adc:	f7ff ffd6 	bl	8010a8c <MDNS::WriteDnsName(char const*, char*, bool)>
 8010ae0:	490a      	ldr	r1, [pc, #40]	; (8010b0c <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 8010ae2:	1813      	adds	r3, r2, r0
 8010ae4:	5011      	str	r1, [r2, r0]
 8010ae6:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 8010aea:	605a      	str	r2, [r3, #4]
 8010aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010af0:	811a      	strh	r2, [r3, #8]
 8010af2:	4a07      	ldr	r2, [pc, #28]	; (8010b10 <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 8010af4:	6812      	ldr	r2, [r2, #0]
 8010af6:	6952      	ldr	r2, [r2, #20]
 8010af8:	f8c3 200a 	str.w	r2, [r3, #10]
 8010afc:	1b1b      	subs	r3, r3, r4
 8010afe:	330a      	adds	r3, #10
 8010b00:	6023      	str	r3, [r4, #0]
 8010b02:	bd10      	pop	{r4, pc}
 8010b04:	2000a168 	andcs	sl, r0, r8, ror #2
 8010b08:	2000a594 	mulcs	r0, r4, r5
 8010b0c:	01800100 	orreq	r0, r0, r0, lsl #2
 8010b10:	2000a59c 	mulcs	r0, ip, r5

08010b14 <MDNS::Start()>:
 8010b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b16:	4c1d      	ldr	r4, [pc, #116]	; (8010b8c <MDNS::Start()+0x78>)
 8010b18:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8010b1c:	4605      	mov	r5, r0
 8010b1e:	6820      	ldr	r0, [r4, #0]
 8010b20:	f000 fb28 	bl	8011174 <Network::Begin(unsigned short)>
 8010b24:	4e1a      	ldr	r6, [pc, #104]	; (8010b90 <MDNS::Start()+0x7c>)
 8010b26:	4f1b      	ldr	r7, [pc, #108]	; (8010b94 <MDNS::Start()+0x80>)
 8010b28:	4601      	mov	r1, r0
 8010b2a:	6030      	str	r0, [r6, #0]
 8010b2c:	683a      	ldr	r2, [r7, #0]
 8010b2e:	6820      	ldr	r0, [r4, #0]
 8010b30:	f000 fb31 	bl	8011196 <Network::JoinGroup(int, unsigned int)>
 8010b34:	4b18      	ldr	r3, [pc, #96]	; (8010b98 <MDNS::Start()+0x84>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	b923      	cbnz	r3, 8010b44 <MDNS::Start()+0x30>
 8010b3a:	6821      	ldr	r1, [r4, #0]
 8010b3c:	4628      	mov	r0, r5
 8010b3e:	3120      	adds	r1, #32
 8010b40:	f7ff ff38 	bl	80109b4 <MDNS::SetName(char const*)>
 8010b44:	4628      	mov	r0, r5
 8010b46:	f7ff ffbb 	bl	8010ac0 <MDNS::CreateAnswerLocalIpAddress()>
 8010b4a:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8010b4e:	4913      	ldr	r1, [pc, #76]	; (8010b9c <MDNS::Start()+0x88>)
 8010b50:	7830      	ldrb	r0, [r6, #0]
 8010b52:	f831 2b04 	ldrh.w	r2, [r1], #4
 8010b56:	9300      	str	r3, [sp, #0]
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	f7ff fe43 	bl	80107e4 <udp_send>
 8010b5e:	233f      	movs	r3, #63	; 0x3f
 8010b60:	6820      	ldr	r0, [r4, #0]
 8010b62:	4c0f      	ldr	r4, [pc, #60]	; (8010ba0 <MDNS::Start()+0x8c>)
 8010b64:	f100 0260 	add.w	r2, r0, #96	; 0x60
 8010b68:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8010b6c:	b929      	cbnz	r1, 8010b7a <MDNS::Start()+0x66>
 8010b6e:	4413      	add	r3, r2
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d006      	beq.n	8010b82 <MDNS::Start()+0x6e>
 8010b74:	f802 1b01 	strb.w	r1, [r2], #1
 8010b78:	e7fa      	b.n	8010b70 <MDNS::Start()+0x5c>
 8010b7a:	3b01      	subs	r3, #1
 8010b7c:	f802 1b01 	strb.w	r1, [r2], #1
 8010b80:	d1f2      	bne.n	8010b68 <MDNS::Start()+0x54>
 8010b82:	2300      	movs	r3, #0
 8010b84:	f880 309f 	strb.w	r3, [r0, #159]	; 0x9f
 8010b88:	b003      	add	sp, #12
 8010b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b8c:	2000a59c 	mulcs	r0, ip, r5
 8010b90:	20000018 	andcs	r0, r0, r8, lsl r0
 8010b94:	2000a164 	andcs	sl, r0, r4, ror #2
 8010b98:	2000a594 	mulcs	r0, r4, r5
 8010b9c:	2000a168 	andcs	sl, r0, r8, ror #2
 8010ba0:	08017fe2 	stmdaeq	r1, {r1, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}

08010ba4 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 8010ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ba8:	4c1b      	ldr	r4, [pc, #108]	; (8010c18 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 8010baa:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8010bae:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	f854 100c 	ldr.w	r1, [r4, ip]
 8010bb8:	4607      	mov	r7, r0
 8010bba:	f7ff ff67 	bl	8010a8c <MDNS::WriteDnsName(char const*, char*, bool)>
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	7bac      	ldrb	r4, [r5, #14]
 8010bc2:	4616      	mov	r6, r2
 8010bc4:	4915      	ldr	r1, [pc, #84]	; (8010c1c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 8010bc6:	4402      	add	r2, r0
 8010bc8:	4815      	ldr	r0, [pc, #84]	; (8010c20 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 8010bca:	429c      	cmp	r4, r3
 8010bcc:	bf18      	it	ne
 8010bce:	4601      	movne	r1, r0
 8010bd0:	4638      	mov	r0, r7
 8010bd2:	f7ff ff5b 	bl	8010a8c <MDNS::WriteDnsName(char const*, char*, bool)>
 8010bd6:	4b13      	ldr	r3, [pc, #76]	; (8010c24 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 8010bd8:	1814      	adds	r4, r2, r0
 8010bda:	5013      	str	r3, [r2, r0]
 8010bdc:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8010be0:	6063      	str	r3, [r4, #4]
 8010be2:	4b11      	ldr	r3, [pc, #68]	; (8010c28 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 8010be4:	f8d3 8000 	ldr.w	r8, [r3]
 8010be8:	4640      	mov	r0, r8
 8010bea:	f7ff feab 	bl	8010944 <strlen>
 8010bee:	f100 0308 	add.w	r3, r0, #8
 8010bf2:	ba5b      	rev16	r3, r3
 8010bf4:	8123      	strh	r3, [r4, #8]
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	f8c4 300a 	str.w	r3, [r4, #10]
 8010bfc:	89ab      	ldrh	r3, [r5, #12]
 8010bfe:	f104 0210 	add.w	r2, r4, #16
 8010c02:	ba5b      	rev16	r3, r3
 8010c04:	81e3      	strh	r3, [r4, #14]
 8010c06:	4641      	mov	r1, r8
 8010c08:	2301      	movs	r3, #1
 8010c0a:	4638      	mov	r0, r7
 8010c0c:	f7ff ff3e 	bl	8010a8c <MDNS::WriteDnsName(char const*, char*, bool)>
 8010c10:	4410      	add	r0, r2
 8010c12:	1b80      	subs	r0, r0, r6
 8010c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c18:	2000a36c 	andcs	sl, r0, ip, ror #6
 8010c1c:	08017fde 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 8010c20:	08017ffb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 8010c24:	01802100 	orreq	r2, r0, r0, lsl #2
 8010c28:	2000a594 	mulcs	r0, r4, r5

08010c2c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 8010c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c30:	4e19      	ldr	r6, [pc, #100]	; (8010c98 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 8010c32:	010f      	lsls	r7, r1, #4
 8010c34:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8010c38:	2300      	movs	r3, #0
 8010c3a:	59f1      	ldr	r1, [r6, r7]
 8010c3c:	4604      	mov	r4, r0
 8010c3e:	f7ff ff25 	bl	8010a8c <MDNS::WriteDnsName(char const*, char*, bool)>
 8010c42:	2301      	movs	r3, #1
 8010c44:	7bae      	ldrb	r6, [r5, #14]
 8010c46:	4690      	mov	r8, r2
 8010c48:	4914      	ldr	r1, [pc, #80]	; (8010c9c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 8010c4a:	4402      	add	r2, r0
 8010c4c:	4814      	ldr	r0, [pc, #80]	; (8010ca0 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 8010c4e:	429e      	cmp	r6, r3
 8010c50:	bf18      	it	ne
 8010c52:	4601      	movne	r1, r0
 8010c54:	4620      	mov	r0, r4
 8010c56:	f7ff ff19 	bl	8010a8c <MDNS::WriteDnsName(char const*, char*, bool)>
 8010c5a:	4b12      	ldr	r3, [pc, #72]	; (8010ca4 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 8010c5c:	1816      	adds	r6, r2, r0
 8010c5e:	5013      	str	r3, [r2, r0]
 8010c60:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8010c64:	68a8      	ldr	r0, [r5, #8]
 8010c66:	6073      	str	r3, [r6, #4]
 8010c68:	f106 040b 	add.w	r4, r6, #11
 8010c6c:	b938      	cbnz	r0, 8010c7e <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 8010c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c72:	72b0      	strb	r0, [r6, #10]
 8010c74:	8133      	strh	r3, [r6, #8]
 8010c76:	eba4 0008 	sub.w	r0, r4, r8
 8010c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c7e:	f7ff fe61 	bl	8010944 <strlen>
 8010c82:	4607      	mov	r7, r0
 8010c84:	1c43      	adds	r3, r0, #1
 8010c86:	72b0      	strb	r0, [r6, #10]
 8010c88:	ba5b      	rev16	r3, r3
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	68a9      	ldr	r1, [r5, #8]
 8010c8e:	8133      	strh	r3, [r6, #8]
 8010c90:	f7ff fe6d 	bl	801096e <strcpy.isra.0>
 8010c94:	443c      	add	r4, r7
 8010c96:	e7ee      	b.n	8010c76 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 8010c98:	2000a36c 	andcs	sl, r0, ip, ror #6
 8010c9c:	08017fde 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 8010ca0:	08017ffb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 8010ca4:	01801000 	orreq	r1, r0, r0

08010ca8 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 8010ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cac:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8010d10 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x68>
 8010cb0:	ea4f 1901 	mov.w	r9, r1, lsl #4
 8010cb4:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 8010cb8:	6869      	ldr	r1, [r5, #4]
 8010cba:	2301      	movs	r3, #1
 8010cbc:	4607      	mov	r7, r0
 8010cbe:	f7ff fee5 	bl	8010a8c <MDNS::WriteDnsName(char const*, char*, bool)>
 8010cc2:	4b14      	ldr	r3, [pc, #80]	; (8010d14 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 8010cc4:	f858 8009 	ldr.w	r8, [r8, r9]
 8010cc8:	5013      	str	r3, [r2, r0]
 8010cca:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8010cce:	1816      	adds	r6, r2, r0
 8010cd0:	6073      	str	r3, [r6, #4]
 8010cd2:	4640      	mov	r0, r8
 8010cd4:	4614      	mov	r4, r2
 8010cd6:	f7ff fe35 	bl	8010944 <strlen>
 8010cda:	f100 030d 	add.w	r3, r0, #13
 8010cde:	ba5b      	rev16	r3, r3
 8010ce0:	4641      	mov	r1, r8
 8010ce2:	8133      	strh	r3, [r6, #8]
 8010ce4:	f106 020a 	add.w	r2, r6, #10
 8010ce8:	2300      	movs	r3, #0
 8010cea:	4638      	mov	r0, r7
 8010cec:	f7ff fece 	bl	8010a8c <MDNS::WriteDnsName(char const*, char*, bool)>
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	4402      	add	r2, r0
 8010cf4:	7bad      	ldrb	r5, [r5, #14]
 8010cf6:	4808      	ldr	r0, [pc, #32]	; (8010d18 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 8010cf8:	4908      	ldr	r1, [pc, #32]	; (8010d1c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 8010cfa:	429d      	cmp	r5, r3
 8010cfc:	bf18      	it	ne
 8010cfe:	4601      	movne	r1, r0
 8010d00:	4638      	mov	r0, r7
 8010d02:	f7ff fec3 	bl	8010a8c <MDNS::WriteDnsName(char const*, char*, bool)>
 8010d06:	4410      	add	r0, r2
 8010d08:	1b00      	subs	r0, r0, r4
 8010d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d0e:	bf00      	nop
 8010d10:	2000a36c 	andcs	sl, r0, ip, ror #6
 8010d14:	01000c00 	tsteq	r0, r0, lsl #24
 8010d18:	08017ffb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 8010d1c:	08017fde 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, sp, lr}

08010d20 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 8010d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d22:	460f      	mov	r7, r1
 8010d24:	2301      	movs	r3, #1
 8010d26:	490f      	ldr	r1, [pc, #60]	; (8010d64 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x44>)
 8010d28:	4606      	mov	r6, r0
 8010d2a:	f7ff feaf 	bl	8010a8c <MDNS::WriteDnsName(char const*, char*, bool)>
 8010d2e:	4b0e      	ldr	r3, [pc, #56]	; (8010d68 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 8010d30:	490e      	ldr	r1, [pc, #56]	; (8010d6c <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 8010d32:	5013      	str	r3, [r2, r0]
 8010d34:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8010d38:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8010d3c:	684f      	ldr	r7, [r1, #4]
 8010d3e:	1815      	adds	r5, r2, r0
 8010d40:	606b      	str	r3, [r5, #4]
 8010d42:	4638      	mov	r0, r7
 8010d44:	4614      	mov	r4, r2
 8010d46:	f7ff fdfd 	bl	8010944 <strlen>
 8010d4a:	1c83      	adds	r3, r0, #2
 8010d4c:	ba5b      	rev16	r3, r3
 8010d4e:	812b      	strh	r3, [r5, #8]
 8010d50:	f105 020a 	add.w	r2, r5, #10
 8010d54:	2301      	movs	r3, #1
 8010d56:	4639      	mov	r1, r7
 8010d58:	4630      	mov	r0, r6
 8010d5a:	f7ff fe97 	bl	8010a8c <MDNS::WriteDnsName(char const*, char*, bool)>
 8010d5e:	4410      	add	r0, r2
 8010d60:	1b00      	subs	r0, r0, r4
 8010d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d64:	08017fe9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 8010d68:	01000c00 	tsteq	r0, r0, lsl #24
 8010d6c:	2000a36c 	andcs	sl, r0, ip, ror #6

08010d70 <MDNS::CreateMDNSMessage(unsigned int)>:
 8010d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d72:	2384      	movs	r3, #132	; 0x84
 8010d74:	4d19      	ldr	r5, [pc, #100]	; (8010ddc <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 8010d76:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8010d7a:	80eb      	strh	r3, [r5, #6]
 8010d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010d80:	f105 0410 	add.w	r4, r5, #16
 8010d84:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8010d88:	4622      	mov	r2, r4
 8010d8a:	4606      	mov	r6, r0
 8010d8c:	460f      	mov	r7, r1
 8010d8e:	f7ff ff09 	bl	8010ba4 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 8010d92:	4404      	add	r4, r0
 8010d94:	4622      	mov	r2, r4
 8010d96:	4639      	mov	r1, r7
 8010d98:	4630      	mov	r0, r6
 8010d9a:	f7ff ff47 	bl	8010c2c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 8010d9e:	4404      	add	r4, r0
 8010da0:	4622      	mov	r2, r4
 8010da2:	4639      	mov	r1, r7
 8010da4:	4630      	mov	r0, r6
 8010da6:	f7ff ffbb 	bl	8010d20 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 8010daa:	4404      	add	r4, r0
 8010dac:	4622      	mov	r2, r4
 8010dae:	4639      	mov	r1, r7
 8010db0:	4630      	mov	r0, r6
 8010db2:	f7ff ff79 	bl	8010ca8 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 8010db6:	4a0a      	ldr	r2, [pc, #40]	; (8010de0 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 8010db8:	4404      	add	r4, r0
 8010dba:	f852 3b10 	ldr.w	r3, [r2], #16
 8010dbe:	1e60      	subs	r0, r4, #1
 8010dc0:	3b0c      	subs	r3, #12
 8010dc2:	4619      	mov	r1, r3
 8010dc4:	3901      	subs	r1, #1
 8010dc6:	d204      	bcs.n	8010dd2 <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 8010dc8:	441c      	add	r4, r3
 8010dca:	4b06      	ldr	r3, [pc, #24]	; (8010de4 <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 8010dcc:	1ae4      	subs	r4, r4, r3
 8010dce:	602c      	str	r4, [r5, #0]
 8010dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010dd2:	f812 6b01 	ldrb.w	r6, [r2], #1
 8010dd6:	f800 6f01 	strb.w	r6, [r0, #1]!
 8010dda:	e7f3      	b.n	8010dc4 <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 8010ddc:	2000a390 	mulcs	r0, r0, r3
 8010de0:	2000a168 	andcs	sl, r0, r8, ror #2
 8010de4:	2000a394 	mulcs	r0, r4, r3

08010de8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 8010de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dec:	4d40      	ldr	r5, [pc, #256]	; (8010ef0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>)
 8010dee:	b085      	sub	sp, #20
 8010df0:	682c      	ldr	r4, [r5, #0]
 8010df2:	4680      	mov	r8, r0
 8010df4:	460f      	mov	r7, r1
 8010df6:	4616      	mov	r6, r2
 8010df8:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8010dfc:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8010e00:	b11c      	cbz	r4, 8010e0a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22>
 8010e02:	692a      	ldr	r2, [r5, #16]
 8010e04:	2a00      	cmp	r2, #0
 8010e06:	d16e      	bne.n	8010ee6 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfe>
 8010e08:	2401      	movs	r4, #1
 8010e0a:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8010e0e:	ea4f 1904 	mov.w	r9, r4, lsl #4
 8010e12:	8193      	strh	r3, [r2, #12]
 8010e14:	f882 b00e 	strb.w	fp, [r2, #14]
 8010e18:	2f00      	cmp	r7, #0
 8010e1a:	d154      	bne.n	8010ec6 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xde>
 8010e1c:	4b35      	ldr	r3, [pc, #212]	; (8010ef4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 8010e1e:	6818      	ldr	r0, [r3, #0]
 8010e20:	3020      	adds	r0, #32
 8010e22:	f7ff fd8f 	bl	8010944 <strlen>
 8010e26:	4607      	mov	r7, r0
 8010e28:	4630      	mov	r0, r6
 8010e2a:	f7ff fd8b 	bl	8010944 <strlen>
 8010e2e:	4438      	add	r0, r7
 8010e30:	3001      	adds	r0, #1
 8010e32:	f002 fce5 	bl	8013800 <operator new[](unsigned int)>
 8010e36:	4b2f      	ldr	r3, [pc, #188]	; (8010ef4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 8010e38:	f845 0009 	str.w	r0, [r5, r9]
 8010e3c:	6819      	ldr	r1, [r3, #0]
 8010e3e:	3120      	adds	r1, #32
 8010e40:	f7ff fd95 	bl	801096e <strcpy.isra.0>
 8010e44:	f855 0009 	ldr.w	r0, [r5, r9]
 8010e48:	4631      	mov	r1, r6
 8010e4a:	f7ff fd98 	bl	801097e <strcat.isra.0>
 8010e4e:	4631      	mov	r1, r6
 8010e50:	4640      	mov	r0, r8
 8010e52:	f7ff fe0d 	bl	8010a70 <MDNS::FindFirstDotFromRight(char const*) const>
 8010e56:	eb05 0709 	add.w	r7, r5, r9
 8010e5a:	4605      	mov	r5, r0
 8010e5c:	f7ff fd72 	bl	8010944 <strlen>
 8010e60:	300d      	adds	r0, #13
 8010e62:	f002 fccd 	bl	8013800 <operator new[](unsigned int)>
 8010e66:	4629      	mov	r1, r5
 8010e68:	6078      	str	r0, [r7, #4]
 8010e6a:	f7ff fd80 	bl	801096e <strcpy.isra.0>
 8010e6e:	4922      	ldr	r1, [pc, #136]	; (8010ef8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 8010e70:	6878      	ldr	r0, [r7, #4]
 8010e72:	f7ff fd84 	bl	801097e <strcat.isra.0>
 8010e76:	4921      	ldr	r1, [pc, #132]	; (8010efc <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 8010e78:	4b21      	ldr	r3, [pc, #132]	; (8010f00 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 8010e7a:	6878      	ldr	r0, [r7, #4]
 8010e7c:	f1bb 0f01 	cmp.w	fp, #1
 8010e80:	bf18      	it	ne
 8010e82:	4619      	movne	r1, r3
 8010e84:	f7ff fd7b 	bl	801097e <strcat.isra.0>
 8010e88:	f1ba 0f00 	cmp.w	sl, #0
 8010e8c:	d009      	beq.n	8010ea2 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xba>
 8010e8e:	4650      	mov	r0, sl
 8010e90:	f7ff fd58 	bl	8010944 <strlen>
 8010e94:	3001      	adds	r0, #1
 8010e96:	f002 fcb3 	bl	8013800 <operator new[](unsigned int)>
 8010e9a:	4651      	mov	r1, sl
 8010e9c:	60b8      	str	r0, [r7, #8]
 8010e9e:	f7ff fd66 	bl	801096e <strcpy.isra.0>
 8010ea2:	4621      	mov	r1, r4
 8010ea4:	4640      	mov	r0, r8
 8010ea6:	f7ff ff63 	bl	8010d70 <MDNS::CreateMDNSMessage(unsigned int)>
 8010eaa:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8010eae:	4915      	ldr	r1, [pc, #84]	; (8010f04 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 8010eb0:	4815      	ldr	r0, [pc, #84]	; (8010f08 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 8010eb2:	f831 2b04 	ldrh.w	r2, [r1], #4
 8010eb6:	9300      	str	r3, [sp, #0]
 8010eb8:	4b14      	ldr	r3, [pc, #80]	; (8010f0c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x124>)
 8010eba:	7800      	ldrb	r0, [r0, #0]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	f7ff fc91 	bl	80107e4 <udp_send>
 8010ec2:	2001      	movs	r0, #1
 8010ec4:	e010      	b.n	8010ee8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x100>
 8010ec6:	4638      	mov	r0, r7
 8010ec8:	f7ff fd3c 	bl	8010944 <strlen>
 8010ecc:	9003      	str	r0, [sp, #12]
 8010ece:	4630      	mov	r0, r6
 8010ed0:	f7ff fd38 	bl	8010944 <strlen>
 8010ed4:	9b03      	ldr	r3, [sp, #12]
 8010ed6:	4418      	add	r0, r3
 8010ed8:	3001      	adds	r0, #1
 8010eda:	f002 fc91 	bl	8013800 <operator new[](unsigned int)>
 8010ede:	4639      	mov	r1, r7
 8010ee0:	f845 0009 	str.w	r0, [r5, r9]
 8010ee4:	e7ac      	b.n	8010e40 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x58>
 8010ee6:	2000      	movs	r0, #0
 8010ee8:	b005      	add	sp, #20
 8010eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eee:	bf00      	nop
 8010ef0:	2000a36c 	andcs	sl, r0, ip, ror #6
 8010ef4:	2000a59c 	mulcs	r0, ip, r5
 8010ef8:	08016953 	stmdaeq	r1, {r0, r1, r4, r6, r8, fp, sp, lr}
 8010efc:	08017fde 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 8010f00:	08017ffb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 8010f04:	2000a390 	mulcs	r0, r0, r3
 8010f08:	20000018 	andcs	r0, r0, r8, lsl r0
 8010f0c:	2000a164 	andcs	sl, r0, r4, ror #2

08010f10 <MDNS::HandleRequest(unsigned short)>:
 8010f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f14:	4605      	mov	r5, r0
 8010f16:	2700      	movs	r7, #0
 8010f18:	f04f 080c 	mov.w	r8, #12
 8010f1c:	b0c5      	sub	sp, #276	; 0x114
 8010f1e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8010fe0 <MDNS::HandleRequest(unsigned short)+0xd0>
 8010f22:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8010fe4 <MDNS::HandleRequest(unsigned short)+0xd4>
 8010f26:	9103      	str	r1, [sp, #12]
 8010f28:	9b03      	ldr	r3, [sp, #12]
 8010f2a:	42bb      	cmp	r3, r7
 8010f2c:	d802      	bhi.n	8010f34 <MDNS::HandleRequest(unsigned short)+0x24>
 8010f2e:	b045      	add	sp, #276	; 0x114
 8010f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f34:	f8da 1000 	ldr.w	r1, [sl]
 8010f38:	aa04      	add	r2, sp, #16
 8010f3a:	4441      	add	r1, r8
 8010f3c:	4628      	mov	r0, r5
 8010f3e:	f7ff fd55 	bl	80109ec <MDNS::DecodeDNSNameNotation(char const*, char*)>
 8010f42:	f8da 2000 	ldr.w	r2, [sl]
 8010f46:	4440      	add	r0, r8
 8010f48:	1813      	adds	r3, r2, r0
 8010f4a:	885b      	ldrh	r3, [r3, #2]
 8010f4c:	f100 0804 	add.w	r8, r0, #4
 8010f50:	ba5b      	rev16	r3, r3
 8010f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f56:	2b01      	cmp	r3, #1
 8010f58:	d13d      	bne.n	8010fd6 <MDNS::HandleRequest(unsigned short)+0xc6>
 8010f5a:	5a14      	ldrh	r4, [r2, r0]
 8010f5c:	4b22      	ldr	r3, [pc, #136]	; (8010fe8 <MDNS::HandleRequest(unsigned short)+0xd8>)
 8010f5e:	ba64      	rev16	r4, r4
 8010f60:	6818      	ldr	r0, [r3, #0]
 8010f62:	a904      	add	r1, sp, #16
 8010f64:	b2a4      	uxth	r4, r4
 8010f66:	f7ff fcf5 	bl	8010954 <strcmp>
 8010f6a:	b968      	cbnz	r0, 8010f88 <MDNS::HandleRequest(unsigned short)+0x78>
 8010f6c:	2c01      	cmp	r4, #1
 8010f6e:	d10b      	bne.n	8010f88 <MDNS::HandleRequest(unsigned short)+0x78>
 8010f70:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8010f74:	491d      	ldr	r1, [pc, #116]	; (8010fec <MDNS::HandleRequest(unsigned short)+0xdc>)
 8010f76:	481e      	ldr	r0, [pc, #120]	; (8010ff0 <MDNS::HandleRequest(unsigned short)+0xe0>)
 8010f78:	f831 2b04 	ldrh.w	r2, [r1], #4
 8010f7c:	9300      	str	r3, [sp, #0]
 8010f7e:	4b1d      	ldr	r3, [pc, #116]	; (8010ff4 <MDNS::HandleRequest(unsigned short)+0xe4>)
 8010f80:	7800      	ldrb	r0, [r0, #0]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f7ff fc2e 	bl	80107e4 <udp_send>
 8010f88:	481b      	ldr	r0, [pc, #108]	; (8010ff8 <MDNS::HandleRequest(unsigned short)+0xe8>)
 8010f8a:	a904      	add	r1, sp, #16
 8010f8c:	f7ff fce2 	bl	8010954 <strcmp>
 8010f90:	f04f 0900 	mov.w	r9, #0
 8010f94:	4e19      	ldr	r6, [pc, #100]	; (8010ffc <MDNS::HandleRequest(unsigned short)+0xec>)
 8010f96:	9002      	str	r0, [sp, #8]
 8010f98:	6833      	ldr	r3, [r6, #0]
 8010f9a:	b1c3      	cbz	r3, 8010fce <MDNS::HandleRequest(unsigned short)+0xbe>
 8010f9c:	9b02      	ldr	r3, [sp, #8]
 8010f9e:	b123      	cbz	r3, 8010faa <MDNS::HandleRequest(unsigned short)+0x9a>
 8010fa0:	6870      	ldr	r0, [r6, #4]
 8010fa2:	a904      	add	r1, sp, #16
 8010fa4:	f7ff fcd6 	bl	8010954 <strcmp>
 8010fa8:	b988      	cbnz	r0, 8010fce <MDNS::HandleRequest(unsigned short)+0xbe>
 8010faa:	2c0c      	cmp	r4, #12
 8010fac:	d10f      	bne.n	8010fce <MDNS::HandleRequest(unsigned short)+0xbe>
 8010fae:	4649      	mov	r1, r9
 8010fb0:	4628      	mov	r0, r5
 8010fb2:	f7ff fedd 	bl	8010d70 <MDNS::CreateMDNSMessage(unsigned int)>
 8010fb6:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8010fba:	480d      	ldr	r0, [pc, #52]	; (8010ff0 <MDNS::HandleRequest(unsigned short)+0xe0>)
 8010fbc:	9300      	str	r3, [sp, #0]
 8010fbe:	4b0d      	ldr	r3, [pc, #52]	; (8010ff4 <MDNS::HandleRequest(unsigned short)+0xe4>)
 8010fc0:	f8bb 2000 	ldrh.w	r2, [fp]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	490e      	ldr	r1, [pc, #56]	; (8011000 <MDNS::HandleRequest(unsigned short)+0xf0>)
 8010fc8:	7800      	ldrb	r0, [r0, #0]
 8010fca:	f7ff fc0b 	bl	80107e4 <udp_send>
 8010fce:	3610      	adds	r6, #16
 8010fd0:	f1b9 0f00 	cmp.w	r9, #0
 8010fd4:	d001      	beq.n	8010fda <MDNS::HandleRequest(unsigned short)+0xca>
 8010fd6:	3701      	adds	r7, #1
 8010fd8:	e7a6      	b.n	8010f28 <MDNS::HandleRequest(unsigned short)+0x18>
 8010fda:	f04f 0901 	mov.w	r9, #1
 8010fde:	e7db      	b.n	8010f98 <MDNS::HandleRequest(unsigned short)+0x88>
 8010fe0:	2000a598 	mulcs	r0, r8, r5
 8010fe4:	2000a390 	mulcs	r0, r0, r3
 8010fe8:	2000a594 	mulcs	r0, r4, r5
 8010fec:	2000a168 	andcs	sl, r0, r8, ror #2
 8010ff0:	20000018 	andcs	r0, r0, r8, lsl r0
 8010ff4:	2000a164 	andcs	sl, r0, r4, ror #2
 8010ff8:	08017fe9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 8010ffc:	2000a36c 	andcs	sl, r0, ip, ror #6
 8011000:	2000a394 	mulcs	r0, r4, r3

08011004 <MDNS::Parse()>:
 8011004:	4b08      	ldr	r3, [pc, #32]	; (8011028 <MDNS::Parse()+0x24>)
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	8853      	ldrh	r3, [r2, #2]
 801100a:	ba5b      	rev16	r3, r3
 801100c:	b299      	uxth	r1, r3
 801100e:	041b      	lsls	r3, r3, #16
 8011010:	d408      	bmi.n	8011024 <MDNS::Parse()+0x20>
 8011012:	0b89      	lsrs	r1, r1, #14
 8011014:	d106      	bne.n	8011024 <MDNS::Parse()+0x20>
 8011016:	8891      	ldrh	r1, [r2, #4]
 8011018:	b28b      	uxth	r3, r1
 801101a:	b11b      	cbz	r3, 8011024 <MDNS::Parse()+0x20>
 801101c:	ba49      	rev16	r1, r1
 801101e:	b289      	uxth	r1, r1
 8011020:	f7ff bf76 	b.w	8010f10 <MDNS::HandleRequest(unsigned short)>
 8011024:	4770      	bx	lr
 8011026:	bf00      	nop
 8011028:	2000a598 	mulcs	r0, r8, r5

0801102c <MDNS::Run()>:
 801102c:	b538      	push	{r3, r4, r5, lr}
 801102e:	4d0c      	ldr	r5, [pc, #48]	; (8011060 <MDNS::Run()+0x34>)
 8011030:	4604      	mov	r4, r0
 8011032:	480c      	ldr	r0, [pc, #48]	; (8011064 <MDNS::Run()+0x38>)
 8011034:	462b      	mov	r3, r5
 8011036:	4a0c      	ldr	r2, [pc, #48]	; (8011068 <MDNS::Run()+0x3c>)
 8011038:	490c      	ldr	r1, [pc, #48]	; (801106c <MDNS::Run()+0x40>)
 801103a:	7800      	ldrb	r0, [r0, #0]
 801103c:	f7ff fbac 	bl	8010798 <udp_recv2>
 8011040:	4b0b      	ldr	r3, [pc, #44]	; (8011070 <MDNS::Run()+0x44>)
 8011042:	882a      	ldrh	r2, [r5, #0]
 8011044:	8018      	strh	r0, [r3, #0]
 8011046:	f241 43e9 	movw	r3, #5353	; 0x14e9
 801104a:	429a      	cmp	r2, r3
 801104c:	d106      	bne.n	801105c <MDNS::Run()+0x30>
 801104e:	280c      	cmp	r0, #12
 8011050:	d904      	bls.n	801105c <MDNS::Run()+0x30>
 8011052:	4620      	mov	r0, r4
 8011054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011058:	f7ff bfd4 	b.w	8011004 <MDNS::Parse()>
 801105c:	bd38      	pop	{r3, r4, r5, pc}
 801105e:	bf00      	nop
 8011060:	2000a160 	andcs	sl, r0, r0, ror #2
 8011064:	20000018 	andcs	r0, r0, r8, lsl r0
 8011068:	2000a15c 	andcs	sl, r0, ip, asr r1
 801106c:	2000a598 	mulcs	r0, r8, r5
 8011070:	2000a38c 	andcs	sl, r0, ip, lsl #7

08011074 <MDNS::Print()>:
 8011074:	b510      	push	{r4, lr}
 8011076:	4816      	ldr	r0, [pc, #88]	; (80110d0 <MDNS::Print()+0x5c>)
 8011078:	f002 ffb4 	bl	8013fe4 <printf>
 801107c:	4b15      	ldr	r3, [pc, #84]	; (80110d4 <MDNS::Print()+0x60>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	3301      	adds	r3, #1
 8011082:	d104      	bne.n	801108e <MDNS::Print()+0x1a>
 8011084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011088:	4813      	ldr	r0, [pc, #76]	; (80110d8 <MDNS::Print()+0x64>)
 801108a:	f002 bfab 	b.w	8013fe4 <printf>
 801108e:	4b13      	ldr	r3, [pc, #76]	; (80110dc <MDNS::Print()+0x68>)
 8011090:	4c13      	ldr	r4, [pc, #76]	; (80110e0 <MDNS::Print()+0x6c>)
 8011092:	6819      	ldr	r1, [r3, #0]
 8011094:	4813      	ldr	r0, [pc, #76]	; (80110e4 <MDNS::Print()+0x70>)
 8011096:	f002 ffa5 	bl	8013fe4 <printf>
 801109a:	6823      	ldr	r3, [r4, #0]
 801109c:	b14b      	cbz	r3, 80110b2 <MDNS::Print()+0x3e>
 801109e:	4a12      	ldr	r2, [pc, #72]	; (80110e8 <MDNS::Print()+0x74>)
 80110a0:	68a3      	ldr	r3, [r4, #8]
 80110a2:	6861      	ldr	r1, [r4, #4]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	bf08      	it	eq
 80110a8:	4613      	moveq	r3, r2
 80110aa:	4810      	ldr	r0, [pc, #64]	; (80110ec <MDNS::Print()+0x78>)
 80110ac:	89a2      	ldrh	r2, [r4, #12]
 80110ae:	f002 ff99 	bl	8013fe4 <printf>
 80110b2:	6923      	ldr	r3, [r4, #16]
 80110b4:	b15b      	cbz	r3, 80110ce <MDNS::Print()+0x5a>
 80110b6:	69a3      	ldr	r3, [r4, #24]
 80110b8:	4a0b      	ldr	r2, [pc, #44]	; (80110e8 <MDNS::Print()+0x74>)
 80110ba:	6961      	ldr	r1, [r4, #20]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	bf08      	it	eq
 80110c0:	4613      	moveq	r3, r2
 80110c2:	480a      	ldr	r0, [pc, #40]	; (80110ec <MDNS::Print()+0x78>)
 80110c4:	8ba2      	ldrh	r2, [r4, #28]
 80110c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110ca:	f002 bf8b 	b.w	8013fe4 <printf>
 80110ce:	bd10      	pop	{r4, pc}
 80110d0:	08018006 	stmdaeq	r1, {r1, r2, pc}
 80110d4:	20000018 	andcs	r0, r0, r8, lsl r0
 80110d8:	0801800c 	stmdaeq	r1, {r2, r3, pc}
 80110dc:	2000a594 	mulcs	r0, r4, r5
 80110e0:	2000a36c 	andcs	sl, r0, ip, ror #6
 80110e4:	0801801a 	stmdaeq	r1, {r1, r3, r4, pc}
 80110e8:	08016c99 	stmdaeq	r1, {r0, r3, r4, r7, sl, fp, sp, lr}
 80110ec:	08018026 	stmdaeq	r1, {r1, r2, r5, pc}

080110f0 <strncpy.constprop.0.isra.0>:
 80110f0:	233f      	movs	r3, #63	; 0x3f
 80110f2:	3901      	subs	r1, #1
 80110f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80110f8:	b92a      	cbnz	r2, 8011106 <strncpy.constprop.0.isra.0+0x16>
 80110fa:	4403      	add	r3, r0
 80110fc:	4298      	cmp	r0, r3
 80110fe:	d006      	beq.n	801110e <strncpy.constprop.0.isra.0+0x1e>
 8011100:	f800 2b01 	strb.w	r2, [r0], #1
 8011104:	e7fa      	b.n	80110fc <strncpy.constprop.0.isra.0+0xc>
 8011106:	3b01      	subs	r3, #1
 8011108:	f800 2b01 	strb.w	r2, [r0], #1
 801110c:	d1f2      	bne.n	80110f4 <strncpy.constprop.0.isra.0+0x4>
 801110e:	4770      	bx	lr

08011110 <Network::Network()>:
 8011110:	4a12      	ldr	r2, [pc, #72]	; (801115c <Network::Network()+0x4c>)
 8011112:	2300      	movs	r3, #0
 8011114:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8011118:	6010      	str	r0, [r2, #0]
 801111a:	2201      	movs	r2, #1
 801111c:	e9c0 2100 	strd	r2, r1, [r0]
 8011120:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011124:	2200      	movs	r2, #0
 8011126:	e9c0 3330 	strd	r3, r3, [r0, #192]	; 0xc0
 801112a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801112e:	490c      	ldr	r1, [pc, #48]	; (8011160 <Network::Network()+0x50>)
 8011130:	6102      	str	r2, [r0, #16]
 8011132:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 8011136:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
 801113a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 801113e:	61c3      	str	r3, [r0, #28]
 8011140:	f880 3020 	strb.w	r3, [r0, #32]
 8011144:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8011148:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
 801114c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011150:	f802 3f01 	strb.w	r3, [r2, #1]!
 8011154:	2b00      	cmp	r3, #0
 8011156:	d1f9      	bne.n	801114c <Network::Network()+0x3c>
 8011158:	4770      	bx	lr
 801115a:	bf00      	nop
 801115c:	2000a59c 	mulcs	r0, ip, r5
 8011160:	08018031 	stmdaeq	r1, {r0, r4, r5, pc}

08011164 <Network::Shutdown()>:
 8011164:	b508      	push	{r3, lr}
 8011166:	30bc      	adds	r0, #188	; 0xbc
 8011168:	f001 fcbe 	bl	8012ae8 <NetworkDisplay::ShowShutdown()>
 801116c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011170:	f7f6 b86a 	b.w	8007248 <net_shutdown>

08011174 <Network::Begin(unsigned short)>:
 8011174:	4608      	mov	r0, r1
 8011176:	f7ff ba9f 	b.w	80106b8 <udp_bind>

0801117a <Network::End(unsigned short)>:
 801117a:	4608      	mov	r0, r1
 801117c:	f7ff bab6 	b.w	80106ec <udp_unbind>

08011180 <Network::MacAddressCopyTo(unsigned char*)>:
 8011180:	f100 039f 	add.w	r3, r0, #159	; 0x9f
 8011184:	3901      	subs	r1, #1
 8011186:	30a5      	adds	r0, #165	; 0xa5
 8011188:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801118c:	4283      	cmp	r3, r0
 801118e:	f801 2f01 	strb.w	r2, [r1, #1]!
 8011192:	d1f9      	bne.n	8011188 <Network::MacAddressCopyTo(unsigned char*)+0x8>
 8011194:	4770      	bx	lr

08011196 <Network::JoinGroup(int, unsigned int)>:
 8011196:	4610      	mov	r0, r2
 8011198:	f000 bf9e 	b.w	80120d8 <igmp_join>

0801119c <Network::LeaveGroup(int, unsigned int)>:
 801119c:	4610      	mov	r0, r2
 801119e:	f000 bfc7 	b.w	8012130 <igmp_leave>

080111a2 <Network::SetDefaultIp()>:
 80111a2:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 80111a6:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 80111aa:	041b      	lsls	r3, r3, #16
 80111ac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80111b0:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
 80111b4:	3302      	adds	r3, #2
 80111b6:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 80111ba:	22ff      	movs	r2, #255	; 0xff
 80111bc:	6143      	str	r3, [r0, #20]
 80111be:	e9c0 3206 	strd	r3, r2, [r0, #24]
 80111c2:	4770      	bx	lr

080111c4 <Network::Init(NetworkParamsStore*)>:
 80111c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111c8:	b0a5      	sub	sp, #148	; 0x94
 80111ca:	4604      	mov	r4, r0
 80111cc:	a80b      	add	r0, sp, #44	; 0x2c
 80111ce:	f000 fa71 	bl	80116b4 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 80111d2:	a80b      	add	r0, sp, #44	; 0x2c
 80111d4:	f000 fa7a 	bl	80116cc <NetworkParams::Load()>
 80111d8:	b110      	cbz	r0, 80111e0 <Network::Init(NetworkParamsStore*)+0x1c>
 80111da:	a80b      	add	r0, sp, #44	; 0x2c
 80111dc:	f000 fc4d 	bl	8011a7a <NetworkParams::Dump()>
 80111e0:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
 80111e4:	4628      	mov	r0, r5
 80111e6:	f001 fc67 	bl	8012ab8 <NetworkDisplay::ShowEmacStart()>
 80111ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80111ec:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 80111f0:	9308      	str	r3, [sp, #32]
 80111f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80111f4:	4630      	mov	r0, r6
 80111f6:	9309      	str	r3, [sp, #36]	; 0x24
 80111f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111fa:	f104 0720 	add.w	r7, r4, #32
 80111fe:	930a      	str	r3, [sp, #40]	; 0x28
 8011200:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8011204:	7163      	strb	r3, [r4, #5]
 8011206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011208:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 801120c:	bf18      	it	ne
 801120e:	f8dd 2085 	ldrne.w	r2, [sp, #133]	; 0x85
 8011212:	061b      	lsls	r3, r3, #24
 8011214:	bf54      	ite	pl
 8011216:	2300      	movpl	r3, #0
 8011218:	f8dd 3089 	ldrmi.w	r3, [sp, #137]	; 0x89
 801121c:	60e2      	str	r2, [r4, #12]
 801121e:	6123      	str	r3, [r4, #16]
 8011220:	f004 f9cc 	bl	80155bc <emac_start(unsigned char*)>
 8011224:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8011228:	2b00      	cmp	r3, #0
 801122a:	f040 80c7 	bne.w	80113bc <Network::Init(NetworkParamsStore*)+0x1f8>
 801122e:	4984      	ldr	r1, [pc, #528]	; (8011440 <Network::Init(NetworkParamsStore*)+0x27c>)
 8011230:	f104 001f 	add.w	r0, r4, #31
 8011234:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011238:	f103 0c01 	add.w	ip, r3, #1
 801123c:	2a00      	cmp	r2, #0
 801123e:	f040 80b9 	bne.w	80113b4 <Network::Init(NetworkParamsStore*)+0x1f0>
 8011242:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
 8011246:	18e1      	adds	r1, r4, r3
 8011248:	0910      	lsrs	r0, r2, #4
 801124a:	2a9f      	cmp	r2, #159	; 0x9f
 801124c:	f002 020f 	and.w	r2, r2, #15
 8011250:	bf94      	ite	ls
 8011252:	3030      	addls	r0, #48	; 0x30
 8011254:	3037      	addhi	r0, #55	; 0x37
 8011256:	2a09      	cmp	r2, #9
 8011258:	bf94      	ite	ls
 801125a:	3230      	addls	r2, #48	; 0x30
 801125c:	3237      	addhi	r2, #55	; 0x37
 801125e:	44a4      	add	ip, r4
 8011260:	f881 0020 	strb.w	r0, [r1, #32]
 8011264:	f88c 2020 	strb.w	r2, [ip, #32]
 8011268:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
 801126c:	f103 0802 	add.w	r8, r3, #2
 8011270:	0910      	lsrs	r0, r2, #4
 8011272:	2a9f      	cmp	r2, #159	; 0x9f
 8011274:	f002 020f 	and.w	r2, r2, #15
 8011278:	bf94      	ite	ls
 801127a:	3030      	addls	r0, #48	; 0x30
 801127c:	3037      	addhi	r0, #55	; 0x37
 801127e:	f103 0e03 	add.w	lr, r3, #3
 8011282:	2a09      	cmp	r2, #9
 8011284:	eb04 0c08 	add.w	ip, r4, r8
 8011288:	f88c 0020 	strb.w	r0, [ip, #32]
 801128c:	bf94      	ite	ls
 801128e:	3230      	addls	r2, #48	; 0x30
 8011290:	3237      	addhi	r2, #55	; 0x37
 8011292:	eb04 000e 	add.w	r0, r4, lr
 8011296:	f880 2020 	strb.w	r2, [r0, #32]
 801129a:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 801129e:	f103 0c04 	add.w	ip, r3, #4
 80112a2:	0910      	lsrs	r0, r2, #4
 80112a4:	2a9f      	cmp	r2, #159	; 0x9f
 80112a6:	f002 020f 	and.w	r2, r2, #15
 80112aa:	bf94      	ite	ls
 80112ac:	3030      	addls	r0, #48	; 0x30
 80112ae:	3037      	addhi	r0, #55	; 0x37
 80112b0:	3305      	adds	r3, #5
 80112b2:	2a09      	cmp	r2, #9
 80112b4:	4423      	add	r3, r4
 80112b6:	44a4      	add	ip, r4
 80112b8:	bf94      	ite	ls
 80112ba:	3230      	addls	r2, #48	; 0x30
 80112bc:	3237      	addhi	r2, #55	; 0x37
 80112be:	f88c 0020 	strb.w	r0, [ip, #32]
 80112c2:	f883 2020 	strb.w	r2, [r3, #32]
 80112c6:	2300      	movs	r3, #0
 80112c8:	f881 3026 	strb.w	r3, [r1, #38]	; 0x26
 80112cc:	f004 fa20 	bl	8015710 <net::link_register_read()>
 80112d0:	7963      	ldrb	r3, [r4, #5]
 80112d2:	6020      	str	r0, [r4, #0]
 80112d4:	2800      	cmp	r0, #0
 80112d6:	f040 809c 	bne.w	8011412 <Network::Init(NetworkParamsStore*)+0x24e>
 80112da:	2b00      	cmp	r3, #0
 80112dc:	f040 80aa 	bne.w	8011434 <Network::Init(NetworkParamsStore*)+0x270>
 80112e0:	9b08      	ldr	r3, [sp, #32]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d173      	bne.n	80113ce <Network::Init(NetworkParamsStore*)+0x20a>
 80112e6:	4620      	mov	r0, r4
 80112e8:	f7ff ff5b 	bl	80111a2 <Network::SetDefaultIp()>
 80112ec:	6963      	ldr	r3, [r4, #20]
 80112ee:	69e2      	ldr	r2, [r4, #28]
 80112f0:	9308      	str	r3, [sp, #32]
 80112f2:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
 80112f6:	1de3      	adds	r3, r4, #7
 80112f8:	f104 0905 	add.w	r9, r4, #5
 80112fc:	9302      	str	r3, [sp, #8]
 80112fe:	9300      	str	r3, [sp, #0]
 8011300:	463a      	mov	r2, r7
 8011302:	464b      	mov	r3, r9
 8011304:	4630      	mov	r0, r6
 8011306:	a908      	add	r1, sp, #32
 8011308:	f7f5 ff4e 	bl	80071a8 <net_init>
 801130c:	79e3      	ldrb	r3, [r4, #7]
 801130e:	b11b      	cbz	r3, 8011318 <Network::Init(NetworkParamsStore*)+0x154>
 8011310:	2104      	movs	r1, #4
 8011312:	4628      	mov	r0, r5
 8011314:	f001 fbee 	bl	8012af4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011318:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801131c:	f89d a08d 	ldrb.w	sl, [sp, #141]	; 0x8d
 8011320:	9304      	str	r3, [sp, #16]
 8011322:	233c      	movs	r3, #60	; 0x3c
 8011324:	fb03 f30a 	mul.w	r3, r3, sl
 8011328:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8011444 <Network::Init(NetworkParamsStore*)+0x280>
 801132c:	f8df b118 	ldr.w	fp, [pc, #280]	; 8011448 <Network::Init(NetworkParamsStore*)+0x284>
 8011330:	9303      	str	r3, [sp, #12]
 8011332:	79e3      	ldrb	r3, [r4, #7]
 8011334:	b393      	cbz	r3, 801139c <Network::Init(NetworkParamsStore*)+0x1d8>
 8011336:	f1ba 0f00 	cmp.w	sl, #0
 801133a:	d02f      	beq.n	801139c <Network::Init(NetworkParamsStore*)+0x1d8>
 801133c:	9b04      	ldr	r3, [sp, #16]
 801133e:	b36b      	cbz	r3, 801139c <Network::Init(NetworkParamsStore*)+0x1d8>
 8011340:	2104      	movs	r1, #4
 8011342:	f8d8 0000 	ldr.w	r0, [r8]
 8011346:	f002 f977 	bl	8013638 <LedBlink::SetMode(ledblink::Mode)>
 801134a:	2103      	movs	r1, #3
 801134c:	4628      	mov	r0, r5
 801134e:	f001 fbd1 	bl	8012af4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011352:	2000      	movs	r0, #0
 8011354:	f002 ff7c 	bl	8014250 <time>
 8011358:	9005      	str	r0, [sp, #20]
 801135a:	2000      	movs	r0, #0
 801135c:	f002 ff78 	bl	8014250 <time>
 8011360:	9b05      	ldr	r3, [sp, #20]
 8011362:	493a      	ldr	r1, [pc, #232]	; (801144c <Network::Init(NetworkParamsStore*)+0x288>)
 8011364:	1ac0      	subs	r0, r0, r3
 8011366:	9b03      	ldr	r3, [sp, #12]
 8011368:	4298      	cmp	r0, r3
 801136a:	db38      	blt.n	80113de <Network::Init(NetworkParamsStore*)+0x21a>
 801136c:	2101      	movs	r1, #1
 801136e:	4628      	mov	r0, r5
 8011370:	f001 fbc0 	bl	8012af4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011374:	2101      	movs	r1, #1
 8011376:	f8d8 0000 	ldr.w	r0, [r8]
 801137a:	f002 f95d 	bl	8013638 <LedBlink::SetMode(ledblink::Mode)>
 801137e:	2301      	movs	r3, #1
 8011380:	7163      	strb	r3, [r4, #5]
 8011382:	2300      	movs	r3, #0
 8011384:	71e3      	strb	r3, [r4, #7]
 8011386:	9b02      	ldr	r3, [sp, #8]
 8011388:	463a      	mov	r2, r7
 801138a:	9300      	str	r3, [sp, #0]
 801138c:	4630      	mov	r0, r6
 801138e:	464b      	mov	r3, r9
 8011390:	a908      	add	r1, sp, #32
 8011392:	f7f5 ff09 	bl	80071a8 <net_init>
 8011396:	7963      	ldrb	r3, [r4, #5]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d0ca      	beq.n	8011332 <Network::Init(NetworkParamsStore*)+0x16e>
 801139c:	9b08      	ldr	r3, [sp, #32]
 801139e:	4628      	mov	r0, r5
 80113a0:	6163      	str	r3, [r4, #20]
 80113a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113a4:	61e3      	str	r3, [r4, #28]
 80113a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113a8:	61a3      	str	r3, [r4, #24]
 80113aa:	f001 fb8b 	bl	8012ac4 <NetworkDisplay::ShowIp()>
 80113ae:	b025      	add	sp, #148	; 0x94
 80113b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113b4:	4663      	mov	r3, ip
 80113b6:	f800 2f01 	strb.w	r2, [r0, #1]!
 80113ba:	e73b      	b.n	8011234 <Network::Init(NetworkParamsStore*)+0x70>
 80113bc:	4638      	mov	r0, r7
 80113be:	f10d 0145 	add.w	r1, sp, #69	; 0x45
 80113c2:	f7ff fe95 	bl	80110f0 <strncpy.constprop.0.isra.0>
 80113c6:	2300      	movs	r3, #0
 80113c8:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
 80113cc:	e77e      	b.n	80112cc <Network::Init(NetworkParamsStore*)+0x108>
 80113ce:	69e1      	ldr	r1, [r4, #28]
 80113d0:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 80113d4:	4053      	eors	r3, r2
 80113d6:	420b      	tst	r3, r1
 80113d8:	bf18      	it	ne
 80113da:	920a      	strne	r2, [sp, #40]	; 0x28
 80113dc:	e78b      	b.n	80112f6 <Network::Init(NetworkParamsStore*)+0x132>
 80113de:	f8d8 3000 	ldr.w	r3, [r8]
 80113e2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80113e6:	f1bc 0f00 	cmp.w	ip, #0
 80113ea:	d0b6      	beq.n	801135a <Network::Init(NetworkParamsStore*)+0x196>
 80113ec:	6808      	ldr	r0, [r1, #0]
 80113ee:	695a      	ldr	r2, [r3, #20]
 80113f0:	1a80      	subs	r0, r0, r2
 80113f2:	4584      	cmp	ip, r0
 80113f4:	d8b1      	bhi.n	801135a <Network::Init(NetworkParamsStore*)+0x196>
 80113f6:	6808      	ldr	r0, [r1, #0]
 80113f8:	6158      	str	r0, [r3, #20]
 80113fa:	6918      	ldr	r0, [r3, #16]
 80113fc:	2801      	cmp	r0, #1
 80113fe:	f080 0201 	eor.w	r2, r0, #1
 8011402:	611a      	str	r2, [r3, #16]
 8011404:	bf16      	itet	ne
 8011406:	2301      	movne	r3, #1
 8011408:	f8cb 0014 	streq.w	r0, [fp, #20]
 801140c:	f8cb 3010 	strne.w	r3, [fp, #16]
 8011410:	e7a3      	b.n	801135a <Network::Init(NetworkParamsStore*)+0x196>
 8011412:	b11b      	cbz	r3, 801141c <Network::Init(NetworkParamsStore*)+0x258>
 8011414:	2300      	movs	r3, #0
 8011416:	e9c4 3306 	strd	r3, r3, [r4, #24]
 801141a:	9308      	str	r3, [sp, #32]
 801141c:	2300      	movs	r3, #0
 801141e:	f88d 301f 	strb.w	r3, [sp, #31]
 8011422:	f10d 031f 	add.w	r3, sp, #31
 8011426:	463a      	mov	r2, r7
 8011428:	4630      	mov	r0, r6
 801142a:	9300      	str	r3, [sp, #0]
 801142c:	a908      	add	r1, sp, #32
 801142e:	f7f5 febb 	bl	80071a8 <net_init>
 8011432:	e7b3      	b.n	801139c <Network::Init(NetworkParamsStore*)+0x1d8>
 8011434:	2101      	movs	r1, #1
 8011436:	4628      	mov	r0, r5
 8011438:	f001 fb5c 	bl	8012af4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 801143c:	e75b      	b.n	80112f6 <Network::Init(NetworkParamsStore*)+0x132>
 801143e:	bf00      	nop
 8011440:	08018036 	stmdaeq	r1, {r1, r2, r4, r5, pc}
 8011444:	2000ac60 	andcs	sl, r0, r0, ror #24
 8011448:	40011000 	andmi	r1, r1, r0
 801144c:	2000ac7c 	andcs	sl, r0, ip, ror ip

08011450 <Network::SetIp(unsigned int)>:
 8011450:	7943      	ldrb	r3, [r0, #5]
 8011452:	b570      	push	{r4, r5, r6, lr}
 8011454:	4604      	mov	r4, r0
 8011456:	460d      	mov	r5, r1
 8011458:	2600      	movs	r6, #0
 801145a:	b113      	cbz	r3, 8011462 <Network::SetIp(unsigned int)+0x12>
 801145c:	7146      	strb	r6, [r0, #5]
 801145e:	f7fe feeb 	bl	8010238 <net_dhcp_release>
 8011462:	71e6      	strb	r6, [r4, #7]
 8011464:	b975      	cbnz	r5, 8011484 <Network::SetIp(unsigned int)+0x34>
 8011466:	4620      	mov	r0, r4
 8011468:	f7ff fe9b 	bl	80111a2 <Network::SetDefaultIp()>
 801146c:	6960      	ldr	r0, [r4, #20]
 801146e:	f7fe fe9f 	bl	80101b0 <net_set_ip>
 8011472:	34bc      	adds	r4, #188	; 0xbc
 8011474:	4620      	mov	r0, r4
 8011476:	f001 fb25 	bl	8012ac4 <NetworkDisplay::ShowIp()>
 801147a:	4620      	mov	r0, r4
 801147c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011480:	f001 bb26 	b.w	8012ad0 <NetworkDisplay::ShowNetMask()>
 8011484:	4628      	mov	r0, r5
 8011486:	f7fe fe93 	bl	80101b0 <net_set_ip>
 801148a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801148e:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011492:	2800      	cmp	r0, #0
 8011494:	d0ed      	beq.n	8011472 <Network::SetIp(unsigned int)+0x22>
 8011496:	6803      	ldr	r3, [r0, #0]
 8011498:	4629      	mov	r1, r5
 801149a:	689b      	ldr	r3, [r3, #8]
 801149c:	4798      	blx	r3
 801149e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80114a2:	2100      	movs	r1, #0
 80114a4:	6803      	ldr	r3, [r0, #0]
 80114a6:	699b      	ldr	r3, [r3, #24]
 80114a8:	4798      	blx	r3
 80114aa:	e7e2      	b.n	8011472 <Network::SetIp(unsigned int)+0x22>

080114ac <Network::SetNetmask(unsigned int)>:
 80114ac:	69c2      	ldr	r2, [r0, #28]
 80114ae:	b510      	push	{r4, lr}
 80114b0:	428a      	cmp	r2, r1
 80114b2:	4604      	mov	r4, r0
 80114b4:	d00f      	beq.n	80114d6 <Network::SetNetmask(unsigned int)+0x2a>
 80114b6:	61c1      	str	r1, [r0, #28]
 80114b8:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 80114bc:	b110      	cbz	r0, 80114c4 <Network::SetNetmask(unsigned int)+0x18>
 80114be:	6803      	ldr	r3, [r0, #0]
 80114c0:	68db      	ldr	r3, [r3, #12]
 80114c2:	4798      	blx	r3
 80114c4:	34bc      	adds	r4, #188	; 0xbc
 80114c6:	4620      	mov	r0, r4
 80114c8:	f001 fafc 	bl	8012ac4 <NetworkDisplay::ShowIp()>
 80114cc:	4620      	mov	r0, r4
 80114ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114d2:	f001 bafd 	b.w	8012ad0 <NetworkDisplay::ShowNetMask()>
 80114d6:	bd10      	pop	{r4, pc}

080114d8 <Network::SetGatewayIp(unsigned int)>:
 80114d8:	b538      	push	{r3, r4, r5, lr}
 80114da:	6983      	ldr	r3, [r0, #24]
 80114dc:	4604      	mov	r4, r0
 80114de:	428b      	cmp	r3, r1
 80114e0:	460d      	mov	r5, r1
 80114e2:	d00f      	beq.n	8011504 <Network::SetGatewayIp(unsigned int)+0x2c>
 80114e4:	4608      	mov	r0, r1
 80114e6:	f7fe fe73 	bl	80101d0 <net_set_gw>
 80114ea:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80114ee:	b118      	cbz	r0, 80114f8 <Network::SetGatewayIp(unsigned int)+0x20>
 80114f0:	6803      	ldr	r3, [r0, #0]
 80114f2:	4629      	mov	r1, r5
 80114f4:	691b      	ldr	r3, [r3, #16]
 80114f6:	4798      	blx	r3
 80114f8:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80114fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011500:	f001 baec 	b.w	8012adc <NetworkDisplay::ShowGatewayIp()>
 8011504:	bd38      	pop	{r3, r4, r5, pc}
	...

08011508 <Network::EnableDhcp()>:
 8011508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801150a:	4e25      	ldr	r6, [pc, #148]	; (80115a0 <Network::EnableDhcp()+0x98>)
 801150c:	4604      	mov	r4, r0
 801150e:	6833      	ldr	r3, [r6, #0]
 8011510:	b085      	sub	sp, #20
 8011512:	781f      	ldrb	r7, [r3, #0]
 8011514:	b137      	cbz	r7, 8011524 <Network::EnableDhcp()+0x1c>
 8011516:	2200      	movs	r2, #0
 8011518:	2104      	movs	r1, #4
 801151a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801151e:	701a      	strb	r2, [r3, #0]
 8011520:	f003 f874 	bl	801460c <fwdgt_config>
 8011524:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
 8011528:	2101      	movs	r1, #1
 801152a:	4628      	mov	r0, r5
 801152c:	f001 fae2 	bl	8012af4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011530:	1de2      	adds	r2, r4, #7
 8011532:	f104 0120 	add.w	r1, r4, #32
 8011536:	a801      	add	r0, sp, #4
 8011538:	f7fe fe52 	bl	80101e0 <net_set_dhcp>
 801153c:	79e3      	ldrb	r3, [r4, #7]
 801153e:	7160      	strb	r0, [r4, #5]
 8011540:	b35b      	cbz	r3, 801159a <Network::EnableDhcp()+0x92>
 8011542:	2104      	movs	r1, #4
 8011544:	4628      	mov	r0, r5
 8011546:	f001 fad5 	bl	8012af4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 801154a:	b16f      	cbz	r7, 8011568 <Network::EnableDhcp()+0x60>
 801154c:	2102      	movs	r1, #2
 801154e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011552:	6836      	ldr	r6, [r6, #0]
 8011554:	f003 f85a 	bl	801460c <fwdgt_config>
 8011558:	2801      	cmp	r0, #1
 801155a:	bf0c      	ite	eq
 801155c:	2301      	moveq	r3, #1
 801155e:	2300      	movne	r3, #0
 8011560:	7033      	strb	r3, [r6, #0]
 8011562:	d101      	bne.n	8011568 <Network::EnableDhcp()+0x60>
 8011564:	f003 f842 	bl	80145ec <fwdgt_enable>
 8011568:	9b01      	ldr	r3, [sp, #4]
 801156a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801156e:	6163      	str	r3, [r4, #20]
 8011570:	9b02      	ldr	r3, [sp, #8]
 8011572:	61e3      	str	r3, [r4, #28]
 8011574:	9b03      	ldr	r3, [sp, #12]
 8011576:	61a3      	str	r3, [r4, #24]
 8011578:	b118      	cbz	r0, 8011582 <Network::EnableDhcp()+0x7a>
 801157a:	6803      	ldr	r3, [r0, #0]
 801157c:	7961      	ldrb	r1, [r4, #5]
 801157e:	699b      	ldr	r3, [r3, #24]
 8011580:	4798      	blx	r3
 8011582:	4628      	mov	r0, r5
 8011584:	f001 fa9e 	bl	8012ac4 <NetworkDisplay::ShowIp()>
 8011588:	4628      	mov	r0, r5
 801158a:	f001 faa1 	bl	8012ad0 <NetworkDisplay::ShowNetMask()>
 801158e:	4628      	mov	r0, r5
 8011590:	f001 faa4 	bl	8012adc <NetworkDisplay::ShowGatewayIp()>
 8011594:	7960      	ldrb	r0, [r4, #5]
 8011596:	b005      	add	sp, #20
 8011598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801159a:	2102      	movs	r1, #2
 801159c:	e7d2      	b.n	8011544 <Network::EnableDhcp()+0x3c>
 801159e:	bf00      	nop
 80115a0:	2000ac64 	andcs	sl, r0, r4, ror #24

080115a4 <Network::Print()>:
 80115a4:	b530      	push	{r4, r5, lr}
 80115a6:	4604      	mov	r4, r0
 80115a8:	b085      	sub	sp, #20
 80115aa:	4832      	ldr	r0, [pc, #200]	; (8011674 <Network::Print()+0xd0>)
 80115ac:	f002 fd1a 	bl	8013fe4 <printf>
 80115b0:	f104 0120 	add.w	r1, r4, #32
 80115b4:	4830      	ldr	r0, [pc, #192]	; (8011678 <Network::Print()+0xd4>)
 80115b6:	f002 fd15 	bl	8013fe4 <printf>
 80115ba:	68a1      	ldr	r1, [r4, #8]
 80115bc:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
 80115c0:	482e      	ldr	r0, [pc, #184]	; (801167c <Network::Print()+0xd8>)
 80115c2:	f002 fd0f 	bl	8013fe4 <printf>
 80115c6:	69e0      	ldr	r0, [r4, #28]
 80115c8:	f004 fe18 	bl	80161fc <__popcountsi2>
 80115cc:	6965      	ldr	r5, [r4, #20]
 80115ce:	9001      	str	r0, [sp, #4]
 80115d0:	0e2b      	lsrs	r3, r5, #24
 80115d2:	9300      	str	r3, [sp, #0]
 80115d4:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80115d8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80115dc:	b2e9      	uxtb	r1, r5
 80115de:	4828      	ldr	r0, [pc, #160]	; (8011680 <Network::Print()+0xdc>)
 80115e0:	f002 fd00 	bl	8013fe4 <printf>
 80115e4:	69e1      	ldr	r1, [r4, #28]
 80115e6:	4827      	ldr	r0, [pc, #156]	; (8011684 <Network::Print()+0xe0>)
 80115e8:	0e0b      	lsrs	r3, r1, #24
 80115ea:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80115ee:	9300      	str	r3, [sp, #0]
 80115f0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80115f4:	b2c9      	uxtb	r1, r1
 80115f6:	f002 fcf5 	bl	8013fe4 <printf>
 80115fa:	69a1      	ldr	r1, [r4, #24]
 80115fc:	4822      	ldr	r0, [pc, #136]	; (8011688 <Network::Print()+0xe4>)
 80115fe:	0e0b      	lsrs	r3, r1, #24
 8011600:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8011604:	9300      	str	r3, [sp, #0]
 8011606:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801160a:	b2c9      	uxtb	r1, r1
 801160c:	f002 fcea 	bl	8013fe4 <printf>
 8011610:	69e3      	ldr	r3, [r4, #28]
 8011612:	6961      	ldr	r1, [r4, #20]
 8011614:	481d      	ldr	r0, [pc, #116]	; (801168c <Network::Print()+0xe8>)
 8011616:	ea61 0103 	orn	r1, r1, r3
 801161a:	0e0b      	lsrs	r3, r1, #24
 801161c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8011620:	9300      	str	r3, [sp, #0]
 8011622:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011626:	b2c9      	uxtb	r1, r1
 8011628:	f002 fcdc 	bl	8013fe4 <printf>
 801162c:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8011630:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 8011634:	9302      	str	r3, [sp, #8]
 8011636:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 801163a:	f894 10a0 	ldrb.w	r1, [r4, #160]	; 0xa0
 801163e:	9301      	str	r3, [sp, #4]
 8011640:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 8011644:	4812      	ldr	r0, [pc, #72]	; (8011690 <Network::Print()+0xec>)
 8011646:	9300      	str	r3, [sp, #0]
 8011648:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 801164c:	f002 fcca 	bl	8013fe4 <printf>
 8011650:	4b10      	ldr	r3, [pc, #64]	; (8011694 <Network::Print()+0xf0>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	79da      	ldrb	r2, [r3, #7]
 8011656:	b952      	cbnz	r2, 801166e <Network::Print()+0xca>
 8011658:	795b      	ldrb	r3, [r3, #5]
 801165a:	2b00      	cmp	r3, #0
 801165c:	bf14      	ite	ne
 801165e:	2144      	movne	r1, #68	; 0x44
 8011660:	2153      	moveq	r1, #83	; 0x53
 8011662:	480d      	ldr	r0, [pc, #52]	; (8011698 <Network::Print()+0xf4>)
 8011664:	b005      	add	sp, #20
 8011666:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801166a:	f002 bcbb 	b.w	8013fe4 <printf>
 801166e:	215a      	movs	r1, #90	; 0x5a
 8011670:	e7f7      	b.n	8011662 <Network::Print()+0xbe>
 8011672:	bf00      	nop
 8011674:	08018042 	stmdaeq	r1, {r1, r6, pc}
 8011678:	0801804b 	stmdaeq	r1, {r0, r1, r3, r6, pc}
 801167c:	0801805c 	stmdaeq	r1, {r2, r3, r4, r6, pc}
 8011680:	08018071 	stmdaeq	r1, {r0, r4, r5, r6, pc}
 8011684:	0801808e 	stmdaeq	r1, {r1, r2, r3, r7, pc}
 8011688:	080180a8 	stmdaeq	r1, {r3, r5, r7, pc}
 801168c:	080180c2 	stmdaeq	r1, {r1, r6, r7, pc}
 8011690:	080180dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, pc}
 8011694:	2000a59c 	mulcs	r0, ip, r5
 8011698:	08018108 	stmdaeq	r1, {r3, r8, pc}

0801169c <Network::TcpBegin(unsigned short)>:
 801169c:	4608      	mov	r0, r1
 801169e:	f7fe bf45 	b.w	801052c <tcp_begin>

080116a2 <Network::TcpRead(int, unsigned char const**)>:
 80116a2:	4608      	mov	r0, r1
 80116a4:	4611      	mov	r1, r2
 80116a6:	f7fe bf7f 	b.w	80105a8 <tcp_read>

080116aa <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 80116aa:	4608      	mov	r0, r1
 80116ac:	4611      	mov	r1, r2
 80116ae:	461a      	mov	r2, r3
 80116b0:	f7fe bf56 	b.w	8010560 <tcp_write>

080116b4 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 80116b4:	b510      	push	{r4, lr}
 80116b6:	225e      	movs	r2, #94	; 0x5e
 80116b8:	4604      	mov	r4, r0
 80116ba:	f840 1b04 	str.w	r1, [r0], #4
 80116be:	2100      	movs	r1, #0
 80116c0:	f002 f972 	bl	80139a8 <memset>
 80116c4:	2301      	movs	r3, #1
 80116c6:	4620      	mov	r0, r4
 80116c8:	7623      	strb	r3, [r4, #24]
 80116ca:	bd10      	pop	{r4, pc}

080116cc <NetworkParams::Load()>:
 80116cc:	b508      	push	{r3, lr}
 80116ce:	2300      	movs	r3, #0
 80116d0:	4601      	mov	r1, r0
 80116d2:	6043      	str	r3, [r0, #4]
 80116d4:	6800      	ldr	r0, [r0, #0]
 80116d6:	b120      	cbz	r0, 80116e2 <NetworkParams::Load()+0x16>
 80116d8:	6803      	ldr	r3, [r0, #0]
 80116da:	3104      	adds	r1, #4
 80116dc:	68db      	ldr	r3, [r3, #12]
 80116de:	4798      	blx	r3
 80116e0:	2001      	movs	r0, #1
 80116e2:	bd08      	pop	{r3, pc}

080116e4 <NetworkParams::Load(char const*, unsigned int)>:
 80116e4:	6803      	ldr	r3, [r0, #0]
 80116e6:	b1d3      	cbz	r3, 801171e <NetworkParams::Load(char const*, unsigned int)+0x3a>
 80116e8:	2300      	movs	r3, #0
 80116ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80116ec:	460d      	mov	r5, r1
 80116ee:	4616      	mov	r6, r2
 80116f0:	4604      	mov	r4, r0
 80116f2:	6043      	str	r3, [r0, #4]
 80116f4:	4602      	mov	r2, r0
 80116f6:	490a      	ldr	r1, [pc, #40]	; (8011720 <NetworkParams::Load(char const*, unsigned int)+0x3c>)
 80116f8:	4668      	mov	r0, sp
 80116fa:	f001 fb53 	bl	8012da4 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 80116fe:	4632      	mov	r2, r6
 8011700:	4629      	mov	r1, r5
 8011702:	4668      	mov	r0, sp
 8011704:	f001 fb52 	bl	8012dac <ReadConfigFile::Read(char const*, unsigned int)>
 8011708:	4621      	mov	r1, r4
 801170a:	f851 0b04 	ldr.w	r0, [r1], #4
 801170e:	6803      	ldr	r3, [r0, #0]
 8011710:	689b      	ldr	r3, [r3, #8]
 8011712:	4798      	blx	r3
 8011714:	4668      	mov	r0, sp
 8011716:	f001 fb48 	bl	8012daa <ReadConfigFile::~ReadConfigFile()>
 801171a:	b002      	add	sp, #8
 801171c:	bd70      	pop	{r4, r5, r6, pc}
 801171e:	4770      	bx	lr
 8011720:	08011845 	stmdaeq	r1, {r0, r2, r6, fp, ip}

08011724 <NetworkParams::callbackFunction(char const*)>:
 8011724:	b530      	push	{r4, r5, lr}
 8011726:	460d      	mov	r5, r1
 8011728:	b085      	sub	sp, #20
 801172a:	4604      	mov	r4, r0
 801172c:	493f      	ldr	r1, [pc, #252]	; (801182c <NetworkParams::callbackFunction(char const*)+0x108>)
 801172e:	4628      	mov	r0, r5
 8011730:	f10d 0207 	add.w	r2, sp, #7
 8011734:	f001 fbe6 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011738:	b978      	cbnz	r0, 801175a <NetworkParams::callbackFunction(char const*)+0x36>
 801173a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801173e:	6863      	ldr	r3, [r4, #4]
 8011740:	b142      	cbz	r2, 8011754 <NetworkParams::callbackFunction(char const*)+0x30>
 8011742:	f023 0301 	bic.w	r3, r3, #1
 8011746:	3a00      	subs	r2, #0
 8011748:	bf18      	it	ne
 801174a:	2201      	movne	r2, #1
 801174c:	6063      	str	r3, [r4, #4]
 801174e:	7622      	strb	r2, [r4, #24]
 8011750:	b005      	add	sp, #20
 8011752:	bd30      	pop	{r4, r5, pc}
 8011754:	f043 0301 	orr.w	r3, r3, #1
 8011758:	e7f5      	b.n	8011746 <NetworkParams::callbackFunction(char const*)+0x22>
 801175a:	4628      	mov	r0, r5
 801175c:	4934      	ldr	r1, [pc, #208]	; (8011830 <NetworkParams::callbackFunction(char const*)+0x10c>)
 801175e:	f10d 0207 	add.w	r2, sp, #7
 8011762:	f001 fbcf 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011766:	b980      	cbnz	r0, 801178a <NetworkParams::callbackFunction(char const*)+0x66>
 8011768:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801176c:	6863      	ldr	r3, [r4, #4]
 801176e:	1e51      	subs	r1, r2, #1
 8011770:	2904      	cmp	r1, #4
 8011772:	bf97      	itett	ls
 8011774:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 8011778:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 801177c:	6063      	strls	r3, [r4, #4]
 801177e:	f884 2061 	strbls.w	r2, [r4, #97]	; 0x61
 8011782:	bf84      	itt	hi
 8011784:	6063      	strhi	r3, [r4, #4]
 8011786:	f884 0061 	strbhi.w	r0, [r4, #97]	; 0x61
 801178a:	4628      	mov	r0, r5
 801178c:	4929      	ldr	r1, [pc, #164]	; (8011834 <NetworkParams::callbackFunction(char const*)+0x110>)
 801178e:	aa02      	add	r2, sp, #8
 8011790:	f001 fb59 	bl	8012e46 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8011794:	b9c8      	cbnz	r0, 80117ca <NetworkParams::callbackFunction(char const*)+0xa6>
 8011796:	9b02      	ldr	r3, [sp, #8]
 8011798:	b2d9      	uxtb	r1, r3
 801179a:	29ac      	cmp	r1, #172	; 0xac
 801179c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80117a0:	d009      	beq.n	80117b6 <NetworkParams::callbackFunction(char const*)+0x92>
 80117a2:	29c0      	cmp	r1, #192	; 0xc0
 80117a4:	d00b      	beq.n	80117be <NetworkParams::callbackFunction(char const*)+0x9a>
 80117a6:	290a      	cmp	r1, #10
 80117a8:	d10c      	bne.n	80117c4 <NetworkParams::callbackFunction(char const*)+0xa0>
 80117aa:	60a3      	str	r3, [r4, #8]
 80117ac:	6863      	ldr	r3, [r4, #4]
 80117ae:	f043 0302 	orr.w	r3, r3, #2
 80117b2:	6063      	str	r3, [r4, #4]
 80117b4:	e7cc      	b.n	8011750 <NetworkParams::callbackFunction(char const*)+0x2c>
 80117b6:	3a10      	subs	r2, #16
 80117b8:	2a0f      	cmp	r2, #15
 80117ba:	d8c9      	bhi.n	8011750 <NetworkParams::callbackFunction(char const*)+0x2c>
 80117bc:	e7f5      	b.n	80117aa <NetworkParams::callbackFunction(char const*)+0x86>
 80117be:	2aa8      	cmp	r2, #168	; 0xa8
 80117c0:	d1c6      	bne.n	8011750 <NetworkParams::callbackFunction(char const*)+0x2c>
 80117c2:	e7f2      	b.n	80117aa <NetworkParams::callbackFunction(char const*)+0x86>
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d0f0      	beq.n	80117aa <NetworkParams::callbackFunction(char const*)+0x86>
 80117c8:	e7c2      	b.n	8011750 <NetworkParams::callbackFunction(char const*)+0x2c>
 80117ca:	4628      	mov	r0, r5
 80117cc:	491a      	ldr	r1, [pc, #104]	; (8011838 <NetworkParams::callbackFunction(char const*)+0x114>)
 80117ce:	aa02      	add	r2, sp, #8
 80117d0:	f001 fb39 	bl	8012e46 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 80117d4:	b960      	cbnz	r0, 80117f0 <NetworkParams::callbackFunction(char const*)+0xcc>
 80117d6:	9b02      	ldr	r3, [sp, #8]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d0b9      	beq.n	8011750 <NetworkParams::callbackFunction(char const*)+0x2c>
 80117dc:	ba1a      	rev	r2, r3
 80117de:	43d1      	mvns	r1, r2
 80117e0:	ea12 0251 	ands.w	r2, r2, r1, lsr #1
 80117e4:	d1b4      	bne.n	8011750 <NetworkParams::callbackFunction(char const*)+0x2c>
 80117e6:	60e3      	str	r3, [r4, #12]
 80117e8:	6863      	ldr	r3, [r4, #4]
 80117ea:	f043 0304 	orr.w	r3, r3, #4
 80117ee:	e7e0      	b.n	80117b2 <NetworkParams::callbackFunction(char const*)+0x8e>
 80117f0:	4628      	mov	r0, r5
 80117f2:	4912      	ldr	r1, [pc, #72]	; (801183c <NetworkParams::callbackFunction(char const*)+0x118>)
 80117f4:	aa02      	add	r2, sp, #8
 80117f6:	f001 fb26 	bl	8012e46 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 80117fa:	b928      	cbnz	r0, 8011808 <NetworkParams::callbackFunction(char const*)+0xe4>
 80117fc:	9b02      	ldr	r3, [sp, #8]
 80117fe:	6123      	str	r3, [r4, #16]
 8011800:	6863      	ldr	r3, [r4, #4]
 8011802:	f043 0308 	orr.w	r3, r3, #8
 8011806:	e7d4      	b.n	80117b2 <NetworkParams::callbackFunction(char const*)+0x8e>
 8011808:	233f      	movs	r3, #63	; 0x3f
 801180a:	4628      	mov	r0, r5
 801180c:	9303      	str	r3, [sp, #12]
 801180e:	490c      	ldr	r1, [pc, #48]	; (8011840 <NetworkParams::callbackFunction(char const*)+0x11c>)
 8011810:	ab03      	add	r3, sp, #12
 8011812:	f104 0219 	add.w	r2, r4, #25
 8011816:	f001 fafd 	bl	8012e14 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 801181a:	2800      	cmp	r0, #0
 801181c:	d198      	bne.n	8011750 <NetworkParams::callbackFunction(char const*)+0x2c>
 801181e:	9b03      	ldr	r3, [sp, #12]
 8011820:	4423      	add	r3, r4
 8011822:	7658      	strb	r0, [r3, #25]
 8011824:	6863      	ldr	r3, [r4, #4]
 8011826:	f043 0320 	orr.w	r3, r3, #32
 801182a:	e7c2      	b.n	80117b2 <NetworkParams::callbackFunction(char const*)+0x8e>
 801182c:	08018160 	stmdaeq	r1, {r5, r6, r8, pc}
 8011830:	0801813e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, pc}
 8011834:	08018123 	stmdaeq	r1, {r0, r1, r5, r8, pc}
 8011838:	08018157 	stmdaeq	r1, {r0, r1, r2, r4, r6, r8, pc}
 801183c:	0801812e 	stmdaeq	r1, {r1, r2, r3, r5, r8, pc}
 8011840:	0801814e 	stmdaeq	r1, {r1, r2, r3, r6, r8, pc}

08011844 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 8011844:	f7ff bf6e 	b.w	8011724 <NetworkParams::callbackFunction(char const*)>

08011848 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>:
 8011848:	b570      	push	{r4, r5, r6, lr}
 801184a:	4604      	mov	r4, r0
 801184c:	4615      	mov	r5, r2
 801184e:	461e      	mov	r6, r3
 8011850:	b086      	sub	sp, #24
 8011852:	3004      	adds	r0, #4
 8011854:	2900      	cmp	r1, #0
 8011856:	d02b      	beq.n	80118b0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x68>
 8011858:	225e      	movs	r2, #94	; 0x5e
 801185a:	f002 f88e 	bl	801397a <memmove>
 801185e:	462a      	mov	r2, r5
 8011860:	4633      	mov	r3, r6
 8011862:	4970      	ldr	r1, [pc, #448]	; (8011a24 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>)
 8011864:	a803      	add	r0, sp, #12
 8011866:	f001 f9fd 	bl	8012c64 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 801186a:	6863      	ldr	r3, [r4, #4]
 801186c:	079a      	lsls	r2, r3, #30
 801186e:	bf5f      	itttt	pl
 8011870:	4a6d      	ldrpl	r2, [pc, #436]	; (8011a28 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8011872:	6812      	ldrpl	r2, [r2, #0]
 8011874:	6952      	ldrpl	r2, [r2, #20]
 8011876:	60a2      	strpl	r2, [r4, #8]
 8011878:	075e      	lsls	r6, r3, #29
 801187a:	bf5f      	itttt	pl
 801187c:	4a6a      	ldrpl	r2, [pc, #424]	; (8011a28 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 801187e:	6812      	ldrpl	r2, [r2, #0]
 8011880:	69d2      	ldrpl	r2, [r2, #28]
 8011882:	60e2      	strpl	r2, [r4, #12]
 8011884:	071d      	lsls	r5, r3, #28
 8011886:	bf58      	it	pl
 8011888:	4a67      	ldrpl	r2, [pc, #412]	; (8011a28 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 801188a:	f104 0519 	add.w	r5, r4, #25
 801188e:	bf5e      	ittt	pl
 8011890:	6812      	ldrpl	r2, [r2, #0]
 8011892:	6992      	ldrpl	r2, [r2, #24]
 8011894:	6122      	strpl	r2, [r4, #16]
 8011896:	0698      	lsls	r0, r3, #26
 8011898:	d418      	bmi.n	80118cc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x84>
 801189a:	4628      	mov	r0, r5
 801189c:	223f      	movs	r2, #63	; 0x3f
 801189e:	4b62      	ldr	r3, [pc, #392]	; (8011a28 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	331f      	adds	r3, #31
 80118a4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80118a8:	b949      	cbnz	r1, 80118be <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x76>
 80118aa:	f002 f87d 	bl	80139a8 <memset>
 80118ae:	e00a      	b.n	80118c6 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 80118b0:	6823      	ldr	r3, [r4, #0]
 80118b2:	4601      	mov	r1, r0
 80118b4:	681a      	ldr	r2, [r3, #0]
 80118b6:	4618      	mov	r0, r3
 80118b8:	68d2      	ldr	r2, [r2, #12]
 80118ba:	4790      	blx	r2
 80118bc:	e7cf      	b.n	801185e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 80118be:	3a01      	subs	r2, #1
 80118c0:	f800 1b01 	strb.w	r1, [r0], #1
 80118c4:	d1ee      	bne.n	80118a4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x5c>
 80118c6:	2300      	movs	r3, #0
 80118c8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80118cc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80118d0:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 80118d4:	7e23      	ldrb	r3, [r4, #24]
 80118d6:	42b2      	cmp	r2, r6
 80118d8:	6861      	ldr	r1, [r4, #4]
 80118da:	d21a      	bcs.n	8011912 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xca>
 80118dc:	9803      	ldr	r0, [sp, #12]
 80118de:	07c9      	lsls	r1, r1, #31
 80118e0:	4410      	add	r0, r2
 80118e2:	eba6 0602 	sub.w	r6, r6, r2
 80118e6:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80118ea:	d404      	bmi.n	80118f6 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xae>
 80118ec:	b922      	cbnz	r2, 80118f8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb0>
 80118ee:	9300      	str	r3, [sp, #0]
 80118f0:	4a4e      	ldr	r2, [pc, #312]	; (8011a2c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 80118f2:	4b4f      	ldr	r3, [pc, #316]	; (8011a30 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 80118f4:	e003      	b.n	80118fe <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb6>
 80118f6:	b312      	cbz	r2, 801193e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xf6>
 80118f8:	9300      	str	r3, [sp, #0]
 80118fa:	4a4e      	ldr	r2, [pc, #312]	; (8011a34 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 80118fc:	4b4c      	ldr	r3, [pc, #304]	; (8011a30 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 80118fe:	4631      	mov	r1, r6
 8011900:	f002 fb98 	bl	8014034 <snprintf>
 8011904:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011908:	4286      	cmp	r6, r0
 801190a:	bfa4      	itt	ge
 801190c:	181b      	addge	r3, r3, r0
 801190e:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8011912:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011916:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 801191a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801191e:	42b2      	cmp	r2, r6
 8011920:	6861      	ldr	r1, [r4, #4]
 8011922:	d21f      	bcs.n	8011964 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>
 8011924:	9803      	ldr	r0, [sp, #12]
 8011926:	05c9      	lsls	r1, r1, #23
 8011928:	4410      	add	r0, r2
 801192a:	eba6 0602 	sub.w	r6, r6, r2
 801192e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8011932:	d408      	bmi.n	8011946 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xfe>
 8011934:	b94a      	cbnz	r2, 801194a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x102>
 8011936:	9300      	str	r3, [sp, #0]
 8011938:	4a3c      	ldr	r2, [pc, #240]	; (8011a2c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 801193a:	4b3f      	ldr	r3, [pc, #252]	; (8011a38 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 801193c:	e008      	b.n	8011950 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x108>
 801193e:	9300      	str	r3, [sp, #0]
 8011940:	4a3e      	ldr	r2, [pc, #248]	; (8011a3c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8011942:	4b3b      	ldr	r3, [pc, #236]	; (8011a30 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8011944:	e7db      	b.n	80118fe <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb6>
 8011946:	2a00      	cmp	r2, #0
 8011948:	d03c      	beq.n	80119c4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x17c>
 801194a:	9300      	str	r3, [sp, #0]
 801194c:	4a39      	ldr	r2, [pc, #228]	; (8011a34 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 801194e:	4b3a      	ldr	r3, [pc, #232]	; (8011a38 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8011950:	4631      	mov	r1, r6
 8011952:	f002 fb6f 	bl	8014034 <snprintf>
 8011956:	4286      	cmp	r6, r0
 8011958:	bfa2      	ittt	ge
 801195a:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 801195e:	18c0      	addge	r0, r0, r3
 8011960:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8011964:	4936      	ldr	r1, [pc, #216]	; (8011a40 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f8>)
 8011966:	a803      	add	r0, sp, #12
 8011968:	f001 fa02 	bl	8012d70 <PropertiesBuilder::AddComment(char const*)>
 801196c:	6863      	ldr	r3, [r4, #4]
 801196e:	68a2      	ldr	r2, [r4, #8]
 8011970:	4934      	ldr	r1, [pc, #208]	; (8011a44 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1fc>)
 8011972:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8011976:	a803      	add	r0, sp, #12
 8011978:	f001 f9b6 	bl	8012ce8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 801197c:	6863      	ldr	r3, [r4, #4]
 801197e:	68e2      	ldr	r2, [r4, #12]
 8011980:	4931      	ldr	r1, [pc, #196]	; (8011a48 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x200>)
 8011982:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8011986:	a803      	add	r0, sp, #12
 8011988:	f001 f9ae 	bl	8012ce8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 801198c:	6863      	ldr	r3, [r4, #4]
 801198e:	6922      	ldr	r2, [r4, #16]
 8011990:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011994:	492d      	ldr	r1, [pc, #180]	; (8011a4c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x204>)
 8011996:	a803      	add	r0, sp, #12
 8011998:	f001 f9a6 	bl	8012ce8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 801199c:	6862      	ldr	r2, [r4, #4]
 801199e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80119a2:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 80119a6:	42a3      	cmp	r3, r4
 80119a8:	d21e      	bcs.n	80119e8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1a0>
 80119aa:	9803      	ldr	r0, [sp, #12]
 80119ac:	0692      	lsls	r2, r2, #26
 80119ae:	4418      	add	r0, r3
 80119b0:	eba4 0403 	sub.w	r4, r4, r3
 80119b4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80119b8:	d408      	bmi.n	80119cc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x184>
 80119ba:	b943      	cbnz	r3, 80119ce <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x186>
 80119bc:	4b24      	ldr	r3, [pc, #144]	; (8011a50 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 80119be:	4a25      	ldr	r2, [pc, #148]	; (8011a54 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x20c>)
 80119c0:	9500      	str	r5, [sp, #0]
 80119c2:	e007      	b.n	80119d4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18c>
 80119c4:	9300      	str	r3, [sp, #0]
 80119c6:	4a1d      	ldr	r2, [pc, #116]	; (8011a3c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f4>)
 80119c8:	4b1b      	ldr	r3, [pc, #108]	; (8011a38 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 80119ca:	e7c1      	b.n	8011950 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x108>
 80119cc:	b32b      	cbz	r3, 8011a1a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1d2>
 80119ce:	4b20      	ldr	r3, [pc, #128]	; (8011a50 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 80119d0:	4a21      	ldr	r2, [pc, #132]	; (8011a58 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x210>)
 80119d2:	9500      	str	r5, [sp, #0]
 80119d4:	4621      	mov	r1, r4
 80119d6:	f002 fb2d 	bl	8014034 <snprintf>
 80119da:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80119de:	4284      	cmp	r4, r0
 80119e0:	bfa4      	itt	ge
 80119e2:	181b      	addge	r3, r3, r0
 80119e4:	f8ad 3012 	strhge.w	r3, [sp, #18]
 80119e8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80119ec:	b17b      	cbz	r3, 8011a0e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1c6>
 80119ee:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80119f2:	9b03      	ldr	r3, [sp, #12]
 80119f4:	4413      	add	r3, r2
 80119f6:	227d      	movs	r2, #125	; 0x7d
 80119f8:	f803 2c01 	strb.w	r2, [r3, #-1]
 80119fc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011a00:	9903      	ldr	r1, [sp, #12]
 8011a02:	54ca      	strb	r2, [r1, r3]
 8011a04:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011a08:	3301      	adds	r3, #1
 8011a0a:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011a0e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a14:	601a      	str	r2, [r3, #0]
 8011a16:	b006      	add	sp, #24
 8011a18:	bd70      	pop	{r4, r5, r6, pc}
 8011a1a:	4b0d      	ldr	r3, [pc, #52]	; (8011a50 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 8011a1c:	4a0f      	ldr	r2, [pc, #60]	; (8011a5c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x214>)
 8011a1e:	9500      	str	r5, [sp, #0]
 8011a20:	e7d8      	b.n	80119d4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18c>
 8011a22:	bf00      	nop
 8011a24:	08018169 	stmdaeq	r1, {r0, r3, r5, r6, r8, pc}
 8011a28:	2000a59c 	mulcs	r0, ip, r5
 8011a2c:	0801691d 	stmdaeq	r1, {r0, r2, r3, r4, r8, fp, sp, lr}
 8011a30:	08018160 	stmdaeq	r1, {r5, r6, r8, pc}
 8011a34:	08016914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr}
 8011a38:	0801813e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, pc}
 8011a3c:	0801691e 	stmdaeq	r1, {r1, r2, r3, r4, r8, fp, sp, lr}
 8011a40:	08018119 	stmdaeq	r1, {r0, r3, r4, r8, pc}
 8011a44:	08018123 	stmdaeq	r1, {r0, r1, r5, r8, pc}
 8011a48:	08018157 	stmdaeq	r1, {r0, r1, r2, r4, r6, r8, pc}
 8011a4c:	0801812e 	stmdaeq	r1, {r1, r2, r3, r5, r8, pc}
 8011a50:	0801814e 	stmdaeq	r1, {r1, r2, r3, r6, r8, pc}
 8011a54:	08016930 	stmdaeq	r1, {r4, r5, r8, fp, sp, lr}
 8011a58:	08016925 	stmdaeq	r1, {r0, r2, r5, r8, fp, sp, lr}
 8011a5c:	08016931 	stmdaeq	r1, {r0, r4, r5, r8, fp, sp, lr}

08011a60 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 8011a60:	b513      	push	{r0, r1, r4, lr}
 8011a62:	6804      	ldr	r4, [r0, #0]
 8011a64:	b914      	cbnz	r4, 8011a6c <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8011a66:	601c      	str	r4, [r3, #0]
 8011a68:	b002      	add	sp, #8
 8011a6a:	bd10      	pop	{r4, pc}
 8011a6c:	9300      	str	r3, [sp, #0]
 8011a6e:	4613      	mov	r3, r2
 8011a70:	460a      	mov	r2, r1
 8011a72:	2100      	movs	r1, #0
 8011a74:	f7ff fee8 	bl	8011848 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>
 8011a78:	e7f6      	b.n	8011a68 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

08011a7a <NetworkParams::Dump()>:
 8011a7a:	4770      	bx	lr

08011a7c <memcpy.isra.0>:
 8011a7c:	3801      	subs	r0, #1
 8011a7e:	440a      	add	r2, r1
 8011a80:	4291      	cmp	r1, r2
 8011a82:	d100      	bne.n	8011a86 <memcpy.isra.0+0xa>
 8011a84:	4770      	bx	lr
 8011a86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a8a:	f800 3f01 	strb.w	r3, [r0, #1]!
 8011a8e:	e7f7      	b.n	8011a80 <memcpy.isra.0+0x4>

08011a90 <arp_announce>:
 8011a90:	4803      	ldr	r0, [pc, #12]	; (8011aa0 <arp_announce+0x10>)
 8011a92:	69c3      	ldr	r3, [r0, #28]
 8011a94:	b113      	cbz	r3, 8011a9c <arp_announce+0xc>
 8011a96:	212a      	movs	r1, #42	; 0x2a
 8011a98:	f003 ba56 	b.w	8014f48 <emac_eth_send>
 8011a9c:	4770      	bx	lr
 8011a9e:	bf00      	nop
 8011aa0:	2000a5a0 	andcs	sl, r0, r0, lsr #11

08011aa4 <arp_handle_request>:
 8011aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011aa6:	2204      	movs	r2, #4
 8011aa8:	f100 0126 	add.w	r1, r0, #38	; 0x26
 8011aac:	4604      	mov	r4, r0
 8011aae:	eb0d 0002 	add.w	r0, sp, r2
 8011ab2:	f7ff ffe3 	bl	8011a7c <memcpy.isra.0>
 8011ab6:	4b0d      	ldr	r3, [pc, #52]	; (8011aec <arp_handle_request+0x48>)
 8011ab8:	9a01      	ldr	r2, [sp, #4]
 8011aba:	69db      	ldr	r3, [r3, #28]
 8011abc:	429a      	cmp	r2, r3
 8011abe:	d113      	bne.n	8011ae8 <arp_handle_request+0x44>
 8011ac0:	2206      	movs	r2, #6
 8011ac2:	4d0b      	ldr	r5, [pc, #44]	; (8011af0 <arp_handle_request+0x4c>)
 8011ac4:	18a1      	adds	r1, r4, r2
 8011ac6:	4628      	mov	r0, r5
 8011ac8:	f7ff ffd8 	bl	8011a7c <memcpy.isra.0>
 8011acc:	f104 0116 	add.w	r1, r4, #22
 8011ad0:	f105 0020 	add.w	r0, r5, #32
 8011ad4:	2206      	movs	r2, #6
 8011ad6:	f7ff ffd1 	bl	8011a7c <memcpy.isra.0>
 8011ada:	69e3      	ldr	r3, [r4, #28]
 8011adc:	212a      	movs	r1, #42	; 0x2a
 8011ade:	4628      	mov	r0, r5
 8011ae0:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 8011ae4:	f003 fa30 	bl	8014f48 <emac_eth_send>
 8011ae8:	b003      	add	sp, #12
 8011aea:	bd30      	pop	{r4, r5, pc}
 8011aec:	2000a5a0 	andcs	sl, r0, r0, lsr #11
 8011af0:	2000a5cc 	andcs	sl, r0, ip, asr #11

08011af4 <arp_handle_reply>:
 8011af4:	69c1      	ldr	r1, [r0, #28]
 8011af6:	3016      	adds	r0, #22
 8011af8:	f000 b80a 	b.w	8011b10 <arp_cache_update>

08011afc <arp_send_request>:
 8011afc:	4b03      	ldr	r3, [pc, #12]	; (8011b0c <arp_send_request+0x10>)
 8011afe:	212a      	movs	r1, #42	; 0x2a
 8011b00:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 8011b04:	4618      	mov	r0, r3
 8011b06:	f003 ba1f 	b.w	8014f48 <emac_eth_send>
 8011b0a:	bf00      	nop
 8011b0c:	2000a5f8 	strdcs	sl, [r0], -r8

08011b10 <arp_cache_update>:
 8011b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b12:	4e11      	ldr	r6, [pc, #68]	; (8011b58 <arp_cache_update+0x48>)
 8011b14:	8833      	ldrh	r3, [r6, #0]
 8011b16:	2b20      	cmp	r3, #32
 8011b18:	d018      	beq.n	8011b4c <arp_cache_update+0x3c>
 8011b1a:	2400      	movs	r4, #0
 8011b1c:	220c      	movs	r2, #12
 8011b1e:	4d0f      	ldr	r5, [pc, #60]	; (8011b5c <arp_cache_update+0x4c>)
 8011b20:	b2a7      	uxth	r7, r4
 8011b22:	42bb      	cmp	r3, r7
 8011b24:	d80b      	bhi.n	8011b3e <arp_cache_update+0x2e>
 8011b26:	fb02 5203 	mla	r2, r2, r3, r5
 8011b2a:	1d84      	adds	r4, r0, #6
 8011b2c:	3203      	adds	r2, #3
 8011b2e:	42a0      	cmp	r0, r4
 8011b30:	d10d      	bne.n	8011b4e <arp_cache_update+0x3e>
 8011b32:	220c      	movs	r2, #12
 8011b34:	435a      	muls	r2, r3
 8011b36:	3301      	adds	r3, #1
 8011b38:	50a9      	str	r1, [r5, r2]
 8011b3a:	8033      	strh	r3, [r6, #0]
 8011b3c:	e006      	b.n	8011b4c <arp_cache_update+0x3c>
 8011b3e:	3401      	adds	r4, #1
 8011b40:	fb02 5704 	mla	r7, r2, r4, r5
 8011b44:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 8011b48:	428f      	cmp	r7, r1
 8011b4a:	d1e9      	bne.n	8011b20 <arp_cache_update+0x10>
 8011b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b4e:	f810 7b01 	ldrb.w	r7, [r0], #1
 8011b52:	f802 7f01 	strb.w	r7, [r2, #1]!
 8011b56:	e7ea      	b.n	8011b2e <arp_cache_update+0x1e>
 8011b58:	2000a7a4 	andcs	sl, r0, r4, lsr #15
 8011b5c:	2000a624 	andcs	sl, r0, r4, lsr #12

08011b60 <arp_cache_lookup>:
 8011b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b64:	2200      	movs	r2, #0
 8011b66:	4606      	mov	r6, r0
 8011b68:	460c      	mov	r4, r1
 8011b6a:	200c      	movs	r0, #12
 8011b6c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8011bf4 <arp_cache_lookup+0x94>
 8011b70:	fb00 f302 	mul.w	r3, r0, r2
 8011b74:	f853 1008 	ldr.w	r1, [r3, r8]
 8011b78:	42b1      	cmp	r1, r6
 8011b7a:	d10d      	bne.n	8011b98 <arp_cache_lookup+0x38>
 8011b7c:	3304      	adds	r3, #4
 8011b7e:	4443      	add	r3, r8
 8011b80:	3c01      	subs	r4, #1
 8011b82:	1d9a      	adds	r2, r3, #6
 8011b84:	4293      	cmp	r3, r2
 8011b86:	d102      	bne.n	8011b8e <arp_cache_lookup+0x2e>
 8011b88:	4630      	mov	r0, r6
 8011b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b8e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8011b92:	f804 1f01 	strb.w	r1, [r4, #1]!
 8011b96:	e7f5      	b.n	8011b84 <arp_cache_lookup+0x24>
 8011b98:	b111      	cbz	r1, 8011ba0 <arp_cache_lookup+0x40>
 8011b9a:	3201      	adds	r2, #1
 8011b9c:	2a20      	cmp	r2, #32
 8011b9e:	d1e7      	bne.n	8011b70 <arp_cache_lookup+0x10>
 8011ba0:	2704      	movs	r7, #4
 8011ba2:	f8df a054 	ldr.w	sl, [pc, #84]	; 8011bf8 <arp_cache_lookup+0x98>
 8011ba6:	f8ba 5000 	ldrh.w	r5, [sl]
 8011baa:	3f01      	subs	r7, #1
 8011bac:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8011bb0:	d101      	bne.n	8011bb6 <arp_cache_lookup+0x56>
 8011bb2:	463e      	mov	r6, r7
 8011bb4:	e7e8      	b.n	8011b88 <arp_cache_lookup+0x28>
 8011bb6:	4630      	mov	r0, r6
 8011bb8:	f7ff ffa0 	bl	8011afc <arp_send_request>
 8011bbc:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 8011bc0:	f1b9 0901 	subs.w	r9, r9, #1
 8011bc4:	f8ba 3000 	ldrh.w	r3, [sl]
 8011bc8:	d011      	beq.n	8011bee <arp_cache_lookup+0x8e>
 8011bca:	429d      	cmp	r5, r3
 8011bcc:	d00c      	beq.n	8011be8 <arp_cache_lookup+0x88>
 8011bce:	230c      	movs	r3, #12
 8011bd0:	fb03 8505 	mla	r5, r3, r5, r8
 8011bd4:	3c01      	subs	r4, #1
 8011bd6:	1d2b      	adds	r3, r5, #4
 8011bd8:	350a      	adds	r5, #10
 8011bda:	42ab      	cmp	r3, r5
 8011bdc:	d0d4      	beq.n	8011b88 <arp_cache_lookup+0x28>
 8011bde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011be2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011be6:	e7f8      	b.n	8011bda <arp_cache_lookup+0x7a>
 8011be8:	f7f5 fcc6 	bl	8007578 <net_handle>
 8011bec:	e7e8      	b.n	8011bc0 <arp_cache_lookup+0x60>
 8011bee:	429d      	cmp	r5, r3
 8011bf0:	d0db      	beq.n	8011baa <arp_cache_lookup+0x4a>
 8011bf2:	e7ec      	b.n	8011bce <arp_cache_lookup+0x6e>
 8011bf4:	2000a624 	andcs	sl, r0, r4, lsr #12
 8011bf8:	2000a7a4 	andcs	sl, r0, r4, lsr #15

08011bfc <_parse_response>:
 8011bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c00:	2400      	movs	r4, #0
 8011c02:	460d      	mov	r5, r1
 8011c04:	46a3      	mov	fp, r4
 8011c06:	4627      	mov	r7, r4
 8011c08:	46a2      	mov	sl, r4
 8011c0a:	46a1      	mov	r9, r4
 8011c0c:	46a0      	mov	r8, r4
 8011c0e:	4e50      	ldr	r6, [pc, #320]	; (8011d50 <_parse_response+0x154>)
 8011c10:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8011c14:	6833      	ldr	r3, [r6, #0]
 8011c16:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8011c1a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8011c1e:	9009      	str	r0, [sp, #36]	; 0x24
 8011c20:	9402      	str	r4, [sp, #8]
 8011c22:	9407      	str	r4, [sp, #28]
 8011c24:	9308      	str	r3, [sp, #32]
 8011c26:	f7f5 fca7 	bl	8007578 <net_handle>
 8011c2a:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8011c2e:	9300      	str	r3, [sp, #0]
 8011c30:	f44f 7209 	mov.w	r2, #548	; 0x224
 8011c34:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8011c38:	ab0c      	add	r3, sp, #48	; 0x30
 8011c3a:	a90d      	add	r1, sp, #52	; 0x34
 8011c3c:	f7fe fd76 	bl	801072c <udp_recv>
 8011c40:	2800      	cmp	r0, #0
 8011c42:	d03f      	beq.n	8011cc4 <_parse_response+0xc8>
 8011c44:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8011c48:	2b43      	cmp	r3, #67	; 0x43
 8011c4a:	d13b      	bne.n	8011cc4 <_parse_response+0xc8>
 8011c4c:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 8011c50:	1e6b      	subs	r3, r5, #1
 8011c52:	1d69      	adds	r1, r5, #5
 8011c54:	4299      	cmp	r1, r3
 8011c56:	d12f      	bne.n	8011cb8 <_parse_response+0xbc>
 8011c58:	2100      	movs	r1, #0
 8011c5a:	ab0d      	add	r3, sp, #52	; 0x34
 8011c5c:	181d      	adds	r5, r3, r0
 8011c5e:	468c      	mov	ip, r1
 8011c60:	460e      	mov	r6, r1
 8011c62:	4608      	mov	r0, r1
 8011c64:	ab49      	add	r3, sp, #292	; 0x124
 8011c66:	42ab      	cmp	r3, r5
 8011c68:	d337      	bcc.n	8011cda <_parse_response+0xde>
 8011c6a:	b141      	cbz	r1, 8011c7e <_parse_response+0x82>
 8011c6c:	4b39      	ldr	r3, [pc, #228]	; (8011d54 <_parse_response+0x158>)
 8011c6e:	9a07      	ldr	r2, [sp, #28]
 8011c70:	f883 8003 	strb.w	r8, [r3, #3]
 8011c74:	709a      	strb	r2, [r3, #2]
 8011c76:	9a06      	ldr	r2, [sp, #24]
 8011c78:	705a      	strb	r2, [r3, #1]
 8011c7a:	9a05      	ldr	r2, [sp, #20]
 8011c7c:	701a      	strb	r2, [r3, #0]
 8011c7e:	f1bc 0f00 	cmp.w	ip, #0
 8011c82:	d007      	beq.n	8011c94 <_parse_response+0x98>
 8011c84:	4b34      	ldr	r3, [pc, #208]	; (8011d58 <_parse_response+0x15c>)
 8011c86:	9a04      	ldr	r2, [sp, #16]
 8011c88:	705c      	strb	r4, [r3, #1]
 8011c8a:	70da      	strb	r2, [r3, #3]
 8011c8c:	9a03      	ldr	r2, [sp, #12]
 8011c8e:	709a      	strb	r2, [r3, #2]
 8011c90:	9a02      	ldr	r2, [sp, #8]
 8011c92:	701a      	strb	r2, [r3, #0]
 8011c94:	b13e      	cbz	r6, 8011ca6 <_parse_response+0xaa>
 8011c96:	4b31      	ldr	r3, [pc, #196]	; (8011d5c <_parse_response+0x160>)
 8011c98:	70df      	strb	r7, [r3, #3]
 8011c9a:	f883 a002 	strb.w	sl, [r3, #2]
 8011c9e:	f883 9001 	strb.w	r9, [r3, #1]
 8011ca2:	f883 b000 	strb.w	fp, [r3]
 8011ca6:	2802      	cmp	r0, #2
 8011ca8:	d102      	bne.n	8011cb0 <_parse_response+0xb4>
 8011caa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011cac:	4b2c      	ldr	r3, [pc, #176]	; (8011d60 <_parse_response+0x164>)
 8011cae:	601a      	str	r2, [r3, #0]
 8011cb0:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8011cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cb8:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 8011cbc:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 8011cc0:	45e6      	cmp	lr, ip
 8011cc2:	d0c7      	beq.n	8011c54 <_parse_response+0x58>
 8011cc4:	6833      	ldr	r3, [r6, #0]
 8011cc6:	9a08      	ldr	r2, [sp, #32]
 8011cc8:	1a9b      	subs	r3, r3, r2
 8011cca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8011cce:	d3aa      	bcc.n	8011c26 <_parse_response+0x2a>
 8011cd0:	2800      	cmp	r0, #0
 8011cd2:	d1c1      	bne.n	8011c58 <_parse_response+0x5c>
 8011cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011cd8:	e7ea      	b.n	8011cb0 <_parse_response+0xb4>
 8011cda:	781a      	ldrb	r2, [r3, #0]
 8011cdc:	2a35      	cmp	r2, #53	; 0x35
 8011cde:	d011      	beq.n	8011d04 <_parse_response+0x108>
 8011ce0:	d808      	bhi.n	8011cf4 <_parse_response+0xf8>
 8011ce2:	2a01      	cmp	r2, #1
 8011ce4:	d011      	beq.n	8011d0a <_parse_response+0x10e>
 8011ce6:	2a03      	cmp	r2, #3
 8011ce8:	d019      	beq.n	8011d1e <_parse_response+0x122>
 8011cea:	b14a      	cbz	r2, 8011d00 <_parse_response+0x104>
 8011cec:	1c9a      	adds	r2, r3, #2
 8011cee:	785b      	ldrb	r3, [r3, #1]
 8011cf0:	4413      	add	r3, r2
 8011cf2:	e7b8      	b.n	8011c66 <_parse_response+0x6a>
 8011cf4:	2a36      	cmp	r2, #54	; 0x36
 8011cf6:	d01f      	beq.n	8011d38 <_parse_response+0x13c>
 8011cf8:	2aff      	cmp	r2, #255	; 0xff
 8011cfa:	d1f7      	bne.n	8011cec <_parse_response+0xf0>
 8011cfc:	462b      	mov	r3, r5
 8011cfe:	e7b2      	b.n	8011c66 <_parse_response+0x6a>
 8011d00:	3301      	adds	r3, #1
 8011d02:	e7b0      	b.n	8011c66 <_parse_response+0x6a>
 8011d04:	7898      	ldrb	r0, [r3, #2]
 8011d06:	3303      	adds	r3, #3
 8011d08:	e7ad      	b.n	8011c66 <_parse_response+0x6a>
 8011d0a:	f893 b002 	ldrb.w	fp, [r3, #2]
 8011d0e:	f893 9003 	ldrb.w	r9, [r3, #3]
 8011d12:	f893 a004 	ldrb.w	sl, [r3, #4]
 8011d16:	795f      	ldrb	r7, [r3, #5]
 8011d18:	4616      	mov	r6, r2
 8011d1a:	3306      	adds	r3, #6
 8011d1c:	e7a3      	b.n	8011c66 <_parse_response+0x6a>
 8011d1e:	789a      	ldrb	r2, [r3, #2]
 8011d20:	78dc      	ldrb	r4, [r3, #3]
 8011d22:	9202      	str	r2, [sp, #8]
 8011d24:	791a      	ldrb	r2, [r3, #4]
 8011d26:	f04f 0c01 	mov.w	ip, #1
 8011d2a:	9203      	str	r2, [sp, #12]
 8011d2c:	795a      	ldrb	r2, [r3, #5]
 8011d2e:	9204      	str	r2, [sp, #16]
 8011d30:	785a      	ldrb	r2, [r3, #1]
 8011d32:	4413      	add	r3, r2
 8011d34:	3302      	adds	r3, #2
 8011d36:	e796      	b.n	8011c66 <_parse_response+0x6a>
 8011d38:	789a      	ldrb	r2, [r3, #2]
 8011d3a:	f893 8005 	ldrb.w	r8, [r3, #5]
 8011d3e:	9205      	str	r2, [sp, #20]
 8011d40:	78da      	ldrb	r2, [r3, #3]
 8011d42:	2101      	movs	r1, #1
 8011d44:	9206      	str	r2, [sp, #24]
 8011d46:	791a      	ldrb	r2, [r3, #4]
 8011d48:	3306      	adds	r3, #6
 8011d4a:	9207      	str	r2, [sp, #28]
 8011d4c:	e78b      	b.n	8011c66 <_parse_response+0x6a>
 8011d4e:	bf00      	nop
 8011d50:	2000ac7c 	andcs	sl, r0, ip, ror ip
 8011d54:	2000a9d8 	ldrdcs	sl, [r0], -r8
 8011d58:	2000a7a8 	andcs	sl, r0, r8, lsr #15
 8011d5c:	2000a7b0 			; <UNDEFINED> instruction: 0x2000a7b0
 8011d60:	2000a7ac 	andcs	sl, r0, ip, lsr #15

08011d64 <memcpy.isra.0>:
 8011d64:	3801      	subs	r0, #1
 8011d66:	440a      	add	r2, r1
 8011d68:	4291      	cmp	r1, r2
 8011d6a:	d100      	bne.n	8011d6e <memcpy.isra.0+0xa>
 8011d6c:	4770      	bx	lr
 8011d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d72:	f800 3f01 	strb.w	r3, [r0, #1]!
 8011d76:	e7f7      	b.n	8011d68 <memcpy.isra.0+0x4>

08011d78 <dhcp_client>:
 8011d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d7c:	b087      	sub	sp, #28
 8011d7e:	9203      	str	r2, [sp, #12]
 8011d80:	4a77      	ldr	r2, [pc, #476]	; (8011f60 <dhcp_client+0x1e8>)
 8011d82:	460f      	mov	r7, r1
 8011d84:	4605      	mov	r5, r0
 8011d86:	f44f 7309 	mov.w	r3, #548	; 0x224
 8011d8a:	4614      	mov	r4, r2
 8011d8c:	2100      	movs	r1, #0
 8011d8e:	3b01      	subs	r3, #1
 8011d90:	f802 1b01 	strb.w	r1, [r2], #1
 8011d94:	d1fb      	bne.n	8011d8e <dhcp_client+0x16>
 8011d96:	f240 1301 	movw	r3, #257	; 0x101
 8011d9a:	2206      	movs	r2, #6
 8011d9c:	4629      	mov	r1, r5
 8011d9e:	4871      	ldr	r0, [pc, #452]	; (8011f64 <dhcp_client+0x1ec>)
 8011da0:	8023      	strh	r3, [r4, #0]
 8011da2:	70a2      	strb	r2, [r4, #2]
 8011da4:	f7ff ffde 	bl	8011d64 <memcpy.isra.0>
 8011da8:	4b6f      	ldr	r3, [pc, #444]	; (8011f68 <dhcp_client+0x1f0>)
 8011daa:	2044      	movs	r0, #68	; 0x44
 8011dac:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8011db0:	f240 1335 	movw	r3, #309	; 0x135
 8011db4:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 8011db8:	f7fe fc7e 	bl	80106b8 <udp_bind>
 8011dbc:	1e06      	subs	r6, r0, #0
 8011dbe:	f2c0 80c9 	blt.w	8011f54 <dhcp_client+0x1dc>
 8011dc2:	f04f 0915 	mov.w	r9, #21
 8011dc6:	f8df a198 	ldr.w	sl, [pc, #408]	; 8011f60 <dhcp_client+0x1e8>
 8011dca:	f1b9 0901 	subs.w	r9, r9, #1
 8011dce:	d11f      	bne.n	8011e10 <dhcp_client+0x98>
 8011dd0:	464c      	mov	r4, r9
 8011dd2:	2044      	movs	r0, #68	; 0x44
 8011dd4:	f7fe fc8a 	bl	80106ec <udp_unbind>
 8011dd8:	2c00      	cmp	r4, #0
 8011dda:	f000 80be 	beq.w	8011f5a <dhcp_client+0x1e2>
 8011dde:	2204      	movs	r2, #4
 8011de0:	4962      	ldr	r1, [pc, #392]	; (8011f6c <dhcp_client+0x1f4>)
 8011de2:	a805      	add	r0, sp, #20
 8011de4:	f7ff ffbe 	bl	8011d64 <memcpy.isra.0>
 8011de8:	9b05      	ldr	r3, [sp, #20]
 8011dea:	2204      	movs	r2, #4
 8011dec:	4960      	ldr	r1, [pc, #384]	; (8011f70 <dhcp_client+0x1f8>)
 8011dee:	603b      	str	r3, [r7, #0]
 8011df0:	a805      	add	r0, sp, #20
 8011df2:	f7ff ffb7 	bl	8011d64 <memcpy.isra.0>
 8011df6:	9b05      	ldr	r3, [sp, #20]
 8011df8:	a805      	add	r0, sp, #20
 8011dfa:	60bb      	str	r3, [r7, #8]
 8011dfc:	2204      	movs	r2, #4
 8011dfe:	495d      	ldr	r1, [pc, #372]	; (8011f74 <dhcp_client+0x1fc>)
 8011e00:	f7ff ffb0 	bl	8011d64 <memcpy.isra.0>
 8011e04:	2000      	movs	r0, #0
 8011e06:	9b05      	ldr	r3, [sp, #20]
 8011e08:	607b      	str	r3, [r7, #4]
 8011e0a:	b007      	add	sp, #28
 8011e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e10:	f643 5301 	movw	r3, #15617	; 0x3d01
 8011e14:	f240 1807 	movw	r8, #263	; 0x107
 8011e18:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8011e1c:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8011e20:	782b      	ldrb	r3, [r5, #0]
 8011e22:	4a55      	ldr	r2, [pc, #340]	; (8011f78 <dhcp_client+0x200>)
 8011e24:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8011e28:	786b      	ldrb	r3, [r5, #1]
 8011e2a:	fa5f fb86 	uxtb.w	fp, r6
 8011e2e:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8011e32:	78ab      	ldrb	r3, [r5, #2]
 8011e34:	4651      	mov	r1, sl
 8011e36:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8011e3a:	78eb      	ldrb	r3, [r5, #3]
 8011e3c:	4658      	mov	r0, fp
 8011e3e:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8011e42:	792b      	ldrb	r3, [r5, #4]
 8011e44:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8011e48:	796b      	ldrb	r3, [r5, #5]
 8011e4a:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8011e4e:	4b4b      	ldr	r3, [pc, #300]	; (8011f7c <dhcp_client+0x204>)
 8011e50:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 8011e54:	23ff      	movs	r3, #255	; 0xff
 8011e56:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8011e5a:	2343      	movs	r3, #67	; 0x43
 8011e5c:	f240 1205 	movw	r2, #261	; 0x105
 8011e60:	9300      	str	r3, [sp, #0]
 8011e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e66:	f7fe fcbd 	bl	80107e4 <udp_send>
 8011e6a:	4629      	mov	r1, r5
 8011e6c:	4630      	mov	r0, r6
 8011e6e:	f7ff fec5 	bl	8011bfc <_parse_response>
 8011e72:	2802      	cmp	r0, #2
 8011e74:	d1a9      	bne.n	8011dca <dhcp_client+0x52>
 8011e76:	f643 5303 	movw	r3, #15619	; 0x3d03
 8011e7a:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8011e7e:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8011e82:	782b      	ldrb	r3, [r5, #0]
 8011e84:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8011f80 <dhcp_client+0x208>
 8011e88:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8011e8c:	786b      	ldrb	r3, [r5, #1]
 8011e8e:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8011e92:	78ab      	ldrb	r3, [r5, #2]
 8011e94:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8011e98:	78eb      	ldrb	r3, [r5, #3]
 8011e9a:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8011e9e:	792b      	ldrb	r3, [r5, #4]
 8011ea0:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8011ea4:	796b      	ldrb	r3, [r5, #5]
 8011ea6:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8011eaa:	f240 4332 	movw	r3, #1074	; 0x432
 8011eae:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 8011eb2:	4b2e      	ldr	r3, [pc, #184]	; (8011f6c <dhcp_client+0x1f4>)
 8011eb4:	881a      	ldrh	r2, [r3, #0]
 8011eb6:	885b      	ldrh	r3, [r3, #2]
 8011eb8:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 8011ebc:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8011ec0:	f240 4336 	movw	r3, #1078	; 0x436
 8011ec4:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 8011ec8:	4b2e      	ldr	r3, [pc, #184]	; (8011f84 <dhcp_client+0x20c>)
 8011eca:	221e      	movs	r2, #30
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8011ed2:	230c      	movs	r3, #12
 8011ed4:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 8011ed8:	9b03      	ldr	r3, [sp, #12]
 8011eda:	1e58      	subs	r0, r3, #1
 8011edc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011ee0:	f1a2 0e1e 	sub.w	lr, r2, #30
 8011ee4:	1c51      	adds	r1, r2, #1
 8011ee6:	bb8b      	cbnz	r3, 8011f4c <dhcp_client+0x1d4>
 8011ee8:	2037      	movs	r0, #55	; 0x37
 8011eea:	18a3      	adds	r3, r4, r2
 8011eec:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 8011ef0:	2006      	movs	r0, #6
 8011ef2:	4421      	add	r1, r4
 8011ef4:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 8011ef8:	2103      	movs	r1, #3
 8011efa:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 8011efe:	210f      	movs	r1, #15
 8011f00:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 8011f04:	213a      	movs	r1, #58	; 0x3a
 8011f06:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 8011f0a:	213b      	movs	r1, #59	; 0x3b
 8011f0c:	f04f 0801 	mov.w	r8, #1
 8011f10:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8011f14:	21ff      	movs	r1, #255	; 0xff
 8011f16:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8011f1a:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 8011f1e:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 8011f22:	2343      	movs	r3, #67	; 0x43
 8011f24:	32f5      	adds	r2, #245	; 0xf5
 8011f26:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 8011f2a:	4651      	mov	r1, sl
 8011f2c:	9300      	str	r3, [sp, #0]
 8011f2e:	b292      	uxth	r2, r2
 8011f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f34:	4658      	mov	r0, fp
 8011f36:	f7fe fc55 	bl	80107e4 <udp_send>
 8011f3a:	4629      	mov	r1, r5
 8011f3c:	4630      	mov	r0, r6
 8011f3e:	f7ff fe5d 	bl	8011bfc <_parse_response>
 8011f42:	2805      	cmp	r0, #5
 8011f44:	f47f af41 	bne.w	8011dca <dhcp_client+0x52>
 8011f48:	4644      	mov	r4, r8
 8011f4a:	e742      	b.n	8011dd2 <dhcp_client+0x5a>
 8011f4c:	460a      	mov	r2, r1
 8011f4e:	f80c 3f01 	strb.w	r3, [ip, #1]!
 8011f52:	e7c3      	b.n	8011edc <dhcp_client+0x164>
 8011f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f58:	e757      	b.n	8011e0a <dhcp_client+0x92>
 8011f5a:	f06f 0001 	mvn.w	r0, #1
 8011f5e:	e754      	b.n	8011e0a <dhcp_client+0x92>
 8011f60:	2000a7b4 			; <UNDEFINED> instruction: 0x2000a7b4
 8011f64:	2000a7d0 	ldrdcs	sl, [r0], -r0
 8011f68:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 8011f6c:	2000a7ac 	andcs	sl, r0, ip, lsr #15
 8011f70:	2000a7a8 	andcs	sl, r0, r8, lsr #15
 8011f74:	2000a7b0 			; <UNDEFINED> instruction: 0x2000a7b0
 8011f78:	03010637 	movweq	r0, #5687	; 0x1637
 8011f7c:	3b3a0f06 	blcc	8e95b9c <__exidx_end+0xe7d328>
 8011f80:	2000a8bd 			; <UNDEFINED> instruction: 0x2000a8bd
 8011f84:	2000a9d8 	ldrdcs	sl, [r0], -r8

08011f88 <dhcp_client_release>:
 8011f88:	b507      	push	{r0, r1, r2, lr}
 8011f8a:	2044      	movs	r0, #68	; 0x44
 8011f8c:	f7fe fb94 	bl	80106b8 <udp_bind>
 8011f90:	f243 6307 	movw	r3, #13831	; 0x3607
 8011f94:	4911      	ldr	r1, [pc, #68]	; (8011fdc <dhcp_client_release+0x54>)
 8011f96:	b2c0      	uxtb	r0, r0
 8011f98:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 8011f9c:	2304      	movs	r3, #4
 8011f9e:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 8011fa2:	4b0f      	ldr	r3, [pc, #60]	; (8011fe0 <dhcp_client_release+0x58>)
 8011fa4:	781a      	ldrb	r2, [r3, #0]
 8011fa6:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 8011faa:	785a      	ldrb	r2, [r3, #1]
 8011fac:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 8011fb0:	789a      	ldrb	r2, [r3, #2]
 8011fb2:	78db      	ldrb	r3, [r3, #3]
 8011fb4:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 8011fb8:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 8011fbc:	23ff      	movs	r3, #255	; 0xff
 8011fbe:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 8011fc2:	2343      	movs	r3, #67	; 0x43
 8011fc4:	22fa      	movs	r2, #250	; 0xfa
 8011fc6:	9300      	str	r3, [sp, #0]
 8011fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011fcc:	f7fe fc0a 	bl	80107e4 <udp_send>
 8011fd0:	2044      	movs	r0, #68	; 0x44
 8011fd2:	b003      	add	sp, #12
 8011fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011fd8:	f7fe bb88 	b.w	80106ec <udp_unbind>
 8011fdc:	2000a7b4 			; <UNDEFINED> instruction: 0x2000a7b4
 8011fe0:	2000a9d8 	ldrdcs	sl, [r0], -r8

08011fe4 <memcpy.isra.0>:
 8011fe4:	3801      	subs	r0, #1
 8011fe6:	440a      	add	r2, r1
 8011fe8:	4291      	cmp	r1, r2
 8011fea:	d100      	bne.n	8011fee <memcpy.isra.0+0xa>
 8011fec:	4770      	bx	lr
 8011fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ff2:	f800 3f01 	strb.w	r3, [r0, #1]!
 8011ff6:	e7f7      	b.n	8011fe8 <memcpy.isra.0+0x4>

08011ff8 <_send_report>:
 8011ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ffa:	491c      	ldr	r1, [pc, #112]	; (801206c <_send_report+0x74>)
 8011ffc:	4c1c      	ldr	r4, [pc, #112]	; (8012070 <_send_report+0x78>)
 8011ffe:	f3c0 2306 	ubfx	r3, r0, #8, #7
 8012002:	9001      	str	r0, [sp, #4]
 8012004:	70cb      	strb	r3, [r1, #3]
 8012006:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801200a:	f3c0 6007 	ubfx	r0, r0, #24, #8
 801200e:	710b      	strb	r3, [r1, #4]
 8012010:	7148      	strb	r0, [r1, #5]
 8012012:	2206      	movs	r2, #6
 8012014:	4620      	mov	r0, r4
 8012016:	f7ff ffe5 	bl	8011fe4 <memcpy.isra.0>
 801201a:	2204      	movs	r2, #4
 801201c:	2700      	movs	r7, #0
 801201e:	4d15      	ldr	r5, [pc, #84]	; (8012074 <_send_report+0x7c>)
 8012020:	eb0d 0102 	add.w	r1, sp, r2
 8012024:	882b      	ldrh	r3, [r5, #0]
 8012026:	f104 001e 	add.w	r0, r4, #30
 801202a:	f104 060e 	add.w	r6, r4, #14
 801202e:	8263      	strh	r3, [r4, #18]
 8012030:	f7ff ffd8 	bl	8011fe4 <memcpy.isra.0>
 8012034:	2118      	movs	r1, #24
 8012036:	4630      	mov	r0, r6
 8012038:	8327      	strh	r7, [r4, #24]
 801203a:	f000 f8c6 	bl	80121ca <net_chksum>
 801203e:	2204      	movs	r2, #4
 8012040:	8320      	strh	r0, [r4, #24]
 8012042:	eb0d 0102 	add.w	r1, sp, r2
 8012046:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 801204a:	f7ff ffcb 	bl	8011fe4 <memcpy.isra.0>
 801204e:	2120      	movs	r1, #32
 8012050:	4630      	mov	r0, r6
 8012052:	8527      	strh	r7, [r4, #40]	; 0x28
 8012054:	f000 f8b9 	bl	80121ca <net_chksum>
 8012058:	212e      	movs	r1, #46	; 0x2e
 801205a:	8520      	strh	r0, [r4, #40]	; 0x28
 801205c:	4620      	mov	r0, r4
 801205e:	f002 ff73 	bl	8014f48 <emac_eth_send>
 8012062:	882b      	ldrh	r3, [r5, #0]
 8012064:	3301      	adds	r3, #1
 8012066:	802b      	strh	r3, [r5, #0]
 8012068:	b003      	add	sp, #12
 801206a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801206c:	2000ab34 	andcs	sl, r0, r4, lsr fp
 8012070:	2000ab3c 	andcs	sl, r0, ip, lsr fp
 8012074:	2000aafc 	strdcs	sl, [r0], -ip

08012078 <igmp_set_ip>:
 8012078:	b507      	push	{r0, r1, r2, lr}
 801207a:	2204      	movs	r2, #4
 801207c:	6803      	ldr	r3, [r0, #0]
 801207e:	eb0d 0102 	add.w	r1, sp, r2
 8012082:	4806      	ldr	r0, [pc, #24]	; (801209c <igmp_set_ip+0x24>)
 8012084:	9301      	str	r3, [sp, #4]
 8012086:	f7ff ffad 	bl	8011fe4 <memcpy.isra.0>
 801208a:	2204      	movs	r2, #4
 801208c:	4804      	ldr	r0, [pc, #16]	; (80120a0 <igmp_set_ip+0x28>)
 801208e:	eb0d 0102 	add.w	r1, sp, r2
 8012092:	f7ff ffa7 	bl	8011fe4 <memcpy.isra.0>
 8012096:	b003      	add	sp, #12
 8012098:	f85d fb04 	ldr.w	pc, [sp], #4
 801209c:	2000ab56 	andcs	sl, r0, r6, asr fp
 80120a0:	2000ab1e 	andcs	sl, r0, lr, lsl fp

080120a4 <igmp_timer>:
 80120a4:	b570      	push	{r4, r5, r6, lr}
 80120a6:	2500      	movs	r5, #0
 80120a8:	2602      	movs	r6, #2
 80120aa:	4c0a      	ldr	r4, [pc, #40]	; (80120d4 <igmp_timer+0x30>)
 80120ac:	7963      	ldrb	r3, [r4, #5]
 80120ae:	2b01      	cmp	r3, #1
 80120b0:	d109      	bne.n	80120c6 <igmp_timer+0x22>
 80120b2:	7923      	ldrb	r3, [r4, #4]
 80120b4:	b13b      	cbz	r3, 80120c6 <igmp_timer+0x22>
 80120b6:	3b01      	subs	r3, #1
 80120b8:	b2db      	uxtb	r3, r3
 80120ba:	7123      	strb	r3, [r4, #4]
 80120bc:	b91b      	cbnz	r3, 80120c6 <igmp_timer+0x22>
 80120be:	6820      	ldr	r0, [r4, #0]
 80120c0:	f7ff ff9a 	bl	8011ff8 <_send_report>
 80120c4:	7166      	strb	r6, [r4, #5]
 80120c6:	3501      	adds	r5, #1
 80120c8:	2d24      	cmp	r5, #36	; 0x24
 80120ca:	f104 0408 	add.w	r4, r4, #8
 80120ce:	d1ed      	bne.n	80120ac <igmp_timer+0x8>
 80120d0:	bd70      	pop	{r4, r5, r6, pc}
 80120d2:	bf00      	nop
 80120d4:	2000a9dc 	ldrdcs	sl, [r0], -ip

080120d8 <igmp_join>:
 80120d8:	b538      	push	{r3, r4, r5, lr}
 80120da:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 80120de:	2be0      	cmp	r3, #224	; 0xe0
 80120e0:	d11b      	bne.n	801211a <igmp_join+0x42>
 80120e2:	4911      	ldr	r1, [pc, #68]	; (8012128 <igmp_join+0x50>)
 80120e4:	680c      	ldr	r4, [r1, #0]
 80120e6:	2c24      	cmp	r4, #36	; 0x24
 80120e8:	d01a      	beq.n	8012120 <igmp_join+0x48>
 80120ea:	2300      	movs	r3, #0
 80120ec:	4a0f      	ldr	r2, [pc, #60]	; (801212c <igmp_join+0x54>)
 80120ee:	429c      	cmp	r4, r3
 80120f0:	dc0d      	bgt.n	801210e <igmp_join+0x36>
 80120f2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80120f6:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
 80120fa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80120fe:	8093      	strh	r3, [r2, #4]
 8012100:	1c63      	adds	r3, r4, #1
 8012102:	600b      	str	r3, [r1, #0]
 8012104:	f7ff ff78 	bl	8011ff8 <_send_report>
 8012108:	4623      	mov	r3, r4
 801210a:	4618      	mov	r0, r3
 801210c:	bd38      	pop	{r3, r4, r5, pc}
 801210e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8012112:	4285      	cmp	r5, r0
 8012114:	d0f9      	beq.n	801210a <igmp_join+0x32>
 8012116:	3301      	adds	r3, #1
 8012118:	e7e9      	b.n	80120ee <igmp_join+0x16>
 801211a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801211e:	e7f4      	b.n	801210a <igmp_join+0x32>
 8012120:	f06f 0301 	mvn.w	r3, #1
 8012124:	e7f1      	b.n	801210a <igmp_join+0x32>
 8012126:	bf00      	nop
 8012128:	2000ab00 	andcs	sl, r0, r0, lsl #22
 801212c:	2000a9dc 	ldrdcs	sl, [r0], -ip

08012130 <igmp_leave>:
 8012130:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012134:	2600      	movs	r6, #0
 8012136:	4f1c      	ldr	r7, [pc, #112]	; (80121a8 <igmp_leave+0x78>)
 8012138:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 801213c:	4283      	cmp	r3, r0
 801213e:	d007      	beq.n	8012150 <igmp_leave+0x20>
 8012140:	3601      	adds	r6, #1
 8012142:	2e24      	cmp	r6, #36	; 0x24
 8012144:	d1f8      	bne.n	8012138 <igmp_leave+0x8>
 8012146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801214a:	b002      	add	sp, #8
 801214c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012150:	2400      	movs	r4, #0
 8012152:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80121ac <igmp_leave+0x7c>
 8012156:	4d16      	ldr	r5, [pc, #88]	; (80121b0 <igmp_leave+0x80>)
 8012158:	f8b8 3000 	ldrh.w	r3, [r8]
 801215c:	2118      	movs	r1, #24
 801215e:	9001      	str	r0, [sp, #4]
 8012160:	4814      	ldr	r0, [pc, #80]	; (80121b4 <igmp_leave+0x84>)
 8012162:	826b      	strh	r3, [r5, #18]
 8012164:	832c      	strh	r4, [r5, #24]
 8012166:	f000 f830 	bl	80121ca <net_chksum>
 801216a:	2204      	movs	r2, #4
 801216c:	8328      	strh	r0, [r5, #24]
 801216e:	eb0d 0102 	add.w	r1, sp, r2
 8012172:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8012176:	f7ff ff35 	bl	8011fe4 <memcpy.isra.0>
 801217a:	2120      	movs	r1, #32
 801217c:	f105 000e 	add.w	r0, r5, #14
 8012180:	852c      	strh	r4, [r5, #40]	; 0x28
 8012182:	f000 f822 	bl	80121ca <net_chksum>
 8012186:	212e      	movs	r1, #46	; 0x2e
 8012188:	8528      	strh	r0, [r5, #40]	; 0x28
 801218a:	4628      	mov	r0, r5
 801218c:	f002 fedc 	bl	8014f48 <emac_eth_send>
 8012190:	f8b8 3000 	ldrh.w	r3, [r8]
 8012194:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
 8012198:	3301      	adds	r3, #1
 801219a:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 801219e:	4620      	mov	r0, r4
 80121a0:	f8a8 3000 	strh.w	r3, [r8]
 80121a4:	80bc      	strh	r4, [r7, #4]
 80121a6:	e7d0      	b.n	801214a <igmp_leave+0x1a>
 80121a8:	2000a9dc 	ldrdcs	sl, [r0], -ip
 80121ac:	2000aafc 	strdcs	sl, [r0], -ip
 80121b0:	2000ab04 	andcs	sl, r0, r4, lsl #22
 80121b4:	2000ab4a 	andcs	sl, r0, sl, asr #22

080121b8 <ip_set_ip>:
 80121b8:	b510      	push	{r4, lr}
 80121ba:	4604      	mov	r4, r0
 80121bc:	f7fe fa5c 	bl	8010678 <udp_set_ip>
 80121c0:	4620      	mov	r0, r4
 80121c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121c6:	f7ff bf57 	b.w	8012078 <igmp_set_ip>

080121ca <net_chksum>:
 80121ca:	2300      	movs	r3, #0
 80121cc:	f021 0201 	bic.w	r2, r1, #1
 80121d0:	b530      	push	{r4, r5, lr}
 80121d2:	1884      	adds	r4, r0, r2
 80121d4:	42a0      	cmp	r0, r4
 80121d6:	d10b      	bne.n	80121f0 <net_chksum+0x26>
 80121d8:	4291      	cmp	r1, r2
 80121da:	d004      	beq.n	80121e6 <net_chksum+0x1c>
 80121dc:	7802      	ldrb	r2, [r0, #0]
 80121de:	0212      	lsls	r2, r2, #8
 80121e0:	ba52      	rev16	r2, r2
 80121e2:	b292      	uxth	r2, r2
 80121e4:	4413      	add	r3, r2
 80121e6:	0c1a      	lsrs	r2, r3, #16
 80121e8:	d106      	bne.n	80121f8 <net_chksum+0x2e>
 80121ea:	43d8      	mvns	r0, r3
 80121ec:	b280      	uxth	r0, r0
 80121ee:	bd30      	pop	{r4, r5, pc}
 80121f0:	f830 5b02 	ldrh.w	r5, [r0], #2
 80121f4:	442b      	add	r3, r5
 80121f6:	e7ed      	b.n	80121d4 <net_chksum+0xa>
 80121f8:	b29b      	uxth	r3, r3
 80121fa:	e7f3      	b.n	80121e4 <net_chksum+0x1a>

080121fc <memcpy.isra.0>:
 80121fc:	3801      	subs	r0, #1
 80121fe:	440a      	add	r2, r1
 8012200:	4291      	cmp	r1, r2
 8012202:	d100      	bne.n	8012206 <memcpy.isra.0+0xa>
 8012204:	4770      	bx	lr
 8012206:	f811 3b01 	ldrb.w	r3, [r1], #1
 801220a:	f800 3f01 	strb.w	r3, [r0, #1]!
 801220e:	e7f7      	b.n	8012200 <memcpy.isra.0+0x4>

08012210 <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 8012210:	b430      	push	{r4, r5}
 8012212:	b168      	cbz	r0, 8012230 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8012214:	2300      	movs	r3, #0
 8012216:	7905      	ldrb	r5, [r0, #4]
 8012218:	5cd4      	ldrb	r4, [r2, r3]
 801221a:	b11c      	cbz	r4, 8012224 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 801221c:	1c5c      	adds	r4, r3, #1
 801221e:	429d      	cmp	r5, r3
 8012220:	4623      	mov	r3, r4
 8012222:	dcf9      	bgt.n	8012218 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 8012224:	6804      	ldr	r4, [r0, #0]
 8012226:	b2db      	uxtb	r3, r3
 8012228:	69e4      	ldr	r4, [r4, #28]
 801222a:	46a4      	mov	ip, r4
 801222c:	bc30      	pop	{r4, r5}
 801222e:	4760      	bx	ip
 8012230:	bc30      	pop	{r4, r5}
 8012232:	4770      	bx	lr

08012234 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8012234:	b110      	cbz	r0, 801223c <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8012236:	6803      	ldr	r3, [r0, #0]
 8012238:	691b      	ldr	r3, [r3, #16]
 801223a:	4718      	bx	r3
 801223c:	4770      	bx	lr

0801223e <Display::Printf(unsigned char, char const*, ...)>:
 801223e:	b40c      	push	{r2, r3}
 8012240:	b570      	push	{r4, r5, r6, lr}
 8012242:	6984      	ldr	r4, [r0, #24]
 8012244:	4605      	mov	r5, r0
 8012246:	460e      	mov	r6, r1
 8012248:	b08a      	sub	sp, #40	; 0x28
 801224a:	b174      	cbz	r4, 801226a <Display::Printf(unsigned char, char const*, ...)+0x2c>
 801224c:	ab0f      	add	r3, sp, #60	; 0x3c
 801224e:	2120      	movs	r1, #32
 8012250:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012252:	a802      	add	r0, sp, #8
 8012254:	9301      	str	r3, [sp, #4]
 8012256:	f001 ff05 	bl	8014064 <vsnprintf>
 801225a:	4604      	mov	r4, r0
 801225c:	69a8      	ldr	r0, [r5, #24]
 801225e:	4631      	mov	r1, r6
 8012260:	6803      	ldr	r3, [r0, #0]
 8012262:	aa02      	add	r2, sp, #8
 8012264:	69dd      	ldr	r5, [r3, #28]
 8012266:	b2a3      	uxth	r3, r4
 8012268:	47a8      	blx	r5
 801226a:	4620      	mov	r0, r4
 801226c:	b00a      	add	sp, #40	; 0x28
 801226e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012272:	b002      	add	sp, #8
 8012274:	4770      	bx	lr
	...

08012278 <DisplayUdf::DisplayUdf()>:
 8012278:	b510      	push	{r4, lr}
 801227a:	4604      	mov	r4, r0
 801227c:	f000 ff02 	bl	8013084 <Display::Display()>
 8012280:	2202      	movs	r2, #2
 8012282:	2300      	movs	r3, #0
 8012284:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8012288:	4b05      	ldr	r3, [pc, #20]	; (80122a0 <DisplayUdf::DisplayUdf()+0x28>)
 801228a:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 801228e:	601c      	str	r4, [r3, #0]
 8012290:	2301      	movs	r3, #1
 8012292:	f802 3f01 	strb.w	r3, [r2, #1]!
 8012296:	3301      	adds	r3, #1
 8012298:	2b15      	cmp	r3, #21
 801229a:	d1fa      	bne.n	8012292 <DisplayUdf::DisplayUdf()+0x1a>
 801229c:	4620      	mov	r0, r4
 801229e:	bd10      	pop	{r4, pc}
 80122a0:	2000ab6c 	andcs	sl, r0, ip, ror #22

080122a4 <DisplayUdf::SetTitle(char const*, ...)>:
 80122a4:	b40e      	push	{r1, r2, r3}
 80122a6:	b517      	push	{r0, r1, r2, r4, lr}
 80122a8:	ab05      	add	r3, sp, #20
 80122aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80122ae:	4604      	mov	r4, r0
 80122b0:	211f      	movs	r1, #31
 80122b2:	301c      	adds	r0, #28
 80122b4:	9301      	str	r3, [sp, #4]
 80122b6:	f001 fed5 	bl	8014064 <vsnprintf>
 80122ba:	2300      	movs	r3, #0
 80122bc:	4404      	add	r4, r0
 80122be:	7723      	strb	r3, [r4, #28]
 80122c0:	b003      	add	sp, #12
 80122c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122c6:	b003      	add	sp, #12
 80122c8:	4770      	bx	lr

080122ca <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 80122ca:	1e4b      	subs	r3, r1, #1
 80122cc:	2b05      	cmp	r3, #5
 80122ce:	b530      	push	{r4, r5, lr}
 80122d0:	d80f      	bhi.n	80122f2 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 80122d2:	2300      	movs	r3, #0
 80122d4:	f100 043b 	add.w	r4, r0, #59	; 0x3b
 80122d8:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80122dc:	428d      	cmp	r5, r1
 80122de:	d109      	bne.n	80122f4 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 80122e0:	1884      	adds	r4, r0, r2
 80122e2:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 80122e6:	4403      	add	r3, r0
 80122e8:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 80122ec:	4410      	add	r0, r2
 80122ee:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 80122f2:	bd30      	pop	{r4, r5, pc}
 80122f4:	3301      	adds	r3, #1
 80122f6:	2b14      	cmp	r3, #20
 80122f8:	d1ee      	bne.n	80122d8 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 80122fa:	e7f7      	b.n	80122ec <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>

080122fc <DisplayUdf::ShowEmacStart()>:
 80122fc:	b510      	push	{r4, lr}
 80122fe:	4604      	mov	r4, r0
 8012300:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8012304:	6980      	ldr	r0, [r0, #24]
 8012306:	f7ff ff95 	bl	8012234 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801230a:	4620      	mov	r0, r4
 801230c:	4a02      	ldr	r2, [pc, #8]	; (8012318 <DisplayUdf::ShowEmacStart()+0x1c>)
 801230e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8012312:	f7ff ff94 	bl	801223e <Display::Printf(unsigned char, char const*, ...)>
 8012316:	bd10      	pop	{r4, pc}
 8012318:	08018175 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, pc}

0801231c <DisplayUdf::ShowIpAddress()>:
 801231c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012320:	4604      	mov	r4, r0
 8012322:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8012326:	b086      	sub	sp, #24
 8012328:	6980      	ldr	r0, [r0, #24]
 801232a:	f7ff ff83 	bl	8012234 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801232e:	4b13      	ldr	r3, [pc, #76]	; (801237c <DisplayUdf::ShowIpAddress()+0x60>)
 8012330:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
 8012334:	681d      	ldr	r5, [r3, #0]
 8012336:	69e8      	ldr	r0, [r5, #28]
 8012338:	696e      	ldr	r6, [r5, #20]
 801233a:	f003 ff5f 	bl	80161fc <__popcountsi2>
 801233e:	79eb      	ldrb	r3, [r5, #7]
 8012340:	fa5f f886 	uxtb.w	r8, r6
 8012344:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8012348:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 801234c:	0e36      	lsrs	r6, r6, #24
 801234e:	b99b      	cbnz	r3, 8012378 <DisplayUdf::ShowIpAddress()+0x5c>
 8012350:	796b      	ldrb	r3, [r5, #5]
 8012352:	2b00      	cmp	r3, #0
 8012354:	bf14      	ite	ne
 8012356:	2244      	movne	r2, #68	; 0x44
 8012358:	2253      	moveq	r2, #83	; 0x53
 801235a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801235e:	4643      	mov	r3, r8
 8012360:	4639      	mov	r1, r7
 8012362:	4620      	mov	r0, r4
 8012364:	e9cd a601 	strd	sl, r6, [sp, #4]
 8012368:	4a05      	ldr	r2, [pc, #20]	; (8012380 <DisplayUdf::ShowIpAddress()+0x64>)
 801236a:	f8cd 9000 	str.w	r9, [sp]
 801236e:	f7ff ff66 	bl	801223e <Display::Printf(unsigned char, char const*, ...)>
 8012372:	b006      	add	sp, #24
 8012374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012378:	225a      	movs	r2, #90	; 0x5a
 801237a:	e7ee      	b.n	801235a <DisplayUdf::ShowIpAddress()+0x3e>
 801237c:	2000a59c 	mulcs	r0, ip, r5
 8012380:	08018184 	stmdaeq	r1, {r2, r7, r8, pc}

08012384 <DisplayUdf::ShowNetmask()>:
 8012384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012386:	4604      	mov	r4, r0
 8012388:	4b0b      	ldr	r3, [pc, #44]	; (80123b8 <DisplayUdf::ShowNetmask()+0x34>)
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	69db      	ldr	r3, [r3, #28]
 801238e:	0e1a      	lsrs	r2, r3, #24
 8012390:	9202      	str	r2, [sp, #8]
 8012392:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012396:	9201      	str	r2, [sp, #4]
 8012398:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801239c:	9200      	str	r2, [sp, #0]
 801239e:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 80123a2:	4a06      	ldr	r2, [pc, #24]	; (80123bc <DisplayUdf::ShowNetmask()+0x38>)
 80123a4:	b2db      	uxtb	r3, r3
 80123a6:	f7ff ff4a 	bl	801223e <Display::Printf(unsigned char, char const*, ...)>
 80123aa:	4620      	mov	r0, r4
 80123ac:	b004      	add	sp, #16
 80123ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123b2:	f7ff bfb3 	b.w	801231c <DisplayUdf::ShowIpAddress()>
 80123b6:	bf00      	nop
 80123b8:	2000a59c 	mulcs	r0, ip, r5
 80123bc:	08018196 	stmdaeq	r1, {r1, r2, r4, r7, r8, pc}

080123c0 <DisplayUdf::ShowGatewayIp()>:
 80123c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123c2:	4604      	mov	r4, r0
 80123c4:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 80123c8:	6980      	ldr	r0, [r0, #24]
 80123ca:	f7ff ff33 	bl	8012234 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80123ce:	4b0a      	ldr	r3, [pc, #40]	; (80123f8 <DisplayUdf::ShowGatewayIp()+0x38>)
 80123d0:	4620      	mov	r0, r4
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 80123d8:	699b      	ldr	r3, [r3, #24]
 80123da:	0e1a      	lsrs	r2, r3, #24
 80123dc:	9202      	str	r2, [sp, #8]
 80123de:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80123e2:	9201      	str	r2, [sp, #4]
 80123e4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80123e8:	9200      	str	r2, [sp, #0]
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	4a03      	ldr	r2, [pc, #12]	; (80123fc <DisplayUdf::ShowGatewayIp()+0x3c>)
 80123ee:	f7ff ff26 	bl	801223e <Display::Printf(unsigned char, char const*, ...)>
 80123f2:	b004      	add	sp, #16
 80123f4:	bd10      	pop	{r4, pc}
 80123f6:	bf00      	nop
 80123f8:	2000a59c 	mulcs	r0, ip, r5
 80123fc:	080181a5 	stmdaeq	r1, {r0, r2, r5, r7, r8, pc}

08012400 <DisplayUdf::ShowHostName()>:
 8012400:	b510      	push	{r4, lr}
 8012402:	4604      	mov	r4, r0
 8012404:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 8012408:	6980      	ldr	r0, [r0, #24]
 801240a:	f7ff ff13 	bl	8012234 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801240e:	4b05      	ldr	r3, [pc, #20]	; (8012424 <DisplayUdf::ShowHostName()+0x24>)
 8012410:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8012414:	681a      	ldr	r2, [r3, #0]
 8012416:	69a0      	ldr	r0, [r4, #24]
 8012418:	3220      	adds	r2, #32
 801241a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801241e:	f7ff bef7 	b.w	8012210 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8012422:	bf00      	nop
 8012424:	2000a59c 	mulcs	r0, ip, r5

08012428 <DisplayUdf::Show()>:
 8012428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801242a:	4604      	mov	r4, r0
 801242c:	21ff      	movs	r1, #255	; 0xff
 801242e:	f100 033b 	add.w	r3, r0, #59	; 0x3b
 8012432:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 8012436:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 801243a:	2806      	cmp	r0, #6
 801243c:	bf88      	it	hi
 801243e:	7019      	strbhi	r1, [r3, #0]
 8012440:	429a      	cmp	r2, r3
 8012442:	d1f8      	bne.n	8012436 <DisplayUdf::Show()+0xe>
 8012444:	2501      	movs	r5, #1
 8012446:	4629      	mov	r1, r5
 8012448:	3501      	adds	r5, #1
 801244a:	69a0      	ldr	r0, [r4, #24]
 801244c:	b2ed      	uxtb	r5, r5
 801244e:	f7ff fef1 	bl	8012234 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8012452:	2d06      	cmp	r5, #6
 8012454:	d1f7      	bne.n	8012446 <DisplayUdf::Show()+0x1e>
 8012456:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 801245a:	69a0      	ldr	r0, [r4, #24]
 801245c:	f104 021c 	add.w	r2, r4, #28
 8012460:	f7ff fed6 	bl	8012210 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8012464:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8012468:	69a0      	ldr	r0, [r4, #24]
 801246a:	4a0d      	ldr	r2, [pc, #52]	; (80124a0 <DisplayUdf::Show()+0x78>)
 801246c:	f7ff fed0 	bl	8012210 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8012470:	4b0c      	ldr	r3, [pc, #48]	; (80124a4 <DisplayUdf::Show()+0x7c>)
 8012472:	4a0d      	ldr	r2, [pc, #52]	; (80124a8 <DisplayUdf::Show()+0x80>)
 8012474:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8012478:	9300      	str	r3, [sp, #0]
 801247a:	4620      	mov	r0, r4
 801247c:	2303      	movs	r3, #3
 801247e:	f7ff fede 	bl	801223e <Display::Printf(unsigned char, char const*, ...)>
 8012482:	4620      	mov	r0, r4
 8012484:	f7ff ff4a 	bl	801231c <DisplayUdf::ShowIpAddress()>
 8012488:	4620      	mov	r0, r4
 801248a:	f7ff ff99 	bl	80123c0 <DisplayUdf::ShowGatewayIp()>
 801248e:	4620      	mov	r0, r4
 8012490:	f7ff ff78 	bl	8012384 <DisplayUdf::ShowNetmask()>
 8012494:	4620      	mov	r0, r4
 8012496:	b003      	add	sp, #12
 8012498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801249c:	f7ff bfb0 	b.w	8012400 <DisplayUdf::ShowHostName()>
 80124a0:	08016c9a 	stmdaeq	r1, {r1, r3, r4, r7, sl, fp, sp, lr}
 80124a4:	2000ac04 	andcs	sl, r0, r4, lsl #24
 80124a8:	080181b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, pc}

080124ac <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 80124ac:	3901      	subs	r1, #1
 80124ae:	b510      	push	{r4, lr}
 80124b0:	4604      	mov	r4, r0
 80124b2:	2903      	cmp	r1, #3
 80124b4:	d814      	bhi.n	80124e0 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 80124b6:	e8df f001 	tbb	[pc, r1]
 80124ba:	281b1402 	ldmdacs	fp, {r1, sl, ip}
 80124be:	4b14      	ldr	r3, [pc, #80]	; (8012510 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 80124c0:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 80124c4:	6818      	ldr	r0, [r3, #0]
 80124c6:	f7f6 fbb3 	bl	8008c30 <Display::Status(Display7SegmentMessage)>
 80124ca:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80124ce:	69a0      	ldr	r0, [r4, #24]
 80124d0:	f7ff feb0 	bl	8012234 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80124d4:	4a0f      	ldr	r2, [pc, #60]	; (8012514 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 80124d6:	4620      	mov	r0, r4
 80124d8:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80124dc:	f7ff feaf 	bl	801223e <Display::Printf(unsigned char, char const*, ...)>
 80124e0:	bd10      	pop	{r4, pc}
 80124e2:	f248 0180 	movw	r1, #32896	; 0x8080
 80124e6:	4b0a      	ldr	r3, [pc, #40]	; (8012510 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 80124e8:	6818      	ldr	r0, [r3, #0]
 80124ea:	f7f6 fba1 	bl	8008c30 <Display::Status(Display7SegmentMessage)>
 80124ee:	e7f7      	b.n	80124e0 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 80124f0:	4b07      	ldr	r3, [pc, #28]	; (8012510 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 80124f2:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 80124f6:	6818      	ldr	r0, [r3, #0]
 80124f8:	f7f6 fb9a 	bl	8008c30 <Display::Status(Display7SegmentMessage)>
 80124fc:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8012500:	69a0      	ldr	r0, [r4, #24]
 8012502:	f7ff fe97 	bl	8012234 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8012506:	4a04      	ldr	r2, [pc, #16]	; (8012518 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 8012508:	e7e5      	b.n	80124d6 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 801250a:	f645 3179 	movw	r1, #23417	; 0x5b79
 801250e:	e7ea      	b.n	80124e6 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3a>
 8012510:	2000ab74 	andcs	sl, r0, r4, ror fp
 8012514:	080181c3 	stmdaeq	r1, {r0, r1, r6, r7, r8, pc}
 8012518:	080181d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, pc}

0801251c <DisplayUdf::ShowShutdown()>:
 801251c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012520:	4604      	mov	r4, r0
 8012522:	6980      	ldr	r0, [r0, #24]
 8012524:	b1d0      	cbz	r0, 801255c <DisplayUdf::ShowShutdown()+0x40>
 8012526:	f890 8005 	ldrb.w	r8, [r0, #5]
 801252a:	6803      	ldr	r3, [r0, #0]
 801252c:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 8012530:	b2ed      	uxtb	r5, r5
 8012532:	462a      	mov	r2, r5
 8012534:	2100      	movs	r1, #0
 8012536:	6a1b      	ldr	r3, [r3, #32]
 8012538:	7906      	ldrb	r6, [r0, #4]
 801253a:	2700      	movs	r7, #0
 801253c:	4798      	blx	r3
 801253e:	3e01      	subs	r6, #1
 8012540:	42b7      	cmp	r7, r6
 8012542:	69a0      	ldr	r0, [r4, #24]
 8012544:	d311      	bcc.n	801256a <DisplayUdf::ShowShutdown()+0x4e>
 8012546:	b120      	cbz	r0, 8012552 <DisplayUdf::ShowShutdown()+0x36>
 8012548:	6803      	ldr	r3, [r0, #0]
 801254a:	462a      	mov	r2, r5
 801254c:	2100      	movs	r1, #0
 801254e:	6a1b      	ldr	r3, [r3, #32]
 8012550:	4798      	blx	r3
 8012552:	4641      	mov	r1, r8
 8012554:	4a08      	ldr	r2, [pc, #32]	; (8012578 <DisplayUdf::ShowShutdown()+0x5c>)
 8012556:	69a0      	ldr	r0, [r4, #24]
 8012558:	f7ff fe5a 	bl	8012210 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 801255c:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 8012560:	4620      	mov	r0, r4
 8012562:	f7f6 fb65 	bl	8008c30 <Display::Status(Display7SegmentMessage)>
 8012566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801256a:	b118      	cbz	r0, 8012574 <DisplayUdf::ShowShutdown()+0x58>
 801256c:	6803      	ldr	r3, [r0, #0]
 801256e:	2120      	movs	r1, #32
 8012570:	695b      	ldr	r3, [r3, #20]
 8012572:	4798      	blx	r3
 8012574:	3701      	adds	r7, #1
 8012576:	e7e3      	b.n	8012540 <DisplayUdf::ShowShutdown()+0x24>
 8012578:	080181df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r8, pc}

0801257c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 801257c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801257e:	88c6      	ldrh	r6, [r0, #6]
 8012580:	8885      	ldrh	r5, [r0, #4]
 8012582:	42ae      	cmp	r6, r5
 8012584:	d216      	bcs.n	80125b4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 8012586:	4604      	mov	r4, r0
 8012588:	6800      	ldr	r0, [r0, #0]
 801258a:	1bad      	subs	r5, r5, r6
 801258c:	4430      	add	r0, r6
 801258e:	7a26      	ldrb	r6, [r4, #8]
 8012590:	b923      	cbnz	r3, 801259c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 8012592:	b926      	cbnz	r6, 801259e <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 8012594:	9200      	str	r2, [sp, #0]
 8012596:	460b      	mov	r3, r1
 8012598:	4a09      	ldr	r2, [pc, #36]	; (80125c0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 801259a:	e003      	b.n	80125a4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 801259c:	b166      	cbz	r6, 80125b8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 801259e:	460b      	mov	r3, r1
 80125a0:	9200      	str	r2, [sp, #0]
 80125a2:	4a08      	ldr	r2, [pc, #32]	; (80125c4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 80125a4:	4629      	mov	r1, r5
 80125a6:	f001 fd45 	bl	8014034 <snprintf>
 80125aa:	4285      	cmp	r5, r0
 80125ac:	bfa2      	ittt	ge
 80125ae:	88e3      	ldrhge	r3, [r4, #6]
 80125b0:	181b      	addge	r3, r3, r0
 80125b2:	80e3      	strhge	r3, [r4, #6]
 80125b4:	b002      	add	sp, #8
 80125b6:	bd70      	pop	{r4, r5, r6, pc}
 80125b8:	9200      	str	r2, [sp, #0]
 80125ba:	460b      	mov	r3, r1
 80125bc:	4a02      	ldr	r2, [pc, #8]	; (80125c8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 80125be:	e7f1      	b.n	80125a4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 80125c0:	0801691d 	stmdaeq	r1, {r0, r2, r3, r4, r8, fp, sp, lr}
 80125c4:	08016914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr}
 80125c8:	0801691e 	stmdaeq	r1, {r1, r2, r3, r4, r8, fp, sp, lr}

080125cc <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 80125cc:	b510      	push	{r4, lr}
 80125ce:	2220      	movs	r2, #32
 80125d0:	4604      	mov	r4, r0
 80125d2:	f840 1b04 	str.w	r1, [r0], #4
 80125d6:	2100      	movs	r1, #0
 80125d8:	f001 f9e6 	bl	80139a8 <memset>
 80125dc:	f647 7305 	movw	r3, #32517	; 0x7f05
 80125e0:	4620      	mov	r0, r4
 80125e2:	84a3      	strh	r3, [r4, #36]	; 0x24
 80125e4:	bd10      	pop	{r4, pc}

080125e6 <DisplayUdfParams::Load()>:
 80125e6:	b508      	push	{r3, lr}
 80125e8:	2300      	movs	r3, #0
 80125ea:	4601      	mov	r1, r0
 80125ec:	6043      	str	r3, [r0, #4]
 80125ee:	6800      	ldr	r0, [r0, #0]
 80125f0:	b120      	cbz	r0, 80125fc <DisplayUdfParams::Load()+0x16>
 80125f2:	6803      	ldr	r3, [r0, #0]
 80125f4:	3104      	adds	r1, #4
 80125f6:	68db      	ldr	r3, [r3, #12]
 80125f8:	4798      	blx	r3
 80125fa:	2001      	movs	r0, #1
 80125fc:	bd08      	pop	{r3, pc}
	...

08012600 <DisplayUdfParams::Load(char const*, unsigned int)>:
 8012600:	6803      	ldr	r3, [r0, #0]
 8012602:	b1d3      	cbz	r3, 801263a <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 8012604:	2300      	movs	r3, #0
 8012606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012608:	460d      	mov	r5, r1
 801260a:	4616      	mov	r6, r2
 801260c:	4604      	mov	r4, r0
 801260e:	6043      	str	r3, [r0, #4]
 8012610:	4602      	mov	r2, r0
 8012612:	490a      	ldr	r1, [pc, #40]	; (801263c <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 8012614:	4668      	mov	r0, sp
 8012616:	f000 fbc5 	bl	8012da4 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 801261a:	4632      	mov	r2, r6
 801261c:	4629      	mov	r1, r5
 801261e:	4668      	mov	r0, sp
 8012620:	f000 fbc4 	bl	8012dac <ReadConfigFile::Read(char const*, unsigned int)>
 8012624:	4621      	mov	r1, r4
 8012626:	f851 0b04 	ldr.w	r0, [r1], #4
 801262a:	6803      	ldr	r3, [r0, #0]
 801262c:	689b      	ldr	r3, [r3, #8]
 801262e:	4798      	blx	r3
 8012630:	4668      	mov	r0, sp
 8012632:	f000 fbba 	bl	8012daa <ReadConfigFile::~ReadConfigFile()>
 8012636:	b002      	add	sp, #8
 8012638:	bd70      	pop	{r4, r5, r6, pc}
 801263a:	4770      	bx	lr
 801263c:	08012709 	stmdaeq	r1, {r0, r3, r8, r9, sl, sp}

08012640 <DisplayUdfParams::callbackFunction(char const*)>:
 8012640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012642:	460e      	mov	r6, r1
 8012644:	4604      	mov	r4, r0
 8012646:	492c      	ldr	r1, [pc, #176]	; (80126f8 <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 8012648:	4630      	mov	r0, r6
 801264a:	f10d 0207 	add.w	r2, sp, #7
 801264e:	f000 fc59 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8012652:	b968      	cbnz	r0, 8012670 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 8012654:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012658:	6863      	ldr	r3, [r4, #4]
 801265a:	2a7f      	cmp	r2, #127	; 0x7f
 801265c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8012660:	bf14      	ite	ne
 8012662:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 8012666:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 801266a:	6063      	str	r3, [r4, #4]
 801266c:	b003      	add	sp, #12
 801266e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012670:	4630      	mov	r0, r6
 8012672:	4922      	ldr	r1, [pc, #136]	; (80126fc <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 8012674:	f10d 0207 	add.w	r2, sp, #7
 8012678:	f000 fc44 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801267c:	b958      	cbnz	r0, 8012696 <DisplayUdfParams::callbackFunction(char const*)+0x56>
 801267e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012682:	6863      	ldr	r3, [r4, #4]
 8012684:	2a05      	cmp	r2, #5
 8012686:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 801268a:	bf14      	ite	ne
 801268c:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8012690:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 8012694:	e7e9      	b.n	801266a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8012696:	4630      	mov	r0, r6
 8012698:	4919      	ldr	r1, [pc, #100]	; (8012700 <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 801269a:	f10d 0207 	add.w	r2, sp, #7
 801269e:	f000 fc31 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80126a2:	b948      	cbnz	r0, 80126b8 <DisplayUdfParams::callbackFunction(char const*)+0x78>
 80126a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80126a8:	6863      	ldr	r3, [r4, #4]
 80126aa:	b112      	cbz	r2, 80126b2 <DisplayUdfParams::callbackFunction(char const*)+0x72>
 80126ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80126b0:	e7db      	b.n	801266a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80126b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80126b6:	e7d8      	b.n	801266a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80126b8:	2500      	movs	r5, #0
 80126ba:	4f12      	ldr	r7, [pc, #72]	; (8012704 <DisplayUdfParams::callbackFunction(char const*)+0xc4>)
 80126bc:	4630      	mov	r0, r6
 80126be:	f857 1b04 	ldr.w	r1, [r7], #4
 80126c2:	f10d 0207 	add.w	r2, sp, #7
 80126c6:	f000 fc1d 	bl	8012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80126ca:	b980      	cbnz	r0, 80126ee <DisplayUdfParams::callbackFunction(char const*)+0xae>
 80126cc:	2301      	movs	r3, #1
 80126ce:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80126d2:	40ab      	lsls	r3, r5
 80126d4:	1e4e      	subs	r6, r1, #1
 80126d6:	2e05      	cmp	r6, #5
 80126d8:	6862      	ldr	r2, [r4, #4]
 80126da:	4425      	add	r5, r4
 80126dc:	d802      	bhi.n	80126e4 <DisplayUdfParams::callbackFunction(char const*)+0xa4>
 80126de:	7229      	strb	r1, [r5, #8]
 80126e0:	4313      	orrs	r3, r2
 80126e2:	e7c2      	b.n	801266a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80126e4:	ea22 0203 	bic.w	r2, r2, r3
 80126e8:	7228      	strb	r0, [r5, #8]
 80126ea:	6062      	str	r2, [r4, #4]
 80126ec:	e7be      	b.n	801266c <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 80126ee:	3501      	adds	r5, #1
 80126f0:	2d14      	cmp	r5, #20
 80126f2:	d1e3      	bne.n	80126bc <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 80126f4:	e7ba      	b.n	801266c <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 80126f6:	bf00      	nop
 80126f8:	0801829e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r9, pc}
 80126fc:	08018266 	stmdaeq	r1, {r1, r2, r5, r6, r9, pc}
 8012700:	08018274 	stmdaeq	r1, {r2, r4, r5, r6, r9, pc}
 8012704:	080181f0 	stmdaeq	r1, {r4, r5, r6, r7, r8, pc}

08012708 <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 8012708:	f7ff bf9a 	b.w	8012640 <DisplayUdfParams::callbackFunction(char const*)>

0801270c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 801270c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012710:	4604      	mov	r4, r0
 8012712:	4615      	mov	r5, r2
 8012714:	461e      	mov	r6, r3
 8012716:	b086      	sub	sp, #24
 8012718:	3004      	adds	r0, #4
 801271a:	b379      	cbz	r1, 801277c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 801271c:	2222      	movs	r2, #34	; 0x22
 801271e:	f001 f92c 	bl	801397a <memmove>
 8012722:	462a      	mov	r2, r5
 8012724:	4633      	mov	r3, r6
 8012726:	493d      	ldr	r1, [pc, #244]	; (801281c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x110>)
 8012728:	a803      	add	r0, sp, #12
 801272a:	f000 fa9b 	bl	8012c64 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 801272e:	6863      	ldr	r3, [r4, #4]
 8012730:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8012734:	493a      	ldr	r1, [pc, #232]	; (8012820 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 8012736:	f3c3 7340 	ubfx	r3, r3, #29, #1
 801273a:	a803      	add	r0, sp, #12
 801273c:	f7ff ff1e 	bl	801257c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8012740:	6863      	ldr	r3, [r4, #4]
 8012742:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8012746:	f3c3 7300 	ubfx	r3, r3, #28, #1
 801274a:	4936      	ldr	r1, [pc, #216]	; (8012824 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 801274c:	a803      	add	r0, sp, #12
 801274e:	f7ff ff15 	bl	801257c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8012752:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012756:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801275a:	6863      	ldr	r3, [r4, #4]
 801275c:	42aa      	cmp	r2, r5
 801275e:	d226      	bcs.n	80127ae <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 8012760:	9803      	ldr	r0, [sp, #12]
 8012762:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 8012766:	4410      	add	r0, r2
 8012768:	eba5 0502 	sub.w	r5, r5, r2
 801276c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8012770:	d10b      	bne.n	801278a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 8012772:	b962      	cbnz	r2, 801278e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 8012774:	9200      	str	r2, [sp, #0]
 8012776:	4b2c      	ldr	r3, [pc, #176]	; (8012828 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8012778:	4a2c      	ldr	r2, [pc, #176]	; (801282c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 801277a:	e00e      	b.n	801279a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 801277c:	6823      	ldr	r3, [r4, #0]
 801277e:	4601      	mov	r1, r0
 8012780:	681a      	ldr	r2, [r3, #0]
 8012782:	4618      	mov	r0, r3
 8012784:	68d2      	ldr	r2, [r2, #12]
 8012786:	4790      	blx	r2
 8012788:	e7cb      	b.n	8012722 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 801278a:	2a00      	cmp	r2, #0
 801278c:	d041      	beq.n	8012812 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 801278e:	3b00      	subs	r3, #0
 8012790:	bf18      	it	ne
 8012792:	2301      	movne	r3, #1
 8012794:	4a26      	ldr	r2, [pc, #152]	; (8012830 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 8012796:	9300      	str	r3, [sp, #0]
 8012798:	4b23      	ldr	r3, [pc, #140]	; (8012828 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 801279a:	4629      	mov	r1, r5
 801279c:	f001 fc4a 	bl	8014034 <snprintf>
 80127a0:	4285      	cmp	r5, r0
 80127a2:	bfa2      	ittt	ge
 80127a4:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80127a8:	181b      	addge	r3, r3, r0
 80127aa:	f8ad 3012 	strhge.w	r3, [sp, #18]
 80127ae:	2500      	movs	r5, #0
 80127b0:	2701      	movs	r7, #1
 80127b2:	4e20      	ldr	r6, [pc, #128]	; (8012834 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 80127b4:	f104 0808 	add.w	r8, r4, #8
 80127b8:	f856 1b04 	ldr.w	r1, [r6], #4
 80127bc:	780b      	ldrb	r3, [r1, #0]
 80127be:	b15b      	cbz	r3, 80127d8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 80127c0:	6862      	ldr	r2, [r4, #4]
 80127c2:	fa07 f305 	lsl.w	r3, r7, r5
 80127c6:	4393      	bics	r3, r2
 80127c8:	bf0c      	ite	eq
 80127ca:	2301      	moveq	r3, #1
 80127cc:	2300      	movne	r3, #0
 80127ce:	f818 2005 	ldrb.w	r2, [r8, r5]
 80127d2:	a803      	add	r0, sp, #12
 80127d4:	f7ff fed2 	bl	801257c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80127d8:	3501      	adds	r5, #1
 80127da:	2d14      	cmp	r5, #20
 80127dc:	d1ec      	bne.n	80127b8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 80127de:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80127e2:	b17b      	cbz	r3, 8012804 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xf8>
 80127e4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80127e8:	9b03      	ldr	r3, [sp, #12]
 80127ea:	4413      	add	r3, r2
 80127ec:	227d      	movs	r2, #125	; 0x7d
 80127ee:	f803 2c01 	strb.w	r2, [r3, #-1]
 80127f2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80127f6:	9903      	ldr	r1, [sp, #12]
 80127f8:	54ca      	strb	r2, [r1, r3]
 80127fa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80127fe:	3301      	adds	r3, #1
 8012800:	f8ad 3012 	strh.w	r3, [sp, #18]
 8012804:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801280a:	601a      	str	r2, [r3, #0]
 801280c:	b006      	add	sp, #24
 801280e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012812:	2301      	movs	r3, #1
 8012814:	4a08      	ldr	r2, [pc, #32]	; (8012838 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 8012816:	9300      	str	r3, [sp, #0]
 8012818:	4b03      	ldr	r3, [pc, #12]	; (8012828 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 801281a:	e7be      	b.n	801279a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 801281c:	08018292 	stmdaeq	r1, {r1, r4, r7, r9, pc}
 8012820:	0801829e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r9, pc}
 8012824:	08018266 	stmdaeq	r1, {r1, r2, r5, r6, r9, pc}
 8012828:	08018274 	stmdaeq	r1, {r2, r4, r5, r6, r9, pc}
 801282c:	0801691d 	stmdaeq	r1, {r0, r2, r3, r4, r8, fp, sp, lr}
 8012830:	08016914 	stmdaeq	r1, {r2, r4, r8, fp, sp, lr}
 8012834:	080181f0 	stmdaeq	r1, {r4, r5, r6, r7, r8, pc}
 8012838:	0801691e 	stmdaeq	r1, {r1, r2, r3, r4, r8, fp, sp, lr}

0801283c <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 801283c:	b513      	push	{r0, r1, r4, lr}
 801283e:	6804      	ldr	r4, [r0, #0]
 8012840:	b914      	cbnz	r4, 8012848 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8012842:	601c      	str	r4, [r3, #0]
 8012844:	b002      	add	sp, #8
 8012846:	bd10      	pop	{r4, pc}
 8012848:	9300      	str	r3, [sp, #0]
 801284a:	4613      	mov	r3, r2
 801284c:	460a      	mov	r2, r1
 801284e:	2100      	movs	r1, #0
 8012850:	f7ff ff5c 	bl	801270c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 8012854:	e7f6      	b.n	8012844 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

08012856 <DisplayUdfParams::Set(DisplayUdf*)>:
 8012856:	6843      	ldr	r3, [r0, #4]
 8012858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801285c:	009a      	lsls	r2, r3, #2
 801285e:	4604      	mov	r4, r0
 8012860:	460e      	mov	r6, r1
 8012862:	d506      	bpl.n	8012872 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8012864:	6988      	ldr	r0, [r1, #24]
 8012866:	b120      	cbz	r0, 8012872 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8012868:	6803      	ldr	r3, [r0, #0]
 801286a:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 801286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012870:	4798      	blx	r3
 8012872:	6863      	ldr	r3, [r4, #4]
 8012874:	69b0      	ldr	r0, [r6, #24]
 8012876:	00db      	lsls	r3, r3, #3
 8012878:	bf41      	itttt	mi
 801287a:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 801287e:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 8012882:	4353      	mulmi	r3, r2
 8012884:	6173      	strmi	r3, [r6, #20]
 8012886:	6861      	ldr	r1, [r4, #4]
 8012888:	f3c1 7180 	ubfx	r1, r1, #30, #1
 801288c:	b110      	cbz	r0, 8012894 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 801288e:	6803      	ldr	r3, [r0, #0]
 8012890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012892:	4798      	blx	r3
 8012894:	2500      	movs	r5, #0
 8012896:	2701      	movs	r7, #1
 8012898:	f104 0808 	add.w	r8, r4, #8
 801289c:	6862      	ldr	r2, [r4, #4]
 801289e:	fa07 f305 	lsl.w	r3, r7, r5
 80128a2:	4393      	bics	r3, r2
 80128a4:	d105      	bne.n	80128b2 <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 80128a6:	462a      	mov	r2, r5
 80128a8:	4630      	mov	r0, r6
 80128aa:	f818 1005 	ldrb.w	r1, [r8, r5]
 80128ae:	f7ff fd0c 	bl	80122ca <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80128b2:	3501      	adds	r5, #1
 80128b4:	2d14      	cmp	r5, #20
 80128b6:	d1f1      	bne.n	801289c <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 80128b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080128bc <DisplayUdfParams::Dump()>:
 80128bc:	4770      	bx	lr

080128be <DisplayUdf::ShowNodeName(ArtNetNode*)>:
 80128be:	b570      	push	{r4, r5, r6, lr}
 80128c0:	4605      	mov	r5, r0
 80128c2:	6980      	ldr	r0, [r0, #24]
 80128c4:	460c      	mov	r4, r1
 80128c6:	b120      	cbz	r0, 80128d2 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x14>
 80128c8:	6803      	ldr	r3, [r0, #0]
 80128ca:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 80128ce:	691b      	ldr	r3, [r3, #16]
 80128d0:	4798      	blx	r3
 80128d2:	69a8      	ldr	r0, [r5, #24]
 80128d4:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80128d8:	b190      	cbz	r0, 8012900 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x42>
 80128da:	2300      	movs	r3, #0
 80128dc:	7906      	ldrb	r6, [r0, #4]
 80128de:	343b      	adds	r4, #59	; 0x3b
 80128e0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80128e4:	b119      	cbz	r1, 80128ee <DisplayUdf::ShowNodeName(ArtNetNode*)+0x30>
 80128e6:	1c59      	adds	r1, r3, #1
 80128e8:	429e      	cmp	r6, r3
 80128ea:	460b      	mov	r3, r1
 80128ec:	dcf8      	bgt.n	80128e0 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x22>
 80128ee:	6801      	ldr	r1, [r0, #0]
 80128f0:	b2db      	uxtb	r3, r3
 80128f2:	69cc      	ldr	r4, [r1, #28]
 80128f4:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 80128f8:	46a4      	mov	ip, r4
 80128fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128fe:	4760      	bx	ip
 8012900:	bd70      	pop	{r4, r5, r6, pc}
	...

08012904 <DisplayUdf::ShowUniverse(ArtNetNode*)>:
 8012904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012908:	460c      	mov	r4, r1
 801290a:	b089      	sub	sp, #36	; 0x24
 801290c:	4606      	mov	r6, r0
 801290e:	2301      	movs	r3, #1
 8012910:	2100      	movs	r1, #0
 8012912:	4620      	mov	r0, r4
 8012914:	f10d 021f 	add.w	r2, sp, #31
 8012918:	f7f7 fffb 	bl	800a912 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 801291c:	b1e8      	cbz	r0, 801295a <DisplayUdf::ShowUniverse(ArtNetNode*)+0x56>
 801291e:	f8d4 5908 	ldr.w	r5, [r4, #2312]	; 0x908
 8012922:	4a2b      	ldr	r2, [pc, #172]	; (80129d0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xcc>)
 8012924:	4b2b      	ldr	r3, [pc, #172]	; (80129d4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd0>)
 8012926:	4f2c      	ldr	r7, [pc, #176]	; (80129d8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd4>)
 8012928:	2d00      	cmp	r5, #0
 801292a:	bf18      	it	ne
 801292c:	4613      	movne	r3, r2
 801292e:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8012932:	4a2a      	ldr	r2, [pc, #168]	; (80129dc <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd8>)
 8012934:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
 8012938:	2d00      	cmp	r5, #0
 801293a:	bf18      	it	ne
 801293c:	463a      	movne	r2, r7
 801293e:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8012942:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012946:	e9cd 1000 	strd	r1, r0, [sp]
 801294a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 801294e:	4630      	mov	r0, r6
 8012950:	4a23      	ldr	r2, [pc, #140]	; (80129e0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xdc>)
 8012952:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
 8012956:	f7ff fc72 	bl	801223e <Display::Printf(unsigned char, char const*, ...)>
 801295a:	4627      	mov	r7, r4
 801295c:	2500      	movs	r5, #0
 801295e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80129d4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd0>
 8012962:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80129d0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xcc>
 8012966:	f8df a074 	ldr.w	sl, [pc, #116]	; 80129dc <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd8>
 801296a:	4629      	mov	r1, r5
 801296c:	2301      	movs	r3, #1
 801296e:	4620      	mov	r0, r4
 8012970:	f10d 021f 	add.w	r2, sp, #31
 8012974:	f7f7 ffcd 	bl	800a912 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8012978:	3501      	adds	r5, #1
 801297a:	b308      	cbz	r0, 80129c0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xbc>
 801297c:	f8d7 c908 	ldr.w	ip, [r7, #2312]	; 0x908
 8012980:	f8df b054 	ldr.w	fp, [pc, #84]	; 80129d8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd4>
 8012984:	f1bc 0f00 	cmp.w	ip, #0
 8012988:	bf0c      	ite	eq
 801298a:	46c6      	moveq	lr, r8
 801298c:	46ce      	movne	lr, r9
 801298e:	f8d7 c910 	ldr.w	ip, [r7, #2320]	; 0x910
 8012992:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 8012996:	f1bc 0f00 	cmp.w	ip, #0
 801299a:	bf08      	it	eq
 801299c:	46d3      	moveq	fp, sl
 801299e:	f89d 001f 	ldrb.w	r0, [sp, #31]
 80129a2:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80129a6:	e9cd 2001 	strd	r2, r0, [sp, #4]
 80129aa:	e9cd eb03 	strd	lr, fp, [sp, #12]
 80129ae:	9300      	str	r3, [sp, #0]
 80129b0:	f106 0143 	add.w	r1, r6, #67	; 0x43
 80129b4:	462b      	mov	r3, r5
 80129b6:	4630      	mov	r0, r6
 80129b8:	4a0a      	ldr	r2, [pc, #40]	; (80129e4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xe0>)
 80129ba:	5d49      	ldrb	r1, [r1, r5]
 80129bc:	f7ff fc3f 	bl	801223e <Display::Printf(unsigned char, char const*, ...)>
 80129c0:	2d04      	cmp	r5, #4
 80129c2:	f107 0728 	add.w	r7, r7, #40	; 0x28
 80129c6:	d1d0      	bne.n	801296a <DisplayUdf::ShowUniverse(ArtNetNode*)+0x66>
 80129c8:	b009      	add	sp, #36	; 0x24
 80129ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ce:	bf00      	nop
 80129d0:	080177b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, sl, ip, sp, lr}
 80129d4:	080177b1 	stmdaeq	r1, {r0, r4, r5, r7, r8, r9, sl, ip, sp, lr}
 80129d8:	080177c1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl, ip, sp, lr}
 80129dc:	080182a8 	stmdaeq	r1, {r3, r5, r7, r9, pc}
 80129e0:	080182ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r9, pc}
 80129e4:	080182c1 	stmdaeq	r1, {r0, r6, r7, r9, pc}

080129e8 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
 80129e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80129ec:	4606      	mov	r6, r0
 80129ee:	2500      	movs	r5, #0
 80129f0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8012a38 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x50>
 80129f4:	b085      	sub	sp, #20
 80129f6:	f100 0849 	add.w	r8, r0, #73	; 0x49
 80129fa:	f601 1748 	addw	r7, r1, #2376	; 0x948
 80129fe:	2d01      	cmp	r5, #1
 8012a00:	bf8e      	itee	hi
 8012a02:	2400      	movhi	r4, #0
 8012a04:	012a      	lslls	r2, r5, #4
 8012a06:	58bc      	ldrls	r4, [r7, r2]
 8012a08:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8012a0c:	0e22      	lsrs	r2, r4, #24
 8012a0e:	9203      	str	r2, [sp, #12]
 8012a10:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8012a14:	9202      	str	r2, [sp, #8]
 8012a16:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8012a1a:	b2e4      	uxtb	r4, r4
 8012a1c:	f105 0341 	add.w	r3, r5, #65	; 0x41
 8012a20:	9201      	str	r2, [sp, #4]
 8012a22:	4630      	mov	r0, r6
 8012a24:	464a      	mov	r2, r9
 8012a26:	9400      	str	r4, [sp, #0]
 8012a28:	3501      	adds	r5, #1
 8012a2a:	f7ff fc08 	bl	801223e <Display::Printf(unsigned char, char const*, ...)>
 8012a2e:	2d04      	cmp	r5, #4
 8012a30:	d1e5      	bne.n	80129fe <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x16>
 8012a32:	b005      	add	sp, #20
 8012a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a38:	080182d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, pc}

08012a3c <DisplayUdf::Show(ArtNetNode*)>:
 8012a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a3e:	4604      	mov	r4, r0
 8012a40:	460d      	mov	r5, r1
 8012a42:	f7ff fcf1 	bl	8012428 <DisplayUdf::Show()>
 8012a46:	4629      	mov	r1, r5
 8012a48:	4620      	mov	r0, r4
 8012a4a:	f7ff ff38 	bl	80128be <DisplayUdf::ShowNodeName(ArtNetNode*)>
 8012a4e:	4629      	mov	r1, r5
 8012a50:	4620      	mov	r0, r4
 8012a52:	f7ff ff57 	bl	8012904 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8012a56:	4629      	mov	r1, r5
 8012a58:	4620      	mov	r0, r4
 8012a5a:	f7ff ffc5 	bl	80129e8 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>
 8012a5e:	f895 28eb 	ldrb.w	r2, [r5, #2283]	; 0x8eb
 8012a62:	f895 38ea 	ldrb.w	r3, [r5, #2282]	; 0x8ea
 8012a66:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8012a6a:	4413      	add	r3, r2
 8012a6c:	4620      	mov	r0, r4
 8012a6e:	4a0d      	ldr	r2, [pc, #52]	; (8012aa4 <DisplayUdf::Show(ArtNetNode*)+0x68>)
 8012a70:	f7ff fbe5 	bl	801223e <Display::Printf(unsigned char, char const*, ...)>
 8012a74:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8012a76:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 8012a7a:	2a02      	cmp	r2, #2
 8012a7c:	d001      	beq.n	8012a82 <DisplayUdf::Show(ArtNetNode*)+0x46>
 8012a7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012a80:	b92b      	cbnz	r3, 8012a8e <DisplayUdf::Show(ArtNetNode*)+0x52>
 8012a82:	4620      	mov	r0, r4
 8012a84:	4a08      	ldr	r2, [pc, #32]	; (8012aa8 <DisplayUdf::Show(ArtNetNode*)+0x6c>)
 8012a86:	f7ff fbda 	bl	801223e <Display::Printf(unsigned char, char const*, ...)>
 8012a8a:	b003      	add	sp, #12
 8012a8c:	bd30      	pop	{r4, r5, pc}
 8012a8e:	4807      	ldr	r0, [pc, #28]	; (8012aac <DisplayUdf::Show(ArtNetNode*)+0x70>)
 8012a90:	9300      	str	r3, [sp, #0]
 8012a92:	4b07      	ldr	r3, [pc, #28]	; (8012ab0 <DisplayUdf::Show(ArtNetNode*)+0x74>)
 8012a94:	2a00      	cmp	r2, #0
 8012a96:	bf08      	it	eq
 8012a98:	4603      	moveq	r3, r0
 8012a9a:	4620      	mov	r0, r4
 8012a9c:	4a05      	ldr	r2, [pc, #20]	; (8012ab4 <DisplayUdf::Show(ArtNetNode*)+0x78>)
 8012a9e:	f7ff fbce 	bl	801223e <Display::Printf(unsigned char, char const*, ...)>
 8012aa2:	e7f2      	b.n	8012a8a <DisplayUdf::Show(ArtNetNode*)+0x4e>
 8012aa4:	080182e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, pc}
 8012aa8:	080182ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r9, pc}
 8012aac:	08017ab6 	stmdaeq	r1, {r1, r2, r4, r5, r7, r9, fp, ip, sp, lr}
 8012ab0:	08017aab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r9, fp, ip, sp, lr}
 8012ab4:	080182f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, pc}

08012ab8 <NetworkDisplay::ShowEmacStart()>:
 8012ab8:	4b01      	ldr	r3, [pc, #4]	; (8012ac0 <NetworkDisplay::ShowEmacStart()+0x8>)
 8012aba:	6818      	ldr	r0, [r3, #0]
 8012abc:	f7ff bc1e 	b.w	80122fc <DisplayUdf::ShowEmacStart()>
 8012ac0:	2000ab6c 	andcs	sl, r0, ip, ror #22

08012ac4 <NetworkDisplay::ShowIp()>:
 8012ac4:	4b01      	ldr	r3, [pc, #4]	; (8012acc <NetworkDisplay::ShowIp()+0x8>)
 8012ac6:	6818      	ldr	r0, [r3, #0]
 8012ac8:	f7ff bc28 	b.w	801231c <DisplayUdf::ShowIpAddress()>
 8012acc:	2000ab6c 	andcs	sl, r0, ip, ror #22

08012ad0 <NetworkDisplay::ShowNetMask()>:
 8012ad0:	4b01      	ldr	r3, [pc, #4]	; (8012ad8 <NetworkDisplay::ShowNetMask()+0x8>)
 8012ad2:	6818      	ldr	r0, [r3, #0]
 8012ad4:	f7ff bc56 	b.w	8012384 <DisplayUdf::ShowNetmask()>
 8012ad8:	2000ab6c 	andcs	sl, r0, ip, ror #22

08012adc <NetworkDisplay::ShowGatewayIp()>:
 8012adc:	4b01      	ldr	r3, [pc, #4]	; (8012ae4 <NetworkDisplay::ShowGatewayIp()+0x8>)
 8012ade:	6818      	ldr	r0, [r3, #0]
 8012ae0:	f7ff bc6e 	b.w	80123c0 <DisplayUdf::ShowGatewayIp()>
 8012ae4:	2000ab6c 	andcs	sl, r0, ip, ror #22

08012ae8 <NetworkDisplay::ShowShutdown()>:
 8012ae8:	4b01      	ldr	r3, [pc, #4]	; (8012af0 <NetworkDisplay::ShowShutdown()+0x8>)
 8012aea:	6818      	ldr	r0, [r3, #0]
 8012aec:	f7ff bd16 	b.w	801251c <DisplayUdf::ShowShutdown()>
 8012af0:	2000ab6c 	andcs	sl, r0, ip, ror #22

08012af4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8012af4:	4b01      	ldr	r3, [pc, #4]	; (8012afc <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)+0x8>)
 8012af6:	6818      	ldr	r0, [r3, #0]
 8012af8:	f7ff bcd8 	b.w	80124ac <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8012afc:	2000ab6c 	andcs	sl, r0, ip, ror #22

08012b00 <properties::convert_json_file(char*, unsigned short, bool)>:
 8012b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b04:	4603      	mov	r3, r0
 8012b06:	7800      	ldrb	r0, [r0, #0]
 8012b08:	287b      	cmp	r0, #123	; 0x7b
 8012b0a:	f040 80a2 	bne.w	8012c52 <properties::convert_json_file(char*, unsigned short, bool)+0x152>
 8012b0e:	b17a      	cbz	r2, 8012b30 <properties::convert_json_file(char*, unsigned short, bool)+0x30>
 8012b10:	2401      	movs	r4, #1
 8012b12:	461e      	mov	r6, r3
 8012b14:	4620      	mov	r0, r4
 8012b16:	2a00      	cmp	r2, #0
 8012b18:	bf0c      	ite	eq
 8012b1a:	f04f 0c0a 	moveq.w	ip, #10
 8012b1e:	f04f 0c00 	movne.w	ip, #0
 8012b22:	273d      	movs	r7, #61	; 0x3d
 8012b24:	42a1      	cmp	r1, r4
 8012b26:	d850      	bhi.n	8012bca <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 8012b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b2c:	463c      	mov	r4, r7
 8012b2e:	e7f2      	b.n	8012b16 <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 8012b30:	2023      	movs	r0, #35	; 0x23
 8012b32:	f803 0b01 	strb.w	r0, [r3], #1
 8012b36:	461c      	mov	r4, r3
 8012b38:	2701      	movs	r7, #1
 8012b3a:	42b9      	cmp	r1, r7
 8012b3c:	d811      	bhi.n	8012b62 <properties::convert_json_file(char*, unsigned short, bool)+0x62>
 8012b3e:	2001      	movs	r0, #1
 8012b40:	461e      	mov	r6, r3
 8012b42:	230a      	movs	r3, #10
 8012b44:	4625      	mov	r5, r4
 8012b46:	f806 3b01 	strb.w	r3, [r6], #1
 8012b4a:	3001      	adds	r0, #1
 8012b4c:	462b      	mov	r3, r5
 8012b4e:	781c      	ldrb	r4, [r3, #0]
 8012b50:	3501      	adds	r5, #1
 8012b52:	2c7b      	cmp	r4, #123	; 0x7b
 8012b54:	d0ea      	beq.n	8012b2c <properties::convert_json_file(char*, unsigned short, bool)+0x2c>
 8012b56:	42b9      	cmp	r1, r7
 8012b58:	f107 0401 	add.w	r4, r7, #1
 8012b5c:	d9db      	bls.n	8012b16 <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 8012b5e:	4627      	mov	r7, r4
 8012b60:	e7f4      	b.n	8012b4c <properties::convert_json_file(char*, unsigned short, bool)+0x4c>
 8012b62:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012b66:	2822      	cmp	r0, #34	; 0x22
 8012b68:	d119      	bne.n	8012b9e <properties::convert_json_file(char*, unsigned short, bool)+0x9e>
 8012b6a:	46a4      	mov	ip, r4
 8012b6c:	461d      	mov	r5, r3
 8012b6e:	2601      	movs	r6, #1
 8012b70:	f89c e000 	ldrb.w	lr, [ip]
 8012b74:	4664      	mov	r4, ip
 8012b76:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8012b7a:	462b      	mov	r3, r5
 8012b7c:	4630      	mov	r0, r6
 8012b7e:	f10c 0c01 	add.w	ip, ip, #1
 8012b82:	f105 0501 	add.w	r5, r5, #1
 8012b86:	f106 0601 	add.w	r6, r6, #1
 8012b8a:	d0d9      	beq.n	8012b40 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 8012b8c:	3701      	adds	r7, #1
 8012b8e:	42b9      	cmp	r1, r7
 8012b90:	4664      	mov	r4, ip
 8012b92:	f805 ec01 	strb.w	lr, [r5, #-1]
 8012b96:	d8eb      	bhi.n	8012b70 <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 8012b98:	4630      	mov	r0, r6
 8012b9a:	462b      	mov	r3, r5
 8012b9c:	e7d0      	b.n	8012b40 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 8012b9e:	3701      	adds	r7, #1
 8012ba0:	e7cb      	b.n	8012b3a <properties::convert_json_file(char*, unsigned short, bool)+0x3a>
 8012ba2:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8012ba6:	d110      	bne.n	8012bca <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 8012ba8:	eba0 0803 	sub.w	r8, r0, r3
 8012bac:	461a      	mov	r2, r3
 8012bae:	eb08 0003 	add.w	r0, r8, r3
 8012bb2:	f813 eb01 	ldrb.w	lr, [r3], #1
 8012bb6:	1c65      	adds	r5, r4, #1
 8012bb8:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8012bbc:	d04c      	beq.n	8012c58 <properties::convert_json_file(char*, unsigned short, bool)+0x158>
 8012bbe:	42a1      	cmp	r1, r4
 8012bc0:	d911      	bls.n	8012be6 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
 8012bc2:	462c      	mov	r4, r5
 8012bc4:	f806 eb01 	strb.w	lr, [r6], #1
 8012bc8:	e7f0      	b.n	8012bac <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 8012bca:	42a1      	cmp	r1, r4
 8012bcc:	461d      	mov	r5, r3
 8012bce:	f893 e000 	ldrb.w	lr, [r3]
 8012bd2:	f104 0401 	add.w	r4, r4, #1
 8012bd6:	f103 0301 	add.w	r3, r3, #1
 8012bda:	d8e2      	bhi.n	8012ba2 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8012bdc:	462b      	mov	r3, r5
 8012bde:	e7e3      	b.n	8012ba8 <properties::convert_json_file(char*, unsigned short, bool)+0xa8>
 8012be0:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
 8012be4:	d009      	beq.n	8012bfa <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 8012be6:	42a9      	cmp	r1, r5
 8012be8:	4614      	mov	r4, r2
 8012bea:	f892 e000 	ldrb.w	lr, [r2]
 8012bee:	f105 0501 	add.w	r5, r5, #1
 8012bf2:	f102 0201 	add.w	r2, r2, #1
 8012bf6:	d8f3      	bhi.n	8012be0 <properties::convert_json_file(char*, unsigned short, bool)+0xe0>
 8012bf8:	4622      	mov	r2, r4
 8012bfa:	7814      	ldrb	r4, [r2, #0]
 8012bfc:	4696      	mov	lr, r2
 8012bfe:	2c2f      	cmp	r4, #47	; 0x2f
 8012c00:	462b      	mov	r3, r5
 8012c02:	f102 0201 	add.w	r2, r2, #1
 8012c06:	f105 0501 	add.w	r5, r5, #1
 8012c0a:	d81a      	bhi.n	8012c42 <properties::convert_json_file(char*, unsigned short, bool)+0x142>
 8012c0c:	4299      	cmp	r1, r3
 8012c0e:	d8f4      	bhi.n	8012bfa <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 8012c10:	2c22      	cmp	r4, #34	; 0x22
 8012c12:	bf08      	it	eq
 8012c14:	4696      	moveq	lr, r2
 8012c16:	4673      	mov	r3, lr
 8012c18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c1c:	1c6c      	adds	r4, r5, #1
 8012c1e:	2a22      	cmp	r2, #34	; 0x22
 8012c20:	d011      	beq.n	8012c46 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8012c22:	2a2c      	cmp	r2, #44	; 0x2c
 8012c24:	d00f      	beq.n	8012c46 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8012c26:	2a7d      	cmp	r2, #125	; 0x7d
 8012c28:	d00d      	beq.n	8012c46 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8012c2a:	42a9      	cmp	r1, r5
 8012c2c:	d90f      	bls.n	8012c4e <properties::convert_json_file(char*, unsigned short, bool)+0x14e>
 8012c2e:	f1a2 0520 	sub.w	r5, r2, #32
 8012c32:	2d5a      	cmp	r5, #90	; 0x5a
 8012c34:	d803      	bhi.n	8012c3e <properties::convert_json_file(char*, unsigned short, bool)+0x13e>
 8012c36:	469e      	mov	lr, r3
 8012c38:	f806 2b01 	strb.w	r2, [r6], #1
 8012c3c:	3001      	adds	r0, #1
 8012c3e:	4625      	mov	r5, r4
 8012c40:	e7e9      	b.n	8012c16 <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 8012c42:	461d      	mov	r5, r3
 8012c44:	e7e7      	b.n	8012c16 <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 8012c46:	462c      	mov	r4, r5
 8012c48:	f806 cb01 	strb.w	ip, [r6], #1
 8012c4c:	3001      	adds	r0, #1
 8012c4e:	3401      	adds	r4, #1
 8012c50:	e768      	b.n	8012b24 <properties::convert_json_file(char*, unsigned short, bool)+0x24>
 8012c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c56:	e767      	b.n	8012b28 <properties::convert_json_file(char*, unsigned short, bool)+0x28>
 8012c58:	4625      	mov	r5, r4
 8012c5a:	f806 7b01 	strb.w	r7, [r6], #1
 8012c5e:	3001      	adds	r0, #1
 8012c60:	e7c1      	b.n	8012be6 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
	...

08012c64 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 8012c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c68:	6002      	str	r2, [r0, #0]
 8012c6a:	4614      	mov	r4, r2
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	80c2      	strh	r2, [r0, #6]
 8012c70:	4a1c      	ldr	r2, [pc, #112]	; (8012ce4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 8012c72:	4606      	mov	r6, r0
 8012c74:	7812      	ldrb	r2, [r2, #0]
 8012c76:	8083      	strh	r3, [r0, #4]
 8012c78:	f002 0201 	and.w	r2, r2, #1
 8012c7c:	7202      	strb	r2, [r0, #8]
 8012c7e:	4608      	mov	r0, r1
 8012c80:	4605      	mov	r5, r0
 8012c82:	782f      	ldrb	r7, [r5, #0]
 8012c84:	3001      	adds	r0, #1
 8012c86:	2f00      	cmp	r7, #0
 8012c88:	d1fa      	bne.n	8012c80 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 8012c8a:	1a6d      	subs	r5, r5, r1
 8012c8c:	b29b      	uxth	r3, r3
 8012c8e:	b1d2      	cbz	r2, 8012cc6 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 8012c90:	1d2f      	adds	r7, r5, #4
 8012c92:	429f      	cmp	r7, r3
 8012c94:	d814      	bhi.n	8012cc0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8012c96:	f04f 087b 	mov.w	r8, #123	; 0x7b
 8012c9a:	f04f 0922 	mov.w	r9, #34	; 0x22
 8012c9e:	462a      	mov	r2, r5
 8012ca0:	f884 8000 	strb.w	r8, [r4]
 8012ca4:	f884 9001 	strb.w	r9, [r4, #1]
 8012ca8:	1ca0      	adds	r0, r4, #2
 8012caa:	f000 fe66 	bl	801397a <memmove>
 8012cae:	223a      	movs	r2, #58	; 0x3a
 8012cb0:	1963      	adds	r3, r4, r5
 8012cb2:	3505      	adds	r5, #5
 8012cb4:	f883 9002 	strb.w	r9, [r3, #2]
 8012cb8:	70da      	strb	r2, [r3, #3]
 8012cba:	80f5      	strh	r5, [r6, #6]
 8012cbc:	f804 8007 	strb.w	r8, [r4, r7]
 8012cc0:	4630      	mov	r0, r6
 8012cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cc6:	1caf      	adds	r7, r5, #2
 8012cc8:	429f      	cmp	r7, r3
 8012cca:	d8f9      	bhi.n	8012cc0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8012ccc:	4620      	mov	r0, r4
 8012cce:	2323      	movs	r3, #35	; 0x23
 8012cd0:	462a      	mov	r2, r5
 8012cd2:	f800 3b01 	strb.w	r3, [r0], #1
 8012cd6:	f000 fe50 	bl	801397a <memmove>
 8012cda:	230a      	movs	r3, #10
 8012cdc:	442c      	add	r4, r5
 8012cde:	7063      	strb	r3, [r4, #1]
 8012ce0:	80f7      	strh	r7, [r6, #6]
 8012ce2:	e7ed      	b.n	8012cc0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8012ce4:	2000ab70 	andcs	sl, r0, r0, ror fp

08012ce8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 8012ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cea:	469c      	mov	ip, r3
 8012cec:	8885      	ldrh	r5, [r0, #4]
 8012cee:	88c3      	ldrh	r3, [r0, #6]
 8012cf0:	b085      	sub	sp, #20
 8012cf2:	42ab      	cmp	r3, r5
 8012cf4:	d302      	bcc.n	8012cfc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 8012cf6:	2000      	movs	r0, #0
 8012cf8:	b005      	add	sp, #20
 8012cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cfc:	4604      	mov	r4, r0
 8012cfe:	6800      	ldr	r0, [r0, #0]
 8012d00:	1aed      	subs	r5, r5, r3
 8012d02:	4418      	add	r0, r3
 8012d04:	b2d6      	uxtb	r6, r2
 8012d06:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8012d0a:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8012d0e:	f894 e008 	ldrb.w	lr, [r4, #8]
 8012d12:	0e12      	lsrs	r2, r2, #24
 8012d14:	f1bc 0f00 	cmp.w	ip, #0
 8012d18:	d109      	bne.n	8012d2e <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 8012d1a:	f1be 0f00 	cmp.w	lr, #0
 8012d1e:	d109      	bne.n	8012d34 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 8012d20:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012d24:	e9cd 6700 	strd	r6, r7, [sp]
 8012d28:	460b      	mov	r3, r1
 8012d2a:	4a0e      	ldr	r2, [pc, #56]	; (8012d64 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 8012d2c:	e008      	b.n	8012d40 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8012d2e:	f1be 0f00 	cmp.w	lr, #0
 8012d32:	d00f      	beq.n	8012d54 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 8012d34:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012d38:	460b      	mov	r3, r1
 8012d3a:	e9cd 6700 	strd	r6, r7, [sp]
 8012d3e:	4a0a      	ldr	r2, [pc, #40]	; (8012d68 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 8012d40:	4629      	mov	r1, r5
 8012d42:	f001 f977 	bl	8014034 <snprintf>
 8012d46:	4285      	cmp	r5, r0
 8012d48:	dbd5      	blt.n	8012cf6 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 8012d4a:	88e3      	ldrh	r3, [r4, #6]
 8012d4c:	4403      	add	r3, r0
 8012d4e:	80e3      	strh	r3, [r4, #6]
 8012d50:	2001      	movs	r0, #1
 8012d52:	e7d1      	b.n	8012cf8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 8012d54:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012d58:	e9cd 6700 	strd	r6, r7, [sp]
 8012d5c:	460b      	mov	r3, r1
 8012d5e:	4a03      	ldr	r2, [pc, #12]	; (8012d6c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 8012d60:	e7ee      	b.n	8012d40 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8012d62:	bf00      	nop
 8012d64:	08018313 	stmdaeq	r1, {r0, r1, r4, r8, r9, pc}
 8012d68:	080182ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r9, pc}
 8012d6c:	08018314 	stmdaeq	r1, {r2, r4, r8, r9, pc}

08012d70 <PropertiesBuilder::AddComment(char const*)>:
 8012d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d72:	7a06      	ldrb	r6, [r0, #8]
 8012d74:	b996      	cbnz	r6, 8012d9c <PropertiesBuilder::AddComment(char const*)+0x2c>
 8012d76:	4604      	mov	r4, r0
 8012d78:	88c0      	ldrh	r0, [r0, #6]
 8012d7a:	88a5      	ldrh	r5, [r4, #4]
 8012d7c:	42a8      	cmp	r0, r5
 8012d7e:	d20d      	bcs.n	8012d9c <PropertiesBuilder::AddComment(char const*)+0x2c>
 8012d80:	6827      	ldr	r7, [r4, #0]
 8012d82:	1a2d      	subs	r5, r5, r0
 8012d84:	460b      	mov	r3, r1
 8012d86:	4a06      	ldr	r2, [pc, #24]	; (8012da0 <PropertiesBuilder::AddComment(char const*)+0x30>)
 8012d88:	4629      	mov	r1, r5
 8012d8a:	4438      	add	r0, r7
 8012d8c:	f001 f952 	bl	8014034 <snprintf>
 8012d90:	4285      	cmp	r5, r0
 8012d92:	bfa1      	itttt	ge
 8012d94:	2601      	movge	r6, #1
 8012d96:	88e3      	ldrhge	r3, [r4, #6]
 8012d98:	18c0      	addge	r0, r0, r3
 8012d9a:	80e0      	strhge	r0, [r4, #6]
 8012d9c:	4630      	mov	r0, r6
 8012d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012da0:	08018324 	stmdaeq	r1, {r2, r5, r8, r9, pc}

08012da4 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 8012da4:	e9c0 1200 	strd	r1, r2, [r0]
 8012da8:	4770      	bx	lr

08012daa <ReadConfigFile::~ReadConfigFile()>:
 8012daa:	4770      	bx	lr

08012dac <ReadConfigFile::Read(char const*, unsigned int)>:
 8012dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012db0:	4606      	mov	r6, r0
 8012db2:	460d      	mov	r5, r1
 8012db4:	4614      	mov	r4, r2
 8012db6:	f04f 0800 	mov.w	r8, #0
 8012dba:	b0a0      	sub	sp, #128	; 0x80
 8012dbc:	b33c      	cbz	r4, 8012e0e <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8012dbe:	466b      	mov	r3, sp
 8012dc0:	462a      	mov	r2, r5
 8012dc2:	4619      	mov	r1, r3
 8012dc4:	e007      	b.n	8012dd6 <ReadConfigFile::Read(char const*, unsigned int)+0x2a>
 8012dc6:	f803 7b01 	strb.w	r7, [r3], #1
 8012dca:	1a58      	subs	r0, r3, r1
 8012dcc:	287f      	cmp	r0, #127	; 0x7f
 8012dce:	4615      	mov	r5, r2
 8012dd0:	dc1d      	bgt.n	8012e0e <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8012dd2:	3c01      	subs	r4, #1
 8012dd4:	d00f      	beq.n	8012df6 <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 8012dd6:	7817      	ldrb	r7, [r2, #0]
 8012dd8:	4610      	mov	r0, r2
 8012dda:	2f0d      	cmp	r7, #13
 8012ddc:	f102 0201 	add.w	r2, r2, #1
 8012de0:	d001      	beq.n	8012de6 <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 8012de2:	2f0a      	cmp	r7, #10
 8012de4:	d1ef      	bne.n	8012dc6 <ReadConfigFile::Read(char const*, unsigned int)+0x1a>
 8012de6:	4605      	mov	r5, r0
 8012de8:	b12c      	cbz	r4, 8012df6 <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 8012dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012dee:	2a0d      	cmp	r2, #13
 8012df0:	d00b      	beq.n	8012e0a <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8012df2:	2a0a      	cmp	r2, #10
 8012df4:	d009      	beq.n	8012e0a <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8012df6:	f89d 2000 	ldrb.w	r2, [sp]
 8012dfa:	2a60      	cmp	r2, #96	; 0x60
 8012dfc:	d9de      	bls.n	8012dbc <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8012dfe:	f883 8000 	strb.w	r8, [r3]
 8012e02:	e9d6 3000 	ldrd	r3, r0, [r6]
 8012e06:	4798      	blx	r3
 8012e08:	e7d8      	b.n	8012dbc <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8012e0a:	3c01      	subs	r4, #1
 8012e0c:	e7eb      	b.n	8012de6 <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 8012e0e:	b020      	add	sp, #128	; 0x80
 8012e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012e14 <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 8012e14:	b570      	push	{r4, r5, r6, lr}
 8012e16:	4615      	mov	r5, r2
 8012e18:	461c      	mov	r4, r3
 8012e1a:	f000 f890 	bl	8012f3e <Sscan::checkName(char const*, char const*)>
 8012e1e:	b180      	cbz	r0, 8012e42 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2e>
 8012e20:	2100      	movs	r1, #0
 8012e22:	5c43      	ldrb	r3, [r0, r1]
 8012e24:	6826      	ldr	r6, [r4, #0]
 8012e26:	b28a      	uxth	r2, r1
 8012e28:	b143      	cbz	r3, 8012e3c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 8012e2a:	42b2      	cmp	r2, r6
 8012e2c:	d303      	bcc.n	8012e36 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x22>
 8012e2e:	2b0a      	cmp	r3, #10
 8012e30:	d004      	beq.n	8012e3c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 8012e32:	2002      	movs	r0, #2
 8012e34:	e004      	b.n	8012e40 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>
 8012e36:	546b      	strb	r3, [r5, r1]
 8012e38:	3101      	adds	r1, #1
 8012e3a:	e7f2      	b.n	8012e22 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 8012e3c:	2000      	movs	r0, #0
 8012e3e:	6022      	str	r2, [r4, #0]
 8012e40:	bd70      	pop	{r4, r5, r6, pc}
 8012e42:	2001      	movs	r0, #1
 8012e44:	e7fc      	b.n	8012e40 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>

08012e46 <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 8012e46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012e48:	4615      	mov	r5, r2
 8012e4a:	f000 f878 	bl	8012f3e <Sscan::checkName(char const*, char const*)>
 8012e4e:	bb58      	cbnz	r0, 8012ea8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x62>
 8012e50:	2001      	movs	r0, #1
 8012e52:	e027      	b.n	8012ea4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 8012e54:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8012e58:	2b09      	cmp	r3, #9
 8012e5a:	d822      	bhi.n	8012ea2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e62:	3930      	subs	r1, #48	; 0x30
 8012e64:	4618      	mov	r0, r3
 8012e66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e6a:	2a2e      	cmp	r2, #46	; 0x2e
 8012e6c:	d115      	bne.n	8012e9a <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 8012e6e:	29ff      	cmp	r1, #255	; 0xff
 8012e70:	d817      	bhi.n	8012ea2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8012e72:	3401      	adds	r4, #1
 8012e74:	2c03      	cmp	r4, #3
 8012e76:	f806 1b01 	strb.w	r1, [r6], #1
 8012e7a:	d119      	bne.n	8012eb0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6a>
 8012e7c:	2400      	movs	r4, #0
 8012e7e:	260a      	movs	r6, #10
 8012e80:	1d1a      	adds	r2, r3, #4
 8012e82:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8012e86:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8012e8a:	d115      	bne.n	8012eb8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x72>
 8012e8c:	2cff      	cmp	r4, #255	; 0xff
 8012e8e:	d808      	bhi.n	8012ea2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8012e90:	f88d 4007 	strb.w	r4, [sp, #7]
 8012e94:	9b01      	ldr	r3, [sp, #4]
 8012e96:	602b      	str	r3, [r5, #0]
 8012e98:	e004      	b.n	8012ea4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 8012e9a:	2a00      	cmp	r2, #0
 8012e9c:	d0e7      	beq.n	8012e6e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8012e9e:	42b8      	cmp	r0, r7
 8012ea0:	d1d8      	bne.n	8012e54 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xe>
 8012ea2:	2002      	movs	r0, #2
 8012ea4:	b003      	add	sp, #12
 8012ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ea8:	2400      	movs	r4, #0
 8012eaa:	f04f 0c0a 	mov.w	ip, #10
 8012eae:	ae01      	add	r6, sp, #4
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	2100      	movs	r1, #0
 8012eb4:	1d07      	adds	r7, r0, #4
 8012eb6:	e7d5      	b.n	8012e64 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x1e>
 8012eb8:	4293      	cmp	r3, r2
 8012eba:	d0f2      	beq.n	8012ea2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8012ebc:	3930      	subs	r1, #48	; 0x30
 8012ebe:	2909      	cmp	r1, #9
 8012ec0:	d8ef      	bhi.n	8012ea2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8012ec2:	fb06 1404 	mla	r4, r6, r4, r1
 8012ec6:	e7dc      	b.n	8012e82 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x3c>

08012ec8 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 8012ec8:	b538      	push	{r3, r4, r5, lr}
 8012eca:	4615      	mov	r5, r2
 8012ecc:	f000 f837 	bl	8012f3e <Sscan::checkName(char const*, char const*)>
 8012ed0:	b1a0      	cbz	r0, 8012efc <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 8012ed2:	4604      	mov	r4, r0
 8012ed4:	2100      	movs	r1, #0
 8012ed6:	220a      	movs	r2, #10
 8012ed8:	7823      	ldrb	r3, [r4, #0]
 8012eda:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8012ede:	2809      	cmp	r0, #9
 8012ee0:	d80e      	bhi.n	8012f00 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8012ee2:	fb02 3101 	mla	r1, r2, r1, r3
 8012ee6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012eea:	3930      	subs	r1, #48	; 0x30
 8012eec:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8012ef0:	d1f2      	bne.n	8012ed8 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x10>
 8012ef2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8012ef6:	d203      	bcs.n	8012f00 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8012ef8:	8029      	strh	r1, [r5, #0]
 8012efa:	bd38      	pop	{r3, r4, r5, pc}
 8012efc:	2001      	movs	r0, #1
 8012efe:	e7fc      	b.n	8012efa <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 8012f00:	2002      	movs	r0, #2
 8012f02:	e7fa      	b.n	8012efa <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

08012f04 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 8012f04:	b538      	push	{r3, r4, r5, lr}
 8012f06:	4615      	mov	r5, r2
 8012f08:	f000 f819 	bl	8012f3e <Sscan::checkName(char const*, char const*)>
 8012f0c:	b198      	cbz	r0, 8012f36 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 8012f0e:	4604      	mov	r4, r0
 8012f10:	2100      	movs	r1, #0
 8012f12:	220a      	movs	r2, #10
 8012f14:	7823      	ldrb	r3, [r4, #0]
 8012f16:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8012f1a:	2809      	cmp	r0, #9
 8012f1c:	d80d      	bhi.n	8012f3a <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8012f1e:	fb02 3101 	mla	r1, r2, r1, r3
 8012f22:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012f26:	3930      	subs	r1, #48	; 0x30
 8012f28:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8012f2c:	d1f2      	bne.n	8012f14 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x10>
 8012f2e:	29ff      	cmp	r1, #255	; 0xff
 8012f30:	d803      	bhi.n	8012f3a <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8012f32:	7029      	strb	r1, [r5, #0]
 8012f34:	bd38      	pop	{r3, r4, r5, pc}
 8012f36:	2001      	movs	r0, #1
 8012f38:	e7fc      	b.n	8012f34 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 8012f3a:	2002      	movs	r0, #2
 8012f3c:	e7fa      	b.n	8012f34 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

08012f3e <Sscan::checkName(char const*, char const*)>:
 8012f3e:	4603      	mov	r3, r0
 8012f40:	b510      	push	{r4, lr}
 8012f42:	3901      	subs	r1, #1
 8012f44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012f48:	461c      	mov	r4, r3
 8012f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f4e:	b120      	cbz	r0, 8012f5a <Sscan::checkName(char const*, char const*)+0x1c>
 8012f50:	b10a      	cbz	r2, 8012f56 <Sscan::checkName(char const*, char const*)+0x18>
 8012f52:	4290      	cmp	r0, r2
 8012f54:	d0f6      	beq.n	8012f44 <Sscan::checkName(char const*, char const*)+0x6>
 8012f56:	2000      	movs	r0, #0
 8012f58:	e006      	b.n	8012f68 <Sscan::checkName(char const*, char const*)+0x2a>
 8012f5a:	2a3d      	cmp	r2, #61	; 0x3d
 8012f5c:	d104      	bne.n	8012f68 <Sscan::checkName(char const*, char const*)+0x2a>
 8012f5e:	7860      	ldrb	r0, [r4, #1]
 8012f60:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 8012f64:	d000      	beq.n	8012f68 <Sscan::checkName(char const*, char const*)+0x2a>
 8012f66:	1c60      	adds	r0, r4, #1
 8012f68:	bd10      	pop	{r4, pc}

08012f6a <LightSet::GetDmxStartAddress()>:
 8012f6a:	2001      	movs	r0, #1
 8012f6c:	4770      	bx	lr

08012f6e <LightSet::GetDmxFootprint()>:
 8012f6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012f72:	4770      	bx	lr

08012f74 <LightSet::SetDmxStartAddress(unsigned short)>:
 8012f74:	2000      	movs	r0, #0
 8012f76:	4770      	bx	lr

08012f78 <LightSet::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8012f78:	2300      	movs	r3, #0
 8012f7a:	2001      	movs	r0, #1
 8012f7c:	7093      	strb	r3, [r2, #2]
 8012f7e:	8010      	strh	r0, [r2, #0]
 8012f80:	4770      	bx	lr
	...

08012f84 <Display::PrintInfo() [clone .isra.0]>:
 8012f84:	b910      	cbnz	r0, 8012f8c <Display::PrintInfo() [clone .isra.0]+0x8>
 8012f86:	4803      	ldr	r0, [pc, #12]	; (8012f94 <Display::PrintInfo() [clone .isra.0]+0x10>)
 8012f88:	f001 b87c 	b.w	8014084 <puts>
 8012f8c:	6803      	ldr	r3, [r0, #0]
 8012f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f90:	4718      	bx	r3
 8012f92:	bf00      	nop
 8012f94:	08018436 	stmdaeq	r1, {r1, r2, r4, r5, sl, pc}

08012f98 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8012f98:	b513      	push	{r0, r1, r4, lr}
 8012f9a:	4604      	mov	r4, r0
 8012f9c:	0a13      	lsrs	r3, r2, #8
 8012f9e:	7800      	ldrb	r0, [r0, #0]
 8012fa0:	f88d 1004 	strb.w	r1, [sp, #4]
 8012fa4:	f88d 3005 	strb.w	r3, [sp, #5]
 8012fa8:	f88d 2006 	strb.w	r2, [sp, #6]
 8012fac:	f002 f864 	bl	8015078 <gd32_i2c_set_address>
 8012fb0:	6860      	ldr	r0, [r4, #4]
 8012fb2:	f002 f859 	bl	8015068 <gd32_i2c_set_baudrate>
 8012fb6:	2103      	movs	r1, #3
 8012fb8:	a801      	add	r0, sp, #4
 8012fba:	f002 f863 	bl	8015084 <gd32_i2c_write>
 8012fbe:	b002      	add	sp, #8
 8012fc0:	bd10      	pop	{r4, pc}

08012fc2 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 8012fc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012fc4:	460d      	mov	r5, r1
 8012fc6:	4604      	mov	r4, r0
 8012fc8:	f002 f856 	bl	8015078 <gd32_i2c_set_address>
 8012fcc:	4628      	mov	r0, r5
 8012fce:	f002 f84b 	bl	8015068 <gd32_i2c_set_baudrate>
 8012fd2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012fd6:	2b07      	cmp	r3, #7
 8012fd8:	d902      	bls.n	8012fe0 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 8012fda:	3c50      	subs	r4, #80	; 0x50
 8012fdc:	2c0f      	cmp	r4, #15
 8012fde:	d809      	bhi.n	8012ff4 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 8012fe0:	2101      	movs	r1, #1
 8012fe2:	f10d 0007 	add.w	r0, sp, #7
 8012fe6:	f002 f8b3 	bl	8015150 <gd32_i2c_read>
 8012fea:	fab0 f080 	clz	r0, r0
 8012fee:	0940      	lsrs	r0, r0, #5
 8012ff0:	b003      	add	sp, #12
 8012ff2:	bd30      	pop	{r4, r5, pc}
 8012ff4:	2100      	movs	r1, #0
 8012ff6:	4608      	mov	r0, r1
 8012ff8:	f002 f844 	bl	8015084 <gd32_i2c_write>
 8012ffc:	e7f5      	b.n	8012fea <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

08012ffe <Display::Detect7Segment()>:
 8012ffe:	b538      	push	{r3, r4, r5, lr}
 8013000:	68c1      	ldr	r1, [r0, #12]
 8013002:	4604      	mov	r4, r0
 8013004:	7a00      	ldrb	r0, [r0, #8]
 8013006:	f7ff ffdc 	bl	8012fc2 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 801300a:	7460      	strb	r0, [r4, #17]
 801300c:	b170      	cbz	r0, 801302c <Display::Detect7Segment()+0x2e>
 801300e:	2200      	movs	r2, #0
 8013010:	f104 0508 	add.w	r5, r4, #8
 8013014:	4611      	mov	r1, r2
 8013016:	4628      	mov	r0, r5
 8013018:	f7ff ffbe 	bl	8012f98 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 801301c:	7c63      	ldrb	r3, [r4, #17]
 801301e:	b12b      	cbz	r3, 801302c <Display::Detect7Segment()+0x2e>
 8013020:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8013024:	2112      	movs	r1, #18
 8013026:	4628      	mov	r0, r5
 8013028:	f7ff ffb6 	bl	8012f98 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 801302c:	bd38      	pop	{r3, r4, r5, pc}

0801302e <Display::Detect(display::Type)>:
 801302e:	2902      	cmp	r1, #2
 8013030:	b538      	push	{r3, r4, r5, lr}
 8013032:	4604      	mov	r4, r0
 8013034:	d014      	beq.n	8013060 <Display::Detect(display::Type)+0x32>
 8013036:	2904      	cmp	r1, #4
 8013038:	d01b      	beq.n	8013072 <Display::Detect(display::Type)+0x44>
 801303a:	69a0      	ldr	r0, [r4, #24]
 801303c:	b168      	cbz	r0, 801305a <Display::Detect(display::Type)+0x2c>
 801303e:	6803      	ldr	r3, [r0, #0]
 8013040:	689b      	ldr	r3, [r3, #8]
 8013042:	4798      	blx	r3
 8013044:	4603      	mov	r3, r0
 8013046:	69a0      	ldr	r0, [r4, #24]
 8013048:	b9ab      	cbnz	r3, 8013076 <Display::Detect(display::Type)+0x48>
 801304a:	b110      	cbz	r0, 8013052 <Display::Detect(display::Type)+0x24>
 801304c:	6803      	ldr	r3, [r0, #0]
 801304e:	685b      	ldr	r3, [r3, #4]
 8013050:	4798      	blx	r3
 8013052:	2300      	movs	r3, #0
 8013054:	61a3      	str	r3, [r4, #24]
 8013056:	2304      	movs	r3, #4
 8013058:	6023      	str	r3, [r4, #0]
 801305a:	2300      	movs	r3, #0
 801305c:	6163      	str	r3, [r4, #20]
 801305e:	e010      	b.n	8013082 <Display::Detect(display::Type)+0x54>
 8013060:	2018      	movs	r0, #24
 8013062:	f000 fbcb 	bl	80137fc <operator new(unsigned int)>
 8013066:	4605      	mov	r5, r0
 8013068:	2100      	movs	r1, #0
 801306a:	f000 f89d 	bl	80131a8 <Ssd1306::Ssd1306(TOledPanel)>
 801306e:	61a5      	str	r5, [r4, #24]
 8013070:	e7e3      	b.n	801303a <Display::Detect(display::Type)+0xc>
 8013072:	6001      	str	r1, [r0, #0]
 8013074:	e7e1      	b.n	801303a <Display::Detect(display::Type)+0xc>
 8013076:	6803      	ldr	r3, [r0, #0]
 8013078:	68db      	ldr	r3, [r3, #12]
 801307a:	4798      	blx	r3
 801307c:	69a3      	ldr	r3, [r4, #24]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d0eb      	beq.n	801305a <Display::Detect(display::Type)+0x2c>
 8013082:	bd38      	pop	{r3, r4, r5, pc}

08013084 <Display::Display()>:
 8013084:	2304      	movs	r3, #4
 8013086:	b510      	push	{r4, lr}
 8013088:	6003      	str	r3, [r0, #0]
 801308a:	4b0f      	ldr	r3, [pc, #60]	; (80130c8 <Display::Display()+0x44>)
 801308c:	4604      	mov	r4, r0
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	4a0e      	ldr	r2, [pc, #56]	; (80130cc <Display::Display()+0x48>)
 8013092:	6043      	str	r3, [r0, #4]
 8013094:	2321      	movs	r3, #33	; 0x21
 8013096:	7203      	strb	r3, [r0, #8]
 8013098:	4b0d      	ldr	r3, [pc, #52]	; (80130d0 <Display::Display()+0x4c>)
 801309a:	2102      	movs	r1, #2
 801309c:	60c3      	str	r3, [r0, #12]
 801309e:	2300      	movs	r3, #0
 80130a0:	e9c0 2305 	strd	r2, r3, [r0, #20]
 80130a4:	8203      	strh	r3, [r0, #16]
 80130a6:	4b0b      	ldr	r3, [pc, #44]	; (80130d4 <Display::Display()+0x50>)
 80130a8:	6018      	str	r0, [r3, #0]
 80130aa:	f7ff ffc0 	bl	801302e <Display::Detect(display::Type)>
 80130ae:	4620      	mov	r0, r4
 80130b0:	f7ff ffa5 	bl	8012ffe <Display::Detect7Segment()>
 80130b4:	69a3      	ldr	r3, [r4, #24]
 80130b6:	b10b      	cbz	r3, 80130bc <Display::Display()+0x38>
 80130b8:	f7f5 f93a 	bl	8008330 <display::timeout::gpio_init()>
 80130bc:	69a0      	ldr	r0, [r4, #24]
 80130be:	f7ff ff61 	bl	8012f84 <Display::PrintInfo() [clone .isra.0]>
 80130c2:	4620      	mov	r0, r4
 80130c4:	bd10      	pop	{r4, pc}
 80130c6:	bf00      	nop
 80130c8:	2000ac7c 	andcs	sl, r0, ip, ror ip
 80130cc:	000493e0 	andeq	r9, r4, r0, ror #7
 80130d0:	00061a80 	andeq	r1, r6, r0, lsl #21
 80130d4:	2000ab74 	andcs	sl, r0, r4, ror fp

080130d8 <Ssd1306::~Ssd1306()>:
 80130d8:	4770      	bx	lr

080130da <Ssd1306::SetCursor(unsigned int)>:
 80130da:	4770      	bx	lr

080130dc <Ssd1306::PrintInfo()>:
 80130dc:	b410      	push	{r4}
 80130de:	4906      	ldr	r1, [pc, #24]	; (80130f8 <Ssd1306::PrintInfo()+0x1c>)
 80130e0:	7c44      	ldrb	r4, [r0, #17]
 80130e2:	7903      	ldrb	r3, [r0, #4]
 80130e4:	7942      	ldrb	r2, [r0, #5]
 80130e6:	4805      	ldr	r0, [pc, #20]	; (80130fc <Ssd1306::PrintInfo()+0x20>)
 80130e8:	2c00      	cmp	r4, #0
 80130ea:	bf08      	it	eq
 80130ec:	4601      	moveq	r1, r0
 80130ee:	4804      	ldr	r0, [pc, #16]	; (8013100 <Ssd1306::PrintInfo()+0x24>)
 80130f0:	bc10      	pop	{r4}
 80130f2:	f000 bf77 	b.w	8013fe4 <printf>
 80130f6:	bf00      	nop
 80130f8:	08018447 	stmdaeq	r1, {r0, r1, r2, r6, sl, pc}
 80130fc:	0801844e 	stmdaeq	r1, {r1, r2, r3, r6, sl, pc}
 8013100:	08018456 	stmdaeq	r1, {r1, r2, r4, r6, sl, pc}

08013104 <Ssd1306::~Ssd1306()>:
 8013104:	b510      	push	{r4, lr}
 8013106:	4604      	mov	r4, r0
 8013108:	f000 fb74 	bl	80137f4 <operator delete(void*)>
 801310c:	4620      	mov	r0, r4
 801310e:	bd10      	pop	{r4, pc}

08013110 <HAL_I2C::Setup()>:
 8013110:	b510      	push	{r4, lr}
 8013112:	4604      	mov	r4, r0
 8013114:	7800      	ldrb	r0, [r0, #0]
 8013116:	f001 ffaf 	bl	8015078 <gd32_i2c_set_address>
 801311a:	6860      	ldr	r0, [r4, #4]
 801311c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013120:	f001 bfa2 	b.w	8015068 <gd32_i2c_set_baudrate>

08013124 <Ssd1306::PutChar(int)>:
 8013124:	b510      	push	{r4, lr}
 8013126:	f1a1 0420 	sub.w	r4, r1, #32
 801312a:	2c5f      	cmp	r4, #95	; 0x5f
 801312c:	bf88      	it	hi
 801312e:	2400      	movhi	r4, #0
 8013130:	3008      	adds	r0, #8
 8013132:	f7ff ffed 	bl	8013110 <HAL_I2C::Setup()>
 8013136:	4804      	ldr	r0, [pc, #16]	; (8013148 <Ssd1306::PutChar(int)+0x24>)
 8013138:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 801313c:	4420      	add	r0, r4
 801313e:	2107      	movs	r1, #7
 8013140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013144:	f001 bf9e 	b.w	8015084 <gd32_i2c_write>
 8013148:	08018468 	stmdaeq	r1, {r3, r5, r6, sl, pc}

0801314c <Ssd1306::PutString(char const*)>:
 801314c:	b538      	push	{r3, r4, r5, lr}
 801314e:	4605      	mov	r5, r0
 8013150:	1e4c      	subs	r4, r1, #1
 8013152:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8013156:	b901      	cbnz	r1, 801315a <Ssd1306::PutString(char const*)+0xe>
 8013158:	bd38      	pop	{r3, r4, r5, pc}
 801315a:	4628      	mov	r0, r5
 801315c:	f7ff ffe2 	bl	8013124 <Ssd1306::PutChar(int)>
 8013160:	e7f7      	b.n	8013152 <Ssd1306::PutString(char const*)+0x6>

08013162 <Ssd1306::Text(char const*, unsigned int)>:
 8013162:	b570      	push	{r4, r5, r6, lr}
 8013164:	7903      	ldrb	r3, [r0, #4]
 8013166:	4605      	mov	r5, r0
 8013168:	460c      	mov	r4, r1
 801316a:	4293      	cmp	r3, r2
 801316c:	bf94      	ite	ls
 801316e:	18ce      	addls	r6, r1, r3
 8013170:	188e      	addhi	r6, r1, r2
 8013172:	42b4      	cmp	r4, r6
 8013174:	d100      	bne.n	8013178 <Ssd1306::Text(char const*, unsigned int)+0x16>
 8013176:	bd70      	pop	{r4, r5, r6, pc}
 8013178:	4628      	mov	r0, r5
 801317a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801317e:	f7ff ffd1 	bl	8013124 <Ssd1306::PutChar(int)>
 8013182:	e7f6      	b.n	8013172 <Ssd1306::Text(char const*, unsigned int)+0x10>

08013184 <Ssd1306::InitMembers()>:
 8013184:	7c03      	ldrb	r3, [r0, #16]
 8013186:	b14b      	cbz	r3, 801319c <Ssd1306::InitMembers()+0x18>
 8013188:	3b01      	subs	r3, #1
 801318a:	2b01      	cmp	r3, #1
 801318c:	d909      	bls.n	80131a2 <Ssd1306::InitMembers()+0x1e>
 801318e:	2308      	movs	r3, #8
 8013190:	2204      	movs	r2, #4
 8013192:	2115      	movs	r1, #21
 8013194:	7143      	strb	r3, [r0, #5]
 8013196:	7101      	strb	r1, [r0, #4]
 8013198:	6142      	str	r2, [r0, #20]
 801319a:	4770      	bx	lr
 801319c:	2308      	movs	r3, #8
 801319e:	461a      	mov	r2, r3
 80131a0:	e7f7      	b.n	8013192 <Ssd1306::InitMembers()+0xe>
 80131a2:	2304      	movs	r3, #4
 80131a4:	e7fb      	b.n	801319e <Ssd1306::InitMembers()+0x1a>
	...

080131a8 <Ssd1306::Ssd1306(TOledPanel)>:
 80131a8:	4a08      	ldr	r2, [pc, #32]	; (80131cc <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 80131aa:	b508      	push	{r3, lr}
 80131ac:	6002      	str	r2, [r0, #0]
 80131ae:	227f      	movs	r2, #127	; 0x7f
 80131b0:	80c2      	strh	r2, [r0, #6]
 80131b2:	223c      	movs	r2, #60	; 0x3c
 80131b4:	7202      	strb	r2, [r0, #8]
 80131b6:	4a06      	ldr	r2, [pc, #24]	; (80131d0 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 80131b8:	7401      	strb	r1, [r0, #16]
 80131ba:	60c2      	str	r2, [r0, #12]
 80131bc:	2200      	movs	r2, #0
 80131be:	7442      	strb	r2, [r0, #17]
 80131c0:	4a04      	ldr	r2, [pc, #16]	; (80131d4 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 80131c2:	6010      	str	r0, [r2, #0]
 80131c4:	f7ff ffde 	bl	8013184 <Ssd1306::InitMembers()>
 80131c8:	bd08      	pop	{r3, pc}
 80131ca:	bf00      	nop
 80131cc:	08018740 	stmdaeq	r1, {r6, r8, r9, sl, pc}
 80131d0:	00061a80 	andeq	r1, r6, r0, lsl #21
 80131d4:	2000ac00 	andcs	sl, r0, r0, lsl #24

080131d8 <Ssd1306::SendCommand(unsigned char)>:
 80131d8:	2300      	movs	r3, #0
 80131da:	b507      	push	{r0, r1, r2, lr}
 80131dc:	3008      	adds	r0, #8
 80131de:	f88d 3004 	strb.w	r3, [sp, #4]
 80131e2:	f88d 1005 	strb.w	r1, [sp, #5]
 80131e6:	f7ff ff93 	bl	8013110 <HAL_I2C::Setup()>
 80131ea:	2102      	movs	r1, #2
 80131ec:	a801      	add	r0, sp, #4
 80131ee:	f001 ff49 	bl	8015084 <gd32_i2c_write>
 80131f2:	b003      	add	sp, #12
 80131f4:	f85d fb04 	ldr.w	pc, [sp], #4

080131f8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 80131f8:	2914      	cmp	r1, #20
 80131fa:	b570      	push	{r4, r5, r6, lr}
 80131fc:	4605      	mov	r5, r0
 80131fe:	4616      	mov	r6, r2
 8013200:	d81c      	bhi.n	801323c <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8013202:	7943      	ldrb	r3, [r0, #5]
 8013204:	4293      	cmp	r3, r2
 8013206:	d919      	bls.n	801323c <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8013208:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801320c:	7c43      	ldrb	r3, [r0, #17]
 801320e:	004c      	lsls	r4, r1, #1
 8013210:	b2e4      	uxtb	r4, r4
 8013212:	b10b      	cbz	r3, 8013218 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 8013214:	3404      	adds	r4, #4
 8013216:	b2e4      	uxtb	r4, r4
 8013218:	4628      	mov	r0, r5
 801321a:	f004 010e 	and.w	r1, r4, #14
 801321e:	f7ff ffdb 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 8013222:	0921      	lsrs	r1, r4, #4
 8013224:	4628      	mov	r0, r5
 8013226:	f041 0110 	orr.w	r1, r1, #16
 801322a:	f7ff ffd5 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 801322e:	4628      	mov	r0, r5
 8013230:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 8013234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013238:	f7ff bfce 	b.w	80131d8 <Ssd1306::SendCommand(unsigned char)>
 801323c:	bd70      	pop	{r4, r5, r6, pc}

0801323e <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 801323e:	b570      	push	{r4, r5, r6, lr}
 8013240:	461e      	mov	r6, r3
 8013242:	7943      	ldrb	r3, [r0, #5]
 8013244:	4604      	mov	r4, r0
 8013246:	428b      	cmp	r3, r1
 8013248:	4615      	mov	r5, r2
 801324a:	d30b      	bcc.n	8013264 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x26>
 801324c:	3901      	subs	r1, #1
 801324e:	b2ca      	uxtb	r2, r1
 8013250:	2100      	movs	r1, #0
 8013252:	f7ff ffd1 	bl	80131f8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8013256:	4632      	mov	r2, r6
 8013258:	4629      	mov	r1, r5
 801325a:	4620      	mov	r0, r4
 801325c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013260:	f7ff bf7f 	b.w	8013162 <Ssd1306::Text(char const*, unsigned int)>
 8013264:	bd70      	pop	{r4, r5, r6, pc}
	...

08013268 <Ssd1306::ClearLine(unsigned char)>:
 8013268:	b538      	push	{r3, r4, r5, lr}
 801326a:	7943      	ldrb	r3, [r0, #5]
 801326c:	4605      	mov	r5, r0
 801326e:	428b      	cmp	r3, r1
 8013270:	d314      	bcc.n	801329c <Ssd1306::ClearLine(unsigned char)+0x34>
 8013272:	3901      	subs	r1, #1
 8013274:	b2cc      	uxtb	r4, r1
 8013276:	4622      	mov	r2, r4
 8013278:	2100      	movs	r1, #0
 801327a:	f7ff ffbd 	bl	80131f8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 801327e:	f105 0008 	add.w	r0, r5, #8
 8013282:	f7ff ff45 	bl	8013110 <HAL_I2C::Setup()>
 8013286:	2181      	movs	r1, #129	; 0x81
 8013288:	4805      	ldr	r0, [pc, #20]	; (80132a0 <Ssd1306::ClearLine(unsigned char)+0x38>)
 801328a:	f001 fefb 	bl	8015084 <gd32_i2c_write>
 801328e:	4622      	mov	r2, r4
 8013290:	4628      	mov	r0, r5
 8013292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013296:	2100      	movs	r1, #0
 8013298:	f7ff bfae 	b.w	80131f8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 801329c:	bd38      	pop	{r3, r4, r5, pc}
 801329e:	bf00      	nop
 80132a0:	2000ab78 	andcs	sl, r0, r8, ror fp

080132a4 <Ssd1306::SetSleep(bool)>:
 80132a4:	b111      	cbz	r1, 80132ac <Ssd1306::SetSleep(bool)+0x8>
 80132a6:	21ae      	movs	r1, #174	; 0xae
 80132a8:	f7ff bf96 	b.w	80131d8 <Ssd1306::SendCommand(unsigned char)>
 80132ac:	21af      	movs	r1, #175	; 0xaf
 80132ae:	e7fb      	b.n	80132a8 <Ssd1306::SetSleep(bool)+0x4>

080132b0 <Ssd1306::SetContrast(unsigned char)>:
 80132b0:	b538      	push	{r3, r4, r5, lr}
 80132b2:	4604      	mov	r4, r0
 80132b4:	460d      	mov	r5, r1
 80132b6:	7181      	strb	r1, [r0, #6]
 80132b8:	2181      	movs	r1, #129	; 0x81
 80132ba:	f7ff ff8d 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 80132be:	4629      	mov	r1, r5
 80132c0:	4620      	mov	r0, r4
 80132c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80132c6:	f7ff bf87 	b.w	80131d8 <Ssd1306::SendCommand(unsigned char)>

080132ca <Ssd1306::SetFlipVertically(bool)>:
 80132ca:	b510      	push	{r4, lr}
 80132cc:	4604      	mov	r4, r0
 80132ce:	71c1      	strb	r1, [r0, #7]
 80132d0:	b141      	cbz	r1, 80132e4 <Ssd1306::SetFlipVertically(bool)+0x1a>
 80132d2:	21c0      	movs	r1, #192	; 0xc0
 80132d4:	f7ff ff80 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 80132d8:	21a0      	movs	r1, #160	; 0xa0
 80132da:	4620      	mov	r0, r4
 80132dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132e0:	f7ff bf7a 	b.w	80131d8 <Ssd1306::SendCommand(unsigned char)>
 80132e4:	21c8      	movs	r1, #200	; 0xc8
 80132e6:	f7ff ff77 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 80132ea:	21a1      	movs	r1, #161	; 0xa1
 80132ec:	e7f5      	b.n	80132da <Ssd1306::SetFlipVertically(bool)+0x10>
	...

080132f0 <Ssd1306::CheckSH1106()>:
 80132f0:	b530      	push	{r4, r5, lr}
 80132f2:	4604      	mov	r4, r0
 80132f4:	b087      	sub	sp, #28
 80132f6:	2100      	movs	r1, #0
 80132f8:	f7ff ff6e 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 80132fc:	2190      	movs	r1, #144	; 0x90
 80132fe:	4620      	mov	r0, r4
 8013300:	f7ff ff6a 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 8013304:	21b0      	movs	r1, #176	; 0xb0
 8013306:	4620      	mov	r0, r4
 8013308:	f7ff ff66 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 801330c:	4b22      	ldr	r3, [pc, #136]	; (8013398 <Ssd1306::CheckSH1106()+0xa8>)
 801330e:	f104 0508 	add.w	r5, r4, #8
 8013312:	6818      	ldr	r0, [r3, #0]
 8013314:	791b      	ldrb	r3, [r3, #4]
 8013316:	9002      	str	r0, [sp, #8]
 8013318:	4628      	mov	r0, r5
 801331a:	f88d 300c 	strb.w	r3, [sp, #12]
 801331e:	f7ff fef7 	bl	8013110 <HAL_I2C::Setup()>
 8013322:	2105      	movs	r1, #5
 8013324:	a802      	add	r0, sp, #8
 8013326:	f001 fead 	bl	8015084 <gd32_i2c_write>
 801332a:	2100      	movs	r1, #0
 801332c:	4620      	mov	r0, r4
 801332e:	f7ff ff53 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 8013332:	2190      	movs	r1, #144	; 0x90
 8013334:	4620      	mov	r0, r4
 8013336:	f7ff ff4f 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 801333a:	21b0      	movs	r1, #176	; 0xb0
 801333c:	4620      	mov	r0, r4
 801333e:	f7ff ff4b 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 8013342:	2300      	movs	r3, #0
 8013344:	9304      	str	r3, [sp, #16]
 8013346:	f88d 3014 	strb.w	r3, [sp, #20]
 801334a:	2340      	movs	r3, #64	; 0x40
 801334c:	4628      	mov	r0, r5
 801334e:	f88d 3007 	strb.w	r3, [sp, #7]
 8013352:	f7ff fedd 	bl	8013110 <HAL_I2C::Setup()>
 8013356:	2101      	movs	r1, #1
 8013358:	f10d 0007 	add.w	r0, sp, #7
 801335c:	f001 fe92 	bl	8015084 <gd32_i2c_write>
 8013360:	4628      	mov	r0, r5
 8013362:	f7ff fed5 	bl	8013110 <HAL_I2C::Setup()>
 8013366:	2105      	movs	r1, #5
 8013368:	a804      	add	r0, sp, #16
 801336a:	f001 fef1 	bl	8015150 <gd32_i2c_read>
 801336e:	2004      	movs	r0, #4
 8013370:	aa02      	add	r2, sp, #8
 8013372:	a904      	add	r1, sp, #16
 8013374:	3801      	subs	r0, #1
 8013376:	d201      	bcs.n	801337c <Ssd1306::CheckSH1106()+0x8c>
 8013378:	2300      	movs	r3, #0
 801337a:	e006      	b.n	801338a <Ssd1306::CheckSH1106()+0x9a>
 801337c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8013380:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8013384:	42ab      	cmp	r3, r5
 8013386:	d0f5      	beq.n	8013374 <Ssd1306::CheckSH1106()+0x84>
 8013388:	1b5b      	subs	r3, r3, r5
 801338a:	fab3 f383 	clz	r3, r3
 801338e:	095b      	lsrs	r3, r3, #5
 8013390:	7463      	strb	r3, [r4, #17]
 8013392:	b007      	add	sp, #28
 8013394:	bd30      	pop	{r4, r5, pc}
 8013396:	bf00      	nop
 8013398:	08018462 	stmdaeq	r1, {r1, r5, r6, sl, pc}

0801339c <Ssd1306::Cls()>:
 801339c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133a0:	4604      	mov	r4, r0
 80133a2:	2600      	movs	r6, #0
 80133a4:	7c45      	ldrb	r5, [r0, #17]
 80133a6:	00ad      	lsls	r5, r5, #2
 80133a8:	b2ed      	uxtb	r5, r5
 80133aa:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 80133ae:	f045 0810 	orr.w	r8, r5, #16
 80133b2:	b2ff      	uxtb	r7, r7
 80133b4:	6963      	ldr	r3, [r4, #20]
 80133b6:	4629      	mov	r1, r5
 80133b8:	42b3      	cmp	r3, r6
 80133ba:	4620      	mov	r0, r4
 80133bc:	d80b      	bhi.n	80133d6 <Ssd1306::Cls()+0x3a>
 80133be:	f7ff ff0b 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 80133c2:	4641      	mov	r1, r8
 80133c4:	4620      	mov	r0, r4
 80133c6:	f7ff ff07 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 80133ca:	4620      	mov	r0, r4
 80133cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133d0:	21b0      	movs	r1, #176	; 0xb0
 80133d2:	f7ff bf01 	b.w	80131d8 <Ssd1306::SendCommand(unsigned char)>
 80133d6:	f7ff feff 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 80133da:	4641      	mov	r1, r8
 80133dc:	4620      	mov	r0, r4
 80133de:	f7ff fefb 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 80133e2:	f066 014f 	orn	r1, r6, #79	; 0x4f
 80133e6:	4620      	mov	r0, r4
 80133e8:	b2c9      	uxtb	r1, r1
 80133ea:	f7ff fef5 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 80133ee:	7c23      	ldrb	r3, [r4, #16]
 80133f0:	b123      	cbz	r3, 80133fc <Ssd1306::Cls()+0x60>
 80133f2:	3b01      	subs	r3, #1
 80133f4:	2b01      	cmp	r3, #1
 80133f6:	d901      	bls.n	80133fc <Ssd1306::Cls()+0x60>
 80133f8:	3601      	adds	r6, #1
 80133fa:	e7db      	b.n	80133b4 <Ssd1306::Cls()+0x18>
 80133fc:	f104 0008 	add.w	r0, r4, #8
 8013400:	f7ff fe86 	bl	8013110 <HAL_I2C::Setup()>
 8013404:	4639      	mov	r1, r7
 8013406:	4802      	ldr	r0, [pc, #8]	; (8013410 <Ssd1306::Cls()+0x74>)
 8013408:	f001 fe3c 	bl	8015084 <gd32_i2c_write>
 801340c:	e7f4      	b.n	80133f8 <Ssd1306::Cls()+0x5c>
 801340e:	bf00      	nop
 8013410:	2000ab78 	andcs	sl, r0, r8, ror fp

08013414 <Ssd1306::Start()>:
 8013414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013416:	7a04      	ldrb	r4, [r0, #8]
 8013418:	68c6      	ldr	r6, [r0, #12]
 801341a:	4605      	mov	r5, r0
 801341c:	4620      	mov	r0, r4
 801341e:	f001 fe2b 	bl	8015078 <gd32_i2c_set_address>
 8013422:	4630      	mov	r0, r6
 8013424:	f001 fe20 	bl	8015068 <gd32_i2c_set_baudrate>
 8013428:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801342c:	2b07      	cmp	r3, #7
 801342e:	d902      	bls.n	8013436 <Ssd1306::Start()+0x22>
 8013430:	3c50      	subs	r4, #80	; 0x50
 8013432:	2c0f      	cmp	r4, #15
 8013434:	d80f      	bhi.n	8013456 <Ssd1306::Start()+0x42>
 8013436:	2101      	movs	r1, #1
 8013438:	f10d 0007 	add.w	r0, sp, #7
 801343c:	f001 fe88 	bl	8015150 <gd32_i2c_read>
 8013440:	fab0 f480 	clz	r4, r0
 8013444:	0964      	lsrs	r4, r4, #5
 8013446:	b35c      	cbz	r4, 80134a0 <Ssd1306::Start()+0x8c>
 8013448:	7c2e      	ldrb	r6, [r5, #16]
 801344a:	b14e      	cbz	r6, 8013460 <Ssd1306::Start()+0x4c>
 801344c:	3e01      	subs	r6, #1
 801344e:	2e01      	cmp	r6, #1
 8013450:	d929      	bls.n	80134a6 <Ssd1306::Start()+0x92>
 8013452:	2400      	movs	r4, #0
 8013454:	e024      	b.n	80134a0 <Ssd1306::Start()+0x8c>
 8013456:	2100      	movs	r1, #0
 8013458:	4608      	mov	r0, r1
 801345a:	f001 fe13 	bl	8015084 <gd32_i2c_write>
 801345e:	e7ef      	b.n	8013440 <Ssd1306::Start()+0x2c>
 8013460:	4f16      	ldr	r7, [pc, #88]	; (80134bc <Ssd1306::Start()+0xa8>)
 8013462:	4628      	mov	r0, r5
 8013464:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013468:	3601      	adds	r6, #1
 801346a:	f7ff feb5 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 801346e:	2e18      	cmp	r6, #24
 8013470:	d1f7      	bne.n	8013462 <Ssd1306::Start()+0x4e>
 8013472:	2300      	movs	r3, #0
 8013474:	4a12      	ldr	r2, [pc, #72]	; (80134c0 <Ssd1306::Start()+0xac>)
 8013476:	4618      	mov	r0, r3
 8013478:	4611      	mov	r1, r2
 801347a:	3301      	adds	r3, #1
 801347c:	2b86      	cmp	r3, #134	; 0x86
 801347e:	f802 0b01 	strb.w	r0, [r2], #1
 8013482:	d1fa      	bne.n	801347a <Ssd1306::Start()+0x66>
 8013484:	2340      	movs	r3, #64	; 0x40
 8013486:	4628      	mov	r0, r5
 8013488:	700b      	strb	r3, [r1, #0]
 801348a:	f7ff ff31 	bl	80132f0 <Ssd1306::CheckSH1106()>
 801348e:	4628      	mov	r0, r5
 8013490:	f7ff ff84 	bl	801339c <Ssd1306::Cls()>
 8013494:	21af      	movs	r1, #175	; 0xaf
 8013496:	4628      	mov	r0, r5
 8013498:	f7ff fe9e 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 801349c:	2301      	movs	r3, #1
 801349e:	71eb      	strb	r3, [r5, #7]
 80134a0:	4620      	mov	r0, r4
 80134a2:	b003      	add	sp, #12
 80134a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134a6:	2600      	movs	r6, #0
 80134a8:	4f06      	ldr	r7, [pc, #24]	; (80134c4 <Ssd1306::Start()+0xb0>)
 80134aa:	4628      	mov	r0, r5
 80134ac:	f817 1b01 	ldrb.w	r1, [r7], #1
 80134b0:	3601      	adds	r6, #1
 80134b2:	f7ff fe91 	bl	80131d8 <Ssd1306::SendCommand(unsigned char)>
 80134b6:	2e18      	cmp	r6, #24
 80134b8:	d1f7      	bne.n	80134aa <Ssd1306::Start()+0x96>
 80134ba:	e7da      	b.n	8013472 <Ssd1306::Start()+0x5e>
 80134bc:	08018720 	stmdaeq	r1, {r5, r8, r9, sl, pc}
 80134c0:	2000ab78 	andcs	sl, r0, r8, ror fp
 80134c4:	08018708 	stmdaeq	r1, {r3, r8, r9, sl, pc}

080134c8 <console_putc>:
 80134c8:	f000 bede 	b.w	8014288 <uart0_putc>

080134cc <console_puts>:
 80134cc:	f000 befc 	b.w	80142c8 <uart0_puts>

080134d0 <console_set_fg_color>:
 80134d0:	2807      	cmp	r0, #7
 80134d2:	d810      	bhi.n	80134f6 <console_set_fg_color+0x26>
 80134d4:	e8df f000 	tbb	[pc, r0]
 80134d8:	0b090704 	bleq	82550f0 <__exidx_end+0x23c87c>
 80134dc:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 80134a8 <Ssd1306::Start()+0x94>
 80134e0:	4806      	ldr	r0, [pc, #24]	; (80134fc <console_set_fg_color+0x2c>)
 80134e2:	f000 bef1 	b.w	80142c8 <uart0_puts>
 80134e6:	4806      	ldr	r0, [pc, #24]	; (8013500 <console_set_fg_color+0x30>)
 80134e8:	e7fb      	b.n	80134e2 <console_set_fg_color+0x12>
 80134ea:	4806      	ldr	r0, [pc, #24]	; (8013504 <console_set_fg_color+0x34>)
 80134ec:	e7f9      	b.n	80134e2 <console_set_fg_color+0x12>
 80134ee:	4806      	ldr	r0, [pc, #24]	; (8013508 <console_set_fg_color+0x38>)
 80134f0:	e7f7      	b.n	80134e2 <console_set_fg_color+0x12>
 80134f2:	4806      	ldr	r0, [pc, #24]	; (801350c <console_set_fg_color+0x3c>)
 80134f4:	e7f5      	b.n	80134e2 <console_set_fg_color+0x12>
 80134f6:	4806      	ldr	r0, [pc, #24]	; (8013510 <console_set_fg_color+0x40>)
 80134f8:	e7f3      	b.n	80134e2 <console_set_fg_color+0x12>
 80134fa:	bf00      	nop
 80134fc:	0801877e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r8, r9, sl, pc}
 8013500:	08018784 	stmdaeq	r1, {r2, r7, r8, r9, sl, pc}
 8013504:	0801878a 	stmdaeq	r1, {r1, r3, r7, r8, r9, sl, pc}
 8013508:	08018790 	stmdaeq	r1, {r4, r7, r8, r9, sl, pc}
 801350c:	08016555 	stmdaeq	r1, {r0, r2, r4, r6, r8, sl, sp, lr}
 8013510:	08018796 	stmdaeq	r1, {r1, r2, r4, r7, r8, r9, sl, pc}

08013514 <console_error>:
 8013514:	b510      	push	{r4, lr}
 8013516:	4604      	mov	r4, r0
 8013518:	4805      	ldr	r0, [pc, #20]	; (8013530 <console_error+0x1c>)
 801351a:	f000 fed5 	bl	80142c8 <uart0_puts>
 801351e:	4620      	mov	r0, r4
 8013520:	f000 fed2 	bl	80142c8 <uart0_puts>
 8013524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013528:	4802      	ldr	r0, [pc, #8]	; (8013534 <console_error+0x20>)
 801352a:	f000 becd 	b.w	80142c8 <uart0_puts>
 801352e:	bf00      	nop
 8013530:	08018784 	stmdaeq	r1, {r2, r7, r8, r9, sl, pc}
 8013534:	08016555 	stmdaeq	r1, {r0, r2, r4, r6, r8, sl, sp, lr}

08013538 <console_status>:
 8013538:	b510      	push	{r4, lr}
 801353a:	460c      	mov	r4, r1
 801353c:	b280      	uxth	r0, r0
 801353e:	f7ff ffc7 	bl	80134d0 <console_set_fg_color>
 8013542:	4807      	ldr	r0, [pc, #28]	; (8013560 <console_status+0x28>)
 8013544:	f000 fec0 	bl	80142c8 <uart0_puts>
 8013548:	4620      	mov	r0, r4
 801354a:	f000 febd 	bl	80142c8 <uart0_puts>
 801354e:	200a      	movs	r0, #10
 8013550:	f000 fe9a 	bl	8014288 <uart0_putc>
 8013554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013558:	4802      	ldr	r0, [pc, #8]	; (8013564 <console_status+0x2c>)
 801355a:	f000 beb5 	b.w	80142c8 <uart0_puts>
 801355e:	bf00      	nop
 8013560:	08018778 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, sl, pc}
 8013564:	08016555 	stmdaeq	r1, {r0, r2, r4, r6, r8, sl, sp, lr}

08013568 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8013568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801356c:	4617      	mov	r7, r2
 801356e:	461e      	mov	r6, r3
 8013570:	4d14      	ldr	r5, [pc, #80]	; (80135c4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8013572:	4b15      	ldr	r3, [pc, #84]	; (80135c8 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8013574:	b086      	sub	sp, #24
 8013576:	6018      	str	r0, [r3, #0]
 8013578:	4604      	mov	r4, r0
 801357a:	f105 0803 	add.w	r8, r5, #3
 801357e:	2203      	movs	r2, #3
 8013580:	4628      	mov	r0, r5
 8013582:	f000 f9fa 	bl	801397a <memmove>
 8013586:	4639      	mov	r1, r7
 8013588:	220b      	movs	r2, #11
 801358a:	4640      	mov	r0, r8
 801358c:	f000 f9f5 	bl	801397a <memmove>
 8013590:	f105 030e 	add.w	r3, r5, #14
 8013594:	4631      	mov	r1, r6
 8013596:	2208      	movs	r2, #8
 8013598:	4618      	mov	r0, r3
 801359a:	f000 f9ee 	bl	801397a <memmove>
 801359e:	2308      	movs	r3, #8
 80135a0:	e9cd 8303 	strd	r8, r3, [sp, #12]
 80135a4:	230b      	movs	r3, #11
 80135a6:	9302      	str	r3, [sp, #8]
 80135a8:	4b08      	ldr	r3, [pc, #32]	; (80135cc <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 80135aa:	9005      	str	r0, [sp, #20]
 80135ac:	e9cd 5300 	strd	r5, r3, [sp]
 80135b0:	213f      	movs	r1, #63	; 0x3f
 80135b2:	2303      	movs	r3, #3
 80135b4:	4a06      	ldr	r2, [pc, #24]	; (80135d0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 80135b6:	4807      	ldr	r0, [pc, #28]	; (80135d4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 80135b8:	f000 fd3c 	bl	8014034 <snprintf>
 80135bc:	4620      	mov	r0, r4
 80135be:	b006      	add	sp, #24
 80135c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135c4:	2000ac04 	andcs	sl, r0, r4, lsl #24
 80135c8:	2000ac5c 	andcs	sl, r0, ip, asr ip
 80135cc:	08016c9a 	stmdaeq	r1, {r1, r3, r4, r7, sl, fp, sp, lr}
 80135d0:	0801879c 	stmdaeq	r1, {r2, r3, r4, r7, r8, r9, sl, pc}
 80135d4:	2000ac1a 	andcs	sl, r0, sl, lsl ip

080135d8 <FirmwareVersion::Print(char const*)>:
 80135d8:	b510      	push	{r4, lr}
 80135da:	460c      	mov	r4, r1
 80135dc:	4804      	ldr	r0, [pc, #16]	; (80135f0 <FirmwareVersion::Print(char const*)+0x18>)
 80135de:	f000 fd51 	bl	8014084 <puts>
 80135e2:	b124      	cbz	r4, 80135ee <FirmwareVersion::Print(char const*)+0x16>
 80135e4:	4620      	mov	r0, r4
 80135e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135ea:	f000 bd4b 	b.w	8014084 <puts>
 80135ee:	bd10      	pop	{r4, pc}
 80135f0:	2000ac1a 	andcs	sl, r0, sl, lsl ip

080135f4 <LedBlink::LedBlink()>:
 80135f4:	b538      	push	{r3, r4, r5, lr}
 80135f6:	2205      	movs	r2, #5
 80135f8:	2300      	movs	r3, #0
 80135fa:	e9c0 3200 	strd	r3, r2, [r0]
 80135fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8013602:	6083      	str	r3, [r0, #8]
 8013604:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8013608:	6143      	str	r3, [r0, #20]
 801360a:	4b09      	ldr	r3, [pc, #36]	; (8013630 <LedBlink::LedBlink()+0x3c>)
 801360c:	4d09      	ldr	r5, [pc, #36]	; (8013634 <LedBlink::LedBlink()+0x40>)
 801360e:	4604      	mov	r4, r0
 8013610:	6018      	str	r0, [r3, #0]
 8013612:	f240 6004 	movw	r0, #1540	; 0x604
 8013616:	f001 f8bb 	bl	8014790 <rcu_periph_clock_enable>
 801361a:	4628      	mov	r0, r5
 801361c:	2301      	movs	r3, #1
 801361e:	2203      	movs	r2, #3
 8013620:	2110      	movs	r1, #16
 8013622:	f001 f81d 	bl	8014660 <gpio_init>
 8013626:	2301      	movs	r3, #1
 8013628:	4620      	mov	r0, r4
 801362a:	616b      	str	r3, [r5, #20]
 801362c:	bd38      	pop	{r3, r4, r5, pc}
 801362e:	bf00      	nop
 8013630:	2000ac60 	andcs	sl, r0, r0, ror #24
 8013634:	40011000 	andmi	r1, r1, r0

08013638 <LedBlink::SetMode(ledblink::Mode)>:
 8013638:	6843      	ldr	r3, [r0, #4]
 801363a:	428b      	cmp	r3, r1
 801363c:	d02f      	beq.n	801369e <LedBlink::SetMode(ledblink::Mode)+0x66>
 801363e:	6041      	str	r1, [r0, #4]
 8013640:	2904      	cmp	r1, #4
 8013642:	d822      	bhi.n	801368a <LedBlink::SetMode(ledblink::Mode)+0x52>
 8013644:	e8df f001 	tbb	[pc, r1]
 8013648:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 801364c:	23ff001d 	mvnscs	r0, #29
 8013650:	6003      	str	r3, [r0, #0]
 8013652:	2300      	movs	r3, #0
 8013654:	2201      	movs	r2, #1
 8013656:	60c3      	str	r3, [r0, #12]
 8013658:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801365c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8013660:	611a      	str	r2, [r3, #16]
 8013662:	6880      	ldr	r0, [r0, #8]
 8013664:	b1d8      	cbz	r0, 801369e <LedBlink::SetMode(ledblink::Mode)+0x66>
 8013666:	6803      	ldr	r3, [r0, #0]
 8013668:	689b      	ldr	r3, [r3, #8]
 801366a:	4718      	bx	r3
 801366c:	2301      	movs	r3, #1
 801366e:	6003      	str	r3, [r0, #0]
 8013670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013674:	60c3      	str	r3, [r0, #12]
 8013676:	e7f4      	b.n	8013662 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8013678:	2303      	movs	r3, #3
 801367a:	6003      	str	r3, [r0, #0]
 801367c:	f240 134d 	movw	r3, #333	; 0x14d
 8013680:	e7f8      	b.n	8013674 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8013682:	2305      	movs	r3, #5
 8013684:	6003      	str	r3, [r0, #0]
 8013686:	23c8      	movs	r3, #200	; 0xc8
 8013688:	e7f4      	b.n	8013674 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 801368a:	2300      	movs	r3, #0
 801368c:	2201      	movs	r2, #1
 801368e:	6003      	str	r3, [r0, #0]
 8013690:	60c3      	str	r3, [r0, #12]
 8013692:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013696:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 801369a:	615a      	str	r2, [r3, #20]
 801369c:	e7e1      	b.n	8013662 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 801369e:	4770      	bx	lr

080136a0 <Hardware::Hardware()>:
 80136a0:	b570      	push	{r4, r5, r6, lr}
 80136a2:	2400      	movs	r4, #0
 80136a4:	4b24      	ldr	r3, [pc, #144]	; (8013738 <Hardware::Hardware()+0x98>)
 80136a6:	b090      	sub	sp, #64	; 0x40
 80136a8:	7004      	strb	r4, [r0, #0]
 80136aa:	6018      	str	r0, [r3, #0]
 80136ac:	4605      	mov	r5, r0
 80136ae:	f7f3 ff53 	bl	8007558 <console_init>
 80136b2:	f000 fe19 	bl	80142e8 <systick_config>
 80136b6:	f001 ff55 	bl	8015564 <udelay_init()>
 80136ba:	f001 ff05 	bl	80154c8 <micros_init()>
 80136be:	f240 701b 	movw	r0, #1819	; 0x71b
 80136c2:	f001 f865 	bl	8014790 <rcu_periph_clock_enable>
 80136c6:	f240 701c 	movw	r0, #1820	; 0x71c
 80136ca:	f001 f861 	bl	8014790 <rcu_periph_clock_enable>
 80136ce:	4e1b      	ldr	r6, [pc, #108]	; (801373c <Hardware::Hardware()+0x9c>)
 80136d0:	f001 f856 	bl	8014780 <pmu_backup_write_enable>
 80136d4:	4621      	mov	r1, r4
 80136d6:	2002      	movs	r0, #2
 80136d8:	f000 feaa 	bl	8014430 <bkp_data_write>
 80136dc:	f240 7004 	movw	r0, #1796	; 0x704
 80136e0:	f001 f856 	bl	8014790 <rcu_periph_clock_enable>
 80136e4:	4630      	mov	r0, r6
 80136e6:	f001 f9b7 	bl	8014a58 <timer_deinit>
 80136ea:	2377      	movs	r3, #119	; 0x77
 80136ec:	f8ad 300c 	strh.w	r3, [sp, #12]
 80136f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80136f4:	a903      	add	r1, sp, #12
 80136f6:	4630      	mov	r0, r6
 80136f8:	9305      	str	r3, [sp, #20]
 80136fa:	f001 fa53 	bl	8014ba4 <timer_init>
 80136fe:	4630      	mov	r0, r6
 8013700:	f001 faa8 	bl	8014c54 <timer_enable>
 8013704:	f001 fc22 	bl	8014f4c <gd32_adc_init()>
 8013708:	220a      	movs	r2, #10
 801370a:	2309      	movs	r3, #9
 801370c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013710:	237a      	movs	r3, #122	; 0x7a
 8013712:	a807      	add	r0, sp, #28
 8013714:	930c      	str	r3, [sp, #48]	; 0x30
 8013716:	e9cd 4408 	strd	r4, r4, [sp, #32]
 801371a:	9407      	str	r4, [sp, #28]
 801371c:	940f      	str	r4, [sp, #60]	; 0x3c
 801371e:	f000 fd09 	bl	8014134 <mktime>
 8013722:	4621      	mov	r1, r4
 8013724:	e9cd 0401 	strd	r0, r4, [sp, #4]
 8013728:	a801      	add	r0, sp, #4
 801372a:	f000 fd79 	bl	8014220 <settimeofday>
 801372e:	f001 fc67 	bl	8015000 <gd32_i2c_begin>
 8013732:	4628      	mov	r0, r5
 8013734:	b010      	add	sp, #64	; 0x40
 8013736:	bd70      	pop	{r4, r5, r6, pc}
 8013738:	2000ac64 	andcs	sl, r0, r4, ror #24
 801373c:	40001000 	andmi	r1, r0, r0

08013740 <Hardware::GetUuid(unsigned char*)>:
 8013740:	4a0c      	ldr	r2, [pc, #48]	; (8013774 <Hardware::GetUuid(unsigned char*)+0x34>)
 8013742:	b084      	sub	sp, #16
 8013744:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8013748:	9300      	str	r3, [sp, #0]
 801374a:	f8d2 07ec 	ldr.w	r0, [r2, #2028]	; 0x7ec
 801374e:	9001      	str	r0, [sp, #4]
 8013750:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 8013754:	4403      	add	r3, r0
 8013756:	4413      	add	r3, r2
 8013758:	9202      	str	r2, [sp, #8]
 801375a:	466a      	mov	r2, sp
 801375c:	9303      	str	r3, [sp, #12]
 801375e:	1e4b      	subs	r3, r1, #1
 8013760:	310f      	adds	r1, #15
 8013762:	428b      	cmp	r3, r1
 8013764:	d101      	bne.n	801376a <Hardware::GetUuid(unsigned char*)+0x2a>
 8013766:	b004      	add	sp, #16
 8013768:	4770      	bx	lr
 801376a:	f812 0b01 	ldrb.w	r0, [r2], #1
 801376e:	f803 0f01 	strb.w	r0, [r3, #1]!
 8013772:	e7f6      	b.n	8013762 <Hardware::GetUuid(unsigned char*)+0x22>
 8013774:	1ffff000 	svcne	0x00fff000

08013778 <Hardware::SetTime(tm const*)>:
 8013778:	2000      	movs	r0, #0
 801377a:	4770      	bx	lr

0801377c <Hardware::Reboot()>:
 801377c:	b508      	push	{r3, lr}
 801377e:	2300      	movs	r3, #0
 8013780:	4604      	mov	r4, r0
 8013782:	7003      	strb	r3, [r0, #0]
 8013784:	2104      	movs	r1, #4
 8013786:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801378a:	f000 ff3f 	bl	801460c <fwdgt_config>
 801378e:	4620      	mov	r0, r4
 8013790:	f7f4 fe18 	bl	80083c4 <Hardware::RebootHandler()>
 8013794:	2102      	movs	r1, #2
 8013796:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801379a:	f000 ff37 	bl	801460c <fwdgt_config>
 801379e:	2801      	cmp	r0, #1
 80137a0:	bf0c      	ite	eq
 80137a2:	2301      	moveq	r3, #1
 80137a4:	2300      	movne	r3, #0
 80137a6:	7023      	strb	r3, [r4, #0]
 80137a8:	d101      	bne.n	80137ae <Hardware::Reboot()+0x32>
 80137aa:	f000 ff1f 	bl	80145ec <fwdgt_enable>
 80137ae:	2208      	movs	r2, #8
 80137b0:	4b0d      	ldr	r3, [pc, #52]	; (80137e8 <Hardware::Reboot()+0x6c>)
 80137b2:	2501      	movs	r5, #1
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	480d      	ldr	r0, [pc, #52]	; (80137ec <Hardware::Reboot()+0x70>)
 80137b8:	601a      	str	r2, [r3, #0]
 80137ba:	227d      	movs	r2, #125	; 0x7d
 80137bc:	490c      	ldr	r1, [pc, #48]	; (80137f0 <Hardware::Reboot()+0x74>)
 80137be:	60da      	str	r2, [r3, #12]
 80137c0:	68dc      	ldr	r4, [r3, #12]
 80137c2:	b904      	cbnz	r4, 80137c6 <Hardware::Reboot()+0x4a>
 80137c4:	e7fe      	b.n	80137c4 <Hardware::Reboot()+0x48>
 80137c6:	6802      	ldr	r2, [r0, #0]
 80137c8:	695e      	ldr	r6, [r3, #20]
 80137ca:	1b92      	subs	r2, r2, r6
 80137cc:	4294      	cmp	r4, r2
 80137ce:	d8f8      	bhi.n	80137c2 <Hardware::Reboot()+0x46>
 80137d0:	6802      	ldr	r2, [r0, #0]
 80137d2:	615a      	str	r2, [r3, #20]
 80137d4:	691a      	ldr	r2, [r3, #16]
 80137d6:	2a01      	cmp	r2, #1
 80137d8:	f082 0401 	eor.w	r4, r2, #1
 80137dc:	611c      	str	r4, [r3, #16]
 80137de:	bf14      	ite	ne
 80137e0:	610d      	strne	r5, [r1, #16]
 80137e2:	614a      	streq	r2, [r1, #20]
 80137e4:	e7ec      	b.n	80137c0 <Hardware::Reboot()+0x44>
 80137e6:	bf00      	nop
 80137e8:	2000ac60 	andcs	sl, r0, r0, ror #24
 80137ec:	2000ac7c 	andcs	sl, r0, ip, ror ip
 80137f0:	40011000 	andmi	r1, r1, r0

080137f4 <operator delete(void*)>:
 80137f4:	f000 b890 	b.w	8013918 <free>

080137f8 <operator delete[](void*)>:
 80137f8:	f000 b88e 	b.w	8013918 <free>

080137fc <operator new(unsigned int)>:
 80137fc:	f000 b842 	b.w	8013884 <malloc>

08013800 <operator new[](unsigned int)>:
 8013800:	f000 b840 	b.w	8013884 <malloc>

08013804 <inet_aton>:
 8013804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013806:	f04f 0c0a 	mov.w	ip, #10
 801380a:	2500      	movs	r5, #0
 801380c:	ae01      	add	r6, sp, #4
 801380e:	4603      	mov	r3, r0
 8013810:	2200      	movs	r2, #0
 8013812:	1d07      	adds	r7, r0, #4
 8013814:	e007      	b.n	8013826 <inet_aton+0x22>
 8013816:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801381a:	2b09      	cmp	r3, #9
 801381c:	d820      	bhi.n	8013860 <inet_aton+0x5c>
 801381e:	4603      	mov	r3, r0
 8013820:	fb0c 4202 	mla	r2, ip, r2, r4
 8013824:	3a30      	subs	r2, #48	; 0x30
 8013826:	4618      	mov	r0, r3
 8013828:	f810 4b01 	ldrb.w	r4, [r0], #1
 801382c:	2c2e      	cmp	r4, #46	; 0x2e
 801382e:	d111      	bne.n	8013854 <inet_aton+0x50>
 8013830:	3501      	adds	r5, #1
 8013832:	2d03      	cmp	r5, #3
 8013834:	f806 2b01 	strb.w	r2, [r6], #1
 8013838:	d1e9      	bne.n	801380e <inet_aton+0xa>
 801383a:	2200      	movs	r2, #0
 801383c:	250a      	movs	r5, #10
 801383e:	1d1c      	adds	r4, r3, #4
 8013840:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8013844:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 8013848:	d10d      	bne.n	8013866 <inet_aton+0x62>
 801384a:	f88d 2007 	strb.w	r2, [sp, #7]
 801384e:	b9b1      	cbnz	r1, 801387e <inet_aton+0x7a>
 8013850:	2001      	movs	r0, #1
 8013852:	e006      	b.n	8013862 <inet_aton+0x5e>
 8013854:	2c00      	cmp	r4, #0
 8013856:	d0eb      	beq.n	8013830 <inet_aton+0x2c>
 8013858:	2c0a      	cmp	r4, #10
 801385a:	d0e9      	beq.n	8013830 <inet_aton+0x2c>
 801385c:	42b8      	cmp	r0, r7
 801385e:	d1da      	bne.n	8013816 <inet_aton+0x12>
 8013860:	2000      	movs	r0, #0
 8013862:	b003      	add	sp, #12
 8013864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013866:	280a      	cmp	r0, #10
 8013868:	d0ef      	beq.n	801384a <inet_aton+0x46>
 801386a:	42a3      	cmp	r3, r4
 801386c:	d0f8      	beq.n	8013860 <inet_aton+0x5c>
 801386e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 8013872:	2e09      	cmp	r6, #9
 8013874:	d8f4      	bhi.n	8013860 <inet_aton+0x5c>
 8013876:	fb05 0202 	mla	r2, r5, r2, r0
 801387a:	3a30      	subs	r2, #48	; 0x30
 801387c:	e7e0      	b.n	8013840 <inet_aton+0x3c>
 801387e:	9b01      	ldr	r3, [sp, #4]
 8013880:	600b      	str	r3, [r1, #0]
 8013882:	e7e5      	b.n	8013850 <inet_aton+0x4c>

08013884 <malloc>:
 8013884:	b538      	push	{r3, r4, r5, lr}
 8013886:	4604      	mov	r4, r0
 8013888:	4601      	mov	r1, r0
 801388a:	481c      	ldr	r0, [pc, #112]	; (80138fc <malloc+0x78>)
 801388c:	f000 fbaa 	bl	8013fe4 <printf>
 8013890:	b17c      	cbz	r4, 80138b2 <malloc+0x2e>
 8013892:	4b1b      	ldr	r3, [pc, #108]	; (8013900 <malloc+0x7c>)
 8013894:	6818      	ldr	r0, [r3, #0]
 8013896:	b978      	cbnz	r0, 80138b8 <malloc+0x34>
 8013898:	4a1a      	ldr	r2, [pc, #104]	; (8013904 <malloc+0x80>)
 801389a:	f104 031b 	add.w	r3, r4, #27
 801389e:	6811      	ldr	r1, [r2, #0]
 80138a0:	4819      	ldr	r0, [pc, #100]	; (8013908 <malloc+0x84>)
 80138a2:	f023 030f 	bic.w	r3, r3, #15
 80138a6:	440b      	add	r3, r1
 80138a8:	4283      	cmp	r3, r0
 80138aa:	d921      	bls.n	80138f0 <malloc+0x6c>
 80138ac:	4817      	ldr	r0, [pc, #92]	; (801390c <malloc+0x88>)
 80138ae:	f000 fb99 	bl	8013fe4 <printf>
 80138b2:	2500      	movs	r5, #0
 80138b4:	4628      	mov	r0, r5
 80138b6:	bd38      	pop	{r3, r4, r5, pc}
 80138b8:	4284      	cmp	r4, r0
 80138ba:	d80a      	bhi.n	80138d2 <malloc+0x4e>
 80138bc:	685a      	ldr	r2, [r3, #4]
 80138be:	6899      	ldr	r1, [r3, #8]
 80138c0:	3201      	adds	r2, #1
 80138c2:	428a      	cmp	r2, r1
 80138c4:	605a      	str	r2, [r3, #4]
 80138c6:	d900      	bls.n	80138ca <malloc+0x46>
 80138c8:	609a      	str	r2, [r3, #8]
 80138ca:	68d9      	ldr	r1, [r3, #12]
 80138cc:	b919      	cbnz	r1, 80138d6 <malloc+0x52>
 80138ce:	4604      	mov	r4, r0
 80138d0:	e7e2      	b.n	8013898 <malloc+0x14>
 80138d2:	3310      	adds	r3, #16
 80138d4:	e7de      	b.n	8013894 <malloc+0x10>
 80138d6:	4604      	mov	r4, r0
 80138d8:	688a      	ldr	r2, [r1, #8]
 80138da:	60da      	str	r2, [r3, #12]
 80138dc:	2300      	movs	r3, #0
 80138de:	f101 050c 	add.w	r5, r1, #12
 80138e2:	608b      	str	r3, [r1, #8]
 80138e4:	4622      	mov	r2, r4
 80138e6:	462b      	mov	r3, r5
 80138e8:	4809      	ldr	r0, [pc, #36]	; (8013910 <malloc+0x8c>)
 80138ea:	f000 fb7b 	bl	8013fe4 <printf>
 80138ee:	e7e1      	b.n	80138b4 <malloc+0x30>
 80138f0:	6013      	str	r3, [r2, #0]
 80138f2:	4b08      	ldr	r3, [pc, #32]	; (8013914 <malloc+0x90>)
 80138f4:	e9c1 3400 	strd	r3, r4, [r1]
 80138f8:	e7f0      	b.n	80138dc <malloc+0x58>
 80138fa:	bf00      	nop
 80138fc:	080187c0 	stmdaeq	r1, {r6, r7, r8, r9, sl, pc}
 8013900:	20000020 	andcs	r0, r0, r0, lsr #32
 8013904:	2000001c 	andcs	r0, r0, ip, lsl r0
 8013908:	2003d800 	andcs	sp, r3, r0, lsl #16
 801390c:	080187cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, sl, pc}
 8013910:	080187e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, r9, sl, pc}
 8013914:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08013918 <free>:
 8013918:	b538      	push	{r3, r4, r5, lr}
 801391a:	4604      	mov	r4, r0
 801391c:	b1c8      	cbz	r0, 8013952 <free+0x3a>
 801391e:	f1a0 050c 	sub.w	r5, r0, #12
 8013922:	4602      	mov	r2, r0
 8013924:	4629      	mov	r1, r5
 8013926:	480c      	ldr	r0, [pc, #48]	; (8013958 <free+0x40>)
 8013928:	f000 fb5c 	bl	8013fe4 <printf>
 801392c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8013930:	4b0a      	ldr	r3, [pc, #40]	; (801395c <free+0x44>)
 8013932:	429a      	cmp	r2, r3
 8013934:	d10d      	bne.n	8013952 <free+0x3a>
 8013936:	4b0a      	ldr	r3, [pc, #40]	; (8013960 <free+0x48>)
 8013938:	681a      	ldr	r2, [r3, #0]
 801393a:	b152      	cbz	r2, 8013952 <free+0x3a>
 801393c:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8013940:	4291      	cmp	r1, r2
 8013942:	d107      	bne.n	8013954 <free+0x3c>
 8013944:	68da      	ldr	r2, [r3, #12]
 8013946:	f844 2c04 	str.w	r2, [r4, #-4]
 801394a:	685a      	ldr	r2, [r3, #4]
 801394c:	60dd      	str	r5, [r3, #12]
 801394e:	3a01      	subs	r2, #1
 8013950:	605a      	str	r2, [r3, #4]
 8013952:	bd38      	pop	{r3, r4, r5, pc}
 8013954:	3310      	adds	r3, #16
 8013956:	e7ef      	b.n	8013938 <free+0x20>
 8013958:	08018813 	stmdaeq	r1, {r0, r1, r4, fp, pc}
 801395c:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8013960:	20000020 	andcs	r0, r0, r0, lsr #32

08013964 <memcpy>:
 8013964:	b510      	push	{r4, lr}
 8013966:	1e43      	subs	r3, r0, #1
 8013968:	440a      	add	r2, r1
 801396a:	4291      	cmp	r1, r2
 801396c:	d100      	bne.n	8013970 <memcpy+0xc>
 801396e:	bd10      	pop	{r4, pc}
 8013970:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013974:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013978:	e7f7      	b.n	801396a <memcpy+0x6>

0801397a <memmove>:
 801397a:	4288      	cmp	r0, r1
 801397c:	b510      	push	{r4, lr}
 801397e:	eb01 0302 	add.w	r3, r1, r2
 8013982:	d208      	bcs.n	8013996 <memmove+0x1c>
 8013984:	1e42      	subs	r2, r0, #1
 8013986:	4299      	cmp	r1, r3
 8013988:	d100      	bne.n	801398c <memmove+0x12>
 801398a:	bd10      	pop	{r4, pc}
 801398c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013990:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013994:	e7f7      	b.n	8013986 <memmove+0xc>
 8013996:	4601      	mov	r1, r0
 8013998:	4402      	add	r2, r0
 801399a:	428a      	cmp	r2, r1
 801399c:	d0f5      	beq.n	801398a <memmove+0x10>
 801399e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80139a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80139a6:	e7f8      	b.n	801399a <memmove+0x20>

080139a8 <memset>:
 80139a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139aa:	b1c2      	cbz	r2, 80139de <memset+0x36>
 80139ac:	4603      	mov	r3, r0
 80139ae:	b2c9      	uxtb	r1, r1
 80139b0:	075c      	lsls	r4, r3, #29
 80139b2:	d110      	bne.n	80139d6 <memset+0x2e>
 80139b4:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 80139b8:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 80139bc:	463d      	mov	r5, r7
 80139be:	461e      	mov	r6, r3
 80139c0:	f022 0407 	bic.w	r4, r2, #7
 80139c4:	441c      	add	r4, r3
 80139c6:	42a6      	cmp	r6, r4
 80139c8:	d10a      	bne.n	80139e0 <memset+0x38>
 80139ca:	4413      	add	r3, r2
 80139cc:	429c      	cmp	r4, r3
 80139ce:	d006      	beq.n	80139de <memset+0x36>
 80139d0:	f804 1b01 	strb.w	r1, [r4], #1
 80139d4:	e7fa      	b.n	80139cc <memset+0x24>
 80139d6:	3a01      	subs	r2, #1
 80139d8:	f803 1b01 	strb.w	r1, [r3], #1
 80139dc:	d1e8      	bne.n	80139b0 <memset+0x8>
 80139de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139e0:	f846 7b08 	str.w	r7, [r6], #8
 80139e4:	f846 5c04 	str.w	r5, [r6, #-4]
 80139e8:	e7ed      	b.n	80139c6 <memset+0x1e>

080139ea <_itostr>:
 80139ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139ec:	0fc7      	lsrs	r7, r0, #31
 80139ee:	b091      	sub	sp, #68	; 0x44
 80139f0:	bf18      	it	ne
 80139f2:	4240      	negne	r0, r0
 80139f4:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 80139f8:	b9c8      	cbnz	r0, 8013a2e <_itostr+0x44>
 80139fa:	2330      	movs	r3, #48	; 0x30
 80139fc:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8013a00:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8013a04:	b132      	cbz	r2, 8013a14 <_itostr+0x2a>
 8013a06:	4668      	mov	r0, sp
 8013a08:	2530      	movs	r5, #48	; 0x30
 8013a0a:	1ae6      	subs	r6, r4, r3
 8013a0c:	4296      	cmp	r6, r2
 8013a0e:	da01      	bge.n	8013a14 <_itostr+0x2a>
 8013a10:	4283      	cmp	r3, r0
 8013a12:	d81c      	bhi.n	8013a4e <_itostr+0x64>
 8013a14:	b117      	cbz	r7, 8013a1c <_itostr+0x32>
 8013a16:	222d      	movs	r2, #45	; 0x2d
 8013a18:	f803 2901 	strb.w	r2, [r3], #-1
 8013a1c:	3301      	adds	r3, #1
 8013a1e:	1ae0      	subs	r0, r4, r3
 8013a20:	3901      	subs	r1, #1
 8013a22:	aa10      	add	r2, sp, #64	; 0x40
 8013a24:	4293      	cmp	r3, r2
 8013a26:	d315      	bcc.n	8013a54 <_itostr+0x6a>
 8013a28:	3001      	adds	r0, #1
 8013a2a:	b011      	add	sp, #68	; 0x44
 8013a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a2e:	4623      	mov	r3, r4
 8013a30:	250a      	movs	r5, #10
 8013a32:	46ec      	mov	ip, sp
 8013a34:	fb90 f6f5 	sdiv	r6, r0, r5
 8013a38:	fb05 0016 	mls	r0, r5, r6, r0
 8013a3c:	3030      	adds	r0, #48	; 0x30
 8013a3e:	f803 0901 	strb.w	r0, [r3], #-1
 8013a42:	4630      	mov	r0, r6
 8013a44:	2e00      	cmp	r6, #0
 8013a46:	d0dd      	beq.n	8013a04 <_itostr+0x1a>
 8013a48:	4563      	cmp	r3, ip
 8013a4a:	d1f3      	bne.n	8013a34 <_itostr+0x4a>
 8013a4c:	e7da      	b.n	8013a04 <_itostr+0x1a>
 8013a4e:	f803 5901 	strb.w	r5, [r3], #-1
 8013a52:	e7da      	b.n	8013a0a <_itostr+0x20>
 8013a54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a58:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013a5c:	e7e1      	b.n	8013a22 <_itostr+0x38>
	...

08013a60 <_xputch>:
 8013a60:	4603      	mov	r3, r0
 8013a62:	b410      	push	{r4}
 8013a64:	4c08      	ldr	r4, [pc, #32]	; (8013a88 <_xputch+0x28>)
 8013a66:	68da      	ldr	r2, [r3, #12]
 8013a68:	4608      	mov	r0, r1
 8013a6a:	6821      	ldr	r1, [r4, #0]
 8013a6c:	3201      	adds	r2, #1
 8013a6e:	60da      	str	r2, [r3, #12]
 8013a70:	b139      	cbz	r1, 8013a82 <_xputch+0x22>
 8013a72:	691b      	ldr	r3, [r3, #16]
 8013a74:	429a      	cmp	r2, r3
 8013a76:	da02      	bge.n	8013a7e <_xputch+0x1e>
 8013a78:	1c4b      	adds	r3, r1, #1
 8013a7a:	6023      	str	r3, [r4, #0]
 8013a7c:	7008      	strb	r0, [r1, #0]
 8013a7e:	bc10      	pop	{r4}
 8013a80:	4770      	bx	lr
 8013a82:	bc10      	pop	{r4}
 8013a84:	f7ff bd20 	b.w	80134c8 <console_putc>
 8013a88:	2000ac68 	andcs	sl, r0, r8, ror #24

08013a8c <_format_int>:
 8013a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a90:	4698      	mov	r8, r3
 8013a92:	b091      	sub	sp, #68	; 0x44
 8013a94:	ea52 0308 	orrs.w	r3, r2, r8
 8013a98:	4606      	mov	r6, r0
 8013a9a:	4617      	mov	r7, r2
 8013a9c:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8013aa0:	d133      	bne.n	8013b0a <_format_int+0x7e>
 8013aa2:	2330      	movs	r3, #48	; 0x30
 8013aa4:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8013aa8:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8013aac:	6833      	ldr	r3, [r6, #0]
 8013aae:	07d8      	lsls	r0, r3, #31
 8013ab0:	d507      	bpl.n	8013ac2 <_format_int+0x36>
 8013ab2:	466a      	mov	r2, sp
 8013ab4:	2030      	movs	r0, #48	; 0x30
 8013ab6:	6871      	ldr	r1, [r6, #4]
 8013ab8:	1b2f      	subs	r7, r5, r4
 8013aba:	428f      	cmp	r7, r1
 8013abc:	da01      	bge.n	8013ac2 <_format_int+0x36>
 8013abe:	4294      	cmp	r4, r2
 8013ac0:	d839      	bhi.n	8013b36 <_format_int+0xaa>
 8013ac2:	0699      	lsls	r1, r3, #26
 8013ac4:	d507      	bpl.n	8013ad6 <_format_int+0x4a>
 8013ac6:	466a      	mov	r2, sp
 8013ac8:	2030      	movs	r0, #48	; 0x30
 8013aca:	68b1      	ldr	r1, [r6, #8]
 8013acc:	1b2f      	subs	r7, r5, r4
 8013ace:	428f      	cmp	r7, r1
 8013ad0:	da01      	bge.n	8013ad6 <_format_int+0x4a>
 8013ad2:	4294      	cmp	r4, r2
 8013ad4:	d832      	bhi.n	8013b3c <_format_int+0xb0>
 8013ad6:	071a      	lsls	r2, r3, #28
 8013ad8:	bf44      	itt	mi
 8013ada:	222d      	movmi	r2, #45	; 0x2d
 8013adc:	f804 2901 	strbmi.w	r2, [r4], #-1
 8013ae0:	065b      	lsls	r3, r3, #25
 8013ae2:	d407      	bmi.n	8013af4 <_format_int+0x68>
 8013ae4:	466b      	mov	r3, sp
 8013ae6:	2120      	movs	r1, #32
 8013ae8:	68b2      	ldr	r2, [r6, #8]
 8013aea:	1b28      	subs	r0, r5, r4
 8013aec:	4290      	cmp	r0, r2
 8013aee:	da01      	bge.n	8013af4 <_format_int+0x68>
 8013af0:	429c      	cmp	r4, r3
 8013af2:	d826      	bhi.n	8013b42 <_format_int+0xb6>
 8013af4:	1b2d      	subs	r5, r5, r4
 8013af6:	3401      	adds	r4, #1
 8013af8:	ab10      	add	r3, sp, #64	; 0x40
 8013afa:	429c      	cmp	r4, r3
 8013afc:	d324      	bcc.n	8013b48 <_format_int+0xbc>
 8013afe:	68b3      	ldr	r3, [r6, #8]
 8013b00:	42ab      	cmp	r3, r5
 8013b02:	dc27      	bgt.n	8013b54 <_format_int+0xc8>
 8013b04:	b011      	add	sp, #68	; 0x44
 8013b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b0a:	462c      	mov	r4, r5
 8013b0c:	46e9      	mov	r9, sp
 8013b0e:	4638      	mov	r0, r7
 8013b10:	4641      	mov	r1, r8
 8013b12:	220a      	movs	r2, #10
 8013b14:	2300      	movs	r3, #0
 8013b16:	f7f4 fabf 	bl	8008098 <__aeabi_uldivmod>
 8013b1a:	3230      	adds	r2, #48	; 0x30
 8013b1c:	f804 2901 	strb.w	r2, [r4], #-1
 8013b20:	463a      	mov	r2, r7
 8013b22:	4643      	mov	r3, r8
 8013b24:	2a0a      	cmp	r2, #10
 8013b26:	f173 0300 	sbcs.w	r3, r3, #0
 8013b2a:	4607      	mov	r7, r0
 8013b2c:	4688      	mov	r8, r1
 8013b2e:	d3bd      	bcc.n	8013aac <_format_int+0x20>
 8013b30:	454c      	cmp	r4, r9
 8013b32:	d1ec      	bne.n	8013b0e <_format_int+0x82>
 8013b34:	e7ba      	b.n	8013aac <_format_int+0x20>
 8013b36:	f804 0901 	strb.w	r0, [r4], #-1
 8013b3a:	e7bd      	b.n	8013ab8 <_format_int+0x2c>
 8013b3c:	f804 0901 	strb.w	r0, [r4], #-1
 8013b40:	e7c4      	b.n	8013acc <_format_int+0x40>
 8013b42:	f804 1901 	strb.w	r1, [r4], #-1
 8013b46:	e7d0      	b.n	8013aea <_format_int+0x5e>
 8013b48:	4630      	mov	r0, r6
 8013b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b4e:	f7ff ff87 	bl	8013a60 <_xputch>
 8013b52:	e7d1      	b.n	8013af8 <_format_int+0x6c>
 8013b54:	2120      	movs	r1, #32
 8013b56:	4630      	mov	r0, r6
 8013b58:	f7ff ff82 	bl	8013a60 <_xputch>
 8013b5c:	3501      	adds	r5, #1
 8013b5e:	e7ce      	b.n	8013afe <_format_int+0x72>

08013b60 <_format_hex>:
 8013b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b62:	b091      	sub	sp, #68	; 0x44
 8013b64:	4606      	mov	r6, r0
 8013b66:	6804      	ldr	r4, [r0, #0]
 8013b68:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8013b6c:	bb61      	cbnz	r1, 8013bc8 <_format_hex+0x68>
 8013b6e:	2330      	movs	r3, #48	; 0x30
 8013b70:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8013b74:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8013b78:	07e5      	lsls	r5, r4, #31
 8013b7a:	d507      	bpl.n	8013b8c <_format_hex+0x2c>
 8013b7c:	4669      	mov	r1, sp
 8013b7e:	2530      	movs	r5, #48	; 0x30
 8013b80:	6870      	ldr	r0, [r6, #4]
 8013b82:	1ad7      	subs	r7, r2, r3
 8013b84:	4287      	cmp	r7, r0
 8013b86:	da01      	bge.n	8013b8c <_format_hex+0x2c>
 8013b88:	428b      	cmp	r3, r1
 8013b8a:	d831      	bhi.n	8013bf0 <_format_hex+0x90>
 8013b8c:	06a0      	lsls	r0, r4, #26
 8013b8e:	d507      	bpl.n	8013ba0 <_format_hex+0x40>
 8013b90:	4669      	mov	r1, sp
 8013b92:	2530      	movs	r5, #48	; 0x30
 8013b94:	68b0      	ldr	r0, [r6, #8]
 8013b96:	1ad7      	subs	r7, r2, r3
 8013b98:	4287      	cmp	r7, r0
 8013b9a:	da01      	bge.n	8013ba0 <_format_hex+0x40>
 8013b9c:	428b      	cmp	r3, r1
 8013b9e:	d82a      	bhi.n	8013bf6 <_format_hex+0x96>
 8013ba0:	0661      	lsls	r1, r4, #25
 8013ba2:	d407      	bmi.n	8013bb4 <_format_hex+0x54>
 8013ba4:	4669      	mov	r1, sp
 8013ba6:	2420      	movs	r4, #32
 8013ba8:	68b0      	ldr	r0, [r6, #8]
 8013baa:	1ad5      	subs	r5, r2, r3
 8013bac:	4285      	cmp	r5, r0
 8013bae:	da01      	bge.n	8013bb4 <_format_hex+0x54>
 8013bb0:	428b      	cmp	r3, r1
 8013bb2:	d823      	bhi.n	8013bfc <_format_hex+0x9c>
 8013bb4:	1ad5      	subs	r5, r2, r3
 8013bb6:	1c5c      	adds	r4, r3, #1
 8013bb8:	ab10      	add	r3, sp, #64	; 0x40
 8013bba:	429c      	cmp	r4, r3
 8013bbc:	d321      	bcc.n	8013c02 <_format_hex+0xa2>
 8013bbe:	68b3      	ldr	r3, [r6, #8]
 8013bc0:	429d      	cmp	r5, r3
 8013bc2:	db24      	blt.n	8013c0e <_format_hex+0xae>
 8013bc4:	b011      	add	sp, #68	; 0x44
 8013bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bc8:	f014 0f02 	tst.w	r4, #2
 8013bcc:	bf0c      	ite	eq
 8013bce:	2757      	moveq	r7, #87	; 0x57
 8013bd0:	2737      	movne	r7, #55	; 0x37
 8013bd2:	4613      	mov	r3, r2
 8013bd4:	466d      	mov	r5, sp
 8013bd6:	f001 000f 	and.w	r0, r1, #15
 8013bda:	2809      	cmp	r0, #9
 8013bdc:	bf94      	ite	ls
 8013bde:	3030      	addls	r0, #48	; 0x30
 8013be0:	19c0      	addhi	r0, r0, r7
 8013be2:	0909      	lsrs	r1, r1, #4
 8013be4:	f803 0901 	strb.w	r0, [r3], #-1
 8013be8:	d0c6      	beq.n	8013b78 <_format_hex+0x18>
 8013bea:	42ab      	cmp	r3, r5
 8013bec:	d1f3      	bne.n	8013bd6 <_format_hex+0x76>
 8013bee:	e7c3      	b.n	8013b78 <_format_hex+0x18>
 8013bf0:	f803 5901 	strb.w	r5, [r3], #-1
 8013bf4:	e7c5      	b.n	8013b82 <_format_hex+0x22>
 8013bf6:	f803 5901 	strb.w	r5, [r3], #-1
 8013bfa:	e7cc      	b.n	8013b96 <_format_hex+0x36>
 8013bfc:	f803 4901 	strb.w	r4, [r3], #-1
 8013c00:	e7d3      	b.n	8013baa <_format_hex+0x4a>
 8013c02:	4630      	mov	r0, r6
 8013c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c08:	f7ff ff2a 	bl	8013a60 <_xputch>
 8013c0c:	e7d4      	b.n	8013bb8 <_format_hex+0x58>
 8013c0e:	2120      	movs	r1, #32
 8013c10:	4630      	mov	r0, r6
 8013c12:	f7ff ff25 	bl	8013a60 <_xputch>
 8013c16:	3501      	adds	r5, #1
 8013c18:	e7d1      	b.n	8013bbe <_format_hex+0x5e>
	...

08013c1c <_vprintf>:
 8013c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c20:	4614      	mov	r4, r2
 8013c22:	2200      	movs	r2, #0
 8013c24:	460b      	mov	r3, r1
 8013c26:	f04f 0800 	mov.w	r8, #0
 8013c2a:	b099      	sub	sp, #100	; 0x64
 8013c2c:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8013c30:	af08      	add	r7, sp, #32
 8013c32:	7819      	ldrb	r1, [r3, #0]
 8013c34:	b919      	cbnz	r1, 8013c3e <_vprintf+0x22>
 8013c36:	9806      	ldr	r0, [sp, #24]
 8013c38:	b019      	add	sp, #100	; 0x64
 8013c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c3e:	2925      	cmp	r1, #37	; 0x25
 8013c40:	f103 0601 	add.w	r6, r3, #1
 8013c44:	d004      	beq.n	8013c50 <_vprintf+0x34>
 8013c46:	a803      	add	r0, sp, #12
 8013c48:	f7ff ff0a 	bl	8013a60 <_xputch>
 8013c4c:	4633      	mov	r3, r6
 8013c4e:	e7f0      	b.n	8013c32 <_vprintf+0x16>
 8013c50:	2200      	movs	r2, #0
 8013c52:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8013c56:	9205      	str	r2, [sp, #20]
 8013c58:	785a      	ldrb	r2, [r3, #1]
 8013c5a:	2a30      	cmp	r2, #48	; 0x30
 8013c5c:	d129      	bne.n	8013cb2 <_vprintf+0x96>
 8013c5e:	2220      	movs	r2, #32
 8013c60:	9203      	str	r2, [sp, #12]
 8013c62:	1c9e      	adds	r6, r3, #2
 8013c64:	2200      	movs	r2, #0
 8013c66:	4635      	mov	r5, r6
 8013c68:	4613      	mov	r3, r2
 8013c6a:	f04f 0c0a 	mov.w	ip, #10
 8013c6e:	7829      	ldrb	r1, [r5, #0]
 8013c70:	462e      	mov	r6, r5
 8013c72:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8013c76:	2809      	cmp	r0, #9
 8013c78:	f105 0501 	add.w	r5, r5, #1
 8013c7c:	d91d      	bls.n	8013cba <_vprintf+0x9e>
 8013c7e:	b12a      	cbz	r2, 8013c8c <_vprintf+0x70>
 8013c80:	9305      	str	r3, [sp, #20]
 8013c82:	b11b      	cbz	r3, 8013c8c <_vprintf+0x70>
 8013c84:	9b03      	ldr	r3, [sp, #12]
 8013c86:	f043 0310 	orr.w	r3, r3, #16
 8013c8a:	9303      	str	r3, [sp, #12]
 8013c8c:	292e      	cmp	r1, #46	; 0x2e
 8013c8e:	d123      	bne.n	8013cd8 <_vprintf+0xbc>
 8013c90:	7873      	ldrb	r3, [r6, #1]
 8013c92:	2b2a      	cmp	r3, #42	; 0x2a
 8013c94:	d015      	beq.n	8013cc2 <_vprintf+0xa6>
 8013c96:	2100      	movs	r1, #0
 8013c98:	250a      	movs	r5, #10
 8013c9a:	460a      	mov	r2, r1
 8013c9c:	1c70      	adds	r0, r6, #1
 8013c9e:	7803      	ldrb	r3, [r0, #0]
 8013ca0:	4606      	mov	r6, r0
 8013ca2:	3b30      	subs	r3, #48	; 0x30
 8013ca4:	2b09      	cmp	r3, #9
 8013ca6:	f100 0001 	add.w	r0, r0, #1
 8013caa:	d959      	bls.n	8013d60 <_vprintf+0x144>
 8013cac:	b181      	cbz	r1, 8013cd0 <_vprintf+0xb4>
 8013cae:	9204      	str	r2, [sp, #16]
 8013cb0:	e00e      	b.n	8013cd0 <_vprintf+0xb4>
 8013cb2:	2a2d      	cmp	r2, #45	; 0x2d
 8013cb4:	d1d6      	bne.n	8013c64 <_vprintf+0x48>
 8013cb6:	2240      	movs	r2, #64	; 0x40
 8013cb8:	e7d2      	b.n	8013c60 <_vprintf+0x44>
 8013cba:	2201      	movs	r2, #1
 8013cbc:	fb0c 0303 	mla	r3, ip, r3, r0
 8013cc0:	e7d5      	b.n	8013c6e <_vprintf+0x52>
 8013cc2:	f854 3b04 	ldr.w	r3, [r4], #4
 8013cc6:	3602      	adds	r6, #2
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	bfb8      	it	lt
 8013ccc:	425b      	neglt	r3, r3
 8013cce:	9304      	str	r3, [sp, #16]
 8013cd0:	9b03      	ldr	r3, [sp, #12]
 8013cd2:	f043 0301 	orr.w	r3, r3, #1
 8013cd6:	9303      	str	r3, [sp, #12]
 8013cd8:	7833      	ldrb	r3, [r6, #0]
 8013cda:	2b6c      	cmp	r3, #108	; 0x6c
 8013cdc:	bf04      	itt	eq
 8013cde:	9b03      	ldreq	r3, [sp, #12]
 8013ce0:	3601      	addeq	r6, #1
 8013ce2:	7831      	ldrb	r1, [r6, #0]
 8013ce4:	bf04      	itt	eq
 8013ce6:	f043 0304 	orreq.w	r3, r3, #4
 8013cea:	9303      	streq	r3, [sp, #12]
 8013cec:	2958      	cmp	r1, #88	; 0x58
 8013cee:	f000 8171 	beq.w	8013fd4 <_vprintf+0x3b8>
 8013cf2:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8013cf6:	b2da      	uxtb	r2, r3
 8013cf8:	2a15      	cmp	r2, #21
 8013cfa:	d8a4      	bhi.n	8013c46 <_vprintf+0x2a>
 8013cfc:	2b15      	cmp	r3, #21
 8013cfe:	d8a2      	bhi.n	8013c46 <_vprintf+0x2a>
 8013d00:	a201      	add	r2, pc, #4	; (adr r2, 8013d08 <_vprintf+0xec>)
 8013d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d06:	bf00      	nop
 8013d08:	08013d69 	stmdaeq	r1, {r0, r3, r5, r6, r8, sl, fp, ip, sp}
 8013d0c:	08013d7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, sl, fp, ip, sp}
 8013d10:	08013c47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, ip, sp}
 8013d14:	08013db1 	stmdaeq	r1, {r0, r4, r5, r7, r8, sl, fp, ip, sp}
 8013d18:	08013c47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, ip, sp}
 8013d1c:	08013c47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, ip, sp}
 8013d20:	08013d7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, sl, fp, ip, sp}
 8013d24:	08013c47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, ip, sp}
 8013d28:	08013c47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, ip, sp}
 8013d2c:	08013c47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, ip, sp}
 8013d30:	08013c47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, ip, sp}
 8013d34:	08013c47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, ip, sp}
 8013d38:	08013c47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, ip, sp}
 8013d3c:	08013f17 	stmdaeq	r1, {r0, r1, r2, r4, r8, r9, sl, fp, ip, sp}
 8013d40:	08013c47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, ip, sp}
 8013d44:	08013c47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, ip, sp}
 8013d48:	08013f3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, r9, sl, fp, ip, sp}
 8013d4c:	08013c47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, ip, sp}
 8013d50:	08013fb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, sl, fp, ip, sp}
 8013d54:	08013c47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, ip, sp}
 8013d58:	08013c47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, ip, sp}
 8013d5c:	08013fdd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, sp}
 8013d60:	2101      	movs	r1, #1
 8013d62:	fb05 3202 	mla	r2, r5, r2, r3
 8013d66:	e79a      	b.n	8013c9e <_vprintf+0x82>
 8013d68:	4625      	mov	r5, r4
 8013d6a:	a803      	add	r0, sp, #12
 8013d6c:	f855 1b04 	ldr.w	r1, [r5], #4
 8013d70:	f7ff fe76 	bl	8013a60 <_xputch>
 8013d74:	462c      	mov	r4, r5
 8013d76:	3601      	adds	r6, #1
 8013d78:	e768      	b.n	8013c4c <_vprintf+0x30>
 8013d7a:	9903      	ldr	r1, [sp, #12]
 8013d7c:	074d      	lsls	r5, r1, #29
 8013d7e:	bf51      	iteee	pl
 8013d80:	4625      	movpl	r5, r4
 8013d82:	3407      	addmi	r4, #7
 8013d84:	f024 0407 	bicmi.w	r4, r4, #7
 8013d88:	4625      	movmi	r5, r4
 8013d8a:	bf55      	itete	pl
 8013d8c:	f855 2b04 	ldrpl.w	r2, [r5], #4
 8013d90:	6863      	ldrmi	r3, [r4, #4]
 8013d92:	17d3      	asrpl	r3, r2, #31
 8013d94:	f855 2b08 	ldrmi.w	r2, [r5], #8
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	da05      	bge.n	8013da8 <_vprintf+0x18c>
 8013d9c:	f041 0108 	orr.w	r1, r1, #8
 8013da0:	4252      	negs	r2, r2
 8013da2:	9103      	str	r1, [sp, #12]
 8013da4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8013da8:	a803      	add	r0, sp, #12
 8013daa:	f7ff fe6f 	bl	8013a8c <_format_int>
 8013dae:	e7e1      	b.n	8013d74 <_vprintf+0x158>
 8013db0:	3407      	adds	r4, #7
 8013db2:	f024 0507 	bic.w	r5, r4, #7
 8013db6:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8013dba:	f7f3 ff73 	bl	8007ca4 <__aeabi_d2f>
 8013dbe:	9b03      	ldr	r3, [sp, #12]
 8013dc0:	4641      	mov	r1, r8
 8013dc2:	07dc      	lsls	r4, r3, #31
 8013dc4:	bf54      	ite	pl
 8013dc6:	f04f 0a06 	movpl.w	sl, #6
 8013dca:	f8dd a010 	ldrmi.w	sl, [sp, #16]
 8013dce:	4681      	mov	r9, r0
 8013dd0:	f7f4 f914 	bl	8007ffc <__aeabi_fcmplt>
 8013dd4:	2800      	cmp	r0, #0
 8013dd6:	d063      	beq.n	8013ea0 <_vprintf+0x284>
 8013dd8:	232d      	movs	r3, #45	; 0x2d
 8013dda:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 8013dde:	f88d 3020 	strb.w	r3, [sp, #32]
 8013de2:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
 8013de6:	4648      	mov	r0, r9
 8013de8:	f7f4 f930 	bl	800804c <__aeabi_f2iz>
 8013dec:	4659      	mov	r1, fp
 8013dee:	2200      	movs	r2, #0
 8013df0:	4604      	mov	r4, r0
 8013df2:	f7ff fdfa 	bl	80139ea <_itostr>
 8013df6:	eb0b 0200 	add.w	r2, fp, r0
 8013dfa:	e9cd 2000 	strd	r2, r0, [sp]
 8013dfe:	4620      	mov	r0, r4
 8013e00:	f7f4 f85a 	bl	8007eb8 <__aeabi_i2f>
 8013e04:	4601      	mov	r1, r0
 8013e06:	4648      	mov	r0, r9
 8013e08:	f7f3 ffa0 	bl	8007d4c <__aeabi_fsub>
 8013e0c:	222e      	movs	r2, #46	; 0x2e
 8013e0e:	4601      	mov	r1, r0
 8013e10:	200a      	movs	r0, #10
 8013e12:	9b00      	ldr	r3, [sp, #0]
 8013e14:	f10a 0901 	add.w	r9, sl, #1
 8013e18:	1c5c      	adds	r4, r3, #1
 8013e1a:	9b01      	ldr	r3, [sp, #4]
 8013e1c:	f80b 2003 	strb.w	r2, [fp, r3]
 8013e20:	4603      	mov	r3, r0
 8013e22:	f1ba 0f00 	cmp.w	sl, #0
 8013e26:	dc3d      	bgt.n	8013ea4 <_vprintf+0x288>
 8013e28:	9100      	str	r1, [sp, #0]
 8013e2a:	f7f4 f845 	bl	8007eb8 <__aeabi_i2f>
 8013e2e:	9900      	ldr	r1, [sp, #0]
 8013e30:	f7f3 fe84 	bl	8007b3c <__aeabi_fmul>
 8013e34:	f7f4 f90a 	bl	800804c <__aeabi_f2iz>
 8013e38:	464a      	mov	r2, r9
 8013e3a:	4621      	mov	r1, r4
 8013e3c:	f7ff fdd5 	bl	80139ea <_itostr>
 8013e40:	4404      	add	r4, r0
 8013e42:	1be0      	subs	r0, r4, r7
 8013e44:	1e44      	subs	r4, r0, #1
 8013e46:	5d3b      	ldrb	r3, [r7, r4]
 8013e48:	193a      	adds	r2, r7, r4
 8013e4a:	2b34      	cmp	r3, #52	; 0x34
 8013e4c:	d910      	bls.n	8013e70 <_vprintf+0x254>
 8013e4e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8013e52:	1e53      	subs	r3, r2, #1
 8013e54:	292e      	cmp	r1, #46	; 0x2e
 8013e56:	d02c      	beq.n	8013eb2 <_vprintf+0x296>
 8013e58:	469c      	mov	ip, r3
 8013e5a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8013e5e:	4663      	mov	r3, ip
 8013e60:	f81c 1901 	ldrb.w	r1, [ip], #-1
 8013e64:	2939      	cmp	r1, #57	; 0x39
 8013e66:	d021      	beq.n	8013eac <_vprintf+0x290>
 8013e68:	292e      	cmp	r1, #46	; 0x2e
 8013e6a:	d022      	beq.n	8013eb2 <_vprintf+0x296>
 8013e6c:	3101      	adds	r1, #1
 8013e6e:	7019      	strb	r1, [r3, #0]
 8013e70:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8013e74:	446b      	add	r3, sp
 8013e76:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 8013e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8013e7c:	bf08      	it	eq
 8013e7e:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8013e82:	46a1      	mov	r9, r4
 8013e84:	9b05      	ldr	r3, [sp, #20]
 8013e86:	4599      	cmp	r9, r3
 8013e88:	db3e      	blt.n	8013f08 <_vprintf+0x2ec>
 8013e8a:	46b9      	mov	r9, r7
 8013e8c:	2c00      	cmp	r4, #0
 8013e8e:	f77f af71 	ble.w	8013d74 <_vprintf+0x158>
 8013e92:	f819 1b01 	ldrb.w	r1, [r9], #1
 8013e96:	a803      	add	r0, sp, #12
 8013e98:	f7ff fde2 	bl	8013a60 <_xputch>
 8013e9c:	3c01      	subs	r4, #1
 8013e9e:	e7f5      	b.n	8013e8c <_vprintf+0x270>
 8013ea0:	46bb      	mov	fp, r7
 8013ea2:	e7a0      	b.n	8013de6 <_vprintf+0x1ca>
 8013ea4:	4358      	muls	r0, r3
 8013ea6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013eaa:	e7ba      	b.n	8013e22 <_vprintf+0x206>
 8013eac:	f88c e001 	strb.w	lr, [ip, #1]
 8013eb0:	e7d5      	b.n	8013e5e <_vprintf+0x242>
 8013eb2:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8013eb6:	3b01      	subs	r3, #1
 8013eb8:	7819      	ldrb	r1, [r3, #0]
 8013eba:	2939      	cmp	r1, #57	; 0x39
 8013ebc:	d112      	bne.n	8013ee4 <_vprintf+0x2c8>
 8013ebe:	42bb      	cmp	r3, r7
 8013ec0:	d20d      	bcs.n	8013ede <_vprintf+0x2c2>
 8013ec2:	1c5c      	adds	r4, r3, #1
 8013ec4:	1c99      	adds	r1, r3, #2
 8013ec6:	428c      	cmp	r4, r1
 8013ec8:	eba2 0203 	sub.w	r2, r2, r3
 8013ecc:	d913      	bls.n	8013ef6 <_vprintf+0x2da>
 8013ece:	4619      	mov	r1, r3
 8013ed0:	441a      	add	r2, r3
 8013ed2:	428a      	cmp	r2, r1
 8013ed4:	d10b      	bne.n	8013eee <_vprintf+0x2d2>
 8013ed6:	2231      	movs	r2, #49	; 0x31
 8013ed8:	4604      	mov	r4, r0
 8013eda:	705a      	strb	r2, [r3, #1]
 8013edc:	e7c8      	b.n	8013e70 <_vprintf+0x254>
 8013ede:	f803 c901 	strb.w	ip, [r3], #-1
 8013ee2:	e7e9      	b.n	8013eb8 <_vprintf+0x29c>
 8013ee4:	42bb      	cmp	r3, r7
 8013ee6:	d3ec      	bcc.n	8013ec2 <_vprintf+0x2a6>
 8013ee8:	292d      	cmp	r1, #45	; 0x2d
 8013eea:	d0ea      	beq.n	8013ec2 <_vprintf+0x2a6>
 8013eec:	e7be      	b.n	8013e6c <_vprintf+0x250>
 8013eee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013ef2:	704c      	strb	r4, [r1, #1]
 8013ef4:	e7ed      	b.n	8013ed2 <_vprintf+0x2b6>
 8013ef6:	4414      	add	r4, r2
 8013ef8:	440a      	add	r2, r1
 8013efa:	428a      	cmp	r2, r1
 8013efc:	d0eb      	beq.n	8013ed6 <_vprintf+0x2ba>
 8013efe:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
 8013f02:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8013f06:	e7f8      	b.n	8013efa <_vprintf+0x2de>
 8013f08:	2120      	movs	r1, #32
 8013f0a:	a803      	add	r0, sp, #12
 8013f0c:	f7ff fda8 	bl	8013a60 <_xputch>
 8013f10:	f109 0901 	add.w	r9, r9, #1
 8013f14:	e7b6      	b.n	8013e84 <_vprintf+0x268>
 8013f16:	2308      	movs	r3, #8
 8013f18:	4625      	mov	r5, r4
 8013f1a:	9305      	str	r3, [sp, #20]
 8013f1c:	2320      	movs	r3, #32
 8013f1e:	2130      	movs	r1, #48	; 0x30
 8013f20:	f855 4b04 	ldr.w	r4, [r5], #4
 8013f24:	a803      	add	r0, sp, #12
 8013f26:	9303      	str	r3, [sp, #12]
 8013f28:	f7ff fd9a 	bl	8013a60 <_xputch>
 8013f2c:	2178      	movs	r1, #120	; 0x78
 8013f2e:	a803      	add	r0, sp, #12
 8013f30:	f7ff fd96 	bl	8013a60 <_xputch>
 8013f34:	4621      	mov	r1, r4
 8013f36:	a803      	add	r0, sp, #12
 8013f38:	f7ff fe12 	bl	8013b60 <_format_hex>
 8013f3c:	e71a      	b.n	8013d74 <_vprintf+0x158>
 8013f3e:	4625      	mov	r5, r4
 8013f40:	2400      	movs	r4, #0
 8013f42:	f855 9b04 	ldr.w	r9, [r5], #4
 8013f46:	f819 3004 	ldrb.w	r3, [r9, r4]
 8013f4a:	b993      	cbnz	r3, 8013f72 <_vprintf+0x356>
 8013f4c:	9b03      	ldr	r3, [sp, #12]
 8013f4e:	07d9      	lsls	r1, r3, #31
 8013f50:	d503      	bpl.n	8013f5a <_vprintf+0x33e>
 8013f52:	9b04      	ldr	r3, [sp, #16]
 8013f54:	429c      	cmp	r4, r3
 8013f56:	bfa8      	it	ge
 8013f58:	461c      	movge	r4, r3
 8013f5a:	9b03      	ldr	r3, [sp, #12]
 8013f5c:	f104 0a01 	add.w	sl, r4, #1
 8013f60:	065a      	lsls	r2, r3, #25
 8013f62:	d403      	bmi.n	8013f6c <_vprintf+0x350>
 8013f64:	9b05      	ldr	r3, [sp, #20]
 8013f66:	429c      	cmp	r4, r3
 8013f68:	db05      	blt.n	8013f76 <_vprintf+0x35a>
 8013f6a:	4654      	mov	r4, sl
 8013f6c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8013f70:	e00d      	b.n	8013f8e <_vprintf+0x372>
 8013f72:	3401      	adds	r4, #1
 8013f74:	e7e7      	b.n	8013f46 <_vprintf+0x32a>
 8013f76:	2120      	movs	r1, #32
 8013f78:	a803      	add	r0, sp, #12
 8013f7a:	f7ff fd71 	bl	8013a60 <_xputch>
 8013f7e:	4654      	mov	r4, sl
 8013f80:	e7eb      	b.n	8013f5a <_vprintf+0x33e>
 8013f82:	a803      	add	r0, sp, #12
 8013f84:	f7ff fd6c 	bl	8013a60 <_xputch>
 8013f88:	9b04      	ldr	r3, [sp, #16]
 8013f8a:	3b01      	subs	r3, #1
 8013f8c:	9304      	str	r3, [sp, #16]
 8013f8e:	9b03      	ldr	r3, [sp, #12]
 8013f90:	07db      	lsls	r3, r3, #31
 8013f92:	d501      	bpl.n	8013f98 <_vprintf+0x37c>
 8013f94:	9b04      	ldr	r3, [sp, #16]
 8013f96:	b11b      	cbz	r3, 8013fa0 <_vprintf+0x384>
 8013f98:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8013f9c:	2900      	cmp	r1, #0
 8013f9e:	d1f0      	bne.n	8013f82 <_vprintf+0x366>
 8013fa0:	9b05      	ldr	r3, [sp, #20]
 8013fa2:	429c      	cmp	r4, r3
 8013fa4:	f6bf aee6 	bge.w	8013d74 <_vprintf+0x158>
 8013fa8:	2120      	movs	r1, #32
 8013faa:	a803      	add	r0, sp, #12
 8013fac:	f7ff fd58 	bl	8013a60 <_xputch>
 8013fb0:	3401      	adds	r4, #1
 8013fb2:	e7f5      	b.n	8013fa0 <_vprintf+0x384>
 8013fb4:	9b03      	ldr	r3, [sp, #12]
 8013fb6:	f013 0304 	ands.w	r3, r3, #4
 8013fba:	bf1d      	ittte	ne
 8013fbc:	3407      	addne	r4, #7
 8013fbe:	f024 0407 	bicne.w	r4, r4, #7
 8013fc2:	4625      	movne	r5, r4
 8013fc4:	4625      	moveq	r5, r4
 8013fc6:	bf1a      	itte	ne
 8013fc8:	f855 2b08 	ldrne.w	r2, [r5], #8
 8013fcc:	6863      	ldrne	r3, [r4, #4]
 8013fce:	f855 2b04 	ldreq.w	r2, [r5], #4
 8013fd2:	e6e9      	b.n	8013da8 <_vprintf+0x18c>
 8013fd4:	9b03      	ldr	r3, [sp, #12]
 8013fd6:	f043 0302 	orr.w	r3, r3, #2
 8013fda:	9303      	str	r3, [sp, #12]
 8013fdc:	4625      	mov	r5, r4
 8013fde:	f855 1b04 	ldr.w	r1, [r5], #4
 8013fe2:	e7a8      	b.n	8013f36 <_vprintf+0x31a>

08013fe4 <printf>:
 8013fe4:	b40f      	push	{r0, r1, r2, r3}
 8013fe6:	b507      	push	{r0, r1, r2, lr}
 8013fe8:	aa04      	add	r2, sp, #16
 8013fea:	f852 1b04 	ldr.w	r1, [r2], #4
 8013fee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013ff2:	9201      	str	r2, [sp, #4]
 8013ff4:	f7ff fe12 	bl	8013c1c <_vprintf>
 8013ff8:	b003      	add	sp, #12
 8013ffa:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ffe:	b004      	add	sp, #16
 8014000:	4770      	bx	lr
	...

08014004 <sprintf>:
 8014004:	b40e      	push	{r1, r2, r3}
 8014006:	b517      	push	{r0, r1, r2, r4, lr}
 8014008:	4c09      	ldr	r4, [pc, #36]	; (8014030 <sprintf+0x2c>)
 801400a:	aa05      	add	r2, sp, #20
 801400c:	f852 1b04 	ldr.w	r1, [r2], #4
 8014010:	6020      	str	r0, [r4, #0]
 8014012:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8014016:	9201      	str	r2, [sp, #4]
 8014018:	f7ff fe00 	bl	8013c1c <_vprintf>
 801401c:	2300      	movs	r3, #0
 801401e:	6822      	ldr	r2, [r4, #0]
 8014020:	6023      	str	r3, [r4, #0]
 8014022:	7013      	strb	r3, [r2, #0]
 8014024:	b003      	add	sp, #12
 8014026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801402a:	b003      	add	sp, #12
 801402c:	4770      	bx	lr
 801402e:	bf00      	nop
 8014030:	2000ac68 	andcs	sl, r0, r8, ror #24

08014034 <snprintf>:
 8014034:	b40c      	push	{r2, r3}
 8014036:	460b      	mov	r3, r1
 8014038:	b513      	push	{r0, r1, r4, lr}
 801403a:	4c09      	ldr	r4, [pc, #36]	; (8014060 <snprintf+0x2c>)
 801403c:	aa04      	add	r2, sp, #16
 801403e:	f852 1b04 	ldr.w	r1, [r2], #4
 8014042:	6020      	str	r0, [r4, #0]
 8014044:	4618      	mov	r0, r3
 8014046:	9201      	str	r2, [sp, #4]
 8014048:	f7ff fde8 	bl	8013c1c <_vprintf>
 801404c:	2300      	movs	r3, #0
 801404e:	6822      	ldr	r2, [r4, #0]
 8014050:	6023      	str	r3, [r4, #0]
 8014052:	7013      	strb	r3, [r2, #0]
 8014054:	b002      	add	sp, #8
 8014056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801405a:	b002      	add	sp, #8
 801405c:	4770      	bx	lr
 801405e:	bf00      	nop
 8014060:	2000ac68 	andcs	sl, r0, r8, ror #24

08014064 <vsnprintf>:
 8014064:	b538      	push	{r3, r4, r5, lr}
 8014066:	4605      	mov	r5, r0
 8014068:	4c05      	ldr	r4, [pc, #20]	; (8014080 <vsnprintf+0x1c>)
 801406a:	4608      	mov	r0, r1
 801406c:	4611      	mov	r1, r2
 801406e:	461a      	mov	r2, r3
 8014070:	6025      	str	r5, [r4, #0]
 8014072:	f7ff fdd3 	bl	8013c1c <_vprintf>
 8014076:	2300      	movs	r3, #0
 8014078:	6822      	ldr	r2, [r4, #0]
 801407a:	6023      	str	r3, [r4, #0]
 801407c:	7013      	strb	r3, [r2, #0]
 801407e:	bd38      	pop	{r3, r4, r5, pc}
 8014080:	2000ac68 	andcs	sl, r0, r8, ror #24

08014084 <puts>:
 8014084:	b508      	push	{r3, lr}
 8014086:	f7ff fa21 	bl	80134cc <console_puts>
 801408a:	200a      	movs	r0, #10
 801408c:	f7ff fa1c 	bl	80134c8 <console_putc>
 8014090:	2001      	movs	r0, #1
 8014092:	bd08      	pop	{r3, pc}

08014094 <strtok>:
 8014094:	b530      	push	{r4, r5, lr}
 8014096:	b910      	cbnz	r0, 801409e <strtok+0xa>
 8014098:	4b12      	ldr	r3, [pc, #72]	; (80140e4 <strtok+0x50>)
 801409a:	6818      	ldr	r0, [r3, #0]
 801409c:	b158      	cbz	r0, 80140b6 <strtok+0x22>
 801409e:	4603      	mov	r3, r0
 80140a0:	460d      	mov	r5, r1
 80140a2:	4618      	mov	r0, r3
 80140a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80140a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80140ac:	b924      	cbnz	r4, 80140b8 <strtok+0x24>
 80140ae:	b94a      	cbnz	r2, 80140c4 <strtok+0x30>
 80140b0:	4610      	mov	r0, r2
 80140b2:	4b0c      	ldr	r3, [pc, #48]	; (80140e4 <strtok+0x50>)
 80140b4:	601a      	str	r2, [r3, #0]
 80140b6:	bd30      	pop	{r4, r5, pc}
 80140b8:	42a2      	cmp	r2, r4
 80140ba:	d1f5      	bne.n	80140a8 <strtok+0x14>
 80140bc:	e7f0      	b.n	80140a0 <strtok+0xc>
 80140be:	4613      	mov	r3, r2
 80140c0:	e00c      	b.n	80140dc <strtok+0x48>
 80140c2:	b914      	cbnz	r4, 80140ca <strtok+0x36>
 80140c4:	460d      	mov	r5, r1
 80140c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80140ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80140ce:	42a2      	cmp	r2, r4
 80140d0:	d1f7      	bne.n	80140c2 <strtok+0x2e>
 80140d2:	2a00      	cmp	r2, #0
 80140d4:	d0f3      	beq.n	80140be <strtok+0x2a>
 80140d6:	2200      	movs	r2, #0
 80140d8:	f803 2c01 	strb.w	r2, [r3, #-1]
 80140dc:	4a01      	ldr	r2, [pc, #4]	; (80140e4 <strtok+0x50>)
 80140de:	6013      	str	r3, [r2, #0]
 80140e0:	e7e9      	b.n	80140b6 <strtok+0x22>
 80140e2:	bf00      	nop
 80140e4:	2000ac6c 	andcs	sl, r0, ip, ror #24

080140e8 <isleapyear>:
 80140e8:	2264      	movs	r2, #100	; 0x64
 80140ea:	fb90 f3f2 	sdiv	r3, r0, r2
 80140ee:	fb02 0313 	mls	r3, r2, r3, r0
 80140f2:	b94b      	cbnz	r3, 8014108 <isleapyear+0x20>
 80140f4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80140f8:	fb90 f2f3 	sdiv	r2, r0, r3
 80140fc:	fb03 0012 	mls	r0, r3, r2, r0
 8014100:	fab0 f080 	clz	r0, r0
 8014104:	0940      	lsrs	r0, r0, #5
 8014106:	4770      	bx	lr
 8014108:	f010 0f03 	tst.w	r0, #3
 801410c:	bf0c      	ite	eq
 801410e:	2001      	moveq	r0, #1
 8014110:	2000      	movne	r0, #0
 8014112:	4770      	bx	lr

08014114 <getdaysofmonth>:
 8014114:	b510      	push	{r4, lr}
 8014116:	4604      	mov	r4, r0
 8014118:	2c01      	cmp	r4, #1
 801411a:	4608      	mov	r0, r1
 801411c:	d102      	bne.n	8014124 <getdaysofmonth+0x10>
 801411e:	f7ff ffe3 	bl	80140e8 <isleapyear>
 8014122:	b918      	cbnz	r0, 801412c <getdaysofmonth+0x18>
 8014124:	4b02      	ldr	r3, [pc, #8]	; (8014130 <getdaysofmonth+0x1c>)
 8014126:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801412a:	bd10      	pop	{r4, pc}
 801412c:	201d      	movs	r0, #29
 801412e:	e7fc      	b.n	801412a <getdaysofmonth+0x16>
 8014130:	0801883c 	stmdaeq	r1, {r2, r3, r4, r5, fp, pc}

08014134 <mktime>:
 8014134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014138:	4604      	mov	r4, r0
 801413a:	2800      	cmp	r0, #0
 801413c:	d043      	beq.n	80141c6 <mktime+0x92>
 801413e:	6941      	ldr	r1, [r0, #20]
 8014140:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8014144:	2b45      	cmp	r3, #69	; 0x45
 8014146:	d83e      	bhi.n	80141c6 <mktime+0x92>
 8014148:	2600      	movs	r6, #0
 801414a:	f240 75b2 	movw	r5, #1970	; 0x7b2
 801414e:	f240 186d 	movw	r8, #365	; 0x16d
 8014152:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 8014156:	42af      	cmp	r7, r5
 8014158:	da24      	bge.n	80141a4 <mktime+0x70>
 801415a:	6927      	ldr	r7, [r4, #16]
 801415c:	2f0b      	cmp	r7, #11
 801415e:	d832      	bhi.n	80141c6 <mktime+0x92>
 8014160:	2500      	movs	r5, #0
 8014162:	42af      	cmp	r7, r5
 8014164:	d129      	bne.n	80141ba <mktime+0x86>
 8014166:	68e5      	ldr	r5, [r4, #12]
 8014168:	2d00      	cmp	r5, #0
 801416a:	dd2c      	ble.n	80141c6 <mktime+0x92>
 801416c:	4638      	mov	r0, r7
 801416e:	f7ff ffd1 	bl	8014114 <getdaysofmonth>
 8014172:	4285      	cmp	r5, r0
 8014174:	dc27      	bgt.n	80141c6 <mktime+0x92>
 8014176:	2318      	movs	r3, #24
 8014178:	3d01      	subs	r5, #1
 801417a:	4435      	add	r5, r6
 801417c:	435d      	muls	r5, r3
 801417e:	68a3      	ldr	r3, [r4, #8]
 8014180:	2b17      	cmp	r3, #23
 8014182:	d820      	bhi.n	80141c6 <mktime+0x92>
 8014184:	213c      	movs	r1, #60	; 0x3c
 8014186:	442b      	add	r3, r5
 8014188:	fb01 f203 	mul.w	r2, r1, r3
 801418c:	6863      	ldr	r3, [r4, #4]
 801418e:	2b3b      	cmp	r3, #59	; 0x3b
 8014190:	d819      	bhi.n	80141c6 <mktime+0x92>
 8014192:	6820      	ldr	r0, [r4, #0]
 8014194:	4413      	add	r3, r2
 8014196:	283b      	cmp	r0, #59	; 0x3b
 8014198:	fb01 f303 	mul.w	r3, r1, r3
 801419c:	d813      	bhi.n	80141c6 <mktime+0x92>
 801419e:	4418      	add	r0, r3
 80141a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141a4:	4628      	mov	r0, r5
 80141a6:	f7ff ff9f 	bl	80140e8 <isleapyear>
 80141aa:	2800      	cmp	r0, #0
 80141ac:	bf14      	ite	ne
 80141ae:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 80141b2:	4643      	moveq	r3, r8
 80141b4:	3501      	adds	r5, #1
 80141b6:	441e      	add	r6, r3
 80141b8:	e7cd      	b.n	8014156 <mktime+0x22>
 80141ba:	4628      	mov	r0, r5
 80141bc:	f7ff ffaa 	bl	8014114 <getdaysofmonth>
 80141c0:	3501      	adds	r5, #1
 80141c2:	4406      	add	r6, r0
 80141c4:	e7cd      	b.n	8014162 <mktime+0x2e>
 80141c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80141ca:	e7e9      	b.n	80141a0 <mktime+0x6c>

080141cc <gettimeofday>:
 80141cc:	b538      	push	{r3, r4, r5, lr}
 80141ce:	4b10      	ldr	r3, [pc, #64]	; (8014210 <gettimeofday+0x44>)
 80141d0:	4a10      	ldr	r2, [pc, #64]	; (8014214 <gettimeofday+0x48>)
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	6814      	ldr	r4, [r2, #0]
 80141d6:	6013      	str	r3, [r2, #0]
 80141d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80141dc:	429c      	cmp	r4, r3
 80141de:	bf2c      	ite	cs
 80141e0:	1ae4      	subcs	r4, r4, r3
 80141e2:	1b1c      	subcc	r4, r3, r4
 80141e4:	4354      	muls	r4, r2
 80141e6:	4b0c      	ldr	r3, [pc, #48]	; (8014218 <gettimeofday+0x4c>)
 80141e8:	4605      	mov	r5, r0
 80141ea:	e9d3 2100 	ldrd	r2, r1, [r3]
 80141ee:	18a4      	adds	r4, r4, r2
 80141f0:	f141 0100 	adc.w	r1, r1, #0
 80141f4:	e9c3 4100 	strd	r4, r1, [r3]
 80141f8:	4620      	mov	r0, r4
 80141fa:	2300      	movs	r3, #0
 80141fc:	4a07      	ldr	r2, [pc, #28]	; (801421c <gettimeofday+0x50>)
 80141fe:	f7f3 ff4b 	bl	8008098 <__aeabi_uldivmod>
 8014202:	4b06      	ldr	r3, [pc, #24]	; (801421c <gettimeofday+0x50>)
 8014204:	6028      	str	r0, [r5, #0]
 8014206:	fb03 4410 	mls	r4, r3, r0, r4
 801420a:	2000      	movs	r0, #0
 801420c:	606c      	str	r4, [r5, #4]
 801420e:	bd38      	pop	{r3, r4, r5, pc}
 8014210:	2000ac7c 	andcs	sl, r0, ip, ror ip
 8014214:	2000ac78 	andcs	sl, r0, r8, ror ip
 8014218:	2000ac70 	andcs	sl, r0, r0, ror ip
 801421c:	000f4240 	andeq	r4, pc, r0, asr #4

08014220 <settimeofday>:
 8014220:	4b07      	ldr	r3, [pc, #28]	; (8014240 <settimeofday+0x20>)
 8014222:	b510      	push	{r4, lr}
 8014224:	681a      	ldr	r2, [r3, #0]
 8014226:	4b07      	ldr	r3, [pc, #28]	; (8014244 <settimeofday+0x24>)
 8014228:	6804      	ldr	r4, [r0, #0]
 801422a:	601a      	str	r2, [r3, #0]
 801422c:	6843      	ldr	r3, [r0, #4]
 801422e:	4806      	ldr	r0, [pc, #24]	; (8014248 <settimeofday+0x28>)
 8014230:	17da      	asrs	r2, r3, #31
 8014232:	fbc4 3200 	smlal	r3, r2, r4, r0
 8014236:	4905      	ldr	r1, [pc, #20]	; (801424c <settimeofday+0x2c>)
 8014238:	2000      	movs	r0, #0
 801423a:	e9c1 3200 	strd	r3, r2, [r1]
 801423e:	bd10      	pop	{r4, pc}
 8014240:	2000ac7c 	andcs	sl, r0, ip, ror ip
 8014244:	2000ac78 	andcs	sl, r0, r8, ror ip
 8014248:	000f4240 	andeq	r4, pc, r0, asr #4
 801424c:	2000ac70 	andcs	sl, r0, r0, ror ip

08014250 <time>:
 8014250:	b513      	push	{r0, r1, r4, lr}
 8014252:	4604      	mov	r4, r0
 8014254:	2100      	movs	r1, #0
 8014256:	4668      	mov	r0, sp
 8014258:	f7ff ffb8 	bl	80141cc <gettimeofday>
 801425c:	9800      	ldr	r0, [sp, #0]
 801425e:	b104      	cbz	r4, 8014262 <time+0x12>
 8014260:	6020      	str	r0, [r4, #0]
 8014262:	b002      	add	sp, #8
 8014264:	bd10      	pop	{r4, pc}
	...

08014268 <uart0_init>:
 8014268:	2301      	movs	r3, #1
 801426a:	b507      	push	{r0, r1, r2, lr}
 801426c:	2208      	movs	r2, #8
 801426e:	9300      	str	r3, [sp, #0]
 8014270:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8014274:	2300      	movs	r3, #0
 8014276:	4803      	ldr	r0, [pc, #12]	; (8014284 <uart0_init+0x1c>)
 8014278:	f001 f80e 	bl	8015298 <gd32_uart_begin>
 801427c:	b003      	add	sp, #12
 801427e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014282:	bf00      	nop
 8014284:	40013800 	andmi	r3, r1, r0, lsl #16

08014288 <uart0_putc>:
 8014288:	280a      	cmp	r0, #10
 801428a:	b538      	push	{r3, r4, r5, lr}
 801428c:	4604      	mov	r4, r0
 801428e:	d10a      	bne.n	80142a6 <uart0_putc+0x1e>
 8014290:	4d0b      	ldr	r5, [pc, #44]	; (80142c0 <uart0_putc+0x38>)
 8014292:	2107      	movs	r1, #7
 8014294:	4628      	mov	r0, r5
 8014296:	f000 fe11 	bl	8014ebc <usart_flag_get>
 801429a:	2800      	cmp	r0, #0
 801429c:	d0f9      	beq.n	8014292 <uart0_putc+0xa>
 801429e:	220d      	movs	r2, #13
 80142a0:	4b08      	ldr	r3, [pc, #32]	; (80142c4 <uart0_putc+0x3c>)
 80142a2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 80142a6:	4d06      	ldr	r5, [pc, #24]	; (80142c0 <uart0_putc+0x38>)
 80142a8:	2107      	movs	r1, #7
 80142aa:	4628      	mov	r0, r5
 80142ac:	f000 fe06 	bl	8014ebc <usart_flag_get>
 80142b0:	2800      	cmp	r0, #0
 80142b2:	d0f9      	beq.n	80142a8 <uart0_putc+0x20>
 80142b4:	4b03      	ldr	r3, [pc, #12]	; (80142c4 <uart0_putc+0x3c>)
 80142b6:	b2e4      	uxtb	r4, r4
 80142b8:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 80142bc:	bd38      	pop	{r3, r4, r5, pc}
 80142be:	bf00      	nop
 80142c0:	40013800 	andmi	r3, r1, r0, lsl #16
 80142c4:	40013000 	andmi	r3, r1, r0

080142c8 <uart0_puts>:
 80142c8:	b510      	push	{r4, lr}
 80142ca:	1e44      	subs	r4, r0, #1
 80142cc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80142d0:	b903      	cbnz	r3, 80142d4 <uart0_puts+0xc>
 80142d2:	bd10      	pop	{r4, pc}
 80142d4:	2b0a      	cmp	r3, #10
 80142d6:	d102      	bne.n	80142de <uart0_puts+0x16>
 80142d8:	200d      	movs	r0, #13
 80142da:	f7ff ffd5 	bl	8014288 <uart0_putc>
 80142de:	7820      	ldrb	r0, [r4, #0]
 80142e0:	f7ff ffd2 	bl	8014288 <uart0_putc>
 80142e4:	e7f2      	b.n	80142cc <uart0_puts+0x4>
	...

080142e8 <systick_config>:
 80142e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80142ec:	4b0b      	ldr	r3, [pc, #44]	; (801431c <systick_config+0x34>)
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80142f4:	3b01      	subs	r3, #1
 80142f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80142fa:	d20d      	bcs.n	8014318 <systick_config+0x30>
 80142fc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8014300:	21f0      	movs	r1, #240	; 0xf0
 8014302:	6153      	str	r3, [r2, #20]
 8014304:	4b06      	ldr	r3, [pc, #24]	; (8014320 <systick_config+0x38>)
 8014306:	2007      	movs	r0, #7
 8014308:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 801430c:	2100      	movs	r1, #0
 801430e:	6191      	str	r1, [r2, #24]
 8014310:	6110      	str	r0, [r2, #16]
 8014312:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8014316:	4770      	bx	lr
 8014318:	e7fe      	b.n	8014318 <systick_config+0x30>
 801431a:	bf00      	nop
 801431c:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8014320:	e000ed00 	and	lr, r0, r0, lsl #26

08014324 <SysTick_Handler>:
 8014324:	4a02      	ldr	r2, [pc, #8]	; (8014330 <SysTick_Handler+0xc>)
 8014326:	6813      	ldr	r3, [r2, #0]
 8014328:	3301      	adds	r3, #1
 801432a:	6013      	str	r3, [r2, #0]
 801432c:	4770      	bx	lr
 801432e:	bf00      	nop
 8014330:	2000ac7c 	andcs	sl, r0, ip, ror ip

08014334 <SystemInit>:
 8014334:	4b3a      	ldr	r3, [pc, #232]	; (8014420 <SystemInit+0xec>)
 8014336:	681a      	ldr	r2, [r3, #0]
 8014338:	f042 0201 	orr.w	r2, r2, #1
 801433c:	601a      	str	r2, [r3, #0]
 801433e:	6859      	ldr	r1, [r3, #4]
 8014340:	4a38      	ldr	r2, [pc, #224]	; (8014424 <SystemInit+0xf0>)
 8014342:	400a      	ands	r2, r1
 8014344:	605a      	str	r2, [r3, #4]
 8014346:	681a      	ldr	r2, [r3, #0]
 8014348:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 801434c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8014350:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8014354:	601a      	str	r2, [r3, #0]
 8014356:	681a      	ldr	r2, [r3, #0]
 8014358:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801435c:	601a      	str	r2, [r3, #0]
 801435e:	685a      	ldr	r2, [r3, #4]
 8014360:	f022 5203 	bic.w	r2, r2, #549453824	; 0x20c00000
 8014364:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8014368:	605a      	str	r2, [r3, #4]
 801436a:	681a      	ldr	r2, [r3, #0]
 801436c:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8014370:	601a      	str	r2, [r3, #0]
 8014372:	2200      	movs	r2, #0
 8014374:	62da      	str	r2, [r3, #44]	; 0x2c
 8014376:	6099      	str	r1, [r3, #8]
 8014378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 801437c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8014380:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8014384:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8014388:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 801438c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8014390:	4a25      	ldr	r2, [pc, #148]	; (8014428 <SystemInit+0xf4>)
 8014392:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8014396:	681a      	ldr	r2, [r3, #0]
 8014398:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801439c:	601a      	str	r2, [r3, #0]
 801439e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143a2:	6819      	ldr	r1, [r3, #0]
 80143a4:	0389      	lsls	r1, r1, #14
 80143a6:	d401      	bmi.n	80143ac <SystemInit+0x78>
 80143a8:	3a01      	subs	r2, #1
 80143aa:	d1fa      	bne.n	80143a2 <SystemInit+0x6e>
 80143ac:	681a      	ldr	r2, [r3, #0]
 80143ae:	0392      	lsls	r2, r2, #14
 80143b0:	d400      	bmi.n	80143b4 <SystemInit+0x80>
 80143b2:	e7fe      	b.n	80143b2 <SystemInit+0x7e>
 80143b4:	685a      	ldr	r2, [r3, #4]
 80143b6:	605a      	str	r2, [r3, #4]
 80143b8:	685a      	ldr	r2, [r3, #4]
 80143ba:	605a      	str	r2, [r3, #4]
 80143bc:	685a      	ldr	r2, [r3, #4]
 80143be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80143c2:	605a      	str	r2, [r3, #4]
 80143c4:	685a      	ldr	r2, [r3, #4]
 80143c6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80143ca:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80143ce:	605a      	str	r2, [r3, #4]
 80143d0:	685a      	ldr	r2, [r3, #4]
 80143d2:	f442 1204 	orr.w	r2, r2, #2162688	; 0x210000
 80143d6:	605a      	str	r2, [r3, #4]
 80143d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80143da:	4a14      	ldr	r2, [pc, #80]	; (801442c <SystemInit+0xf8>)
 80143dc:	400a      	ands	r2, r1
 80143de:	62da      	str	r2, [r3, #44]	; 0x2c
 80143e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143e2:	f442 3285 	orr.w	r2, r2, #68096	; 0x10a00
 80143e6:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 80143ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80143ec:	681a      	ldr	r2, [r3, #0]
 80143ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80143f2:	601a      	str	r2, [r3, #0]
 80143f4:	681a      	ldr	r2, [r3, #0]
 80143f6:	0110      	lsls	r0, r2, #4
 80143f8:	d5fc      	bpl.n	80143f4 <SystemInit+0xc0>
 80143fa:	681a      	ldr	r2, [r3, #0]
 80143fc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8014400:	601a      	str	r2, [r3, #0]
 8014402:	681a      	ldr	r2, [r3, #0]
 8014404:	0191      	lsls	r1, r2, #6
 8014406:	d5fc      	bpl.n	8014402 <SystemInit+0xce>
 8014408:	685a      	ldr	r2, [r3, #4]
 801440a:	f022 0203 	bic.w	r2, r2, #3
 801440e:	605a      	str	r2, [r3, #4]
 8014410:	685a      	ldr	r2, [r3, #4]
 8014412:	f042 0202 	orr.w	r2, r2, #2
 8014416:	605a      	str	r2, [r3, #4]
 8014418:	685a      	ldr	r2, [r3, #4]
 801441a:	0712      	lsls	r2, r2, #28
 801441c:	d5fc      	bpl.n	8014418 <SystemInit+0xe4>
 801441e:	4770      	bx	lr
 8014420:	40021000 	andmi	r1, r2, r0
 8014424:	e0ff000c 	rscs	r0, pc, ip
 8014428:	20003010 	andcs	r3, r0, r0, lsl r0
 801442c:	fffef000 			; <UNDEFINED> instruction: 0xfffef000

08014430 <bkp_data_write>:
 8014430:	f1a0 030b 	sub.w	r3, r0, #11
 8014434:	2b1f      	cmp	r3, #31
 8014436:	d804      	bhi.n	8014442 <bkp_data_write+0x12>
 8014438:	4b07      	ldr	r3, [pc, #28]	; (8014458 <bkp_data_write+0x28>)
 801443a:	4403      	add	r3, r0
 801443c:	009b      	lsls	r3, r3, #2
 801443e:	8019      	strh	r1, [r3, #0]
 8014440:	4770      	bx	lr
 8014442:	1e43      	subs	r3, r0, #1
 8014444:	2b09      	cmp	r3, #9
 8014446:	bf9f      	itttt	ls
 8014448:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 801444c:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 8014450:	0080      	lslls	r0, r0, #2
 8014452:	8001      	strhls	r1, [r0, #0]
 8014454:	4770      	bx	lr
 8014456:	bf00      	nop
 8014458:	10001b05 	andne	r1, r0, r5, lsl #22

0801445c <bkp_data_read>:
 801445c:	f1a0 030b 	sub.w	r3, r0, #11
 8014460:	2b1f      	cmp	r3, #31
 8014462:	d805      	bhi.n	8014470 <bkp_data_read+0x14>
 8014464:	4b08      	ldr	r3, [pc, #32]	; (8014488 <bkp_data_read+0x2c>)
 8014466:	4403      	add	r3, r0
 8014468:	009b      	lsls	r3, r3, #2
 801446a:	8818      	ldrh	r0, [r3, #0]
 801446c:	b280      	uxth	r0, r0
 801446e:	4770      	bx	lr
 8014470:	1e43      	subs	r3, r0, #1
 8014472:	2b09      	cmp	r3, #9
 8014474:	d806      	bhi.n	8014484 <bkp_data_read+0x28>
 8014476:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 801447a:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 801447e:	0080      	lsls	r0, r0, #2
 8014480:	8800      	ldrh	r0, [r0, #0]
 8014482:	e7f3      	b.n	801446c <bkp_data_read+0x10>
 8014484:	2000      	movs	r0, #0
 8014486:	4770      	bx	lr
 8014488:	10001b05 	andne	r1, r0, r5, lsl #22

0801448c <dma_deinit>:
 801448c:	2314      	movs	r3, #20
 801448e:	fb03 0301 	mla	r3, r3, r1, r0
 8014492:	689a      	ldr	r2, [r3, #8]
 8014494:	b530      	push	{r4, r5, lr}
 8014496:	f022 0201 	bic.w	r2, r2, #1
 801449a:	609a      	str	r2, [r3, #8]
 801449c:	2200      	movs	r2, #0
 801449e:	609a      	str	r2, [r3, #8]
 80144a0:	60da      	str	r2, [r3, #12]
 80144a2:	611a      	str	r2, [r3, #16]
 80144a4:	615a      	str	r2, [r3, #20]
 80144a6:	230f      	movs	r3, #15
 80144a8:	6844      	ldr	r4, [r0, #4]
 80144aa:	008d      	lsls	r5, r1, #2
 80144ac:	40ab      	lsls	r3, r5
 80144ae:	4323      	orrs	r3, r4
 80144b0:	6043      	str	r3, [r0, #4]
 80144b2:	4b04      	ldr	r3, [pc, #16]	; (80144c4 <dma_deinit+0x38>)
 80144b4:	4298      	cmp	r0, r3
 80144b6:	d103      	bne.n	80144c0 <dma_deinit+0x34>
 80144b8:	2905      	cmp	r1, #5
 80144ba:	bf08      	it	eq
 80144bc:	f8c3 2300 	streq.w	r2, [r3, #768]	; 0x300
 80144c0:	bd30      	pop	{r4, r5, pc}
 80144c2:	bf00      	nop
 80144c4:	40020400 	andmi	r0, r2, r0, lsl #8

080144c8 <dma_init>:
 80144c8:	2314      	movs	r3, #20
 80144ca:	fb03 0101 	mla	r1, r3, r1, r0
 80144ce:	6813      	ldr	r3, [r2, #0]
 80144d0:	b510      	push	{r4, lr}
 80144d2:	610b      	str	r3, [r1, #16]
 80144d4:	6893      	ldr	r3, [r2, #8]
 80144d6:	614b      	str	r3, [r1, #20]
 80144d8:	8a13      	ldrh	r3, [r2, #16]
 80144da:	60cb      	str	r3, [r1, #12]
 80144dc:	68d4      	ldr	r4, [r2, #12]
 80144de:	6853      	ldr	r3, [r2, #4]
 80144e0:	6888      	ldr	r0, [r1, #8]
 80144e2:	4323      	orrs	r3, r4
 80144e4:	6954      	ldr	r4, [r2, #20]
 80144e6:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80144ea:	4323      	orrs	r3, r4
 80144ec:	4303      	orrs	r3, r0
 80144ee:	608b      	str	r3, [r1, #8]
 80144f0:	7e13      	ldrb	r3, [r2, #24]
 80144f2:	2b01      	cmp	r3, #1
 80144f4:	688b      	ldr	r3, [r1, #8]
 80144f6:	bf0c      	ite	eq
 80144f8:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 80144fc:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8014500:	608b      	str	r3, [r1, #8]
 8014502:	7e53      	ldrb	r3, [r2, #25]
 8014504:	2b01      	cmp	r3, #1
 8014506:	688b      	ldr	r3, [r1, #8]
 8014508:	bf0c      	ite	eq
 801450a:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 801450e:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8014512:	608b      	str	r3, [r1, #8]
 8014514:	7e93      	ldrb	r3, [r2, #26]
 8014516:	b923      	cbnz	r3, 8014522 <dma_init+0x5a>
 8014518:	688b      	ldr	r3, [r1, #8]
 801451a:	f023 0310 	bic.w	r3, r3, #16
 801451e:	608b      	str	r3, [r1, #8]
 8014520:	bd10      	pop	{r4, pc}
 8014522:	688b      	ldr	r3, [r1, #8]
 8014524:	f043 0310 	orr.w	r3, r3, #16
 8014528:	e7f9      	b.n	801451e <dma_init+0x56>

0801452a <dma_circulation_disable>:
 801452a:	2314      	movs	r3, #20
 801452c:	4359      	muls	r1, r3
 801452e:	3008      	adds	r0, #8
 8014530:	580b      	ldr	r3, [r1, r0]
 8014532:	f023 0320 	bic.w	r3, r3, #32
 8014536:	500b      	str	r3, [r1, r0]
 8014538:	4770      	bx	lr

0801453a <dma_memory_to_memory_disable>:
 801453a:	2314      	movs	r3, #20
 801453c:	4359      	muls	r1, r3
 801453e:	3008      	adds	r0, #8
 8014540:	580b      	ldr	r3, [r1, r0]
 8014542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014546:	500b      	str	r3, [r1, r0]
 8014548:	4770      	bx	lr
	...

0801454c <fmc_bank0_unlock>:
 801454c:	4b04      	ldr	r3, [pc, #16]	; (8014560 <fmc_bank0_unlock+0x14>)
 801454e:	691a      	ldr	r2, [r3, #16]
 8014550:	0612      	lsls	r2, r2, #24
 8014552:	bf41      	itttt	mi
 8014554:	4a03      	ldrmi	r2, [pc, #12]	; (8014564 <fmc_bank0_unlock+0x18>)
 8014556:	605a      	strmi	r2, [r3, #4]
 8014558:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 801455c:	605a      	strmi	r2, [r3, #4]
 801455e:	4770      	bx	lr
 8014560:	40022000 	andmi	r2, r2, r0
 8014564:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08014568 <fmc_bank1_unlock>:
 8014568:	4b04      	ldr	r3, [pc, #16]	; (801457c <fmc_bank1_unlock+0x14>)
 801456a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801456c:	0612      	lsls	r2, r2, #24
 801456e:	bf41      	itttt	mi
 8014570:	4a03      	ldrmi	r2, [pc, #12]	; (8014580 <fmc_bank1_unlock+0x18>)
 8014572:	645a      	strmi	r2, [r3, #68]	; 0x44
 8014574:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8014578:	645a      	strmi	r2, [r3, #68]	; 0x44
 801457a:	4770      	bx	lr
 801457c:	40022000 	andmi	r2, r2, r0
 8014580:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08014584 <fmc_bank0_lock>:
 8014584:	4a02      	ldr	r2, [pc, #8]	; (8014590 <fmc_bank0_lock+0xc>)
 8014586:	6913      	ldr	r3, [r2, #16]
 8014588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801458c:	6113      	str	r3, [r2, #16]
 801458e:	4770      	bx	lr
 8014590:	40022000 	andmi	r2, r2, r0

08014594 <fmc_bank1_lock>:
 8014594:	4a02      	ldr	r2, [pc, #8]	; (80145a0 <fmc_bank1_lock+0xc>)
 8014596:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8014598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801459c:	6513      	str	r3, [r2, #80]	; 0x50
 801459e:	4770      	bx	lr
 80145a0:	40022000 	andmi	r2, r2, r0

080145a4 <fmc_bank0_state_get>:
 80145a4:	4b07      	ldr	r3, [pc, #28]	; (80145c4 <fmc_bank0_state_get+0x20>)
 80145a6:	68da      	ldr	r2, [r3, #12]
 80145a8:	07d1      	lsls	r1, r2, #31
 80145aa:	d407      	bmi.n	80145bc <fmc_bank0_state_get+0x18>
 80145ac:	68da      	ldr	r2, [r3, #12]
 80145ae:	06d2      	lsls	r2, r2, #27
 80145b0:	d406      	bmi.n	80145c0 <fmc_bank0_state_get+0x1c>
 80145b2:	68d8      	ldr	r0, [r3, #12]
 80145b4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80145b8:	0040      	lsls	r0, r0, #1
 80145ba:	4770      	bx	lr
 80145bc:	2001      	movs	r0, #1
 80145be:	4770      	bx	lr
 80145c0:	2003      	movs	r0, #3
 80145c2:	4770      	bx	lr
 80145c4:	40022000 	andmi	r2, r2, r0

080145c8 <fmc_bank1_state_get>:
 80145c8:	4b07      	ldr	r3, [pc, #28]	; (80145e8 <fmc_bank1_state_get+0x20>)
 80145ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80145cc:	07d1      	lsls	r1, r2, #31
 80145ce:	d407      	bmi.n	80145e0 <fmc_bank1_state_get+0x18>
 80145d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80145d2:	06d2      	lsls	r2, r2, #27
 80145d4:	d406      	bmi.n	80145e4 <fmc_bank1_state_get+0x1c>
 80145d6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80145d8:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80145dc:	0040      	lsls	r0, r0, #1
 80145de:	4770      	bx	lr
 80145e0:	2001      	movs	r0, #1
 80145e2:	4770      	bx	lr
 80145e4:	2003      	movs	r0, #3
 80145e6:	4770      	bx	lr
 80145e8:	40022000 	andmi	r2, r2, r0

080145ec <fwdgt_enable>:
 80145ec:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80145f0:	4b01      	ldr	r3, [pc, #4]	; (80145f8 <fwdgt_enable+0xc>)
 80145f2:	601a      	str	r2, [r3, #0]
 80145f4:	4770      	bx	lr
 80145f6:	bf00      	nop
 80145f8:	40003000 	andmi	r3, r0, r0

080145fc <fwdgt_counter_reload>:
 80145fc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8014600:	4b01      	ldr	r3, [pc, #4]	; (8014608 <fwdgt_counter_reload+0xc>)
 8014602:	601a      	str	r2, [r3, #0]
 8014604:	4770      	bx	lr
 8014606:	bf00      	nop
 8014608:	40003000 	andmi	r3, r0, r0

0801460c <fwdgt_config>:
 801460c:	f245 5355 	movw	r3, #21845	; 0x5555
 8014610:	4a11      	ldr	r2, [pc, #68]	; (8014658 <fwdgt_config+0x4c>)
 8014612:	b510      	push	{r4, lr}
 8014614:	4c11      	ldr	r4, [pc, #68]	; (801465c <fwdgt_config+0x50>)
 8014616:	6013      	str	r3, [r2, #0]
 8014618:	68d3      	ldr	r3, [r2, #12]
 801461a:	3c01      	subs	r4, #1
 801461c:	f003 0301 	and.w	r3, r3, #1
 8014620:	d013      	beq.n	801464a <fwdgt_config+0x3e>
 8014622:	2b00      	cmp	r3, #0
 8014624:	d1f8      	bne.n	8014618 <fwdgt_config+0xc>
 8014626:	6051      	str	r1, [r2, #4]
 8014628:	490c      	ldr	r1, [pc, #48]	; (801465c <fwdgt_config+0x50>)
 801462a:	4a0b      	ldr	r2, [pc, #44]	; (8014658 <fwdgt_config+0x4c>)
 801462c:	68d3      	ldr	r3, [r2, #12]
 801462e:	3901      	subs	r1, #1
 8014630:	f003 0302 	and.w	r3, r3, #2
 8014634:	d00d      	beq.n	8014652 <fwdgt_config+0x46>
 8014636:	2b00      	cmp	r3, #0
 8014638:	d1f8      	bne.n	801462c <fwdgt_config+0x20>
 801463a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 801463e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8014642:	6090      	str	r0, [r2, #8]
 8014644:	2001      	movs	r0, #1
 8014646:	6013      	str	r3, [r2, #0]
 8014648:	e002      	b.n	8014650 <fwdgt_config+0x44>
 801464a:	2b00      	cmp	r3, #0
 801464c:	d0eb      	beq.n	8014626 <fwdgt_config+0x1a>
 801464e:	2000      	movs	r0, #0
 8014650:	bd10      	pop	{r4, pc}
 8014652:	2b00      	cmp	r3, #0
 8014654:	d1fb      	bne.n	801464e <fwdgt_config+0x42>
 8014656:	e7f0      	b.n	801463a <fwdgt_config+0x2e>
 8014658:	40003000 	andmi	r3, r0, r0
 801465c:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08014660 <gpio_init>:
 8014660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014664:	f04f 0c0f 	mov.w	ip, #15
 8014668:	06cf      	lsls	r7, r1, #27
 801466a:	f04f 0400 	mov.w	r4, #0
 801466e:	f04f 0701 	mov.w	r7, #1
 8014672:	f001 050f 	and.w	r5, r1, #15
 8014676:	bf48      	it	mi
 8014678:	4315      	orrmi	r5, r2
 801467a:	fa23 f204 	lsr.w	r2, r3, r4
 801467e:	07d6      	lsls	r6, r2, #31
 8014680:	d510      	bpl.n	80146a4 <gpio_init+0x44>
 8014682:	00a2      	lsls	r2, r4, #2
 8014684:	6806      	ldr	r6, [r0, #0]
 8014686:	fa0c fe02 	lsl.w	lr, ip, r2
 801468a:	ea26 060e 	bic.w	r6, r6, lr
 801468e:	fa05 f202 	lsl.w	r2, r5, r2
 8014692:	2928      	cmp	r1, #40	; 0x28
 8014694:	ea42 0206 	orr.w	r2, r2, r6
 8014698:	d128      	bne.n	80146ec <gpio_init+0x8c>
 801469a:	fa07 f604 	lsl.w	r6, r7, r4
 801469e:	401e      	ands	r6, r3
 80146a0:	6146      	str	r6, [r0, #20]
 80146a2:	6002      	str	r2, [r0, #0]
 80146a4:	3401      	adds	r4, #1
 80146a6:	2c08      	cmp	r4, #8
 80146a8:	d1e7      	bne.n	801467a <gpio_init+0x1a>
 80146aa:	2600      	movs	r6, #0
 80146ac:	f04f 0c0f 	mov.w	ip, #15
 80146b0:	2701      	movs	r7, #1
 80146b2:	f106 0208 	add.w	r2, r6, #8
 80146b6:	fa23 f402 	lsr.w	r4, r3, r2
 80146ba:	07e4      	lsls	r4, r4, #31
 80146bc:	d511      	bpl.n	80146e2 <gpio_init+0x82>
 80146be:	00b4      	lsls	r4, r6, #2
 80146c0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80146c4:	fa0c f804 	lsl.w	r8, ip, r4
 80146c8:	ea2e 0e08 	bic.w	lr, lr, r8
 80146cc:	fa05 f404 	lsl.w	r4, r5, r4
 80146d0:	2928      	cmp	r1, #40	; 0x28
 80146d2:	ea44 040e 	orr.w	r4, r4, lr
 80146d6:	d110      	bne.n	80146fa <gpio_init+0x9a>
 80146d8:	fa07 f202 	lsl.w	r2, r7, r2
 80146dc:	401a      	ands	r2, r3
 80146de:	6142      	str	r2, [r0, #20]
 80146e0:	6044      	str	r4, [r0, #4]
 80146e2:	3601      	adds	r6, #1
 80146e4:	2e08      	cmp	r6, #8
 80146e6:	d1e4      	bne.n	80146b2 <gpio_init+0x52>
 80146e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146ec:	2948      	cmp	r1, #72	; 0x48
 80146ee:	bf02      	ittt	eq
 80146f0:	fa07 f604 	lsleq.w	r6, r7, r4
 80146f4:	401e      	andeq	r6, r3
 80146f6:	6106      	streq	r6, [r0, #16]
 80146f8:	e7d3      	b.n	80146a2 <gpio_init+0x42>
 80146fa:	2948      	cmp	r1, #72	; 0x48
 80146fc:	bf02      	ittt	eq
 80146fe:	fa07 f202 	lsleq.w	r2, r7, r2
 8014702:	401a      	andeq	r2, r3
 8014704:	6102      	streq	r2, [r0, #16]
 8014706:	e7eb      	b.n	80146e0 <gpio_init+0x80>

08014708 <gpio_pin_remap_config>:
 8014708:	2800      	cmp	r0, #0
 801470a:	4a16      	ldr	r2, [pc, #88]	; (8014764 <gpio_pin_remap_config+0x5c>)
 801470c:	b530      	push	{r4, r5, lr}
 801470e:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8014712:	bfb4      	ite	lt
 8014714:	69d3      	ldrlt	r3, [r2, #28]
 8014716:	6853      	ldrge	r3, [r2, #4]
 8014718:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 801471c:	b284      	uxth	r4, r0
 801471e:	d110      	bne.n	8014742 <gpio_pin_remap_config+0x3a>
 8014720:	6855      	ldr	r5, [r2, #4]
 8014722:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8014726:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 801472a:	6055      	str	r5, [r2, #4]
 801472c:	b119      	cbz	r1, 8014736 <gpio_pin_remap_config+0x2e>
 801472e:	0d42      	lsrs	r2, r0, #21
 8014730:	0112      	lsls	r2, r2, #4
 8014732:	4094      	lsls	r4, r2
 8014734:	4323      	orrs	r3, r4
 8014736:	4a0b      	ldr	r2, [pc, #44]	; (8014764 <gpio_pin_remap_config+0x5c>)
 8014738:	2800      	cmp	r0, #0
 801473a:	bfb4      	ite	lt
 801473c:	61d3      	strlt	r3, [r2, #28]
 801473e:	6053      	strge	r3, [r2, #4]
 8014740:	bd30      	pop	{r4, r5, pc}
 8014742:	02c2      	lsls	r2, r0, #11
 8014744:	bf4d      	iteet	mi
 8014746:	2203      	movmi	r2, #3
 8014748:	0d42      	lsrpl	r2, r0, #21
 801474a:	0112      	lslpl	r2, r2, #4
 801474c:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8014750:	bf4c      	ite	mi
 8014752:	40aa      	lslmi	r2, r5
 8014754:	fa04 f202 	lslpl.w	r2, r4, r2
 8014758:	ea23 0302 	bic.w	r3, r3, r2
 801475c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8014760:	e7e4      	b.n	801472c <gpio_pin_remap_config+0x24>
 8014762:	bf00      	nop
 8014764:	40010000 	andmi	r0, r1, r0

08014768 <gpio_ethernet_phy_select>:
 8014768:	4b04      	ldr	r3, [pc, #16]	; (801477c <gpio_ethernet_phy_select+0x14>)
 801476a:	685a      	ldr	r2, [r3, #4]
 801476c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8014770:	605a      	str	r2, [r3, #4]
 8014772:	685a      	ldr	r2, [r3, #4]
 8014774:	4302      	orrs	r2, r0
 8014776:	605a      	str	r2, [r3, #4]
 8014778:	4770      	bx	lr
 801477a:	bf00      	nop
 801477c:	40010000 	andmi	r0, r1, r0

08014780 <pmu_backup_write_enable>:
 8014780:	4a02      	ldr	r2, [pc, #8]	; (801478c <pmu_backup_write_enable+0xc>)
 8014782:	6813      	ldr	r3, [r2, #0]
 8014784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014788:	6013      	str	r3, [r2, #0]
 801478a:	4770      	bx	lr
 801478c:	40007000 	andmi	r7, r0, r0

08014790 <rcu_periph_clock_enable>:
 8014790:	2201      	movs	r2, #1
 8014792:	0983      	lsrs	r3, r0, #6
 8014794:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014798:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 801479c:	6819      	ldr	r1, [r3, #0]
 801479e:	f000 001f 	and.w	r0, r0, #31
 80147a2:	4082      	lsls	r2, r0
 80147a4:	430a      	orrs	r2, r1
 80147a6:	601a      	str	r2, [r3, #0]
 80147a8:	4770      	bx	lr

080147aa <rcu_periph_clock_disable>:
 80147aa:	2101      	movs	r1, #1
 80147ac:	0983      	lsrs	r3, r0, #6
 80147ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80147b2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80147b6:	681a      	ldr	r2, [r3, #0]
 80147b8:	f000 001f 	and.w	r0, r0, #31
 80147bc:	4081      	lsls	r1, r0
 80147be:	ea22 0201 	bic.w	r2, r2, r1
 80147c2:	601a      	str	r2, [r3, #0]
 80147c4:	4770      	bx	lr

080147c6 <rcu_periph_reset_enable>:
 80147c6:	f7ff bfe3 	b.w	8014790 <rcu_periph_clock_enable>

080147ca <rcu_periph_reset_disable>:
 80147ca:	f7ff bfee 	b.w	80147aa <rcu_periph_clock_disable>
	...

080147d0 <rcu_ckout0_config>:
 80147d0:	4a06      	ldr	r2, [pc, #24]	; (80147ec <rcu_ckout0_config+0x1c>)
 80147d2:	6853      	ldr	r3, [r2, #4]
 80147d4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80147d8:	4303      	orrs	r3, r0
 80147da:	6053      	str	r3, [r2, #4]
 80147dc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80147e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80147e4:	430b      	orrs	r3, r1
 80147e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80147ea:	4770      	bx	lr
 80147ec:	40021000 	andmi	r1, r2, r0

080147f0 <rcu_pll2_config>:
 80147f0:	4b04      	ldr	r3, [pc, #16]	; (8014804 <rcu_pll2_config+0x14>)
 80147f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147f4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80147f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80147fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147fc:	4302      	orrs	r2, r0
 80147fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8014800:	4770      	bx	lr
 8014802:	bf00      	nop
 8014804:	40021000 	andmi	r1, r2, r0

08014808 <rcu_adc_clock_config>:
 8014808:	490c      	ldr	r1, [pc, #48]	; (801483c <rcu_adc_clock_config+0x34>)
 801480a:	2805      	cmp	r0, #5
 801480c:	684b      	ldr	r3, [r1, #4]
 801480e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014812:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8014816:	d006      	beq.n	8014826 <rcu_adc_clock_config+0x1e>
 8014818:	d803      	bhi.n	8014822 <rcu_adc_clock_config+0x1a>
 801481a:	2804      	cmp	r0, #4
 801481c:	d10a      	bne.n	8014834 <rcu_adc_clock_config+0x2c>
 801481e:	604b      	str	r3, [r1, #4]
 8014820:	4770      	bx	lr
 8014822:	2807      	cmp	r0, #7
 8014824:	d1fb      	bne.n	801481e <rcu_adc_clock_config+0x16>
 8014826:	4a06      	ldr	r2, [pc, #24]	; (8014840 <rcu_adc_clock_config+0x38>)
 8014828:	ea02 3280 	and.w	r2, r2, r0, lsl #14
 801482c:	4313      	orrs	r3, r2
 801482e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014832:	e7f4      	b.n	801481e <rcu_adc_clock_config+0x16>
 8014834:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8014838:	e7f1      	b.n	801481e <rcu_adc_clock_config+0x16>
 801483a:	bf00      	nop
 801483c:	40021000 	andmi	r1, r2, r0
 8014840:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

08014844 <rcu_flag_get>:
 8014844:	0983      	lsrs	r3, r0, #6
 8014846:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801484a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 801484e:	681a      	ldr	r2, [r3, #0]
 8014850:	2301      	movs	r3, #1
 8014852:	f000 001f 	and.w	r0, r0, #31
 8014856:	4083      	lsls	r3, r0
 8014858:	4213      	tst	r3, r2
 801485a:	bf14      	ite	ne
 801485c:	2001      	movne	r0, #1
 801485e:	2000      	moveq	r0, #0
 8014860:	4770      	bx	lr
	...

08014864 <rcu_osci_stab_wait>:
 8014864:	281c      	cmp	r0, #28
 8014866:	b508      	push	{r3, lr}
 8014868:	d056      	beq.n	8014918 <rcu_osci_stab_wait+0xb4>
 801486a:	d812      	bhi.n	8014892 <rcu_osci_stab_wait+0x2e>
 801486c:	2818      	cmp	r0, #24
 801486e:	d04a      	beq.n	8014906 <rcu_osci_stab_wait+0xa2>
 8014870:	d804      	bhi.n	801487c <rcu_osci_stab_wait+0x18>
 8014872:	b398      	cbz	r0, 80148dc <rcu_osci_stab_wait+0x78>
 8014874:	2810      	cmp	r0, #16
 8014876:	d022      	beq.n	80148be <rcu_osci_stab_wait+0x5a>
 8014878:	2000      	movs	r0, #0
 801487a:	bd08      	pop	{r3, pc}
 801487c:	281a      	cmp	r0, #26
 801487e:	d1fb      	bne.n	8014878 <rcu_osci_stab_wait+0x14>
 8014880:	492f      	ldr	r1, [pc, #188]	; (8014940 <rcu_osci_stab_wait+0xdc>)
 8014882:	201b      	movs	r0, #27
 8014884:	f7ff ffde 	bl	8014844 <rcu_flag_get>
 8014888:	b908      	cbnz	r0, 801488e <rcu_osci_stab_wait+0x2a>
 801488a:	3901      	subs	r1, #1
 801488c:	d1f9      	bne.n	8014882 <rcu_osci_stab_wait+0x1e>
 801488e:	201b      	movs	r0, #27
 8014890:	e01e      	b.n	80148d0 <rcu_osci_stab_wait+0x6c>
 8014892:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8014896:	d02b      	beq.n	80148f0 <rcu_osci_stab_wait+0x8c>
 8014898:	f242 431c 	movw	r3, #9244	; 0x241c
 801489c:	4298      	cmp	r0, r3
 801489e:	d044      	beq.n	801492a <rcu_osci_stab_wait+0xc6>
 80148a0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80148a4:	d1e8      	bne.n	8014878 <rcu_osci_stab_wait+0x14>
 80148a6:	f06f 417c 	mvn.w	r1, #4227858432	; 0xfc000000
 80148aa:	f640 0001 	movw	r0, #2049	; 0x801
 80148ae:	f7ff ffc9 	bl	8014844 <rcu_flag_get>
 80148b2:	b908      	cbnz	r0, 80148b8 <rcu_osci_stab_wait+0x54>
 80148b4:	3901      	subs	r1, #1
 80148b6:	d1f8      	bne.n	80148aa <rcu_osci_stab_wait+0x46>
 80148b8:	f640 0001 	movw	r0, #2049	; 0x801
 80148bc:	e008      	b.n	80148d0 <rcu_osci_stab_wait+0x6c>
 80148be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80148c2:	2011      	movs	r0, #17
 80148c4:	f7ff ffbe 	bl	8014844 <rcu_flag_get>
 80148c8:	b908      	cbnz	r0, 80148ce <rcu_osci_stab_wait+0x6a>
 80148ca:	3901      	subs	r1, #1
 80148cc:	d1f9      	bne.n	80148c2 <rcu_osci_stab_wait+0x5e>
 80148ce:	2011      	movs	r0, #17
 80148d0:	f7ff ffb8 	bl	8014844 <rcu_flag_get>
 80148d4:	3800      	subs	r0, #0
 80148d6:	bf18      	it	ne
 80148d8:	2001      	movne	r0, #1
 80148da:	e7ce      	b.n	801487a <rcu_osci_stab_wait+0x16>
 80148dc:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80148e0:	2001      	movs	r0, #1
 80148e2:	f7ff ffaf 	bl	8014844 <rcu_flag_get>
 80148e6:	b908      	cbnz	r0, 80148ec <rcu_osci_stab_wait+0x88>
 80148e8:	3901      	subs	r1, #1
 80148ea:	d1f9      	bne.n	80148e0 <rcu_osci_stab_wait+0x7c>
 80148ec:	2001      	movs	r0, #1
 80148ee:	e7ef      	b.n	80148d0 <rcu_osci_stab_wait+0x6c>
 80148f0:	4913      	ldr	r1, [pc, #76]	; (8014940 <rcu_osci_stab_wait+0xdc>)
 80148f2:	f640 1001 	movw	r0, #2305	; 0x901
 80148f6:	f7ff ffa5 	bl	8014844 <rcu_flag_get>
 80148fa:	b908      	cbnz	r0, 8014900 <rcu_osci_stab_wait+0x9c>
 80148fc:	3901      	subs	r1, #1
 80148fe:	d1f8      	bne.n	80148f2 <rcu_osci_stab_wait+0x8e>
 8014900:	f640 1001 	movw	r0, #2305	; 0x901
 8014904:	e7e4      	b.n	80148d0 <rcu_osci_stab_wait+0x6c>
 8014906:	490e      	ldr	r1, [pc, #56]	; (8014940 <rcu_osci_stab_wait+0xdc>)
 8014908:	2019      	movs	r0, #25
 801490a:	f7ff ff9b 	bl	8014844 <rcu_flag_get>
 801490e:	b908      	cbnz	r0, 8014914 <rcu_osci_stab_wait+0xb0>
 8014910:	3901      	subs	r1, #1
 8014912:	d1f9      	bne.n	8014908 <rcu_osci_stab_wait+0xa4>
 8014914:	2019      	movs	r0, #25
 8014916:	e7db      	b.n	80148d0 <rcu_osci_stab_wait+0x6c>
 8014918:	4909      	ldr	r1, [pc, #36]	; (8014940 <rcu_osci_stab_wait+0xdc>)
 801491a:	201d      	movs	r0, #29
 801491c:	f7ff ff92 	bl	8014844 <rcu_flag_get>
 8014920:	b908      	cbnz	r0, 8014926 <rcu_osci_stab_wait+0xc2>
 8014922:	3901      	subs	r1, #1
 8014924:	d1f9      	bne.n	801491a <rcu_osci_stab_wait+0xb6>
 8014926:	201d      	movs	r0, #29
 8014928:	e7d2      	b.n	80148d0 <rcu_osci_stab_wait+0x6c>
 801492a:	4905      	ldr	r1, [pc, #20]	; (8014940 <rcu_osci_stab_wait+0xdc>)
 801492c:	f242 401d 	movw	r0, #9245	; 0x241d
 8014930:	f7ff ff88 	bl	8014844 <rcu_flag_get>
 8014934:	b908      	cbnz	r0, 801493a <rcu_osci_stab_wait+0xd6>
 8014936:	3901      	subs	r1, #1
 8014938:	d1f8      	bne.n	801492c <rcu_osci_stab_wait+0xc8>
 801493a:	f242 401d 	movw	r0, #9245	; 0x241d
 801493e:	e7c7      	b.n	80148d0 <rcu_osci_stab_wait+0x6c>
 8014940:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08014944 <rcu_osci_on>:
 8014944:	f7ff bf24 	b.w	8014790 <rcu_periph_clock_enable>

08014948 <rcu_clock_freq_get>:
 8014948:	4b3e      	ldr	r3, [pc, #248]	; (8014a44 <rcu_clock_freq_get+0xfc>)
 801494a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801494c:	4604      	mov	r4, r0
 801494e:	461f      	mov	r7, r3
 8014950:	b089      	sub	sp, #36	; 0x24
 8014952:	ad04      	add	r5, sp, #16
 8014954:	f103 0610 	add.w	r6, r3, #16
 8014958:	462a      	mov	r2, r5
 801495a:	6818      	ldr	r0, [r3, #0]
 801495c:	6859      	ldr	r1, [r3, #4]
 801495e:	3308      	adds	r3, #8
 8014960:	c203      	stmia	r2!, {r0, r1}
 8014962:	42b3      	cmp	r3, r6
 8014964:	4615      	mov	r5, r2
 8014966:	d1f7      	bne.n	8014958 <rcu_clock_freq_get+0x10>
 8014968:	466b      	mov	r3, sp
 801496a:	6938      	ldr	r0, [r7, #16]
 801496c:	6871      	ldr	r1, [r6, #4]
 801496e:	4a36      	ldr	r2, [pc, #216]	; (8014a48 <rcu_clock_freq_get+0x100>)
 8014970:	c303      	stmia	r3!, {r0, r1}
 8014972:	c303      	stmia	r3!, {r0, r1}
 8014974:	6853      	ldr	r3, [r2, #4]
 8014976:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801497a:	2b01      	cmp	r3, #1
 801497c:	d053      	beq.n	8014a26 <rcu_clock_freq_get+0xde>
 801497e:	2b02      	cmp	r3, #2
 8014980:	d153      	bne.n	8014a2a <rcu_clock_freq_get+0xe2>
 8014982:	6853      	ldr	r3, [r2, #4]
 8014984:	03dd      	lsls	r5, r3, #15
 8014986:	d523      	bpl.n	80149d0 <rcu_clock_freq_get+0x88>
 8014988:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 801498a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 801498e:	4b2f      	ldr	r3, [pc, #188]	; (8014a4c <rcu_clock_freq_get+0x104>)
 8014990:	d00e      	beq.n	80149b0 <rcu_clock_freq_get+0x68>
 8014992:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8014994:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8014996:	f3c1 1103 	ubfx	r1, r1, #4, #4
 801499a:	f3c0 2003 	ubfx	r0, r0, #8, #4
 801499e:	3101      	adds	r1, #1
 80149a0:	280f      	cmp	r0, #15
 80149a2:	f100 0502 	add.w	r5, r0, #2
 80149a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80149aa:	bf08      	it	eq
 80149ac:	2514      	moveq	r5, #20
 80149ae:	436b      	muls	r3, r5
 80149b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80149b2:	f001 010f 	and.w	r1, r1, #15
 80149b6:	3101      	adds	r1, #1
 80149b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80149bc:	6851      	ldr	r1, [r2, #4]
 80149be:	6850      	ldr	r0, [r2, #4]
 80149c0:	f3c1 4183 	ubfx	r1, r1, #18, #4
 80149c4:	0080      	lsls	r0, r0, #2
 80149c6:	d505      	bpl.n	80149d4 <rcu_clock_freq_get+0x8c>
 80149c8:	f041 0110 	orr.w	r1, r1, #16
 80149cc:	3101      	adds	r1, #1
 80149ce:	e027      	b.n	8014a20 <rcu_clock_freq_get+0xd8>
 80149d0:	4b1f      	ldr	r3, [pc, #124]	; (8014a50 <rcu_clock_freq_get+0x108>)
 80149d2:	e7f3      	b.n	80149bc <rcu_clock_freq_get+0x74>
 80149d4:	290d      	cmp	r1, #13
 80149d6:	d120      	bne.n	8014a1a <rcu_clock_freq_get+0xd2>
 80149d8:	2006      	movs	r0, #6
 80149da:	0859      	lsrs	r1, r3, #1
 80149dc:	fb00 1003 	mla	r0, r0, r3, r1
 80149e0:	6853      	ldr	r3, [r2, #4]
 80149e2:	6851      	ldr	r1, [r2, #4]
 80149e4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80149e8:	6852      	ldr	r2, [r2, #4]
 80149ea:	3320      	adds	r3, #32
 80149ec:	446b      	add	r3, sp
 80149ee:	f3c1 2102 	ubfx	r1, r1, #8, #3
 80149f2:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 80149f6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80149fa:	3120      	adds	r1, #32
 80149fc:	3220      	adds	r2, #32
 80149fe:	4469      	add	r1, sp
 8014a00:	446a      	add	r2, sp
 8014a02:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 8014a06:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8014a0a:	fa20 f303 	lsr.w	r3, r0, r3
 8014a0e:	2c03      	cmp	r4, #3
 8014a10:	d816      	bhi.n	8014a40 <rcu_clock_freq_get+0xf8>
 8014a12:	e8df f004 	tbb	[pc, r4]
 8014a16:	120f0c0d 	andne	r0, pc, #3328	; 0xd00
 8014a1a:	290f      	cmp	r1, #15
 8014a1c:	d0d6      	beq.n	80149cc <rcu_clock_freq_get+0x84>
 8014a1e:	3102      	adds	r1, #2
 8014a20:	fb03 f001 	mul.w	r0, r3, r1
 8014a24:	e7dc      	b.n	80149e0 <rcu_clock_freq_get+0x98>
 8014a26:	4809      	ldr	r0, [pc, #36]	; (8014a4c <rcu_clock_freq_get+0x104>)
 8014a28:	e7da      	b.n	80149e0 <rcu_clock_freq_get+0x98>
 8014a2a:	480a      	ldr	r0, [pc, #40]	; (8014a54 <rcu_clock_freq_get+0x10c>)
 8014a2c:	e7d8      	b.n	80149e0 <rcu_clock_freq_get+0x98>
 8014a2e:	4618      	mov	r0, r3
 8014a30:	b009      	add	sp, #36	; 0x24
 8014a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a34:	fa23 f001 	lsr.w	r0, r3, r1
 8014a38:	e7fa      	b.n	8014a30 <rcu_clock_freq_get+0xe8>
 8014a3a:	fa23 f002 	lsr.w	r0, r3, r2
 8014a3e:	e7f7      	b.n	8014a30 <rcu_clock_freq_get+0xe8>
 8014a40:	2000      	movs	r0, #0
 8014a42:	e7f5      	b.n	8014a30 <rcu_clock_freq_get+0xe8>
 8014a44:	080164f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, sl, sp, lr}
 8014a48:	40021000 	andmi	r1, r2, r0
 8014a4c:	017d7840 	cmneq	sp, r0, asr #16
 8014a50:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8014a54:	007a1200 	rsbseq	r1, sl, r0, lsl #4

08014a58 <timer_deinit>:
 8014a58:	b508      	push	{r3, lr}
 8014a5a:	4b4e      	ldr	r3, [pc, #312]	; (8014b94 <timer_deinit+0x13c>)
 8014a5c:	4298      	cmp	r0, r3
 8014a5e:	f000 8092 	beq.w	8014b86 <timer_deinit+0x12e>
 8014a62:	d822      	bhi.n	8014aaa <timer_deinit+0x52>
 8014a64:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8014a68:	4298      	cmp	r0, r3
 8014a6a:	d062      	beq.n	8014b32 <timer_deinit+0xda>
 8014a6c:	d80b      	bhi.n	8014a86 <timer_deinit+0x2e>
 8014a6e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014a72:	4298      	cmp	r0, r3
 8014a74:	d04f      	beq.n	8014b16 <timer_deinit+0xbe>
 8014a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014a7a:	4298      	cmp	r0, r3
 8014a7c:	d052      	beq.n	8014b24 <timer_deinit+0xcc>
 8014a7e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8014a82:	d041      	beq.n	8014b08 <timer_deinit+0xb0>
 8014a84:	bd08      	pop	{r3, pc}
 8014a86:	4b44      	ldr	r3, [pc, #272]	; (8014b98 <timer_deinit+0x140>)
 8014a88:	4298      	cmp	r0, r3
 8014a8a:	d059      	beq.n	8014b40 <timer_deinit+0xe8>
 8014a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014a90:	4298      	cmp	r0, r3
 8014a92:	d071      	beq.n	8014b78 <timer_deinit+0x120>
 8014a94:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014a98:	4298      	cmp	r0, r3
 8014a9a:	d1f3      	bne.n	8014a84 <timer_deinit+0x2c>
 8014a9c:	f240 4004 	movw	r0, #1028	; 0x404
 8014aa0:	f7ff fe91 	bl	80147c6 <rcu_periph_reset_enable>
 8014aa4:	f240 4004 	movw	r0, #1028	; 0x404
 8014aa8:	e02a      	b.n	8014b00 <timer_deinit+0xa8>
 8014aaa:	4b3c      	ldr	r3, [pc, #240]	; (8014b9c <timer_deinit+0x144>)
 8014aac:	4298      	cmp	r0, r3
 8014aae:	d055      	beq.n	8014b5c <timer_deinit+0x104>
 8014ab0:	d812      	bhi.n	8014ad8 <timer_deinit+0x80>
 8014ab2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8014ab6:	4298      	cmp	r0, r3
 8014ab8:	d01c      	beq.n	8014af4 <timer_deinit+0x9c>
 8014aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014abe:	4298      	cmp	r0, r3
 8014ac0:	d045      	beq.n	8014b4e <timer_deinit+0xf6>
 8014ac2:	f5a3 338a 	sub.w	r3, r3, #70656	; 0x11400
 8014ac6:	4298      	cmp	r0, r3
 8014ac8:	d1dc      	bne.n	8014a84 <timer_deinit+0x2c>
 8014aca:	f44f 6081 	mov.w	r0, #1032	; 0x408
 8014ace:	f7ff fe7a 	bl	80147c6 <rcu_periph_reset_enable>
 8014ad2:	f44f 6081 	mov.w	r0, #1032	; 0x408
 8014ad6:	e013      	b.n	8014b00 <timer_deinit+0xa8>
 8014ad8:	4b31      	ldr	r3, [pc, #196]	; (8014ba0 <timer_deinit+0x148>)
 8014ada:	4298      	cmp	r0, r3
 8014adc:	d045      	beq.n	8014b6a <timer_deinit+0x112>
 8014ade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014ae2:	4298      	cmp	r0, r3
 8014ae4:	d1ce      	bne.n	8014a84 <timer_deinit+0x2c>
 8014ae6:	f240 3015 	movw	r0, #789	; 0x315
 8014aea:	f7ff fe6c 	bl	80147c6 <rcu_periph_reset_enable>
 8014aee:	f240 3015 	movw	r0, #789	; 0x315
 8014af2:	e005      	b.n	8014b00 <timer_deinit+0xa8>
 8014af4:	f240 300b 	movw	r0, #779	; 0x30b
 8014af8:	f7ff fe65 	bl	80147c6 <rcu_periph_reset_enable>
 8014afc:	f240 300b 	movw	r0, #779	; 0x30b
 8014b00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014b04:	f7ff be61 	b.w	80147ca <rcu_periph_reset_disable>
 8014b08:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014b0c:	f7ff fe5b 	bl	80147c6 <rcu_periph_reset_enable>
 8014b10:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014b14:	e7f4      	b.n	8014b00 <timer_deinit+0xa8>
 8014b16:	f240 4001 	movw	r0, #1025	; 0x401
 8014b1a:	f7ff fe54 	bl	80147c6 <rcu_periph_reset_enable>
 8014b1e:	f240 4001 	movw	r0, #1025	; 0x401
 8014b22:	e7ed      	b.n	8014b00 <timer_deinit+0xa8>
 8014b24:	f240 4002 	movw	r0, #1026	; 0x402
 8014b28:	f7ff fe4d 	bl	80147c6 <rcu_periph_reset_enable>
 8014b2c:	f240 4002 	movw	r0, #1026	; 0x402
 8014b30:	e7e6      	b.n	8014b00 <timer_deinit+0xa8>
 8014b32:	f240 4003 	movw	r0, #1027	; 0x403
 8014b36:	f7ff fe46 	bl	80147c6 <rcu_periph_reset_enable>
 8014b3a:	f240 4003 	movw	r0, #1027	; 0x403
 8014b3e:	e7df      	b.n	8014b00 <timer_deinit+0xa8>
 8014b40:	f240 4005 	movw	r0, #1029	; 0x405
 8014b44:	f7ff fe3f 	bl	80147c6 <rcu_periph_reset_enable>
 8014b48:	f240 4005 	movw	r0, #1029	; 0x405
 8014b4c:	e7d8      	b.n	8014b00 <timer_deinit+0xa8>
 8014b4e:	f240 300d 	movw	r0, #781	; 0x30d
 8014b52:	f7ff fe38 	bl	80147c6 <rcu_periph_reset_enable>
 8014b56:	f240 300d 	movw	r0, #781	; 0x30d
 8014b5a:	e7d1      	b.n	8014b00 <timer_deinit+0xa8>
 8014b5c:	f240 3013 	movw	r0, #787	; 0x313
 8014b60:	f7ff fe31 	bl	80147c6 <rcu_periph_reset_enable>
 8014b64:	f240 3013 	movw	r0, #787	; 0x313
 8014b68:	e7ca      	b.n	8014b00 <timer_deinit+0xa8>
 8014b6a:	f44f 7045 	mov.w	r0, #788	; 0x314
 8014b6e:	f7ff fe2a 	bl	80147c6 <rcu_periph_reset_enable>
 8014b72:	f44f 7045 	mov.w	r0, #788	; 0x314
 8014b76:	e7c3      	b.n	8014b00 <timer_deinit+0xa8>
 8014b78:	f240 4006 	movw	r0, #1030	; 0x406
 8014b7c:	f7ff fe23 	bl	80147c6 <rcu_periph_reset_enable>
 8014b80:	f240 4006 	movw	r0, #1030	; 0x406
 8014b84:	e7bc      	b.n	8014b00 <timer_deinit+0xa8>
 8014b86:	f240 4007 	movw	r0, #1031	; 0x407
 8014b8a:	f7ff fe1c 	bl	80147c6 <rcu_periph_reset_enable>
 8014b8e:	f240 4007 	movw	r0, #1031	; 0x407
 8014b92:	e7b5      	b.n	8014b00 <timer_deinit+0xa8>
 8014b94:	40001c00 	andmi	r1, r0, r0, lsl #24
 8014b98:	40001400 	andmi	r1, r0, r0, lsl #8
 8014b9c:	40014c00 	andmi	r4, r1, r0, lsl #24
 8014ba0:	40015000 	andmi	r5, r1, r0

08014ba4 <timer_init>:
 8014ba4:	880b      	ldrh	r3, [r1, #0]
 8014ba6:	6283      	str	r3, [r0, #40]	; 0x28
 8014ba8:	4b26      	ldr	r3, [pc, #152]	; (8014c44 <timer_init+0xa0>)
 8014baa:	4298      	cmp	r0, r3
 8014bac:	d018      	beq.n	8014be0 <timer_init+0x3c>
 8014bae:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 8014bb2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8014bb6:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 8014bba:	d011      	beq.n	8014be0 <timer_init+0x3c>
 8014bbc:	4a22      	ldr	r2, [pc, #136]	; (8014c48 <timer_init+0xa4>)
 8014bbe:	4290      	cmp	r0, r2
 8014bc0:	d00e      	beq.n	8014be0 <timer_init+0x3c>
 8014bc2:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8014bc6:	4290      	cmp	r0, r2
 8014bc8:	d00a      	beq.n	8014be0 <timer_init+0x3c>
 8014bca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8014bce:	4293      	cmp	r3, r2
 8014bd0:	d006      	beq.n	8014be0 <timer_init+0x3c>
 8014bd2:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 8014bd6:	4293      	cmp	r3, r2
 8014bd8:	d002      	beq.n	8014be0 <timer_init+0x3c>
 8014bda:	4b1c      	ldr	r3, [pc, #112]	; (8014c4c <timer_init+0xa8>)
 8014bdc:	4298      	cmp	r0, r3
 8014bde:	d10f      	bne.n	8014c00 <timer_init+0x5c>
 8014be0:	6803      	ldr	r3, [r0, #0]
 8014be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014be6:	6003      	str	r3, [r0, #0]
 8014be8:	884b      	ldrh	r3, [r1, #2]
 8014bea:	6802      	ldr	r2, [r0, #0]
 8014bec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014bf0:	4313      	orrs	r3, r2
 8014bf2:	6003      	str	r3, [r0, #0]
 8014bf4:	888b      	ldrh	r3, [r1, #4]
 8014bf6:	6802      	ldr	r2, [r0, #0]
 8014bf8:	f003 0310 	and.w	r3, r3, #16
 8014bfc:	4313      	orrs	r3, r2
 8014bfe:	6003      	str	r3, [r0, #0]
 8014c00:	688b      	ldr	r3, [r1, #8]
 8014c02:	62c3      	str	r3, [r0, #44]	; 0x2c
 8014c04:	4b12      	ldr	r3, [pc, #72]	; (8014c50 <timer_init+0xac>)
 8014c06:	4298      	cmp	r0, r3
 8014c08:	d003      	beq.n	8014c12 <timer_init+0x6e>
 8014c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014c0e:	4298      	cmp	r0, r3
 8014c10:	d104      	bne.n	8014c1c <timer_init+0x78>
 8014c12:	6943      	ldr	r3, [r0, #20]
 8014c14:	f043 0301 	orr.w	r3, r3, #1
 8014c18:	6143      	str	r3, [r0, #20]
 8014c1a:	4770      	bx	lr
 8014c1c:	6803      	ldr	r3, [r0, #0]
 8014c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014c22:	6003      	str	r3, [r0, #0]
 8014c24:	898b      	ldrh	r3, [r1, #12]
 8014c26:	6802      	ldr	r2, [r0, #0]
 8014c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014c2c:	4313      	orrs	r3, r2
 8014c2e:	6003      	str	r3, [r0, #0]
 8014c30:	4b04      	ldr	r3, [pc, #16]	; (8014c44 <timer_init+0xa0>)
 8014c32:	4298      	cmp	r0, r3
 8014c34:	d002      	beq.n	8014c3c <timer_init+0x98>
 8014c36:	4b04      	ldr	r3, [pc, #16]	; (8014c48 <timer_init+0xa4>)
 8014c38:	4298      	cmp	r0, r3
 8014c3a:	d1ea      	bne.n	8014c12 <timer_init+0x6e>
 8014c3c:	7b8b      	ldrb	r3, [r1, #14]
 8014c3e:	6303      	str	r3, [r0, #48]	; 0x30
 8014c40:	e7e7      	b.n	8014c12 <timer_init+0x6e>
 8014c42:	bf00      	nop
 8014c44:	40012c00 	andmi	r2, r1, r0, lsl #24
 8014c48:	40013400 	andmi	r3, r1, r0, lsl #8
 8014c4c:	40002000 	andmi	r2, r0, r0
 8014c50:	40001000 	andmi	r1, r0, r0

08014c54 <timer_enable>:
 8014c54:	6803      	ldr	r3, [r0, #0]
 8014c56:	f043 0301 	orr.w	r3, r3, #1
 8014c5a:	6003      	str	r3, [r0, #0]
 8014c5c:	4770      	bx	lr

08014c5e <timer_channel_output_mode_config>:
 8014c5e:	2903      	cmp	r1, #3
 8014c60:	d81a      	bhi.n	8014c98 <timer_channel_output_mode_config+0x3a>
 8014c62:	e8df f001 	tbb	[pc, r1]
 8014c66:	1a120a02 	bne	8497476 <__exidx_end+0x47ec02>
 8014c6a:	6983      	ldr	r3, [r0, #24]
 8014c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014c70:	6183      	str	r3, [r0, #24]
 8014c72:	6983      	ldr	r3, [r0, #24]
 8014c74:	4313      	orrs	r3, r2
 8014c76:	6183      	str	r3, [r0, #24]
 8014c78:	4770      	bx	lr
 8014c7a:	6983      	ldr	r3, [r0, #24]
 8014c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014c80:	6183      	str	r3, [r0, #24]
 8014c82:	6983      	ldr	r3, [r0, #24]
 8014c84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014c88:	e7f5      	b.n	8014c76 <timer_channel_output_mode_config+0x18>
 8014c8a:	69c3      	ldr	r3, [r0, #28]
 8014c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014c90:	61c3      	str	r3, [r0, #28]
 8014c92:	69c3      	ldr	r3, [r0, #28]
 8014c94:	4313      	orrs	r3, r2
 8014c96:	61c3      	str	r3, [r0, #28]
 8014c98:	4770      	bx	lr
 8014c9a:	69c3      	ldr	r3, [r0, #28]
 8014c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014ca0:	61c3      	str	r3, [r0, #28]
 8014ca2:	69c3      	ldr	r3, [r0, #28]
 8014ca4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014ca8:	e7f5      	b.n	8014c96 <timer_channel_output_mode_config+0x38>

08014caa <timer_channel_output_pulse_value_config>:
 8014caa:	2903      	cmp	r1, #3
 8014cac:	d80a      	bhi.n	8014cc4 <timer_channel_output_pulse_value_config+0x1a>
 8014cae:	e8df f001 	tbb	[pc, r1]
 8014cb2:	08060402 	stmdaeq	r6, {r1, sl}
 8014cb6:	6342      	str	r2, [r0, #52]	; 0x34
 8014cb8:	4770      	bx	lr
 8014cba:	6382      	str	r2, [r0, #56]	; 0x38
 8014cbc:	4770      	bx	lr
 8014cbe:	63c2      	str	r2, [r0, #60]	; 0x3c
 8014cc0:	4770      	bx	lr
 8014cc2:	6402      	str	r2, [r0, #64]	; 0x40
 8014cc4:	4770      	bx	lr

08014cc6 <timer_input_trigger_source_select>:
 8014cc6:	6883      	ldr	r3, [r0, #8]
 8014cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014ccc:	6083      	str	r3, [r0, #8]
 8014cce:	6883      	ldr	r3, [r0, #8]
 8014cd0:	430b      	orrs	r3, r1
 8014cd2:	6083      	str	r3, [r0, #8]
 8014cd4:	4770      	bx	lr

08014cd6 <timer_master_output_trigger_source_select>:
 8014cd6:	6843      	ldr	r3, [r0, #4]
 8014cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014cdc:	6043      	str	r3, [r0, #4]
 8014cde:	6843      	ldr	r3, [r0, #4]
 8014ce0:	430b      	orrs	r3, r1
 8014ce2:	6043      	str	r3, [r0, #4]
 8014ce4:	4770      	bx	lr

08014ce6 <timer_slave_mode_select>:
 8014ce6:	6883      	ldr	r3, [r0, #8]
 8014ce8:	f023 0307 	bic.w	r3, r3, #7
 8014cec:	6083      	str	r3, [r0, #8]
 8014cee:	6883      	ldr	r3, [r0, #8]
 8014cf0:	430b      	orrs	r3, r1
 8014cf2:	6083      	str	r3, [r0, #8]
 8014cf4:	4770      	bx	lr

08014cf6 <timer_master_slave_mode_config>:
 8014cf6:	2980      	cmp	r1, #128	; 0x80
 8014cf8:	d104      	bne.n	8014d04 <timer_master_slave_mode_config+0xe>
 8014cfa:	6883      	ldr	r3, [r0, #8]
 8014cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d00:	6083      	str	r3, [r0, #8]
 8014d02:	4770      	bx	lr
 8014d04:	2900      	cmp	r1, #0
 8014d06:	d1fc      	bne.n	8014d02 <timer_master_slave_mode_config+0xc>
 8014d08:	6883      	ldr	r3, [r0, #8]
 8014d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014d0e:	e7f7      	b.n	8014d00 <timer_master_slave_mode_config+0xa>

08014d10 <timer_interrupt_enable>:
 8014d10:	68c3      	ldr	r3, [r0, #12]
 8014d12:	430b      	orrs	r3, r1
 8014d14:	60c3      	str	r3, [r0, #12]
 8014d16:	4770      	bx	lr

08014d18 <timer_interrupt_flag_clear>:
 8014d18:	43c9      	mvns	r1, r1
 8014d1a:	6101      	str	r1, [r0, #16]
 8014d1c:	4770      	bx	lr

08014d1e <timer_flag_clear>:
 8014d1e:	43c9      	mvns	r1, r1
 8014d20:	6101      	str	r1, [r0, #16]
 8014d22:	4770      	bx	lr

08014d24 <usart_deinit>:
 8014d24:	b508      	push	{r3, lr}
 8014d26:	4b2d      	ldr	r3, [pc, #180]	; (8014ddc <usart_deinit+0xb8>)
 8014d28:	4298      	cmp	r0, r3
 8014d2a:	d050      	beq.n	8014dce <usart_deinit+0xaa>
 8014d2c:	d817      	bhi.n	8014d5e <usart_deinit+0x3a>
 8014d2e:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 8014d32:	4298      	cmp	r0, r3
 8014d34:	d044      	beq.n	8014dc0 <usart_deinit+0x9c>
 8014d36:	d808      	bhi.n	8014d4a <usart_deinit+0x26>
 8014d38:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014d3c:	4298      	cmp	r0, r3
 8014d3e:	d02a      	beq.n	8014d96 <usart_deinit+0x72>
 8014d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014d44:	4298      	cmp	r0, r3
 8014d46:	d02d      	beq.n	8014da4 <usart_deinit+0x80>
 8014d48:	bd08      	pop	{r3, pc}
 8014d4a:	4b25      	ldr	r3, [pc, #148]	; (8014de0 <usart_deinit+0xbc>)
 8014d4c:	4298      	cmp	r0, r3
 8014d4e:	d1fb      	bne.n	8014d48 <usart_deinit+0x24>
 8014d50:	f240 4014 	movw	r0, #1044	; 0x414
 8014d54:	f7ff fd37 	bl	80147c6 <rcu_periph_reset_enable>
 8014d58:	f240 4014 	movw	r0, #1044	; 0x414
 8014d5c:	e017      	b.n	8014d8e <usart_deinit+0x6a>
 8014d5e:	4b21      	ldr	r3, [pc, #132]	; (8014de4 <usart_deinit+0xc0>)
 8014d60:	4298      	cmp	r0, r3
 8014d62:	d00e      	beq.n	8014d82 <usart_deinit+0x5e>
 8014d64:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8014d68:	4298      	cmp	r0, r3
 8014d6a:	d022      	beq.n	8014db2 <usart_deinit+0x8e>
 8014d6c:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8014d70:	4298      	cmp	r0, r3
 8014d72:	d1e9      	bne.n	8014d48 <usart_deinit+0x24>
 8014d74:	f641 601f 	movw	r0, #7711	; 0x1e1f
 8014d78:	f7ff fd25 	bl	80147c6 <rcu_periph_reset_enable>
 8014d7c:	f641 601f 	movw	r0, #7711	; 0x1e1f
 8014d80:	e005      	b.n	8014d8e <usart_deinit+0x6a>
 8014d82:	f240 300e 	movw	r0, #782	; 0x30e
 8014d86:	f7ff fd1e 	bl	80147c6 <rcu_periph_reset_enable>
 8014d8a:	f240 300e 	movw	r0, #782	; 0x30e
 8014d8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014d92:	f7ff bd1a 	b.w	80147ca <rcu_periph_reset_disable>
 8014d96:	f240 4011 	movw	r0, #1041	; 0x411
 8014d9a:	f7ff fd14 	bl	80147c6 <rcu_periph_reset_enable>
 8014d9e:	f240 4011 	movw	r0, #1041	; 0x411
 8014da2:	e7f4      	b.n	8014d8e <usart_deinit+0x6a>
 8014da4:	f240 4012 	movw	r0, #1042	; 0x412
 8014da8:	f7ff fd0d 	bl	80147c6 <rcu_periph_reset_enable>
 8014dac:	f240 4012 	movw	r0, #1042	; 0x412
 8014db0:	e7ed      	b.n	8014d8e <usart_deinit+0x6a>
 8014db2:	f641 5018 	movw	r0, #7448	; 0x1d18
 8014db6:	f7ff fd06 	bl	80147c6 <rcu_periph_reset_enable>
 8014dba:	f641 5018 	movw	r0, #7448	; 0x1d18
 8014dbe:	e7e6      	b.n	8014d8e <usart_deinit+0x6a>
 8014dc0:	f240 4013 	movw	r0, #1043	; 0x413
 8014dc4:	f7ff fcff 	bl	80147c6 <rcu_periph_reset_enable>
 8014dc8:	f240 4013 	movw	r0, #1043	; 0x413
 8014dcc:	e7df      	b.n	8014d8e <usart_deinit+0x6a>
 8014dce:	f641 601e 	movw	r0, #7710	; 0x1e1e
 8014dd2:	f7ff fcf8 	bl	80147c6 <rcu_periph_reset_enable>
 8014dd6:	f641 601e 	movw	r0, #7710	; 0x1e1e
 8014dda:	e7d8      	b.n	8014d8e <usart_deinit+0x6a>
 8014ddc:	40007800 	andmi	r7, r0, r0, lsl #16
 8014de0:	40005000 	andmi	r5, r0, r0
 8014de4:	40013800 	andmi	r3, r1, r0, lsl #16

08014de8 <usart_baudrate_set>:
 8014de8:	b538      	push	{r3, r4, r5, lr}
 8014dea:	4b16      	ldr	r3, [pc, #88]	; (8014e44 <usart_baudrate_set+0x5c>)
 8014dec:	4604      	mov	r4, r0
 8014dee:	4298      	cmp	r0, r3
 8014df0:	460d      	mov	r5, r1
 8014df2:	d025      	beq.n	8014e40 <usart_baudrate_set+0x58>
 8014df4:	d816      	bhi.n	8014e24 <usart_baudrate_set+0x3c>
 8014df6:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 8014dfa:	4298      	cmp	r0, r3
 8014dfc:	d020      	beq.n	8014e40 <usart_baudrate_set+0x58>
 8014dfe:	d80f      	bhi.n	8014e20 <usart_baudrate_set+0x38>
 8014e00:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014e04:	4298      	cmp	r0, r3
 8014e06:	d01b      	beq.n	8014e40 <usart_baudrate_set+0x58>
 8014e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014e0c:	429c      	cmp	r4, r3
 8014e0e:	d017      	beq.n	8014e40 <usart_baudrate_set+0x58>
 8014e10:	2000      	movs	r0, #0
 8014e12:	eb00 0155 	add.w	r1, r0, r5, lsr #1
 8014e16:	fbb1 f1f5 	udiv	r1, r1, r5
 8014e1a:	b289      	uxth	r1, r1
 8014e1c:	60a1      	str	r1, [r4, #8]
 8014e1e:	bd38      	pop	{r3, r4, r5, pc}
 8014e20:	4b09      	ldr	r3, [pc, #36]	; (8014e48 <usart_baudrate_set+0x60>)
 8014e22:	e7f3      	b.n	8014e0c <usart_baudrate_set+0x24>
 8014e24:	4b09      	ldr	r3, [pc, #36]	; (8014e4c <usart_baudrate_set+0x64>)
 8014e26:	4298      	cmp	r0, r3
 8014e28:	d006      	beq.n	8014e38 <usart_baudrate_set+0x50>
 8014e2a:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8014e2e:	4298      	cmp	r0, r3
 8014e30:	d002      	beq.n	8014e38 <usart_baudrate_set+0x50>
 8014e32:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8014e36:	e7e9      	b.n	8014e0c <usart_baudrate_set+0x24>
 8014e38:	2003      	movs	r0, #3
 8014e3a:	f7ff fd85 	bl	8014948 <rcu_clock_freq_get>
 8014e3e:	e7e8      	b.n	8014e12 <usart_baudrate_set+0x2a>
 8014e40:	2002      	movs	r0, #2
 8014e42:	e7fa      	b.n	8014e3a <usart_baudrate_set+0x52>
 8014e44:	40007800 	andmi	r7, r0, r0, lsl #16
 8014e48:	40005000 	andmi	r5, r0, r0
 8014e4c:	40013800 	andmi	r3, r1, r0, lsl #16

08014e50 <usart_parity_config>:
 8014e50:	68c3      	ldr	r3, [r0, #12]
 8014e52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8014e56:	60c3      	str	r3, [r0, #12]
 8014e58:	68c3      	ldr	r3, [r0, #12]
 8014e5a:	430b      	orrs	r3, r1
 8014e5c:	60c3      	str	r3, [r0, #12]
 8014e5e:	4770      	bx	lr

08014e60 <usart_word_length_set>:
 8014e60:	68c3      	ldr	r3, [r0, #12]
 8014e62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014e66:	60c3      	str	r3, [r0, #12]
 8014e68:	68c3      	ldr	r3, [r0, #12]
 8014e6a:	430b      	orrs	r3, r1
 8014e6c:	60c3      	str	r3, [r0, #12]
 8014e6e:	4770      	bx	lr

08014e70 <usart_stop_bit_set>:
 8014e70:	6903      	ldr	r3, [r0, #16]
 8014e72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8014e76:	6103      	str	r3, [r0, #16]
 8014e78:	6903      	ldr	r3, [r0, #16]
 8014e7a:	430b      	orrs	r3, r1
 8014e7c:	6103      	str	r3, [r0, #16]
 8014e7e:	4770      	bx	lr

08014e80 <usart_transmit_config>:
 8014e80:	68c3      	ldr	r3, [r0, #12]
 8014e82:	f023 0308 	bic.w	r3, r3, #8
 8014e86:	430b      	orrs	r3, r1
 8014e88:	60c3      	str	r3, [r0, #12]
 8014e8a:	4770      	bx	lr

08014e8c <usart_receive_config>:
 8014e8c:	68c3      	ldr	r3, [r0, #12]
 8014e8e:	f023 0304 	bic.w	r3, r3, #4
 8014e92:	430b      	orrs	r3, r1
 8014e94:	60c3      	str	r3, [r0, #12]
 8014e96:	4770      	bx	lr

08014e98 <usart_hardware_flow_rts_config>:
 8014e98:	6943      	ldr	r3, [r0, #20]
 8014e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014e9e:	430b      	orrs	r3, r1
 8014ea0:	6143      	str	r3, [r0, #20]
 8014ea2:	4770      	bx	lr

08014ea4 <usart_hardware_flow_cts_config>:
 8014ea4:	6943      	ldr	r3, [r0, #20]
 8014ea6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014eaa:	430b      	orrs	r3, r1
 8014eac:	6143      	str	r3, [r0, #20]
 8014eae:	4770      	bx	lr

08014eb0 <usart_dma_transmit_config>:
 8014eb0:	6943      	ldr	r3, [r0, #20]
 8014eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014eb6:	430b      	orrs	r3, r1
 8014eb8:	6143      	str	r3, [r0, #20]
 8014eba:	4770      	bx	lr

08014ebc <usart_flag_get>:
 8014ebc:	098b      	lsrs	r3, r1, #6
 8014ebe:	581a      	ldr	r2, [r3, r0]
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	f001 011f 	and.w	r1, r1, #31
 8014ec6:	408b      	lsls	r3, r1
 8014ec8:	4213      	tst	r3, r2
 8014eca:	bf14      	ite	ne
 8014ecc:	2001      	movne	r0, #1
 8014ece:	2000      	moveq	r0, #0
 8014ed0:	4770      	bx	lr

08014ed2 <usart_interrupt_enable>:
 8014ed2:	2301      	movs	r3, #1
 8014ed4:	b510      	push	{r4, lr}
 8014ed6:	f3c1 1289 	ubfx	r2, r1, #6, #10
 8014eda:	5814      	ldr	r4, [r2, r0]
 8014edc:	f001 011f 	and.w	r1, r1, #31
 8014ee0:	408b      	lsls	r3, r1
 8014ee2:	4323      	orrs	r3, r4
 8014ee4:	5013      	str	r3, [r2, r0]
 8014ee6:	bd10      	pop	{r4, pc}

08014ee8 <usart_interrupt_disable>:
 8014ee8:	2201      	movs	r2, #1
 8014eea:	b510      	push	{r4, lr}
 8014eec:	f3c1 1489 	ubfx	r4, r1, #6, #10
 8014ef0:	5823      	ldr	r3, [r4, r0]
 8014ef2:	f001 011f 	and.w	r1, r1, #31
 8014ef6:	408a      	lsls	r2, r1
 8014ef8:	ea23 0302 	bic.w	r3, r3, r2
 8014efc:	5023      	str	r3, [r4, r0]
 8014efe:	bd10      	pop	{r4, pc}

08014f00 <usart_interrupt_flag_clear>:
 8014f00:	2201      	movs	r2, #1
 8014f02:	b510      	push	{r4, lr}
 8014f04:	0d8c      	lsrs	r4, r1, #22
 8014f06:	5823      	ldr	r3, [r4, r0]
 8014f08:	f3c1 4104 	ubfx	r1, r1, #16, #5
 8014f0c:	408a      	lsls	r2, r1
 8014f0e:	ea23 0302 	bic.w	r3, r3, r2
 8014f12:	5023      	str	r3, [r4, r0]
 8014f14:	bd10      	pop	{r4, pc}
	...

08014f18 <emac_eth_recv>:
 8014f18:	b538      	push	{r3, r4, r5, lr}
 8014f1a:	4605      	mov	r5, r0
 8014f1c:	f001 f870 	bl	8016000 <enet_rxframe_size_get>
 8014f20:	4604      	mov	r4, r0
 8014f22:	b138      	cbz	r0, 8014f34 <emac_eth_recv+0x1c>
 8014f24:	4b05      	ldr	r3, [pc, #20]	; (8014f3c <emac_eth_recv+0x24>)
 8014f26:	2105      	movs	r1, #5
 8014f28:	6818      	ldr	r0, [r3, #0]
 8014f2a:	f001 f818 	bl	8015f5e <enet_desc_information_get>
 8014f2e:	6028      	str	r0, [r5, #0]
 8014f30:	4620      	mov	r0, r4
 8014f32:	bd38      	pop	{r3, r4, r5, pc}
 8014f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f38:	e7fb      	b.n	8014f32 <emac_eth_recv+0x1a>
 8014f3a:	bf00      	nop
 8014f3c:	2000ac8c 	andcs	sl, r0, ip, lsl #25

08014f40 <emac_free_pkt>:
 8014f40:	2100      	movs	r1, #0
 8014f42:	4608      	mov	r0, r1
 8014f44:	f000 bd46 	b.w	80159d4 <enet_frame_receive>

08014f48 <emac_eth_send>:
 8014f48:	f000 bd84 	b.w	8015a54 <enet_frame_transmit>

08014f4c <gd32_adc_init()>:
 8014f4c:	b510      	push	{r4, lr}
 8014f4e:	f240 6009 	movw	r0, #1545	; 0x609
 8014f52:	4c21      	ldr	r4, [pc, #132]	; (8014fd8 <gd32_adc_init()+0x8c>)
 8014f54:	f7ff fc1c 	bl	8014790 <rcu_periph_clock_enable>
 8014f58:	2005      	movs	r0, #5
 8014f5a:	f7ff fc55 	bl	8014808 <rcu_adc_clock_config>
 8014f5e:	4620      	mov	r0, r4
 8014f60:	2201      	movs	r2, #1
 8014f62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014f66:	f000 fbf5 	bl	8015754 <adc_special_function_config>
 8014f6a:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8014f6e:	4620      	mov	r0, r4
 8014f70:	2102      	movs	r1, #2
 8014f72:	f000 fc8e 	bl	8015892 <adc_external_trigger_source_config>
 8014f76:	2100      	movs	r1, #0
 8014f78:	4620      	mov	r0, r4
 8014f7a:	f000 fc13 	bl	80157a4 <adc_data_alignment_config>
 8014f7e:	2000      	movs	r0, #0
 8014f80:	f000 fbd8 	bl	8015734 <adc_mode_config>
 8014f84:	2202      	movs	r2, #2
 8014f86:	4620      	mov	r0, r4
 8014f88:	4611      	mov	r1, r2
 8014f8a:	f000 fc37 	bl	80157fc <adc_channel_length_config>
 8014f8e:	4620      	mov	r0, r4
 8014f90:	2307      	movs	r3, #7
 8014f92:	2210      	movs	r2, #16
 8014f94:	2100      	movs	r1, #0
 8014f96:	f000 fc4e 	bl	8015836 <adc_inserted_channel_config>
 8014f9a:	2307      	movs	r3, #7
 8014f9c:	4620      	mov	r0, r4
 8014f9e:	2211      	movs	r2, #17
 8014fa0:	2101      	movs	r1, #1
 8014fa2:	f000 fc48 	bl	8015836 <adc_inserted_channel_config>
 8014fa6:	2201      	movs	r2, #1
 8014fa8:	2102      	movs	r1, #2
 8014faa:	4620      	mov	r0, r4
 8014fac:	f000 fc82 	bl	80158b4 <adc_external_trigger_config>
 8014fb0:	f000 fc1a 	bl	80157e8 <adc_tempsensor_vrefint_enable>
 8014fb4:	4620      	mov	r0, r4
 8014fb6:	f000 fbfe 	bl	80157b6 <adc_enable>
 8014fba:	2100      	movs	r1, #0
 8014fbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014fc0:	f000 fae4 	bl	801558c <udelay(unsigned int, unsigned int)>
 8014fc4:	4620      	mov	r0, r4
 8014fc6:	f000 fbfe 	bl	80157c6 <adc_calibration_enable>
 8014fca:	4620      	mov	r0, r4
 8014fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fd0:	2102      	movs	r1, #2
 8014fd2:	f000 bc8a 	b.w	80158ea <adc_software_trigger_enable>
 8014fd6:	bf00      	nop
 8014fd8:	40012400 	andmi	r2, r1, r0, lsl #8

08014fdc <_stop() [clone .isra.0]>:
 8014fdc:	b508      	push	{r3, lr}
 8014fde:	4806      	ldr	r0, [pc, #24]	; (8014ff8 <_stop() [clone .isra.0]+0x1c>)
 8014fe0:	f001 f8d2 	bl	8016188 <i2c_stop_on_bus>
 8014fe4:	f640 73ff 	movw	r3, #4095	; 0xfff
 8014fe8:	4904      	ldr	r1, [pc, #16]	; (8014ffc <_stop() [clone .isra.0]+0x20>)
 8014fea:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8014fee:	0592      	lsls	r2, r2, #22
 8014ff0:	d501      	bpl.n	8014ff6 <_stop() [clone .isra.0]+0x1a>
 8014ff2:	3b01      	subs	r3, #1
 8014ff4:	d1f9      	bne.n	8014fea <_stop() [clone .isra.0]+0xe>
 8014ff6:	bd08      	pop	{r3, pc}
 8014ff8:	40005400 	andmi	r5, r0, r0, lsl #8
 8014ffc:	40005000 	andmi	r5, r0, r0

08015000 <gd32_i2c_begin>:
 8015000:	b510      	push	{r4, lr}
 8015002:	f240 7015 	movw	r0, #1813	; 0x715
 8015006:	f7ff fbc3 	bl	8014790 <rcu_periph_clock_enable>
 801500a:	4c15      	ldr	r4, [pc, #84]	; (8015060 <gd32_i2c_begin+0x60>)
 801500c:	f240 6003 	movw	r0, #1539	; 0x603
 8015010:	f7ff fbbe 	bl	8014790 <rcu_periph_clock_enable>
 8015014:	f240 6003 	movw	r0, #1539	; 0x603
 8015018:	f7ff fbba 	bl	8014790 <rcu_periph_clock_enable>
 801501c:	4620      	mov	r0, r4
 801501e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015022:	2203      	movs	r2, #3
 8015024:	211c      	movs	r1, #28
 8015026:	f7ff fb1b 	bl	8014660 <gpio_init>
 801502a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801502e:	2203      	movs	r2, #3
 8015030:	4620      	mov	r0, r4
 8015032:	211c      	movs	r1, #28
 8015034:	f7ff fb14 	bl	8014660 <gpio_init>
 8015038:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 801503c:	2101      	movs	r1, #1
 801503e:	2002      	movs	r0, #2
 8015040:	f7ff fb62 	bl	8014708 <gpio_pin_remap_config>
 8015044:	4620      	mov	r0, r4
 8015046:	4907      	ldr	r1, [pc, #28]	; (8015064 <gd32_i2c_begin+0x64>)
 8015048:	2200      	movs	r2, #0
 801504a:	f001 f817 	bl	801607c <i2c_clock_config>
 801504e:	4620      	mov	r0, r4
 8015050:	f001 f890 	bl	8016174 <i2c_enable>
 8015054:	4620      	mov	r0, r4
 8015056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801505a:	2101      	movs	r1, #1
 801505c:	f001 b870 	b.w	8016140 <i2c_ack_config>
 8015060:	40010c00 	andmi	r0, r1, r0, lsl #24
 8015064:	00061a80 	andeq	r1, r6, r0, lsl #21

08015068 <gd32_i2c_set_baudrate>:
 8015068:	4601      	mov	r1, r0
 801506a:	2200      	movs	r2, #0
 801506c:	4801      	ldr	r0, [pc, #4]	; (8015074 <gd32_i2c_set_baudrate+0xc>)
 801506e:	f001 b805 	b.w	801607c <i2c_clock_config>
 8015072:	bf00      	nop
 8015074:	40005400 	andmi	r5, r0, r0, lsl #8

08015078 <gd32_i2c_set_address>:
 8015078:	4b01      	ldr	r3, [pc, #4]	; (8015080 <gd32_i2c_set_address+0x8>)
 801507a:	0040      	lsls	r0, r0, #1
 801507c:	7018      	strb	r0, [r3, #0]
 801507e:	4770      	bx	lr
 8015080:	2000ac80 	andcs	sl, r0, r0, lsl #25

08015084 <gd32_i2c_write>:
 8015084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015086:	4604      	mov	r4, r0
 8015088:	460f      	mov	r7, r1
 801508a:	f640 75ff 	movw	r5, #4095	; 0xfff
 801508e:	4e2e      	ldr	r6, [pc, #184]	; (8015148 <gd32_i2c_write+0xc4>)
 8015090:	f240 6101 	movw	r1, #1537	; 0x601
 8015094:	4630      	mov	r0, r6
 8015096:	f001 f881 	bl	801619c <i2c_flag_get>
 801509a:	b9b0      	cbnz	r0, 80150ca <gd32_i2c_write+0x46>
 801509c:	482a      	ldr	r0, [pc, #168]	; (8015148 <gd32_i2c_write+0xc4>)
 801509e:	f001 f86e 	bl	801617e <i2c_start_on_bus>
 80150a2:	f640 75ff 	movw	r5, #4095	; 0xfff
 80150a6:	4e28      	ldr	r6, [pc, #160]	; (8015148 <gd32_i2c_write+0xc4>)
 80150a8:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80150ac:	4630      	mov	r0, r6
 80150ae:	f001 f875 	bl	801619c <i2c_flag_get>
 80150b2:	b190      	cbz	r0, 80150da <gd32_i2c_write+0x56>
 80150b4:	4b25      	ldr	r3, [pc, #148]	; (801514c <gd32_i2c_write+0xc8>)
 80150b6:	f06f 0201 	mvn.w	r2, #1
 80150ba:	7819      	ldrb	r1, [r3, #0]
 80150bc:	4822      	ldr	r0, [pc, #136]	; (8015148 <gd32_i2c_write+0xc4>)
 80150be:	f001 f851 	bl	8016164 <i2c_master_addressing>
 80150c2:	f640 75ff 	movw	r5, #4095	; 0xfff
 80150c6:	4e20      	ldr	r6, [pc, #128]	; (8015148 <gd32_i2c_write+0xc4>)
 80150c8:	e00c      	b.n	80150e4 <gd32_i2c_write+0x60>
 80150ca:	3d01      	subs	r5, #1
 80150cc:	d1e0      	bne.n	8015090 <gd32_i2c_write+0xc>
 80150ce:	f7ff ff85 	bl	8014fdc <_stop() [clone .isra.0]>
 80150d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80150d6:	4240      	negs	r0, r0
 80150d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150da:	3d01      	subs	r5, #1
 80150dc:	d1e4      	bne.n	80150a8 <gd32_i2c_write+0x24>
 80150de:	e7f6      	b.n	80150ce <gd32_i2c_write+0x4a>
 80150e0:	3d01      	subs	r5, #1
 80150e2:	d0f4      	beq.n	80150ce <gd32_i2c_write+0x4a>
 80150e4:	f240 5101 	movw	r1, #1281	; 0x501
 80150e8:	4630      	mov	r0, r6
 80150ea:	f001 f857 	bl	801619c <i2c_flag_get>
 80150ee:	2800      	cmp	r0, #0
 80150f0:	d0f6      	beq.n	80150e0 <gd32_i2c_write+0x5c>
 80150f2:	f240 5101 	movw	r1, #1281	; 0x501
 80150f6:	4814      	ldr	r0, [pc, #80]	; (8015148 <gd32_i2c_write+0xc4>)
 80150f8:	f001 f85b 	bl	80161b2 <i2c_flag_clear>
 80150fc:	f640 75ff 	movw	r5, #4095	; 0xfff
 8015100:	4e11      	ldr	r6, [pc, #68]	; (8015148 <gd32_i2c_write+0xc4>)
 8015102:	f240 5107 	movw	r1, #1287	; 0x507
 8015106:	4630      	mov	r0, r6
 8015108:	f001 f848 	bl	801619c <i2c_flag_get>
 801510c:	2801      	cmp	r0, #1
 801510e:	d107      	bne.n	8015120 <gd32_i2c_write+0x9c>
 8015110:	4e0d      	ldr	r6, [pc, #52]	; (8015148 <gd32_i2c_write+0xc4>)
 8015112:	4427      	add	r7, r4
 8015114:	42a7      	cmp	r7, r4
 8015116:	d106      	bne.n	8015126 <gd32_i2c_write+0xa2>
 8015118:	f7ff ff60 	bl	8014fdc <_stop() [clone .isra.0]>
 801511c:	2000      	movs	r0, #0
 801511e:	e7da      	b.n	80150d6 <gd32_i2c_write+0x52>
 8015120:	3d01      	subs	r5, #1
 8015122:	d1ee      	bne.n	8015102 <gd32_i2c_write+0x7e>
 8015124:	e7d3      	b.n	80150ce <gd32_i2c_write+0x4a>
 8015126:	4630      	mov	r0, r6
 8015128:	f814 1b01 	ldrb.w	r1, [r4], #1
 801512c:	f001 f831 	bl	8016192 <i2c_data_transmit>
 8015130:	f640 75ff 	movw	r5, #4095	; 0xfff
 8015134:	f240 5102 	movw	r1, #1282	; 0x502
 8015138:	4630      	mov	r0, r6
 801513a:	f001 f82f 	bl	801619c <i2c_flag_get>
 801513e:	2800      	cmp	r0, #0
 8015140:	d1e8      	bne.n	8015114 <gd32_i2c_write+0x90>
 8015142:	3d01      	subs	r5, #1
 8015144:	d1f6      	bne.n	8015134 <gd32_i2c_write+0xb0>
 8015146:	e7c2      	b.n	80150ce <gd32_i2c_write+0x4a>
 8015148:	40005400 	andmi	r5, r0, r0, lsl #8
 801514c:	2000ac80 	andcs	sl, r0, r0, lsl #25

08015150 <gd32_i2c_read>:
 8015150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015154:	4680      	mov	r8, r0
 8015156:	460c      	mov	r4, r1
 8015158:	f640 76ff 	movw	r6, #4095	; 0xfff
 801515c:	4f4b      	ldr	r7, [pc, #300]	; (801528c <gd32_i2c_read+0x13c>)
 801515e:	f240 6101 	movw	r1, #1537	; 0x601
 8015162:	4638      	mov	r0, r7
 8015164:	f001 f81a 	bl	801619c <i2c_flag_get>
 8015168:	4605      	mov	r5, r0
 801516a:	bb08      	cbnz	r0, 80151b0 <gd32_i2c_read+0x60>
 801516c:	2c02      	cmp	r4, #2
 801516e:	d103      	bne.n	8015178 <gd32_i2c_read+0x28>
 8015170:	4601      	mov	r1, r0
 8015172:	4846      	ldr	r0, [pc, #280]	; (801528c <gd32_i2c_read+0x13c>)
 8015174:	f000 ffed 	bl	8016152 <i2c_ackpos_config>
 8015178:	4844      	ldr	r0, [pc, #272]	; (801528c <gd32_i2c_read+0x13c>)
 801517a:	f001 f800 	bl	801617e <i2c_start_on_bus>
 801517e:	f640 76ff 	movw	r6, #4095	; 0xfff
 8015182:	4f42      	ldr	r7, [pc, #264]	; (801528c <gd32_i2c_read+0x13c>)
 8015184:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8015188:	4638      	mov	r0, r7
 801518a:	f001 f807 	bl	801619c <i2c_flag_get>
 801518e:	b1a8      	cbz	r0, 80151bc <gd32_i2c_read+0x6c>
 8015190:	4b3f      	ldr	r3, [pc, #252]	; (8015290 <gd32_i2c_read+0x140>)
 8015192:	2201      	movs	r2, #1
 8015194:	7819      	ldrb	r1, [r3, #0]
 8015196:	483d      	ldr	r0, [pc, #244]	; (801528c <gd32_i2c_read+0x13c>)
 8015198:	f000 ffe4 	bl	8016164 <i2c_master_addressing>
 801519c:	2c02      	cmp	r4, #2
 801519e:	d803      	bhi.n	80151a8 <gd32_i2c_read+0x58>
 80151a0:	2100      	movs	r1, #0
 80151a2:	483a      	ldr	r0, [pc, #232]	; (801528c <gd32_i2c_read+0x13c>)
 80151a4:	f000 ffcc 	bl	8016140 <i2c_ack_config>
 80151a8:	f640 76ff 	movw	r6, #4095	; 0xfff
 80151ac:	4f37      	ldr	r7, [pc, #220]	; (801528c <gd32_i2c_read+0x13c>)
 80151ae:	e00a      	b.n	80151c6 <gd32_i2c_read+0x76>
 80151b0:	3e01      	subs	r6, #1
 80151b2:	d1d4      	bne.n	801515e <gd32_i2c_read+0xe>
 80151b4:	f7ff ff12 	bl	8014fdc <_stop() [clone .isra.0]>
 80151b8:	2504      	movs	r5, #4
 80151ba:	e04d      	b.n	8015258 <gd32_i2c_read+0x108>
 80151bc:	3e01      	subs	r6, #1
 80151be:	d1e1      	bne.n	8015184 <gd32_i2c_read+0x34>
 80151c0:	e7f8      	b.n	80151b4 <gd32_i2c_read+0x64>
 80151c2:	3e01      	subs	r6, #1
 80151c4:	d0f6      	beq.n	80151b4 <gd32_i2c_read+0x64>
 80151c6:	f240 5101 	movw	r1, #1281	; 0x501
 80151ca:	4638      	mov	r0, r7
 80151cc:	f000 ffe6 	bl	801619c <i2c_flag_get>
 80151d0:	2800      	cmp	r0, #0
 80151d2:	d0f6      	beq.n	80151c2 <gd32_i2c_read+0x72>
 80151d4:	f240 5101 	movw	r1, #1281	; 0x501
 80151d8:	482c      	ldr	r0, [pc, #176]	; (801528c <gd32_i2c_read+0x13c>)
 80151da:	f000 ffea 	bl	80161b2 <i2c_flag_clear>
 80151de:	2c01      	cmp	r4, #1
 80151e0:	d102      	bne.n	80151e8 <gd32_i2c_read+0x98>
 80151e2:	482a      	ldr	r0, [pc, #168]	; (801528c <gd32_i2c_read+0x13c>)
 80151e4:	f000 ffd0 	bl	8016188 <i2c_stop_on_bus>
 80151e8:	f640 77ff 	movw	r7, #4095	; 0xfff
 80151ec:	4e27      	ldr	r6, [pc, #156]	; (801528c <gd32_i2c_read+0x13c>)
 80151ee:	e022      	b.n	8015236 <gd32_i2c_read+0xe6>
 80151f0:	2c03      	cmp	r4, #3
 80151f2:	d134      	bne.n	801525e <gd32_i2c_read+0x10e>
 80151f4:	f640 79ff 	movw	r9, #4095	; 0xfff
 80151f8:	e002      	b.n	8015200 <gd32_i2c_read+0xb0>
 80151fa:	f1b9 0901 	subs.w	r9, r9, #1
 80151fe:	d0d9      	beq.n	80151b4 <gd32_i2c_read+0x64>
 8015200:	f240 5102 	movw	r1, #1282	; 0x502
 8015204:	4630      	mov	r0, r6
 8015206:	f000 ffc9 	bl	801619c <i2c_flag_get>
 801520a:	2800      	cmp	r0, #0
 801520c:	d0f5      	beq.n	80151fa <gd32_i2c_read+0xaa>
 801520e:	2100      	movs	r1, #0
 8015210:	4630      	mov	r0, r6
 8015212:	f000 ff95 	bl	8016140 <i2c_ack_config>
 8015216:	f240 5106 	movw	r1, #1286	; 0x506
 801521a:	4630      	mov	r0, r6
 801521c:	f000 ffbe 	bl	801619c <i2c_flag_get>
 8015220:	b138      	cbz	r0, 8015232 <gd32_i2c_read+0xe2>
 8015222:	4630      	mov	r0, r6
 8015224:	f000 ffb7 	bl	8016196 <i2c_data_receive>
 8015228:	f640 77ff 	movw	r7, #4095	; 0xfff
 801522c:	f808 0b01 	strb.w	r0, [r8], #1
 8015230:	3c01      	subs	r4, #1
 8015232:	3f01      	subs	r7, #1
 8015234:	d0be      	beq.n	80151b4 <gd32_i2c_read+0x64>
 8015236:	2c00      	cmp	r4, #0
 8015238:	d1da      	bne.n	80151f0 <gd32_i2c_read+0xa0>
 801523a:	f640 73ff 	movw	r3, #4095	; 0xfff
 801523e:	4915      	ldr	r1, [pc, #84]	; (8015294 <gd32_i2c_read+0x144>)
 8015240:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8015244:	0592      	lsls	r2, r2, #22
 8015246:	d41d      	bmi.n	8015284 <gd32_i2c_read+0x134>
 8015248:	2101      	movs	r1, #1
 801524a:	4810      	ldr	r0, [pc, #64]	; (801528c <gd32_i2c_read+0x13c>)
 801524c:	f000 ff78 	bl	8016140 <i2c_ack_config>
 8015250:	2101      	movs	r1, #1
 8015252:	480e      	ldr	r0, [pc, #56]	; (801528c <gd32_i2c_read+0x13c>)
 8015254:	f000 ff7d 	bl	8016152 <i2c_ackpos_config>
 8015258:	4628      	mov	r0, r5
 801525a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801525e:	2c02      	cmp	r4, #2
 8015260:	d1d9      	bne.n	8015216 <gd32_i2c_read+0xc6>
 8015262:	f640 79ff 	movw	r9, #4095	; 0xfff
 8015266:	e002      	b.n	801526e <gd32_i2c_read+0x11e>
 8015268:	f1b9 0901 	subs.w	r9, r9, #1
 801526c:	d0a2      	beq.n	80151b4 <gd32_i2c_read+0x64>
 801526e:	f240 5102 	movw	r1, #1282	; 0x502
 8015272:	4630      	mov	r0, r6
 8015274:	f000 ff92 	bl	801619c <i2c_flag_get>
 8015278:	2800      	cmp	r0, #0
 801527a:	d0f5      	beq.n	8015268 <gd32_i2c_read+0x118>
 801527c:	4630      	mov	r0, r6
 801527e:	f000 ff83 	bl	8016188 <i2c_stop_on_bus>
 8015282:	e7c8      	b.n	8015216 <gd32_i2c_read+0xc6>
 8015284:	3b01      	subs	r3, #1
 8015286:	d1db      	bne.n	8015240 <gd32_i2c_read+0xf0>
 8015288:	e796      	b.n	80151b8 <gd32_i2c_read+0x68>
 801528a:	bf00      	nop
 801528c:	40005400 	andmi	r5, r0, r0, lsl #8
 8015290:	2000ac80 	andcs	sl, r0, r0, lsl #25
 8015294:	40005000 	andmi	r5, r0, r0

08015298 <gd32_uart_begin>:
 8015298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801529a:	461e      	mov	r6, r3
 801529c:	4b82      	ldr	r3, [pc, #520]	; (80154a8 <gd32_uart_begin+0x210>)
 801529e:	4604      	mov	r4, r0
 80152a0:	4298      	cmp	r0, r3
 80152a2:	460f      	mov	r7, r1
 80152a4:	4615      	mov	r5, r2
 80152a6:	d060      	beq.n	801536a <gd32_uart_begin+0xd2>
 80152a8:	d80f      	bhi.n	80152ca <gd32_uart_begin+0x32>
 80152aa:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 80152ae:	4298      	cmp	r0, r3
 80152b0:	d04a      	beq.n	8015348 <gd32_uart_begin+0xb0>
 80152b2:	d84c      	bhi.n	801534e <gd32_uart_begin+0xb6>
 80152b4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80152b8:	4298      	cmp	r0, r3
 80152ba:	d03e      	beq.n	801533a <gd32_uart_begin+0xa2>
 80152bc:	f240 7012 	movw	r0, #1810	; 0x712
 80152c0:	f7ff fa66 	bl	8014790 <rcu_periph_clock_enable>
 80152c4:	f240 6004 	movw	r0, #1540	; 0x604
 80152c8:	e00f      	b.n	80152ea <gd32_uart_begin+0x52>
 80152ca:	4b78      	ldr	r3, [pc, #480]	; (80154ac <gd32_uart_begin+0x214>)
 80152cc:	4298      	cmp	r0, r3
 80152ce:	d006      	beq.n	80152de <gd32_uart_begin+0x46>
 80152d0:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 80152d4:	4298      	cmp	r0, r3
 80152d6:	d045      	beq.n	8015364 <gd32_uart_begin+0xcc>
 80152d8:	f641 201f 	movw	r0, #6687	; 0x1a1f
 80152dc:	e047      	b.n	801536e <gd32_uart_begin+0xd6>
 80152de:	f240 600e 	movw	r0, #1550	; 0x60e
 80152e2:	f7ff fa55 	bl	8014790 <rcu_periph_clock_enable>
 80152e6:	f240 6003 	movw	r0, #1539	; 0x603
 80152ea:	f7ff fa51 	bl	8014790 <rcu_periph_clock_enable>
 80152ee:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80152f2:	f7ff fa4d 	bl	8014790 <rcu_periph_clock_enable>
 80152f6:	4b6c      	ldr	r3, [pc, #432]	; (80154a8 <gd32_uart_begin+0x210>)
 80152f8:	429c      	cmp	r4, r3
 80152fa:	f000 80c3 	beq.w	8015484 <gd32_uart_begin+0x1ec>
 80152fe:	d83b      	bhi.n	8015378 <gd32_uart_begin+0xe0>
 8015300:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 8015304:	429c      	cmp	r4, r3
 8015306:	f000 809c 	beq.w	8015442 <gd32_uart_begin+0x1aa>
 801530a:	f200 80a7 	bhi.w	801545c <gd32_uart_begin+0x1c4>
 801530e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8015312:	429c      	cmp	r4, r3
 8015314:	f000 8088 	beq.w	8015428 <gd32_uart_begin+0x190>
 8015318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801531c:	2203      	movs	r2, #3
 801531e:	2118      	movs	r1, #24
 8015320:	4863      	ldr	r0, [pc, #396]	; (80154b0 <gd32_uart_begin+0x218>)
 8015322:	f7ff f99d 	bl	8014660 <gpio_init>
 8015326:	2104      	movs	r1, #4
 8015328:	4861      	ldr	r0, [pc, #388]	; (80154b0 <gd32_uart_begin+0x218>)
 801532a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801532e:	2203      	movs	r2, #3
 8015330:	f7ff f996 	bl	8014660 <gpio_init>
 8015334:	2101      	movs	r1, #1
 8015336:	485f      	ldr	r0, [pc, #380]	; (80154b4 <gd32_uart_begin+0x21c>)
 8015338:	e03b      	b.n	80153b2 <gd32_uart_begin+0x11a>
 801533a:	f240 7011 	movw	r0, #1809	; 0x711
 801533e:	f7ff fa27 	bl	8014790 <rcu_periph_clock_enable>
 8015342:	f240 6002 	movw	r0, #1538	; 0x602
 8015346:	e7d0      	b.n	80152ea <gd32_uart_begin+0x52>
 8015348:	f240 7013 	movw	r0, #1811	; 0x713
 801534c:	e7b8      	b.n	80152c0 <gd32_uart_begin+0x28>
 801534e:	f240 7014 	movw	r0, #1812	; 0x714
 8015352:	f7ff fa1d 	bl	8014790 <rcu_periph_clock_enable>
 8015356:	f240 6004 	movw	r0, #1540	; 0x604
 801535a:	f7ff fa19 	bl	8014790 <rcu_periph_clock_enable>
 801535e:	f240 6005 	movw	r0, #1541	; 0x605
 8015362:	e7c2      	b.n	80152ea <gd32_uart_begin+0x52>
 8015364:	f641 1018 	movw	r0, #6424	; 0x1918
 8015368:	e7aa      	b.n	80152c0 <gd32_uart_begin+0x28>
 801536a:	f641 201e 	movw	r0, #6686	; 0x1a1e
 801536e:	f7ff fa0f 	bl	8014790 <rcu_periph_clock_enable>
 8015372:	f240 6006 	movw	r0, #1542	; 0x606
 8015376:	e7b8      	b.n	80152ea <gd32_uart_begin+0x52>
 8015378:	4b4c      	ldr	r3, [pc, #304]	; (80154ac <gd32_uart_begin+0x214>)
 801537a:	429c      	cmp	r4, r3
 801537c:	d00b      	beq.n	8015396 <gd32_uart_begin+0xfe>
 801537e:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8015382:	429c      	cmp	r4, r3
 8015384:	d076      	beq.n	8015474 <gd32_uart_begin+0x1dc>
 8015386:	2302      	movs	r3, #2
 8015388:	2203      	movs	r2, #3
 801538a:	2118      	movs	r1, #24
 801538c:	484a      	ldr	r0, [pc, #296]	; (80154b8 <gd32_uart_begin+0x220>)
 801538e:	f7ff f967 	bl	8014660 <gpio_init>
 8015392:	2301      	movs	r3, #1
 8015394:	e07e      	b.n	8015494 <gd32_uart_begin+0x1fc>
 8015396:	2340      	movs	r3, #64	; 0x40
 8015398:	2203      	movs	r2, #3
 801539a:	2118      	movs	r1, #24
 801539c:	4847      	ldr	r0, [pc, #284]	; (80154bc <gd32_uart_begin+0x224>)
 801539e:	f7ff f95f 	bl	8014660 <gpio_init>
 80153a2:	2104      	movs	r1, #4
 80153a4:	4845      	ldr	r0, [pc, #276]	; (80154bc <gd32_uart_begin+0x224>)
 80153a6:	2380      	movs	r3, #128	; 0x80
 80153a8:	2203      	movs	r2, #3
 80153aa:	f7ff f959 	bl	8014660 <gpio_init>
 80153ae:	2101      	movs	r1, #1
 80153b0:	2004      	movs	r0, #4
 80153b2:	f7ff f9a9 	bl	8014708 <gpio_pin_remap_config>
 80153b6:	4620      	mov	r0, r4
 80153b8:	f7ff fcb4 	bl	8014d24 <usart_deinit>
 80153bc:	68e3      	ldr	r3, [r4, #12]
 80153be:	4639      	mov	r1, r7
 80153c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80153c4:	4620      	mov	r0, r4
 80153c6:	60e3      	str	r3, [r4, #12]
 80153c8:	f7ff fd0e 	bl	8014de8 <usart_baudrate_set>
 80153cc:	f1a5 0309 	sub.w	r3, r5, #9
 80153d0:	4259      	negs	r1, r3
 80153d2:	4159      	adcs	r1, r3
 80153d4:	4620      	mov	r0, r4
 80153d6:	0309      	lsls	r1, r1, #12
 80153d8:	f7ff fd42 	bl	8014e60 <usart_word_length_set>
 80153dc:	9906      	ldr	r1, [sp, #24]
 80153de:	4620      	mov	r0, r4
 80153e0:	1e8a      	subs	r2, r1, #2
 80153e2:	4251      	negs	r1, r2
 80153e4:	4151      	adcs	r1, r2
 80153e6:	0349      	lsls	r1, r1, #13
 80153e8:	f7ff fd42 	bl	8014e70 <usart_stop_bit_set>
 80153ec:	2e01      	cmp	r6, #1
 80153ee:	d055      	beq.n	801549c <gd32_uart_begin+0x204>
 80153f0:	2e02      	cmp	r6, #2
 80153f2:	d156      	bne.n	80154a2 <gd32_uart_begin+0x20a>
 80153f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80153f8:	4620      	mov	r0, r4
 80153fa:	f7ff fd29 	bl	8014e50 <usart_parity_config>
 80153fe:	2100      	movs	r1, #0
 8015400:	4620      	mov	r0, r4
 8015402:	f7ff fd49 	bl	8014e98 <usart_hardware_flow_rts_config>
 8015406:	2100      	movs	r1, #0
 8015408:	4620      	mov	r0, r4
 801540a:	f7ff fd4b 	bl	8014ea4 <usart_hardware_flow_cts_config>
 801540e:	2104      	movs	r1, #4
 8015410:	4620      	mov	r0, r4
 8015412:	f7ff fd3b 	bl	8014e8c <usart_receive_config>
 8015416:	2108      	movs	r1, #8
 8015418:	4620      	mov	r0, r4
 801541a:	f7ff fd31 	bl	8014e80 <usart_transmit_config>
 801541e:	68e3      	ldr	r3, [r4, #12]
 8015420:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015424:	60e3      	str	r3, [r4, #12]
 8015426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015428:	2304      	movs	r3, #4
 801542a:	2203      	movs	r2, #3
 801542c:	2118      	movs	r1, #24
 801542e:	4824      	ldr	r0, [pc, #144]	; (80154c0 <gd32_uart_begin+0x228>)
 8015430:	f7ff f916 	bl	8014660 <gpio_init>
 8015434:	2308      	movs	r3, #8
 8015436:	2203      	movs	r2, #3
 8015438:	2104      	movs	r1, #4
 801543a:	4821      	ldr	r0, [pc, #132]	; (80154c0 <gd32_uart_begin+0x228>)
 801543c:	f7ff f910 	bl	8014660 <gpio_init>
 8015440:	e7b9      	b.n	80153b6 <gd32_uart_begin+0x11e>
 8015442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015446:	2203      	movs	r2, #3
 8015448:	2118      	movs	r1, #24
 801544a:	4819      	ldr	r0, [pc, #100]	; (80154b0 <gd32_uart_begin+0x218>)
 801544c:	f7ff f908 	bl	8014660 <gpio_init>
 8015450:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015454:	2203      	movs	r2, #3
 8015456:	2104      	movs	r1, #4
 8015458:	4815      	ldr	r0, [pc, #84]	; (80154b0 <gd32_uart_begin+0x218>)
 801545a:	e7ef      	b.n	801543c <gd32_uart_begin+0x1a4>
 801545c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015460:	2203      	movs	r2, #3
 8015462:	2118      	movs	r1, #24
 8015464:	4812      	ldr	r0, [pc, #72]	; (80154b0 <gd32_uart_begin+0x218>)
 8015466:	f7ff f8fb 	bl	8014660 <gpio_init>
 801546a:	2304      	movs	r3, #4
 801546c:	2203      	movs	r2, #3
 801546e:	4619      	mov	r1, r3
 8015470:	4814      	ldr	r0, [pc, #80]	; (80154c4 <gd32_uart_begin+0x22c>)
 8015472:	e7e3      	b.n	801543c <gd32_uart_begin+0x1a4>
 8015474:	2340      	movs	r3, #64	; 0x40
 8015476:	2203      	movs	r2, #3
 8015478:	2118      	movs	r1, #24
 801547a:	480d      	ldr	r0, [pc, #52]	; (80154b0 <gd32_uart_begin+0x218>)
 801547c:	f7ff f8f0 	bl	8014660 <gpio_init>
 8015480:	2380      	movs	r3, #128	; 0x80
 8015482:	e7e7      	b.n	8015454 <gd32_uart_begin+0x1bc>
 8015484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015488:	2203      	movs	r2, #3
 801548a:	2118      	movs	r1, #24
 801548c:	480a      	ldr	r0, [pc, #40]	; (80154b8 <gd32_uart_begin+0x220>)
 801548e:	f7ff f8e7 	bl	8014660 <gpio_init>
 8015492:	2380      	movs	r3, #128	; 0x80
 8015494:	2203      	movs	r2, #3
 8015496:	2104      	movs	r1, #4
 8015498:	4807      	ldr	r0, [pc, #28]	; (80154b8 <gd32_uart_begin+0x220>)
 801549a:	e7cf      	b.n	801543c <gd32_uart_begin+0x1a4>
 801549c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80154a0:	e7aa      	b.n	80153f8 <gd32_uart_begin+0x160>
 80154a2:	2100      	movs	r1, #0
 80154a4:	e7a8      	b.n	80153f8 <gd32_uart_begin+0x160>
 80154a6:	bf00      	nop
 80154a8:	40007800 	andmi	r7, r0, r0, lsl #16
 80154ac:	40013800 	andmi	r3, r1, r0, lsl #16
 80154b0:	40011000 	andmi	r1, r1, r0
 80154b4:	00140010 	andseq	r0, r4, r0, lsl r0
 80154b8:	40011800 	andmi	r1, r1, r0, lsl #16
 80154bc:	40010c00 	andmi	r0, r1, r0, lsl #24
 80154c0:	40010800 	andmi	r0, r1, r0, lsl #16
 80154c4:	40011400 	andmi	r1, r1, r0, lsl #8

080154c8 <micros_init()>:
 80154c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80154ca:	2400      	movs	r4, #0
 80154cc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80154d0:	4d22      	ldr	r5, [pc, #136]	; (801555c <micros_init()+0x94>)
 80154d2:	f240 6013 	movw	r0, #1555	; 0x613
 80154d6:	f7ff f95b 	bl	8014790 <rcu_periph_clock_enable>
 80154da:	4628      	mov	r0, r5
 80154dc:	f7ff fabc 	bl	8014a58 <timer_deinit>
 80154e0:	4b1f      	ldr	r3, [pc, #124]	; (8015560 <micros_init()+0x98>)
 80154e2:	4628      	mov	r0, r5
 80154e4:	f8c3 4c24 	str.w	r4, [r3, #3108]	; 0xc24
 80154e8:	4669      	mov	r1, sp
 80154ea:	9400      	str	r4, [sp, #0]
 80154ec:	f8ad 4004 	strh.w	r4, [sp, #4]
 80154f0:	9602      	str	r6, [sp, #8]
 80154f2:	f8ad 400c 	strh.w	r4, [sp, #12]
 80154f6:	f7ff fb55 	bl	8014ba4 <timer_init>
 80154fa:	4628      	mov	r0, r5
 80154fc:	4621      	mov	r1, r4
 80154fe:	f7ff fbfa 	bl	8014cf6 <timer_master_slave_mode_config>
 8015502:	4628      	mov	r0, r5
 8015504:	2107      	movs	r1, #7
 8015506:	f7ff fbee 	bl	8014ce6 <timer_slave_mode_select>
 801550a:	2120      	movs	r1, #32
 801550c:	4628      	mov	r0, r5
 801550e:	f7ff fbda 	bl	8014cc6 <timer_input_trigger_source_select>
 8015512:	4628      	mov	r0, r5
 8015514:	f7ff fb9e 	bl	8014c54 <timer_enable>
 8015518:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 801551c:	f240 6014 	movw	r0, #1556	; 0x614
 8015520:	f7ff f936 	bl	8014790 <rcu_periph_clock_enable>
 8015524:	4628      	mov	r0, r5
 8015526:	f7ff fa97 	bl	8014a58 <timer_deinit>
 801552a:	2377      	movs	r3, #119	; 0x77
 801552c:	626c      	str	r4, [r5, #36]	; 0x24
 801552e:	4669      	mov	r1, sp
 8015530:	4628      	mov	r0, r5
 8015532:	9300      	str	r3, [sp, #0]
 8015534:	f8ad 4004 	strh.w	r4, [sp, #4]
 8015538:	9602      	str	r6, [sp, #8]
 801553a:	f8ad 400c 	strh.w	r4, [sp, #12]
 801553e:	f7ff fb31 	bl	8014ba4 <timer_init>
 8015542:	4621      	mov	r1, r4
 8015544:	4628      	mov	r0, r5
 8015546:	f7ff fbd6 	bl	8014cf6 <timer_master_slave_mode_config>
 801554a:	2120      	movs	r1, #32
 801554c:	4628      	mov	r0, r5
 801554e:	f7ff fbc2 	bl	8014cd6 <timer_master_output_trigger_source_select>
 8015552:	4628      	mov	r0, r5
 8015554:	f7ff fb7e 	bl	8014c54 <timer_enable>
 8015558:	b004      	add	sp, #16
 801555a:	bd70      	pop	{r4, r5, r6, pc}
 801555c:	40014c00 	andmi	r4, r1, r0, lsl #24
 8015560:	40014000 	andmi	r4, r1, r0

08015564 <udelay_init()>:
 8015564:	4a07      	ldr	r2, [pc, #28]	; (8015584 <udelay_init()+0x20>)
 8015566:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 801556a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801556e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8015572:	2200      	movs	r2, #0
 8015574:	4b04      	ldr	r3, [pc, #16]	; (8015588 <udelay_init()+0x24>)
 8015576:	605a      	str	r2, [r3, #4]
 8015578:	681a      	ldr	r2, [r3, #0]
 801557a:	f042 0201 	orr.w	r2, r2, #1
 801557e:	601a      	str	r2, [r3, #0]
 8015580:	4770      	bx	lr
 8015582:	bf00      	nop
 8015584:	e000ed00 	and	lr, r0, r0, lsl #26
 8015588:	e0001000 	and	r1, r0, r0

0801558c <udelay(unsigned int, unsigned int)>:
 801558c:	2378      	movs	r3, #120	; 0x78
 801558e:	b530      	push	{r4, r5, lr}
 8015590:	4358      	muls	r0, r3
 8015592:	b909      	cbnz	r1, 8015598 <udelay(unsigned int, unsigned int)+0xc>
 8015594:	4b08      	ldr	r3, [pc, #32]	; (80155b8 <udelay(unsigned int, unsigned int)+0x2c>)
 8015596:	6859      	ldr	r1, [r3, #4]
 8015598:	2300      	movs	r3, #0
 801559a:	4c07      	ldr	r4, [pc, #28]	; (80155b8 <udelay(unsigned int, unsigned int)+0x2c>)
 801559c:	6862      	ldr	r2, [r4, #4]
 801559e:	4291      	cmp	r1, r2
 80155a0:	d0fc      	beq.n	801559c <udelay(unsigned int, unsigned int)+0x10>
 80155a2:	bf2a      	itet	cs
 80155a4:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 80155a8:	189b      	addcc	r3, r3, r2
 80155aa:	195b      	addcs	r3, r3, r5
 80155ac:	1a5b      	subs	r3, r3, r1
 80155ae:	4283      	cmp	r3, r0
 80155b0:	d300      	bcc.n	80155b4 <udelay(unsigned int, unsigned int)+0x28>
 80155b2:	bd30      	pop	{r4, r5, pc}
 80155b4:	4611      	mov	r1, r2
 80155b6:	e7f1      	b.n	801559c <udelay(unsigned int, unsigned int)+0x10>
 80155b8:	e0001000 	and	r1, r0, r0

080155bc <emac_start(unsigned char*)>:
 80155bc:	b538      	push	{r3, r4, r5, lr}
 80155be:	4605      	mov	r5, r0
 80155c0:	f240 6002 	movw	r0, #1538	; 0x602
 80155c4:	f7ff f8e4 	bl	8014790 <rcu_periph_clock_enable>
 80155c8:	f240 6003 	movw	r0, #1539	; 0x603
 80155cc:	f7ff f8e0 	bl	8014790 <rcu_periph_clock_enable>
 80155d0:	f240 6004 	movw	r0, #1540	; 0x604
 80155d4:	f7ff f8dc 	bl	8014790 <rcu_periph_clock_enable>
 80155d8:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80155dc:	f7ff f8d8 	bl	8014790 <rcu_periph_clock_enable>
 80155e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80155e4:	2203      	movs	r2, #3
 80155e6:	2118      	movs	r1, #24
 80155e8:	4844      	ldr	r0, [pc, #272]	; (80156fc <emac_start(unsigned char*)+0x140>)
 80155ea:	f7ff f839 	bl	8014660 <gpio_init>
 80155ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80155f2:	f7ff f8fd 	bl	80147f0 <rcu_pll2_config>
 80155f6:	201c      	movs	r0, #28
 80155f8:	f7ff f9a4 	bl	8014944 <rcu_osci_on>
 80155fc:	201c      	movs	r0, #28
 80155fe:	f7ff f931 	bl	8014864 <rcu_osci_stab_wait>
 8015602:	2100      	movs	r1, #0
 8015604:	f04f 6030 	mov.w	r0, #184549376	; 0xb000000
 8015608:	f7ff f8e2 	bl	80147d0 <rcu_ckout0_config>
 801560c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8015610:	f7ff f8aa 	bl	8014768 <gpio_ethernet_phy_select>
 8015614:	2302      	movs	r3, #2
 8015616:	2203      	movs	r2, #3
 8015618:	2104      	movs	r1, #4
 801561a:	4838      	ldr	r0, [pc, #224]	; (80156fc <emac_start(unsigned char*)+0x140>)
 801561c:	f7ff f820 	bl	8014660 <gpio_init>
 8015620:	2304      	movs	r3, #4
 8015622:	2203      	movs	r2, #3
 8015624:	2118      	movs	r1, #24
 8015626:	4835      	ldr	r0, [pc, #212]	; (80156fc <emac_start(unsigned char*)+0x140>)
 8015628:	f7ff f81a 	bl	8014660 <gpio_init>
 801562c:	2380      	movs	r3, #128	; 0x80
 801562e:	2203      	movs	r2, #3
 8015630:	2104      	movs	r1, #4
 8015632:	4832      	ldr	r0, [pc, #200]	; (80156fc <emac_start(unsigned char*)+0x140>)
 8015634:	f7ff f814 	bl	8014660 <gpio_init>
 8015638:	2302      	movs	r3, #2
 801563a:	2203      	movs	r2, #3
 801563c:	2118      	movs	r1, #24
 801563e:	4830      	ldr	r0, [pc, #192]	; (8015700 <emac_start(unsigned char*)+0x144>)
 8015640:	f7ff f80e 	bl	8014660 <gpio_init>
 8015644:	2310      	movs	r3, #16
 8015646:	2203      	movs	r2, #3
 8015648:	2104      	movs	r1, #4
 801564a:	482d      	ldr	r0, [pc, #180]	; (8015700 <emac_start(unsigned char*)+0x144>)
 801564c:	f7ff f808 	bl	8014660 <gpio_init>
 8015650:	2320      	movs	r3, #32
 8015652:	2203      	movs	r2, #3
 8015654:	2104      	movs	r1, #4
 8015656:	482a      	ldr	r0, [pc, #168]	; (8015700 <emac_start(unsigned char*)+0x144>)
 8015658:	f7ff f802 	bl	8014660 <gpio_init>
 801565c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015660:	2203      	movs	r2, #3
 8015662:	2118      	movs	r1, #24
 8015664:	4827      	ldr	r0, [pc, #156]	; (8015704 <emac_start(unsigned char*)+0x148>)
 8015666:	f7fe fffb 	bl	8014660 <gpio_init>
 801566a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801566e:	2203      	movs	r2, #3
 8015670:	2118      	movs	r1, #24
 8015672:	4824      	ldr	r0, [pc, #144]	; (8015704 <emac_start(unsigned char*)+0x148>)
 8015674:	f7fe fff4 	bl	8014660 <gpio_init>
 8015678:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801567c:	2203      	movs	r2, #3
 801567e:	2118      	movs	r1, #24
 8015680:	4820      	ldr	r0, [pc, #128]	; (8015704 <emac_start(unsigned char*)+0x148>)
 8015682:	f7fe ffed 	bl	8014660 <gpio_init>
 8015686:	f240 500e 	movw	r0, #1294	; 0x50e
 801568a:	f7ff f881 	bl	8014790 <rcu_periph_clock_enable>
 801568e:	f240 500f 	movw	r0, #1295	; 0x50f
 8015692:	f7ff f87d 	bl	8014790 <rcu_periph_clock_enable>
 8015696:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 801569a:	f7ff f879 	bl	8014790 <rcu_periph_clock_enable>
 801569e:	f000 fcdf 	bl	8016060 <enet_deinit>
 80156a2:	f000 f93b 	bl	801591c <enet_software_reset>
 80156a6:	4604      	mov	r4, r0
 80156a8:	b138      	cbz	r0, 80156ba <emac_start(unsigned char*)+0xfe>
 80156aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80156ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80156b2:	2001      	movs	r0, #1
 80156b4:	f000 fab6 	bl	8015c24 <enet_init>
 80156b8:	4604      	mov	r4, r0
 80156ba:	4628      	mov	r0, r5
 80156bc:	f000 fd8c 	bl	80161d8 <mac_address_get(unsigned char*)>
 80156c0:	4629      	mov	r1, r5
 80156c2:	2000      	movs	r0, #0
 80156c4:	f000 fa0e 	bl	8015ae4 <enet_mac_address_set>
 80156c8:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 80156cc:	f000 f93a 	bl	8015944 <enet_descriptors_chain_init>
 80156d0:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 80156d4:	f000 f936 	bl	8015944 <enet_descriptors_chain_init>
 80156d8:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 80156dc:	480a      	ldr	r0, [pc, #40]	; (8015708 <emac_start(unsigned char*)+0x14c>)
 80156de:	f000 f9fb 	bl	8015ad8 <enet_transmit_checksum_config>
 80156e2:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 80156e6:	4809      	ldr	r0, [pc, #36]	; (801570c <emac_start(unsigned char*)+0x150>)
 80156e8:	f000 f9f6 	bl	8015ad8 <enet_transmit_checksum_config>
 80156ec:	f000 fc30 	bl	8015f50 <enet_enable>
 80156f0:	fab4 f084 	clz	r0, r4
 80156f4:	0940      	lsrs	r0, r0, #5
 80156f6:	4240      	negs	r0, r0
 80156f8:	bd38      	pop	{r3, r4, r5, pc}
 80156fa:	bf00      	nop
 80156fc:	40010800 	andmi	r0, r1, r0, lsl #16
 8015700:	40011000 	andmi	r1, r1, r0
 8015704:	40010c00 	andmi	r0, r1, r0, lsl #24
 8015708:	2000e8d8 	ldrdcs	lr, [r0], -r8
 801570c:	2000e8e8 	andcs	lr, r0, r8, ror #17

08015710 <net::link_register_read()>:
 8015710:	b507      	push	{r0, r1, r2, lr}
 8015712:	2201      	movs	r2, #1
 8015714:	f10d 0306 	add.w	r3, sp, #6
 8015718:	4611      	mov	r1, r2
 801571a:	2000      	movs	r0, #0
 801571c:	f000 f9fa 	bl	8015b14 <enet_phy_write_read>
 8015720:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8015724:	f080 0004 	eor.w	r0, r0, #4
 8015728:	f3c0 0080 	ubfx	r0, r0, #2, #1
 801572c:	b003      	add	sp, #12
 801572e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015734 <adc_mode_config>:
 8015734:	4b06      	ldr	r3, [pc, #24]	; (8015750 <adc_mode_config+0x1c>)
 8015736:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801573a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 801573e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8015742:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015746:	4302      	orrs	r2, r0
 8015748:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 801574c:	4770      	bx	lr
 801574e:	bf00      	nop
 8015750:	40012000 	andmi	r2, r1, r0

08015754 <adc_special_function_config>:
 8015754:	b510      	push	{r4, lr}
 8015756:	f401 7380 	and.w	r3, r1, #256	; 0x100
 801575a:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 801575e:	f001 0102 	and.w	r1, r1, #2
 8015762:	b17a      	cbz	r2, 8015784 <adc_special_function_config+0x30>
 8015764:	b11b      	cbz	r3, 801576e <adc_special_function_config+0x1a>
 8015766:	6843      	ldr	r3, [r0, #4]
 8015768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801576c:	6043      	str	r3, [r0, #4]
 801576e:	b11c      	cbz	r4, 8015778 <adc_special_function_config+0x24>
 8015770:	6843      	ldr	r3, [r0, #4]
 8015772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015776:	6043      	str	r3, [r0, #4]
 8015778:	b119      	cbz	r1, 8015782 <adc_special_function_config+0x2e>
 801577a:	6883      	ldr	r3, [r0, #8]
 801577c:	f043 0302 	orr.w	r3, r3, #2
 8015780:	6083      	str	r3, [r0, #8]
 8015782:	bd10      	pop	{r4, pc}
 8015784:	b11b      	cbz	r3, 801578e <adc_special_function_config+0x3a>
 8015786:	6843      	ldr	r3, [r0, #4]
 8015788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801578c:	6043      	str	r3, [r0, #4]
 801578e:	b11c      	cbz	r4, 8015798 <adc_special_function_config+0x44>
 8015790:	6843      	ldr	r3, [r0, #4]
 8015792:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015796:	6043      	str	r3, [r0, #4]
 8015798:	2900      	cmp	r1, #0
 801579a:	d0f2      	beq.n	8015782 <adc_special_function_config+0x2e>
 801579c:	6883      	ldr	r3, [r0, #8]
 801579e:	f023 0302 	bic.w	r3, r3, #2
 80157a2:	e7ed      	b.n	8015780 <adc_special_function_config+0x2c>

080157a4 <adc_data_alignment_config>:
 80157a4:	6883      	ldr	r3, [r0, #8]
 80157a6:	b119      	cbz	r1, 80157b0 <adc_data_alignment_config+0xc>
 80157a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80157ac:	6083      	str	r3, [r0, #8]
 80157ae:	4770      	bx	lr
 80157b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80157b4:	e7fa      	b.n	80157ac <adc_data_alignment_config+0x8>

080157b6 <adc_enable>:
 80157b6:	6883      	ldr	r3, [r0, #8]
 80157b8:	07db      	lsls	r3, r3, #31
 80157ba:	bf5e      	ittt	pl
 80157bc:	6883      	ldrpl	r3, [r0, #8]
 80157be:	f043 0301 	orrpl.w	r3, r3, #1
 80157c2:	6083      	strpl	r3, [r0, #8]
 80157c4:	4770      	bx	lr

080157c6 <adc_calibration_enable>:
 80157c6:	6883      	ldr	r3, [r0, #8]
 80157c8:	f100 0208 	add.w	r2, r0, #8
 80157cc:	f043 0308 	orr.w	r3, r3, #8
 80157d0:	6083      	str	r3, [r0, #8]
 80157d2:	6813      	ldr	r3, [r2, #0]
 80157d4:	0719      	lsls	r1, r3, #28
 80157d6:	d4fc      	bmi.n	80157d2 <adc_calibration_enable+0xc>
 80157d8:	6883      	ldr	r3, [r0, #8]
 80157da:	f043 0304 	orr.w	r3, r3, #4
 80157de:	6083      	str	r3, [r0, #8]
 80157e0:	6813      	ldr	r3, [r2, #0]
 80157e2:	075b      	lsls	r3, r3, #29
 80157e4:	d4fc      	bmi.n	80157e0 <adc_calibration_enable+0x1a>
 80157e6:	4770      	bx	lr

080157e8 <adc_tempsensor_vrefint_enable>:
 80157e8:	4a03      	ldr	r2, [pc, #12]	; (80157f8 <adc_tempsensor_vrefint_enable+0x10>)
 80157ea:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 80157ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80157f2:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 80157f6:	4770      	bx	lr
 80157f8:	40012000 	andmi	r2, r1, r0

080157fc <adc_channel_length_config>:
 80157fc:	2901      	cmp	r1, #1
 80157fe:	d002      	beq.n	8015806 <adc_channel_length_config+0xa>
 8015800:	2902      	cmp	r1, #2
 8015802:	d00c      	beq.n	801581e <adc_channel_length_config+0x22>
 8015804:	4770      	bx	lr
 8015806:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015808:	3a01      	subs	r2, #1
 801580a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801580e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8015810:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015812:	0512      	lsls	r2, r2, #20
 8015814:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 8015818:	431a      	orrs	r2, r3
 801581a:	62c2      	str	r2, [r0, #44]	; 0x2c
 801581c:	4770      	bx	lr
 801581e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015820:	3a01      	subs	r2, #1
 8015822:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8015826:	6383      	str	r3, [r0, #56]	; 0x38
 8015828:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801582a:	0512      	lsls	r2, r2, #20
 801582c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8015830:	431a      	orrs	r2, r3
 8015832:	6382      	str	r2, [r0, #56]	; 0x38
 8015834:	4770      	bx	lr

08015836 <adc_inserted_channel_config>:
 8015836:	b530      	push	{r4, r5, lr}
 8015838:	6b84      	ldr	r4, [r0, #56]	; 0x38
 801583a:	6b85      	ldr	r5, [r0, #56]	; 0x38
 801583c:	f3c4 5401 	ubfx	r4, r4, #20, #2
 8015840:	1a61      	subs	r1, r4, r1
 8015842:	f06f 0404 	mvn.w	r4, #4
 8015846:	4361      	muls	r1, r4
 8015848:	241f      	movs	r4, #31
 801584a:	310f      	adds	r1, #15
 801584c:	408c      	lsls	r4, r1
 801584e:	ea25 0504 	bic.w	r5, r5, r4
 8015852:	fa02 f101 	lsl.w	r1, r2, r1
 8015856:	4329      	orrs	r1, r5
 8015858:	2a09      	cmp	r2, #9
 801585a:	6381      	str	r1, [r0, #56]	; 0x38
 801585c:	d80b      	bhi.n	8015876 <adc_inserted_channel_config+0x40>
 801585e:	2407      	movs	r4, #7
 8015860:	6901      	ldr	r1, [r0, #16]
 8015862:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015866:	4094      	lsls	r4, r2
 8015868:	ea21 0104 	bic.w	r1, r1, r4
 801586c:	fa03 f202 	lsl.w	r2, r3, r2
 8015870:	430a      	orrs	r2, r1
 8015872:	6102      	str	r2, [r0, #16]
 8015874:	bd30      	pop	{r4, r5, pc}
 8015876:	2a11      	cmp	r2, #17
 8015878:	d8fc      	bhi.n	8015874 <adc_inserted_channel_config+0x3e>
 801587a:	2407      	movs	r4, #7
 801587c:	3a0a      	subs	r2, #10
 801587e:	68c1      	ldr	r1, [r0, #12]
 8015880:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015884:	4094      	lsls	r4, r2
 8015886:	ea21 0104 	bic.w	r1, r1, r4
 801588a:	4093      	lsls	r3, r2
 801588c:	430b      	orrs	r3, r1
 801588e:	60c3      	str	r3, [r0, #12]
 8015890:	e7f0      	b.n	8015874 <adc_inserted_channel_config+0x3e>

08015892 <adc_external_trigger_source_config>:
 8015892:	2901      	cmp	r1, #1
 8015894:	d002      	beq.n	801589c <adc_external_trigger_source_config+0xa>
 8015896:	2902      	cmp	r1, #2
 8015898:	d008      	beq.n	80158ac <adc_external_trigger_source_config+0x1a>
 801589a:	4770      	bx	lr
 801589c:	6883      	ldr	r3, [r0, #8]
 801589e:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80158a2:	6083      	str	r3, [r0, #8]
 80158a4:	6883      	ldr	r3, [r0, #8]
 80158a6:	4313      	orrs	r3, r2
 80158a8:	6083      	str	r3, [r0, #8]
 80158aa:	4770      	bx	lr
 80158ac:	6883      	ldr	r3, [r0, #8]
 80158ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80158b2:	e7f6      	b.n	80158a2 <adc_external_trigger_source_config+0x10>

080158b4 <adc_external_trigger_config>:
 80158b4:	f001 0301 	and.w	r3, r1, #1
 80158b8:	f001 0102 	and.w	r1, r1, #2
 80158bc:	b152      	cbz	r2, 80158d4 <adc_external_trigger_config+0x20>
 80158be:	b11b      	cbz	r3, 80158c8 <adc_external_trigger_config+0x14>
 80158c0:	6883      	ldr	r3, [r0, #8]
 80158c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80158c6:	6083      	str	r3, [r0, #8]
 80158c8:	b119      	cbz	r1, 80158d2 <adc_external_trigger_config+0x1e>
 80158ca:	6883      	ldr	r3, [r0, #8]
 80158cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80158d0:	6083      	str	r3, [r0, #8]
 80158d2:	4770      	bx	lr
 80158d4:	b11b      	cbz	r3, 80158de <adc_external_trigger_config+0x2a>
 80158d6:	6883      	ldr	r3, [r0, #8]
 80158d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80158dc:	6083      	str	r3, [r0, #8]
 80158de:	2900      	cmp	r1, #0
 80158e0:	d0f7      	beq.n	80158d2 <adc_external_trigger_config+0x1e>
 80158e2:	6883      	ldr	r3, [r0, #8]
 80158e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80158e8:	e7f2      	b.n	80158d0 <adc_external_trigger_config+0x1c>

080158ea <adc_software_trigger_enable>:
 80158ea:	07ca      	lsls	r2, r1, #31
 80158ec:	bf42      	ittt	mi
 80158ee:	6883      	ldrmi	r3, [r0, #8]
 80158f0:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 80158f4:	6083      	strmi	r3, [r0, #8]
 80158f6:	078b      	lsls	r3, r1, #30
 80158f8:	bf42      	ittt	mi
 80158fa:	6883      	ldrmi	r3, [r0, #8]
 80158fc:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8015900:	6083      	strmi	r3, [r0, #8]
 8015902:	4770      	bx	lr

08015904 <enet_delay>:
 8015904:	2300      	movs	r3, #0
 8015906:	b082      	sub	sp, #8
 8015908:	9301      	str	r3, [sp, #4]
 801590a:	9001      	str	r0, [sp, #4]
 801590c:	9b01      	ldr	r3, [sp, #4]
 801590e:	b90b      	cbnz	r3, 8015914 <enet_delay+0x10>
 8015910:	b002      	add	sp, #8
 8015912:	4770      	bx	lr
 8015914:	9b01      	ldr	r3, [sp, #4]
 8015916:	3b01      	subs	r3, #1
 8015918:	9301      	str	r3, [sp, #4]
 801591a:	e7f7      	b.n	801590c <enet_delay+0x8>

0801591c <enet_software_reset>:
 801591c:	4b07      	ldr	r3, [pc, #28]	; (801593c <enet_software_reset+0x20>)
 801591e:	681a      	ldr	r2, [r3, #0]
 8015920:	f042 0201 	orr.w	r2, r2, #1
 8015924:	601a      	str	r2, [r3, #0]
 8015926:	4a06      	ldr	r2, [pc, #24]	; (8015940 <enet_software_reset+0x24>)
 8015928:	6819      	ldr	r1, [r3, #0]
 801592a:	07c9      	lsls	r1, r1, #31
 801592c:	d501      	bpl.n	8015932 <enet_software_reset+0x16>
 801592e:	3a01      	subs	r2, #1
 8015930:	d1fa      	bne.n	8015928 <enet_software_reset+0xc>
 8015932:	6818      	ldr	r0, [r3, #0]
 8015934:	43c0      	mvns	r0, r0
 8015936:	f000 0001 	and.w	r0, r0, #1
 801593a:	4770      	bx	lr
 801593c:	40029000 	andmi	r9, r2, r0
 8015940:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08015944 <enet_descriptors_chain_init>:
 8015944:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 8015948:	b5f0      	push	{r4, r5, r6, r7, lr}
 801594a:	4a19      	ldr	r2, [pc, #100]	; (80159b0 <enet_descriptors_chain_init+0x6c>)
 801594c:	d125      	bne.n	801599a <enet_descriptors_chain_init+0x56>
 801594e:	2500      	movs	r5, #0
 8015950:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8015954:	2002      	movs	r0, #2
 8015956:	4b17      	ldr	r3, [pc, #92]	; (80159b4 <enet_descriptors_chain_init+0x70>)
 8015958:	4c17      	ldr	r4, [pc, #92]	; (80159b8 <enet_descriptors_chain_init+0x74>)
 801595a:	6113      	str	r3, [r2, #16]
 801595c:	4a17      	ldr	r2, [pc, #92]	; (80159bc <enet_descriptors_chain_init+0x78>)
 801595e:	6013      	str	r3, [r2, #0]
 8015960:	2200      	movs	r2, #0
 8015962:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 8015966:	4916      	ldr	r1, [pc, #88]	; (80159c0 <enet_descriptors_chain_init+0x7c>)
 8015968:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801596c:	600a      	str	r2, [r1, #0]
 801596e:	4915      	ldr	r1, [pc, #84]	; (80159c4 <enet_descriptors_chain_init+0x80>)
 8015970:	600a      	str	r2, [r1, #0]
 8015972:	f103 0110 	add.w	r1, r3, #16
 8015976:	fb0e 4702 	mla	r7, lr, r2, r4
 801597a:	f841 7c08 	str.w	r7, [r1, #-8]
 801597e:	4594      	cmp	ip, r2
 8015980:	bf94      	ite	ls
 8015982:	461f      	movls	r7, r3
 8015984:	460f      	movhi	r7, r1
 8015986:	3201      	adds	r2, #1
 8015988:	4290      	cmp	r0, r2
 801598a:	e941 6504 	strd	r6, r5, [r1, #-16]
 801598e:	f841 7c04 	str.w	r7, [r1, #-4]
 8015992:	f101 0110 	add.w	r1, r1, #16
 8015996:	d1ee      	bne.n	8015976 <enet_descriptors_chain_init+0x32>
 8015998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801599a:	4b0b      	ldr	r3, [pc, #44]	; (80159c8 <enet_descriptors_chain_init+0x84>)
 801599c:	f244 55f4 	movw	r5, #17908	; 0x45f4
 80159a0:	60d3      	str	r3, [r2, #12]
 80159a2:	4a0a      	ldr	r2, [pc, #40]	; (80159cc <enet_descriptors_chain_init+0x88>)
 80159a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80159a8:	2008      	movs	r0, #8
 80159aa:	4c09      	ldr	r4, [pc, #36]	; (80159d0 <enet_descriptors_chain_init+0x8c>)
 80159ac:	6013      	str	r3, [r2, #0]
 80159ae:	e7d7      	b.n	8015960 <enet_descriptors_chain_init+0x1c>
 80159b0:	40029000 	andmi	r9, r2, r0
 80159b4:	2000e8d8 	ldrdcs	lr, [r0], -r8
 80159b8:	2000dcf0 	strdcs	sp, [r0], -r0
 80159bc:	2000ac90 	mulcs	r0, r0, ip
 80159c0:	2000ac84 	andcs	sl, r0, r4, lsl #25
 80159c4:	2000ac88 	andcs	sl, r0, r8, lsl #25
 80159c8:	2000dc70 	andcs	sp, r0, r0, ror ip
 80159cc:	2000ac8c 	andcs	sl, r0, ip, lsl #25
 80159d0:	2000acd0 	ldrdcs	sl, [r0], -r0

080159d4 <enet_frame_receive>:
 80159d4:	4a1d      	ldr	r2, [pc, #116]	; (8015a4c <enet_frame_receive+0x78>)
 80159d6:	b510      	push	{r4, lr}
 80159d8:	6813      	ldr	r3, [r2, #0]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	db33      	blt.n	8015a48 <enet_frame_receive+0x74>
 80159e0:	b970      	cbnz	r0, 8015a00 <enet_frame_receive+0x2c>
 80159e2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80159e6:	6813      	ldr	r3, [r2, #0]
 80159e8:	6019      	str	r1, [r3, #0]
 80159ea:	4919      	ldr	r1, [pc, #100]	; (8015a50 <enet_frame_receive+0x7c>)
 80159ec:	6948      	ldr	r0, [r1, #20]
 80159ee:	0604      	lsls	r4, r0, #24
 80159f0:	d419      	bmi.n	8015a26 <enet_frame_receive+0x52>
 80159f2:	6859      	ldr	r1, [r3, #4]
 80159f4:	0448      	lsls	r0, r1, #17
 80159f6:	d51b      	bpl.n	8015a30 <enet_frame_receive+0x5c>
 80159f8:	68db      	ldr	r3, [r3, #12]
 80159fa:	2001      	movs	r0, #1
 80159fc:	6013      	str	r3, [r2, #0]
 80159fe:	bd10      	pop	{r4, pc}
 8015a00:	f403 4403 	and.w	r4, r3, #33536	; 0x8300
 8015a04:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 8015a08:	d11e      	bne.n	8015a48 <enet_frame_receive+0x74>
 8015a0a:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8015a0e:	3b04      	subs	r3, #4
 8015a10:	428b      	cmp	r3, r1
 8015a12:	d819      	bhi.n	8015a48 <enet_frame_receive+0x74>
 8015a14:	2100      	movs	r1, #0
 8015a16:	4299      	cmp	r1, r3
 8015a18:	6814      	ldr	r4, [r2, #0]
 8015a1a:	d2e2      	bcs.n	80159e2 <enet_frame_receive+0xe>
 8015a1c:	68a4      	ldr	r4, [r4, #8]
 8015a1e:	5d0c      	ldrb	r4, [r1, r4]
 8015a20:	5444      	strb	r4, [r0, r1]
 8015a22:	3101      	adds	r1, #1
 8015a24:	e7f7      	b.n	8015a16 <enet_frame_receive+0x42>
 8015a26:	2080      	movs	r0, #128	; 0x80
 8015a28:	6148      	str	r0, [r1, #20]
 8015a2a:	2000      	movs	r0, #0
 8015a2c:	6088      	str	r0, [r1, #8]
 8015a2e:	e7e0      	b.n	80159f2 <enet_frame_receive+0x1e>
 8015a30:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8015a34:	4906      	ldr	r1, [pc, #24]	; (8015a50 <enet_frame_receive+0x7c>)
 8015a36:	bf05      	ittet	eq
 8015a38:	3310      	addeq	r3, #16
 8015a3a:	6809      	ldreq	r1, [r1, #0]
 8015a3c:	68cb      	ldrne	r3, [r1, #12]
 8015a3e:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8015a42:	bf08      	it	eq
 8015a44:	185b      	addeq	r3, r3, r1
 8015a46:	e7d8      	b.n	80159fa <enet_frame_receive+0x26>
 8015a48:	2000      	movs	r0, #0
 8015a4a:	e7d8      	b.n	80159fe <enet_frame_receive+0x2a>
 8015a4c:	2000ac8c 	andcs	sl, r0, ip, lsl #25
 8015a50:	40029000 	andmi	r9, r2, r0

08015a54 <enet_frame_transmit>:
 8015a54:	4a1e      	ldr	r2, [pc, #120]	; (8015ad0 <enet_frame_transmit+0x7c>)
 8015a56:	b530      	push	{r4, r5, lr}
 8015a58:	6813      	ldr	r3, [r2, #0]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	db34      	blt.n	8015aca <enet_frame_transmit+0x76>
 8015a60:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8015a64:	4299      	cmp	r1, r3
 8015a66:	d830      	bhi.n	8015aca <enet_frame_transmit+0x76>
 8015a68:	b9e8      	cbnz	r0, 8015aa6 <enet_frame_transmit+0x52>
 8015a6a:	6813      	ldr	r3, [r2, #0]
 8015a6c:	4819      	ldr	r0, [pc, #100]	; (8015ad4 <enet_frame_transmit+0x80>)
 8015a6e:	6059      	str	r1, [r3, #4]
 8015a70:	6819      	ldr	r1, [r3, #0]
 8015a72:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 8015a76:	6019      	str	r1, [r3, #0]
 8015a78:	6941      	ldr	r1, [r0, #20]
 8015a7a:	6944      	ldr	r4, [r0, #20]
 8015a7c:	f001 0104 	and.w	r1, r1, #4
 8015a80:	f004 0420 	and.w	r4, r4, #32
 8015a84:	4321      	orrs	r1, r4
 8015a86:	d110      	bne.n	8015aaa <enet_frame_transmit+0x56>
 8015a88:	6819      	ldr	r1, [r3, #0]
 8015a8a:	02c8      	lsls	r0, r1, #11
 8015a8c:	d511      	bpl.n	8015ab2 <enet_frame_transmit+0x5e>
 8015a8e:	68db      	ldr	r3, [r3, #12]
 8015a90:	2001      	movs	r0, #1
 8015a92:	6013      	str	r3, [r2, #0]
 8015a94:	bd30      	pop	{r4, r5, pc}
 8015a96:	5cc5      	ldrb	r5, [r0, r3]
 8015a98:	68a4      	ldr	r4, [r4, #8]
 8015a9a:	551d      	strb	r5, [r3, r4]
 8015a9c:	3301      	adds	r3, #1
 8015a9e:	428b      	cmp	r3, r1
 8015aa0:	6814      	ldr	r4, [r2, #0]
 8015aa2:	d1f8      	bne.n	8015a96 <enet_frame_transmit+0x42>
 8015aa4:	e7e1      	b.n	8015a6a <enet_frame_transmit+0x16>
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	e7f9      	b.n	8015a9e <enet_frame_transmit+0x4a>
 8015aaa:	6141      	str	r1, [r0, #20]
 8015aac:	2100      	movs	r1, #0
 8015aae:	6041      	str	r1, [r0, #4]
 8015ab0:	e7ea      	b.n	8015a88 <enet_frame_transmit+0x34>
 8015ab2:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8015ab6:	4907      	ldr	r1, [pc, #28]	; (8015ad4 <enet_frame_transmit+0x80>)
 8015ab8:	bf05      	ittet	eq
 8015aba:	3310      	addeq	r3, #16
 8015abc:	6809      	ldreq	r1, [r1, #0]
 8015abe:	690b      	ldrne	r3, [r1, #16]
 8015ac0:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8015ac4:	bf08      	it	eq
 8015ac6:	185b      	addeq	r3, r3, r1
 8015ac8:	e7e2      	b.n	8015a90 <enet_frame_transmit+0x3c>
 8015aca:	2000      	movs	r0, #0
 8015acc:	e7e2      	b.n	8015a94 <enet_frame_transmit+0x40>
 8015ace:	bf00      	nop
 8015ad0:	2000ac90 	mulcs	r0, r0, ip
 8015ad4:	40029000 	andmi	r9, r2, r0

08015ad8 <enet_transmit_checksum_config>:
 8015ad8:	6803      	ldr	r3, [r0, #0]
 8015ada:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8015ade:	430b      	orrs	r3, r1
 8015ae0:	6003      	str	r3, [r0, #0]
 8015ae2:	4770      	bx	lr

08015ae4 <enet_mac_address_set>:
 8015ae4:	888a      	ldrh	r2, [r1, #4]
 8015ae6:	4b03      	ldr	r3, [pc, #12]	; (8015af4 <enet_mac_address_set+0x10>)
 8015ae8:	50c2      	str	r2, [r0, r3]
 8015aea:	680a      	ldr	r2, [r1, #0]
 8015aec:	3304      	adds	r3, #4
 8015aee:	50c2      	str	r2, [r0, r3]
 8015af0:	4770      	bx	lr
 8015af2:	bf00      	nop
 8015af4:	40028040 	andmi	r8, r2, r0, asr #32

08015af8 <enet_rx_enable>:
 8015af8:	4a05      	ldr	r2, [pc, #20]	; (8015b10 <enet_rx_enable+0x18>)
 8015afa:	6813      	ldr	r3, [r2, #0]
 8015afc:	f043 0304 	orr.w	r3, r3, #4
 8015b00:	6013      	str	r3, [r2, #0]
 8015b02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8015b06:	6993      	ldr	r3, [r2, #24]
 8015b08:	f043 0302 	orr.w	r3, r3, #2
 8015b0c:	6193      	str	r3, [r2, #24]
 8015b0e:	4770      	bx	lr
 8015b10:	40028000 	andmi	r8, r2, r0

08015b14 <enet_phy_write_read>:
 8015b14:	b530      	push	{r4, r5, lr}
 8015b16:	4604      	mov	r4, r0
 8015b18:	4d13      	ldr	r5, [pc, #76]	; (8015b68 <enet_phy_write_read+0x54>)
 8015b1a:	0192      	lsls	r2, r2, #6
 8015b1c:	6928      	ldr	r0, [r5, #16]
 8015b1e:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8015b22:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 8015b26:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 8015b2a:	4302      	orrs	r2, r0
 8015b2c:	02c9      	lsls	r1, r1, #11
 8015b2e:	b289      	uxth	r1, r1
 8015b30:	2c02      	cmp	r4, #2
 8015b32:	ea42 0204 	orr.w	r2, r2, r4
 8015b36:	ea42 0201 	orr.w	r2, r2, r1
 8015b3a:	bf08      	it	eq
 8015b3c:	8819      	ldrheq	r1, [r3, #0]
 8015b3e:	f042 0201 	orr.w	r2, r2, #1
 8015b42:	bf08      	it	eq
 8015b44:	6169      	streq	r1, [r5, #20]
 8015b46:	612a      	str	r2, [r5, #16]
 8015b48:	4907      	ldr	r1, [pc, #28]	; (8015b68 <enet_phy_write_read+0x54>)
 8015b4a:	4a08      	ldr	r2, [pc, #32]	; (8015b6c <enet_phy_write_read+0x58>)
 8015b4c:	6908      	ldr	r0, [r1, #16]
 8015b4e:	07c0      	lsls	r0, r0, #31
 8015b50:	d501      	bpl.n	8015b56 <enet_phy_write_read+0x42>
 8015b52:	3a01      	subs	r2, #1
 8015b54:	d1fa      	bne.n	8015b4c <enet_phy_write_read+0x38>
 8015b56:	690a      	ldr	r2, [r1, #16]
 8015b58:	43d2      	mvns	r2, r2
 8015b5a:	f002 0001 	and.w	r0, r2, #1
 8015b5e:	b90c      	cbnz	r4, 8015b64 <enet_phy_write_read+0x50>
 8015b60:	694a      	ldr	r2, [r1, #20]
 8015b62:	801a      	strh	r2, [r3, #0]
 8015b64:	bd30      	pop	{r4, r5, pc}
 8015b66:	bf00      	nop
 8015b68:	40028000 	andmi	r8, r2, r0
 8015b6c:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08015b70 <enet_phy_config>:
 8015b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015b72:	4d22      	ldr	r5, [pc, #136]	; (8015bfc <enet_phy_config+0x8c>)
 8015b74:	2001      	movs	r0, #1
 8015b76:	692c      	ldr	r4, [r5, #16]
 8015b78:	f7fe fee6 	bl	8014948 <rcu_clock_freq_get>
 8015b7c:	4b20      	ldr	r3, [pc, #128]	; (8015c00 <enet_phy_config+0x90>)
 8015b7e:	4a21      	ldr	r2, [pc, #132]	; (8015c04 <enet_phy_config+0x94>)
 8015b80:	4403      	add	r3, r0
 8015b82:	4293      	cmp	r3, r2
 8015b84:	f024 041c 	bic.w	r4, r4, #28
 8015b88:	d21f      	bcs.n	8015bca <enet_phy_config+0x5a>
 8015b8a:	f044 0408 	orr.w	r4, r4, #8
 8015b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015b92:	612c      	str	r4, [r5, #16]
 8015b94:	2200      	movs	r2, #0
 8015b96:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015b9a:	2101      	movs	r1, #1
 8015b9c:	2002      	movs	r0, #2
 8015b9e:	f10d 0306 	add.w	r3, sp, #6
 8015ba2:	f7ff ffb7 	bl	8015b14 <enet_phy_write_read>
 8015ba6:	b310      	cbz	r0, 8015bee <enet_phy_config+0x7e>
 8015ba8:	2200      	movs	r2, #0
 8015baa:	4817      	ldr	r0, [pc, #92]	; (8015c08 <enet_phy_config+0x98>)
 8015bac:	f7ff feaa 	bl	8015904 <enet_delay>
 8015bb0:	2101      	movs	r1, #1
 8015bb2:	4610      	mov	r0, r2
 8015bb4:	f10d 0306 	add.w	r3, sp, #6
 8015bb8:	f7ff ffac 	bl	8015b14 <enet_phy_write_read>
 8015bbc:	b1b8      	cbz	r0, 8015bee <enet_phy_config+0x7e>
 8015bbe:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8015bc2:	43c0      	mvns	r0, r0
 8015bc4:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8015bc8:	e012      	b.n	8015bf0 <enet_phy_config+0x80>
 8015bca:	4b10      	ldr	r3, [pc, #64]	; (8015c0c <enet_phy_config+0x9c>)
 8015bcc:	4a10      	ldr	r2, [pc, #64]	; (8015c10 <enet_phy_config+0xa0>)
 8015bce:	4403      	add	r3, r0
 8015bd0:	4293      	cmp	r3, r2
 8015bd2:	d802      	bhi.n	8015bda <enet_phy_config+0x6a>
 8015bd4:	f044 040c 	orr.w	r4, r4, #12
 8015bd8:	e7d9      	b.n	8015b8e <enet_phy_config+0x1e>
 8015bda:	4b0e      	ldr	r3, [pc, #56]	; (8015c14 <enet_phy_config+0xa4>)
 8015bdc:	4a0e      	ldr	r2, [pc, #56]	; (8015c18 <enet_phy_config+0xa8>)
 8015bde:	4403      	add	r3, r0
 8015be0:	4293      	cmp	r3, r2
 8015be2:	d3d4      	bcc.n	8015b8e <enet_phy_config+0x1e>
 8015be4:	4b0d      	ldr	r3, [pc, #52]	; (8015c1c <enet_phy_config+0xac>)
 8015be6:	4a0e      	ldr	r2, [pc, #56]	; (8015c20 <enet_phy_config+0xb0>)
 8015be8:	4403      	add	r3, r0
 8015bea:	4293      	cmp	r3, r2
 8015bec:	d902      	bls.n	8015bf4 <enet_phy_config+0x84>
 8015bee:	2000      	movs	r0, #0
 8015bf0:	b003      	add	sp, #12
 8015bf2:	bd30      	pop	{r4, r5, pc}
 8015bf4:	f044 0404 	orr.w	r4, r4, #4
 8015bf8:	e7c9      	b.n	8015b8e <enet_phy_config+0x1e>
 8015bfa:	bf00      	nop
 8015bfc:	40028000 	andmi	r8, r2, r0
 8015c00:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 8015c04:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8015c08:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8015c0c:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 8015c10:	017d783f 	cmneq	sp, pc, lsr r8
 8015c14:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 8015c18:	02625a00 	rsbeq	r5, r2, #0, 20
 8015c1c:	fa0a1f00 	blx	829d824 <__exidx_end+0x284fb0>
 8015c20:	01312d00 	teqeq	r1, r0, lsl #26

08015c24 <enet_init>:
 8015c24:	2300      	movs	r3, #0
 8015c26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015c28:	4604      	mov	r4, r0
 8015c2a:	460d      	mov	r5, r1
 8015c2c:	4616      	mov	r6, r2
 8015c2e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015c32:	f7ff ff9d 	bl	8015b70 <enet_phy_config>
 8015c36:	2800      	cmp	r0, #0
 8015c38:	d039      	beq.n	8015cae <enet_init+0x8a>
 8015c3a:	4b3c      	ldr	r3, [pc, #240]	; (8015d2c <enet_init+0x108>)
 8015c3c:	4a3c      	ldr	r2, [pc, #240]	; (8015d30 <enet_init+0x10c>)
 8015c3e:	6819      	ldr	r1, [r3, #0]
 8015c40:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8015c44:	400a      	ands	r2, r1
 8015c46:	601a      	str	r2, [r3, #0]
 8015c48:	2200      	movs	r2, #0
 8015c4a:	605a      	str	r2, [r3, #4]
 8015c4c:	609a      	str	r2, [r3, #8]
 8015c4e:	60da      	str	r2, [r3, #12]
 8015c50:	6999      	ldr	r1, [r3, #24]
 8015c52:	2c01      	cmp	r4, #1
 8015c54:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 8015c58:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8015c5c:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8015c60:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8015c64:	6199      	str	r1, [r3, #24]
 8015c66:	4933      	ldr	r1, [pc, #204]	; (8015d34 <enet_init+0x110>)
 8015c68:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
 8015c6c:	61da      	str	r2, [r3, #28]
 8015c6e:	6988      	ldr	r0, [r1, #24]
 8015c70:	4b31      	ldr	r3, [pc, #196]	; (8015d38 <enet_init+0x114>)
 8015c72:	ea03 0300 	and.w	r3, r3, r0
 8015c76:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8015c7a:	618b      	str	r3, [r1, #24]
 8015c7c:	680b      	ldr	r3, [r1, #0]
 8015c7e:	4b2f      	ldr	r3, [pc, #188]	; (8015d3c <enet_init+0x118>)
 8015c80:	600b      	str	r3, [r1, #0]
 8015c82:	d01e      	beq.n	8015cc2 <enet_init+0x9e>
 8015c84:	08e3      	lsrs	r3, r4, #3
 8015c86:	0861      	lsrs	r1, r4, #1
 8015c88:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8015c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015c90:	430b      	orrs	r3, r1
 8015c92:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015c96:	2101      	movs	r1, #1
 8015c98:	2002      	movs	r0, #2
 8015c9a:	f10d 0306 	add.w	r3, sp, #6
 8015c9e:	f7ff ff39 	bl	8015b14 <enet_phy_write_read>
 8015ca2:	b158      	cbz	r0, 8015cbc <enet_init+0x98>
 8015ca4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8015ca8:	f7ff fe2c 	bl	8015904 <enet_delay>
 8015cac:	e05d      	b.n	8015d6a <enet_init+0x146>
 8015cae:	4824      	ldr	r0, [pc, #144]	; (8015d40 <enet_init+0x11c>)
 8015cb0:	f7ff fe28 	bl	8015904 <enet_delay>
 8015cb4:	f7ff ff5c 	bl	8015b70 <enet_phy_config>
 8015cb8:	2800      	cmp	r0, #0
 8015cba:	d1be      	bne.n	8015c3a <enet_init+0x16>
 8015cbc:	2000      	movs	r0, #0
 8015cbe:	b003      	add	sp, #12
 8015cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cc2:	4614      	mov	r4, r2
 8015cc4:	4f1f      	ldr	r7, [pc, #124]	; (8015d44 <enet_init+0x120>)
 8015cc6:	2201      	movs	r2, #1
 8015cc8:	2000      	movs	r0, #0
 8015cca:	4611      	mov	r1, r2
 8015ccc:	f10d 0306 	add.w	r3, sp, #6
 8015cd0:	f7ff ff20 	bl	8015b14 <enet_phy_write_read>
 8015cd4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015cd8:	3401      	adds	r4, #1
 8015cda:	f002 0204 	and.w	r2, r2, #4
 8015cde:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015ce2:	b912      	cbnz	r2, 8015cea <enet_init+0xc6>
 8015ce4:	42bc      	cmp	r4, r7
 8015ce6:	d1ee      	bne.n	8015cc6 <enet_init+0xa2>
 8015ce8:	e7e8      	b.n	8015cbc <enet_init+0x98>
 8015cea:	42bc      	cmp	r4, r7
 8015cec:	d0e6      	beq.n	8015cbc <enet_init+0x98>
 8015cee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015cf2:	2101      	movs	r1, #1
 8015cf4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015cf8:	2002      	movs	r0, #2
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	f7ff ff0a 	bl	8015b14 <enet_phy_write_read>
 8015d00:	2800      	cmp	r0, #0
 8015d02:	d0db      	beq.n	8015cbc <enet_init+0x98>
 8015d04:	2400      	movs	r4, #0
 8015d06:	4f0f      	ldr	r7, [pc, #60]	; (8015d44 <enet_init+0x120>)
 8015d08:	2201      	movs	r2, #1
 8015d0a:	2000      	movs	r0, #0
 8015d0c:	4611      	mov	r1, r2
 8015d0e:	f10d 0306 	add.w	r3, sp, #6
 8015d12:	f7ff feff 	bl	8015b14 <enet_phy_write_read>
 8015d16:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015d1a:	3401      	adds	r4, #1
 8015d1c:	f002 0220 	and.w	r2, r2, #32
 8015d20:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015d24:	b982      	cbnz	r2, 8015d48 <enet_init+0x124>
 8015d26:	42bc      	cmp	r4, r7
 8015d28:	d1ee      	bne.n	8015d08 <enet_init+0xe4>
 8015d2a:	e7c7      	b.n	8015cbc <enet_init+0x98>
 8015d2c:	40028000 	andmi	r8, r2, r0
 8015d30:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 8015d34:	40029000 	andmi	r9, r2, r0
 8015d38:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 8015d3c:	02c16000 	sbceq	r6, r1, #0
 8015d40:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 8015d44:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8015d48:	42bc      	cmp	r4, r7
 8015d4a:	d0b7      	beq.n	8015cbc <enet_init+0x98>
 8015d4c:	2101      	movs	r1, #1
 8015d4e:	2210      	movs	r2, #16
 8015d50:	2000      	movs	r0, #0
 8015d52:	f7ff fedf 	bl	8015b14 <enet_phy_write_read>
 8015d56:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015d5a:	f3c3 0480 	ubfx	r4, r3, #2, #1
 8015d5e:	0799      	lsls	r1, r3, #30
 8015d60:	ea4f 24c4 	mov.w	r4, r4, lsl #11
 8015d64:	d401      	bmi.n	8015d6a <enet_init+0x146>
 8015d66:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8015d6a:	4b63      	ldr	r3, [pc, #396]	; (8015ef8 <enet_init+0x2d4>)
 8015d6c:	681a      	ldr	r2, [r3, #0]
 8015d6e:	f422 42b0 	bic.w	r2, r2, #22528	; 0x5800
 8015d72:	4314      	orrs	r4, r2
 8015d74:	056a      	lsls	r2, r5, #21
 8015d76:	601c      	str	r4, [r3, #0]
 8015d78:	d50b      	bpl.n	8015d92 <enet_init+0x16e>
 8015d7a:	681a      	ldr	r2, [r3, #0]
 8015d7c:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 8015d80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8015d84:	601a      	str	r2, [r3, #0]
 8015d86:	4a5d      	ldr	r2, [pc, #372]	; (8015efc <enet_init+0x2d8>)
 8015d88:	6993      	ldr	r3, [r2, #24]
 8015d8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015d8e:	431d      	orrs	r5, r3
 8015d90:	6195      	str	r5, [r2, #24]
 8015d92:	4959      	ldr	r1, [pc, #356]	; (8015ef8 <enet_init+0x2d4>)
 8015d94:	684b      	ldr	r3, [r1, #4]
 8015d96:	431e      	orrs	r6, r3
 8015d98:	4b59      	ldr	r3, [pc, #356]	; (8015f00 <enet_init+0x2dc>)
 8015d9a:	604e      	str	r6, [r1, #4]
 8015d9c:	681a      	ldr	r2, [r3, #0]
 8015d9e:	07d7      	lsls	r7, r2, #31
 8015da0:	d510      	bpl.n	8015dc4 <enet_init+0x1a0>
 8015da2:	685a      	ldr	r2, [r3, #4]
 8015da4:	680c      	ldr	r4, [r1, #0]
 8015da6:	f002 0080 	and.w	r0, r2, #128	; 0x80
 8015daa:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8015dae:	4320      	orrs	r0, r4
 8015db0:	6008      	str	r0, [r1, #0]
 8015db2:	4852      	ldr	r0, [pc, #328]	; (8015efc <enet_init+0x2d8>)
 8015db4:	0892      	lsrs	r2, r2, #2
 8015db6:	6981      	ldr	r1, [r0, #24]
 8015db8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8015dbc:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8015dc0:	430a      	orrs	r2, r1
 8015dc2:	6182      	str	r2, [r0, #24]
 8015dc4:	681a      	ldr	r2, [r3, #0]
 8015dc6:	0796      	lsls	r6, r2, #30
 8015dc8:	d508      	bpl.n	8015ddc <enet_init+0x1b8>
 8015dca:	494c      	ldr	r1, [pc, #304]	; (8015efc <enet_init+0x2d8>)
 8015dcc:	6898      	ldr	r0, [r3, #8]
 8015dce:	680a      	ldr	r2, [r1, #0]
 8015dd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8015dd4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8015dd8:	4302      	orrs	r2, r0
 8015dda:	600a      	str	r2, [r1, #0]
 8015ddc:	681a      	ldr	r2, [r3, #0]
 8015dde:	0755      	lsls	r5, r2, #29
 8015de0:	d508      	bpl.n	8015df4 <enet_init+0x1d0>
 8015de2:	4946      	ldr	r1, [pc, #280]	; (8015efc <enet_init+0x2d8>)
 8015de4:	68d8      	ldr	r0, [r3, #12]
 8015de6:	680a      	ldr	r2, [r1, #0]
 8015de8:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 8015dec:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8015df0:	4302      	orrs	r2, r0
 8015df2:	600a      	str	r2, [r1, #0]
 8015df4:	681a      	ldr	r2, [r3, #0]
 8015df6:	0714      	lsls	r4, r2, #28
 8015df8:	d508      	bpl.n	8015e0c <enet_init+0x1e8>
 8015dfa:	4940      	ldr	r1, [pc, #256]	; (8015efc <enet_init+0x2d8>)
 8015dfc:	6918      	ldr	r0, [r3, #16]
 8015dfe:	680a      	ldr	r2, [r1, #0]
 8015e00:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8015e04:	f022 0202 	bic.w	r2, r2, #2
 8015e08:	4302      	orrs	r2, r0
 8015e0a:	600a      	str	r2, [r1, #0]
 8015e0c:	681a      	ldr	r2, [r3, #0]
 8015e0e:	06d0      	lsls	r0, r2, #27
 8015e10:	d506      	bpl.n	8015e20 <enet_init+0x1fc>
 8015e12:	493a      	ldr	r1, [pc, #232]	; (8015efc <enet_init+0x2d8>)
 8015e14:	4a3b      	ldr	r2, [pc, #236]	; (8015f04 <enet_init+0x2e0>)
 8015e16:	6988      	ldr	r0, [r1, #24]
 8015e18:	4002      	ands	r2, r0
 8015e1a:	6958      	ldr	r0, [r3, #20]
 8015e1c:	4302      	orrs	r2, r0
 8015e1e:	618a      	str	r2, [r1, #24]
 8015e20:	681a      	ldr	r2, [r3, #0]
 8015e22:	0691      	lsls	r1, r2, #26
 8015e24:	d508      	bpl.n	8015e38 <enet_init+0x214>
 8015e26:	4935      	ldr	r1, [pc, #212]	; (8015efc <enet_init+0x2d8>)
 8015e28:	6998      	ldr	r0, [r3, #24]
 8015e2a:	698a      	ldr	r2, [r1, #24]
 8015e2c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8015e30:	f022 0204 	bic.w	r2, r2, #4
 8015e34:	4302      	orrs	r2, r0
 8015e36:	618a      	str	r2, [r1, #24]
 8015e38:	681a      	ldr	r2, [r3, #0]
 8015e3a:	0652      	lsls	r2, r2, #25
 8015e3c:	d506      	bpl.n	8015e4c <enet_init+0x228>
 8015e3e:	492e      	ldr	r1, [pc, #184]	; (8015ef8 <enet_init+0x2d4>)
 8015e40:	69d8      	ldr	r0, [r3, #28]
 8015e42:	69ca      	ldr	r2, [r1, #28]
 8015e44:	0c52      	lsrs	r2, r2, #17
 8015e46:	0452      	lsls	r2, r2, #17
 8015e48:	4302      	orrs	r2, r0
 8015e4a:	61ca      	str	r2, [r1, #28]
 8015e4c:	681a      	ldr	r2, [r3, #0]
 8015e4e:	0617      	lsls	r7, r2, #24
 8015e50:	d517      	bpl.n	8015e82 <enet_init+0x25e>
 8015e52:	4c29      	ldr	r4, [pc, #164]	; (8015ef8 <enet_init+0x2d4>)
 8015e54:	6a1a      	ldr	r2, [r3, #32]
 8015e56:	69a0      	ldr	r0, [r4, #24]
 8015e58:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 8015e5c:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 8015e60:	0400      	lsls	r0, r0, #16
 8015e62:	0c00      	lsrs	r0, r0, #16
 8015e64:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8015e68:	4301      	orrs	r1, r0
 8015e6a:	4824      	ldr	r0, [pc, #144]	; (8015efc <enet_init+0x2d8>)
 8015e6c:	61a1      	str	r1, [r4, #24]
 8015e6e:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8015e72:	0a12      	lsrs	r2, r2, #8
 8015e74:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 8015e78:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8015e7c:	430a      	orrs	r2, r1
 8015e7e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8015e82:	681a      	ldr	r2, [r3, #0]
 8015e84:	05d6      	lsls	r6, r2, #23
 8015e86:	bf42      	ittt	mi
 8015e88:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 8015e8a:	4a1b      	ldrmi	r2, [pc, #108]	; (8015ef8 <enet_init+0x2d4>)
 8015e8c:	6091      	strmi	r1, [r2, #8]
 8015e8e:	681a      	ldr	r2, [r3, #0]
 8015e90:	0595      	lsls	r5, r2, #22
 8015e92:	bf42      	ittt	mi
 8015e94:	4a18      	ldrmi	r2, [pc, #96]	; (8015ef8 <enet_init+0x2d4>)
 8015e96:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 8015e98:	60d1      	strmi	r1, [r2, #12]
 8015e9a:	681a      	ldr	r2, [r3, #0]
 8015e9c:	0554      	lsls	r4, r2, #21
 8015e9e:	d508      	bpl.n	8015eb2 <enet_init+0x28e>
 8015ea0:	4915      	ldr	r1, [pc, #84]	; (8015ef8 <enet_init+0x2d4>)
 8015ea2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8015ea4:	684a      	ldr	r2, [r1, #4]
 8015ea6:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8015eaa:	f022 0206 	bic.w	r2, r2, #6
 8015eae:	4302      	orrs	r2, r0
 8015eb0:	604a      	str	r2, [r1, #4]
 8015eb2:	681a      	ldr	r2, [r3, #0]
 8015eb4:	0510      	lsls	r0, r2, #20
 8015eb6:	d508      	bpl.n	8015eca <enet_init+0x2a6>
 8015eb8:	490f      	ldr	r1, [pc, #60]	; (8015ef8 <enet_init+0x2d4>)
 8015eba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015ebc:	680a      	ldr	r2, [r1, #0]
 8015ebe:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 8015ec2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8015ec6:	4302      	orrs	r2, r0
 8015ec8:	600a      	str	r2, [r1, #0]
 8015eca:	681a      	ldr	r2, [r3, #0]
 8015ecc:	04d1      	lsls	r1, r2, #19
 8015ece:	d506      	bpl.n	8015ede <enet_init+0x2ba>
 8015ed0:	4909      	ldr	r1, [pc, #36]	; (8015ef8 <enet_init+0x2d4>)
 8015ed2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015ed4:	680a      	ldr	r2, [r1, #0]
 8015ed6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8015eda:	4302      	orrs	r2, r0
 8015edc:	600a      	str	r2, [r1, #0]
 8015ede:	681a      	ldr	r2, [r3, #0]
 8015ee0:	0492      	lsls	r2, r2, #18
 8015ee2:	d506      	bpl.n	8015ef2 <enet_init+0x2ce>
 8015ee4:	4904      	ldr	r1, [pc, #16]	; (8015ef8 <enet_init+0x2d4>)
 8015ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ee8:	680a      	ldr	r2, [r1, #0]
 8015eea:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 8015eee:	4313      	orrs	r3, r2
 8015ef0:	600b      	str	r3, [r1, #0]
 8015ef2:	2001      	movs	r0, #1
 8015ef4:	e6e3      	b.n	8015cbe <enet_init+0x9a>
 8015ef6:	bf00      	nop
 8015ef8:	40028000 	andmi	r8, r2, r0
 8015efc:	40029000 	andmi	r9, r2, r0
 8015f00:	2000ac94 	mulcs	r0, r4, ip
 8015f04:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c

08015f08 <enet_txfifo_flush>:
 8015f08:	4b06      	ldr	r3, [pc, #24]	; (8015f24 <enet_txfifo_flush+0x1c>)
 8015f0a:	4807      	ldr	r0, [pc, #28]	; (8015f28 <enet_txfifo_flush+0x20>)
 8015f0c:	699a      	ldr	r2, [r3, #24]
 8015f0e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015f12:	619a      	str	r2, [r3, #24]
 8015f14:	699a      	ldr	r2, [r3, #24]
 8015f16:	02d2      	lsls	r2, r2, #11
 8015f18:	d502      	bpl.n	8015f20 <enet_txfifo_flush+0x18>
 8015f1a:	3801      	subs	r0, #1
 8015f1c:	d1fa      	bne.n	8015f14 <enet_txfifo_flush+0xc>
 8015f1e:	4770      	bx	lr
 8015f20:	2001      	movs	r0, #1
 8015f22:	4770      	bx	lr
 8015f24:	40029000 	andmi	r9, r2, r0
 8015f28:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08015f2c <enet_tx_enable>:
 8015f2c:	4a06      	ldr	r2, [pc, #24]	; (8015f48 <enet_tx_enable+0x1c>)
 8015f2e:	b508      	push	{r3, lr}
 8015f30:	6813      	ldr	r3, [r2, #0]
 8015f32:	f043 0308 	orr.w	r3, r3, #8
 8015f36:	6013      	str	r3, [r2, #0]
 8015f38:	f7ff ffe6 	bl	8015f08 <enet_txfifo_flush>
 8015f3c:	4a03      	ldr	r2, [pc, #12]	; (8015f4c <enet_tx_enable+0x20>)
 8015f3e:	6993      	ldr	r3, [r2, #24]
 8015f40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015f44:	6193      	str	r3, [r2, #24]
 8015f46:	bd08      	pop	{r3, pc}
 8015f48:	40028000 	andmi	r8, r2, r0
 8015f4c:	40029000 	andmi	r9, r2, r0

08015f50 <enet_enable>:
 8015f50:	b508      	push	{r3, lr}
 8015f52:	f7ff ffeb 	bl	8015f2c <enet_tx_enable>
 8015f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015f5a:	f7ff bdcd 	b.w	8015af8 <enet_rx_enable>

08015f5e <enet_desc_information_get>:
 8015f5e:	2905      	cmp	r1, #5
 8015f60:	d817      	bhi.n	8015f92 <enet_desc_information_get+0x34>
 8015f62:	e8df f001 	tbb	[pc, r1]
 8015f66:	03091012 	movweq	r1, #36882	; 0x9012
 8015f6a:	68401007 	stmdavs	r0, {r0, r1, r2, ip}^
 8015f6e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8015f72:	4770      	bx	lr
 8015f74:	88c0      	ldrh	r0, [r0, #6]
 8015f76:	e7fa      	b.n	8015f6e <enet_desc_information_get+0x10>
 8015f78:	8840      	ldrh	r0, [r0, #2]
 8015f7a:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8015f7e:	2804      	cmp	r0, #4
 8015f80:	d90a      	bls.n	8015f98 <enet_desc_information_get+0x3a>
 8015f82:	3804      	subs	r0, #4
 8015f84:	4770      	bx	lr
 8015f86:	6880      	ldr	r0, [r0, #8]
 8015f88:	4770      	bx	lr
 8015f8a:	6800      	ldr	r0, [r0, #0]
 8015f8c:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8015f90:	4770      	bx	lr
 8015f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015f96:	4770      	bx	lr
 8015f98:	2000      	movs	r0, #0
 8015f9a:	4770      	bx	lr

08015f9c <enet_rxframe_drop>:
 8015f9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015fa0:	4814      	ldr	r0, [pc, #80]	; (8015ff4 <enet_rxframe_drop+0x58>)
 8015fa2:	b510      	push	{r4, lr}
 8015fa4:	6802      	ldr	r2, [r0, #0]
 8015fa6:	4914      	ldr	r1, [pc, #80]	; (8015ff8 <enet_rxframe_drop+0x5c>)
 8015fa8:	6854      	ldr	r4, [r2, #4]
 8015faa:	6013      	str	r3, [r2, #0]
 8015fac:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8015fb0:	680b      	ldr	r3, [r1, #0]
 8015fb2:	d009      	beq.n	8015fc8 <enet_rxframe_drop+0x2c>
 8015fb4:	b12b      	cbz	r3, 8015fc2 <enet_rxframe_drop+0x26>
 8015fb6:	68da      	ldr	r2, [r3, #12]
 8015fb8:	6002      	str	r2, [r0, #0]
 8015fba:	681a      	ldr	r2, [r3, #0]
 8015fbc:	b1ba      	cbz	r2, 8015fee <enet_rxframe_drop+0x52>
 8015fbe:	600a      	str	r2, [r1, #0]
 8015fc0:	bd10      	pop	{r4, pc}
 8015fc2:	68d3      	ldr	r3, [r2, #12]
 8015fc4:	6003      	str	r3, [r0, #0]
 8015fc6:	e7fb      	b.n	8015fc0 <enet_rxframe_drop+0x24>
 8015fc8:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8015fcc:	4c0b      	ldr	r4, [pc, #44]	; (8015ffc <enet_rxframe_drop+0x60>)
 8015fce:	d006      	beq.n	8015fde <enet_rxframe_drop+0x42>
 8015fd0:	68e2      	ldr	r2, [r4, #12]
 8015fd2:	6002      	str	r2, [r0, #0]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d0f3      	beq.n	8015fc0 <enet_rxframe_drop+0x24>
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	600b      	str	r3, [r1, #0]
 8015fdc:	e7f0      	b.n	8015fc0 <enet_rxframe_drop+0x24>
 8015fde:	6824      	ldr	r4, [r4, #0]
 8015fe0:	3210      	adds	r2, #16
 8015fe2:	f3c4 0484 	ubfx	r4, r4, #2, #5
 8015fe6:	4422      	add	r2, r4
 8015fe8:	6002      	str	r2, [r0, #0]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d0e8      	beq.n	8015fc0 <enet_rxframe_drop+0x24>
 8015fee:	3310      	adds	r3, #16
 8015ff0:	e7f3      	b.n	8015fda <enet_rxframe_drop+0x3e>
 8015ff2:	bf00      	nop
 8015ff4:	2000ac8c 	andcs	sl, r0, ip, lsl #25
 8015ff8:	2000ac84 	andcs	sl, r0, r4, lsl #25
 8015ffc:	40029000 	andmi	r9, r2, r0

08016000 <enet_rxframe_size_get>:
 8016000:	b508      	push	{r3, lr}
 8016002:	4b0c      	ldr	r3, [pc, #48]	; (8016034 <enet_rxframe_size_get+0x34>)
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	6818      	ldr	r0, [r3, #0]
 8016008:	2800      	cmp	r0, #0
 801600a:	db10      	blt.n	801602e <enet_rxframe_size_get+0x2e>
 801600c:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
 8016010:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016014:	d003      	beq.n	801601e <enet_rxframe_size_get+0x1e>
 8016016:	f7ff ffc1 	bl	8015f9c <enet_rxframe_drop>
 801601a:	2001      	movs	r0, #1
 801601c:	bd08      	pop	{r3, pc}
 801601e:	f000 0321 	and.w	r3, r0, #33	; 0x21
 8016022:	2b21      	cmp	r3, #33	; 0x21
 8016024:	d0f7      	beq.n	8016016 <enet_rxframe_size_get+0x16>
 8016026:	f3c0 400d 	ubfx	r0, r0, #16, #14
 801602a:	3804      	subs	r0, #4
 801602c:	e7f6      	b.n	801601c <enet_rxframe_size_get+0x1c>
 801602e:	2000      	movs	r0, #0
 8016030:	e7f4      	b.n	801601c <enet_rxframe_size_get+0x1c>
 8016032:	bf00      	nop
 8016034:	2000ac8c 	andcs	sl, r0, ip, lsl #25

08016038 <enet_initpara_reset>:
 8016038:	2200      	movs	r2, #0
 801603a:	4b08      	ldr	r3, [pc, #32]	; (801605c <enet_initpara_reset+0x24>)
 801603c:	e9c3 2200 	strd	r2, r2, [r3]
 8016040:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8016044:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8016048:	e9c3 2206 	strd	r2, r2, [r3, #24]
 801604c:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8016050:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8016054:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 8016058:	639a      	str	r2, [r3, #56]	; 0x38
 801605a:	4770      	bx	lr
 801605c:	2000ac94 	mulcs	r0, r4, ip

08016060 <enet_deinit>:
 8016060:	b508      	push	{r3, lr}
 8016062:	f640 200e 	movw	r0, #2574	; 0xa0e
 8016066:	f7fe fbae 	bl	80147c6 <rcu_periph_reset_enable>
 801606a:	f640 200e 	movw	r0, #2574	; 0xa0e
 801606e:	f7fe fbac 	bl	80147ca <rcu_periph_reset_disable>
 8016072:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016076:	f7ff bfdf 	b.w	8016038 <enet_initpara_reset>
	...

0801607c <i2c_clock_config>:
 801607c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801607e:	4605      	mov	r5, r0
 8016080:	2002      	movs	r0, #2
 8016082:	460c      	mov	r4, r1
 8016084:	4617      	mov	r7, r2
 8016086:	f7fe fc5f 	bl	8014948 <rcu_clock_freq_get>
 801608a:	4603      	mov	r3, r0
 801608c:	4828      	ldr	r0, [pc, #160]	; (8016130 <i2c_clock_config+0xb4>)
 801608e:	4a29      	ldr	r2, [pc, #164]	; (8016134 <i2c_clock_config+0xb8>)
 8016090:	fbb3 f0f0 	udiv	r0, r3, r0
 8016094:	4293      	cmp	r3, r2
 8016096:	bf94      	ite	ls
 8016098:	4601      	movls	r1, r0
 801609a:	213f      	movhi	r1, #63	; 0x3f
 801609c:	686e      	ldr	r6, [r5, #4]
 801609e:	4a26      	ldr	r2, [pc, #152]	; (8016138 <i2c_clock_config+0xbc>)
 80160a0:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80160a4:	430e      	orrs	r6, r1
 80160a6:	4294      	cmp	r4, r2
 80160a8:	606e      	str	r6, [r5, #4]
 80160aa:	d816      	bhi.n	80160da <i2c_clock_config+0x5e>
 80160ac:	3001      	adds	r0, #1
 80160ae:	283e      	cmp	r0, #62	; 0x3e
 80160b0:	d90d      	bls.n	80160ce <i2c_clock_config+0x52>
 80160b2:	223f      	movs	r2, #63	; 0x3f
 80160b4:	622a      	str	r2, [r5, #32]
 80160b6:	0064      	lsls	r4, r4, #1
 80160b8:	fbb3 f4f4 	udiv	r4, r3, r4
 80160bc:	2c04      	cmp	r4, #4
 80160be:	bf38      	it	cc
 80160c0:	2404      	movcc	r4, #4
 80160c2:	69ea      	ldr	r2, [r5, #28]
 80160c4:	f3c4 040b 	ubfx	r4, r4, #0, #12
 80160c8:	4314      	orrs	r4, r2
 80160ca:	61ec      	str	r4, [r5, #28]
 80160cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160ce:	2802      	cmp	r0, #2
 80160d0:	d801      	bhi.n	80160d6 <i2c_clock_config+0x5a>
 80160d2:	2202      	movs	r2, #2
 80160d4:	e7ee      	b.n	80160b4 <i2c_clock_config+0x38>
 80160d6:	6228      	str	r0, [r5, #32]
 80160d8:	e7ed      	b.n	80160b6 <i2c_clock_config+0x3a>
 80160da:	4a18      	ldr	r2, [pc, #96]	; (801613c <i2c_clock_config+0xc0>)
 80160dc:	4294      	cmp	r4, r2
 80160de:	d8f5      	bhi.n	80160cc <i2c_clock_config+0x50>
 80160e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80160e4:	4351      	muls	r1, r2
 80160e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80160ea:	fbb1 f1f2 	udiv	r1, r1, r2
 80160ee:	3101      	adds	r1, #1
 80160f0:	6229      	str	r1, [r5, #32]
 80160f2:	b9a7      	cbnz	r7, 801611e <i2c_clock_config+0xa2>
 80160f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80160f8:	fbb3 f4f4 	udiv	r4, r3, r4
 80160fc:	69eb      	ldr	r3, [r5, #28]
 80160fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8016102:	61eb      	str	r3, [r5, #28]
 8016104:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8016108:	b90b      	cbnz	r3, 801610e <i2c_clock_config+0x92>
 801610a:	f044 0401 	orr.w	r4, r4, #1
 801610e:	69eb      	ldr	r3, [r5, #28]
 8016110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016114:	61eb      	str	r3, [r5, #28]
 8016116:	69eb      	ldr	r3, [r5, #28]
 8016118:	4323      	orrs	r3, r4
 801611a:	61eb      	str	r3, [r5, #28]
 801611c:	e7d6      	b.n	80160cc <i2c_clock_config+0x50>
 801611e:	2219      	movs	r2, #25
 8016120:	4354      	muls	r4, r2
 8016122:	fbb3 f4f4 	udiv	r4, r3, r4
 8016126:	69eb      	ldr	r3, [r5, #28]
 8016128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801612c:	e7e9      	b.n	8016102 <i2c_clock_config+0x86>
 801612e:	bf00      	nop
 8016130:	000f4240 	andeq	r4, pc, r0, asr #4
 8016134:	03c14dbf 	biceq	r4, r1, #12224	; 0x2fc0
 8016138:	000186a0 	andeq	r8, r1, r0, lsr #13
 801613c:	00061a80 	andeq	r1, r6, r0, lsl #21

08016140 <i2c_ack_config>:
 8016140:	6803      	ldr	r3, [r0, #0]
 8016142:	2901      	cmp	r1, #1
 8016144:	bf0c      	ite	eq
 8016146:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 801614a:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 801614e:	6003      	str	r3, [r0, #0]
 8016150:	4770      	bx	lr

08016152 <i2c_ackpos_config>:
 8016152:	6803      	ldr	r3, [r0, #0]
 8016154:	b919      	cbnz	r1, 801615e <i2c_ackpos_config+0xc>
 8016156:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801615a:	6003      	str	r3, [r0, #0]
 801615c:	4770      	bx	lr
 801615e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016162:	e7fa      	b.n	801615a <i2c_ackpos_config+0x8>

08016164 <i2c_master_addressing>:
 8016164:	3202      	adds	r2, #2
 8016166:	bf0c      	ite	eq
 8016168:	f021 0101 	biceq.w	r1, r1, #1
 801616c:	f041 0101 	orrne.w	r1, r1, #1
 8016170:	6101      	str	r1, [r0, #16]
 8016172:	4770      	bx	lr

08016174 <i2c_enable>:
 8016174:	6803      	ldr	r3, [r0, #0]
 8016176:	f043 0301 	orr.w	r3, r3, #1
 801617a:	6003      	str	r3, [r0, #0]
 801617c:	4770      	bx	lr

0801617e <i2c_start_on_bus>:
 801617e:	6803      	ldr	r3, [r0, #0]
 8016180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016184:	6003      	str	r3, [r0, #0]
 8016186:	4770      	bx	lr

08016188 <i2c_stop_on_bus>:
 8016188:	6803      	ldr	r3, [r0, #0]
 801618a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801618e:	6003      	str	r3, [r0, #0]
 8016190:	4770      	bx	lr

08016192 <i2c_data_transmit>:
 8016192:	6101      	str	r1, [r0, #16]
 8016194:	4770      	bx	lr

08016196 <i2c_data_receive>:
 8016196:	6900      	ldr	r0, [r0, #16]
 8016198:	b2c0      	uxtb	r0, r0
 801619a:	4770      	bx	lr

0801619c <i2c_flag_get>:
 801619c:	098b      	lsrs	r3, r1, #6
 801619e:	581a      	ldr	r2, [r3, r0]
 80161a0:	2301      	movs	r3, #1
 80161a2:	f001 011f 	and.w	r1, r1, #31
 80161a6:	408b      	lsls	r3, r1
 80161a8:	4213      	tst	r3, r2
 80161aa:	bf14      	ite	ne
 80161ac:	2001      	movne	r0, #1
 80161ae:	2000      	moveq	r0, #0
 80161b0:	4770      	bx	lr

080161b2 <i2c_flag_clear>:
 80161b2:	f240 5301 	movw	r3, #1281	; 0x501
 80161b6:	4299      	cmp	r1, r3
 80161b8:	b510      	push	{r4, lr}
 80161ba:	d102      	bne.n	80161c2 <i2c_flag_clear+0x10>
 80161bc:	6943      	ldr	r3, [r0, #20]
 80161be:	6983      	ldr	r3, [r0, #24]
 80161c0:	bd10      	pop	{r4, pc}
 80161c2:	2201      	movs	r2, #1
 80161c4:	098c      	lsrs	r4, r1, #6
 80161c6:	5823      	ldr	r3, [r4, r0]
 80161c8:	f001 011f 	and.w	r1, r1, #31
 80161cc:	408a      	lsls	r2, r1
 80161ce:	ea23 0302 	bic.w	r3, r3, r2
 80161d2:	5023      	str	r3, [r4, r0]
 80161d4:	e7f4      	b.n	80161c0 <i2c_flag_clear+0xe>
	...

080161d8 <mac_address_get(unsigned char*)>:
 80161d8:	2102      	movs	r1, #2
 80161da:	4a07      	ldr	r2, [pc, #28]	; (80161f8 <mac_address_get(unsigned char*)+0x20>)
 80161dc:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 80161e0:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 80161e4:	7001      	strb	r1, [r0, #0]
 80161e6:	7042      	strb	r2, [r0, #1]
 80161e8:	0e1a      	lsrs	r2, r3, #24
 80161ea:	7082      	strb	r2, [r0, #2]
 80161ec:	0c1a      	lsrs	r2, r3, #16
 80161ee:	70c2      	strb	r2, [r0, #3]
 80161f0:	0a1a      	lsrs	r2, r3, #8
 80161f2:	7102      	strb	r2, [r0, #4]
 80161f4:	7143      	strb	r3, [r0, #5]
 80161f6:	4770      	bx	lr
 80161f8:	1ffff000 	svcne	0x00fff000

080161fc <__popcountsi2>:
 80161fc:	0843      	lsrs	r3, r0, #1
 80161fe:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8016202:	1ac0      	subs	r0, r0, r3
 8016204:	0883      	lsrs	r3, r0, #2
 8016206:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 801620a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 801620e:	4418      	add	r0, r3
 8016210:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8016214:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8016218:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 801621c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8016220:	0e00      	lsrs	r0, r0, #24
 8016222:	4770      	bx	lr

08016224 <__udivmoddi4>:
 8016224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016228:	9e08      	ldr	r6, [sp, #32]
 801622a:	460d      	mov	r5, r1
 801622c:	4604      	mov	r4, r0
 801622e:	468e      	mov	lr, r1
 8016230:	2b00      	cmp	r3, #0
 8016232:	d14c      	bne.n	80162ce <__udivmoddi4+0xaa>
 8016234:	428a      	cmp	r2, r1
 8016236:	4694      	mov	ip, r2
 8016238:	d967      	bls.n	801630a <__udivmoddi4+0xe6>
 801623a:	fab2 f382 	clz	r3, r2
 801623e:	b153      	cbz	r3, 8016256 <__udivmoddi4+0x32>
 8016240:	fa02 fc03 	lsl.w	ip, r2, r3
 8016244:	f1c3 0220 	rsb	r2, r3, #32
 8016248:	fa01 fe03 	lsl.w	lr, r1, r3
 801624c:	fa20 f202 	lsr.w	r2, r0, r2
 8016250:	ea42 0e0e 	orr.w	lr, r2, lr
 8016254:	409c      	lsls	r4, r3
 8016256:	ea4f 471c 	mov.w	r7, ip, lsr #16
 801625a:	fbbe f1f7 	udiv	r1, lr, r7
 801625e:	fa1f f58c 	uxth.w	r5, ip
 8016262:	fb07 ee11 	mls	lr, r7, r1, lr
 8016266:	fb01 f005 	mul.w	r0, r1, r5
 801626a:	0c22      	lsrs	r2, r4, #16
 801626c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8016270:	4290      	cmp	r0, r2
 8016272:	d90a      	bls.n	801628a <__udivmoddi4+0x66>
 8016274:	eb1c 0202 	adds.w	r2, ip, r2
 8016278:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 801627c:	f080 8119 	bcs.w	80164b2 <__udivmoddi4+0x28e>
 8016280:	4290      	cmp	r0, r2
 8016282:	f240 8116 	bls.w	80164b2 <__udivmoddi4+0x28e>
 8016286:	3902      	subs	r1, #2
 8016288:	4462      	add	r2, ip
 801628a:	1a12      	subs	r2, r2, r0
 801628c:	fbb2 f0f7 	udiv	r0, r2, r7
 8016290:	fb07 2210 	mls	r2, r7, r0, r2
 8016294:	fb00 f505 	mul.w	r5, r0, r5
 8016298:	b2a4      	uxth	r4, r4
 801629a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801629e:	42a5      	cmp	r5, r4
 80162a0:	d90a      	bls.n	80162b8 <__udivmoddi4+0x94>
 80162a2:	eb1c 0404 	adds.w	r4, ip, r4
 80162a6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80162aa:	f080 8104 	bcs.w	80164b6 <__udivmoddi4+0x292>
 80162ae:	42a5      	cmp	r5, r4
 80162b0:	f240 8101 	bls.w	80164b6 <__udivmoddi4+0x292>
 80162b4:	4464      	add	r4, ip
 80162b6:	3802      	subs	r0, #2
 80162b8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80162bc:	2100      	movs	r1, #0
 80162be:	1b64      	subs	r4, r4, r5
 80162c0:	b11e      	cbz	r6, 80162ca <__udivmoddi4+0xa6>
 80162c2:	40dc      	lsrs	r4, r3
 80162c4:	2300      	movs	r3, #0
 80162c6:	e9c6 4300 	strd	r4, r3, [r6]
 80162ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162ce:	428b      	cmp	r3, r1
 80162d0:	d908      	bls.n	80162e4 <__udivmoddi4+0xc0>
 80162d2:	2e00      	cmp	r6, #0
 80162d4:	f000 80ea 	beq.w	80164ac <__udivmoddi4+0x288>
 80162d8:	2100      	movs	r1, #0
 80162da:	e9c6 0500 	strd	r0, r5, [r6]
 80162de:	4608      	mov	r0, r1
 80162e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162e4:	fab3 f183 	clz	r1, r3
 80162e8:	2900      	cmp	r1, #0
 80162ea:	d148      	bne.n	801637e <__udivmoddi4+0x15a>
 80162ec:	42ab      	cmp	r3, r5
 80162ee:	d302      	bcc.n	80162f6 <__udivmoddi4+0xd2>
 80162f0:	4282      	cmp	r2, r0
 80162f2:	f200 80f8 	bhi.w	80164e6 <__udivmoddi4+0x2c2>
 80162f6:	1a84      	subs	r4, r0, r2
 80162f8:	eb65 0203 	sbc.w	r2, r5, r3
 80162fc:	2001      	movs	r0, #1
 80162fe:	4696      	mov	lr, r2
 8016300:	2e00      	cmp	r6, #0
 8016302:	d0e2      	beq.n	80162ca <__udivmoddi4+0xa6>
 8016304:	e9c6 4e00 	strd	r4, lr, [r6]
 8016308:	e7df      	b.n	80162ca <__udivmoddi4+0xa6>
 801630a:	b902      	cbnz	r2, 801630e <__udivmoddi4+0xea>
 801630c:	deff      	udf	#255	; 0xff
 801630e:	fab2 f382 	clz	r3, r2
 8016312:	2b00      	cmp	r3, #0
 8016314:	f040 808e 	bne.w	8016434 <__udivmoddi4+0x210>
 8016318:	1a88      	subs	r0, r1, r2
 801631a:	2101      	movs	r1, #1
 801631c:	0c17      	lsrs	r7, r2, #16
 801631e:	fa1f fe82 	uxth.w	lr, r2
 8016322:	fbb0 f5f7 	udiv	r5, r0, r7
 8016326:	fb07 0015 	mls	r0, r7, r5, r0
 801632a:	0c22      	lsrs	r2, r4, #16
 801632c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8016330:	fb0e f005 	mul.w	r0, lr, r5
 8016334:	4290      	cmp	r0, r2
 8016336:	d908      	bls.n	801634a <__udivmoddi4+0x126>
 8016338:	eb1c 0202 	adds.w	r2, ip, r2
 801633c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8016340:	d202      	bcs.n	8016348 <__udivmoddi4+0x124>
 8016342:	4290      	cmp	r0, r2
 8016344:	f200 80cc 	bhi.w	80164e0 <__udivmoddi4+0x2bc>
 8016348:	4645      	mov	r5, r8
 801634a:	1a12      	subs	r2, r2, r0
 801634c:	fbb2 f0f7 	udiv	r0, r2, r7
 8016350:	fb07 2210 	mls	r2, r7, r0, r2
 8016354:	fb0e fe00 	mul.w	lr, lr, r0
 8016358:	b2a4      	uxth	r4, r4
 801635a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801635e:	45a6      	cmp	lr, r4
 8016360:	d908      	bls.n	8016374 <__udivmoddi4+0x150>
 8016362:	eb1c 0404 	adds.w	r4, ip, r4
 8016366:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 801636a:	d202      	bcs.n	8016372 <__udivmoddi4+0x14e>
 801636c:	45a6      	cmp	lr, r4
 801636e:	f200 80b4 	bhi.w	80164da <__udivmoddi4+0x2b6>
 8016372:	4610      	mov	r0, r2
 8016374:	eba4 040e 	sub.w	r4, r4, lr
 8016378:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 801637c:	e7a0      	b.n	80162c0 <__udivmoddi4+0x9c>
 801637e:	f1c1 0720 	rsb	r7, r1, #32
 8016382:	408b      	lsls	r3, r1
 8016384:	fa22 fc07 	lsr.w	ip, r2, r7
 8016388:	ea4c 0c03 	orr.w	ip, ip, r3
 801638c:	fa25 fa07 	lsr.w	sl, r5, r7
 8016390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8016394:	fbba f8f9 	udiv	r8, sl, r9
 8016398:	408d      	lsls	r5, r1
 801639a:	fa20 f307 	lsr.w	r3, r0, r7
 801639e:	fb09 aa18 	mls	sl, r9, r8, sl
 80163a2:	fa1f fe8c 	uxth.w	lr, ip
 80163a6:	432b      	orrs	r3, r5
 80163a8:	fa00 f501 	lsl.w	r5, r0, r1
 80163ac:	fb08 f00e 	mul.w	r0, r8, lr
 80163b0:	0c1c      	lsrs	r4, r3, #16
 80163b2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80163b6:	42a0      	cmp	r0, r4
 80163b8:	fa02 f201 	lsl.w	r2, r2, r1
 80163bc:	d90b      	bls.n	80163d6 <__udivmoddi4+0x1b2>
 80163be:	eb1c 0404 	adds.w	r4, ip, r4
 80163c2:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80163c6:	f080 8086 	bcs.w	80164d6 <__udivmoddi4+0x2b2>
 80163ca:	42a0      	cmp	r0, r4
 80163cc:	f240 8083 	bls.w	80164d6 <__udivmoddi4+0x2b2>
 80163d0:	f1a8 0802 	sub.w	r8, r8, #2
 80163d4:	4464      	add	r4, ip
 80163d6:	1a24      	subs	r4, r4, r0
 80163d8:	b298      	uxth	r0, r3
 80163da:	fbb4 f3f9 	udiv	r3, r4, r9
 80163de:	fb09 4413 	mls	r4, r9, r3, r4
 80163e2:	fb03 fe0e 	mul.w	lr, r3, lr
 80163e6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80163ea:	45a6      	cmp	lr, r4
 80163ec:	d908      	bls.n	8016400 <__udivmoddi4+0x1dc>
 80163ee:	eb1c 0404 	adds.w	r4, ip, r4
 80163f2:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80163f6:	d26a      	bcs.n	80164ce <__udivmoddi4+0x2aa>
 80163f8:	45a6      	cmp	lr, r4
 80163fa:	d968      	bls.n	80164ce <__udivmoddi4+0x2aa>
 80163fc:	3b02      	subs	r3, #2
 80163fe:	4464      	add	r4, ip
 8016400:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8016404:	fba0 9302 	umull	r9, r3, r0, r2
 8016408:	eba4 040e 	sub.w	r4, r4, lr
 801640c:	429c      	cmp	r4, r3
 801640e:	46c8      	mov	r8, r9
 8016410:	469e      	mov	lr, r3
 8016412:	d354      	bcc.n	80164be <__udivmoddi4+0x29a>
 8016414:	d051      	beq.n	80164ba <__udivmoddi4+0x296>
 8016416:	2e00      	cmp	r6, #0
 8016418:	d067      	beq.n	80164ea <__udivmoddi4+0x2c6>
 801641a:	ebb5 0308 	subs.w	r3, r5, r8
 801641e:	eb64 040e 	sbc.w	r4, r4, lr
 8016422:	40cb      	lsrs	r3, r1
 8016424:	fa04 f707 	lsl.w	r7, r4, r7
 8016428:	431f      	orrs	r7, r3
 801642a:	40cc      	lsrs	r4, r1
 801642c:	e9c6 7400 	strd	r7, r4, [r6]
 8016430:	2100      	movs	r1, #0
 8016432:	e74a      	b.n	80162ca <__udivmoddi4+0xa6>
 8016434:	fa02 fc03 	lsl.w	ip, r2, r3
 8016438:	f1c3 0020 	rsb	r0, r3, #32
 801643c:	40c1      	lsrs	r1, r0
 801643e:	409d      	lsls	r5, r3
 8016440:	fa24 f000 	lsr.w	r0, r4, r0
 8016444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8016448:	4328      	orrs	r0, r5
 801644a:	fbb1 f5f7 	udiv	r5, r1, r7
 801644e:	fb07 1115 	mls	r1, r7, r5, r1
 8016452:	fa1f fe8c 	uxth.w	lr, ip
 8016456:	0c02      	lsrs	r2, r0, #16
 8016458:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801645c:	fb05 f10e 	mul.w	r1, r5, lr
 8016460:	4291      	cmp	r1, r2
 8016462:	fa04 f403 	lsl.w	r4, r4, r3
 8016466:	d908      	bls.n	801647a <__udivmoddi4+0x256>
 8016468:	eb1c 0202 	adds.w	r2, ip, r2
 801646c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8016470:	d22f      	bcs.n	80164d2 <__udivmoddi4+0x2ae>
 8016472:	4291      	cmp	r1, r2
 8016474:	d92d      	bls.n	80164d2 <__udivmoddi4+0x2ae>
 8016476:	3d02      	subs	r5, #2
 8016478:	4462      	add	r2, ip
 801647a:	1a52      	subs	r2, r2, r1
 801647c:	fbb2 f1f7 	udiv	r1, r2, r7
 8016480:	fb07 2211 	mls	r2, r7, r1, r2
 8016484:	b280      	uxth	r0, r0
 8016486:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801648a:	fb01 f20e 	mul.w	r2, r1, lr
 801648e:	4282      	cmp	r2, r0
 8016490:	d908      	bls.n	80164a4 <__udivmoddi4+0x280>
 8016492:	eb1c 0000 	adds.w	r0, ip, r0
 8016496:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 801649a:	d216      	bcs.n	80164ca <__udivmoddi4+0x2a6>
 801649c:	4282      	cmp	r2, r0
 801649e:	d914      	bls.n	80164ca <__udivmoddi4+0x2a6>
 80164a0:	3902      	subs	r1, #2
 80164a2:	4460      	add	r0, ip
 80164a4:	1a80      	subs	r0, r0, r2
 80164a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80164aa:	e73a      	b.n	8016322 <__udivmoddi4+0xfe>
 80164ac:	4631      	mov	r1, r6
 80164ae:	4630      	mov	r0, r6
 80164b0:	e70b      	b.n	80162ca <__udivmoddi4+0xa6>
 80164b2:	4671      	mov	r1, lr
 80164b4:	e6e9      	b.n	801628a <__udivmoddi4+0x66>
 80164b6:	4610      	mov	r0, r2
 80164b8:	e6fe      	b.n	80162b8 <__udivmoddi4+0x94>
 80164ba:	454d      	cmp	r5, r9
 80164bc:	d2ab      	bcs.n	8016416 <__udivmoddi4+0x1f2>
 80164be:	ebb9 0802 	subs.w	r8, r9, r2
 80164c2:	eb63 0e0c 	sbc.w	lr, r3, ip
 80164c6:	3801      	subs	r0, #1
 80164c8:	e7a5      	b.n	8016416 <__udivmoddi4+0x1f2>
 80164ca:	4641      	mov	r1, r8
 80164cc:	e7ea      	b.n	80164a4 <__udivmoddi4+0x280>
 80164ce:	4603      	mov	r3, r0
 80164d0:	e796      	b.n	8016400 <__udivmoddi4+0x1dc>
 80164d2:	4645      	mov	r5, r8
 80164d4:	e7d1      	b.n	801647a <__udivmoddi4+0x256>
 80164d6:	46d0      	mov	r8, sl
 80164d8:	e77d      	b.n	80163d6 <__udivmoddi4+0x1b2>
 80164da:	4464      	add	r4, ip
 80164dc:	3802      	subs	r0, #2
 80164de:	e749      	b.n	8016374 <__udivmoddi4+0x150>
 80164e0:	3d02      	subs	r5, #2
 80164e2:	4462      	add	r2, ip
 80164e4:	e731      	b.n	801634a <__udivmoddi4+0x126>
 80164e6:	4608      	mov	r0, r1
 80164e8:	e70a      	b.n	8016300 <__udivmoddi4+0xdc>
 80164ea:	4631      	mov	r1, r6
 80164ec:	e6ed      	b.n	80162ca <__udivmoddi4+0xa6>
 80164ee:	bf00      	nop

Disassembly of section .rodata:

080164f0 <vtable for DisplayHandler-0xc0>:
 80164f0:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80164f4:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8016500:	03020100 	movweq	r0, #8448	; 0x2100
 8016504:	08070604 	stmdaeq	r7, {r2, r9, sl}
 8016508:	00000009 	andeq	r0, r0, r9
 801650c:	03020100 	movweq	r0, #8448	; 0x2100
 8016510:	3a393104 	bcc	8e62928 <__exidx_end+0xe4a0b4>
 8016514:	333a3435 	teqcc	sl, #889192448	; 0x35000000
 8016518:	634f0035 	movtvs	r0, #61493	; 0xf035
 801651c:	30312074 	eorscc	r2, r1, r4, ror r0
 8016520:	32303220 	eorscc	r3, r0, #32, 4
 8016524:	5b1b0032 	blpl	86d65f4 <__exidx_end+0x6bdd80>
 8016528:	416d3233 	cmnmi	sp, r3, lsr r2
 801652c:	4e2d7472 	mcrmi	4, 1, r7, cr13, cr2, {3}
 8016530:	34207465 	strtcc	r7, [r0], #-1125	; 0xfffffb9b
 8016534:	584d4420 	stmdapl	sp, {r5, sl, lr}^
 8016538:	4d44522f 	sfmmi	f5, 2, [r4, #-188]	; 0xffffff44
 801653c:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8016540:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 8016378 <__udivmoddi4+0x154>
 8016544:	2072656c 	rsbscs	r6, r2, ip, ror #10
 8016548:	5520347b 	strpl	r3, [r0, #-1147]!	; 0xfffffb85
 801654c:	6576696e 	ldrbvs	r6, [r6, #-2414]!	; 0xfffff692
 8016550:	73657372 	cmnvc	r5, #-939524095	; 0xc8000001
 8016554:	335b1b7d 	cmpcc	fp, #128000	; 0x1f400
 8016558:	2e006d37 	mcrcs	13, 0, r6, cr0, cr7, {1}
 801655c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 8016560:	00676966 	rsbeq	r6, r7, r6, ror #18
 8016564:	74685f2e 	strbtvc	r5, [r8], #-3886	; 0xfffff0d2
 8016568:	6e007074 	mcrvs	0, 0, r7, cr0, cr4, {3}
 801656c:	3d65646f 	cfstrdcc	mvd6, [r5, #-444]!	; 0xfffffe44
 8016570:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016574:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016578:	4d442034 	stclmi	0, cr2, [r4, #-208]	; 0xffffff30
 801657c:	44522f58 	ldrbmi	r2, [r2], #-3928	; 0xfffff0a8
 8016580:	7241004d 	subvc	r0, r1, #77	; 0x4d
 8016584:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 8016588:	20342074 	eorscs	r2, r4, r4, ror r0
 801658c:	64007525 	strvs	r7, [r0], #-1317	; 0xfffffadb
 8016590:	0021786d 	eoreq	r7, r1, sp, ror #16
 8016594:	61657262 	cmnvs	r5, r2, ror #4
 8016598:	6d00236b 	stcvs	3, cr2, [r0, #-428]	; 0xfffffe54
 801659c:	00236261 	eoreq	r6, r3, r1, ror #4
 80165a0:	72666572 	rsbvc	r6, r6, #478150656	; 0x1c800000
 80165a4:	23687365 	cmncs	r8, #-1811939327	; 0x94000001
 80165a8:	6f6c7300 	svcvs	0x006c7300
 80165ac:	00237374 	eoreq	r7, r3, r4, ror r3

080165b0 <vtable for DisplayHandler>:
	...
 80165b8:	08008133 	stmdaeq	r0, {r0, r1, r4, r5, r8, pc}
 80165bc:	08008161 	stmdaeq	r0, {r0, r5, r6, r8, pc}
 80165c0:	08008205 	stmdaeq	r0, {r0, r2, r9, pc}

080165c4 <vtable for DisplayUdfHandler>:
	...
 80165cc:	08008135 	stmdaeq	r0, {r0, r2, r4, r5, r8, pc}
 80165d0:	0800816d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, pc}
 80165d4:	080081dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, pc}
 80165d8:	08008137 	stmdaeq	r0, {r0, r1, r2, r4, r5, r8, pc}
 80165dc:	080081c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, pc}
 80165e0:	080081b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, pc}
 80165e4:	080081a1 	stmdaeq	r0, {r0, r5, r7, r8, pc}
 80165e8:	0800818d 	stmdaeq	r0, {r0, r2, r3, r7, r8, pc}
 80165ec:	08008179 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, pc}
 80165f0:	08008139 	stmdaeq	r0, {r0, r3, r4, r5, r8, pc}
 80165f4:	0800813b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r8, pc}

080165f8 <CSWTCH.98>:
 80165f8:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 80165fc:	 	eorcc	r3, lr, #-2147483631	; 0x80000011

080165fd <SOFTWARE_VERSION>:
 80165fd:	00322e31 	eorseq	r2, r2, r1, lsr lr
 8016601:	 	andeq	r0, r0, r0

08016604 <vtable for DmxInput>:
	...
 801660c:	08008965 	stmdaeq	r0, {r0, r2, r5, r6, r8, fp, pc}
 8016610:	08008a05 	stmdaeq	r0, {r0, r2, r9, fp, pc}
 8016614:	08008969 	stmdaeq	r0, {r0, r3, r5, r6, r8, fp, pc}
 8016618:	08008999 	stmdaeq	r0, {r0, r3, r4, r7, r8, fp, pc}
 801661c:	080089c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, fp, pc}
 8016620:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016624:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016628:	2c64252e 	cfstr64cs	mvdx2, [r4], #-184	; 0xffffff48
 801662c:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 8016630:	64252c73 	strtvs	r2, [r5], #-3187	; 0xfffff38d
 8016634:	0a73252c 	beq	9cdfaec <__exidx_end+0x1cc7278>
 8016638:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 801663c:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016640:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016644:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 8016648:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 801664c:	4f000a64 	svcmi	0x00000a64
 8016650:	664f006e 	strbvs	r0, [pc], -lr, rrx
 8016654:	69640066 	stmdbvs	r4!, {r1, r2, r5, r6}^
 8016658:	616c7073 	smcvs	50947	; 0xc703
 801665c:	73253a79 			; <UNDEFINED> instruction: 0x73253a79
 8016660:	6674000a 	ldrbtvs	r0, [r4], -sl
 8016664:	253a7074 	ldrcs	r7, [sl, #-116]!	; 0xffffff8c
 8016668:	76000a73 			; <UNDEFINED> instruction: 0x76000a73
 801666c:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8016670:	253a6e6f 	ldrcs	r6, [sl, #-3695]!	; 0xfffff191
 8016674:	70750073 	rsbsvc	r0, r5, r3, ror r0
 8016678:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 801667c:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 8016680:	54000a73 	strpl	r0, [r0], #-2675	; 0xfffff58d
 8016684:	20505446 	subscs	r5, r0, r6, asr #8
 8016688:	20206e4f 	eorcs	r6, r0, pc, asr #28
 801668c:	6265525b 	rsbvs	r5, r5, #-1342177275	; 0xb0000005
 8016690:	5d746f6f 	ldclpl	15, cr6, [r4, #-444]!	; 0xfffffe44
 8016694:	54465400 	strbpl	r5, [r6], #-1024	; 0xfffffc00
 8016698:	664f2050 			; <UNDEFINED> instruction: 0x664f2050
 801669c:	525b2066 	subspl	r2, fp, #102	; 0x66
 80166a0:	6f6f6265 	svcvs	0x006f6265
 80166a4:	00205d74 	eoreq	r5, r0, r4, ror sp
 80166a8:	4f525245 	svcmi	0x00525245
 80166ac:	673f2352 			; <UNDEFINED> instruction: 0x673f2352
 80166b0:	000a7465 	andeq	r7, sl, r5, ror #8
 80166b4:	70746674 	rsbsvc	r6, r4, r4, ror r6
 80166b8:	69640023 	stmdbvs	r4!, {r0, r1, r5}^
 80166bc:	616c7073 	smcvs	50947	; 0xc703
 80166c0:	45002379 	strmi	r2, [r0, #-889]	; 0xfffffc87
 80166c4:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 80166c8:	000a2123 	andeq	r2, sl, r3, lsr #2
 80166cc:	4f525245 	svcmi	0x00525245
 80166d0:	0a3f2352 	beq	8fdf420 <__exidx_end+0xfc6bac>
 80166d4:	62657200 	rsbvs	r7, r5, #0, 4
 80166d8:	23746f6f 	cmncs	r4, #444	; 0x1bc
 80166dc:	696c0023 	stmdbvs	ip!, {r0, r1, r5}^
 80166e0:	00237473 	eoreq	r7, r3, r3, ror r4
 80166e4:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80166e8:	75002a23 	strvc	r2, [r0, #-2595]	; 0xfffff5dd
 80166ec:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 80166f0:	76002365 	strvc	r2, [r0], -r5, ror #6
 80166f4:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80166f8:	00236e6f 	eoreq	r6, r3, pc, ror #28
 80166fc:	23746567 	cmncs	r4, #432013312	; 0x19c00000
 8016700:	63616600 	cmnvs	r1, #0, 12
 8016704:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016708:	 	tstmi	r0, r3, lsr #6

0801670b <s_Node>:
 801670b:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801670f:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 801671b:	41730000 	cmnmi	r3, r0
 801671f:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 8016723:	31332e31 	teqcc	r3, r1, lsr lr
	...
 801672f:	2043534f 	subcs	r5, r3, pc, asr #6
 8016733:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8016737:	00007265 	andeq	r7, r0, r5, ror #4
 801673b:	00000000 	andeq	r0, r0, r0
 801673f:	544c0000 	strbpl	r0, [ip], #-0
 8016743:	00000043 	andeq	r0, r0, r3, asr #32
	...
 8016753:	2043534f 	subcs	r5, r3, pc, asr #6
 8016757:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 801675b:	0000746e 	andeq	r7, r0, lr, ror #8
 801675f:	00000000 	andeq	r0, r0, r0
 8016763:	44520000 	ldrbmi	r0, [r2], #-0
 8016767:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 801676b:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 801676f:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 8016773:	0000796c 	andeq	r7, r0, ip, ror #18
 8016777:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 801677b:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 8016787:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 801678b:	00004944 	andeq	r4, r0, r4, asr #18
	...
 801679b:	00504444 	subseq	r4, r0, r4, asr #8
	...
 80167ab:	69500000 	ldmdbvs	r0, {}^	; <UNPREDICTABLE>
 80167af:	506c6578 	rsbpl	r6, ip, r8, ror r5
 80167b3:	65687375 	strbvs	r7, [r8, #-885]!	; 0xfffffc8b
 80167b7:	00000072 	andeq	r0, r0, r2, ror r0
 80167bb:	00000000 	andeq	r0, r0, r0
 80167bf:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
	...

080167d1 <s_Output>:
 80167d1:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 80167dd:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 80167e9:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 80167ed:	00726f74 	rsbseq	r6, r2, r4, ror pc
 80167f1:	00000000 	andeq	r0, r0, r0
 80167f5:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 80167f9:	0000006c 	andeq	r0, r0, ip, rrx
 80167fd:	00000000 	andeq	r0, r0, r0
 8016801:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 8016805:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 8016809:	00000000 	andeq	r0, r0, r0
 801680d:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 8016819:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801681d:	00006769 	andeq	r6, r0, r9, ror #14
 8016821:	00000000 	andeq	r0, r0, r0
 8016825:	70657453 	rsbvc	r7, r5, r3, asr r4
 8016829:	00726570 	rsbseq	r6, r2, r0, ror r5
 801682d:	00000000 	andeq	r0, r0, r0
 8016831:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 8016835:	00007265 	andeq	r7, r0, r5, ror #4
 8016839:	00000000 	andeq	r0, r0, r0
 801683d:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016841:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8016845:	00000000 	andeq	r0, r0, r0
 8016849:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 801684d:	00006c61 	andeq	r6, r0, r1, ror #24
 8016851:	00000000 	andeq	r0, r0, r0
 8016855:	20424752 	subcs	r4, r2, r2, asr r7
 8016859:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 801685d:	0000006c 	andeq	r0, r0, ip, rrx
 8016861:	 	mrsls	r0, (UNDEF: 0)

08016864 <RemoteConfig::s_GET>:
 8016864:	08009591 	stmdaeq	r0, {r0, r4, r7, r8, sl, ip, pc}
 8016868:	00000000 	andeq	r0, r0, r0
 801686c:	080166d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r9, sl, sp, lr}
 8016870:	00000008 	andeq	r0, r0, r8
 8016874:	08008a31 	stmdaeq	r0, {r0, r4, r5, r9, fp, pc}
 8016878:	00000000 	andeq	r0, r0, r0
 801687c:	080166de 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r9, sl, sp, lr}
 8016880:	00000005 	andeq	r0, r0, r5
 8016884:	08008a31 	stmdaeq	r0, {r0, r4, r5, r9, fp, pc}
 8016888:	00000000 	andeq	r0, r0, r0
 801688c:	080166e4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sl, sp, lr}
 8016890:	00000006 	andeq	r0, r0, r6
 8016894:	08008be5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, fp, pc}
 8016898:	00000000 	andeq	r0, r0, r0
 801689c:	080166eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r9, sl, sp, lr}
 80168a0:	00000007 	andeq	r0, r0, r7
 80168a4:	08008ba5 	stmdaeq	r0, {r0, r2, r5, r7, r8, r9, fp, pc}
 80168a8:	00000000 	andeq	r0, r0, r0
 80168ac:	080166f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, sl, sp, lr}
 80168b0:	00000008 	andeq	r0, r0, r8
 80168b4:	08008b01 	stmdaeq	r0, {r0, r8, r9, fp, pc}
 80168b8:	00000000 	andeq	r0, r0, r0
 80168bc:	080166ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, sl, sp, lr}
 80168c0:	00000008 	andeq	r0, r0, r8
 80168c4:	08008eb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sl, fp, pc}
 80168c8:	00000000 	andeq	r0, r0, r0
 80168cc:	080166fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, sl, sp, lr}
 80168d0:	00010004 	andeq	r0, r1, r4
 80168d4:	08008b55 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, fp, pc}
 80168d8:	00000000 	andeq	r0, r0, r0
 80168dc:	080166b4 	stmdaeq	r1, {r2, r4, r5, r7, r9, sl, sp, lr}
 80168e0:	00000005 	andeq	r0, r0, r5
 80168e4:	08009281 	stmdaeq	r0, {r0, r7, r9, ip, pc}
 80168e8:	00000000 	andeq	r0, r0, r0
 80168ec:	08016701 	stmdaeq	r1, {r0, r8, r9, sl, sp, lr}
 80168f0:	00000009 	andeq	r0, r0, r9

080168f4 <RemoteConfig::s_SET>:
 80168f4:	08008c91 	stmdaeq	r0, {r0, r4, r7, sl, fp, pc}
 80168f8:	00000000 	andeq	r0, r0, r0
 80168fc:	080166b4 	stmdaeq	r1, {r2, r4, r5, r7, r9, sl, sp, lr}
 8016900:	00010005 	andeq	r0, r1, r5
 8016904:	08008c69 	stmdaeq	r0, {r0, r3, r5, r6, sl, fp, pc}
 8016908:	00000000 	andeq	r0, r0, r0
 801690c:	080166ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, sl, sp, lr}
 8016910:	00010008 	andeq	r0, r1, r8
 8016914:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8016918:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	; 0xffffff18
 801691c:	73252300 			; <UNDEFINED> instruction: 0x73252300
 8016920:	0a64253d 	beq	991fe1c <__exidx_end+0x19075a8>
 8016924:	73252200 			; <UNDEFINED> instruction: 0x73252200
 8016928:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801692c:	002c2273 	eoreq	r2, ip, r3, ror r2
 8016930:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 8016934:	000a7325 	andeq	r7, sl, r5, lsr #6
 8016938:	6f626552 	svcvs	0x00626552
 801693c:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 8016940:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 8016944:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 8016948:	6f6f6265 	svcvs	0x006f6265
 801694c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8016950:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 8016954:	6f637200 	svcvs	0x00637200
 8016958:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801695c:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8016960:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 8016964:	6b726f77 	blvs	9cb2748 <__exidx_end+0x1c99ed4>
 8016968:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 801696c:	73696400 	cmnvc	r9, #0, 8
 8016970:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8016974:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8016978:	74726100 	ldrbtvc	r6, [r2], #-256	; 0xffffff00
 801697c:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8016980:	00747874 	rsbseq	r7, r4, r4, ror r8
 8016984:	31333165 	teqcc	r3, r5, ror #2
 8016988:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 801698c:	72617000 	rsbvc	r7, r1, #0
 8016990:	2e736d61 	cdpcs	13, 7, cr6, cr3, cr1, {3}
 8016994:	00747874 	rsbseq	r7, r4, r4, ror r8

08016998 <RemoteConfig::s_TXT>:
 8016998:	08008ec1 	stmdaeq	r0, {r0, r6, r7, r9, sl, fp, pc}
 801699c:	00000000 	andeq	r0, r0, r0
 80169a0:	08009189 	stmdaeq	r0, {r0, r3, r7, r8, ip, pc}
 80169a4:	00000000 	andeq	r0, r0, r0
 80169a8:	08016955 	stmdaeq	r1, {r0, r2, r4, r6, r8, fp, sp, lr}
 80169ac:	0000000b 	andeq	r0, r0, fp
 80169b0:	0000000c 	andeq	r0, r0, ip
 80169b4:	08008eed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r9, sl, fp, pc}
 80169b8:	00000000 	andeq	r0, r0, r0
 80169bc:	080091b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, ip, pc}
 80169c0:	00000000 	andeq	r0, r0, r0
 80169c4:	08016961 	stmdaeq	r1, {r0, r5, r6, r8, fp, sp, lr}
 80169c8:	0000000b 	andeq	r0, r0, fp
 80169cc:	00000000 	andeq	r0, r0, r0
 80169d0:	08008f9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, sl, fp, pc}
 80169d4:	00000000 	andeq	r0, r0, r0
 80169d8:	08009259 	stmdaeq	r0, {r0, r3, r4, r6, r9, ip, pc}
 80169dc:	00000000 	andeq	r0, r0, r0
 80169e0:	0801696d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, fp, sp, lr}
 80169e4:	0000000b 	andeq	r0, r0, fp
 80169e8:	0000000f 	andeq	r0, r0, pc
 80169ec:	08008f19 	stmdaeq	r0, {r0, r3, r4, r8, r9, sl, fp, pc}
 80169f0:	00000000 	andeq	r0, r0, r0
 80169f4:	080091e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, ip, pc}
 80169f8:	00000000 	andeq	r0, r0, r0
 80169fc:	08016979 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, fp, sp, lr}
 8016a00:	0000000a 	andeq	r0, r0, sl
 8016a04:	00000001 	andeq	r0, r0, r1
 8016a08:	08008f45 	stmdaeq	r0, {r0, r2, r6, r8, r9, sl, fp, pc}
 8016a0c:	00000000 	andeq	r0, r0, r0
 8016a10:	08009209 	stmdaeq	r0, {r0, r3, r9, ip, pc}
 8016a14:	00000000 	andeq	r0, r0, r0
 8016a18:	08016984 	stmdaeq	r1, {r2, r7, r8, fp, sp, lr}
 8016a1c:	00000008 	andeq	r0, r0, r8
 8016a20:	00000004 	andeq	r0, r0, r4
 8016a24:	08008f71 	stmdaeq	r0, {r0, r4, r5, r6, r8, r9, sl, fp, pc}
 8016a28:	00000000 	andeq	r0, r0, r0
 8016a2c:	08009231 	stmdaeq	r0, {r0, r4, r5, r9, ip, pc}
 8016a30:	00000000 	andeq	r0, r0, r0
 8016a34:	0801698d 	stmdaeq	r1, {r0, r2, r3, r7, r8, fp, sp, lr}
 8016a38:	0000000a 	andeq	r0, r0, sl
 8016a3c:	00000002 	andeq	r0, r0, r2
 8016a40:	00544547 	subseq	r4, r4, r7, asr #10
 8016a44:	54534f50 	ldrbpl	r4, [r3], #-3920	; 0xfffff0b0
 8016a48:	54544800 	ldrbpl	r4, [r4], #-2048	; 0xfffff800
 8016a4c:	0a200050 	beq	8816b94 <__exidx_end+0x7fe320>
 8016a50:	312e3100 			; <UNDEFINED> instruction: 0x312e3100
 8016a54:	43003a00 	movwmi	r3, #2560	; 0xa00
 8016a58:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8016a5c:	542d746e 	strtpl	r7, [sp], #-1134	; 0xfffffb92
 8016a60:	00657079 	rsbeq	r7, r5, r9, ror r0
 8016a64:	61003b20 	tstvs	r0, r0, lsr #22
 8016a68:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 8016a6c:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 8016a70:	6a2f6e6f 	bvs	8bf2434 <__exidx_end+0xbd9bc0>
 8016a74:	006e6f73 	rsbeq	r6, lr, r3, ror pc
 8016a78:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8016a7c:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8016a80:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8016a84:	2f006874 	svccs	0x00006874
 8016a88:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8016a8c:	74682e78 	strbtvc	r2, [r8], #-3704	; 0xfffff188
 8016a90:	2f006c6d 	svccs	0x00006c6d
 8016a94:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8016a98:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8016a9c:	2f007373 	svccs	0x00007373
 8016aa0:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8016aa4:	736a2e78 	cmnvc	sl, #120, 28	; 0x780
 8016aa8:	736a2f00 	cmnvc	sl, #0, 30
 8016aac:	002f6e6f 	eoreq	r6, pc, pc, ror #28
 8016ab0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8016ab4:	72657600 	rsbvc	r7, r5, #0, 12
 8016ab8:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8016abc:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 8016ac0:	00656d69 	rsbeq	r6, r5, r9, ror #26
 8016ac4:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8016ac8:	0079616c 	rsbseq	r6, r9, ip, ror #2
 8016acc:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8016ad0:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8016ad4:	6a2f0079 	bvs	8bd6cc0 <__exidx_end+0xbbe44c>
 8016ad8:	2f6e6f73 	svccs	0x006e6f73
 8016adc:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8016ae0:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
 8016ae4:	6f6f6265 	svcvs	0x006f6265
 8016ae8:	64690074 	strbtvs	r0, [r9], #-116	; 0xffffff8c
 8016aec:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 8016af0:	3c007966 			; <UNDEFINED> instruction: 0x3c007966
 8016af4:	434f4421 	movtmi	r4, #62497	; 0xf421
 8016af8:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8016afc:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8016b00:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8016b04:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8016b08:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 8016b0c:	3e646165 	powccsz	f6, f4, f5
 8016b10:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8016b14:	533e656c 	teqpl	lr, #108, 10	; 0x1b000000
 8016b18:	696d6275 	stmdbvs	sp!, {r0, r2, r4, r5, r6, r9, sp, lr}^
 8016b1c:	742f3c74 	strtvc	r3, [pc], #-3188	; 8016b24 <RemoteConfig::s_TXT+0x18c>
 8016b20:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 8016b24:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8016b28:	3e646165 	powccsz	f6, f4, f5
 8016b2c:	6f623c0a 	svcvs	0x00623c0a
 8016b30:	3c3e7964 			; <UNDEFINED> instruction: 0x3c3e7964
 8016b34:	4f3e3168 	svcmi	0x003e3168
 8016b38:	682f3c4b 	stmdavs	pc!, {r0, r1, r3, r6, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8016b3c:	2f3c3e31 	svccs	0x003c3e31
 8016b40:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016b44:	2f3c0a3e 	svccs	0x003c0a3e
 8016b48:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8016b4c:	42000a3e 	andmi	r0, r0, #253952	; 0x3e000
 8016b50:	52206461 	eorpl	r6, r0, #1627389952	; 0x61000000
 8016b54:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 8016b58:	4e007473 	mcrmi	4, 0, r7, cr0, cr3, {3}
 8016b5c:	4620746f 	strtmi	r7, [r0], -pc, ror #8
 8016b60:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 8016b64:	71655200 	cmnvc	r5, r0, lsl #4
 8016b68:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
 8016b6c:	746e4520 	strbtvc	r4, [lr], #-1312	; 0xfffffae0
 8016b70:	20797469 	rsbscs	r7, r9, r9, ror #8
 8016b74:	206f6f54 	rsbcs	r6, pc, r4, asr pc	; <UNPREDICTABLE>
 8016b78:	6772614c 	ldrbvs	r6, [r2, -ip, asr #2]!
 8016b7c:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
 8016b80:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
 8016b84:	52552d74 	subspl	r2, r5, #116, 26	; 0x1d00
 8016b88:	6f542049 	svcvs	0x00542049
 8016b8c:	6f4c206f 	svcvs	0x004c206f
 8016b90:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 8016b94:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 8016b98:	206c616e 	rsbcs	r6, ip, lr, ror #2
 8016b9c:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8016ba0:	45207265 	strmi	r7, [r0, #-613]!	; 0xfffffd9b
 8016ba4:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 8016ba8:	74654d00 	strbtvc	r4, [r5], #-3328	; 0xfffff300
 8016bac:	20646f68 	rsbcs	r6, r4, r8, ror #30
 8016bb0:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8016bb4:	6c706d49 	ldclvs	13, cr6, [r0], #-292	; 0xfffffedc
 8016bb8:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8016bbc:	00646574 	rsbeq	r6, r4, r4, ror r5
 8016bc0:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 8016bc4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 8016bc8:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8016bcc:	70707553 	rsbsvc	r7, r0, r3, asr r5
 8016bd0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
 8016bd4:	6e550064 	cdpvs	0, 5, cr0, cr5, cr4, {3}
 8016bd8:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 8016bdc:	7245206e 	subvc	r2, r5, #110	; 0x6e
 8016be0:	00726f72 	rsbseq	r6, r2, r2, ror pc
 8016be4:	3c004b4f 			; <UNDEFINED> instruction: 0x3c004b4f
 8016be8:	434f4421 	movtmi	r4, #62497	; 0xf421
 8016bec:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8016bf0:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8016bf4:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8016bf8:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8016bfc:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 8016c00:	3e646165 	powccsz	f6, f4, f5
 8016c04:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8016c08:	253e656c 	ldrcs	r6, [lr, #-1388]!	; 0xfffffa94
 8016c0c:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8016c10:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8016c14:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 8016c18:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 8016c1c:	0a3e6461 	beq	8fafda8 <__exidx_end+0xf97534>
 8016c20:	646f623c 	strbtvs	r6, [pc], #-572	; 8016c28 <RemoteConfig::s_TXT+0x290>
 8016c24:	683c3e79 	ldmdavs	ip!, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8016c28:	73253e31 			; <UNDEFINED> instruction: 0x73253e31
 8016c2c:	31682f3c 	cmncc	r8, ip, lsr pc
 8016c30:	622f3c3e 	eorvs	r3, pc, #15872	; 0x3e00
 8016c34:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8016c38:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8016c3c:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8016c40:	5448000a 	strbpl	r0, [r8], #-10
 8016c44:	312f5054 	qsubcc	r5, r4, pc	; <UNPREDICTABLE>
 8016c48:	2520312e 	strcs	r3, [r0, #-302]!	; 0xfffffed2
 8016c4c:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8016c50:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
 8016c54:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
 8016c58:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8016c5c:	6f430a0d 	svcvs	0x00430a0d
 8016c60:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 8016c64:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 8016c68:	203a6570 	eorscs	r6, sl, r0, ror r5
 8016c6c:	0a0d7325 	beq	8373908 <__exidx_end+0x35b094>
 8016c70:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8016c74:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8016c78:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8016c7c:	203a6874 	eorscs	r6, sl, r4, ror r8
 8016c80:	0a0d7525 	beq	837411c <__exidx_end+0x35b8a8>
 8016c84:	6e6e6f43 	cdpvs	15, 6, cr6, cr14, cr3, {2}
 8016c88:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8016c8c:	203a6e6f 	eorscs	r6, sl, pc, ror #28
 8016c90:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 8016c94:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
 8016c98:	4447000a 	strbmi	r0, [r7], #-10
 8016c9c:	32463233 	subcc	r3, r6, #805306371	; 0x30000003
 8016ca0:	47523730 	smmlarmi	r2, r0, r7, r3
	...

08016ca5 <contentType>:
 8016ca5:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8016ca9:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 8016cad:	0000006c 	andeq	r0, r0, ip, rrx
	...
 8016cc5:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8016cc9:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 8016ce5:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8016ce9:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 8016ced:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 8016cf1:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 8016d05:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 8016d09:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 8016d0d:	2f6e6f69 	svccs	0x006e6f69
 8016d11:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

08016d25 <RemoteConfigConst::PARAMS_DISABLE>:
 8016d25:	61736964 	cmnvs	r3, r4, ror #18
 8016d29:	00656c62 	rsbeq	r6, r5, r2, ror #24

08016d2d <RemoteConfigConst::PARAMS_FILE_NAME>:
 8016d2d:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 8016d31:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 8016d35:	00747874 	rsbseq	r7, r4, r4, ror r8

08016d39 <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 8016d39:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8016d3d:	5f79616c 	svcpl	0x0079616c
 8016d41:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08016d46 <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 8016d46:	61736964 	cmnvs	r3, r4, ror #18
 8016d4a:	5f656c62 	svcpl	0x00656c62
 8016d4e:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 8016d52:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08016d54 <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 8016d54:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016d58:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8016d5c:	6f6f6265 	svcvs	0x006f6265
 8016d60:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

08016d62 <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 8016d62:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016d66:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 8016802 <s_Output+0x31>
 8016d6a:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8016d6e:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08016d70 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 8016d70:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016d74:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 8016d78:	6f746361 	svcvs	0x00746361
 8016d7c:	7b007972 	blvc	803534c <__exidx_end+0x1cad8>
 8016d80:	73696c22 	cmnvc	r9, #8704	; 0x2200
 8016d84:	7b3a2274 	blvc	8e9f75c <__exidx_end+0xe86ee8>
 8016d88:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 8016d8c:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8016d90:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016d94:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016d98:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 8016d9c:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8016da0:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8016da4:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8016da8:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8016dac:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8016db0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8016db4:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8016db8:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8016dbc:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8016dc0:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8016dc4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8016dc8:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8016dcc:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8016dd0:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 8016dd4:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 8016dd8:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 8016ddc:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8016de0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8016de4:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8016de8:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8016dec:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8016df0:	616f6222 	cmnvs	pc, r2, lsr #4
 8016df4:	3a226472 	bcc	88affc4 <__exidx_end+0x897750>
 8016df8:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8016dfc:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 8016e00:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 8016e04:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 8016e08:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 8016e0c:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8016e10:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8016e14:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 8016e18:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 8016e1c:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 8016e20:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 8016e24:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 8016e28:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8016e2c:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 8016e30:	7b000a7d 	blvc	801982c <__exidx_end+0xfb8>
 8016e34:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 8016e38:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8016e3c:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 8016e40:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8016e44:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8016e48:	7b3a2273 	blvc	8e9f81c <__exidx_end+0xe86fa8>
 8016e4c:	74726122 	ldrbtvc	r6, [r2], #-290	; 0xfffffede
 8016e50:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8016e54:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8016e58:	7241223a 	subvc	r2, r1, #-1610612733	; 0xa0000003
 8016e5c:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 8016e60:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 8016e64:	61726170 	cmnvs	r2, r0, ror r1
 8016e68:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 8016e6c:	3a227478 	bcc	88b4054 <__exidx_end+0x89b7e0>
 8016e70:	584d4422 	stmdapl	sp, {r1, r5, sl, lr}^
 8016e74:	61725420 	cmnvs	r2, r0, lsr #8
 8016e78:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 8016e7c:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 8016e80:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8016e84:	2e79616c 	rpwcsez	f6, f1, #4.0
 8016e88:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8016e8c:	6944223a 	stmdbvs	r4, {r1, r3, r4, r5, r9, sp}^
 8016e90:	616c7073 	smcvs	50947	; 0xc703
 8016e94:	44552079 	ldrbmi	r2, [r5], #-121	; 0xffffff87
 8016e98:	222c2246 	eorcs	r2, ip, #1610612740	; 0x60000004
 8016e9c:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8016ea0:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 8016ea4:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8016ea8:	654e223a 	strbvs	r2, [lr, #-570]	; 0xfffffdc6
 8016eac:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8016eb0:	222c226b 	eorcs	r2, ip, #-1342177274	; 0xb0000006
 8016eb4:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 8016eb8:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 8016ebc:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8016ec0:	6552223a 	ldrbvs	r2, [r2, #-570]	; 0xfffffdc6
 8016ec4:	65746f6d 	ldrbvs	r6, [r4, #-3949]!	; 0xfffff093
 8016ec8:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8016ecc:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 8016ed0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 8016ed4:	7d226e6f 	stcvc	14, cr6, [r2, #-444]!	; 0xfffffe44
 8016ed8:	 	teqcs	ip, sp, ror r0

08016eda <index_html>:
 8016eda:	4f44213c 	svcmi	0x0044213c
 8016ede:	50595443 	subspl	r5, r9, r3, asr #8
 8016ee2:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 8016ee6:	0a3e6c6d 	beq	8fb20a2 <__exidx_end+0xf9982e>
 8016eea:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 8016eee:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8016ef2:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 8016ef6:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 8016efa:	6b6e696c 	blvs	9bb14b2 <__exidx_end+0x1b98c3e>
 8016efe:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 8016f02:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 8016f06:	73656c79 	cmnvc	r5, #30976	; 0x7900
 8016f0a:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8016f0e:	72682022 	rsbvc	r2, r8, #34	; 0x22
 8016f12:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 8016f16:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8016f1a:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8016f1e:	20227373 	eorcs	r7, r2, r3, ror r3
 8016f22:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 8016f26:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8016f2a:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 8016f2e:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 8016f32:	0a3e656c 	beq	8fb04ea <__exidx_end+0xf97c76>
 8016f36:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 8016f3a:	0a3e6461 	beq	8fb00c6 <__exidx_end+0xf97852>
 8016f3e:	646f623c 	strbtvs	r6, [pc], #-572	; 8016f46 <index_html+0x6c>
 8016f42:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8016f46:	6165683c 	cmnvs	r5, ip, lsr r8
 8016f4a:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 8016f4e:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 8016f52:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 8016f56:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 8016f5a:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 8016f5e:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8016f62:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8016f66:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8016f6a:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8016f6e:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 8016f72:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 8016f76:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 8016f7a:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 8016f7e:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8016f82:	6f746365 	svcvs	0x00746365
 8016f86:	20227972 	eorcs	r7, r2, r2, ror r9
 8016f8a:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8016f8e:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 8016f92:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 8016f96:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8016f9a:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 8016f9e:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 8016fa2:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 8016fa6:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 8016faa:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 8016fae:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 8016fb2:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 8016fb6:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 8016fba:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8016fbe:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8016fc2:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 8016fc6:	20227478 	eorcs	r7, r2, r8, ror r4
 8016fca:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8016fce:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 8016fd2:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 8016fd6:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 8016fda:	0a3e656c 	beq	8fb0592 <__exidx_end+0xf97d1e>
 8016fde:	6f663c09 	svcvs	0x00663c09
 8016fe2:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 8016fe6:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 8016fea:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8016fee:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 8016ff2:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8016ff6:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 8016ffa:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8016ffe:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 8017002:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 8017006:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 801700a:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 801700e:	20747069 	rsbscs	r7, r4, r9, rrx
 8017012:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 8017016:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 801701a:	6a2e7865 	bvs	8bb51b6 <__exidx_end+0xb9c942>
 801701e:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 8017022:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 8017026:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 801702a:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 801702e:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8017032:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8017036:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 801703a:	 	strbtvs	r6, [pc], #-522	; 8017042 <styles_css+0x7>

0801703b <styles_css>:
 801703b:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801703f:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8017043:	63616220 	cmnvs	r1, #32, 4
 8017047:	6f72676b 	svcvs	0x0072676b
 801704b:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 801704f:	6f6c6f63 	svcvs	0x006c6f63
 8017053:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 8017057:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 801705b:	30322c30 	eorscc	r2, r2, r0, lsr ip
 801705f:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 8017063:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8017067:	6f6c6f63 	svcvs	0x006c6f63
 801706b:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 801706f:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8017073:	202c3535 	eorcs	r3, ip, r5, lsr r5
 8017077:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 801707b:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 801707f:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8017083:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 8017087:	200a7b20 	andcs	r7, sl, r0, lsr #22
 801708b:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 801708f:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8017093:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8017097:	0a3b7865 	beq	8ef5233 <__exidx_end+0xedc9bf>
 801709b:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 801709f:	0a7b2069 	beq	9edf24b <__exidx_end+0x1ec69d7>
 80170a3:	696c2020 	stmdbvs	ip!, {r5, sp}^
 80170a7:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 80170ab:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 80170af:	6f6e203a 	svcvs	0x006e203a
 80170b3:	0a3b656e 	beq	8ef0673 <__exidx_end+0xed7dff>
 80170b7:	616d2020 	cmnvs	sp, r0, lsr #32
 80170bb:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 80170bf:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 80170c3:	70352078 	eorsvc	r2, r5, r8, ror r0
 80170c7:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 80170cb:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 80170cf:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 80170d3:	200a7b20 	andcs	r7, sl, r0, lsr #22
 80170d7:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 80170db:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80170df:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 80170e3:	0a3b7865 	beq	8ef527f <__exidx_end+0xedca0b>
 80170e7:	6f622020 	svcvs	0x00622020
 80170eb:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 80170ef:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 80170f3:	3a737569 	bcc	9cf469f <__exidx_end+0x1cdbe2b>
 80170f7:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 80170fb:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 80170ff:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8017103:	203a7265 	eorscs	r7, sl, r5, ror #4
 8017107:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801710b:	72672064 	rsbvc	r2, r7, #100	; 0x64
 801710f:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8017113:	0a3b7870 	beq	8ef52db <__exidx_end+0xedca67>
 8017117:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 801711b:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 801711f:	0a7b2072 	beq	9edf2ef <__exidx_end+0x1ec6a7b>
 8017123:	69642020 	stmdbvs	r4!, {r5, sp}^
 8017127:	616c7073 	smcvs	50947	; 0xc703
 801712b:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 801712f:	3b78656c 	blcc	9e306e7 <__exidx_end+0x1e17e73>
 8017133:	6a20200a 	bvs	881f163 <__exidx_end+0x8068ef>
 8017137:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 801713b:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 801713f:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8017143:	203a746e 	eorscs	r7, sl, lr, ror #8
 8017147:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 801714b:	0a3b7265 	beq	8ef3ae7 <__exidx_end+0xedb273>
 801714f:	6f622020 	svcvs	0x00622020
 8017153:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 8017157:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 801715b:	3a737569 	bcc	9cf4707 <__exidx_end+0x1cdbe93>
 801715f:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8017163:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8017167:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 801716b:	203a7265 	eorscs	r7, sl, r5, ror #4
 801716f:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017173:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8017177:	31207965 			; <UNDEFINED> instruction: 0x31207965
 801717b:	0a3b7870 	beq	8ef5343 <__exidx_end+0xedcacf>
 801717f:	00000a7d 	andeq	r0, r0, sp, ror sl
	...

08017184 <HttpContent>:
 8017184:	08016a94 	stmdaeq	r1, {r2, r4, r7, r9, fp, sp, lr}
 8017188:	0801703b 	stmdaeq	r1, {r0, r1, r3, r4, r5, ip, sp, lr}
 801718c:	08016aa0 	stmdaeq	r1, {r5, r7, r9, fp, sp, lr}
 8017190:	0801719c 	stmdaeq	r1, {r2, r3, r4, r7, r8, ip, sp, lr}
 8017194:	08016a88 	stmdaeq	r1, {r3, r7, r9, fp, sp, lr}
 8017198:	08016eda 	stmdaeq	r1, {r1, r3, r4, r6, r7, r9, sl, fp, sp, lr}

0801719c <index_js>:
 801719c:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 80171a0:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 80171a4:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80171a8:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 80171ac:	534a7465 	movtpl	r7, #42085	; 0xa465
 80171b0:	6a284e4f 	bvs	8a2aaf4 <__exidx_end+0xa12280>
 80171b4:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80171b8:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 80171bc:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 80171c0:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 80171c4:	6a2f273d 	bvs	8be0ec0 <__exidx_end+0xbc864c>
 80171c8:	2f6e6f73 	svccs	0x006e6f73
 80171cc:	202b2027 	eorcs	r2, fp, r7, lsr #32
 80171d0:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 80171d4:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 80171d8:	20797274 	rsbscs	r7, r9, r4, ror r2
 80171dc:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 80171e0:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 80171e4:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 80171e8:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 80171ec:	20746961 	rsbscs	r6, r4, r1, ror #18
 80171f0:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 80171f4:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 80171f8:	0a3b296c 	beq	8ee17b0 <__exidx_end+0xec8f3c>
 80171fc:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8017200:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 8017204:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 8017208:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 801720c:	73657220 	cmnvc	r5, #32, 4
 8017210:	6f736a2e 	svcvs	0x00736a2e
 8017214:	3b29286e 	blcc	8a613d4 <__exidx_end+0xa48b60>
 8017218:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 801721c:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 8017220:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 8017224:	6f727265 	svcvs	0x00727265
 8017228:	7b202972 	blvc	88217f8 <__exidx_end+0x808f84>
 801722c:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8017230:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 8017234:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 8017238:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 801723c:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 8017240:	3b29726f 	blcc	8a73c04 <__exidx_end+0xa5b390>
 8017244:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 8017248:	0a0a7d0a 	beq	82b6678 <__exidx_end+0x29de04>
 801724c:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8017250:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8017254:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8017258:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 801725c:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8017260:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8017264:	20292874 	eorcs	r2, r9, r4, ror r8
 8017268:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 801726c:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8017270:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017274:	6177613d 	cmnvs	r7, sp, lsr r1
 8017278:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801727c:	534a7465 	movtpl	r7, #42085	; 0xa465
 8017280:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8017284:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017288:	0a3b2927 	beq	8ee172c <__exidx_end+0xec8eb8>
 801728c:	6f640909 	svcvs	0x00640909
 8017290:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8017294:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8017298:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 801729c:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 80172a0:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 80172a4:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 80172a8:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 80172ac:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 80172b0:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 80172b4:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 80172b8:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 80172bc:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 80172c0:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 80172c4:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 80172c8:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 80172cc:	2b656d61 	blcs	9972858 <__exidx_end+0x1959fe4>
 80172d0:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017250 <index_js+0xb4>
 80172d4:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 80172d8:	2b223e69 	blcs	88a6c84 <__exidx_end+0x88e410>
 80172dc:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80172e0:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 80172e4:	6f6e2e74 	svcvs	0x006e2e74
 80172e8:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 80172ec:	2b657079 	blcs	99734d8 <__exidx_end+0x195ac64>
 80172f0:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017270 <index_js+0xd4>
 80172f4:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 80172f8:	2b223e69 	blcs	88a6ca4 <__exidx_end+0x88e430>
 80172fc:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017300:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8017304:	6f6e2e74 	svcvs	0x006e2e74
 8017308:	702e6564 	eorvc	r6, lr, r4, ror #10
 801730c:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 8017310:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8017314:	2f3c222b 	svccs	0x003c222b
 8017318:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 801731c:	0a7d0a3b 	beq	9f59c10 <__exidx_end+0x1f4139c>
 8017320:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 8017324:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 8017328:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 801732c:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 8017330:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 8017334:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017338:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801733c:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 8017340:	0a7b2029 	beq	9edf3ec <__exidx_end+0x1ec6b78>
 8017344:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8017348:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 801734c:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8017350:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017354:	6177613d 	cmnvs	r7, sp, lsr r1
 8017358:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801735c:	534a7465 	movtpl	r7, #42085	; 0xa465
 8017360:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8017364:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017368:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 801736c:	3b292779 	blcc	8a61158 <__exidx_end+0xa488e4>
 8017370:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8017374:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8017378:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801737c:	0a22223d 	beq	889fc78 <__exidx_end+0x887404>
 8017380:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8017384:	66207465 	strtvs	r7, [r0], -r5, ror #8
 8017388:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 801738c:	73656d61 	cmnvc	r5, #6208	; 0x1840
 8017390:	6a624f3d 	bvs	98ab08c <__exidx_end+0x1892818>
 8017394:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 8017398:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 801739c:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 80173a0:	6f746365 	svcvs	0x00746365
 80173a4:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 80173a8:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 80173ac:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 80173b0:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 80173b4:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 80173b8:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 80173bc:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 80173c0:	6145726f 	cmpvs	r5, pc, ror #4
 80173c4:	66286863 	strtvs	r6, [r8], -r3, ror #16
 80173c8:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 80173cc:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 80173d0:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 80173d4:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 80173d8:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 80173dc:	20726176 	rsbscs	r6, r2, r6, ror r1
 80173e0:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 80173e4:	203d2065 	eorscs	r2, sp, r5, rrx
 80173e8:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 80173ec:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 80173f0:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 80173f4:	73656c69 	cmnvc	r5, #26880	; 0x6900
 80173f8:	6b5b5d22 	blvs	96ee888 <__exidx_end+0x16d6014>
 80173fc:	3b5d7965 	blcc	9775998 <__exidx_end+0x175d124>
 8017400:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8017404:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 8017408:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 801740c:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 8017410:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8017414:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 8017418:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 801741c:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 8017420:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 8017424:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 8017428:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 801742c:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 8017430:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8017434:	0a3b223e 	beq	8edfd34 <__exidx_end+0xec74c0>
 8017438:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 801743c:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8017440:	6f640909 	svcvs	0x00640909
 8017444:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8017448:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 801744c:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8017450:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8017454:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 8017458:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 801745c:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8017460:	6f746365 	svcvs	0x00746365
 8017464:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 8017468:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 801746c:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 8017470:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 8017474:	3b6c6d74 	blcc	9b32a4c <__exidx_end+0x1b1a1d8>
 8017478:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 801747c:	5f746567 	svcpl	0x00746567
 8017480:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 8017484:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8017488:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 801748c:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 8017490:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8017494:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 8017498:	20636e79 	rsbcs	r6, r3, r9, ror lr
 801749c:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 80174a0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80174a4:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 80174a8:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 80174ac:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80174b0:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 80174b4:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 80174b8:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 80174bc:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 80174c0:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 80174c4:	6177613d 	cmnvs	r7, sp, lsr r1
 80174c8:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 80174cc:	534a7465 	movtpl	r7, #42085	; 0xa465
 80174d0:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 80174d4:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80174d8:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 80174dc:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 80174e0:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 80174e4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 80174e8:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 80174ec:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 80174f0:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 80174f4:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 80174f8:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 80174fc:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 8017500:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8017504:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 8017508:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 801750c:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 8017510:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 8017514:	2b22563e 	blcs	88ace14 <__exidx_end+0x8945a0>
 8017518:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801751c:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 8017520:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017524:	2b6e6f69 	blcs	9bb32d0 <__exidx_end+0x1b9aa5c>
 8017528:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80174a8 <index_js+0x30c>
 801752c:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8017530:	2b223e69 	blcs	88a6edc <__exidx_end+0x88e668>
 8017534:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017538:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 801753c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 8017540:	61642e64 	cmnvs	r4, r4, ror #28
 8017544:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 8017548:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 801754c:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 8017550:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 8017554:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017558:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 801755c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 8017560:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 8017564:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 8017568:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 801756c:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 8017570:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 8017574:	6f697372 	svcvs	0x00697372
 8017578:	6f622e6e 	svcvs	0x00622e6e
 801757c:	2b647261 	blcs	9933f08 <__exidx_end+0x191b694>
 8017580:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017500 <index_js+0x364>
 8017584:	3b223e69 	blcc	88a6f30 <__exidx_end+0x88e6bc>
 8017588:	0a0a7d0a 	beq	82b69b8 <__exidx_end+0x29e144>
 801758c:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8017590:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8017594:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8017598:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 801759c:	745f7465 	ldrbvc	r7, [pc], #-1125	; 80175a4 <index_js+0x408>
 80175a0:	73287478 			; <UNDEFINED> instruction: 0x73287478
 80175a4:	20296c65 	eorcs	r6, r9, r5, ror #24
 80175a8:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 80175ac:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 80175b0:	613d7478 	teqvs	sp, r8, ror r4
 80175b4:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 80175b8:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 80175bc:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 80175c0:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 80175c4:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 80175c8:	2074656c 	rsbscs	r6, r4, ip, ror #10
 80175cc:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80175d0:	3b22223d 	blcc	889fecc <__exidx_end+0x887658>
 80175d4:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 80175d8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 80175dc:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 80175e0:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 80175e4:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 80175e8:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 80175ec:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 80175f0:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 80175f4:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 80175f8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80175fc:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 8017600:	0a7b2029 	beq	9edf6ac <__exidx_end+0x1ec6e38>
 8017604:	61760909 	cmnvs	r6, r9, lsl #18
 8017608:	61762072 	cmnvs	r6, r2, ror r0
 801760c:	2065756c 	rsbcs	r7, r5, ip, ror #10
 8017610:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 8017614:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 8017618:	6b5b5d6c 	blvs	96eebd0 <__exidx_end+0x16d635c>
 801761c:	3b5d7965 	blcc	9775bb8 <__exidx_end+0x175d344>
 8017620:	2009090a 	andcs	r0, r9, sl, lsl #18
 8017624:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8017628:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 801762c:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 8017630:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8017634:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 8017638:	2f3c222b 	svccs	0x003c222b
 801763c:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 8017640:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8017644:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 8017648:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 801764c:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 8017650:	742f3c3e 	strtvc	r3, [pc], #-3134	; 8017658 <index_js+0x4bc>
 8017654:	3b223e72 	blcc	88a7024 <__exidx_end+0x88e7b0>
 8017658:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 801765c:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 8017660:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 8017664:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 8017668:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 801766c:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 8017670:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 8017674:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 8017678:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 801767c:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8017680:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8017684:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8017688:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 801768c:	0a3b6c6d 	beq	8ef2848 <__exidx_end+0xed9fd4>
 8017690:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 8017694:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8017698:	73694c72 	cmnvc	r9, #29184	; 0x7200
 801769c:	3b292874 	blcc	8a61874 <__exidx_end+0xa49000>
 80176a0:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 80176a4:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 80176a8:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 80176ac:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80176b0:	0a3b2928 	beq	8ee1b58 <__exidx_end+0xec92e4>
 80176b4:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 80176b8:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 80176bc:	6f697372 	svcvs	0x00697372
 80176c0:	3b29286e 	blcc	8a61880 <__exidx_end+0xa4900c>
 80176c4:	5520200a 	strpl	r2, [r0, #-10]!
 80176c8:	6576696e 	ldrbvs	r6, [r6, #-2414]!	; 0xfffff692
 80176cc:	73657372 	cmnvc	r5, #-939524095	; 0xc8000001
 80176d0:	65726120 	ldrbvs	r6, [r2, #-288]!	; 0xfffffee0
 80176d4:	70616d20 	rsbvc	r6, r1, r0, lsr #26
 80176d8:	64657070 	strbtvs	r7, [r5], #-112	; 0xffffff90
 80176dc:	0a312b20 	beq	8c62364 <__exidx_end+0xc49af0>
 80176e0:	00000000 	andeq	r0, r0, r0

080176e4 <vtable for ArtNet4Node>:
	...
 80176ec:	08009f35 	stmdaeq	r0, {r0, r2, r4, r5, r8, r9, sl, fp, ip, pc}
 80176f0:	08009f55 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, sl, fp, ip, pc}
 80176f4:	08009ebd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, sl, fp, ip, pc}
 80176f8:	08009f9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, sl, fp, ip, pc}
 80176fc:	08009f67 	stmdaeq	r0, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, pc}
 8017700:	08009ead 	stmdaeq	r0, {r0, r2, r3, r5, r7, r9, sl, fp, ip, pc}
 8017704:	08009f1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, sl, fp, ip, pc}

08017708 <ArtNetMsgConst::START>:
 8017708:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 801770c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8017710:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 8017714:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
	...

08017719 <ArtNetMsgConst::PARAMS>:
 8017719:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801771d:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8017721:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8017725:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8017729:	0074654e 	rsbseq	r6, r4, lr, asr #10

0801772d <ArtNetMsgConst::RDM_RUN>:
 801772d:	6e6e7552 	mcrvs	5, 3, r7, cr14, cr2, {2}
 8017731:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8017735:	204d4452 	subcs	r4, sp, r2, asr r4
 8017739:	63736944 	cmnvs	r3, #68, 18	; 0x110000
 801773d:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
 8017741:	 	subvc	r0, r1, #121	; 0x79

08017743 <ArtNetMsgConst::STARTED>:
 8017743:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8017747:	2074654e 	rsbscs	r6, r4, lr, asr #10
 801774b:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801774f:	00646574 	rsbeq	r6, r4, r4, ror r5
 8017753:	25207325 	strcs	r7, [r0, #-805]!	; 0xfffffcdb
 8017757:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
 801775b:	00732520 	rsbseq	r2, r3, r0, lsr #10
 801775f:	70747468 	rsbsvc	r7, r4, r8, ror #8
 8017763:	2f2f3a73 	svccs	0x002f3a73
 8017767:	32336467 	eorscc	r6, r3, #1728053248	; 0x67000000
 801776b:	786d642d 	stmdavc	sp!, {r0, r2, r3, r5, sl, sp, lr}^
 801776f:	67726f2e 	ldrbvs	r6, [r2, -lr, lsr #30]!
 8017773:	626d4500 	rsbvs	r4, sp, #0, 10
 8017777:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
 801777b:	 	subvc	r0, r1, #100	; 0x64

0801777d <artnet::NODE_ID>:
 801777d:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8017781:	0074654e 	rsbseq	r6, r4, lr, asr #10

08017785 <defaults::SHORT_NAME>:
 8017785:	20567641 	subscs	r7, r6, r1, asr #12
 8017789:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801778d:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8017791:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
 8017795:	34302500 	ldrtcc	r2, [r0], #-1280	; 0xfffffb00
 8017799:	255b2078 	ldrbcs	r2, [fp, #-120]	; 0xffffff88
 801779d:	5d643430 	cfstrdpl	mvd3, [r4, #-192]!	; 0xffffff40
 80177a1:	20732520 	rsbscs	r2, r3, r0, lsr #10
 80177a5:	00567641 	subseq	r7, r6, r1, asr #12

080177a9 <artnet::NODE_ID>:
 80177a9:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80177ad:	0074654e 	rsbseq	r6, r4, lr, asr #10
 80177b1:	00505448 	subseq	r5, r0, r8, asr #8
 80177b5:	0050544c 	subseq	r5, r0, ip, asr #8
 80177b9:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80177bd:	0074654e 	rsbseq	r6, r4, lr, asr #10
 80177c1:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 80177c5:	646f4e00 	strbtvs	r4, [pc], #-3584	; 80177cd <artnet::NODE_ID+0x24>
 80177c9:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
 80177cd:	75255b20 	strvc	r5, [r5, #-2848]!	; 0xfffff4e0
 80177d1:	20000a5d 	andcs	r0, r0, sp, asr sl
 80177d5:	6d726946 			; <UNDEFINED> instruction: 0x6d726946
 80177d9:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0xfffffe89
 80177dd:	3a202020 	bcc	881f865 <__exidx_end+0x806ff1>
 80177e1:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 80177e5:	000a6425 	andeq	r6, sl, r5, lsr #8
 80177e9:	6f685320 	svcvs	0x00685320
 80177ed:	6e207472 	mcrvs	4, 1, r7, cr0, cr2, {3}
 80177f1:	20656d61 	rsbcs	r6, r5, r1, ror #26
 80177f5:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 80177f9:	4c20000a 	stcmi	0, cr0, [r0], #-40	; 0xffffffd8
 80177fd:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 8017801:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8017805:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8017809:	000a7325 	andeq	r7, sl, r5, lsr #6
 801780d:	74754f20 	ldrbtvc	r4, [r5], #-3872	; 0xfffff0e0
 8017811:	0a747570 	beq	9d34dd9 <__exidx_end+0x1d1c565>
 8017815:	50202000 	eorpl	r2, r0, r0
 8017819:	2074726f 	rsbscs	r7, r4, pc, ror #4
 801781d:	20643225 	rsbcs	r3, r4, r5, lsr #4
 8017821:	20753425 	rsbscs	r3, r5, r5, lsr #8
 8017825:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 8017829:	257b2000 	ldrbcs	r2, [fp, #-0]!
 801782d:	000a7d73 	andeq	r7, sl, r3, ror sp
 8017831:	706e4920 	rsbvc	r4, lr, r0, lsr #18
 8017835:	000a7475 	andeq	r7, sl, r5, ror r4
 8017839:	6f502020 	svcvs	0x00502020
 801783d:	25207472 	strcs	r7, [r0, #-1138]!	; 0xfffffb8e
 8017841:	25206432 	strcs	r6, [r0, #-1074]!	; 0xfffffbce
 8017845:	2d207534 	cfstr32cs	mvfx7, [r0, #-208]!	; 0xffffff30
 8017849:	6425203e 	strtvs	r2, [r5], #-62	; 0xffffffc2
 801784d:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017851:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017855:	68000a64 	stmdavs	r0, {r2, r5, r6, r9, fp}
 8017859:	00646c6f 	rsbeq	r6, r4, pc, ror #24
 801785d:	0066666f 	rsbeq	r6, r6, pc, ror #12
 8017861:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8017865:	6b636162 	blvs	98efdf5 <__exidx_end+0x18d7581>
 8017869:	63617300 	cmnvs	r1, #0, 6
 801786d:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
 8017871:	00747570 	rsbseq	r7, r4, r0, ror r5
 8017875:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 8017879:	64007475 	strvs	r7, [r0], #-1141	; 0xfffffb8b
 801787d:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
 8017881:	6c00656c 	cfstr32vs	mvfx6, [r0], {108}	; 0x6c
 8017885:	68007074 	stmdavs	r0, {r2, r4, r5, r6, ip, sp, lr}
 8017889:	61007074 	tstvs	r0, r4, ror r0
 801788d:	656e7472 	strbvs	r7, [lr, #-1138]!	; 0xfffffb8e
 8017891:	72410074 	subvc	r0, r1, #116	; 0x74
 8017895:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 8017899:	00342074 	eorseq	r2, r4, r4, ror r0
 801789d:	 	stmdapl	r0, {}	; <UNPREDICTABLE>

080178a0 <CSWTCH.93>:
 80178a0:	08017858 	stmdaeq	r1, {r3, r4, r6, fp, ip, sp, lr}
 80178a4:	0801785d 	stmdaeq	r1, {r0, r2, r3, r4, r6, fp, ip, sp, lr}
 80178a8:	08016aba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, fp, sp, lr}
 80178ac:	08017861 	stmdaeq	r1, {r0, r5, r6, fp, ip, sp, lr}

080178b0 <ArtNetParamsConst::ENABLE_RDM>:
 80178b0:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80178b4:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 80178b8:	 	stcvs	13, cr6, [r0, #-400]	; 0xfffffe70

080178bb <ArtNetParamsConst::MAP_UNIVERSE0>:
 80178bb:	5f70616d 	svcpl	0x0070616d
 80178bf:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 80178c3:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 80178c7:	 	rsbsvc	r0, r0, #48	; 0x30

080178c9 <ArtNetParamsConst::PROTOCOL_PORT>:
 80178c9:	746f7270 	strbtvc	r7, [pc], #-624	; 80178d1 <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 80178cd:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8017718 <ArtNetMsgConst::START+0x10>
 80178d1:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80178d5:	00615f74 	rsbeq	r5, r1, r4, ror pc
 80178d9:	746f7270 	strbtvc	r7, [pc], #-624	; 80178e1 <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 80178dd:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8017728 <ArtNetMsgConst::PARAMS+0xf>
 80178e1:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80178e5:	00625f74 	rsbeq	r5, r2, r4, ror pc
 80178e9:	746f7270 	strbtvc	r7, [pc], #-624	; 80178f1 <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 80178ed:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8017738 <ArtNetMsgConst::RDM_RUN+0xb>
 80178f1:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80178f5:	00635f74 	rsbeq	r5, r3, r4, ror pc
 80178f9:	746f7270 	strbtvc	r7, [pc], #-624	; 8017901 <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 80178fd:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8017748 <ArtNetMsgConst::STARTED+0x5>
 8017901:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017905:	00645f74 	rsbeq	r5, r4, r4, ror pc

08017909 <ArtNetParamsConst::NODE_LONG_NAME>:
 8017909:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 801790d:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	; 0xfffffe84
 8017911:	 	ldmdavs	r3!, {r0, r2, r5, r6}^

08017913 <ArtNetParamsConst::NODE_SHORT_NAME>:
 8017913:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 8017917:	616e5f74 	smcvs	58868	; 0xe5f4
 801791b:	 	andvc	r6, r0, #457179136	; 0x1b400000

0801791e <ArtNetParamsConst::RDM_ENABLE_PORT>:
 801791e:	5f6d6472 	svcpl	0x006d6472
 8017922:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8017926:	705f656c 	subsvc	r6, pc, ip, ror #10
 801792a:	5f74726f 	svcpl	0x0074726f
 801792e:	64720061 	ldrbtvs	r0, [r2], #-97	; 0xffffff9f
 8017932:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
 8017936:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801793a:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801793e:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8017942:	5f6d6472 	svcpl	0x006d6472
 8017946:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801794a:	705f656c 	subsvc	r6, pc, ip, ror #10
 801794e:	5f74726f 	svcpl	0x0074726f
 8017952:	64720063 	ldrbtvs	r0, [r2], #-99	; 0xffffff9d
 8017956:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
 801795a:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801795e:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017962:	00645f74 	rsbeq	r5, r4, r4, ror pc

08017966 <ArtNetParamsConst::DESTINATION_IP_PORT>:
 8017966:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801796a:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801796e:	5f6e6f69 	svcpl	0x006e6f69
 8017972:	705f7069 	subsvc	r7, pc, r9, rrx
 8017976:	5f74726f 	svcpl	0x0074726f
 801797a:	00000061 	andeq	r0, r0, r1, rrx
 801797e:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8017982:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8017986:	5f6e6f69 	svcpl	0x006e6f69
 801798a:	705f7069 	subsvc	r7, pc, r9, rrx
 801798e:	5f74726f 	svcpl	0x0074726f
 8017992:	00000062 	andeq	r0, r0, r2, rrx
 8017996:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801799a:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801799e:	5f6e6f69 	svcpl	0x006e6f69
 80179a2:	705f7069 	subsvc	r7, pc, r9, rrx
 80179a6:	5f74726f 	svcpl	0x0074726f
 80179aa:	00000063 	andeq	r0, r0, r3, rrx
 80179ae:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 80179b2:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 80179b6:	5f6e6f69 	svcpl	0x006e6f69
 80179ba:	705f7069 	subsvc	r7, pc, r9, rrx
 80179be:	5f74726f 	svcpl	0x0074726f
 80179c2:	00000064 	andeq	r0, r0, r4, rrx

080179c6 <ArtNetParamsConst::NET>:
 80179c6:	0074656e 	rsbseq	r6, r4, lr, ror #10

080179ca <ArtNetParamsConst::SUBNET>:
 80179ca:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
 80179ce:	 	tstvs	r0, r5, ror #8

080179d1 <ArtNetParamsConst::FILE_NAME>:
 80179d1:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 80179d5:	742e7465 	strtvc	r7, [lr], #-1125	; 0xfffffb9b
 80179d9:	 			; <UNDEFINED> instruction: 0xff007478

080179dc <ArtNetConst::OEM_ID>:
 80179dc:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

080179de <ArtNetConst::ESTA_ID>:
 80179de:	 	smlsdcc	r1, r0, r0, r0

080179e0 <ArtNetConst::VERSION>:
 80179e0:	33323701 	teqcc	r2, #262144	; 0x40000
 80179e4:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 80179e8:	2e302e35 	mrccs	14, 1, r2, cr0, cr5, {1}
 80179ec:	2e250030 	mcrcs	0, 1, r0, cr5, cr0, {1}
 80179f0:	20733834 	rsbscs	r3, r3, r4, lsr r8
 80179f4:	30007325 	andcc	r7, r0, r5, lsr #6
 80179f8:	6f4e202e 	svcvs	0x004e202e
 80179fc:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 8017a00:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 8017a04:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 8017a08:	202c6465 	eorcs	r6, ip, r5, ror #8
 8017a0c:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 8017a10:	6f687320 	svcvs	0x00687320
 8017a14:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 8017a18:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 8017a1c:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 8017a20:	000a216e 	andeq	r2, sl, lr, ror #2
 8017a24:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 8017a28:	000a6567 	andeq	r6, sl, r7, ror #10
 8017a2c:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 8017a30:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 8017a34:	203a2065 	eorscs	r2, sl, r5, rrx
 8017a38:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017a3c:	20000a64 	andcs	r0, r0, r4, ror #20
 8017a40:	20444943 	subcs	r4, r4, r3, asr #18
 8017a44:	20202020 	eorcs	r2, r0, r0, lsr #32
 8017a48:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8017a4c:	20000a73 	andcs	r0, r0, r3, ror sl
 8017a50:	726f5020 	rsbvc	r5, pc, #32
 8017a54:	32252074 	eorcc	r2, r5, #116	; 0x74
 8017a58:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 8017a5c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8017a60:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 8017a64:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 8017a68:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 8017a6c:	2020000a 	eorcs	r0, r0, sl
 8017a70:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 8017a74:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 8017a78:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 8017a7c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017a80:	2d252065 	stccs	0, cr2, [r5, #-404]!	; 0xfffffe6c
 8017a84:	5b206433 	blpl	8830b58 <__exidx_end+0x8182e4>
 8017a88:	0a5d6425 	beq	9770b24 <__exidx_end+0x17582b0>
 8017a8c:	79532000 	ldmdbvc	r3, {sp}^
 8017a90:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
 8017a94:	7a696e6f 	bvc	9a73458 <__exidx_end+0x1a5abe4>
 8017a98:	73692065 	cmnvc	r9, #101	; 0x65
 8017a9c:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8017aa0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8017aa4:	44000a64 	strmi	r0, [r0], #-2660	; 0xfffff59c
 8017aa8:	4f20584d 	svcmi	0x0020584d
 8017aac:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 8017ab0:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
 8017ab4:	6e492058 	mcrvs	0, 2, r2, cr9, cr8, {2}
 8017ab8:	00747570 	rsbseq	r7, r4, r0, ror r5

08017abc <CSWTCH.56>:
 8017abc:	08017858 	stmdaeq	r1, {r3, r4, r6, fp, ip, sp, lr}
 8017ac0:	0801785d 	stmdaeq	r1, {r0, r2, r3, r4, r6, fp, ip, sp, lr}
 8017ac4:	08016aba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, fp, sp, lr}
 8017ac8:	08017861 	stmdaeq	r1, {r0, r5, r6, fp, ip, sp, lr}

08017acc <E131ParamsConst::PRIORITY>:
 8017acc:	6f697270 	svcvs	0x00697270
 8017ad0:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8017ad4:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017ad8:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8017adc:	72700000 	rsbsvc	r0, r0, #0
 8017ae0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017ae4:	705f7974 	subsvc	r7, pc, r4, ror r9	; <UNPREDICTABLE>
 8017ae8:	5f74726f 	svcpl	0x0074726f
 8017aec:	00000062 	andeq	r0, r0, r2, rrx

08017af0 <E131ParamsConst::FILE_NAME>:
 8017af0:	31333165 	teqcc	r3, r5, ror #2
 8017af4:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
	...

08017af9 <E117Const::ACN_PACKET_IDENTIFIER>:
 8017af9:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 8017afd:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 8017b01:	00000037 	andeq	r0, r0, r7, lsr r0

08017b05 <E131BridgeConst::VERSION>:
 8017b05:	 	andeq	r1, r0, r1, lsl #18

08017b08 <vtable for ArtNetRdm>:
	...

08017b28 <UID_ALL>:
 8017b28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8017b2c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

08017b30 <vtable for ArtNetRdmController>:
	...
 8017b38:	0800da81 	stmdaeq	r0, {r0, r7, r9, fp, ip, lr, pc}
 8017b3c:	0800dacd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, fp, ip, lr, pc}
 8017b40:	0800da71 	stmdaeq	r0, {r0, r4, r5, r6, r9, fp, ip, lr, pc}
 8017b44:	0800da39 	stmdaeq	r0, {r0, r3, r4, r5, r9, fp, ip, lr, pc}
 8017b48:	0800da49 	stmdaeq	r0, {r0, r3, r6, r9, fp, ip, lr, pc}
 8017b4c:	0800dae1 	stmdaeq	r0, {r0, r5, r6, r7, r9, fp, ip, lr, pc}

08017b50 <UID_ALL>:
 8017b50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8017b54:	4452ffff 	ldrbmi	pc, [r2], #-4095	; 0xfffff001	; <UNPREDICTABLE>
 8017b58:	6544204d 	strbvs	r2, [r4, #-77]	; 0xffffffb3
 8017b5c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 8017b60:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8017b64:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 8017b68:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 8017b6c:	000a6e6f 	andeq	r6, sl, pc, ror #28
 8017b70:	6e614d20 	cdpvs	13, 6, cr4, cr1, cr0, {1}
 8017b74:	63616675 	cmnvs	r1, #122683392	; 0x7500000
 8017b78:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 8017b7c:	614e2072 	hvcvs	57858	; 0xe202
 8017b80:	3a20656d 	bcc	883113c <__exidx_end+0x8188c8>
 8017b84:	2a2e2520 	bcs	8ba100c <__exidx_end+0xb88798>
 8017b88:	20000a73 	andcs	r0, r0, r3, ror sl
 8017b8c:	756e614d 	strbvc	r6, [lr, #-333]!	; 0xfffffeb3
 8017b90:	74636166 	strbtvc	r6, [r3], #-358	; 0xfffffe9a
 8017b94:	72657275 	rsbvc	r7, r5, #1342177287	; 0x50000007
 8017b98:	20444920 	subcs	r4, r4, r0, lsr #18
 8017b9c:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8017ba0:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8017ba4:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8017ba8:	5320000a 			; <UNDEFINED> instruction: 0x5320000a
 8017bac:	61697265 	cmnvs	r9, r5, ror #4
 8017bb0:	754e206c 	strbvc	r2, [lr, #-108]	; 0xffffff94
 8017bb4:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 8017bb8:	20202020 	eorcs	r2, r0, r0, lsr #32
 8017bbc:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8017bc0:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8017bc4:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8017bc8:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8017bcc:	0a58322e 	beq	962448c <__exidx_end+0x160bc18>
 8017bd0:	6f522000 	svcvs	0x00522000
 8017bd4:	6c20746f 	cfstrsvs	mvf7, [r0], #-444	; 0xfffffe44
 8017bd8:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
 8017bdc:	20202020 	eorcs	r2, r0, r0, lsr #32
 8017be0:	20202020 	eorcs	r2, r0, r0, lsr #32
 8017be4:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8017be8:	000a732a 	andeq	r7, sl, sl, lsr #6
 8017bec:	6f725020 	svcvs	0x00725020
 8017bf0:	74637564 	strbtvc	r7, [r3], #-1380	; 0xfffffa9c
 8017bf4:	74614320 	strbtvc	r4, [r1], #-800	; 0xfffffce0
 8017bf8:	726f6765 	rsbvc	r6, pc, #26476544	; 0x1940000
 8017bfc:	3a202079 	bcc	881fde8 <__exidx_end+0x807574>
 8017c00:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 8017c04:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 8017c08:	20000a58 	andcs	r0, r0, r8, asr sl
 8017c0c:	646f7250 	strbtvs	r7, [pc], #-592	; 8017c14 <UID_ALL+0xc4>
 8017c10:	20746375 	rsbscs	r6, r4, r5, ror r3
 8017c14:	61746544 	cmnvs	r4, r4, asr #10
 8017c18:	20206c69 	eorcs	r6, r0, r9, ror #24
 8017c1c:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8017c20:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8017c24:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8017c28:	 	strbmi	r0, [r7], #-10

08017c2a <DEVICE_LABEL>:
 8017c2a:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8017c2e:	37303246 	ldrcc	r3, [r0, -r6, asr #4]!
 8017c32:	52204752 	eorpl	r4, r0, #21495808	; 0x1480000
 8017c36:	44204d44 	strtmi	r4, [r0], #-3396	; 0xfffff2bc
 8017c3a:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 8017c3e:	 			; <UNDEFINED> instruction: 0xffff0065

08017c40 <UID_ALL>:
 8017c40:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8017c44:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

08017c46 <RDMConst::MANUFACTURER_ID>:
 8017c46:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

08017c48 <RDMConst::MANUFACTURER_NAME>:
 8017c48:	70747468 	rsbsvc	r7, r4, r8, ror #8
 8017c4c:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 8017c50:	6f2e7777 	svcvs	0x002e7777
 8017c54:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 8017c58:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 8017c5c:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 8017c60:	0067726f 	rsbeq	r7, r7, pc, ror #4
 8017c64:	78383025 	ldmdavc	r8!, {r0, r2, r5, ip, sp}
 8017c68:	3430252d 	ldrtcc	r2, [r0], #-1325	; 0xfffffad3
 8017c6c:	30252d78 	eorcc	r2, r5, r8, ror sp
 8017c70:	252d7834 	strcs	r7, [sp, #-2100]!	; 0xfffff7cc
 8017c74:	25783230 	ldrbcs	r3, [r8, #-560]!	; 0xfffffdd0
 8017c78:	2d783230 	lfmcs	f3, 2, [r8, #-192]!	; 0xffffff40
 8017c7c:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 8017c80:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 8017c84:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 8017c88:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 8017c8c:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 8017c90:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 8017c94:	584d4400 	stmdapl	sp, {sl, lr}^
 8017c98:	6e655320 	cdpvs	3, 6, cr5, cr5, cr0, {1}
 8017c9c:	20000a64 	andcs	r0, r0, r4, ror #20
 8017ca0:	61657242 	cmnvs	r5, r2, asr #4
 8017ca4:	6974206b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, sp}^
 8017ca8:	2020656d 	eorcs	r6, r0, sp, ror #10
 8017cac:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8017cb0:	20000a75 	andcs	r0, r0, r5, ror sl
 8017cb4:	2042414d 	subcs	r4, r2, sp, asr #2
 8017cb8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8017cbc:	20202020 	eorcs	r2, r0, r0, lsr #32
 8017cc0:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8017cc4:	20000a75 	andcs	r0, r0, r5, ror sl
 8017cc8:	72666552 	rsbvc	r6, r6, #343932928	; 0x14800000
 8017ccc:	20687365 	rsbcs	r7, r8, r5, ror #6
 8017cd0:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
 8017cd4:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8017cd8:	20000a75 	andcs	r0, r0, r5, ror sl
 8017cdc:	746f6c53 	strbtvc	r6, [pc], #-3155	; 8017ce4 <RDMConst::MANUFACTURER_NAME+0x9c>
 8017ce0:	20202073 	eorcs	r2, r0, r3, ror r0
 8017ce4:	20202020 	eorcs	r2, r0, r0, lsr #32
 8017ce8:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8017cec:	00000a75 	andeq	r0, r0, r5, ror sl

08017cf0 <vtable for DmxSend>:
	...
 8017cf8:	0800e355 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, sp, lr, pc}
 8017cfc:	0800e43d 	stmdaeq	r0, {r0, r2, r3, r4, r5, sl, sp, lr, pc}
 8017d00:	0800e359 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, sp, lr, pc}
 8017d04:	0800e389 	stmdaeq	r0, {r0, r3, r7, r8, r9, sp, lr, pc}
 8017d08:	0800e3bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, r9, sp, lr, pc}
 8017d0c:	0800e3cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, sp, lr, pc}
 8017d10:	0800e3d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sp, lr, pc}
 8017d14:	0800e3e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, sp, lr, pc}
 8017d18:	08012f75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, sl, fp, sp}
 8017d1c:	08012f6b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r8, r9, sl, fp, sp}
 8017d20:	08012f6f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}
 8017d24:	08012f79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, sl, fp, sp}

08017d28 <DmxParamsConst::BREAK_TIME>:
 8017d28:	61657262 	cmnvs	r5, r2, ror #4
 8017d2c:	69745f6b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 8017d30:	 	movwvc	r6, #1389	; 0x56d

08017d33 <DmxParamsConst::SLOTS_COUNT>:
 8017d33:	746f6c73 	strbtvc	r6, [pc], #-3187	; 8017d3b <DmxParamsConst::SLOTS_COUNT+0x8>
 8017d37:	6f635f73 	svcvs	0x00635f73
 8017d3b:	00746e75 	rsbseq	r6, r4, r5, ror lr

08017d3f <DmxParamsConst::REFRESH_RATE>:
 8017d3f:	72666572 	rsbvc	r6, r6, #478150656	; 0x1c800000
 8017d43:	5f687365 	svcpl	0x00687365
 8017d47:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
	...

08017d4c <DmxParamsConst::MAB_TIME>:
 8017d4c:	5f62616d 	svcpl	0x0062616d
 8017d50:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	...

08017d55 <DmxParamsConst::FILE_NAME>:
 8017d55:	61726170 	cmnvs	r2, r0, ror r1
 8017d59:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 8017d5d:	 	andeq	r7, r0, r8, ror r4

08017d60 <s_DirGpio>:
 8017d60:	40010c00 	andmi	r0, r1, r0, lsl #24
 8017d64:	00000400 	andeq	r0, r0, r0, lsl #8
 8017d68:	40010800 	andmi	r0, r1, r0, lsl #16
 8017d6c:	00000800 	andeq	r0, r0, r0, lsl #16

08017d70 <s_aStorSize>:
 8017d70:	00000060 	andeq	r0, r0, r0, rrx
 8017d74:	00000090 	muleq	r0, r0, r0
 8017d78:	00000020 	andeq	r0, r0, r0, lsr #32
 8017d7c:	00000040 	andeq	r0, r0, r0, asr #32
 8017d80:	00000060 	andeq	r0, r0, r0, rrx
 8017d84:	00000040 	andeq	r0, r0, r0, asr #32
 8017d88:	00000020 	andeq	r0, r0, r0, lsr #32
 8017d8c:	00000020 	andeq	r0, r0, r0, lsr #32
 8017d90:	000001e0 	andeq	r0, r0, r0, ror #3
 8017d94:	00000040 	andeq	r0, r0, r0, asr #32
 8017d98:	00000020 	andeq	r0, r0, r0, lsr #32
 8017d9c:	00000060 	andeq	r0, r0, r0, rrx
 8017da0:	00000030 	andeq	r0, r0, r0, lsr r0
 8017da4:	00000020 	andeq	r0, r0, r0, lsr #32
 8017da8:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 8017dac:	00000030 	andeq	r0, r0, r0, lsr r0
 8017db0:	00000040 	andeq	r0, r0, r0, asr #32
 8017db4:	00000020 	andeq	r0, r0, r0, lsr #32
 8017db8:	00000060 	andeq	r0, r0, r0, rrx
 8017dbc:	00000020 	andeq	r0, r0, r0, lsr #32
 8017dc0:	00000400 	andeq	r0, r0, r0, lsl #8
 8017dc4:	00000020 	andeq	r0, r0, r0, lsr #32
 8017dc8:	00000020 	andeq	r0, r0, r0, lsr #32
 8017dcc:	00000040 	andeq	r0, r0, r0, asr #32
 8017dd0:	00000060 	andeq	r0, r0, r0, rrx
 8017dd4:	00000020 	andeq	r0, r0, r0, lsr #32
 8017dd8:	00000020 	andeq	r0, r0, r0, lsr #32
 8017ddc:	000000c0 	andeq	r0, r0, r0, asr #1

08017de0 <vtable for StoreDisplayUdf>:
	...
 8017de8:	0800f891 	stmdaeq	r0, {r0, r4, r7, fp, ip, sp, lr, pc}
 8017dec:	0800f8dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, fp, ip, sp, lr, pc}
 8017df0:	0800f8b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, fp, ip, sp, lr, pc}
 8017df4:	0800f895 	stmdaeq	r0, {r0, r2, r4, r7, fp, ip, sp, lr, pc}

08017df8 <vtable for StoreDmxSend>:
	...
 8017e00:	0800f8fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, fp, ip, sp, lr, pc}
 8017e04:	0800f949 	stmdaeq	r0, {r0, r3, r6, r8, fp, ip, sp, lr, pc}
 8017e08:	0800f925 	stmdaeq	r0, {r0, r2, r5, r8, fp, ip, sp, lr, pc}
 8017e0c:	0800f901 	stmdaeq	r0, {r0, r8, fp, ip, sp, lr, pc}

08017e10 <vtable for StoreNetwork>:
	...
 8017e18:	0800f969 	stmdaeq	r0, {r0, r3, r5, r6, r8, fp, ip, sp, lr, pc}
 8017e1c:	0800fa7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r9, fp, ip, sp, lr, pc}
 8017e20:	0800f971 	stmdaeq	r0, {r0, r4, r5, r6, r8, fp, ip, sp, lr, pc}
 8017e24:	0800fa91 	stmdaeq	r0, {r0, r4, r7, r9, fp, ip, sp, lr, pc}
 8017e28:	0800fa21 	stmdaeq	r0, {r0, r5, r9, fp, ip, sp, lr, pc}
 8017e2c:	0800f9f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, fp, ip, sp, lr, pc}
 8017e30:	0800f9c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, fp, ip, sp, lr, pc}
 8017e34:	0800fa4d 	stmdaeq	r0, {r0, r2, r3, r6, r9, fp, ip, sp, lr, pc}
 8017e38:	0800f995 	stmdaeq	r0, {r0, r2, r4, r7, r8, fp, ip, sp, lr, pc}
 8017e3c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8017e40:	00000000 	andeq	r0, r0, r0
 8017e44:	0800f96b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r8, fp, ip, sp, lr, pc}
 8017e48:	0800fa89 	stmdaeq	r0, {r0, r3, r7, r9, fp, ip, sp, lr, pc}
 8017e4c:	0800fa45 	stmdaeq	r0, {r0, r2, r6, r9, fp, ip, sp, lr, pc}
 8017e50:	0800fa19 	stmdaeq	r0, {r0, r3, r4, r9, fp, ip, sp, lr, pc}
 8017e54:	0800f9ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, fp, ip, sp, lr, pc}
 8017e58:	0800fa75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, fp, ip, sp, lr, pc}
 8017e5c:	0800f9bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, fp, ip, sp, lr, pc}

08017e60 <vtable for StoreRDMDevice>:
	...
 8017e68:	0800fac9 	stmdaeq	r0, {r0, r3, r6, r7, r9, fp, ip, sp, lr, pc}
 8017e6c:	0800fb39 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, fp, ip, sp, lr, pc}
 8017e70:	0800fad1 	stmdaeq	r0, {r0, r4, r6, r7, r9, fp, ip, sp, lr, pc}
 8017e74:	0800fb4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, fp, ip, sp, lr, pc}
 8017e78:	0800faf5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, fp, ip, sp, lr, pc}
 8017e7c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8017e80:	00000000 	andeq	r0, r0, r0
 8017e84:	0800facb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r9, fp, ip, sp, lr, pc}
 8017e88:	0800fb45 	stmdaeq	r0, {r0, r2, r6, r8, r9, fp, ip, sp, lr, pc}
 8017e8c:	0800fb31 	stmdaeq	r0, {r0, r4, r5, r8, r9, fp, ip, sp, lr, pc}

08017e90 <vtable for StoreRemoteConfig>:
	...
 8017e98:	0800fb89 	stmdaeq	r0, {r0, r3, r7, r8, r9, fp, ip, sp, lr, pc}
 8017e9c:	0800fbd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, r9, fp, ip, sp, lr, pc}
 8017ea0:	0800fbb1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, fp, ip, sp, lr, pc}
 8017ea4:	0800fb8d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, fp, ip, sp, lr, pc}

08017ea8 <vtable for StoreArtNet>:
	...
 8017eb0:	0800fbf9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp, lr, pc}
 8017eb4:	0800fe89 	stmdaeq	r0, {r0, r3, r7, r9, sl, fp, ip, sp, lr, pc}
 8017eb8:	0800fc01 	stmdaeq	r0, {r0, sl, fp, ip, sp, lr, pc}
 8017ebc:	0800fe69 	stmdaeq	r0, {r0, r3, r5, r6, r9, sl, fp, ip, sp, lr, pc}
 8017ec0:	0800fdb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, sl, fp, ip, sp, lr, pc}
 8017ec4:	0800fd85 	stmdaeq	r0, {r0, r2, r7, r8, sl, fp, ip, sp, lr, pc}
 8017ec8:	0800fd59 	stmdaeq	r0, {r0, r3, r4, r6, r8, sl, fp, ip, sp, lr, pc}
 8017ecc:	0800fc25 	stmdaeq	r0, {r0, r2, r5, sl, fp, ip, sp, lr, pc}
 8017ed0:	0800fc6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, sl, fp, ip, sp, lr, pc}
 8017ed4:	0800fc9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, sl, fp, ip, sp, lr, pc}
 8017ed8:	0800fcd1 	stmdaeq	r0, {r0, r4, r6, r7, sl, fp, ip, sp, lr, pc}
 8017edc:	0800fd15 	stmdaeq	r0, {r0, r2, r4, r8, sl, fp, ip, sp, lr, pc}
 8017ee0:	0800fde9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, sl, fp, ip, sp, lr, pc}
 8017ee4:	0800fbf5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, r9, fp, ip, sp, lr, pc}
 8017ee8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8017eec:	00000000 	andeq	r0, r0, r0
 8017ef0:	0800fbfb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp, lr, pc}
 8017ef4:	0800fe95 	stmdaeq	r0, {r0, r2, r4, r7, r9, sl, fp, ip, sp, lr, pc}
 8017ef8:	0800fde1 	stmdaeq	r0, {r0, r5, r6, r7, r8, sl, fp, ip, sp, lr, pc}
 8017efc:	0800fdad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, sl, fp, ip, sp, lr, pc}
 8017f00:	0800fd7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, sl, fp, ip, sp, lr, pc}
 8017f04:	0800fc65 	stmdaeq	r0, {r0, r2, r5, r6, sl, fp, ip, sp, lr, pc}
 8017f08:	0800fc95 	stmdaeq	r0, {r0, r2, r4, r7, sl, fp, ip, sp, lr, pc}
 8017f0c:	0800fcc9 	stmdaeq	r0, {r0, r3, r6, r7, sl, fp, ip, sp, lr, pc}
 8017f10:	0800fbf7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r7, r8, r9, fp, ip, sp, lr, pc}
 8017f14:	0800fd0d 	stmdaeq	r0, {r0, r2, r3, r8, sl, fp, ip, sp, lr, pc}
 8017f18:	0800fd51 	stmdaeq	r0, {r0, r4, r6, r8, sl, fp, ip, sp, lr, pc}
 8017f1c:	0800fe61 	stmdaeq	r0, {r0, r5, r6, r9, sl, fp, ip, sp, lr, pc}
 8017f20:	3a434d46 	bcc	90eb440 <__exidx_end+0x10d2bcc>
 8017f24:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 8017f28:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 8017f2c:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8017f30:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 8017f34:	6f742068 	svcvs	0x00742068
 8017f38:	206c6174 	rsbcs	r6, ip, r4, ror r1
 8017f3c:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 8017f40:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 8017f44:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 8017f48:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 8017f4c:	6374000a 	cmnvs	r4, #10
 8017f50:	65625f70 	strbvs	r5, [r2, #-3952]!	; 0xfffff090
 8017f54:	3a6e6967 	bcc	9bb24f8 <__exidx_end+0x1b99c84>
 8017f58:	6f6f7420 	svcvs	0x006f7420
 8017f5c:	6e616d20 	cdpvs	13, 6, cr6, cr1, cr0, {1}
 8017f60:	6f632079 	svcvs	0x00632079
 8017f64:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
 8017f68:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8017f6c:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
 8017f70:	7500646e 	strvc	r6, [r0, #-1134]	; 0xfffffb92
 8017f74:	6e69626e 	cdpvs	2, 6, cr6, cr9, cr14, {3}
 8017f78:	41000a64 	tstmi	r0, r4, ror #20
 8017f7c:	6c205052 	stcvs	0, cr5, [r0], #-328	; 0xfffffeb8
 8017f80:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
 8017f84:	61662070 	smcvs	25088	; 0x6200
 8017f88:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
 8017f8c:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 8017f90:	61666564 	cmnvs	r6, r4, ror #10
 8017f94:	20746c75 	rsbscs	r6, r4, r5, ror ip
 8017f98:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8017f9c:	0a796177 	beq	9e70580 <__exidx_end+0x1e57d0c>
 8017fa0:	50524100 	subspl	r4, r2, r0, lsl #2
 8017fa4:	6f6f6c20 	svcvs	0x006f6c20
 8017fa8:	2070756b 	rsbscs	r7, r0, fp, ror #10
 8017fac:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 8017fb0:	000a6465 	andeq	r6, sl, r5, ror #8

08017fb4 <NetworkConst::MSG_MDNS_CONFIG>:
 8017fb4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8017fb8:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8017fbc:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8017fc0:	534e444d 	movtpl	r4, #58445	; 0xe44d
	...

08017fc5 <NetworkConst::MSG_NETWORK_INIT>:
 8017fc5:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8017fc9:	206b726f 	rsbcs	r7, fp, pc, ror #4
 8017fcd:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 8017fd1:	34323200 	ldrtcc	r3, [r2], #-512	; 0xfffffe00
 8017fd5:	302e302e 	eorcc	r3, lr, lr, lsr #32
 8017fd9:	3135322e 	teqcc	r5, lr, lsr #4
 8017fdd:	63745f00 	cmnvs	r4, #0, 30
 8017fe1:	6f6c2e70 	svcvs	0x006c2e70
 8017fe5:	006c6163 	rsbeq	r6, ip, r3, ror #2
 8017fe9:	7265735f 	rsbvc	r7, r5, #2080374785	; 0x7c000001
 8017fed:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 8017ff1:	645f2e73 	ldrbvs	r2, [pc], #-3699	; 8017ff9 <NetworkConst::MSG_NETWORK_INIT+0x34>
 8017ff5:	732d736e 			; <UNDEFINED> instruction: 0x732d736e
 8017ff9:	755f2e64 	ldrbvc	r2, [pc, #-3684]	; 801719d <index_js+0x1>
 8017ffd:	6c2e7064 	stcvs	0, cr7, [lr], #-400	; 0xfffffe70
 8018001:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 8018005:	4e446d00 	cdpmi	13, 4, cr6, cr4, cr0, {0}
 8018009:	20000a53 	andcs	r0, r0, r3, asr sl
 801800d:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8018011:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
 8018015:	0a676e69 	beq	99f39c1 <__exidx_end+0x19db14d>
 8018019:	614e2000 	mrsvs	r2, (UNDEF: 78)
 801801d:	3a20656d 	bcc	88315d9 <__exidx_end+0x818d65>
 8018021:	0a732520 	beq	9ce14a9 <__exidx_end+0x1cc8c35>
 8018025:	73252000 			; <UNDEFINED> instruction: 0x73252000
 8018029:	20642520 	rsbcs	r2, r4, r0, lsr #10
 801802d:	000a7325 	andeq	r7, sl, r5, lsr #6
 8018031:	30687465 	rsbcc	r7, r8, r5, ror #8
 8018035:	67696700 	strbvs	r6, [r9, -r0, lsl #14]!
 8018039:	76656461 	strbtvc	r6, [r5], -r1, ror #8
 801803d:	5f656369 	svcpl	0x00656369
 8018041:	74654e00 	strbtvc	r4, [r5], #-3584	; 0xfffff200
 8018045:	6b726f77 	blvs	9cb3e29 <__exidx_end+0x1c9b5b5>
 8018049:	4820000a 	stmdami	r0!, {r1, r3}
 801804d:	6e74736f 	cdpvs	3, 7, cr7, cr4, cr15, {3}
 8018051:	20656d61 	rsbcs	r6, r5, r1, ror #26
 8018055:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8018059:	20000a73 	andcs	r0, r0, r3, ror sl
 801805d:	614e6649 	cmpvs	lr, r9, asr #12
 8018061:	2020656d 	eorcs	r6, r0, sp, ror #10
 8018065:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8018069:	203a6425 	eorscs	r6, sl, r5, lsr #8
 801806d:	000a7325 	andeq	r7, sl, r5, lsr #6
 8018071:	656e4920 	strbvs	r4, [lr, #-2336]!	; 0xfffff6e0
 8018075:	20202074 	eorcs	r2, r0, r4, ror r0
 8018079:	3a202020 	bcc	8820101 <__exidx_end+0x80788d>
 801807d:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 8018081:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8018085:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8018089:	0a64252f 	beq	992154d <__exidx_end+0x1908cd9>
 801808d:	654e2000 	strbvs	r2, [lr, #-0]
 8018091:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 8018095:	2020206b 	eorcs	r2, r0, fp, rrx
 8018099:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801809d:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80180a1:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80180a5:	20000a64 	andcs	r0, r0, r4, ror #20
 80180a9:	65746147 	ldrbvs	r6, [r4, #-327]!	; 0xfffffeb9
 80180ad:	20796177 	rsbscs	r6, r9, r7, ror r1
 80180b1:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80180b5:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80180b9:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80180bd:	0a64252e 	beq	992157d <__exidx_end+0x1908d09>
 80180c1:	72422000 	subvc	r2, r2, #0
 80180c5:	6364616f 	cmnvs	r4, #-1073741797	; 0xc000001b
 80180c9:	20747361 	rsbscs	r7, r4, r1, ror #6
 80180cd:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80180d1:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80180d5:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80180d9:	20000a64 	andcs	r0, r0, r4, ror #20
 80180dd:	2063614d 	rsbcs	r6, r3, sp, asr #2
 80180e1:	20202020 	eorcs	r2, r0, r0, lsr #32
 80180e5:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80180e9:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 80180ed:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 80180f1:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 80180f5:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 80180f9:	3a78322e 	bcc	9e249b9 <__exidx_end+0x1e0c145>
 80180fd:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8018101:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8018105:	20000a78 	andcs	r0, r0, r8, ror sl
 8018109:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 801810d:	20202020 	eorcs	r2, r0, r0, lsr #32
 8018111:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8018115:	000a6325 	andeq	r6, sl, r5, lsr #6
 8018119:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 801811d:	49206369 	stmdbmi	r0!, {r0, r3, r5, r6, r8, r9, sp, lr}
 8018121:	 	rsbvc	r0, r9, r0, asr r0

08018123 <NetworkParamsConst::IP_ADDRESS>:
 8018123:	615f7069 	cmpvs	pc, r9, rrx
 8018127:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 801812b:	 	strvs	r7, [r0], #-883	; 0xfffffc8d

0801812e <NetworkParamsConst::DEFAULT_GATEWAY>:
 801812e:	61666564 	cmnvs	r6, r4, ror #10
 8018132:	5f746c75 	svcpl	0x00746c75
 8018136:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 801813a:	00796177 	rsbseq	r6, r9, r7, ror r1

0801813e <NetworkParamsConst::DHCP_RETRY_TIME>:
 801813e:	70636864 	rsbvc	r6, r3, r4, ror #16
 8018142:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 8018146:	745f7972 	ldrbvc	r7, [pc], #-2418	; 801814e <NetworkParamsConst::HOSTNAME>
 801814a:	00656d69 	rsbeq	r6, r5, r9, ror #26

0801814e <NetworkParamsConst::HOSTNAME>:
 801814e:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 8018152:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08018157 <NetworkParamsConst::NET_MASK>:
 8018157:	5f74656e 	svcpl	0x0074656e
 801815b:	6b73616d 	blvs	9cf0717 <__exidx_end+0x1cd7ea3>
	...

08018160 <NetworkParamsConst::USE_DHCP>:
 8018160:	5f657375 	svcpl	0x00657375
 8018164:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

08018169 <NetworkParamsConst::FILE_NAME>:
 8018169:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 801816d:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 8018171:	00747874 	rsbseq	r7, r4, r4, ror r8
 8018175:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 8018179:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 801817d:	61747320 	cmnvs	r4, r0, lsr #6
 8018181:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 8018185:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8018189:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801818d:	252f6425 	strcs	r6, [pc, #-1061]!	; 8017d70 <s_aStorSize>
 8018191:	63252064 			; <UNDEFINED> instruction: 0x63252064
 8018195:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 8018199:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801819d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80181a1:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 80181a5:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 80181a9:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80181ad:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80181b1:	46006425 	strmi	r6, [r0], -r5, lsr #8
 80181b5:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 80181b9:	20657261 	rsbcs	r7, r5, r1, ror #4
 80181bd:	2a2e2556 	bcs	8ba171d <__exidx_end+0xb88ea9>
 80181c1:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 80181c5:	72205043 	eorvc	r5, r0, #67	; 0x43
 80181c9:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 80181cd:	00676e69 	rsbeq	r6, r7, r9, ror #28
 80181d1:	50434844 	subpl	r4, r3, r4, asr #16
 80181d5:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 80181d9:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 80181dd:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 80181e1:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 80181e5:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 80181e9:	6f647475 	svcvs	0x00647475
 80181ed:	 	strhi	r6, [r0], #-3703	; 0xfffff189

080181f0 <pArray>:
 80181f0:	08018284 	stmdaeq	r1, {r2, r7, r9, pc}
 80181f4:	08018240 	stmdaeq	r1, {r6, r9, pc}
 80181f8:	08018123 	stmdaeq	r1, {r0, r1, r5, r8, pc}
 80181fc:	0801828a 	stmdaeq	r1, {r1, r3, r7, r9, pc}
 8018200:	080183e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, r9, pc}
 8018204:	0801824b 	stmdaeq	r1, {r0, r1, r3, r6, r9, pc}
 8018208:	08017913 	stmdaeq	r1, {r0, r1, r4, r8, fp, ip, sp, lr}
 801820c:	0801814e 	stmdaeq	r1, {r1, r2, r3, r6, r8, pc}
 8018210:	0801832c 	stmdaeq	r1, {r2, r3, r5, r8, r9, pc}
 8018214:	0801833c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, pc}
 8018218:	0801834c 	stmdaeq	r1, {r2, r3, r6, r8, r9, pc}
 801821c:	0801835c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, pc}
 8018220:	08018157 	stmdaeq	r1, {r0, r1, r2, r4, r6, r8, pc}
 8018224:	080183b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, pc}
 8018228:	08017966 	stmdaeq	r1, {r1, r2, r5, r6, r8, fp, ip, sp, lr}
 801822c:	0801797e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r8, fp, ip, sp, lr}
 8018230:	08017996 	stmdaeq	r1, {r1, r2, r4, r7, r8, fp, ip, sp, lr}
 8018234:	080179ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, fp, ip, sp, lr}
 8018238:	0801812e 	stmdaeq	r1, {r1, r2, r3, r5, r8, pc}
 801823c:	08018258 	stmdaeq	r1, {r3, r4, r6, r9, pc}

08018240 <DisplayUdfParamsConst::BOARD_NAME>:
 8018240:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 8018244:	616e5f64 	cmnvs	lr, r4, ror #30
 8018248:	 	tstvs	r0, sp, ror #10

0801824b <DisplayUdfParamsConst::ACTIVE_PORTS>:
 801824b:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 801824f:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 8018253:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

08018258 <DisplayUdfParamsConst::DMX_DIRECTION>:
 8018258:	5f786d64 	svcpl	0x00786d64
 801825c:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8018260:	6f697463 	svcvs	0x00697463
 8018264:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

08018266 <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 8018266:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 801826a:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801826e:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8017d09 <vtable for DmxSend+0x19>
 8018272:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

08018274 <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 8018274:	70696c66 	rsbvc	r6, r9, r6, ror #24
 8018278:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 801827c:	61636974 	smcvs	13972	; 0x3694
 8018280:	00796c6c 	rsbseq	r6, r9, ip, ror #24

08018284 <DisplayUdfParamsConst::TITLE>:
 8018284:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 8018288:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

0801828a <DisplayUdfParamsConst::VERSION>:
 801828a:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801828e:	006e6f69 	rsbeq	r6, lr, r9, ror #30

08018292 <DisplayUdfParamsConst::FILE_NAME>:
 8018292:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8018296:	2e79616c 	rpwcsez	f6, f1, #4.0
 801829a:	00747874 	rsbseq	r7, r4, r4, ror r8

0801829e <DisplayUdfParamsConst::INTENSITY>:
 801829e:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 80182a2:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 80182a6:	20200079 	eorcs	r0, r0, r9, ror r0
 80182aa:	4f002020 	svcmi	0x00002020
 80182ae:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 80182b2:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 80182b6:	64253a64 	strtvs	r3, [r5], #-2660	; 0xfffff59c
 80182ba:	20632520 	rsbcs	r2, r3, r0, lsr #10
 80182be:	4f007325 	svcmi	0x00007325
 80182c2:	203a6425 	eorscs	r6, sl, r5, lsr #8
 80182c6:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 80182ca:	3a64253a 	bcc	99217ba <__exidx_end+0x1908f46>
 80182ce:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 80182d2:	73252063 			; <UNDEFINED> instruction: 0x73252063
 80182d6:	3a632500 	bcc	98e16de <__exidx_end+0x18c8e6a>
 80182da:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 80182de:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80182e2:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80182e6:	3a504100 	bcc	94286ee <__exidx_end+0x140fe7a>
 80182ea:	00642520 	rsbeq	r2, r4, r0, lsr #10
 80182ee:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 80182f2:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 80182f6:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 80182fa:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
 80182fe:	73252200 			; <UNDEFINED> instruction: 0x73252200
 8018302:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8018306:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801830a:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801830e:	2c226425 	cfstrscs	mvf6, [r2], #-148	; 0xffffff6c
 8018312:	73252300 			; <UNDEFINED> instruction: 0x73252300
 8018316:	2e64253d 	mcrcs	5, 3, r2, cr4, cr13, {1}
 801831a:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801831e:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8018322:	2023000a 	eorcs	r0, r3, sl
 8018326:	23207325 			; <UNDEFINED> instruction: 0x23207325
 801832a:	 	cdpvs	0, 7, cr0, cr5, cr10, {0}

0801832c <LightSetParamsConst::UNIVERSE_PORT>:
 801832c:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8018330:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8018334:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018338:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801833c:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8018340:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8018344:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018348:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801834c:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8018350:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8018354:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018358:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801835c:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8018360:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8018364:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8018368:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801836c <LightSetParamsConst::MERGE_MODE_PORT>:
 801836c:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8018370:	6f6d5f65 	svcvs	0x006d5f65
 8018374:	705f6564 	subsvc	r6, pc, r4, ror #10
 8018378:	5f74726f 	svcpl	0x0074726f
 801837c:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 8018380:	5f656772 	svcpl	0x00656772
 8018384:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8018388:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801838c:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8018390:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8018394:	6f6d5f65 	svcvs	0x006d5f65
 8018398:	705f6564 	subsvc	r6, pc, r4, ror #10
 801839c:	5f74726f 	svcpl	0x0074726f
 80183a0:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 80183a4:	5f656772 	svcpl	0x00656772
 80183a8:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 80183ac:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80183b0:	00645f74 	rsbeq	r5, r4, r4, ror pc

080183b4 <LightSetParamsConst::DMX_START_ADDRESS>:
 80183b4:	5f786d64 	svcpl	0x00786d64
 80183b8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 80183bc:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 80183c0:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 80183c4:	 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^

080183c6 <LightSetParamsConst::DISABLE_MERGE_TIMEOUT>:
 80183c6:	61736964 	cmnvs	r3, r4, ror #18
 80183ca:	5f656c62 	svcpl	0x00656c62
 80183ce:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 80183d2:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 80183d6:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8017e71 <vtable for StoreRDMDevice+0x11>
 80183da:	 	smcvs	24580	; 0x6004

080183dc <LightSetParamsConst::FAILSAFE>:
 80183dc:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 80183e0:	65666173 	strbvs	r6, [r6, #-371]!	; 0xfffffe8d
	...

080183e5 <LightSetParamsConst::UNIVERSE>:
 80183e5:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 80183e9:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

080183ee <LightSetParamsConst::DIRECTION>:
 80183ee:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 80183f2:	6f697463 	svcvs	0x00697463
 80183f6:	6f705f6e 	svcvs	0x00705f6e
 80183fa:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 80183fe:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8018402:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8018406:	5f6e6f69 	svcpl	0x006e6f69
 801840a:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801840e:	0000625f 	andeq	r6, r0, pc, asr r2
 8018412:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8018416:	6f697463 	svcvs	0x00697463
 801841a:	6f705f6e 	svcvs	0x00705f6e
 801841e:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 8018422:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8018426:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801842a:	5f6e6f69 	svcpl	0x006e6f69
 801842e:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8018432:	0000645f 	andeq	r6, r0, pc, asr r4
 8018436:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 801843a:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 801843e:	66207961 	strtvs	r7, [r0], -r1, ror #18
 8018442:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 8018446:	31485300 	mrscc	r5, (UNDEF: 120)
 801844a:	00363031 	eorseq	r3, r6, r1, lsr r0
 801844e:	31445353 	cmpcc	r4, r3, asr r3
 8018452:	00363033 	eorseq	r3, r6, r3, lsr r0
 8018456:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 801845a:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 801845e:	000a2964 	andeq	r2, sl, r4, ror #18
 8018462:	aaeeaa40 	bge	7bc2d6a <__stack_size+0x7bc056a>
 8018466:	 	subeq	r0, r0, lr, ror #1

08018468 <_OledFont8x6>:
 8018468:	00000040 	andeq	r0, r0, r0, asr #32
 801846c:	40000000 	andmi	r0, r0, r0
 8018470:	005f0000 	subseq	r0, pc, r0
 8018474:	00400000 	subeq	r0, r0, r0
 8018478:	00070007 	andeq	r0, r7, r7
 801847c:	7f144000 	svcvc	0x00144000
 8018480:	00147f14 	andseq	r7, r4, r4, lsl pc
 8018484:	7f2a2440 	svcvc	0x002a2440
 8018488:	4000122a 	andmi	r1, r0, sl, lsr #4
 801848c:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 8018490:	36400062 	strbcc	r0, [r0], -r2, rrx
 8018494:	50205649 	eorpl	r5, r0, r9, asr #12
 8018498:	08004000 	stmdaeq	r0, {lr}
 801849c:	00000307 	andeq	r0, r0, r7, lsl #6
 80184a0:	221c0040 	andscs	r0, ip, #64	; 0x40
 80184a4:	40000041 	andmi	r0, r0, r1, asr #32
 80184a8:	1c224100 	stfnes	f4, [r2], #-0
 80184ac:	2a400000 	bcs	90184b4 <__exidx_end+0xfffc40>
 80184b0:	2a1c7f1c 	bcs	8738128 <__exidx_end+0x71f8b4>
 80184b4:	08084000 	stmdaeq	r8, {lr}
 80184b8:	0008083e 	andeq	r0, r8, lr, lsr r8
 80184bc:	70800040 	addvc	r0, r0, r0, asr #32
 80184c0:	40000030 	andmi	r0, r0, r0, lsr r0
 80184c4:	08080808 	stmdaeq	r8, {r3, fp}
 80184c8:	00400008 	subeq	r0, r0, r8
 80184cc:	00606000 	rsbeq	r6, r0, r0
 80184d0:	10204000 	eorne	r4, r0, r0
 80184d4:	00020408 	andeq	r0, r2, r8, lsl #8
 80184d8:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 80184dc:	40003e45 	andmi	r3, r0, r5, asr #28
 80184e0:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 80184e4:	72400000 	subvc	r0, r0, #0
 80184e8:	46494949 	strbmi	r4, [r9], -r9, asr #18
 80184ec:	41214000 			; <UNDEFINED> instruction: 0x41214000
 80184f0:	00334d49 	eorseq	r4, r3, r9, asr #26
 80184f4:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 80184f8:	4000107f 	andmi	r1, r0, pc, ror r0
 80184fc:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 8018500:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 8018504:	3149494a 	cmpcc	r9, sl, asr #18
 8018508:	21414000 	mrscs	r4, (UNDEF: 65)
 801850c:	00070911 	andeq	r0, r7, r1, lsl r9
 8018510:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 8018514:	40003649 	andmi	r3, r0, r9, asr #12
 8018518:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 801851c:	0040001e 	subeq	r0, r0, lr, lsl r0
 8018520:	00001400 	andeq	r1, r0, r0, lsl #8
 8018524:	40004000 	andmi	r4, r0, r0
 8018528:	00000034 	andeq	r0, r0, r4, lsr r0
 801852c:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 8018530:	40004122 	andmi	r4, r0, r2, lsr #2
 8018534:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 8018538:	00400014 	subeq	r0, r0, r4, lsl r0
 801853c:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 8018540:	01024000 	mrseq	r4, (UNDEF: 2)
 8018544:	00060959 	andeq	r0, r6, r9, asr r9
 8018548:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 801854c:	40004e59 	andmi	r4, r0, r9, asr lr
 8018550:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 8018554:	7f40007c 	svcvc	0x0040007c
 8018558:	36494949 	strbcc	r4, [r9], -r9, asr #18
 801855c:	413e4000 	teqmi	lr, r0
 8018560:	00224141 	eoreq	r4, r2, r1, asr #2
 8018564:	41417f40 	cmpmi	r1, r0, asr #30
 8018568:	40003e41 	andmi	r3, r0, r1, asr #28
 801856c:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 8018570:	7f400041 	svcvc	0x00400041
 8018574:	01090909 	tsteq	r9, r9, lsl #18
 8018578:	413e4000 	teqmi	lr, r0
 801857c:	00735141 	rsbseq	r5, r3, r1, asr #2
 8018580:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 8018584:	40007f08 	andmi	r7, r0, r8, lsl #30
 8018588:	417f4100 	cmnmi	pc, r0, lsl #2
 801858c:	20400000 	subcs	r0, r0, r0
 8018590:	013f4140 	teqeq	pc, r0, asr #2
 8018594:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 8018598:	00412214 	subeq	r2, r1, r4, lsl r2
 801859c:	40407f40 	submi	r7, r0, r0, asr #30
 80185a0:	40004040 	andmi	r4, r0, r0, asr #32
 80185a4:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 80185a8:	7f40007f 	svcvc	0x0040007f
 80185ac:	7f100804 	svcvc	0x00100804
 80185b0:	413e4000 	teqmi	lr, r0
 80185b4:	003e4141 	eorseq	r4, lr, r1, asr #2
 80185b8:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 80185bc:	40000609 	andmi	r0, r0, r9, lsl #12
 80185c0:	2151413e 	cmpcs	r1, lr, lsr r1
 80185c4:	7f40005e 	svcvc	0x0040005e
 80185c8:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 80185cc:	49264000 	stmdbmi	r6!, {lr}
 80185d0:	00324949 	eorseq	r4, r2, r9, asr #18
 80185d4:	7f010340 	svcvc	0x00010340
 80185d8:	40000301 	andmi	r0, r0, r1, lsl #6
 80185dc:	4040403f 	submi	r4, r0, pc, lsr r0
 80185e0:	1f40003f 	svcne	0x0040003f
 80185e4:	1f204020 	svcne	0x00204020
 80185e8:	403f4000 	eorsmi	r4, pc, r0
 80185ec:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 80185f0:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 80185f4:	40006314 	andmi	r6, r0, r4, lsl r3
 80185f8:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 80185fc:	61400003 	cmpvs	r0, r3
 8018600:	434d4959 	movtmi	r4, #55641	; 0xd959
 8018604:	7f004000 	svcvc	0x00004000
 8018608:	00414141 	subeq	r4, r1, r1, asr #2
 801860c:	08040240 	stmdaeq	r4, {r6, r9}
 8018610:	40002010 	andmi	r2, r0, r0, lsl r0
 8018614:	41414100 	mrsmi	r4, (UNDEF: 81)
 8018618:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 801861c:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 8018620:	40404000 	submi	r4, r0, r0
 8018624:	00404040 	subeq	r4, r0, r0, asr #32
 8018628:	07030040 	streq	r0, [r3, -r0, asr #32]
 801862c:	40000008 	andmi	r0, r0, r8
 8018630:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 8018634:	7f400040 	svcvc	0x00400040
 8018638:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 801863c:	44384000 	ldrtmi	r4, [r8], #-0
 8018640:	00284444 	eoreq	r4, r8, r4, asr #8
 8018644:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 8018648:	40007f28 	andmi	r7, r0, r8, lsr #30
 801864c:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 8018650:	00400018 	subeq	r0, r0, r8, lsl r0
 8018654:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 8018658:	a4184000 	ldrge	r4, [r8], #-0
 801865c:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 8018660:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 8018664:	40007804 	andmi	r7, r0, r4, lsl #16
 8018668:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 801866c:	20400000 	subcs	r0, r0, r0
 8018670:	003d4040 	eorseq	r4, sp, r0, asr #32
 8018674:	107f4000 	rsbsne	r4, pc, r0
 8018678:	00004428 	andeq	r4, r0, r8, lsr #8
 801867c:	7f410040 	svcvc	0x00410040
 8018680:	40000040 	andmi	r0, r0, r0, asr #32
 8018684:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 8018688:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 801868c:	78040408 	stmdavc	r4, {r3, sl}
 8018690:	44384000 	ldrtmi	r4, [r8], #-0
 8018694:	00384444 	eorseq	r4, r8, r4, asr #8
 8018698:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 801869c:	40001824 	andmi	r1, r0, r4, lsr #16
 80186a0:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 80186a4:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 80186a8:	08040408 	stmdaeq	r4, {r3, sl}
 80186ac:	54484000 	strbpl	r4, [r8], #-0
 80186b0:	00245454 	eoreq	r5, r4, r4, asr r4
 80186b4:	3f040440 	svccc	0x00040440
 80186b8:	40002444 	andmi	r2, r0, r4, asr #8
 80186bc:	2040403c 	subcs	r4, r0, ip, lsr r0
 80186c0:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 80186c4:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 80186c8:	403c4000 	eorsmi	r4, ip, r0
 80186cc:	003c4030 	eorseq	r4, ip, r0, lsr r0
 80186d0:	10284440 	eorne	r4, r8, r0, asr #8
 80186d4:	40004428 	andmi	r4, r0, r8, lsr #8
 80186d8:	9090904c 	addsls	r9, r0, ip, asr #32
 80186dc:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 80186e0:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 80186e4:	08004000 	stmdaeq	r0, {lr}
 80186e8:	00004136 	andeq	r4, r0, r6, lsr r1
 80186ec:	77000040 	strvc	r0, [r0, -r0, asr #32]
 80186f0:	40000000 	andmi	r0, r0, r0
 80186f4:	08364100 	ldmdaeq	r6!, {r8, lr}
 80186f8:	02400000 	subeq	r0, r0, #0
 80186fc:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 8018700:	263c4000 	ldrtcs	r4, [ip], -r0
 8018704:	003c2623 	eorseq	r2, ip, r3, lsr #12

08018708 <oled_128x32_init>:
 8018708:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 801870c:	4000d31f 	andmi	sp, r0, pc, lsl r3
 8018710:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8018714:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 8018718:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 801871c:	a6a440db 	ssatge	r4, #5, fp, asr #1

08018720 <oled_128x64_init>:
 8018720:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8018724:	4000d33f 	andmi	sp, r0, pc, lsr r3
 8018728:	0020148d 	eoreq	r1, r0, sp, lsl #9
 801872c:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 8018730:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8018734:	a6a440db 	ssatge	r4, #5, fp, asr #1

08018738 <vtable for Ssd1306>:
	...
 8018740:	080130d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, ip, sp}
 8018744:	08013105 	stmdaeq	r1, {r0, r2, r8, ip, sp}
 8018748:	08013415 	stmdaeq	r1, {r0, r2, r4, sl, ip, sp}
 801874c:	0801339d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, r9, ip, sp}
 8018750:	08013269 	stmdaeq	r1, {r0, r3, r5, r6, r9, ip, sp}
 8018754:	08013125 	stmdaeq	r1, {r0, r2, r5, r8, ip, sp}
 8018758:	0801314d 	stmdaeq	r1, {r0, r2, r3, r6, r8, ip, sp}
 801875c:	0801323f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r9, ip, sp}
 8018760:	080131f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, ip, sp}
 8018764:	080130db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, ip, sp}
 8018768:	080132a5 	stmdaeq	r1, {r0, r2, r5, r7, r9, ip, sp}
 801876c:	080132b1 	stmdaeq	r1, {r0, r4, r5, r7, r9, ip, sp}
 8018770:	080132cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r9, ip, sp}
 8018774:	080130dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, ip, sp}
 8018778:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 801877c:	5b1b006d 	blpl	86d8938 <__exidx_end+0x6c00c4>
 8018780:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 8018784:	31335b1b 	teqcc	r3, fp, lsl fp
 8018788:	5b1b006d 	blpl	86d8944 <__exidx_end+0x6c00d0>
 801878c:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 8018790:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 8018794:	5b1b006d 	blpl	86d8950 <__exidx_end+0x6c00dc>
 8018798:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 801879c:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 80187a0:	205d732a 	subscs	r7, sp, sl, lsr #6
 80187a4:	43207325 			; <UNDEFINED> instruction: 0x43207325
 80187a8:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 80187ac:	2064656c 	rsbcs	r6, r4, ip, ror #10
 80187b0:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 80187b4:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 80187b8:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 80187bc:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 80187c0:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 80187c4:	203a636f 	eorscs	r6, sl, pc, ror #6
 80187c8:	000a7525 	andeq	r7, sl, r5, lsr #10
 80187cc:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 80187d0:	203a636f 	eorscs	r6, sl, pc, ror #6
 80187d4:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 80187d8:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 80187dc:	6b636f6c 	blvs	98f4594 <__exidx_end+0x18dbd20>
 80187e0:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 80187e4:	000a7469 	andeq	r7, sl, r9, ror #8
 80187e8:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 80187ec:	203a636f 	eorscs	r6, sl, pc, ror #6
 80187f0:	6f6c4270 	svcvs	0x006c4270
 80187f4:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 80187f8:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 80187fc:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 8018800:	7a697320 	bvc	9a75488 <__exidx_end+0x1a5cc14>
 8018804:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 8018808:	6164202c 	cmnvs	r4, ip, lsr #32
 801880c:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 8018810:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 8018814:	3a656572 	bcc	9971de4 <__exidx_end+0x1959570>
 8018818:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 801881c:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8018820:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8018824:	203d2072 	eorscs	r2, sp, r2, ror r0
 8018828:	202c7025 	eorcs	r7, ip, r5, lsr #32
 801882c:	6f6c4270 	svcvs	0x006c4270
 8018830:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 8018834:	0a702520 	beq	9c21cbc <__exidx_end+0x1c09448>
 8018838:	00000000 	andeq	r0, r0, r0

0801883c <days_of_month>:
 801883c:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018840:	0000001c 	andeq	r0, r0, ip, lsl r0
 8018844:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018848:	0000001e 	andeq	r0, r0, lr, lsl r0
 801884c:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018850:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018854:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018858:	0000001f 	andeq	r0, r0, pc, lsl r0
 801885c:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018860:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018864:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018868:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

0801886c <__exidx_start>:
 801886c:	7fffd9b8 	svcvc	0x00ffd9b8
 8018870:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

08018874 <.ARM.attributes>:
 8018874:	00002e41 	andeq	r2, r0, r1, asr #28
 8018878:	61656100 	cmnvs	r5, r0, lsl #2
 801887c:	01006962 	tsteq	r0, r2, ror #18
 8018880:	00000024 	andeq	r0, r0, r4, lsr #32
 8018884:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 8018888:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 801888c:	0600334d 	streq	r3, [r0], -sp, asr #6
 8018890:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 8018894:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 8018898:	17011501 	strne	r1, [r1, -r1, lsl #10]
 801889c:	1a011803 	bne	805e8b0 <__exidx_end+0x4603c>
 80188a0:	Address 0x00000000080188a0 is out of bounds.


Disassembly of section .data:

20000000 <s_nDmxTransmitPeriod>:
20000000:	000061a8 	andeq	r6, r0, r8, lsr #3

20000004 <s_nDmxTransmitMabTime>:
20000004:	0000000c 	andeq	r0, r0, ip

20000008 <s_nDmxTransmitBreakTime>:
20000008:	0000005c 	andeq	r0, r0, ip, asr r0

2000000c <DmxConfigUdp::s_nHandle>:
2000000c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000010 <s_multicast_mac>:
20000010:	005e0001 	subseq	r0, lr, r1
20000014:	00000000 	andeq	r0, r0, r0

20000018 <MDNS::s_nHandle>:
20000018:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

2000001c <next_block>:
2000001c:	2003c000 	andcs	ip, r3, r0

20000020 <s_block_bucket>:
20000020:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000030:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000040:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000050:	00000060 	andeq	r0, r0, r0, rrx
	...
20000060:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000070:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000080:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000090:	00000180 	andeq	r0, r0, r0, lsl #3
	...
200000a0:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000b0:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000c0:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000d0:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000f0 <SystemCoreClock>:
200000f0:	07270e00 	streq	r0, [r7, -r0, lsl #28]!

Disassembly of section .bss:

200000f8 <DmxInput::s_nStarted>:
200000f8:	00000000 	andeq	r0, r0, r0

200000fc <RemoteConfig::s_pUdpBuffer>:
200000fc:	00000000 	andeq	r0, r0, r0

20000100 <RemoteConfig::s_RemoteConfigListBin>:
	...

20000124 <RemoteConfig::s_pThis>:
20000124:	00000000 	andeq	r0, r0, r0

20000128 <HttpDaemon::m_Content>:
	...

200006c8 <guard variable for lightset::Data::Get()::instance>:
200006c8:	00000000 	andeq	r0, r0, r0

200006cc <lightset::Data::Get()::instance>:
	...

200012d4 <ArtNetNode::s_pThis>:
200012d4:	00000000 	andeq	r0, r0, r0

200012d8 <s_ReceivingMask>:
200012d8:	00000000 	andeq	r0, r0, r0

200012dc <ip>:
200012dc:	00000000 	andeq	r0, r0, r0

200012e0 <ip>:
200012e0:	00000000 	andeq	r0, r0, r0

200012e4 <s_nPortsMax>:
200012e4:	00000000 	andeq	r0, r0, r0

200012e8 <E131Bridge::s_pThis>:
200012e8:	00000000 	andeq	r0, r0, r0

200012ec <s_ReceivingMask>:
200012ec:	00000000 	andeq	r0, r0, r0

200012f0 <s_nPortsMax>:
200012f0:	00000000 	andeq	r0, r0, r0

200012f4 <ArtNetRdmController::s_rdmMessage>:
	...

200013f4 <ArtNetRdmController::s_nPorts>:
200013f4:	00000000 	andeq	r0, r0, r0

200013f8 <ArtNetRdmController::m_pRDMTod>:
	...

20001400 <uuid_cast>:
	...

20001408 <DmxSend::s_nStarted>:
20001408:	00000000 	andeq	r0, r0, r0

2000140c <s_RxBuffer>:
	...

2000182c <s_TxBuffer>:
	...

20001c34 <sv_PortState>:
	...

20001c3c <sv_nRxDmxPackets>:
	...

20001c5c <sv_nUartsSending>:
20001c5c:	00000000 	andeq	r0, r0, r0

20001c60 <Dmx::s_pThis>:
20001c60:	00000000 	andeq	r0, r0, r0

20001c64 <gv_RdmDataReceiveEnd>:
20001c64:	00000000 	andeq	r0, r0, r0

20001c68 <s_nLastSendMicros>:
	...

20001c70 <s_TransactionNumber>:
20001c70:	00000000 	andeq	r0, r0, r0

20001c74 <DmxConfigUdp::s_pUdpBuffer>:
20001c74:	00000000 	andeq	r0, r0, r0

20001c78 <SpiFlashStore::s_nWaitMillis>:
20001c78:	00000000 	andeq	r0, r0, r0

20001c7c <SpiFlashStore::s_SpiFlashData>:
	...

20002c7c <SpiFlashStore::s_nStartAddress>:
20002c7c:	00000000 	andeq	r0, r0, r0

20002c80 <SpiFlashStore::s_bHaveFlashChip>:
20002c80:	00000000 	andeq	r0, r0, r0

20002c84 <SpiFlashStore::s_nSpiFlashStoreSize>:
20002c84:	00000000 	andeq	r0, r0, r0

20002c88 <SpiFlashStore::s_State>:
20002c88:	00000000 	andeq	r0, r0, r0

20002c8c <SpiFlashStore::s_pThis>:
20002c8c:	00000000 	andeq	r0, r0, r0

20002c90 <SpiFlashStore::s_bIsNew>:
20002c90:	00000000 	andeq	r0, r0, r0

20002c94 <StoreDisplayUdf::s_pThis>:
20002c94:	00000000 	andeq	r0, r0, r0

20002c98 <StoreDmxSend::s_pThis>:
20002c98:	00000000 	andeq	r0, r0, r0

20002c9c <StoreNetwork::s_pThis>:
20002c9c:	00000000 	andeq	r0, r0, r0

20002ca0 <StoreRDMDevice::s_pThis>:
20002ca0:	00000000 	andeq	r0, r0, r0

20002ca4 <StoreRemoteConfig::s_pThis>:
20002ca4:	00000000 	andeq	r0, r0, r0

20002ca8 <StoreArtNet::s_nPortIndexOffset>:
20002ca8:	00000000 	andeq	r0, r0, r0

20002cac <StoreArtNet::s_pThis>:
20002cac:	00000000 	andeq	r0, r0, r0

20002cb0 <StoreE131::s_pThis>:
20002cb0:	00000000 	andeq	r0, r0, r0

20002cb4 <FlashRom::s_pThis>:
20002cb4:	00000000 	andeq	r0, r0, r0

20002cb8 <flashrom::s_nAddress>:
20002cb8:	00000000 	andeq	r0, r0, r0

20002cbc <flashrom::s_State>:
20002cbc:	00000000 	andeq	r0, r0, r0

20002cc0 <flashrom::s_nPage>:
20002cc0:	00000000 	andeq	r0, r0, r0

20002cc4 <flashrom::s_pData>:
20002cc4:	00000000 	andeq	r0, r0, r0

20002cc8 <flashrom::s_isBank0>:
20002cc8:	00000000 	andeq	r0, r0, r0

20002ccc <flashrom::s_nLength>:
20002ccc:	00000000 	andeq	r0, r0, r0

20002cd0 <g_ip_info>:
	...

20002cdc <g_mac_address>:
20002cdc:	00000000 	andeq	r0, r0, r0
	...

20002ce2 <s_is_dhcp>:
	...

20002ce4 <s_p>:
20002ce4:	00000000 	andeq	r0, r0, r0

20002ce8 <s_ticker>:
20002ce8:	00000000 	andeq	r0, r0, r0

20002cec <s_mac_address>:
	...

20002cf4 <s_mac_address_arp_reply>:
	...

20002cfc <s_id>:
20002cfc:	00000000 	andeq	r0, r0, r0

20002d00 <s_recv_queue>:
	...

20003870 <s_tcb>:
	...

200038b4 <s_tcp>:
	...

20003ea0 <broadcast_mask>:
20003ea0:	00000000 	andeq	r0, r0, r0

20003ea4 <gw_ip>:
20003ea4:	00000000 	andeq	r0, r0, r0

20003ea8 <on_network_mask>:
20003ea8:	00000000 	andeq	r0, r0, r0

20003eac <s_id>:
20003eac:	00000000 	andeq	r0, r0, r0

20003eb0 <s_ports_allowed>:
	...

20003ed0 <s_recv_queue>:
	...

20009b70 <s_send_packet>:
	...

2000a15c <MDNS::s_nRemoteIp>:
2000a15c:	00000000 	andeq	r0, r0, r0

2000a160 <MDNS::s_nRemotePort>:
2000a160:	00000000 	andeq	r0, r0, r0

2000a164 <MDNS::s_nMulticastIp>:
2000a164:	00000000 	andeq	r0, r0, r0

2000a168 <MDNS::s_AnswerLocalIp>:
	...

2000a36c <MDNS::s_ServiceRecords>:
	...

2000a38c <MDNS::s_nBytesReceived>:
2000a38c:	00000000 	andeq	r0, r0, r0

2000a390 <MDNS::s_ServiceRecordsData>:
	...

2000a594 <MDNS::s_pName>:
2000a594:	00000000 	andeq	r0, r0, r0

2000a598 <MDNS::s_pBuffer>:
2000a598:	00000000 	andeq	r0, r0, r0

2000a59c <Network::s_pThis>:
2000a59c:	00000000 	andeq	r0, r0, r0

2000a5a0 <s_arp_announce>:
	...

2000a5cc <s_arp_reply>:
	...

2000a5f8 <s_arp_request>:
	...

2000a624 <s_arp_records>:
	...

2000a7a4 <s_entry_current>:
2000a7a4:	00000000 	andeq	r0, r0, r0

2000a7a8 <s_dhcp_allocated_gw>:
2000a7a8:	00000000 	andeq	r0, r0, r0

2000a7ac <s_dhcp_allocated_ip>:
2000a7ac:	00000000 	andeq	r0, r0, r0

2000a7b0 <s_dhcp_allocated_netmask>:
2000a7b0:	00000000 	andeq	r0, r0, r0

2000a7b4 <s_dhcp_message>:
	...

2000a9d8 <s_dhcp_server_ip>:
2000a9d8:	00000000 	andeq	r0, r0, r0

2000a9dc <s_groups>:
	...

2000aafc <s_id>:
2000aafc:	00000000 	andeq	r0, r0, r0

2000ab00 <s_joins_allowed_index>:
2000ab00:	00000000 	andeq	r0, r0, r0

2000ab04 <s_leave>:
	...

2000ab34 <s_multicast_mac>:
	...

2000ab3c <s_report>:
	...

2000ab6c <DisplayUdf::s_pThis>:
2000ab6c:	00000000 	andeq	r0, r0, r0

2000ab70 <PropertiesConfig::s_Config>:
2000ab70:	00000000 	andeq	r0, r0, r0

2000ab74 <Display::s_pThis>:
2000ab74:	00000000 	andeq	r0, r0, r0

2000ab78 <_ClearBuffer>:
	...

2000ac00 <Ssd1306::s_pThis>:
2000ac00:	00000000 	andeq	r0, r0, r0

2000ac04 <FirmwareVersion::s_FirmwareVersion>:
	...

2000ac1a <FirmwareVersion::s_Print>:
	...

2000ac5c <FirmwareVersion::s_pThis>:
2000ac5c:	00000000 	andeq	r0, r0, r0

2000ac60 <LedBlink::s_pThis>:
2000ac60:	00000000 	andeq	r0, r0, r0

2000ac64 <Hardware::s_pThis>:
2000ac64:	00000000 	andeq	r0, r0, r0

2000ac68 <outptr>:
2000ac68:	00000000 	andeq	r0, r0, r0

2000ac6c <last.0>:
2000ac6c:	00000000 	andeq	r0, r0, r0

2000ac70 <s_micros>:
	...

2000ac78 <set_timer>:
2000ac78:	00000000 	andeq	r0, r0, r0

2000ac7c <s_nSysTickMillis>:
2000ac7c:	00000000 	andeq	r0, r0, r0

2000ac80 <s_nAddress>:
2000ac80:	00000000 	andeq	r0, r0, r0

2000ac84 <dma_current_ptp_rxdesc>:
2000ac84:	00000000 	andeq	r0, r0, r0

2000ac88 <dma_current_ptp_txdesc>:
2000ac88:	00000000 	andeq	r0, r0, r0

2000ac8c <dma_current_rxdesc>:
2000ac8c:	00000000 	andeq	r0, r0, r0

2000ac90 <dma_current_txdesc>:
2000ac90:	00000000 	andeq	r0, r0, r0

2000ac94 <enet_initpara>:
	...

2000acd0 <rx_buff>:
	...

2000dc70 <rxdesc_tab>:
	...

2000dcf0 <tx_buff>:
	...

2000e8d8 <txdesc_tab>:
	...

Disassembly of section .heap:

2003c000 <heap_low>:
	...

Disassembly of section .stack:

2003d800 <_sp-0x2800>:
	...
